void ___Z11getUIMRefIdIN3cat9SetupCall10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  NSObject *v3;
  int v4;
  _DWORD v5[2];
  uint64_t v6;

  v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupCall10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z19getHelpAvailabilityIN3cat9SetupMenu10IndicationEE16HelpAvailabilityPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (*a2 <= 1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  }
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Help Availability: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z19getSoftkeySelectionIN3cat9SetupMenu10IndicationEE16SoftkeySelectionPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (*a2 <= 1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  }
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Softkey Selection: %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z17getSelectionItemsIN3cat9SetupMenu10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t *a2)
{
  v2 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2 != a2) {
    std::vector<cat::tlv::Item>::__assign_with_size[abi:ne180100]<cat::tlv::Item*,cat::tlv::Item*>(v2, (unsigned char *)*a2, (unsigned char *)a2[1], (a2[1] - *a2) >> 5);
  }
}

char **___Z17getSelectionItemsIN3cat9SetupMenu10IndicationEENSt3__16vectorI13SelectionItemNS3_9allocatorIS5_EEEEPKN3ctu11OsLogLoggerERKT__block_invoke_2(uint64_t a1, char **a2)
{
  result = (char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != a2) {
    return (char **)std::vector<QMI_NextActionIndicator>::__assign_with_size[abi:ne180100]<QMI_NextActionIndicator*,QMI_NextActionIndicator*>(result, *a2, a2[1], (a2[1] - *a2) >> 2);
  }
  return result;
}

void ___Z8getAlphaIN3cat9SetupMenu10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z14getDefaultItemIN3cat9SetupMenu10IndicationEEiPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *a2;
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Received default item: %d", (uint8_t *)v5, 8u);
  }
}

void ___Z11getUIMRefIdIN3cat9SetupMenu10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupMenu10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z13getTextStringIN3cat17SetupIdleModeText10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded text string %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat17SetupIdleModeText10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat17SetupIdleModeText10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z11getUIMRefIdIN3cat20ProvideLocalInfoLang10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat20ProvideLocalInfoLang10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z7getDTMFIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, const std::string *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  std::string::operator=((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v5 = (void *)(v4 + 40);
    if (*(char *)(v4 + 63) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    int v6 = 136315138;
    int v7 = v5;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Received DTMF Address: %s", (uint8_t *)&v6, 0xCu);
  }
}

void ___Z8getAlphaIN3cat9SetupDtmf10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  uint64_t v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    int v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      int v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat9SetupDtmf10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat9SetupDtmf10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z31getSpecificLanguageNotificationIN3cat20LanguageNotification10IndicationEE24SpecificLanguagePresencePKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (*a2 <= 1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  }
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Language presence: %d, mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

void ___Z11getLanguageIN3cat20LanguageNotification10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 8);
  int v4 = (void *)(v3 + 40);
  if (*(char *)(v3 + 63) < 0) {
    int v4 = (void *)*v4;
  }
  *(unsigned char *)int v4 = *a2;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
  uint64_t v6 = (uint64_t *)(v5 + 40);
  if (*(char *)(v5 + 63) < 0) {
    uint64_t v6 = (uint64_t *)*v6;
  }
  *((unsigned char *)v6 + 1) = a2[1];
  __int16 v7 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v9 = (void *)(v8 + 40);
    if (*(char *)(v8 + 63) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    int v10 = 136315138;
    int v11 = v9;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Received language: %s", (uint8_t *)&v10, 0xCu);
  }
}

void ___Z11getUIMRefIdIN3cat20LanguageNotification10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  uint64_t v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat20LanguageNotification10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  uint64_t v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z23getNotificationRequiredIN3cat14SetupEventList10IndicationEE23NotificationRequirementPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, int *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v3 = *a2;
  if (*a2 <= 1) {
    *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = v3;
  }
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v6[0] = 67109376;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Received Notification Requirement %d, and mapped to: %d", (uint8_t *)v6, 0xEu);
  }
}

uint64_t qmi::MessageBase::applyTlv<cat::tlv::NotificationRequired,void({block_pointer}&)(cat::tlv::NotificationRequired const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<cat::tlv::NotificationRequired>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 70, v6, v7);
    }
  }
  return result;
}

void ___Z11getUIMRefIdIN3cat14SetupEventList10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat14SetupEventList10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat11OpenChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat11OpenChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat11OpenChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat12CloseChannel10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat12CloseChannel10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat12CloseChannel10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat11ReceiveData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat11ReceiveData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat11ReceiveData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat8SendData10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat8SendData10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat8SendData10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z8getAlphaIN3cat12RefreshAlpha10IndicationEENSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  getDataCodingScheme(*a2);
  decodeString();
  int v4 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 8);
    uint64_t v6 = (void *)(v5 + 40);
    if (*(char *)(v5 + 63) < 0) {
      uint64_t v6 = (void *)*v6;
    }
    int v7 = *a2;
    int v8 = 136315394;
    uint64_t v9 = v6;
    __int16 v10 = 1024;
    int v11 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Decoded Alpha %s with coding scheme %d", (uint8_t *)&v8, 0x12u);
  }
}

void ___Z11getUIMRefIdIN3cat12RefreshAlpha10IndicationEEjPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(_DWORD *)(a2 + 4);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I UIM Reference ID %d", (uint8_t *)v5, 8u);
  }
}

void ___Z14getBBSessionIdIN3cat12RefreshAlpha10IndicationEEhPKN3ctu11OsLogLoggerERKT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = *(unsigned char *)(a2 + 8);
  int v3 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 32) + 8) + 24);
    v5[0] = 67109120;
    v5[1] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Session ID %d", (uint8_t *)v5, 8u);
  }
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::Slot>(uint64_t a1, int a2)
{
  v2 = *(const void ***)(a1 + 8);
  int v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Slot>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::TerminalResponse>(uint64_t a1)
{
  v1 = *(const void ***)(a1 + 8);
  v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BD1E8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BD1E8;
  v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::TerminalResponse>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<cat::tlv::TerminalResponse>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TerminalResponse>::clone()
{
}

void sub_22239FACC(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C4085B429EELL);
  _Unwind_Resume(a1);
}

void std::vector<unsigned char>::__append(unint64_t *a1, size_t a2)
{
  uint64_t v5 = (char *)a1[1];
  uint64_t v4 = (char *)a1[2];
  if (v4 - v5 >= a2)
  {
    if (a2)
    {
      bzero((void *)a1[1], a2);
      v5 += a2;
    }
    a1[1] = (unint64_t)v5;
  }
  else
  {
    unint64_t v6 = *a1;
    uint64_t v7 = &v5[-*a1];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = (unint64_t)&v4[-v6];
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v8;
    }
    if (v10) {
      unint64_t v11 = (unint64_t)operator new(v10);
    }
    else {
      unint64_t v11 = 0;
    }
    uint64_t v12 = &v7[v11];
    v13 = (char *)(v11 + v10);
    bzero(v12, a2);
    if (v5 == (char *)v6)
    {
      unint64_t v11 = (unint64_t)v12;
    }
    else
    {
      v14 = &v5[~v6];
      do
      {
        char v15 = *--v5;
        (v14--)[v11] = v15;
      }
      while (v5 != (char *)v6);
      uint64_t v5 = (char *)*a1;
    }
    *a1 = v11;
    a1[1] = (unint64_t)&v12[a2];
    a1[2] = (unint64_t)v13;
    if (v5)
    {
      operator delete(v5);
    }
  }
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD238;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD238;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::GetInkeyExtraInfo>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<cat::tlv::GetInkeyExtraInfo>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::GetInkeyExtraInfo>::clone()
{
}

void sub_22239FDF0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C409CA0F745);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::LanguageInfo>(uint64_t a1, int a2)
{
  v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 9));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::LanguageInfo>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD2D8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD2D8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::TextString>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<cat::tlv::TextString>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TextString>::clone()
{
}

void sub_2223A0268(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4040040ABCLL);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::ItemIdentifier>(uint64_t a1, int a2)
{
  v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::ItemIdentifier>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::EnvelopeCommand>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::EnvelopeCommand>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::HelpRequest>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::Address>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 20)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD418;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD418;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<cat::tlv::Address>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::Address>::clone()
{
}

void sub_2223A0C10(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

double getAddressTlvFromCSIPhoneNumber<cat::tlv::Address>(CSIPhoneNumber *a1, uint64_t a2)
{
  *(unsigned char *)a2 = (CSIPhoneNumber::getTypeOfAddress(a1) >> 4) & 3;
  *(unsigned char *)(a2 + 1) = CSIPhoneNumber::getTypeOfAddress(a1) & 0xF;
  CSIPhoneNumber::getBaseNumber((uint64_t *)&v6, a1);
  uint64_t v4 = (void **)(a2 + 8);
  if (*(char *)(a2 + 31) < 0) {
    operator delete(*v4);
  }
  double result = *(double *)&v6;
  *(_OWORD *)uint64_t v4 = v6;
  *(void *)(a2 + 24) = v7;
  return result;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD468;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD468;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<p2p::tlv::HWVersion>((unsigned char **)a2, (unsigned char *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::SmsTpdu>::clone()
{
}

void sub_2223A0E5C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IsCDMASms>::clone()
{
}

void *std::__function::__value_func<void ()(BOOL,std::string)>::~__value_func[abi:ne180100](void *a1)
{
  v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(BOOL,std::string)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3cat22SendDecodedEnvelopeCmd8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    long long v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      long long v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223A1140(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::RadioAccessTechnology>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 30)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RadioAccessTechnology>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::CallType>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 31)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 12;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::CallType>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD5A8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD5A8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<cat::tlv::Address>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TpAddress>::clone()
{
}

void sub_2223A186C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD5F8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD5F8;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::getSize(uint64_t a1)
{
  return tlv::size<cat::tlv::Address>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<cat::tlv::Address>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::RpAddress>::clone()
{
}

void sub_2223A1A4C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C40412C9227);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(CallControlResult,CSIPhoneNumber,CSIPhoneNumber)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(CallControlResult,CSIPhoneNumber,CSIPhoneNumber)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(CallControlResult,CSIPhoneNumber)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(CallControlResult,CSIPhoneNumber)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

char *qmi::MutableMessageBase::getTLV<cat::tlv::TransactionID>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 32)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD648;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BD648;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<p2p::tlv::HWVersion>((unsigned char **)a2, (unsigned char *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::TransactionID>::clone()
{
}

void sub_2223A2014(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::UserConfirmed>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<cat::tlv::IconDisplayed>::clone()
{
}

void QMIPreferredNetworksCommandDriver::create()
{
}

void sub_2223A22C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  xpc_release(v11);
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    MEMORY[0x223C9A950](v10, 0x10E1C40A0F2FCEFLL);
  }
  _Unwind_Resume(a1);
}

void *QMIPreferredNetworksCommandDriver::QMIPreferredNetworksCommandDriver(void *a1, uint64_t a2, NSObject **a3, void **a4)
{
  uint64_t v7 = (void *)PreferredNetworksCommandDriver::PreferredNetworksCommandDriver();
  uint64_t v8 = MEMORY[0x263F03638] + 16;
  v7[6] = 0;
  v7[7] = 0;
  v7[5] = v8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v11, (const char *)*MEMORY[0x263F03770], "pnp.qmi");
  ctu::SharedLoggable<QMIPreferredNetworksCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(a1 + 8, a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v11);
  *a1 = &unk_26D4BD720;
  a1[5] = &unk_26D4BD790;
  a1[13] = &unk_26D4BD7D0;
  unint64_t v9 = *a4;
  a1[14] = *a4;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    a1[14] = xpc_null_create();
  }
  a1[15] = 0;
  a1[16] = 0;
  return a1;
}

void sub_2223A2418(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v10);
  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(v9);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<QMIPreferredNetworksCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(void *a1, NSObject **a2)
{
  *a1 = 0;
  a1[1] = 0;
  char v3 = *a2;
  a1[2] = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v5);
  return a1;
}

void QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(QMIPreferredNetworksCommandDriver *this)
{
  *(void *)this = &unk_26D4BD720;
  uint64_t v2 = (QMIPreferredNetworksCommandDriver *)((char *)this + 40);
  *((void *)this + 5) = &unk_26D4BD790;
  *((void *)this + 13) = &unk_26D4BD7D0;
  char v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  xpc_release(*((xpc_object_t *)this + 14));
  *((void *)this + 14) = 0;
  MEMORY[0x223C99A30]((char *)this + 96);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 8);
  PreferredNetworksCommandDriverEventHandler::~PreferredNetworksCommandDriverEventHandler(v2);

  PreferredNetworksCommandDriver::~PreferredNetworksCommandDriver(this);
}

{
  uint64_t vars8;

  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver(QMIPreferredNetworksCommandDriver *this)
{
}

{
  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 104));
}

{
  uint64_t vars8;

  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 40));

  JUMPOUT(0x223C9A950);
}

{
  uint64_t vars8;

  QMIPreferredNetworksCommandDriver::~QMIPreferredNetworksCommandDriver((QMIPreferredNetworksCommandDriver *)((char *)this - 104));

  JUMPOUT(0x223C9A950);
}

std::__shared_weak_count *QMIPreferredNetworksCommandDriver::createCommandDriver@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  if (*(void *)(a1 + 120)) {
    goto LABEL_22;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 24));
  uint64_t v5 = ServiceMap;
  long long v6 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      long long v6 = (char *)v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v28 = v6;
  uint64_t v10 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v5[1].__m_.__sig, (unint64_t *)&v28);
  if (!v10)
  {
    int v12 = 0;
    goto LABEL_9;
  }
  int v12 = (void *)v10[3];
  unint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
LABEL_9:
    std::mutex::unlock(v5);
    unint64_t v11 = 0;
    char v13 = 1;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  char v13 = 0;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  uint64_t v14 = MEMORY[0x223C9AD60](*(void *)(a1 + 112));
  uint64_t v15 = MEMORY[0x263EF8718];
  if (v14 == MEMORY[0x263EF8718])
  {
    xpc_object_t v16 = xpc_null_create();
    xpc_object_t object = v16;
    if (MEMORY[0x223C9AD60](*(void *)(a1 + 112)) == v15)
    {
      v17 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(a1 + 112));
      if (!v17) {
        v17 = xpc_null_create();
      }
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t object = v17;
      xpc_release(v16);
      xpc_release(v18);
    }
  }
  else
  {
    xpc_object_t object = xpc_null_create();
  }
  QMIClientPool::requestClient(v12, 3u, (uint64_t *)__p, a1 + 104, (uint64_t)&object, &v27);
  long long v19 = v27;
  long long v27 = 0uLL;
  v20 = *(std::__shared_weak_count **)(a1 + 128);
  *(_OWORD *)(a1 + 120) = v19;
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v13) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
  if ((v13 & 1) == 0) {
LABEL_21:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
LABEL_22:
  v21 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v21 || (v22 = *(void *)(a1 + 64), (double result = std::__shared_weak_count::lock(v21)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  *a2 = v22;
  a2[1] = result;
  return result;
}

void sub_2223A289C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
  _Unwind_Resume(a1);
}

std::__shared_weak_count *non-virtual thunk to'QMIPreferredNetworksCommandDriver::createCommandDriver@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  return QMIPreferredNetworksCommandDriver::createCommandDriver(a1 - 40, a2);
}

uint64_t QMIPreferredNetworksCommandDriver::stopCommandDriverEventHandler(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 120);
  if (v2)
  {
    v3[0] = v2 + 88;
    v3[1] = 1;
    MEMORY[0x223C999F0](v2 + 88, a2);
    *(unsigned char *)(v2 + 74) = 0;
    return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v3);
  }
  return this;
}

uint64_t non-virtual thunk to'QMIPreferredNetworksCommandDriver::stopCommandDriverEventHandler(uint64_t this, uint64_t a2)
{
  uint64_t v2 = *(void *)(this + 80);
  if (v2)
  {
    v3[0] = v2 + 88;
    v3[1] = 1;
    MEMORY[0x223C999F0](v2 + 88, a2);
    *(unsigned char *)(v2 + 74) = 0;
    return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v3);
  }
  return this;
}

void QMIPreferredNetworksCommandDriver::registered(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Client has started", buf, 2u);
  }
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 72);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIPreferredNetworksCommandDriver::registered(uint64_t a1, uint64_t a2)
{
}

void QMIPreferredNetworksCommandDriver::deregistered(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has stopped", buf, 2u);
  }
  char v3 = *(std::__shared_weak_count **)(a1 + 72);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIPreferredNetworksCommandDriver::deregistered(uint64_t a1)
{
}

void QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(QMIPreferredNetworksCommandDriver *this, int a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  memset(v14, 0, sizeof(v14));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v14);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN33QMIPreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke;
  v12[3] = &__block_descriptor_tmp_3;
  int v13 = a2;
  uint64_t v4 = qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>((uint64_t)v14, 16);
  ___ZN33QMIPreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke((uint64_t)v12, v4);
  uint64_t v5 = *((void *)this + 12);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = a2;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC: %08x", buf, 8u);
  }
  long long v6 = (std::__shared_weak_count *)*((void *)this + 9);
  if (!v6
    || (uint64_t v7 = *((void *)this + 15), v8 = *((void *)this + 8), (v9 = std::__shared_weak_count::lock(v6)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (!*(unsigned char *)(v7 + 72) || !*(void *)(v7 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v15 = v7 + 40;
  uint64_t v16 = QMIServiceMsg::create();
  int v17 = 25000;
  uint64_t v18 = 0;
  long long v19 = 0;
  *(void *)buf = MEMORY[0x263EF8330];
  uint64_t v22 = 1174405120;
  v23 = ___ZN16QMIVirtualClient4sendIN3nas25PreferredPlmnListChecksum7RequestE33QMIPreferredNetworksCommandDriverZNS4_20sendPreferredPlmnCRCEjE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS6_8weak_ptrIT0_EES8__block_invoke;
  v24 = &__block_descriptor_tmp_19_12;
  uint64_t v25 = v8;
  char v26 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  long long v27 = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_4;
  aBlock[3] = &unk_264609A98;
  aBlock[4] = buf;
  unint64_t v11 = _Block_copy(aBlock);
  long long v19 = v11;
  if (v16)
  {
    qmi::Client::send();
    unint64_t v11 = v19;
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v14);
}

void sub_2223A2E90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v10 = *(std::__shared_weak_count **)(v8 - 88);
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va1);
  std::__shared_weak_count::__release_weak(v7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN33QMIPreferredNetworksCommandDriver20sendPreferredPlmnCRCEj_block_invoke(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(uint64_t a1, char a2, char a3, uint64_t a4)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  memset(v49, 0, sizeof(v49));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v49);
  uint64_t v8 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>((uint64_t)v49, 16);
  *uint64_t v8 = a2;
  v8[1] = a3;
  unsigned int v9 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = *(unsigned __int8 *)(a1 + 8);
    int v11 = *(unsigned __int8 *)(a1 + 9);
    int v12 = *(unsigned __int8 *)(a1 + 10);
    int v13 = *(unsigned __int8 *)(a1 + 11);
    int v14 = *(unsigned __int8 *)(a1 + 12);
    int v15 = *(unsigned __int8 *)(a1 + 13);
    int v16 = *(unsigned __int8 *)(a1 + 14);
    int v17 = *(unsigned __int8 *)(a1 + 15);
    int v18 = *(unsigned __int8 *)(a1 + 16);
    *(_DWORD *)buf = 67111168;
    *(_DWORD *)&buf[4] = v10;
    LOWORD(v57) = 1024;
    *(_DWORD *)((char *)&v57 + 2) = v11;
    HIWORD(v57) = 1024;
    LODWORD(v58) = v12;
    WORD2(v58) = 1024;
    *(_DWORD *)((char *)&v58 + 6) = v13;
    WORD5(v58) = 1024;
    HIDWORD(v58) = v14;
    LOWORD(v59) = 1024;
    *(_DWORD *)((char *)&v59 + 2) = v15;
    HIWORD(v59) = 1024;
    LODWORD(v60) = v16;
    WORD2(v60) = 1024;
    *(_DWORD *)((char *)&v60 + 6) = v17;
    WORD5(v60) = 1024;
    HIDWORD(v60) = v18;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I IMSI length = %u (0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x 0x%02x)", buf, 0x38u);
  }
  long long v19 = qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>((uint64_t)v49, 17);
  int v20 = *(unsigned __int8 *)(a1 + 8);
  *long long v19 = v20;
  if (v20)
  {
    unint64_t v21 = 0;
    do
    {
      v19[v21 + 1] = *(unsigned char *)(a1 + 9 + v21);
      ++v21;
    }
    while (v21 < *(unsigned __int8 *)(a1 + 8));
  }
  *(void *)buf = 0;
  uint64_t v57 = 0;
  *(void *)&long long v58 = 0;
  std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(buf, *(const void **)a4, *(void *)(a4 + 8), 0x6DB6DB6DB6DB6DB7 * (*(void *)(a4 + 8) - *(void *)a4));
  uint64_t v22 = qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>((uint64_t)v49, 18);
  v23 = (char *)v57;
  if (v57 != *(void *)buf)
  {
    unint64_t v24 = 0;
    uint64_t v25 = v22 + 16;
    char v26 = (unint64_t *)*((void *)v22 + 1);
    v23 = *(char **)buf;
    do
    {
      long long v27 = &v23[8 * v24 - v24];
      uint64_t v28 = *(unsigned __int16 *)v27;
      uint64_t v29 = *((unsigned __int16 *)v27 + 1);
      int v30 = v27[4];
      uint64_t v31 = v27[5];
      uint64_t v32 = v27[6];
      if ((unint64_t)v26 >= *v25)
      {
        uint64_t v33 = ((uint64_t)v26 - *(void *)v22) >> 3;
        if ((unint64_t)(v33 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v34 = *v25 - *(void *)v22;
        uint64_t v35 = v34 >> 2;
        if (v34 >> 2 <= (unint64_t)(v33 + 1)) {
          uint64_t v35 = v33 + 1;
        }
        if ((unint64_t)v34 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v36 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v35;
        }
        if (v36) {
          v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(v22 + 16), v36);
        }
        else {
          v37 = 0;
        }
        v38 = &v37[8 * v33];
        *(void *)v38 = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
        char v26 = (unint64_t *)(v38 + 8);
        uint64_t v40 = *(void *)v22;
        uint64_t v39 = *((void *)v22 + 1);
        if (v39 != *(void *)v22)
        {
          do
          {
            int v41 = *(_DWORD *)(v39 - 8);
            v39 -= 8;
            int v42 = *(_DWORD *)(v39 + 3);
            *((_DWORD *)v38 - 2) = v41;
            v38 -= 8;
            *(_DWORD *)(v38 + 3) = v42;
          }
          while (v39 != v40);
          uint64_t v39 = *(void *)v22;
        }
        *(void *)uint64_t v22 = v38;
        *((void *)v22 + 1) = v26;
        *((void *)v22 + 2) = &v37[8 * v36];
        if (v39) {
          operator delete((void *)v39);
        }
      }
      else
      {
        *v26++ = ((unint64_t)(v30 != 0) << 32) | (v31 << 40) | (v32 << 48) | v28 | (v29 << 16);
      }
      *((void *)v22 + 1) = v26;
      ++v24;
      v23 = *(char **)buf;
    }
    while (v24 < 0x6DB6DB6DB6DB6DB7 * (v57 - *(void *)buf));
  }
  if (v23)
  {
    uint64_t v57 = (uint64_t)v23;
    operator delete(v23);
  }
  v43 = *(std::__shared_weak_count **)(a1 + 72);
  if (!v43
    || (uint64_t v44 = *(void *)(a1 + 120), v45 = *(void *)(a1 + 64), (v46 = std::__shared_weak_count::lock(v43)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  v47 = v46;
  atomic_fetch_add_explicit(&v46->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v46);
  if (!*(unsigned char *)(v44 + 72) || !*(void *)(v44 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v50 = v44 + 40;
  uint64_t v51 = QMIServiceMsg::create();
  int v52 = 25000;
  uint64_t v53 = 0;
  v54 = 0;
  *(void *)buf = MEMORY[0x263EF8330];
  uint64_t v57 = 1174405120;
  *(void *)&long long v58 = ___ZN16QMIVirtualClient4sendIN3nas17PreferredPlmnList7RequestE33QMIPreferredNetworksCommandDriverZNS4_21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS5_9allocatorIS7_EEEEE3__3EENS5_9enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS5_8weak_ptrIT0_EESF__block_invoke;
  *((void *)&v58 + 1) = &__block_descriptor_tmp_25_5;
  uint64_t v59 = v45;
  *(void *)&long long v60 = v47;
  atomic_fetch_add_explicit(&v47->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&v60 + 1) = a1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_4;
  aBlock[3] = &unk_264609A98;
  aBlock[4] = buf;
  v48 = _Block_copy(aBlock);
  v54 = v48;
  if (v51)
  {
    qmi::Client::send();
    v48 = v54;
  }
  if (v48) {
    _Block_release(v48);
  }
  if ((void)v60) {
    std::__shared_weak_count::__release_weak((std::__shared_weak_count *)v60);
  }
  std::__shared_weak_count::__release_weak(v47);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v49);
}

void sub_2223A3390(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_weak(a28);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a13);
  std::__shared_weak_count::__release_weak(v28);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void *std::vector<PlmnPriorityData>::__init_with_size[abi:ne180100]<PlmnPriorityData*,PlmnPriorityData*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    double result = std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2223A3470(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2492492492492493) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::CallListItem>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4 - v4];
  return result;
}

void std::shared_ptr<QMIPreferredNetworksCommandDriver>::shared_ptr[abi:ne180100]<QMIPreferredNetworksCommandDriver,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223A35B0(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[10], v1, (dispatch_function_t)std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1}::operator() const(QMIPreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223A35D8(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIPreferredNetworksCommandDriver *,std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver *)#1},std::allocator<QMIPreferredNetworksCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIPreferredNetworksCommandDriver> ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::make_shared_ptr<QMIPreferredNetworksCommandDriver>(QMIPreferredNetworksCommandDriver*)::{lambda(QMIPreferredNetworksCommandDriver*)#1}::operator() const(QMIPreferredNetworksCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  size_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void **)(v1 + 16);
  QMIVirtualClient::disableNasServingSystemIndications(*(QMIVirtualClient **)v1, (const ctu::OsLogLogger *)(v2 + 12));
  char v3 = (std::__shared_weak_count *)v2[7];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v2[6];
      if (v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 16))(v6, 1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](&v9);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2223A374C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(std::__shared_weak_count **)(v2 + 8);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    MEMORY[0x223C9A950](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIPreferredNetworksCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  size_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 48);
      if (v6) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, 1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2223A3870(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::Checksum>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::Checksum>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::Checksum>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Checksum>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3nas25PreferredPlmnListChecksum7RequestE33QMIPreferredNetworksCommandDriverZNS4_20sendPreferredPlmnCRCEjE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS6_8weak_ptrIT0_EES8__block_invoke(void *a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        int v7 = *(_DWORD *)(a2 + 4);
        if (v7)
        {
          size_t v8 = *(NSObject **)(v6 + 96);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = v7;
            LOWORD(v21) = 2080;
            *(void *)((char *)&v21 + 2) = qmi::asString();
            _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Preferred PLMN List CRC check failed: Error in response with code = %d (%s)", buf, 0x12u);
          }
          goto LABEL_19;
        }
        uint64_t v9 = *(void *)(a2 + 8);
        *(void *)buf = *(void *)a2;
        *(void *)&long long v21 = v9;
        uint64_t v10 = *(void *)(a2 + 16);
        *((void *)&v21 + 1) = v10;
        if (v10) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)buf);
        uint64_t v13 = TlvValue;
        if (TlvValue)
        {
          int v14 = v12;
          *(void *)long long v19 = TlvValue;
          BOOL v15 = tlv::parseV<nas::tlv::ChecksumResult>((unint64_t *)v19, v12);
          if (*(void *)v19)
          {
LABEL_14:
            int v16 = *(NSObject **)(v6 + 96);
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              int v17 = (const char *)&unk_222543CCE;
              if (!v15) {
                int v17 = "no";
              }
              *(_DWORD *)long long v19 = 136315138;
              *(void *)&v19[4] = v17;
              _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List CRC check completed, result: %s match", v19, 0xCu);
            }
            qmi::MessageBase::~MessageBase((qmi::MessageBase *)buf);
LABEL_19:
            int v18 = *(std::__shared_weak_count **)(v6 + 72);
            if (v18)
            {
              if (std::__shared_weak_count::lock(v18)) {
                operator new();
              }
            }
            std::__throw_bad_weak_ptr[abi:ne180100]();
          }
          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)buf, 1, v13, v14);
        }
        BOOL v15 = 0;
        goto LABEL_14;
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223A3DF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c58_ZTSNSt3__18weak_ptrI33QMIPreferredNetworksCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__18weak_ptrI33QMIPreferredNetworksCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnCRC(unsigned int)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  size_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 48);
      if (v6) {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 32))(v6, 1, *((unsigned __int8 *)v1 + 8));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2223A3F00(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::MessageSequence>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::MessageSequence>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::MessageSequence>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageSequence>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnImsi>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnImsi>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnImsi>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<nas::tlv::PreferredPlmnImsi>(a2, a1 + 9);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnImsi>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::PreferredPlmnList>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnList>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::PreferredPlmnList>()
{
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BDA70;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BDA70;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2K1XHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  double result = tlv::writeV<nas::tlv::PreferredPlmnList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::PreferredPlmnList>::clone()
{
}

void sub_2223A4844(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *std::vector<nas::tlv::PlmnPriorityData>::__init_with_size[abi:ne180100]<nas::tlv::PlmnPriorityData*,nas::tlv::PlmnPriorityData*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 1);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2223A48C8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * v4];
  return result;
}

void ___ZN16QMIVirtualClient4sendIN3nas17PreferredPlmnList7RequestE33QMIPreferredNetworksCommandDriverZNS4_21sendPreferredPlmnListEhhRKNSt3__16vectorI16PlmnPriorityDataNS5_9allocatorIS7_EEEEE3__3EENS5_9enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS5_8weak_ptrIT0_EESF__block_invoke(void *a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        int v7 = *(_DWORD *)(a2 + 4);
        uint64_t v8 = *(NSObject **)(v6 + 96);
        if (v7)
        {
          if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)buf = 67109378;
            *(_DWORD *)&buf[4] = v7;
            __int16 v12 = 2080;
            uint64_t v13 = qmi::asString();
            _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Preferred PLMN List push failed: Error in response with code = %d 9%s)", buf, 0x12u);
          }
          uint64_t v9 = *(std::__shared_weak_count **)(v6 + 72);
          if (v9)
          {
            if (std::__shared_weak_count::lock(v9)) {
              operator new();
            }
          }
          std::__throw_bad_weak_ptr[abi:ne180100]();
        }
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)buf = 0;
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Preferred PLMN List segment push completed", buf, 2u);
        }
        uint64_t v10 = *(std::__shared_weak_count **)(v6 + 72);
        if (v10 && std::__shared_weak_count::lock(v10)) {
          operator new();
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223A4BA0(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  __clang_call_terminate(exception_object);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 48);
      if (v6) {
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v6 + 40))(v6, 1, 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2223A4C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIPreferredNetworksCommandDriver>::execute_wrapped<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>(QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2},std::default_delete<QMIPreferredNetworksCommandDriver::sendPreferredPlmnList(unsigned char,unsigned char,std::vector<PlmnPriorityData> const&)::$_3::operator() const(qmi::ResponseBase const&)::{lambda(void)#2}>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v8 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  char v3 = *(std::__shared_weak_count **)(v2 + 56);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = *(void *)(v2 + 48);
      if (v6) {
        (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, 1, 1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_2223A4D58(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t QmiEosCommandDriver::create@<X0>(capabilities::euicc *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = capabilities::euicc::supportsEOS(a1);
  if (result) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_2223A4E40(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0xE1C40223276F2);
  _Unwind_Resume(a1);
}

void *___ZN19QmiEosCommandDriver9init_syncEv_block_invoke(uint64_t a1)
{
  v3[4] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void *)(a1 + 32);
  v3[3] = 0;
  QmiEosCommandDriver::queryEosStatus(v1, (uint64_t)v3);
  return std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100](v3);
}

void sub_2223A4ECC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_3(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    char v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v13[0]) = 0;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Error processing EosStatus Indication", (uint8_t *)v13, 2u);
    }
  }
  else
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      uint64_t v7 = TlvValue;
      int v8 = v6;
      v13[0] = TlvValue;
      tlv::parseV<vinyl::tlv::IndEosState>(v13, v6);
      if (!v13[0]) {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 3, v7, v8);
      }
    }
    uint64_t v9 = qmi::MessageBase::findTlvValue(this);
    if (v9)
    {
      uint64_t v11 = v9;
      int v12 = v10;
      v13[0] = v9;
      tlv::parseV<vinyl::tlv::IndEosAssertionState>(v13, v10);
      if (!v13[0]) {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 4, v11, v12);
      }
    }
    QmiEosCommandDriver::handleQmiEosStatus_sync(v2);
  }
}

void *QmiEosCommandDriver::queryEosStatus(uint64_t a1, uint64_t a2)
{
  v14[4] = *MEMORY[0x263EF8340];
  memset(v6, 0, sizeof(v6));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6);
  uint64_t v7 = a1 + 80;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 1174405120;
  unint64_t v13[2] = ___ZN19QmiEosCommandDriver14queryEosStatusENSt3__18functionIFvN3ctu6resultINS0_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE_block_invoke;
  v13[3] = &__block_descriptor_tmp_8_15;
  v13[4] = a1;
  std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::__value_func[abi:ne180100]((uint64_t)v14, a2);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl16EosStatusMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_264609B90;
  aBlock[4] = v13;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v11 = v4;
  if (v8)
  {
    qmi::Client::send();
    uint64_t v4 = v11;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v6);
  return std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100](v14);
}

void sub_2223A5190(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100](v13);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a13);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

void ___ZN19QmiEosCommandDriver22registerForIndicationsEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "Error processing EosRegisterMessage Response, error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t QmiEosCommandDriver::handleQmiEosStatus_sync(uint64_t a1)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315394;
    uint64_t v4 = asString();
    __int16 v5 = 2080;
    uint64_t v6 = asString();
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Handling EOS status - state : %s, assertionState : %s", (uint8_t *)&v3, 0x16u);
  }
  return EosCommandDriver::publishEosStatus();
}

uint64_t ___ZN19QmiEosCommandDriver14queryEosStatusENSt3__18functionIFvN3ctu6resultINS0_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 1))
  {
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Error processing EosStatusMessage Response, error: %s", buf, 0xCu);
    }
    uint64_t result = *(void *)(a1 + 64);
    if (result)
    {
      v22[0] = 2;
      v22[4] = 3;
      return (*(uint64_t (**)(uint64_t, unsigned char *))(*(void *)result + 48))(result, v22);
    }
    return result;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v9 = TlvValue;
    int v10 = v8;
    *(void *)buf = TlvValue;
    char v11 = tlv::parseV<vinyl::tlv::RespEosState>((unint64_t *)buf, v8);
    if (*(void *)buf) {
      goto LABEL_10;
    }
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 3, v9, v10);
  }
  char v11 = 0;
LABEL_10:
  uint64_t v12 = qmi::MessageBase::findTlvValue(this);
  uint64_t v14 = v12;
  if (!v12)
  {
LABEL_13:
    char v16 = 0;
    goto LABEL_14;
  }
  int v15 = v13;
  *(void *)buf = v12;
  char v16 = tlv::parseV<vinyl::tlv::RespEosAssertionState>((unint64_t *)buf, v13);
  if (!*(void *)buf)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 4, v14, v15);
    goto LABEL_13;
  }
LABEL_14:
  uint64_t v17 = *(void *)(a1 + 64);
  if (v17)
  {
    if (((v11 - 1) & 0xFC) != 0) {
      uint64_t v18 = 0;
    }
    else {
      uint64_t v18 = (v11 - 1) + 1;
    }
    unint64_t v19 = 0x100000000;
    if (v16 != 1) {
      unint64_t v19 = (unint64_t)(v16 == 2) << 33;
    }
    v20[0] = 1;
    unint64_t v21 = v18 | v19;
    (*(void (**)(uint64_t, char *))(*(void *)v17 + 48))(v17, v20);
    v20[0] = 0;
  }
  return QmiEosCommandDriver::handleQmiEosStatus_sync(v3);
}

uint64_t __copy_helper_block_e8_40c89_ZTSNSt3__18functionIFvN3ctu6resultINS_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c89_ZTSNSt3__18functionIFvN3ctu6resultINS_4pairI8EosState17EosAssertionStateEE8EosErrorEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

uint64_t QmiEosCommandDriver::bootstrap_sync(Registry **this)
{
  Name = (char *)EosCommandDriver::getName((EosCommandDriver *)this);
  std::string::basic_string[abi:ne180100]<0>(v16, Name);
  uint64_t v3 = this[3];
  dispatch_object_t v24 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  std::string::basic_string[abi:ne180100]<0>(__p, "eos");
  uint64_t v4 = (std::__shared_weak_count *)this[2];
  if (!v4 || (v5 = this[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v7 = v6;
  uint64_t v22 = v5;
  v23 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v20, this[6]);
  qmi::Client::createWithQueueLocal();
  long long v8 = v26;
  long long v26 = 0uLL;
  uint64_t v9 = (std::__shared_weak_count *)this[13];
  *((_OWORD *)this + 6) = v8;
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  qmi::Client::~Client((qmi::Client *)v25);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  if (v24) {
    dispatch_release(v24);
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(v16[0]);
  }
  v16[0] = (void *)MEMORY[0x263EF8330];
  v16[1] = (void *)0x40000000;
  uint64_t v17 = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke;
  uint64_t v18 = &__block_descriptor_tmp_4;
  unint64_t v19 = this;
  qmi::Client::setHandler();
  __p[0] = (void *)MEMORY[0x263EF8330];
  __p[1] = (void *)0x40000000;
  int v13 = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_2;
  uint64_t v14 = &__block_descriptor_tmp_4_2;
  int v15 = this;
  qmi::Client::setHandler();
  qmi::Client::setIndShouldWake((qmi::Client *)(this + 10));
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN19QmiEosCommandDriver9init_syncEv_block_invoke_3;
  v11[3] = &__block_descriptor_tmp_6_0;
  v11[4] = this;
  v25[0] = MEMORY[0x263EF8330];
  v25[1] = 0x40000000;
  *(void *)&long long v26 = ___ZNK3qmi6Client13setIndHandlerIRKN5vinyl9EosStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v26 + 1) = &unk_264609B40;
  long long v27 = v11;
  return qmi::Client::setIndHandler();
}

void sub_2223A5860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a32);
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v33 - 104);
  if (v35) {
    std::__shared_weak_count::__release_weak(v35);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  if (a20 < 0) {
    operator delete(__p);
  }
  unint64_t v36 = *(NSObject **)(v33 - 96);
  if (v36) {
    dispatch_release(v36);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

void QmiEosCommandDriver::start_sync(QmiEosCommandDriver *this)
{
  uint64_t v2 = (char *)this + 80;
  qmi::Client::start((QmiEosCommandDriver *)((char *)this + 80));
  *(_OWORD *)__p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v3 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v3 + 8) != 16)
    {
      if (++v3 == (const void **)v12) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v12) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  v4[9] = 1;
  v6[5] = v2;
  uint64_t v7 = QMIServiceMsg::create();
  int v8 = 25000;
  uint64_t v9 = 0;
  int v10 = 0;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZN19QmiEosCommandDriver22registerForIndicationsEv_block_invoke;
  v6[3] = &__block_descriptor_tmp_7_0;
  v6[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl18EosRegisterMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_264609B68;
  aBlock[4] = v6;
  __int16 v5 = _Block_copy(aBlock);
  int v10 = v5;
  if (v7)
  {
    qmi::Client::send();
    __int16 v5 = v10;
  }
  if (v5) {
    _Block_release(v5);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223A5B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t QmiEosCommandDriver::stop_sync(QmiEosCommandDriver *this)
{
  return qmi::Client::stop((QmiEosCommandDriver *)((char *)this + 80));
}

void QmiEosCommandDriver::~QmiEosCommandDriver(QmiEosCommandDriver *this)
{
  *(void *)this = &unk_26D4BDAD8;
  qmi::Client::~Client((QmiEosCommandDriver *)((char *)this + 80));

  EosCommandDriver::~EosCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4BDAD8;
  qmi::Client::~Client((QmiEosCommandDriver *)((char *)this + 80));
  EosCommandDriver::~EosCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<QmiEosCommandDriver>::shared_ptr[abi:ne180100]<QmiEosCommandDriver,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223A5D68(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1}::operator() const(QmiEosCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223A5D90(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QmiEosCommandDriver *,std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver *)#1},std::allocator<QmiEosCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QmiEosCommandDriver> ctu::SharedSynchronizable<EosCommandDriver>::make_shared_ptr<QmiEosCommandDriver>(QmiEosCommandDriver*)::{lambda(QmiEosCommandDriver*)#1}::operator() const(QmiEosCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN5vinyl9EosStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223A5F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vinyl::tlv::EosReqRegister>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl18EosRegisterMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223A6190(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__value_func<void ()(ctu::result<std::pair<EosState,EosAssertionState>,EosError>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN5vinyl16EosStatusMessage8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223A632C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

BOOL EurekaGSMCallFormatter::isTechnology(uint64_t a1, int a2)
{
  return a2 == 5 || (a2 & 0xFFFFFFFE) == 2;
}

void EurekaGSMCallFormatter::createSecondCallDialReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 48) = 25000;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "createSecondCallDialReq for GSM not needed", v3, 2u);
  }
}

void EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(uint64_t a1)
{
  v2[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Answering waiting call (if any), holding active", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  operator new();
}

void sub_2223A6574(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

const void **EurekaGSMCallFormatter::createSwapReq(uint64_t a1, const void **a2, uint64_t a3)
{
  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::SharedRef(&v6, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)a1 + 32))(a1, &v6, a3);
  return ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&v6);
}

void sub_2223A6648(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef((const void **)va);
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(uint64_t a1)
{
  v2[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Answering waiting call, ending active", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  operator new();
}

void sub_2223A67D4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createEndThisCallReq(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a2 + 92);
    *(_DWORD *)buf = 67109120;
    *(_DWORD *)&buf[4] = v7;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I EurekaGSMCallFormatter: Ending call %d", buf, 8u);
  }
  *(void *)(a3 + 48) = 0;
  *(void *)(a3 + 56) = 0;
  *(_OWORD *)(a3 + 16) = 0u;
  *(_OWORD *)(a3 + 32) = 0u;
  *(_OWORD *)a3 = 0u;
  *(_DWORD *)(a3 + 48) = 25000;
  uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 16) + 88))(*(void *)(a1 + 16));
  uint64_t v9 = *(NSObject **)(a1 + 8);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8 == 1)
  {
    if (v10)
    {
      *(_WORD *)buf = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Using EndCall request", buf, 2u);
    }
    *(void *)buf = 0;
    uint64_t v12 = 0;
    operator new();
  }
  if (v10)
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Using ManageCalls request", buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v12 = 0;
  operator new();
}

void sub_2223A6C10(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v2, 0x1080C407FDA5F58);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

void __copy_helper_block_e8_32c14_ZTSK8CallInfo(uint64_t a1, uint64_t a2)
{
}

void __destroy_helper_block_e8_32c14_ZTSK8CallInfo(uint64_t a1)
{
}

uint64_t ___ZN22EurekaGSMCallFormatter20createEndThisCallReqE8CallInfo_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

void EurekaGSMCallFormatter::createSendToVoicemailReq(uint64_t a1)
{
  v2[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Sending calls to VM now.", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  operator new();
}

void sub_2223A6E50(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createEndHeldReq(EurekaGSMCallFormatter *this)
{
  v2[7] = *MEMORY[0x263EF8340];
  uint64_t v1 = *((void *)this + 1);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v2[0]) = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Ending the held or any waiting calls", (uint8_t *)v2, 2u);
  }
  v2[0] = 0;
  v2[1] = 0;
  operator new();
}

void sub_2223A7020(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a3);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createMergeReq(uint64_t a1)
{
  uint64_t v4 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)buf = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Creating msg to create multi party call", buf, 2u);
  }
  *(void *)buf = 0;
  uint64_t v3 = 0;
  operator new();
}

void sub_2223A72A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v14 = v11;
  CallInfo::~CallInfo(v14);
  operator delete(v12);
  EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0::~$_0((uint64_t)&a10);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v10);
  char v16 = *(std::__shared_weak_count **)(v13 - 104);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createPrivateConversationReq()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_2223A759C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  uint64_t v14 = v11;
  CallInfo::~CallInfo(v14);
  operator delete(v12);
  EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0::~$_0((uint64_t)&a10);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v10);
  char v16 = *(std::__shared_weak_count **)(v13 - 96);
  if (v16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  }
  _Unwind_Resume(a1);
}

uint64_t ___ZN22EurekaGSMCallFormatter28createPrivateConversationReqE20CallOperationContext_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 92);
  return result;
}

void EurekaGSMCallFormatter::createEndAllCallsReq()
{
  uint64_t v2 = *MEMORY[0x263EF8340];
  uint64_t v0 = 0;
  uint64_t v1 = 0;
  operator new();
}

void sub_2223A778C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createExplicitCallTransferReq(EurekaGSMCallFormatter *this)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v1 = 0;
  uint64_t v2 = 0;
  operator new();
}

void sub_2223A7914(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va, a4);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v4);
  if (a4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a4);
  }
  _Unwind_Resume(a1);
}

void EurekaGSMCallFormatter::createVoicePrivacyReq(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_DWORD *)(a2 + 48) = 25000;
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "Voice privacy feature does not exist in GW!", v3, 2u);
  }
}

uint64_t EurekaGSMCallFormatter::okToDialTestEmergency(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::waitForCallerId(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::supportsCallSwapIfMaxCalls(EurekaGSMCallFormatter *this)
{
  return 0;
}

uint64_t EurekaGSMCallFormatter::supportsInBandTones(EurekaGSMCallFormatter *this)
{
  return 0;
}

void EurekaGSMCallFormatter::~EurekaGSMCallFormatter(EurekaGSMCallFormatter *this)
{
  EurekaCallFormatter::~EurekaCallFormatter(this);

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<vs::ManageCalls::Request>::shared_ptr[abi:ne180100]<vs::ManageCalls::Request,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223A7ABC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<vs::SetVoicePrivacy::Request>::reset[abi:ne180100]((qmi::MutableMessageBase **)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

qmi::MutableMessageBase *std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(qmi::MutableMessageBase **)(a1 + 24);
  if (result)
  {
    qmi::MutableMessageBase::~MutableMessageBase(result);
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vs::ManageCalls::Request *,std::shared_ptr<vs::ManageCalls::Request>::__shared_ptr_default_delete<vs::ManageCalls::Request,vs::ManageCalls::Request>,std::allocator<vs::ManageCalls::Request>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

char *qmi::MutableMessageBase::getTLV<vs::tlv::CallInfo>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallInfo>::clone()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BDE18;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BDE18;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t result, uint64_t a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(void *)(result + 8);
    uint64_t v3 = *(NSObject **)(v2 + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v4 = 136315138;
      uint64_t v5 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Got error when trying to answer waiting and holding active calls. Error: %s", (uint8_t *)&v4, 0xCu);
    }
    return (*(uint64_t (**)(void))(**(void **)(v2 + 16) + 72))(*(void *)(v2 + 16));
  }
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingHoldOtherReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BDE98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BDE98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 8) + 8);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "Got error when trying to answer waiting and ending active calls. Error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createAnswerWaitingEndActiveReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BDF18;
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BDF18;
  CallInfo::~CallInfo((void **)(a1 + 16));

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x1A8uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_26D4BDF18;
  v2[1] = v3;
  CallInfo::CallInfo((CallInfo *)(v2 + 2), (const CallInfo *)(a1 + 16));
  return v2;
}

void sub_2223A8258(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26D4BDF18;
  a2[1] = v2;
  CallInfo::CallInfo((CallInfo *)(a2 + 2), (const CallInfo *)(a1 + 16));
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void **a1)
{
  CallInfo::~CallInfo(a1 + 2);

  operator delete(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(NSObject **)(v5 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      int v7 = 136315138;
      uint64_t v8 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "Got error when trying to end specific call. Error: %s", (uint8_t *)&v7, 0xCu);
      int v2 = *(_DWORD *)(a2 + 4);
    }
    if (v2 == 41) {
      (*(void (**)(void, uint64_t, void))(**(void **)(v5 + 16) + 40))(*(void *)(v5 + 16), a1 + 16, 0);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0,std::allocator<EurekaGSMCallFormatter::createEndThisCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BDF98;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BDF98;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Sending calls to voicemail failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createSendToVoicemailReq(ctu::cf::CFSharedRef<__CFUUID const>,subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BE018;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BE018;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Ending held/waiting calls failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createEndHeldReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE098;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE098;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  CallInfo::~CallInfo((void **)(a1 + 16));

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1C0uLL);
  void *v2 = &unk_26D4BE098;
  std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_2223A889C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BE098;
  return std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(NSObject **)(v3 + 8);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v3 + 8), OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = qmi::asString();
      int v7 = *(_DWORD *)(a2 + 4);
      LODWORD(v8[0]) = 136315394;
      *(void *)((char *)v8 + 4) = v6;
      WORD6(v8[0]) = 1024;
      *(_DWORD *)((char *)v8 + 14) = v7;
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Merging calls into conference failed with error %s (%u)", (uint8_t *)v8, 0x12u);
    }
    (*(void (**)(void, uint64_t))(**(void **)(v3 + 16) + 56))(*(void *)(v3 + 16), a1 + 16);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v3 + 8), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v8[0]) = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Merging calls into conference succeeded", (uint8_t *)v8, 2u);
    }
    uint64_t v19 = 0;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v9 = 0u;
    long long v10 = 0u;
    memset(v8, 0, sizeof(v8));
    CallInfo::CallInfo((CallInfo *)v8);
    HIDWORD(v9) = *(_DWORD *)(a1 + 268);
    (*(void (**)(void, _OWORD *))(**(void **)(v3 + 16) + 48))(*(void *)(v3 + 16), v8);
    CallInfo::~CallInfo((void **)v8);
  }
}

void sub_2223A8AE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void *std::__compressed_pair_elem<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createMergeReq(CallOperationContext)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  CallInfo::CallInfo((CallInfo *)(a1 + 1), (const CallInfo *)(a2 + 8));
  uint64_t v4 = (std::string *)(a1 + 52);
  if (*(char *)(a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 416), *(void *)(a2 + 424));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 416);
    a1[54] = *(void *)(a2 + 432);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_2223A8BB8(_Unwind_Exception *a1)
{
  CallInfo::~CallInfo(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE118;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE118;
  if (*(char *)(a1 + 447) < 0) {
    operator delete(*(void **)(a1 + 424));
  }
  CallInfo::~CallInfo((void **)(a1 + 16));

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x1C0uLL);
  void *v2 = &unk_26D4BE118;
  std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(v2 + 1, v1);
  return v2;
}

void sub_2223A8CF0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BE118;
  return std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(a2 + 1, a1 + 8);
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void *a1)
{
  std::__function::__alloc_func<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0,std::allocator<EurekaC2KCallFormatter::createMergeReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::destroy[abi:ne180100]((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(v2 + 8);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 8), OS_LOG_TYPE_ERROR))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = 136315394;
      uint64_t v10 = v7;
      __int16 v11 = 1024;
      int v12 = v8;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Unmerging calls failed with error %s (%u)", (uint8_t *)&v9, 0x12u);
    }
    long long v5 = *(uint64_t (**)(void))(**(void **)(v2 + 16) + 128);
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 8), OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v9) = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Unmerging calls from conference succeeded", (uint8_t *)&v9, 2u);
    }
    long long v5 = *(uint64_t (**)(void))(**(void **)(v2 + 16) + 128);
  }
  return v5();
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,std::allocator<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void *std::__compressed_pair_elem<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<EurekaGSMCallFormatter::createPrivateConversationReq(CallOperationContext)::$_0 const&,0ul>(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  CallInfo::CallInfo((CallInfo *)(a1 + 1), (const CallInfo *)(a2 + 8));
  uint64_t v4 = (std::string *)(a1 + 52);
  if (*(char *)(a2 + 439) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 416), *(void *)(a2 + 424));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 416);
    a1[54] = *(void *)(a2 + 432);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  return a1;
}

void sub_2223A8F98(_Unwind_Exception *a1)
{
  CallInfo::~CallInfo(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BE198;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BE198;
  a2[1] = v2;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 8);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Ending all calls failed with error %s (%u)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0,std::allocator<EurekaGSMCallFormatter::createEndAllCallsReq(subscriber::SimSlot)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::~__func()
{
}

void *std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4BE218;
  return result;
}

void std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BE218;
}

uint64_t std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0,std::allocator<EurekaGSMCallFormatter::createExplicitCallTransferReq(void)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

uint64_t QMIMav20DataSubscriptionCommandDriver::QMIMav20DataSubscriptionCommandDriver()
{
  uint64_t result = DataSubscriptionBaseCommandDriver::DataSubscriptionBaseCommandDriver();
  *(unsigned char *)(result + 128) = 0;
  *(unsigned char *)(result + 160) = 0;
  *(unsigned char *)(result + 168) = 0;
  *(unsigned char *)(result + 200) = 0;
  *(void *)(result + 224) = 0;
  *(void *)(result + 216) = 0;
  *(void *)(result + 208) = result + 216;
  *(_DWORD *)(result + 232) = 0;
  *(void *)uint64_t result = &unk_26D4BE298;
  *(unsigned char *)(result + 240) = 0;
  *(unsigned char *)(result + 264) = 0;
  *(void *)(result + 296) = 0;
  return result;
}

void QMIMav20DataSubscriptionCommandDriver::~QMIMav20DataSubscriptionCommandDriver(QMIMav20DataSubscriptionCommandDriver *this)
{
  *(void *)this = &unk_26D4BE298;
  std::__function::__value_func<void ()(std::optional<std::string>)>::~__value_func[abi:ne180100]((void *)this + 34);
  if (*((unsigned char *)this + 264) && *((char *)this + 263) < 0) {
    operator delete(*((void **)this + 30));
  }

  QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(this);
}

{
  uint64_t vars8;

  QMIMav20DataSubscriptionCommandDriver::~QMIMav20DataSubscriptionCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMIMav20DataSubscriptionCommandDriver::registerSubscriptionConfigurationClient_sync(QMIMav20DataSubscriptionCommandDriver *this@<X0>, qmi::Client *a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *((_OWORD *)a2 + 1) = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v32, *((char **)this + 10));
  uint64_t v4 = *((void *)this + 3);
  dispatch_object_t v31 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(&v29, "registration");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v25, (void *)this + 1);
  uint64_t v27 = v25;
  uint64_t v28 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Registry::getServerConnection(&v23, *((Registry **)this + 8));
  qmi::Client::createWithQueueLocal();
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  if (v26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  }
  if (v30 < 0) {
    operator delete(v29);
  }
  if (v31) {
    dispatch_release(v31);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v32);
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v32, (void *)this + 1);
  int v6 = v32;
  int v5 = (std::__shared_weak_count *)v33;
  if (v33)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 16), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v16 = MEMORY[0x263EF8330];
  uint64_t v17 = 1174405120;
  long long v18 = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke;
  uint64_t v19 = &__block_descriptor_tmp_33;
  uint64_t v20 = this;
  unint64_t v21 = v6;
  uint64_t v22 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  uint64_t v9 = MEMORY[0x263EF8330];
  uint64_t v10 = 1174405120;
  __int16 v11 = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_3;
  int v12 = &__block_descriptor_tmp_6_10;
  uint64_t v13 = this;
  long long v14 = v6;
  long long v15 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  v7[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_7;
  v7[3] = &__block_descriptor_tmp_11_9;
  v7[4] = this;
  v7[5] = v6;
  __int16 v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v32 = (void *)MEMORY[0x263EF8330];
  uint64_t v33 = 0x40000000;
  uint64_t v34 = ___ZNK3qmi6Client13setIndHandlerIRKN3nas22DisableIccidIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  uint64_t v35 = &unk_264609C18;
  unint64_t v36 = v7;
  qmi::Client::setIndHandler();
  qmi::Client::setIndShouldWake(a2);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_2223A9638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  qmi::Client::~Client(v31);
  _Unwind_Resume(a1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::registered(v3, 3u);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223A9780(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_40c58_ZTSNSt3__18weak_ptrI33DataSubscriptionBaseCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c58_ZTSNSt3__18weak_ptrI33DataSubscriptionBaseCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_3(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::deregistered(v3, 3u);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223A9838(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_7(void *a1, qmi::MessageBase *a2)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (!v3) {
    return;
  }
  uint64_t v5 = a1[4];
  int v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  uint64_t v7 = v6;
  if (a1[5])
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t TlvValue = (subscriber *)qmi::MessageBase::findTlvValue(a2);
    if (TlvValue)
    {
      v22[0] = qmi::MessageBase::findTlvValue(a2);
      v22[1] = v9;
      if (v22[0])
      {
        tlv::parseV<nas::tlv::Iccid>(v22, v9, &__p);
        uint64_t v10 = (void *)__p.__r_.__value_.__r.__words[0];
        if (v22[0])
        {
          std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(&v19, __p.__r_.__value_.__l.__data_, (char *)__p.__r_.__value_.__l.__size_, __p.__r_.__value_.__l.__size_ - __p.__r_.__value_.__r.__words[0]);
          if (v10) {
            operator delete(v10);
          }
          uint64_t TlvValue = (subscriber *)v19;
          __int16 v11 = v20;
          goto LABEL_12;
        }
        if (__p.__r_.__value_.__r.__words[0]) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      __assert_rtn("get", "optional.hpp", 1212, "this->is_initialized()");
    }
    __int16 v11 = 0;
LABEL_12:
    subscriber::sDecodeIccid(TlvValue, (const unsigned __int8 *)(v11 - (unsigned char *)TlvValue));
    std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(v5 + 240, (long long *)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v12 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v13 = v5 + 240;
      if (*(char *)(v5 + 263) < 0) {
        std::string::size_type v13 = *(void *)(v5 + 240);
      }
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Disable iccid Updated (%s)", (uint8_t *)&__p, 0xCu);
    }
    long long v14 = *(std::__shared_weak_count **)(v5 + 56);
    if (v14)
    {
      long long v15 = std::__shared_weak_count::lock(v14);
      if (v15)
      {
        uint64_t v16 = v15;
        uint64_t v17 = *(void *)(v5 + 48);
        if (v17) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, v5 + 240);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
    }
    if (*(void *)(v5 + 296))
    {
      std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)(v5 + 240));
      uint64_t v18 = *(void *)(v5 + 296);
      if (!v18) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, std::string *))(*(void *)v18 + 48))(v18, &__p);
      if (v24 && SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::__function::__value_func<void ()(std::optional<std::string>)>::operator=[abi:ne180100]((void *)(v5 + 272));
    }
    if (v19)
    {
      uint64_t v20 = v19;
      operator delete(v19);
    }
  }

  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
}

void sub_2223A9AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (__p) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(QMIMav20DataSubscriptionCommandDriver *this)
{
  v16[4] = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v2 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v2 + 8) != 66)
    {
      if (++v2 == (const void **)v12) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v12) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  v3[9] = 1;
  v6[5] = (char *)this + 168;
  uint64_t v7 = QMIServiceMsg::create();
  int v8 = 25000;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver46handleSubscriptionConfigurationRegistered_syncEv_block_invoke;
  v6[3] = &__block_descriptor_tmp_12_1;
  v6[4] = this;
  aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
  aBlock.__r_.__value_.__l.__size_ = 0x40000000;
  aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  long long v14 = &unk_264609C40;
  long long v15 = v6;
  uint64_t v4 = _Block_copy(&aBlock);
  uint64_t v10 = v4;
  if (v7)
  {
    qmi::Client::send();
    uint64_t v4 = v10;
  }
  if (v4) {
    _Block_release(v4);
  }
  if (*((unsigned char *)this + 264))
  {
    uint64_t v5 = (void **)((char *)this + 240);
    memset(&aBlock, 0, sizeof(aBlock));
    if (*((char *)this + 263) < 0)
    {
      std::string::__init_copy_ctor_external(&aBlock, *((const std::string::value_type **)this + 30), *((void *)this + 31));
      if (!*((unsigned char *)this + 264))
      {
LABEL_17:
        v16[0] = &unk_26D4BE430;
        v16[3] = v16;
        QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync((uint64_t)this, (unsigned __int8 *)&aBlock, v16);
        std::__function::__value_func<void ()(std::optional<std::string>)>::~__value_func[abi:ne180100](v16);
        if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(aBlock.__r_.__value_.__l.__data_);
        }
        goto LABEL_19;
      }
      if (*((char *)this + 263) < 0) {
        operator delete(*v5);
      }
    }
    else
    {
      *(_OWORD *)&aBlock.__r_.__value_.__l.__data_ = *(_OWORD *)v5;
      aBlock.__r_.__value_.__r.__words[2] = *((void *)this + 32);
    }
    *((unsigned char *)this + 264) = 0;
    goto LABEL_17;
  }
LABEL_19:
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223A9EF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

void ___ZN37QMIMav20DataSubscriptionCommandDriver46handleSubscriptionConfigurationRegistered_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Registration for NAS indications failed, error %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Registration for NAS indications succeeded", (uint8_t *)v4, 2u);
  }
}

void QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync(uint64_t a1, unsigned __int8 *a2, void *a3)
{
  uint64_t v4 = a2;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if (!*(unsigned char *)(a1 + 264)) {
    goto LABEL_17;
  }
  uint64_t v6 = *(unsigned __int8 *)(a1 + 263);
  if ((v6 & 0x80u) == 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 263);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 248);
  }
  uint64_t v8 = a2[23];
  int v9 = (char)v8;
  if ((v8 & 0x80u) != 0) {
    uint64_t v8 = *((void *)a2 + 1);
  }
  if (v7 != v8) {
    goto LABEL_17;
  }
  uint64_t v10 = (const void **)(a1 + 240);
  if (v9 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v6 & 0x80) != 0)
  {
    if (memcmp(*v10, a2, *(void *)(a1 + 248))) {
      goto LABEL_17;
    }
LABEL_34:
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID unchanged", (uint8_t *)&buf, 2u);
    }
    std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](&__p, (long long *)v10);
    uint64_t v20 = a3[3];
    if (!v20) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, std::string *))(*(void *)v20 + 48))(v20, &__p);
    if (v31)
    {
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    return;
  }
  if (!*(unsigned char *)(a1 + 263)) {
    goto LABEL_34;
  }
  __int16 v11 = (unsigned __int8 *)(a1 + 240);
  while (*v11 == *a2)
  {
    ++v11;
    ++a2;
    if (!--v6) {
      goto LABEL_34;
    }
  }
LABEL_17:
  long long v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if ((v4[23] & 0x80u) == 0) {
      std::string::size_type v13 = (const std::string::value_type *)v4;
    }
    else {
      std::string::size_type v13 = *(const std::string::value_type **)v4;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v13;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Sending disable iccid (%s)", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)uint64_t v28 = 0u;
  long long v29 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v28);
  uint64_t v14 = v4[23];
  char v15 = v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *((void *)v4 + 1);
  }
  if (v14)
  {
    uint64_t v16 = (const void **)v28[1];
    if (v28[1] != (void *)v29)
    {
      while (*((unsigned char *)*v16 + 8) != 16)
      {
        if (++v16 == (const void **)v29) {
          goto LABEL_33;
        }
      }
    }
    if (v16 == (const void **)v29) {
LABEL_33:
    }
      operator new();
    if (!v17) {
      __cxa_bad_cast();
    }
    uint64_t v18 = v17 + 16;
    if (v15 < 0) {
      std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)v4, *((void *)v4 + 1));
    }
    else {
      std::string v32 = *(std::string *)v4;
    }
    subscriber::encodeIccid();
    uint64_t v21 = *(void **)v18;
    if (*(void *)v18)
    {
      *((void *)v18 + 1) = v21;
      operator delete(v21);
      *(void *)uint64_t v18 = 0;
      *((void *)v18 + 1) = 0;
      *((void *)v18 + 2) = 0;
    }
    *(_OWORD *)uint64_t v18 = buf;
    *((void *)v18 + 2) = v36;
    long long buf = 0uLL;
    unint64_t v36 = 0;
    if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v32.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v22 = a3[3];
  if (v22)
  {
    if ((void *)v22 == a3)
    {
      p_long long buf = &buf;
      (*(void (**)(void *, long long *))(*a3 + 24))(a3, &buf);
      goto LABEL_50;
    }
    uint64_t v22 = (*(uint64_t (**)(uint64_t))(*(void *)v22 + 16))(v22);
  }
  p_long long buf = (long long *)v22;
LABEL_50:
  uint64_t v23 = a1 + 272;
  if (&buf != (long long *)(a1 + 272))
  {
    char v24 = p_buf;
    uint64_t v25 = *(void *)(a1 + 296);
    if (p_buf == &buf)
    {
      if (v25 == v23)
      {
        memset(&v32, 0, sizeof(v32));
        (*(void (**)(long long *, std::string *))(buf + 24))(&buf, &v32);
        (*(void (**)(long long *))(*(void *)p_buf + 32))(p_buf);
        p_long long buf = 0;
        (*(void (**)(void, long long *))(**(void **)(a1 + 296) + 24))(*(void *)(a1 + 296), &buf);
        (*(void (**)(void))(**(void **)(a1 + 296) + 32))(*(void *)(a1 + 296));
        *(void *)(a1 + 296) = 0;
        p_long long buf = &buf;
        (*(void (**)(std::string *, uint64_t))(v32.__r_.__value_.__r.__words[0] + 24))(&v32, a1 + 272);
        (*(void (**)(std::string *))(v32.__r_.__value_.__r.__words[0] + 32))(&v32);
      }
      else
      {
        (*(void (**)(long long *, uint64_t))(buf + 24))(&buf, a1 + 272);
        (*(void (**)(long long *))(*(void *)p_buf + 32))(p_buf);
        p_long long buf = *(long long **)(a1 + 296);
      }
      *(void *)(a1 + 296) = v23;
    }
    else if (v25 == v23)
    {
      (*(void (**)(uint64_t, long long *))(*(void *)v23 + 24))(a1 + 272, &buf);
      (*(void (**)(void))(**(void **)(a1 + 296) + 32))(*(void *)(a1 + 296));
      *(void *)(a1 + 296) = p_buf;
      p_long long buf = &buf;
    }
    else
    {
      p_long long buf = *(long long **)(a1 + 296);
      *(void *)(a1 + 296) = v24;
    }
  }
  std::__function::__value_func<void ()(std::optional<std::string>)>::~__value_func[abi:ne180100](&buf);
  v32.__r_.__value_.__r.__words[0] = a1 + 168;
  v32.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
  LODWORD(v32.__r_.__value_.__r.__words[2]) = 25000;
  uint64_t v33 = 0;
  std::string aBlock = 0;
  v27[0] = MEMORY[0x263EF8330];
  v27[1] = 0x40000000;
  v27[2] = ___ZN37QMIMav20DataSubscriptionCommandDriver28sendDisableIccidCommand_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvNS0_8optionalIS6_EEEEE_block_invoke;
  v27[3] = &__block_descriptor_tmp_13_1;
  v27[4] = a1;
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 0x40000000;
  unint64_t v36 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas19DisableIccidRequest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  p_long long buf = (long long *)&unk_264609C68;
  v38 = v27;
  long long v26 = _Block_copy(&buf);
  std::string aBlock = v26;
  if (v32.__r_.__value_.__l.__size_)
  {
    qmi::Client::send();
    long long v26 = aBlock;
  }
  if (v26) {
    _Block_release(v26);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v28);
}

void sub_2223AA7E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a25)
  {
    if (a24 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(uint64_t a1, _DWORD *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 80))(a1) & 1) == 0)
  {
    char v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_22231A000, v15, OS_LOG_TYPE_ERROR, "Client not ready", buf, 2u);
    }
    goto LABEL_21;
  }
  if (!*(unsigned char *)(a1 + 264))
  {
    LOBYTE(v10) = *(unsigned char *)(a3 + 23);
    goto LABEL_35;
  }
  uint64_t v8 = *(unsigned __int8 *)(a1 + 263);
  if ((v8 & 0x80u) == 0) {
    uint64_t v9 = *(unsigned __int8 *)(a1 + 263);
  }
  else {
    uint64_t v9 = *(void *)(a1 + 248);
  }
  int v10 = *(char *)(a3 + 23);
  if (v10 >= 0) {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v11 = *(void *)(a3 + 8);
  }
  if (v9 == v11)
  {
    long long v12 = (const void **)(a1 + 240);
    if (v10 >= 0) {
      std::string::size_type v13 = (const std::string::value_type *)a3;
    }
    else {
      std::string::size_type v13 = *(const std::string::value_type **)a3;
    }
    if ((v8 & 0x80) != 0)
    {
      if (memcmp(*v12, v13, *(void *)(a1 + 248))) {
        goto LABEL_24;
      }
    }
    else if (*(unsigned char *)(a1 + 263))
    {
      uint64_t v14 = v13;
      while (*(unsigned __int8 *)v12 == *(unsigned __int8 *)v14)
      {
        long long v12 = (const void **)((char *)v12 + 1);
        ++v14;
        if (!--v8) {
          goto LABEL_43;
        }
      }
      goto LABEL_24;
    }
LABEL_43:
    uint64_t v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v27 = v13;
      _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID unchanged (%s)", buf, 0xCu);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 96))(a1, a4, 1);
    return;
  }
LABEL_24:
  if (!v11 && !*a2 && a2[1] == 0)
  {
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(const std::string::value_type **)a3;
      if (v10 >= 0) {
        uint64_t v18 = (const std::string::value_type *)a3;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v27 = v18;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I Disable ICCID (%s) on baseband should remain unchanged till a new SIM comes up", buf, 0xCu);
    }
LABEL_21:
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
    return;
  }
LABEL_35:
  if ((v10 & 0x80) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a3, *(void *)(a3 + 8));
  }
  else {
    std::string __p = *(std::string *)a3;
  }
  int v23 = a4;
  uint64_t v25 = 0;
  uint64_t v19 = (char *)operator new(0x30uLL);
  *(void *)uint64_t v19 = &unk_26D4BE4C0;
  *((void *)v19 + 1) = a1;
  uint64_t v20 = (std::string *)(v19 + 16);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v20, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    LODWORD(a4) = v23;
  }
  else
  {
    *(_OWORD *)&v20->__r_.__value_.__l.__data_ = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    *((void *)v19 + 4) = *((void *)&__p.__r_.__value_.__l + 2);
  }
  *((_DWORD *)v19 + 10) = a4;
  uint64_t v25 = v19;
  QMIMav20DataSubscriptionCommandDriver::sendDisableIccidCommand_sync(a1, (unsigned __int8 *)a3, v24);
  std::__function::__value_func<void ()(std::optional<std::string>)>::~__value_func[abi:ne180100](v24);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2223AABA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  operator delete(v18);
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t std::optional<std::string>::operator=[abi:ne180100]<std::string,void>(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
  }
  else
  {
    long long v5 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v5;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void *___ZN37QMIMav20DataSubscriptionCommandDriver28sendDisableIccidCommand_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEENS0_8functionIFvNS0_8optionalIS6_EEEEE_block_invoke(void *result, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v3 = (void *)result[4];
    long long v4 = v3[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109378;
      int v10 = v2;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Disable ICCID request failed, error %d (%s)", buf, 0x12u);
    }
    LOBYTE(__p) = 0;
    char v8 = 0;
    uint64_t v5 = v3[37];
    if (!v5) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v5 + 48))(v5, &__p);
    if (v8)
    {
      if (v7 < 0) {
        operator delete(__p);
      }
    }
    return std::__function::__value_func<void ()(std::optional<std::string>)>::operator=[abi:ne180100](v3 + 34);
  }
  return result;
}

void sub_2223AAD88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

std::string *std::__optional_copy_base<std::string,false>::__optional_copy_base[abi:ne180100](std::string *a1, long long *a2)
{
  a1->__r_.__value_.__s.__data_[0] = 0;
  a1[1].__r_.__value_.__s.__data_[0] = 0;
  std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(a1, a2);
  return a1;
}

void sub_2223AADDC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

void std::__optional_storage_base<std::string,false>::__construct_from[abi:ne180100]<std::__optional_copy_base<std::string,false> const&>(std::string *this, long long *a2)
{
  if (*((unsigned char *)a2 + 24))
  {
    if (*((char *)a2 + 23) < 0)
    {
      std::string::__init_copy_ctor_external(this, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v3 = *a2;
      this->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
}

void *std::__function::__value_func<void ()(std::optional<std::string>)>::~__value_func[abi:ne180100](void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3nas22DisableIccidIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223AAFA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  long long v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *long long v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::DisableIccidIndication>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223AB10C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_2223AB1C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223AB20C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,nas::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2223AB250(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::~__func()
{
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4BE430;
  return result;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BE430;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v2 = *(void **)a2;
    int v3 = *(char *)(a2 + 23);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    if (v3 < 0) {
      operator delete(v2);
    }
  }
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(void)::$_1>,void ()(std::optional<std::string>)>::target_type()
{
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE4C0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4BE4C0;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = &unk_26D4BE4C0;
  std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2223AB460(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BE4C0;
  return std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>((uint64_t)(a2 + 1), a1 + 8);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::destroy(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::destroy_deallocate(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::operator()(uint64_t a1, uint64_t a2)
{
  LOBYTE(__p[0]) = 0;
  if (*(unsigned char *)(a2 + 24))
  {
    uint64_t v13 = *(void *)(a2 + 16);
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    int v4 = 1;
    char v14 = 1;
    uint64_t v5 = *(void *)(a1 + 8);
    uint64_t v6 = *(unsigned __int8 *)(a1 + 39);
    if ((v6 & 0x80u) == 0) {
      uint64_t v7 = (void *)*(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v7 = *(void **)(a1 + 24);
    }
    char v8 = (void *)HIBYTE(v13);
    char v2 = HIBYTE(v13);
    if (v13 < 0) {
      char v8 = __p[1];
    }
    if (v7 == v8)
    {
      uint64_t v9 = (const void **)(a1 + 16);
      if (v13 >= 0) {
        int v10 = __p;
      }
      else {
        int v10 = (void **)__p[0];
      }
      if ((v6 & 0x80) == 0)
      {
        if (*(unsigned char *)(a1 + 39))
        {
          while (*(unsigned __int8 *)v9 == *(unsigned __int8 *)v10)
          {
            uint64_t v9 = (const void **)((char *)v9 + 1);
            int v10 = (void **)((char *)v10 + 1);
            if (!--v6) {
              goto LABEL_25;
            }
          }
          int v4 = 1;
          goto LABEL_17;
        }
LABEL_25:
        int v4 = 1;
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v5 + 96))(v5, *(unsigned int *)(a1 + 40), 1);
        goto LABEL_18;
      }
      if (!memcmp(*v9, v10, *(void *)(a1 + 24))) {
        goto LABEL_25;
      }
    }
  }
  else
  {
    int v4 = 0;
  }
LABEL_17:
  DataSubscriptionBaseCommandDriver::operationCompleted_sync();
LABEL_18:
  if (v4 && v2 < 0)
  {
    __int16 v11 = __p[0];
    operator delete(v11);
  }
}

void sub_2223AB65C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p)
{
  if (v10)
  {
    if (v9 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,std::allocator<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0>,void ()(std::optional<std::string>)>::target_type()
{
}

uint64_t std::__compressed_pair_elem<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0,0,false>::__compressed_pair_elem[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver::handleConfigureSubscription_sync(SubscriptionSlotConfiguration const&,std::string const&,subscriber::SimSlot)::$_0 const&,0ul>(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  int v4 = (std::string *)(a1 + 8);
  if (*(char *)(a2 + 31) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 8);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 24);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  *(_DWORD *)(a1 + 32) = *(_DWORD *)(a2 + 32);
  return a1;
}

void *std::__function::__value_func<void ()(std::optional<std::string>)>::operator=[abi:ne180100](void *a1)
{
  char v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BE558;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BE558;
  char v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::NextHdrProtList>((unsigned char **)a2, a1 + 16);
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::Iccid>::clone()
{
}

void sub_2223AB948(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas19DisableIccidRequest8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223ABA30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void QMIAQMCommandDriver::create()
{
}

void sub_2223ABB38(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C40FB9B6D2BLL);
  }
  _Unwind_Resume(exception_object);
}

void *QMIAQMCommandDriver::QMIAQMCommandDriver(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  AQMCommandDriver::AQMCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  *a1 = &unk_26D4BE590;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = &unk_26D4BE5E0;
  return a1;
}

void sub_2223ABC10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void QMIAQMCommandDriver::bootstrap(uint64_t a1, uint64_t a2, void **a3, long long *a4)
{
  long long v6 = *a4;
  *(void *)a4 = 0;
  *((void *)a4 + 1) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 80);
  *(_OWORD *)(a1 + 72) = v6;
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 56));
  char v9 = ServiceMap;
  int v10 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    __int16 v11 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      int v10 = (char *)v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v44 = v10;
  char v14 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v9[1].__m_.__sig, (unint64_t *)&v44);
  if (v14)
  {
    uint64_t v16 = (void *)v14[3];
    char v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      char v17 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  char v15 = 0;
  char v17 = 1;
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(__p, "aqm");
  uint64_t v18 = *a3;
  xpc_object_t object = v18;
  if (v18) {
    xpc_retain(v18);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  QMIClientPool::requestClient(v16, 0xE2u, (uint64_t *)__p, a1 + 88, (uint64_t)&object, &aBlock);
  long long v19 = aBlock;
  long long aBlock = 0uLL;
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 104);
  *(_OWORD *)(a1 + 96) = v19;
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (*((void *)&aBlock + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&aBlock + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v43 < 0)
  {
    operator delete(__p[0]);
    if (v17) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if ((v17 & 1) == 0) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
LABEL_20:
  uint64_t v21 = *(void *)(a1 + 96);
  v40[0] = MEMORY[0x263EF8330];
  v40[1] = 0x40000000;
  v40[2] = ___ZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEE_block_invoke;
  v40[3] = &__block_descriptor_tmp_5;
  v40[4] = a1;
  uint64_t v22 = *(std::__shared_weak_count **)(v21 + 8);
  if (v22)
  {
    int v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      long long v29 = v23;
      uint64_t v30 = *(void *)v21;
      if (*(void *)v21)
      {
        uint64_t v44 = (char *)(v21 + 88);
        uint64_t v45 = 1;
        MEMORY[0x223C999F0](v21 + 88, v24, v25, v26, v27, v28);
        uint64_t v31 = *(void *)(v21 + 24);
        if (v31)
        {
          uint64_t v32 = v21 + 24;
          do
          {
            unsigned int v33 = *(unsigned __int16 *)(v31 + 32);
            BOOL v34 = v33 >= 0x50;
            if (v33 >= 0x50) {
              uint64_t v35 = (uint64_t *)v31;
            }
            else {
              uint64_t v35 = (uint64_t *)(v31 + 8);
            }
            if (v34) {
              uint64_t v32 = v31;
            }
            uint64_t v31 = *v35;
          }
          while (*v35);
          if (v32 != v21 + 24 && *(unsigned __int16 *)(v32 + 32) <= 0x50u) {
            __TUAssertTrigger();
          }
        }
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 0x40000000;
        uint64_t v50 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3bsp19AQMReportIndication10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        uint64_t v51 = &unk_264609CB0;
        int v52 = v40;
        unint64_t v36 = (uint64_t *)_Block_copy(&aBlock);
        unsigned __int16 v48 = 80;
        uint64_t v53 = &v48;
        v37 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v21 + 16), &v48, (uint64_t)&std::piecewise_construct, &v53);
        v38 = v37[5];
        v37[5] = v36;
        if (v38) {
          _Block_release(v38);
        }
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v44);
        uint64_t v44 = 0;
        uint64_t v45 = 0;
        uint64_t v39 = *(void *)(v21 + 64);
        uint64_t v46 = *(void *)(v21 + 56);
        uint64_t v47 = v39;
        if (v39) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v39 + 8), 1uLL, memory_order_relaxed);
        }
        QMIClientPool::registerUnsolicitedHandler(v30, (uint64_t)&v44, v21, 0x50u);
        qmi::Client::~Client((qmi::Client *)&v44);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v29);
    }
  }
}

void sub_2223ABF5C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a21);
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  _Unwind_Resume(a1);
}

void ___ZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t QMIAQMCommandDriver::shutdown(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 96);
  v4[0] = v2 + 88;
  v4[1] = 1;
  MEMORY[0x223C999F0](v2 + 88, a2);
  *(unsigned char *)(v2 + 74) = 0;
  return std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v4);
}

void QMIAQMCommandDriver::~QMIAQMCommandDriver(QMIAQMCommandDriver *this)
{
  *(void *)this = &unk_26D4BE590;
  *((void *)this + 11) = &unk_26D4BE5E0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  MEMORY[0x270EE9500](this);
}

{
  uint64_t vars8;

  QMIAQMCommandDriver::~QMIAQMCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIAQMCommandDriver::~QMIAQMCommandDriver(QMIAQMCommandDriver *this)
{
}

{
  uint64_t vars8;

  QMIAQMCommandDriver::~QMIAQMCommandDriver((QMIAQMCommandDriver *)((char *)this - 88));

  JUMPOUT(0x223C9A950);
}

uint64_t QMIAQMCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  uint64_t result = QMIVirtualClient::getServiceType(*a2);
  if (result != 226)
  {
    return __TUAssertTrigger();
  }
  return result;
}

uint64_t QMIVirtualClient::getServiceType(QMIVirtualClient *this)
{
  if (!*((unsigned char *)this + 72) || !*((void *)this + 7)) {
    __TUAssertTrigger();
  }

  return qmi::Client::getSvcType((QMIVirtualClient *)((char *)this + 40));
}

uint64_t non-virtual thunk to'QMIAQMCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  uint64_t result = QMIVirtualClient::getServiceType(*a2);
  if (result != 226)
  {
    return __TUAssertTrigger();
  }
  return result;
}

void QMIAQMCommandDriver::enableAQMReport(QMIAQMCommandDriver *this, int a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  int v4 = (const void **)__p[1];
  if (__p[1] != (void *)v9)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v9) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v9) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  v5[3] = a2;
  uint64_t v6 = *((void *)this + 12);
  if (!*(unsigned char *)(v6 + 72) || !*(void *)(v6 + 56)) {
    __TUAssertTrigger();
  }
  v10[5] = v6 + 40;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  char v14 = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  v10[2] = ___ZN16QMIVirtualClient4sendIN3bsp15EnableAQMReport7RequestEZN19QMIAQMCommandDriver15enableAQMReportEbE3__1EEvRKT_T0__block_invoke;
  v10[3] = &__block_descriptor_tmp_17_1;
  v10[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_5;
  aBlock[3] = &unk_264609CF8;
  aBlock[4] = v10;
  uint64_t v7 = _Block_copy(aBlock);
  char v14 = v7;
  if (v11)
  {
    qmi::Client::send();
    uint64_t v7 = v14;
  }
  if (v7) {
    _Block_release(v7);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223AC628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
}

void std::shared_ptr<QMIAQMCommandDriver>::shared_ptr[abi:ne180100]<QMIAQMCommandDriver,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223AC720(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1}::operator() const(QMIAQMCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223AC748(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIAQMCommandDriver *,std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver *)#1},std::allocator<QMIAQMCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAQMCommandDriver> ctu::SharedSynchronizable<AQMCommandDriver>::make_shared_ptr<QMIAQMCommandDriver>(QMIAQMCommandDriver*)::{lambda(QMIAQMCommandDriver*)#1}::operator() const(QMIAQMCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 16))();
  }
  return result;
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI16AQMCommandDriverE15execute_wrappedIZZN19QMIAQMCommandDriver9bootstrapENS_13group_sessionEN3xpc10connectionENSt3__110shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0EEvOT_EUlvE_EEvP16dispatch_queue_sNSA_10unique_ptrISF_NSA_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v18 = a1;
  long long v19 = v1;
  uint64_t v4 = *v1;
  uint64_t v2 = (qmi::MessageBase *)(v1 + 1);
  uint64_t v3 = v4;
  int v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = (uint64_t *)&v23;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(v2);
  uint64_t v7 = TlvValue;
  if (TlvValue)
  {
    int v8 = v6;
    uint64_t v20 = (uint64_t *)TlvValue;
    int v9 = tlv::parseV<bsp::tlv::AQMReportRBUplinkRate>((unint64_t *)&v20, v6);
    if (v20)
    {
      int v25 = 0;
      char v10 = 0;
      *((_DWORD *)std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(&v22, 0, &v25)+ 8) = v9;
      goto LABEL_6;
    }
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v2, 16, v7, v8);
  }
  char v10 = 1;
LABEL_6:
  uint64_t v11 = qmi::MessageBase::findTlvValue(v2);
  uint64_t v13 = v11;
  if (!v11) {
    goto LABEL_10;
  }
  int v14 = v12;
  uint64_t v20 = (uint64_t *)v11;
  int v15 = tlv::parseV<bsp::tlv::AQMReportRBDownlinkRate>((unint64_t *)&v20, v12);
  if (!v20)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v2, 17, v13, v14);
LABEL_10:
    if (v10) {
      goto LABEL_16;
    }
    goto LABEL_11;
  }
  int v25 = 2;
  *((_DWORD *)std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(&v22, 2, &v25)+ 8) = v15;
LABEL_11:
  uint64_t v16 = *(void *)(v3 + 72);
  if (v16)
  {
    uint64_t v20 = v22;
    v21[0] = v23;
    v21[1] = v24;
    if (v24)
    {
      v23[2] = v21;
      uint64_t v22 = (uint64_t *)&v23;
      int v23 = 0;
      uint64_t v24 = 0;
    }
    else
    {
      uint64_t v20 = (uint64_t *)v21;
    }
    (*(void (**)(uint64_t, uint64_t **))(*(void *)v16 + 16))(v16, &v20);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v21[0]);
  }
LABEL_16:
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v23);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v19);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v18);
}

void sub_2223AC9E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16)
{
}

uint64_t *_ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)(v2 + 8));
    MEMORY[0x223C9A950](v2, 0x1060C4072938BA3);
  }
  return a1;
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3bsp19AQMReportIndication10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_2223ACADC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t **std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>(uint64_t **a1, unsigned __int16 *a2, uint64_t a3, _WORD **a4)
{
  uint64_t v7 = a1 + 1;
  int v6 = a1[1];
  int v8 = a1 + 1;
  int v9 = a1 + 1;
  if (v6)
  {
    unsigned int v10 = *a2;
    while (1)
    {
      while (1)
      {
        int v9 = (uint64_t **)v6;
        unsigned int v11 = *((unsigned __int16 *)v6 + 16);
        if (v10 >= v11) {
          break;
        }
        int v6 = *v9;
        int v8 = v9;
        if (!*v9) {
          goto LABEL_9;
        }
      }
      if (v11 >= v10) {
        break;
      }
      int v6 = v9[1];
      if (!v6)
      {
        int v8 = v9 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
LABEL_9:
    _OWORD v14[2] = 1;
    int v12 = operator new(0x30uLL);
    v14[1] = v7;
    v12[16] = **a4;
    *((void *)v12 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v9, v8, (uint64_t *)v12);
    v14[0] = 0;
    std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>>>>::reset[abi:ne180100]((uint64_t)v14, 0);
    return (uint64_t **)v12;
  }
  return v9;
}

void std::unique_ptr<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,void *>>>>::reset[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__destroy_at[abi:ne180100]<std::pair<unsigned short const,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,0>((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void std::__destroy_at[abi:ne180100]<std::pair<unsigned short const,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,0>(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 8);
  if (v1) {
    _Block_release(v1);
  }
}

uint64_t std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100](uint64_t a1)
{
  if (*(unsigned char *)(a1 + 8)) {
    MEMORY[0x223C99A00](*(void *)a1);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AQMEnableFlag>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3bsp15EnableAQMReport7RequestEZN19QMIAQMCommandDriver15enableAQMReportEbE3__1EEvRKT_T0__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    char v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Failed to register for AQM indications: 0x%x (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*a1);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a1[1]);
    operator delete(a1);
  }
}

uint64_t **std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::__emplace_unique_key_args<AQMThroughputKey,std::piecewise_construct_t const&,std::tuple<AQMThroughputKey&&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  __int16 v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        __int16 v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      __int16 v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x28uLL);
    *((_DWORD *)v7 + 7) = *a3;
    *((_DWORD *)v7 + 8) = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    *uint64_t v6 = (uint64_t *)v7;
    unsigned int v10 = (uint64_t *)**a1;
    unsigned int v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      unsigned int v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void QMIBasebandSettingsDriver::create()
{
}

void sub_2223AD000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, uint64_t a11, std::__shared_weak_count *a12)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v13) {
    MEMORY[0x223C9A950](v12, 0x10F1C407C03E483);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIBasebandSettingsDriver::QMIBasebandSettingsDriver(uint64_t a1, uint64_t a2, NSObject **a3)
{
  v9[4] = *MEMORY[0x263EF8340];
  uint64_t v4 = *a3;
  *a3 = 0;
  xpc_object_t object = v4;
  v9[0] = &unk_26D4BA498;
  v9[3] = v9;
  BasebandSettingsDriver::BasebandSettingsDriver();
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v9);
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_26D4BE708;
  unsigned int v5 = subscriber::expectedSimCount();
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(a1 + 112, v5, 0);
  unsigned int v6 = subscriber::expectedSimCount();
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(a1 + 144, v6, 0);
  *(_WORD *)(a1 + 176) = 0;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 184), *(os_log_s **)(a1 + 40));
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 200), *(os_log_s **)(a1 + 40));
  *(void *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 0;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 264) = 0u;
  *(void *)(a1 + 280) = a1 + 288;
  return a1;
}

void sub_2223AD1AC(_Unwind_Exception *a1)
{
  unsigned int v5 = (std::__shared_weak_count *)*((void *)v1 + 24);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(v3);
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(v2);
  BasebandSettingsDriver::~BasebandSettingsDriver(v1);
  _Unwind_Resume(a1);
}

void sub_2223AD1FC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x2223AD1F4);
}

uint64_t *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::~dynamic_bitset(uint64_t *a1)
{
  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants(a1)) {
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  }
  int v2 = (void *)*a1;
  if (*a1)
  {
    a1[1] = (uint64_t)v2;
    operator delete(v2);
  }
  return a1;
}

void QMIBasebandSettingsDriver::~QMIBasebandSettingsDriver(QMIBasebandSettingsDriver *this)
{
  *(void *)this = &unk_26D4BE708;
  std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*((void **)this + 36));
  qmi::Client::~Client((QMIBasebandSettingsDriver *)((char *)this + 248));
  qmi::Client::~Client((QMIBasebandSettingsDriver *)((char *)this + 216));
  int v2 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 24);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (void **)((char *)this + 144);
  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants((uint64_t *)this + 18)) {
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  }
  unsigned int v5 = *v4;
  if (*v4)
  {
    *((void *)this + 19) = v5;
    operator delete(v5);
  }
  unsigned int v6 = (void **)((char *)this + 112);
  if (!boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants((uint64_t *)this + 14)) {
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  }
  uint64_t v7 = *v6;
  if (*v6)
  {
    *((void *)this + 15) = v7;
    operator delete(v7);
  }

  BasebandSettingsDriver::~BasebandSettingsDriver(this);
}

{
  uint64_t vars8;

  QMIBasebandSettingsDriver::~QMIBasebandSettingsDriver(this);

  JUMPOUT(0x223C9A950);
}

void *QMIBasebandSettingsDriver::bootstrap(uint64_t a1, uint64_t *a2)
{
  uint64_t v79 = *MEMORY[0x263EF8340];
  uint64_t v4 = *a2;
  uint64_t v3 = a2[1];
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 80);
  *(void *)(a1 + 72) = v4;
  *(void *)(a1 + 80) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  v49 = (Registry **)(a1 + 56);
  subscriber::makeSimSlotRange();
  unsigned int v6 = v63;
  if (v63 != v64)
  {
    while ((v65(*v6) & 1) == 0)
    {
      if (++v6 == v64)
      {
        unsigned int v6 = v64;
        break;
      }
    }
    while (v6 != v64)
    {
      if (*v6 == 1)
      {
        uint64_t v7 = "QMIBasebandSettingsDriver::dms.1";
        int v8 = "QMIBasebandSettingsDriver::registration.1";
      }
      else if (*v6 == 2)
      {
        uint64_t v7 = "QMIBasebandSettingsDriver::dms.2";
        int v8 = "QMIBasebandSettingsDriver::registration.2";
      }
      else
      {
        uint64_t v7 = 0;
        int v8 = 0;
      }
      int v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v9 || (uint64_t v10 = *(void *)(a1 + 8), (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v12 = v11;
      atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      Registry::getServerConnection((uint64_t *)&v66, *v49);
      long long v76 = 0u;
      long long v77 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v67, v8);
      int v13 = *(NSObject **)(a1 + 24);
      dispatch_object_t v75 = v13;
      if (v13) {
        dispatch_retain(v13);
      }
      std::string::basic_string[abi:ne180100]<0>(v73, "registration");
      uint64_t v71 = 0;
      v72 = 0;
      int v14 = std::__shared_weak_count::lock(v12);
      if (v14)
      {
        int v15 = v14;
        atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v71 = v10;
        v72 = v14;
        std::__shared_weak_count::__release_weak(v12);
        std::__shared_weak_count::__release_shared[abi:ne180100](v15);
      }
      else
      {
        uint64_t v71 = 0;
        v72 = 0;
        std::__shared_weak_count::__release_weak(v12);
      }
      long long v70 = v66;
      long long v66 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v70 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
      }
      if (v72) {
        std::__shared_weak_count::__release_weak(v72);
      }
      if (v74 < 0) {
        operator delete(v73[0]);
      }
      if (v75) {
        dispatch_release(v75);
      }
      if (SBYTE7(v69) < 0) {
        operator delete(v67);
      }
      v67 = 0;
      uint64_t v68 = 0;
      long long v69 = v77;
      long long v77 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v67);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&v76);
      if (*((void *)&v66 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
      }
      uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v16 || (v17 = *(void *)(a1 + 8), (uint64_t v18 = std::__shared_weak_count::lock(v16)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      long long v19 = v18;
      atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      Registry::getServerConnection((uint64_t *)&v66, *v49);
      long long v76 = 0u;
      long long v77 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v67, v7);
      uint64_t v20 = *(NSObject **)(a1 + 24);
      dispatch_object_t v75 = v20;
      if (v20) {
        dispatch_retain(v20);
      }
      std::string::basic_string[abi:ne180100]<0>(v73, "dms");
      uint64_t v71 = 0;
      v72 = 0;
      uint64_t v21 = std::__shared_weak_count::lock(v19);
      if (v21)
      {
        uint64_t v22 = v21;
        atomic_fetch_add_explicit(&v21->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v71 = v17;
        v72 = v21;
        std::__shared_weak_count::__release_weak(v19);
        std::__shared_weak_count::__release_shared[abi:ne180100](v22);
      }
      else
      {
        uint64_t v71 = 0;
        v72 = 0;
        std::__shared_weak_count::__release_weak(v19);
      }
      long long v70 = v66;
      long long v66 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v70 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v70 + 1));
      }
      if (v72) {
        std::__shared_weak_count::__release_weak(v72);
      }
      if (v74 < 0) {
        operator delete(v73[0]);
      }
      if (v75) {
        dispatch_release(v75);
      }
      if (SBYTE7(v69) < 0) {
        operator delete(v67);
      }
      v67 = 0;
      uint64_t v68 = 0;
      long long v69 = v77;
      long long v77 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v67);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&v76);
      if (*((void *)&v66 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v66 + 1));
      }
      int v23 = v6 + 1;
      unsigned int v6 = v64;
      if (v23 != v64)
      {
        unsigned int v6 = v23;
        while ((v65(*v6) & 1) == 0)
        {
          if (++v6 == v64)
          {
            unsigned int v6 = v64;
            break;
          }
        }
      }
    }
  }
  std::string::basic_string[abi:ne180100]<0>(&v67, *(char **)(a1 + 88));
  uint64_t v24 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v24;
  if (v24) {
    dispatch_retain(v24);
  }
  std::string::basic_string[abi:ne180100]<0>(v73, "bsp");
  int v25 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v25 || (uint64_t v26 = *(void *)(a1 + 8), (v27 = std::__shared_weak_count::lock(v25)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v28 = v27;
  atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  long long v29 = std::__shared_weak_count::lock(v28);
  uint64_t v30 = v29;
  if (v29) {
    atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  else {
    uint64_t v26 = 0;
  }
  uint64_t v60 = v26;
  uint64_t v61 = v29;
  std::__shared_weak_count::__release_weak(v28);
  if (v30) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  }
  Registry::getServerConnection(&v58, *v49);
  qmi::Client::createWithQueueLocal();
  long long v31 = v77;
  long long v77 = 0uLL;
  uint64_t v32 = *(std::__shared_weak_count **)(a1 + 240);
  *(_OWORD *)(a1 + 232) = v31;
  if (v32) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  }
  qmi::Client::~Client((qmi::Client *)&v76);
  if (v59) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v59);
  }
  if (v61) {
    std::__shared_weak_count::__release_weak(v61);
  }
  if (v74 < 0) {
    operator delete(v73[0]);
  }
  if (object) {
    dispatch_release(object);
  }
  if (SBYTE7(v69) < 0) {
    operator delete(v67);
  }
  v57[20] = MEMORY[0x263EF8330];
  v57[21] = 0x40000000;
  v57[22] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke;
  v57[23] = &__block_descriptor_tmp_6;
  v57[24] = a1;
  qmi::Client::setHandler();
  v57[15] = MEMORY[0x263EF8330];
  v57[16] = 0x40000000;
  v57[17] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5;
  v57[18] = &__block_descriptor_tmp_6_1;
  v57[19] = a1;
  qmi::Client::setHandler();
  v57[10] = MEMORY[0x263EF8330];
  v57[11] = 0x40000000;
  v57[12] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_7;
  v57[13] = &__block_descriptor_tmp_9;
  v57[14] = a1;
  qmi::Client::setHandler();
  v57[5] = MEMORY[0x263EF8330];
  v57[6] = 0x40000000;
  v57[7] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_2;
  v57[8] = &__block_descriptor_tmp_10_0;
  v57[9] = a1;
  qmi::Client::setHandler();
  v57[0] = MEMORY[0x263EF8330];
  v57[1] = 0x40000000;
  v57[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_3;
  v57[3] = &__block_descriptor_tmp_12_3;
  v57[4] = a1;
  *(void *)&long long v76 = MEMORY[0x263EF8330];
  *((void *)&v76 + 1) = 0x40000000;
  *(void *)&long long v77 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp11GetCDRXInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v77 + 1) = &unk_26460A0C8;
  v78 = v57;
  qmi::Client::setIndHandler();
  v56[0] = MEMORY[0x263EF8330];
  v56[1] = 0x40000000;
  v56[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_4;
  v56[3] = &__block_descriptor_tmp_13_2;
  v56[4] = a1;
  *(void *)&long long v76 = MEMORY[0x263EF8330];
  *((void *)&v76 + 1) = 0x40000000;
  *(void *)&long long v77 = ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18FileTransferStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v77 + 1) = &unk_26460A0F0;
  v78 = v56;
  qmi::Client::setIndHandler();
  ShouldWake = (capabilities::ct *)qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 216));
  if (capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(ShouldWake))
  {
    std::string::basic_string[abi:ne180100]<0>(&v67, *(char **)(a1 + 88));
    BOOL v34 = *(NSObject **)(a1 + 24);
    dispatch_object_t v55 = v34;
    if (v34) {
      dispatch_retain(v34);
    }
    std::string::basic_string[abi:ne180100]<0>(v73, "pdc");
    uint64_t v35 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v35 || (uint64_t v36 = *(void *)(a1 + 8), (v37 = std::__shared_weak_count::lock(v35)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    v38 = v37;
    atomic_fetch_add_explicit(&v37->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
    uint64_t v53 = 0;
    v54 = 0;
    uint64_t v39 = std::__shared_weak_count::lock(v38);
    uint64_t v40 = v39;
    if (v39) {
      atomic_fetch_add_explicit(&v39->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    else {
      uint64_t v36 = 0;
    }
    uint64_t v53 = v36;
    v54 = v39;
    std::__shared_weak_count::__release_weak(v38);
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    Registry::getServerConnection(&v51, *v49);
    qmi::Client::createWithQueueLocal();
    long long v41 = v77;
    long long v77 = 0uLL;
    int v42 = *(std::__shared_weak_count **)(a1 + 272);
    *(_OWORD *)(a1 + 264) = v41;
    if (v42) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
    qmi::Client::~Client((qmi::Client *)&v76);
    if (v52) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v52);
    }
    if (v54) {
      std::__shared_weak_count::__release_weak(v54);
    }
    if (v74 < 0) {
      operator delete(v73[0]);
    }
    if (v55) {
      dispatch_release(v55);
    }
    if (SBYTE7(v69) < 0) {
      operator delete(v67);
    }
    v50[10] = MEMORY[0x263EF8330];
    v50[11] = 0x40000000;
    v50[12] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5;
    v50[13] = &__block_descriptor_tmp_15_1;
    v50[14] = a1;
    qmi::Client::setHandler();
    v50[5] = MEMORY[0x263EF8330];
    v50[6] = 0x40000000;
    v50[7] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_16;
    v50[8] = &__block_descriptor_tmp_17_2;
    v50[9] = a1;
    qmi::Client::setHandler();
    v50[0] = MEMORY[0x263EF8330];
    v50[1] = 0x40000000;
    v50[2] = ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_18;
    v50[3] = &__block_descriptor_tmp_19_1;
    v50[4] = a1;
    *(void *)&long long v76 = MEMORY[0x263EF8330];
    *((void *)&v76 + 1) = 0x40000000;
    *(void *)&long long v77 = ___ZNK3qmi6Client13setIndHandlerIRKN3pdc14ActivateConfig10IndicationEEEvtU13block_pointerFvT_E_block_invoke_0;
    *((void *)&v77 + 1) = &unk_26460A118;
    v78 = v50;
    qmi::Client::setIndHandler();
    qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 248));
  }
  *(void *)&long long v76 = &unk_26D4BEA38;
  *((void *)&v76 + 1) = a1;
  *((void *)&v77 + 1) = &v76;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v76);
  if (_os_feature_enabled_impl())
  {
    *(void *)&long long v76 = &unk_26D4BEAB8;
    *((void *)&v76 + 1) = a1;
    *((void *)&v77 + 1) = &v76;
    qmi::ClientRouter::setIndHandlerInternal();
    std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v76);
  }
  char v43 = operator new(0x28uLL);
  *(void *)char v43 = &unk_26D4BE8D8;
  v43[8] = 3;
  *((void *)v43 + 2) = "NAS";
  *((void *)v43 + 3) = a1;
  *((void *)v43 + 4) = a1 + 112;
  *((void *)&v77 + 1) = v43;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v76);
  uint64_t v44 = operator new(0x20uLL);
  *uint64_t v44 = &unk_26D4BE958;
  v44[1] = a1;
  v44[2] = "NAS";
  v44[3] = a1 + 112;
  *((void *)&v77 + 1) = v44;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v76);
  uint64_t v45 = operator new(0x28uLL);
  *(void *)uint64_t v45 = &unk_26D4BE8D8;
  v45[8] = 2;
  *((void *)v45 + 2) = "DMS";
  *((void *)v45 + 3) = a1;
  *((void *)v45 + 4) = a1 + 144;
  *((void *)&v77 + 1) = v45;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v76);
  uint64_t v46 = operator new(0x20uLL);
  void *v46 = &unk_26D4BE958;
  v46[1] = a1;
  v46[2] = "DMS";
  v46[3] = a1 + 144;
  *((void *)&v77 + 1) = v46;
  qmi::ClientRouter::setHandler();
  uint64_t v47 = (capabilities::ct *)std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v76);
  uint64_t result = (void *)capabilities::ct::supports5G(v47);
  if (result)
  {
    *(void *)&long long v76 = &unk_26D4BEB38;
    *((void *)&v76 + 1) = a1;
    *((void *)&v77 + 1) = &v76;
    qmi::ClientRouter::setIndHandlerInternal();
    return std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v76);
  }
  return result;
}

void sub_2223AE0D4(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100]((void *)(v1 - 160));
  _Unwind_Resume(a1);
}

void ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I BSP QMI client has started", buf, 2u);
  }
  *(unsigned char *)(v1 + 176) = 1;
  QMIBasebandSettingsDriver::handleClientStarted_sync(v1);
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v3 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v3 + 8) != 16)
    {
      if (++v3 == (const void **)v12) {
        goto LABEL_10;
      }
    }
  }
  if (v3 == (const void **)v12) {
LABEL_10:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  v4[9] = 1;
  v6[5] = v1 + 216;
  uint64_t v7 = QMIServiceMsg::create();
  int v8 = 25000;
  uint64_t v9 = 0;
  long long aBlock = 0;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZNK25QMIBasebandSettingsDriver27registerCDRXIndication_syncEv_block_invoke_2;
  v6[3] = &__block_descriptor_tmp_46;
  v6[4] = v1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v14 = 0x40000000;
  int v15 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  uint64_t v16 = &unk_26460A190;
  uint64_t v17 = v6;
  unsigned int v5 = _Block_copy(buf);
  long long aBlock = v5;
  if (v7)
  {
    qmi::Client::send();
    unsigned int v5 = aBlock;
  }
  if (v5) {
    _Block_release(v5);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223AE580(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

capabilities::ct *QMIBasebandSettingsDriver::handleClientStarted_sync(uint64_t a1)
{
  uint64_t result = (capabilities::ct *)boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(*(int8x8_t **)(a1 + 112), *(void *)(a1 + 120));
  if (result == *(capabilities::ct **)(a1 + 136))
  {
    uint64_t result = (capabilities::ct *)boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(*(int8x8_t **)(a1 + 144), *(void *)(a1 + 152));
    if (result == *(capabilities::ct **)(a1 + 168))
    {
      if (*(unsigned char *)(a1 + 176))
      {
        uint64_t result = (capabilities::ct *)capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(result);
        if (!result || *(unsigned char *)(a1 + 177))
        {
          uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 72) + 16);
          return (capabilities::ct *)v3();
        }
      }
    }
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I BSP QMI client has stopped", v4, 2u);
  }
  *(unsigned char *)(v1 + 176) = 0;
  return QMIBasebandSettingsDriver::handleClientStopped_sync(v1);
}

uint64_t QMIBasebandSettingsDriver::handleClientStopped_sync(uint64_t result)
{
  uint64_t v1 = result;
  int v2 = *(unint64_t **)(result + 112);
  uint64_t v3 = *(void *)(result + 120) - (void)v2;
  if (v3)
  {
    unint64_t v4 = v3 >> 3;
    if (v4 <= 1) {
      uint64_t v5 = 1;
    }
    else {
      uint64_t v5 = v4;
    }
    unint64_t v6 = *v2;
    if (*v2) {
      return result;
    }
    uint64_t v7 = v2 + 1;
    uint64_t v8 = v5 - 1;
    while (v8 != v6)
    {
      if (v7[v6++])
      {
        if (v6 < v4) {
          return result;
        }
        break;
      }
    }
  }
  uint64_t v10 = *(unint64_t **)(result + 144);
  uint64_t v11 = *(void *)(result + 152) - (void)v10;
  if (v11)
  {
    unint64_t v12 = v11 >> 3;
    if (v12 <= 1) {
      uint64_t v13 = 1;
    }
    else {
      uint64_t v13 = v12;
    }
    unint64_t v14 = *v10;
    if (*v10) {
      return result;
    }
    int v15 = v10 + 1;
    uint64_t v16 = v13 - 1;
    while (v16 != v14)
    {
      if (v15[v14++])
      {
        if (v14 < v12) {
          return result;
        }
        break;
      }
    }
  }
  if (*(unsigned char *)(result + 176)) {
    return result;
  }
  uint64_t result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot((capabilities::ct *)result);
  if (result)
  {
    if (*(unsigned char *)(v1 + 177)) {
      return result;
    }
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*(void **)(v1 + 288));
    *(void *)(v1 + 288) = 0;
    *(void *)(v1 + 296) = 0;
    *(void *)(v1 + 280) = v1 + 288;
  }
  uint64_t v18 = *(uint64_t (**)(void))(**(void **)(v1 + 72) + 16);

  return v18();
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_7(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 72) + 24))();
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 32) + 72) + 32))();
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_3(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK25QMIBasebandSettingsDriver26handleBSPEventCDRXInd_syncERKN3bsp11GetCDRXInfo10IndicationE_block_invoke;
  uint64_t v10 = &__block_descriptor_tmp_48_0;
  uint64_t v11 = v3;
  uint64_t result = qmi::MessageBase::findTlvValue(this);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v13 = result;
    BOOL v12 = tlv::parseV<bsp::tlv::CDRXInfo>((unint64_t *)&v13, v5);
    if (v13) {
      return v9((uint64_t)v8, &v12);
    }
    else {
      return ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v6, v7);
    }
  }
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_4(capabilities::ct *a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *((void *)a1 + 4);
  if (capabilities::ct::supportsGemini(a1))
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    if (TlvValue)
    {
      uint64_t v6 = TlvValue;
      int v7 = v5;
      v13[0] = TlvValue;
      unsigned __int8 v8 = tlv::parseV<bsp::tlv::SubscriptionID>(v13, v5);
      if (v13[0])
      {
        LODWORD(TlvValue) = subscriber::instanceAsSimSlot((subscriber *)v8);
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v6, v7);
        LODWORD(TlvValue) = 0;
      }
    }
  }
  else
  {
    LODWORD(TlvValue) = 1;
  }
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  unint64_t v14 = ___ZN25QMIBasebandSettingsDriver29handleFileTransferStatus_syncERKN3bsp18FileTransferStatus10IndicationE_block_invoke;
  int v15 = &__block_descriptor_tmp_93_0;
  uint64_t v16 = v3;
  int v17 = TlvValue;
  uint64_t result = qmi::MessageBase::findTlvValue(a2);
  if (result)
  {
    uint64_t v11 = result;
    int v12 = v10;
    uint64_t v19 = result;
    uint64_t v18 = tlv::parseV<bsp::tlv::TransferStatus>((unint64_t *)&v19, v10);
    if (v19) {
      return v14((uint64_t)v13, (uint64_t)&v18);
    }
    else {
      return ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v11, v12);
    }
  }
  return result;
}

capabilities::ct *___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_5(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I PDC QMI client has started", v4, 2u);
  }
  *(unsigned char *)(v1 + 177) = 1;
  return QMIBasebandSettingsDriver::handleClientStarted_sync(v1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_16(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I PDC QMI client has stopped", v4, 2u);
  }
  *(unsigned char *)(v1 + 177) = 0;
  return QMIBasebandSettingsDriver::handleClientStopped_sync(v1);
}

void ___ZN25QMIBasebandSettingsDriver9bootstrapENSt3__110shared_ptrI43BasebandSettingsDriverEventHandlerInterfaceEE_block_invoke_18(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v39 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    v37[0] = TlvValue;
    __int16 v8 = tlv::parseV<pdc::tlv::ErrorCode>(v37, v5);
    if (v37[0])
    {
      if (v8)
      {
        uint64_t v9 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          int v10 = *((_DWORD *)this + 1);
          uint64_t v11 = qmi::asString();
          *(_DWORD *)long long buf = 67109378;
          *(_DWORD *)&uint8_t buf[4] = v10;
          *(_WORD *)&uint8_t buf[8] = 2080;
          *(void *)&buf[10] = v11;
          _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "PDC active configuration indication failed: %d (%s)", buf, 0x12u);
        }
      }
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 1, v6, v7);
    }
  }
  uint64_t v12 = qmi::MessageBase::findTlvValue(this);
  uint64_t v14 = v12;
  if (!v12) {
    goto LABEL_12;
  }
  int v15 = v13;
  *(void *)long long buf = v12;
  uint64_t v16 = (subscriber *)tlv::parseV<pdc::tlv::IndicationToken>((unint64_t *)buf, v13);
  if (!*(void *)buf)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v14, v15);
LABEL_12:
    LODWORD(v17) = 0;
    goto LABEL_13;
  }
  uint64_t v17 = subscriber::instanceAsSimSlot(v16);
  uint64_t v18 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v17);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v37[0]) = 0;
    _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I PDC refresh completed successfully", (uint8_t *)v37, 2u);
  }
LABEL_13:
  uint64_t v19 = *(void *)(v3 + 288);
  if (!v19) {
    goto LABEL_23;
  }
  uint64_t v20 = (uint64_t **)(v3 + 288);
  uint64_t v21 = v3 + 288;
  do
  {
    int v22 = *(_DWORD *)(v19 + 32);
    BOOL v23 = v22 < (int)v17;
    if (v22 >= (int)v17) {
      uint64_t v24 = (uint64_t *)v19;
    }
    else {
      uint64_t v24 = (uint64_t *)(v19 + 8);
    }
    if (!v23) {
      uint64_t v21 = v19;
    }
    uint64_t v19 = *v24;
  }
  while (*v24);
  if ((uint64_t **)v21 != v20 && (int)v17 >= *(_DWORD *)(v21 + 32))
  {
    FilePushTransactionResult::FilePushTransactionResult();
    std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>::operator()(*(void *)(v21 + 64), v17, *(uint64_t *)buf);
    uint64_t v26 = *v20;
    if (*v20)
    {
      uint64_t v27 = (uint64_t *)(v3 + 288);
      uint64_t v28 = *v20;
      do
      {
        int v29 = *((_DWORD *)v28 + 8);
        BOOL v30 = v29 < (int)v17;
        if (v29 >= (int)v17) {
          long long v31 = (uint64_t **)v28;
        }
        else {
          long long v31 = (uint64_t **)(v28 + 1);
        }
        if (!v30) {
          uint64_t v27 = v28;
        }
        uint64_t v28 = *v31;
      }
      while (*v31);
      if (v27 != (uint64_t *)v20 && *((_DWORD *)v27 + 8) <= (int)v17)
      {
        uint64_t v32 = (uint64_t *)v27[1];
        if (v32)
        {
          do
          {
            unsigned int v33 = v32;
            uint64_t v32 = (uint64_t *)*v32;
          }
          while (v32);
        }
        else
        {
          uint64_t v35 = v27;
          do
          {
            unsigned int v33 = (uint64_t *)v35[2];
            BOOL v36 = *v33 == (void)v35;
            uint64_t v35 = v33;
          }
          while (!v36);
        }
        if (*(uint64_t **)(v3 + 280) == v27) {
          *(void *)(v3 + 280) = v33;
        }
        --*(void *)(v3 + 296);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v26, v27);
        std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](v27 + 5);
        operator delete(v27);
      }
    }
  }
  else
  {
LABEL_23:
    int v25 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_FAULT))
    {
      uint64_t v34 = subscriber::asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v34;
      _os_log_fault_impl(&dword_22231A000, v25, OS_LOG_TYPE_FAULT, "Received PDC activate configuration indication (%s) with no callback", buf, 0xCu);
    }
  }
}

uint64_t QMIBasebandSettingsDriver::start(QMIBasebandSettingsDriver *this)
{
  int v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v5 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", v5, 2u);
  }
  qmi::ClientRouter::start();
  qmi::ClientRouter::start();
  uint64_t v3 = (capabilities::ct *)qmi::Client::start((QMIBasebandSettingsDriver *)((char *)this + 216));
  uint64_t result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(v3);
  if (result) {
    return qmi::Client::start((QMIBasebandSettingsDriver *)((char *)this + 248));
  }
  return result;
}

uint64_t QMIBasebandSettingsDriver::shutdown(uint64_t a1)
{
  qmi::ClientRouter::stop();
  qmi::ClientRouter::stop();
  int v2 = (capabilities::ct *)qmi::Client::stop((qmi::Client *)(a1 + 216));
  uint64_t result = capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot(v2);
  if (result)
  {
    return qmi::Client::stop((qmi::Client *)(a1 + 248));
  }
  return result;
}

uint64_t boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::count(int8x8_t *a1, uint64_t a2)
{
  unint64_t v2 = (a2 - (uint64_t)a1) >> 3;
  uint64x2_t v3 = 0uLL;
  if ((unint64_t)(a2 - (void)a1) >= 9)
  {
    do
    {
      int8x16_t v4 = *(int8x16_t *)a1->i8;
      a1 += 2;
      uint64x2_t v3 = vpadalq_u32(v3, vpaddlq_u16(vpaddlq_u8((uint8x16_t)vcntq_s8(v4))));
      v2 -= 2;
    }
    while (v2 > 1);
  }
  uint64_t v5 = v3.i64[0];
  if (v2)
  {
    uint8x8_t v6 = (uint8x8_t)vcnt_s8(*a1);
    v6.i16[0] = vaddlv_u8(v6);
    uint64_t v5 = v6.u32[0] + v3.i64[0];
  }
  return v5 + v3.i64[1];
}

void ___ZNK25QMIBasebandSettingsDriver27registerCDRXIndication_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64x2_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    v8[0] = 67109378;
    v8[1] = v2;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    uint64_t v5 = "#N Registering for CDRX indications failed with code %d (%s)";
    uint8x8_t v6 = v3;
    uint32_t v7 = 18;
  }
  else
  {
    if (!v4) {
      return;
    }
    LOWORD(v8[0]) = 0;
    uint64_t v5 = "#I Register for CDRX indications succeeded";
    uint8x8_t v6 = v3;
    uint32_t v7 = 2;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

uint64_t ___ZNK25QMIBasebandSettingsDriver26handleBSPEventCDRXInd_syncERKN3bsp11GetCDRXInfo10IndicationE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  BOOL v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = 136315138;
    uint64_t v7 = CSIBOOLAsString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I CDRX Indication: LTE with CDRX is %s", (uint8_t *)&v6, 0xCu);
  }
  return (*(uint64_t (**)(void, BOOL))(**(void **)(v3 + 72) + 56))(*(void *)(v3 + 72), *a2 == 0);
}

uint64_t QMIBasebandSettingsDriver::queryLTEWithCDRXState(QMIBasebandSettingsDriver *this)
{
  memset(v9, 0, sizeof(v9));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
  v4[5] = (char *)this + 216;
  uint64_t v5 = QMIServiceMsg::create();
  int v6 = 25000;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  _DWORD v4[2] = ___ZN25QMIBasebandSettingsDriver21queryLTEWithCDRXStateEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_49;
  v4[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp11GetCDRXInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A1B8;
  aBlock[4] = v4;
  int v2 = _Block_copy(aBlock);
  uint64_t v8 = v2;
  if (v5)
  {
    qmi::Client::send();
    int v2 = v8;
  }
  if (v2) {
    _Block_release(v2);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  return 1;
}

void sub_2223AF300(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver21queryLTEWithCDRXStateEv_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  *(void *)&v18[5] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *((_DWORD *)this + 1);
  if (v3)
  {
    BOOL v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      v18[0] = v3;
      LOWORD(v18[1]) = 2080;
      *(void *)((char *)&v18[1] + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N Querying for for CDRX has failed with code %d (%s)", buf, 0x12u);
    }
    goto LABEL_10;
  }
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue)
  {
LABEL_10:
    uint64_t v14 = 2;
    return (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 72) + 56))(*(void *)(v2 + 72), v14);
  }
  uint64_t v8 = TlvValue;
  int v9 = v7;
  uint64_t v16 = TlvValue;
  BOOL v10 = tlv::parseV<bsp::tlv::CDRXInfo>((unint64_t *)&v16, v7);
  if (!v16)
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v8, v9);
    goto LABEL_10;
  }
  BOOL v11 = v10;
  uint64_t v12 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = CSIBOOLAsString();
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v18 = v13;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I LTE with CDRX is %s", buf, 0xCu);
  }
  uint64_t v14 = !v11;
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 72) + 56))(*(void *)(v2 + 72), v14);
}

uint64_t std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  int v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

uint64_t std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = a3;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, int *))(*(void *)a1 + 48))(a1, a2, &v4);
}

void QMIBasebandSettingsDriver::setActiveBands(uint64_t a1, int a2, void *a3)
{
  (*(void (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v64 = 0;
  v65[0] = 0;
  v65[1] = 0;
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)&v64, a3);
  uint64_t v5 = v65[0];
  if (!v65[0]) {
    goto LABEL_10;
  }
  int v6 = v65;
  uint64_t v7 = v65[0];
  do
  {
    uint64_t v8 = (uint64_t *)v7;
    int v9 = v6;
    int v10 = *(_DWORD *)(v7 + 32);
    BOOL v11 = (uint64_t *)(v7 + 8);
    if (v10 >= 5)
    {
      BOOL v11 = v8;
      int v6 = v8;
    }
    uint64_t v7 = *v11;
  }
  while (v7);
  if (v6 == v65) {
    goto LABEL_10;
  }
  if (v10 < 5) {
    uint64_t v8 = v9;
  }
  if (*((int *)v8 + 8) >= 6) {
LABEL_10:
  }
    int v6 = v65;
  if (!v65[0]) {
    goto LABEL_20;
  }
  uint64_t v12 = v65;
  uint64_t v13 = v65[0];
  do
  {
    uint64_t v14 = (uint64_t *)v13;
    int v15 = v12;
    int v16 = *(_DWORD *)(v13 + 32);
    uint64_t v17 = (uint64_t *)(v13 + 8);
    if (v16 >= 0)
    {
      uint64_t v17 = v14;
      uint64_t v12 = v14;
    }
    uint64_t v13 = *v17;
  }
  while (v13);
  if (v12 == v65) {
    goto LABEL_20;
  }
  if (v16 < 0) {
    uint64_t v14 = v15;
  }
  if (*((int *)v14 + 8) >= 1) {
LABEL_20:
  }
    uint64_t v12 = v65;
  if (!v65[0]) {
    goto LABEL_30;
  }
  uint64_t v18 = v65;
  uint64_t v19 = v65[0];
  do
  {
    uint64_t v20 = (uint64_t *)v19;
    uint64_t v21 = v18;
    int v22 = *(_DWORD *)(v19 + 32);
    BOOL v23 = (uint64_t *)(v19 + 8);
    if (v22 >= 2)
    {
      BOOL v23 = v20;
      uint64_t v18 = v20;
    }
    uint64_t v19 = *v23;
  }
  while (v19);
  if (v18 == v65) {
    goto LABEL_30;
  }
  if (v22 < 2) {
    uint64_t v20 = v21;
  }
  if (*((int *)v20 + 8) >= 3) {
LABEL_30:
  }
    uint64_t v18 = v65;
  if (!v65[0]) {
    goto LABEL_41;
  }
  uint64_t v24 = (int *)v65;
  do
  {
    int v25 = (uint64_t *)v5;
    uint64_t v26 = v24;
    int v27 = *(_DWORD *)(v5 + 32);
    uint64_t v28 = (uint64_t *)(v5 + 8);
    if (v27 >= 9)
    {
      uint64_t v28 = v25;
      uint64_t v24 = (int *)v25;
    }
    uint64_t v5 = *v28;
  }
  while (v5);
  if (v24 == (int *)v65 || (v27 >= 9 ? (int v29 = (int *)v25) : (int v29 = v26), v29[8] >= 10)) {
LABEL_41:
  }
    uint64_t v24 = (int *)v65;
  long long v62 = 0u;
  long long v63 = 0u;
  BOOL v30 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v62);
  if (v6 != v65 && v12 != v65 && v18 != v65)
  {
    v61[0] = MEMORY[0x263EF8330];
    v61[1] = 0x40000000;
    v61[2] = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke;
    v61[3] = &__block_descriptor_tmp_51;
    v61[4] = v6;
    v61[5] = v12;
    v61[6] = v18;
    long long v31 = (const void **)*((void *)&v62 + 1);
    if (*((void *)&v62 + 1) != (void)v63)
    {
      while (*((unsigned char *)*v31 + 8) != 18)
      {
        if (++v31 == (const void **)v63) {
          goto LABEL_52;
        }
      }
    }
    if (v31 == (const void **)v63) {
LABEL_52:
    }
      operator new();
    if (!v32) {
      goto LABEL_118;
    }
    ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke(v61, v32 + 2);
    BOOL v30 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>((uint64_t)&v62, 17);
    *(_WORD *)v30 |= 0xFu;
  }
  unsigned int v33 = (int *)v65[0];
  if (v65[0])
  {
    uint64_t v34 = (int *)v65;
    do
    {
      uint64_t v35 = v33;
      BOOL v36 = v34;
      int v37 = v33[8];
      if (v37 >= 7) {
        uint64_t v34 = v33;
      }
      else {
        v33 += 2;
      }
      unsigned int v33 = *(int **)v33;
    }
    while (v33);
    if (v34 != (int *)v65)
    {
      if (v37 < 7) {
        uint64_t v35 = v36;
      }
      if (v35[8] <= 7)
      {
        v60[0] = MEMORY[0x263EF8330];
        v60[1] = 0x40000000;
        v60[2] = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3;
        v60[3] = &__block_descriptor_tmp_57_0;
        v60[4] = v34;
        v38 = (const void **)*((void *)&v62 + 1);
        if (*((void *)&v62 + 1) != (void)v63)
        {
          while (*((unsigned char *)*v38 + 8) != 36)
          {
            if (++v38 == (const void **)v63) {
              goto LABEL_70;
            }
          }
        }
        if (v38 == (const void **)v63) {
LABEL_70:
        }
          operator new();
        if (!v39) {
          __cxa_bad_cast();
        }
        ((void (*)(void *, char *))___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3)(v60, v39 + 9);
        BOOL v30 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>((uint64_t)&v62, 17);
        *(_WORD *)v30 |= 0x10u;
      }
    }
  }
  if (v24 == (int *)v65)
  {
LABEL_80:
    uint64_t v42 = v65[0];
    if (v65[0])
    {
      char v43 = v65;
      do
      {
        uint64_t v44 = (uint64_t *)v42;
        uint64_t v45 = v43;
        int v46 = *(_DWORD *)(v42 + 32);
        uint64_t v47 = (uint64_t *)(v42 + 8);
        if (v46 >= 10)
        {
          uint64_t v47 = v44;
          char v43 = v44;
        }
        uint64_t v42 = *v47;
      }
      while (v42);
      if (v43 != v65)
      {
        unsigned __int16 v48 = (int *)(v46 >= 10 ? v44 : v45);
        if (v48[8] <= 10 && capabilities::ct::supports5G(v30))
        {
          v49 = (const void **)*((void *)&v62 + 1);
          if (*((void *)&v62 + 1) != (void)v63)
          {
            while (*((unsigned char *)*v49 + 8) != 43)
            {
              if (++v49 == (const void **)v63) {
                goto LABEL_98;
              }
            }
          }
          if (v49 == (const void **)v63) {
LABEL_98:
          }
            operator new();
          if (!v50) {
            __cxa_bad_cast();
          }
          long long v66 = 0;
          v67 = 0;
          uint64_t v68 = 0;
          convertMaskToBandsForRat();
          uint64_t v51 = 0;
          int v52 = v66;
          uint64_t v53 = v67;
          do
          {
            for (uint64_t i = 0; i != 8; ++i)
            {
              if (v52 == v53)
              {
                dispatch_object_t v55 = v52;
              }
              else
              {
                dispatch_object_t v55 = v52;
                do
                {
                  if (*v55 == (unsigned __int16)(((8 * v51) | 1) + i)) {
                    goto LABEL_107;
                  }
                  ++v55;
                }
                while (v55 != v53);
                dispatch_object_t v55 = v53;
              }
LABEL_107:
              if (v55 != v53) {
                v50[v51 + 9] |= 1 << i;
              }
            }
            ++v51;
          }
          while (v51 != 64);
          if (v52)
          {
            v67 = v52;
            operator delete(v52);
          }
          v56 = qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>((uint64_t)&v62, 17);
          *(_WORD *)v56 |= 0x40u;
        }
      }
    }
    if ((a2 - 1) >= 3) {
      int v57 = 0;
    }
    else {
      int v57 = a2;
    }
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::SetSystemSelectionPreference::Request>(&v58, v57);
  }
  v59[0] = MEMORY[0x263EF8330];
  v59[1] = 0x40000000;
  v59[2] = ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5;
  v59[3] = &__block_descriptor_tmp_62_0;
  v59[4] = v24;
  uint64_t v40 = (const void **)*((void *)&v62 + 1);
  if (*((void *)&v62 + 1) != (void)v63)
  {
    while (*((unsigned char *)*v40 + 8) != 29)
    {
      if (++v40 == (const void **)v63) {
        goto LABEL_79;
      }
    }
  }
  if (v40 == (const void **)v63) {
LABEL_79:
  }
    operator new();
  if (v41)
  {
    ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5((uint64_t)v59, v41 + 2);
    BOOL v30 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>((uint64_t)&v62, 17);
    *(_WORD *)v30 |= 0x20u;
    goto LABEL_80;
  }
LABEL_118:
  __cxa_bad_cast();
}

void sub_2223B0214(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a35);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(v35 - 200));
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke(void *a1, void *a2)
{
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  uint64_t v6 = *(void *)(a1[4] + 40);
  do
  {
    if (((1 << v4) & v6) != 0) {
      v5 |= nas::asBand(1 << v4);
    }
    ++v4;
  }
  while (v4 != 64);
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  *a2 |= v5;
  uint64_t v9 = *(void *)(a1[5] + 40);
  do
  {
    if (((1 << v7) & v9) != 0) {
      v8 |= nas::asBand(1 << v7);
    }
    ++v7;
  }
  while (v7 != 64);
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  *a2 |= v8;
  uint64_t v12 = *(void *)(a1[6] + 40);
  do
  {
    uint64_t result = 1 << v10;
    if (((1 << v10) & v12) != 0)
    {
      uint64_t result = nas::asBand(result);
      v11 |= result;
    }
    ++v10;
  }
  while (v10 != 64);
  *a2 |= v11;
  return result;
}

void ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_3()
{
  convertMaskToBandsForRat();
  for (uint64_t i = 0; i != 32; ++i)
  {
    for (uint64_t j = 0; j != 8; ++j)
      ;
  }
}

uint64_t ___ZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS2_4lessIS4_EENS2_9allocatorINS2_4pairIKS4_yEEEEEE_block_invoke_5(uint64_t a1, void *a2)
{
  uint64_t v3 = 0;
  uint64_t v4 = 0;
  uint64_t v5 = *(void *)(*(void *)(a1 + 32) + 40);
  do
  {
    uint64_t result = 1 << v3;
    if (((1 << v3) & v5) != 0)
    {
      uint64_t result = nas::asBand(result);
      v4 |= result;
    }
    ++v3;
  }
  while (v3 != 64);
  *a2 = v4;
  return result;
}

uint64_t QMIBasebandSettingsDriver::getBandCapability(void **a1, int a2)
{
  if (a2 != 3)
  {
    (*(void (**)(void *))(*a1[6] + 16))(a1[6]);
    memset(v6, 0, sizeof(v6));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v6);
    qmi::ClientRouter::get();
    operator new();
  }
  uint64_t result = subscriber::makeSimSlotRange();
  uint64_t v4 = v7;
  if (v7 != v8)
  {
    while (1)
    {
      uint64_t result = v9(*v4);
      if (result) {
        break;
      }
      if (++v4 == v8)
      {
        uint64_t v4 = v8;
        break;
      }
    }
LABEL_6:
    while (v4 != v8)
    {
      uint64_t v5 = v4 + 1;
      uint64_t result = ((uint64_t (*)(void **, void))(*a1)[6])(a1, *v4);
      uint64_t v4 = v8;
      if (v5 != v8)
      {
        uint64_t v4 = v5;
        while (1)
        {
          uint64_t result = v9(*v4);
          if (result) {
            break;
          }
          if (++v4 == v8)
          {
            uint64_t v4 = v8;
            goto LABEL_6;
          }
        }
      }
    }
  }
  return result;
}

void sub_2223B0760(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v21, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v6 = a3;
  int v5 = a4;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, int *))(*(void *)a1 + 48))(a1, a2, &v6, &v5);
}

void QMIBasebandSettingsDriver::exitNoServiceState(QMIBasebandSettingsDriver *this)
{
  memset(v1, 0, sizeof(v1));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v1);
  qmi::ClientRouter::get();
  operator new();
}

void sub_2223B09E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v21, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::sendTimeToBaseband(void *a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a2 + 24);
  if (!v3) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  memset(v15, 0, sizeof(v15));
  (*(void (**)(_OWORD *__return_ptr))(*(void *)v3 + 48))(v15);
  int v4 = CSIDateToSeconds();
  int v5 = a1[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Current Time: %u seconds", buf, 8u);
  }
  (*(void (**)(uint8_t *__return_ptr, void *, _OWORD *))(*a1 + 72))(buf, a1, v15);
  int v6 = CSIDateToSeconds();
  uint64_t v7 = a1[5];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v6;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I 1980 Time: %u seconds", buf, 8u);
    uint64_t v7 = a1[5];
  }
  int v8 = v4 - v6;
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v8;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Difference: %u seconds", buf, 8u);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 0x40000000;
  v11[2] = ___ZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEE_block_invoke;
  v11[3] = &__block_descriptor_tmp_67;
  int v12 = v8;
  uint64_t v9 = (const void **)__p[1];
  if (__p[1] != (void *)v14)
  {
    while (*((unsigned char *)*v9 + 8) != 1)
    {
      if (++v9 == (const void **)v14) {
        goto LABEL_15;
      }
    }
  }
  if (v9 != (const void **)v14)
  {
    if (v10)
    {
      ___ZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEE_block_invoke((uint64_t)v11, v10 + 2);
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_15:
  operator new();
}

void sub_2223B0F8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 - 104);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a4) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v9, a4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEE_block_invoke(uint64_t result, void *a2)
{
  *a2 = 1000 * *(unsigned int *)(result + 32);
  return result;
}

double QMIBasebandSettingsDriver::getRelativeBasebandTime@<D0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(void *)&double result = 0x100000006;
  *(void *)(a2 + 12) = 0x100000006;
  int v3 = *(_DWORD *)(a1 + 24);
  *(_DWORD *)(a2 + 20) = 1980;
  *(_DWORD *)(a2 + 24) = v3;
  *(unsigned char *)(a2 + 28) = *(unsigned char *)(a1 + 28);
  return result;
}

void QMIBasebandSettingsDriver::enableIMSISwitch(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = CSIBOOLAsString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending config settings with IMSI Switch: %s", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_69;
  char v13 = a2;
  uint64_t v7 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v7 + 8) != 16)
    {
      if (++v7 == (const void **)v15) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == (const void **)v15) {
LABEL_10:
  }
    operator new();
  if (!v8) {
    __cxa_bad_cast();
  }
  ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke((uint64_t)v12, v8 + 9);
  uint64_t v10 = QMIServiceMsg::create();
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke_2;
  v16[3] = &__block_descriptor_tmp_70_4;
  v16[4] = a1;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v17, a3);
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 0x40000000;
  uint64_t v19 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  uint64_t v20 = &unk_26460A190;
  uint64_t v21 = v16;
  uint64_t v9 = _Block_copy(&buf);
  long long aBlock = v9;
  if (v10)
  {
    qmi::Client::send();
    uint64_t v9 = aBlock;
  }
  if (v9) {
    _Block_release(v9);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223B1404(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v19);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver16enableIMSISwitchEbNSt3__18functionIFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a2 + 4);
  int v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v10 = 136315138;
      uint64_t v11 = qmi::asString();
      int v6 = "#N QMI BSP SetConfig::Response returned error: %s";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }
  else if (v5)
  {
    LOWORD(v10) = 0;
    int v6 = "#I Successfully pushed the baseband config";
    uint64_t v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
  return std::function<void ()(BOOL)>::operator()(a1 + 40, v3 == 0);
}

uint64_t std::function<void ()(BOOL)>::operator()(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t __copy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void QMIBasebandSettingsDriver::allowMultiplePDNToSameAPN(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = CSIBOOLAsString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending config settings with AllowMultiPDN: %s", (uint8_t *)&buf, 0xCu);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke;
  v12[3] = &__block_descriptor_tmp_72;
  char v13 = a2;
  uint64_t v7 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v7 + 8) != 17)
    {
      if (++v7 == (const void **)v15) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == (const void **)v15) {
LABEL_10:
  }
    operator new();
  if (!v8) {
    __cxa_bad_cast();
  }
  ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke((uint64_t)v12, v8 + 9);
  uint64_t v10 = QMIServiceMsg::create();
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  v16[2] = ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke_2;
  v16[3] = &__block_descriptor_tmp_75_4;
  v16[4] = a1;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v17, a3);
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 0x40000000;
  uint64_t v19 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  uint64_t v20 = &unk_26460A190;
  uint64_t v21 = v16;
  uint64_t v9 = _Block_copy(&buf);
  long long aBlock = v9;
  if (v10)
  {
    qmi::Client::send();
    uint64_t v9 = aBlock;
  }
  if (v9) {
    _Block_release(v9);
  }
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223B1970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v19);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver25allowMultiplePDNToSameAPNEbNSt3__18functionIFvbEEE_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  int v3 = *(_DWORD *)(a2 + 4);
  char v4 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      int v10 = 136315138;
      uint64_t v11 = qmi::asString();
      int v6 = "#N QMI BSP SetConfig::Response returned error: %s";
      uint64_t v7 = v4;
      uint32_t v8 = 12;
LABEL_6:
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v10, v8);
    }
  }
  else if (v5)
  {
    LOWORD(v10) = 0;
    int v6 = "#I Successfully pushed the baseband config";
    uint64_t v7 = v4;
    uint32_t v8 = 2;
    goto LABEL_6;
  }
  return std::function<void ()(BOOL)>::operator()(a1 + 40, v3 == 0);
}

void QMIBasebandSettingsDriver::sendScreenStatus(QMIBasebandSettingsDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke;
  v12[3] = &__block_descriptor_tmp_77_1;
  char v13 = a2;
  char v4 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v15) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v15) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke((uint64_t)v12, v5 + 9);
  v7[5] = (char *)this + 216;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_78_2;
  v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_26460A190;
  aBlock[4] = v7;
  int v6 = _Block_copy(aBlock);
  uint64_t v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    int v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223B1DCC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN25QMIBasebandSettingsDriver16sendScreenStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP screen status returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::sendSleepStatus(QMIBasebandSettingsDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke;
  v12[3] = &__block_descriptor_tmp_80_0;
  char v13 = a2;
  uint64_t v4 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v4 + 8) != 17)
    {
      if (++v4 == (const void **)v15) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v15) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke((uint64_t)v12, v5 + 9);
  v7[5] = (char *)this + 216;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_81_1;
  v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_26460A190;
  aBlock[4] = v7;
  int v6 = _Block_copy(aBlock);
  uint64_t v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    int v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223B21BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN25QMIBasebandSettingsDriver15sendSleepStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP sleep status returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::sendTetheringStatus(QMIBasebandSettingsDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  v12[2] = ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke;
  v12[3] = &__block_descriptor_tmp_83;
  char v13 = a2;
  uint64_t v4 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v4 + 8) != 18)
    {
      if (++v4 == (const void **)v15) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v15) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke((uint64_t)v12, v5 + 9);
  v7[5] = (char *)this + 216;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_84_0;
  v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  aBlock[3] = &unk_26460A190;
  aBlock[4] = v7;
  int v6 = _Block_copy(aBlock);
  uint64_t v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    int v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223B25AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN25QMIBasebandSettingsDriver19sendTetheringStatusEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send AP tethering status for returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

void QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(uint64_t a1@<X0>, int a2@<W2>, uint64_t a3@<X3>, void *a4@<X8>)
{
  buf[3] = *MEMORY[0x263EF8340];
  uint64_t isValidSimSlot = subscriber::isValidSimSlot();
  if (isValidSimSlot)
  {
    if (capabilities::ct::supportsNVRAMUpdateWithoutBasebandReboot((capabilities::ct *)isValidSimSlot))
    {
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)v15, a3);
      uint64_t v17 = 0;
      int v9 = operator new(0x38uLL);
      *int v9 = &unk_26D4BF8C8;
      v9[1] = a1;
      *((_DWORD *)v9 + 4) = a2;
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v9 + 3), (uint64_t)v15);
      uint64_t v17 = v9;
      FilePushTransaction::create();
      uint64_t v10 = buf[0];
      *a4 = buf[0];
      if (v10) {
        operator new();
      }
      a4[1] = 0;
      buf[0] = 0;
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__value_func[abi:ne180100](v16);
      uint64_t v14 = v15;
    }
    else
    {
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)v18, a3);
      uint64_t v20 = 0;
      uint64_t v12 = operator new(0x28uLL);
      *uint64_t v12 = &unk_26D4BF7D8;
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v12 + 1), (uint64_t)v18);
      uint64_t v20 = v12;
      FilePushTransaction::create();
      uint64_t v13 = buf[0];
      *a4 = buf[0];
      if (v13) {
        operator new();
      }
      a4[1] = 0;
      buf[0] = 0;
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__value_func[abi:ne180100](v19);
      uint64_t v14 = v18;
    }
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](v14);
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = subscriber::asString();
      _os_log_error_impl(&dword_22231A000, v11, OS_LOG_TYPE_ERROR, "Failed to prepare file push transaction for invalid instance %s", (uint8_t *)buf, 0xCu);
    }
    *a4 = 0;
    a4[1] = 0;
  }
}

void sub_2223B290C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va1, a11);
  va_start(va, a11);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  std::unique_ptr<FilePushTransaction>::reset[abi:ne180100]((uint64_t *)(v11 - 80));
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t QMIBasebandSettingsDriver::startFileTransfer_sync(void **a1, uint64_t a2, int a3, void *a4, uint64_t a5, uint64_t a6, int a7, const void **a8, char a9, int a10, unsigned __int16 a11)
{
  uint64_t v53 = *MEMORY[0x263EF8340];
  int v17 = -1;
  switch(a3)
  {
    case 0:
      BOOL v18 = a7 == 2;
      int v19 = 2;
      int v20 = 9;
      goto LABEL_7;
    case 1:
      int v17 = 4;
      break;
    case 2:
      int v17 = 1;
      break;
    case 5:
      int v17 = 0;
      break;
    case 6:
      BOOL v18 = a7 == 2;
      int v19 = 8;
      int v20 = 10;
LABEL_7:
      if (v18) {
        int v17 = v20;
      }
      else {
        int v17 = v19;
      }
      break;
    case 7:
      int v17 = 3;
      break;
    default:
      break;
  }
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  BasebandSettingsDriver::getAllocator_sync<unsigned char>(&__dst, a1[13]);
  long long v46 = 0uLL;
  uint64_t v21 = v41;
  *(void *)&long long v47 = 0;
  *((void *)&v47 + 1) = __dst;
  *(void *)&long long v48 = v41;
  if (v41)
  {
    atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v22 = v42;
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  else
  {
    uint64_t v22 = v42;
  }
  *((void *)&v48 + 1) = v22;
  if (v17)
  {
    BasebandSettingsDriver::readSegment();
    std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign((uint64_t)&v46, (uint64_t)&__dst);
    std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)&__dst);
  }
  else
  {
    if (*(char *)(a6 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v39, *(const std::string::value_type **)a6, *(void *)(a6 + 8));
    }
    else {
      std::string v39 = *(std::string *)a6;
    }
    uint64_t v49 = 0;
    uint64_t v50 = 0;
    uint64_t v51 = 0;
    BasebandSettingsDriver::getAllocator_sync<unsigned char>(&v49, a1[13]);
    if ((*(unsigned char *)(*a4 + *(void *)(*(void *)*a4 - 24) + 32) & 2) != 0)
    {
      __dst = 0;
      long long v41 = 0;
      uint64_t v26 = v50;
      uint64_t v42 = 0;
      uint64_t v43 = v49;
      uint64_t v44 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v45 = v51;
    }
    else
    {
      std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type size = v39.__r_.__value_.__l.__size_;
      }
      if (size >= 0x2B)
      {
        std::string::resize(&v39, 0x2AuLL, 0);
        uint64_t v24 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[6] + 16))(a1[6], a2);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          int v25 = &v39;
          if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
          _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#N Truncating file path name to: %s", (uint8_t *)&buf, 0xCu);
        }
      }
      __dst = 0;
      long long v41 = 0;
      uint64_t v26 = v50;
      uint64_t v42 = 0;
      uint64_t v43 = v49;
      uint64_t v44 = v50;
      if (v50) {
        atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v45 = v51;
      std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append((ctu::MallocZone *)&__dst, 0x400uLL);
      memset(&buf, 0, sizeof(buf));
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unsigned __int16 v27 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        unsigned __int16 v27 = v39.__r_.__value_.__r.__words[1];
      }
      std::string::push_back(&buf, v27 / 0xAu + 48);
      std::string::push_back(&buf, (v27 % 0xAu) | 0x30);
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v28 = &v39;
      }
      else {
        uint64_t v28 = (std::string *)v39.__r_.__value_.__r.__words[0];
      }
      if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v29 = HIBYTE(v39.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v29 = v39.__r_.__value_.__l.__size_;
      }
      std::string::append(&buf, (const std::string::value_type *)v28, v29);
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        size_t v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      }
      else {
        size_t v30 = buf.__r_.__value_.__l.__size_;
      }
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string buf = &buf;
      }
      else {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      memcpy(__dst, p_buf, v30);
      std::istream::read();
      size_t v32 = *(void *)(*a4 + 8) + v30;
      if (v32 <= (char *)v41 - (unsigned char *)__dst)
      {
        if (v32 < (char *)v41 - (unsigned char *)__dst) {
          long long v41 = (std::__shared_weak_count *)((char *)__dst + v32);
        }
      }
      else
      {
        std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append((ctu::MallocZone *)&__dst, v32 - ((char *)v41 - (unsigned char *)__dst));
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign((uint64_t)&v46, (uint64_t)&__dst);
    std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)&__dst);
    if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v39.__r_.__value_.__l.__data_);
    }
  }
  if ((void)v46 == *((void *)&v46 + 1))
  {
    unsigned int v33 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[6] + 16))(a1[6], a2);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__dst) = 0;
      _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I Failed to read the file data", (uint8_t *)&__dst, 2u);
    }
    BasebandSettingsDriver::reportFileTransferStatus_sync();
  }
  else
  {
    if (*(char *)(a5 + 23) < 0) {
      std::string::__init_copy_ctor_external(&v38, *(const std::string::value_type **)a5, *(void *)(a5 + 8));
    }
    else {
      std::string v38 = *(std::string *)a5;
    }
    uint64_t v34 = (std::__shared_weak_count *)a4[1];
    v37[0] = *a4;
    v37[1] = (uint64_t)v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&v36, a8);
    QMIBasebandSettingsDriver::sendSegmentWithData_sync(a1, a2, v17, (uint64_t)&v38, v37, 0, a11, (uint64_t)&v46, 0, &v36, a9);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v36);
    if (v34) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v34);
    }
    if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v38.__r_.__value_.__l.__data_);
    }
  }
  return std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)&v46);
}

void sub_2223B2EC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (*(char *)(v35 - 105) < 0) {
    operator delete(*(void **)(v35 - 128));
  }
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)&a29);
  int v37 = *(std::__shared_weak_count **)(v35 - 144);
  if (v37) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v37);
  }
  if (a27 < 0) {
    operator delete(__p);
  }
  std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void BasebandSettingsDriver::getAllocator_sync<unsigned char>(void *a1, uint64_t *a2)
{
  if (a2)
  {
    uint64_t v4 = *a2;
    uint64_t v3 = a2[1];
    if (v3) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v5 = a2[2];
    *a1 = v4;
    a1[1] = v3;
    a1[2] = v5;
  }
  else
  {
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    MEMORY[0x223C999D0](&v11, "BasebandSettingDriver zone", 0);
    uint64_t v6 = v11;
    uint64_t v7 = v12;
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v8 = v12;
      uint64_t v9 = v13;
      *a1 = v6;
      a1[1] = v7;
      a1[2] = v9;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
    else
    {
      uint64_t v10 = v13;
      *a1 = v11;
      a1[1] = 0;
      a1[2] = v10;
    }
  }
}

void QMIBasebandSettingsDriver::sendSegmentWithData_sync(void **a1, int a2, int a3, uint64_t a4, uint64_t *a5, int a6, int a7, uint64_t a8, char a9, const void **a10, char a11)
{
  uint64_t v70 = *MEMORY[0x263EF8340];
  int v17 = (os_log_t *)(*(uint64_t (**)(void *))(*a1[6] + 16))(a1[6]);
  long long v66 = 0u;
  long long v67 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v66);
  uint64_t v18 = ((uint64_t (*)(void **))(*a1)[18])(a1);
  int v19 = *v17;
  if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
  {
    int v20 = bsp::asString(a3);
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&void buf[4] = v20;
    *(_WORD *)&buf[12] = 1024;
    *(_DWORD *)&buf[14] = a6;
    *(_WORD *)&unsigned char buf[18] = 1024;
    *(_DWORD *)&buf[20] = a7;
    LOWORD(v69) = 2048;
    *(void *)((char *)&v69 + 2) = v18;
    _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I Sending file of type %s, segment number: %d of total segments %d, timeout %lld seconds", buf, 0x22u);
  }
  int v38 = v18;
  v61[0] = MEMORY[0x263EF8330];
  v61[1] = 0x40000000;
  v61[2] = ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke;
  v61[3] = &__block_descriptor_tmp_85_1;
  int v62 = a3;
  char v65 = a11;
  __int16 v63 = a6;
  __int16 v64 = a7;
  v61[4] = a8;
  uint64_t v21 = (const void **)*((void *)&v66 + 1);
  if (*((void *)&v66 + 1) != (void)v67)
  {
    while (*((unsigned char *)*v21 + 8) != 1)
    {
      if (++v21 == (const void **)v67) {
        goto LABEL_10;
      }
    }
  }
  if (v21 == (const void **)v67) {
LABEL_10:
  }
    operator new();
  if (!v22) {
    __cxa_bad_cast();
  }
  BOOL v23 = (const void **)___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke(v61, (uint64_t)v22 + 16);
  uint64_t v24 = (void *)&unk_222569000;
  if (a7 - 1 == a6)
  {
    CFDataRef v25 = (const __CFData *)*a10;
    if (*a10) {
      uint64_t v26 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get;
    }
    else {
      uint64_t v26 = 0;
    }
    unsigned __int16 v27 = *v17;
    BOOL v23 = (const void **)os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT);
    if (v26)
    {
      if (v23)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I Last segment, adding signature", buf, 2u);
        CFDataRef v25 = (const __CFData *)*a10;
      }
      Length = (const void *)CFDataGetLength(v25);
      std::string::size_type v29 = *v17;
      if (os_log_type_enabled(*v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v29, OS_LOG_TYPE_DEFAULT, "#I This is the last segment, and we have a signature for the file", buf, 2u);
      }
      v57[0] = MEMORY[0x263EF8330];
      v57[1] = 1174405120;
      int v58 = ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_86;
      uint64_t v59 = &__block_descriptor_tmp_87_4;
      size_t v30 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(v60, a10);
      v60[1] = Length;
      long long v31 = (const void **)*((void *)&v66 + 1);
      int v37 = v30;
      if (*((void *)&v66 + 1) != (void)v67)
      {
        while (*((unsigned char *)*v31 + 8) != 16)
        {
          if (++v31 == (const void **)v67) {
            goto LABEL_29;
          }
        }
      }
      if (v31 == (const void **)v67) {
LABEL_29:
      }
        operator new();
      if (!v32) {
        __cxa_bad_cast();
      }
      v58((uint64_t)v57, (void *)v32 + 2);
      BOOL v23 = ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(v37);
      uint64_t v24 = &unk_222569000;
    }
    else
    {
      uint64_t v24 = (void *)&unk_222569000;
      if (v23)
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I Last segment, but no signature to add", buf, 2u);
      }
    }
  }
  if (capabilities::ct::supportsGemini((capabilities::ct *)v23))
  {
    unsigned int v33 = (const void **)*((void *)&v66 + 1);
    if (*((void *)&v66 + 1) != (void)v67)
    {
      while (*((unsigned char *)*v33 + 8) != 17)
      {
        if (++v33 == (const void **)v67) {
          goto LABEL_38;
        }
      }
    }
    if (v33 == (const void **)v67) {
LABEL_38:
    }
      operator new();
    if (!v34) {
      __cxa_bad_cast();
    }
    v34[9] = subscriber::simSlotAsInstance();
  }
  int v52 = a1 + 27;
  uint64_t v53 = QMIServiceMsg::create();
  uint64_t v55 = 0;
  long long aBlock = 0;
  int v54 = 1000 * v38;
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = v24[160];
  v41[2] = ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_88;
  v41[3] = &__block_descriptor_tmp_89_2;
  v41[4] = a1;
  v41[5] = v17;
  __int16 v48 = a6;
  __int16 v49 = a7;
  int v46 = a2;
  int v47 = a3;
  if (*(char *)(a4 + 23) < 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)a4, *(void *)(a4 + 8));
  }
  else {
    std::string __p = *(std::string *)a4;
  }
  uint64_t v35 = (std::__shared_weak_count *)a5[1];
  uint64_t v43 = *a5;
  uint64_t v44 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v50 = a9;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&v45, a10);
  char v51 = a11;
  *(void *)std::string buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_6;
  *(void *)&long long v69 = &unk_26460A190;
  *((void *)&v69 + 1) = v41;
  BOOL v36 = _Block_copy(buf);
  long long aBlock = v36;
  if (v53)
  {
    qmi::Client::send();
    BOOL v36 = aBlock;
  }
  if (v36) {
    _Block_release(v36);
  }
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v45);
  if (v44) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v44);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v66);
}

void sub_2223B39F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v32 - 192));
  _Unwind_Resume(a1);
}

_DWORD *___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke(_DWORD *result, uint64_t a2)
{
  *(_DWORD *)a2 = result[10];
  *(unsigned char *)(a2 + 4) |= 2 * *((unsigned char *)result + 48);
  *(_WORD *)(a2 + 6) = *((_WORD *)result + 22);
  *(_WORD *)(a2 + 8) = *((_WORD *)result + 23);
  uint64_t v4 = (void *)(a2 + 16);
  uint64_t v3 = *(char **)(a2 + 16);
  uint64_t v5 = (char **)*((void *)result + 4);
  uint64_t v6 = *v5;
  uint64_t v7 = v5[1];
  size_t v8 = v7 - *v5;
  unint64_t v9 = *(void *)(a2 + 32);
  if (v9 - (unint64_t)v3 < v8)
  {
    if (v3)
    {
      *(void *)(a2 + 24) = v3;
      operator delete(v3);
      unint64_t v9 = 0;
      *uint64_t v4 = 0;
      v4[1] = 0;
      _DWORD v4[2] = 0;
    }
    if ((v8 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8) {
      uint64_t v10 = v8;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v11 = v10;
    }
    double result = std::vector<unsigned char>::__vallocate[abi:ne180100](v4, v11);
    uint64_t v3 = *(char **)(a2 + 24);
    goto LABEL_17;
  }
  uint64_t v12 = *(unsigned char **)(a2 + 24);
  size_t v13 = v12 - v3;
  if (v12 - v3 >= v8)
  {
LABEL_17:
    if (v7 != v6) {
      double result = memmove(v3, v6, v8);
    }
    uint64_t v15 = &v3[v8];
    goto LABEL_20;
  }
  uint64_t v14 = &v6[v13];
  if (v12 != v3)
  {
    double result = memmove(*(void **)(a2 + 16), v6, v13);
    uint64_t v3 = *(char **)(a2 + 24);
  }
  if (v7 != v14) {
    double result = memmove(v3, v14, v7 - v14);
  }
  uint64_t v15 = &v3[v7 - v14];
LABEL_20:
  *(void *)(a2 + 24) = v15;
  return result;
}

uint64_t ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::get(uint64_t a1)
{
  return *(void *)a1;
}

void *___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_86(uint64_t a1, void *a2)
{
  BytePtr = (char *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  unint64_t v5 = *(void *)(a1 + 40);

  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, BytePtr, &BytePtr[v5], v5);
}

const void **__copy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef((const void **)(a1 + 32), (const void **)(a2 + 32));
}

const void **__destroy_helper_block_e8_32c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 32));
}

void ___ZN25QMIBasebandSettingsDriver24sendSegmentWithData_syncEN10subscriber7SimSlotEN3bsp11QMIFileTypeENSt3__112basic_stringIcNS4_11char_traitsIcEENS4_9allocatorIcEEEENS4_10shared_ptrINS4_13basic_istreamIcS7_EEEEttRNS4_6vectorIhN3ctu21malloc_zone_allocatorIhEEEEhNSG_2cf11CFSharedRefIK8__CFDataEEb_block_invoke_88(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = *MEMORY[0x263EF8340];
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = **(NSObject ***)(a1 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v7)
    {
      uint64_t v8 = qmi::asString();
      int v9 = *(unsigned __int16 *)(a1 + 104);
      int v10 = *(unsigned __int16 *)(a1 + 106);
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&void buf[4] = v8;
      *(_WORD *)&buf[12] = 1024;
      *(_DWORD *)&buf[14] = v9;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v10;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N QMI BSP Send file returned error (%s) for segment number: %d out of %d", buf, 0x18u);
    }
    BasebandSettingsDriver::reportFileTransferStatus_sync();
  }
  else
  {
    if (v7)
    {
      int v11 = *(unsigned __int16 *)(a1 + 104);
      int v12 = *(unsigned __int16 *)(a1 + 106);
      *(_DWORD *)std::string buf = 67109376;
      *(_DWORD *)&void buf[4] = v11;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v12;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I QMI BSP Send file for segment number: %d out of %d was successful", buf, 0xEu);
    }
    uint64_t v13 = *(unsigned int *)(a1 + 96);
    uint64_t v14 = *(void *)(a2 + 8);
    v38[0] = *(void *)a2;
    v38[1] = v14;
    uint64_t v15 = *(void *)(a2 + 16);
    v38[2] = v15;
    if (v15) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
    }
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v38);
    uint64_t v16 = *(int *)(a1 + 100);
    if (*(char *)(a1 + 71) < 0) {
      std::string::__init_copy_ctor_external(&v37, *(const std::string::value_type **)(a1 + 48), *(void *)(a1 + 56));
    }
    else {
      std::string v37 = *(std::string *)(a1 + 48);
    }
    int v17 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v35 = *(void *)(a1 + 72);
    BOOL v36 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v18 = *(unsigned __int16 *)(a1 + 104);
    uint64_t v19 = *(unsigned __int16 *)(a1 + 106);
    char v20 = *(unsigned char *)(a1 + 108);
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef(&cf, (const void **)(a1 + 88));
    int v21 = *(unsigned __int8 *)(a1 + 109);
    uint64_t v22 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v5 + 48) + 16))(*(void *)(v5 + 48), v13);
    int v23 = v18 + 1;
    if (v18 + 1 == v19)
    {
      BasebandSettingsDriver::reportFileTransferStatus_sync();
    }
    else
    {
      uint64_t v24 = (os_log_t *)v22;
      char v33 = v20;
      uint64_t v45 = 0;
      int v46 = &v45;
      uint64_t v47 = 0x2000000000;
      __int16 v48 = 0;
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 0x40000000;
      uint64_t v42 = (uint64_t (*)(uint64_t, std::string *))___ZN25QMIBasebandSettingsDriver31handleFileTransferResponse_syncEN10subscriber7SimSlotERKN3bsp8SendFile8ResponseENS2_11QMIFileTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENS8_10shared_ptrINS8_13basic_istreamIcSB_EEEEtthN3ctu2cf11CFSharedRefIK8__CFDataEEb_block_invoke;
      uint64_t v43 = &unk_26460A040;
      uint64_t v44 = &v45;
      uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v38);
      uint64_t v27 = TlvValue;
      if (TlvValue)
      {
        int v28 = v26;
        *(void *)std::string buf = TlvValue;
        LOWORD(v49.__r_.__value_.__l.__data_) = tlv::parseV<bsp::tlv::ExpectedSegmentInfo>((unint64_t *)buf, v26);
        if (*(void *)buf) {
          v42((uint64_t)v41, &v49);
        }
        else {
          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(LOWORD(v38[0]), 64, v27, v28);
        }
      }
      int v29 = *((unsigned __int16 *)v46 + 12);
      if (v23 == v29)
      {
        long long v51 = 0u;
        memset(buf, 0, sizeof(buf));
        BasebandSettingsDriver::readSegment();
        if (*(void *)buf == *(void *)&buf[8])
        {
          long long v31 = *v24;
          if (os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(v49.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v49.__r_.__value_.__r.__words[0]) = v23;
            _os_log_impl(&dword_22231A000, v31, OS_LOG_TYPE_DEFAULT, "#N Failed to read the segment %d, reporting failure", (uint8_t *)&v49, 8u);
          }
          BasebandSettingsDriver::reportFileTransferStatus_sync();
        }
        else
        {
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            std::string::__init_copy_ctor_external(&v49, v37.__r_.__value_.__l.__data_, v37.__r_.__value_.__l.__size_);
          }
          else {
            std::string v49 = v37;
          }
          uint64_t v32 = v36;
          v40[0] = v35;
          v40[1] = v36;
          if (v36) {
            atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFTypeRef v39 = cf;
          if (cf) {
            CFRetain(cf);
          }
          QMIBasebandSettingsDriver::sendSegmentWithData_sync(v5, v13, v16, &v49, v40, (unsigned __int16)v23, v19, buf, v33, &v39, v21 != 0);
          ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v39);
          if (v32) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v32);
          }
          if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v49.__r_.__value_.__l.__data_);
          }
        }
        std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100]((uint64_t)buf);
      }
      else
      {
        size_t v30 = *v24;
        if (os_log_type_enabled(*v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)std::string buf = 67109376;
          *(_DWORD *)&void buf[4] = v23;
          *(_WORD *)&uint8_t buf[8] = 1024;
          *(_DWORD *)&buf[10] = v29;
          _os_log_impl(&dword_22231A000, v30, OS_LOG_TYPE_DEFAULT, "#N Next segment numbers are not matching: %d and %d", buf, 0xEu);
        }
        BasebandSettingsDriver::reportFileTransferStatus_sync();
      }
      _Block_object_dispose(&v45, 8);
    }
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&cf);
    if (v36) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v36);
    }
    if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v37.__r_.__value_.__l.__data_);
    }
    qmi::MessageBase::~MessageBase((qmi::MessageBase *)v38);
  }
}

void sub_2223B418C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a2) {
    __clang_call_terminate(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **__copy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c68_ZTSNSt3__110shared_ptrINS_13basic_istreamIcNS_11char_traitsIcEEEEEE88c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1, uint64_t a2)
{
  int v4 = (std::string *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    v4->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v5;
  }
  uint64_t v6 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }

  return ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::SharedRef((const void **)(a1 + 88), (const void **)(a2 + 88));
}

void __destroy_helper_block_e8_48c66_ZTSNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE72c68_ZTSNSt3__110shared_ptrINS_13basic_istreamIcNS_11char_traitsIcEEEEEE88c38_ZTSN3ctu2cf11CFSharedRefIK8__CFDataEE(uint64_t a1)
{
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef((const void **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v3 = *(void **)(a1 + 48);
    operator delete(v3);
  }
}

uint64_t ___ZN25QMIBasebandSettingsDriver31handleFileTransferResponse_syncEN10subscriber7SimSlotERKN3bsp8SendFile8ResponseENS2_11QMIFileTypeENSt3__112basic_stringIcNS8_11char_traitsIcEENS8_9allocatorIcEEEENS8_10shared_ptrINS8_13basic_istreamIcSB_EEEEtthN3ctu2cf11CFSharedRefIK8__CFDataEEb_block_invoke(uint64_t result, _WORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN25QMIBasebandSettingsDriver29handleFileTransferStatus_syncERKN3bsp18FileTransferStatus10IndicationE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 48) + 16))(*(void *)(*(void *)(a1 + 32) + 48), *(unsigned int *)(a1 + 40));
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = bsp::asString(*(_DWORD *)a2);
    long long v5 = bsp::asString(*(_DWORD *)(a2 + 4));
    int v7 = 136315394;
    uint64_t v8 = v4;
    __int16 v9 = 2080;
    int v10 = v5;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Received indication from baseband file: %s result %s", (uint8_t *)&v7, 0x16u);
  }
  return BasebandSettingsDriver::reportFileTransferStatus_sync();
}

void QMIBasebandSettingsDriver::setBatterySaverMode(QMIBasebandSettingsDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v6 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v3 = (const void **)__p[1];
  if (__p[1] != (void *)v6)
  {
    while (*((unsigned char *)*v3 + 8) != 1)
    {
      if (++v3 == (const void **)v6) {
        goto LABEL_8;
      }
    }
  }
  if (v3 != (const void **)v6)
  {
    if (v4)
    {
      v4[9] = a2;
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_8:
  operator new();
}

void sub_2223B47B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v21, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t QMIBasebandSettingsDriver::getFileSegmentSize(QMIBasebandSettingsDriver *this)
{
  return 1024;
}

uint64_t std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>::operator()(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v5 = a3;
  int v4 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, int *, uint64_t *))(*(void *)a1 + 48))(a1, &v4, &v5);
}

void QMIBasebandSettingsDriver::sendSmartDataMode(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  if (subscriber::isValidSimSlot())
  {
    *(_OWORD *)std::string __p = 0u;
    long long v9 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    uint64_t v5 = (const void **)__p[1];
    if (__p[1] != (void *)v9)
    {
      while (*((unsigned char *)*v5 + 8) != 16)
      {
        if (++v5 == (const void **)v9) {
          goto LABEL_11;
        }
      }
    }
    if (v5 != (const void **)v9)
    {
      if (v7)
      {
        v7[9] = a3;
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_11:
    operator new();
  }
  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    int buf = 136315138;
    uint64_t buf_4 = subscriber::asString();
    _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "Failed to send smart data mode for invalid instance %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_2223B4C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  if (a10) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v26, a10);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void QMIBasebandSettingsDriver::sendActiveSubs(uint64_t a1, void *a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  unsigned __int8 v19 = 0;
  long long v6 = (void *)*a2;
  int v4 = a2 + 1;
  uint64_t v5 = v6;
  if (v6 == v4)
  {
    unsigned __int8 v12 = 0;
LABEL_15:
    v17[0] = MEMORY[0x263EF8330];
    v17[1] = 0x40000000;
    v17[2] = ___ZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS0_4lessIS3_EENS0_9allocatorIS3_EEEE_block_invoke;
    v17[3] = &__block_descriptor_tmp_94_0;
    unsigned __int8 v18 = v12;
    uint64_t v13 = (const void **)__p[1];
    if (__p[1] != (void *)v21)
    {
      while (*((unsigned char *)*v13 + 8) != 20)
      {
        if (++v13 == (const void **)v21) {
          goto LABEL_22;
        }
      }
    }
    if (v13 != (const void **)v21)
    {
      if (v14)
      {
        ___ZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS0_4lessIS3_EENS0_9allocatorIS3_EEEE_block_invoke((uint64_t)v17, v14 + 9);
        uint64_t v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67109120;
          *(_DWORD *)&void buf[4] = v19;
          _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I Sending StandbyPreference activeSubs:0x%X", buf, 8u);
        }
        qmi::ClientRouter::get();
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_22:
    operator new();
  }
  while (1)
  {
    int v7 = *((_DWORD *)v5 + 7);
    if (v7 == 1) {
      break;
    }
    if (v7 == 2)
    {
      char v8 = 2;
LABEL_6:
      nas::operator|=(&v19, v8);
    }
    long long v9 = (void *)v5[1];
    if (v9)
    {
      do
      {
        int v10 = v9;
        long long v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        int v10 = (void *)v5[2];
        BOOL v11 = *v10 == (void)v5;
        uint64_t v5 = v10;
      }
      while (!v11);
    }
    uint64_t v5 = v10;
    if (v10 == v4)
    {
      unsigned __int8 v12 = v19;
      goto LABEL_15;
    }
  }
  char v8 = 1;
  goto LABEL_6;
}

void sub_2223B518C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  uint64_t v13 = *(std::__shared_weak_count **)(v11 - 88);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (a4) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v9, a4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS0_4lessIS3_EENS0_9allocatorIS3_EEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void QMIBasebandSettingsDriver::sendInMetroStatus(QMIBasebandSettingsDriver *this, char a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  _OWORD v9[2] = ___ZN25QMIBasebandSettingsDriver17sendInMetroStatusEb_block_invoke;
  v9[3] = &__block_descriptor_tmp_96_0;
  char v10 = a2;
  int v4 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v4 + 8) != 16)
    {
      if (++v4 == (const void **)v12) {
        goto LABEL_8;
      }
    }
  }
  if (v4 != (const void **)v12)
  {
    if (v5)
    {
      ___ZN25QMIBasebandSettingsDriver17sendInMetroStatusEb_block_invoke((uint64_t)v9, v5 + 9);
      long long v6 = *((void *)this + 5);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v8 = CSIBOOLAsString();
        int buf = 136315138;
        *(void *)uint64_t buf_4 = v8;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending InMetroStatus: %s", (uint8_t *)&buf, 0xCu);
      }
      qmi::ClientRouter::get();
      operator new();
    }
    __cxa_bad_cast();
  }
LABEL_8:
  operator new();
}

void sub_2223B5640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN25QMIBasebandSettingsDriver17sendInMetroStatusEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t QMIBasebandSettingsDriver::activateTurboMode(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Turbo mode not supported on this platform.", v5, 2u);
  }
  return std::function<void ()(BOOL)>::operator()(a2, 0);
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::~__func()
{
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = &unk_26D4BE8D8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4BE8D8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  unsigned int v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 24);
  if (*a2 - 1 >= 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v3;
  }
  long long v6 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v5);
  int v7 = *v6;
  if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 16);
    int buf = 136315138;
    *(void *)uint64_t buf_4 = v8;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s QMI client has started", (uint8_t *)&buf, 0xCu);
  }
  unsigned int v9 = subscriber::simSlotAsInstance();
  if (*(void *)(*(void *)(a1 + 32) + 24) <= (unint64_t)v9)
  {
    uint64_t v11 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      uint64_t v12 = qmi::asString();
      int buf = 136315138;
      *(void *)uint64_t buf_4 = v12;
      _os_log_error_impl(&dword_22231A000, v11, OS_LOG_TYPE_ERROR, "Failed to handle QMI client start for subtype %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::set(*(void **)(a1 + 32), v9, 1);
    QMIBasebandSettingsDriver::handleClientStarted_sync(v4);
    int v10 = *(unsigned __int8 *)(a1 + 8);
    if (v10 == 2)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v17);
      uint64_t v13 = qmi::MutableMessageBase::getTLV<dms::tlv::SubscriptionType>((uint64_t)&v17, 1);
      if (v3 == 2) {
        int v14 = 2;
      }
      else {
        int v14 = 1;
      }
      *(_DWORD *)uint64_t v13 = v14;
      qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<dms::BindSubscription::Request>(&v16, v3);
    }
    if (v10 == 3)
    {
      long long v17 = 0u;
      long long v18 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v17);
      *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>((uint64_t)&v17, 1) = v3 == 2;
      qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(&v16, v3);
    }
    uint64_t v15 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_FAULT))
    {
      int buf = 67109120;
      *(_DWORD *)uint64_t buf_4 = v10;
      _os_log_fault_impl(&dword_22231A000, v15, OS_LOG_TYPE_FAULT, "Unhandled QMI service type (%d)", (uint8_t *)&buf, 8u);
    }
  }
}

void sub_2223B5C60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  uint64_t v28 = a10;
  a10 = 0;
  if (v28) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_3::operator() const(qmi::ServiceType,char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::set(void *a1, unint64_t a2, int a3)
{
  if (a1[3] <= a2) {
    __assert_rtn("set", "dynamic_bitset.hpp", 1035, "pos < m_num_bits");
  }
  if (a3) {
    *(void *)(*a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  else {
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(a1, a2);
  }
  return a1;
}

void *boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(void *result, unint64_t a2)
{
  if (result[3] <= a2) {
    __assert_rtn("reset", "dynamic_bitset.hpp", 1065, "pos < m_num_bits");
  }
  *(void *)(*result + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::~__func()
{
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = &unk_26D4BE958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4BE958;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::operator()(void *a1, _DWORD *a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = a1[1];
  if ((*a2 - 1) >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = *a2;
  }
  uint64_t v5 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v4);
  long long v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a1[2];
    int v12 = 136315138;
    uint64_t v13 = v7;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s QMI client has stopped", (uint8_t *)&v12, 0xCu);
  }
  unsigned int v8 = subscriber::simSlotAsInstance();
  unsigned int v9 = (void *)a1[3];
  if (v9[3] <= (unint64_t)v8)
  {
    int v10 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = qmi::asString();
      int v12 = 136315138;
      uint64_t v13 = v11;
      _os_log_error_impl(&dword_22231A000, v10, OS_LOG_TYPE_ERROR, "Failed to handle QMI client stop for subtype %s", (uint8_t *)&v12, 0xCu);
    }
  }
  else
  {
    boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::reset(v9, v8);
    QMIBasebandSettingsDriver::handleClientStopped_sync(v3);
  }
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1},std::allocator<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_4::operator() const(char const*,qmi::ClientRouter &,boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>> &)::{lambda(qmi::SubscriptionType)#1}>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void *std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__move_assign(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (ctu::MallocZone *)(a1 + 24);
  uint64_t result = ctu::MallocZone::operator==();
  if (result)
  {
    uint64_t result = std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(a1);
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    uint64_t v7 = *(char **)a2;
    long long v6 = *(char **)(a2 + 8);
    unint64_t v8 = (unint64_t)&v6[-*(void *)a2];
    unsigned int v9 = *(unsigned char **)a1;
    if (*(void *)(a1 + 16) - *(void *)a1 >= v8)
    {
      uint64_t v14 = *(unsigned char **)(a1 + 8);
      uint64_t v15 = v14 - v9;
      if (v14 - v9 >= v8)
      {
        if (v7 == v6)
        {
          uint64_t v21 = *(unsigned char **)a1;
        }
        else
        {
          uint64_t v21 = (unsigned char *)(&v9[(void)v6] - v7);
          do
          {
            char v22 = *v7++;
            *v9++ = v22;
          }
          while (v7 != v6);
        }
        *(void *)(a1 + 8) = v21;
      }
      else
      {
        int v16 = &v7[v15];
        if (v14 != v9)
        {
          do
          {
            char v17 = *v7++;
            *v9++ = v17;
            --v15;
          }
          while (v15);
          unsigned int v9 = *(unsigned char **)(a1 + 8);
        }
        long long v18 = v9;
        if (v16 != v6)
        {
          long long v18 = v9;
          unsigned __int8 v19 = v9;
          do
          {
            char v20 = *v16++;
            *v19++ = v20;
            ++v18;
          }
          while (v16 != v6);
        }
        *(void *)(a1 + 8) = v18;
      }
    }
    else
    {
      std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(a1);
      if ((v8 & 0x8000000000000000) != 0) {
        goto LABEL_29;
      }
      unint64_t v10 = *(void *)(a1 + 16) - *(void *)a1;
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v8) {
        uint64_t v11 = v8;
      }
      uint64_t v12 = v10 >= 0x3FFFFFFFFFFFFFFFLL ? 0x7FFFFFFFFFFFFFFFLL : v11;
      if (v12 < 0) {
LABEL_29:
      }
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      uint64_t result = ctu::MallocZone::malloc(v4);
      *(void *)a1 = result;
      *(void *)(a1 + 8) = result;
      *(void *)(a1 + 16) = result + v12;
      while (v7 != v6)
      {
        char v13 = *v7++;
        *(unsigned char *)result++ = v13;
      }
      *(void *)(a1 + 8) = result;
    }
  }
  return result;
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__vdeallocate(uint64_t result)
{
  uint64_t v1 = *(void **)result;
  if (*(void *)result)
  {
    uint64_t v2 = (void *)result;
    *(void *)(result + 8) = v1;
    uint64_t result = ctu::MallocZone::free((ctu::MallocZone *)(result + 24), v1);
    void *v2 = 0;
    v2[1] = 0;
    v2[2] = 0;
  }
  return result;
}

uint64_t std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::~vector[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    ctu::MallocZone::free((ctu::MallocZone *)(a1 + 24), v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  return a1;
}

void std::vector<unsigned char,ctu::malloc_zone_allocator<unsigned char>>::__append(ctu::MallocZone *this, size_t a2)
{
  long long v6 = (char *)this + 8;
  uint64_t v4 = (char *)*((void *)this + 1);
  uint64_t v5 = *((void *)v6 + 1);
  if (v5 - (uint64_t)v4 >= a2)
  {
    if (a2)
    {
      uint64_t v12 = &v4[a2];
      bzero(v4, a2);
      uint64_t v4 = v12;
    }
    *((void *)this + 1) = v4;
  }
  else
  {
    uint64_t v7 = &v4[-*(void *)this];
    unint64_t v8 = (unint64_t)&v7[a2];
    if ((uint64_t)&v7[a2] < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = v5 - *(void *)this;
    if (2 * v9 > v8) {
      unint64_t v8 = 2 * v9;
    }
    if (v9 >= 0x3FFFFFFFFFFFFFFFLL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v8;
    }
    if (v10) {
      uint64_t v11 = ctu::MallocZone::malloc((ctu::MallocZone *)((char *)this + 24));
    }
    else {
      uint64_t v11 = 0;
    }
    char v13 = &v7[v11];
    uint64_t v14 = v11 + v10;
    uint64_t v15 = &v13[a2];
    bzero(v13, a2);
    char v17 = *(char **)this;
    int v16 = (char *)*((void *)this + 1);
    if (v16 != *(char **)this)
    {
      do
      {
        char v18 = *--v16;
        *--char v13 = v18;
      }
      while (v16 != v17);
      int v16 = *(char **)this;
    }
    *(void *)this = v13;
    *((void *)this + 1) = v15;
    *((void *)this + 2) = v14;
    if (v16) {
      ctu::MallocZone::free((ctu::MallocZone *)((char *)this + 24), v16);
    }
  }
}

void std::shared_ptr<QMIBasebandSettingsDriver>::shared_ptr[abi:ne180100]<QMIBasebandSettingsDriver,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223B64C4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1}::operator() const(QMIBasebandSettingsDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223B64EC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIBasebandSettingsDriver *,std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver *)#1},std::allocator<QMIBasebandSettingsDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIBasebandSettingsDriver> ctu::SharedSynchronizable<BasebandSettingsDriver>::make_shared_ptr<QMIBasebandSettingsDriver>(QMIBasebandSettingsDriver*)::{lambda(QMIBasebandSettingsDriver*)#1}::operator() const(QMIBasebandSettingsDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::dynamic_bitset(uint64_t a1, unint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long((void *)a1, a2, a3);
  return a1;
}

void sub_2223B65F8(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::init_from_unsigned_long(void *a1, unint64_t a2, uint64_t a3)
{
  if (a1[1] != *a1) {
    __assert_rtn("init_from_unsigned_long", "dynamic_bitset.hpp", 472, "m_bits.size() == 0");
  }
  if ((a2 & 0x3F) != 0) {
    unint64_t v6 = (a2 >> 6) + 1;
  }
  else {
    unint64_t v6 = a2 >> 6;
  }
  std::vector<unsigned long>::resize((uint64_t)a1, v6);
  a1[3] = a2;
  uint64_t v7 = -1;
  if (a2 < 0x40) {
    uint64_t v7 = ~(-1 << a2);
  }
  uint64_t v8 = v7 & a3;
  if (v8) {
    *(void *)*a1 = v8;
  }
}

void std::vector<unsigned long>::resize(uint64_t a1, unint64_t a2)
{
  unint64_t v2 = (uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3;
  if (a2 <= v2)
  {
    if (a2 < v2) {
      *(void *)(a1 + 8) = *(void *)a1 + 8 * a2;
    }
  }
  else
  {
    std::vector<unsigned long>::__append((char **)a1, a2 - v2);
  }
}

void std::vector<unsigned long>::__append(char **a1, unint64_t a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  uint64_t v5 = v6;
  uint64_t v7 = *(char **)(v4 - 8);
  if (a2 <= (v6 - v7) >> 3)
  {
    if (a2)
    {
      bzero(*(void **)(v4 - 8), 8 * a2);
      v7 += 8 * a2;
    }
    a1[1] = v7;
  }
  else
  {
    uint64_t v8 = *a1;
    uint64_t v9 = v7 - *a1;
    unint64_t v10 = a2 + (v9 >> 3);
    if (v10 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v11 = v9 >> 3;
    uint64_t v12 = v5 - v8;
    if (v12 >> 2 > v10) {
      unint64_t v10 = v12 >> 2;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v13 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v10;
    }
    if (v13)
    {
      uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>(v4, v13);
      uint64_t v8 = *a1;
      uint64_t v7 = a1[1];
    }
    else
    {
      uint64_t v14 = 0;
    }
    uint64_t v15 = &v14[8 * v11];
    int v16 = &v14[8 * v13];
    bzero(v15, 8 * a2);
    char v17 = &v15[8 * a2];
    while (v7 != v8)
    {
      uint64_t v18 = *((void *)v7 - 1);
      v7 -= 8;
      *((void *)v15 - 1) = v18;
      v15 -= 8;
    }
    *a1 = v15;
    a1[1] = v17;
    a1[2] = v16;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

BOOL boost::dynamic_bitset<unsigned long,std::allocator<unsigned long>>::m_check_invariants(uint64_t *a1)
{
  unint64_t v1 = a1[3];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1 & 0x3F;
  if ((v1 & 0x3F) != 0)
  {
    if (v3 == v2) {
      __assert_rtn("m_highest_block", "dynamic_bitset.hpp", 2025, "size() > 0 && num_blocks() > 0");
    }
    if (*(void *)(v3 - 8) >> v4) {
      return 0;
    }
  }
  unint64_t v5 = (v3 - v2) >> 3;
  if (v5 > (a1[2] - v2) >> 3) {
    return 0;
  }
  unint64_t v7 = v1 >> 6;
  if (v4) {
    ++v7;
  }
  return v5 == v7;
}

void std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(*a1);
    std::__tree<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::__map_value_compare<subscriber::SimSlot,std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,std::less<subscriber::SimSlot>,true>,std::allocator<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>>>::destroy(a1[1]);
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 5);
    operator delete(a1);
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp11GetCDRXInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223B6994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3bsp18FileTransferStatus10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223B6A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3pdc14ActivateConfig10IndicationEEEvtU13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<pdc::ActivateConfig::Indication const&>::cast(a2, (qmi::MessageBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223B6B28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BEA38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BEA38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, uint64_t a3)
{
  uint64_t v62 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  cast_message_type<nas::SystemSelectionPreference::Indication const&>::cast(a3, (qmi::MessageBase *)v49);
  unsigned int v5 = v4 - 1;
  if (v4 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v4;
  }
  uint64_t v48 = *(void *)(a1 + 8);
  uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v48 + 48) + 16))(*(void *)(v48 + 48), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Received system selection preference update from baseband", buf, 2u);
  }
  *(void *)int buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v49);
  *(void *)&uint8_t buf[8] = v8;
  if (*(void *)buf)
  {
    uint64_t v9 = tlv::parseV<nas::tlv::BandPref>((unint64_t *)buf, v8);
    BOOL v10 = *(void *)buf != 0;
  }
  else
  {
    uint64_t v9 = 0;
    BOOL v10 = 0;
  }
  if (v10) {
    uint64_t v11 = v9;
  }
  else {
    uint64_t v11 = 0;
  }
  *(void *)int buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v49);
  *(void *)&uint8_t buf[8] = v12;
  if (*(void *)buf)
  {
    uint64_t v13 = tlv::parseV<nas::tlv::TDSCDMABandPref>((unint64_t *)buf, v12);
    BOOL v14 = *(void *)buf != 0;
  }
  else
  {
    BOOL v14 = 0;
    uint64_t v13 = 0;
  }
  if (v14) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = 0;
  }
  *(void *)int v58 = 0;
  *(void *)&v58[8] = 0;
  *(void *)&v58[23] = 0;
  *(void *)&v58[16] = 0;
  char v56 = 0;
  memset(buf, 0, sizeof(buf));
  uint64_t TlvValue = (uint64_t *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v49);
  long long v51 = TlvValue;
  v52[0] = v17;
  if (TlvValue
    && (tlv::parseV<nas::tlv::LTEBandPrefExtended>((unint64_t *)&v51, (int)v17, v60),
        char v18 = v60[0],
        *(_OWORD *)uint64_t v53 = *(_OWORD *)&v60[1],
        *(_OWORD *)&v53[15] = *(_OWORD *)&v60[16],
        v51))
  {
    char v19 = 0;
    *(_OWORD *)int v58 = *(_OWORD *)v53;
    *(_OWORD *)&v58[15] = *(_OWORD *)&v53[15];
    char v20 = 1;
  }
  else
  {
    char v18 = 0;
    char v20 = 0;
    char v19 = 1;
  }
  char v57 = v18;
  char v59 = v20;
  if (capabilities::ct::supports5G((capabilities::ct *)TlvValue))
  {
    long long v51 = (uint64_t *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v49);
    v52[0] = v21;
    if (v51
      && (tlv::parseV<nas::tlv::NRBandPref>((unint64_t *)&v51, (int)v21, v60),
          uint8_t v22 = v60[0],
          *(_OWORD *)uint64_t v53 = *(_OWORD *)&v60[1],
          *(_OWORD *)&v53[16] = *(_OWORD *)&v60[17],
          v54[0] = *(_OWORD *)v61,
          *(_OWORD *)((char *)v54 + 15) = *(_OWORD *)&v61[15],
          v51))
    {
      *(_OWORD *)&buf[1] = *(_OWORD *)v53;
      *(_OWORD *)&buf[17] = *(_OWORD *)&v53[16];
      *(_OWORD *)&buf[33] = v54[0];
      *(_OWORD *)&buf[48] = *(_OWORD *)((char *)v54 + 15);
      int v23 = 1;
    }
    else
    {
      uint8_t v22 = 0;
      int v23 = 0;
    }
    buf[0] = v22;
    char v56 = v23;
  }
  else
  {
    int v23 = 0;
  }
  *(void *)&v60[8] = 0;
  *(void *)&v60[16] = 0;
  *(void *)uint64_t v60 = &unk_26D4BF038;
  *(void *)&v60[24] = v60;
  *(void *)&v53[8] = v60;
  *(void *)&v53[16] = 0;
  v52[1] = 0;
  *(void *)uint64_t v53 = &unk_26D4BF0C8;
  *(void *)&v53[24] = v53;
  long long v51 = (uint64_t *)v52;
  v52[0] = 0;
  if (v10)
  {
    if (v9)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      v50[0] = 0;
      do
      {
        if (((1 << v24) & v11) != 0) {
          v25 |= nas::asBand(1 << v24);
        }
        ++v24;
      }
      while (v24 != 64);
      v50[0] = v25;
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 5);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        if (((1 << v26) & v11) != 0) {
          v27 |= nas::asBand(1 << v26);
        }
        ++v26;
      }
      while (v26 != 64);
      v50[0] = v27;
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 0);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      do
      {
        if (((1 << v28) & v11) != 0) {
          v29 |= nas::asBand(1 << v28);
        }
        ++v28;
      }
      while (v28 != 64);
      v50[0] = v29;
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 2);
    }
    else
    {
      LODWORD(v50[0]) = 5;
      std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(&v51, 5, v50)[5] = 0;
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v60[24], (uint64_t)&v51, 0);
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v60[24], (uint64_t)&v51, 2);
    }
  }
  if ((v19 & 1) == 0)
  {
    int v47 = v23;
    BOOL v30 = v14;
    uint64_t v31 = v13;
    unsigned int v32 = v4;
    unsigned int v33 = v4 - 1;
    uint64_t v34 = 0;
    v50[0] = 0;
    uint64_t v35 = 1;
    do
    {
      uint64_t v36 = 0;
      unint64_t v37 = v58[v34 - 1];
      do
      {
        if ((v37 >> v36)) {
          v50[0] |= ctConvertLteBandToMask();
        }
        ++v36;
      }
      while (v36 != 8);
      ++v34;
      v35 += 8;
    }
    while (v34 != 32);
    std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 7);
    unsigned int v5 = v33;
    unsigned int v4 = v32;
    uint64_t v13 = v31;
    BOOL v14 = v30;
    int v23 = v47;
  }
  if (v14)
  {
    if (v13)
    {
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      do
      {
        if (((1 << v38) & v15) != 0) {
          v39 |= nas::asBand(1 << v38);
        }
        ++v38;
      }
      while (v38 != 64);
      v50[0] = v39;
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 9);
    }
    else
    {
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v60[24], (uint64_t)&v51, 9);
    }
  }
  if (v23)
  {
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    v50[0] = 0;
    uint64_t v42 = 1;
    do
    {
      uint64_t v43 = 0;
      unint64_t v44 = buf[v41];
      do
      {
        if ((v44 >> v43))
        {
          v40 |= ctConvertNrBandToMask();
          v50[0] = v40;
        }
        ++v43;
      }
      while (v43 != 8);
      ++v41;
      v42 += 8;
    }
    while (v41 != 64);
    std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(*(uint64_t *)&v53[24], (uint64_t)&v51, (uint64_t)v50, 10);
  }
  uint64_t v45 = *(void *)(v48 + 72);
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v50, &v51);
  if (v5 >= 3) {
    uint64_t v46 = 0;
  }
  else {
    uint64_t v46 = v4;
  }
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v45 + 48))(v45, v46, v50);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy((void *)v50[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v52[0]);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::~__value_func[abi:ne180100](v53);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__value_func[abi:ne180100](v60);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v49);
}

void sub_2223B71C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  BOOL v14 = va_arg(va1, void *);
  uint64_t v15 = va_arg(va1, void);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v14);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__value_func[abi:ne180100]((void *)(v4 - 168));
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

void cast_message_type<nas::SystemSelectionPreference::Indication const&>::cast(uint64_t a1@<X0>, qmi::MessageBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    unsigned int v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(a2, __p);
    if (__p)
    {
      unsigned int v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication((uint64_t)a2);
  }
}

void sub_2223B7320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223B736C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Indication<(unsigned short)52,nas::SystemSelectionPreference::IndicationTLVList>::Indication(qmi::MessageBase *a1, const void *a2)
{
  uint64_t v3 = (qmi::MessageBase *)qmi::MessageBase::MessageBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2223B73B0(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BEAB8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BEAB8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  v28[3] = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v27 = 0;
    v28[0] = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v25, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v25);
    if (__p)
    {
      uint64_t v27 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v25);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 48) + 16))(*(void *)(v6 + 48), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p) = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Received standby preference update from baseband", (uint8_t *)&__p, 2u);
  }
  std::string __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  uint64_t v27 = v9;
  if (__p)
  {
    unsigned int v10 = tlv::parseV<nas::tlv::StandbyPreferenceReport>((unsigned char **)&__p, (int)v9);
    BOOL v11 = __p == 0;
    if (__p)
    {
      unsigned int v12 = v10;
      unsigned int v13 = HIBYTE(v10);
      goto LABEL_18;
    }
  }
  else
  {
    BOOL v11 = 1;
  }
  unsigned int v12 = 0;
  unsigned int v13 = 0;
LABEL_18:
  std::string __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  uint64_t v27 = v14;
  if (__p)
  {
    unsigned __int8 v15 = tlv::parseV<nas::tlv::DefaultVoiceSubs>((unint64_t *)&__p, (int)v14);
    BOOL v16 = __p == 0;
    int v17 = v15;
  }
  else
  {
    int v17 = 0;
    BOOL v16 = 1;
  }
  std::string __p = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v25);
  uint64_t v27 = v18;
  if (__p)
  {
    unsigned __int8 active = tlv::parseV<nas::tlv::ActiveSubs>((unint64_t *)&__p, (int)v18);
    BOOL v20 = __p == 0;
    int v21 = active;
    if (v11) {
      goto LABEL_27;
    }
  }
  else
  {
    int v21 = 0;
    BOOL v20 = 1;
    if (v11) {
      goto LABEL_27;
    }
  }
  uint8_t v22 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p) = 67109888;
    HIDWORD(__p) = v12;
    LOWORD(v27) = 1024;
    *(_DWORD *)((char *)&v27 + 2) = BYTE1(v12);
    HIWORD(v27) = 1024;
    LODWORD(v28[0]) = BYTE2(v12);
    WORD2(v28[0]) = 1024;
    *(_DWORD *)((char *)v28 + 6) = v13;
    _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> fStandbyPref:0x%x, fPrioritySubs:0x%x, fActiveSubsMask:0x%x, fDefaultDataSubs:0x%x", (uint8_t *)&__p, 0x1Au);
  }
LABEL_27:
  if (!v16)
  {
    int v23 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v17;
      _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> defVoiceSub:0x%x", (uint8_t *)&__p, 8u);
    }
  }
  if (!v20)
  {
    uint64_t v24 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(__p) = 67109120;
      HIDWORD(__p) = v21;
      _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I handleStandbyPrefs_sync> activeSubs:0x%x", (uint8_t *)&__p, 8u);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v25);
}

void sub_2223B777C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BEB38;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BEB38;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    *(void *)int buf = 0;
    int v58 = 0;
    uint64_t v59 = 0;
    QMIServiceMsg::serialize((uint64_t *)buf, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v44, *(const void **)buf);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v44);
    if (*(void *)buf)
    {
      int v58 = *(const void **)buf;
      operator delete(*(void **)buf);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v44);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 48) + 16))(*(void *)(v6 + 48), v7);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Received extended band capability update from baseband", buf, 2u);
  }
  *(void *)int buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v44);
  int v58 = v9;
  if (*(void *)buf)
  {
    uint64_t v10 = tlv::parseV<dms::tlv::BandCapability>((unint64_t *)buf, (int)v9);
    BOOL v11 = *(void *)buf != 0;
  }
  else
  {
    uint64_t v10 = 0;
    BOOL v11 = 0;
  }
  if (v11) {
    uint64_t v12 = v10;
  }
  else {
    uint64_t v12 = 0;
  }
  *(void *)int buf = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v44);
  int v58 = v13;
  if (*(void *)buf)
  {
    uint64_t v14 = tlv::parseV<dms::tlv::TDSCDMABandCapability>((unint64_t *)buf, (int)v13);
    BOOL v15 = *(void *)buf != 0;
  }
  else
  {
    BOOL v15 = 0;
    uint64_t v14 = 0;
  }
  if (v15) {
    uint64_t v16 = v14;
  }
  else {
    uint64_t v16 = 0;
  }
  *(_OWORD *)int v47 = 0u;
  long long v48 = 0u;
  uint64_t TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v44);
  int v54 = v17;
  if (!TlvValue) {
    goto LABEL_31;
  }
  tlv::parseV<dms::tlv::LTEBandCapabilityExtended>((unint64_t *)&TlvValue, (int)v17, (uint64_t)buf);
  char v18 = *(void **)buf;
  if (!TlvValue)
  {
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
LABEL_31:
    LOBYTE(v47[0]) = 0;
    BYTE8(v48) = 0;
    goto LABEL_32;
  }
  v47[1] = 0;
  *(void *)&long long v48 = 0;
  v47[0] = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v47, *(const void **)buf, (uint64_t)v58, ((uint64_t)v58 - *(void *)buf) >> 1);
  BYTE8(v48) = 1;
  if (v18) {
    operator delete(v18);
  }
LABEL_32:
  *(_OWORD *)std::string __p = 0u;
  long long v46 = 0u;
  uint64_t TlvValue = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v44);
  int v54 = v19;
  if (!TlvValue)
  {
LABEL_38:
    LOBYTE(__p[0]) = 0;
    BYTE8(v46) = 0;
    goto LABEL_39;
  }
  tlv::parseV<dms::tlv::NRBandCapability>((unint64_t *)&TlvValue, (int)v19, (uint64_t)buf);
  BOOL v20 = *(void **)buf;
  if (!TlvValue)
  {
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    goto LABEL_38;
  }
  __p[1] = 0;
  *(void *)&long long v46 = 0;
  __p[0] = 0;
  std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(__p, *(const void **)buf, (uint64_t)v58, ((uint64_t)v58 - *(void *)buf) >> 1);
  BYTE8(v46) = 1;
  if (v20) {
    operator delete(v20);
  }
LABEL_39:
  int v21 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 48) + 16))(*(void *)(v6 + 48), v7);
  uint8_t v22 = v21;
  int v58 = 0;
  uint64_t v59 = 0;
  *(void *)int buf = &unk_26D4BF3E8;
  uint64_t v60 = buf;
  int v54 = buf;
  uint64_t v55 = 0;
  uint64_t TlvValue = &unk_26D4BF468;
  p_uint64_t TlvValue = &TlvValue;
  v50[0] = 0;
  v50[1] = 0;
  std::string v49 = v50;
  if (v11)
  {
    int v23 = *v21;
    if (os_log_type_enabled(*v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v51 = 134217984;
      v52[0] = v10;
      _os_log_impl(&dword_22231A000, v23, OS_LOG_TYPE_DEFAULT, "#I Band Capability: 0x%llx", v51, 0xCu);
    }
    if (v10)
    {
      uint64_t v24 = 0;
      uint64_t v25 = 0;
      do
      {
        if (((1 << v24) & v12) != 0) {
          v25 |= nas::asBand(1 << v24);
        }
        ++v24;
      }
      while (v24 != 64);
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v25, 5);
      uint64_t v26 = 0;
      uint64_t v27 = 0;
      do
      {
        if (((1 << v26) & v12) != 0) {
          v27 |= nas::asBand(1 << v26);
        }
        ++v26;
      }
      while (v26 != 64);
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v27, 0);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      do
      {
        if (((1 << v28) & v12) != 0) {
          v29 |= nas::asBand(1 << v28);
        }
        ++v28;
      }
      while (v28 != 64);
      int v21 = (os_log_t *)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v29, 2);
    }
    else
    {
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()((uint64_t)v60, (uint64_t)&v49, 5);
      std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()((uint64_t)v60, (uint64_t)&v49, 0);
      int v21 = (os_log_t *)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()((uint64_t)v60, (uint64_t)&v49, 2);
    }
  }
  if (BYTE8(v48))
  {
    BOOL v30 = (char *)v47[0];
    uint64_t v31 = (char *)v47[1];
    if (v47[0] == v47[1])
    {
      uint64_t v32 = 0;
    }
    else
    {
      uint64_t v32 = 0;
      do
      {
        v32 |= ctConvertLteBandToMask();
        v30 += 2;
      }
      while (v30 != v31);
    }
    unsigned int v33 = *v22;
    if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v51 = 134217984;
      v52[0] = v32;
      _os_log_impl(&dword_22231A000, v33, OS_LOG_TYPE_DEFAULT, "#I LTE extended band capability: 0x%016llx", v51, 0xCu);
    }
    int v21 = (os_log_t *)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v32, 7);
  }
  if (v15)
  {
    uint64_t v34 = *v22;
    if (os_log_type_enabled(*v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v51 = 134217984;
      v52[0] = v14;
      _os_log_impl(&dword_22231A000, v34, OS_LOG_TYPE_DEFAULT, "#I TDSCDMA Band Capability: 0x%llx", v51, 0xCu);
    }
    if (v14)
    {
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      do
      {
        if (((1 << v35) & v16) != 0) {
          v36 |= nas::asBand(1 << v35);
        }
        ++v35;
      }
      while (v35 != 64);
      int v21 = (os_log_t *)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v36, 9);
    }
    else
    {
      int v21 = (os_log_t *)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()((uint64_t)v60, (uint64_t)&v49, 9);
    }
  }
  int v37 = capabilities::ct::supports5G((capabilities::ct *)v21);
  if (BYTE8(v46)) {
    int v38 = v37;
  }
  else {
    int v38 = 0;
  }
  if (v38 == 1)
  {
    uint64_t v39 = (char *)__p[0];
    uint64_t v40 = (char *)__p[1];
    if (__p[0] == __p[1])
    {
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v41 = 0;
      do
      {
        v41 |= ctConvertNrBandToMask();
        v39 += 2;
      }
      while (v39 != v40);
    }
    uint64_t v42 = *v22;
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long v51 = 134217984;
      v52[0] = v41;
      _os_log_impl(&dword_22231A000, v42, OS_LOG_TYPE_DEFAULT, "#I NR5G extended band capability: 0x%016llx", v51, 0xCu);
    }
    std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()((uint64_t)p_TlvValue, (uint64_t)&v49, v41, 10);
  }
  uint64_t v43 = *(void *)(v6 + 72);
  std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v51, &v49);
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v43 + 40))(v43, v7, v51);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)((char *)v52 + 4));
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v50[0]);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::~__value_func[abi:ne180100](&TlvValue);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__value_func[abi:ne180100](buf);
  if (BYTE8(v46) && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (BYTE8(v48) && v47[0])
  {
    v47[1] = v47[0];
    operator delete(v47[0]);
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v44);
}

void sub_2223B7FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, char a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a23);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::~__value_func[abi:ne180100](&a29);
  std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__value_func[abi:ne180100]((void *)(v29 - 128));
  if (a16 && __p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a20)
  {
    if (a17)
    {
      a18 = (uint64_t)a17;
      operator delete(a17);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5>(unsigned short,QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIBasebandSettingsDriver::bootstrap(std::shared_ptr<BasebandSettingsDriverEventHandlerInterface>)::$_5 &&,QMIServiceMsg const)>::target_type()
{
}

void *std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(void *result, const void *a2, uint64_t a3, uint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned short>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2223B8198(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<unsigned short>::__vallocate[abi:ne180100](void *a1, uint64_t a2)
{
  if (a2 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[2 * v4];
  return result;
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::SubType>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::SubType>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SubType>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223B8520(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v4 = v2[2];
    uint64_t v5 = v4 - 1 >= 3 ? 0 : v4;
    uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v2 + 48) + 16))(*(void *)(*(void *)v2 + 48), v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      buf[0] = 136315394;
      *(void *)&buf[1] = v7;
      __int16 v17 = 1024;
      LODWORD(v18) = v8;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N Error binding NAS subscription: %s (0x%x)", (uint8_t *)buf, 0x12u);
    }
  }
  int v9 = v2[2];
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  *qmi::MutableMessageBase::getTLV<nas::tlv::SystemSelectionPreference>((uint64_t)__p, 16) = 1;
  *qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>((uint64_t)__p, 19) = 0;
  *qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>((uint64_t)__p, 24) = 0;
  int v10 = _os_feature_enabled_impl() ^ 1;
  if (v9 != 1) {
    LOBYTE(v10) = 1;
  }
  if ((v10 & 1) == 0)
  {
    BOOL v11 = (const void **)__p[1];
    if (__p[1] != (void *)v15)
    {
      while (*((unsigned char *)*v11 + 8) != 20)
      {
        if (++v11 == (const void **)v15) {
          goto LABEL_17;
        }
      }
    }
    if (v11 == (const void **)v15) {
LABEL_17:
    }
      operator new();
    if (!v12) {
      __cxa_bad_cast();
    }
    v12[9] = 1;
  }
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v13, v9);
}

void sub_2223B8984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  uint64_t v28 = a10;
  a10 = 0;
  if (v28) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindNASSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindNASSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEC38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223B8AD8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<nas::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_2223B8B8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223B8BD8(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)69,nas::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2223B8C1C(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<dms::tlv::SubscriptionType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<dms::tlv::SubscriptionType>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void qmi::MutableMessageBase::createTLV<dms::tlv::SubscriptionType>()
{
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)unsigned int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::SubscriptionType>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<dms::BindSubscription::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223B8F64(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(_DWORD **)(a1 + 32);
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v4 = v2[2];
    uint64_t v5 = v4 - 1 >= 3 ? 0 : v4;
    uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)v2 + 48) + 16))(*(void *)(*(void *)v2 + 48), v5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      buf[0] = 136315394;
      *(void *)&buf[1] = v7;
      __int16 v16 = 1024;
      LODWORD(v17) = v8;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N Error binding DMS subscription: %s (0x%x)", (uint8_t *)buf, 0x12u);
    }
  }
  int v9 = v2[2];
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  int v10 = (const void **)__p[1];
  if (__p[1] != (void *)v14)
  {
    while (*((unsigned char *)*v10 + 8) != 20)
    {
      if (++v10 == (const void **)v14) {
        goto LABEL_14;
      }
    }
  }
  if (v10 != (const void **)v14)
  {
    if (v11)
    {
      v11[9] = 1;
      qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<dms::SetEventReport::Request>(&v12, v9);
    }
    __cxa_bad_cast();
  }
LABEL_14:
  operator new();
}

void sub_2223B9378(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  uint64_t v28 = a10;
  a10 = 0;
  if (v28) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c111_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver24bindDMSSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BED08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::bindDMSSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BED08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<dms::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223B94CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<dms::BindSubscription::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_2223B9580(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223B95CC(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)84,dms::BindSubscription::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2223B9610(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::SystemSelectionPreference>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::SystemSelectionPreference>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::SystemSelectionPreference>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SystemSelectionPreference>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::ServingSysEvents>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::ServingSysEvents>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ServingSysEvents>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::SysInfoEvents>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::SysInfoEvents>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::SysInfoEvents>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::StandbyPref>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223B9F98(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  unsigned int v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
  int v8 = *(_DWORD *)(a2 + 4);
  os_log_t v9 = *v7;
  BOOL v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (!v10) {
      return;
    }
    v14[0] = 67109378;
    v14[1] = v8;
    __int16 v15 = 2080;
    uint64_t v16 = qmi::asString();
    BOOL v11 = "#N Register for NAS indications failed: Error in response with code %d (%s)";
    int v12 = v9;
    uint32_t v13 = 18;
  }
  else
  {
    if (!v10) {
      return;
    }
    LOWORD(v14[0]) = 0;
    BOOL v11 = "#I Register for NAS indications succeeded";
    int v12 = v9;
    uint32_t v13 = 2;
  }
  _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)v14, v13);
}

uint64_t __copy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendNASIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEEC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendNASIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEEC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::ReportOperatingMode>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<dms::SetEventReport::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223BA2D4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  char v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  unsigned int v5 = *((_DWORD *)v3 + 2);
  if (v5 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
  int v8 = *(_DWORD *)(a2 + 4);
  os_log_t v9 = *v7;
  BOOL v10 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (!v10) {
      return;
    }
    v14[0] = 67109378;
    v14[1] = v8;
    __int16 v15 = 2080;
    uint64_t v16 = qmi::asString();
    BOOL v11 = "#N Register for DMS indications failed: Error in response with code %d (%s)";
    int v12 = v9;
    uint32_t v13 = 18;
  }
  else
  {
    if (!v10) {
      return;
    }
    LOWORD(v14[0]) = 0;
    BOOL v11 = "#I Register for DMS indications succeeded";
    int v12 = v9;
    uint32_t v13 = 2;
  }
  _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)v14, v13);
}

uint64_t __copy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c113_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver26sendDMSIndRegisterReq_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEF98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIBasebandSettingsDriver::sendDMSIndRegisterReq_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BEF98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::CDRXInfoEnabled>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3bsp11GetCDRXInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223BA660(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__func()
{
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4BF038;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BF038;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, int *a3)
{
  int v4 = *a3;
  uint64_t result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v4);
  result[5] = 0;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target_type()
{
}

uint64_t **std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    os_log_t v9 = operator new(0x30uLL);
    v9[8] = *a3;
    *((void *)v9 + 5) = 0;
    std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(a1, (uint64_t)v7, v6, (uint64_t *)v9);
    return (uint64_t **)v9;
  }
  return v7;
}

void *std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::~__func()
{
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BF0C8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BF0C8;
  a2[1] = v2;
  return result;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3, int *a4)
{
  int v4 = *a4;
  int v8 = *a4;
  uint64_t v5 = *a3;
  if (*a3)
  {
    uint64_t result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v8);
    result[5] = v5;
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24);
    return (uint64_t **)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(v7, (uint64_t)a2, v4);
  }
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleActiveBands_sync(qmi::SubscriptionType,std::optional<nas::tlv::BandPref> const&,std::optional<nas::tlv::LTEBandPrefExtended> const&,std::optional<nas::tlv::TDSCDMABandPref> const&,std::optional<nas::tlv::NRBandPref> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long &,RadioAccessTechnology)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  int v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      int v6 = *((_DWORD *)v5 + 8);
      uint64_t v7 = *(void *)(a1 + 8);
      int v8 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v9 = *(void *)(a1 + 8);
      BOOL v10 = v3;
      if (v7)
      {
        do
        {
          int v8 = (uint64_t **)v9;
          uint64_t v9 = *(void *)(v9 + 8);
        }
        while (v9);
      }
      else
      {
        do
        {
          int v8 = (uint64_t **)v10[2];
          BOOL v11 = *v8 == (uint64_t *)v10;
          BOOL v10 = v8;
        }
        while (v11);
      }
      if (*((_DWORD *)v8 + 8) < v6)
      {
LABEL_8:
        if (v7) {
          int v12 = v8;
        }
        else {
          int v12 = v3;
        }
        if (v7) {
          uint32_t v13 = v8 + 1;
        }
        else {
          uint32_t v13 = v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        uint32_t v13 = v3;
        int v12 = v3;
        if (v7)
        {
          long long v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              int v12 = (uint64_t **)v14;
              int v15 = *((_DWORD *)v14 + 8);
              if (v15 <= v6) {
                break;
              }
              long long v14 = *v12;
              uint32_t v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v6) {
              goto LABEL_25;
            }
            long long v14 = v12[1];
            if (!v14)
            {
              uint32_t v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v16 = (uint64_t *)operator new(0x30uLL);
      *((_OWORD *)v16 + 2) = *((_OWORD *)v5 + 2);
      std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          uint64_t v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          uint64_t v18 = (void *)v5[2];
          BOOL v11 = *v18 == (void)v5;
          uint64_t v5 = v18;
        }
        while (!v11);
      }
      uint64_t v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_2223BAC00(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::BandPref>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::ModePreference>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<nas::tlv::ModePreference>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void qmi::MutableMessageBase::createTLV<nas::tlv::ModePreference>()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ModePreference>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::getSize()
{
  return tlv::size<nas::tlv::LTEBandPrefExtended>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (_OWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::LTEBandPrefExtended>((_OWORD **)a2, a1 + 9);
  int v6 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v6;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEBandPrefExtended>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSCDMABandPref>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::getSize()
{
  return tlv::size<nas::tlv::NRBandPref>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::NRBandPref>(a2, a1 + 9);
  uint64_t v6 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRBandPref>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::SetSystemSelectionPreference::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223BB2E8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENSt3__13mapI21RadioAccessTechnologyyNS6_4lessIS8_EENS6_9allocatorINS6_4pairIKS8_yEEEEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  v10[2] = *(void **)MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  int v4 = *(_DWORD *)(a2 + 4);
  uint64_t v5 = *(NSObject **)v2[2];
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      v9[0] = 67109378;
      v9[1] = v4;
      LOWORD(v10[0]) = 2080;
      *(void **)((char *)v10 + 2) = (void *)qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#N Set active bands failed: Error in response with code %d (%s)", (uint8_t *)v9, 0x12u);
    }
  }
  else
  {
    if (v6)
    {
      LOWORD(v9[0]) = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Set active bands succeeded", (uint8_t *)v9, 2u);
    }
    uint64_t v7 = *(void *)(v3 + 72);
    uint64_t v8 = *((unsigned int *)v2 + 2);
    std::map<RadioAccessTechnology,unsigned long long>::map[abi:ne180100]((uint64_t)v9, v2 + 3);
    (*(void (**)(uint64_t, uint64_t, _DWORD *))(*(void *)v7 + 48))(v7, v8, v9);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v10[0]);
  }
}

void sub_2223BB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t __copy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENS_3mapI21RadioAccessTechnologyyNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_yEEEEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c179_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14setActiveBandsEN10subscriber7SimSlotENS_3mapI21RadioAccessTechnologyyNS_4lessIS5_EENS_9allocatorINS_4pairIKS5_yEEEEEEE3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF318;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF318;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2,std::allocator<QMIBasebandSettingsDriver::setActiveBands(subscriber::SimSlot,std::map<RadioAccessTechnology,unsigned long long>)::$_2>>::__on_zero_shared(uint64_t a1)
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Failed to query for extended band capability: Error: %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c102_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c102_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17getBandCapabilityEN10subscriber7SimSlotEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0,std::allocator<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF398;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0,std::allocator<QMIBasebandSettingsDriver::getBandCapability(subscriber::SimSlot)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF398;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dms19GetBandCapabilityEx8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223BB744(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::~__func()
{
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = &unk_26D4BF3E8;
  return result;
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BF3E8;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, int *a3)
{
  int v4 = *a3;
  uint64_t result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v4, &v4);
  result[5] = 0;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_0>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::target_type()
{
}

void std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::~__func()
{
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4BF468;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BF468;
  a2[1] = v2;
  return result;
}

uint64_t **std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::operator()(uint64_t a1, uint64_t **a2, uint64_t **a3, int *a4)
{
  int v4 = *a3;
  int v5 = *a4;
  int v8 = *a4;
  if (v4)
  {
    uint64_t result = std::__tree<std::__value_type<RadioAccessTechnology,unsigned long long>,std::__map_value_compare<RadioAccessTechnology,std::__value_type<RadioAccessTechnology,unsigned long long>,std::less<RadioAccessTechnology>,true>,std::allocator<std::__value_type<RadioAccessTechnology,unsigned long long>>>::__emplace_unique_key_args<RadioAccessTechnology,std::piecewise_construct_t const&,std::tuple<RadioAccessTechnology const&>,std::tuple<>>(a2, v5, &v8);
    result[5] = v4;
  }
  else
  {
    uint64_t v7 = *(void *)(*(void *)(a1 + 8) + 24);
    return (uint64_t **)std::function<void ()(std::map<RadioAccessTechnology,unsigned long long> &,RadioAccessTechnology)>::operator()(v7, (uint64_t)a2, v5);
  }
  return result;
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1,std::allocator<QMIBasebandSettingsDriver::handleBandCapabilityData_sync(subscriber::SimSlot,std::optional<dms::tlv::BandCapability> const&,std::optional<dms::tlv::TDSCDMABandCapability> const&,std::optional<dms::tlv::LTEBandCapabilityExtended> const&,std::optional<dms::tlv::NRBandCapability> const&)::$_1>,void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::target_type()
{
}

void *std::__function::__value_func<void ()(std::map<RadioAccessTechnology,unsigned long long> &,unsigned long long,RadioAccessTechnology)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(NSObject **)(**(void **)(a1 + 32) + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    v8[0] = 67109378;
    v8[1] = v2;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    int v5 = "#N Exit No Service failed: Error in response with code %d (%s)";
    uint64_t v6 = v3;
    uint32_t v7 = 18;
  }
  else
  {
    if (!v4) {
      return;
    }
    LOWORD(v8[0]) = 0;
    int v5 = "#I Exit No Service succeeded";
    uint64_t v6 = v3;
    uint32_t v7 = 2;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

uint64_t __copy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c82_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18exitNoServiceStateEvE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0,std::allocator<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF528;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0,std::allocator<QMIBasebandSettingsDriver::exitNoServiceState(void)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF528;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint32_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)BOOL v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::Time>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNSt3__18functionIF7CSIDatevEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  char v3 = *(NSObject **)(**(void **)(a1 + 32) + 40);
  if (v2)
  {
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "SetTime failed: failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
  else if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v4[0]) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I SetTime succeeded", (uint8_t *)v4, 2u);
  }
}

uint64_t __copy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNS_8functionIF7CSIDatevEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c109_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver18sendTimeToBasebandERKNS_8functionIF7CSIDatevEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF5F8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendTimeToBaseband(std::function<CSIDate ()(void)> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BF5F8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::IMSISwitch>::clone()
{
}

void *std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  BOOL v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  NSObject *v3 = 0;
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::MultiPDNToSameAPN>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::ScreenStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SleepStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  BOOL v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *BOOL v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::TetheringStatus>::clone()
{
}

uint64_t std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  char v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    char v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

{
  uint64_t v3;

  char v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(void *a1)
{
  *a1 = &unk_26D4BF7D8;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(void *a1)
{
  *a1 = &unk_26D4BF7D8;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 1);

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = &unk_26D4BF7D8;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_2223BC528(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1, void *a2)
{
  *a2 = &unk_26D4BF7D8;
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(a2 + 1), a1 + 8);
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100]((void *)(a1 + 8));
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 1);

  operator delete(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::operator()(uint64_t a1, int *a2)
{
  int v3 = *a2;
  FilePushTransactionResult::FilePushTransactionResult();
  return std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>::operator()(*(void *)(a1 + 32), v3, v5);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_0>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target_type()
{
}

void *std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::unique_ptr<FilePushTransaction>::reset[abi:ne180100](uint64_t *a1)
{
  uint64_t result = *a1;
  *a1 = 0;
  if (result)
  {
    MEMORY[0x223C99420]();
    JUMPOUT(0x223C9A950);
  }
  return result;
}

void std::__shared_ptr_pointer<FilePushTransaction  *>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<FilePushTransaction  *>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    MEMORY[0x223C99420]();
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<FilePushTransaction  *>::__get_deleter(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(void *a1)
{
  *a1 = &unk_26D4BF8C8;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 3);
  return a1;
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::~__func(void *a1)
{
  *a1 = &unk_26D4BF8C8;
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 3);

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_26D4BF8C8;
  v2[1] = v3;
  *((_DWORD *)v2 + 4) = *(_DWORD *)(a1 + 16);
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v2 + 3), a1 + 24);
  return v2;
}

void sub_2223BC984(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::__clone(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = &unk_26D4BF8C8;
  uint64_t v2 = *(void *)(a1 + 8);
  *(_DWORD *)(a2 + 16) = *(_DWORD *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100](a2 + 24, a1 + 24);
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy(uint64_t a1)
{
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100]((void *)(a1 + 24));
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::destroy_deallocate(void *a1)
{
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](a1 + 3);

  operator delete(a1);
}

void std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::operator()(uint64_t a1, int *a2, int *a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  int v4 = *a2;
  int v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = (capabilities::ct *)(*(uint64_t (**)(void, void))(**(void **)(v6 + 48) + 16))(*(void *)(v6 + 48), *a2);
  int v8 = (NSObject **)v7;
  if (v5 && capabilities::ct::supportsCompleteCleanupOnFilePushFailure(v7))
  {
    __int16 v9 = *v8;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Transaction aborted. PDC refresh not sent", buf, 2u);
    }
    FilePushTransactionResult::FilePushTransactionResult();
    std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>::operator()(*(void *)(a1 + 48), v4, *(uint64_t *)buf);
  }
  else
  {
    memset(v17, 0, sizeof(v17));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::ConfigurationType>((uint64_t)v17, 1) = 1;
    uint64_t v10 = qmi::MutableMessageBase::getTLV<pdc::tlv::IndicationToken>((uint64_t)v17, 16);
    *(_DWORD *)uint64_t v10 = subscriber::simSlotAsInstance();
    *(_DWORD *)qmi::MutableMessageBase::getTLV<pdc::tlv::ActivationType>((uint64_t)v17, 17) = 1;
    LODWORD(v10) = *(_DWORD *)(a1 + 16);
    uint64_t v11 = qmi::MutableMessageBase::getTLV<pdc::tlv::SlotId>((uint64_t)v17, 19);
    int v12 = v10 - 1;
    if ((v10 - 1) >= 3) {
      int v12 = -1;
    }
    *(_DWORD *)uint64_t v11 = v12;
    uint32_t v13 = qmi::MutableMessageBase::getTLV<pdc::tlv::SubscriptionId>((uint64_t)v17, 18);
    *(_DWORD *)uint32_t v13 = subscriber::simSlotAsInstance();
    uint64_t v15 = QMIServiceMsg::create();
    *(void *)int buf = MEMORY[0x263EF8330];
    uint64_t v20 = 1174405120;
    int v21 = ___ZZN25QMIBasebandSettingsDriver31prepareFilePushTransaction_syncEN10subscriber7SimSlotENS0_15HardwareSimSlotENSt3__18functionIFvS1_25FilePushTransactionResultEEEENK3__1clES1_25FilePushTransactionStatus_block_invoke;
    uint8_t v22 = &__block_descriptor_tmp_200_1;
    uint64_t v23 = v6;
    uint64_t v24 = v8;
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)v25, a1 + 24);
    int v26 = v4;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3pdc14ActivateConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
    aBlock[3] = &unk_26460A208;
    aBlock[4] = buf;
    long long v14 = _Block_copy(aBlock);
    uint64_t v16 = v14;
    if (v15)
    {
      qmi::Client::send();
      long long v14 = v16;
    }
    if (v14) {
      _Block_release(v14);
    }
    std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](v25);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
  }
}

void sub_2223BCCB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, char a15)
{
  std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](v15);
  if (a11) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1,std::allocator<QMIBasebandSettingsDriver::prepareFilePushTransaction_sync(subscriber::SimSlot,subscriber::HardwareSimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>)::$_1>,void ()(subscriber::SimSlot,FilePushTransactionStatus)>::target_type()
{
}

void ___ZZN25QMIBasebandSettingsDriver31prepareFilePushTransaction_syncEN10subscriber7SimSlotENS0_15HardwareSimSlotENSt3__18functionIFvS1_25FilePushTransactionResultEEEENK3__1clES1_25FilePushTransactionStatus_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(_DWORD *)(a2 + 4);
  uint64_t v4 = *(void *)(a1 + 32);
  int v5 = **(NSObject ***)(a1 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v6)
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#N PDC refresh failed", buf, 2u);
    }
    int v7 = *(_DWORD *)(a1 + 80);
    FilePushTransactionResult::FilePushTransactionResult();
    std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>::operator()(*(void *)(a1 + 72), v7, v16);
  }
  else
  {
    if (v6)
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I PDC refresh initiated", buf, 2u);
    }
    int v8 = *(_DWORD *)(a1 + 80);
    uint64_t v9 = *(void *)(v4 + 288);
    uint64_t v10 = (void *)(v4 + 288);
    uint64_t v11 = (void *)(v4 + 288);
    if (v9)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v11 = (void *)v9;
          int v12 = *(_DWORD *)(v9 + 32);
          if (v12 <= v8) {
            break;
          }
          uint64_t v9 = *v11;
          uint64_t v10 = v11;
          if (!*v11) {
            goto LABEL_14;
          }
        }
        if (v12 >= v8) {
          break;
        }
        uint64_t v9 = v11[1];
        if (!v9)
        {
          uint64_t v10 = v11 + 1;
          goto LABEL_14;
        }
      }
    }
    else
    {
LABEL_14:
      uint64_t v13 = a1 + 48;
      uint64_t v19 = 0;
      long long v14 = operator new(0x48uLL);
      *(void *)int buf = v14;
      uint64_t v18 = v4 + 288;
      v14[8] = v8;
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100]((uint64_t)(v14 + 10), v13);
      LOBYTE(v19) = 1;
      *(void *)long long v14 = 0;
      *((void *)v14 + 1) = 0;
      *((void *)v14 + 2) = v11;
      *uint64_t v10 = v14;
      uint64_t v15 = **(void **)(v4 + 280);
      if (v15)
      {
        *(void *)(v4 + 280) = v15;
        long long v14 = (_DWORD *)*v10;
      }
      std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(v4 + 288), (uint64_t *)v14);
      ++*(void *)(v4 + 296);
      *(void *)int buf = 0;
      std::unique_ptr<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>>>>::reset[abi:ne180100]((uint64_t)buf);
    }
  }
}

void sub_2223BCF18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::unique_ptr<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>>>>::reset[abi:ne180100]((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_48c75_ZTSNSt3__18functionIFvN10subscriber7SimSlotE25FilePushTransactionResultEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void *__destroy_helper_block_e8_48c75_ZTSNSt3__18functionIFvN10subscriber7SimSlotE25FilePushTransactionResultEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3pdc14ActivateConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<pdc::ActivateConfig::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223BCF90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::unique_ptr<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>,std::__tree_node_destructor<std::allocator<std::__tree_node<std::__value_type<subscriber::SimSlot,std::function<void ()(subscriber::SimSlot,FilePushTransactionResult)>>,void *>>>>::reset[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      std::__function::__value_func<void ()(subscriber::SimSlot,FilePushTransactionResult)>::~__value_func[abi:ne180100](v1 + 5);
    }
    operator delete(v1);
  }
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BF990;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BF990;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::getSize(uint64_t a1)
{
  return tlv::size<bsp::tlv::FileTransferInfo>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<bsp::tlv::FileTransferInfo>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferInfo>::clone()
{
}

void sub_2223BD1A8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40B943FB0DLL);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BF9E0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4BF9E0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::FileTransferSignature>::clone()
{
}

void sub_2223BD368(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::SubscriptionID>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dms::tlv::BatterySaverModeState>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(**(void **)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N SetBatterySaverMode::Request returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c83_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver19setBatterySaverModeEbE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1,std::allocator<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFAE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1,std::allocator<QMIBasebandSettingsDriver::setBatterySaverMode(BOOL)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFAE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t *std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  int v3 = a2;
  if (*a2)
  {
    uint64_t v4 = (uint64_t *)a2[1];
    if (!v4)
    {
      int v3 = a2;
      goto LABEL_7;
    }
    do
    {
      int v3 = v4;
      uint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  uint64_t v2 = v3[1];
  if (v2)
  {
LABEL_7:
    int v5 = 0;
    *(void *)(v2 + 16) = v3[2];
    goto LABEL_8;
  }
  int v5 = 1;
LABEL_8:
  BOOL v6 = (uint64_t **)v3[2];
  uint64_t v7 = *v6;
  if (*v6 == v3)
  {
    *BOOL v6 = (uint64_t *)v2;
    if (v3 == result)
    {
      uint64_t v7 = 0;
      uint64_t result = (uint64_t *)v2;
    }
    else
    {
      uint64_t v7 = v6[1];
    }
  }
  else
  {
    v6[1] = (uint64_t *)v2;
  }
  int v8 = *((unsigned __int8 *)v3 + 24);
  if (v3 != a2)
  {
    uint64_t v9 = a2[2];
    void v3[2] = v9;
    *(void *)(v9 + 8 * (*(void *)a2[2] != (void)a2)) = v3;
    uint64_t v11 = *a2;
    uint64_t v10 = a2[1];
    *(void *)(v11 + 16) = v3;
    uint64_t *v3 = v11;
    v3[1] = v10;
    if (v10) {
      *(void *)(v10 + 16) = v3;
    }
    *((unsigned char *)v3 + 24) = *((unsigned char *)a2 + 24);
    if (result == a2) {
      uint64_t result = v3;
    }
  }
  if (!v8 || !result) {
    return result;
  }
  if (!v5)
  {
    *(unsigned char *)(v2 + 24) = 1;
    return result;
  }
  while (1)
  {
    uint64_t v12 = v7[2];
    if (*(uint64_t **)v12 != v7) {
      break;
    }
    if (!*((unsigned char *)v7 + 24))
    {
      *((unsigned char *)v7 + 24) = 1;
      *(unsigned char *)(v12 + 24) = 0;
      uint64_t v18 = v7[1];
      *(void *)uint64_t v12 = v18;
      if (v18) {
        *(void *)(v18 + 16) = v12;
      }
      v7[2] = *(void *)(v12 + 16);
      *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v7;
      v7[1] = v12;
      *(void *)(v12 + 16) = v7;
      if (result == (uint64_t *)v12) {
        uint64_t result = v7;
      }
      uint64_t v7 = *(uint64_t **)v12;
    }
    uint64_t v19 = (void *)*v7;
    if (*v7 && !*((unsigned char *)v19 + 24)) {
      goto LABEL_68;
    }
    uint64_t v20 = (uint64_t *)v7[1];
    if (v20 && !*((unsigned char *)v20 + 24))
    {
      if (v19 && !*((unsigned char *)v19 + 24))
      {
LABEL_68:
        uint64_t v20 = v7;
      }
      else
      {
        *((unsigned char *)v20 + 24) = 1;
        *((unsigned char *)v7 + 24) = 0;
        uint64_t v26 = *v20;
        v7[1] = *v20;
        if (v26) {
          *(void *)(v26 + 16) = v7;
        }
        v20[2] = v7[2];
        *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v20;
        uint64_t *v20 = (uint64_t)v7;
        v7[2] = (uint64_t)v20;
        uint64_t v19 = v7;
      }
      uint64_t v23 = v20[2];
      *((unsigned char *)v20 + 24) = *(unsigned char *)(v23 + 24);
      *(unsigned char *)(v23 + 24) = 1;
      *((unsigned char *)v19 + 24) = 1;
      uint64_t v24 = *(uint64_t **)v23;
      uint64_t v27 = *(void *)(*(void *)v23 + 8);
      *(void *)uint64_t v23 = v27;
      if (v27) {
        *(void *)(v27 + 16) = v23;
      }
      v24[2] = *(void *)(v23 + 16);
      *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
      v24[1] = v23;
      goto LABEL_72;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (*((unsigned char *)v17 + 24)) {
      BOOL v21 = v17 == result;
    }
    else {
      BOOL v21 = 1;
    }
    if (v21) {
      goto LABEL_53;
    }
LABEL_49:
    uint64_t v7 = *(uint64_t **)(v17[2] + 8 * (*(void *)v17[2] == (void)v17));
  }
  if (!*((unsigned char *)v7 + 24))
  {
    *((unsigned char *)v7 + 24) = 1;
    *(unsigned char *)(v12 + 24) = 0;
    uint64_t v13 = *(uint64_t **)(v12 + 8);
    uint64_t v14 = *v13;
    *(void *)(v12 + 8) = *v13;
    if (v14) {
      *(void *)(v14 + 16) = v12;
    }
    unint64_t v13[2] = *(void *)(v12 + 16);
    *(void *)(*(void *)(v12 + 16) + 8 * (**(void **)(v12 + 16) != v12)) = v13;
    uint64_t *v13 = v12;
    *(void *)(v12 + 16) = v13;
    if (result == (uint64_t *)*v7) {
      uint64_t result = v7;
    }
    uint64_t v7 = *(uint64_t **)(*v7 + 8);
  }
  uint64_t v15 = (void *)*v7;
  if (!*v7 || *((unsigned char *)v15 + 24))
  {
    uint64_t v16 = (uint64_t *)v7[1];
    if (v16 && !*((unsigned char *)v16 + 24)) {
      goto LABEL_59;
    }
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v17 = (uint64_t *)v7[2];
    if (v17 == result)
    {
      uint64_t v17 = result;
LABEL_53:
      *((unsigned char *)v17 + 24) = 1;
      return result;
    }
    if (!*((unsigned char *)v17 + 24)) {
      goto LABEL_53;
    }
    goto LABEL_49;
  }
  uint64_t v16 = (uint64_t *)v7[1];
  if (v16 && !*((unsigned char *)v16 + 24))
  {
LABEL_59:
    uint64_t v15 = v7;
  }
  else
  {
    *((unsigned char *)v15 + 24) = 1;
    *((unsigned char *)v7 + 24) = 0;
    uint64_t v22 = v15[1];
    *uint64_t v7 = v22;
    if (v22) {
      *(void *)(v22 + 16) = v7;
    }
    v15[2] = v7[2];
    *(void *)(v7[2] + 8 * (*(void *)v7[2] != (void)v7)) = v15;
    v15[1] = v7;
    v7[2] = (uint64_t)v15;
    uint64_t v16 = v7;
  }
  uint64_t v23 = v15[2];
  *((unsigned char *)v15 + 24) = *(unsigned char *)(v23 + 24);
  *(unsigned char *)(v23 + 24) = 1;
  *((unsigned char *)v16 + 24) = 1;
  uint64_t v24 = *(uint64_t **)(v23 + 8);
  uint64_t v25 = *v24;
  *(void *)(v23 + 8) = *v24;
  if (v25) {
    *(void *)(v25 + 16) = v23;
  }
  v24[2] = *(void *)(v23 + 16);
  *(void *)(*(void *)(v23 + 16) + 8 * (**(void **)(v23 + 16) != v23)) = v24;
  uint64_t *v24 = v23;
LABEL_72:
  *(void *)(v23 + 16) = v24;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::UiSwitch>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  char v3 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(**(void **)(a1 + 32) + 48) + 16))(*(void *)(**(void **)(a1 + 32) + 48), *(unsigned int *)(*(void *)(a1 + 32) + 8));
  int v4 = *(_DWORD *)(a2 + 4);
  os_log_t v5 = *v3;
  BOOL v6 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (!v6) {
      return;
    }
    v10[0] = 67109378;
    v10[1] = v4;
    __int16 v11 = 2080;
    uint64_t v12 = qmi::asString();
    uint64_t v7 = "#N Send smart data mode failed. Error: %d (%s)";
    int v8 = v5;
    uint32_t v9 = 18;
  }
  else
  {
    if (!v6) {
      return;
    }
    LOWORD(v10[0]) = 0;
    uint64_t v7 = "#I Send smart data mode succeeded";
    int v8 = v5;
    uint32_t v9 = 2;
  }
  _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)v10, v9);
}

uint64_t __copy_helper_block_e8_32c103_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c103_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendSmartDataModeEN10subscriber7SimSlotEbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFBB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendSmartDataMode(subscriber::SimSlot,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFBB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::ActiveSubs>(a2, a1 + 9);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::ActiveSubs>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNSt3__13setIN10subscriber7SimSlotENS4_4lessIS7_EENS4_9allocatorIS7_EEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    char v3 = *(NSObject **)(**(void **)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Error StandbyPreference: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c144_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNS_3setIN10subscriber7SimSlotENS_4lessIS4_EENS_9allocatorIS4_EEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c144_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver14sendActiveSubsERKNS_3setIN10subscriber7SimSlotENS_4lessIS4_EENS_9allocatorIS4_EEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0,std::allocator<QMIBasebandSettingsDriver::sendActiveSubs(std::set<subscriber::SimSlot> const&)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFC88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas17StandbyPreference8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223BDFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::InMetroStatus>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(**(void **)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      int v3 = 136315138;
      uint64_t v4 = qmi::asString();
      _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#N InMetroStatus TransitClassifierInfo::Request returned error: %s", (uint8_t *)&v3, 0xCu);
    }
  }
}

uint64_t __copy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c81_ZTSNSt3__110shared_ptrIZN25QMIBasebandSettingsDriver17sendInMetroStatusEbE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFD58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0,std::allocator<QMIBasebandSettingsDriver::sendInMetroStatus(BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4BFD58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void QMICDMASettingsCommandDriver::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2223BE2E4(_Unwind_Exception *exception_object)
{
  int v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMICDMASettingsCommandDriver::init(Registry **this)
{
  uint64_t v2 = (char *)(this + 11);
  Registry::createRestModuleOneTimeUseConnection(&v4, this[9]);
  ctu::RestModule::connect();
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  return ctu::rest::property_source_t<calls_active_in_settings>::bind(this + 13, (uint64_t)v2);
}

void sub_2223BE388(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ctu::rest::property_source_t<calls_active_in_settings>::bind(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  v4[0] = &unk_26D4BFF78;
  v4[1] = a2;
  v4[3] = v4;
  std::__function::__value_func<void ()(BOOL const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](v4);
  uint64_t result = a1[3];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, a1 + 4);
  }
  return result;
}

void QMICDMASettingsCommandDriver::start(Registry **this)
{
  xpc_object_t v2 = xpc_null_create();
  ServiceMap = (std::mutex *)Registry::getServiceMap(this[9]);
  uint64_t v4 = ServiceMap;
  uint64_t v5 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    int v6 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = (char *)v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v33 = v5;
  int v9 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v4[1].__m_.__sig, (unint64_t *)&v33);
  if (!v9)
  {
    __int16 v11 = 0;
    goto LABEL_8;
  }
  __int16 v11 = (void *)v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10)
  {
LABEL_8:
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  char v12 = 0;
LABEL_9:
  uint64_t v13 = (std::__shared_weak_count *)this[2];
  if (!v13 || (v14 = this[1], (uint64_t v15 = std::__shared_weak_count::lock(v13)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  std::string::basic_string[abi:ne180100]<0>(__p, "settings");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  QMIClientPool::requestClient(v11, 9u, (uint64_t *)__p, (uint64_t)(this + 6), (uint64_t)&object, &v33);
  long long v17 = v33;
  long long v33 = 0uLL;
  uint64_t v18 = (std::__shared_weak_count *)this[8];
  *(_OWORD *)(this + 7) = v17;
  if (v18)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
    if (*((void *)&v33 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v33 + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v40 < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = (uint64_t)this[7];
  *(void *)&long long v33 = MEMORY[0x263EF8330];
  *((void *)&v33 + 1) = 1174405120;
  uint64_t v34 = ___ZN28QMICDMASettingsCommandDriver5startEN3xpc10connectionE_block_invoke;
  uint64_t v35 = &__block_descriptor_tmp_34;
  uint64_t v36 = v14;
  int v37 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v20 = *(std::__shared_weak_count **)(v19 + 8);
  if (v20)
  {
    BOOL v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v19;
      if (*(void *)v19)
      {
        uint64_t v41 = v19 + 88;
        uint64_t v42 = 1;
        MEMORY[0x223C999F0]();
        uint64_t v24 = *(void *)(v19 + 24);
        if (v24)
        {
          uint64_t v25 = v19 + 24;
          do
          {
            unsigned int v26 = *(unsigned __int16 *)(v24 + 32);
            BOOL v27 = v26 >= 0x2E;
            if (v26 >= 0x2E) {
              uint64_t v28 = (uint64_t *)v24;
            }
            else {
              uint64_t v28 = (uint64_t *)(v24 + 8);
            }
            if (v27) {
              uint64_t v25 = v24;
            }
            uint64_t v24 = *v28;
          }
          while (*v28);
          if (v25 != v19 + 24 && *(unsigned __int16 *)(v25 + 32) <= 0x2Eu) {
            __TUAssertTrigger();
          }
        }
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN2vs15VoiceCallStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        aBlock[3] = &unk_26460A278;
        aBlock[4] = &v33;
        uint64_t v29 = (uint64_t *)_Block_copy(aBlock);
        unsigned __int16 v45 = 46;
        int v47 = &v45;
        BOOL v30 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v19 + 16), &v45, (uint64_t)&std::piecewise_construct, &v47);
        uint64_t v31 = v30[5];
        v30[5] = v29;
        if (v31) {
          _Block_release(v31);
        }
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v41);
        uint64_t v41 = 0;
        uint64_t v42 = 0;
        uint64_t v32 = *(void *)(v19 + 64);
        uint64_t v43 = *(void *)(v19 + 56);
        uint64_t v44 = v32;
        if (v32) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
        }
        QMIClientPool::registerUnsolicitedHandler(v23, (uint64_t)&v41, v19, 0x2Eu);
        qmi::Client::~Client((qmi::Client *)&v41);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  QMIVirtualClient::addToPowerMode(this[7]);
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  std::__shared_weak_count::__release_weak(v16);
  if ((v12 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  xpc_release(v2);
}

void sub_2223BE7E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, xpc_object_t object, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a23);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  std::__shared_weak_count::__release_weak(v25);
  if ((v27 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  xpc_release(v23);
  _Unwind_Resume(a1);
}

void ___ZN28QMICDMASettingsCommandDriver5startEN3xpc10connectionE_block_invoke(uint64_t a1, uint64_t a2)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *(void *)(a1 + 32);
      if (v6)
      {
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        unsigned int v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t __copy_helper_block_e8_32c53_ZTSNSt3__18weak_ptrI28QMICDMASettingsCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c53_ZTSNSt3__18weak_ptrI28QMICDMASettingsCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t QMIVirtualClient::addToPowerMode(QMIVirtualClient *this)
{
  if (!*((unsigned char *)this + 72) || !*((void *)this + 7)) {
    __TUAssertTrigger();
  }

  return qmi::Client::setIndShouldWake((QMIVirtualClient *)((char *)this + 40));
}

uint64_t QMICDMASettingsCommandDriver::stop(QMICDMASettingsCommandDriver *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 7);
  if (v3)
  {
    v5[0] = v3 + 88;
    v5[1] = 1;
    MEMORY[0x223C999F0](v3 + 88, a2);
    *(unsigned char *)(v3 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v5);
  }

  return ctu::RestModule::disconnect((QMICDMASettingsCommandDriver *)((char *)this + 88));
}

uint64_t QMICDMASettingsCommandDriver::QMICDMASettingsCommandDriver(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = MEMORY[0x263F038B8] + 16;
  uint64_t v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v14, (const char *)*MEMORY[0x263F03770], "set.cdma.qmi");
  *uint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v14);
  *(void *)a1 = &unk_26D4BFDD8;
  *(void *)(a1 + 56) = 0;
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 48) = &unk_26D4BFE20;
  *(void *)(a1 + 72) = *a2;
  uint64_t v8 = a2[1];
  *(void *)(a1 + 80) = v8;
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "QMICDMASettingsCommandDriver");
  int v9 = *(NSObject **)(a1 + 24);
  __int16 v11 = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  ctu::RestModule::RestModule();
  if (v11) {
    dispatch_release(v11);
  }
  if (v13 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 136) = 0;
  *(unsigned char *)(a1 + 144) = -1;
  *(void *)(a1 + 176) = 0;
  return a1;
}

void sub_2223BECD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  if (a10) {
    dispatch_release(a10);
  }
  if (a16 < 0) {
    operator delete(__p);
  }
  BOOL v21 = (std::__shared_weak_count *)*((void *)v17 + 10);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  uint64_t v22 = (std::__shared_weak_count *)*((void *)v17 + 8);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  MEMORY[0x223C99A30](v19);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v18);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v17);
  _Unwind_Resume(a1);
}

BOOL QMICDMASettingsCommandDriver::dialSettingCall(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(void *)(a1 + 176))
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v5, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)int buf = 0;
    _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "A call is already on going!", buf, 2u);
    return 0;
  }
  std::function<void ()(void)>::operator=((void *)(a1 + 152), a4);
  uint64_t v8 = *(void *)(a1 + 56);
  if (!*(unsigned char *)(v8 + 72) || !*(void *)(v8 + 56))
  {
    long long v17 = *(NSObject **)(a1 + 40);
    BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v18) {
      return result;
    }
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I fVSClient is not ready to send dial request", buf, 2u);
    return 0;
  }
  memset(v20, 0, sizeof(v20));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v20);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  v19[2] = ___ZN28QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvvEEE_block_invoke;
  void v19[3] = &__block_descriptor_tmp_6_2;
  v19[4] = a3;
  int v9 = qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>((uint64_t)v20, 1);
  ___ZN28QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvvEEE_block_invoke((uint64_t)v19, v9);
  *qmi::MutableMessageBase::getTLV<vs::tlv::CallType>((uint64_t)v20, 16) = 0;
  *(unsigned char *)(a1 + 136) = 1;
  uint64_t v10 = *(void *)(a1 + 128);
  if (v10) {
    (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
  }
  __int16 v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v11
    || (uint64_t v12 = *(void *)(a1 + 56), v13 = *(void *)(a1 + 8), (v14 = std::__shared_weak_count::lock(v11)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v15 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (!*(unsigned char *)(v12 + 72) || !*(void *)(v12 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v29 = v12 + 40;
  uint64_t v30 = QMIServiceMsg::create();
  int v31 = 25000;
  uint64_t v32 = 0;
  long long v33 = 0;
  *(void *)int buf = MEMORY[0x263EF8330];
  uint64_t v22 = 1174405120;
  uint64_t v23 = ___ZN16QMIVirtualClient4sendIN2vs13VoiceDialCall7RequestE28QMICDMASettingsCommandDriverMS4_FvRKNS2_8ResponseEEEENSt3__19enable_ifIXsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
  uint64_t v24 = &__block_descriptor_tmp_36_10;
  uint64_t v25 = v13;
  unsigned int v26 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v27 = QMICDMASettingsCommandDriver::handleVoiceDialCallResp;
  uint64_t v28 = 0;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_7;
  aBlock[3] = &unk_26460A2A0;
  aBlock[4] = buf;
  uint64_t v16 = _Block_copy(aBlock);
  long long v33 = v16;
  if (v30)
  {
    qmi::Client::send();
    uint64_t v16 = v33;
  }
  if (v16) {
    _Block_release(v16);
  }
  if (v26) {
    std::__shared_weak_count::__release_weak(v26);
  }
  std::__shared_weak_count::__release_weak(v15);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v20);
  return 1;
}

void sub_2223BF084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
}

void *std::function<void ()(void)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(void)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *___ZN28QMICDMASettingsCommandDriver15dialSettingCallEN10subscriber7SimSlotERKNSt3__112basic_stringIcNS2_11char_traitsIcEENS2_9allocatorIcEEEENS2_8functionIFvvEEE_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v3 = *(char **)(a1 + 32);
  if (v3[23] < 0)
  {
    uint64_t v3 = *(char **)v3;
    unint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    unint64_t v4 = v3[23];
  }
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<std::__wrap_iter<char const*>,std::__wrap_iter<char const*>>(a2, v3, &v3[v4], v4);
}

void QMICDMASettingsCommandDriver::handleVoiceDialCallResp(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMICDMASettingsCommandDriver::~QMICDMASettingsCommandDriver(QMICDMASettingsCommandDriver *this)
{
  *(void *)this = &unk_26D4BFDD8;
  *((void *)this + 6) = &unk_26D4BFE20;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 19);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100]((void *)this + 13);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);

  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);
}

{
  std::__shared_weak_count *v2;
  std::__shared_weak_count *v3;
  std::__shared_weak_count *v4;
  uint64_t vars8;

  *(void *)this = &unk_26D4BFDD8;
  *((void *)this + 6) = &unk_26D4BFE20;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 19);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100]((void *)this + 13);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);
  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMICDMASettingsCommandDriver::~QMICDMASettingsCommandDriver(QMICDMASettingsCommandDriver *this)
{
  uint64_t v2 = (QMICDMASettingsCommandDriver *)((char *)this - 48);
  *((void *)this - 6) = &unk_26D4BFDD8;
  *(void *)this = &unk_26D4BFE20;
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 13);
  std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100]((void *)this + 7);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  unint64_t v4 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  MEMORY[0x223C99A30]((char *)this - 8);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this - 5);

  CDMASettingsCommandDriver::~CDMASettingsCommandDriver(v2);
}

{
  QMICDMASettingsCommandDriver::~QMICDMASettingsCommandDriver((QMICDMASettingsCommandDriver *)((char *)this - 48));
}

void *std::__function::__value_func<void ()(BOOL const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<QMICDMASettingsCommandDriver>::shared_ptr[abi:ne180100]<QMICDMASettingsCommandDriver,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223BF644(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1}::operator() const(QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223BF66C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMICDMASettingsCommandDriver *,std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver *)#1},std::allocator<QMICDMASettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICDMASettingsCommandDriver> ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::make_shared_ptr<QMICDMASettingsCommandDriver>(QMICDMASettingsCommandDriver*)::{lambda(QMICDMASettingsCommandDriver*)#1}::operator() const(QMICDMASettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::~__func()
{
}

void *std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = &unk_26D4BFF78;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4BFF78;
  a2[1] = v2;
  return result;
}

void std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::operator()(uint64_t a1, BOOL *a2)
{
}

uint64_t std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1},std::allocator<ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}>,void ()(BOOL const&)>::target_type()
{
}

void ctu::rest::property_source_t<calls_active_in_settings>::bind(ctu::RestModule &)::{lambda(BOOL const&)#1}::operator()(uint64_t a1, BOOL *a2)
{
  xpc_object_t v2 = xpc_BOOL_create(*a2);
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "/cc/props/calls_active_in_settings");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0) {
    operator delete(__p);
  }
  xpc_release(v2);
}

void sub_2223BF8D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(BOOL const&)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2223BFB88(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN2vs15VoiceCallStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  void v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_2223BFC04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void *std::__function::__value_func<void ()(void)>::swap[abi:ne180100](void *result, void *a2)
{
  v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2223BFE84(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

char *qmi::MutableMessageBase::getTLV<vs::tlv::CallingNumber>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<vs::tlv::CallingNumber>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void qmi::MutableMessageBase::createTLV<vs::tlv::CallingNumber>()
{
}

void *qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C0020;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C0020;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  BOOL result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  uint64_t v7 = (char *)*a2 - v5;
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallingNumber>::clone()
{
}

void sub_2223C0210(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<vs::tlv::CallType>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<vs::tlv::CallType>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<vs::tlv::CallType>()
{
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  BOOL result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<vs::tlv::CallType>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN2vs13VoiceDialCall7RequestE28QMICDMASettingsCommandDriverMS4_FvRKNS2_8ResponseEEEENSt3__19enable_ifIXsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke(void *a1, void *a2)
{
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = a1[4];
      if (v7)
      {
        int v9 = (void (*)(void *, unsigned char *))a1[6];
        uint64_t v8 = a1[7];
        uint64_t v10 = (void *)(v7 + (v8 >> 1));
        if (v8) {
          int v9 = *(void (**)(void *, unsigned char *))(*v10 + v9);
        }
        qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response((qmi::MessageBase *)v11, a2);
        v9(v10, v11);
        qmi::MessageBase::~MessageBase((qmi::MessageBase *)v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223C05AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

qmi::MessageBase *qmi::Response<(unsigned short)32,vs::VoiceDialCall::ResponseTLVList>::Response(qmi::MessageBase *this, void *a2)
{
  *(void *)this = *a2;
  uint64_t v3 = a2[2];
  *((void *)this + 1) = a2[1];
  *((void *)this + 2) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId(this);
  return this;
}

void sub_2223C0620(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceDialCallResp(vs::VoiceDialCall::Response const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  void v16[5] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_8;
    }
    LODWORD(v16[0]) = 67109120;
    HIDWORD(v16[0]) = v3;
    uint64_t v5 = "#E Voice dial call response failed with error code = 0x%x";
    uint64_t v6 = (uint8_t *)v16;
    uint64_t v7 = v4;
    uint32_t v8 = 8;
    goto LABEL_7;
  }
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = ___ZZN28QMICDMASettingsCommandDriver23handleVoiceDialCallRespERKN2vs13VoiceDialCall8ResponseEENK3__0clEv_block_invoke;
  void v16[3] = &__block_descriptor_tmp_39;
  v16[4] = v2;
  *(void *)int buf = v16;
  if (qmi::MessageBase::applyTlv<vs::tlv::CallIdentifier,void({block_pointer})(vs::tlv::CallIdentifier const&)>((qmi::MessageBase *)(v1 + 8), 16, (uint64_t)buf))goto LABEL_10; {
  int v9 = *(NSObject **)(v2 + 40);
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    uint64_t v5 = "#E No Call ID present";
    uint64_t v6 = buf;
    uint64_t v7 = v9;
    uint32_t v8 = 2;
LABEL_7:
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v5, v6, v8);
  }
LABEL_8:
  *(unsigned char *)(v2 + 136) = 0;
  uint64_t v10 = v2 + 136;
  uint64_t v11 = *(void *)(v10 - 8);
  if (v11) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v10);
  }
LABEL_10:
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v14);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v13);
}

void sub_2223C07C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void ___ZZN28QMICDMASettingsCommandDriver23handleVoiceDialCallRespERKN2vs13VoiceDialCall8ResponseEENK3__0clEv_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *a2;
  *(unsigned char *)(v2 + 144) = v3;
  uint64_t v4 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = v3;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Call ID: %u", (uint8_t *)v5, 8u);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMICDMASettingsCommandDriver>::execute_wrapped<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>(QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0,dispatch_queue_s *::default_delete<QMICDMASettingsCommandDriver::handleVoiceCallStatusInd(vs::VoiceCallStatus::Indication const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v12 = a1;
  uint64_t v13 = (uint64_t *)*a1;
  uint64_t v1 = *v13;
  uint64_t v15 = 0;
  uint64_t v16 = &v15;
  uint64_t v17 = 0x4002000000;
  BOOL v18 = __Block_byref_object_copy__0;
  uint64_t v19 = __Block_byref_object_dispose__0;
  std::string __p = 0;
  BOOL v21 = 0;
  uint64_t v22 = 0;
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  _DWORD v14[2] = ___ZZN28QMICDMASettingsCommandDriver24handleVoiceCallStatusIndERKN2vs15VoiceCallStatus10IndicationEENK3__0clEv_block_invoke;
  void v14[3] = &unk_26460A2E8;
  v14[4] = &v15;
  *(void *)int buf = v14;
  if ((qmi::MessageBase::applyTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>((qmi::MessageBase *)(v13 + 1), 1, (uint64_t)buf) & 1) == 0)
  {
    int v9 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)int buf = 0;
    uint64_t v10 = "#I Voice call status doesn't have mandatory TLV \"Identifier List\" (0x01)";
LABEL_20:
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    goto LABEL_21;
  }
  uint64_t v2 = (unsigned __int8 *)v16[5];
  if (!(-73 * (*((unsigned char *)v16 + 48) - (_BYTE)v2)))
  {
    int v9 = *(NSObject **)(v1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_21;
    }
    *(_WORD *)int buf = 0;
    uint64_t v10 = "#I No call instances reported";
    goto LABEL_20;
  }
  unsigned int v3 = (-73 * (*((unsigned char *)v16 + 48) - (_BYTE)v2));
  if (v3 >= 2)
  {
    uint64_t v4 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&void buf[4] = v3;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Got '%d' call instances instead of just '1'; reading the first one",
        buf,
        8u);
      uint64_t v2 = (unsigned __int8 *)v16[5];
    }
  }
  if (v2[1] == 9)
  {
    int v5 = *v2;
    uint64_t v6 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 67109120;
      *(_DWORD *)&void buf[4] = v5;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Call end event for call %u", buf, 8u);
    }
    int v7 = *(unsigned __int8 *)(v1 + 144);
    if (v5 == v7 && v7 != 255)
    {
      *(unsigned char *)(v1 + 136) = 0;
      uint64_t v8 = *(void *)(v1 + 128);
      if (v8) {
        (*(void (**)(uint64_t))(*(void *)v8 + 48))(v8);
      }
      *(_OWORD *)int buf = 0u;
      long long v24 = 0u;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)buf, v1 + 152);
      std::__function::__value_func<void ()(void)>::operator=[abi:ne180100]((void *)(v1 + 152));
      *(unsigned char *)(v1 + 144) = -1;
      if (*((void *)&v24 + 1)) {
        (*(void (**)(void))(**((void **)&v24 + 1) + 48))(*((void *)&v24 + 1));
      }
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](buf);
    }
  }
LABEL_21:
  _Block_object_dispose(&v15, 8);
  if (__p)
  {
    BOOL v21 = __p;
    operator delete(__p);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v13);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_2223C0BA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(v23 - 80));
  _Block_object_dispose(&a17, 8);
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

__n128 __Block_byref_object_copy__0(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__0(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZZN28QMICDMASettingsCommandDriver24handleVoiceCallStatusIndERKN2vs15VoiceCallStatus10IndicationEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<vs::tlv::CallListItem>::__assign_with_size[abi:ne180100]<vs::tlv::CallListItem*,vs::tlv::CallListItem*>(result, *(char **)a2, *(void *)(a2 + 8), 0x6DB6DB6DB6DB6DB7 * (*(void *)(a2 + 8) - *(void *)a2));
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    if (qmi::MessageBase::tryTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>((uint64_t)a1, (unsigned __int8 *)result, v7, a3))
    {
      return 1;
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

BOOL qmi::MessageBase::tryTlv<vs::tlv::CallList,void({block_pointer})(vs::tlv::CallList const&)>(uint64_t a1, unsigned __int8 *a2, int a3, uint64_t a4)
{
  uint64_t v9 = 0;
  uint64_t v10 = a2;
  std::string __p = 0;
  uint64_t v8 = 0;
  tlv::parseV<vs::tlv::CallList>(&v10, a3, (uint64_t *)&__p);
  int v5 = v10;
  if (v10) {
    (*(void (**)(void))(*(void *)a4 + 16))();
  }
  if (__p)
  {
    uint64_t v8 = __p;
    operator delete(__p);
  }
  return v5 != 0;
}

void sub_2223C0D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<vs::tlv::CallListItem>::__assign_with_size[abi:ne180100]<vs::tlv::CallListItem*,vs::tlv::CallListItem*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (0x6DB6DB6DB6DB6DB7 * (v8 - *(void *)result) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      v7[2] = 0;
    }
    if (a4 > 0x2492492492492492) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * v8;
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x1249249249249249) {
      unint64_t v12 = 0x2492492492492492;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<PlmnPriorityData>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    uint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      BOOL v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  uint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0x6DB6DB6DB6DB6DB7 * (v15 - v9) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[0x6DB6DB6DB6DB6DB8 * (v15 - v9) + 0x9249249249249249 * (v15 - v9)];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    uint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    BOOL v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  uint64_t *v13 = &v9[v17];
  return result;
}

void *std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void Mav16QMIAttachApnCommandDriver::create(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2223C11D4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav16QMIAttachApnCommandDriver::~Mav16QMIAttachApnCommandDriver(Mav16QMIAttachApnCommandDriver *this)
{
  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav16QMIAttachApnCommandDriver *)((char *)this + 96));

  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav16QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void *Mav16QMIAttachApnCommandDriver::performPushSettingsToBB_sync(void *a1, uint64_t a2, uint64_t a3)
{
  v225[5] = *MEMORY[0x263EF8340];
  memset(v225, 0, 32);
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v225, a3);
  char v5 = *(unsigned char *)(a3 + 32);
  v134[0] = 0;
  v134[1] = v134;
  v134[2] = 0x2000000000;
  char v135 = 0;
  uint64_t v6 = dispatch_group_create();
  int v7 = v6;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v7);
    dispatch_release(v7);
  }
  uint64_t v8 = &unk_222569000;
  if (!*(unsigned char *)(a2 + 8)
    || (*(void *)a2
      ? (uint64_t v9 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (uint64_t v9 = 0),
        !v9))
  {
    long long v51 = a1[5];
    if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(aBlock) = 0;
      _os_log_impl(&dword_22231A000, v51, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", (uint8_t *)&aBlock, 2u);
    }
    goto LABEL_252;
  }
  v208 = 0;
  v207 = 0;
  uint64_t v209 = 0;
  v172 = 0;
  v171 = 0;
  uint64_t v173 = 0;
  uint64_t v113 = a2;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v133, (const void **)a2);
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v133);
  unint64_t v10 = v171;
  uint64_t v11 = (void *)MEMORY[0x263F8C2B8];
  v122 = v172;
  if (v171 == v172) {
    goto LABEL_89;
  }
  char v12 = 0;
  v117 = (char *)*MEMORY[0x263F03688];
  v115 = *(std::string **)(MEMORY[0x263F8C2B8] + 64);
  v116 = (std::string *)*MEMORY[0x263F8C2B8];
  v114 = *(std::string **)(MEMORY[0x263F8C2B8] + 72);
  unint64_t v13 = 32;
  do
  {
    v221 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v221, v10);
    uint64_t v169 = 0;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long aBlock = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    uint64_t v15 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v153, (uint64_t)"trying to push 3GPP attach APN ", 31);
    if (v221) {
      uint64_t v16 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v16)
    {
      ctu::cf_to_xpc((uint64_t *)&object, v221, v14);
      xpc::object::to_string((uint64_t *)&__p, (xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "empty");
    }
    if ((SBYTE7(v220) & 0x80u) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    if ((SBYTE7(v220) & 0x80u) == 0) {
      uint64_t v18 = BYTE7(v220);
    }
    else {
      uint64_t v18 = *((void *)&__p + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v15, (uint64_t)p_p, v18);
    if (SBYTE7(v220) < 0)
    {
      operator delete((void *)__p);
      if (!v16) {
        goto LABEL_27;
      }
LABEL_26:
      xpc_release(object);
      goto LABEL_27;
    }
    if (v16) {
      goto LABEL_26;
    }
LABEL_27:
    uint64_t v19 = a1[11];
    if (v19) {
      (*(void (**)(uint64_t, long long *))(*(void *)v19 + 48))(v19, &aBlock);
    }
    v126 = 0;
    v127 = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v126, v221);
    long long __p = 0u;
    long long v220 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&__p);
    *(void *)&long long v146 = MEMORY[0x263EF8330];
    *((void *)&v146 + 1) = 1174405120;
    *(void *)&long long v147 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke;
    *((void *)&v147 + 1) = &__block_descriptor_tmp_15_12;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v148, (const ctu::cf::dict_adapter *)&v126);
    uint64_t v20 = qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>((uint64_t)&__p, 17);
    ((void (*)(long long *, char *))v147)(&v146, v20);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "AllowedProtocolMaskInRoamingLTE");
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v126, (const __CFString *)__s.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__s);
    if ((Int - 1) <= 2)
    {
      uint64_t v197 = MEMORY[0x263EF8330];
      uint64_t v198 = 0x40000000;
      v199 = (uint64_t (*)(uint64_t, char *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2;
      v200 = &__block_descriptor_tmp_21_2;
      LODWORD(v201) = Int - 1;
      uint64_t v22 = qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>((uint64_t)&__p, 65);
      v199((uint64_t)&v197, v22);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "AllowedProtocolMaskInRoamingUMTS");
    int v23 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)&v126, (const __CFString *)__s.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__s);
    if ((v23 - 1) <= 2)
    {
      uint64_t v192 = MEMORY[0x263EF8330];
      uint64_t v193 = 0x40000000;
      v194 = (uint64_t (*)(uint64_t, char *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3;
      v195 = &__block_descriptor_tmp_24_1;
      int v196 = v23 - 1;
      long long v24 = qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>((uint64_t)&__p, 66);
      v194((uint64_t)&v192, v24);
    }
    uint64_t v141 = MEMORY[0x263EF8330];
    uint64_t v142 = 1174405120;
    v143 = (void (*)(uint64_t *, char *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_4;
    v144 = &__block_descriptor_tmp_29_4;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v145, (const ctu::cf::dict_adapter *)&v126);
    uint64_t v25 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>((uint64_t)&__p, 20);
    v143(&v141, v25);
    memset(&__s, 0, sizeof(__s));
    memset(&v218[1], 0, sizeof(std::string));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v218, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](v218);
    if (SHIBYTE(v218[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218[1].__r_.__value_.__l.__data_);
    }
    std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __s.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      *(void *)&long long v214 = MEMORY[0x263EF8330];
      *((void *)&v214 + 1) = 1174405120;
      v215 = (void (*)(long long *, char *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_31;
      v216 = &__block_descriptor_tmp_32_9;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v217, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v217 = __s;
      }
      char v27 = qmi::MutableMessageBase::getTLV<wds::tlv::UserName>((uint64_t)&__p, 27);
      v215(&v214, v27);
      if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v217.__r_.__value_.__l.__data_);
      }
    }
    memset(v218, 0, sizeof(v218));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v213, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](&v213);
    if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218[0].__r_.__value_.__l.__data_);
    }
    std::string::size_type v28 = HIBYTE(v218[1].__r_.__value_.__r.__words[2]);
    if ((v218[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v28 = v218[1].__r_.__value_.__l.__size_;
    }
    if (v28)
    {
      *(void *)&long long v210 = MEMORY[0x263EF8330];
      *((void *)&v210 + 1) = 1174405120;
      *(void *)&long long v211 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_34;
      *((void *)&v211 + 1) = &__block_descriptor_tmp_37_11;
      if (SHIBYTE(v218[1].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v212, v218[1].__r_.__value_.__l.__data_, v218[1].__r_.__value_.__l.__size_);
      }
      else {
        std::string v212 = v218[1];
      }
      uint64_t v29 = qmi::MutableMessageBase::getTLV<wds::tlv::Password>((uint64_t)&__p, 28);
      ((void (*)(long long *, char *))v211)(&v210, v29);
      if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v212.__r_.__value_.__l.__data_);
      }
    }
    memset(v218, 0, 24);
    memset(&v213, 0, sizeof(v213));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v150, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](v150);
    if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v213.__r_.__value_.__l.__data_);
    }
    std::string::size_type v30 = HIBYTE(v218[0].__r_.__value_.__r.__words[2]);
    if ((v218[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v30 = v218[0].__r_.__value_.__l.__size_;
    }
    if (v30)
    {
      uint64_t v202 = MEMORY[0x263EF8330];
      uint64_t v203 = 1174405120;
      uint64_t v204 = (uint64_t)___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_39;
      uint64_t v205 = (uint64_t)&__block_descriptor_tmp_43_8;
      if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v206, v218[0].__r_.__value_.__l.__data_, v218[0].__r_.__value_.__l.__size_);
      }
      else {
        std::string v206 = v218[0];
      }
      int v31 = qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>((uint64_t)&__p, 29);
      ((void (*)(uint64_t *, char *))v204)(&v202, v31);
      if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v206.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v136 = MEMORY[0x263EF8330];
    uint64_t v137 = 1174405120;
    v138 = (void (*)(uint64_t *, char *))___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_44;
    v139 = &__block_descriptor_tmp_50_5;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v140, (const ctu::cf::dict_adapter *)&v126);
    uint64_t v32 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>((uint64_t)&__p, 31);
    v138(&v136, v32);
    LODWORD(v150[0]) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v213, "APNClass");
    long long v33 = (int *)((uint64_t (*)(const void ***, std::string::size_type))*v126)(&v126, v213.__r_.__value_.__r.__words[0]);
    uint64_t v34 = v33;
    if (v33)
    {
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFNumberGetTypeID()) {
        int v37 = ctu::cf::assign((ctu::cf *)v150, v34, v36);
      }
      else {
        int v37 = 0;
      }
      CFRelease(v34);
    }
    else
    {
      int v37 = 0;
    }
    MEMORY[0x223C99AF0](&v213);
    if (v37 && (v150[0] & 0x80000000) == 0)
    {
      uint64_t v187 = MEMORY[0x263EF8330];
      uint64_t v188 = 0x40000000;
      v189 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_52;
      v190 = &__block_descriptor_tmp_54;
      int v191 = v150[0];
      int v38 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>((uint64_t)&__p, 49);
      v189((uint64_t)&v187, v38);
    }
    LOBYTE(v170) = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v213, v117);
    uint64_t v39 = (BOOL *)((uint64_t (*)(const void ***, std::string::size_type))*v126)(&v126, v213.__r_.__value_.__r.__words[0]);
    char v40 = v39;
    if (v39)
    {
      CFTypeID v41 = CFGetTypeID(v39);
      if (v41 == CFBooleanGetTypeID()) {
        int v43 = ctu::cf::assign((ctu::cf *)&v170, v40, v42);
      }
      else {
        int v43 = 0;
      }
      CFRelease(v40);
      MEMORY[0x223C99AF0](&v213);
      if (v43)
      {
        uint64_t v181 = MEMORY[0x263EF8330];
        uint64_t v182 = 0x40000000;
        v183 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2_55;
        v184 = &__block_descriptor_tmp_57_1;
        char v185 = (char)v170;
        uint64_t v44 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>((uint64_t)&__p, 62);
        v183((uint64_t)&v181, v44);
      }
    }
    else
    {
      MEMORY[0x223C99AF0](&v213);
    }
    uint64_t v176 = MEMORY[0x263EF8330];
    uint64_t v177 = 0x40000000;
    v178 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3_58;
    v179 = &__block_descriptor_tmp_60_1;
    char v180 = v12 & 1;
    unsigned __int16 v45 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>((uint64_t)&__p, 144);
    v178((uint64_t)&v176, v45);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((uint64_t)&__p, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100]((uint64_t *)&v207);
    MEMORY[0x223C99B30](v140);
    if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v218[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v218[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    MEMORY[0x223C99B30](v145);
    MEMORY[0x223C99B30](v148);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&__p);
    MEMORY[0x223C99B30](&v126);
    *(void *)&long long aBlock = v116;
    *(void *)((char *)&aBlock + v116[-1].__r_.__value_.__r.__words[0]) = v115;
    *(void *)&long long v153 = v114;
    *((void *)&v153 + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v158) < 0) {
      operator delete(*((void **)&v157 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C9A8E0](&v160);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v221);
    ++v10;
    v13 -= 32;
    char v12 = 1;
  }
  while (v10 != v122);
  *(void *)&long long aBlock = MEMORY[0x263EF8330];
  *((void *)&aBlock + 1) = 0x40000000;
  *(void *)&long long v153 = ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_5;
  *((void *)&v153 + 1) = &__block_descriptor_tmp_66_0;
  LOBYTE(v154) = v5;
  long long v46 = qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((uint64_t)&v207[v13 / 0xFFFFFFFFFFFFFFE0], 145);
  ((void (*)(long long *, char *))v153)(&aBlock, v46);
  uint64_t v11 = (void *)MEMORY[0x263F8C2B8];
LABEL_89:
  int v47 = v207;
  long long v48 = v208;
  if (v207 != v208)
  {
    int v49 = 0;
    do
    {
      long long v210 = 0u;
      long long v211 = 0u;
      qmi::MutableMessageBase::MutableMessageBase();
      *(void *)&long long v214 = a1 + 12;
      *((void *)&v214 + 1) = QMIServiceMsg::create();
      LODWORD(v215) = 25000;
      v216 = 0;
      v217.__r_.__value_.__r.__words[0] = 0;
      v129[0] = MEMORY[0x263EF8330];
      v129[1] = 1174405120;
      v129[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke;
      v129[3] = &unk_26D4C0130;
      v129[5] = a1;
      dispatch_group_t group = v7;
      if (v7)
      {
        dispatch_retain(v7);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      v129[4] = v134;
      int v131 = v49;
      *(void *)&long long aBlock = MEMORY[0x263EF8330];
      *((void *)&aBlock + 1) = 0x40000000;
      *(void *)&long long v153 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_8;
      *((void *)&v153 + 1) = &unk_26460A4F8;
      *(void *)&long long v154 = v129;
      char v50 = _Block_copy(&aBlock);
      v217.__r_.__value_.__r.__words[0] = (std::string::size_type)v50;
      if (*((void *)&v214 + 1))
      {
        qmi::Client::send();
        char v50 = (void *)v217.__r_.__value_.__r.__words[0];
      }
      if (v50) {
        _Block_release(v50);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v210);
      ++v47;
      ++v49;
    }
    while (v47 != v48);
    goto LABEL_132;
  }
  uint64_t v169 = 0;
  long long v167 = 0u;
  long long v168 = 0u;
  long long v165 = 0u;
  long long v166 = 0u;
  long long v163 = 0u;
  long long v164 = 0u;
  long long v161 = 0u;
  long long v162 = 0u;
  long long v159 = 0u;
  long long v160 = 0u;
  long long v157 = 0u;
  long long v158 = 0u;
  long long v155 = 0u;
  long long v156 = 0u;
  long long v153 = 0u;
  long long v154 = 0u;
  long long aBlock = 0u;
  std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
  uint64_t v52 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v153, (uint64_t)"Nothing found to push for ", 26);
  long long v214 = 0uLL;
  v215 = 0;
  ctu::cf::assign();
  long long v210 = v214;
  *(void *)&long long v211 = v215;
  if (SHIBYTE(v215) >= 0) {
    uint64_t v53 = &v210;
  }
  else {
    uint64_t v53 = (long long *)v210;
  }
  if (SHIBYTE(v215) >= 0) {
    uint64_t v54 = HIBYTE(v215);
  }
  else {
    uint64_t v54 = *((void *)&v210 + 1);
  }
  uint64_t v55 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v52, (uint64_t)v53, v54);
  char v57 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v55, (uint64_t)": ", 2);
  int v58 = *(unsigned __int8 *)(v113 + 8);
  if (*(unsigned char *)(v113 + 8))
  {
    ctu::cf_to_xpc((uint64_t *)&v132, *(ctu **)v113, v56);
    xpc::object::to_string((uint64_t *)&v214, (xpc::object *)&v132);
  }
  else
  {
    std::string::basic_string[abi:ne180100]<0>(&v214, "empty");
  }
  if (SHIBYTE(v215) >= 0) {
    uint64_t v59 = &v214;
  }
  else {
    uint64_t v59 = (long long *)v214;
  }
  if (SHIBYTE(v215) >= 0) {
    uint64_t v60 = HIBYTE(v215);
  }
  else {
    uint64_t v60 = *((void *)&v214 + 1);
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v57, (uint64_t)v59, v60);
  if (SHIBYTE(v215) < 0)
  {
    operator delete((void *)v214);
    if (v58) {
      goto LABEL_124;
    }
  }
  else
  {
    if (!v58) {
      goto LABEL_125;
    }
LABEL_124:
    xpc_release(v132);
  }
LABEL_125:
  if (SBYTE7(v211) < 0) {
    operator delete((void *)v210);
  }
  uint64_t v61 = a1[11];
  if (v61) {
    (*(void (**)(uint64_t, long long *))(*(void *)v61 + 48))(v61, &aBlock);
  }
  *(void *)&long long aBlock = *v11;
  uint64_t v62 = v11[9];
  *(void *)((char *)&aBlock + *(void *)(aBlock - 24)) = v11[8];
  *(void *)&long long v153 = v62;
  *((void *)&v153 + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v158) < 0) {
    operator delete(*((void **)&v157 + 1));
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  MEMORY[0x223C9A8E0](&v160);
LABEL_132:
  *(void *)&long long aBlock = &v171;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  *(void *)&long long aBlock = &v207;
  std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
  v126 = 0;
  v127 = 0;
  uint64_t v128 = 0;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v125, (const void **)v113);
  AttachApnCommandDriver::getApnListForType_sync();
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v125);
  __int16 v64 = v126;
  __int16 v63 = v127;
  uint64_t v8 = &unk_222569000;
  if (v126 == v127)
  {
    uint64_t v169 = 0;
    long long v167 = 0u;
    long long v168 = 0u;
    long long v165 = 0u;
    long long v166 = 0u;
    long long v163 = 0u;
    long long v164 = 0u;
    long long v161 = 0u;
    long long v162 = 0u;
    long long v159 = 0u;
    long long v160 = 0u;
    long long v157 = 0u;
    long long v158 = 0u;
    long long v155 = 0u;
    long long v156 = 0u;
    long long v153 = 0u;
    long long v154 = 0u;
    long long aBlock = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
    v101 = (void *)MEMORY[0x263F8C2B8];
    v103 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v153, (uint64_t)"Nothing found for fallback APNs: ", 33);
    int v104 = *(unsigned __int8 *)(v113 + 8);
    if (*(unsigned char *)(v113 + 8))
    {
      ctu::cf_to_xpc((uint64_t *)&v210, *(ctu **)v113, v102);
      xpc::object::to_string((uint64_t *)&v214, (xpc::object *)&v210);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&v214, "empty");
    }
    if (SHIBYTE(v215) >= 0) {
      v106 = &v214;
    }
    else {
      v106 = (long long *)v214;
    }
    if (SHIBYTE(v215) >= 0) {
      uint64_t v107 = HIBYTE(v215);
    }
    else {
      uint64_t v107 = *((void *)&v214 + 1);
    }
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v103, (uint64_t)v106, v107);
    if (SHIBYTE(v215) < 0)
    {
      operator delete((void *)v214);
      if (!v104)
      {
LABEL_246:
        uint64_t v108 = a1[11];
        if (v108) {
          (*(void (**)(uint64_t, long long *))(*(void *)v108 + 48))(v108, &aBlock);
        }
        *(void *)&long long aBlock = *v101;
        uint64_t v109 = v101[9];
        *(void *)((char *)&aBlock + *(void *)(aBlock - 24)) = v101[8];
        *(void *)&long long v153 = v109;
        *((void *)&v153 + 1) = MEMORY[0x263F8C318] + 16;
        if (SHIBYTE(v158) < 0) {
          operator delete(*((void **)&v157 + 1));
        }
        std::streambuf::~streambuf();
        std::iostream::~basic_iostream();
        MEMORY[0x223C9A8E0](&v160);
        goto LABEL_251;
      }
    }
    else if (!v104)
    {
      goto LABEL_246;
    }
    xpc_release((xpc_object_t)v210);
    goto LABEL_246;
  }
  if (v7)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
    __int16 v64 = v126;
    __int16 v63 = v127;
  }
  v124[0] = MEMORY[0x263EF8330];
  v124[1] = 0x40000000;
  v124[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_5;
  v124[3] = &unk_26460A310;
  v124[4] = v134;
  if (v64 != v63)
  {
    __s.__r_.__value_.__r.__words[0] = 0;
    __s.__r_.__value_.__l.__size_ = (std::string::size_type)&__s;
    __s.__r_.__value_.__r.__words[2] = 0x2000000000;
    char v175 = 0;
    v172 = 0;
    v171 = 0;
    uint64_t v173 = 0;
    v121 = (char *)*MEMORY[0x263F03688];
    uint64_t v119 = *(void *)(MEMORY[0x263F8C2B8] + 64);
    uint64_t v120 = *MEMORY[0x263F8C2B8];
    uint64_t v118 = *(void *)(MEMORY[0x263F8C2B8] + 72);
    while (1)
    {
      v170 = 0;
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v170, v64);
      uint64_t v169 = 0;
      long long v167 = 0u;
      long long v168 = 0u;
      long long v165 = 0u;
      long long v166 = 0u;
      long long v163 = 0u;
      long long v164 = 0u;
      long long v161 = 0u;
      long long v162 = 0u;
      long long v159 = 0u;
      long long v160 = 0u;
      long long v157 = 0u;
      long long v158 = 0u;
      long long v155 = 0u;
      long long v156 = 0u;
      long long v153 = 0u;
      long long v154 = 0u;
      long long aBlock = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)&aBlock);
      long long v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v153, (uint64_t)"trying to push fallback APN ", 28);
      long long v67 = v170
          ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
          : 0;
      if (v67)
      {
        ctu::cf_to_xpc((uint64_t *)&v151, v170, v65);
        xpc::object::to_string((uint64_t *)&v214, (xpc::object *)&v151);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&v214, "empty");
      }
      uint64_t v68 = SHIBYTE(v215) >= 0 ? &v214 : (long long *)v214;
      uint64_t v69 = SHIBYTE(v215) >= 0 ? HIBYTE(v215) : *((void *)&v214 + 1);
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v68, v69);
      if ((SHIBYTE(v215) & 0x80000000) == 0) {
        break;
      }
      operator delete((void *)v214);
      if (v67) {
        goto LABEL_153;
      }
LABEL_154:
      uint64_t v70 = a1[11];
      if (v70) {
        (*(void (**)(uint64_t, long long *))(*(void *)v70 + 48))(v70, &aBlock);
      }
      v150[1] = 0;
      v150[0] = 0;
      ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v150, v170);
      long long __p = 0u;
      long long v220 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&__p);
      uint64_t v71 = qmi::MutableMessageBase::getTLV<wds::tlv::ProfileId>((uint64_t)&__p, 1);
      *(_DWORD *)uint64_t v71 = 1;
      v71[4] = -1;
      memset(v218, 0, sizeof(v218));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v213, "username");
      ctu::cf::map_adapter::getString();
      MEMORY[0x223C99AF0](&v213);
      if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218[0].__r_.__value_.__l.__data_);
      }
      std::string::size_type v72 = HIBYTE(v218[1].__r_.__value_.__r.__words[2]);
      if ((v218[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v72 = v218[1].__r_.__value_.__l.__size_;
      }
      if (v72)
      {
        *(void *)&long long v214 = MEMORY[0x263EF8330];
        *((void *)&v214 + 1) = 1174405120;
        v215 = (void (*)(long long *, char *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2;
        v216 = &__block_descriptor_tmp_78_6;
        if (SHIBYTE(v218[1].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v217, v218[1].__r_.__value_.__l.__data_, v218[1].__r_.__value_.__l.__size_);
        }
        else {
          std::string v217 = v218[1];
        }
        v73 = qmi::MutableMessageBase::getTLV<wds::tlv::UserName>((uint64_t)&__p, 155);
        v215(&v214, v73);
        if (SHIBYTE(v217.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v217.__r_.__value_.__l.__data_);
        }
      }
      memset(v218, 0, 24);
      memset(&v213, 0, sizeof(v213));
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v207, "password");
      ctu::cf::map_adapter::getString();
      MEMORY[0x223C99AF0](&v207);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      std::string::size_type v74 = HIBYTE(v218[0].__r_.__value_.__r.__words[2]);
      if ((v218[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v74 = v218[0].__r_.__value_.__l.__size_;
      }
      if (v74)
      {
        *(void *)&long long v210 = MEMORY[0x263EF8330];
        *((void *)&v210 + 1) = 1174405120;
        *(void *)&long long v211 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_79;
        *((void *)&v211 + 1) = &__block_descriptor_tmp_82_5;
        if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v212, v218[0].__r_.__value_.__l.__data_, v218[0].__r_.__value_.__l.__size_);
        }
        else {
          std::string v212 = v218[0];
        }
        dispatch_object_t v75 = qmi::MutableMessageBase::getTLV<wds::tlv::Password>((uint64_t)&__p, 156);
        ((void (*)(long long *, char *))v211)(&v210, v75);
        if (SHIBYTE(v212.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v212.__r_.__value_.__l.__data_);
        }
      }
      *(void *)&long long v146 = MEMORY[0x263EF8330];
      *((void *)&v146 + 1) = 0x40000000;
      *(void *)&long long v147 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_83;
      *((void *)&v147 + 1) = &__block_descriptor_tmp_84_1;
      v148[0] = v150;
      long long v76 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>((uint64_t)&__p, 161);
      ((void (*)(long long *, char *))v147)(&v146, v76);
      uint64_t v141 = MEMORY[0x263EF8330];
      uint64_t v142 = 0x40000000;
      v143 = (void (*)(uint64_t *, char *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_85;
      v144 = &__block_descriptor_tmp_87_0;
      v145[0] = v150;
      long long v77 = qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP2>((uint64_t)&__p, 162);
      v143(&v141, v77);
      memset(&v213, 0, sizeof(v213));
      v208 = 0;
      v207 = 0;
      uint64_t v209 = 0;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v221, "auth_type");
      ctu::cf::map_adapter::getString();
      MEMORY[0x223C99AF0](&v221);
      if (SHIBYTE(v209) < 0) {
        operator delete(v207);
      }
      std::string::size_type v78 = HIBYTE(v213.__r_.__value_.__r.__words[2]);
      if ((v213.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        std::string::size_type v78 = v213.__r_.__value_.__l.__size_;
      }
      if (v78)
      {
        uint64_t v202 = MEMORY[0x263EF8330];
        uint64_t v203 = 1174405120;
        uint64_t v204 = (uint64_t)___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3;
        uint64_t v205 = (uint64_t)&__block_descriptor_tmp_90_3;
        if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
          std::string::__init_copy_ctor_external(&v206, v213.__r_.__value_.__l.__data_, v213.__r_.__value_.__l.__size_);
        }
        else {
          std::string v206 = v213;
        }
        uint64_t v79 = qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>((uint64_t)&__p, 154);
        ((void (*)(uint64_t *, char *))v204)(&v202, v79);
        if (SHIBYTE(v206.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v206.__r_.__value_.__l.__data_);
        }
      }
      uint64_t v136 = MEMORY[0x263EF8330];
      uint64_t v137 = 0x40000000;
      v138 = (void (*)(uint64_t *, char *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_91;
      v139 = &__block_descriptor_tmp_94_1;
      v140[0] = v150;
      v80 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrNeeded>((uint64_t)&__p, 163);
      v138(&v136, v80);
      uint64_t v197 = MEMORY[0x263EF8330];
      uint64_t v198 = 0x40000000;
      v199 = (uint64_t (*)(uint64_t, char *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_95;
      v200 = &__block_descriptor_tmp_99_1;
      v201 = v150;
      v81 = qmi::MutableMessageBase::getTLV<wds::tlv::RatType>((uint64_t)&__p, 168);
      v199((uint64_t)&v197, v81);
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v207, "InactivityTimeout");
      int v82 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v150, v207);
      MEMORY[0x223C99AF0](&v207);
      if (v82 >= 1)
      {
        uint64_t v192 = MEMORY[0x263EF8330];
        uint64_t v193 = 0x40000000;
        v194 = (uint64_t (*)(uint64_t, char *))___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3_101;
        v195 = &__block_descriptor_tmp_103;
        int v196 = v82;
        v83 = qmi::MutableMessageBase::getTLV<wds::tlv::InactivityTimer>((uint64_t)&__p, 170);
        v194((uint64_t)&v192, v83);
      }
      LODWORD(v221) = -1;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v207, "APNClass");
      v84 = (int *)(*(uint64_t (**)(void *, __CFString *))v150[0])(v150, v207);
      v85 = v84;
      if (v84)
      {
        CFTypeID v86 = CFGetTypeID(v84);
        if (v86 == CFNumberGetTypeID()) {
          int v88 = ctu::cf::assign((ctu::cf *)&v221, v85, v87);
        }
        else {
          int v88 = 0;
        }
        CFRelease(v85);
      }
      else
      {
        int v88 = 0;
      }
      MEMORY[0x223C99AF0](&v207);
      if (v88 && (v221 & 0x80000000) == 0)
      {
        uint64_t v187 = MEMORY[0x263EF8330];
        uint64_t v188 = 0x40000000;
        v189 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_4;
        v190 = &__block_descriptor_tmp_104;
        int v191 = (int)v221;
        v89 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>((uint64_t)&__p, 49);
        v189((uint64_t)&v187, v89);
      }
      char v186 = 1;
      ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v207, v121);
      v90 = (BOOL *)(*(uint64_t (**)(void *, __CFString *))v150[0])(v150, v207);
      v91 = v90;
      if (v90)
      {
        CFTypeID v92 = CFGetTypeID(v90);
        if (v92 == CFBooleanGetTypeID()) {
          int v94 = ctu::cf::assign((ctu::cf *)&v186, v91, v93);
        }
        else {
          int v94 = 0;
        }
        CFRelease(v91);
        MEMORY[0x223C99AF0](&v207);
        if (v94)
        {
          uint64_t v181 = MEMORY[0x263EF8330];
          uint64_t v182 = 0x40000000;
          v183 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_5;
          v184 = &__block_descriptor_tmp_105;
          char v185 = v186;
          v95 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>((uint64_t)&__p, 62);
          v183((uint64_t)&v181, v95);
        }
      }
      else
      {
        MEMORY[0x223C99AF0](&v207);
      }
      uint64_t v176 = MEMORY[0x263EF8330];
      uint64_t v177 = 0x40000000;
      v178 = ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_6;
      v179 = &__block_descriptor_tmp_106_0;
      char v180 = v171 != v172;
      v96 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>((uint64_t)&__p, 240);
      v178((uint64_t)&v176, v96);
      std::vector<wds::ModifyProfileSettings3GPP2::Request>::push_back[abi:ne180100]((uint64_t *)&v171);
      if (SHIBYTE(v213.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v213.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v218[0].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218[0].__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v218[1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v218[1].__r_.__value_.__l.__data_);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&__p);
      MEMORY[0x223C99B30](v150);
      *(void *)&long long aBlock = v120;
      *(void *)((char *)&aBlock + *(void *)(v120 - 24)) = v119;
      *(void *)&long long v153 = v118;
      *((void *)&v153 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v158) < 0) {
        operator delete(*((void **)&v157 + 1));
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C9A8E0](&v160);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v170);
      if (++v64 == v63)
      {
        uint64_t v97 = (uint64_t)v171;
        v98 = v172;
        if (v171 == v172)
        {
          v105 = a1[5];
          if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(aBlock) = 0;
            _os_log_impl(&dword_22231A000, v105, OS_LOG_TYPE_DEFAULT, "#I Nothing to push for fallback APN", (uint8_t *)&aBlock, 2u);
          }
        }
        else
        {
          int v99 = 0;
          uint64_t v202 = 0;
          uint64_t v203 = (uint64_t)&v202;
          uint64_t v204 = 0x2000000000;
          uint64_t v205 = ((char *)v172 - (char *)v171) >> 5;
          do
          {
            long long v146 = 0u;
            long long v147 = 0u;
            qmi::MutableMessageBase::MutableMessageBase();
            *(void *)&long long v210 = a1 + 12;
            *((void *)&v210 + 1) = QMIServiceMsg::create();
            LODWORD(v211) = 25000;
            *((void *)&v211 + 1) = 0;
            v212.__r_.__value_.__r.__words[0] = 0;
            *(void *)&long long aBlock = MEMORY[0x263EF8330];
            *((void *)&aBlock + 1) = 1174405120;
            *(void *)&long long v153 = ___ZN30Mav16QMIAttachApnCommandDriver21pushFallbackApns_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEEN8dispatch13group_sessionEU13block_pointerFvbE_block_invoke;
            *((void *)&v153 + 1) = &unk_26D4C02C0;
            *((void *)&v155 + 1) = a1;
            *(void *)&long long v156 = v7;
            if (v7)
            {
              dispatch_retain(v7);
              if ((void)v156) {
                dispatch_group_enter((dispatch_group_t)v156);
              }
            }
            DWORD2(v156) = v99;
            *(void *)&long long v155 = &v202;
            *((void *)&v154 + 1) = &__s;
            *(void *)&long long v154 = v124;
            *(void *)&long long v214 = MEMORY[0x263EF8330];
            *((void *)&v214 + 1) = 0x40000000;
            v215 = (void (*)(long long *, char *))___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_8;
            v216 = &unk_26460A4F8;
            v217.__r_.__value_.__r.__words[0] = (std::string::size_type)&aBlock;
            v100 = _Block_copy(&v214);
            v212.__r_.__value_.__r.__words[0] = (std::string::size_type)v100;
            if (*((void *)&v210 + 1))
            {
              qmi::Client::send();
              v100 = (void *)v212.__r_.__value_.__r.__words[0];
            }
            if (v100) {
              _Block_release(v100);
            }
            if ((void)v156)
            {
              dispatch_group_leave((dispatch_group_t)v156);
              if ((void)v156) {
                dispatch_release((dispatch_object_t)v156);
              }
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v146);
            v97 += 32;
            ++v99;
          }
          while ((const void **)v97 != v98);
          _Block_object_dispose(&v202, 8);
        }
        *(void *)&long long v214 = &v171;
        std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&v214);
        _Block_object_dispose(&__s, 8);
        uint64_t v8 = (void *)&unk_222569000;
        goto LABEL_232;
      }
    }
    if (!v67) {
      goto LABEL_154;
    }
LABEL_153:
    xpc_release(v151);
    goto LABEL_154;
  }
LABEL_232:
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
LABEL_251:
  *(void *)&long long aBlock = &v126;
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
LABEL_252:
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, a1 + 1);
  long long v110 = aBlock;
  if (*((void *)&aBlock + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&aBlock + 1) + 16), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v110 + 1));
  }
  v111 = a1[3];
  block[0] = MEMORY[0x263EF8330];
  block[1] = v8[160];
  block[2] = ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_9;
  block[3] = &unk_26D4C0168;
  block[5] = a1;
  long long v223 = v110;
  if (*((void *)&v110 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v110 + 1) + 16), 1uLL, memory_order_relaxed);
  }
  block[4] = v134;
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v224, (uint64_t)v225);
  dispatch_group_notify(v7, v111, block);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v224);
  if (*((void *)&v223 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v223 + 1));
  }
  if (*((void *)&v110 + 1)) {
    std::__shared_weak_count::__release_weak(*((std::__shared_weak_count **)&v110 + 1));
  }
  if (v7)
  {
    dispatch_group_leave(v7);
    dispatch_release(v7);
  }
  _Block_object_dispose(v134, 8);
  return std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v225);
}

void sub_2223C36BC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    char v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109378;
      int v10 = v4;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v9, 0x12u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    int v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 56);
      int v9 = 67109120;
      int v10 = v8;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v9, 8u);
    }
  }
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_5(uint64_t result, int a2)
{
  if (a2) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 1;
  }
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver28performPushSettingsToBB_syncENSt3__18optionalIN3ctu2cf11CFSharedRefIK14__CFDictionaryEEEERKN22AttachApnCommandDriver19AttachApnPushConfigE_block_invoke_9(void *a1)
{
  v8[4] = *MEMORY[0x263EF8340];
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2)
  {
    uint64_t v3 = a1[5];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      char v5 = v4;
      if (a1[6])
      {
        uint64_t v6 = *(void *)(v3 + 88);
        if (v6)
        {
          int v7 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)(a1 + 8));
          (*(void (**)(uint64_t, BOOL, void, uint64_t, void *))(*(void *)v6 + 24))(v6, v7 != 0, 0, 1, v8);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223C3F80(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  uint64_t result = MEMORY[0x223C99AF0](&v6);
  int v5 = 2 * (v3 == 2);
  if (v3 == 3) {
    int v5 = 3;
  }
  *a2 = v5;
  return result;
}

uint64_t __copy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE(uint64_t a1, uint64_t a2)
{
  return ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)(a1 + 32), (const ctu::cf::dict_adapter *)(a2 + 32));
}

void __destroy_helper_block_e8_32c27_ZTSN3ctu2cf12dict_adapterE()
{
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_4(uint64_t a1, std::string *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x223C99AF0](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_2223C4104(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_31(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_34(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_39(uint64_t a1, char *a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v5 = *(void *)(a1 + 40);
  }
  if (v5 == strlen((const char *)*MEMORY[0x263F036A8]))
  {
    uint64_t v6 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v6, (const void *)*MEMORY[0x263F036A8], v5);
    if (!result)
    {
      char v9 = 1;
      goto LABEL_16;
    }
  }
  size_t result = strlen((const char *)*MEMORY[0x263F036A0]);
  if (v5 == result)
  {
    int v8 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v8, (const void *)*MEMORY[0x263F036A0], v5);
    if (!result)
    {
      char v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_44(uint64_t a1, unsigned char *a2)
{
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x223C99AF0](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_52(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_2_55(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_3_58(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](uint64_t *a1)
{
  unint64_t v4 = a1[2];
  uint64_t v2 = (uint64_t)(a1 + 2);
  unint64_t v3 = v4;
  unint64_t v5 = *(void *)(v2 - 8);
  if (v5 >= v4)
  {
    uint64_t v8 = (uint64_t)(v5 - *a1) >> 5;
    if ((unint64_t)(v8 + 1) >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v9 = v3 - *a1;
    uint64_t v10 = v9 >> 4;
    if (v9 >> 4 <= (unint64_t)(v8 + 1)) {
      uint64_t v10 = v8 + 1;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t v17 = v2;
    if (v11) {
      uint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v2, v11);
    }
    else {
      uint64_t v12 = 0;
    }
    uint64_t v13 = v12;
    uint64_t v14 = &v12[32 * v8];
    uint64_t v16 = &v12[32 * v11];
    qmi::MutableMessageBase::MutableMessageBase();
    uint64_t v15 = v14 + 32;
    std::vector<wds::ModifyProfileSettings3GPP2::Request>::__swap_out_circular_buffer(a1, &v13);
    uint64_t v7 = a1[1];
    uint64_t result = std::__split_buffer<wds::ModifyProfileSettings3GPP::Request>::~__split_buffer((uint64_t)&v13);
  }
  else
  {
    uint64_t result = qmi::MutableMessageBase::MutableMessageBase();
    uint64_t v7 = v5 + 32;
    a1[1] = v5 + 32;
  }
  a1[1] = v7;
  return result;
}

void sub_2223C4450(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN30Mav16QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEb_block_invoke_5(uint64_t result, int *a2)
{
  if (*(unsigned char *)(result + 32)) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  *a2 = v2;
  return result;
}

void ___ZN30Mav16QMIAttachApnCommandDriver21pushFallbackApns_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEEN8dispatch13group_sessionEU13block_pointerFvbE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 56);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    unint64_t v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 67109378;
      int v11 = v4;
      __int16 v12 = 2080;
      uint64_t v13 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending fallback APN failed with error %d (%s)", (uint8_t *)&v10, 0x12u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    uint64_t v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 72);
      int v10 = 67109120;
      int v11 = v8;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I Fallback APN success response received (request order %d)", (uint8_t *)&v10, 8u);
    }
  }
  if (!--*(void *)(*(void *)(*(void *)(a1 + 48) + 8) + 24))
  {
    uint64_t v9 = *(void *)(a1 + 32);
    if (v9) {
      (*(void (**)(uint64_t, void))(v9 + 16))(v9, *(unsigned __int8 *)(*(void *)(*(void *)(a1 + 40) + 8) + 24));
    }
  }
}

void __copy_helper_block_e8_64c31_ZTSKN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 64);
  *(void *)(a1 + 64) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    int v4 = *(NSObject **)(a1 + 64);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_64c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 64);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 64);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_79(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_83(uint64_t a1, std::string *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x223C99AF0](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_2223C47C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_85(uint64_t a1, int *a2)
{
  uint64_t v3 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  uint64_t result = MEMORY[0x223C99AF0](&v6);
  int v5 = v3 == 2;
  if (v3 == 3) {
    int v5 = 2;
  }
  *a2 = v5;
  return result;
}

size_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3(uint64_t a1, char *a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v5 = *(void *)(a1 + 40);
  }
  if (v5 == strlen((const char *)*MEMORY[0x263F036A8]))
  {
    uint64_t v6 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v6, (const void *)*MEMORY[0x263F036A8], v5);
    if (!result)
    {
      char v9 = 1;
      goto LABEL_16;
    }
  }
  size_t result = strlen((const char *)*MEMORY[0x263F036A0]);
  if (v5 == result)
  {
    int v8 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v8, (const void *)*MEMORY[0x263F036A0], v5);
    if (!result)
    {
      char v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_91(uint64_t a1, unsigned char *a2)
{
  uint64_t v3 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "PcscfAddressRequired");
  LOBYTE(v3) = ctu::cf::map_adapter::getBool(v3, v5);
  uint64_t result = MEMORY[0x223C99AF0](&v5);
  *a2 = (_BYTE)v3;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_2_95(uint64_t a1, int *a2)
{
  int v4 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, "hrpd");
  int Bool = ctu::cf::map_adapter::getBool(v4, v9);
  MEMORY[0x223C99AF0](&v9);
  uint64_t v6 = *(ctu::cf::map_adapter **)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v9, "ehrpd");
  LODWORD(v6) = ctu::cf::map_adapter::getBool(v6, v9);
  uint64_t result = MEMORY[0x223C99AF0](&v9);
  if (v6) {
    int v8 = 3;
  }
  else {
    int v8 = 1;
  }
  if (!Bool) {
    int v8 = 2;
  }
  *a2 = v8;
  return result;
}

void sub_2223C4A6C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C99AF0](va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_3_101(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_5(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_141sCreateModifyProfileSettings3GPP2RequestsERKN3ctu2cf12dict_adapterERNSt3__16vectorIN3wds26ModifyProfileSettings3GPP27RequestENS5_9allocatorIS9_EEEE_block_invoke_6(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav16QMIAttachApnCommandDriver *,std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver *)#1},std::allocator<Mav16QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav16QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav16QMIAttachApnCommandDriver>(Mav16QMIAttachApnCommandDriver*)::{lambda(Mav16QMIAttachApnCommandDriver*)#1}::operator() const(Mav16QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::AttachProfileAction>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::AttachProfileAction>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AttachProfileAction>::clone()
{
}

uint64_t getQmiDownLinkAudioPath(int a1)
{
  if (a1 == 0x4000000) {
    int v1 = 10;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 0x2000000) {
    int v2 = 9;
  }
  else {
    int v2 = v1;
  }
  if (a1 == 0x1000000) {
    int v3 = 8;
  }
  else {
    int v3 = v2;
  }
  if (a1 == 0x800000) {
    int v4 = 7;
  }
  else {
    int v4 = 0;
  }
  if (a1 == 0x2000) {
    int v5 = 6;
  }
  else {
    int v5 = v4;
  }
  if (a1 <= 0xFFFFFF) {
    unsigned int v6 = v5;
  }
  else {
    unsigned int v6 = v3;
  }
  if (a1 == 32) {
    int v7 = 5;
  }
  else {
    int v7 = 0;
  }
  if (a1 == 16) {
    int v8 = 4;
  }
  else {
    int v8 = v7;
  }
  if (a1 == 8) {
    unsigned int v9 = 3;
  }
  else {
    unsigned int v9 = v8;
  }
  if (a1 == 4) {
    int v10 = 2;
  }
  else {
    int v10 = 0;
  }
  if (a1 == 2) {
    int v11 = 1;
  }
  else {
    int v11 = v10;
  }
  if (a1 <= 7) {
    unsigned int v9 = v11;
  }
  if (a1 < 0x2000) {
    return v9;
  }
  else {
    return v6;
  }
}

uint64_t getQmiUplinkAudioPath(int a1)
{
  if (a1 == 0x200000) {
    int v1 = 8;
  }
  else {
    int v1 = 0;
  }
  if (a1 == 0x100000) {
    unsigned int v2 = 7;
  }
  else {
    unsigned int v2 = v1;
  }
  if (a1 == 0x80000) {
    int v3 = 6;
  }
  else {
    int v3 = 0;
  }
  if (a1 == 128) {
    int v4 = 5;
  }
  else {
    int v4 = v3;
  }
  if (a1 < 0x100000) {
    unsigned int v2 = v4;
  }
  if (a1 == 32) {
    int v5 = 4;
  }
  else {
    int v5 = 0;
  }
  if (a1 == 8) {
    unsigned int v6 = 3;
  }
  else {
    unsigned int v6 = v5;
  }
  if (a1 == 4) {
    int v7 = 2;
  }
  else {
    int v7 = 0;
  }
  if (a1 == 2) {
    int v8 = 1;
  }
  else {
    int v8 = v7;
  }
  if (a1 <= 7) {
    unsigned int v6 = v8;
  }
  if (a1 <= 127) {
    return v6;
  }
  else {
    return v2;
  }
}

void QMIEmbmsCommandDriver::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2223C5020(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0x10E1C40C2CCF1AALL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIEmbmsCommandDriver::QMIEmbmsCommandDriver(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  *(void *)a1 = MEMORY[0x263F03880] + 16;
  unsigned int v6 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v13, (const char *)*MEMORY[0x263F03770], "embms.qmi");
  *unsigned int v6 = 0;
  v6[1] = 0;
  int v7 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v13);
  v11[0] = &unk_26D4C05F8;
  v11[3] = v11;
  int v8 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)v11);
  *(void *)(a1 + 48) = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 48)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v12);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v11);
  *(void *)a1 = &unk_26D4C0458;
  *(void *)(a1 + 56) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 64) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 72), *(os_log_s **)(a1 + 40));
  *(unsigned char *)(a1 + 88) = 0;
  *(_DWORD *)(a1 + 92) = 4;
  *(void *)(a1 + 96) = 0;
  *(void *)(a1 + 104) = 0;
  return a1;
}

void sub_2223C52D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  uint64_t v16 = va_arg(va2, void);
  uint64_t v17 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v5, 0x10A1C40FF1576FELL);
  uint64_t v7 = *((void *)v2 + 6);
  *((void *)v2 + 6) = 0;
  if (v7) {
    (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  MEMORY[0x223C99A30](v4);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v3);
  EmbmsCommandDriver::~EmbmsCommandDriver(v2);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::~QMIEmbmsCommandDriver(QMIEmbmsCommandDriver *this)
{
  *(void *)this = &unk_26D4C0458;
  unsigned int v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = *((void *)this + 6);
  *((void *)this + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  MEMORY[0x223C99A30]((char *)this + 40);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 1);

  EmbmsCommandDriver::~EmbmsCommandDriver(this);
}

{
  uint64_t vars8;

  QMIEmbmsCommandDriver::~QMIEmbmsCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

uint64_t QMIEmbmsCommandDriver::start(QMIEmbmsCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMIEmbmsCommandDriver::shutdown(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutdown", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

uint64_t QMIEmbmsCommandDriver::bootstrap(void *a1, uint64_t a2, xpc_endpoint_t *a3, uint64_t *a4)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  unsigned int v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (std::__shared_weak_count *)a1[13];
  a1[12] = v8;
  a1[13] = v7;
  if (v9) {
    std::__shared_weak_count::__release_weak(v9);
  }
  subscriber::makeSimSlotRange();
  uint64_t v10 = v29;
  if (v29 != v30)
  {
    while ((v31(*v10) & 1) == 0)
    {
      if (++v10 == v30)
      {
        uint64_t v10 = v30;
        break;
      }
    }
    while (v10 != v30)
    {
      unsigned int v11 = *v10 - 1;
      if (v11 > 2) {
        uint64_t v12 = 0;
      }
      else {
        uint64_t v12 = off_26460A608[v11];
      }
      xpc_object_t v13 = xpc_null_create();
      if (MEMORY[0x223C9AD60](*a3) == MEMORY[0x263EF8718])
      {
        uint64_t v14 = xpc_connection_create_from_endpoint(*a3);
        if (!v14) {
          uint64_t v14 = xpc_null_create();
        }
        xpc_object_t v15 = xpc_null_create();
        xpc_release(v13);
        xpc_release(v15);
      }
      else
      {
        uint64_t v14 = v13;
      }
      uint64_t v16 = (std::__shared_weak_count *)a1[2];
      if (!v16 || (uint64_t v17 = std::__shared_weak_count::lock(v16)) == 0) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v18 = v17;
      atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      *(_OWORD *)int buf = 0u;
      long long v40 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v36, v12);
      uint64_t v19 = a1[3];
      std::string::size_type v28 = v19;
      if (v19) {
        dispatch_retain(v19);
      }
      std::string::basic_string[abi:ne180100]<0>(__p, "registration");
      uint64_t v20 = std::__shared_weak_count::lock(v18);
      if (v20)
      {
        BOOL v21 = v20;
        atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v27 = v20;
        std::__shared_weak_count::__release_weak(v18);
        std::__shared_weak_count::__release_shared[abi:ne180100](v21);
      }
      else
      {
        char v27 = 0;
        std::__shared_weak_count::__release_weak(v18);
      }
      xpc_object_t object = v14;
      xpc_object_t v22 = xpc_null_create();
      qmi::Client::createWithQueue();
      xpc_release(object);
      if (v27) {
        std::__shared_weak_count::__release_weak(v27);
      }
      if (v34 < 0) {
        operator delete(__p[0]);
      }
      if (v28) {
        dispatch_release(v28);
      }
      if (SBYTE7(v38) < 0) {
        operator delete(v36);
      }
      CFNumberRef v36 = 0;
      int v37 = 0;
      long long v38 = v40;
      long long v40 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v36);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)buf);
      xpc_release(v22);
      int v23 = v10 + 1;
      uint64_t v10 = v30;
      if (v23 != v30)
      {
        uint64_t v10 = v23;
        while ((v31(*v10) & 1) == 0)
        {
          if (++v10 == v30)
          {
            uint64_t v10 = v30;
            break;
          }
        }
      }
    }
  }
  *(void *)int buf = &unk_26D4C06D8;
  *(void *)&uint8_t buf[8] = a1;
  *((void *)&v40 + 1) = buf;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](buf);
  CFNumberRef v36 = &unk_26D4C0758;
  int v37 = a1;
  *((void *)&v38 + 1) = &v36;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v36);
  __p[0] = &unk_26D4C07D8;
  __p[1] = a1;
  CFTypeID v35 = __p;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](__p);
  uint64_t v29 = &unk_26D4C0858;
  std::string::size_type v30 = a1;
  uint64_t v32 = (void **)&v29;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v29);
  *(void *)int buf = &unk_26D4C08D8;
  *(void *)&uint8_t buf[8] = a1;
  *((void *)&v40 + 1) = buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](buf);
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 9));
  *(void *)int buf = &unk_26D4C0958;
  *(void *)&uint8_t buf[8] = a1;
  *((void *)&v40 + 1) = buf;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](buf);
  return qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 9));
}

void sub_2223C5AC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object, char a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100]((void *)(v33 - 128));
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(uint64_t a1, int a2, int a3)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&void buf[4] = a3;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Sending NAS Indication Register %d", buf, 8u);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v10 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  unsigned int v6 = (const void **)__p[1];
  if (__p[1] != (void *)v10)
  {
    while (*((unsigned char *)*v6 + 8) != 31)
    {
      if (++v6 == (const void **)v10) {
        goto LABEL_10;
      }
    }
  }
  if (v6 != (const void **)v10)
  {
    if (v7)
    {
      v7[9] = a3;
      *qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>((uint64_t)__p, 24) = 1;
      qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v8, a2);
    }
    __cxa_bad_cast();
  }
LABEL_10:
  operator new();
}

void sub_2223C5F94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a26);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  uint64_t v28 = a10;
  a10 = 0;
  if (v28) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v28);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::updateEMBMSStatus_sync(uint64_t a1, int a2, unsigned int a3)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  unsigned __int8 v5 = atomic_load((unsigned __int8 *)(a1 + 88));
  if ((v5 & 1) == a2)
  {
    int v8 = (unsigned int *)(a1 + 92);
    unsigned int v10 = atomic_load((unsigned int *)(a1 + 92));
    if (v10 == a3) {
      return;
    }
  }
  else
  {
    unsigned __int8 v6 = a2;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      atomic_load((unsigned __int8 *)(a1 + 88));
      int v20 = 136315394;
      uint64_t v21 = asStringBool();
      __int16 v22 = 2080;
      uint64_t v23 = asStringBool();
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I (change states) EMBMSStatus %s ==>> %s", (uint8_t *)&v20, 0x16u);
    }
    atomic_store(v6, (unsigned __int8 *)(a1 + 88));
    int v8 = (unsigned int *)(a1 + 92);
    unsigned int v9 = atomic_load((unsigned int *)(a1 + 92));
    if (v9 == a3) {
      goto LABEL_10;
    }
  }
  unsigned int v11 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v12 = atomic_load(v8);
    xpc_object_t v13 = wds::asString(v12);
    uint64_t v14 = wds::asString(a3);
    int v20 = 136315394;
    uint64_t v21 = (uint64_t)v13;
    __int16 v22 = 2080;
    uint64_t v23 = (uint64_t)v14;
    _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I (change states) fLTEEMBMSCoverageStatus %s ==>> %s", (uint8_t *)&v20, 0x16u);
  }
  atomic_store(a3, v8);
LABEL_10:
  xpc_object_t v15 = *(std::__shared_weak_count **)(a1 + 104);
  if (v15)
  {
    uint64_t v16 = std::__shared_weak_count::lock(v15);
    if (v16)
    {
      uint64_t v17 = v16;
      uint64_t v18 = *(void *)(a1 + 96);
      if (v18)
      {
        unsigned __int8 v19 = atomic_load((unsigned __int8 *)(a1 + 88));
        (*(void (**)(uint64_t, void))(*(void *)v18 + 40))(v18, v19 & 1);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
}

void sub_2223C61CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::getEMBMSSigInfo(uint64_t a1, int a2, int a3, uint64_t a4)
{
  void v9[4] = *MEMORY[0x263EF8340];
  uint64_t v6 = a1;
  int v7 = a2;
  int v8 = a3;
  std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::__value_func[abi:ne180100]((uint64_t)v9, a4);
  unsigned __int8 v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_2223C6328(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void QMIEmbmsCommandDriver::setEMBMSActive(QMIEmbmsCommandDriver *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t QMIEmbmsCommandDriver::getEMBMSStatus(QMIEmbmsCommandDriver *this)
{
  unsigned __int8 v1 = atomic_load((unsigned __int8 *)this + 88);
  return v1 & 1;
}

void QMIEmbmsCommandDriver::getEMBMSSAIListInfo(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      int v7 = v6;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v6);
    }
    else
    {
      int v7 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    int v7 = 0;
  }
  unsigned __int8 v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_2223C6634(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  _Unwind_Resume(a1);
}

void QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v5, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_2223C6770(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void *std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *std::__function::__value_func<void ()(BOOL,embms::SAIListInfo const&)>::~__value_func[abi:ne180100](void *a1)
{
  unsigned int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::shared_ptr<QMIEmbmsCommandDriver>::shared_ptr[abi:ne180100]<QMIEmbmsCommandDriver,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223C695C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1}::operator() const(QMIEmbmsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223C6984(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIEmbmsCommandDriver *,std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver *)#1},std::allocator<QMIEmbmsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIEmbmsCommandDriver> ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::make_shared_ptr<QMIEmbmsCommandDriver>(QMIEmbmsCommandDriver*)::{lambda(QMIEmbmsCommandDriver*)#1}::operator() const(QMIEmbmsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::~__func()
{
}

void *std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C05F8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C05F8;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::operator()(uint64_t a1, unsigned int *a2)
{
  return (*(uint64_t (**)(void))(a1 + 8))(*a2);
}

uint64_t std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

void *std::__function::__func<char const* (*)(subscriber::SimSlot),std::allocator<char const* (*)(subscriber::SimSlot)>,char const* const ()(subscriber::SimSlot)>::target_type()
{
}

void SimInstanceLoggable<QMIEmbmsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMIEmbmsCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C06D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C06D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
  int v2 = *a2;
  memset(v4, 0, sizeof(v4));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v4);
  *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>((uint64_t)v4, 1) = v2 == 2;
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(&v3, v2);
}

void sub_2223C6D90(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  if (a21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a21);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  uint64_t v23 = a10;
  a10 = 0;
  if (v23) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C0758;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C0758;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1)
{
  unsigned __int8 v1 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I client stopped", v2, 2u);
  }
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C07D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C07D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_2>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C0858;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C0858;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, int *a2)
{
}

void sub_2223C743C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a24);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  uint64_t v26 = a10;
  a10 = 0;
  if (v26) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v26);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3,std::allocator<QMIEmbmsCommandDriver::registerEvents_sync(void)::$_3>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C08D8;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C08D8;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::operator()(uint64_t a1, int a2, QMIServiceMsg *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v14, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
    if (__p)
    {
      uint64_t v17 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v14);
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  uint64_t v8 = TlvValue;
  if (TlvValue)
  {
    int v9 = v7;
    uint64_t v15 = TlvValue;
    BOOL v10 = tlv::parseV<nas::tlv::EMBMSStatus>((unint64_t *)&v15, v7);
    if (v15)
    {
      BOOL v11 = v10;
      unsigned int v12 = *(NSObject **)(v5 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p) = 67109120;
        HIDWORD(__p) = v11;
        _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSStatus Ind %d", (uint8_t *)&__p, 8u);
      }
      unsigned int v13 = atomic_load((unsigned int *)(v5 + 92));
      QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v5, v11, v13);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v14[0], 1, v8, v9);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_2223C7778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_0 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = &unk_26D4C0958;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C0958;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::operator()(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  cast_message_type<nas::SysInfo::Indication const&>::cast(a3, (qmi::MessageBase *)v14);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v14);
  uint64_t v7 = TlvValue;
  if (TlvValue)
  {
    int v8 = v6;
    uint64_t v15 = TlvValue;
    unsigned int v9 = tlv::parseV<nas::tlv::LTEEMBMSCoverageInfo>((unint64_t *)&v15, v6);
    if (v15)
    {
      unsigned int v10 = v9;
      BOOL v11 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        unsigned int v12 = wds::asString(v10);
        *(_DWORD *)int buf = 136315138;
        uint64_t v17 = v12;
        _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I Received SysInfo LTEEMBMSCoverageInfo is %s", buf, 0xCu);
      }
      unsigned __int8 v13 = atomic_load((unsigned __int8 *)(v4 + 88));
      QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v13 & 1, v10);
    }
    else
    {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v14[0], 71, v7, v8);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v14);
}

void sub_2223C79CC(_Unwind_Exception *exception_object)
{
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1>(unsigned short,QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMIEmbmsCommandDriver::registerIndications_sync(void)::$_1 &&,QMIServiceMsg const)>::target_type()
{
}

uint64_t qmi::Indication<(unsigned short)78,nas::SysInfo::IndicationTLVList>::Indication(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223C7A64(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)v2;
  if (!*(_DWORD *)(a2 + 4))
  {
    int v8 = *(_DWORD *)(v2 + 8);
    QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(v3, v8, 1);
  }
  unsigned int v5 = *(_DWORD *)(v2 + 8);
  if (v5 - 1 >= 3) {
    uint64_t v6 = 0;
  }
  else {
    uint64_t v6 = v5;
  }
  uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    uint64_t v9 = qmi::asString();
    int v10 = *(_DWORD *)(a2 + 4);
    int v11 = 136315394;
    uint64_t v12 = v9;
    __int16 v13 = 1024;
    int v14 = v10;
    _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v11, 0x12u);
  }
}

uint64_t __copy_helper_block_e8_32c104_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c104_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0A08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0A08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223C7CB0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSIndRegStatus>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncENS_16SubscriptionTypeEbE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v5 = *((_DWORD *)v2 + 2);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a2 + 4);
      v10[0] = 67109378;
      v10[1] = v8;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "NAS IndicationRegister error: 0x%x (%s)", (uint8_t *)v10, 0x12u);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Success response to NAS IndicationRegister received", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncEN3qmi16SubscriptionTypeEbE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c114_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver30sendIndicationRegisterReq_syncEN3qmi16SubscriptionTypeEbE3__0EE(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0,std::allocator<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0AD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0,std::allocator<QMIEmbmsCommandDriver::sendIndicationRegisterReq_sync(qmi::SubscriptionType,BOOL)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0AD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223C7FD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)v3;
  if (*((_DWORD *)this + 1))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 8);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v16 = *((_DWORD *)this + 1);
      *(_DWORD *)int buf = 67109378;
      BOOL v19 = v16;
      __int16 v20 = 2080;
      uint64_t v21 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error in response to EMBMSStatus with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      uint64_t v10 = TlvValue;
      int v11 = v9;
      uint64_t v17 = TlvValue;
      BOOL v12 = tlv::parseV<nas::tlv::EMBMSStatus>((unint64_t *)&v17, v9);
      if (v17)
      {
        BOOL v13 = v12;
        int v14 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 67109120;
          BOOL v19 = v13;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSStatus is %d", buf, 8u);
        }
        unsigned int v15 = atomic_load((unsigned int *)(v4 + 92));
        QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v13, v15);
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v10, v11);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  unsigned __int8 v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0B58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0B58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223C831C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::GetSysInfo::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223C83D0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncENS_16SubscriptionTypeEE3__1EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  *(void *)&v20[5] = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = *(void *)v3;
  if (*((_DWORD *)this + 1))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 8);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v17 = *((_DWORD *)this + 1);
      *(_DWORD *)int buf = 67109378;
      v20[0] = v17;
      LOWORD(v20[1]) = 2080;
      *(void *)((char *)&v20[1] + 2) = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error in response to GetSysInfo with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      uint64_t v10 = TlvValue;
      int v11 = v9;
      uint64_t v18 = TlvValue;
      unsigned int v12 = tlv::parseV<nas::tlv::LTEEMBMSCoverageInfo>((unint64_t *)&v18, v9);
      if (v18)
      {
        unsigned int v13 = v12;
        int v14 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          unsigned int v15 = wds::asString(v13);
          *(_DWORD *)int buf = 136315138;
          *(void *)__int16 v20 = v15;
          _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I Received LTEEMBMSCoverageInfo is %s", buf, 0xCu);
        }
        unsigned __int8 v16 = atomic_load((unsigned __int8 *)(v4 + 88));
        QMIEmbmsCommandDriver::updateEMBMSStatus_sync(v4, v16 & 1, v13);
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 70, v10, v11);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__1EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c112_ZTSNSt3__110shared_ptrIZN21QMIEmbmsCommandDriver29requestInitialEMBMSState_syncEN3qmi16SubscriptionTypeEE3__1EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0BD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1,std::allocator<QMIEmbmsCommandDriver::requestInitialEMBMSState_sync(qmi::SubscriptionType)::$_1>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0BD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas10GetSysInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223C8730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

{
  void *v3;
  uint64_t v4;

  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  std::__shared_weak_count *v3 = 0;
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v21 = a1;
  uint64_t v22 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *(_DWORD *)(v1 + 8);
    uint64_t v5 = *(unsigned int *)(v1 + 12);
    *(_DWORD *)int buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v4;
    *(_WORD *)&uint8_t buf[8] = 2048;
    *(void *)&buf[10] = v5;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Requesting sig embms info for serviceType=%d, earfcn=%lu", buf, 0x12u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
  uint64_t v7 = ServiceMap;
  uint64_t v8 = *(void *)(MEMORY[0x263F03578] + 8);
  if (v8 < 0)
  {
    int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int buf = v8;
  unsigned int v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, (unint64_t *)buf);
  if (v12)
  {
    uint64_t v14 = v12[3];
    unsigned int v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      char v15 = 0;
      if (!v14) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  unsigned int v13 = 0;
  char v15 = 1;
  if (!v14)
  {
LABEL_9:
    int v16 = 0;
    BOOL v17 = 1;
    if (v15) {
      goto LABEL_18;
    }
LABEL_17:
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    goto LABEL_18;
  }
LABEL_13:
  int v18 = (*(uint64_t (**)(uint64_t))(*(void *)v14 + 760))(v14);
  BOOL v17 = (v18 - 4) < 0xFFFFFFFD;
  if ((v18 - 4) >= 0xFFFFFFFD) {
    int v16 = v18;
  }
  else {
    int v16 = 0;
  }
  if ((v15 & 1) == 0) {
    goto LABEL_17;
  }
LABEL_18:
  if (!v17)
  {
    memset(v24, 0, sizeof(v24));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v24);
    qmi::ClientRouter::get();
    int v23 = v16;
    operator new();
  }
  BOOL v19 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I preferred SIM unkonwn yet", buf, 2u);
  }
  memset(buf, 0, 32);
  std::function<void ()(BOOL,embms::SigInfo const&)>::operator()(*(void *)(v1 + 40), 0);
  uint64_t v25 = &buf[8];
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&v22);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v21);
}

void sub_2223C8C9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a23) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a23);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::~__value_func[abi:ne180100](v24);
  uint64_t v27 = a12;
  a12 = 0;
  if (v27) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v23, v27);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::~__value_func[abi:ne180100]((void *)(v2 + 16));
    MEMORY[0x223C9A950](v2, 0x1060C40A1523CDALL);
  }
  return a1;
}

uint64_t std::function<void ()(BOOL,embms::SigInfo const&)>::operator()(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    uint64_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v6 = (void *)*((void *)v4 - 3);
        if (v6)
        {
          *((void *)v4 - 2) = v6;
          operator delete(v6);
        }
        v4 -= 32;
      }
      while (v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNSt3__18functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EEOS1_OT__block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v56 = *MEMORY[0x263EF8340];
  char v3 = *(uint64_t **)(a1 + 32);
  uint64_t v4 = *v3;
  if (*((_DWORD *)this + 1))
  {
    unsigned int v5 = *((_DWORD *)v3 + 2);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v4 + 48) + 16))(*(void *)(v4 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v43 = *((_DWORD *)this + 1);
      *(_DWORD *)int buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v43;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error in response to EMBMSSigExt with code = 0x%x (%s)", buf, 0x12u);
    }
    memset(buf, 0, sizeof(buf));
    std::function<void ()(BOOL,embms::SigInfo const&)>::operator()(v3[6], 0);
    long long v51 = &buf[8];
    std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  }
  else
  {
    uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(this);
    if (TlvValue)
    {
      uint64_t v10 = TlvValue;
      int v11 = v9;
      uint64_t v49 = 0;
      char v50 = TlvValue;
      uint64_t v47 = 0;
      uint64_t v48 = 0;
      tlv::parseV<nas::tlv::EMBMSSignalQualityAndTMGIInfoData>(&v50, v9, &v47);
      if (v50)
      {
        unsigned int v12 = *(NSObject **)(v4 + 40);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I Received EMBMSSigExt", buf, 2u);
        }
        long long v51 = (uint8_t *)vrev64_s32(*(int32x2_t *)((char *)v3 + 12));
        uint64_t v44 = v3;
        unint64_t v53 = 0;
        int64x2_t v52 = 0uLL;
        uint64_t v13 = v47;
        for (uint64_t i = v48; v13 != i; v13 += 40)
        {
          char v46 = *(unsigned char *)v13;
          uint64_t v15 = *(void *)(v13 + 16);
          uint64_t v14 = *(void *)(v13 + 24);
          if (v15 == v14)
          {
            int v16 = 0;
            uint64_t v22 = 0;
          }
          else
          {
            int v16 = 0;
            BOOL v17 = 0;
            unint64_t v18 = 0;
            do
            {
              uint64_t v19 = *(unsigned __int8 *)(v15 + 1);
              uint64_t v20 = *(unsigned __int8 *)(v15 + 2);
              unint64_t v21 = *(unsigned int *)(v15 + 3) | ((unint64_t)*(unsigned __int16 *)(v15 + 7) << 32);
              if ((unint64_t)v17 >= v18)
              {
                uint64_t v23 = (v17 - v16) >> 3;
                unint64_t v24 = v23 + 1;
                if ((unint64_t)(v23 + 1) >> 61) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if ((uint64_t)(v18 - (void)v16) >> 2 > v24) {
                  unint64_t v24 = (uint64_t)(v18 - (void)v16) >> 2;
                }
                if (v18 - (unint64_t)v16 >= 0x7FFFFFFFFFFFFFF8) {
                  unint64_t v25 = 0x1FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v25 = v24;
                }
                if (v25) {
                  unint64_t v25 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v25);
                }
                else {
                  uint64_t v26 = 0;
                }
                uint64_t v27 = (unint64_t *)(v25 + 8 * v23);
                *uint64_t v27 = (v19 << 48) | (v20 << 56) | v21 & 0xFFFFFFFFFFFFLL;
                uint64_t v22 = (uint64_t)(v27 + 1);
                while (v17 != v16)
                {
                  unint64_t v28 = *((void *)v17 - 1);
                  v17 -= 8;
                  *--uint64_t v27 = v28;
                }
                unint64_t v18 = v25 + 8 * v26;
                if (v16) {
                  operator delete(v16);
                }
                int v16 = (char *)v27;
              }
              else
              {
                *(void *)BOOL v17 = (v19 << 48) | (v20 << 56) | v21 & 0xFFFFFFFFFFFFLL;
                uint64_t v22 = (uint64_t)(v17 + 8);
              }
              v15 += 9;
              BOOL v17 = (char *)v22;
            }
            while (v15 != v14);
          }
          uint64_t v29 = (void *)v52.i64[1];
          if (v52.i64[1] >= v53)
          {
            uint64_t v31 = (v52.i64[1] - v52.i64[0]) >> 5;
            if ((unint64_t)(v31 + 1) >> 59) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            unint64_t v32 = (uint64_t)(v53 - v52.i64[0]) >> 4;
            if (v32 <= v31 + 1) {
              unint64_t v32 = v31 + 1;
            }
            if (v53 - v52.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v33 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v33 = v32;
            }
            uint64_t v55 = &v53;
            if (v33)
            {
              if (v33 >> 59) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              char v34 = (char *)operator new(32 * v33);
            }
            else
            {
              char v34 = 0;
            }
            CFTypeID v35 = &v34[32 * v31];
            *(void *)int buf = v34;
            *(void *)&uint8_t buf[8] = v35;
            *(void *)&uint8_t buf[16] = v35;
            *(void *)&unsigned char buf[24] = &v34[32 * v33];
            *CFTypeID v35 = v46;
            *((void *)v35 + 2) = 0;
            *((void *)v35 + 3) = 0;
            *((void *)v35 + 1) = 0;
            std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>((void *)v35 + 1, v16, v22, (v22 - (uint64_t)v16) >> 3);
            uint64_t v36 = *(void *)&buf[8];
            uint64_t v30 = *(void *)&buf[16] + 32;
            *(void *)&buf[16] += 32;
            int64x2_t v37 = v52;
            if (v52.i64[1] == v52.i64[0])
            {
              int64x2_t v41 = vdupq_n_s64(v52.u64[1]);
            }
            else
            {
              uint64_t v38 = 0;
              do
              {
                uint64_t v39 = v36 + v38;
                uint64_t v40 = v37.i64[1] + v38;
                *(unsigned char *)(v39 - 32) = *(unsigned char *)(v37.i64[1] + v38 - 32);
                *(void *)(v39 - 16) = 0;
                *(void *)(v39 - 8) = 0;
                *(void *)(v39 - 24) = 0;
                *(_OWORD *)(v39 - 24) = *(_OWORD *)(v37.i64[1] + v38 - 24);
                *(void *)(v39 - 8) = *(void *)(v37.i64[1] + v38 - 8);
                *(void *)(v40 - 24) = 0;
                *(void *)(v40 - 16) = 0;
                *(void *)(v40 - 8) = 0;
                v38 -= 32;
              }
              while (v37.i64[1] + v38 != v37.i64[0]);
              int64x2_t v41 = v52;
              uint64_t v30 = *(void *)&buf[16];
              v36 += v38;
            }
            v52.i64[0] = v36;
            v52.i64[1] = v30;
            *(int64x2_t *)&uint8_t buf[8] = v41;
            unint64_t v42 = v53;
            unint64_t v53 = *(void *)&buf[24];
            *(void *)&unsigned char buf[24] = v42;
            *(void *)int buf = v41.i64[0];
            std::__split_buffer<embms::AreaInfo>::~__split_buffer((uint64_t)buf);
          }
          else
          {
            *(unsigned char *)v52.i64[1] = v46;
            v29[2] = 0;
            v29[3] = 0;
            v29[1] = 0;
            std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>(v29 + 1, v16, v22, (v22 - (uint64_t)v16) >> 3);
            uint64_t v30 = (uint64_t)(v29 + 4);
          }
          v52.i64[1] = v30;
          if (v16) {
            operator delete(v16);
          }
        }
        std::function<void ()(BOOL,embms::SigInfo const&)>::operator()(v44[6], 1);
        *(void *)int buf = &v52;
        std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        *(void *)int buf = &v47;
        std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
      }
      else
      {
        *(void *)int buf = &v47;
        std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 17, v10, v11);
      }
    }
  }
}

void sub_2223C9384(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void **a18, uint64_t a19, uint64_t a20,uint64_t a21,void **a22)
{
  a22 = a10;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](&a22);
  a18 = (void **)&a14;
  std::vector<nas::tlv::EMBMSSignalQualityAndTMGIInfo>::__destroy_vector::operator()[abi:ne180100](&a18);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c173_ZTSNSt3__110shared_ptrIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNS_8functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c173_ZTSNSt3__110shared_ptrIZZNK21QMIEmbmsCommandDriver15getEMBMSSigInfoE16EMBMSServiceTypejNS_8functionIFvbRKN5embms7SigInfoEEEEENK3__0clEvEUlRKN3nas11EMBMSSigExt8ResponseEE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0C58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0C58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void *std::__shared_ptr_emplace<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::getEMBMSSigInfo(EMBMSServiceType,unsigned int,std::function<void ()(BOOL,embms::SigInfo const&)>)::$_0::operator() const(void)::{lambda(nas::EMBMSSigExt::Response const&)#1}>>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL,embms::SigInfo const&)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11EMBMSSigExt8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223C9578(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(unint64_t a1)
{
  if (a1 >> 61) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(8 * a1);
}

void *std::vector<embms::TMGIInfo>::__init_with_size[abi:ne180100]<embms::TMGIInfo*,embms::TMGIInfo*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(a4);
    uint64_t v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    _OWORD v4[2] = &result[v8];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2223C966C(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__split_buffer<embms::AreaInfo>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 32;
    uint64_t v4 = *(void **)(v2 - 24);
    if (v4)
    {
      *(void *)(v2 - 16) = v4;
      operator delete(v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 32;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>(QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0,dispatch_queue_s *::default_delete<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  unint64_t v25 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)v1 + 8);
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I setEMBMSActive %d", buf, 8u);
  }
  int v5 = *((unsigned __int8 *)v1 + 8);
  unsigned __int8 v6 = atomic_load((unsigned __int8 *)(v2 + 88));
  if (v5 == (v6 & 1)) {
    goto LABEL_30;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
  uint64_t v8 = ServiceMap;
  uint64_t v9 = *(void *)(MEMORY[0x263F03578] + 8);
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int buf = v9;
  uint64_t v13 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_10;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
  if (!v15)
  {
LABEL_10:
    int v17 = 0;
    BOOL v18 = 1;
    if (v16) {
      goto LABEL_19;
    }
    goto LABEL_18;
  }
LABEL_14:
  int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v15 + 760))(v15);
  BOOL v18 = (v19 - 4) < 0xFFFFFFFD;
  if ((v19 - 4) >= 0xFFFFFFFD) {
    int v17 = v19;
  }
  else {
    int v17 = 0;
  }
  if (v16) {
    goto LABEL_19;
  }
LABEL_18:
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
LABEL_19:
  if (!v18)
  {
    *(_OWORD *)std::string __p = 0u;
    long long v28 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    int v21 = *((unsigned __int8 *)v1 + 8);
    uint64_t v22 = (const void **)__p[1];
    if (__p[1] != (void *)v28)
    {
      while (*((unsigned char *)*v22 + 8) != 1)
      {
        if (++v22 == (const void **)v28) {
          goto LABEL_29;
        }
      }
    }
    if (v22 != (const void **)v28)
    {
      if (v23)
      {
        v23[9] = v21;
        qmi::ClientRouter::get();
        int v26 = v17;
        operator new();
      }
      __cxa_bad_cast();
    }
LABEL_29:
    operator new();
  }
  uint64_t v20 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I preferred SIM unkonwn yet", buf, 2u);
  }
LABEL_30:
  MEMORY[0x223C9A950](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v25);
}

void sub_2223C9C30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28)
{
  if (a28) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a28);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v30);
  uint64_t v32 = a12;
  a12 = 0;
  if (v32) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100](v29, v32);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a13);
  MEMORY[0x223C9A950](v28, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::EMBMSStatus>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(uint64_t **)(a1 + 32);
  uint64_t v3 = *v2;
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v5 = *((_DWORD *)v2 + 2);
    if (v5 - 1 >= 3) {
      uint64_t v6 = 0;
    }
    else {
      uint64_t v6 = v5;
    }
    uint64_t v7 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 48) + 16))(*(void *)(v3 + 48), v6);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      int v8 = *(_DWORD *)(a2 + 4);
      v10[0] = 67109378;
      v10[1] = v8;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v7, OS_LOG_TYPE_ERROR, "Error in response to ConfigEMBMS with code = 0x%x (%s)", (uint8_t *)v10, 0x12u);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v10[0]) = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I Success in response to ConfigEMBMS", (uint8_t *)v10, 2u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZZN21QMIEmbmsCommandDriver14setEMBMSActiveEbENK3__0clEvEUlRKN3nas11ConfigEMBMS8ResponseEE_EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0D28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1},std::allocator<QMIEmbmsCommandDriver::setEMBMSActive(BOOL)::$_0::operator() const(void)::{lambda(nas::ConfigEMBMS::Response const&)#1}>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C0D28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas11ConfigEMBMS8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223CA074(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>(QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v4 = a1;
  uint64_t v5 = v1;
  memset(v6, 0, sizeof(v6));
  LODWORD(v6[0]) = *(_DWORD *)v1;
  memset((char *)v6 + 8, 0, 50);
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v9 = 0u;
  uint64_t v2 = *(void *)(v1 + 32);
  char v11 = 0;
  if (!v2) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, char *, _OWORD *))(*(void *)v2 + 48))(v2, &v11, v6);
  if (__p[1])
  {
    *(void **)&long long v9 = __p[1];
    operator delete(__p[1]);
  }
  if (v7[0])
  {
    v7[1] = v7[0];
    operator delete(v7[0]);
  }
  if (*(void *)&v6[2])
  {
    *((void *)&v6[2] + 1) = *(void *)&v6[2];
    operator delete(*(void **)&v6[2]);
  }
  uint64_t v10 = (void **)v6 + 1;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100](&v10);
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_2223CA1A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p)
  {
    a23 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a19)
  {
    a20 = (uint64_t)a19;
    operator delete(a19);
  }
  if (a15)
  {
    a16 = (uint64_t)a15;
    operator delete(a15);
  }
  *(void *)(v24 - 32) = v23;
  std::vector<embms::AreaInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)(v24 - 32));
  std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::getEMBMSSAIListInfo(EMBMSSAIType,std::function<void ()(BOOL,embms::SAIListInfo const&)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    std::__function::__value_func<void ()(BOOL,embms::SAIListInfo const&)>::~__value_func[abi:ne180100]((void *)(v2 + 8));
    MEMORY[0x223C9A950](v2, 0x1020C400293E721);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIEmbmsCommandDriver>::execute_wrapped<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>(QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *a1;
  std::function<void ()(BOOL)>::operator()((uint64_t)v3, 0);
  std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v3);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v2);
}

void sub_2223CA310(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void **std::unique_ptr<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0,std::default_delete<QMIEmbmsCommandDriver::setEMBMSSAIInterestedInfo(embms::SAIInterestedInfo const&,std::function<void ()(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v2);
    MEMORY[0x223C9A950](v3, 0x1020C40A5B76CDFLL);
  }
  return a1;
}

void awd::QMIAwdCommandDriver::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2223CA424(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::init_sync(awd::QMIAwdCommandDriver *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIMav20AwdCommandDriver::create()
{
}

void sub_2223CA5FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::start(awd::QMIAwdCommandDriver *this)
{
  uint64_t v1 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIAwdCommandDriver::shutdown(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t awd::QMIAwdCommandDriver::checkIn_sync(uint64_t a1, awd::AppContext **a2)
{
  uint64_t result = awd::AppContext::getAppID(*a2);
  if (result)
  {
    return __TUAssertTrigger();
  }
  return result;
}

uint64_t awd::QMIAwdCommandDriver::checkOut_sync(uint64_t a1, awd::AppContext **a2)
{
  uint64_t result = awd::AppContext::getAppID(*a2);
  if (result)
  {
    return __TUAssertTrigger();
  }
  return result;
}

void awd::QMIAwdCommandDriver::sendEnableMetricSubmission(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a4) {
    _Block_copy(*a4);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v5 = *(void *)(a2 + 8);
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a4) {
    _Block_copy(*a4);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIAwdCommandDriver::sendAddConfiguration(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, void **a5)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  memset(__p, 0, 24);
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(__p, *(const void **)a4, *(void *)(a4 + 8), *(void *)(a4 + 8) - *(void *)a4);
  int v8 = *a5;
  if (*a5) {
    int v8 = _Block_copy(v8);
  }
  __p[3] = v8;
  __p[4] = a1;
  long long v9 = (std::__shared_weak_count *)a1[2];
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void sub_2223CAC58(void *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  __clang_call_terminate(a1);
}

void awd::QMIAwdCommandDriver::sendComponentConfiguration_sync(uint64_t a1, void *a2, void *a3, void **a4)
{
  uint64_t v5 = dispatch_group_create();
  uint64_t v6 = v5;
  if (v5)
  {
    dispatch_retain(v5);
    dispatch_group_enter(v6);
  }
  v33[0] = 0;
  v33[1] = v33;
  v33[2] = 0x2000000000;
  char v34 = 1;
  uint64_t v7 = a3[1] - *a3;
  if ((unint64_t)(v7 + 1499) >= 0x5DC)
  {
    LODWORD(v8) = 0;
    do
    {
      long long v31 = 0u;
      long long v32 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
      uint64_t v9 = *a3 + (1500 * v8);
      unint64_t v10 = *a3 + v7;
      if (v10 >= v9 + 1500) {
        unint64_t v10 = v9 + 1500;
      }
      v29[0] = MEMORY[0x263EF8330];
      v29[1] = 0x40000000;
      v29[2] = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke;
      v29[3] = &__block_descriptor_tmp_7;
      int v30 = v8;
      v29[4] = (v7 + 1499) / 0x5DCuLL;
      v29[5] = v9;
      v29[6] = v10;
      char v11 = (const void **)*((void *)&v31 + 1);
      if (*((void *)&v31 + 1) != (void)v32)
      {
        while (*((unsigned char *)*v11 + 8) != 64)
        {
          if (++v11 == (const void **)v32) {
            goto LABEL_14;
          }
        }
      }
      if (v11 == (const void **)v32) {
LABEL_14:
      }
        operator new();
      if (!v12) {
        __cxa_bad_cast();
      }
      ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke((uint64_t)v29, (uint64_t)v12 + 16);
      uint64_t v24 = a1 + 96;
      uint64_t v25 = QMIServiceMsg::create();
      int v26 = 25000;
      uint64_t v27 = 0;
      uint64_t v28 = 0;
      v22[0] = MEMORY[0x263EF8330];
      v22[1] = 1174405120;
      unint64_t v22[2] = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2;
      v22[3] = &unk_26D4C0EB0;
      dispatch_group_t group = v6;
      if (v6)
      {
        dispatch_retain(v6);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      v22[4] = v33;
      aBlock[0] = MEMORY[0x263EF8330];
      aBlock[1] = 0x40000000;
      aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      aBlock[3] = &unk_26460A9B8;
      aBlock[4] = v22;
      uint64_t v13 = _Block_copy(aBlock);
      uint64_t v28 = v13;
      if (v25)
      {
        qmi::Client::send();
        uint64_t v13 = v28;
      }
      if (v13) {
        _Block_release(v13);
      }
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
      unint64_t v8 = (v8 + 1);
    }
    while ((v7 + 1499) / 0x5DCuLL > v8);
  }
  block[0] = MEMORY[0x263EF8330];
  block[1] = 1174405120;
  block[2] = ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_5;
  block[3] = &unk_26D4C0EE8;
  block[4] = v33;
  block[5] = a1;
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  void block[6] = *a2;
  uint64_t v20 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = *a4;
  if (*a4) {
    uint64_t v15 = _Block_copy(v15);
  }
  int v21 = v15;
  dispatch_group_notify(v6, *(dispatch_queue_t *)(a1 + 24), block);
  if (v21) {
    _Block_release(v21);
  }
  if (v20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  }
  _Block_object_dispose(v33, 8);
  if (v6)
  {
    dispatch_group_leave(v6);
    dispatch_release(v6);
    dispatch_release(v6);
  }
}

void sub_2223CB1B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,dispatch_group_t group,char a32)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v33 - 208));
  _Block_object_dispose((const void *)(v33 - 176), 8);
  if (v32)
  {
    dispatch_group_leave(v32);
    dispatch_release(v32);
    dispatch_release(v32);
  }
  _Unwind_Resume(a1);
}

void *___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = 0;
  *(_DWORD *)(a2 + 8) = 1;
  uint64_t v2 = *(char **)(a1 + 40);
  *(unsigned char *)(a2 + 12) = *(void *)(a1 + 32);
  *(unsigned char *)(a2 + 13) = *(_DWORD *)(a1 + 56);
  return std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a2 + 16), v2, *(char **)(a1 + 48), *(void *)(a1 + 48) - (void)v2);
}

uint64_t ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_2(uint64_t result, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4)) {
    *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = 0;
  }
  return result;
}

void __copy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    int v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c30_ZTSN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZNK3awd19QMIAwdCommandDriver31sendComponentConfiguration_syncENSt3__110shared_ptrINS_10AppContextEEERKNS1_6vectorIhNS1_9allocatorIhEEEEN8dispatch5blockIU13block_pointerFvbEEE_block_invoke_5(void *a1)
{
  int v2 = *(unsigned __int8 *)(*(void *)(a1[4] + 8) + 24);
  uint64_t v3 = *(NSObject **)(a1[5] + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      goto LABEL_7;
    }
    __int16 v10 = 0;
    uint64_t v5 = "#I Configuration succeeded";
    uint64_t v6 = (uint8_t *)&v10;
  }
  else
  {
    if (!v4) {
      goto LABEL_7;
    }
    *(_WORD *)int buf = 0;
    uint64_t v5 = "#E Configuration failed";
    uint64_t v6 = buf;
  }
  _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
LABEL_7:
  uint64_t v7 = (void *)a1[8];
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  long long aBlock = v7;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CB3F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[8];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[8] = result;
  return result;
}

void __destroy_helper_block_e8_48c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE64c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  int v2 = *(const void **)(a1 + 64);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void awd::QMIAwdCommandDriver::sendClearConfiguration(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a3) {
    _Block_copy(*a3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIAwdCommandDriver::sendUpdateProperties(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a3) {
    _Block_copy(*a3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIMav20AwdCommandDriver::sendUpdateProperties(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a3) {
    _Block_copy(*a3);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIAwdCommandDriver::sendQueriableMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a6) {
    _Block_copy(*a6);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void awd::QMIMav20AwdCommandDriver::sendQueriableMetric(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, const void **a6)
{
  uint64_t v7 = *(void *)(a2 + 8);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a6) {
    _Block_copy(*a6);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t awd::QMIAwdCommandDriver::handleTriggerSubmissionInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK3awd19QMIAwdCommandDriver31handleTriggerSubmissionInd_syncERKNS_13SubmitTrigger10IndicationE_block_invoke;
  __int16 v10 = &__block_descriptor_tmp_9_0;
  uint64_t v11 = a1;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    return __TUAssertTrigger();
  }
  uint64_t v5 = TlvValue;
  int v6 = v4;
  uint64_t v13 = TlvValue;
  memset(v12, 0, sizeof(v12));
  tlv::parseV<awd::tlv::SubmitTrigger>((unint64_t *)&v13, v4, v12);
  if (v13) {
    return ((uint64_t (*)(void *, void *))v9)(v8, v12);
  }
  uint64_t result = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 121, v5, v6);
  if ((result & 1) == 0) {
    return __TUAssertTrigger();
  }
  return result;
}

void ___ZNK3awd19QMIAwdCommandDriver31handleTriggerSubmissionInd_syncERKNS_13SubmitTrigger10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v4 = *(void **)(v1 + 64);
  int v2 = (void *)(v1 + 64);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((unsigned char *)v5 + 32))
    {
      uint64_t v6 = v5[5];
      uint64_t v7 = (std::__shared_weak_count *)v5[6];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6) {
        awd::AppContext::submitTrigger();
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_2223CBC30(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t awd::QMIAwdCommandDriver::handlePIILocationUsedInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK3awd19QMIAwdCommandDriver29handlePIILocationUsedInd_syncERKNS_15PIILocationUsed10IndicationE_block_invoke;
  __int16 v10 = &__block_descriptor_tmp_14_2;
  uint64_t v11 = a1;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    return __TUAssertTrigger();
  }
  uint64_t v5 = TlvValue;
  int v6 = v4;
  uint64_t v14 = TlvValue;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  tlv::parseV<awd::tlv::PIILocationUsed>((unint64_t *)&v14, v4, (uint64_t)v12);
  if (v14) {
    return ((uint64_t (*)(void *, void *))v9)(v8, v12);
  }
  uint64_t result = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 122, v5, v6);
  if ((result & 1) == 0) {
    return __TUAssertTrigger();
  }
  return result;
}

void ___ZNK3awd19QMIAwdCommandDriver29handlePIILocationUsedInd_syncERKNS_15PIILocationUsed10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v4 = *(void **)(v1 + 64);
  int v2 = (void *)(v1 + 64);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((unsigned char *)v5 + 32))
    {
      uint64_t v6 = v5[5];
      uint64_t v7 = (std::__shared_weak_count *)v5[6];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6) {
        awd::AppContext::updateAppSettingsUsed();
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_2223CBDF0(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::handleMetricSubmissionInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK3awd19QMIAwdCommandDriver30handleMetricSubmissionInd_syncERKNS_16MetricSubmission10IndicationE_block_invoke;
  __int16 v10 = &__block_descriptor_tmp_17_3;
  uint64_t v11 = a1;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    goto LABEL_8;
  }
  uint64_t v5 = TlvValue;
  int v6 = v4;
  unint64_t v15 = TlvValue;
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  long long v12 = 0u;
  tlv::parseV<awd::tlv::MetricData>(&v15, v4, &v12);
  unint64_t v7 = v15;
  if (v15) {
    v9((uint64_t)v8, (uint64_t)&v12);
  }
  if (__p[1])
  {
    *(void **)&long long v14 = __p[1];
    operator delete(__p[1]);
  }
  if (!v7
    && (((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 119, v5, v6) & 1) == 0)
  {
LABEL_8:
    __TUAssertTrigger();
  }
}

void sub_2223CBF18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3awd19QMIAwdCommandDriver30handleMetricSubmissionInd_syncERKNS_16MetricSubmission10IndicationE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v5 = *(void **)(v2 + 64);
  uint64_t v3 = (void *)(v2 + 64);
  int v4 = v5;
  if (v5)
  {
    do
    {
      int v6 = v4;
      int v4 = (void *)*v4;
    }
    while (v4);
    if (v6 != v3 && !*((unsigned char *)v6 + 32))
    {
      uint64_t v8 = v6[5];
      unint64_t v7 = (std::__shared_weak_count *)v6[6];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v8)
      {
        __int16 v10 = 0;
        uint64_t v11 = 0;
        std::string __p = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, *(const void **)(a2 + 24), *(void *)(a2 + 32), *(void *)(a2 + 32) - *(void *)(a2 + 24));
        awd::AppContext::submitMetricPayload();
        if (__p)
        {
          __int16 v10 = __p;
          operator delete(__p);
        }
      }
      if (v7) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_2223CC008(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t awd::QMIAwdCommandDriver::handleMetricSubmissionEndInd_sync(uint64_t a1, qmi::MessageBase *this)
{
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK3awd19QMIAwdCommandDriver33handleMetricSubmissionEndInd_syncERKNS_19MetricSubmissionEnd10IndicationE_block_invoke;
  __int16 v10 = &__block_descriptor_tmp_20_0;
  uint64_t v11 = a1;
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (!TlvValue) {
    return __TUAssertTrigger();
  }
  uint64_t v5 = TlvValue;
  int v6 = v4;
  uint64_t v14 = TlvValue;
  v12[0] = 0;
  v12[1] = 0;
  int v13 = 0;
  tlv::parseV<awd::tlv::MetricDataEnd>((unint64_t *)&v14, v4, (uint64_t)v12);
  if (v14) {
    return ((uint64_t (*)(void *, void *))v9)(v8, v12);
  }
  uint64_t result = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 120, v5, v6);
  if ((result & 1) == 0) {
    return __TUAssertTrigger();
  }
  return result;
}

void ___ZNK3awd19QMIAwdCommandDriver33handleMetricSubmissionEndInd_syncERKNS_19MetricSubmissionEnd10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v4 = *(void **)(v1 + 64);
  uint64_t v2 = (void *)(v1 + 64);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((unsigned char *)v5 + 32))
    {
      uint64_t v6 = v5[5];
      unint64_t v7 = (std::__shared_weak_count *)v5[6];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6) {
        awd::AppContext::markMetricSubmissionComplete();
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_2223CC1C8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZNK3awd19QMIAwdCommandDriver34handleConfigurationSuccessInd_syncERKNS_20ConfigurationSuccess10IndicationE_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v4 = *(void **)(v1 + 64);
  uint64_t v2 = (void *)(v1 + 64);
  uint64_t v3 = v4;
  if (v4)
  {
    do
    {
      uint64_t v5 = v3;
      uint64_t v3 = (void *)*v3;
    }
    while (v3);
    if (v5 != v2 && !*((unsigned char *)v5 + 32))
    {
      uint64_t v6 = (awd::AppContext *)v5[5];
      unint64_t v7 = (std::__shared_weak_count *)v5[6];
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v6) {
        awd::AppContext::sendConfigurationResult(v6);
      }
      if (v7)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      }
    }
  }
}

void sub_2223CC270(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void awd::QMIAwdCommandDriver::~QMIAwdCommandDriver(awd::QMIAwdCommandDriver *this)
{
  *(void *)this = &unk_26D4C0D78;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 96));

  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4C0D78;
  qmi::Client::~Client((awd::QMIAwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void awd::QMIMav20AwdCommandDriver::~QMIMav20AwdCommandDriver(awd::QMIMav20AwdCommandDriver *this)
{
  *(void *)this = &unk_26D4C0D78;
  qmi::Client::~Client((awd::QMIMav20AwdCommandDriver *)((char *)this + 96));

  awd::AwdCommandDriver::~AwdCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4C0D78;
  qmi::Client::~Client((awd::QMIMav20AwdCommandDriver *)((char *)this + 96));
  awd::AwdCommandDriver::~AwdCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<awd::QMIAwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIAwdCommandDriver,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223CC4CC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223CC4F4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<awd::QMIAwdCommandDriver *,std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver *)#1},std::allocator<awd::QMIAwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<awd::QMIAwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIAwdCommandDriver>(awd::QMIAwdCommandDriver*)::{lambda(awd::QMIAwdCommandDriver*)#1}::operator() const(awd::QMIAwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

void std::shared_ptr<awd::QMIMav20AwdCommandDriver>::shared_ptr[abi:ne180100]<awd::QMIMav20AwdCommandDriver,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223CC69C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1}::operator() const(awd::QMIMav20AwdCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223CC6C4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<awd::QMIMav20AwdCommandDriver *,std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver *)#1},std::allocator<awd::QMIMav20AwdCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<awd::QMIMav20AwdCommandDriver> ctu::SharedSynchronizable<awd::AwdCommandDriver>::make_shared_ptr<awd::QMIMav20AwdCommandDriver>(awd::QMIMav20AwdCommandDriver*)::{lambda(awd::QMIMav20AwdCommandDriver*)#1}::operator() const(awd::QMIMav20AwdCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 96))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::start(void)::$_0>(awd::QMIAwdCommandDriver::start(void)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::start(void)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::start(void)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  qmi::Client::start((qmi::Client *)(**(void **)a1 + 96));
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_2223CC7F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>(awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  qmi::Client::stop((qmi::Client *)(**(void **)a1 + 96));
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_2223CC87C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>(awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0,dispatch_queue_s *::default_delete<awd::QMIAwdCommandDriver::init_sync(BOOL)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  long long v12 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  Name = (char *)awd::AwdCommandDriver::getName((awd::AwdCommandDriver *)v2);
  std::string::basic_string[abi:ne180100]<0>(v22, Name);
  int v4 = *(NSObject **)(v2 + 24);
  dispatch_object_t v30 = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  std::string::basic_string[abi:ne180100]<0>(v18, (char *)*MEMORY[0x263F03808]);
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v5 || (uint64_t v6 = *(void *)(v2 + 8), (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v8 = v7;
  uint64_t v28 = v6;
  uint64_t v29 = v7;
  atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v26, *(Registry **)(v2 + 80));
  qmi::Client::createWithQueueLocal();
  long long v9 = v33;
  long long v33 = 0uLL;
  __int16 v10 = *(std::__shared_weak_count **)(v2 + 120);
  *(_OWORD *)(v2 + 112) = v9;
  if (v10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  }
  qmi::Client::~Client((qmi::Client *)&v31);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  if (v30) {
    dispatch_release(v30);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
  v22[0] = (void *)MEMORY[0x263EF8330];
  v22[1] = (void *)0x40000000;
  uint64_t v23 = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke;
  uint64_t v24 = &__block_descriptor_tmp_39_0;
  uint64_t v25 = v2;
  qmi::Client::setHandler();
  v18[0] = (void *)MEMORY[0x263EF8330];
  v18[1] = (void *)0x40000000;
  int v19 = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_2;
  uint64_t v20 = &__block_descriptor_tmp_40_1;
  uint64_t v21 = v2;
  qmi::Client::setHandler();
  v17[10] = MEMORY[0x263EF8330];
  v17[11] = 0x40000000;
  v17[12] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_3;
  v17[13] = &__block_descriptor_tmp_41;
  v17[14] = v2;
  qmi::Client::setHandler();
  v17[5] = MEMORY[0x263EF8330];
  v17[6] = 0x40000000;
  v17[7] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_4;
  v17[8] = &__block_descriptor_tmp_42;
  v17[9] = v2;
  qmi::Client::setHandler();
  v17[0] = MEMORY[0x263EF8330];
  v17[1] = 0x40000000;
  _OWORD v17[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_5;
  v17[3] = &__block_descriptor_tmp_43_0;
  void v17[4] = v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  *(void *)&long long v33 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd16MetricSubmission10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v33 + 1) = &unk_26460A888;
  char v34 = v17;
  qmi::Client::setIndHandler();
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  v16[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_6;
  void v16[3] = &__block_descriptor_tmp_44;
  v16[4] = v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  *(void *)&long long v33 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd19MetricSubmissionEnd10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v33 + 1) = &unk_26460A8B0;
  char v34 = v16;
  qmi::Client::setIndHandler();
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_7;
  _OWORD v15[3] = &__block_descriptor_tmp_45;
  v15[4] = v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  *(void *)&long long v33 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd13SubmitTrigger10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v33 + 1) = &unk_26460A8D8;
  char v34 = v15;
  qmi::Client::setIndHandler();
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  _DWORD v14[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_8;
  void v14[3] = &__block_descriptor_tmp_46_0;
  v14[4] = v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  *(void *)&long long v33 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd15PIILocationUsed10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v33 + 1) = &unk_26460A900;
  char v34 = v14;
  qmi::Client::setIndHandler();
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  unint64_t v13[2] = ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_9;
  v13[3] = &__block_descriptor_tmp_47;
  v13[4] = v2;
  uint64_t v31 = MEMORY[0x263EF8330];
  uint64_t v32 = 0x40000000;
  *(void *)&long long v33 = ___ZNK3qmi6Client13setIndHandlerIRKN3awd20ConfigurationSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v33 + 1) = &unk_26460A928;
  char v34 = v13;
  qmi::Client::setIndHandler();
  if (*((unsigned char *)v1 + 8))
  {
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
    qmi::Client::setIndShouldWake((qmi::Client *)(v2 + 96));
  }
  MEMORY[0x223C9A950](v1, 0x1020C405F07FB98);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_2223CCE70(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  int v13 = *(std::__shared_weak_count **)(v11 - 136);
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v11 - 120);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  if (*(char *)(v11 - 201) < 0) {
    operator delete(*(void **)(v11 - 224));
  }
  unint64_t v15 = *(NSObject **)(v11 - 112);
  if (v15) {
    dispatch_release(v15);
  }
  if (*(char *)(v11 - 161) < 0) {
    operator delete(*(void **)(v11 - 184));
  }
  MEMORY[0x223C9A950](v9, 0x1020C405F07FB98);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke(uint64_t a1)
{
  return MEMORY[0x270EE99C8](*(void *)(a1 + 32), 0);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_2(uint64_t a1)
{
  return MEMORY[0x270EE99C8](*(void *)(a1 + 32), 1);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_3(uint64_t a1)
{
  return MEMORY[0x270EE99C8](*(void *)(a1 + 32), 2);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_4(uint64_t a1)
{
  return MEMORY[0x270EE99C8](*(void *)(a1 + 32), 3);
}

uint64_t ___ZZN3awd19QMIAwdCommandDriver9init_syncEbENK3__0clEv_block_invoke_9(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v3 = *(void *)(a1 + 32);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  uint64_t v9 = ___ZNK3awd19QMIAwdCommandDriver34handleConfigurationSuccessInd_syncERKNS_20ConfigurationSuccess10IndicationE_block_invoke;
  __int16 v10 = &__block_descriptor_tmp_24_2;
  uint64_t v11 = v3;
  uint64_t result = qmi::MessageBase::findTlvValue(this);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v13 = result;
    uint64_t v12 = tlv::parseV<awd::tlv::ConfigurationSuccess>((unint64_t *)&v13, v5);
    if (v13) {
      return ((uint64_t (*)(void *, uint64_t *))v9)(v8, &v12);
    }
    else {
      return ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 118, v6, v7);
    }
  }
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3awd20ConfigurationSuccess10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223CD0DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)(v1 + 32);
  long long v22 = 0u;
  long long v23 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
  v21.tv_sec = 0;
  *(void *)&v21.tv_usec = 0;
  gettimeofday(&v21, 0);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  v19[2] = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  void v19[3] = &__block_descriptor_tmp_55;
  char v20 = *(unsigned char *)(v1 + 16);
  v19[4] = 1000 * v21.tv_sec + v21.tv_usec / 0x3E8uLL;
  uint64_t v3 = (const void **)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1) != (void)v23)
  {
    while (*((unsigned char *)*v3 + 8) != 104)
    {
      if (++v3 == (const void **)v23) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v23) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke((uint64_t)v19, (uint64_t)v4 + 16);
  uint64_t v14 = v2 + 96;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  BOOL v18 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_56_2;
  void v11[4] = *(void *)v1;
  int v5 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void **)(v1 + 24);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v13 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A970;
  aBlock[4] = v11;
  uint64_t v7 = _Block_copy(aBlock);
  BOOL v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    uint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_2223CD4EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v22 - 160));
  std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(const void **)(v2 + 24);
    if (v3) {
      _Block_release(v3);
    }
    int v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0x10E0C40B6EF74F0);
  }
  return a1;
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t result, uint64_t a2)
{
  *(unsigned char *)a2 = *(unsigned char *)(result + 40);
  *(void *)(a2 + 8) = *(void *)(result + 32);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CD648(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void *__copy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(void *a1, void *a2)
{
  uint64_t v3 = a2[5];
  a1[4] = a2[4];
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[6];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[6] = result;
  return result;
}

void __destroy_helper_block_e8_32c44_ZTSNSt3__110shared_ptrIN3awd10AppContextEEE48c43_ZTSN8dispatch5blockIU13block_pointerFvbEEE(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::MetricIndication>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndication>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223CD8A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)(v1 + 32);
  long long v22 = 0u;
  long long v23 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
  v21.tv_sec = 0;
  *(void *)&v21.tv_usec = 0;
  gettimeofday(&v21, 0);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  v19[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  void v19[3] = &__block_descriptor_tmp_62_1;
  char v20 = *(unsigned char *)(v1 + 16);
  v19[4] = 1000 * v21.tv_sec + v21.tv_usec / 0x3E8uLL;
  char v3 = (const void **)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1) != (void)v23)
  {
    while (*((unsigned char *)*v3 + 8) != 68)
    {
      if (++v3 == (const void **)v23) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v23) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke((uint64_t)v19, (uint64_t)v4 + 16);
  uint64_t v14 = v2 + 96;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  BOOL v18 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_65_5;
  void v11[4] = *(void *)v1;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void **)(v1 + 24);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v13 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A970;
  aBlock[4] = v11;
  uint64_t v7 = _Block_copy(aBlock);
  BOOL v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    uint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_2223CDCBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v22 - 160));
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendEnableMetricSubmission(std::shared_ptr<awd::AppContext>,BOOL,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 24);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0x10E0C40B6EF74F0);
  }
  return a1;
}

uint64_t ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  *(unsigned char *)(a2 + 4) = *(unsigned char *)(result + 40);
  *(void *)(a2 + 8) = *(void *)(result + 32);
  return result;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver26sendEnableMetricSubmissionENSt3__110shared_ptrINS_10AppContextEEEbN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CDE1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::getSize()
{
  return tlv::size<vs::tlv::CallBarringPassword>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::MetricIndicationExt>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricIndicationExt>::clone()
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(void **)(v1 + 56);
  int v3 = *(unsigned __int8 *)(v1 + 16);
  if (v3 == 1)
  {
    if (*(void *)(v1 + 32) != *(void *)(v1 + 24))
    {
      uint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
      *(void *)int buf = *(void *)v1;
      int v16 = v4;
      if (v4) {
        atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v5 = *(void **)(v1 + 48);
      if (v5) {
        uint64_t v5 = _Block_copy(v5);
      }
      long long aBlock = v5;
      (*(void (**)(void *, uint8_t *, uint64_t, void **))(*v2 + 136))(v2, buf, v1 + 24, &aBlock);
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v16) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v16);
      }
      goto LABEL_23;
    }
    uint64_t v9 = v2[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#E Empty payload; trivially success and no change to baseband",
        buf,
        2u);
    }
    uint64_t v10 = *(void **)(v1 + 48);
    if (v10) {
      uint64_t v10 = _Block_copy(v10);
    }
    *(void *)int buf = v10;
    awd::AppContext::postResultToHandler();
    uint64_t v8 = *(const void **)buf;
    if (*(void *)buf) {
LABEL_22:
    }
      _Block_release(v8);
  }
  else
  {
    uint64_t v6 = v2[5];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)int buf = 16777472;
      uint8_t buf[4] = v3;
      _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "Illegal payload type: %hhu", buf, 5u);
    }
    uint64_t v7 = *(void **)(v1 + 48);
    if (v7) {
      uint64_t v7 = _Block_copy(v7);
    }
    *(void *)int buf = v7;
    awd::AppContext::postResultToHandler();
    uint64_t v8 = *(const void **)buf;
    if (*(void *)buf) {
      goto LABEL_22;
    }
  }
LABEL_23:
  std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v13);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v12);
}

void sub_2223CE0E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *aBlock, uint64_t a14)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

void *std::unique_ptr<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendAddConfiguration(std::shared_ptr<awd::AppContext>,awd::PayloadType,std::vector<unsigned char> const&,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = (const void *)v2[6];
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = (void *)v2[3];
    if (v4)
    {
      v2[4] = v4;
      operator delete(v4);
    }
    uint64_t v5 = (std::__shared_weak_count *)v2[1];
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    MEMORY[0x223C9A950](v2, 0x10F0C403F736783);
  }
  return a1;
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C1130;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C1130;
  uint64_t v2 = (void *)a1[4];
  if (v2)
  {
    a1[5] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::getSize(uint64_t a1)
{
  return tlv::size<awd::tlv::AddConfig>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::AddConfig>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::AddConfig>::clone()
{
}

void sub_2223CE37C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C409EC0D692);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223CE464(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = v1[3];
  *(_OWORD *)std::string __p = 0u;
  long long v20 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  char v3 = (const void **)__p[1];
  if (__p[1] != (void *)v20)
  {
    while (*((unsigned char *)*v3 + 8) != 65)
    {
      if (++v3 == (const void **)v20) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v20) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  *(void *)(v4 + 12) = 0;
  uint64_t v14 = v2 + 96;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  BOOL v18 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_71_2;
  void v11[4] = *v1;
  uint64_t v5 = (std::__shared_weak_count *)v1[1];
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)v1[2];
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v13 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd9SetConfig8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A9B8;
  aBlock[4] = v11;
  uint64_t v7 = _Block_copy(aBlock);
  BOOL v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    uint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_2223CE7D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a23);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendClearConfiguration(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 16);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

void ___ZZNK3awd19QMIAwdCommandDriver22sendClearConfigurationENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CE920(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PeripheralEndPoint>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::DeleteConfig>::clone()
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  long long v22 = 0u;
  long long v23 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
  __int16 AppSettings = awd::AppContext::getAppSettings(*(awd::AppContext **)v1);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  _OWORD v20[2] = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_73;
  __int16 v21 = AppSettings;
  uint64_t v4 = (const void **)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1) != (void)v23)
  {
    while (*((unsigned char *)*v4 + 8) != 105)
    {
      if (++v4 == (const void **)v23) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v23) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke((uint64_t)v20, v5 + 9);
  uint64_t v15 = v2 + 96;
  uint64_t v16 = QMIServiceMsg::create();
  int v17 = 25000;
  uint64_t v18 = 0;
  int v19 = 0;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  void v12[2] = ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  void v12[3] = &__block_descriptor_tmp_76_7;
  void v12[4] = *(void *)v1;
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void **)(v1 + 16);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v14 = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A970;
  aBlock[4] = v12;
  uint64_t v8 = _Block_copy(aBlock);
  int v19 = v8;
  if (v16)
  {
    qmi::Client::send();
    uint64_t v8 = v19;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2223CEDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a20) {
    qmi::Client::send();
  }
  if (a23) {
    _Block_release(a23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v23 - 144));
  std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 16);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

uint64_t ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CEEF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocation>::clone()
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  long long v22 = 0u;
  long long v23 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v22);
  __int16 AppSettings = awd::AppContext::getAppSettings(*(awd::AppContext **)v1);
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  _OWORD v20[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  v20[3] = &__block_descriptor_tmp_78_3;
  __int16 v21 = AppSettings;
  uint64_t v4 = (const void **)*((void *)&v22 + 1);
  if (*((void *)&v22 + 1) != (void)v23)
  {
    while (*((unsigned char *)*v4 + 8) != 69)
    {
      if (++v4 == (const void **)v23) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v23) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke((uint64_t)v20, (uint64_t)v5 + 12);
  uint64_t v15 = v2 + 96;
  uint64_t v16 = QMIServiceMsg::create();
  int v17 = 25000;
  uint64_t v18 = 0;
  int v19 = 0;
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  void v12[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  void v12[3] = &__block_descriptor_tmp_81_4;
  void v12[4] = *(void *)v1;
  uint64_t v6 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void **)(v1 + 16);
  if (v7) {
    uint64_t v7 = _Block_copy(v7);
  }
  uint64_t v14 = v7;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd24RegisterMetricIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460A970;
  aBlock[4] = v12;
  uint64_t v8 = _Block_copy(aBlock);
  int v19 = v8;
  if (v16)
  {
    qmi::Client::send();
    uint64_t v8 = v19;
  }
  if (v8) {
    _Block_release(v8);
  }
  if (v14) {
    _Block_release(v14);
  }
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v22);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v11);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v10);
}

void sub_2223CF38C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *aBlock, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a17);
  }
  if (a20) {
    qmi::Client::send();
  }
  if (a23) {
    _Block_release(a23);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendUpdateProperties(std::shared_ptr<awd::AppContext>,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 16);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0xE0C4052FBD1EDLL);
  }
  return a1;
}

uint64_t ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(uint64_t result, uint64_t a2)
{
  *(_DWORD *)a2 = 0;
  *(_WORD *)(a2 + 4) = *(_WORD *)(result + 32);
  return result;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver20sendUpdatePropertiesENSt3__110shared_ptrINS_10AppContextEEEN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CF4E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::getSize()
{
  return tlv::size<wms::tlv::MessageTag>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::PIILocationExt>(a2, a1 + 12);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::PIILocationExt>::clone()
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)(v1 + 40);
  *(_OWORD *)std::string __p = 0u;
  long long v24 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  v19[2] = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  void v19[3] = &__block_descriptor_tmp_83_0;
  int v20 = *(_DWORD *)(v1 + 20);
  int v21 = *(_DWORD *)(v1 + 24);
  int v22 = *(_DWORD *)(v1 + 16);
  char v3 = (const void **)__p[1];
  if (__p[1] != (void *)v24)
  {
    while (*((unsigned char *)*v3 + 8) != 103)
    {
      if (++v3 == (const void **)v24) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v24) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(v19, v4 + 3);
  uint64_t v14 = v2 + 96;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_86_5;
  void v11[4] = *(void *)v1;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void **)(v1 + 32);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v13 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460AA40;
  aBlock[4] = v11;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    uint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_2223CF980(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIAwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0x10E0C40E99E353BLL);
  }
  return a1;
}

_DWORD *___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(_DWORD *result, _DWORD *a2)
{
  *a2 = result[8];
  a2[1] = result[9];
  a2[2] = result[10];
  return result;
}

void ___ZZNK3awd19QMIAwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223CFAE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::getSize()
{
  return tlv::size<wds::tlv::Ipv4Address>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::Metrics>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::Metrics>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223CFCAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<awd::AwdCommandDriver>::execute_wrapped<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>(awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)(v1 + 40);
  *(_OWORD *)std::string __p = 0u;
  long long v24 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v19[0] = MEMORY[0x263EF8330];
  v19[1] = 0x40000000;
  v19[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke;
  void v19[3] = &__block_descriptor_tmp_89;
  int v20 = *(_DWORD *)(v1 + 20);
  int v21 = *(_DWORD *)(v1 + 24);
  int v22 = *(_DWORD *)(v1 + 16);
  char v3 = (const void **)__p[1];
  if (__p[1] != (void *)v24)
  {
    while (*((unsigned char *)*v3 + 8) != 66)
    {
      if (++v3 == (const void **)v24) {
        goto LABEL_8;
      }
    }
  }
  if (v3 == (const void **)v24) {
LABEL_8:
  }
    operator new();
  if (!v4) {
    __cxa_bad_cast();
  }
  ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(v19, v4 + 3);
  uint64_t v14 = v2 + 96;
  uint64_t v15 = QMIServiceMsg::create();
  int v16 = 25000;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  v11[2] = ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2;
  v11[3] = &__block_descriptor_tmp_92_1;
  void v11[4] = *(void *)v1;
  uint64_t v5 = *(std::__shared_weak_count **)(v1 + 8);
  uint64_t v12 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = *(void **)(v1 + 32);
  if (v6) {
    uint64_t v6 = _Block_copy(v6);
  }
  uint64_t v13 = v6;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3awd19SetQueriableMetrics8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460AA40;
  aBlock[4] = v11;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v18 = v7;
  if (v15)
  {
    qmi::Client::send();
    uint64_t v7 = v18;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v13) {
    _Block_release(v13);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_2223D008C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *aBlock, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  if (a19) {
    qmi::Client::send();
  }
  if (a22) {
    _Block_release(a22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a29);
  std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0,std::default_delete<awd::QMIMav20AwdCommandDriver::sendQueriableMetric(std::shared_ptr<awd::AppContext>,unsigned int,unsigned int,unsigned int,dispatch::block<void({block_pointer})(BOOL)>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    char v3 = *(const void **)(v2 + 32);
    if (v3) {
      _Block_release(v3);
    }
    uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    MEMORY[0x223C9A950](v2, 0x10E0C40E99E353BLL);
  }
  return a1;
}

_DWORD *___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke(_DWORD *result, _DWORD *a2)
{
  *a2 = 0;
  a2[1] = result[8];
  a2[2] = result[9];
  a2[3] = result[10];
  return result;
}

void ___ZZNK3awd24QMIMav20AwdCommandDriver19sendQueriableMetricENSt3__110shared_ptrINS_10AppContextEEEjjjN8dispatch5blockIU13block_pointerFvbEEEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 48);
  if (v1) {
    uint64_t v1 = _Block_copy(v1);
  }
  long long aBlock = v1;
  awd::AppContext::postResultToHandler();
  if (aBlock) {
    _Block_release(aBlock);
  }
}

void sub_2223D01F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::getSize()
{
  return tlv::size<wds::tlv::Ipv4AddressExtended>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::MetricsExt>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<awd::tlv::MetricsExt>::clone()
{
}

void QMIATCommandDriver::create()
{
}

void sub_2223D0390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  if (v11) {
    MEMORY[0x223C9A950](v10, 0x10E1C401EB18A05);
  }
  _Unwind_Resume(exception_object);
}

double QMIATCommandDriver::QMIATCommandDriver(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = ATCommandDriver::ATCommandDriver();
  *(void *)uint64_t v4 = &unk_26D4C13E8;
  uint64_t v5 = a3[1];
  *(void *)(v4 + 104) = *a3;
  *(void *)(v4 + 112) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  double result = 0.0;
  *(_OWORD *)(v4 + 136) = 0u;
  *(_OWORD *)(v4 + 120) = 0u;
  return result;
}

void QMIATCommandDriver::~QMIATCommandDriver(QMIATCommandDriver *this)
{
  *(void *)this = &unk_26D4C13E8;
  qmi::Client::~Client((QMIATCommandDriver *)((char *)this + 120));
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  MEMORY[0x270EE94D0](this);
}

{
  uint64_t vars8;

  QMIATCommandDriver::~QMIATCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

uint64_t QMIATCommandDriver::bootstrap_sync(uint64_t a1)
{
  std::string::basic_string[abi:ne180100]<0>(&v18, "QMIATCommandDriver");
  uint64_t v2 = *(NSObject **)(a1 + 24);
  dispatch_object_t v17 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "at");
  char v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3 || (uint64_t v4 = *(void *)(a1 + 8), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v6 = v5;
  uint64_t v13 = v4;
  uint64_t v14 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v11, *(Registry **)(a1 + 104));
  qmi::Client::createWithQueueLocal();
  long long v7 = v21;
  long long v21 = 0uLL;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 144);
  *(_OWORD *)(a1 + 136) = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  qmi::Client::~Client((qmi::Client *)v20);
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  if (v16 < 0) {
    operator delete(__p);
  }
  if (v17) {
    dispatch_release(v17);
  }
  if (v19 < 0) {
    operator delete(v18);
  }
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  _DWORD v10[2] = ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke;
  v10[3] = &__block_descriptor_tmp_8;
  v10[4] = a1;
  v20[0] = MEMORY[0x263EF8330];
  v20[1] = 0x40000000;
  *(void *)&long long v21 = ___ZNK3qmi6Client13setIndHandlerIRKN2at15ReceivedCommand10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v21 + 1) = &unk_26460AB08;
  int v22 = v10;
  qmi::Client::setIndHandler();
  return qmi::Client::setHandler();
}

void sub_2223D06E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20,uint64_t a21,std::__shared_weak_count *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v28);
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v31 = *(NSObject **)(v29 - 120);
  if (v31) {
    dispatch_release(v31);
  }
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  _Unwind_Resume(a1);
}

void ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  char v3 = *(QMIATCommandDriver **)(a1 + 32);
  memset(&__p, 0, sizeof(__p));
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  uint64_t v6 = TlvValue;
  if (TlvValue)
  {
    int v7 = v5;
    *(void *)int buf = TlvValue;
    *(_OWORD *)uint64_t v26 = 0u;
    long long v27 = 0u;
    tlv::parseV<at::tlv::Command>((unint64_t *)buf, v5, v26);
    uint64_t v8 = *(void *)buf;
    if (*(void *)buf)
    {
      int v9 = (int)v26[0];
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&v24, (char *)v26[1], (char *)v27, v27 - (unint64_t)v26[1]);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      std::string __p = v24;
    }
    else
    {
      int v9 = 0;
    }
    if (v26[1])
    {
      *(void **)&long long v27 = v26[1];
      operator delete(v26[1]);
    }
    if (v8) {
      LOBYTE(v6) = 1;
    }
    else {
      LOBYTE(v6) = ((uint64_t (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 1, v6, v7);
    }
  }
  else
  {
    int v9 = 0;
  }
  uint64_t v10 = qmi::MessageBase::findTlvValue(this);
  uint64_t v12 = v10;
  if (v10)
  {
    int v13 = v11;
    *(void *)int buf = v10;
    memset(&v24, 0, sizeof(v24));
    tlv::parseV<at::tlv::Token>((unint64_t *)buf, v11, &v24);
    uint64_t v14 = *(void *)buf;
    if (*(void *)buf)
    {
      std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(v26, v24.__r_.__value_.__l.__data_, (char *)v24.__r_.__value_.__l.__size_, v24.__r_.__value_.__l.__size_ - v24.__r_.__value_.__r.__words[0]);
      uint64_t v15 = (SBYTE7(v27) & 0x80u) == 0 ? (const std::string::value_type *)v26 : (const std::string::value_type *)v26[0];
      char v16 = (SBYTE7(v27) & 0x80u) == 0 ? (void *)BYTE7(v27) : v26[1];
      std::string::append(&__p, v15, (std::string::size_type)v16);
      if (SBYTE7(v27) < 0) {
        operator delete(v26[0]);
      }
    }
    if (v24.__r_.__value_.__r.__words[0])
    {
      v24.__r_.__value_.__l.__size_ = v24.__r_.__value_.__r.__words[0];
      operator delete(v24.__r_.__value_.__l.__data_);
    }
    if (!v14) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v12, v13);
    }
  }
  dispatch_object_t v17 = (std::__shared_weak_count *)*((void *)v3 + 2);
  if (!v17 || (uint64_t v18 = *((void *)v3 + 1), (v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v20 = v19;
  atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    std::string::__init_copy_ctor_external(&v24, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string v24 = __p;
  }
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *((void *)&v27 + 1) = 0;
  long long v21 = operator new(0x28uLL);
  void *v21 = &unk_26D4C14B0;
  v21[1] = v18;
  v21[2] = v20;
  v21[3] = v3;
  *((_DWORD *)v21 + 8) = v9;
  *((void *)&v27 + 1) = v21;
  ATCommandDriver::handleCommand_sync();
  std::__function::__value_func<void ()(at::ResultType)>::~__value_func[abi:ne180100](v26);
  if (SHIBYTE(v24.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v24.__r_.__value_.__l.__data_);
    if (v6) {
      goto LABEL_39;
    }
  }
  else if (v6)
  {
    goto LABEL_39;
  }
  int v22 = *((void *)v3 + 5);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int buf = 0;
    _os_log_error_impl(&dword_22231A000, v22, OS_LOG_TYPE_ERROR, "Error in handling AT received command indication", buf, 2u);
  }
  QMIATCommandDriver::sendCommandResponse_sync(v3, 0, 1);
LABEL_39:
  std::__shared_weak_count::__release_weak(v20);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2223D0A70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a16) {
    operator delete(a16);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN18QMIATCommandDriver14bootstrap_syncEN8dispatch13group_sessionE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(QMIATCommandDriver **)(a1 + 32);
  memset(v25, 0, sizeof(v25));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v25);
  QMIATCommandDriver::send_sync(v1, (const qmi::MutableMessageBase *)v25);
  *(_OWORD *)std::string __p = 0u;
  long long v27 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v2 = (const void **)__p[1];
  if (__p[1] != (void *)v27)
  {
    while (*((unsigned char *)*v2 + 8) != 1)
    {
      if (++v2 == (const void **)v27) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v27) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  uint64_t v4 = (uint64_t *)((char *)v3 + 16);
  SupportedCommands = (void *)ATCommandDriver::getSupportedCommands(v3);
  std::string v24 = v1;
  uint64_t v6 = SupportedCommands + 1;
  int v7 = (void *)*SupportedCommands;
  if ((void *)*SupportedCommands != SupportedCommands + 1)
  {
    do
    {
      memset(v32, 0, sizeof(v32));
      if (*((char *)v7 + 55) < 0)
      {
        std::string::__init_copy_ctor_external((std::string *)v32, (const std::string::value_type *)v7[4], v7[5]);
      }
      else
      {
        *(_OWORD *)uint64_t v32 = *((_OWORD *)v7 + 2);
        *(void *)&v32[16] = v7[6];
      }
      *(_DWORD *)&v32[24] = *((_DWORD *)v7 + 14);
      uint64_t v28 = 0;
      if (v32[23] >= 0) {
        uint64_t v8 = v32;
      }
      else {
        uint64_t v8 = *(char **)v32;
      }
      if (v32[23] >= 0) {
        size_t v9 = v32[23];
      }
      else {
        size_t v9 = *(void *)&v32[8];
      }
      dispatch_object_t v30 = 0;
      uint64_t v31 = 0;
      uint64_t v29 = 0;
      if (v9)
      {
        std::vector<unsigned char>::__vallocate[abi:ne180100](&v29, v9);
        uint64_t v10 = v30;
        do
        {
          char v11 = *v8++;
          *v10++ = v11;
          --v9;
        }
        while (v9);
        dispatch_object_t v30 = v10;
      }
      unint64_t v13 = v4[1];
      unint64_t v12 = v4[2];
      if (v13 >= v12)
      {
        uint64_t v15 = (uint64_t)(v13 - *v4) >> 5;
        if ((unint64_t)(v15 + 1) >> 59) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v16 = v12 - *v4;
        uint64_t v17 = v16 >> 4;
        if (v16 >> 4 <= (unint64_t)(v15 + 1)) {
          uint64_t v17 = v15 + 1;
        }
        if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v18 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v18 = v17;
        }
        uint64_t v36 = v4 + 2;
        if (v18) {
          char v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>((uint64_t)(v4 + 2), v18);
        }
        else {
          char v19 = 0;
        }
        int v20 = &v19[32 * v15];
        v33[0] = v19;
        v33[1] = v20;
        char v34 = v20;
        CFTypeID v35 = &v19[32 * v18];
        char *v20 = v28;
        *((void *)v20 + 2) = 0;
        *((void *)v20 + 3) = 0;
        *((void *)v20 + 1) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v20 + 1, v29, (uint64_t)v30, v30 - (unsigned char *)v29);
        v34 += 32;
        std::vector<at::tlv::CommandCallback>::__swap_out_circular_buffer(v4, v33);
        uint64_t v14 = v4[1];
        std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)v33);
      }
      else
      {
        *(unsigned char *)unint64_t v13 = v28;
        *(void *)(v13 + 16) = 0;
        *(void *)(v13 + 24) = 0;
        *(void *)(v13 + 8) = 0;
        std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v13 + 8), v29, (uint64_t)v30, v30 - (unsigned char *)v29);
        uint64_t v14 = v13 + 32;
        v4[1] = v13 + 32;
      }
      v4[1] = v14;
      if (v29)
      {
        dispatch_object_t v30 = v29;
        operator delete(v29);
      }
      if ((v32[23] & 0x80000000) != 0) {
        operator delete(*(void **)v32);
      }
      long long v21 = (void *)v7[1];
      if (v21)
      {
        do
        {
          int v22 = v21;
          long long v21 = (void *)*v21;
        }
        while (v21);
      }
      else
      {
        do
        {
          int v22 = (void *)v7[2];
          BOOL v23 = *v22 == (void)v7;
          int v7 = v22;
        }
        while (!v23);
      }
      int v7 = v22;
    }
    while (v22 != v6);
  }
  QMIATCommandDriver::send_sync(v24, (const qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v25);
}

void sub_2223D0F34(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
}

uint64_t QMIATCommandDriver::start(QMIATCommandDriver *this)
{
  return qmi::Client::start((QMIATCommandDriver *)((char *)this + 120));
}

uint64_t QMIATCommandDriver::shutdown(uint64_t a1)
{
  return qmi::Client::stop((qmi::Client *)(a1 + 120));
}

void QMIATCommandDriver::sendCommandResponse_sync(QMIATCommandDriver *a1, int a2, char a3)
{
  *(_OWORD *)std::string __p = 0u;
  long long v12 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v8[0] = MEMORY[0x263EF8330];
  v8[1] = 0x40000000;
  void v8[2] = ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke;
  v8[3] = &__block_descriptor_tmp_9_1;
  int v9 = a2;
  char v10 = a3;
  uint64_t v6 = (const void **)__p[1];
  if (__p[1] != (void *)v12)
  {
    while (*((unsigned char *)*v6 + 8) != 1)
    {
      if (++v6 == (const void **)v12) {
        goto LABEL_8;
      }
    }
  }
  if (v6 == (const void **)v12) {
LABEL_8:
  }
    operator new();
  if (!v7) {
    __cxa_bad_cast();
  }
  ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke((uint64_t)v8, (uint64_t)v7 + 16);
  QMIATCommandDriver::send_sync(a1, (const qmi::MutableMessageBase *)__p);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223D1218(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

void QMIATCommandDriver::send_sync(QMIATCommandDriver *this, const qmi::MutableMessageBase *a2)
{
  void v4[5] = (char *)this + 120;
  uint64_t v5 = QMIServiceMsg::create();
  int v6 = 25000;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZN18QMIATCommandDriver9send_syncERKN3qmi18MutableMessageBaseE_block_invoke;
  v4[3] = &__block_descriptor_tmp_7_2;
  v4[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_11MessageBaseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460AB30;
  aBlock[4] = v4;
  char v3 = _Block_copy(aBlock);
  uint64_t v8 = v3;
  if (v5)
  {
    qmi::Client::send();
    char v3 = v8;
  }
  if (v3) {
    _Block_release(v3);
  }
}

void sub_2223D1328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  _Unwind_Resume(a1);
}

void ___ZN18QMIATCommandDriver9send_syncERKN3qmi18MutableMessageBaseE_block_invoke(uint64_t a1, unsigned __int16 *a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  char v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((_DWORD *)a2 + 1);
    int v5 = *a2;
    v6[0] = 67109634;
    v6[1] = v5;
    __int16 v7 = 1024;
    int v8 = v4;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I qmi AT response msg(%d) response(0x%04X, %s)", (uint8_t *)v6, 0x18u);
  }
}

void ___ZN18QMIATCommandDriver24sendCommandResponse_syncEjN2at10ResultTypeE_block_invoke(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a2 = *(_DWORD *)(a1 + 32);
  *(unsigned char *)(a2 + 4) = at::convert(*(unsigned __int8 *)(a1 + 36));
  *(unsigned char *)(a2 + 5) = 3;
  if (*(unsigned char *)(a1 + 36))
  {
    std::string __p = 0;
    size_t v15 = 0;
    uint64_t v16 = 0;
    int v4 = (char *)at::asString();
    std::string::basic_string[abi:ne180100]<0>(&__p, v4);
    if (v16 >= 0) {
      p_p = (char *)&__p;
    }
    else {
      p_p = (char *)__p;
    }
    if (v16 >= 0) {
      size_t v6 = HIBYTE(v16);
    }
    else {
      size_t v6 = v15;
    }
    long long v12 = 0;
    uint64_t v13 = 0;
    uint64_t v11 = 0;
    if (v6)
    {
      std::vector<unsigned char>::__vallocate[abi:ne180100](&v11, v6);
      __int16 v7 = v12;
      do
      {
        char v8 = *p_p++;
        *v7++ = v8;
        --v6;
      }
      while (v6);
      long long v12 = v7;
    }
    else
    {
      __int16 v7 = 0;
    }
    __int16 v9 = *(void **)(a2 + 8);
    if (v9)
    {
      *(void *)(a2 + 16) = v9;
      operator delete(v9);
      *(void *)(a2 + 8) = 0;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      __int16 v7 = v12;
    }
    uint64_t v10 = v13;
    *(void *)(a2 + 8) = v11;
    *(void *)(a2 + 16) = v7;
    *(void *)(a2 + 24) = v10;
    if (SHIBYTE(v16) < 0) {
      operator delete(__p);
    }
  }
}

void sub_2223D1514(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<QMIATCommandDriver>::shared_ptr[abi:ne180100]<QMIATCommandDriver,void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223D15C0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<QMIATCommandDriver>::__enable_weak_this[abi:ne180100]<ATCommandDriver,QMIATCommandDriver,void>(uint64_t a1, void *a2, uint64_t a3)
{
  if (a2)
  {
    int v4 = (std::__shared_weak_count *)a2[1];
    if (!v4 || v4->__shared_owners_ == -1)
    {
      int v5 = *(std::__shared_weak_count **)(a1 + 8);
      if (v5)
      {
        atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        int v4 = (std::__shared_weak_count *)a2[1];
      }
      *a2 = a3;
      a2[1] = v5;
      if (v4) {
        std::__shared_weak_count::__release_weak(v4);
      }
      if (v5)
      {
        std::__shared_weak_count::__release_shared[abi:ne180100](v5);
      }
    }
  }
}

void std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIATCommandDriver *,std::shared_ptr<QMIATCommandDriver>::__shared_ptr_default_delete<QMIATCommandDriver,QMIATCommandDriver>,std::allocator<QMIATCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ___ZNK3qmi6Client13setIndHandlerIRKN2at15ReceivedCommand10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223D17F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(void *result, char *a2, char *a3, unint64_t a4)
{
  int v4 = result;
  if (a4 >= 0x7FFFFFFFFFFFFFF8) {
    std::string::__throw_length_error[abi:ne180100]();
  }
  if (a4 > 0x16)
  {
    uint64_t v8 = (a4 & 0xFFFFFFFFFFFFFFF8) + 8;
    if ((a4 | 7) != 0x17) {
      uint64_t v8 = a4 | 7;
    }
    uint64_t v9 = v8 + 1;
    uint64_t result = operator new(v8 + 1);
    v4[1] = a4;
    _OWORD v4[2] = v9 | 0x8000000000000000;
    *int v4 = result;
    int v4 = result;
  }
  else
  {
    *((unsigned char *)result + 23) = a4;
  }
  while (a2 != a3)
  {
    char v10 = *a2++;
    *(unsigned char *)int v4 = v10;
    int v4 = (void *)((char *)v4 + 1);
  }
  *(unsigned char *)int v4 = 0;
  return result;
}

void *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::~__func(void *a1)
{
  *a1 = &unk_26D4C14B0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::~__func(void *a1)
{
  *a1 = &unk_26D4C14B0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::__clone(uint64_t a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *uint64_t result = &unk_26D4C14B0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  result[3] = *(void *)(a1 + 24);
  *((_DWORD *)result + 8) = *(_DWORD *)(a1 + 32);
  return result;
}

uint64_t std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::__clone(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = &unk_26D4C14B0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(result + 32);
  *(void *)(a2 + 24) = v4;
  return result;
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::operator()(uint64_t a1, char *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    char v4 = *a2;
    int v5 = *(QMIATCommandDriver **)(a1 + 24);
    size_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (*(void *)(a1 + 8)) {
        QMIATCommandDriver::sendCommandResponse_sync(v5, *(_DWORD *)(a1 + 32), v4);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_2223D1B18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2,std::allocator<QMIATCommandDriver::handleCommand_sync(at::ReceivedCommand::Indication const&)::$_2>,void ()(at::ResultType)>::target_type()
{
}

void *std::__function::__value_func<void ()(at::ResultType)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKNS_11MessageBaseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223D1CA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C1558;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C1558;
  uint64_t v2 = (void *)a1[3];
  if (v2)
  {
    a1[4] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::getSize(uint64_t a1)
{
  return tlv::size<at::tlv::CommandResponse>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<at::tlv::CommandResponse>(a2, a1 + 16);
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<at::tlv::CommandResponse>::clone()
{
}

void sub_2223D1E80(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C4066207FBFLL);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C15A8;
  char v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4C15A8;
  char v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::getSize(uint64_t a1)
{
  return tlv::size<at::tlv::DesiredCommands>((uint64_t *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<at::tlv::DesiredCommands>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<at::tlv::DesiredCommands>::clone()
{
}

void sub_2223D20F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x223C9A950](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<at::tlv::CommandCallback>,at::tlv::CommandCallback*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 32)
    {
      uint64_t v5 = *(void **)(i - 24);
      if (v5)
      {
        *(void *)(i - 16) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

const char *QMIDataCommandDriver::getName(QMIDataCommandDriver *this)
{
  if (PersonalitySpecificImpl::simSlot(this) == 1) {
    return "DATA.QMIDriver.1";
  }
  if (PersonalitySpecificImpl::simSlot(this) == 2) {
    return "DATA.QMIDriver.2";
  }
  return "DATA.QMIDriver.?";
}

void QMIDataCommandDriver::QMIDataCommandDriver(uint64_t a1, void *a2, uint64_t a3, NSObject **a4)
{
  *(void *)a1 = MEMORY[0x263F03628] + 16;
  PersonalitySpecificImpl::PersonalitySpecificImpl();
  *(void *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0;
  *(void *)a1 = &unk_26D4C1608;
  *(void *)(a1 + 24) = &unk_26D4C17F0;
  *(void *)(a1 + 32) = &unk_26D4C18C0;
  *(void *)(a1 + 56) = &unk_26D4C1A00;
  Name = QMIDataCommandDriver::getName((QMIDataCommandDriver *)a1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v10, (const char *)*MEMORY[0x263F03770], Name);
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  uint64_t v8 = *a4;
  *(void *)(a1 + 80) = *a4;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 88) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v10);
  *(void *)a1 = &unk_26D4C1608;
  *(void *)(a1 + 24) = &unk_26D4C17F0;
  *(void *)(a1 + 32) = &unk_26D4C18C0;
  *(void *)(a1 + 56) = &unk_26D4C1A00;
  *(void *)(a1 + 112) = 0;
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 104) = a1 + 112;
  *(void *)(a1 + 128) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 136) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 144) = 0u;
  *(void *)(a1 + 216) = 850045863;
  *(void *)(a1 + 208) = 0;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 192) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 224) = 0u;
  *(_OWORD *)(a1 + 240) = 0u;
  *(_OWORD *)(a1 + 256) = 0u;
  *(_OWORD *)(a1 + 272) = 0u;
  operator new();
}

void sub_2223D2490(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  unint64_t v18 = *(std::__shared_weak_count **)(v10 + 328);
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  char v19 = *(std::__shared_weak_count **)(v10 + 304);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  uint64_t v20 = *(void *)(v10 + 288);
  *(void *)(v10 + 288) = 0;
  if (v20) {
    MEMORY[0x223C9A950](v20, 0x1000C40451B5BE8);
  }
  std::mutex::~mutex(v15);
  if (*(char *)(v10 + 215) < 0) {
    operator delete(*(void **)(v10 + 192));
  }
  long long v21 = *(std::__shared_weak_count **)(v10 + 184);
  if (v21) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v21);
  }
  qmi::Client::~Client(v14);
  int v22 = *(std::__shared_weak_count **)(v10 + 136);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*v16);
  MEMORY[0x223C99A30](v13);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v12);
  BBDataCommandDriverInterface::~BBDataCommandDriverInterface(v11);
  PersonalitySpecificImpl::~PersonalitySpecificImpl((PersonalitySpecificImpl *)v10);
  PersonalitySpecific::~PersonalitySpecific((PersonalitySpecific *)v10);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::~QMIDataCommandDriver(QMIDataCommandDriver *this)
{
  *(void *)this = &unk_26D4C1608;
  *((void *)this + 3) = &unk_26D4C17F0;
  uint64_t v2 = (QMIDataCommandDriver *)((char *)this + 32);
  *((void *)this + 4) = &unk_26D4C18C0;
  *((void *)this + 7) = &unk_26D4C1A00;
  QMIDataCommandDriver::stopDataCommandDriver(this);
  uint64_t v3 = (void **)*((void *)this + 56);
  uint64_t v4 = (void **)*((void *)this + 57);
  if (v4 == v3)
  {
    uint64_t v8 = (void *)((char *)this + 480);
    uint64_t v4 = (void **)*((void *)this + 56);
  }
  else
  {
    unint64_t v5 = *((void *)this + 59);
    size_t v6 = &v3[v5 >> 4];
    uint64_t v7 = (uint64_t)*v6 + 336 * (v5 & 0xF);
    uint64_t v8 = (void *)((char *)this + 480);
    uint64_t v9 = *(uint64_t *)((char *)v3 + (((*((void *)this + 60) + v5) >> 1) & 0x7FFFFFFFFFFFFFF8))
       + 336 * ((*((_DWORD *)this + 120) + (int)v5) & 0xF);
    if (v7 != v9)
    {
      do
      {
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v7 + 304));
        MEMORY[0x223C99360](v7);
        v7 += 336;
        if (v7 - (void)*v6 == 5376)
        {
          uint64_t v10 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v10;
        }
      }
      while (v7 != v9);
      uint64_t v3 = (void **)*((void *)this + 56);
      uint64_t v4 = (void **)*((void *)this + 57);
    }
  }
  *uint64_t v8 = 0;
  unint64_t v11 = (char *)v4 - (char *)v3;
  if ((unint64_t)((char *)v4 - (char *)v3) >= 0x11)
  {
    do
    {
      operator delete(*v3);
      uint64_t v4 = (void **)*((void *)this + 57);
      uint64_t v3 = (void **)(*((void *)this + 56) + 8);
      *((void *)this + 56) = v3;
      unint64_t v11 = (char *)v4 - (char *)v3;
    }
    while ((unint64_t)((char *)v4 - (char *)v3) > 0x10);
  }
  unint64_t v12 = v11 >> 3;
  if (v12 == 1)
  {
    uint64_t v13 = 8;
    goto LABEL_14;
  }
  if (v12 == 2)
  {
    uint64_t v13 = 16;
LABEL_14:
    *((void *)this + 59) = v13;
  }
  if (v3 != v4)
  {
    do
    {
      uint64_t v14 = *v3++;
      operator delete(v14);
    }
    while (v3 != v4);
    uint64_t v16 = *((void *)this + 56);
    uint64_t v15 = *((void *)this + 57);
    if (v15 != v16) {
      *((void *)this + 57) = v15 + ((v16 - v15 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  uint64_t v17 = (void *)*((void *)this + 55);
  if (v17) {
    operator delete(v17);
  }
  unint64_t v18 = (std::__shared_weak_count *)*((void *)this + 54);
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((char **)this + 51));
  uint64_t v26 = (void **)((char *)this + 376);
  std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v26);
  std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(*((void **)this + 45));
  uint64_t v19 = *((void *)this + 42);
  *((void *)this + 42) = 0;
  if (v19)
  {
    std::deque<dispatch::group_session>::~deque[abi:ne180100](v19 + 88);
    std::deque<dispatch::group_session>::~deque[abi:ne180100](v19 + 40);
    uint64_t v20 = *(std::__shared_weak_count **)(v19 + 32);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    std::__tree<std::string>::destroy(*(char **)(v19 + 8));
    MEMORY[0x223C9A950](v19, 0x10A0C408553B8AELL);
  }
  long long v21 = (std::__shared_weak_count *)*((void *)this + 41);
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  int v22 = (std::__shared_weak_count *)*((void *)this + 38);
  if (v22) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  }
  uint64_t v23 = *((void *)this + 36);
  *((void *)this + 36) = 0;
  if (v23) {
    MEMORY[0x223C9A950](v23, 0x1000C40451B5BE8);
  }
  std::mutex::~mutex((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0) {
    operator delete(*((void **)this + 24));
  }
  std::string v24 = (std::__shared_weak_count *)*((void *)this + 23);
  if (v24) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
  }
  qmi::Client::~Client((QMIDataCommandDriver *)((char *)this + 144));
  uint64_t v25 = (std::__shared_weak_count *)*((void *)this + 17);
  if (v25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*((void **)this + 14));
  MEMORY[0x223C99A30]((char *)this + 96);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 8);
  BBDataCommandDriverInterface::~BBDataCommandDriverInterface(v2);

  PersonalitySpecificImpl::~PersonalitySpecificImpl(this);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataCommandDriver::~QMIDataCommandDriver(this);

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataCommandDriver::~QMIDataCommandDriver(this);
  PersonalitySpecific::~PersonalitySpecific(v1);

  JUMPOUT(0x223C9A950);
}

void QMIDataCommandDriver::stopDataCommandDriver(QMIDataCommandDriver *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v6[0]) = 136315138;
    *(void *)((char *)v6 + 4) = "stopDataCommandDriver";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: stopping...", (uint8_t *)v6, 0xCu);
  }
  if (*((void *)this + 20))
  {
    qmi::Client::stop((QMIDataCommandDriver *)((char *)this + 144));
    memset(v6, 0, sizeof(v6));
    uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 21);
    *((void *)this + 20) = 0;
    *((void *)this + 21) = 0;
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    qmi::Client::~Client((qmi::Client *)v6);
  }
  uint64_t v4 = *((void *)this + 22);
  if (v4)
  {
    QMIDataSystemDeterminationManager::shutdown_sync(v4);
    unint64_t v5 = (std::__shared_weak_count *)*((void *)this + 23);
    *((void *)this + 22) = 0;
    *((void *)this + 23) = 0;
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::~QMIDataCommandDriver(QMIDataCommandDriver *this)
{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 32));

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  PersonalitySpecific *v1;
  uint64_t vars8;

  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 56));

  PersonalitySpecific::~PersonalitySpecific(v1);
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 32));
}

{
  QMIDataCommandDriver::~QMIDataCommandDriver((QMIDataCommandDriver *)((char *)this - 56));
}

QMIDataSystemDeterminationManager *QMIDataCommandDriver::bootstrapDataCommandDriver(QMIDataCommandDriver *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    size_t v6 = "bootstrapDataCommandDriver";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: bootstrapping...", (uint8_t *)&v5, 0xCu);
  }
  uint64_t v3 = (void *)*((void *)this + 36);
  void *v3 = 0xFFFFFFFFLL;
  v3[1] = 0;
  uint64_t result = (QMIDataSystemDeterminationManager *)*((void *)this + 22);
  if (result) {
    return (QMIDataSystemDeterminationManager *)QMIDataSystemDeterminationManager::bootstrap(result);
  }
  return result;
}

QMIDataSystemDeterminationManager *non-virtual thunk to'QMIDataCommandDriver::bootstrapDataCommandDriver(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::bootstrapDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

Registry **QMIDataCommandDriver::startDataCommandDriver(QMIDataCommandDriver *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "startDataCommandDriver";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: starting...", (uint8_t *)&v4, 0xCu);
  }
  uint64_t result = (Registry **)*((void *)this + 22);
  if (result) {
    return QMIDataSystemDeterminationManager::start(result);
  }
  return result;
}

Registry **non-virtual thunk to'QMIDataCommandDriver::startDataCommandDriver(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::startDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24));
}

void non-virtual thunk to'QMIDataCommandDriver::stopDataCommandDriver(QMIDataCommandDriver *this)
{
}

uint64_t QMIDataCommandDriver::initialize_sync(QMIDataCommandDriver *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = "initialize_sync";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: initializing...", buf, 0xCu);
  }
  uint64_t result = capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v3);
  if (result)
  {
    uint64_t v5 = *((void *)this + 17);
    v7[2] = *((void *)this + 16);
    v7[3] = v5;
    if (v5) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *__return_ptr, QMIDataCommandDriver *))(*(void *)this + 16))(v7, this);
    uint64_t v6 = *((void *)this + 10);
    if (v6) {
      dispatch_retain(v6);
    }
    QMIDataSystemDeterminationManager::create();
  }
  return result;
}

void sub_2223D2D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    dispatch_release(v13);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(QMIDataCommandDriver::QMIClientsInfo *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  *((void *)this + 3) = 0;
  *((void *)this + 4) = 0;
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  std::deque<dispatch::group_session>::__move_assign((void *)this + 5, (uint64_t)&v4);
  std::deque<dispatch::group_session>::~deque[abi:ne180100]((uint64_t)&v4);
  long long v5 = 0u;
  long long v6 = 0u;
  long long v4 = 0u;
  std::deque<dispatch::group_session>::__move_assign((void *)this + 11, (uint64_t)&v4);
  return std::deque<dispatch::group_session>::~deque[abi:ne180100]((uint64_t)&v4);
}

void QMIDataCommandDriver::resetSlicing_sync(QMIDataCommandDriver *this, int a2)
{
  uint64_t v24 = *MEMORY[0x263EF8340];
  long long v4 = (std::__shared_weak_count *)*((void *)this + 41);
  if (!v4)
  {
    long long v5 = 0;
    if (!a2) {
      goto LABEL_33;
    }
    goto LABEL_8;
  }
  long long v5 = std::__shared_weak_count::lock(v4);
  if (v5)
  {
    uint64_t v6 = *((void *)this + 40);
    if (v6)
    {
      uint64_t v7 = PersonalitySpecificImpl::simSlot(this);
      (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v6 + 80))(v6, v7, 0, 0);
    }
  }
  if (a2)
  {
LABEL_8:
    uint64_t v8 = (unsigned __int16 *)*((void *)this + 53);
    if (v8)
    {
      uint64_t v9 = (unsigned __int16 **)((char *)this + 424);
      uint64_t v10 = *((void *)this + 12);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        int v11 = *v8;
        LODWORD(__p[0]) = 67109120;
        HIDWORD(__p[0]) = v11;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#N WDS PduSessionLookup: aborting pending transaction %u", (uint8_t *)__p, 8u);
        uint64_t v8 = *v9;
      }
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_222543CCE);
      uint64_t v12 = *((void *)v8 + 4);
      if (!v12) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v12 + 48))(v12, __p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 54);
      *uint64_t v9 = 0;
      *((void *)this + 54) = 0;
      if (v13) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      }
    }
    while (*((void *)this + 60))
    {
      uint64_t v14 = *((void *)this + 12);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#N WDS PduSessionLookup: aborting pending request", (uint8_t *)__p, 2u);
      }
      unint64_t v15 = *((void *)this + 59);
      uint64_t v16 = *(void *)(*((void *)this + 56) + ((v15 >> 1) & 0x7FFFFFFFFFFFFFF8));
      std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_222543CCE);
      uint64_t v17 = *(void *)(v16 + 336 * (v15 & 0xF) + 328);
      if (!v17) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t, void **))(*(void *)v17 + 48))(v17, __p);
      if (v23 < 0) {
        operator delete(__p[0]);
      }
      std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front((uint64_t)this + 440);
    }
    uint64_t v19 = *((void *)this + 47);
    uint64_t v18 = *((void *)this + 48);
    if (v19 != v18)
    {
      uint64_t v20 = *((void *)this + 12);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#N Reset Slicing: cleaning tds", (uint8_t *)__p, 2u);
        uint64_t v19 = *((void *)this + 47);
        uint64_t v18 = *((void *)this + 48);
      }
      while (v18 != v19)
      {
        v18 -= 304;
        MEMORY[0x223C99360](v18);
      }
      *((void *)this + 48) = v19;
    }
    if (*((void *)this + 52))
    {
      long long v21 = *((void *)this + 12);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#N Reset Slicing: cleaning transaction in progress", (uint8_t *)__p, 2u);
      }
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((char **)this + 51));
      *((void *)this + 51) = 0;
      *((void *)this + 52) = 0;
      *((void *)this + 50) = (char *)this + 408;
    }
  }
LABEL_33:
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2223D3184(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataCommandDriver::clientStarted(uint64_t a1, int a2, qmi::Client *this, int a4, int a5)
{
  uint64_t v108 = *MEMORY[0x263EF8340];
  memset(&v87, 0, sizeof(v87));
  uint64_t Name = qmi::Client::getName(this);
  if (*(char *)(Name + 23) < 0)
  {
    std::string::__init_copy_ctor_external(&v87, *(const std::string::value_type **)Name, *(void *)(Name + 8));
  }
  else
  {
    long long v11 = *(_OWORD *)Name;
    v87.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
    *(_OWORD *)&v87.__r_.__value_.__l.__data_ = v11;
  }
  uint64_t v12 = std::__tree<std::string>::find<std::string>(*(void *)(a1 + 336), (void **)&v87.__r_.__value_.__l.__data_);
  uint64_t v13 = *(uint64_t ***)(a1 + 336);
  if (v13 + 1 != (uint64_t **)v12)
  {
    uint64_t v14 = *(NSObject **)(a1 + 96);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_31;
    }
    unint64_t v15 = &v87;
    if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      unint64_t v15 = (std::string *)v87.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "clientStarted";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v15;
    uint64_t v16 = "#E %s: client %s already active !";
    uint64_t v17 = v14;
    uint32_t v18 = 22;
    goto LABEL_30;
  }
  uint64_t v19 = (uint64_t **)v12;
  uint64_t v20 = *v12;
  if (*v12)
  {
    long long v21 = (uint64_t **)v12;
    while (1)
    {
      while (1)
      {
        int v22 = (void **)v20;
        char v23 = v20 + 4;
        if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(&v87, (void **)v20 + 4) & 0x80) == 0) {
          break;
        }
        uint64_t v20 = *v22;
        long long v21 = (uint64_t **)v22;
        if (!*v22) {
          goto LABEL_18;
        }
      }
      if ((std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v23, (void **)&v87.__r_.__value_.__l.__data_) & 0x80) == 0)break; {
      long long v21 = (uint64_t **)(v22 + 1);
      }
      uint64_t v20 = v22[1];
      if (!v20) {
        goto LABEL_18;
      }
    }
    if (*v21) {
      goto LABEL_24;
    }
  }
  else
  {
    long long v21 = (uint64_t **)v12;
    int v22 = v12;
  }
LABEL_18:
  uint64_t v24 = (uint64_t *)operator new(0x38uLL);
  uint64_t v25 = (std::string *)(v24 + 4);
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::__init_copy_ctor_external(v25, v87.__r_.__value_.__l.__data_, v87.__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)&v25->__r_.__value_.__l.__data_ = *(_OWORD *)&v87.__r_.__value_.__l.__data_;
    v24[6] = v87.__r_.__value_.__r.__words[2];
  }
  uint64_t *v24 = 0;
  v24[1] = 0;
  _OWORD v24[2] = (uint64_t)v22;
  NSObject *v21 = v24;
  uint64_t v26 = (uint64_t *)**v13;
  if (v26)
  {
    std::__shared_weak_count *v13 = v26;
    uint64_t v24 = *v21;
  }
  std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*v19, v24);
  unint64_t v13[2] = (uint64_t *)((char *)v13[2] + 1);
LABEL_24:
  long long v27 = *(NSObject **)(a1 + 96);
  if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_31;
  }
  uint64_t v28 = "non";
  if (a2) {
    uint64_t v28 = (const char *)&unk_222543CCE;
  }
  *(_DWORD *)int buf = 136315650;
  *(void *)&uint8_t buf[4] = "clientStarted";
  uint64_t v29 = &v87;
  if ((v87.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    uint64_t v29 = (std::string *)v87.__r_.__value_.__r.__words[0];
  }
  *(_WORD *)&buf[12] = 2080;
  *(void *)&buf[14] = v28;
  *(_WORD *)&buf[22] = 2080;
  v106 = v29;
  uint64_t v16 = "#I %s: %s primary client %s activated";
  uint64_t v17 = v27;
  uint32_t v18 = 32;
LABEL_30:
  _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
LABEL_31:
  if (a5 == 1)
  {
    dispatch_object_t v30 = *(uint64_t **)(a1 + 360);
    if (v30)
    {
      do
      {
        while (1)
        {
          uint64_t v31 = (uint64_t **)v30;
          int v32 = *((_DWORD *)v30 + 8);
          if (v32 <= a4) {
            break;
          }
          dispatch_object_t v30 = *v31;
          long long v33 = v31;
          if (!*v31) {
            goto LABEL_41;
          }
        }
        if (v32 >= a4)
        {
          uint64_t v36 = (char *)v31;
          goto LABEL_44;
        }
        dispatch_object_t v30 = v31[1];
      }
      while (v30);
      long long v33 = v31 + 1;
    }
    else
    {
      long long v33 = (uint64_t **)(a1 + 360);
      uint64_t v31 = (uint64_t **)(a1 + 360);
    }
LABEL_41:
    uint64_t v36 = (char *)operator new(0x48uLL);
    *((_DWORD *)v36 + 8) = a4;
    *(_OWORD *)(v36 + 40) = 0u;
    *(_OWORD *)(v36 + 56) = 0u;
    *(void *)uint64_t v36 = 0;
    *((void *)v36 + 1) = 0;
    *((void *)v36 + 2) = v31;
    *long long v33 = (uint64_t *)v36;
    uint64_t v34 = **(void **)(a1 + 352);
    CFTypeID v35 = (uint64_t *)v36;
    if (v34)
    {
      *(void *)(a1 + 352) = v34;
      CFTypeID v35 = *v33;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 360), v35);
    ++*(void *)(a1 + 368);
LABEL_44:
    uint64_t v38 = *((void *)this + 2);
    uint64_t v37 = *((void *)this + 3);
    if (v37) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
    }
    uint64_t v39 = (std::__shared_weak_count *)*((void *)v36 + 8);
    *((void *)v36 + 7) = v38;
    *((void *)v36 + 8) = v37;
    if (v39) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v39);
    }
  }
  if (a2)
  {
    uint64_t v40 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "clientStarted";
      _os_log_impl(&dword_22231A000, v40, OS_LOG_TYPE_DEFAULT, "#I %s: basebandOn", buf, 0xCu);
    }
    uint64_t v42 = *((void *)this + 2);
    uint64_t v41 = *((void *)this + 3);
    if (v41) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
    }
    int v43 = *(std::__shared_weak_count **)(a1 + 168);
    *(void *)(a1 + 160) = v42;
    *(void *)(a1 + 168) = v41;
    if (v43) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v43);
    }
    v86[0] = MEMORY[0x263EF8330];
    v86[1] = 0x40000000;
    v86[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke;
    v86[3] = &__block_descriptor_tmp_9;
    v86[4] = a1;
    *(void *)int buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v106 = (std::string *)&unk_26460B678;
    uint64_t v107 = v86;
    qmi::Client::setIndHandler();
    v85[0] = MEMORY[0x263EF8330];
    v85[1] = 0x40000000;
    v85[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_2;
    v85[3] = &__block_descriptor_tmp_7_3;
    v85[4] = a1;
    *(void *)int buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds15LTEAttachParams10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v106 = (std::string *)&unk_26460B6A0;
    uint64_t v107 = v85;
    qmi::Client::setIndHandler();
    v84[0] = MEMORY[0x263EF8330];
    v84[1] = 0x40000000;
    v84[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_3;
    v84[3] = &__block_descriptor_tmp_8_1;
    v84[4] = a1;
    *(void *)int buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds13FDBackoffTime10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v106 = (std::string *)&unk_26460B6C8;
    uint64_t v107 = v84;
    uint64_t v44 = (capabilities::ct *)qmi::Client::setIndHandler();
    if (capabilities::ct::supports5GSlicing(v44))
    {
      v83[0] = MEMORY[0x263EF8330];
      v83[1] = 0x40000000;
      v83[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_4;
      v83[3] = &__block_descriptor_tmp_9_2;
      v83[4] = a1;
      *(void *)int buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds6TdInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v106 = (std::string *)&unk_26460B6F0;
      uint64_t v107 = v83;
      qmi::Client::setIndHandler();
      v82[0] = MEMORY[0x263EF8330];
      v82[1] = 0x40000000;
      v82[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_5;
      v82[3] = &__block_descriptor_tmp_10_1;
      v82[4] = a1;
      *(void *)int buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds9RouteInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v106 = (std::string *)&unk_26460B718;
      uint64_t v107 = v82;
      qmi::Client::setIndHandler();
      v81[0] = MEMORY[0x263EF8330];
      v81[1] = 0x40000000;
      v81[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_6;
      v81[3] = &__block_descriptor_tmp_11_0;
      v81[4] = a1;
      *(void *)int buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds16PduSessionLookup10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v106 = (std::string *)&unk_26460B740;
      uint64_t v107 = v81;
      qmi::Client::setIndHandler();
    }
    QMIDataCommandDriver::resetSlicing_sync((QMIDataCommandDriver *)a1, 1);
    v80[0] = MEMORY[0x263EF8330];
    v80[1] = 0x40000000;
    v80[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_7;
    v80[3] = &__block_descriptor_tmp_12_5;
    v80[4] = a1;
    *(void *)int buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds10Congestion10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    v106 = (std::string *)&unk_26460B768;
    uint64_t v107 = v80;
    unsigned __int16 v45 = (capabilities::ct *)qmi::Client::setIndHandler();
    if (capabilities::ct::supportsQMIWakeUpForDFC(v45))
    {
      v79[0] = MEMORY[0x263EF8330];
      v79[1] = 0x40000000;
      v79[2] = ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_8;
      v79[3] = &__block_descriptor_tmp_13_3;
      v79[4] = a1;
      *(void *)int buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNK3qmi6Client13setIndHandlerIRKN3wds8WakeUpAp10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
      v106 = (std::string *)&unk_26460B790;
      uint64_t v107 = v79;
      qmi::Client::setIndHandler();
      qmi::Client::setIndShouldWake((qmi::Client *)(a1 + 144));
    }
    QMIDataCommandDriver::updateCellularDataStatusInfo_sync((QMIDataCommandDriver *)a1, *(unsigned char *)(a1 + 344));
    uint64_t v46 = *(void *)(a1 + 160);
    uint64_t v47 = *(NSObject **)(a1 + 96);
    BOOL v48 = os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT);
    if (!v46)
    {
      if (v48)
      {
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = "sendWdsIndicationRegisterReq_sync";
        _os_log_impl(&dword_22231A000, v47, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
      }
      goto LABEL_122;
    }
    if (v48)
    {
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = "sendWdsIndicationRegisterReq_sync";
      _os_log_impl(&dword_22231A000, v47, OS_LOG_TYPE_DEFAULT, "#I %s: Sending WDS Indication Register (control point)", buf, 0xCu);
    }
    long long v103 = 0u;
    long long v104 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v103);
    v101[0] = MEMORY[0x263EF8330];
    v101[1] = 0x40000000;
    v101[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke;
    v101[3] = &__block_descriptor_tmp_76_1;
    char v102 = 1;
    uint64_t v49 = (const void **)*((void *)&v103 + 1);
    if (*((void *)&v103 + 1) != (void)v104)
    {
      while (*((unsigned char *)*v49 + 8) != 34)
      {
        if (++v49 == (const void **)v104) {
          goto LABEL_71;
        }
      }
    }
    if (v49 == (const void **)v104) {
LABEL_71:
    }
      operator new();
    if (v50)
    {
      long long v51 = (capabilities::ct *)___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke((uint64_t)v101, v50 + 9);
      int v52 = capabilities::ct::supportsThroughputEngineering(v51);
      unint64_t v53 = (const void **)v104;
      if (v52)
      {
        for (uint64_t i = (const void **)*((void *)&v103 + 1); ; ++i)
        {
          if (i == (const void **)v104) {
            goto LABEL_82;
          }
          if (*((unsigned char *)*i + 8) == 24) {
            break;
          }
        }
        if (i == (const void **)v104) {
LABEL_82:
        }
          operator new();
        if (!v55) {
          goto LABEL_138;
        }
        v55[9] = 1;
      }
      v99[0] = MEMORY[0x263EF8330];
      v99[1] = 0x40000000;
      v99[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_3;
      v99[3] = &__block_descriptor_tmp_82_1;
      char v100 = 1;
      uint64_t v56 = (const void **)*((void *)&v103 + 1);
      if (*((const void ***)&v103 + 1) == v53) {
        goto LABEL_90;
      }
      while (*((unsigned __int8 *)*v56 + 8) != 161)
      {
        if (++v56 == v53) {
          goto LABEL_90;
        }
      }
      if (v56 == v53) {
LABEL_90:
      }
        operator new();
      if (v57)
      {
        int v58 = (capabilities::ct *)___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_3((uint64_t)v99, v57 + 9);
        uint64_t v59 = (capabilities::ct *)capabilities::ct::supports5GSlicing(v58);
        if (v59)
        {
          v97[0] = MEMORY[0x263EF8330];
          v97[1] = 0x40000000;
          v97[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_4;
          v97[3] = &__block_descriptor_tmp_84_2;
          char v98 = 1;
          uint64_t v60 = (const void **)*((void *)&v103 + 1);
          if (*((void *)&v103 + 1) != (void)v104)
          {
            while (*((unsigned char *)*v60 + 8) != 55)
            {
              if (++v60 == (const void **)v104) {
                goto LABEL_99;
              }
            }
          }
          if (v60 == (const void **)v104) {
LABEL_99:
          }
            operator new();
          if (!v61) {
            goto LABEL_138;
          }
          ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_4((uint64_t)v97, v61 + 9);
          v95[0] = MEMORY[0x263EF8330];
          v95[1] = 0x40000000;
          v95[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_5;
          v95[3] = &__block_descriptor_tmp_86_0;
          char v96 = 1;
          uint64_t v62 = (const void **)*((void *)&v103 + 1);
          if (*((void *)&v103 + 1) != (void)v104)
          {
            while (*((unsigned char *)*v62 + 8) != 56)
            {
              if (++v62 == (const void **)v104) {
                goto LABEL_107;
              }
            }
          }
          if (v62 == (const void **)v104) {
LABEL_107:
          }
            operator new();
          if (!v63) {
            goto LABEL_138;
          }
          uint64_t v59 = (capabilities::ct *)___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_5((uint64_t)v95, v63 + 9);
        }
        if (!capabilities::ct::supports5G(v59))
        {
LABEL_117:
          v88[5] = a1 + 144;
          uint64_t v89 = QMIServiceMsg::create();
          int v90 = 25000;
          uint64_t v91 = 0;
          long long aBlock = 0;
          v88[0] = MEMORY[0x263EF8330];
          v88[1] = 0x40000000;
          v88[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_7;
          v88[3] = &__block_descriptor_tmp_90_0;
          v88[4] = a1;
          *(void *)int buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          v106 = (std::string *)&unk_26460B858;
          uint64_t v107 = v88;
          long long v66 = _Block_copy(buf);
          long long aBlock = v66;
          if (v89)
          {
            qmi::Client::send();
            long long v66 = aBlock;
          }
          if (v66) {
            _Block_release(v66);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v103);
LABEL_122:
          QMIDataCommandDriver::sendWdsSetEventReportReq_sync((QMIDataCommandDriver *)a1, 1);
          QMIDataCommandDriver::sendGetDeviceNAIRequest_sync((QMIDataCommandDriver *)a1);
          if ((capabilities::ct::supportsDataSystemDetermination(v67) & 1) == 0) {
            QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync((QMIDataCommandDriver *)a1);
          }
          uint64_t v68 = *(std::__shared_weak_count **)(a1 + 48);
          if (v68)
          {
            uint64_t v69 = std::__shared_weak_count::lock(v68);
            if (v69)
            {
              uint64_t v70 = v69;
              uint64_t v71 = *(void *)(a1 + 40);
              if (v71)
              {
                (*(void (**)(uint64_t))(*(void *)v71 + 320))(v71);
                *(_WORD *)(a1 + 488) = 0;
                std::string::size_type v72 = *(NSObject **)(a1 + 96);
                if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)int buf = 136315138;
                  *(void *)&uint8_t buf[4] = "clientStarted";
                  _os_log_impl(&dword_22231A000, v72, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured: fSliceFlag reset", buf, 0xCu);
                }
                v73 = *(std::__shared_weak_count **)(a1 + 328);
                if (v73)
                {
                  std::string::size_type v74 = std::__shared_weak_count::lock(v73);
                  if (v74)
                  {
                    dispatch_object_t v75 = v74;
                    uint64_t v76 = *(void *)(a1 + 320);
                    if (v76)
                    {
                      uint64_t v77 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
                      uint64_t v78 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v76 + 88))(v76, v77);
                      (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 408))(a1, v78);
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v75);
                  }
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v70);
            }
          }
          goto LABEL_135;
        }
        v93[0] = MEMORY[0x263EF8330];
        v93[1] = 0x40000000;
        v93[2] = ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_6;
        v93[3] = &__block_descriptor_tmp_88_1;
        char v94 = 1;
        __int16 v64 = (const void **)*((void *)&v103 + 1);
        if (*((void *)&v103 + 1) != (void)v104)
        {
          while (*((unsigned __int8 *)*v64 + 8) != 162)
          {
            if (++v64 == (const void **)v104) {
              goto LABEL_116;
            }
          }
        }
        if (v64 == (const void **)v104) {
LABEL_116:
        }
          operator new();
        if (v65)
        {
          ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_6((uint64_t)v93, v65 + 9);
          goto LABEL_117;
        }
      }
    }
LABEL_138:
    __cxa_bad_cast();
  }
LABEL_135:
  if (SHIBYTE(v87.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v87.__r_.__value_.__l.__data_);
  }
}

void sub_2223D47E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,char a60)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v61);
  std::__shared_weak_count::__release_shared[abi:ne180100](v60);
  if (a54 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(QMIDataCommandDriver **)(a1 + 32);
  BOOL v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)v2 + 5);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        uint64_t v8 = *((void *)v2 + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = "handleWdsEventReportInd_sync";
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS Set Event Report Indications", (uint8_t *)&buf, 0xCu);
        }
        v20[0] = MEMORY[0x263EF8330];
        v20[1] = 0x40000000;
        void v20[2] = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke;
        v20[3] = &__block_descriptor_tmp_35_0;
        void v20[4] = v2;
        *(void *)&long long buf = v20;
        uint64_t v9 = (capabilities::ct *)qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(a2, 24, (uint64_t)&buf);
        if ((capabilities::ct::supportsDataSystemDetermination(v9) & 1) == 0)
        {
          uint64_t v14 = 0;
          uint64_t v15 = (uint64_t)&v14;
          uint64_t v16 = 0x2000000000;
          LOBYTE(v17) = 0;
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 0x40000000;
          uint64_t v24 = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_2;
          uint64_t v25 = &unk_26460AC98;
          uint64_t v26 = &v14;
          long long v27 = v2;
          v19[0] = &buf;
          qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(a2, 29, (uint64_t)v19);
          if (!*(unsigned char *)(v15 + 24)) {
            QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(v2);
          }
          v19[0] = MEMORY[0x263EF8330];
          v19[1] = 0x40000000;
          v19[2] = ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_3;
          void v19[3] = &__block_descriptor_tmp_38;
          void v19[4] = v2;
          int v22 = v19;
          qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(a2, 36, (uint64_t)&v22);
          _Block_object_dispose(&v14, 8);
        }
        uint64_t v14 = MEMORY[0x263EF8330];
        uint64_t v15 = 0x40000000;
        uint64_t v16 = (uint64_t)___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_4;
        uint64_t v17 = &__block_descriptor_tmp_40_2;
        uint32_t v18 = v2;
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v12 = TlvValue;
        if (TlvValue)
        {
          int v13 = v11;
          int v22 = (void *)TlvValue;
          char v21 = tlv::parseV<wds::tlv::DataTransmitSpeed>((unint64_t *)&v22, v11);
          if (v22) {
            ((void (*)(uint64_t *, char *))v16)(&v14, &v21);
          }
          else {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 161, v12, v13);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D4BAC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Block_object_dispose(va, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v74 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v3 = (std::__shared_weak_count *)v2[6];
  if (!v3) {
    return;
  }
  long long v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return;
  }
  uint64_t v6 = v5;
  uint64_t v7 = v2[5];
  if (v7)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
    {
      uint64_t v8 = (std::__shared_weak_count *)v2[6];
      if (v8)
      {
        uint64_t v9 = std::__shared_weak_count::lock(v8);
        if (v9)
        {
          uint64_t v10 = v9;
          uint64_t v11 = v2[5];
          if (!v11)
          {
LABEL_52:
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            goto LABEL_53;
          }
          uint64_t v12 = v2[12];
          if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf) = 136315138;
            *(void *)((char *)&buf + 4) = "handleWdsLteAttachParamsInd_sync";
            _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS LTE Attach Params Indication", (uint8_t *)&buf, 0xCu);
          }
          uint64_t v49 = 0;
          char v50 = &v49;
          uint64_t v51 = 0x2000000000;
          char v52 = 0;
          v45[0] = MEMORY[0x263EF8330];
          v45[1] = 0x40000000;
          uint64_t v46 = (uint64_t (*)(uint64_t, long long *))___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke;
          uint64_t v47 = &unk_26460AD00;
          BOOL v48 = &v49;
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          uint64_t v15 = TlvValue;
          if (TlvValue)
          {
            int v16 = v14;
            *(void *)&long long buf = TlvValue;
            LOBYTE(v61) = tlv::parseV<wds::tlv::AttachParamsValid>((unint64_t *)&buf, v14);
            if ((void)buf) {
              v46((uint64_t)v45, &v61);
            }
            else {
              ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v15, v16);
            }
          }
          *(void *)&long long buf = 0;
          *((void *)&buf + 1) = &buf;
          uint64_t v67 = 0xD002000000;
          uint64_t v68 = __Block_byref_object_copy__1;
          long long v70 = 0u;
          long long v71 = 0u;
          memset(v72, 0, sizeof(v72));
          uint64_t v69 = __Block_byref_object_dispose__1;
          uint64_t v73 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)v72 + 12));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v72[2] + 4));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v72[3] + 12));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v72[5] + 4));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v72[6] + 12));
          if (*((unsigned char *)v50 + 24))
          {
            *(_DWORD *)(*((void *)&buf + 1) + 72) = 1;
            *(void *)&long long v61 = MEMORY[0x263EF8330];
            *((void *)&v61 + 1) = 0x40000000;
            uint64_t v62 = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_43;
            __int16 v63 = &unk_26460AD28;
            p_long long buf = &buf;
            char v65 = v2;
            v43[0] = &v61;
            qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(a2, (uint64_t)v43);
            if (*(char *)(*((void *)&buf + 1) + 71) < 0) {
              uint64_t v17 = *(void *)(*((void *)&buf + 1) + 56);
            }
            else {
              uint64_t v17 = *(unsigned __int8 *)(*((void *)&buf + 1) + 71);
            }
            if (!v17) {
              goto LABEL_49;
            }
            v44[0] = MEMORY[0x263EF8330];
            v44[1] = 0x40000000;
            v44[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2;
            v44[3] = &unk_26460AD50;
            v44[4] = &buf;
            v43[0] = v44;
            qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(a2, (uint64_t)v43);
            uint64_t v19 = *((void *)&buf + 1);
            if ((*(_DWORD *)(*((void *)&buf + 1) + 80) | 2) == 3)
            {
              v43[0] = MEMORY[0x263EF8330];
              v43[1] = 0x40000000;
              v43[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_3;
              v43[3] = &unk_26460AD78;
              v43[4] = &buf;
              v43[5] = v2;
              v42[0] = v43;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(a2, 18, (uint64_t)v42);
              v42[0] = MEMORY[0x263EF8330];
              v42[1] = 0x40000000;
              v42[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_4;
              v42[3] = &unk_26460ADA0;
              v42[4] = &buf;
              v42[5] = v2;
              v41[0] = v42;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(a2, 19, (uint64_t)v41);
              v41[0] = MEMORY[0x263EF8330];
              v41[1] = 0x40000000;
              void v41[2] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_5;
              v41[3] = &unk_26460ADC8;
              v41[4] = &buf;
              v41[5] = v2;
              *(void *)int v58 = v41;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(a2, 20, (uint64_t)v58);
              uint64_t v20 = v2[12];
              BOOL v21 = os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT);
              uint64_t v19 = *((void *)&buf + 1);
              if (v21)
              {
                int v22 = v34;
                CSIPacketAddress::operator std::string();
                if (SHIBYTE(v35) < 0) {
                  int v22 = (void **)v34[0];
                }
                CSIPacketAddress::operator std::string();
                int v23 = SHIBYTE(v56);
                uint64_t v24 = *(unsigned char **)v53;
                CSIPacketAddress::operator std::string();
                uint64_t v25 = v53;
                if (v23 < 0) {
                  uint64_t v25 = v24;
                }
                uint64_t v26 = __p;
                if (v40 < 0) {
                  uint64_t v26 = (void **)__p[0];
                }
                *(_DWORD *)int v58 = 136315906;
                *(void *)&v58[4] = "handleWdsLteAttachParamsInd_sync";
                *(_WORD *)&v58[12] = 2080;
                *(void *)&v58[14] = v22;
                *(_WORD *)&v58[22] = 2080;
                uint64_t v59 = v25;
                LOWORD(v60) = 2080;
                *(void *)((char *)&v60 + 2) = v26;
                _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv4: %s, Mask: %s, Gateway: %s", v58, 0x2Au);
                if (v40 < 0) {
                  operator delete(__p[0]);
                }
                if (SHIBYTE(v56) < 0) {
                  operator delete(*(void **)v53);
                }
                if (SHIBYTE(v35) < 0) {
                  operator delete(v34[0]);
                }
                uint64_t v19 = *((void *)&buf + 1);
              }
            }
            if ((*(_DWORD *)(v19 + 80) & 0xFFFFFFFE) == 2)
            {
              *(void *)int v58 = MEMORY[0x263EF8330];
              *(void *)&v58[8] = 0x40000000;
              *(void *)&v58[16] = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_50;
              uint64_t v59 = &unk_26460ADF0;
              *(void *)&long long v60 = &buf;
              *((void *)&v60 + 1) = v2;
              v34[0] = v58;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(a2, 21, (uint64_t)v34);
              v34[0] = (void *)MEMORY[0x263EF8330];
              v34[1] = (void *)0x40000000;
              CFTypeID v35 = ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2_52;
              uint64_t v36 = &unk_26460AE18;
              uint64_t v37 = &buf;
              uint64_t v38 = v2;
              *(void *)unint64_t v53 = v34;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(a2, 22, (uint64_t)v53);
              long long v27 = v2[12];
              if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
              {
                CSIPacketAddress::operator std::string();
                int v28 = v40;
                uint64_t v29 = (void **)__p[0];
                CSIPacketAddress::operator std::string();
                dispatch_object_t v30 = __p;
                if (v28 < 0) {
                  dispatch_object_t v30 = v29;
                }
                if (v33 >= 0) {
                  uint64_t v31 = &v32;
                }
                else {
                  uint64_t v31 = v32;
                }
                *(_DWORD *)unint64_t v53 = 136315650;
                *(void *)&v53[4] = "handleWdsLteAttachParamsInd_sync";
                __int16 v54 = 2080;
                uint64_t v55 = v30;
                __int16 v56 = 2080;
                char v57 = v31;
                _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv6: %s, Gateway: %s", v53, 0x20u);
                if (v33 < 0) {
                  operator delete(v32);
                }
                if (v40 < 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
          else
          {
            *(_DWORD *)(*((void *)&buf + 1) + 72) = -1;
            uint32_t v18 = v2[12];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              LODWORD(v61) = 136315138;
              *(void *)((char *)&v61 + 4) = "handleWdsLteAttachParamsInd_sync";
              _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: AttachAPN parameters have been reset", (uint8_t *)&v61, 0xCu);
            }
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 632))(v11, *((void *)&buf + 1) + 40);
LABEL_49:
          _Block_object_dispose(&buf, 8);
          if (SHIBYTE(v71) < 0) {
            operator delete(*((void **)&v70 + 1));
          }
          _Block_object_dispose(&v49, 8);
          goto LABEL_52;
        }
      }
    }
  }
LABEL_53:

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_2223D5410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a72, 8);
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  _Block_object_dispose(&a52, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v73);
  std::__shared_weak_count::__release_shared[abi:ne180100](v72);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_3(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  BOOL v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v2[5];
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          uint64_t v8 = (std::__shared_weak_count *)v2[6];
          if (v8)
          {
            uint64_t v9 = std::__shared_weak_count::lock(v8);
            if (v9)
            {
              uint64_t v10 = v9;
              uint64_t v11 = v2[5];
              if (v11)
              {
                uint64_t v12 = v2[12];
                if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = "handleWdsFDBackoffTimeInd_sync";
                  _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS FastDormancy Backoff Time Indication", (uint8_t *)&buf, 0xCu);
                }
                uint64_t v19 = 0;
                uint64_t v20 = &v19;
                uint64_t v21 = 0x2000000000;
                int v22 = 0;
                *(void *)&long long buf = MEMORY[0x263EF8330];
                *((void *)&buf + 1) = 0x40000000;
                int v28 = ___ZN20QMIDataCommandDriver30handleWdsFDBackoffTimeInd_syncERKN3wds13FDBackoffTime10IndicationE_block_invoke;
                uint64_t v29 = &unk_26460AE40;
                dispatch_object_t v30 = &v19;
                uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
                uint64_t v15 = TlvValue;
                if (TlvValue)
                {
                  int v16 = v14;
                  *(void *)uint64_t v24 = TlvValue;
                  int v23 = tlv::parseV<wds::tlv::BackoffTimeMessage>((unint64_t *)v24, v14);
                  if (*(void *)v24) {
                    v28((uint64_t)&buf, &v23);
                  }
                  else {
                    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v15, v16);
                  }
                }
                unsigned int v17 = *((_DWORD *)v20 + 6);
                if (v17)
                {
                  uint32_t v18 = v2[12];
                  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_DWORD *)uint64_t v24 = 136315394;
                    *(void *)&v24[4] = "handleWdsFDBackoffTimeInd_sync";
                    __int16 v25 = 1024;
                    unsigned int v26 = v17;
                    _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: FastDormancy Backoff Timeout: %u", v24, 0x12u);
                    unsigned int v17 = *((_DWORD *)v20 + 6);
                  }
                  (*(void (**)(uint64_t, void))(*(void *)v11 + 640))(v11, v17);
                }
                _Block_object_dispose(&v19, 8);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D57A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  _Block_object_dispose(va, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_4(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          uint64_t v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            uint64_t v9 = std::__shared_weak_count::lock(v8);
            if (v9)
            {
              uint64_t v10 = v9;
              if (*(void *)(v2 + 40))
              {
                uint64_t v11 = *(NSObject **)(v2 + 96);
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = "handleWdsTdInfoInd_sync";
                  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS TdInfo Indication", (uint8_t *)&buf, 0xCu);
                }
                uint64_t v12 = *(std::__shared_weak_count **)(v2 + 328);
                if (v12)
                {
                  int v13 = std::__shared_weak_count::lock(v12);
                  if (v13)
                  {
                    int v14 = v13;
                    uint64_t v15 = *(void *)(v2 + 320);
                    if (v15)
                    {
                      int v16 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)v2);
                      *((void *)&buf + 1) = v14;
                      uint64_t v21 = 0;
                      uint64_t v19 = 0;
                      *(void *)&long long buf = v15;
                      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                      LODWORD(v21) = v16;
                      v18[0] = v15;
                      v18[1] = v14;
                      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                      LODWORD(v19) = v16;
                      unsigned int v17 = (NSObject **)(v2 + 96);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                  }
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D59DC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_5(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          uint64_t v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            uint64_t v9 = std::__shared_weak_count::lock(v8);
            if (v9)
            {
              uint64_t v10 = v9;
              if (*(void *)(v2 + 40))
              {
                uint64_t v11 = *(NSObject **)(v2 + 96);
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = "handleWdsRouteInfoInd_sync";
                  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS RouteInfo Indication", (uint8_t *)&buf, 0xCu);
                }
                uint64_t v12 = *(std::__shared_weak_count **)(v2 + 328);
                if (v12)
                {
                  int v13 = std::__shared_weak_count::lock(v12);
                  if (v13)
                  {
                    int v14 = v13;
                    uint64_t v15 = *(void *)(v2 + 320);
                    if (v15)
                    {
                      int v16 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)v2);
                      *((void *)&buf + 1) = v14;
                      uint64_t v21 = 0;
                      uint64_t v19 = 0;
                      *(void *)&long long buf = v15;
                      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                      LODWORD(v21) = v16;
                      v18[0] = v15;
                      v18[1] = v14;
                      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                      LODWORD(v19) = v16;
                      unsigned int v17 = (NSObject **)(v2 + 96);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                  }
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D5C2C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_6(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v69 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(unsigned __int16 ***)(a1 + 32);
  BOOL v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v2[5];
      if (v7)
      {
        if (((*(uint64_t (**)(unsigned __int16 *))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          uint64_t v8 = (std::__shared_weak_count *)v2[6];
          if (v8)
          {
            uint64_t v9 = std::__shared_weak_count::lock(v8);
            if (v9)
            {
              uint64_t v10 = v9;
              if (v2[5])
              {
                uint64_t v11 = v2[12];
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  LODWORD(buf) = 136315138;
                  *(void *)((char *)&buf + 4) = "handleWdsPduSessionLookupInd_sync";
                  _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS PduSessionLookup Indication", (uint8_t *)&buf, 0xCu);
                }
                uint64_t v12 = (std::__shared_weak_count *)v2[41];
                if (v12)
                {
                  int v13 = std::__shared_weak_count::lock(v12);
                  if (v13)
                  {
                    int v14 = v13;
                    if (v2[40])
                    {
                      uint64_t v54 = 0;
                      uint64_t v55 = &v54;
                      uint64_t v56 = 0x2000000000;
                      __int16 v57 = 0;
                      v50[0] = MEMORY[0x263EF8330];
                      v50[1] = 0x40000000;
                      uint64_t v51 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke;
                      char v52 = &unk_26460B5E0;
                      unint64_t v53 = &v54;
                      uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
                      uint64_t v17 = TlvValue;
                      if (TlvValue)
                      {
                        int v18 = v16;
                        *(void *)&long long buf = TlvValue;
                        LODWORD(v42[0]) = tlv::parseV<wds::tlv::TransactionId>((unint64_t *)&buf, v16);
                        if ((void)buf) {
                          v51((uint64_t)v50, v42);
                        }
                        else {
                          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v17, v18);
                        }
                      }
                      uint64_t v46 = 0;
                      uint64_t v47 = &v46;
                      uint64_t v48 = 0x2000000000;
                      int v49 = 0;
                      v42[0] = MEMORY[0x263EF8330];
                      v42[1] = 0x40000000;
                      int v43 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_2;
                      uint64_t v44 = &unk_26460B608;
                      unsigned __int16 v45 = &v46;
                      uint64_t v19 = qmi::MessageBase::findTlvValue(a2);
                      uint64_t v21 = v19;
                      if (v19)
                      {
                        int v22 = v20;
                        *(void *)&long long buf = v19;
                        LODWORD(v38[0]) = tlv::parseV<wds::tlv::SliceDnnLookupStatus>((unint64_t *)&buf, v20);
                        if ((void)buf) {
                          v43((uint64_t)v42, v38);
                        }
                        else {
                          ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v21, v22);
                        }
                      }
                      *(void *)&long long buf = 0;
                      *((void *)&buf + 1) = &buf;
                      uint64_t v64 = 0x4002000000;
                      char v65 = __Block_byref_object_copy__214;
                      long long v66 = __Block_byref_object_dispose__215;
                      v67[0] = 0;
                      v67[1] = 0;
                      uint64_t v68 = 0;
                      std::string::basic_string[abi:ne180100]<0>(v67, (char *)&unk_222543CCE);
                      if (!*((_DWORD *)v47 + 6))
                      {
                        v38[0] = MEMORY[0x263EF8330];
                        v38[1] = 0x40000000;
                        uint64_t v39 = ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_216;
                        char v40 = &unk_26460B630;
                        p_long long buf = &buf;
                        int v32 = (std::string::value_type *)qmi::MessageBase::findTlvValue(a2);
                        uint64_t v34 = v32;
                        if (v32)
                        {
                          int v35 = v33;
                          int v58 = v32;
                          memset(&v59, 0, sizeof(v59));
                          tlv::parseV<wds::tlv::Dnn>(&v58, v33, &v59);
                          uint64_t v36 = v58;
                          if (v58) {
                            v39((uint64_t)v38, &v59);
                          }
                          if (SHIBYTE(v59.__r_.__value_.__r.__words[2]) < 0) {
                            operator delete(v59.__r_.__value_.__l.__data_);
                          }
                          if (!v36) {
                            ((void (*)(void, uint64_t, std::string::value_type *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v34, v35);
                          }
                        }
                      }
                      int v23 = v2[53];
                      if (v23 && (int v24 = *v23, v24 == *((unsigned __int16 *)v55 + 12)))
                      {
                        __int16 v25 = v2 + 53;
                        unsigned int v26 = v2[12];
                        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
                        {
                          long long v27 = (void *)(*((void *)&buf + 1) + 40);
                          if (*(char *)(*((void *)&buf + 1) + 63) < 0) {
                            long long v27 = (void *)*v27;
                          }
                          int v28 = wds::asString(*((_DWORD *)v47 + 6));
                          LODWORD(v59.__r_.__value_.__l.__data_) = 136315906;
                          *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleWdsPduSessionLookupInd_sync";
                          WORD2(v59.__r_.__value_.__r.__words[1]) = 2080;
                          *(std::string::size_type *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v27;
                          HIWORD(v59.__r_.__value_.__r.__words[2]) = 1024;
                          int v60 = v24;
                          __int16 v61 = 2080;
                          uint64_t v62 = v28;
                          _os_log_impl(&dword_22231A000, v26, OS_LOG_TYPE_DEFAULT, "#I %s: WDS PduSessionLookup: dnn=%s for tid %u (%s)", (uint8_t *)&v59, 0x26u);
                          int v23 = *v25;
                        }
                        uint64_t v29 = *((void *)v23 + 4);
                        if (!v29) {
                          std::__throw_bad_function_call[abi:ne180100]();
                        }
                        (*(void (**)(uint64_t, uint64_t))(*(void *)v29 + 48))(v29, *((void *)&buf + 1) + 40);
                        dispatch_object_t v30 = (std::__shared_weak_count *)v2[54];
                        *__int16 v25 = 0;
                        v2[54] = 0;
                        if (v30) {
                          std::__shared_weak_count::__release_shared[abi:ne180100](v30);
                        }
                        QMIDataCommandDriver::processPendingLookupRequests_sync((PersonalitySpecificImpl *)v2);
                      }
                      else
                      {
                        uint64_t v31 = v2[12];
                        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
                        {
                          int v37 = *((unsigned __int16 *)v55 + 12);
                          LODWORD(v59.__r_.__value_.__l.__data_) = 136315394;
                          *(std::string::size_type *)((char *)v59.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleWdsPduSessionLookupInd_sync";
                          WORD2(v59.__r_.__value_.__r.__words[1]) = 1024;
                          *(_DWORD *)((char *)&v59.__r_.__value_.__r.__words[1] + 6) = v37;
                          _os_log_error_impl(&dword_22231A000, v31, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: cannot find request for tid %u", (uint8_t *)&v59, 0x12u);
                        }
                      }
                      _Block_object_dispose(&buf, 8);
                      if (SHIBYTE(v68) < 0) {
                        operator delete(v67[0]);
                      }
                      _Block_object_dispose(&v46, 8);
                      _Block_object_dispose(&v54, 8);
                    }
                    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
                  }
                }
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D6268(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a38 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose((const void *)(v41 - 192), 8);
  if (*(char *)(v41 - 129) < 0) {
    operator delete(*(void **)(v41 - 152));
  }
  _Block_object_dispose(&a19, 8);
  _Block_object_dispose(&a28, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v40);
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  std::__shared_weak_count::__release_shared[abi:ne180100](v38);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_7(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  BOOL v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    long long v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *(void *)(v2 + 40);
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          uint64_t v8 = *(std::__shared_weak_count **)(v2 + 48);
          if (v8)
          {
            uint64_t v9 = (capabilities::ct *)std::__shared_weak_count::lock(v8);
            if (v9)
            {
              uint64_t v10 = (std::__shared_weak_count *)v9;
              uint64_t v11 = *(void *)(v2 + 40);
              if (v11 && (capabilities::ct::supports5G(v9) & 1) != 0)
              {
                uint64_t v20 = 0;
                uint64_t v21 = &v20;
                uint64_t v22 = 0x2000000000;
                int v23 = 0;
                v16[0] = MEMORY[0x263EF8330];
                v16[1] = 0x40000000;
                uint64_t v17 = ___ZN20QMIDataCommandDriver24handleCongestionInd_syncERKN3wds10Congestion10IndicationE_block_invoke;
                int v18 = &unk_26460AE68;
                uint64_t v19 = &v20;
                uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
                uint64_t v14 = TlvValue;
                if (TlvValue)
                {
                  int v15 = v13;
                  uint64_t v25 = TlvValue;
                  char v24 = tlv::parseV<wds::tlv::SwitchFromSub>((unint64_t *)&v25, v13);
                  if (v25) {
                    v17((uint64_t)v16, (unsigned __int8 *)&v24);
                  }
                  else {
                    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v14, v15);
                  }
                }
                if (*((_DWORD *)v21 + 6)) {
                  (*(void (**)(uint64_t))(*(void *)v11 + 656))(v11);
                }
                _Block_object_dispose(&v20, 8);
              }
              std::__shared_weak_count::__release_shared[abi:ne180100](v10);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D64F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver13clientStartedEbRKN3qmi6ClientEi18DataProtocolFamily_block_invoke_8(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  uint64_t v2 = (std::__shared_weak_count *)v1[6];
  if (v2)
  {
    BOOL v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      long long v4 = v3;
      uint64_t v5 = v1[5];
      if (v5 && ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 496))(v5) & 1) == 0)
      {
        uint64_t v6 = v1[12];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v7 = 0;
          _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Received wds::WakeUpAp::Indication", v7, 2u);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2223D65E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::updateCellularDataStatusInfo_sync(QMIDataCommandDriver *this, char a2)
{
  if (capabilities::ct::supportsDataQMIExtensions(this))
  {
    *((unsigned char *)this + 344) = a2;
    long long v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = v5;
        uint64_t v7 = *((void *)this + 5);
        if (v7
          && ((*(uint64_t (**)(void))(*(void *)v7 + 496))(*((void *)this + 5)) & 1) == 0
          && *((void *)this + 20))
        {
          *(_OWORD *)std::string __p = 0u;
          long long v22 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
          v19[0] = MEMORY[0x263EF8330];
          v19[1] = 0x40000000;
          v19[2] = ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke;
          void v19[3] = &__block_descriptor_tmp_162;
          char v20 = a2;
          uint64_t v8 = (const void **)__p[1];
          if (__p[1] != (void *)v22)
          {
            while (*((unsigned char *)*v8 + 8) != 16)
            {
              if (++v8 == (const void **)v22) {
                goto LABEL_14;
              }
            }
          }
          if (v8 == (const void **)v22) {
LABEL_14:
          }
            operator new();
          if (!v9) {
            __cxa_bad_cast();
          }
          ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke((uint64_t)v19, v9 + 9);
          uint64_t v14 = (char *)this + 144;
          uint64_t v15 = QMIServiceMsg::create();
          int v16 = 25000;
          uint64_t v17 = 0;
          int v18 = 0;
          v11[0] = MEMORY[0x263EF8330];
          v11[1] = 1174405120;
          v11[2] = ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke_2;
          v11[3] = &__block_descriptor_tmp_165;
          void v11[4] = this;
          void v11[5] = v7;
          uint64_t v12 = v6;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          char v13 = a2;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
          aBlock[3] = &unk_26460B7B8;
          aBlock[4] = v11;
          uint64_t v10 = _Block_copy(aBlock);
          int v18 = v10;
          if (v15)
          {
            qmi::Client::send();
            uint64_t v10 = v18;
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_2223D69A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendWdsSetEventReportReq_sync(QMIDataCommandDriver *this, char a2)
{
  uint64_t v37 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 20);
  uint64_t v5 = *((void *)this + 12);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "sendWdsSetEventReportReq_sync";
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Sending WDS Set Event Report for Dormancy Status , Current data bearer indicator, ReportDataSystemStatus", (uint8_t *)&buf, 0xCu);
    }
    long long v31 = 0u;
    long long v32 = 0u;
    uint64_t v7 = qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v31);
    v29[0] = MEMORY[0x263EF8330];
    v29[1] = 0x40000000;
    v29[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke;
    v29[3] = &__block_descriptor_tmp_59_1;
    char v30 = a2;
    uint64_t v8 = qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>(v7, 19);
    uint64_t v9 = (capabilities::ct *)___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke((uint64_t)v29, v8);
    uint64_t v10 = capabilities::ct::supportsDataSystemDetermination(v9);
    if ((v10 & 1) == 0)
    {
      v27[0] = MEMORY[0x263EF8330];
      v27[1] = 0x40000000;
      v27[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_2;
      v27[3] = &__block_descriptor_tmp_61_0;
      char v28 = a2;
      uint64_t v11 = (const void **)*((void *)&v31 + 1);
      if (*((void *)&v31 + 1) != (void)v32)
      {
        while (*((unsigned char *)*v11 + 8) != 21)
        {
          if (++v11 == (const void **)v32) {
            goto LABEL_14;
          }
        }
      }
      if (v11 == (const void **)v32) {
LABEL_14:
      }
        operator new();
      if (!v12) {
        goto LABEL_38;
      }
      uint64_t v10 = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_2((uint64_t)v27, v12 + 9);
    }
    if ((capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v10) & 1) == 0)
    {
      v25[0] = MEMORY[0x263EF8330];
      v25[1] = 0x40000000;
      _OWORD v25[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_3;
      v25[3] = &__block_descriptor_tmp_63;
      char v26 = a2;
      char v13 = (const void **)*((void *)&v31 + 1);
      if (*((void *)&v31 + 1) != (void)v32)
      {
        while (*((unsigned char *)*v13 + 8) != 26)
        {
          if (++v13 == (const void **)v32) {
            goto LABEL_23;
          }
        }
      }
      if (v13 == (const void **)v32) {
LABEL_23:
      }
        operator new();
      if (!v14) {
        goto LABEL_38;
      }
      ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_3((uint64_t)v25, v14 + 9);
    }
    v23[0] = MEMORY[0x263EF8330];
    v23[1] = 0x40000000;
    v23[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_4;
    v23[3] = &__block_descriptor_tmp_65_0;
    char v24 = a2;
    uint64_t v15 = (const void **)*((void *)&v31 + 1);
    if (*((void *)&v31 + 1) != (void)v32)
    {
      while (*((unsigned __int8 *)*v15 + 8) != 161)
      {
        if (++v15 == (const void **)v32) {
          goto LABEL_31;
        }
      }
    }
    if (v15 == (const void **)v32) {
LABEL_31:
    }
      operator new();
    if (v16)
    {
      ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_4((uint64_t)v23, v16 + 9);
      v18[5] = (char *)this + 144;
      uint64_t v19 = QMIServiceMsg::create();
      int v20 = 25000;
      uint64_t v21 = 0;
      long long aBlock = 0;
      v18[0] = MEMORY[0x263EF8330];
      v18[1] = 0x40000000;
      void v18[2] = ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_5;
      v18[3] = &__block_descriptor_tmp_67_1;
      v18[4] = this;
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 0x40000000;
      uint64_t v34 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetEventReport8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      int v35 = &unk_26460B7E0;
      uint64_t v36 = v18;
      uint64_t v17 = _Block_copy(&buf);
      long long aBlock = v17;
      if (v19)
      {
        qmi::Client::send();
        uint64_t v17 = aBlock;
      }
      if (v17) {
        _Block_release(v17);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v31);
      return;
    }
LABEL_38:
    __cxa_bad_cast();
  }
  if (v6)
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "sendWdsSetEventReportReq_sync";
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", (uint8_t *)&buf, 0xCu);
  }
}

void sub_2223D71B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v6 - 144));
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendGetDeviceNAIRequest_sync(QMIDataCommandDriver *this)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 20);
  BOOL v3 = *((void *)this + 12);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = "sendGetDeviceNAIRequest_sync";
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: sending ReadMIPProfile::Request", (uint8_t *)&buf, 0xCu);
    }
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    uint64_t v5 = (const void **)__p[1];
    if (__p[1] != (void *)v14)
    {
      while (*((unsigned char *)*v5 + 8) != 1)
      {
        if (++v5 == (const void **)v14) {
          goto LABEL_13;
        }
      }
    }
    if (v5 == (const void **)v14) {
LABEL_13:
    }
      operator new();
    if (!v6) {
      __cxa_bad_cast();
    }
    v6[9] = 0;
    void v8[5] = (char *)this + 144;
    uint64_t v9 = QMIServiceMsg::create();
    int v10 = 25000;
    uint64_t v11 = 0;
    long long aBlock = 0;
    v8[0] = MEMORY[0x263EF8330];
    v8[1] = 0x40000000;
    void v8[2] = ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_2;
    v8[3] = &__block_descriptor_tmp_117_0;
    void v8[4] = this;
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 0x40000000;
    int v16 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14ReadMIPProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v17 = &unk_26460B8D0;
    int v18 = v8;
    uint64_t v7 = _Block_copy(&buf);
    long long aBlock = v7;
    if (v9)
    {
      qmi::Client::send();
      uint64_t v7 = aBlock;
    }
    if (v7) {
      _Block_release(v7);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else if (v4)
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)&buf, 2u);
  }
}

void sub_2223D7550(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync(QMIDataCommandDriver *this)
{
  if (*((void *)this + 20))
  {
    memset(v9, 0, sizeof(v9));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
    void v4[5] = (char *)this + 144;
    uint64_t v5 = QMIServiceMsg::create();
    int v6 = 25000;
    uint64_t v7 = 0;
    uint64_t v8 = 0;
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 0x40000000;
    _OWORD v4[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke;
    v4[3] = &__block_descriptor_tmp_120;
    v4[4] = this;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26GetCurrentDataSystemStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_26460B8F8;
    aBlock[4] = v4;
    uint64_t v2 = _Block_copy(aBlock);
    uint64_t v8 = v2;
    if (v5)
    {
      qmi::Client::send();
      uint64_t v2 = v8;
    }
    if (v2) {
      _Block_release(v2);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  }
  else
  {
    BOOL v3 = *((void *)this + 12);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(aBlock[0]) = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)aBlock, 2u);
    }
  }
}

void sub_2223D76F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::clientStarted(uint64_t a1, int a2, qmi::Client *a3, int a4, int a5)
{
}

void QMIDataCommandDriver::clientStopped(QMIDataCommandDriver *a1, int a2, qmi::Client *this, int a4, int a5)
{
  uint64_t v50 = *MEMORY[0x263EF8340];
  if (*((void *)this + 2))
  {
    memset(&__p, 0, sizeof(__p));
    uint64_t Name = qmi::Client::getName(this);
    if (*(char *)(Name + 23) < 0)
    {
      std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)Name, *(void *)(Name + 8));
    }
    else
    {
      long long v10 = *(_OWORD *)Name;
      __p.__r_.__value_.__r.__words[2] = *(void *)(Name + 16);
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v10;
    }
    uint64_t v12 = std::__tree<std::string>::find<std::string>(*((void *)a1 + 42), (void **)&__p.__r_.__value_.__l.__data_);
    char v13 = (void ***)*((void *)a1 + 42);
    if (v13 + 1 == (void ***)v12)
    {
      int v18 = *((void *)a1 + 12);
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      p_p = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "clientStopped";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = p_p;
      int v20 = "#E %s: client %s already inactive !";
      uint64_t v21 = v18;
      uint32_t v22 = 22;
    }
    else
    {
      long long v14 = std::__tree<std::string>::find<std::string>(*((void *)a1 + 42), (void **)&__p.__r_.__value_.__l.__data_);
      if (v13 + 1 != (void ***)v14)
      {
        uint64_t v15 = v14;
        int v16 = (void **)v14[1];
        if (v16)
        {
          do
          {
            uint64_t v17 = v16;
            int v16 = (void **)*v16;
          }
          while (v16);
        }
        else
        {
          int v23 = v14;
          do
          {
            uint64_t v17 = (void **)v23[2];
            BOOL v24 = *v17 == v23;
            int v23 = v17;
          }
          while (!v24);
        }
        if (*v13 == v14) {
          std::__shared_weak_count *v13 = v17;
        }
        uint64_t v25 = (uint64_t *)v13[1];
        unint64_t v13[2] = (void **)((char *)v13[2] - 1);
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v25, (uint64_t *)v15);
        if (*((char *)v15 + 55) < 0) {
          operator delete(v15[4]);
        }
        operator delete(v15);
      }
      char v26 = *((void *)a1 + 12);
      if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_31;
      }
      long long v27 = "non";
      if (a2) {
        long long v27 = (const char *)&unk_222543CCE;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "clientStopped";
      char v28 = &__p;
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        char v28 = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v27;
      *(_WORD *)&buf[22] = 2080;
      *(void *)&unsigned char buf[24] = v28;
      int v20 = "#I %s: %s primary client %s deactivated";
      uint64_t v21 = v26;
      uint32_t v22 = 32;
    }
    _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, v20, buf, v22);
LABEL_31:
    if (a5 == 1)
    {
      uint64_t v29 = (uint64_t *)*((void *)a1 + 45);
      if (v29)
      {
        char v30 = (void *)((char *)a1 + 360);
        uint64_t v31 = *((void *)a1 + 45);
        do
        {
          int v32 = *(_DWORD *)(v31 + 32);
          BOOL v33 = v32 < a4;
          if (v32 >= a4) {
            uint64_t v34 = (uint64_t *)v31;
          }
          else {
            uint64_t v34 = (uint64_t *)(v31 + 8);
          }
          if (!v33) {
            char v30 = (void *)v31;
          }
          uint64_t v31 = *v34;
        }
        while (*v34);
        if (v30 != (void *)((char *)a1 + 360) && *((_DWORD *)v30 + 8) <= a4)
        {
          int v35 = (void *)v30[1];
          if (v35)
          {
            do
            {
              uint64_t v36 = v35;
              int v35 = (void *)*v35;
            }
            while (v35);
          }
          else
          {
            uint64_t v37 = v30;
            do
            {
              uint64_t v36 = (void *)v37[2];
              BOOL v24 = *v36 == (void)v37;
              uint64_t v37 = v36;
            }
            while (!v24);
          }
          if (*((void **)a1 + 44) == v30) {
            *((void *)a1 + 44) = v36;
          }
          --*((void *)a1 + 46);
          std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v29, v30);
          qmi::Client::~Client((qmi::Client *)(v30 + 5));
          operator delete(v30);
        }
      }
    }
    if (a2)
    {
      uint64_t v38 = *((void *)a1 + 12);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "clientStopped";
        _os_log_impl(&dword_22231A000, v38, OS_LOG_TYPE_DEFAULT, "#I %s: clientStopped", buf, 0xCu);
        uint64_t v38 = *((void *)a1 + 12);
      }
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleBasebandOff_sync";
        _os_log_impl(&dword_22231A000, v38, OS_LOG_TYPE_DEFAULT, "#I %s: baseband is off", buf, 0xCu);
      }
      uint64_t v39 = (std::__shared_weak_count *)*((void *)a1 + 6);
      if (v39)
      {
        char v40 = std::__shared_weak_count::lock(v39);
        if (v40)
        {
          uint64_t v41 = v40;
          uint64_t v42 = *((void *)a1 + 5);
          if (v42 && ((*(uint64_t (**)(void))(*(void *)v42 + 496))(*((void *)a1 + 5)) & 1) == 0)
          {
            (*(void (**)(uint64_t))(*(void *)v42 + 328))(v42);
            int v43 = *((void *)a1 + 12);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "handleBasebandOff_sync";
              _os_log_impl(&dword_22231A000, v43, OS_LOG_TYPE_DEFAULT, "#I %s: Clearing Current Data system status", buf, 0xCu);
            }
            uint64_t v44 = (QMIDataCommandDriver::QMIClientsInfo *)*((void *)a1 + 42);
            if (*((void *)v44 + 3))
            {
              unsigned __int16 v45 = *((void *)a1 + 12);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "handleBasebandOff_sync";
                _os_log_impl(&dword_22231A000, v45, OS_LOG_TYPE_DEFAULT, "#N %s: resetting the sleeping group", buf, 0xCu);
                uint64_t v44 = (QMIDataCommandDriver::QMIClientsInfo *)*((void *)a1 + 42);
              }
              QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(v44);
            }
            uint64_t v46 = (void *)*((void *)a1 + 36);
            void *v46 = 0xFFFFFFFFLL;
            v46[1] = 0;
            QMIDataCommandDriver::resetSlicing_sync(a1, 1);
          }
          std::__shared_weak_count::__release_shared[abi:ne180100](v41);
        }
      }
      memset(buf, 0, 32);
      uint64_t v47 = (std::__shared_weak_count *)*((void *)a1 + 21);
      *((void *)a1 + 20) = 0;
      *((void *)a1 + 21) = 0;
      if (v47) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v47);
      }
      qmi::Client::~Client((qmi::Client *)buf);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    return;
  }
  uint64_t v11 = *((void *)a1 + 12);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I Null fWDSClient", buf, 2u);
  }
}

void sub_2223D7C98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::clientStopped(uint64_t a1, int a2, qmi::Client *a3, int a4, int a5)
{
}

void QMIDataCommandDriver::handleSimCdmaAuxInfoAvailable_sync(QMIDataCommandDriver *this, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  BOOL v4 = *((void *)this + 12);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (a2)
  {
    if (v5)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleSimCdmaAuxInfoAvailable_sync";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA Aux Info available, reading NAI...", (uint8_t *)&__p, 0xCu);
    }
    QMIDataCommandDriver::sendGetDeviceNAIRequest_sync(this);
  }
  else
  {
    if (v5)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"handleSimCdmaAuxInfoAvailable_sync";
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA Aux Info unavailable, clearing NAI...", (uint8_t *)&__p, 0xCu);
    }
    std::string::basic_string[abi:ne180100]<0>(&__p, (char *)&unk_222543CCE);
    QMIDataCommandDriver::setDeviceNAI((uint64_t)this, &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_2223D7DF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataCommandDriver::setDeviceNAI(uint64_t a1, const std::string *a2)
{
  BOOL v4 = (std::mutex *)(a1 + 216);
  std::mutex::lock((std::mutex *)(a1 + 216));
  std::string::operator=((std::string *)(a1 + 192), a2);

  std::mutex::unlock(v4);
}

void sub_2223D7E74(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleSimCdmaAuxInfoAvailable_sync(QMIDataCommandDriver *this, int a2)
{
}

void QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync(QMIDataCommandDriver *this, int a2, char *a3)
{
  uint64_t v91 = *MEMORY[0x263EF8340];
  BOOL v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 5);
      if (v9
        && ((*(uint64_t (**)(uint64_t))(*(void *)(v9 + *(void *)(*(void *)v9 - 320)) + 280))(v9 + *(void *)(*(void *)v9 - 320)) & 1) != 0
        && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 496))(v9) & 1) == 0
        && *((void *)this + 20))
      {
        long long __p = 0uLL;
        uint64_t v71 = 0;
        if (a3)
        {
          std::string::basic_string[abi:ne180100]<0>(buf, a3);
          if (SHIBYTE(v71) < 0) {
            operator delete((void *)__p);
          }
          long long __p = *(_OWORD *)buf;
          uint64_t v71 = *(void *)&buf[4];
        }
        long long v10 = (QMIDataCommandDriver *)((char *)this + 144);
        uint64_t v11 = *((void *)this + 12);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          int SvcType = qmi::Client::getSvcType((QMIDataCommandDriver *)((char *)this + 144));
          uint64_t Name = qmi::Client::getName((QMIDataCommandDriver *)((char *)this + 144));
          if (*(char *)(Name + 23) >= 0) {
            uint64_t v14 = Name;
          }
          else {
            uint64_t v14 = *(void *)Name;
          }
          p_p = &__p;
          if (v71 < 0) {
            p_p = (long long *)__p;
          }
          buf[0] = 136316162;
          *(void *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = SvcType;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v14;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a2;
          HIWORD(buf[8]) = 2080;
          *(void *)&buf[9] = p_p;
          _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>1: svcType=%d, name=%s, value=%d, reason=%s", (uint8_t *)buf, 0x2Cu);
        }
        if (a2)
        {
          int v69 = 0;
          memset(v90, 0, 268);
          long long v88 = 0u;
          long long v89 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v85 = 0u;
          memset(buf, 0, sizeof(buf));
          (*(void (**)(uint64_t, int *, _DWORD *))(*(void *)v9 + 472))(v9, &v69, buf);
          if (v69)
          {
            int v52 = a2;
            unint64_t v53 = v8;
            long long v67 = 0u;
            long long v68 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v67);
            uint64_t v16 = 0;
            uint64_t v64 = 0;
            char v65 = 0;
            long long v66 = 0;
            uint64_t v17 = buf;
            do
            {
              int v18 = &buf[33 * v16];
              unsigned int v21 = *((unsigned __int8 *)v18 + 129);
              int v20 = (unsigned __int8 *)v18 + 129;
              unsigned int v19 = v21;
              int v83 = 0;
              long long v81 = 0u;
              long long v82 = 0u;
              long long v79 = 0u;
              long long v80 = 0u;
              long long aBlock = 0u;
              long long v78 = 0u;
              memset(v76, 0, sizeof(v76));
              if (v21 <= 0x80)
              {
                uint32_t v22 = &buf[33 * v16];
                int v23 = *((unsigned __int8 *)v22 + 128);
                if (*((unsigned char *)v22 + 128))
                {
                  if (v23 == 1)
                  {
                    LOBYTE(v83) = 1;
                  }
                  else
                  {
                    BOOL v24 = *((void *)this + 12);
                    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_DWORD *)std::string::size_type v72 = 136315394;
                      uint64_t v73 = "sendOffloadKeepaliveRequest_sync";
                      __int16 v74 = 1024;
                      int v75 = v23;
                      _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>3: wrong frame type=%d", v72, 0x12u);
                      unsigned int v19 = *v20;
                    }
                  }
                }
                BYTE1(v83) = v19;
                HIWORD(v83) = *((_WORD *)v90 + 66 * v16 + 1);
                if (v19)
                {
                  unint64_t v25 = 0;
                  do
                  {
                    v76[v25] = *((unsigned char *)v17 + v25);
                    ++v25;
                  }
                  while (v25 < BYTE1(v83));
                }
              }
              char v26 = v65;
              if (v65 >= v66)
              {
                char v28 = v64;
                uint64_t v29 = 0xF83E0F83E0F83E1 * ((v65 - (unsigned char *)v64) >> 2);
                unint64_t v30 = v29 + 1;
                if ((unint64_t)(v29 + 1) > 0x1F07C1F07C1F07CLL) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0x1F07C1F07C1F07C2 * ((v66 - (unsigned char *)v64) >> 2) > v30) {
                  unint64_t v30 = 0x1F07C1F07C1F07C2 * ((v66 - (unsigned char *)v64) >> 2);
                }
                if ((unint64_t)(0xF83E0F83E0F83E1 * ((v66 - (unsigned char *)v64) >> 2)) >= 0xF83E0F83E0F83ELL) {
                  unint64_t v31 = 0x1F07C1F07C1F07CLL;
                }
                else {
                  unint64_t v31 = v30;
                }
                if (v31)
                {
                  int v32 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::FrameData>>((uint64_t)&v66, v31);
                  char v28 = v64;
                  char v26 = v65;
                }
                else
                {
                  int v32 = 0;
                }
                BOOL v33 = &v32[4 * ((v65 - (unsigned char *)v64) >> 2)];
                *((_OWORD *)v33 + 5) = v80;
                *((_OWORD *)v33 + 6) = v81;
                *((_OWORD *)v33 + 7) = v82;
                *((_DWORD *)v33 + 32) = v83;
                *((_OWORD *)v33 + 1) = *(_OWORD *)&v76[16];
                *((_OWORD *)v33 + 2) = aBlock;
                *((_OWORD *)v33 + 3) = v78;
                *((_OWORD *)v33 + 4) = v79;
                *(_OWORD *)BOOL v33 = *(_OWORD *)v76;
                if (v26 == v28)
                {
                  uint64_t v41 = &v32[132 * v29];
                }
                else
                {
                  uint64_t v34 = &v32[132 * v29];
                  do
                  {
                    *(_OWORD *)(v34 - 132) = *(_OWORD *)((char *)v26 - 132);
                    long long v35 = *(_OWORD *)((char *)v26 - 116);
                    long long v36 = *(_OWORD *)((char *)v26 - 100);
                    long long v37 = *(_OWORD *)((char *)v26 - 84);
                    *(_OWORD *)(v34 - 68) = *(_OWORD *)((char *)v26 - 68);
                    *(_OWORD *)(v34 - 84) = v37;
                    *(_OWORD *)(v34 - 100) = v36;
                    *(_OWORD *)(v34 - 116) = v35;
                    long long v38 = *(_OWORD *)((char *)v26 - 52);
                    long long v39 = *(_OWORD *)((char *)v26 - 36);
                    long long v40 = *(_OWORD *)((char *)v26 - 20);
                    uint64_t v41 = v34 - 132;
                    *((_DWORD *)v34 - 1) = *((_DWORD *)v26 - 1);
                    *(_OWORD *)(v34 - 20) = v40;
                    *(_OWORD *)(v34 - 36) = v39;
                    *(_OWORD *)(v34 - 52) = v38;
                    char v26 = (_OWORD *)((char *)v26 - 132);
                    v34 -= 132;
                  }
                  while (v26 != v28);
                }
                uint64_t v27 = (uint64_t)(v33 + 132);
                uint64_t v64 = v41;
                char v65 = v33 + 132;
                long long v66 = &v32[132 * v31];
                if (v28) {
                  operator delete(v28);
                }
              }
              else
              {
                *((_OWORD *)v65 + 5) = v80;
                v26[6] = v81;
                v26[7] = v82;
                *((_DWORD *)v26 + 32) = v83;
                v26[1] = *(_OWORD *)&v76[16];
                v26[2] = aBlock;
                v26[3] = v78;
                v26[4] = v79;
                *char v26 = *(_OWORD *)v76;
                uint64_t v27 = (uint64_t)v26 + 132;
              }
              char v65 = (char *)v27;
              ++v16;
              v17 += 33;
            }
            while (v16 != 3);
            v60[0] = MEMORY[0x263EF8330];
            v60[1] = 1174405120;
            v60[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke;
            v60[3] = &__block_descriptor_tmp_15_13;
            uint64_t v62 = 0;
            uint64_t v63 = 0;
            __int16 v61 = 0;
            std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(&v61, v64, v27, 0xF83E0F83E0F83E1 * ((v27 - (uint64_t)v64) >> 2));
            uint64_t v8 = v53;
            uint64_t v42 = qmi::MutableMessageBase::getTLV<wds::tlv::FrameList>((uint64_t)&v67);
            ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke(v60, (void **)v42);
            a2 = v52;
            if (v61)
            {
              uint64_t v62 = v61;
              operator delete(v61);
            }
            if (v64)
            {
              char v65 = (char *)v64;
              operator delete(v64);
            }
            v58[0] = MEMORY[0x263EF8330];
            v58[1] = 0x40000000;
            v58[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_16;
            v58[3] = &__block_descriptor_tmp_18_3;
            int v59 = v69;
            int v43 = qmi::MutableMessageBase::getTLV<wds::tlv::NumFrames>((uint64_t)&v67);
            ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_16((uint64_t)v58, v43);
            *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>((uint64_t)&v67) = 1;
            uint64_t v44 = *((void *)this + 12);
            if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)uint64_t v76 = 136315394;
              *(void *)&v76[4] = "sendOffloadKeepaliveRequest_sync";
              *(_WORD *)&v76[12] = 1024;
              *(_DWORD *)&v76[14] = v69;
              _os_log_impl(&dword_22231A000, v44, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>4: found good frames=%d", v76, 0x12u);
            }
            if (v69)
            {
              unsigned __int16 v45 = *((void *)this + 12);
              if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)uint64_t v76 = 136315394;
                *(void *)&v76[4] = "sendOffloadKeepaliveRequest_sync";
                *(_WORD *)&v76[12] = 2080;
                *(void *)&v76[14] = "sendOffloadKeepaliveRequest_sync";
                _os_log_impl(&dword_22231A000, v45, OS_LOG_TYPE_DEFAULT, "#I %s: %s: Sending SetKeepaliveOffload Start request", v76, 0x16u);
              }
              *((unsigned char *)this + 312) = 1;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 480))(v9, 1);
              *(void *)uint64_t v76 = (char *)this + 144;
              *(void *)&v76[8] = QMIServiceMsg::create();
              *(_DWORD *)&v76[16] = 25000;
              *(void *)&v76[24] = 0;
              *(void *)&long long aBlock = 0;
              v56[0] = MEMORY[0x263EF8330];
              v56[1] = 1174405120;
              v56[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_21;
              v56[3] = &__block_descriptor_tmp_22_10;
              v56[4] = this;
              void v56[5] = v9;
              __int16 v57 = v53;
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
              qmi::Client::SendProxy::callback<qmi::ResponseBase const&>((uint64_t)v76, (uint64_t)v56);
              qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)v76);
              if (v57) {
                std::__shared_weak_count::__release_shared[abi:ne180100](v57);
              }
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v67);
            long long v10 = (QMIDataCommandDriver *)((char *)this + 144);
          }
        }
        else
        {
          long long v67 = 0u;
          long long v68 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v67);
          *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>((uint64_t)&v67) = 0;
          uint64_t v46 = *((void *)this + 12);
          if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
          {
            buf[0] = 136315394;
            *(void *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
            LOWORD(buf[3]) = 2080;
            *(void *)((char *)&buf[3] + 2) = "sendOffloadKeepaliveRequest_sync";
            _os_log_impl(&dword_22231A000, v46, OS_LOG_TYPE_DEFAULT, "#I %s: %s: Sending SetKeepaliveOffload Stop request", (uint8_t *)buf, 0x16u);
          }
          if (*((unsigned char *)this + 312)) {
            (*(void (**)(uint64_t, void))(*(void *)v9 + 480))(v9, 0);
          }
          *((unsigned char *)this + 312) = 0;
          *(void *)uint64_t v76 = (char *)this + 144;
          *(void *)&v76[8] = QMIServiceMsg::create();
          *(_DWORD *)&v76[16] = 25000;
          *(void *)&v76[24] = 0;
          *(void *)&long long aBlock = 0;
          v54[0] = MEMORY[0x263EF8330];
          v54[1] = 1174405120;
          _OWORD v54[2] = ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_27;
          v54[3] = &__block_descriptor_tmp_30_7;
          v54[4] = this;
          v54[5] = v9;
          uint64_t v55 = v8;
          atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[2] = 0x40000000;
          *(void *)&uint8_t buf[4] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
          *(void *)&buf[6] = &unk_26460B7B8;
          *(void *)&uint8_t buf[8] = v54;
          uint64_t v47 = _Block_copy(buf);
          *(void *)&long long aBlock = v47;
          if (*(void *)&v76[8])
          {
            qmi::Client::send();
            uint64_t v47 = (void *)aBlock;
          }
          if (v47) {
            _Block_release(v47);
          }
          if (v55) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v55);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v67);
        }
        uint64_t v48 = *((void *)this + 12);
        if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
        {
          int v49 = qmi::Client::getSvcType(v10);
          uint64_t v50 = qmi::Client::getName(v10);
          if (*(char *)(v50 + 23) >= 0) {
            uint64_t v51 = v50;
          }
          else {
            uint64_t v51 = *(void *)v50;
          }
          buf[0] = 136315906;
          *(void *)&buf[1] = "sendOffloadKeepaliveRequest_sync";
          LOWORD(buf[3]) = 1024;
          *(_DWORD *)((char *)&buf[3] + 2) = v49;
          HIWORD(buf[4]) = 2080;
          *(void *)&buf[5] = v51;
          LOWORD(buf[7]) = 1024;
          *(_DWORD *)((char *)&buf[7] + 2) = a2;
          _os_log_impl(&dword_22231A000, v48, OS_LOG_TYPE_DEFAULT, "#I %s: <keepalive_offload>9: svcType=%d, name=%s, value=%d", (uint8_t *)buf, 0x22u);
        }
        if (SHIBYTE(v71) < 0) {
          operator delete((void *)__p);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_2223D89D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,void *a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,char a62)
{
  if (a29) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a29);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a62);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a45);
  if (a56 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a11);
  _Unwind_Resume(a1);
}

void *___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke(void *result, void **a2)
{
  if (result + 4 != a2)
  {
    BOOL v3 = (char *)result[4];
    BOOL v4 = (unsigned char *)result[5];
    size_t v5 = v4 - v3;
    unint64_t v6 = 0xF83E0F83E0F83E1 * ((v4 - v3) >> 2);
    uint64_t v7 = (uint64_t)a2[2];
    uint64_t v8 = (char *)*a2;
    if (0xF83E0F83E0F83E1 * ((v7 - (uint64_t)*a2) >> 2) >= v6)
    {
      uint64_t v12 = a2 + 1;
      uint64_t v14 = (char *)a2[1];
      if (0xF83E0F83E0F83E1 * ((v14 - v8) >> 2) < v6)
      {
        uint64_t v15 = &v3[4 * ((v14 - v8) >> 2)];
        if (v14 != v8)
        {
          uint64_t result = memmove(*a2, v3, v14 - v8);
          uint64_t v8 = (char *)*v12;
        }
        size_t v5 = v4 - v15;
        if (v4 == v15) {
          goto LABEL_20;
        }
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        goto LABEL_19;
      }
    }
    else
    {
      if (v8)
      {
        a2[1] = v8;
        operator delete(v8);
        uint64_t v7 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if (v6 > 0x1F07C1F07C1F07CLL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xF83E0F83E0F83E1 * (v7 >> 2);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= v6) {
        uint64_t v10 = 0xF83E0F83E0F83E1 * ((v4 - v3) >> 2);
      }
      if (v9 >= 0xF83E0F83E0F83ELL) {
        unint64_t v11 = 0x1F07C1F07C1F07CLL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t result = std::vector<tlv::NestedTlv<(unsigned char)16,qos::tlv::QoSFilter>>::__vallocate[abi:ne180100](a2, v11);
      char v13 = (char *)a2[1];
      uint64_t v12 = a2 + 1;
      uint64_t v8 = v13;
    }
    if (v4 == v3)
    {
LABEL_20:
      *uint64_t v12 = &v8[v5];
      return result;
    }
    uint64_t v16 = v8;
    uint64_t v17 = v3;
LABEL_19:
    uint64_t result = memmove(v16, v17, v5);
    goto LABEL_20;
  }
  return result;
}

void *__copy_helper_block_e8_32c60_ZTSNSt3__16vectorIN3wds3tlv9FrameDataENS_9allocatorIS3_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xF83E0F83E0F83E1 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c60_ZTSNSt3__16vectorIN3wds3tlv9FrameDataENS_9allocatorIS3_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_16(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t qmi::Client::SendProxy::callback<qmi::ResponseBase const&>(uint64_t a1, uint64_t a2)
{
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
  aBlock[3] = &unk_26460B7B8;
  aBlock[4] = a2;
  *(void *)(a1 + 32) = _Block_copy(aBlock);
  return a1;
}

void ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_21(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0)
  {
    BOOL v4 = *(void (**)(void))(*(void *)(v3 + 32) + 192);
    if (*(_DWORD *)(a2 + 4))
    {
      v4();
      size_t v5 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v6 = *(_DWORD *)(a2 + 4);
      int v11 = 136315650;
      uint64_t v12 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      uint64_t v7 = "#I %s: <keepalive_offload>5: Baseband failed to set KeepaliveOffload: 0x%x (%s)";
      uint64_t v8 = v5;
      uint32_t v9 = 28;
    }
    else
    {
      v4();
      uint64_t v10 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v11 = 136315138;
      uint64_t v12 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      uint64_t v7 = "#I %s: <keepalive_offload>6: KeepaliveOffload updated successfully: OK";
      uint64_t v8 = v10;
      uint32_t v9 = 12;
    }
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
  }
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN20QMIDataCommandDriver32sendOffloadKeepaliveRequest_syncEbPKc_block_invoke_27(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0)
  {
    BOOL v4 = *(void (**)(void))(*(void *)(v3 + 32) + 192);
    if (*(_DWORD *)(a2 + 4))
    {
      v4();
      size_t v5 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v6 = *(_DWORD *)(a2 + 4);
      int v11 = 136315650;
      uint64_t v12 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      __int16 v13 = 1024;
      int v14 = v6;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      uint64_t v7 = "#I %s: <keepalive_offload>7: Baseband failed to stop KeepaliveOffload: 0x%x (%s)";
      uint64_t v8 = v5;
      uint32_t v9 = 28;
    }
    else
    {
      v4();
      uint64_t v10 = *(NSObject **)(v3 + 96);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v11 = 136315138;
      uint64_t v12 = "sendOffloadKeepaliveRequest_sync_block_invoke";
      uint64_t v7 = "#I %s: <keepalive_offload>8: KeepaliveOffload stopped successfully: OK";
      uint64_t v8 = v10;
      uint32_t v9 = 12;
    }
    _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v11, v9);
  }
}

void QMIDataCommandDriver::processWdsTlvDormancyStatus(void *a1, unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    size_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = a1[5];
      if (v7)
      {
        int v8 = *a2;
        uint32_t v9 = a1[12];
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if ((v8 - 1) >= 2)
        {
          if (v10)
          {
            int v12 = 136315394;
            __int16 v13 = "processWdsTlvDormancyStatus";
            __int16 v14 = 1024;
            LODWORD(v15) = v8;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Wrong dormancy status %d", (uint8_t *)&v12, 0x12u);
          }
        }
        else
        {
          if (v10)
          {
            int v11 = "dormancy_err";
            if (v8 == 2) {
              int v11 = "kDormancyStatusActive";
            }
            if (v8 == 1) {
              int v11 = "kDormancyStatusDormant";
            }
            int v12 = 136315394;
            __int16 v13 = "processWdsTlvDormancyStatus";
            __int16 v14 = 2080;
            __int16 v15 = v11;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Dormancy status: %s", (uint8_t *)&v12, 0x16u);
            int v8 = *a2;
          }
          (*(void (**)(uint64_t, BOOL))(*(void *)v7 + 544))(v7, v8 == 1);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223D91F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::handleDataBearerLegacy(uint64_t a1, int a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if ((capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)a1) & 1) == 0)
  {
    int v6 = *(_DWORD *)(a1 + 280);
    if (v6 != a2)
    {
      uint64_t v7 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        int v11 = "handleDataBearerLegacy";
        __int16 v12 = 1024;
        int v13 = v6;
        __int16 v14 = 1024;
        int v15 = a2;
        _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I %s: fLegacyPreMav16RatMask from 0x%x to 0x%x", (uint8_t *)&v10, 0x18u);
      }
      *(_DWORD *)(a1 + 280) = a2;
    }
    int v8 = *(_DWORD *)(a1 + 284);
    if (v8 != a3)
    {
      uint32_t v9 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = 136315650;
        int v11 = "handleDataBearerLegacy";
        __int16 v12 = 1024;
        int v13 = v8;
        __int16 v14 = 1024;
        int v15 = a3;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: fLegacyPreMav16CurrentNetwork from 0x%x to 0x%x", (uint8_t *)&v10, 0x18u);
      }
      *(_DWORD *)(a1 + 284) = a3;
    }
  }
  QMIDataCommandDriver::handleDataBearer((QMIDataCommandDriver *)a1);
}

void QMIDataCommandDriver::processWdsTlvDataSystemStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (void *)a1;
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    size_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v42 = v5;
      uint64_t v46 = v2[5];
      if (v46)
      {
        uint64_t v6 = *(unsigned __int8 *)(a2 + 4);
        if (*(unsigned char *)(a2 + 4))
        {
          uint64_t v7 = 0;
          unint64_t v8 = 0;
          uint64_t v9 = 12 * v6;
          int v10 = *(_DWORD *)a2;
          long long v40 = v2;
          uint64_t v41 = a2;
          uint64_t v45 = 12 * v6;
          int v44 = *(_DWORD *)a2;
          while (1)
          {
            uint64_t v11 = *(void *)(a2 + 8);
            if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(a2 + 16) - v11) >> 2) <= v8) {
              std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
            }
            __int16 v12 = (_DWORD *)(v11 + v7);
            if (v10 != *v12) {
              goto LABEL_52;
            }
            unsigned int v13 = v12[1];
            unint64_t v48 = v12[2];
            __int16 v14 = v2[12];
            if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
              break;
            }
LABEL_26:
            uint64_t v16 = a2;
            unsigned int v47 = v13;
            uint64_t v17 = v2;
            uint64_t v18 = v2[36];
            uint64_t v19 = QMIRATMaskToDataBearerInfo(*(_DWORD *)v18, *(_DWORD *)(v18 + 4), *(void *)(v18 + 8));
            unsigned __int8 v21 = v20;
            unsigned int v22 = v13;
            uint64_t v23 = QMIRATMaskToDataBearerInfo(v10, v13, v48);
            unsigned int v25 = v24;
            if (*(_DWORD *)(v18 + 4) != v22)
            {
              if ((v22 & 0xF00) == 0x800) {
                unsigned int v26 = 1;
              }
              else {
                unsigned int v26 = -1;
              }
              if ((v22 & 0xF00) == 0x400) {
                uint64_t v27 = 0;
              }
              else {
                uint64_t v27 = v26;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v46 + 608))(v46, v27, v23);
              *(_DWORD *)(v17[36] + 4) = v22;
            }
            BOOL v29 = v19 != v23 || HIDWORD(v19) != HIDWORD(v23) || v21 != v25;
            if (v22)
            {
              a2 = v16;
              if (v29)
              {
                unint64_t v30 = v17;
                unint64_t v31 = v17[12];
                if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v32 = asString();
                  asStringDataSoMask();
                  int v33 = v50;
                  uint64_t v34 = (void **)__p;
                  uint64_t v35 = asStringBool();
                  *(_DWORD *)long long buf = 136316162;
                  p_p = &__p;
                  if (v33 < 0) {
                    p_p = v34;
                  }
                  int v52 = "processWdsTlvDataSystemStatus";
                  __int16 v53 = 2080;
                  *(void *)uint64_t v54 = v32;
                  *(_WORD *)&v54[8] = 2082;
                  uint64_t v55 = p_p;
                  LOWORD(v56) = 1024;
                  *(_DWORD *)((char *)&v56 + 2) = HIDWORD(v23);
                  HIWORD(v56) = 2080;
                  uint64_t v57 = v35;
                  _os_log_impl(&dword_22231A000, v31, OS_LOG_TYPE_DEFAULT, "#I %s: The data bearer data mode is: %s/%{public}s (%u)/%s", buf, 0x30u);
                  if (v50 < 0) {
                    operator delete(__p);
                  }
                  unint64_t v30 = v40;
                  a2 = v41;
                }
                uint64_t v37 = v30[36];
                *(_DWORD *)uint64_t v37 = v44;
                *(_DWORD *)(v37 + 4) = v47;
                *(void *)(v37 + 8) = v48;
                int v10 = v44;
                unint64_t v43 = v43 & 0xFFFFFFFF00000000 | v25;
                (*(void (**)(void))(*(void *)v46 + 528))();
                uint64_t v9 = v45;
                uint64_t v2 = v30;
                goto LABEL_52;
              }
              uint64_t v9 = v45;
              int v10 = v44;
            }
            else
            {
              uint64_t v9 = v45;
              int v10 = v44;
              a2 = v16;
            }
            uint64_t v2 = v17;
LABEL_52:
            ++v8;
            v7 += 12;
            if (v9 == v7) {
              goto LABEL_59;
            }
          }
          if (v10 != 1)
          {
            if (!v10)
            {
              int v15 = "kLTE";
              if ((v13 & 0x20) != 0) {
                goto LABEL_25;
              }
              int v15 = "kWCDMA";
              if ((v13 & 0x201) != 0) {
                goto LABEL_25;
              }
              int v15 = "kHSDPA";
              if ((v13 & 0xC4) != 0) {
                goto LABEL_25;
              }
              int v15 = "kHSUPA";
              if ((v13 & 8) != 0) {
                goto LABEL_25;
              }
              int v15 = "kEDGE";
              if ((v13 & 0x10) != 0) {
                goto LABEL_25;
              }
              int v15 = "kGPRS";
              if ((v13 & 2) != 0) {
                goto LABEL_25;
              }
            }
            goto LABEL_24;
          }
          int v15 = "kLTE";
          if ((v13 & 0x20) != 0) {
            goto LABEL_25;
          }
          int v15 = "keHRPD";
          if ((v13 & 0x10) != 0) {
            goto LABEL_25;
          }
          int v15 = "kCDMAEVDORev0";
          if ((v13 & 2) != 0) {
            goto LABEL_25;
          }
          if ((v13 & 4) != 0)
          {
            BOOL v38 = (v48 & 8) == 0;
            int v15 = "keHRPD";
            long long v39 = "kCDMAEVDORevA";
          }
          else
          {
            if ((v13 & 8) == 0)
            {
              int v15 = "kCDMA1x";
              if (v13)
              {
LABEL_25:
                *(_DWORD *)long long buf = 136316162;
                int v52 = "processWdsTlvDataSystemStatus";
                __int16 v53 = 1024;
                *(_DWORD *)uint64_t v54 = v10;
                *(_WORD *)&v54[4] = 1024;
                *(_DWORD *)&void v54[6] = v13;
                LOWORD(v55) = 1024;
                *(_DWORD *)((char *)&v55 + 2) = v48;
                HIWORD(v55) = 2080;
                uint64_t v56 = v15;
                _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: Data System status: current network (0x%x), rat mask (0x%x) and service option mask (0x%x) become data mode (%s)", buf, 0x28u);
                goto LABEL_26;
              }
LABEL_24:
              int v15 = "kNoData";
              goto LABEL_25;
            }
            BOOL v38 = (v48 & 0x28) == 0;
            int v15 = "keHRPD";
            long long v39 = "kCDMAEVDORevB";
          }
          if (v38) {
            int v15 = v39;
          }
          goto LABEL_25;
        }
      }
LABEL_59:
      std::__shared_weak_count::__release_shared[abi:ne180100](v42);
    }
  }
}

void sub_2223D9830(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  _Unwind_Resume(a1);
}

uint64_t QMIRATMaskToDataBearerInfo(int a1, __int16 a2, char a3)
{
  uint64_t v5 = 0;
  if (a1 != 1)
  {
    if (a1) {
      return v5;
    }
    if ((a2 & 0x20) == 0)
    {
      if ((a2 & 0x201) != 0)
      {
        int v3 = 3;
LABEL_26:
        LODWORD(v5) = v3;
        return v5;
      }
      if ((a2 & 0xC4) != 0)
      {
        int v3 = 4;
        goto LABEL_26;
      }
      if ((a2 & 8) != 0)
      {
        int v3 = 5;
        goto LABEL_26;
      }
      if ((a2 & 0x10) != 0)
      {
        int v3 = 2;
        goto LABEL_26;
      }
      if ((a2 & 2) != 0)
      {
        int v3 = 1;
        goto LABEL_26;
      }
      return v5;
    }
LABEL_13:
    LODWORD(v5) = 14;
    appendDataSoMask();
    return v5;
  }
  if ((a2 & 0x20) != 0) {
    goto LABEL_13;
  }
  if ((a2 & 0x10) != 0)
  {
LABEL_25:
    int v3 = 13;
    goto LABEL_26;
  }
  if ((a2 & 2) != 0)
  {
    int v3 = 11;
    goto LABEL_26;
  }
  if ((a2 & 4) != 0)
  {
    if ((a3 & 8) == 0)
    {
      int v3 = 12;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if ((a2 & 8) != 0)
  {
    if ((a3 & 0x28) == 0)
    {
      int v3 = 15;
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (a2)
  {
    int v3 = 10;
    goto LABEL_26;
  }
  return v5;
}

void QMIDataCommandDriver::processDsdTlvDataSystemStatus(QMIDataCommandDriver *a1, unsigned __int8 *a2)
{
  uint64_t v66 = *MEMORY[0x263EF8340];
  int v3 = (std::__shared_weak_count *)*((void *)a1 + 6);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = *((void *)a1 + 5);
      if (!v7 || !*a2)
      {
LABEL_40:
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
        return;
      }
      uint64_t v8 = *((void *)a2 + 1);
      if (*((void *)a2 + 2) == v8) {
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      }
      unint64_t v9 = DSDRATValueToDataBearerInfo(*(_DWORD *)(v8 + 4), *(void *)(v8 + 8));
      unsigned int v45 = v10;
      unint64_t v11 = v9;
      __int16 v12 = (const char *)HIDWORD(v9);
      unsigned int v13 = *((void *)a1 + 12);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = (int)v12;
        unint64_t v44 = v11;
        __int16 v14 = dsd::asString(*(_DWORD *)v8);
        unsigned int v15 = *(_DWORD *)v8;
        __int16 v12 = dsd::asString(*(_DWORD *)(v8 + 4));
        int v16 = *(_DWORD *)(v8 + 4);
        uint64_t v42 = dsd::asString(*(void *)(v8 + 8));
        uint64_t v41 = *(void *)(v8 + 8);
        uint64_t v40 = asString();
        asStringDataSoMask();
        uint64_t v17 = asStringBool();
        int v49 = "processDsdTlvDataSystemStatus";
        uint64_t v18 = __p;
        *(_DWORD *)long long buf = 136317698;
        if (v47 < 0) {
          uint64_t v18 = (void **)__p[0];
        }
        __int16 v50 = 2080;
        uint64_t v51 = (uint64_t)v14;
        __int16 v52 = 1024;
        *(_DWORD *)__int16 v53 = v15;
        *(_WORD *)&v53[4] = 2080;
        *(void *)&v53[6] = v12;
        __int16 v54 = 1024;
        *(_DWORD *)uint64_t v55 = v16;
        *(_WORD *)&v55[4] = 2080;
        LODWORD(v12) = v43;
        *(void *)&v55[6] = v42;
        __int16 v56 = 2048;
        uint64_t v57 = v41;
        __int16 v58 = 2080;
        uint64_t v59 = v40;
        __int16 v60 = 2082;
        __int16 v61 = v18;
        __int16 v62 = 1024;
        int v63 = v43;
        __int16 v64 = 2080;
        uint64_t v65 = v17;
        _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Data System status: Technology: %s (0x%x), rat value: %s (0x%x), service option mask: %s (0x%lx), data bearer info: %s/%{public}s (%u)/%s", buf, 0x64u);
        if (v47 < 0) {
          operator delete(__p[0]);
        }
        unint64_t v11 = v44;
      }
      uint64_t v19 = DSDRATValueToDataBearerInfo(*(_DWORD *)(*((void *)a1 + 36) + 4), *(void *)(*((void *)a1 + 36) + 8));
      unsigned __int8 v21 = v20;
      if (*a2)
      {
        uint64_t v22 = *((void *)a2 + 1);
        uint64_t v23 = *((void *)a2 + 2) - v22;
        if (!v23) {
          std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
        }
        unint64_t v24 = *(void *)(v22 + 8);
        if (*(_DWORD *)(v22 + 4) != 6)
        {
          if ((v24 & 0x2000) != 0) {
            unsigned int v29 = 1;
          }
          else {
            unsigned int v29 = -1;
          }
          if ((v24 & 0x1000) != 0) {
            uint64_t v28 = 0;
          }
          else {
            uint64_t v28 = v29;
          }
LABEL_32:
          (*(void (**)(uint64_t, uint64_t, unint64_t))(*(void *)v7 + 608))(v7, v28, v11);
          if (v19 != __PAIR64__(v12, v11) || v21 != v45)
          {
            unint64_t v30 = *((void *)a1 + 12);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v31 = asString();
              int v32 = (int)v12;
              asStringDataSoMask();
              int v33 = v47;
              uint64_t v34 = (void **)__p[0];
              uint64_t v35 = asStringBool();
              int v49 = "processDsdTlvDataSystemStatus";
              long long v36 = __p;
              *(_DWORD *)long long buf = 136316162;
              if (v33 < 0) {
                long long v36 = v34;
              }
              __int16 v50 = 2080;
              uint64_t v51 = v31;
              __int16 v52 = 2082;
              *(void *)__int16 v53 = v36;
              *(_WORD *)&v53[8] = 1024;
              *(_DWORD *)&v53[10] = v32;
              __int16 v54 = 2080;
              *(void *)uint64_t v55 = v35;
              _os_log_impl(&dword_22231A000, v30, OS_LOG_TYPE_DEFAULT, "#I %s: The data bearer data mode is: %s, soMask: %{public}s (%u), available: %s", buf, 0x30u);
              if (v47 < 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v37 = (void *)*((void *)a1 + 36);
            void *v37 = *(void *)v8;
            v37[1] = *(void *)(v8 + 8);
            (*(void (**)(uint64_t, unint64_t, void))(*(void *)v7 + 528))(v7, v11, v45);
            QMIDataCommandDriver::handleDataBearer(a1);
          }
          goto LABEL_40;
        }
        if ((v24 & 0x100000000000) != 0)
        {
          uint64_t v28 = (v24 >> 40) & 1;
          goto LABEL_32;
        }
        if ((v24 & 0x80000000000) != 0)
        {
          unint64_t v25 = v23 >> 4;
          if (*a2 < v25) {
            unint64_t v25 = *a2;
          }
          if (v25 >= 2)
          {
            unsigned int v26 = (void *)(v22 + 24);
            unint64_t v27 = v25 - 1;
            while (*((_DWORD *)v26 - 1) != 3)
            {
              v26 += 2;
              uint64_t v28 = 0xFFFFFFFFLL;
              if (!--v27) {
                goto LABEL_32;
              }
            }
            uint64_t v38 = *v26;
            if ((v38 & 0x2000) != 0) {
              unsigned int v39 = 1;
            }
            else {
              unsigned int v39 = -1;
            }
            if ((v38 & 0x1000) != 0) {
              uint64_t v28 = 0;
            }
            else {
              uint64_t v28 = v39;
            }
            goto LABEL_32;
          }
        }
      }
      uint64_t v28 = 0xFFFFFFFFLL;
      goto LABEL_32;
    }
  }
}

void sub_2223D9DE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  _Unwind_Resume(a1);
}

uint64_t DSDRATValueToDataBearerInfo(int a1, uint64_t a2)
{
  uint64_t v6 = 0;
  switch(a1)
  {
    case 1:
    case 4:
      int v3 = 3;
      goto LABEL_16;
    case 2:
    case 5:
    case 6:
      goto LABEL_6;
    case 3:
      if ((a2 & 0x80000000000) == 0) {
        goto LABEL_12;
      }
      goto LABEL_13;
    default:
      if (a1 == 101)
      {
        int v3 = 10;
        goto LABEL_16;
      }
      if (a1 == 103)
      {
        int v3 = 13;
LABEL_16:
        LODWORD(v6) = v3;
        goto LABEL_17;
      }
LABEL_6:
      if ((a2 & 0x100000000000) != 0)
      {
        int v3 = 17;
        goto LABEL_16;
      }
      if ((a2 & 0x80000000000) != 0)
      {
LABEL_13:
        int v4 = 16;
        goto LABEL_14;
      }
      if ((a2 & 0x1A) != 0)
      {
        int v3 = 4;
        goto LABEL_16;
      }
      if ((a2 & 0x8004) != 0)
      {
        int v3 = 5;
        goto LABEL_16;
      }
      if ((a2 & 0x100) != 0)
      {
        int v3 = 2;
        goto LABEL_16;
      }
      if ((a2 & 0x80) != 0)
      {
        int v3 = 1;
        goto LABEL_16;
      }
      if ((a2 & 0x33000) != 0)
      {
LABEL_12:
        int v4 = 14;
LABEL_14:
        LODWORD(v6) = v4;
        appendDataSoMask();
        goto LABEL_17;
      }
      if ((a2 & 0x8000000) != 0)
      {
        int v3 = 11;
        goto LABEL_16;
      }
      if ((a2 & 0x150000000) != 0)
      {
        if (a1 == 102)
        {
          int v3 = 12;
          goto LABEL_16;
        }
      }
      else if (a1 == 102 && (a2 & 0x6A0000000) != 0)
      {
        int v3 = 15;
        goto LABEL_16;
      }
LABEL_17:
      if ((a2 & 0x100000000000) != 0)
      {
        appendDataSoMask();
        if ((a2 & 0x80000000000) == 0)
        {
LABEL_19:
          if ((a2 & 0x10000000000) == 0) {
            goto LABEL_20;
          }
          goto LABEL_26;
        }
      }
      else if ((a2 & 0x80000000000) == 0)
      {
        goto LABEL_19;
      }
      appendDataSoMask();
      if ((a2 & 0x10000000000) == 0)
      {
LABEL_20:
        if ((a2 & 0x20000000000) == 0) {
          goto LABEL_21;
        }
LABEL_27:
        appendDataSoMask();
        if ((a2 & 0x40000000000) == 0) {
          return v6;
        }
        goto LABEL_22;
      }
LABEL_26:
      appendDataSoMask();
      if ((a2 & 0x20000000000) != 0) {
        goto LABEL_27;
      }
LABEL_21:
      if ((a2 & 0x40000000000) != 0) {
LABEL_22:
      }
        appendDataSoMask();
      return v6;
  }
}

void QMIDataCommandDriver::handleDataBearer(QMIDataCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *((void *)this + 5);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 568))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2223DA0CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::processDsdTlvDataSystemStatus(uint64_t a1, unsigned __int8 *a2)
{
}

void QMIDataCommandDriver::handleUiMask_sync(uint64_t a1, uint64_t a2, char a3)
{
  int v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v4) {
    return;
  }
  uint64_t v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  uint64_t v9 = *(void *)(a1 + 40);
  if (v9)
  {
    if ((a3 & 2) != 0)
    {
      uint64_t v10 = dataUiModifierMask();
      if ((a3 & 1) == 0)
      {
LABEL_6:
        if ((a2 & 0x20000000000) == 0) {
          goto LABEL_7;
        }
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v10 = 0;
      if ((a3 & 1) == 0) {
        goto LABEL_6;
      }
    }
    uint64_t v10 = dataUiModifierMask() | v10;
    if ((a2 & 0x20000000000) == 0)
    {
LABEL_7:
      if ((a2 & 0x40000000000) == 0) {
        goto LABEL_14;
      }
      goto LABEL_13;
    }
LABEL_12:
    uint64_t v10 = dataUiModifierMask() | v10;
    if ((a2 & 0x40000000000) == 0)
    {
LABEL_14:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 856))(v9, v10);
      goto LABEL_15;
    }
LABEL_13:
    uint64_t v10 = dataUiModifierMask() | v10;
    goto LABEL_14;
  }
LABEL_15:

  std::__shared_weak_count::__release_shared[abi:ne180100](v8);
}

void sub_2223DA1EC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleUiMask_sync(uint64_t a1, uint64_t a2, char a3)
{
}

void QMIDataCommandDriver::handleBandwidthInfo(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *(void *)(a1 + 40);
      if (v5)
      {
        int v7 = 0;
        uint64_t v6 = 0;
        rest::BandwidthInfo::BandwidthInfo();
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v5 + 944))(v5, &v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2223DA2C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleBandwidthInfo(uint64_t a1)
{
}

void QMIDataCommandDriver::processWdsTlvAttachParamsAPN(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)&v30[36] = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int v7 = (const std::string::value_type *)a2;
    }
    else {
      int v7 = *(const std::string::value_type **)a2;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)long long __p = "processWdsTlvAttachParamsAPN";
    *(_WORD *)&__p[8] = 2080;
    *(void *)&__p[10] = v7;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN: %s", buf, 0x16u);
  }
  memset(&v21, 0, sizeof(v21));
  if (*(void *)(a1 + 296))
  {
    if (*(char *)(a3 + 31) < 0) {
      std::string::__init_copy_ctor_external(&v21, *(const std::string::value_type **)(a3 + 8), *(void *)(a3 + 16));
    }
    else {
      std::string v21 = *(std::string *)(a3 + 8);
    }
  }
  memset(&v20, 0, sizeof(v20));
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v20, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v20 = *(std::string *)a2;
  }
  std::string::size_type size = v20.__r_.__value_.__l.__size_;
  if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v20.__r_.__value_.__r.__words[2]);
  }
  if (size)
  {
    uint64_t v9 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    if ((v21.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v10 = HIBYTE(v21.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v10 = v21.__r_.__value_.__l.__size_;
    }
    if (v10 == size)
    {
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v11 = &v20;
      }
      else {
        unint64_t v11 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      if ((*((unsigned char *)&v21.__r_.__value_.__s + 23) & 0x80) != 0)
      {
        if (!memcmp(v21.__r_.__value_.__l.__data_, v11, v21.__r_.__value_.__l.__size_)) {
          goto LABEL_41;
        }
      }
      else
      {
        if (!*((unsigned char *)&v21.__r_.__value_.__s + 23)) {
          goto LABEL_41;
        }
        __int16 v12 = &v21;
        while (v12->__r_.__value_.__s.__data_[0] == v11->__r_.__value_.__s.__data_[0])
        {
          __int16 v12 = (std::string *)((char *)v12 + 1);
          unint64_t v11 = (std::string *)((char *)v11 + 1);
          if (!--v9) {
            goto LABEL_41;
          }
        }
      }
    }
    std::string::operator=((std::string *)(a3 + 8), &v20);
    uint64_t v18 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = &v20;
      if ((v20.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v19 = (std::string *)v20.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)long long __p = "processWdsTlvAttachParamsAPN";
      *(_WORD *)&__p[8] = 2080;
      *(void *)&__p[10] = v19;
      unsigned int v15 = "#I %s: AttachAPN is set to %s";
      int v16 = v18;
      uint32_t v17 = 22;
      goto LABEL_40;
    }
  }
  else
  {
    *(_DWORD *)long long buf = 0;
    int v25 = 0;
    *(void *)&long long v24 = 0;
    *(_OWORD *)&__p[4] = 0uLL;
    *(void *)((char *)&v24 + 6) = 0;
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v26);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v27);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v28);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v29);
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v30);
    *(_DWORD *)a3 = *(_DWORD *)buf;
    unsigned int v13 = (void **)(a3 + 8);
    if (*(char *)(a3 + 31) < 0) {
      operator delete(*v13);
    }
    *(_OWORD *)unsigned int v13 = *(_OWORD *)&__p[4];
    *(void *)(a3 + 24) = v24;
    BYTE7(v24) = 0;
    __p[4] = 0;
    *(void *)(a3 + 32) = *((void *)&v24 + 1);
    *(_DWORD *)(a3 + 40) = v25;
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    CSIPacketAddress::operator=();
    if (SBYTE7(v24) < 0) {
      operator delete(*(void **)&__p[4]);
    }
    __int16 v14 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)long long __p = "processWdsTlvAttachParamsAPN";
      unsigned int v15 = "#I %s: AttachAPN parameters have been reset";
      int v16 = v14;
      uint32_t v17 = 12;
LABEL_40:
      _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    }
  }
LABEL_41:
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v21.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v21.__r_.__value_.__l.__data_);
  }
}

void sub_2223DA690(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_2(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  int v4 = *(NSObject **)(v3 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    int v6 = *((_DWORD *)a2 + 1);
    int v7 = *((_DWORD *)a2 + 2);
    int v8 = 136315906;
    uint64_t v9 = "processWdsTlvCurrentDataBearerTech";
    __int16 v10 = 1024;
    int v11 = v5;
    __int16 v12 = 1024;
    int v13 = v6;
    __int16 v14 = 1024;
    int v15 = v7;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Data Bearer Technology status: current network (0x%x) rat mask (0x%x) service option mask (0x%x)", (uint8_t *)&v8, 0x1Eu);
  }
  QMIDataCommandDriver::handleDataBearerLegacy(v3, *((_DWORD *)a2 + 1), *a2);
}

void QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(QMIDataCommandDriver *this)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  if (*((void *)this + 20))
  {
    memset(v9, 0, sizeof(v9));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
    void v4[5] = (char *)this + 144;
    uint64_t v5 = QMIServiceMsg::create();
    int v6 = 25000;
    uint64_t v7 = 0;
    int v8 = 0;
    v4[0] = MEMORY[0x263EF8330];
    v4[1] = 0x40000000;
    _OWORD v4[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke;
    v4[3] = &__block_descriptor_tmp_74;
    v4[4] = this;
    *(void *)&long long aBlock = MEMORY[0x263EF8330];
    *((void *)&aBlock + 1) = 0x40000000;
    int v11 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetCurrentDataBearerTech8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    __int16 v12 = &unk_26460B830;
    int v13 = v4;
    uint64_t v2 = _Block_copy(&aBlock);
    int v8 = v2;
    if (v5)
    {
      qmi::Client::send();
      uint64_t v2 = v8;
    }
    if (v2) {
      _Block_release(v2);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  }
  else
  {
    uint64_t v3 = *((void *)this + 12);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(aBlock) = 136315138;
      *(void *)((char *)&aBlock + 4) = "sendWdsGetCurrentDataBearerTechReq_sync";
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", (uint8_t *)&aBlock, 0xCu);
    }
  }
}

void sub_2223DA980(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_3(uint64_t a1, uint64_t a2)
{
}

void ___ZN20QMIDataCommandDriver28handleWdsEventReportInd_syncERKN3wds11EventReport10IndicationE_block_invoke_4(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (v7)
      {
        int v8 = v2[12];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = *a2;
          int v11 = 136315394;
          uint64_t v12 = "processWdsTlvDataTransmitSpeed";
          __int16 v13 = 1024;
          int v14 = v9;
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS DataTransmitSpeed = %d", (uint8_t *)&v11, 0x12u);
        }
        if (*a2 >= 3u) {
          uint64_t v10 = 3;
        }
        else {
          uint64_t v10 = *a2;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 560))(v7, v10);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DAAEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void __Block_byref_object_copy__1(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a2 + 40);
  long long v4 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = v4;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  *(void *)(a2 + 48) = 0;
  uint64_t v5 = *(void *)(a2 + 72);
  *(_DWORD *)(a1 + 80) = *(_DWORD *)(a2 + 80);
  *(void *)(a1 + 72) = v5;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 84), (const CSIPacketAddress *)(a2 + 84));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 108), (const CSIPacketAddress *)(a2 + 108));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 132), (const CSIPacketAddress *)(a2 + 132));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 156), (const CSIPacketAddress *)(a2 + 156));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 180), (const CSIPacketAddress *)(a2 + 180));
}

void sub_2223DABB0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void __Block_byref_object_dispose__1(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_43(uint64_t a1, uint64_t a2)
{
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 80) = *a2 + 1;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_3(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 84));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_4(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 108));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_5(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 132));
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_50(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = (CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 156);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataCommandDriver32handleWdsLteAttachParamsInd_syncERKN3wds15LTEAttachParams10IndicationE_block_invoke_2_52(uint64_t a1, const unsigned __int8 *a2)
{
  uint64_t v2 = (CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 180);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataCommandDriver30handleWdsFDBackoffTimeInd_syncERKN3wds13FDBackoffTime10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void QMIDataCommandDriver::handleUlHealthTCPBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)this + 5);
      if (v7)
      {
        int v8 = *((void *)this + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 136315394;
          uint64_t v10 = "handleUlHealthTCPBottleneck_sync";
          __int16 v11 = 1024;
          int v12 = a2;
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received UL Congestion Indication: tcp bottleneck %d", (uint8_t *)&v9, 0x12u);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 976))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DAE10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleUlHealthTCPBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
}

void QMIDataCommandDriver::handleUlHealthEmergencyBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)this + 5);
      if (v7)
      {
        int v8 = *((void *)this + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 136315394;
          uint64_t v10 = "handleUlHealthEmergencyBottleneck_sync";
          __int16 v11 = 1024;
          int v12 = a2;
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: Received UL Congestion Indication: emergency bottleneck %d", (uint8_t *)&v9, 0x12u);
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 984))(v7, a2);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DAF40(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleUlHealthEmergencyBottleneck_sync(QMIDataCommandDriver *this, uint64_t a2)
{
}

uint64_t ___ZN20QMIDataCommandDriver24handleCongestionInd_syncERKN3wds10Congestion10IndicationE_block_invoke(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver29sendWdsSetEventReportReq_syncEb_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(QMIDataCommandDriver **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)v2 + 5);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        int v8 = *(_DWORD *)(a2 + 4);
        int v9 = *((void *)v2 + 12);
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendWdsSetEventReportReq_sync_block_invoke_5";
            *(_WORD *)&_DWORD buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to SetEventReport with code = 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendWdsSetEventReportReq_sync_block_invoke";
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to SetEventReport received", buf, 0xCu);
            int v9 = *((void *)v2 + 12);
          }
          uint64_t v11 = *((void *)v2 + 20);
          BOOL v12 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v11)
          {
            if (v12)
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "sendWdsGetDormancyStatusReq_sync";
              _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Getting current dormancy status", buf, 0xCu);
            }
            memset(v19, 0, sizeof(v19));
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v19);
            void v14[5] = (char *)v2 + 144;
            uint64_t v15 = QMIServiceMsg::create();
            int v16 = 25000;
            uint64_t v17 = 0;
            long long aBlock = 0;
            v14[0] = MEMORY[0x263EF8330];
            v14[1] = 0x40000000;
            _DWORD v14[2] = ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke;
            void v14[3] = &__block_descriptor_tmp_70_0;
            v14[4] = v2;
            *(void *)long long buf = MEMORY[0x263EF8330];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17GetDormancyStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            *(void *)&unsigned char buf[24] = &unk_26460B808;
            std::string v21 = v14;
            uint64_t v13 = _Block_copy(buf);
            long long aBlock = v13;
            if (v15)
            {
              qmi::Client::send();
              uint64_t v13 = aBlock;
            }
            if (v13) {
              _Block_release(v13);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v19);
          }
          else if (v12)
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendWdsGetDormancyStatusReq_sync";
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
          }
          if ((capabilities::ct::supportsDataSystemDetermination((capabilities::ct *)v12) & 1) == 0) {
            QMIDataCommandDriver::sendWdsGetCurrentDataBearerTechReq_sync(v2);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DB2AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (v7 && ((*(uint64_t (**)(void))(*(void *)v7 + 496))(v2[5]) & 1) == 0)
      {
        int v8 = *((_DWORD *)a2 + 1);
        int v9 = v2[12];
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendWdsGetDormancyStatusReq_sync_block_invoke";
            __int16 v13 = 1024;
            int v14 = v8;
            __int16 v15 = 2080;
            uint64_t v16 = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetDormancyStatus with code = 0x%x (%s)", buf, 0x1Cu);
          }
          (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 544))(v7, 1);
        }
        else
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendWdsGetDormancyStatusReq_sync_block_invoke";
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to GetDormancyStatus received", buf, 0xCu);
          }
          v11[0] = MEMORY[0x263EF8330];
          v11[1] = 0x40000000;
          v11[2] = ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke_68;
          v11[3] = &__block_descriptor_tmp_69_0;
          void v11[4] = v2;
          *(void *)long long buf = v11;
          qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(a2, 1, (uint64_t)buf);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DB4FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver32sendWdsGetDormancyStatusReq_syncEv_block_invoke_68(uint64_t a1, unsigned __int8 *a2)
{
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v31 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        int v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          int v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendWdsGetCurrentDataBearerTechReq_sync_block_invoke";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetCurrentDataBearerTech with code = 0x%x (%s)", buf, 0x1Cu);
          }
          QMIDataCommandDriver::handleDataBearerLegacy((uint64_t)v2, 0x8000, 0);
        }
        else
        {
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x2000000000;
          *(_DWORD *)&unsigned char buf[24] = 0;
          uint64_t v19 = 0;
          std::string v20 = &v19;
          uint64_t v21 = 0x2000000000;
          int v22 = 0;
          uint64_t v15 = 0;
          uint64_t v16 = &v15;
          uint64_t v17 = 0x2000000000;
          int v18 = 0;
          v14[0] = MEMORY[0x263EF8330];
          v14[1] = 0x40000000;
          _DWORD v14[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke_71;
          void v14[3] = &unk_26460AF70;
          v14[4] = buf;
          void v14[5] = &v19;
          void v14[6] = &v15;
          *(void *)uint64_t v23 = v14;
          qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(a2, 1, (uint64_t)v23);
          BOOL v10 = v2[12];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            int v11 = *(_DWORD *)(*(void *)&buf[8] + 24);
            int v12 = *((_DWORD *)v20 + 6);
            int v13 = *((_DWORD *)v16 + 6);
            *(_DWORD *)uint64_t v23 = 136315906;
            *(void *)&void v23[4] = "sendWdsGetCurrentDataBearerTechReq_sync_block_invoke_2";
            __int16 v24 = 1024;
            int v25 = v11;
            __int16 v26 = 1024;
            int v27 = v12;
            __int16 v28 = 1024;
            int v29 = v13;
            _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Data Bearer Technology status: current network (%d) rat mask (%d) service option mask (%d)", v23, 0x1Eu);
          }
          QMIDataCommandDriver::handleDataBearerLegacy((uint64_t)v2, *((_DWORD *)v20 + 6), *(_DWORD *)(*(void *)&buf[8] + 24));
          _Block_object_dispose(&v15, 8);
          _Block_object_dispose(&v19, 8);
          _Block_object_dispose(buf, 8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DB7C0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void *___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataBearerTechReq_syncEv_block_invoke_71(void *result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(result[4] + 8) + 24) = *a2;
  *(_DWORD *)(*(void *)(result[5] + 8) + 24) = *((_DWORD *)a2 + 1);
  *(_DWORD *)(*(void *)(result[6] + 8) + 24) = *((_DWORD *)a2 + 2);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_5(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_6(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver33sendWdsIndicationRegisterReq_syncEb_block_invoke_7(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (!v7 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) != 0) {
        goto LABEL_38;
      }
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = v2[12];
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "sendWdsIndicationRegisterReq_sync_block_invoke_7";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v8;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = qmi::asString();
          int v11 = "#I %s: Error registering for WDS indications: %d(%s)";
          int v12 = v9;
          uint32_t v13 = 28;
LABEL_8:
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
        }
      }
      else
      {
        if (v10)
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "sendWdsIndicationRegisterReq_sync_block_invoke";
          _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to IndicationRegister (control point) received", buf, 0xCu);
        }
        if (capabilities::ct::supportsThroughputEngineering((capabilities::ct *)v10))
        {
          if (v2[20])
          {
            *(_OWORD *)long long __p = 0u;
            long long v33 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
            int v14 = (const void **)__p[1];
            if (__p[1] != (void *)v33)
            {
              while (*((unsigned char *)*v14 + 8) != 16)
              {
                if (++v14 == (const void **)v33) {
                  goto LABEL_22;
                }
              }
            }
            if (v14 == (const void **)v33) {
LABEL_22:
            }
              operator new();
            if (!v15) {
              __cxa_bad_cast();
            }
            _OWORD v15[3] = 2000;
            int v27 = v2 + 18;
            uint64_t v28 = QMIServiceMsg::create();
            int v29 = 25000;
            uint64_t v30 = 0;
            long long aBlock = 0;
            uint64_t v22 = MEMORY[0x263EF8330];
            uint64_t v23 = 0x40000000;
            __int16 v24 = ___ZN20QMIDataCommandDriver33sendThroughputInfoIndFreqReq_syncEv_block_invoke_2;
            int v25 = &__block_descriptor_tmp_95_0;
            __int16 v26 = v2;
            *(void *)long long buf = MEMORY[0x263EF8330];
            *(void *)&uint8_t buf[8] = 0x40000000;
            *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds27SetThroughputInfoIndFreqReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
            *(void *)&unsigned char buf[24] = &unk_26460B880;
            uint64_t v35 = &v22;
            uint64_t v17 = _Block_copy(buf);
            long long aBlock = v17;
            if (v28)
            {
              qmi::Client::send();
              uint64_t v17 = aBlock;
            }
            if (v17) {
              _Block_release(v17);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          }
          else
          {
            uint64_t v16 = v2[12];
            if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "sendThroughputInfoIndFreqReq_sync";
              _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
            }
          }
        }
        uint64_t v18 = v2[20];
        uint64_t v19 = v2[12];
        BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
        if (v18)
        {
          if (v20)
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendWdsGetLteAttachParamsReq_sync";
            _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: Getting current LTE Attach Params", buf, 0xCu);
          }
          *(_OWORD *)long long __p = 0u;
          long long v33 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
          int v27 = v2 + 18;
          uint64_t v28 = QMIServiceMsg::create();
          int v29 = 25000;
          uint64_t v30 = 0;
          long long aBlock = 0;
          uint64_t v22 = MEMORY[0x263EF8330];
          uint64_t v23 = 0x40000000;
          __int16 v24 = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke;
          int v25 = &__block_descriptor_tmp_110_0;
          __int16 v26 = v2;
          *(void *)long long buf = MEMORY[0x263EF8330];
          *(void *)&uint8_t buf[8] = 0x40000000;
          *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18GetLTEAttachParams8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
          *(void *)&unsigned char buf[24] = &unk_26460B8A8;
          uint64_t v35 = &v22;
          uint64_t v21 = _Block_copy(buf);
          long long aBlock = v21;
          if (v28)
          {
            qmi::Client::send();
            uint64_t v21 = aBlock;
          }
          if (v21) {
            _Block_release(v21);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
          goto LABEL_38;
        }
        if (v20)
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "sendWdsGetLteAttachParamsReq_sync";
          int v11 = "#I %s: WDS Client is not ready";
          int v12 = v19;
          uint32_t v13 = 12;
          goto LABEL_8;
        }
      }
LABEL_38:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DBE60(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver33sendThroughputInfoIndFreqReq_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = 136315650;
      uint64_t v5 = "sendThroughputInfoIndFreqReq_sync_block_invoke_2";
      __int16 v6 = 1024;
      int v7 = v2;
      __int16 v8 = 2080;
      uint64_t v9 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: Error setting throughput frequency: %d(%s)", (uint8_t *)&v4, 0x1Cu);
    }
  }
}

void ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = v2[5];
      if (v7 && ((*(uint64_t (**)(void))(*(void *)v7 + 496))(v2[5]) & 1) == 0)
      {
        int v8 = *((_DWORD *)a2 + 1);
        uint64_t v9 = v2[12];
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Error in response to GetLTEAttachParams with code = 0x%x (%s)", buf, 0x1Cu);
          }
          uint64_t v11 = (std::__shared_weak_count *)v2[38];
          v2[37] = 0;
          v2[38] = 0;
          if (v11) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v11);
          }
        }
        else
        {
          if (v10)
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke";
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Response to GetLTEAttachParams received", buf, 0xCu);
          }
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0xD002000000;
          *(void *)&unsigned char buf[24] = __Block_byref_object_copy__1;
          long long v60 = 0u;
          long long v61 = 0u;
          memset(v62, 0, sizeof(v62));
          uint64_t v59 = __Block_byref_object_dispose__1;
          uint64_t v63 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)v62 + 12));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v62[2] + 4));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v62[3] + 12));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v62[5] + 4));
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)((char *)&v62[6] + 12));
          uint64_t v47 = 0;
          unint64_t v48 = &v47;
          uint64_t v49 = 0x2000000000;
          int v50 = 0;
          v43[0] = MEMORY[0x263EF8330];
          v43[1] = 0x40000000;
          unint64_t v44 = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_96;
          unsigned int v45 = &unk_26460B098;
          uint64_t v46 = &v47;
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          uint64_t v14 = TlvValue;
          if (TlvValue)
          {
            int v15 = v13;
            *(void *)uint64_t v51 = TlvValue;
            LOBYTE(v36[0]) = tlv::parseV<wds::tlv::OTAAttachPerformed>((unint64_t *)v51, v13);
            if (*(void *)v51) {
              v44((uint64_t)v43, (unsigned __int8 *)v36);
            }
            else {
              ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 18, v14, v15);
            }
          }
          if (*((_DWORD *)v48 + 6))
          {
            v42[0] = MEMORY[0x263EF8330];
            v42[1] = 0x40000000;
            void v42[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2;
            v42[3] = &unk_26460B0C0;
            v42[4] = buf;
            v42[5] = v2;
            *(void *)uint64_t v51 = v42;
            qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(a2, (uint64_t)v51);
            if (*(char *)(*(void *)&buf[8] + 71) < 0) {
              uint64_t v16 = *(void *)(*(void *)&buf[8] + 56);
            }
            else {
              uint64_t v16 = *(unsigned __int8 *)(*(void *)&buf[8] + 71);
            }
            if (v16)
            {
              v41[0] = MEMORY[0x263EF8330];
              v41[1] = 0x40000000;
              void v41[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_3;
              v41[3] = &unk_26460B0E8;
              v41[4] = buf;
              *(void *)uint64_t v51 = v41;
              qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(a2, (uint64_t)v51);
              uint64_t v18 = *(void *)&buf[8];
              if ((*(_DWORD *)(*(void *)&buf[8] + 80) | 2) == 3)
              {
                v40[0] = MEMORY[0x263EF8330];
                v40[1] = 0x40000000;
                void v40[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_4;
                v40[3] = &unk_26460B110;
                v40[4] = buf;
                void v40[5] = v2;
                *(void *)uint64_t v51 = v40;
                qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(a2, 19, (uint64_t)v51);
                v39[0] = MEMORY[0x263EF8330];
                v39[1] = 0x40000000;
                v39[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_5;
                v39[3] = &unk_26460B138;
                v39[4] = buf;
                v39[5] = v2;
                *(void *)uint64_t v51 = v39;
                qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(a2, 20, (uint64_t)v51);
                v38[0] = MEMORY[0x263EF8330];
                v38[1] = 0x40000000;
                void v38[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_6;
                void v38[3] = &unk_26460B160;
                v38[4] = buf;
                v38[5] = v2;
                *(void *)uint64_t v51 = v38;
                qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(a2, 21, (uint64_t)v51);
                uint64_t v19 = v2[12];
                BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
                uint64_t v18 = *(void *)&buf[8];
                if (v20)
                {
                  uint64_t v21 = v36;
                  CSIPacketAddress::operator std::string();
                  if (v37 < 0) {
                    uint64_t v21 = (void **)v36[0];
                  }
                  CSIPacketAddress::operator std::string();
                  CSIPacketAddress::operator std::string();
                  uint64_t v22 = v34;
                  if (v35 < 0) {
                    uint64_t v22 = (void **)v34[0];
                  }
                  if (v33 >= 0) {
                    p_p = &__p;
                  }
                  else {
                    p_p = __p;
                  }
                  *(_DWORD *)uint64_t v51 = 136315906;
                  *(void *)&uint8_t v51[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke_7";
                  __int16 v52 = 2080;
                  __int16 v53 = v21;
                  __int16 v54 = 2080;
                  uint64_t v55 = v22;
                  __int16 v56 = 2080;
                  uint64_t v57 = p_p;
                  _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv4: %s, Mask: %s, Gateway: %s", v51, 0x2Au);
                  if (v33 < 0) {
                    operator delete(__p);
                  }
                  if (v35 < 0) {
                    operator delete(v34[0]);
                  }
                  if (v37 < 0) {
                    operator delete(v36[0]);
                  }
                  uint64_t v18 = *(void *)&buf[8];
                }
              }
              if ((*(_DWORD *)(v18 + 80) & 0xFFFFFFFE) == 2)
              {
                v31[0] = MEMORY[0x263EF8330];
                v31[1] = 0x40000000;
                v31[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_105;
                v31[3] = &unk_26460B188;
                v31[4] = buf;
                v31[5] = v2;
                *(void *)uint64_t v51 = v31;
                qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(a2, 22, (uint64_t)v51);
                v30[0] = MEMORY[0x263EF8330];
                v30[1] = 0x40000000;
                v30[2] = ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2_107;
                v30[3] = &unk_26460B1B0;
                v30[4] = buf;
                v30[5] = v2;
                *(void *)uint64_t v51 = v30;
                qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(a2, 23, (uint64_t)v51);
                __int16 v24 = v2[12];
                BOOL v25 = os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT);
                uint64_t v18 = *(void *)&buf[8];
                if (v25)
                {
                  CSIPacketAddress::operator std::string();
                  int v26 = v37;
                  int v27 = (void **)v36[0];
                  CSIPacketAddress::operator std::string();
                  uint64_t v28 = v36;
                  if (v26 < 0) {
                    uint64_t v28 = v27;
                  }
                  if (v35 >= 0) {
                    int v29 = v34;
                  }
                  else {
                    int v29 = (void **)v34[0];
                  }
                  *(_DWORD *)uint64_t v51 = 136315650;
                  *(void *)&uint8_t v51[4] = "sendWdsGetLteAttachParamsReq_sync_block_invoke_3";
                  __int16 v52 = 2080;
                  __int16 v53 = v28;
                  __int16 v54 = 2080;
                  uint64_t v55 = v29;
                  _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Received WDS AttachAPN IPv6: %s, Gateway: %s", v51, 0x20u);
                  if (v35 < 0) {
                    operator delete(v34[0]);
                  }
                  if (v37 < 0) {
                    operator delete(v36[0]);
                  }
                  uint64_t v18 = *(void *)&buf[8];
                }
              }
              *(_DWORD *)(v18 + 72) = 1;
              (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 632))(v7, v18 + 40);
            }
          }
          else
          {
            uint64_t v17 = *(void *)&buf[8] + 40;
            *(_DWORD *)(*(void *)&buf[8] + 72) = -1;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 632))(v7, v17);
          }
          _Block_object_dispose(&v47, 8);
          _Block_object_dispose(buf, 8);
          if (SHIBYTE(v61) < 0) {
            operator delete(*((void **)&v60 + 1));
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DC7B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a68, 8);
  _Block_object_dispose(&STACK[0x210], 8);
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_96(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 80) = *a2 + 1;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_4(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 84));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_5(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 108));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_6(uint64_t a1)
{
  return CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 132));
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_105(uint64_t a1, const unsigned __int8 *a2)
{
  int v2 = (CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 156);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

uint64_t ___ZN20QMIDataCommandDriver33sendWdsGetLteAttachParamsReq_syncEv_block_invoke_2_107(uint64_t a1, const unsigned __int8 *a2)
{
  int v2 = (CSIPacketAddress *)(*(void *)(*(void *)(a1 + 32) + 8) + 180);
  CSIPacketAddress::setIPv6Address(v2, a2);

  return CSIPacketAddress::setPrefixLen(v2);
}

void ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_2(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = v2[5];
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        uint64_t v22 = 0;
        uint64_t v23 = &v22;
        uint64_t v24 = 0x2000000000;
        char v25 = 0;
        int v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          uint64_t v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v10 = qmi::asString();
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendGetDeviceNAIRequest_sync_block_invoke_2";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v8;
            *(_WORD *)&unsigned char buf[18] = 2080;
            *(void *)&buf[20] = v10;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve NAI: 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          v17[0] = MEMORY[0x263EF8330];
          v17[1] = 0x40000000;
          uint64_t v18 = ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_115;
          uint64_t v19 = &unk_26460B1F8;
          BOOL v20 = &v22;
          uint64_t v21 = v2;
          uint64_t TlvValue = (std::string::value_type *)qmi::MessageBase::findTlvValue(a2);
          int v13 = TlvValue;
          if (TlvValue)
          {
            int v14 = v12;
            int v26 = TlvValue;
            memset(buf, 0, 24);
            tlv::parseV<wds::tlv::ProfileNAI>(&v26, v12, (std::string *)buf);
            int v15 = v26;
            if (v26) {
              v18((uint64_t)v17, buf);
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (!v15) {
              ((void (*)(void, uint64_t, std::string::value_type *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 21, v13, v14);
            }
          }
        }
        if (!*((unsigned char *)v23 + 24))
        {
          uint64_t v16 = v2[12];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = "sendGetDeviceNAIRequest_sync_block_invoke";
            _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: clearing device NAI", buf, 0xCu);
          }
          memset(buf, 0, 24);
          QMIDataCommandDriver::setDeviceNAI((uint64_t)v2, (const std::string *)buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
        _Block_object_dispose(&v22, 8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  _Block_object_dispose(&a16, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver28sendGetDeviceNAIRequest_syncEv_block_invoke_115(uint64_t a1, char *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 40);
  memset(&__p, 0, sizeof(__p));
  unint64_t v4 = *((void *)a2 + 1);
  if (a2[23] >= 0)
  {
    unint64_t v5 = a2[23];
  }
  else
  {
    a2 = *(char **)a2;
    unint64_t v5 = v4;
  }
  std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(&__p, a2, &a2[v5], v5);
  QMIDataCommandDriver::setDeviceNAI(v3, &__p);
  *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  __int16 v6 = *(NSObject **)(v3 + 96);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    p_p = &__p;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v10 = "sendGetDeviceNAIRequest_sync_block_invoke";
    __int16 v11 = 2080;
    int v12 = p_p;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: device NAI: '%s'", buf, 0x16u);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2223DCD6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  int v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = v2[5];
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        int v8 = *((_DWORD *)a2 + 1);
        if (v8)
        {
          uint64_t v9 = v2[12];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "sendWdsGetCurrentDataSystemRequest_sync_block_invoke";
            __int16 v12 = 1024;
            int v13 = v8;
            __int16 v14 = 2080;
            uint64_t v15 = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve DataSystemStatus: 0x%x (%s)", buf, 0x1Cu);
          }
        }
        else
        {
          v10[0] = MEMORY[0x263EF8330];
          v10[1] = 0x40000000;
          _DWORD v10[2] = ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke_118;
          v10[3] = &__block_descriptor_tmp_119_0;
          v10[4] = v2;
          *(void *)long long buf = v10;
          qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(a2, 16, (uint64_t)buf);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DCF18(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver39sendWdsGetCurrentDataSystemRequest_syncEv_block_invoke_118(uint64_t a1, uint64_t a2)
{
}

void QMIDataCommandDriver::setObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 328);
  *(void *)(a1 + 320) = v3;
  *(void *)(a1 + 328) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::setObserver(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v4 = *(std::__shared_weak_count **)(a1 + 304);
  *(void *)(a1 + 296) = v3;
  *(void *)(a1 + 304) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

BOOL QMIDataCommandDriver::preSleepState(QMIDataCommandDriver *this)
{
  v4[0] = MEMORY[0x263EF8330];
  v4[1] = 0x40000000;
  _OWORD v4[2] = ___ZNK20QMIDataCommandDriver13preSleepStateEv_block_invoke;
  v4[3] = &__block_descriptor_tmp_122;
  v4[4] = this;
  unint64_t v5 = v4;
  v6[0] = MEMORY[0x263EF8330];
  v6[1] = 0x40000000;
  _OWORD v6[2] = ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE20execute_wrapped_syncIU13block_pointerFbvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke;
  void v6[3] = &__block_descriptor_tmp_619;
  _OWORD v6[4] = (char *)this + 64;
  v6[5] = &v5;
  uint64_t v7 = v6;
  uint64_t v2 = (char *)this + 80;
  uint64_t v1 = *((void *)this + 10);
  if (*((void *)v2 + 1))
  {
    char v14 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v9 = 0x40000000;
    uint64_t v10 = ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v11 = &__block_descriptor_tmp_621;
    __int16 v12 = &v14;
    int v13 = &v7;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v14 = 0;
    uint64_t block = MEMORY[0x263EF8330];
    uint64_t v9 = 0x40000000;
    uint64_t v10 = ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke;
    __int16 v11 = &__block_descriptor_tmp_620;
    __int16 v12 = &v14;
    int v13 = &v7;
    dispatch_sync(v1, &block);
  }
  return v14 != 0;
}

BOOL ___ZNK20QMIDataCommandDriver13preSleepStateEv_block_invoke(uint64_t a1)
{
  return *(void *)(*(void *)(*(void *)(a1 + 32) + 336) + 24) != 0;
}

BOOL non-virtual thunk to'QMIDataCommandDriver::preSleepState(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::preSleepState((QMIDataCommandDriver *)((char *)this - 24));
}

void QMIDataCommandDriver::handleWDSEnterLowPower_sync(uint64_t a1, char *a2, int a3, NSObject **a4)
{
  uint8_t v72[4] = *MEMORY[0x263EF8340];
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v66 = 0;
  std::string::basic_string[abi:ne180100]<0>(__p, a2);
  int v8 = std::__tree<std::string>::find<std::string>(*(void *)(a1 + 336), __p);
  uint64_t v9 = *(void **)(a1 + 336);
  if (v9 + 1 == v8)
  {
    uint64_t v15 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = __p;
      if (v66 < 0) {
        uint64_t v16 = (void **)__p[0];
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v16;
      _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#N %s: client %s is not LPM-active !", buf, 0x16u);
    }
  }
  else
  {
    long long v60 = a2;
    int v61 = a3;
    if (!v9[3])
    {
      uint64_t v10 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v60;
        _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Client %s initiating the sleeping group", buf, 0x16u);
      }
      __int16 v11 = dispatch_group_create();
      __int16 v12 = operator new(0x38uLL);
      int v13 = v12;
      v12[1] = 0;
      void v12[2] = 0;
      *__int16 v12 = &unk_26D4C2948;
      void v12[3] = v11;
      char v14 = v12 + 3;
      if (v11)
      {
        dispatch_retain(v11);
        v13[4] = 0;
        void v13[5] = 0;
        v13[6] = 0;
        dispatch_release(v11);
      }
      else
      {
        void v12[4] = 0;
        void v12[5] = 0;
        v12[6] = 0;
      }
      uint64_t v17 = *(void *)(a1 + 336);
      uint64_t v18 = *(std::__shared_weak_count **)(v17 + 32);
      *(void *)(v17 + 24) = v14;
      *(void *)(v17 + 32) = v13;
      if (v18) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v18);
      }
      uint64_t v19 = *(void **)(a1 + 336);
      BOOL v20 = (void *)*v19;
      if ((void *)*v19 != v19 + 1)
      {
        __int16 v62 = *(dispatch_object_t **)(*(void *)(a1 + 336) + 24);
        if (*((char *)v20 + 55) < 0) {
          std::string::__init_copy_ctor_external(&v64, (const std::string::value_type *)v20[4], v20[5]);
        }
        else {
          std::string v64 = *(std::string *)(v20 + 4);
        }
        v69[0] = v64.__r_.__value_.__l.__size_;
        std::string::size_type v21 = v64.__r_.__value_.__r.__words[0];
        *(void *)((char *)v69 + 7) = *(std::string::size_type *)((char *)&v64.__r_.__value_.__r.__words[1] + 7);
        char v22 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
        memset(&v64, 0, sizeof(v64));
        long long v67 = 0u;
        memset(v68, 0, sizeof(v68));
        uint64_t v23 = dispatch_group_create();
        uint64_t v24 = v23;
        if (v23)
        {
          dispatch_retain(v23);
          dispatch_group_enter(v24);
          dispatch_release(v24);
        }
        char v25 = operator new(0x30uLL);
        v25[1] = 0;
        _OWORD v25[2] = 0;
        *char v25 = &unk_26D4C2448;
        v25[3] = v21;
        void v25[4] = v69[0];
        *(void *)((char *)v25 + 39) = *(void *)((char *)v69 + 7);
        *((unsigned char *)v25 + 47) = v22;
        v69[0] = 0;
        *(void *)((char *)v69 + 7) = 0;
        int v26 = *v62;
        if (*v62)
        {
          dispatch_retain(*v62);
          dispatch_group_enter(v26);
        }
        global_queue = dispatch_get_global_queue(0, 0);
        if (global_queue) {
          dispatch_retain(global_queue);
        }
        *(void *)long long buf = v25 + 3;
        *(void *)&uint8_t buf[8] = v25;
        atomic_fetch_add_explicit(v25 + 1, 1uLL, memory_order_relaxed);
        *(void *)&uint8_t buf[16] = v26;
        if (v26)
        {
          dispatch_retain(v26);
          dispatch_group_enter(v26);
        }
        long long v71 = v67;
        std::__function::__value_func<void ()(os_log_s *,unsigned long long)>::__value_func[abi:ne180100]((uint64_t)v72, (uint64_t)v68);
        long long v67 = 0uLL;
        std::__function::__value_func<void ()(os_log_s *,unsigned long long)>::operator=[abi:ne180100](v68);
        operator new();
      }
      uint64_t v28 = *(std::__shared_weak_count **)(a1 + 72);
      if (v28)
      {
        int v29 = std::__shared_weak_count::lock(v28);
        if (v29)
        {
          p_shared_weak_owners = &v29->__shared_weak_owners_;
          atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          std::__shared_weak_count::__release_shared[abi:ne180100](v29);
          atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
          operator new();
        }
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v31 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = v9[2];
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v60;
      *(_WORD *)&buf[22] = 2048;
      *(void *)&long long v71 = v32;
      _os_log_impl(&dword_22231A000, v31, OS_LOG_TYPE_DEFAULT, "#I %s: Client %s joining the sleeping group, fActiveClients std::string::size_type size = %lu", buf, 0x20u);
      uint64_t v9 = *(void **)(a1 + 336);
    }
    uint64_t v33 = v9[6];
    uint64_t v34 = v9[7];
    uint64_t v35 = ((v34 - v33) << 6) - 1;
    if (v34 == v33) {
      uint64_t v35 = 0;
    }
    if (v35 == v9[10] + v9[9])
    {
      std::deque<dispatch::group_session>::__add_back_capacity(v9 + 5);
      uint64_t v33 = v9[6];
      uint64_t v34 = v9[7];
    }
    if (v34 == v33)
    {
      char v37 = 0;
    }
    else
    {
      unint64_t v36 = v9[10] + v9[9];
      char v37 = (dispatch_group_t *)(*(void *)(v33 + ((v36 >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * (v36 & 0x1FF));
    }
    uint64_t v38 = *a4;
    dispatch_group_t *v37 = *a4;
    if (v38)
    {
      dispatch_retain(v38);
      if (*v37) {
        dispatch_group_enter(*v37);
      }
    }
    ++v9[10];
    unsigned int v39 = *(void **)(a1 + 336);
    uint64_t v40 = v39[16];
    if (v40)
    {
      unint64_t v41 = v40 + v39[15] - 1;
      uint64_t v42 = *(void *)(v39[12] + ((v41 >> 6) & 0x3FFFFFFFFFFFFF8));
      unint64_t v43 = v41 & 0x1FF;
      unint64_t v44 = *(NSObject **)(v42 + 8 * v43);
      if (v44)
      {
        dispatch_retain(*(dispatch_object_t *)(v42 + 8 * v43));
        dispatch_group_enter(v44);
      }
      unsigned int v45 = *a4;
      *a4 = v44;
      if (v45)
      {
        dispatch_group_leave(v45);
        dispatch_release(v45);
      }
      uint64_t v46 = *(void **)(a1 + 336);
      unint64_t v47 = v46[16] + v46[15] - 1;
      std::__destroy_at[abi:ne180100]<dispatch::group_session,0>((NSObject **)(*(void *)(v46[12]
                                                                                         + ((v47 >> 6) & 0x3FFFFFFFFFFFFF8))
                                                                             + 8 * (v47 & 0x1FF)));
      --v46[16];
      std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](v46 + 11, 1);
    }
    else
    {
      unint64_t v48 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v49 = __p;
        if (v66 < 0) {
          uint64_t v49 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v49;
        _os_log_impl(&dword_22231A000, v48, OS_LOG_TYPE_DEFAULT, "#E %s: client %s has no placeholder session available, using the real session", buf, 0x16u);
      }
    }
    if (v61)
    {
      int v50 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_22231A000, v50, OS_LOG_TYPE_DEFAULT, "#I %s: (WDS) Entering low power", buf, 0xCu);
      }
      QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync((QMIDataCommandDriver *)a1, 1, "handleWDSEnterLowPower_sync");
      uint64_t v51 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_22231A000, v51, OS_LOG_TYPE_DEFAULT, "#I %s: Turn off packet indications due to entering low power", buf, 0xCu);
      }
      QMIDataCommandDriver::sendWdsSetEventReportReq_sync((QMIDataCommandDriver *)a1, 0);
      if (capabilities::ct::supportsDataSystemDetermination(v52)) {
        QMIDataCommandDriver::handleDataBearer((QMIDataCommandDriver *)a1);
      }
      else {
        QMIDataCommandDriver::handleDataBearerLegacy(a1, *(_DWORD *)(a1 + 280), *(_DWORD *)(a1 + 284));
      }
      __int16 v53 = *(std::__shared_weak_count **)(a1 + 328);
      if (v53)
      {
        __int16 v54 = std::__shared_weak_count::lock(v53);
        if (v54)
        {
          uint64_t v55 = a4;
          uint64_t v56 = *(void *)(a1 + 320);
          if (v56)
          {
            uint64_t v57 = *(NSObject **)(a1 + 96);
            if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
              _os_log_impl(&dword_22231A000, v57, OS_LOG_TYPE_DEFAULT, "#I %s: Notifing observer about entering low power", buf, 0xCu);
            }
            __int16 v58 = *v55;
            dispatch_group_t group = v58;
            if (v58)
            {
              dispatch_retain(v58);
              dispatch_group_enter(v58);
            }
            (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v56 + 32))(v56, &group);
            if (group)
            {
              dispatch_group_leave(group);
              if (group) {
                dispatch_release(group);
              }
            }
LABEL_74:
            std::__shared_weak_count::__release_shared[abi:ne180100](v54);
            goto LABEL_75;
          }
        }
      }
      else
      {
        __int16 v54 = 0;
      }
      uint64_t v59 = *(NSObject **)(a1 + 96);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "handleWDSEnterLowPower_sync";
        _os_log_impl(&dword_22231A000, v59, OS_LOG_TYPE_DEFAULT, "#N %s: BBDataCommandDriverEventHandlerObserver is empty !", buf, 0xCu);
      }
      if (v54) {
        goto LABEL_74;
      }
    }
  }
LABEL_75:
  if (SHIBYTE(v66) < 0) {
    operator delete(__p[0]);
  }
}

void sub_2223DDC78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, dispatch_group_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, dispatch_group_t group,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,char a33)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (a32 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleWDSEnterLowPower_sync(uint64_t a1, char *a2, int a3, NSObject **a4)
{
}

void QMIDataCommandDriver::handleWDSExitLowPower_sync(QMIDataCommandDriver *this, const char *a2, int a3)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  __int16 v6 = *((void *)this + 12);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315650;
    __int16 v11 = "handleWDSExitLowPower_sync";
    __int16 v12 = 2080;
    int v13 = a2;
    __int16 v14 = 2080;
    uint64_t v15 = asStringBool();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Exiting low power, client %s primary %s", (uint8_t *)&v10, 0x20u);
  }
  uint64_t v7 = (QMIDataCommandDriver::QMIClientsInfo *)*((void *)this + 42);
  if (*((void *)v7 + 3))
  {
    int v8 = *((void *)this + 12);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315394;
      __int16 v11 = "handleWDSExitLowPower_sync";
      __int16 v12 = 2080;
      int v13 = a2;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#N %s: Client %s resetting the sleeping group", (uint8_t *)&v10, 0x16u);
      uint64_t v7 = (QMIDataCommandDriver::QMIClientsInfo *)*((void *)this + 42);
    }
    QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(v7);
  }
  if (a3)
  {
    QMIDataCommandDriver::sendWdsSetEventReportReq_sync(this, 1);
    QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(this);
    if ((capabilities::ct::supportsDataSystemDetermination(v9) & 1) == 0) {
      QMIDataCommandDriver::sendWdsGetCurrentDataSystemRequest_sync(this);
    }
    QMIDataCommandDriver::sendOffloadKeepaliveRequest_sync(this, 0, "handleWDSExitLowPower_sync");
  }
}

void QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(QMIDataCommandDriver *this)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  if (capabilities::ct::supports5GSlicing(this))
  {
    uint64_t v2 = *((void *)this + 20);
    uint64_t v3 = *((void *)this + 12);
    BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (v4)
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "sendWdsGetTdInfoReq_sync";
        _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I %s: sending GetTdInfo::Request", (uint8_t *)&buf, 0xCu);
      }
      memset(v11, 0, sizeof(v11));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
      v6[5] = (char *)this + 144;
      uint64_t v7 = QMIServiceMsg::create();
      int v8 = 25000;
      uint64_t v9 = 0;
      long long aBlock = 0;
      v6[0] = MEMORY[0x263EF8330];
      v6[1] = 0x40000000;
      _OWORD v6[2] = ___ZN20QMIDataCommandDriver24sendWdsGetTdInfoReq_syncEv_block_invoke;
      void v6[3] = &__block_descriptor_tmp_184;
      _OWORD v6[4] = this;
      *(void *)&long long buf = MEMORY[0x263EF8330];
      *((void *)&buf + 1) = 0x40000000;
      int v13 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds9GetTdInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      __int16 v14 = &unk_26460BA20;
      uint64_t v15 = v6;
      unint64_t v5 = _Block_copy(&buf);
      long long aBlock = v5;
      if (v7)
      {
        qmi::Client::send();
        unint64_t v5 = aBlock;
      }
      if (v5) {
        _Block_release(v5);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v11);
    }
    else if (v4)
    {
      LOWORD(buf) = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)&buf, 2u);
    }
  }
}

void sub_2223DE130(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleWDSExitLowPower_sync(QMIDataCommandDriver *this, const char *a2, int a3)
{
}

void QMIDataCommandDriver::pushVoipAppInfo(QMIDataCommandDriver *a1, int a2, int a3, int a4)
{
  uint64_t v35 = *MEMORY[0x263EF8340];
  if (*((void *)a1 + 20))
  {
    long long v30 = 0u;
    long long v31 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v30);
    int v8 = (const void **)*((void *)&v30 + 1);
    uint64_t v9 = (const void **)v31;
    uint64_t v10 = (const void **)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1) != (void)v31)
    {
      uint64_t v10 = (const void **)*((void *)&v30 + 1);
      while (*((unsigned char *)*v10 + 8) != 16)
      {
        if (++v10 == (const void **)v31) {
          goto LABEL_12;
        }
      }
    }
    if (v10 == (const void **)v31) {
LABEL_12:
    }
      operator new();
    if (!v11) {
      goto LABEL_43;
    }
    v11[3] = 1;
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    v28[2] = ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_2;
    v28[3] = &__block_descriptor_tmp_128;
    int v29 = a2;
    if (v8 == v9) {
      goto LABEL_20;
    }
    while (*((unsigned char *)*v8 + 8) != 17)
    {
      if (++v8 == v9) {
        goto LABEL_20;
      }
    }
    if (v8 == v9) {
LABEL_20:
    }
      operator new();
    if (!v13) {
      goto LABEL_43;
    }
    ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_2((uint64_t)v28, v13 + 3);
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 0x40000000;
    v26[2] = ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_3;
    v26[3] = &__block_descriptor_tmp_130;
    int v27 = a3;
    __int16 v14 = (const void **)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1) != (void)v31)
    {
      while (*((unsigned char *)*v14 + 8) != 18)
      {
        if (++v14 == (const void **)v31) {
          goto LABEL_28;
        }
      }
    }
    if (v14 == (const void **)v31) {
LABEL_28:
    }
      operator new();
    if (!v15) {
      goto LABEL_43;
    }
    ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_3((uint64_t)v26, v15 + 9);
    v24[0] = MEMORY[0x263EF8330];
    v24[1] = 0x40000000;
    _OWORD v24[2] = ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_4;
    void v24[3] = &__block_descriptor_tmp_132_0;
    int v25 = a4;
    uint64_t v16 = (const void **)*((void *)&v30 + 1);
    if (*((void *)&v30 + 1) != (void)v31)
    {
      while (*((unsigned char *)*v16 + 8) != 19)
      {
        if (++v16 == (const void **)v31) {
          goto LABEL_36;
        }
      }
    }
    if (v16 == (const void **)v31) {
LABEL_36:
    }
      operator new();
    if (!v17) {
LABEL_43:
    }
      __cxa_bad_cast();
    ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_4((uint64_t)v24, v17 + 9);
    void v19[5] = (char *)a1 + 144;
    uint64_t v20 = QMIServiceMsg::create();
    int v21 = 25000;
    uint64_t v22 = 0;
    long long aBlock = 0;
    v19[0] = MEMORY[0x263EF8330];
    v19[1] = 0x40000000;
    _OWORD v19[2] = ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_5;
    void v19[3] = &__block_descriptor_tmp_133;
    void v19[4] = a1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds11VoIPAppInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v33 = &unk_26460B980;
    uint64_t v34 = v19;
    uint64_t v18 = _Block_copy(buf);
    long long aBlock = v18;
    if (v20)
    {
      qmi::Client::send();
      uint64_t v18 = aBlock;
    }
    if (v18) {
      _Block_release(v18);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v30);
  }
  else
  {
    uint64_t v12 = *((void *)a1 + 12);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = QMIDataCommandDriver::getName(a1);
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "pushVoipAppInfo";
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#E DATA.%s: %s: WDS Client is not ready", buf, 0x16u);
    }
  }
}

void sub_2223DEA44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_4(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver15pushVoipAppInfoE23VoIPCallApplicationType13VoIPCallState12VoIPCallType_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v19 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(QMIDataCommandDriver **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)*((void *)v2 + 6);
  if (v3)
  {
    unint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      __int16 v6 = v5;
      uint64_t v7 = *((void *)v2 + 5);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0 && *(_DWORD *)(a2 + 4))
      {
        int v8 = *((void *)v2 + 12);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t Name = QMIDataCommandDriver::getName(v2);
          int v10 = *(_DWORD *)(a2 + 4);
          int v11 = 136315906;
          uint64_t v12 = Name;
          __int16 v13 = 2080;
          __int16 v14 = "pushVoipAppInfo_block_invoke_5";
          __int16 v15 = 1024;
          int v16 = v10;
          __int16 v17 = 2080;
          uint64_t v18 = qmi::asString();
          _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#E DATA.%s: %s: Failed to send VoipAppInfo: 0x%x (%s)", (uint8_t *)&v11, 0x26u);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DEBEC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::pushVoipAppInfo(uint64_t a1, int a2, int a3, int a4)
{
}

uint64_t QMIDataCommandDriver::blockedCellularTrafficHint_sync(QMIDataCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 6);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = std::__shared_weak_count::lock(v2);
  if (!v3) {
    return 0;
  }
  BOOL v4 = v3;
  uint64_t v5 = *((void *)this + 5);
  if (v5) {
    uint64_t v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 840))(v5);
  }
  else {
    uint64_t v6 = 0;
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v6;
}

void sub_2223DEC94(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::blockedCellularTrafficHint_sync(QMIDataCommandDriver *this)
{
  return QMIDataCommandDriver::blockedCellularTrafficHint_sync((QMIDataCommandDriver *)((char *)this - 24));
}

uint64_t QMIDataCommandDriver::getRadioTransmitType(uint64_t a1, int a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = (capabilities::ct *)std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = (std::__shared_weak_count *)v5;
      uint64_t v7 = *(void *)(a1 + 40);
      if (v7)
      {
        if (!capabilities::ct::supportsDataSystemDetermination(v5))
        {
          switch(a2)
          {
            case 1:
              if (*(_DWORD *)(a1 + 284) != 2) {
                goto LABEL_25;
              }
              int v12 = *(_DWORD *)(a1 + 280);
              if ((v12 & 0x20D) != 0) {
                unsigned int v13 = 150;
              }
              else {
                unsigned int v13 = 0;
              }
              if ((v12 & 0x12) != 0) {
                uint64_t v8 = 151;
              }
              else {
                uint64_t v8 = v13;
              }
              break;
            case 2:
            case 3:
              if (*(_DWORD *)(a1 + 284) != 1) {
                goto LABEL_25;
              }
              int v10 = *(_DWORD *)(a1 + 280);
              if ((v10 & 0xE) != 0) {
                unsigned int v11 = 150;
              }
              else {
                unsigned int v11 = 0;
              }
              if (v10) {
                uint64_t v8 = 151;
              }
              else {
                uint64_t v8 = v11;
              }
              break;
            case 4:
              unsigned int v14 = *(_DWORD *)(a1 + 284);
LABEL_28:
              BOOL v9 = v14 == 2;
LABEL_29:
              unsigned int v15 = 150;
LABEL_30:
              if (v9) {
                uint64_t v8 = v15;
              }
              else {
                uint64_t v8 = 0;
              }
              break;
            case 5:
            case 6:
              uint64_t v8 = 150;
              break;
            default:
              goto LABEL_25;
          }
          goto LABEL_33;
        }
        if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 424))(v7))
        {
          uint64_t v8 = 0;
          switch((*(unsigned int (**)(uint64_t))(*(void *)v7 + 512))(v7))
          {
            case 1u:
            case 2u:
              BOOL v9 = a2 == 1;
              goto LABEL_37;
            case 3u:
            case 4u:
            case 5u:
              BOOL v9 = a2 == 1;
              goto LABEL_29;
            case 0xAu:
              BOOL v9 = (a2 & 0xFFFFFFFE) == 2;
LABEL_37:
              unsigned int v15 = 151;
              goto LABEL_30;
            case 0xBu:
            case 0xCu:
            case 0xFu:
              unsigned int v14 = a2 & 0xFFFFFFFE;
              goto LABEL_28;
            case 0xDu:
              BOOL v9 = a2 == 3;
              goto LABEL_29;
            case 0xEu:
              BOOL v9 = (a2 & 0xFFFFFFFE) == 4;
              goto LABEL_29;
            case 0x10u:
              BOOL v9 = a2 == 5;
              goto LABEL_29;
            case 0x11u:
              BOOL v9 = a2 == 6;
              goto LABEL_29;
            default:
              goto LABEL_33;
          }
        }
      }
LABEL_25:
      uint64_t v8 = 0;
LABEL_33:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      return v8;
    }
  }
  return 0;
}

void sub_2223DEEA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::getRadioTransmitType(uint64_t a1, int a2)
{
  return QMIDataCommandDriver::getRadioTransmitType(a1 - 32, a2);
}

void QMIDataCommandDriver::handleDataModeChanged_sync(PersonalitySpecificImpl *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)a1 + 41);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      BOOL v4 = v3;
      uint64_t v5 = *((void *)a1 + 40);
      if (v5)
      {
        uint64_t v6 = PersonalitySpecificImpl::simSlot(a1);
        if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v5 + 96))(v5, v6))
        {
          QMIDataCommandDriver::sendWdsGetTdInfoReq_sync(a1);
          uint64_t v7 = PersonalitySpecificImpl::simSlot(a1);
          uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 88))(v5, v7);
          (*(void (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 408))(a1, v8);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_2223DF02C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleDataModeChanged_sync(uint64_t a1)
{
}

void QMIDataCommandDriver::handleNRSliceConfigFlagChange_sync(QMIDataCommandDriver *this, int a2)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v4 = *((void *)this + 20);
  uint64_t v5 = *((void *)this + 12);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "handleNRSliceConfigFlagChange_sync";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asStringBool();
      *(_WORD *)&buf[22] = 2080;
      int v25 = (void *)asStringBool();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfig: %s (current value %s)", buf, 0x20u);
    }
    if (!*((unsigned char *)this + 489) || *((unsigned __int8 *)this + 488) != a2)
    {
      *(_OWORD *)std::string __p = 0u;
      long long v23 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      v20[0] = MEMORY[0x263EF8330];
      v20[1] = 0x40000000;
      void v20[2] = ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke;
      v20[3] = &__block_descriptor_tmp_135_1;
      char v21 = a2;
      uint64_t v7 = (const void **)__p[1];
      if (__p[1] != (void *)v23)
      {
        while (*((unsigned char *)*v7 + 8) != 1)
        {
          if (++v7 == (const void **)v23) {
            goto LABEL_15;
          }
        }
      }
      if (v7 == (const void **)v23) {
LABEL_15:
      }
        operator new();
      if (!v8) {
        __cxa_bad_cast();
      }
      ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke((uint64_t)v20, v8 + 9);
      BOOL v9 = *((void *)this + 12);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = asStringBool();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "handleNRSliceConfigFlagChange_sync";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v11;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured: fSliceFlag updated tentatively to %s", buf, 0x16u);
      }
      *((_WORD *)this + 244) = a2 | 0x100;
      unsigned int v15 = (char *)this + 144;
      uint64_t v16 = QMIServiceMsg::create();
      int v17 = 25000;
      uint64_t v18 = 0;
      long long aBlock = 0;
      v13[0] = MEMORY[0x263EF8330];
      v13[1] = 0x40000000;
      unint64_t v13[2] = ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke_136;
      v13[3] = &__block_descriptor_tmp_137_0;
      v13[4] = this;
      char v14 = a2;
      *(void *)long long buf = MEMORY[0x263EF8330];
      *(void *)&uint8_t buf[8] = 0x40000000;
      *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
      int v25 = &unk_26460B7B8;
      int v26 = v13;
      int v12 = _Block_copy(buf);
      long long aBlock = v12;
      if (v16)
      {
        qmi::Client::send();
        int v12 = aBlock;
      }
      if (v12) {
        _Block_release(v12);
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
    }
  }
  else if (v6)
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "handleNRSliceConfigFlagChange_sync";
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
  }
}

void sub_2223DF4D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, ...)
{
  va_start(va, a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver34handleNRSliceConfigFlagChange_syncEb_block_invoke_136(uint64_t a1, uint64_t a2)
{
  *(void *)&v14[13] = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 48);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      uint64_t v7 = *(void *)(v2 + 40);
      if (v7 && ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
      {
        int v8 = *(_DWORD *)(a2 + 4);
        BOOL v9 = *(NSObject **)(v2 + 96);
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            int v11 = 136315650;
            int v12 = "handleNRSliceConfigFlagChange_sync_block_invoke";
            __int16 v13 = 1024;
            *(_DWORD *)char v14 = v8;
            _DWORD v14[2] = 2080;
            *(void *)&void v14[3] = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: Baseband failed to set NRSliceConfigured: 0x%x (%s), fSliceFlag unknown", (uint8_t *)&v11, 0x1Cu);
          }
          *(_WORD *)(v2 + 488) = 0;
        }
        else if (v10)
        {
          int v11 = 136315394;
          int v12 = "handleNRSliceConfigFlagChange_sync_block_invoke";
          __int16 v13 = 2080;
          *(void *)char v14 = asStringBool();
          _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: NRSliceConfigured updated successfully: %s", (uint8_t *)&v11, 0x16u);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223DF6B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::handleNRSliceConfigFlagChange_sync(QMIDataCommandDriver *this, int a2)
{
}

void QMIDataCommandDriver::dumpDataCommandDriverState(QMIDataCommandDriver *this)
{
  uint64_t v25 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 12);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: -------------------------- DATA.QMIDriver --------------------------", (uint8_t *)&buf, 2u);
    uint64_t v2 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*((void *)this + 20))
    {
      uint64_t Name = qmi::Client::getName((QMIDataCommandDriver *)((char *)this + 144));
      if (*(char *)(Name + 23) >= 0) {
        uint64_t v4 = (const char *)Name;
      }
      else {
        uint64_t v4 = *(const char **)Name;
      }
    }
    else
    {
      uint64_t v4 = "null";
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfWDSClient=%s", (uint8_t *)&buf, 0xCu);
    uint64_t v2 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)this + 70);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v5;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfLegacyPreMav16RatMask=%d", (uint8_t *)&buf, 8u);
    uint64_t v2 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = *((_DWORD *)this + 71);
    LODWORD(buf) = 67109120;
    DWORD1(buf) = v6;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfLegacyPreMav16CurrentNetwork=%d", (uint8_t *)&buf, 8u);
  }
  long long buf = 0uLL;
  uint64_t v24 = 0;
  (*(void (**)(long long *__return_ptr, QMIDataCommandDriver *))(*(void *)this + 80))(&buf, this);
  uint64_t v7 = *((void *)this + 12);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    p_long long buf = &buf;
    if (v24 < 0) {
      p_long long buf = (long long *)buf;
    }
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)&void v19[4] = p_buf;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfDeviceNAI=%s", v19, 0xCu);
    uint64_t v7 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tfCurrentDataSystem: {", v19, 2u);
    uint64_t v7 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = **((unsigned int **)this + 36);
    *(_DWORD *)uint64_t v19 = 134217984;
    *(void *)&void v19[4] = v9;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfCurrentNw=0x%lx", v19, 0xCu);
    uint64_t v7 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(unsigned int *)(*((void *)this + 36) + 4);
    *(_DWORD *)uint64_t v19 = 134217984;
    *(void *)&void v19[4] = v10;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfRat=0x%lx", v19, 0xCu);
    uint64_t v7 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(void *)(*((void *)this + 36) + 8);
    *(_DWORD *)uint64_t v19 = 134217984;
    *(void *)&void v19[4] = v11;
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfSoMask=0x%llx", v19, 0xCu);
  }
  int v12 = (TrafficDescriptor *)*((void *)this + 47);
  __int16 v13 = (TrafficDescriptor *)*((void *)this + 48);
  if (v12 != v13)
  {
    char v14 = *((void *)this + 12);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\tfTrafficInfo:", v19, 2u);
      int v12 = (TrafficDescriptor *)*((void *)this + 47);
      __int16 v13 = (TrafficDescriptor *)*((void *)this + 48);
    }
    for (; v12 != v13; int v12 = (TrafficDescriptor *)((char *)v12 + 304))
    {
      unsigned int v15 = *((void *)this + 12);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        TrafficDescriptor::toString((uint64_t *)v19, v12);
        uint64_t v16 = v20 >= 0 ? v19 : *(unsigned char **)v19;
        *(_DWORD *)char v21 = 136446210;
        uint64_t v22 = v16;
        _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t\ttd=%{public}s", v21, 0xCu);
        if (v20 < 0) {
          operator delete(*(void **)v19);
        }
      }
    }
  }
  int v17 = *((void *)this + 12);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v18 = asStringBool();
    *(_DWORD *)uint64_t v19 = 136315138;
    *(void *)&void v19[4] = v18;
    _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I DATA:: \tSliceFlag=%s", v19, 0xCu);
    int v17 = *((void *)this + 12);
  }
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t}", v19, 2u);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete((void *)buf);
  }
}

void sub_2223DFBC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataCommandDriver::dumpDataCommandDriverState(QMIDataCommandDriver *this)
{
}

void QMIDataCommandDriver::sendWdsCdmaNai_sync(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
  void v33[3] = *MEMORY[0x263EF8340];
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v9 = *(NSObject **)(a1 + 96);
  BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (v10)
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v11 = a2;
      }
      else {
        uint64_t v11 = (uint64_t *)*a2;
      }
      if (a3[23] >= 0) {
        int v12 = a3;
      }
      else {
        int v12 = *(char **)a3;
      }
      if (*((char *)a4 + 23) >= 0) {
        __int16 v13 = a4;
      }
      else {
        __int16 v13 = (uint64_t *)*a4;
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "sendWdsCdmaNai_sync";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v11;
      *(_WORD *)&buf[22] = 2080;
      uint64_t v32 = v12;
      LOWORD(v33[0]) = 2080;
      *(void *)((char *)v33 + 2) = v13;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: CDMA NAI push ('%s', '%s', '%s')", buf, 0x2Au);
    }
    long long v29 = 0u;
    long long v30 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v29);
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    v28[2] = ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke;
    v28[3] = &__block_descriptor_tmp_139;
    void v28[4] = a2;
    char v14 = (const void **)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1) != (void)v30)
    {
      while (*((unsigned char *)*v14 + 8) != 16)
      {
        if (++v14 == (const void **)v30) {
          goto LABEL_22;
        }
      }
    }
    if (v14 == (const void **)v30) {
LABEL_22:
    }
      operator new();
    if (!v15) {
      goto LABEL_45;
    }
    ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke((uint64_t)v28, (std::string *)(v15 + 16));
    v27[0] = MEMORY[0x263EF8330];
    v27[1] = 0x40000000;
    v27[2] = ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_2;
    v27[3] = &__block_descriptor_tmp_140_0;
    void v27[4] = a3;
    uint64_t v16 = (const void **)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1) != (void)v30)
    {
      while (*((unsigned char *)*v16 + 8) != 17)
      {
        if (++v16 == (const void **)v30) {
          goto LABEL_30;
        }
      }
    }
    if (v16 == (const void **)v30) {
LABEL_30:
    }
      operator new();
    if (!v17) {
      goto LABEL_45;
    }
    ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_2((uint64_t)v27, (std::string *)(v17 + 16));
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 0x40000000;
    v26[2] = ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_3;
    v26[3] = &__block_descriptor_tmp_143;
    void v26[4] = a4;
    uint64_t v18 = (const void **)*((void *)&v29 + 1);
    if (*((void *)&v29 + 1) != (void)v30)
    {
      while (*((unsigned char *)*v18 + 8) != 18)
      {
        if (++v18 == (const void **)v30) {
          goto LABEL_38;
        }
      }
    }
    if (v18 == (const void **)v30) {
LABEL_38:
    }
      operator new();
    if (!v19) {
LABEL_45:
    }
      __cxa_bad_cast();
    ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_3((uint64_t)v26, v19 + 9);
    v21[5] = a1 + 144;
    uint64_t v22 = QMIServiceMsg::create();
    int v23 = 25000;
    uint64_t v24 = 0;
    long long aBlock = 0;
    v21[0] = MEMORY[0x263EF8330];
    v21[1] = 0x40000000;
    v21[2] = ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_4;
    v21[3] = &__block_descriptor_tmp_145_0;
    uint8_t v21[4] = a1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
    uint64_t v32 = (char *)&unk_26460B7B8;
    v33[0] = v21;
    char v20 = _Block_copy(buf);
    long long aBlock = v20;
    if (v22)
    {
      qmi::Client::send();
      char v20 = aBlock;
    }
    if (v20) {
      _Block_release(v20);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v29);
  }
  else if (v10)
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "sendWdsCdmaNai_sync";
    _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: WDS Client is not ready", buf, 0xCu);
  }
}

void sub_2223E03C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 192));
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke(uint64_t a1, std::string *this)
{
  uint64_t v3 = *(std::string::value_type **)(a1 + 32);
  if (v3[23] < 0)
  {
    uint64_t v3 = *(std::string::value_type **)v3;
    std::string::size_type v4 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    std::string::size_type v4 = v3[23];
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_2(uint64_t a1, std::string *this)
{
  uint64_t v3 = *(std::string::value_type **)(a1 + 32);
  if (v3[23] < 0)
  {
    uint64_t v3 = *(std::string::value_type **)v3;
    std::string::size_type v4 = *(void *)(*(void *)(a1 + 32) + 8);
  }
  else
  {
    std::string::size_type v4 = v3[23];
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

uint64_t ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_3(uint64_t a1, BOOL *a2)
{
  uint64_t result = std::string::compare(*(const std::string **)(a1 + 32), "CHAP");
  *a2 = result == 0;
  return result;
}

void ___ZN20QMIDataCommandDriver19sendWdsCdmaNai_syncERKNSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES8_S8__block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (!v7 || ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) != 0) {
        goto LABEL_11;
      }
      int v8 = *(_DWORD *)(a2 + 4);
      uint64_t v9 = v2[12];
      BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
      if (v8)
      {
        if (v10)
        {
          int v14 = 136315650;
          unsigned int v15 = "sendWdsCdmaNai_sync_block_invoke_4";
          __int16 v16 = 1024;
          int v17 = v8;
          __int16 v18 = 2080;
          uint64_t v19 = qmi::asString();
          uint64_t v11 = "#I %s: Baseband failed to set NAI: 0x%x (%s)";
          int v12 = v9;
          uint32_t v13 = 28;
LABEL_10:
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, v11, (uint8_t *)&v14, v13);
        }
      }
      else if (v10)
      {
        int v14 = 136315138;
        unsigned int v15 = "sendWdsCdmaNai_sync_block_invoke";
        uint64_t v11 = "#I %s: CDMA NAI updated successfully: OK";
        int v12 = v9;
        uint32_t v13 = 12;
        goto LABEL_10;
      }
LABEL_11:
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223E05FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::QosRegisterIndex(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  unsigned int v15 = a4;
  uint64_t v8 = *(void *)(a1 + 112);
  if (!v8) {
    goto LABEL_12;
  }
  uint64_t v9 = a1 + 112;
  do
  {
    unsigned int v10 = *(_DWORD *)(v8 + 32);
    BOOL v11 = v10 >= a4;
    if (v10 >= a4) {
      int v12 = (uint64_t *)v8;
    }
    else {
      int v12 = (uint64_t *)(v8 + 8);
    }
    if (v11) {
      uint64_t v9 = v8;
    }
    uint64_t v8 = *v12;
  }
  while (*v12);
  if (v9 != a1 + 112 && *(_DWORD *)(v9 + 32) <= a4)
  {
    int v14 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      int v17 = "QosRegisterIndex";
      _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: double registration", buf, 0xCu);
    }
  }
  else
  {
LABEL_12:
    uint32_t v13 = (uint64_t **)(a1 + 104);
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>((uint64_t **)(a1 + 104), a4, &v15)+ 11) = a3;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)+ 12) = 0;
    *((_DWORD *)std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)+ 13) = a5;
    std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(v13, a4, &v15)[7] = a2;
  }
}

void non-virtual thunk to'QMIDataCommandDriver::QosRegisterIndex(uint64_t a1, uint64_t *a2, int a3, unsigned int a4, int a5)
{
}

void QMIDataCommandDriver::releaseQosIndex(void *a1, uint64_t **a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = a1[5];
      if (v7)
      {
        (*(void (**)(uint64_t, void))(*(void *)v7 + 600))(v7, *((unsigned int *)*a2 + 8));
        uint64_t v8 = *a2;
        uint64_t v9 = (uint64_t *)v8[1];
        if (v9)
        {
          do
          {
            unsigned int v10 = v9;
            uint64_t v9 = (uint64_t *)*v9;
          }
          while (v9);
        }
        else
        {
          BOOL v11 = v8;
          do
          {
            unsigned int v10 = (uint64_t *)v11[2];
            BOOL v12 = *v10 == (void)v11;
            BOOL v11 = v10;
          }
          while (!v12);
        }
        if ((uint64_t *)a1[13] == v8) {
          a1[13] = v10;
        }
        uint32_t v13 = (uint64_t *)a1[14];
        --a1[15];
        std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v13, v8);
        operator delete(v8);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223E0878(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::postQosStatus(QMIDataCommandDriver *this, unsigned int a2, unsigned int a3)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  std::string::size_type v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 5);
      if (v9)
      {
        unsigned int v10 = *((void *)this + 12);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          if (a3 - 1 > 2) {
            BOOL v11 = "BB_QOS_STATUS_Unknown";
          }
          else {
            BOOL v11 = off_26460BE28[(char)(a3 - 1)];
          }
          int v12 = 136315906;
          uint32_t v13 = "postQosStatus";
          __int16 v14 = 1024;
          unsigned int v15 = a2;
          __int16 v16 = 2080;
          int v17 = v11;
          __int16 v18 = 1024;
          unsigned int v19 = a3;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: qos status ----- { flowIndex=%d status=%s(0x%x) }", (uint8_t *)&v12, 0x22u);
        }
        (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v9 + 624))(v9, 183, a2, a3);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_2223E09F0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::releaseQos(QMIDataCommandDriver *this, unsigned int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    int v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)this + 5);
      if (v7)
      {
        uint64_t v8 = (char *)*((void *)this + 14);
        if (!v8) {
          goto LABEL_15;
        }
        uint64_t v9 = (uint64_t *)((char *)this + 112);
        do
        {
          unsigned int v10 = *((_DWORD *)v8 + 8);
          BOOL v11 = v10 >= a2;
          if (v10 >= a2) {
            int v12 = (char **)v8;
          }
          else {
            int v12 = (char **)(v8 + 8);
          }
          if (v11) {
            uint64_t v9 = (uint64_t *)v8;
          }
          uint64_t v8 = *v12;
        }
        while (*v12);
        if (v9 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v9 + 8) <= a2)
        {
          __int16 v18 = v9;
          switch(*((_DWORD *)v9 + 12))
          {
            case 0:
              unsigned int v15 = *((void *)this + 12);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v20 = "releaseQos";
                __int16 v21 = 1024;
                unsigned int v22 = a2;
                _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d for which we did not receive flow id yet", buf, 0x12u);
              }
              *((_DWORD *)v9 + 12) = 1;
              break;
            case 1:
              uint32_t v13 = *((void *)this + 12);
              if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v20 = "releaseQos";
                __int16 v21 = 1024;
                unsigned int v22 = a2;
                __int16 v14 = "#I %s: ERR: Flow %d is already release";
                goto LABEL_17;
              }
              break;
            case 2:
              __int16 v16 = *((void *)this + 12);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v20 = "releaseQos";
                __int16 v21 = 1024;
                unsigned int v22 = a2;
                _os_log_impl(&dword_22231A000, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d that failed before", buf, 0x12u);
              }
              goto LABEL_31;
            case 3:
              int v17 = *((void *)this + 12);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315394;
                uint64_t v20 = "releaseQos";
                __int16 v21 = 1024;
                unsigned int v22 = a2;
                _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I %s: Releasing flow %d", buf, 0x12u);
              }
              (*(void (**)(uint64_t))(*(void *)v7 + 592))(v7);
              (*(void (**)(uint64_t, void, void))(*(void *)v9[7] + 16))(v9[7], *((unsigned int *)v9 + 11), *((unsigned int *)v9 + 10));
LABEL_31:
              QMIDataCommandDriver::releaseQosIndex(this, &v18);
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_15:
          uint32_t v13 = *((void *)this + 12);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            uint64_t v20 = "releaseQos";
            __int16 v21 = 1024;
            unsigned int v22 = a2;
            __int16 v14 = "#I %s: Flow %d not found";
LABEL_17:
            _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, v14, buf, 0x12u);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223E0D38(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataCommandDriver::releaseQos(QMIDataCommandDriver *this, unsigned int a2)
{
}

void QMIDataCommandDriver::freePduSessionId(NSObject **this, int a2)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  if (!capabilities::ct::supports5G((capabilities::ct *)this)) {
    return;
  }
  if (!this[20])
  {
    uint64_t v7 = this[12];
    if (!os_log_type_enabled(v7, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "invalid fWDSClient!";
    uint64_t v9 = v7;
    goto LABEL_16;
  }
  std::string::size_type v4 = this[12];
  if (a2 < 0)
  {
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v8 = "invalid pduSessionId to be freed";
    uint64_t v9 = v4;
LABEL_16:
    _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, v8, buf, 2u);
    return;
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I sending wds::freePduSessionId::Request %d", buf, 8u);
  }
  memset(v17, 0, sizeof(v17));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v17);
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke;
  _OWORD v15[3] = &__block_descriptor_tmp_147_0;
  int v16 = a2;
  int v5 = qmi::MutableMessageBase::getTLV<wds::tlv::PduSessionId>((uint64_t)v17, 1);
  ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke((uint64_t)v15, v5);
  void v10[5] = this + 18;
  uint64_t v11 = QMIServiceMsg::create();
  int v12 = 25000;
  uint64_t v13 = 0;
  long long aBlock = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 0x40000000;
  _DWORD v10[2] = ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke_2;
  v10[3] = &__block_descriptor_tmp_148;
  v10[4] = this;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v19 = 0x40000000;
  uint64_t v20 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16FreePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  __int16 v21 = &unk_26460B9A8;
  unsigned int v22 = v10;
  int v6 = _Block_copy(buf);
  long long aBlock = v6;
  if (v11)
  {
    qmi::Client::send();
    int v6 = aBlock;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v17);
}

void sub_2223E0FE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver16freePduSessionIdEi_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (!v4) {
      return;
    }
    v8[0] = 67109378;
    v8[1] = v2;
    __int16 v9 = 2080;
    uint64_t v10 = qmi::asString();
    int v5 = "#I Error Response to FreePduSessionId: %d(%s)";
    int v6 = v3;
    uint32_t v7 = 18;
  }
  else
  {
    if (!v4) {
      return;
    }
    LOWORD(v8[0]) = 0;
    int v5 = "#I Successful Response to FreePduSessionId";
    int v6 = v3;
    uint32_t v7 = 2;
  }
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)v8, v7);
}

void non-virtual thunk to'QMIDataCommandDriver::freePduSessionId(NSObject **this, int a2)
{
}

void QMIDataCommandDriver::notifyBBofDataService(uint64_t a1, int a2, int a3)
{
  if (*(void *)(a1 + 160))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v20 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    int v6 = (const void **)__p[1];
    uint32_t v7 = (const void **)v20;
    if (__p[1] != (void *)v20)
    {
      while (*((unsigned char *)*v6 + 8) != 16)
      {
        if (++v6 == (const void **)v20) {
          goto LABEL_11;
        }
      }
    }
    if (v6 == (const void **)v20) {
LABEL_11:
    }
      operator new();
    if (!v8) {
      __cxa_bad_cast();
    }
    uint64_t v10 = 1;
    if (a2 > 16)
    {
      if (a2 == 17)
      {
        uint64_t v10 = 2;
      }
      else if (a2 != 27)
      {
        if (a2 == 20) {
          uint64_t v10 = 8;
        }
        else {
LABEL_21:
        }
          uint64_t v10 = 0;
      }
    }
    else
    {
      switch(a2)
      {
        case 0:
        case 4:
          break;
        case 1:
          uint64_t v10 = 16;
          break;
        case 2:
          uint64_t v10 = 4;
          break;
        default:
          goto LABEL_21;
      }
    }
    _DWORD v8[2] = v10;
    for (uint64_t i = (const void **)__p[1]; ; ++i)
    {
      if (i == v7) {
        goto LABEL_29;
      }
      if (*((unsigned char *)*i + 8) == 17) {
        break;
      }
    }
    if (i == v7) {
LABEL_29:
    }
      operator new();
    if (!v12) {
      __cxa_bad_cast();
    }
    v12[9] = a3 != 5;
    void v14[5] = a1 + 144;
    uint64_t v15 = QMIServiceMsg::create();
    int v16 = 25000;
    uint64_t v17 = 0;
    long long aBlock = 0;
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    _DWORD v14[2] = ___ZNK20QMIDataCommandDriver21notifyBBofDataServiceE18DataConnectionType19DataConnectionState_block_invoke;
    void v14[3] = &__block_descriptor_tmp_149_0;
    v14[4] = a1;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v22 = 0x40000000;
    uint64_t v23 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17NotifyDataService8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    uint64_t v24 = &unk_26460B9D0;
    uint64_t v25 = v14;
    uint64_t v13 = _Block_copy(buf);
    long long aBlock = v13;
    if (v15)
    {
      qmi::Client::send();
      uint64_t v13 = aBlock;
    }
    if (v13) {
      _Block_release(v13);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    __int16 v9 = *(NSObject **)(a1 + 96);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl(&dword_22231A000, v9, OS_LOG_TYPE_ERROR, "invalid fWDSClient!", buf, 2u);
    }
  }
}

void sub_2223E1628(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZNK20QMIDataCommandDriver21notifyBBofDataServiceE18DataConnectionType19DataConnectionState_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 96);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Error Response to NotifyDataService: %d(%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::notifyBBofDataService(uint64_t a1, int a2, int a3)
{
}

void QMIDataCommandDriver::allocatePduSessionId(capabilities::ct *a1, uint64_t a2, int a3)
{
  uint64_t v22 = *MEMORY[0x263EF8340];
  if (capabilities::ct::supports5G(a1))
  {
    uint64_t v6 = *((void *)a1 + 12);
    if (*((void *)a1 + 20))
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I sending wds::AllocatePduSessionId::Request", buf, 2u);
      }
      memset(v13, 0, sizeof(v13));
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v13);
      uint64_t v11 = QMIServiceMsg::create();
      v19[0] = MEMORY[0x263EF8330];
      v19[1] = 1174405120;
      _OWORD v19[2] = ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke;
      void v19[3] = &__block_descriptor_tmp_153_1;
      void v19[4] = a1;
      std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v20, a2);
      int v21 = a3;
      *(void *)long long buf = MEMORY[0x263EF8330];
      uint64_t v15 = 0x40000000;
      int v16 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds20AllocatePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
      uint64_t v17 = &unk_26460B9F8;
      uint64_t v18 = v19;
      uint64_t v7 = _Block_copy(buf);
      long long aBlock = v7;
      if (v11)
      {
        qmi::Client::send();
        uint64_t v7 = aBlock;
      }
      if (v7) {
        _Block_release(v7);
      }
      std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v20);
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v13);
    }
    else
    {
      if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl(&dword_22231A000, v6, OS_LOG_TYPE_ERROR, "invalid fWDSClient!", buf, 2u);
      }
      uint64_t v10 = *(void *)(a2 + 24);
      if (!v10) {
        std::__throw_bad_function_call[abi:ne180100]();
      }
      (*(void (**)(uint64_t))(*(void *)v10 + 48))(v10);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(a2 + 24);
    if (!v8) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v9 = *(void (**)(void))(*(void *)v8 + 48);
    v9();
  }
}

void sub_2223E19D8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v28 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = (std::__shared_weak_count *)v3[6];
  if (v4)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = v3[5];
      if (v8 && ((*(uint64_t (**)(void))(*(void *)v8 + 496))(v3[5]) & 1) == 0)
      {
        int v9 = *((_DWORD *)a2 + 1);
        if (v9)
        {
          uint64_t v10 = v3[12];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 67109378;
            *(_DWORD *)&uint8_t buf[4] = v9;
            __int16 v26 = 2080;
            uint64_t v27 = qmi::asString();
            _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Error in response to AllocatePduSessionId with code = 0x%x (%s)", buf, 0x12u);
          }
          uint64_t v11 = *(void *)(a1 + 64);
          if (!v11) {
            std::__throw_bad_function_call[abi:ne180100]();
          }
          (*(void (**)(uint64_t))(*(void *)v11 + 48))(v11);
        }
        else
        {
          v17[0] = MEMORY[0x263EF8330];
          v17[1] = 1174405120;
          uint64_t v18 = ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke_150;
          uint64_t v19 = &__block_descriptor_tmp_152_1;
          long long v20 = v3;
          uint64_t v21 = v8;
          uint64_t v22 = v7;
          atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
          int v24 = *(_DWORD *)(a1 + 72);
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v23, a1 + 40);
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          uint64_t v14 = TlvValue;
          if (TlvValue)
          {
            int v15 = v13;
            *(void *)long long buf = TlvValue;
            char v16 = tlv::parseV<wds::tlv::PduSessionId>((unint64_t *)buf, v13);
            if (*(void *)buf) {
              v18((uint64_t)v17, (unsigned __int8 *)&v16);
            }
            else {
              ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v14, v15);
            }
          }
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v23);
          if (v22) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v22);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_2223E1C74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver20allocatePduSessionIdENSt3__18functionIFvvEEEi_block_invoke_150(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 32) + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *a2;
    v8[0] = 67109120;
    v8[1] = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Response to AllocatePduSessionId received pduSessionId = %d", (uint8_t *)v8, 8u);
  }
  (*(void (**)(void, void, void))(**(void **)(a1 + 40) + 952))(*(void *)(a1 + 40), *a2, *(unsigned int *)(a1 + 88));
  uint64_t v6 = *(void *)(a1 + 80);
  if (!v6) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t))(*(void *)v6 + 48))(v6);
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100](a1 + 56, a2 + 56);
}

void sub_2223E1E0C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrI21BBDataDriverInterfaceEE56c27_ZTSNSt3__18functionIFvvEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::allocatePduSessionId(uint64_t a1, uint64_t a2, int a3)
{
}

void QMIDataCommandDriver::QosRequestAccepted(QMIDataCommandDriver *this, unsigned int a2, uint64_t a3)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *((void *)this + 5);
      if (v9)
      {
        uint64_t v10 = (char *)*((void *)this + 14);
        if (!v10) {
          goto LABEL_15;
        }
        uint64_t v11 = (uint64_t *)((char *)this + 112);
        do
        {
          unsigned int v12 = *((_DWORD *)v10 + 8);
          BOOL v13 = v12 >= a2;
          if (v12 >= a2) {
            uint64_t v14 = (char **)v10;
          }
          else {
            uint64_t v14 = (char **)(v10 + 8);
          }
          if (v13) {
            uint64_t v11 = (uint64_t *)v10;
          }
          uint64_t v10 = *v14;
        }
        while (*v14);
        if (v11 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v11 + 8) <= a2)
        {
          uint64_t v23 = v11;
          switch(*((_DWORD *)v11 + 12))
          {
            case 0:
              uint64_t v19 = *((void *)this + 12);
              if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v25 = "QosRequestAccepted";
                __int16 v26 = 1024;
                unsigned int v27 = a2;
                __int16 v28 = 1024;
                int v29 = a3;
                _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d accepted with flowId %d", buf, 0x18u);
              }
              if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v9 + 584))(v9, a3) & 1) == 0)
              {
                long long v20 = *((void *)this + 12);
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)long long buf = 136315394;
                  uint64_t v25 = "QosRequestAccepted";
                  __int16 v26 = 1024;
                  unsigned int v27 = a2;
                  _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I %s: Adding flow %d to AppleIPAppender failed", buf, 0x12u);
                }
                QMIDataCommandDriver::QosRequestFailed(this, a2);
              }
              *((_DWORD *)v11 + 12) = 3;
              *((_DWORD *)v11 + 10) = a3;
              break;
            case 1:
              uint64_t v21 = *((void *)this + 12);
              if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v25 = "QosRequestAccepted";
                __int16 v26 = 1024;
                unsigned int v27 = a2;
                __int16 v28 = 1024;
                int v29 = a3;
                _os_log_impl(&dword_22231A000, v21, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d accepted with flowId %d but was released before", buf, 0x18u);
              }
              (*(void (**)(uint64_t, void, uint64_t))(*(void *)v11[7] + 16))(v11[7], *((unsigned int *)v11 + 11), a3);
              QMIDataCommandDriver::releaseQosIndex(this, &v23);
              break;
            case 2:
              uint64_t v22 = *((void *)this + 12);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v25 = "QosRequestAccepted";
                __int16 v26 = 1024;
                unsigned int v27 = a2;
                __int16 v28 = 1024;
                int v29 = a3;
                char v16 = "#I %s: ERR: Flow %d accepted with flowId %d after failure";
                goto LABEL_35;
              }
              break;
            case 3:
              uint64_t v22 = *((void *)this + 12);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315650;
                uint64_t v25 = "QosRequestAccepted";
                __int16 v26 = 1024;
                unsigned int v27 = a2;
                __int16 v28 = 1024;
                int v29 = a3;
                char v16 = "#I %s: ERR: Flow %d accepted with flowId %d while active";
LABEL_35:
                uint64_t v17 = v22;
                uint32_t v18 = 24;
                goto LABEL_17;
              }
              break;
            default:
              break;
          }
        }
        else
        {
LABEL_15:
          int v15 = *((void *)this + 12);
          if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            uint64_t v25 = "QosRequestAccepted";
            __int16 v26 = 1024;
            unsigned int v27 = a2;
            char v16 = "#I %s: QoSId %d not found";
            uint64_t v17 = v15;
            uint32_t v18 = 18;
LABEL_17:
            _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, v16, buf, v18);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    }
  }
}

void sub_2223E224C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataCommandDriver::QosRequestFailed(QMIDataCommandDriver *this, unsigned int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = (char *)*((void *)this + 14);
  if (!v4) {
    goto LABEL_12;
  }
  int v5 = (uint64_t *)((char *)this + 112);
  do
  {
    unsigned int v6 = *((_DWORD *)v4 + 8);
    BOOL v7 = v6 >= a2;
    if (v6 >= a2) {
      uint64_t v8 = (char **)v4;
    }
    else {
      uint64_t v8 = (char **)(v4 + 8);
    }
    if (v7) {
      int v5 = (uint64_t *)v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != (uint64_t *)((char *)this + 112) && *((_DWORD *)v5 + 8) <= a2)
  {
    BOOL v13 = v5;
    switch(*((_DWORD *)v5 + 12))
    {
      case 0:
        uint64_t v11 = *((void *)this + 12);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v15 = "QosRequestFailed";
          __int16 v16 = 1024;
          unsigned int v17 = a2;
          _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d failed", buf, 0x12u);
        }
        *((_DWORD *)v5 + 12) = 2;
        QMIDataCommandDriver::postQosStatus(this, a2, 3u);
        break;
      case 1:
        unsigned int v12 = *((void *)this + 12);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v15 = "QosRequestFailed";
          __int16 v16 = 1024;
          unsigned int v17 = a2;
          _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: Flow %d failed but was already released", buf, 0x12u);
        }
        QMIDataCommandDriver::releaseQosIndex(this, &v13);
        break;
      case 2:
        uint64_t v9 = *((void *)this + 12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v15 = "QosRequestFailed";
          __int16 v16 = 1024;
          unsigned int v17 = a2;
          uint64_t v10 = "#I %s: Err: Flow %d failed when already failed";
          goto LABEL_14;
        }
        break;
      case 3:
        uint64_t v9 = *((void *)this + 12);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v15 = "QosRequestFailed";
          __int16 v16 = 1024;
          unsigned int v17 = a2;
          uint64_t v10 = "#I %s: Err: Flow %d failed while active";
          goto LABEL_14;
        }
        break;
      default:
        return;
    }
  }
  else
  {
LABEL_12:
    uint64_t v9 = *((void *)this + 12);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      int v15 = "QosRequestFailed";
      __int16 v16 = 1024;
      unsigned int v17 = a2;
      uint64_t v10 = "#I %s: QoSId %d not found";
LABEL_14:
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 0x12u);
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::QosRequestAccepted(QMIDataCommandDriver *this, unsigned int a2, uint64_t a3)
{
}

void non-virtual thunk to'QMIDataCommandDriver::QosRequestFailed(QMIDataCommandDriver *this, unsigned int a2)
{
}

void QMIDataCommandDriver::QosStatusInfo(QMIDataCommandDriver *this, int a2, unsigned int a3)
{
  uint64_t v3 = (QMIDataCommandDriver *)*((void *)this + 13);
  if (v3 != (QMIDataCommandDriver *)((char *)this + 112))
  {
    while (*((_DWORD *)v3 + 10) != a2)
    {
      uint64_t v4 = (QMIDataCommandDriver *)*((void *)v3 + 1);
      if (v4)
      {
        do
        {
          int v5 = v4;
          uint64_t v4 = *(QMIDataCommandDriver **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          int v5 = (QMIDataCommandDriver *)*((void *)v3 + 2);
          BOOL v6 = *(void *)v5 == (void)v3;
          uint64_t v3 = v5;
        }
        while (!v6);
      }
      uint64_t v3 = v5;
      if (v5 == (QMIDataCommandDriver *)((char *)this + 112)) {
        return;
      }
    }
    QMIDataCommandDriver::postQosStatus(this, *((_DWORD *)v3 + 8), a3);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::QosStatusInfo(QMIDataCommandDriver *this, int a2, unsigned int a3)
{
}

void non-virtual thunk to'QMIDataCommandDriver::pushNAI(uint64_t a1, uint64_t *a2, char *a3, uint64_t *a4)
{
}

void *QMIDataCommandDriver::updatePreferredDataSIM_sync(void *a1, uint64_t a2, uint64_t a3)
{
  v13[4] = *MEMORY[0x263EF8340];
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 1174405120;
  void v12[2] = ___ZN20QMIDataCommandDriver27updatePreferredDataSIM_syncEN10subscriber7SimSlotENSt3__18functionIFvbEEENS0_14MSimConfigModeE_block_invoke;
  void v12[3] = &__block_descriptor_tmp_155_2;
  std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v13, a3);
  uint64_t v4 = (std::__shared_weak_count *)a1[9];
  if (!v4 || (v5 = a1[8], (BOOL v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  BOOL v7 = v6;
  uint64_t v8 = a1[10];
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  _DWORD v10[2] = ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE15execute_wrappedEU13block_pointerFvvE_block_invoke;
  v10[3] = &unk_26D4C2D00;
  void v10[5] = v5;
  uint64_t v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v10[4] = v12;
  dispatch_async(v8, v10);
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v13);
}

void sub_2223E2708(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

uint64_t ___ZN20QMIDataCommandDriver27updatePreferredDataSIM_syncEN10subscriber7SimSlotENSt3__18functionIFvbEEENS0_14MSimConfigModeE_block_invoke(uint64_t a1)
{
  return std::function<void ()(BOOL)>::operator()(a1 + 32, 1);
}

uint64_t __copy_helper_block_e8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void *non-virtual thunk to'QMIDataCommandDriver::updatePreferredDataSIM_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QMIDataCommandDriver::updatePreferredDataSIM_sync((void *)(a1 - 32), a2, a3);
}

void QMIDataCommandDriver::updateCurrentDataSIM_sync(capabilities::ct *a1, int a2)
{
  uint64_t v29 = *MEMORY[0x263EF8340];
  if (capabilities::ct::supports5G(a1))
  {
    uint64_t v4 = (std::__shared_weak_count *)*((void *)a1 + 6);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        uint64_t v6 = *((void *)a1 + 5);
        if (v6)
        {
          if (((*(uint64_t (**)(void))(*(void *)v6 + 496))(*((void *)a1 + 5)) & 1) == 0
            && *((void *)a1 + 20))
          {
            *(_OWORD *)std::string __p = 0u;
            long long v24 = 0u;
            qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
            v22[0] = MEMORY[0x263EF8330];
            v22[1] = 0x40000000;
            unint64_t v22[2] = ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke;
            v22[3] = &__block_descriptor_tmp_157;
            v22[4] = a1;
            BOOL v7 = (const void **)__p[1];
            if (__p[1] != (void *)v24)
            {
              while (*((unsigned char *)*v7 + 8) != 16)
              {
                if (++v7 == (const void **)v24) {
                  goto LABEL_21;
                }
              }
            }
            if (v7 == (const void **)v24) {
LABEL_21:
            }
              operator new();
            if (!v9) {
              goto LABEL_37;
            }
            ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke((uint64_t)v22, v9 + 9);
            v20[0] = MEMORY[0x263EF8330];
            v20[1] = 0x40000000;
            void v20[2] = ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_2;
            v20[3] = &__block_descriptor_tmp_159_1;
            int v21 = a2;
            uint64_t v10 = (const void **)__p[1];
            if (__p[1] != (void *)v24)
            {
              while (*((unsigned char *)*v10 + 8) != 17)
              {
                if (++v10 == (const void **)v24) {
                  goto LABEL_29;
                }
              }
            }
            if (v10 == (const void **)v24) {
LABEL_29:
            }
              operator new();
            if (!v11) {
LABEL_37:
            }
              __cxa_bad_cast();
            ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_2((uint64_t)v20, v11 + 9);
            int v15 = (void *)((char *)a1 + 144);
            uint64_t v16 = QMIServiceMsg::create();
            int v17 = 25000;
            uint64_t v18 = 0;
            long long aBlock = 0;
            v13[0] = MEMORY[0x263EF8330];
            v13[1] = 1174405120;
            _OWORD v13[2] = ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_3;
            v13[3] = &__block_descriptor_tmp_160_2;
            v13[4] = a1;
            void v13[5] = v6;
            uint64_t v14 = v5;
            atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
            *(void *)&long long buf = MEMORY[0x263EF8330];
            *((void *)&buf + 1) = 0x40000000;
            __int16 v26 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
            unsigned int v27 = &unk_26460B7B8;
            __int16 v28 = v13;
            unsigned int v12 = _Block_copy(&buf);
            long long aBlock = v12;
            if (v16)
            {
              qmi::Client::send();
              unsigned int v12 = aBlock;
            }
            if (v12) {
              _Block_release(v12);
            }
            if (v14) {
              std::__shared_weak_count::__release_shared[abi:ne180100](v14);
            }
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
            goto LABEL_14;
          }
        }
      }
    }
    else
    {
      uint64_t v5 = 0;
    }
    uint64_t v8 = *((void *)a1 + 12);
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if (!v5) {
        return;
      }
      goto LABEL_14;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "updateCurrentDataSIM_sync";
    _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "%s: driver not ready", (uint8_t *)&buf, 0xCu);
    if (v5) {
LABEL_14:
    }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2223E2D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  if (a15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a15);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a31);
  std::__shared_weak_count::__release_shared[abi:ne180100](v31);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t result = PersonalitySpecificImpl::simSlot(*(PersonalitySpecificImpl **)(a1 + 32));
  *a2 = result;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_2(uint64_t result, char *a2)
{
  int v2 = *(_DWORD *)(result + 32);
  if (v2 == 4) {
    char v3 = 2;
  }
  else {
    char v3 = 3;
  }
  if (v2 == 3) {
    char v4 = 1;
  }
  else {
    char v4 = v3;
  }
  *a2 = v4;
  return result;
}

void ___ZN20QMIDataCommandDriver25updateCurrentDataSIM_syncE14SwitchSimCause_block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      uint64_t v5 = *(NSObject **)(v3 + 96);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109378;
        v6[1] = v4;
        __int16 v7 = 2080;
        uint64_t v8 = qmi::asString();
        _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "NotifyCurrentDataSub failed: 0x%x (%s)", (uint8_t *)v6, 0x12u);
      }
    }
  }
}

uint64_t __copy_helper_block_e8_40c50_ZTSKNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c50_ZTSKNSt3__110shared_ptrI21BBDataDriverInterfaceEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::updateCurrentDataSIM_sync(uint64_t a1, int a2)
{
}

uint64_t QMIDataCommandDriver::setVoLTEAudioCodec_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int v4 = *(NSObject **)(a1 + 96);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)__int16 v7 = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#E Device does not support setVoLTEAudioCodec", v7, 2u);
  }
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v8 = 0x2D00000001;
  if (!v5) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v5 + 48))(v5, &v8);
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::setVoLTEAudioCodec_sync(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QMIDataCommandDriver::setVoLTEAudioCodec_sync(a1 - 32, a2, a3);
}

uint64_t ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver33updateCellularDataStatusInfo_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    int v4 = *(NSObject **)(v3 + 96);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      uint64_t v6 = asStringBool();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "SetCellularDataStatusInfo %s request failed", (uint8_t *)&v5, 0xCu);
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::updateCellularDataStatusInfo_sync(QMIDataCommandDriver *this, char a2)
{
}

void QMIDataCommandDriver::updateActiveSliceStatus_sync(QMIDataCommandDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v17 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v14[0] = MEMORY[0x263EF8330];
  v14[1] = 0x40000000;
  _DWORD v14[2] = ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke;
  void v14[3] = &__block_descriptor_tmp_167;
  char v15 = a2;
  int v4 = (const void **)__p[1];
  if (__p[1] != (void *)v17)
  {
    while (*((unsigned char *)*v4 + 8) != 17)
    {
      if (++v4 == (const void **)v17) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v17) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke((uint64_t)v14, v5 + 9);
  uint64_t v9 = (char *)this + 144;
  uint64_t v10 = QMIServiceMsg::create();
  int v11 = 25000;
  uint64_t v12 = 0;
  BOOL v13 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  v7[2] = ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke_2;
  v7[3] = &__block_descriptor_tmp_168_0;
  void v7[4] = this;
  char v8 = a2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
  aBlock[3] = &unk_26460B7B8;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  BOOL v13 = v6;
  if (v10)
  {
    qmi::Client::send();
    uint64_t v6 = v13;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223E33CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  uint64_t v18 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver28updateActiveSliceStatus_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(NSObject **)(v2 + 96);
  if (*(_DWORD *)(a2 + 4))
  {
    if (os_log_type_enabled(*(os_log_t *)(v2 + 96), OS_LOG_TYPE_ERROR))
    {
      uint64_t v5 = asStringBool();
      int v6 = *(_DWORD *)(a2 + 4);
      int v7 = 136315650;
      uint64_t v8 = v5;
      __int16 v9 = 1024;
      int v10 = v6;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "DataActivityInfo[slice %s], Error code = 0x%x (%s)", (uint8_t *)&v7, 0x1Cu);
    }
  }
  else if (os_log_type_enabled(*(os_log_t *)(v2 + 96), OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = asStringBool();
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I DataActivityInfo[slice %s] success", (uint8_t *)&v7, 0xCu);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::updateActiveSliceStatus_sync(QMIDataCommandDriver *this, char a2)
{
}

void QMIDataCommandDriver::reportPhsClients_sync(QMIDataCommandDriver *this, int a2)
{
  if (capabilities::ct::supportsReportingTetheringStateToBaseband(this))
  {
    int v4 = (std::__shared_weak_count *)*((void *)this + 6);
    if (v4)
    {
      uint64_t v5 = std::__shared_weak_count::lock(v4);
      if (v5)
      {
        int v6 = v5;
        uint64_t v7 = *((void *)this + 5);
        if (v7
          && ((*(uint64_t (**)(void))(*(void *)v7 + 496))(*((void *)this + 5)) & 1) == 0
          && *((void *)this + 20))
        {
          *(_OWORD *)std::string __p = 0u;
          long long v20 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
          uint64_t v8 = (const void **)__p[1];
          if (__p[1] != (void *)v20)
          {
            while (*((unsigned char *)*v8 + 8) != 16)
            {
              if (++v8 == (const void **)v20) {
                goto LABEL_14;
              }
            }
          }
          if (v8 == (const void **)v20) {
LABEL_14:
          }
            operator new();
          if (!v9) {
            __cxa_bad_cast();
          }
          v9[9] = a2 > 0;
          uint64_t v14 = (char *)this + 144;
          uint64_t v15 = QMIServiceMsg::create();
          int v16 = 25000;
          uint64_t v17 = 0;
          uint64_t v18 = 0;
          v11[0] = MEMORY[0x263EF8330];
          v11[1] = 1174405120;
          _OWORD v11[2] = ___ZN20QMIDataCommandDriver21reportPhsClients_syncEi_block_invoke;
          v11[3] = &__block_descriptor_tmp_171_1;
          void v11[4] = this;
          void v11[5] = v7;
          uint64_t v12 = v6;
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          int v13 = a2;
          aBlock[0] = MEMORY[0x263EF8330];
          aBlock[1] = 0x40000000;
          aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
          aBlock[3] = &unk_26460B7B8;
          aBlock[4] = v11;
          int v10 = _Block_copy(aBlock);
          uint64_t v18 = v10;
          if (v15)
          {
            qmi::Client::send();
            int v10 = v18;
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v6);
      }
    }
  }
}

void sub_2223E3898(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  if (a9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a9);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

void ___ZN20QMIDataCommandDriver21reportPhsClients_syncEi_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = *(NSObject **)(v4 + 96);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a1 + 56);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "PhsStatusInfo %d request failed", (uint8_t *)v7, 8u);
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::reportPhsClients_sync(QMIDataCommandDriver *this, int a2)
{
}

uint64_t QMIDataCommandDriver::dataBearerRequired(uint64_t a1, int a2)
{
  return DataUtils::lteishDataMode() | a2;
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::dataBearerRequired(uint64_t a1, int a2)
{
  return DataUtils::lteishDataMode() | a2;
}

void QMIDataCommandDriver::setCriticalActivity_sync(QMIDataCommandDriver *this, char a2)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = *((void *)this + 5);
      if (v7
        && ((*(uint64_t (**)(void))(*(void *)v7 + 496))(*((void *)this + 5)) & 1) == 0
        && *((void *)this + 20))
      {
        *(_OWORD *)std::string __p = 0u;
        long long v25 = 0u;
        qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
        v22[0] = MEMORY[0x263EF8330];
        v22[1] = 0x40000000;
        unint64_t v22[2] = ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke;
        v22[3] = &__block_descriptor_tmp_173_0;
        char v23 = a2;
        uint64_t v8 = (const void **)__p[1];
        if (__p[1] != (void *)v25)
        {
          while (*((unsigned char *)*v8 + 8) != 18)
          {
            if (++v8 == (const void **)v25) {
              goto LABEL_13;
            }
          }
        }
        if (v8 == (const void **)v25) {
LABEL_13:
        }
          operator new();
        if (!v9) {
          __cxa_bad_cast();
        }
        ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke((uint64_t)v22, v9 + 9);
        int v10 = *((void *)this + 12);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = asStringBool();
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v12;
          _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I Sending SetDataLowLatencyMode %s request", (uint8_t *)&buf, 0xCu);
        }
        uint64_t v17 = (char *)this + 144;
        uint64_t v18 = QMIServiceMsg::create();
        int v19 = 25000;
        uint64_t v20 = 0;
        long long aBlock = 0;
        v14[0] = MEMORY[0x263EF8330];
        v14[1] = 1174405120;
        _DWORD v14[2] = ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke_174;
        void v14[3] = &__block_descriptor_tmp_177_0;
        void v14[4] = this;
        void v14[5] = v7;
        uint64_t v15 = v6;
        atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        char v16 = a2;
        *(void *)&long long buf = MEMORY[0x263EF8330];
        *((void *)&buf + 1) = 0x40000000;
        unsigned int v27 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
        __int16 v28 = &unk_26460B7B8;
        uint64_t v29 = v14;
        int v13 = _Block_copy(&buf);
        long long aBlock = v13;
        if (v18)
        {
          qmi::Client::send();
          int v13 = aBlock;
        }
        if (v13) {
          _Block_release(v13);
        }
        if (v15) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v15);
        }
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223E3E50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN20QMIDataCommandDriver24setCriticalActivity_syncEb_block_invoke_174(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    uint64_t v5 = *(NSObject **)(v3 + 96);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v4)
    {
      if (!v6) {
        return;
      }
      int v8 = 136315138;
      uint64_t v9 = asStringBool();
      uint64_t v7 = "#I SetDataLowLatencyMode %s request failed";
    }
    else
    {
      if (!v6) {
        return;
      }
      int v8 = 136315138;
      uint64_t v9 = asStringBool();
      uint64_t v7 = "#I SetDataLowLatencyMode %s request: success";
    }
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v8, 0xCu);
  }
}

void non-virtual thunk to'QMIDataCommandDriver::setCriticalActivity_sync(QMIDataCommandDriver *this, char a2)
{
}

double ___ZNK20QMIDataCommandDriver19reportPdpStatisticsERKNSt3__110shared_ptrIKNS0_3mapIjN29PdpStatisticsServiceInterface9PdpStatusENS0_4lessIjEENS0_9allocatorINS0_4pairIKjS4_EEEEEEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  double result = *(double *)(a1 + 32);
  *(double *)a2 = result;
  *(_DWORD *)(a2 + 8) = 0;
  return result;
}

void __copy_helper_block_e8_32c48_ZTSKN29PdpStatisticsServiceInterface9PdpStatusE(std::string *a1, uint64_t a2)
{
  std::string::size_type v4 = *(void *)(a2 + 32);
  a1[1].__r_.__value_.__s.__data_[16] = *(unsigned char *)(a2 + 40);
  a1[1].__r_.__value_.__l.__size_ = v4;
  uint64_t v5 = a1 + 2;
  if (*(char *)(a2 + 71) < 0)
  {
    std::string::__init_copy_ctor_external(v5, *(const std::string::value_type **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    v5->__r_.__value_.__r.__words[2] = *(void *)(a2 + 64);
    *(_OWORD *)&v5->__r_.__value_.__l.__data_ = v6;
  }
  a1[3].__r_.__value_.__s.__data_[0] = *(unsigned char *)(a2 + 72);
}

void __destroy_helper_block_e8_32c48_ZTSKN29PdpStatisticsServiceInterface9PdpStatusE(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
}

void ___ZNK20QMIDataCommandDriver19reportPdpStatisticsERKNSt3__110shared_ptrIKNS0_3mapIjN29PdpStatisticsServiceInterface9PdpStatusENS0_4lessIjEENS0_9allocatorINS0_4pairIKjS4_EEEEEEEE_block_invoke_180(uint64_t a1, uint64_t a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0
    && *(_DWORD *)(a2 + 4))
  {
    uint64_t v5 = *(NSObject **)(v4 + 96);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      int v6 = *(_DWORD *)(a1 + 56);
      v7[0] = 67109120;
      v7[1] = v6;
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "LinkStats request failed for pdp %d", (uint8_t *)v7, 8u);
    }
  }
}

void ___ZN20QMIDataCommandDriver24sendWdsGetTdInfoReq_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v16 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  uint64_t v3 = (std::__shared_weak_count *)v2[6];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      uint64_t v7 = v2[5];
      if (v7)
      {
        if (((*(uint64_t (**)(uint64_t))(*(void *)v7 + 496))(v7) & 1) == 0)
        {
          int v8 = *(_DWORD *)(a2 + 4);
          if (v8)
          {
            uint64_t v9 = v2[12];
            if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
            {
              int v10 = 136315650;
              __int16 v11 = "sendWdsGetTdInfoReq_sync_block_invoke";
              __int16 v12 = 1024;
              int v13 = v8;
              __int16 v14 = 2080;
              uint64_t v15 = qmi::asString();
              _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I %s: failed to retrieve TD info: 0x%x (%s)", (uint8_t *)&v10, 0x1Cu);
            }
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223E4280(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataCommandDriver::selectDnnForTd_sync(capabilities::ct *a1, TrafficDescriptor *a2, uint64_t a3)
{
  v126[1] = *MEMORY[0x263EF8340];
  uint64_t result = capabilities::ct::supports5GSlicing(a1);
  if (result)
  {
    uint64_t v7 = *((void *)a1 + 20);
    int v8 = *((void *)a1 + 12);
    uint64_t result = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    if (v7)
    {
      if (result)
      {
        TrafficDescriptor::toString((uint64_t *)__p, a2);
        uint64_t v9 = v124 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long buf = 136315394;
        uint64_t v120 = "selectDnnForTd_sync";
        __int16 v121 = 2082;
        v122 = v9;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I %s: sending PduSessionLookup::Request for td=%{public}s", buf, 0x16u);
        if (v124 < 0) {
          operator delete(__p[0]);
        }
      }
      std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v118, a3);
      MEMORY[0x223C99340](__p, a2);
      std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v125, (uint64_t)v118);
      int v10 = (char *)*((void *)a1 + 56);
      __int16 v11 = (char *)*((void *)a1 + 57);
      uint64_t v12 = v11 - v10;
      if (v11 == v10) {
        uint64_t v13 = 0;
      }
      else {
        uint64_t v13 = 2 * (v11 - v10) - 1;
      }
      unint64_t v14 = *((void *)a1 + 59);
      if (v13 != *((void *)a1 + 60) + v14)
      {
LABEL_48:
        if (v11 == v10)
        {
          uint64_t v60 = 0;
        }
        else
        {
          unint64_t v59 = *((void *)a1 + 60) + *((void *)a1 + 59);
          uint64_t v60 = *(void *)&v10[(v59 >> 1) & 0x7FFFFFFFFFFFFFF8] + 336 * (v59 & 0xF);
        }
        uint64_t v61 = MEMORY[0x223C99330](v60, __p);
        if (v126[0])
        {
          if ((void *)v126[0] == v125)
          {
            *(void *)(v61 + 328) = v61 + 304;
            (*(void (**)(void))(*(void *)v126[0] + 24))(v126[0]);
            goto LABEL_57;
          }
          __int16 v62 = v126;
          *(void *)(v61 + 328) = v126[0];
        }
        else
        {
          __int16 v62 = (void *)(v61 + 328);
        }
        *__int16 v62 = 0;
LABEL_57:
        ++*((void *)a1 + 60);
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v125);
        MEMORY[0x223C99360](__p);
        QMIDataCommandDriver::processPendingLookupRequests_sync(a1);
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v118);
        return 1;
      }
      BOOL v15 = v14 >= 0x10;
      unint64_t v16 = v14 - 16;
      if (v15)
      {
        *((void *)a1 + 59) = v16;
        uint64_t v19 = *(void *)v10;
        uint64_t v17 = v10 + 8;
        uint64_t v18 = v19;
        *((void *)a1 + 56) = v17;
        if (v11 == *((char **)a1 + 58))
        {
          unint64_t v20 = *((void *)a1 + 55);
          uint64_t v21 = (uint64_t)&v17[-v20];
          if ((unint64_t)v17 <= v20)
          {
            uint64_t v47 = (uint64_t)&v11[-v20];
            BOOL v46 = v47 == 0;
            uint64_t v48 = v47 >> 2;
            if (v46) {
              unint64_t v49 = 1;
            }
            else {
              unint64_t v49 = v48;
            }
            int v50 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v49);
            __int16 v52 = &v50[8 * (v49 >> 2)];
            __int16 v53 = (uint64_t *)*((void *)a1 + 56);
            __int16 v11 = v52;
            uint64_t v54 = *((void *)a1 + 57) - (void)v53;
            if (v54)
            {
              __int16 v11 = &v52[v54 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v55 = 8 * (v54 >> 3);
              uint64_t v56 = &v50[8 * (v49 >> 2)];
              do
              {
                uint64_t v57 = *v53++;
                *(void *)uint64_t v56 = v57;
                v56 += 8;
                v55 -= 8;
              }
              while (v55);
            }
            __int16 v58 = (void *)*((void *)a1 + 55);
            *((void *)a1 + 55) = v50;
            *((void *)a1 + 56) = v52;
            *((void *)a1 + 57) = v11;
            *((void *)a1 + 58) = &v50[8 * v51];
            if (v58)
            {
              operator delete(v58);
              __int16 v11 = (char *)*((void *)a1 + 57);
            }
          }
          else
          {
            uint64_t v22 = v21 >> 3;
            BOOL v23 = v21 >> 3 < -1;
            uint64_t v24 = (v21 >> 3) + 2;
            if (v23) {
              uint64_t v25 = v24;
            }
            else {
              uint64_t v25 = v22 + 1;
            }
            uint64_t v26 = -(v25 >> 1);
            uint64_t v27 = v25 >> 1;
            __int16 v28 = &v17[-8 * v27];
            int64_t v29 = v11 - v17;
            if (v11 != v17)
            {
              memmove(&v17[-8 * v27], v17, v11 - v17);
              __int16 v11 = (char *)*((void *)a1 + 56);
            }
            uint64_t v30 = &v11[8 * v26];
            __int16 v11 = &v28[v29];
            *((void *)a1 + 56) = v30;
            *((void *)a1 + 57) = &v28[v29];
          }
        }
        *(void *)__int16 v11 = v18;
      }
      else
      {
        uint64_t v31 = v12 >> 3;
        uint64_t v32 = (char *)*((void *)a1 + 58);
        uint64_t v33 = (char *)*((void *)a1 + 55);
        if (v12 >> 3 >= (unint64_t)((v32 - v33) >> 3))
        {
          if (v32 == v33) {
            unint64_t v36 = 1;
          }
          else {
            unint64_t v36 = (v32 - v33) >> 2;
          }
          char v37 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v36);
          uint64_t v39 = v38;
          uint64_t v40 = operator new(0x1500uLL);
          unint64_t v41 = &v37[8 * v31];
          uint64_t v42 = &v37[8 * v39];
          if (v31 == v39)
          {
            uint64_t v43 = 8 * v31;
            if (v12 < 1)
            {
              long long v85 = v40;
              uint64_t v86 = v43 >> 2;
              if (v11 == v10) {
                unint64_t v87 = 1;
              }
              else {
                unint64_t v87 = v86;
              }
              long long v88 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v87);
              unint64_t v41 = &v88[8 * (v87 >> 2)];
              uint64_t v42 = &v88[8 * v89];
              if (v37) {
                operator delete(v37);
              }
              char v37 = v88;
              uint64_t v40 = v85;
            }
            else
            {
              uint64_t v44 = v43 >> 3;
              if (v44 >= -1) {
                unint64_t v45 = v44 + 1;
              }
              else {
                unint64_t v45 = v44 + 2;
              }
              v41 -= 8 * (v45 >> 1);
            }
          }
          *(void *)unint64_t v41 = v40;
          __int16 v11 = v41 + 8;
          for (uint64_t i = *((void *)a1 + 57); i != *((void *)a1 + 56); i -= 8)
          {
            if (v41 == v37)
            {
              if (v11 >= v42)
              {
                if (v42 == v37) {
                  unint64_t v95 = 1;
                }
                else {
                  unint64_t v95 = (v42 - v37) >> 2;
                }
                char v96 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v95);
                char v98 = v96;
                unint64_t v41 = &v96[(2 * v95 + 6) & 0xFFFFFFFFFFFFFFF8];
                uint64_t v99 = v11 - v37;
                BOOL v46 = v11 == v37;
                __int16 v11 = v41;
                if (!v46)
                {
                  __int16 v11 = &v41[v99 & 0xFFFFFFFFFFFFFFF8];
                  uint64_t v100 = 8 * (v99 >> 3);
                  v101 = v41;
                  char v102 = v37;
                  do
                  {
                    uint64_t v103 = *(void *)v102;
                    v102 += 8;
                    *(void *)v101 = v103;
                    v101 += 8;
                    v100 -= 8;
                  }
                  while (v100);
                }
                uint64_t v42 = &v96[8 * v97];
                if (v37) {
                  operator delete(v37);
                }
                char v37 = v98;
              }
              else
              {
                uint64_t v91 = (v42 - v11) >> 3;
                if (v91 >= -1) {
                  uint64_t v92 = v91 + 1;
                }
                else {
                  uint64_t v92 = v91 + 2;
                }
                uint64_t v93 = v92 >> 1;
                unint64_t v41 = &v37[8 * (v92 >> 1)];
                char v94 = v37;
                if (v11 != v37)
                {
                  memmove(v41, v37, v11 - v37);
                  char v94 = v11;
                }
                __int16 v11 = &v94[8 * v93];
              }
            }
            uint64_t v104 = *(void *)(i - 8);
            *((void *)v41 - 1) = v104;
            v41 -= 8;
          }
          v105 = (void *)*((void *)a1 + 55);
          *((void *)a1 + 55) = v37;
          *((void *)a1 + 56) = v41;
          *((void *)a1 + 57) = v11;
          *((void *)a1 + 58) = v42;
          if (v105)
          {
            operator delete(v105);
            __int16 v11 = (char *)*((void *)a1 + 57);
          }
          goto LABEL_47;
        }
        uint64_t v34 = operator new(0x1500uLL);
        uint64_t v35 = v34;
        if (v32 == v11)
        {
          if (v10 == v33)
          {
            if (v11 == v10) {
              unint64_t v63 = 1;
            }
            else {
              unint64_t v63 = (v32 - v10) >> 2;
            }
            std::string v64 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v63);
            int v10 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
            uint64_t v66 = (uint64_t *)*((void *)a1 + 56);
            long long v67 = v10;
            uint64_t v68 = *((void *)a1 + 57) - (void)v66;
            if (v68)
            {
              long long v67 = &v10[v68 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v69 = 8 * (v68 >> 3);
              long long v70 = &v64[(2 * v63 + 6) & 0xFFFFFFFFFFFFFFF8];
              do
              {
                uint64_t v71 = *v66++;
                *(void *)long long v70 = v71;
                v70 += 8;
                v69 -= 8;
              }
              while (v69);
            }
            std::string::size_type v72 = (void *)*((void *)a1 + 55);
            *((void *)a1 + 55) = v64;
            *((void *)a1 + 56) = v10;
            *((void *)a1 + 57) = v67;
            *((void *)a1 + 58) = &v64[8 * v65];
            if (v72)
            {
              operator delete(v72);
              int v10 = (char *)*((void *)a1 + 56);
            }
          }
          *((void *)v10 - 1) = v35;
          uint64_t v73 = (char *)*((void *)a1 + 56);
          __int16 v74 = (char *)*((void *)a1 + 57);
          *((void *)a1 + 56) = v73 - 8;
          uint64_t v75 = *((void *)v73 - 1);
          *((void *)a1 + 56) = v73;
          if (v74 == *((char **)a1 + 58))
          {
            unint64_t v76 = *((void *)a1 + 55);
            uint64_t v77 = (uint64_t)&v73[-v76];
            if ((unint64_t)v73 <= v76)
            {
              uint64_t v106 = (uint64_t)&v74[-v76];
              BOOL v46 = v106 == 0;
              uint64_t v107 = v106 >> 2;
              if (v46) {
                unint64_t v108 = 1;
              }
              else {
                unint64_t v108 = v107;
              }
              uint64_t v109 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v108);
              v111 = &v109[8 * (v108 >> 2)];
              v112 = (uint64_t *)*((void *)a1 + 56);
              __int16 v74 = v111;
              uint64_t v113 = *((void *)a1 + 57) - (void)v112;
              if (v113)
              {
                __int16 v74 = &v111[v113 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v114 = 8 * (v113 >> 3);
                v115 = &v109[8 * (v108 >> 2)];
                do
                {
                  uint64_t v116 = *v112++;
                  *(void *)v115 = v116;
                  v115 += 8;
                  v114 -= 8;
                }
                while (v114);
              }
              v117 = (void *)*((void *)a1 + 55);
              *((void *)a1 + 55) = v109;
              *((void *)a1 + 56) = v111;
              *((void *)a1 + 57) = v74;
              *((void *)a1 + 58) = &v109[8 * v110];
              if (v117)
              {
                operator delete(v117);
                __int16 v74 = (char *)*((void *)a1 + 57);
              }
            }
            else
            {
              uint64_t v78 = v77 >> 3;
              BOOL v23 = v77 >> 3 < -1;
              uint64_t v79 = (v77 >> 3) + 2;
              if (v23) {
                uint64_t v80 = v79;
              }
              else {
                uint64_t v80 = v78 + 1;
              }
              uint64_t v81 = -(v80 >> 1);
              uint64_t v82 = v80 >> 1;
              int v83 = &v73[-8 * v82];
              int64_t v84 = v74 - v73;
              if (v74 != v73)
              {
                memmove(&v73[-8 * v82], v73, v74 - v73);
                uint64_t v73 = (char *)*((void *)a1 + 56);
              }
              __int16 v74 = &v83[v84];
              *((void *)a1 + 56) = &v73[8 * v81];
              *((void *)a1 + 57) = &v83[v84];
            }
          }
          *(void *)__int16 v74 = v75;
        }
        else
        {
          *(void *)__int16 v11 = v34;
        }
      }
      __int16 v11 = (char *)(*((void *)a1 + 57) + 8);
      *((void *)a1 + 57) = v11;
LABEL_47:
      int v10 = (char *)*((void *)a1 + 56);
      goto LABEL_48;
    }
    if (result)
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#E WDS Client is not ready", (uint8_t *)__p, 2u);
      return 0;
    }
  }
  return result;
}

void sub_2223E4934(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17)
{
  operator delete(v19);
  if (v18) {
    operator delete(v18);
  }
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v17);
  MEMORY[0x223C99360](&a17);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::selectDnnForTd_sync(uint64_t a1, TrafficDescriptor *a2, uint64_t a3)
{
  return QMIDataCommandDriver::selectDnnForTd_sync((capabilities::ct *)(a1 - 32), a2, a3);
}

PersonalitySpecificImpl *QMIDataCommandDriver::processPendingLookupRequests_sync(PersonalitySpecificImpl *this)
{
  v75[3] = *MEMORY[0x263EF8340];
  if (*((void *)this + 60))
  {
    uint64_t v1 = this;
    if (!*((void *)this + 53))
    {
      memset(v64, 0, sizeof(v64));
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      long long v58 = 0u;
      long long v59 = 0u;
      memset(v57, 0, sizeof(v57));
      long long v56 = 0u;
      memset(v55, 0, sizeof(v55));
      unint64_t v2 = *((void *)this + 59);
      uint64_t v3 = *(void *)(*((void *)this + 56) + ((v2 >> 1) & 0x7FFFFFFFFFFFFFF8));
      unsigned int v4 = v2 & 0xF;
      MEMORY[0x223C99340](v55, v3 + 336 * (v2 & 0xF));
      std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v64, v3 + 336 * v4 + 304);
      std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front((uint64_t)v1 + 440);
      std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v54, (uint64_t)v64);
      uint64_t v5 = (std::__shared_weak_count *)*((void *)v1 + 41);
      if (!v5) {
        goto LABEL_108;
      }
      int v6 = std::__shared_weak_count::lock(v5);
      if (!v6) {
        goto LABEL_108;
      }
      uint64_t v7 = v6;
      uint64_t v8 = *((void *)v1 + 40);
      if (!v8)
      {
LABEL_107:
        std::__shared_weak_count::__release_shared[abi:ne180100](v7);
LABEL_108:
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v54);
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v64);
        return (PersonalitySpecificImpl *)MEMORY[0x223C99360](v55);
      }
      int v9 = PersonalitySpecificImpl::simSlot(v1);
      long long v51 = 0u;
      long long v52 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
      __int16 v10 = QMIDataCommandDriver::fPduSessionLookupTransactionId++;
      v49[0] = MEMORY[0x263EF8330];
      v49[1] = 0x40000000;
      _OWORD v49[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke;
      v49[3] = &__block_descriptor_tmp_186;
      __int16 v50 = v10;
      __int16 v11 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned char *)*v11 + 8) != 1)
        {
          if (++v11 == (const void **)v52) {
            goto LABEL_13;
          }
        }
      }
      if (v11 == (const void **)v52) {
LABEL_13:
      }
        operator new();
      if (!v12) {
        goto LABEL_110;
      }
      ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke((uint64_t)v49, v12 + 5);
      uint64_t v13 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned char *)*v13 + 8) != 2)
        {
          if (++v13 == (const void **)v52) {
            goto LABEL_21;
          }
        }
      }
      if (v13 == (const void **)v52) {
LABEL_21:
      }
        operator new();
      if (!v14) {
        goto LABEL_110;
      }
      *(_DWORD *)(v14 + 10) = 1;
      if (TrafficDescriptor::hasDnnInfo((TrafficDescriptor *)v55))
      {
        v48[0] = MEMORY[0x263EF8330];
        v48[1] = 0x40000000;
        v48[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3;
        v48[3] = &__block_descriptor_tmp_191;
        v48[4] = v55;
        unint64_t v16 = (const void **)*((void *)&v51 + 1);
        if (*((void *)&v51 + 1) != (void)v52)
        {
          while (*((unsigned char *)*v16 + 8) != 17)
          {
            if (++v16 == (const void **)v52) {
              goto LABEL_30;
            }
          }
        }
        if (v16 == (const void **)v52) {
LABEL_30:
        }
          operator new();
        if (!v17) {
          goto LABEL_110;
        }
        ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3((uint64_t)v48, (std::string *)(v17 + 16));
      }
      if (TrafficDescriptor::hasBundleInfo((TrafficDescriptor *)v55))
      {
        v41[0] = MEMORY[0x263EF8330];
        v41[1] = 1174405120;
        uint64_t v42 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4;
        uint64_t v43 = &__block_descriptor_tmp_192_2;
        uint64_t v44 = v8;
        unint64_t v45 = v7;
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
        int v47 = v9;
        BOOL v46 = v55;
        uint64_t v18 = (const void **)*((void *)&v51 + 1);
        if (*((void *)&v51 + 1) != (void)v52)
        {
          while (*((unsigned char *)*v18 + 8) != 19)
          {
            if (++v18 == (const void **)v52) {
              goto LABEL_39;
            }
          }
        }
        if (v18 == (const void **)v52) {
LABEL_39:
        }
          operator new();
        if (!v19) {
          __cxa_bad_cast();
        }
        v42((uint64_t)v41, v19 + 2);
        if (v45) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v45);
        }
      }
      if (v57[0])
      {
        uint64_t v20 = HIBYTE(v56);
        if (v56 < 0) {
          uint64_t v20 = v56;
        }
        if (v20)
        {
          v40[0] = MEMORY[0x263EF8330];
          v40[1] = 0x40000000;
          void v40[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_193;
          v40[3] = &__block_descriptor_tmp_194_0;
          v40[4] = v55;
          uint64_t v21 = (const void **)*((void *)&v51 + 1);
          if (*((void *)&v51 + 1) != (void)v52)
          {
            while (*((unsigned char *)*v21 + 8) != 18)
            {
              if (++v21 == (const void **)v52) {
                goto LABEL_53;
              }
            }
          }
          if (v21 == (const void **)v52) {
LABEL_53:
          }
            operator new();
          if (!v22) {
            goto LABEL_110;
          }
          ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_193((uint64_t)v40, (uint64_t)v22 + 16);
        }
      }
      if ((_BYTE)v58 && (CSIPacketAddress::isZeroIP((CSIPacketAddress *)&v57[8]) & 1) == 0)
      {
        uint64_t v65 = 0;
        uint64_t v66 = 0;
        long long v67 = 0;
        if (!(_BYTE)v58) {
          std::__throw_bad_optional_access[abi:ne180100]();
        }
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v65, (const CSIPacketAddress *)&v57[8]);
        if (CSIPacketAddress::isIPv4(v23))
        {
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 1174405120;
          uint64_t v73 = (void (*)(long long *))___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_195;
          __int16 v74 = &__block_descriptor_tmp_196;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v75, (const CSIPacketAddress *)&v65);
          uint64_t v24 = (const void **)*((void *)&v51 + 1);
          if (*((void *)&v51 + 1) != (void)v52)
          {
            while (*((unsigned char *)*v24 + 8) != 20)
            {
              if (++v24 == (const void **)v52) {
                goto LABEL_67;
              }
            }
          }
          if (v24 == (const void **)v52) {
LABEL_67:
          }
            operator new();
        }
        else
        {
          if (!CSIPacketAddress::isIPv6((CSIPacketAddress *)&v65))
          {
            uint64_t v25 = *((void *)v1 + 12);
            if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
            {
              LODWORD(buf) = 136315138;
              *(void *)((char *)&buf + 4) = "sendPduSessionLookupRequest_sync";
              _os_log_error_impl(&dword_22231A000, v25, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: wrong address type", (uint8_t *)&buf, 0xCu);
            }
            goto LABEL_71;
          }
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 1174405120;
          uint64_t v73 = (void (*)(long long *))___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_197;
          __int16 v74 = &__block_descriptor_tmp_200_2;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v75, (const CSIPacketAddress *)&v65);
          qmi::MutableMessageBase::getTLV<wds::tlv::Ipv6AddrList>((uint64_t)&v51);
        }
        v73(&buf);
      }
LABEL_71:
      if (BYTE6(v58) && WORD2(v58))
      {
        v39[0] = MEMORY[0x263EF8330];
        v39[1] = 0x40000000;
        v39[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_201;
        v39[3] = &__block_descriptor_tmp_202_0;
        v39[4] = v55;
        uint64_t v26 = (const void **)*((void *)&v51 + 1);
        if (*((void *)&v51 + 1) != (void)v52)
        {
          while (*((unsigned char *)*v26 + 8) != 27)
          {
            if (++v26 == (const void **)v52) {
              goto LABEL_80;
            }
          }
        }
        if (v26 == (const void **)v52) {
LABEL_80:
        }
          operator new();
        if (!v27) {
          goto LABEL_110;
        }
        ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_201((uint64_t)v39, (uint64_t)v27 + 16);
      }
      if (BYTE12(v58))
      {
        v38[0] = MEMORY[0x263EF8330];
        v38[1] = 0x40000000;
        void v38[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_203;
        void v38[3] = &__block_descriptor_tmp_204_0;
        v38[4] = v55;
        __int16 v28 = (const void **)*((void *)&v51 + 1);
        if (*((void *)&v51 + 1) != (void)v52)
        {
          while (*((unsigned char *)*v28 + 8) != 30)
          {
            if (++v28 == (const void **)v52) {
              goto LABEL_89;
            }
          }
        }
        if (v28 == (const void **)v52) {
LABEL_89:
        }
          operator new();
        if (!v29) {
          goto LABEL_110;
        }
        ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_203((uint64_t)v38, (uint64_t)v29 + 16);
      }
      if (!(_BYTE)v59 || !HIWORD(v58)) {
        goto LABEL_100;
      }
      v37[0] = MEMORY[0x263EF8330];
      v37[1] = 0x40000000;
      uint64_t v37[2] = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_205;
      v37[3] = &__block_descriptor_tmp_206_0;
      v37[4] = v55;
      uint64_t v30 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned char *)*v30 + 8) != 23)
        {
          if (++v30 == (const void **)v52) {
            goto LABEL_99;
          }
        }
      }
      if (v30 == (const void **)v52) {
LABEL_99:
      }
        operator new();
      if (v31)
      {
        ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_205((uint64_t)v37, (uint64_t)v31 + 16);
LABEL_100:
        uint64_t v32 = operator new(0x40uLL);
        v32[1] = 0;
        v32[2] = 0;
        *uint64_t v32 = &unk_26D4C3290;
        *((_WORD *)v32 + 12) = v10;
        std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)(v32 + 4), (uint64_t)v54);
        uint64_t v33 = (std::__shared_weak_count *)*((void *)v1 + 54);
        *((void *)v1 + 53) = v32 + 3;
        *((void *)v1 + 54) = v32;
        if (v33) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v33);
        }
        uint64_t v35 = QMIServiceMsg::create();
        uint64_t v65 = MEMORY[0x263EF8330];
        uint64_t v66 = 1174405120;
        long long v67 = ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4_207;
        uint64_t v68 = &__block_descriptor_tmp_209_1;
        uint64_t v69 = v1;
        __int16 v71 = v10;
        std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100]((uint64_t)v70, (uint64_t)v54);
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 0x40000000;
        aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16PduSessionLookup8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
        aBlock[3] = &unk_26460BA48;
        aBlock[4] = &v65;
        uint64_t v34 = _Block_copy(aBlock);
        unint64_t v36 = v34;
        if (v35)
        {
          qmi::Client::send();
          uint64_t v34 = v36;
        }
        if (v34) {
          _Block_release(v34);
        }
        std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v70);
        qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
        goto LABEL_107;
      }
LABEL_110:
      __cxa_bad_cast();
    }
  }
  return this;
}

void sub_2223E5E48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v69);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a53);
  std::__shared_weak_count::__release_shared[abi:ne180100](v68);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](&a63);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](v67);
  MEMORY[0x223C99360](&a67);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

std::string *___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3(uint64_t a1, std::string *this)
{
  unint64_t v2 = *(const std::string **)(a1 + 32);
  if (!v2[11].__r_.__value_.__s.__data_[0]) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }

  return std::string::operator=(this, v2 + 10);
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v40 = *MEMORY[0x263EF8340];
  std::vector<wds::tlv::AppInfo>::__clear[abi:ne180100](a2);
  *(_OWORD *)std::string __p = 0u;
  long long v39 = 0u;
  long long v37 = 0u;
  LOBYTE(v37) = (*(uint64_t (**)(void, void, char *))(**(void **)(a1 + 32) + 72))(*(void *)(a1 + 32), *(unsigned int *)(a1 + 56), (char *)&v37 + 1);
  uint64_t v4 = *(void *)(a1 + 48);
  if (!*(unsigned char *)(v4 + 72)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  int v5 = *(char *)(v4 + 71);
  if (v5 < 0)
  {
    int v6 = *(char **)(v4 + 48);
    uint64_t v7 = *(void *)(v4 + 56);
    if (!v7) {
      goto LABEL_25;
    }
  }
  else
  {
    int v6 = (char *)(v4 + 48);
    uint64_t v7 = *(unsigned __int8 *)(v4 + 71);
    if (!(_BYTE)v5) {
      goto LABEL_25;
    }
  }
  uint64_t v8 = &v6[v7];
  int v9 = (unsigned char *)v39;
  do
  {
    char v10 = *v6;
    if ((unint64_t)v9 >= *((void *)&v39 + 1))
    {
      unint64_t v12 = (unint64_t)__p[1];
      uint64_t v13 = v9 - (char *)__p[1];
      int64_t v14 = v9 - (char *)__p[1] + 1;
      if (v14 < 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = *((void *)&v39 + 1) - (unint64_t)__p[1];
      if (2 * (*((void *)&v39 + 1) - (unint64_t)__p[1]) > v14) {
        int64_t v14 = 2 * v15;
      }
      if (v15 >= 0x3FFFFFFFFFFFFFFFLL) {
        size_t v16 = 0x7FFFFFFFFFFFFFFFLL;
      }
      else {
        size_t v16 = v14;
      }
      if (v16) {
        uint64_t v17 = (char *)operator new(v16);
      }
      else {
        uint64_t v17 = 0;
      }
      uint64_t v18 = &v17[v13];
      uint64_t v19 = &v17[v13];
      *uint64_t v19 = v10;
      __int16 v11 = v19 + 1;
      if (v9 != (unsigned char *)v12)
      {
        uint64_t v20 = &v9[~v12];
        do
        {
          char v21 = *--v9;
          (v20--)[(void)v17] = v21;
        }
        while (v9 != (unsigned char *)v12);
        int v9 = __p[1];
        uint64_t v18 = v17;
      }
      __p[1] = v18;
      *(void *)&long long v39 = v11;
      *((void *)&v39 + 1) = &v17[v16];
      if (v9) {
        operator delete(v9);
      }
    }
    else
    {
      *int v9 = v10;
      __int16 v11 = v9 + 1;
    }
    *(void *)&long long v39 = v11;
    ++v6;
    int v9 = v11;
  }
  while (v6 != v8);
LABEL_25:
  unint64_t v22 = a2[2];
  unint64_t v23 = a2[1];
  if (v23 >= v22)
  {
    unint64_t v26 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v23 - *a2) >> 4);
    if (v26 + 1 > 0x555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v22 - *a2) >> 4);
    uint64_t v28 = 2 * v27;
    if (2 * v27 <= v26 + 1) {
      uint64_t v28 = v26 + 1;
    }
    if (v27 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v29 = 0x555555555555555;
    }
    else {
      unint64_t v29 = v28;
    }
    unint64_t v36 = a2 + 2;
    if (v29) {
      uint64_t v30 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::AppInfo>>((uint64_t)(a2 + 2), v29);
    }
    else {
      uint64_t v30 = 0;
    }
    uint64_t v31 = &v30[48 * v26];
    v33[0] = v30;
    v33[1] = v31;
    uint64_t v34 = v31;
    uint64_t v35 = &v30[48 * v29];
    long long v32 = v37;
    v31[16] = (char)__p[0];
    *(_OWORD *)uint64_t v31 = v32;
    *((void *)v31 + 4) = 0;
    *((void *)v31 + 5) = 0;
    *((void *)v31 + 3) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)v31 + 3, __p[1], v39, v39 - (unint64_t)__p[1]);
    v34 += 48;
    std::vector<wds::tlv::AppInfo>::__swap_out_circular_buffer(a2, v33);
    uint64_t v25 = a2[1];
    std::__split_buffer<wds::tlv::AppInfo>::~__split_buffer((uint64_t)v33);
  }
  else
  {
    long long v24 = v37;
    *(unsigned char *)(v23 + 16) = __p[0];
    *(_OWORD *)unint64_t v23 = v24;
    *(void *)(v23 + 32) = 0;
    *(void *)(v23 + 40) = 0;
    *(void *)(v23 + 24) = 0;
    std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v23 + 24), __p[1], v39, v39 - (unint64_t)__p[1]);
    uint64_t v25 = v23 + 48;
    a2[1] = v23 + 48;
  }
  a2[1] = v25;
  if (__p[1])
  {
    *(void **)&long long v39 = __p[1];
    operator delete(__p[1]);
  }
}

void sub_2223E6258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19)
{
  *(void *)(v19 + 8) = v20;
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c68_ZTSKNSt3__110shared_ptrI39BBDataCommandDriverEventHandlerObserverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c68_ZTSKNSt3__110shared_ptrI39BBDataCommandDriverEventHandlerObserverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_193(uint64_t a1, uint64_t a2)
{
  std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a2);
  memset(&__p, 0, sizeof(__p));
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v4 + 176)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  std::string::operator=(&__p, (const std::string *)(v4 + 152));
  unint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 8);
  if (v6 >= v5)
  {
    unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
    if (v8 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - *(void *)a2) >> 3);
    uint64_t v10 = 2 * v9;
    if (2 * v9 <= v8 + 1) {
      uint64_t v10 = v8 + 1;
    }
    if (v9 >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    v17.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v11) {
      unint64_t v12 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(a2 + 16, v11);
    }
    else {
      unint64_t v12 = 0;
    }
    std::__split_buffer<std::string>::pointer end = v12 + v8;
    v17.__first_ = v12;
    v17.__begin_ = end;
    v17.__end_ = end;
    v17.__end_cap_.__value_ = &v12[v11];
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(end, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      std::__split_buffer<std::string>::pointer end = v17.__end_;
    }
    else
    {
      long long v15 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      end->__r_.__value_.__r.__words[2] = __p.__r_.__value_.__r.__words[2];
      *(_OWORD *)&end->__r_.__value_.__l.__data_ = v15;
    }
    v17.__end_ = end + 1;
    std::vector<wds::tlv::FqdnInfo>::__swap_out_circular_buffer((uint64_t *)a2, &v17);
    unint64_t v13 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&v17);
  }
  else
  {
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(*(std::string **)(a2 + 8), __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v7 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v6 + 16) = *((void *)&__p.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v6 = v7;
    }
    unint64_t v13 = v6 + 24;
    *(void *)(a2 + 8) = v13;
  }
  *(void *)(a2 + 8) = v13;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_2223E645C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::__split_buffer<std::string> *a15)
{
  *(void *)(v15 + 8) = v16;
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_195(uint64_t a1, uint64_t **a2)
{
  a2[1] = *a2;
  uint64_t v3 = (CSIPacketAddress *)(a1 + 32);
  if (CSIPacketAddress::getPrefixLen((CSIPacketAddress *)(a1 + 32)))
  {
    CSIPacketAddress::ipv4PrefixLenToMaskAddr(v19, v3);
    uint64_t v4 = CSIPacketAddress::toIPv4LE((CSIPacketAddress *)v19) << 32;
  }
  else
  {
    uint64_t v4 = 0xFFFFFFFF00000000;
  }
  unsigned int v5 = CSIPacketAddress::toIPv4LE(v3);
  unint64_t v6 = (unint64_t)a2[2];
  long long v7 = a2[1];
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v9 = v7 - *a2;
    if ((unint64_t)(v9 + 1) >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v6 - (void)*a2;
    uint64_t v11 = v10 >> 2;
    if (v10 >> 2 <= (unint64_t)(v9 + 1)) {
      uint64_t v11 = v9 + 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v12 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12) {
      unint64_t v13 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)(a2 + 2), v12);
    }
    else {
      unint64_t v13 = 0;
    }
    int64_t v14 = (uint64_t *)&v13[8 * v9];
    uint64_t v15 = &v13[8 * v12];
    uint64_t *v14 = v4 | v5;
    unint64_t v8 = v14 + 1;
    std::__split_buffer<std::string> v17 = *a2;
    uint64_t v16 = (char *)a2[1];
    if (v16 != (char *)*a2)
    {
      do
      {
        uint64_t v18 = *((void *)v16 - 1);
        v16 -= 8;
        *--int64_t v14 = v18;
      }
      while (v16 != (char *)v17);
      uint64_t v16 = (char *)*a2;
    }
    *a2 = v14;
    a2[1] = v8;
    a2[2] = (uint64_t *)v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    *long long v7 = v4 | v5;
    unint64_t v8 = v7 + 1;
  }
  a2[1] = v8;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_197(uint64_t a1, char **a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  a2[1] = *a2;
  long long v19 = 0uLL;
  char PrefixLen = 0x80;
  uint64_t v3 = (CSIPacketAddress *)(a1 + 32);
  if (CSIPacketAddress::getPrefixLen((CSIPacketAddress *)(a1 + 32))) {
    char PrefixLen = CSIPacketAddress::getPrefixLen(v3);
  }
  CSIPacketAddress::toIPv6(v3, (unsigned __int8 *)&v19);
  unint64_t v4 = (unint64_t)a2[2];
  unint64_t v5 = (unint64_t)a2[1];
  if (v5 >= v4)
  {
    unint64_t v8 = 0xF0F0F0F0F0F0F0F1 * (v5 - (void)*a2);
    unint64_t v9 = v8 + 1;
    if (v8 + 1 >= 0xF0F0F0F0F0F0F10) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * (v4 - (void)*a2);
    if (2 * v10 > v9) {
      unint64_t v9 = 2 * v10;
    }
    if (v10 >= 0x787878787878787) {
      unint64_t v11 = 0xF0F0F0F0F0F0F0FLL;
    }
    else {
      unint64_t v11 = v9;
    }
    if (v11) {
      unint64_t v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv6AddrInfo>>((uint64_t)(a2 + 2), v11);
    }
    else {
      unint64_t v12 = 0;
    }
    unint64_t v13 = &v12[17 * v8];
    int64_t v14 = &v12[17 * v11];
    long long v15 = v19;
    v13[16] = PrefixLen;
    *(_OWORD *)unint64_t v13 = v15;
    long long v7 = v13 + 17;
    std::__split_buffer<std::string> v17 = *a2;
    uint64_t v16 = a2[1];
    if (v16 != *a2)
    {
      do
      {
        long long v18 = *(_OWORD *)(v16 - 17);
        *(v13 - 1) = *(v16 - 1);
        *(_OWORD *)(v13 - 17) = v18;
        v13 -= 17;
        v16 -= 17;
      }
      while (v16 != v17);
      uint64_t v16 = *a2;
    }
    *a2 = v13;
    a2[1] = v7;
    a2[2] = v14;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    long long v6 = v19;
    *(unsigned char *)(v5 + 16) = PrefixLen;
    *(_OWORD *)unint64_t v5 = v6;
    long long v7 = (char *)(v5 + 17);
  }
  a2[1] = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_201(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(_WORD **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 214)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v5 = a2 + 16;
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v2 >= v6)
  {
    unint64_t v8 = v6 - (void)v2;
    if (v8 <= 1) {
      uint64_t v9 = 1;
    }
    else {
      uint64_t v9 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v10 = v9;
    }
    unint64_t v11 = std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>(v5, v10);
    unint64_t v12 = *(_WORD **)a2;
    unint64_t v13 = *(_WORD **)(a2 + 8);
    long long v15 = &v11[v14];
    *unint64_t v11 = *(_WORD *)(v3 + 212);
    long long v7 = v11 + 1;
    while (v13 != v12)
    {
      __int16 v16 = *--v13;
      *--unint64_t v11 = v16;
    }
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v7;
    *(void *)(a2 + 16) = v15;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    _WORD *v2 = *(_WORD *)(v3 + 212);
    long long v7 = v2 + 1;
  }
  *(void *)(a2 + 8) = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_2_203(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(int **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 220)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  int v5 = *(unsigned __int16 *)(v3 + 216);
  int v6 = *(unsigned __int16 *)(v3 + 218);
  uint64_t v7 = a2 + 16;
  unint64_t v8 = *(void *)(a2 + 16);
  if ((unint64_t)v2 >= v8)
  {
    uint64_t v10 = v8 - (void)v2;
    uint64_t v11 = v10 >> 1;
    if ((unint64_t)(v10 >> 1) <= 1) {
      uint64_t v11 = 1;
    }
    if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    unint64_t v13 = std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>(v7, v12);
    long long v15 = &v13[v14];
    _DWORD *v13 = v5 | (v6 << 16);
    uint64_t v9 = v13 + 1;
    std::__split_buffer<std::string> v17 = *(int **)a2;
    __int16 v16 = *(int **)(a2 + 8);
    if (v16 != *(int **)a2)
    {
      do
      {
        int v18 = *--v16;
        *--unint64_t v13 = v18;
      }
      while (v16 != v17);
      __int16 v16 = *(int **)a2;
    }
    *(void *)a2 = v13;
    *(void *)(a2 + 8) = v9;
    *(void *)(a2 + 16) = v15;
    if (v16) {
      operator delete(v16);
    }
  }
  else
  {
    int *v2 = v5 | (v6 << 16);
    uint64_t v9 = v2 + 1;
  }
  *(void *)(a2 + 8) = v9;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_3_205(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(unsigned char **)a2;
  *(void *)(a2 + 8) = *(void *)a2;
  uint64_t v3 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v3 + 224)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  __int16 v5 = *(_WORD *)(v3 + 222);
  unint64_t v6 = *(void *)(a2 + 16);
  if ((unint64_t)v2 >= v6)
  {
    unint64_t v8 = v6 - (void)v2;
    uint64_t v9 = 2 * v8;
    if (2 * v8 <= 1) {
      uint64_t v9 = 1;
    }
    if (v8 >= 0x3FFFFFFFFFFFFFFFLL) {
      size_t v10 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      size_t v10 = v9;
    }
    uint64_t v11 = operator new(v10);
    unint64_t v12 = &v11[v10];
    *uint64_t v11 = v5;
    uint64_t v7 = v11 + 1;
    *(void *)a2 = v11;
    *(void *)(a2 + 8) = v11 + 1;
    *(void *)(a2 + 16) = v12;
    if (v2) {
      operator delete(v2);
    }
  }
  else
  {
    unsigned char *v2 = v5;
    uint64_t v7 = v2 + 1;
  }
  *(void *)(a2 + 8) = v7;
}

void ___ZN20QMIDataCommandDriver32sendPduSessionLookupRequest_syncERK17TrafficDescriptorNSt3__18functionIFvRKNS3_12basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEEEE_block_invoke_4_207(uint64_t a1, uint64_t a2)
{
  uint64_t v20 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    unint64_t v4 = *(QMIDataCommandDriver **)(a1 + 32);
    __int16 v5 = *((void *)v4 + 12);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      uint64_t v11 = qmi::asString();
      int v12 = *(unsigned __int16 *)(a1 + 72);
      *(_DWORD *)std::string __p = 136315906;
      *(void *)&__p[4] = "sendPduSessionLookupRequest_sync_block_invoke_4";
      __int16 v14 = 1024;
      int v15 = v2;
      __int16 v16 = 2080;
      uint64_t v17 = v11;
      __int16 v18 = 1024;
      int v19 = v12;
      _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "%s: WDS PduSessionLookup: failed to perform lookup: 0x%x (%s), tid %u", __p, 0x22u);
    }
    std::string::basic_string[abi:ne180100]<0>(__p, (char *)&unk_222543CCE);
    uint64_t v6 = *(void *)(a1 + 64);
    if (!v6) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 48))(v6, __p);
    if (SBYTE3(v17) < 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v7 = (unsigned __int16 *)*((void *)v4 + 53);
    if (v7 && *v7 == *(unsigned __int16 *)(a1 + 72))
    {
      unint64_t v8 = (std::__shared_weak_count *)*((void *)v4 + 54);
      *((void *)v4 + 53) = 0;
      *((void *)v4 + 54) = 0;
      if (v8) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
      QMIDataCommandDriver::processPendingLookupRequests_sync(v4);
    }
    else
    {
      uint64_t v9 = *((void *)v4 + 12);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        int v10 = *(unsigned __int16 *)(a1 + 72);
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = "sendPduSessionLookupRequest_sync_block_invoke";
        __int16 v14 = 1024;
        int v15 = v10;
        _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N %s: WDS PduSessionLookup: somebody cleaned pending transaction for tid %u", __p, 0x12u);
      }
    }
  }
}

void sub_2223E6B70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
}

uint64_t __copy_helper_block_e8_40c86_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c86_ZTSNSt3__18functionIFvRKNS_12basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

uint64_t QMIDataCommandDriver::sliceTrafficDescriptors_sync(QMIDataCommandDriver *this)
{
  return (uint64_t)this + 376;
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::sliceTrafficDescriptors_sync(QMIDataCommandDriver *this)
{
  return (uint64_t)this + 344;
}

uint64_t anonymous namespace'::processWdsTdInfoInd<wds::TdInfo::Indication,QMIDataCommandDriver::TrafficInfo,ctu::OsLogLogger *,QMIDataCommandDriver::handleWdsTdInfoInd_sync(wds::TdInfo::Indication const&)::$_0,QMIDataCommandDriver::handleWdsTdInfoInd_sync(wds::TdInfo::Indication const&)::$_1>(qmi::MessageBase *a1, uint64_t a2, NSObject ***a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v389 = *MEMORY[0x263EF8340];
  uint64_t v362 = 0;
  v363 = &v362;
  uint64_t v364 = 0x3002000000;
  v365 = __Block_byref_object_copy__633;
  v366 = __Block_byref_object_dispose__634;
  int v367 = 0;
  v361[0] = MEMORY[0x263EF8330];
  v361[1] = 0x40000000;
  v361[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke;
  v361[3] = &unk_26460BA70;
  v361[4] = &v362;
  *(void *)long long buf = v361;
  qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(a1, (uint64_t)buf);
  uint64_t v355 = 0;
  v356 = &v355;
  uint64_t v357 = 0x3002000000;
  v358 = __Block_byref_object_copy__637;
  v359 = __Block_byref_object_dispose__638;
  int v360 = 0;
  v354[0] = MEMORY[0x263EF8330];
  v354[1] = 0x40000000;
  v354[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_639;
  v354[3] = &unk_26460BA98;
  v354[4] = &v355;
  *(void *)long long buf = v354;
  qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(a1, (uint64_t)buf);
  v333 = (uint64_t *)a2;
  uint64_t v11 = *(void *)(a2 + 32);
  int v10 = (uint64_t ***)(a2 + 32);
  uint64_t v9 = v11;
  int v12 = (uint64_t **)(v10 - 1);
  unint64_t v13 = v363;
  if (!v11) {
    goto LABEL_12;
  }
  unsigned int v14 = *((unsigned __int16 *)v363 + 20);
  int v15 = v10;
  do
  {
    unsigned int v16 = *(unsigned __int16 *)(v9 + 32);
    BOOL v17 = v16 >= v14;
    if (v16 >= v14) {
      __int16 v18 = (uint64_t *)v9;
    }
    else {
      __int16 v18 = (uint64_t *)(v9 + 8);
    }
    if (v17) {
      int v15 = (uint64_t ***)v9;
    }
    uint64_t v9 = *v18;
  }
  while (*v18);
  if (v15 == v10 || v14 < *((unsigned __int16 *)v15 + 16))
  {
LABEL_12:
    int v19 = *((unsigned __int8 *)v363 + 42);
    if (!*((unsigned char *)v363 + 42))
    {
      uint64_t v26 = *v333;
      uint64_t v25 = v333[1];
      if (v25 != *v333)
      {
        do
          uint64_t v25 = MEMORY[0x223C99360](v25 - 304);
        while (v25 != v26);
        unint64_t v13 = v363;
      }
      v333[1] = v26;
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v12, *((_WORD *)v13 + 20));
      unint64_t v27 = *a3;
      if (*a3)
      {
        uint64_t v28 = *v27;
        if (os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
        {
          int v29 = *((unsigned __int16 *)v363 + 20);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v29;
          _os_log_impl(&dword_22231A000, v28, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, clearing all TDs (1)", buf, 0x12u);
        }
      }
      goto LABEL_78;
    }
    v337 = a4;
    int v20 = *((unsigned __int8 *)v363 + 43);
    if (*((unsigned char *)v363 + 43))
    {
      uint64_t v21 = (uint64_t **)(v10 - 1);
      unint64_t v22 = **a3;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *((unsigned __int16 *)v13 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v23;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v20;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v19;
        long long v24 = "#E  TdInfo transactionId: %u, wrong segment: %u of %u (4)";
LABEL_31:
        _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0x14u);
        unint64_t v13 = v363;
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    unint64_t v41 = v356;
    int v42 = *((unsigned __int16 *)v356 + 21);
    if (*((_WORD *)v356 + 21) || !*((_WORD *)v356 + 20))
    {
      uint64_t v21 = (uint64_t **)(v10 - 1);
      unint64_t v22 = **a3;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *((unsigned __int16 *)v13 + 20);
        int v44 = *((unsigned __int16 *)v41 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v43;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v42;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v44;
        long long v24 = "#E TdInfo transactionId: %u, wrong fragment: %u of %u (3)";
        goto LABEL_31;
      }
LABEL_32:
      unsigned __int16 v45 = *((_WORD *)v13 + 20);
      BOOL v46 = v21;
LABEL_77:
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v46, v45);
LABEL_78:
      uint64_t v94 = 1;
      goto LABEL_79;
    }
    v323 = (uint64_t **)(v10 - 1);
    uint64_t v57 = *a3;
    if (*a3)
    {
      long long v58 = *v57;
      if (os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
      {
        int v59 = *((unsigned __int16 *)v13 + 20);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v59;
        _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, starting a new transaction (2)", buf, 0x12u);
      }
    }
    v353 = 0;
    long long __dst = 0u;
    long long v352 = 0u;
    long long v377 = 0u;
    long long v378 = 0u;
    long long v375 = 0u;
    long long v376 = 0u;
    long long v373 = 0u;
    long long v374 = 0u;
    long long v371 = 0u;
    long long v372 = 0u;
    long long v369 = 0u;
    long long v370 = 0u;
    memset(buf, 0, sizeof(buf));
    v388 = (unint64_t *)&v353;
    long long v60 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(1uLL);
    long long v62 = &v60[24 * v61];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v60, (uint64_t)buf);
    uint64_t v64 = v63 + 192;
    int64x2_t v77 = vdupq_n_s64(0);
    *(void *)&long long v352 = v63;
    *(int64x2_t *)&v386[8] = v77;
    unint64_t v78 = (unint64_t)v353;
    v353 = v62;
    unint64_t v387 = v78;
    *(void *)v386 = v77.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)v386);
    *((void *)&v352 + 1) = v64;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
    uint64_t v79 = std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v323, *((_WORD *)v363 + 20), (_WORD *)v363 + 20);
    *(_OWORD *)(v79 + 40) = __dst;
    if (v79 + 40 != (char *)&__dst) {
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((uint64_t)(v79 + 56), v352, *((uint64_t *)&v352 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v352 + 1) - v352) >> 6));
    }
    *(void *)long long buf = &v352;
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    goto LABEL_62;
  }
  v337 = a4;
  int v30 = *((_DWORD *)v15 + 11);
  unsigned int v31 = *((unsigned __int8 *)v363 + 43);
  v323 = (uint64_t **)(v10 - 1);
  if (v30 == v31)
  {
    unsigned int v32 = *((_DWORD *)v15 + 13) + 1;
    if (v32 >= *((_DWORD *)v15 + 12))
    {
      uint64_t v65 = **a3;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        int v66 = *((unsigned __int16 *)v356 + 21);
        int v67 = *((unsigned __int16 *)v356 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v66;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v67;
        uint64_t v68 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (7)";
LABEL_55:
        uint64_t v73 = v65;
        uint32_t v74 = 20;
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v33 = v356;
      int v34 = *((unsigned __int16 *)v356 + 21);
      uint64_t v35 = *a3;
      if (v32 == v34)
      {
        if (v35)
        {
          os_log_t v36 = *v35;
          if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = *((unsigned __int16 *)v33 + 20);
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v14;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v32;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v37;
            uint64_t v38 = "#I %s: TdInfo transactionId: %u, adding a new fragment %u of %u (5)";
            long long v39 = v36;
            uint32_t v40 = 30;
LABEL_41:
            _os_log_impl(&dword_22231A000, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
            goto LABEL_62;
          }
        }
        goto LABEL_62;
      }
      uint64_t v65 = *v35;
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
      {
        int v75 = *((unsigned __int16 *)v33 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v34;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v75;
        uint64_t v68 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (6)";
        goto LABEL_55;
      }
    }
LABEL_57:
    unsigned __int16 v45 = *((_WORD *)v13 + 20);
LABEL_76:
    BOOL v46 = v323;
    goto LABEL_77;
  }
  int v47 = v30 + 1;
  if ((v30 + 1) >= *((_DWORD *)v15 + 10))
  {
    uint64_t v69 = **a3;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      int v70 = *((unsigned __int8 *)v13 + 42);
      int v71 = *((unsigned __int16 *)v356 + 21);
      int v72 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v70;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v71;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v72;
      uint64_t v68 = "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (10)";
      uint64_t v73 = v69;
      uint32_t v74 = 32;
LABEL_56:
      _os_log_impl(&dword_22231A000, v73, OS_LOG_TYPE_DEFAULT, v68, buf, v74);
      unint64_t v13 = v363;
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  uint64_t v48 = *a3;
  if (v47 != v31)
  {
    uint64_t v65 = *v48;
    if (os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
    {
      int v76 = *((unsigned __int8 *)v13 + 42);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v76;
      uint64_t v68 = "#E TdInfo transactionId: %u, wrong new TD %u of %u (9)";
      goto LABEL_55;
    }
    goto LABEL_57;
  }
  if (v48)
  {
    unint64_t v49 = *v48;
    if (os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *((unsigned __int8 *)v13 + 42);
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v31;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v50;
      _os_log_impl(&dword_22231A000, v49, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, adding a new TD %u of %u (8)", buf, 0x1Eu);
      unsigned int v31 = *((unsigned __int8 *)v363 + 43);
    }
  }
  long long v51 = v15[7];
  long long v52 = v15[8];
  __int16 v53 = (int64x2_t *)(v15 + 7);
  uint64_t v54 = ((char *)v52 - (char *)v51) >> 6;
  int v55 = -1431655765 * v54;
  if (0xAAAAAAAAAAAAAAABLL * v54 > v31)
  {
    long long v56 = **a3;
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v55;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v31;
    uint64_t v38 = "#E TdInfo: wrong td array state: size=%u, new td %u";
    long long v39 = v56;
    uint32_t v40 = 14;
    goto LABEL_41;
  }
  long long v377 = 0u;
  long long v378 = 0u;
  long long v375 = 0u;
  long long v376 = 0u;
  long long v373 = 0u;
  long long v374 = 0u;
  long long v371 = 0u;
  long long v372 = 0u;
  long long v369 = 0u;
  long long v370 = 0u;
  memset(buf, 0, sizeof(buf));
  std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(v53, (uint64_t)buf);
  QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
LABEL_62:
  uint64_t v80 = v363;
  uint64_t v81 = v333;
  if (!*v10) {
    goto LABEL_73;
  }
  unsigned int v82 = *((unsigned __int16 *)v363 + 20);
  int v83 = v10;
  int64_t v84 = *v10;
  do
  {
    unsigned int v85 = *((unsigned __int16 *)v84 + 16);
    BOOL v86 = v85 >= v82;
    if (v85 >= v82) {
      unint64_t v87 = (uint64_t ***)v84;
    }
    else {
      unint64_t v87 = (uint64_t ***)(v84 + 1);
    }
    if (v86) {
      int v83 = (uint64_t ***)v84;
    }
    int64_t v84 = *v87;
  }
  while (*v87);
  if (v83 == v10 || v82 < *((unsigned __int16 *)v83 + 16))
  {
LABEL_73:
    long long v88 = **a3;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      int v89 = *((unsigned __int16 *)v80 + 20);
      int v90 = *((unsigned __int8 *)v80 + 43);
      int v91 = *((unsigned __int8 *)v80 + 42);
      int v92 = *((unsigned __int16 *)v356 + 21);
      int v93 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v89;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v90;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v91;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v92;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v93;
      _os_log_impl(&dword_22231A000, v88, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (11)", buf, 0x20u);
      uint64_t v80 = v363;
    }
    unsigned __int16 v45 = *((_WORD *)v80 + 20);
    goto LABEL_76;
  }
  char v96 = std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(*v10, v82);
  uint64_t v97 = v96;
  uint64_t v98 = *((unsigned __int8 *)v363 + 43);
  *((_DWORD *)v96 + 1) = v98;
  if (!*(_DWORD *)v96) {
    *(_DWORD *)char v96 = *((unsigned __int8 *)v363 + 42);
  }
  *((_DWORD *)v96 + 3) = *((unsigned __int16 *)v356 + 21);
  *((_DWORD *)v96 + 2) = *((unsigned __int16 *)v356 + 20);
  if (0xAAAAAAAAAAAAAAABLL * ((v96[3] - v96[2]) >> 6) != v98 + 1)
  {
    v105 = **a3;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      int v106 = *((unsigned __int16 *)v363 + 20);
      int v107 = *((unsigned __int8 *)v363 + 43);
      int v108 = *((unsigned __int8 *)v363 + 42);
      int v109 = *((unsigned __int16 *)v356 + 21);
      int v110 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v106;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v107;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v108;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v109;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v110;
      _os_log_impl(&dword_22231A000, v105, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (12)", buf, 0x20u);
    }
    unsigned __int16 v45 = *((_WORD *)v363 + 20);
    goto LABEL_76;
  }
  *(void *)v386 = 0;
  *(void *)&v386[8] = v386;
  *(void *)&v386[16] = 0x2000000000;
  unint64_t v387 = 0;
  v350[0] = MEMORY[0x263EF8330];
  v350[1] = 0x40000000;
  v350[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_642;
  v350[3] = &unk_26460BAC0;
  v350[4] = v386;
  *(void *)long long buf = v350;
  qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(a1, buf);
  unint64_t v99 = *(void *)(*(void *)&v386[8] + 24);
  if (v99 >= 2)
  {
    v111 = **a3;
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      v112 = wds::asString(v99);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v112;
      _os_log_impl(&dword_22231A000, v111, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is about non-Internet traffic: %s", buf, 0xCu);
    }
LABEL_230:
    _Block_object_dispose(v386, 8);
    goto LABEL_232;
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4002000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__645;
  *(void *)&long long v369 = __Block_byref_object_dispose__646;
  *((void *)&v369 + 1) = 0;
  long long v370 = 0uLL;
  v349[0] = MEMORY[0x263EF8330];
  v349[1] = 0x40000000;
  v349[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_647;
  v349[3] = &unk_26460BAE8;
  v349[4] = buf;
  v342 = v349;
  qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v342);
  uint64_t v101 = *(void *)(*(void *)&buf[8] + 40);
  uint64_t v100 = *(void *)(*(void *)&buf[8] + 48);
  if (v101 != v100)
  {
    while (((*(uint64_t (**)(void, void, uint64_t))(**(void **)a5 + 64))(*(void *)a5, a5[4], v101) & 1) == 0)
    {
      v101 += 24;
      if (v101 == v100)
      {
        char v102 = **a3;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst) = 0;
          _os_log_impl(&dword_22231A000, v102, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for the corporate DNN", (uint8_t *)&__dst, 2u);
        }
        int v103 = 0;
        int v104 = 47;
        goto LABEL_96;
      }
    }
  }
  int v104 = 0;
  int v103 = 1;
LABEL_96:
  _Block_object_dispose(buf, 8);
  *(void *)&long long __dst = (char *)&v369 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (!v103) {
    goto LABEL_231;
  }
  unsigned int v336 = *((_DWORD *)v97 + 1);
  v335 = (CSIPacketAddress *)v97[2];
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4002000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__649;
  *(void *)&long long v369 = __Block_byref_object_dispose__650;
  *((void *)&v369 + 1) = 0;
  long long v370 = 0uLL;
  v348[0] = MEMORY[0x263EF8330];
  v348[1] = 0x40000000;
  v348[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_651;
  v348[3] = &unk_26460BB10;
  v348[4] = buf;
  v342 = v348;
  qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(a1, (uint64_t)&v342);
  uint64_t v114 = *(void *)(*(void *)&buf[8] + 40);
  uint64_t v113 = *(void *)(*(void *)&buf[8] + 48);
  if (v114 == v113)
  {
    int v104 = 0;
    int v115 = 1;
    uint64_t v81 = v333;
    goto LABEL_123;
  }
  LOBYTE(v115) = 0;
  uint64_t v116 = (char *)v335 + 192 * v336;
  v117 = (std::string **)(v116 + 32);
  uint64_t v118 = (uint64_t *)(v116 + 24);
  uint64_t v119 = v116 + 40;
  do
  {
    while (1)
    {
      uint64_t v120 = *(unsigned char **)(v114 + 24);
      __int16 v121 = *(unsigned char **)(v114 + 32);
      if (v120 == v121) {
        goto LABEL_102;
      }
      if (*(unsigned char *)v114) {
        break;
      }
LABEL_105:
      long long __dst = 0uLL;
      *(void *)&long long v352 = 0;
      if (v121 == v120) {
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::basic_string[abi:ne180100](&__dst, v120, v121 - v120);
      v122 = *v117;
      if ((unint64_t)*v117 >= *v119)
      {
        uint64_t v124 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v118, &__dst);
      }
      else
      {
        if (SBYTE7(v352) < 0)
        {
          std::string::__init_copy_ctor_external(*v117, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
        }
        else
        {
          long long v123 = __dst;
          v122->__r_.__value_.__r.__words[2] = v352;
          *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
        }
        uint64_t v124 = (uint64_t)&v122[1];
        void *v117 = v122 + 1;
      }
      void *v117 = (std::string *)v124;
      if (SBYTE7(v352) < 0) {
        operator delete((void *)__dst);
      }
      v114 += 48;
      int v115 = 1;
      if (v114 == v113)
      {
        int v104 = 0;
LABEL_118:
        uint64_t v81 = v333;
        goto LABEL_123;
      }
    }
    if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)v337 + 48))(*(void *)v337, v337[4], v114 + 1))
    {
      uint64_t v120 = *(unsigned char **)(v114 + 24);
      __int16 v121 = *(unsigned char **)(v114 + 32);
      goto LABEL_105;
    }
LABEL_102:
    v114 += 48;
  }
  while (v114 != v113);
  if (v115)
  {
    int v104 = 0;
    int v115 = 1;
    goto LABEL_118;
  }
  v125 = **a3;
  uint64_t v81 = v333;
  if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_22231A000, v125, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for iOS apps", (uint8_t *)&__dst, 2u);
  }
  int v115 = 0;
  int v104 = 47;
LABEL_123:
  _Block_object_dispose(buf, 8);
  *(void *)&long long __dst = (char *)&v369 + 8;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (v115)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__645;
    *(void *)&long long v369 = __Block_byref_object_dispose__646;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v347[0] = MEMORY[0x263EF8330];
    v347[1] = 0x40000000;
    v347[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_653;
    v347[3] = &unk_26460BB38;
    v347[4] = buf;
    v342 = v347;
    qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v342);
    uint64_t v127 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v126 = *(void *)(*(void *)&buf[8] + 48);
    if (v127 != v126)
    {
      uint64_t v128 = (uint64_t *)((char *)v335 + 192 * v336);
      do
      {
        if (*(char *)(v127 + 23) < 0) {
          uint64_t v129 = *(void *)(v127 + 8);
        }
        else {
          uint64_t v129 = *(unsigned __int8 *)(v127 + 23);
        }
        if (v129)
        {
          unint64_t v130 = v128[1];
          if (v130 >= v128[2])
          {
            uint64_t v131 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v128, (long long *)v127);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v128, (long long *)v127);
            uint64_t v131 = v130 + 24;
          }
          v128[1] = v131;
        }
        v127 += 24;
      }
      while (v127 != v126);
    }
    _Block_object_dispose(buf, 8);
    *(void *)&long long __dst = (char *)&v369 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__655;
    *(void *)&long long v369 = __Block_byref_object_dispose__656;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v346[0] = MEMORY[0x263EF8330];
    v346[1] = 0x40000000;
    v346[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_657;
    v346[3] = &unk_26460BB60;
    v346[4] = buf;
    v342 = v346;
    qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(a1, (uint64_t)&v342);
    uint64_t v133 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v132 = *(void *)(*(void *)&buf[8] + 48);
    if (v133 != v132)
    {
      v134 = (uint64_t *)((char *)v335 + 192 * v336);
      char v135 = v134 + 6;
      uint64_t v136 = v134 + 7;
      uint64_t v137 = v134 + 8;
      do
      {
        if (*(char *)(v133 + 23) < 0) {
          uint64_t v138 = *(void *)(v133 + 8);
        }
        else {
          uint64_t v138 = *(unsigned __int8 *)(v133 + 23);
        }
        if (v138)
        {
          uint64_t v139 = *v136;
          if ((unint64_t)*v136 >= *v137)
          {
            uint64_t v140 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v135, (long long *)v133);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v135, (long long *)v133);
            uint64_t v140 = v139 + 24;
          }
          *uint64_t v136 = v140;
        }
        v133 += 24;
      }
      while (v133 != v132);
    }
    _Block_object_dispose(buf, 8);
    *(void *)&long long __dst = (char *)&v369 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__659;
    *(void *)&long long v369 = __Block_byref_object_dispose__660;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v345[0] = MEMORY[0x263EF8330];
    v345[1] = 0x40000000;
    v345[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_661;
    v345[3] = &unk_26460BB88;
    v345[4] = buf;
    *(void *)&long long __dst = v345;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(a1, (uint64_t)&__dst);
    uint64_t v141 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v142 = *(void *)(*(void *)&buf[8] + 48);
    if (v141 != v142)
    {
      v143 = (char *)v335 + 192 * v336;
      v144 = (CSIPacketAddress **)(v143 + 80);
      uint64_t v145 = (uint64_t)(v143 + 72);
      long long v146 = v143 + 88;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&__dst);
        if (*(_DWORD *)(v141 + 4))
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v342);
          CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&v342);
          CSIPacketAddress::maskToPrefix((CSIPacketAddress *)&v342);
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        long long v147 = *v144;
        if ((unint64_t)*v144 >= *v146)
        {
          uint64_t v148 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v145, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v144, (const CSIPacketAddress *)&__dst);
          uint64_t v148 = (uint64_t)v147 + 24;
          void *v144 = (CSIPacketAddress *)((char *)v147 + 24);
        }
        void *v144 = (CSIPacketAddress *)v148;
        v141 += 8;
      }
      while (v141 != v142);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__663;
    *(void *)&long long v369 = __Block_byref_object_dispose__664;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v341[0] = MEMORY[0x263EF8330];
    v341[1] = 0x40000000;
    v341[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_665;
    v341[3] = &unk_26460BBB0;
    v341[4] = buf;
    *(void *)&long long __dst = v341;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(a1, (uint64_t)&__dst);
    uint64_t v150 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v149 = *(void *)(*(void *)&buf[8] + 48);
    if (v150 != v149)
    {
      xpc_object_t v151 = (char *)v335 + 192 * v336;
      v152 = (CSIPacketAddress **)(v151 + 80);
      uint64_t v153 = (uint64_t)(v151 + 72);
      long long v154 = v151 + 88;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv6Address((CSIPacketAddress *)&__dst, (const unsigned __int8 *)v150);
        if (*(char *)(v150 + 16) >= 1) {
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        long long v155 = *v152;
        if ((unint64_t)*v152 >= *v154)
        {
          uint64_t v156 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v153, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v152, (const CSIPacketAddress *)&__dst);
          uint64_t v156 = (uint64_t)v155 + 24;
          *v152 = (CSIPacketAddress *)((char *)v155 + 24);
        }
        *v152 = (CSIPacketAddress *)v156;
        v150 += 17;
      }
      while (v150 != v149);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__667;
    *(void *)&long long v369 = __Block_byref_object_dispose__668;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v340[0] = MEMORY[0x263EF8330];
    v340[1] = 0x40000000;
    v340[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_669;
    v340[3] = &unk_26460BBD8;
    v340[4] = buf;
    *(void *)&long long __dst = v340;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(a1, (uint64_t)&__dst);
    long long v157 = *(__int16 **)(*(void *)&buf[8] + 40);
    long long v158 = *(__int16 **)(*(void *)&buf[8] + 48);
    if (v157 != v158)
    {
      long long v159 = (char *)v335 + 192 * v336;
      long long v160 = (void **)(v159 + 96);
      long long v161 = (char **)(v159 + 104);
      long long v162 = v159 + 112;
      do
      {
        __int16 v163 = *v157;
        if (*v157)
        {
          long long v164 = *v161;
          if ((unint64_t)*v161 >= *v162)
          {
            long long v166 = (char *)*v160;
            uint64_t v167 = v164 - (unsigned char *)*v160;
            if (v167 <= -3) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v168 = v167 >> 1;
            unint64_t v169 = *v162 - (void)v166;
            if (v169 <= (v167 >> 1) + 1) {
              uint64_t v170 = v168 + 1;
            }
            else {
              uint64_t v170 = *v162 - (void)v166;
            }
            if (v169 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v171 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v171 = v170;
            }
            if (v171)
            {
              v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v162, v171);
              long long v164 = *v161;
              long long v166 = (char *)*v160;
              __int16 v163 = *v157;
            }
            else
            {
              v172 = 0;
            }
            uint64_t v173 = &v172[2 * v168];
            *(_WORD *)uint64_t v173 = v163;
            long long v165 = v173 + 2;
            while (v164 != v166)
            {
              __int16 v174 = *((_WORD *)v164 - 1);
              v164 -= 2;
              *((_WORD *)v173 - 1) = v174;
              v173 -= 2;
            }
            *long long v160 = v173;
            *long long v161 = v165;
            *long long v162 = &v172[2 * v171];
            if (v166) {
              operator delete(v166);
            }
          }
          else
          {
            *(_WORD *)long long v164 = v163;
            long long v165 = v164 + 2;
          }
          *long long v161 = v165;
        }
        ++v157;
      }
      while (v157 != v158);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__671;
    *(void *)&long long v369 = __Block_byref_object_dispose__672;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v339[0] = MEMORY[0x263EF8330];
    v339[1] = 0x40000000;
    v339[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_673;
    v339[3] = &unk_26460BC00;
    v339[4] = buf;
    *(void *)&long long __dst = v339;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(a1, (uint64_t)&__dst);
    char v175 = *(_WORD **)(*(void *)&buf[8] + 40);
    uint64_t v176 = *(_WORD **)(*(void *)&buf[8] + 48);
    if (v175 != v176)
    {
      uint64_t v177 = (char *)v335 + 192 * v336;
      char v180 = (char *)*((void *)v177 + 16);
      v178 = (void **)(v177 + 128);
      v179 = v180;
      uint64_t v181 = v178 - 1;
      uint64_t v182 = v178 + 1;
      do
      {
        if ((unint64_t)v179 >= *v182)
        {
          uint64_t v183 = (v179 - (unsigned char *)*v181) >> 2;
          if ((unint64_t)(v183 + 1) >> 62) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v184 = *v182 - (void)*v181;
          uint64_t v185 = v184 >> 1;
          if (v184 >> 1 <= (unint64_t)(v183 + 1)) {
            uint64_t v185 = v183 + 1;
          }
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v186 = v185;
          }
          uint64_t v187 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v178 + 1), v186);
          v189 = &v187[4 * v183];
          *(_WORD *)v189 = *v175;
          *((_WORD *)v189 + 1) = v175[1];
          v190 = (char *)*v178;
          int v191 = (char *)*v181;
          uint64_t v192 = v189;
          if (*v178 != *v181)
          {
            do
            {
              int v193 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *((_DWORD *)v192 - 1) = v193;
              v192 -= 4;
            }
            while (v190 != v191);
            v190 = (char *)*v181;
          }
          *uint64_t v181 = v192;
          v179 = v189 + 4;
          *v178 = v189 + 4;
          *uint64_t v182 = &v187[4 * v188];
          if (v190) {
            operator delete(v190);
          }
        }
        else
        {
          *(_WORD *)v179 = *v175;
          *((_WORD *)v179 + 1) = v175[1];
          v179 += 4;
        }
        *v178 = v179;
        v175 += 2;
      }
      while (v175 != v176);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__675;
    *(void *)&long long v369 = __Block_byref_object_dispose__676;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v338[0] = MEMORY[0x263EF8330];
    v338[1] = 0x40000000;
    v338[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_677;
    v338[3] = &unk_26460BC28;
    v338[4] = buf;
    *(void *)&long long __dst = v338;
    qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(a1, (uint64_t)&__dst);
    uint64_t v81 = v333;
    v194 = *(unsigned __int8 **)(*(void *)&buf[8] + 40);
    v195 = *(unsigned __int8 **)(*(void *)&buf[8] + 48);
    if (v194 != v195)
    {
      int v196 = (char *)v335 + 192 * v336;
      v199 = (char *)*((void *)v196 + 19);
      uint64_t v198 = (_WORD **)(v196 + 152);
      uint64_t v197 = v199;
      v200 = (void **)(v198 - 1);
      v201 = v198 + 1;
      do
      {
        if ((unint64_t)v197 >= *v201)
        {
          uint64_t v203 = (char *)*v200;
          uint64_t v204 = v197 - (unsigned char *)*v200;
          if (v204 <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v205 = v204 >> 1;
          unint64_t v206 = *v201 - (void)v203;
          if (v206 <= (v204 >> 1) + 1) {
            uint64_t v207 = v205 + 1;
          }
          else {
            uint64_t v207 = *v201 - (void)v203;
          }
          if (v206 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v208 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v208 = v207;
          }
          if (v208)
          {
            uint64_t v209 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v198 + 1), v208);
            uint64_t v197 = (char *)*v198;
            uint64_t v203 = (char *)*v200;
          }
          else
          {
            uint64_t v209 = 0;
          }
          long long v210 = &v209[2 * v205];
          *(_WORD *)long long v210 = *v194;
          uint64_t v202 = v210 + 2;
          while (v197 != v203)
          {
            __int16 v211 = *((_WORD *)v197 - 1);
            v197 -= 2;
            *((_WORD *)v210 - 1) = v211;
            v210 -= 2;
          }
          void *v200 = v210;
          *uint64_t v198 = v202;
          void *v201 = &v209[2 * v208];
          if (v203) {
            operator delete(v203);
          }
        }
        else
        {
          *(_WORD *)uint64_t v197 = *v194;
          uint64_t v202 = v197 + 2;
        }
        *uint64_t v198 = v202;
        ++v194;
        uint64_t v197 = (char *)v202;
        uint64_t v81 = v333;
      }
      while (v194 != v195);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    goto LABEL_230;
  }
LABEL_231:
  _Block_object_dispose(v386, 8);
  if (v104 != 47) {
    goto LABEL_78;
  }
LABEL_232:
  std::string v212 = v363;
  if (*((unsigned __int8 *)v363 + 42) - 1 == *((unsigned __int8 *)v363 + 43)
    && *((unsigned __int16 *)v356 + 20) - 1 == *((unsigned __int16 *)v356 + 21))
  {
    std::string v213 = *a3;
    if (*a3)
    {
      long long v214 = *v213;
      if (os_log_type_enabled(*v213, OS_LOG_TYPE_DEFAULT))
      {
        int v215 = *((unsigned __int16 *)v212 + 20);
        int v216 = -1431655765 * ((unint64_t)(v97[3] - v97[2]) >> 6);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v215;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v216;
        _os_log_impl(&dword_22231A000, v214, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13), transactionInfo.tds.size()=%u", buf, 0x18u);
      }
    }
    uint64_t v218 = *v81;
    for (uint64_t i = v81[1]; i != v218; uint64_t i = MEMORY[0x223C99360](i - 304))
      ;
    v81[1] = v218;
    uint64_t v322 = v97[2];
    uint64_t v320 = v97[3];
    if (v322 != v320)
    {
      v321 = v81 + 2;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        MEMORY[0x223C99350](buf);
        uint64_t v219 = *((void *)&__dst + 1);
        if (*((void *)&__dst + 1) >= (unint64_t)v352)
        {
          uint64_t v220 = std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>((uint64_t *)&__dst, (uint64_t)buf);
        }
        else
        {
          MEMORY[0x223C99330](*((void *)&__dst + 1), buf);
          uint64_t v220 = v219 + 304;
        }
        *((void *)&__dst + 1) = v220;
        MEMORY[0x223C99360](buf);
        v221 = *(const std::string **)(v322 + 24);
        v324 = *(const std::string **)(v322 + 32);
        if (v221 != v324)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v222 = *((void *)&__dst + 1);
            for (uint64_t j = __dst; j != v222; j += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, j);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v370, v221);
              unint64_t v224 = v343;
              if (v343 >= v344)
              {
                unint64_t v226 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v227 = v226 + 1;
                if (v226 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v227) {
                  unint64_t v227 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v228 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v228 = v227;
                }
                v388 = &v344;
                if (v228) {
                  unint64_t v228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v228);
                }
                else {
                  uint64_t v229 = 0;
                }
                *(void *)v386 = v228;
                *(void *)&v386[8] = v228 + 304 * v226;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v228 + 304 * v229;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v225 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v225 = v224 + 304;
              }
              unint64_t v343 = v225;
              MEMORY[0x223C99360](buf);
            }
            ++v221;
          }
          while (v221 != v324);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v230 = *(const std::string **)(v322 + 48);
        v325 = *(const std::string **)(v322 + 56);
        if (v230 != v325)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v231 = *((void *)&__dst + 1);
            for (uint64_t k = __dst; k != v231; k += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, k);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)((char *)&v376 + 8), v230);
              unint64_t v233 = v343;
              if (v343 >= v344)
              {
                unint64_t v235 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v236 = v235 + 1;
                if (v235 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v236) {
                  unint64_t v236 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v237 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v237 = v236;
                }
                v388 = &v344;
                if (v237) {
                  unint64_t v237 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v237);
                }
                else {
                  uint64_t v238 = 0;
                }
                *(void *)v386 = v237;
                *(void *)&v386[8] = v237 + 304 * v235;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v237 + 304 * v238;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v234 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v234 = v233 + 304;
              }
              unint64_t v343 = v234;
              MEMORY[0x223C99360](buf);
            }
            ++v230;
          }
          while (v230 != v325);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v239 = *(const CSIPacketAddress **)(v322 + 72);
        v326 = *(const CSIPacketAddress **)(v322 + 80);
        if (v239 != v326)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v240 = *((void *)&__dst + 1);
            for (uint64_t m = __dst; m != v240; m += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, m);
              std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>((CSIPacketAddress *)((char *)&v378 + 8), v239);
              unint64_t v242 = v343;
              if (v343 >= v344)
              {
                unint64_t v244 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v245 = v244 + 1;
                if (v244 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v245) {
                  unint64_t v245 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v246 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v246 = v245;
                }
                v388 = &v344;
                if (v246) {
                  unint64_t v246 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v246);
                }
                else {
                  uint64_t v247 = 0;
                }
                *(void *)v386 = v246;
                *(void *)&v386[8] = v246 + 304 * v244;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v246 + 304 * v247;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v243 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v243 = v242 + 304;
              }
              unint64_t v343 = v243;
              MEMORY[0x223C99360](buf);
            }
            v239 = (const CSIPacketAddress *)((char *)v239 + 24);
          }
          while (v239 != v326);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v248 = *(_WORD **)(v322 + 96);
        v327 = *(_WORD **)(v322 + 104);
        if (v248 != v327)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v249 = *((void *)&__dst + 1);
            for (uint64_t n = __dst; n != v249; n += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, n);
              WORD2(v380) = *v248;
              BYTE6(v380) = 1;
              unint64_t v251 = v343;
              if (v343 >= v344)
              {
                unint64_t v253 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v254 = v253 + 1;
                if (v253 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v254) {
                  unint64_t v254 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v255 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v255 = v254;
                }
                v388 = &v344;
                if (v255) {
                  unint64_t v255 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v255);
                }
                else {
                  uint64_t v256 = 0;
                }
                *(void *)v386 = v255;
                *(void *)&v386[8] = v255 + 304 * v253;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v255 + 304 * v256;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v252 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v252 = v251 + 304;
              }
              unint64_t v343 = v252;
              MEMORY[0x223C99360](buf);
            }
            ++v248;
          }
          while (v248 != v327);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v257 = *(_DWORD **)(v322 + 120);
        v328 = *(_DWORD **)(v322 + 128);
        if (v257 != v328)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v258 = *((void *)&__dst + 1);
            for (iuint64_t i = __dst; ii != v258; ii += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, ii);
              DWORD2(v380) = *v257;
              if (!BYTE12(v380)) {
                BYTE12(v380) = 1;
              }
              unint64_t v260 = v343;
              if (v343 >= v344)
              {
                unint64_t v262 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v263 = v262 + 1;
                if (v262 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v263) {
                  unint64_t v263 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v264 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v264 = v263;
                }
                v388 = &v344;
                if (v264) {
                  unint64_t v264 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v264);
                }
                else {
                  uint64_t v265 = 0;
                }
                *(void *)v386 = v264;
                *(void *)&v386[8] = v264 + 304 * v262;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v264 + 304 * v265;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v261 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v261 = v260 + 304;
              }
              unint64_t v343 = v261;
              MEMORY[0x223C99360](buf);
            }
            ++v257;
          }
          while (v257 != v328);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v266 = *(_WORD **)(v322 + 144);
        v329 = *(_WORD **)(v322 + 152);
        if (v266 != v329)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v267 = *((void *)&__dst + 1);
            for (juint64_t j = __dst; jj != v267; jj += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, jj);
              HIWORD(v380) = *v266;
              LOBYTE(v381) = 1;
              unint64_t v269 = v343;
              if (v343 >= v344)
              {
                unint64_t v271 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v272 = v271 + 1;
                if (v271 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v272) {
                  unint64_t v272 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v273 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v273 = v272;
                }
                v388 = &v344;
                if (v273) {
                  unint64_t v273 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v273);
                }
                else {
                  uint64_t v274 = 0;
                }
                *(void *)v386 = v273;
                *(void *)&v386[8] = v273 + 304 * v271;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v273 + 304 * v274;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v270 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v270 = v269 + 304;
              }
              unint64_t v343 = v270;
              MEMORY[0x223C99360](buf);
            }
            ++v266;
          }
          while (v266 != v329);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v275 = *(uint64_t **)(v322 + 168);
        v330 = *(uint64_t **)(v322 + 176);
        if (v275 != v330)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v276 = *((void *)&__dst + 1);
            for (kuint64_t k = __dst; kk != v276; kk += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, kk);
              uint64_t v278 = *v275;
              if (!BYTE8(v381)) {
                BYTE8(v381) = 1;
              }
              DWORD1(v381) = v278;
              unint64_t v279 = v343;
              if (v343 >= v344)
              {
                unint64_t v281 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v282 = v281 + 1;
                if (v281 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v282) {
                  unint64_t v282 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v283 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v283 = v282;
                }
                v388 = &v344;
                if (v283) {
                  unint64_t v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v283);
                }
                else {
                  uint64_t v284 = 0;
                }
                *(void *)v386 = v283;
                *(void *)&v386[8] = v283 + 304 * v281;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v283 + 304 * v284;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v280 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v280 = v279 + 304;
              }
              unint64_t v343 = v280;
              MEMORY[0x223C99360](buf);
            }
            ++v275;
          }
          while (v275 != v330);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        if (*(void *)v322 != *(void *)(v322 + 8))
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          v285 = *(const std::string **)v322;
          v331 = *(const std::string **)(v322 + 8);
          if (*(const std::string **)v322 == v331)
          {
            uint64_t v295 = 0;
            uint64_t v294 = 0;
          }
          else
          {
            do
            {
              uint64_t v286 = *((void *)&__dst + 1);
              for (muint64_t m = __dst; mm != v286; mm += 304)
              {
                long long v384 = 0u;
                long long v385 = 0u;
                long long v382 = 0u;
                long long v383 = 0u;
                long long v380 = 0u;
                long long v381 = 0u;
                long long v378 = 0u;
                long long v379 = 0u;
                long long v376 = 0u;
                long long v377 = 0u;
                long long v374 = 0u;
                long long v375 = 0u;
                long long v372 = 0u;
                long long v373 = 0u;
                long long v370 = 0u;
                long long v371 = 0u;
                long long v369 = 0u;
                memset(buf, 0, sizeof(buf));
                MEMORY[0x223C99340](buf, mm);
                std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v382, v285);
                unint64_t v288 = v343;
                if (v343 >= v344)
                {
                  unint64_t v290 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                  unint64_t v291 = v290 + 1;
                  if (v290 + 1 > 0xD79435E50D7943) {
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  }
                  if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v291) {
                    unint64_t v291 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                  }
                  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                    unint64_t v292 = 0xD79435E50D7943;
                  }
                  else {
                    unint64_t v292 = v291;
                  }
                  v388 = &v344;
                  if (v292) {
                    unint64_t v292 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v292);
                  }
                  else {
                    uint64_t v293 = 0;
                  }
                  *(void *)v386 = v292;
                  *(void *)&v386[8] = v292 + 304 * v290;
                  *(void *)&v386[16] = *(void *)&v386[8];
                  unint64_t v387 = v292 + 304 * v293;
                  MEMORY[0x223C99340](*(void *)&v386[8], buf);
                  *(void *)&v386[16] += 304;
                  std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                  unint64_t v289 = v343;
                  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
                }
                else
                {
                  MEMORY[0x223C99340](v343, buf);
                  unint64_t v289 = v288 + 304;
                }
                unint64_t v343 = v289;
                MEMORY[0x223C99360](buf);
              }
              ++v285;
            }
            while (v285 != v331);
            uint64_t v294 = (uint64_t)v342;
            uint64_t v295 = v343;
          }
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, v294, v295, 0x86BCA1AF286BCA1BLL * ((v295 - v294) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v296 = *a3;
        if (*a3)
        {
          v297 = *v296;
          if (os_log_type_enabled(*v296, OS_LOG_TYPE_DEFAULT))
          {
            int v298 = *((unsigned __int16 *)v363 + 20);
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v298;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 678152731 * ((*((void *)&__dst + 1) - (void)__dst) >> 4);
            _os_log_impl(&dword_22231A000, v297, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.1), newTds.size()=%u", buf, 0x18u);
          }
        }
        v299 = (TrafficDescriptor *)*((void *)&__dst + 1);
        v332 = (TrafficDescriptor *)*((void *)&__dst + 1);
        for (nuint64_t n = (TrafficDescriptor *)__dst; nn != v299; nuint64_t n = (TrafficDescriptor *)((char *)nn + 304))
        {
          v301 = *a3;
          if (*a3)
          {
            v302 = *v301;
            if (os_log_type_enabled(*v301, OS_LOG_TYPE_DEFAULT))
            {
              TrafficDescriptor::toString((uint64_t *)buf, nn);
              v303 = buf;
              if ((buf[23] & 0x80u) != 0) {
                v303 = *(uint8_t **)buf;
              }
              *(_DWORD *)v386 = 136315394;
              *(void *)&v386[4] = "processWdsTdInfoInd";
              *(_WORD *)&v386[12] = 2082;
              *(void *)&v386[14] = v303;
              _os_log_impl(&dword_22231A000, v302, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo newTd: %{public}s", v386, 0x16u);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          if ((TrafficDescriptor::empty(nn) & 1) == 0)
          {
            unint64_t v305 = v333[1];
            unint64_t v304 = v333[2];
            if (v305 >= v304)
            {
              unint64_t v308 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v305 - *v333) >> 4);
              unint64_t v309 = v308 + 1;
              if (v308 + 1 > 0xD79435E50D7943) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v310 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v304 - *v333) >> 4);
              if (2 * v310 > v309) {
                unint64_t v309 = 2 * v310;
              }
              if (v310 >= 0x6BCA1AF286BCA1) {
                unint64_t v311 = 0xD79435E50D7943;
              }
              else {
                unint64_t v311 = v309;
              }
              *(void *)&long long v369 = v321;
              if (v311) {
                unint64_t v311 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v311);
              }
              else {
                uint64_t v312 = 0;
              }
              *(void *)long long buf = v311;
              *(void *)&uint8_t buf[8] = v311 + 304 * v308;
              *(void *)&uint8_t buf[16] = *(void *)&buf[8];
              *(void *)&unsigned char buf[24] = v311 + 304 * v312;
              MEMORY[0x223C99340](*(void *)&buf[8], nn);
              v307 = v333;
              *(void *)&buf[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer(v333, buf);
              uint64_t v306 = v333[1];
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              MEMORY[0x223C99340](v333[1], nn);
              uint64_t v306 = v305 + 304;
              v307 = v333;
              v333[1] = v306;
            }
            v307[1] = v306;
          }
          v299 = v332;
        }
        *(void *)long long buf = &__dst;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v322 += 192;
        uint64_t v81 = v333;
      }
      while (v322 != v320);
    }
    v313 = *a3;
    if (*a3)
    {
      v314 = *v313;
      if (os_log_type_enabled(*v313, OS_LOG_TYPE_DEFAULT))
      {
        int v315 = *((unsigned __int16 *)v363 + 20);
        int v316 = 678152731 * ((unint64_t)(v81[1] - *v81) >> 4);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v315;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v316;
        _os_log_impl(&dword_22231A000, v314, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.2), trafficInfo.trafficDescriptors.size()=%u", buf, 0x18u);
      }
    }
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v323, *((_WORD *)v363 + 20));
    uint64_t v94 = 1;
  }
  else
  {
    uint64_t v94 = 0;
  }
  v317 = *a3;
  if (*a3)
  {
    v318 = *v317;
    if (os_log_type_enabled(*v317, OS_LOG_TYPE_DEFAULT))
    {
      int v319 = *((unsigned __int16 *)v363 + 20);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v319;
      _os_log_impl(&dword_22231A000, v318, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u (14)", buf, 0x12u);
    }
  }
LABEL_79:
  _Block_object_dispose(&v355, 8);
  _Block_object_dispose(&v362, 8);
  return v94;
}

void sub_2223E96A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20 = v21;
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  _Block_object_dispose(&STACK[0x300], 8);
  STACK[0x220] = a20;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Block_object_dispose((const void *)(v22 - 160), 8);
  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Unwind_Resume(a1);
}

uint64_t anonymous namespace'::processWdsTdInfoInd<wds::RouteInfo::Indication,QMIDataCommandDriver::TrafficInfo,ctu::OsLogLogger *,QMIDataCommandDriver::handleWdsRouteInfoInd_sync(wds::RouteInfo::Indication const&)::$_0,QMIDataCommandDriver::handleWdsRouteInfoInd_sync(wds::RouteInfo::Indication const&)::$_1>(qmi::MessageBase *a1, uint64_t a2, NSObject ***a3, unsigned int *a4, unsigned int *a5)
{
  uint64_t v389 = *MEMORY[0x263EF8340];
  uint64_t v362 = 0;
  v363 = &v362;
  uint64_t v364 = 0x3002000000;
  v365 = __Block_byref_object_copy__633;
  v366 = __Block_byref_object_dispose__634;
  int v367 = 0;
  v361[0] = MEMORY[0x263EF8330];
  v361[1] = 0x40000000;
  v361[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke;
  v361[3] = &unk_26460BC50;
  v361[4] = &v362;
  *(void *)long long buf = v361;
  qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(a1, (uint64_t)buf);
  uint64_t v355 = 0;
  v356 = &v355;
  uint64_t v357 = 0x3002000000;
  v358 = __Block_byref_object_copy__637;
  v359 = __Block_byref_object_dispose__638;
  int v360 = 0;
  v354[0] = MEMORY[0x263EF8330];
  v354[1] = 0x40000000;
  v354[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2;
  v354[3] = &unk_26460BC78;
  v354[4] = &v355;
  *(void *)long long buf = v354;
  qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(a1, (uint64_t)buf);
  v333 = (uint64_t *)a2;
  uint64_t v11 = *(void *)(a2 + 32);
  int v10 = (uint64_t ***)(a2 + 32);
  uint64_t v9 = v11;
  int v12 = (uint64_t **)(v10 - 1);
  unint64_t v13 = v363;
  if (!v11) {
    goto LABEL_12;
  }
  unsigned int v14 = *((unsigned __int16 *)v363 + 20);
  int v15 = v10;
  do
  {
    unsigned int v16 = *(unsigned __int16 *)(v9 + 32);
    BOOL v17 = v16 >= v14;
    if (v16 >= v14) {
      __int16 v18 = (uint64_t *)v9;
    }
    else {
      __int16 v18 = (uint64_t *)(v9 + 8);
    }
    if (v17) {
      int v15 = (uint64_t ***)v9;
    }
    uint64_t v9 = *v18;
  }
  while (*v18);
  if (v15 == v10 || v14 < *((unsigned __int16 *)v15 + 16))
  {
LABEL_12:
    int v19 = *((unsigned __int8 *)v363 + 42);
    if (!*((unsigned char *)v363 + 42))
    {
      uint64_t v26 = *v333;
      uint64_t v25 = v333[1];
      if (v25 != *v333)
      {
        do
          uint64_t v25 = MEMORY[0x223C99360](v25 - 304);
        while (v25 != v26);
        unint64_t v13 = v363;
      }
      v333[1] = v26;
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v12, *((_WORD *)v13 + 20));
      unint64_t v27 = *a3;
      if (*a3)
      {
        uint64_t v28 = *v27;
        if (os_log_type_enabled(*v27, OS_LOG_TYPE_DEFAULT))
        {
          int v29 = *((unsigned __int16 *)v363 + 20);
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v29;
          _os_log_impl(&dword_22231A000, v28, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, clearing all TDs (1)", buf, 0x12u);
        }
      }
      goto LABEL_78;
    }
    v337 = a4;
    int v20 = *((unsigned __int8 *)v363 + 43);
    if (*((unsigned char *)v363 + 43))
    {
      uint64_t v21 = (uint64_t **)(v10 - 1);
      uint64_t v22 = **a3;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v23 = *((unsigned __int16 *)v13 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v23;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v20;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v19;
        long long v24 = "#E  TdInfo transactionId: %u, wrong segment: %u of %u (4)";
LABEL_31:
        _os_log_impl(&dword_22231A000, v22, OS_LOG_TYPE_DEFAULT, v24, buf, 0x14u);
        unint64_t v13 = v363;
        goto LABEL_32;
      }
      goto LABEL_32;
    }
    unint64_t v41 = v356;
    int v42 = *((unsigned __int16 *)v356 + 21);
    if (*((_WORD *)v356 + 21) || !*((_WORD *)v356 + 20))
    {
      uint64_t v21 = (uint64_t **)(v10 - 1);
      uint64_t v22 = **a3;
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        int v43 = *((unsigned __int16 *)v13 + 20);
        int v44 = *((unsigned __int16 *)v41 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v43;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v42;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v44;
        long long v24 = "#E TdInfo transactionId: %u, wrong fragment: %u of %u (3)";
        goto LABEL_31;
      }
LABEL_32:
      unsigned __int16 v45 = *((_WORD *)v13 + 20);
      BOOL v46 = v21;
LABEL_77:
      std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v46, v45);
LABEL_78:
      uint64_t v94 = 1;
      goto LABEL_79;
    }
    v323 = (uint64_t **)(v10 - 1);
    uint64_t v57 = *a3;
    if (*a3)
    {
      long long v58 = *v57;
      if (os_log_type_enabled(*v57, OS_LOG_TYPE_DEFAULT))
      {
        int v59 = *((unsigned __int16 *)v13 + 20);
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v59;
        _os_log_impl(&dword_22231A000, v58, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, starting a new transaction (2)", buf, 0x12u);
      }
    }
    v353 = 0;
    long long __dst = 0u;
    long long v352 = 0u;
    long long v377 = 0u;
    long long v378 = 0u;
    long long v375 = 0u;
    long long v376 = 0u;
    long long v373 = 0u;
    long long v374 = 0u;
    long long v371 = 0u;
    long long v372 = 0u;
    long long v369 = 0u;
    long long v370 = 0u;
    memset(buf, 0, sizeof(buf));
    v388 = (unint64_t *)&v353;
    long long v60 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(1uLL);
    long long v62 = &v60[24 * v61];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v60, (uint64_t)buf);
    uint64_t v64 = v63 + 192;
    int64x2_t v77 = vdupq_n_s64(0);
    *(void *)&long long v352 = v63;
    *(int64x2_t *)&v386[8] = v77;
    unint64_t v78 = (unint64_t)v353;
    v353 = v62;
    unint64_t v387 = v78;
    *(void *)v386 = v77.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)v386);
    *((void *)&v352 + 1) = v64;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
    uint64_t v79 = std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(v323, *((_WORD *)v363 + 20), (_WORD *)v363 + 20);
    *(_OWORD *)(v79 + 40) = __dst;
    if (v79 + 40 != (char *)&__dst) {
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((uint64_t)(v79 + 56), v352, *((uint64_t *)&v352 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v352 + 1) - v352) >> 6));
    }
    *(void *)long long buf = &v352;
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    goto LABEL_62;
  }
  v337 = a4;
  int v30 = *((_DWORD *)v15 + 11);
  unsigned int v31 = *((unsigned __int8 *)v363 + 43);
  v323 = (uint64_t **)(v10 - 1);
  if (v30 == v31)
  {
    unsigned int v32 = *((_DWORD *)v15 + 13) + 1;
    if (v32 >= *((_DWORD *)v15 + 12))
    {
      uint64_t v65 = **a3;
      if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
      {
        int v66 = *((unsigned __int16 *)v356 + 21);
        int v67 = *((unsigned __int16 *)v356 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v66;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v67;
        uint64_t v68 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (7)";
LABEL_55:
        uint64_t v73 = v65;
        uint32_t v74 = 20;
        goto LABEL_56;
      }
    }
    else
    {
      uint64_t v33 = v356;
      int v34 = *((unsigned __int16 *)v356 + 21);
      uint64_t v35 = *a3;
      if (v32 == v34)
      {
        if (v35)
        {
          os_log_t v36 = *v35;
          if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
          {
            int v37 = *((unsigned __int16 *)v33 + 20);
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v14;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = v32;
            *(_WORD *)&unsigned char buf[24] = 1024;
            *(_DWORD *)&buf[26] = v37;
            uint64_t v38 = "#I %s: TdInfo transactionId: %u, adding a new fragment %u of %u (5)";
            long long v39 = v36;
            uint32_t v40 = 30;
LABEL_41:
            _os_log_impl(&dword_22231A000, v39, OS_LOG_TYPE_DEFAULT, v38, buf, v40);
            goto LABEL_62;
          }
        }
        goto LABEL_62;
      }
      uint64_t v65 = *v35;
      if (os_log_type_enabled(*v35, OS_LOG_TYPE_DEFAULT))
      {
        int v75 = *((unsigned __int16 *)v33 + 20);
        *(_DWORD *)long long buf = 67109632;
        *(_DWORD *)&uint8_t buf[4] = v14;
        *(_WORD *)&uint8_t buf[8] = 1024;
        *(_DWORD *)&buf[10] = v34;
        *(_WORD *)&buf[14] = 1024;
        *(_DWORD *)&uint8_t buf[16] = v75;
        uint64_t v68 = "#E TdInfo transactionId: %u, wrong new fragment %u of %u (6)";
        goto LABEL_55;
      }
    }
LABEL_57:
    unsigned __int16 v45 = *((_WORD *)v13 + 20);
LABEL_76:
    BOOL v46 = v323;
    goto LABEL_77;
  }
  int v47 = v30 + 1;
  if ((v30 + 1) >= *((_DWORD *)v15 + 10))
  {
    uint64_t v69 = **a3;
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      int v70 = *((unsigned __int8 *)v13 + 42);
      int v71 = *((unsigned __int16 *)v356 + 21);
      int v72 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v70;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v71;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v72;
      uint64_t v68 = "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (10)";
      uint64_t v73 = v69;
      uint32_t v74 = 32;
LABEL_56:
      _os_log_impl(&dword_22231A000, v73, OS_LOG_TYPE_DEFAULT, v68, buf, v74);
      unint64_t v13 = v363;
      goto LABEL_57;
    }
    goto LABEL_57;
  }
  uint64_t v48 = *a3;
  if (v47 != v31)
  {
    uint64_t v65 = *v48;
    if (os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
    {
      int v76 = *((unsigned __int8 *)v13 + 42);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&uint8_t buf[4] = v14;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v31;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v76;
      uint64_t v68 = "#E TdInfo transactionId: %u, wrong new TD %u of %u (9)";
      goto LABEL_55;
    }
    goto LABEL_57;
  }
  if (v48)
  {
    unint64_t v49 = *v48;
    if (os_log_type_enabled(*v48, OS_LOG_TYPE_DEFAULT))
    {
      int v50 = *((unsigned __int8 *)v13 + 42);
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v14;
      *(_WORD *)&unsigned char buf[18] = 1024;
      *(_DWORD *)&buf[20] = v31;
      *(_WORD *)&unsigned char buf[24] = 1024;
      *(_DWORD *)&buf[26] = v50;
      _os_log_impl(&dword_22231A000, v49, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u, adding a new TD %u of %u (8)", buf, 0x1Eu);
      unsigned int v31 = *((unsigned __int8 *)v363 + 43);
    }
  }
  long long v51 = v15[7];
  long long v52 = v15[8];
  __int16 v53 = (int64x2_t *)(v15 + 7);
  uint64_t v54 = ((char *)v52 - (char *)v51) >> 6;
  int v55 = -1431655765 * v54;
  if (0xAAAAAAAAAAAAAAABLL * v54 > v31)
  {
    long long v56 = **a3;
    if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_62;
    }
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v55;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v31;
    uint64_t v38 = "#E TdInfo: wrong td array state: size=%u, new td %u";
    long long v39 = v56;
    uint32_t v40 = 14;
    goto LABEL_41;
  }
  long long v377 = 0u;
  long long v378 = 0u;
  long long v375 = 0u;
  long long v376 = 0u;
  long long v373 = 0u;
  long long v374 = 0u;
  long long v371 = 0u;
  long long v372 = 0u;
  long long v369 = 0u;
  long long v370 = 0u;
  memset(buf, 0, sizeof(buf));
  std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(v53, (uint64_t)buf);
  QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)buf);
LABEL_62:
  uint64_t v80 = v363;
  uint64_t v81 = v333;
  if (!*v10) {
    goto LABEL_73;
  }
  unsigned int v82 = *((unsigned __int16 *)v363 + 20);
  int v83 = v10;
  int64_t v84 = *v10;
  do
  {
    unsigned int v85 = *((unsigned __int16 *)v84 + 16);
    BOOL v86 = v85 >= v82;
    if (v85 >= v82) {
      unint64_t v87 = (uint64_t ***)v84;
    }
    else {
      unint64_t v87 = (uint64_t ***)(v84 + 1);
    }
    if (v86) {
      int v83 = (uint64_t ***)v84;
    }
    int64_t v84 = *v87;
  }
  while (*v87);
  if (v83 == v10 || v82 < *((unsigned __int16 *)v83 + 16))
  {
LABEL_73:
    long long v88 = **a3;
    if (os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT))
    {
      int v89 = *((unsigned __int16 *)v80 + 20);
      int v90 = *((unsigned __int8 *)v80 + 43);
      int v91 = *((unsigned __int8 *)v80 + 42);
      int v92 = *((unsigned __int16 *)v356 + 21);
      int v93 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v89;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v90;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v91;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v92;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v93;
      _os_log_impl(&dword_22231A000, v88, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (11)", buf, 0x20u);
      uint64_t v80 = v363;
    }
    unsigned __int16 v45 = *((_WORD *)v80 + 20);
    goto LABEL_76;
  }
  char v96 = std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(*v10, v82);
  uint64_t v97 = v96;
  uint64_t v98 = *((unsigned __int8 *)v363 + 43);
  *((_DWORD *)v96 + 1) = v98;
  if (!*(_DWORD *)v96) {
    *(_DWORD *)char v96 = *((unsigned __int8 *)v363 + 42);
  }
  *((_DWORD *)v96 + 3) = *((unsigned __int16 *)v356 + 21);
  *((_DWORD *)v96 + 2) = *((unsigned __int16 *)v356 + 20);
  if (0xAAAAAAAAAAAAAAABLL * ((v96[3] - v96[2]) >> 6) != v98 + 1)
  {
    v105 = **a3;
    if (os_log_type_enabled(v105, OS_LOG_TYPE_DEFAULT))
    {
      int v106 = *((unsigned __int16 *)v363 + 20);
      int v107 = *((unsigned __int8 *)v363 + 43);
      int v108 = *((unsigned __int8 *)v363 + 42);
      int v109 = *((unsigned __int16 *)v356 + 21);
      int v110 = *((unsigned __int16 *)v356 + 20);
      *(_DWORD *)long long buf = 67110144;
      *(_DWORD *)&uint8_t buf[4] = v106;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = v107;
      *(_WORD *)&buf[14] = 1024;
      *(_DWORD *)&uint8_t buf[16] = v108;
      *(_WORD *)&buf[20] = 1024;
      *(_DWORD *)&buf[22] = v109;
      *(_WORD *)&buf[26] = 1024;
      *(_DWORD *)&unsigned char buf[28] = v110;
      _os_log_impl(&dword_22231A000, v105, OS_LOG_TYPE_DEFAULT, "#E TdInfo transactionId: %u, wrong transaction information: %u of %u, %u or %u (12)", buf, 0x20u);
    }
    unsigned __int16 v45 = *((_WORD *)v363 + 20);
    goto LABEL_76;
  }
  *(void *)v386 = 0;
  *(void *)&v386[8] = v386;
  *(void *)&v386[16] = 0x2000000000;
  unint64_t v387 = 0;
  v350[0] = MEMORY[0x263EF8330];
  v350[1] = 0x40000000;
  v350[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_694;
  v350[3] = &unk_26460BCA0;
  v350[4] = v386;
  *(void *)long long buf = v350;
  qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(a1, buf);
  unint64_t v99 = *(void *)(*(void *)&v386[8] + 24);
  if (v99 >= 2)
  {
    v111 = **a3;
    if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
    {
      v112 = wds::asString(v99);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v112;
      _os_log_impl(&dword_22231A000, v111, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is about non-Internet traffic: %s", buf, 0xCu);
    }
LABEL_230:
    _Block_object_dispose(v386, 8);
    goto LABEL_232;
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4002000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__645;
  *(void *)&long long v369 = __Block_byref_object_dispose__646;
  *((void *)&v369 + 1) = 0;
  long long v370 = 0uLL;
  v349[0] = MEMORY[0x263EF8330];
  v349[1] = 0x40000000;
  v349[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_697;
  v349[3] = &unk_26460BCC8;
  v349[4] = buf;
  v342 = v349;
  qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v342);
  uint64_t v101 = *(void *)(*(void *)&buf[8] + 40);
  uint64_t v100 = *(void *)(*(void *)&buf[8] + 48);
  if (v101 != v100)
  {
    while (((*(uint64_t (**)(void, void, uint64_t))(**(void **)a5 + 64))(*(void *)a5, a5[4], v101) & 1) == 0)
    {
      v101 += 24;
      if (v101 == v100)
      {
        char v102 = **a3;
        if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst) = 0;
          _os_log_impl(&dword_22231A000, v102, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for the corporate DNN", (uint8_t *)&__dst, 2u);
        }
        int v103 = 0;
        int v104 = 47;
        goto LABEL_96;
      }
    }
  }
  int v104 = 0;
  int v103 = 1;
LABEL_96:
  _Block_object_dispose(buf, 8);
  *(void *)&long long __dst = (char *)&v369 + 8;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (!v103) {
    goto LABEL_231;
  }
  unsigned int v336 = *((_DWORD *)v97 + 1);
  v335 = (CSIPacketAddress *)v97[2];
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = buf;
  *(void *)&uint8_t buf[16] = 0x4002000000;
  *(void *)&unsigned char buf[24] = __Block_byref_object_copy__649;
  *(void *)&long long v369 = __Block_byref_object_dispose__650;
  *((void *)&v369 + 1) = 0;
  long long v370 = 0uLL;
  v348[0] = MEMORY[0x263EF8330];
  v348[1] = 0x40000000;
  v348[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_700;
  v348[3] = &unk_26460BCF0;
  v348[4] = buf;
  v342 = v348;
  qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(a1, (uint64_t)&v342);
  uint64_t v114 = *(void *)(*(void *)&buf[8] + 40);
  uint64_t v113 = *(void *)(*(void *)&buf[8] + 48);
  if (v114 == v113)
  {
    int v104 = 0;
    int v115 = 1;
    uint64_t v81 = v333;
    goto LABEL_123;
  }
  LOBYTE(v115) = 0;
  uint64_t v116 = (char *)v335 + 192 * v336;
  v117 = (std::string **)(v116 + 32);
  uint64_t v118 = (uint64_t *)(v116 + 24);
  uint64_t v119 = v116 + 40;
  do
  {
    while (1)
    {
      uint64_t v120 = *(unsigned char **)(v114 + 24);
      __int16 v121 = *(unsigned char **)(v114 + 32);
      if (v120 == v121) {
        goto LABEL_102;
      }
      if (*(unsigned char *)v114) {
        break;
      }
LABEL_105:
      long long __dst = 0uLL;
      *(void *)&long long v352 = 0;
      if (v121 == v120) {
        std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]();
      }
      std::string::basic_string[abi:ne180100](&__dst, v120, v121 - v120);
      v122 = *v117;
      if ((unint64_t)*v117 >= *v119)
      {
        uint64_t v124 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v118, &__dst);
      }
      else
      {
        if (SBYTE7(v352) < 0)
        {
          std::string::__init_copy_ctor_external(*v117, (const std::string::value_type *)__dst, *((std::string::size_type *)&__dst + 1));
        }
        else
        {
          long long v123 = __dst;
          v122->__r_.__value_.__r.__words[2] = v352;
          *(_OWORD *)&v122->__r_.__value_.__l.__data_ = v123;
        }
        uint64_t v124 = (uint64_t)&v122[1];
        void *v117 = v122 + 1;
      }
      void *v117 = (std::string *)v124;
      if (SBYTE7(v352) < 0) {
        operator delete((void *)__dst);
      }
      v114 += 48;
      int v115 = 1;
      if (v114 == v113)
      {
        int v104 = 0;
LABEL_118:
        uint64_t v81 = v333;
        goto LABEL_123;
      }
    }
    if ((*(unsigned int (**)(void, void, uint64_t))(**(void **)v337 + 48))(*(void *)v337, v337[4], v114 + 1))
    {
      uint64_t v120 = *(unsigned char **)(v114 + 24);
      __int16 v121 = *(unsigned char **)(v114 + 32);
      goto LABEL_105;
    }
LABEL_102:
    v114 += 48;
  }
  while (v114 != v113);
  if (v115)
  {
    int v104 = 0;
    int v115 = 1;
    goto LABEL_118;
  }
  v125 = **a3;
  uint64_t v81 = v333;
  if (os_log_type_enabled(v125, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__dst) = 0;
    _os_log_impl(&dword_22231A000, v125, OS_LOG_TYPE_DEFAULT, "#N This traffic fragment is not for iOS apps", (uint8_t *)&__dst, 2u);
  }
  int v115 = 0;
  int v104 = 47;
LABEL_123:
  _Block_object_dispose(buf, 8);
  *(void *)&long long __dst = (char *)&v369 + 8;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
  if (v115)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__645;
    *(void *)&long long v369 = __Block_byref_object_dispose__646;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v347[0] = MEMORY[0x263EF8330];
    v347[1] = 0x40000000;
    v347[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_703;
    v347[3] = &unk_26460BD18;
    v347[4] = buf;
    v342 = v347;
    qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(a1, (uint64_t)&v342);
    uint64_t v127 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v126 = *(void *)(*(void *)&buf[8] + 48);
    if (v127 != v126)
    {
      uint64_t v128 = (uint64_t *)((char *)v335 + 192 * v336);
      do
      {
        if (*(char *)(v127 + 23) < 0) {
          uint64_t v129 = *(void *)(v127 + 8);
        }
        else {
          uint64_t v129 = *(unsigned __int8 *)(v127 + 23);
        }
        if (v129)
        {
          unint64_t v130 = v128[1];
          if (v130 >= v128[2])
          {
            uint64_t v131 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v128, (long long *)v127);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v128, (long long *)v127);
            uint64_t v131 = v130 + 24;
          }
          v128[1] = v131;
        }
        v127 += 24;
      }
      while (v127 != v126);
    }
    _Block_object_dispose(buf, 8);
    *(void *)&long long __dst = (char *)&v369 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__655;
    *(void *)&long long v369 = __Block_byref_object_dispose__656;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v346[0] = MEMORY[0x263EF8330];
    v346[1] = 0x40000000;
    v346[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2_705;
    v346[3] = &unk_26460BD40;
    v346[4] = buf;
    v342 = v346;
    qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(a1, (uint64_t)&v342);
    uint64_t v133 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v132 = *(void *)(*(void *)&buf[8] + 48);
    if (v133 != v132)
    {
      v134 = (uint64_t *)((char *)v335 + 192 * v336);
      char v135 = v134 + 6;
      uint64_t v136 = v134 + 7;
      uint64_t v137 = v134 + 8;
      do
      {
        if (*(char *)(v133 + 23) < 0) {
          uint64_t v138 = *(void *)(v133 + 8);
        }
        else {
          uint64_t v138 = *(unsigned __int8 *)(v133 + 23);
        }
        if (v138)
        {
          uint64_t v139 = *v136;
          if ((unint64_t)*v136 >= *v137)
          {
            uint64_t v140 = std::vector<std::string>::__emplace_back_slow_path<std::string const&>(v135, (long long *)v133);
          }
          else
          {
            std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>((uint64_t)v135, (long long *)v133);
            uint64_t v140 = v139 + 24;
          }
          *uint64_t v136 = v140;
        }
        v133 += 24;
      }
      while (v133 != v132);
    }
    _Block_object_dispose(buf, 8);
    *(void *)&long long __dst = (char *)&v369 + 8;
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)&__dst);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__659;
    *(void *)&long long v369 = __Block_byref_object_dispose__660;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v345[0] = MEMORY[0x263EF8330];
    v345[1] = 0x40000000;
    v345[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_3;
    v345[3] = &unk_26460BD68;
    v345[4] = buf;
    *(void *)&long long __dst = v345;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(a1, (uint64_t)&__dst);
    uint64_t v141 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v142 = *(void *)(*(void *)&buf[8] + 48);
    if (v141 != v142)
    {
      v143 = (char *)v335 + 192 * v336;
      v144 = (CSIPacketAddress **)(v143 + 80);
      uint64_t v145 = (uint64_t)(v143 + 72);
      long long v146 = v143 + 88;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&__dst);
        if (*(_DWORD *)(v141 + 4))
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&v342);
          CSIPacketAddress::setIPv4AddressLE((CSIPacketAddress *)&v342);
          CSIPacketAddress::maskToPrefix((CSIPacketAddress *)&v342);
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        long long v147 = *v144;
        if ((unint64_t)*v144 >= *v146)
        {
          uint64_t v148 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v145, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v144, (const CSIPacketAddress *)&__dst);
          uint64_t v148 = (uint64_t)v147 + 24;
          void *v144 = (CSIPacketAddress *)((char *)v147 + 24);
        }
        void *v144 = (CSIPacketAddress *)v148;
        v141 += 8;
      }
      while (v141 != v142);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__663;
    *(void *)&long long v369 = __Block_byref_object_dispose__664;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v341[0] = MEMORY[0x263EF8330];
    v341[1] = 0x40000000;
    v341[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_4;
    v341[3] = &unk_26460BD90;
    v341[4] = buf;
    *(void *)&long long __dst = v341;
    qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(a1, (uint64_t)&__dst);
    uint64_t v150 = *(void *)(*(void *)&buf[8] + 40);
    uint64_t v149 = *(void *)(*(void *)&buf[8] + 48);
    if (v150 != v149)
    {
      xpc_object_t v151 = (char *)v335 + 192 * v336;
      v152 = (CSIPacketAddress **)(v151 + 80);
      uint64_t v153 = (uint64_t)(v151 + 72);
      long long v154 = v151 + 88;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)&__dst);
        CSIPacketAddress::setIPv6Address((CSIPacketAddress *)&__dst, (const unsigned __int8 *)v150);
        if (*(char *)(v150 + 16) >= 1) {
          CSIPacketAddress::setPrefixLen((CSIPacketAddress *)&__dst);
        }
        long long v155 = *v152;
        if ((unint64_t)*v152 >= *v154)
        {
          uint64_t v156 = std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(v153, (const CSIPacketAddress *)&__dst);
        }
        else
        {
          CSIPacketAddress::CSIPacketAddress(*v152, (const CSIPacketAddress *)&__dst);
          uint64_t v156 = (uint64_t)v155 + 24;
          *v152 = (CSIPacketAddress *)((char *)v155 + 24);
        }
        *v152 = (CSIPacketAddress *)v156;
        v150 += 17;
      }
      while (v150 != v149);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__667;
    *(void *)&long long v369 = __Block_byref_object_dispose__668;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v340[0] = MEMORY[0x263EF8330];
    v340[1] = 0x40000000;
    v340[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_5;
    v340[3] = &unk_26460BDB8;
    v340[4] = buf;
    *(void *)&long long __dst = v340;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(a1, (uint64_t)&__dst);
    long long v157 = *(__int16 **)(*(void *)&buf[8] + 40);
    long long v158 = *(__int16 **)(*(void *)&buf[8] + 48);
    if (v157 != v158)
    {
      long long v159 = (char *)v335 + 192 * v336;
      long long v160 = (void **)(v159 + 96);
      long long v161 = (char **)(v159 + 104);
      long long v162 = v159 + 112;
      do
      {
        __int16 v163 = *v157;
        if (*v157)
        {
          long long v164 = *v161;
          if ((unint64_t)*v161 >= *v162)
          {
            long long v166 = (char *)*v160;
            uint64_t v167 = v164 - (unsigned char *)*v160;
            if (v167 <= -3) {
              std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
            }
            uint64_t v168 = v167 >> 1;
            unint64_t v169 = *v162 - (void)v166;
            if (v169 <= (v167 >> 1) + 1) {
              uint64_t v170 = v168 + 1;
            }
            else {
              uint64_t v170 = *v162 - (void)v166;
            }
            if (v169 >= 0x7FFFFFFFFFFFFFFELL) {
              uint64_t v171 = 0x7FFFFFFFFFFFFFFFLL;
            }
            else {
              uint64_t v171 = v170;
            }
            if (v171)
            {
              v172 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)v162, v171);
              long long v164 = *v161;
              long long v166 = (char *)*v160;
              __int16 v163 = *v157;
            }
            else
            {
              v172 = 0;
            }
            uint64_t v173 = &v172[2 * v168];
            *(_WORD *)uint64_t v173 = v163;
            long long v165 = v173 + 2;
            while (v164 != v166)
            {
              __int16 v174 = *((_WORD *)v164 - 1);
              v164 -= 2;
              *((_WORD *)v173 - 1) = v174;
              v173 -= 2;
            }
            *long long v160 = v173;
            *long long v161 = v165;
            *long long v162 = &v172[2 * v171];
            if (v166) {
              operator delete(v166);
            }
          }
          else
          {
            *(_WORD *)long long v164 = v163;
            long long v165 = v164 + 2;
          }
          *long long v161 = v165;
        }
        ++v157;
      }
      while (v157 != v158);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__671;
    *(void *)&long long v369 = __Block_byref_object_dispose__672;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v339[0] = MEMORY[0x263EF8330];
    v339[1] = 0x40000000;
    v339[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_6;
    v339[3] = &unk_26460BDE0;
    v339[4] = buf;
    *(void *)&long long __dst = v339;
    qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(a1, (uint64_t)&__dst);
    char v175 = *(_WORD **)(*(void *)&buf[8] + 40);
    uint64_t v176 = *(_WORD **)(*(void *)&buf[8] + 48);
    if (v175 != v176)
    {
      uint64_t v177 = (char *)v335 + 192 * v336;
      char v180 = (char *)*((void *)v177 + 16);
      v178 = (void **)(v177 + 128);
      v179 = v180;
      uint64_t v181 = v178 - 1;
      uint64_t v182 = v178 + 1;
      do
      {
        if ((unint64_t)v179 >= *v182)
        {
          uint64_t v183 = (v179 - (unsigned char *)*v181) >> 2;
          if ((unint64_t)(v183 + 1) >> 62) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v184 = *v182 - (void)*v181;
          uint64_t v185 = v184 >> 1;
          if (v184 >> 1 <= (unint64_t)(v183 + 1)) {
            uint64_t v185 = v183 + 1;
          }
          if ((unint64_t)v184 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v186 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v186 = v185;
          }
          uint64_t v187 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,4ul>>>((uint64_t)(v178 + 1), v186);
          v189 = &v187[4 * v183];
          *(_WORD *)v189 = *v175;
          *((_WORD *)v189 + 1) = v175[1];
          v190 = (char *)*v178;
          int v191 = (char *)*v181;
          uint64_t v192 = v189;
          if (*v178 != *v181)
          {
            do
            {
              int v193 = *((_DWORD *)v190 - 1);
              v190 -= 4;
              *((_DWORD *)v192 - 1) = v193;
              v192 -= 4;
            }
            while (v190 != v191);
            v190 = (char *)*v181;
          }
          *uint64_t v181 = v192;
          v179 = v189 + 4;
          *v178 = v189 + 4;
          *uint64_t v182 = &v187[4 * v188];
          if (v190) {
            operator delete(v190);
          }
        }
        else
        {
          *(_WORD *)v179 = *v175;
          *((_WORD *)v179 + 1) = v175[1];
          v179 += 4;
        }
        *v178 = v179;
        v175 += 2;
      }
      while (v175 != v176);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = buf;
    *(void *)&uint8_t buf[16] = 0x4002000000;
    *(void *)&unsigned char buf[24] = __Block_byref_object_copy__675;
    *(void *)&long long v369 = __Block_byref_object_dispose__676;
    *((void *)&v369 + 1) = 0;
    long long v370 = 0uLL;
    v338[0] = MEMORY[0x263EF8330];
    v338[1] = 0x40000000;
    v338[2] = ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_7;
    v338[3] = &unk_26460BE08;
    v338[4] = buf;
    *(void *)&long long __dst = v338;
    qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(a1, (uint64_t)&__dst);
    uint64_t v81 = v333;
    v194 = *(unsigned __int8 **)(*(void *)&buf[8] + 40);
    v195 = *(unsigned __int8 **)(*(void *)&buf[8] + 48);
    if (v194 != v195)
    {
      int v196 = (char *)v335 + 192 * v336;
      v199 = (char *)*((void *)v196 + 19);
      uint64_t v198 = (_WORD **)(v196 + 152);
      uint64_t v197 = v199;
      v200 = (void **)(v198 - 1);
      v201 = v198 + 1;
      do
      {
        if ((unint64_t)v197 >= *v201)
        {
          uint64_t v203 = (char *)*v200;
          uint64_t v204 = v197 - (unsigned char *)*v200;
          if (v204 <= -3) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v205 = v204 >> 1;
          unint64_t v206 = *v201 - (void)v203;
          if (v206 <= (v204 >> 1) + 1) {
            uint64_t v207 = v205 + 1;
          }
          else {
            uint64_t v207 = *v201 - (void)v203;
          }
          if (v206 >= 0x7FFFFFFFFFFFFFFELL) {
            uint64_t v208 = 0x7FFFFFFFFFFFFFFFLL;
          }
          else {
            uint64_t v208 = v207;
          }
          if (v208)
          {
            uint64_t v209 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<unsigned short>>((uint64_t)(v198 + 1), v208);
            uint64_t v197 = (char *)*v198;
            uint64_t v203 = (char *)*v200;
          }
          else
          {
            uint64_t v209 = 0;
          }
          long long v210 = &v209[2 * v205];
          *(_WORD *)long long v210 = *v194;
          uint64_t v202 = v210 + 2;
          while (v197 != v203)
          {
            __int16 v211 = *((_WORD *)v197 - 1);
            v197 -= 2;
            *((_WORD *)v210 - 1) = v211;
            v210 -= 2;
          }
          void *v200 = v210;
          *uint64_t v198 = v202;
          void *v201 = &v209[2 * v208];
          if (v203) {
            operator delete(v203);
          }
        }
        else
        {
          *(_WORD *)uint64_t v197 = *v194;
          uint64_t v202 = v197 + 2;
        }
        *uint64_t v198 = v202;
        ++v194;
        uint64_t v197 = (char *)v202;
        uint64_t v81 = v333;
      }
      while (v194 != v195);
    }
    _Block_object_dispose(buf, 8);
    if (*((void *)&v369 + 1))
    {
      *(void *)&long long v370 = *((void *)&v369 + 1);
      operator delete(*((void **)&v369 + 1));
    }
    goto LABEL_230;
  }
LABEL_231:
  _Block_object_dispose(v386, 8);
  if (v104 != 47) {
    goto LABEL_78;
  }
LABEL_232:
  std::string v212 = v363;
  if (*((unsigned __int8 *)v363 + 42) - 1 == *((unsigned __int8 *)v363 + 43)
    && *((unsigned __int16 *)v356 + 20) - 1 == *((unsigned __int16 *)v356 + 21))
  {
    std::string v213 = *a3;
    if (*a3)
    {
      long long v214 = *v213;
      if (os_log_type_enabled(*v213, OS_LOG_TYPE_DEFAULT))
      {
        int v215 = *((unsigned __int16 *)v212 + 20);
        int v216 = -1431655765 * ((unint64_t)(v97[3] - v97[2]) >> 6);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v215;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v216;
        _os_log_impl(&dword_22231A000, v214, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13), transactionInfo.tds.size()=%u", buf, 0x18u);
      }
    }
    uint64_t v218 = *v81;
    for (uint64_t i = v81[1]; i != v218; uint64_t i = MEMORY[0x223C99360](i - 304))
      ;
    v81[1] = v218;
    uint64_t v322 = v97[2];
    uint64_t v320 = v97[3];
    if (v322 != v320)
    {
      v321 = v81 + 2;
      do
      {
        long long __dst = 0uLL;
        *(void *)&long long v352 = 0;
        MEMORY[0x223C99350](buf);
        uint64_t v219 = *((void *)&__dst + 1);
        if (*((void *)&__dst + 1) >= (unint64_t)v352)
        {
          uint64_t v220 = std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>((uint64_t *)&__dst, (uint64_t)buf);
        }
        else
        {
          MEMORY[0x223C99330](*((void *)&__dst + 1), buf);
          uint64_t v220 = v219 + 304;
        }
        *((void *)&__dst + 1) = v220;
        MEMORY[0x223C99360](buf);
        v221 = *(const std::string **)(v322 + 24);
        v324 = *(const std::string **)(v322 + 32);
        if (v221 != v324)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v222 = *((void *)&__dst + 1);
            for (uint64_t j = __dst; j != v222; j += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, j);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v370, v221);
              unint64_t v224 = v343;
              if (v343 >= v344)
              {
                unint64_t v226 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v227 = v226 + 1;
                if (v226 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v227) {
                  unint64_t v227 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v228 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v228 = v227;
                }
                v388 = &v344;
                if (v228) {
                  unint64_t v228 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v228);
                }
                else {
                  uint64_t v229 = 0;
                }
                *(void *)v386 = v228;
                *(void *)&v386[8] = v228 + 304 * v226;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v228 + 304 * v229;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v225 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v225 = v224 + 304;
              }
              unint64_t v343 = v225;
              MEMORY[0x223C99360](buf);
            }
            ++v221;
          }
          while (v221 != v324);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v230 = *(const std::string **)(v322 + 48);
        v325 = *(const std::string **)(v322 + 56);
        if (v230 != v325)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v231 = *((void *)&__dst + 1);
            for (uint64_t k = __dst; k != v231; k += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, k);
              std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)((char *)&v376 + 8), v230);
              unint64_t v233 = v343;
              if (v343 >= v344)
              {
                unint64_t v235 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v236 = v235 + 1;
                if (v235 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v236) {
                  unint64_t v236 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v237 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v237 = v236;
                }
                v388 = &v344;
                if (v237) {
                  unint64_t v237 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v237);
                }
                else {
                  uint64_t v238 = 0;
                }
                *(void *)v386 = v237;
                *(void *)&v386[8] = v237 + 304 * v235;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v237 + 304 * v238;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v234 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v234 = v233 + 304;
              }
              unint64_t v343 = v234;
              MEMORY[0x223C99360](buf);
            }
            ++v230;
          }
          while (v230 != v325);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v239 = *(const CSIPacketAddress **)(v322 + 72);
        v326 = *(const CSIPacketAddress **)(v322 + 80);
        if (v239 != v326)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v240 = *((void *)&__dst + 1);
            for (uint64_t m = __dst; m != v240; m += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, m);
              std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>((CSIPacketAddress *)((char *)&v378 + 8), v239);
              unint64_t v242 = v343;
              if (v343 >= v344)
              {
                unint64_t v244 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v245 = v244 + 1;
                if (v244 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v245) {
                  unint64_t v245 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v246 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v246 = v245;
                }
                v388 = &v344;
                if (v246) {
                  unint64_t v246 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v246);
                }
                else {
                  uint64_t v247 = 0;
                }
                *(void *)v386 = v246;
                *(void *)&v386[8] = v246 + 304 * v244;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v246 + 304 * v247;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v243 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v243 = v242 + 304;
              }
              unint64_t v343 = v243;
              MEMORY[0x223C99360](buf);
            }
            v239 = (const CSIPacketAddress *)((char *)v239 + 24);
          }
          while (v239 != v326);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v248 = *(_WORD **)(v322 + 96);
        v327 = *(_WORD **)(v322 + 104);
        if (v248 != v327)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v249 = *((void *)&__dst + 1);
            for (uint64_t n = __dst; n != v249; n += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, n);
              WORD2(v380) = *v248;
              BYTE6(v380) = 1;
              unint64_t v251 = v343;
              if (v343 >= v344)
              {
                unint64_t v253 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v254 = v253 + 1;
                if (v253 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v254) {
                  unint64_t v254 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v255 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v255 = v254;
                }
                v388 = &v344;
                if (v255) {
                  unint64_t v255 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v255);
                }
                else {
                  uint64_t v256 = 0;
                }
                *(void *)v386 = v255;
                *(void *)&v386[8] = v255 + 304 * v253;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v255 + 304 * v256;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v252 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v252 = v251 + 304;
              }
              unint64_t v343 = v252;
              MEMORY[0x223C99360](buf);
            }
            ++v248;
          }
          while (v248 != v327);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v257 = *(_DWORD **)(v322 + 120);
        v328 = *(_DWORD **)(v322 + 128);
        if (v257 != v328)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v258 = *((void *)&__dst + 1);
            for (iuint64_t i = __dst; ii != v258; ii += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, ii);
              DWORD2(v380) = *v257;
              if (!BYTE12(v380)) {
                BYTE12(v380) = 1;
              }
              unint64_t v260 = v343;
              if (v343 >= v344)
              {
                unint64_t v262 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v263 = v262 + 1;
                if (v262 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v263) {
                  unint64_t v263 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v264 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v264 = v263;
                }
                v388 = &v344;
                if (v264) {
                  unint64_t v264 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v264);
                }
                else {
                  uint64_t v265 = 0;
                }
                *(void *)v386 = v264;
                *(void *)&v386[8] = v264 + 304 * v262;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v264 + 304 * v265;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v261 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v261 = v260 + 304;
              }
              unint64_t v343 = v261;
              MEMORY[0x223C99360](buf);
            }
            ++v257;
          }
          while (v257 != v328);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v266 = *(_WORD **)(v322 + 144);
        v329 = *(_WORD **)(v322 + 152);
        if (v266 != v329)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v267 = *((void *)&__dst + 1);
            for (juint64_t j = __dst; jj != v267; jj += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, jj);
              HIWORD(v380) = *v266;
              LOBYTE(v381) = 1;
              unint64_t v269 = v343;
              if (v343 >= v344)
              {
                unint64_t v271 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v272 = v271 + 1;
                if (v271 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v272) {
                  unint64_t v272 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v273 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v273 = v272;
                }
                v388 = &v344;
                if (v273) {
                  unint64_t v273 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v273);
                }
                else {
                  uint64_t v274 = 0;
                }
                *(void *)v386 = v273;
                *(void *)&v386[8] = v273 + 304 * v271;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v273 + 304 * v274;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v270 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v270 = v269 + 304;
              }
              unint64_t v343 = v270;
              MEMORY[0x223C99360](buf);
            }
            ++v266;
          }
          while (v266 != v329);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v275 = *(uint64_t **)(v322 + 168);
        v330 = *(uint64_t **)(v322 + 176);
        if (v275 != v330)
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          do
          {
            uint64_t v276 = *((void *)&__dst + 1);
            for (kuint64_t k = __dst; kk != v276; kk += 304)
            {
              long long v384 = 0u;
              long long v385 = 0u;
              long long v382 = 0u;
              long long v383 = 0u;
              long long v380 = 0u;
              long long v381 = 0u;
              long long v378 = 0u;
              long long v379 = 0u;
              long long v376 = 0u;
              long long v377 = 0u;
              long long v374 = 0u;
              long long v375 = 0u;
              long long v372 = 0u;
              long long v373 = 0u;
              long long v370 = 0u;
              long long v371 = 0u;
              long long v369 = 0u;
              memset(buf, 0, sizeof(buf));
              MEMORY[0x223C99340](buf, kk);
              uint64_t v278 = *v275;
              if (!BYTE8(v381)) {
                BYTE8(v381) = 1;
              }
              DWORD1(v381) = v278;
              unint64_t v279 = v343;
              if (v343 >= v344)
              {
                unint64_t v281 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                unint64_t v282 = v281 + 1;
                if (v281 + 1 > 0xD79435E50D7943) {
                  std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                }
                if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v282) {
                  unint64_t v282 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                }
                if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                  unint64_t v283 = 0xD79435E50D7943;
                }
                else {
                  unint64_t v283 = v282;
                }
                v388 = &v344;
                if (v283) {
                  unint64_t v283 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v283);
                }
                else {
                  uint64_t v284 = 0;
                }
                *(void *)v386 = v283;
                *(void *)&v386[8] = v283 + 304 * v281;
                *(void *)&v386[16] = *(void *)&v386[8];
                unint64_t v387 = v283 + 304 * v284;
                MEMORY[0x223C99340](*(void *)&v386[8], buf);
                *(void *)&v386[16] += 304;
                std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                unint64_t v280 = v343;
                std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
              }
              else
              {
                MEMORY[0x223C99340](v343, buf);
                unint64_t v280 = v279 + 304;
              }
              unint64_t v343 = v280;
              MEMORY[0x223C99360](buf);
            }
            ++v275;
          }
          while (v275 != v330);
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, (uint64_t)v342, v343, 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        if (*(void *)v322 != *(void *)(v322 + 8))
        {
          v342 = 0;
          unint64_t v343 = 0;
          unint64_t v344 = 0;
          v285 = *(const std::string **)v322;
          v331 = *(const std::string **)(v322 + 8);
          if (*(const std::string **)v322 == v331)
          {
            uint64_t v295 = 0;
            uint64_t v294 = 0;
          }
          else
          {
            do
            {
              uint64_t v286 = *((void *)&__dst + 1);
              for (muint64_t m = __dst; mm != v286; mm += 304)
              {
                long long v384 = 0u;
                long long v385 = 0u;
                long long v382 = 0u;
                long long v383 = 0u;
                long long v380 = 0u;
                long long v381 = 0u;
                long long v378 = 0u;
                long long v379 = 0u;
                long long v376 = 0u;
                long long v377 = 0u;
                long long v374 = 0u;
                long long v375 = 0u;
                long long v372 = 0u;
                long long v373 = 0u;
                long long v370 = 0u;
                long long v371 = 0u;
                long long v369 = 0u;
                memset(buf, 0, sizeof(buf));
                MEMORY[0x223C99340](buf, mm);
                std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>((std::string *)&v382, v285);
                unint64_t v288 = v343;
                if (v343 >= v344)
                {
                  unint64_t v290 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v343 - (void)v342) >> 4);
                  unint64_t v291 = v290 + 1;
                  if (v290 + 1 > 0xD79435E50D7943) {
                    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
                  }
                  if (0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4) > v291) {
                    unint64_t v291 = 0xD79435E50D79436 * ((uint64_t)(v344 - (void)v342) >> 4);
                  }
                  if (0x86BCA1AF286BCA1BLL * ((uint64_t)(v344 - (void)v342) >> 4) >= 0x6BCA1AF286BCA1) {
                    unint64_t v292 = 0xD79435E50D7943;
                  }
                  else {
                    unint64_t v292 = v291;
                  }
                  v388 = &v344;
                  if (v292) {
                    unint64_t v292 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v292);
                  }
                  else {
                    uint64_t v293 = 0;
                  }
                  *(void *)v386 = v292;
                  *(void *)&v386[8] = v292 + 304 * v290;
                  *(void *)&v386[16] = *(void *)&v386[8];
                  unint64_t v387 = v292 + 304 * v293;
                  MEMORY[0x223C99340](*(void *)&v386[8], buf);
                  *(void *)&v386[16] += 304;
                  std::vector<TrafficDescriptor>::__swap_out_circular_buffer((uint64_t *)&v342, v386);
                  unint64_t v289 = v343;
                  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)v386);
                }
                else
                {
                  MEMORY[0x223C99340](v343, buf);
                  unint64_t v289 = v288 + 304;
                }
                unint64_t v343 = v289;
                MEMORY[0x223C99360](buf);
              }
              ++v285;
            }
            while (v285 != v331);
            uint64_t v294 = (uint64_t)v342;
            uint64_t v295 = v343;
          }
          std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>((uint64_t *)&__dst, v294, v295, 0x86BCA1AF286BCA1BLL * ((v295 - v294) >> 4));
          *(void *)long long buf = &v342;
          std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        }
        v296 = *a3;
        if (*a3)
        {
          v297 = *v296;
          if (os_log_type_enabled(*v296, OS_LOG_TYPE_DEFAULT))
          {
            int v298 = *((unsigned __int16 *)v363 + 20);
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v298;
            *(_WORD *)&unsigned char buf[18] = 1024;
            *(_DWORD *)&buf[20] = 678152731 * ((*((void *)&__dst + 1) - (void)__dst) >> 4);
            _os_log_impl(&dword_22231A000, v297, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.1), newTds.size()=%u", buf, 0x18u);
          }
        }
        v299 = (TrafficDescriptor *)*((void *)&__dst + 1);
        v332 = (TrafficDescriptor *)*((void *)&__dst + 1);
        for (nuint64_t n = (TrafficDescriptor *)__dst; nn != v299; nuint64_t n = (TrafficDescriptor *)((char *)nn + 304))
        {
          v301 = *a3;
          if (*a3)
          {
            v302 = *v301;
            if (os_log_type_enabled(*v301, OS_LOG_TYPE_DEFAULT))
            {
              TrafficDescriptor::toString((uint64_t *)buf, nn);
              v303 = buf;
              if ((buf[23] & 0x80u) != 0) {
                v303 = *(uint8_t **)buf;
              }
              *(_DWORD *)v386 = 136315394;
              *(void *)&v386[4] = "processWdsTdInfoInd";
              *(_WORD *)&v386[12] = 2082;
              *(void *)&v386[14] = v303;
              _os_log_impl(&dword_22231A000, v302, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo newTd: %{public}s", v386, 0x16u);
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          if ((TrafficDescriptor::empty(nn) & 1) == 0)
          {
            unint64_t v305 = v333[1];
            unint64_t v304 = v333[2];
            if (v305 >= v304)
            {
              unint64_t v308 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v305 - *v333) >> 4);
              unint64_t v309 = v308 + 1;
              if (v308 + 1 > 0xD79435E50D7943) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              unint64_t v310 = 0x86BCA1AF286BCA1BLL * ((uint64_t)(v304 - *v333) >> 4);
              if (2 * v310 > v309) {
                unint64_t v309 = 2 * v310;
              }
              if (v310 >= 0x6BCA1AF286BCA1) {
                unint64_t v311 = 0xD79435E50D7943;
              }
              else {
                unint64_t v311 = v309;
              }
              *(void *)&long long v369 = v321;
              if (v311) {
                unint64_t v311 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v311);
              }
              else {
                uint64_t v312 = 0;
              }
              *(void *)long long buf = v311;
              *(void *)&uint8_t buf[8] = v311 + 304 * v308;
              *(void *)&uint8_t buf[16] = *(void *)&buf[8];
              *(void *)&unsigned char buf[24] = v311 + 304 * v312;
              MEMORY[0x223C99340](*(void *)&buf[8], nn);
              v307 = v333;
              *(void *)&buf[16] += 304;
              std::vector<TrafficDescriptor>::__swap_out_circular_buffer(v333, buf);
              uint64_t v306 = v333[1];
              std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)buf);
            }
            else
            {
              MEMORY[0x223C99340](v333[1], nn);
              uint64_t v306 = v305 + 304;
              v307 = v333;
              v333[1] = v306;
            }
            v307[1] = v306;
          }
          v299 = v332;
        }
        *(void *)long long buf = &__dst;
        std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
        v322 += 192;
        uint64_t v81 = v333;
      }
      while (v322 != v320);
    }
    v313 = *a3;
    if (*a3)
    {
      v314 = *v313;
      if (os_log_type_enabled(*v313, OS_LOG_TYPE_DEFAULT))
      {
        int v315 = *((unsigned __int16 *)v363 + 20);
        int v316 = 678152731 * ((unint64_t)(v81[1] - *v81) >> 4);
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v315;
        *(_WORD *)&unsigned char buf[18] = 1024;
        *(_DWORD *)&buf[20] = v316;
        _os_log_impl(&dword_22231A000, v314, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u: finished (13.2), trafficInfo.trafficDescriptors.size()=%u", buf, 0x18u);
      }
    }
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(v323, *((_WORD *)v363 + 20));
    uint64_t v94 = 1;
  }
  else
  {
    uint64_t v94 = 0;
  }
  v317 = *a3;
  if (*a3)
  {
    v318 = *v317;
    if (os_log_type_enabled(*v317, OS_LOG_TYPE_DEFAULT))
    {
      int v319 = *((unsigned __int16 *)v363 + 20);
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "processWdsTdInfoInd";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v319;
      _os_log_impl(&dword_22231A000, v318, OS_LOG_TYPE_DEFAULT, "#I %s: TdInfo transactionId: %u (14)", buf, 0x12u);
    }
  }
LABEL_79:
  _Block_object_dispose(&v355, 8);
  _Block_object_dispose(&v362, 8);
  return v94;
}

void sub_2223EC478(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  void *v20 = v21;
  if (SLOBYTE(STACK[0x237]) < 0) {
    operator delete((void *)STACK[0x220]);
  }
  _Block_object_dispose(&STACK[0x300], 8);
  STACK[0x220] = a20;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x220]);
  _Block_object_dispose((const void *)(v22 - 160), 8);
  _Block_object_dispose(&STACK[0x278], 8);
  _Block_object_dispose(&STACK[0x2D0], 8);
  _Unwind_Resume(a1);
}

uint64_t ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke(uint64_t result, _DWORD *a2)
{
  *(_WORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

uint64_t ___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

__n128 __Block_byref_object_copy__214(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(__n128 *)(a1 + 40) = result;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void __Block_byref_object_dispose__215(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
}

std::string *___ZN20QMIDataCommandDriver33handleWdsPduSessionLookupInd_syncERKN3wds16PduSessionLookup10IndicationE_block_invoke_216(uint64_t a1, const std::string *a2)
{
  return std::string::operator=((std::string *)(*(void *)(*(void *)(a1 + 32) + 8) + 40), a2);
}

void QMIDataCommandDriver::notifyCellularDataSwitchingAllowed_sync(QMIDataCommandDriver *this, char a2)
{
  uint64_t v26 = *MEMORY[0x263EF8340];
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 6);
  if (v3)
  {
    __int16 v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = *((void *)this + 5);
      if (v6)
      {
        if (((*(uint64_t (**)(void))(*(void *)v6 + 496))(*((void *)this + 5)) & 1) == 0
          && *((void *)this + 20))
        {
          long long v20 = 0u;
          long long v21 = 0u;
          qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v20);
          v18[0] = MEMORY[0x263EF8330];
          v18[1] = 0x40000000;
          void v18[2] = ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke;
          v18[3] = &__block_descriptor_tmp_219;
          char v19 = a2;
          uint64_t v7 = (const void **)*((void *)&v20 + 1);
          if (*((void *)&v20 + 1) != (void)v21)
          {
            while (*((unsigned char *)*v7 + 8) != 16)
            {
              if (++v7 == (const void **)v21) {
                goto LABEL_20;
              }
            }
          }
          if (v7 == (const void **)v21) {
LABEL_20:
          }
            operator new();
          if (!v9) {
            __cxa_bad_cast();
          }
          ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke((uint64_t)v18, v9 + 9);
          unint64_t v13 = (char *)this + 144;
          uint64_t v14 = QMIServiceMsg::create();
          int v15 = 25000;
          uint64_t v16 = 0;
          long long aBlock = 0;
          v11[0] = MEMORY[0x263EF8330];
          v11[1] = 1174405120;
          _OWORD v11[2] = ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke_2;
          v11[3] = &__block_descriptor_tmp_222_0;
          void v11[4] = this;
          void v11[5] = v6;
          int v12 = v5;
          atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
          *(void *)&long long buf = MEMORY[0x263EF8330];
          *((void *)&buf + 1) = 0x40000000;
          int v23 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_9;
          long long v24 = &unk_26460B7B8;
          uint64_t v25 = v11;
          int v10 = _Block_copy(&buf);
          long long aBlock = v10;
          if (v14)
          {
            qmi::Client::send();
            int v10 = aBlock;
          }
          if (v10) {
            _Block_release(v10);
          }
          if (v12) {
            std::__shared_weak_count::__release_shared[abi:ne180100](v12);
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v20);
          goto LABEL_13;
        }
      }
    }
  }
  else
  {
    __int16 v5 = 0;
  }
  unint64_t v8 = *((void *)this + 12);
  if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    if (!v5) {
      return;
    }
    goto LABEL_13;
  }
  LODWORD(buf) = 136315138;
  *(void *)((char *)&buf + 4) = "notifyCellularDataSwitchingAllowed_sync";
  _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "%s: driver not ready", (uint8_t *)&buf, 0xCu);
  if (v5) {
LABEL_13:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
}

void sub_2223ECBF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  if (a16) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a16);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a17);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a27);
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZNK20QMIDataCommandDriver39notifyCellularDataSwitchingAllowed_syncEb_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 40) + 496))(*(void *)(a1 + 40)) & 1) == 0)
  {
    int v4 = *(_DWORD *)(a2 + 4);
    if (v4)
    {
      __int16 v5 = *(NSObject **)(v3 + 96);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        v6[0] = 67109378;
        v6[1] = v4;
        __int16 v7 = 2080;
        uint64_t v8 = qmi::asString();
        _os_log_error_impl(&dword_22231A000, v5, OS_LOG_TYPE_ERROR, "NotifyDynamicCellularDataSwitchState failed: 0x%x (%s)", (uint8_t *)v6, 0x12u);
      }
    }
  }
}

void non-virtual thunk to'QMIDataCommandDriver::notifyCellularDataSwitchingAllowed_sync(QMIDataCommandDriver *this, char a2)
{
}

void BBDataCommandDriverInterface::setDataDriver(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v2 = a2[1];
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + 16) = v2;
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t BBDataCommandDriverInterface::getDataDriver@<X0>(uint64_t this@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(this + 16);
  *a2 = *(void *)(this + 8);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return this;
}

const char *QMIDataCommandDriver::getDriverTypeName(QMIDataCommandDriver *this)
{
  return "QMIDriver";
}

const char *QMIDataCommandDriver::getDriverName(QMIDataCommandDriver *this)
{
  return "qmi";
}

void QMIDataCommandDriver::getDeviceNAI(QMIDataCommandDriver *this@<X0>, std::string *a2@<X8>)
{
  int v4 = (std::mutex *)((char *)this + 216);
  std::mutex::lock((std::mutex *)((char *)this + 216));
  if (*((char *)this + 215) < 0)
  {
    std::string::__init_copy_ctor_external(a2, *((const std::string::value_type **)this + 24), *((void *)this + 25));
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *((_OWORD *)this + 12);
    a2->__r_.__value_.__r.__words[2] = *((void *)this + 26);
  }

  std::mutex::unlock(v4);
}

void sub_2223ECE34(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataCommandDriver::isCDMASupported(QMIDataCommandDriver *this)
{
  return 1;
}

uint64_t QMIDataCommandDriver::useRealBBDataSettingsInUnitTests(QMIDataCommandDriver *this)
{
  return 1;
}

const char *non-virtual thunk to'QMIDataCommandDriver::getDriverTypeName(QMIDataCommandDriver *this)
{
  return "QMIDriver";
}

const char *non-virtual thunk to'QMIDataCommandDriver::getDriverName(QMIDataCommandDriver *this)
{
  return "qmi";
}

void non-virtual thunk to'QMIDataCommandDriver::getDeviceNAI(QMIDataCommandDriver *this@<X0>, std::string *a2@<X8>)
{
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::isCDMASupported(QMIDataCommandDriver *this)
{
  return 1;
}

uint64_t non-virtual thunk to'QMIDataCommandDriver::useRealBBDataSettingsInUnitTests(QMIDataCommandDriver *this)
{
  return 1;
}

void std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*(void *)a1);
    std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::destroy(*((void *)a1 + 1));
    uint64_t v2 = (void **)(a1 + 56);
    std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v2);
    operator delete(a1);
  }
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    int v4 = (char *)v1[1];
    __int16 v5 = v2;
    if (v4 != v2)
    {
      do
        QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(v4 - 192));
      while (v4 != v2);
      __int16 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor(QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *this)
{
  uint64_t v2 = (void *)*((void *)this + 21);
  if (v2)
  {
    *((void *)this + 22) = v2;
    operator delete(v2);
  }
  uint64_t v3 = (void *)*((void *)this + 18);
  if (v3)
  {
    *((void *)this + 19) = v3;
    operator delete(v3);
  }
  int v4 = (void *)*((void *)this + 15);
  if (v4)
  {
    *((void *)this + 16) = v4;
    operator delete(v4);
  }
  __int16 v5 = (void *)*((void *)this + 12);
  if (v5)
  {
    *((void *)this + 13) = v5;
    operator delete(v5);
  }
  uint64_t v6 = (void *)*((void *)this + 9);
  if (v6)
  {
    *((void *)this + 10) = v6;
    operator delete(v6);
  }
  __int16 v7 = (void **)((char *)this + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  __int16 v7 = (void **)((char *)this + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
  __int16 v7 = (void **)this;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v7);
}

void std::vector<TrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int16 v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = MEMORY[0x223C99360](v4 - 304);
      while ((void *)v4 != v2);
      __int16 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *std::vector<wds::tlv::FrameData>::__init_with_size[abi:ne180100]<wds::tlv::FrameData*,wds::tlv::FrameData*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<tlv::NestedTlv<(unsigned char)16,qos::tlv::QoSFilter>>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      __n128 result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2223ED104(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<wds::tlv::CurrentDataSystem>::__throw_out_of_range[abi:ne180100]()
{
}

uint64_t std::deque<dispatch::group_session>::~deque[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  uint64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    uint64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 >> 9];
    uint64_t v7 = (NSObject **)((char *)*v6 + 8 * (v5 & 0x1FF));
    uint64_t v8 = *(uint64_t *)((char *)v2 + (((*(void *)(a1 + 40) + v5) >> 6) & 0x3FFFFFFFFFFFFF8))
       + 8 * ((*(void *)(a1 + 40) + v5) & 0x1FF);
    if (v7 != (NSObject **)v8)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(v7++);
        if ((char *)v7 - (unsigned char *)*v6 == 4096)
        {
          uint64_t v9 = (NSObject **)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != (NSObject **)v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      uint64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      uint64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 256;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 512;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      unint64_t v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(NSObject **a1)
{
  uint64_t v2 = *a1;
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *a1;
    if (*a1)
    {
      dispatch_release(v3);
    }
  }
}

void std::deque<dispatch::group_session>::__add_back_capacity(void *a1)
{
  unint64_t v2 = a1[4];
  BOOL v3 = v2 >= 0x200;
  unint64_t v4 = v2 - 512;
  if (v3)
  {
    a1[4] = v4;
    unint64_t v5 = (void *)a1[1];
    uint64_t v6 = (char *)a1[2];
    uint64_t v9 = *v5;
    uint64_t v7 = (char *)(v5 + 1);
    uint64_t v8 = v9;
    a1[1] = v7;
    if (v6 != (char *)a1[3]) {
      goto LABEL_41;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v38 = 1;
      }
      else {
        unint64_t v38 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v38);
      uint32_t v40 = &v39[8 * (v38 >> 2)];
      int v42 = &v39[8 * v41];
      int v43 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v44 = a1[2] - (void)v43;
      if (v44)
      {
        uint64_t v6 = &v40[v44 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v45 = 8 * (v44 >> 3);
        BOOL v46 = &v39[8 * (v38 >> 2)];
        do
        {
          uint64_t v47 = *v43++;
          *(void *)BOOL v46 = v47;
          v46 += 8;
          v45 -= 8;
        }
        while (v45);
      }
      goto LABEL_29;
    }
LABEL_5:
    uint64_t v11 = v10 >> 3;
    BOOL v12 = v10 >> 3 < -1;
    uint64_t v13 = (v10 >> 3) + 2;
    if (v12) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = v11 + 1;
    }
    uint64_t v15 = -(v14 >> 1);
    uint64_t v16 = v14 >> 1;
    BOOL v17 = &v7[-8 * v16];
    int64_t v18 = v6 - v7;
    if (v6 != v7)
    {
      memmove(&v7[-8 * v16], v7, v6 - v7);
      uint64_t v7 = (char *)a1[1];
    }
    uint64_t v6 = &v17[v18];
    a1[1] = &v7[8 * v15];
    a1[2] = &v17[v18];
    goto LABEL_41;
  }
  long long v20 = (char *)a1[2];
  char v19 = (char *)a1[3];
  long long v21 = (char *)*a1;
  uint64_t v22 = (char *)a1[1];
  unint64_t v23 = (v20 - v22) >> 3;
  uint64_t v24 = (uint64_t)&v19[-*a1];
  if (v23 < v24 >> 3)
  {
    uint64_t v25 = operator new(0x1000uLL);
    uint64_t v26 = v25;
    if (v19 != v20)
    {
      *(void *)long long v20 = v25;
LABEL_42:
      a1[2] += 8;
      return;
    }
    if (v22 == v21)
    {
      if (v20 == v22) {
        unint64_t v49 = 1;
      }
      else {
        unint64_t v49 = (v19 - v22) >> 2;
      }
      uint64_t v50 = 2 * v49;
      long long v51 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v49);
      uint64_t v22 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
      __int16 v53 = (uint64_t *)a1[1];
      uint64_t v54 = v22;
      uint64_t v55 = a1[2] - (void)v53;
      if (v55)
      {
        uint64_t v54 = &v22[v55 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v56 = 8 * (v55 >> 3);
        uint64_t v57 = &v51[(v50 + 6) & 0xFFFFFFFFFFFFFFF8];
        do
        {
          uint64_t v58 = *v53++;
          *(void *)uint64_t v57 = v58;
          v57 += 8;
          v56 -= 8;
        }
        while (v56);
      }
      int v59 = (char *)*a1;
      *a1 = v51;
      a1[1] = v22;
      a1[2] = v54;
      a1[3] = &v51[8 * v52];
      if (v59)
      {
        operator delete(v59);
        uint64_t v22 = (char *)a1[1];
      }
    }
    *((void *)v22 - 1) = v26;
    uint64_t v7 = (char *)a1[1];
    uint64_t v6 = (char *)a1[2];
    a1[1] = v7 - 8;
    uint64_t v8 = *((void *)v7 - 1);
    a1[1] = v7;
    if (v6 != (char *)a1[3])
    {
LABEL_41:
      *(void *)uint64_t v6 = v8;
      goto LABEL_42;
    }
    uint64_t v10 = (uint64_t)&v7[-*a1];
    if ((unint64_t)v7 <= *a1)
    {
      if (v6 == (char *)*a1) {
        unint64_t v82 = 1;
      }
      else {
        unint64_t v82 = (uint64_t)&v6[-*a1] >> 2;
      }
      long long v39 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v82);
      uint32_t v40 = &v39[8 * (v82 >> 2)];
      int v42 = &v39[8 * v83];
      int64_t v84 = (uint64_t *)a1[1];
      uint64_t v6 = v40;
      uint64_t v85 = a1[2] - (void)v84;
      if (v85)
      {
        uint64_t v6 = &v40[v85 & 0xFFFFFFFFFFFFFFF8];
        uint64_t v86 = 8 * (v85 >> 3);
        unint64_t v87 = &v39[8 * (v82 >> 2)];
        do
        {
          uint64_t v88 = *v84++;
          *(void *)unint64_t v87 = v88;
          v87 += 8;
          v86 -= 8;
        }
        while (v86);
      }
LABEL_29:
      uint64_t v48 = (char *)*a1;
      *a1 = v39;
      a1[1] = v40;
      a1[2] = v6;
      a1[3] = v42;
      if (v48)
      {
        operator delete(v48);
        uint64_t v6 = (char *)a1[2];
      }
      goto LABEL_41;
    }
    goto LABEL_5;
  }
  uint64_t v27 = v24 >> 2;
  if (v19 == v21) {
    unint64_t v28 = 1;
  }
  else {
    unint64_t v28 = v27;
  }
  int v29 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v28);
  uint64_t v31 = v30;
  unsigned int v32 = operator new(0x1000uLL);
  uint64_t v33 = &v29[8 * v23];
  int v34 = &v29[8 * v31];
  if (v23 == v31)
  {
    uint64_t v35 = 8 * v23;
    if (v20 - v22 < 1)
    {
      uint64_t v60 = v35 >> 2;
      if (v20 == v22) {
        unint64_t v61 = 1;
      }
      else {
        unint64_t v61 = v60;
      }
      long long v62 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v61);
      uint64_t v33 = &v62[8 * (v61 >> 2)];
      int v34 = &v62[8 * v63];
      if (v29) {
        operator delete(v29);
      }
      int v29 = v62;
    }
    else
    {
      uint64_t v36 = v35 >> 3;
      if (v36 >= -1) {
        unint64_t v37 = v36 + 1;
      }
      else {
        unint64_t v37 = v36 + 2;
      }
      v33 -= 8 * (v37 >> 1);
    }
  }
  *(void *)uint64_t v33 = v32;
  uint64_t v64 = v33 + 8;
  for (uint64_t i = a1[2]; i != a1[1]; i -= 8)
  {
    if (v33 == v29)
    {
      if (v64 >= v34)
      {
        if (v34 == v29) {
          unint64_t v70 = 1;
        }
        else {
          unint64_t v70 = (v34 - v29) >> 2;
        }
        int v71 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v70);
        uint64_t v73 = v71;
        uint64_t v33 = &v71[(2 * v70 + 6) & 0xFFFFFFFFFFFFFFF8];
        uint64_t v75 = v64 - v29;
        BOOL v74 = v64 == v29;
        uint64_t v64 = v33;
        if (!v74)
        {
          uint64_t v64 = &v33[v75 & 0xFFFFFFFFFFFFFFF8];
          uint64_t v76 = 8 * (v75 >> 3);
          int64x2_t v77 = v33;
          unint64_t v78 = (uint64_t *)v29;
          do
          {
            uint64_t v79 = *v78++;
            *(void *)int64x2_t v77 = v79;
            v77 += 8;
            v76 -= 8;
          }
          while (v76);
        }
        int v34 = &v71[8 * v72];
        if (v29) {
          operator delete(v29);
        }
        int v29 = v73;
      }
      else
      {
        uint64_t v66 = (v34 - v64) >> 3;
        if (v66 >= -1) {
          uint64_t v67 = v66 + 1;
        }
        else {
          uint64_t v67 = v66 + 2;
        }
        uint64_t v68 = v67 >> 1;
        uint64_t v33 = &v29[8 * (v67 >> 1)];
        uint64_t v69 = v29;
        if (v64 != v29)
        {
          memmove(v33, v29, v64 - v29);
          uint64_t v69 = v64;
        }
        uint64_t v64 = &v69[8 * v68];
      }
    }
    uint64_t v80 = *(void *)(i - 8);
    *((void *)v33 - 1) = v80;
    v33 -= 8;
  }
  uint64_t v81 = (char *)*a1;
  *a1 = v29;
  a1[1] = v33;
  a1[2] = v64;
  a1[3] = v34;
  if (v81)
  {
    operator delete(v81);
  }
}

void sub_2223ED714(_Unwind_Exception *a1)
{
  operator delete(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

void *ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}::~signpost_interval(void *a1)
{
  ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(a1 + 3));
  unint64_t v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    BOOL v3 = a1[2];
    if (v3) {
      dispatch_release(v3);
    }
  }
  unint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  return a1;
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C2448;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::string>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C2448;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<std::string>::__on_zero_shared(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

uint64_t dispatch::detail::group_notify<ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1}>(dispatch_group_s *,dispatch_queue_s *,ctu::TrackedGroup::fork(std::string,ctu::os::signpost_interval)::{lambda(void)#1} &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    ctu::os::signpost_interval::~signpost_interval((ctu::os::signpost_interval *)(result + 24));
    unint64_t v2 = *(NSObject **)(v1 + 16);
    if (v2)
    {
      dispatch_group_leave(v2);
      BOOL v3 = *(NSObject **)(v1 + 16);
      if (v3) {
        dispatch_release(v3);
      }
    }
    unint64_t v4 = *(std::__shared_weak_count **)(v1 + 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__function::__value_func<void ()(os_log_s *,unsigned long long)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  BOOL v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    BOOL v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

void *std::__function::__value_func<void ()(os_log_s *,unsigned long long)>::operator=[abi:ne180100](void *a1)
{
  unint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void ctu::os::signpost_interval::~signpost_interval(ctu::os::signpost_interval *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (v2 && *(void *)this)
  {
    uint64_t v3 = *((void *)this + 1);
    uint64_t v7 = *(void *)this;
    uint64_t v8 = v3;
    (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v2 + 48))(v2, &v8, &v7);
  }
  uint64_t v4 = (void *)*((void *)this + 1);
  if (v4) {
    os_release(v4);
  }
  *((void *)this + 1) = 0;
  unint64_t v5 = std::__function::__value_func<void ()(os_log_s *,unsigned long long)>::operator=[abi:ne180100]((void *)this + 2);
  *(void *)this = 0;
  uint64_t v6 = (void *)*((void *)this + 5);
  if (v6 == v5)
  {
    (*(void (**)(void *))(*v5 + 32))(v5);
  }
  else if (v6)
  {
    (*(void (**)(void))(*v6 + 40))(*((void *)this + 5));
  }
}

void std::__tree<std::string>::destroy(char *a1)
{
  if (a1)
  {
    std::__tree<std::string>::destroy(*(void *)a1);
    std::__tree<std::string>::destroy(*((void *)a1 + 1));
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

void std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(void *a1)
{
  if (a1)
  {
    std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(*a1);
    std::__tree<std::__value_type<int,qmi::Client>,std::__map_value_compare<int,std::__value_type<int,qmi::Client>,std::less<int>,true>,std::allocator<std::__value_type<int,qmi::Client>>>::destroy(a1[1]);
    qmi::Client::~Client((qmi::Client *)(a1 + 5));
    operator delete(a1);
  }
}

void **std::__tree<std::string>::find<std::string>(uint64_t a1, void **a2)
{
  uint64_t v2 = (void **)(a1 + 8);
  uint64_t v3 = *(void **)(a1 + 8);
  if (!v3) {
    return v2;
  }
  unint64_t v5 = (void **)(a1 + 8);
  do
  {
    char v6 = std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(v3 + 4, a2);
    if (v6 >= 0) {
      uint64_t v7 = v3;
    }
    else {
      uint64_t v7 = v3 + 1;
    }
    if (v6 >= 0) {
      unint64_t v5 = (void **)v3;
    }
    uint64_t v3 = (void *)*v7;
  }
  while (*v7);
  if (v5 == v2
    || (std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(a2, v5 + 4) & 0x80) != 0)
  {
    return v2;
  }
  return v5;
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>,std::allocator<char>>(void *a1, void **a2)
{
  size_t v2 = *((unsigned __int8 *)a1 + 23);
  size_t v3 = a1[1];
  if ((v2 & 0x80u) != 0)
  {
    a1 = (void *)*a1;
    size_t v2 = v3;
  }
  int v4 = *((char *)a2 + 23);
  if (v4 >= 0) {
    unint64_t v5 = a2;
  }
  else {
    unint64_t v5 = *a2;
  }
  if (v4 >= 0) {
    size_t v6 = *((unsigned __int8 *)a2 + 23);
  }
  else {
    size_t v6 = (size_t)a2[1];
  }
  return std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(a1, v2, v5, v6);
}

uint64_t std::operator<=>[abi:ne180100]<char,std::char_traits<char>>(const void *a1, size_t a2, void *__s2, size_t a4)
{
  if (a4 >= a2) {
    size_t v7 = a2;
  }
  else {
    size_t v7 = a4;
  }
  int v8 = memcmp(a1, __s2, v7);
  if (v8)
  {
    if ((v8 & 0x80000000) == 0) {
      return 1;
    }
  }
  else
  {
    if (a2 == a4) {
      return 0;
    }
    if (a2 >= a4) {
      return 1;
    }
  }
  return 255;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds11EventReport10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EDD18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds15LTEAttachParams10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EDE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds13FDBackoffTime10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EDF20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds6TdInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EE024(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds9RouteInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EE128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds16PduSessionLookup10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EE22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds10Congestion10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EE330(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3wds8WakeUpAp10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    size_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      size_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EE434(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::FrameList>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 17)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C24B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C24B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FrameList>((void *)(a1 + 16));
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::FrameList>(a2, (long long **)(a1 + 16));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FrameList>::clone()
{
}

void sub_2223EE7E4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::NumFrames>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 16)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NumFrames>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Enable>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  __n128 result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Enable>::clone()
{
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::DormancyStatus,void({block_pointer}&)(wds::tlv::DormancyStatus const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    tlv::parseV<wds::tlv::DormancyStatus>((unint64_t *)&v12, v7);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::CurrentDataBearerTech,void({block_pointer}&)(wds::tlv::CurrentDataBearerTech&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    tlv::parseV<wds::tlv::CurrentDataBearerTech>((unint64_t *)&v12, v7);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DataSystemStatus,void({block_pointer}&)(wds::tlv::DataSystemStatus const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v8 = TlvValue;
    int v9 = v7;
    uint64_t v15 = TlvValue;
    *(_OWORD *)std::string __p = 0u;
    long long v14 = 0u;
    tlv::parseV<wds::tlv::DataSystemStatus>(&v15, v7, __p);
    uint64_t v10 = v15;
    if (v15) {
      (*(void (**)(void))(*(void *)a3 + 16))();
    }
    if (__p[1])
    {
      *(void **)&long long v14 = __p[1];
      operator delete(__p[1]);
    }
    if (!v10)
    {
      uint64_t v11 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v12 = *(unsigned __int16 *)a1;
      v11(v12, a2, v8, v9);
    }
  }
}

void sub_2223EEF68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<wds::tlv::AttachParamsAPN,void({block_pointer}&)(wds::tlv::AttachParamsAPN const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (std::string::value_type *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    size_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v12 = TlvValue;
    memset(&__p, 0, sizeof(__p));
    tlv::parseV<wds::tlv::AttachParamsAPN>(&v12, v5, &__p);
    uint64_t v8 = v12;
    if (v12) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__p.__r_.__value_.__l.__data_);
      if (v8) {
        return;
      }
    }
    else if (v8)
    {
      return;
    }
    int v9 = (void (*)(uint64_t, uint64_t, std::string::value_type *, void))*MEMORY[0x263F8BD78];
    uint64_t v10 = *(unsigned __int16 *)a1;
    v9(v10, 16, v6, v7);
  }
}

void sub_2223EF060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPType,void({block_pointer}&)(wds::tlv::AttachParamsIPType const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::AttachParamsIPType>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 17, v6, v7);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Addr const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    tlv::parseV<wds::tlv::AttachParamsIPv4Addr>((unint64_t *)&v12, v7);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Gateway const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    tlv::parseV<wds::tlv::AttachParamsIPv4Gateway>((unint64_t *)&v12, v7);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv4Mask,void({block_pointer}&)(wds::tlv::AttachParamsIPv4Mask const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    tlv::parseV<wds::tlv::AttachParamsIPv4Mask>((unint64_t *)&v12, v7);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Addr,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Addr const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
    tlv::parseV<wds::tlv::AttachParamsIPv6Addr>((unint64_t *)&v12, v7, (uint64_t)v13);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::AttachParamsIPv6Gateway,void({block_pointer}&)(wds::tlv::AttachParamsIPv6Gateway const&)>(qmi::MessageBase *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v8 = result;
    int v9 = v7;
    uint64_t v12 = result;
    v13[0] = 0;
    v13[1] = 0;
    char v14 = 0;
    tlv::parseV<wds::tlv::AttachParamsIPv6Gateway>((unint64_t *)&v12, v7, (uint64_t)v13);
    if (v12)
    {
      return (*(uint64_t (**)(void))(*(void *)a3 + 16))();
    }
    else
    {
      uint64_t v10 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v11 = *(unsigned __int16 *)a1;
      return v10(v11, a2, v8, v9);
    }
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::ReportDormancyStatus>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::ReportDormancyStatus>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDormancyStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportCurrentDataBearerTech>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSystemStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataTransmitSpeed>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14SetEventReport8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EFB8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17GetDormancyStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EFC90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds24GetCurrentDataBearerTech8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223EFD94(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportLTEAttachParams>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportThroughput>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportFDBackoffTime>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportTdInfo>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportRouteInfo>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportDataSubCongestion>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<wds::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_2223F0334(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void cast_message_type<wds::IndicationRegister::Response const&>::cast(uint64_t a1@<X0>, qmi::ResponseBase *a2@<X8>)
{
  if (*(_DWORD *)(a1 + 40) != 1 || *(_WORD *)(a1 + 44) == 3)
  {
    std::string __p = 0;
    uint64_t v5 = 0;
    uint64_t v6 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, (QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(a2, __p);
    if (__p)
    {
      uint64_t v5 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError((QMIServiceMsg *)a1);
    qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response((uint64_t)a2);
  }
}

void sub_2223F03E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(uint64_t a1)
{
  uint64_t v2 = (qmi::MessageBase *)qmi::MessageBase::MessageBase();
  qmi::MessageBase::validateMsgId(v2);
  return a1;
}

void sub_2223F0434(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

qmi::ResponseBase *qmi::Response<(unsigned short)3,wds::IndicationRegister::ResponseTLVList>::Response(qmi::ResponseBase *a1, const void *a2)
{
  char v3 = (qmi::MessageBase *)qmi::ResponseBase::ResponseBase(a1, a2);
  qmi::MessageBase::validateMsgId(v3);
  return a1;
}

void sub_2223F0478(_Unwind_Exception *a1)
{
  qmi::MessageBase::~MessageBase(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ReportInterval>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds27SetThroughputInfoIndFreqReq8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F0630(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds18GetLTEAttachParams8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F0734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ProfileIdentifier>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds14ReadMIPProfile8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F0910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds26GetCurrentDataSystemStatus8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F0A14(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

double std::deque<dispatch::group_session>::__move_assign(void *a1, uint64_t a2)
{
  uint64_t v4 = (void **)a1[1];
  uint64_t v5 = a1[2];
  if ((void **)v5 == v4)
  {
    uint64_t v6 = a1 + 5;
    uint64_t v5 = a1[1];
  }
  else
  {
    uint64_t v6 = a1 + 5;
    unint64_t v7 = a1[4];
    uint64_t v8 = &v4[v7 >> 9];
    int v9 = (NSObject **)((char *)*v8 + 8 * (v7 & 0x1FF));
    uint64_t v10 = *(uint64_t *)((char *)v4 + (((a1[5] + v7) >> 6) & 0x3FFFFFFFFFFFFF8)) + 8 * ((a1[5] + v7) & 0x1FF);
    if (v9 != (NSObject **)v10)
    {
      do
      {
        std::__destroy_at[abi:ne180100]<dispatch::group_session,0>(v9++);
        if ((char *)v9 - (unsigned char *)*v8 == 4096)
        {
          uint64_t v11 = (NSObject **)v8[1];
          ++v8;
          int v9 = v11;
        }
      }
      while (v9 != (NSObject **)v10);
      uint64_t v4 = (void **)a1[1];
      uint64_t v5 = a1[2];
    }
  }
  *uint64_t v6 = 0;
  unint64_t v12 = v5 - (void)v4;
  if ((unint64_t)(v5 - (void)v4) >= 0x11)
  {
    do
    {
      operator delete(*v4);
      uint64_t v5 = a1[2];
      uint64_t v4 = (void **)(a1[1] + 8);
      a1[1] = v4;
      unint64_t v12 = v5 - (void)v4;
    }
    while ((unint64_t)(v5 - (void)v4) > 0x10);
  }
  unint64_t v13 = v12 >> 3;
  if (v13 == 1)
  {
    uint64_t v14 = 256;
  }
  else
  {
    if (v13 != 2) {
      goto LABEL_15;
    }
    uint64_t v14 = 512;
  }
  a1[4] = v14;
LABEL_15:
  if (a1[5])
  {
    if (a1[4] >= 0x200uLL)
    {
      operator delete(*v4);
      a1[1] += 8;
      a1[4] -= 512;
    }
    std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](a1, 0);
  }
  else
  {
    if ((void **)v5 != v4)
    {
      do
      {
        operator delete(*(void **)(v5 - 8));
        uint64_t v15 = a1[1];
        uint64_t v5 = a1[2] - 8;
        a1[2] = v5;
      }
      while (v5 != v15);
    }
    a1[4] = 0;
  }
  std::__split_buffer<dispatch::group_session *>::shrink_to_fit((void **)a1);
  uint64_t v17 = a1[1];
  uint64_t v16 = a1[2];
  if (v16 != v17) {
    a1[2] = v16 + ((v17 - v16 + 7) & 0xFFFFFFFFFFFFFFF8);
  }
  std::__split_buffer<dispatch::group_session *>::shrink_to_fit((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  uint64_t v18 = *(void *)(a2 + 32);
  a1[3] = *(void *)(a2 + 24);
  double result = 0.0;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  a1[4] = v18;
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  return result;
}

void std::deque<dispatch::group_session>::__maybe_remove_back_spare[abi:ne180100](void *a1, char a2)
{
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  if (v3 == v4) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = ((v3 - v4) << 6) - 1;
  }
  unint64_t v6 = v5 - (a1[5] + a1[4]);
  if (v6 < 0x200) {
    a2 = 1;
  }
  if (v6 > 0x3FF || (a2 & 1) == 0)
  {
    operator delete(*(void **)(v3 - 8));
    a1[2] -= 8;
  }
}

void std::__split_buffer<dispatch::group_session *>::shrink_to_fit(void **a1)
{
  uint64_t v2 = a1[2];
  uint64_t v3 = a1[1];
  uint64_t v4 = (unsigned char *)a1[3] - (unsigned char *)*a1;
  unint64_t v5 = (v2 - v3) >> 3;
  if (v5 >= v4 >> 3) {
    return;
  }
  if (v2 == v3)
  {
    int v9 = 0;
    unint64_t v6 = 0;
    goto LABEL_8;
  }
  unint64_t v6 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v5);
  unint64_t v7 = a1[1];
  uint64_t v2 = a1[2];
  int v9 = &v6[8 * v8];
  uint64_t v10 = v2 - v7;
  if (v2 == v7)
  {
LABEL_8:
    unint64_t v13 = v2;
    goto LABEL_9;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 8 * (v10 >> 3);
  do
  {
    *(void *)&v6[v11] = *(void *)&v7[v11];
    v11 += 8;
  }
  while (v12 != v11);
  uint64_t v2 = a1[1];
  unint64_t v13 = a1[2];
LABEL_9:
  int64_t v14 = v13 - v2;
  uint64_t v15 = *a1;
  *a1 = v6;
  a1[1] = v6;
  a1[2] = &v6[v14];
  a1[3] = v9;
  if (v15)
  {
    operator delete(v15);
  }
}

void *___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE20execute_wrapped_syncIU13block_pointerFbvEEEDTclsr8dispatchE4syncLDnEclsr3stdE7forwardIT_Efp_EEEOS6__block_invoke(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t ___ZN8dispatch9sync_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

uint64_t ___ZN8dispatch19async_and_wait_implIRU13block_pointerFbvEEENSt3__15decayIDTclfp0_EEE4typeEP16dispatch_queue_sOT_NS4_17integral_constantIbLb0EEE_block_invoke(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(unsigned char **)(a1 + 32) = result;
  return result;
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C2948;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C2948;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_emplace<ctu::TrackedGroup>::__on_zero_shared(void *a1)
{
  uint64_t v2 = a1[4];
  if (v2)
  {
    uint64_t v3 = a1[5];
    uint64_t v4 = (void *)a1[4];
    if (v3 != v2)
    {
      do
      {
        unint64_t v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          std::__shared_weak_count::__release_weak(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[4];
    }
    a1[5] = v2;
    operator delete(v4);
  }
  unint64_t v6 = a1[3];
  if (v6)
  {
    dispatch_release(v6);
  }
}

uint64_t *std::unique_ptr<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0,std::default_delete<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 16);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    MEMORY[0x223C9A950](v2, 0x20C40960023A9);
  }
  return a1;
}

uint64_t *dispatch::detail::group_notify<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>(dispatch_group_s *,dispatch_queue_s *,QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(void *a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v8 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (a1[1])
      {
        unint64_t v6 = *(NSObject **)(v3 + 96);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          uint64_t v10 = "operator()";
          _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: Sleep group done, we clear everything", buf, 0xCu);
        }
        QMIDataCommandDriver::QMIClientsInfo::resetSleepMode(*(QMIDataCommandDriver::QMIClientsInfo **)(v3 + 336));
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::unique_ptr<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0,std::default_delete<QMIDataCommandDriver::handleWDSEnterLowPower_sync(char const*,BOOL,dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  unint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::MsgVersion>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  unint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallApp>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  unint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoIPCallState>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  unint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::VoipCallType>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds11VoIPAppInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F1468(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceStatus>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C2B40;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C2B40;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Dnn>(a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)*a2 - v5;
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_NAI>::clone()
{
}

void sub_2223F1730(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C2B90;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C2B90;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Dnn>(a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)*a2 - v5;
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_Password>::clone()
{
}

void sub_2223F1904(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SIP_EncryptRequired>::clone()
{
}

uint64_t **std::__tree<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::__map_value_compare<unsigned int,std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>,std::less<unsigned int>,true>,std::allocator<std::__value_type<unsigned int,QMIDataCommandDriver::QosFlowItem>>>::__emplace_unique_key_args<unsigned int,std::piecewise_construct_t const&,std::tuple<unsigned int const&>,std::tuple<>>(uint64_t **a1, unsigned int a2, _DWORD *a3)
{
  unint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unsigned int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        unint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        unint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = a1 + 1;
LABEL_9:
    int v9 = (uint64_t *)v7;
    uint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    void v7[6] = 0;
    v7[7] = 0;
    void v7[5] = 0;
    *uint64_t v7 = 0;
    v7[1] = 0;
    _DWORD v7[2] = v9;
    *unint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::PduSessionId>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::PduSessionId>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::PduSessionId>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PduSessionId>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16FreePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F1E50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ServiceAction>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds17NotifyDataService8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F210C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds20AllocatePduSessionId8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F2210(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t ___ZNK3ctu20SharedSynchronizableI20QMIDataCommandDriverE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIK20QMIDataCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c49_ZTSNSt3__110shared_ptrIK20QMIDataCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CurrentDataSub>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SwitchReason>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::CellularDataStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SliceInstalled>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PhsStatus>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PrioritizePsData>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::getSize()
{
  return tlv::size<wds::tlv::RequestedBitrate>();
}

uint64_t *qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LinkStat>(a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::LinkStat>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds9GetTdInfo8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F2948(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t std::__function::__value_func<void ()(std::string const&)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void std::deque<std::pair<TrafficDescriptor,std::function<void ()(std::string const&)>>>::pop_front(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + ((*(void *)(a1 + 32) >> 1) & 0x7FFFFFFFFFFFFFF8))
     + 336 * (*(void *)(a1 + 32) & 0xFLL);
  std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(v2 + 304));
  MEMORY[0x223C99360](v2);
  int64x2_t v3 = vaddq_s64(*(int64x2_t *)(a1 + 32), (int64x2_t)xmmword_222573CE0);
  *(int64x2_t *)(a1 + 32) = v3;
  if (v3.i64[0] >= 0x20uLL)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 16;
  }
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::InputTransactionId>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::TdFragmentInfo>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::TdFragmentInfo>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C3028;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C3028;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Dnn>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  uint64_t result = tlv::writeV<wds::tlv::Dnn>(a2, (void *)(a1 + 16));
  uint64_t v7 = (char *)*a2 - v5;
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Dnn>::clone()
{
}

void sub_2223F2EA8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C3078;
  char v3 = (void **)(a1 + 16);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4C3078;
  char v3 = (void **)(a1 + 16);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::AppList>((uint64_t *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::AppList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::AppList>::clone()
{
}

void sub_2223F30B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 24) = v10;
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x223C9A950](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::AppInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x555555555555556) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::AppInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[48 * v4];
  return result;
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v11 = a4;
  uint64_t v12 = a4;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      long long v7 = *v6;
      *(unsigned char *)(v4 + 16) = *((unsigned char *)v6 + 16);
      *(_OWORD *)uint64_t v4 = v7;
      *(void *)(v4 + 32) = 0;
      *(void *)(v4 + 40) = 0;
      *(void *)(v4 + 24) = 0;
      std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>((void *)(v4 + 24), *((const void **)v6 + 3), *((void *)v6 + 4), *((void *)v6 + 4) - *((void *)v6 + 3));
      uint64_t v4 = v12 + 48;
      v12 += 48;
      v6 += 3;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2223F31E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 48)
    {
      uint64_t v5 = *(void **)(i - 24);
      if (v5)
      {
        *(void *)(i - 16) = v5;
        operator delete(v5);
      }
    }
  }
  return a1;
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C30C8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4C30C8;
  uint64_t v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FqdnList>((uint64_t *)(a1 + 16));
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  uint64_t result = tlv::writeV<wds::tlv::FqdnList>(a2, (_DWORD *)(a1 + 16));
  long long v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FqdnList>::clone()
{
}

void sub_2223F3444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 24) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x223C9A950](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      unint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2223F3578(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 24)
    {
      if (*(char *)(i - 1) < 0) {
        operator delete(*(void **)(i - 24));
      }
    }
  }
  return a1;
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3118;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3118;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Ipv4AddrList>((void *)(a1 + 16));
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Ipv4AddrList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  long long v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv4AddrList>::clone()
{
}

void sub_2223F37C8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::Ipv6AddrList>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 21)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 16;
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3168;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3168;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::Ipv6AddrList>((void *)(a1 + 16));
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Ipv6AddrList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  long long v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::Ipv6AddrList>::clone()
{
}

void sub_2223F3BA0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

char *std::vector<wds::tlv::Ipv6AddrInfo>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0xF0F0F0F0F0F0F10) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv6AddrInfo>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[17 * v4];
  return result;
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C31B8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C31B8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::DestPortList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  long long v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortList>::clone()
{
}

void sub_2223F3DC4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3208;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3208;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::DestPortRangeList>((void *)(a1 + 16));
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::DestPortRangeList>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  long long v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DestPortRangeList>::clone()
{
}

void sub_2223F3FC4(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3258;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C3258;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::NextHdrProtList>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::NextHdrProtList>((unsigned char **)a2, a1 + 16);
  long long v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::NextHdrProtList>::clone()
{
}

void sub_2223F4194(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C3290;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C3290;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void *std::__shared_ptr_emplace<std::pair<unsigned short,std::function<void ()(std::string const&)>>>::__on_zero_shared(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::string const&)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3wds16PduSessionLookup8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    unint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      unint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223F42FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t __Block_byref_object_copy__633(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t __Block_byref_object_copy__637(uint64_t result, uint64_t a2)
{
  *(_DWORD *)(result + 40) = *(_DWORD *)(a2 + 40);
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_639(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 40) = *a2;
  return result;
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::emplace_back<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>(int64x2_t *a1, uint64_t a2)
{
  uint64_t v4 = a1 + 1;
  unint64_t v5 = a1[1].u64[0];
  unint64_t v6 = (void *)a1->i64[1];
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v6 - a1->i64[0]) >> 6);
    if (v9 + 1 > 0x155555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - a1->i64[0]) >> 6);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0xAAAAAAAAAAAAAALL) {
      unint64_t v12 = 0x155555555555555;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t v24 = (uint64_t *)v4;
    if (v12)
    {
      int64_t v14 = std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(v12);
    }
    else
    {
      int64_t v14 = 0;
      uint64_t v13 = 0;
    }
    uint64_t v15 = (char *)&v14[24 * v13];
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(&v14[24 * v9], a2);
    uint64_t v8 = v16 + 192;
    uint64_t v18 = a1->i64[0];
    unint64_t v17 = a1->u64[1];
    if (v17 == a1->i64[0])
    {
      int64x2_t v19 = vdupq_n_s64(v17);
    }
    else
    {
      do
      {
        v17 -= 192;
        std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>((void *)(v16 - 192), v17);
      }
      while (v17 != v18);
      int64x2_t v19 = *a1;
    }
    a1->i64[0] = v16;
    a1->i64[1] = v8;
    int64x2_t v22 = v19;
    uint64_t v20 = a1[1].i64[0];
    a1[1].i64[0] = (uint64_t)v15;
    uint64_t v23 = v20;
    uint64_t v21 = v19.i64[0];
    std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer((uint64_t)&v21);
  }
  else
  {
    std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v6, a2);
    uint64_t v8 = v7 + 192;
  }
  a1->i64[1] = v8;
}

uint64_t *std::map<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>::at(uint64_t **a1, unsigned __int16 a2)
{
  if (!a1) {
LABEL_7:
  }
    std::__throw_out_of_range[abi:ne180100]("map::at:  key not found");
  while (1)
  {
    while (1)
    {
      unsigned int v2 = *((unsigned __int16 *)a1 + 16);
      if (v2 <= a2) {
        break;
      }
      a1 = (uint64_t **)*a1;
      if (!a1) {
        goto LABEL_7;
      }
    }
    if (v2 >= a2) {
      return (uint64_t *)(a1 + 5);
    }
    a1 = (uint64_t **)a1[1];
    if (!a1) {
      goto LABEL_7;
    }
  }
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_642(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

__n128 __Block_byref_object_copy__645(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__646(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_647(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

__n128 __Block_byref_object_copy__649(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__650(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_651(uint64_t a1, long long **a2)
{
  uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2 != (uint64_t *)a2) {
    std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_653(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

__n128 __Block_byref_object_copy__655(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__656(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v1);
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_657(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

__n128 __Block_byref_object_copy__659(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__660(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_661(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::Ipv4AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv4AddrInfo*,wds::tlv::Ipv4AddrInfo*>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

__n128 __Block_byref_object_copy__663(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__664(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_665(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::Ipv6AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv6AddrInfo*,wds::tlv::Ipv6AddrInfo*>(result, *(char **)a2, *(void *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * (*(void *)(a2 + 8) - *(void *)a2));
  }
  return result;
}

__n128 __Block_byref_object_copy__667(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__668(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_669(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

__n128 __Block_byref_object_copy__671(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__672(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_673(uint64_t a1, uint64_t a2)
{
  __n128 result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::DestPortRangeInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DestPortRangeInfo*,wds::tlv::DestPortRangeInfo*>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

__n128 __Block_byref_object_copy__675(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__676(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

char **___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds6TdInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_23handleWdsTdInfoInd_syncERKS3_E3__0ZNS4_23handleWdsTdInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_677(uint64_t a1, char **a2)
{
  __n128 result = (char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != a2) {
    return (char **)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(result, *a2, a2[1], a2[1] - *a2);
  }
  return result;
}

std::string *std::optional<std::string>::operator=[abi:ne180100]<std::string const&,void>(std::string *this, const std::string *a2)
{
  if (this[1].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(this, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::__init_copy_ctor_external(this, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v3 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      this->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&this->__r_.__value_.__l.__data_ = v3;
    }
    this[1].__r_.__value_.__s.__data_[0] = 1;
  }
  return this;
}

CSIPacketAddress *std::optional<CSIPacketAddress>::operator=[abi:ne180100]<CSIPacketAddress const&,void>(CSIPacketAddress *this, const CSIPacketAddress *a2)
{
  if (*((unsigned char *)this + 24))
  {
    CSIPacketAddress::operator=();
  }
  else
  {
    CSIPacketAddress::CSIPacketAddress(this, a2);
    *((unsigned char *)this + 24) = 1;
  }
  return this;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TransactionInfo,void({block_pointer}&)(wds::tlv::TransactionInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::TransactionInfo>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 1, v6, v7);
    }
  }
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TdFragmentInfo,void({block_pointer}&)(wds::tlv::TdFragmentInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::TdFragmentInfo>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    else
    {
      uint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 2, v6, v7);
    }
  }
  return result;
}

void std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__erase_unique<unsigned short>(uint64_t **a1, unsigned __int16 a2)
{
  uint64_t v4 = (uint64_t *)(a1 + 1);
  long long v3 = a1[1];
  if (v3)
  {
    int v5 = v4;
    uint64_t v6 = v3;
    do
    {
      unsigned int v7 = *((unsigned __int16 *)v6 + 16);
      BOOL v8 = v7 >= a2;
      if (v7 >= a2) {
        uint64_t v9 = (uint64_t **)v6;
      }
      else {
        uint64_t v9 = (uint64_t **)(v6 + 1);
      }
      if (v8) {
        int v5 = v6;
      }
      uint64_t v6 = *v9;
    }
    while (*v9);
    if (v5 != v4 && *((unsigned __int16 *)v5 + 16) <= a2)
    {
      uint64_t v10 = (uint64_t *)v5[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
      }
      else
      {
        unint64_t v12 = v5;
        do
        {
          uint64_t v11 = (uint64_t *)v12[2];
          BOOL v13 = *v11 == (void)v12;
          unint64_t v12 = v11;
        }
        while (!v13);
      }
      if (*a1 == v5) {
        *a1 = v11;
      }
      a1[2] = (uint64_t *)((char *)a1[2] - 1);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v3, v5);
      int64_t v14 = (void **)(v5 + 7);
      std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__destroy_vector::operator()[abi:ne180100](&v14);
      operator delete(v5);
    }
  }
}

__n128 std::construct_at[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(void *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  *(_OWORD *)a1 = *(_OWORD *)a2;
  a1[2] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[3] = 0;
  a1[4] = 0;
  a1[5] = 0;
  *(_OWORD *)(a1 + 3) = *(_OWORD *)(a2 + 24);
  a1[5] = *(void *)(a2 + 40);
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 32) = 0;
  *(void *)(a2 + 40) = 0;
  a1[6] = 0;
  a1[7] = 0;
  a1[8] = 0;
  *((_OWORD *)a1 + 3) = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 64) = 0;
  a1[9] = 0;
  a1[10] = 0;
  a1[11] = 0;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 72);
  a1[11] = *(void *)(a2 + 88);
  *(void *)(a2 + 72) = 0;
  *(void *)(a2 + 80) = 0;
  *(void *)(a2 + 88) = 0;
  a1[12] = 0;
  a1[13] = 0;
  a1[14] = 0;
  *((_OWORD *)a1 + 6) = *(_OWORD *)(a2 + 96);
  a1[14] = *(void *)(a2 + 112);
  *(void *)(a2 + 96) = 0;
  *(void *)(a2 + 104) = 0;
  *(void *)(a2 + 112) = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[17] = 0;
  *(_OWORD *)(a1 + 15) = *(_OWORD *)(a2 + 120);
  a1[17] = *(void *)(a2 + 136);
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 136) = 0;
  a1[18] = 0;
  a1[19] = 0;
  a1[20] = 0;
  *((_OWORD *)a1 + 9) = *(_OWORD *)(a2 + 144);
  a1[20] = *(void *)(a2 + 160);
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 160) = 0;
  a1[21] = 0;
  a1[22] = 0;
  a1[23] = 0;
  __n128 result = *(__n128 *)(a2 + 168);
  *(__n128 *)(a1 + 21) = result;
  a1[23] = *(void *)(a2 + 184);
  *(void *)(a2 + 168) = 0;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(unint64_t a1)
{
  if (a1 >= 0x155555555555556) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(192 * a1);
}

uint64_t std::__split_buffer<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 192;
    QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(i - 192));
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *std::__tree<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,QMIDataCommandDriver::TrafficInfo::TransactionInfo>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short const&>,std::tuple<>>(uint64_t **a1, unsigned __int16 a2, _WORD *a3)
{
  uint64_t v6 = a1 + 1;
  int v5 = (unsigned __int16 *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unsigned int v7 = (char *)v5;
        unsigned int v8 = v5[16];
        if (v8 <= a2) {
          break;
        }
        int v5 = *(unsigned __int16 **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      int v5 = (unsigned __int16 *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    unsigned int v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    unsigned int v7 = (char *)operator new(0x50uLL);
    *((_WORD *)v7 + 16) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *((void *)v7 + 9) = 0;
    *(void *)unsigned int v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    *uint64_t v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void std::vector<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>::__assign_with_size[abi:ne180100]<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v9 = *(std::vector<std::string> **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 6) < a4)
  {
    if (v9)
    {
      uint64_t v10 = *(std::vector<std::string> **)(a1 + 8);
      uint64_t v11 = v9;
      if (v10 != v9)
      {
        do
          QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)&v10[-8]);
        while (v10 != v9);
        uint64_t v11 = *(std::vector<std::string> **)a1;
      }
      *(void *)(a1 + 8) = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0x155555555555555) {
      goto LABEL_22;
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 6);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0xAAAAAAAAAAAAAALL ? 0x155555555555555 : v13;
    if (v14 > 0x155555555555555) {
LABEL_22:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t v15 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>>(v14);
    *(void *)a1 = v15;
    *(void *)(a1 + 8) = v15;
    *(void *)(a1 + 16) = &v15[192 * v16];
    uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(a2, a3, (uint64_t)v15);
    goto LABEL_17;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6) < a4)
  {
    uint64_t v18 = a2 + ((uint64_t)(*(void *)(a1 + 8) - (void)v9) >> 6 << 6);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(a2, v18, v9);
    uint64_t v17 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(v18, a3, *(void *)(a1 + 8));
LABEL_17:
    *(void *)(a1 + 8) = v17;
    return;
  }
  int64x2_t v19 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(a2, a3, v9);
  for (uint64_t i = *(std::vector<std::string> **)(a1 + 8);
        i != v19;
  *(void *)(a1 + 8) = v19;
}

void sub_2223F5024(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F502C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = 0;
    do
    {
      uint64_t v6 = (void *)(a3 + v5);
      uint64_t v7 = a1 + v5;
      *uint64_t v6 = 0;
      v6[1] = 0;
      _DWORD v6[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>((std::string *)(a3 + v5), *(long long **)(a1 + v5), *(long long **)(a1 + v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + v5 + 8) - *(void *)(a1 + v5)) >> 3));
      void v6[3] = 0;
      _OWORD v6[4] = 0;
      uint64_t v8 = (std::string *)(a3 + v5 + 24);
      v8->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v8, *(long long **)(v7 + 24), *(long long **)(v7 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 32) - *(void *)(v7 + 24)) >> 3));
      uint64_t v9 = a3 + v5;
      uint64_t v10 = a3 + v5;
      *(void *)(v10 + 48) = 0;
      *(void *)(v10 + 56) = 0;
      uint64_t v11 = (std::string *)(a3 + v5 + 48);
      v11->__r_.__value_.__r.__words[2] = 0;
      std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(v11, *(long long **)(v7 + 48), *(long long **)(v7 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v7 + 56) - *(void *)(v7 + 48)) >> 3));
      *(void *)(v9 + 72) = 0;
      *(void *)(v9 + 80) = 0;
      unint64_t v12 = (void *)(a3 + v5 + 72);
      *(void *)(a3 + v5 + 88) = 0;
      uint64_t v13 = *(void *)(a1 + v5 + 72);
      uint64_t v14 = *(void *)(a1 + v5 + 80);
      if (v14 != v13)
      {
        std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](v12, 0xAAAAAAAAAAAAAAABLL * ((v14 - v13) >> 3));
        std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>((uint64_t)v12, v13, v14);
      }
      uint64_t v15 = a3 + v5;
      uint64_t v16 = a3 + v5;
      *(void *)(v16 + 96) = 0;
      *(void *)(v16 + 104) = 0;
      uint64_t v17 = (void *)(a3 + v5 + 96);
      void v17[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v17, *(const void **)(v7 + 96), *(void *)(v7 + 104), (uint64_t)(*(void *)(v7 + 104) - *(void *)(v7 + 96)) >> 1);
      *(void *)(v15 + 120) = 0;
      *(void *)(v15 + 128) = 0;
      uint64_t v18 = a3 + v5 + 120;
      *(void *)(v18 + 16) = 0;
      std::vector<std::pair<unsigned short,unsigned short>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>*>((char *)v18, *(int **)(v7 + 120), *(int **)(v7 + 128), (uint64_t)(*(void *)(v7 + 128) - *(void *)(v7 + 120)) >> 2);
      uint64_t v19 = a3 + v5;
      uint64_t v20 = a3 + v5;
      *(void *)(v20 + 144) = 0;
      *(void *)(v20 + 152) = 0;
      uint64_t v21 = (void *)(a3 + v5 + 144);
      v21[2] = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(v21, *(const void **)(v7 + 144), *(void *)(v7 + 152), (uint64_t)(*(void *)(v7 + 152) - *(void *)(v7 + 144)) >> 1);
      *(void *)(v19 + 168) = 0;
      *(void *)(v19 + 176) = 0;
      *(void *)(a3 + v5 + 184) = 0;
      uint64_t v23 = *(unsigned char **)(v7 + 168);
      int64x2_t v22 = *(unsigned char **)(v7 + 176);
      int64_t v24 = v22 - v23;
      if (v22 != v23)
      {
        std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100]((void *)(a3 + v5 + 168), v24 >> 3);
        uint64_t v25 = *(char **)(a3 + v5 + 176);
        memmove(v25, v23, v24);
        *(void *)(a3 + v5 + 176) = &v25[8 * (v24 >> 3)];
      }
      v5 += 192;
    }
    while (v7 + 192 != a2);
    a3 += v5;
  }
  return a3;
}

void sub_2223F51F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  uint64_t v13 = v10 + v11;
  uint64_t v14 = *(void **)(v10 + v11 + 168);
  if (v14)
  {
    *(void *)(v13 + 176) = v14;
    operator delete(v14);
  }
  uint64_t v15 = *(void **)(v13 + 144);
  if (v15)
  {
    *(void *)(v10 + v11 + 152) = v15;
    operator delete(v15);
  }
  uint64_t v16 = *(void **)(v10 + v11 + 120);
  if (v16)
  {
    *(void *)(v10 + v11 + 128) = v16;
    operator delete(v16);
  }
  uint64_t v17 = *(void **)(v10 + v11 + 96);
  if (v17)
  {
    *(void *)(v10 + v11 + 104) = v17;
    operator delete(v17);
  }
  uint64_t v18 = *(void **)(v10 + v11 + 72);
  if (v18)
  {
    *(void *)(v10 + v11 + 80) = v18;
    operator delete(v18);
  }
  a10 = (void **)(v10 + v11 + 48);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + v11 + 24);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  a10 = (void **)(v10 + v11);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a10);
  if (v11)
  {
    uint64_t v19 = v10 - 192;
    do
    {
      QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor::~MulTrafficDescriptor((QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *)(v19 + v11));
      v11 -= 192;
    }
    while (v11);
  }
  _Unwind_Resume(a1);
}

std::string *std::vector<std::string>::__init_with_size[abi:ne180100]<std::string*,std::string*>(std::string *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](result, a4);
    __n128 result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)&v6->__r_.__value_.__r.__words[2], a2, a3, (std::string *)v6->__r_.__value_.__l.__size_);
    v6->__r_.__value_.__l.__size_ = (std::string::size_type)result;
  }
  return result;
}

void sub_2223F5354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  uint64_t v11 = this;
  unint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      unint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2223F541C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](a1);
  }
  return a1;
}

void std::_AllocatorDestroyRangeReverse<std::allocator<std::string>,std::string*>::operator()[abi:ne180100](uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 24;
  }
}

void std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(v4 + v7), (const CSIPacketAddress *)(a2 + v7));
      v7 += 24;
    }
    while (a2 + v7 != a3);
    v4 += v7;
  }
  *(void *)(a1 + 8) = v4;
}

void sub_2223F551C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

char *std::vector<std::pair<unsigned short,unsigned short>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>*>(char *result, int *a2, int *a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    __n128 result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = (_DWORD *)*((void *)v6 + 1);
    while (a2 != a3)
    {
      int v8 = *a2++;
      *v7++ = v8;
    }
    *((void *)v6 + 1) = v7;
  }
  return result;
}

void sub_2223F557C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

std::vector<std::string> *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,QMIDataCommandDriver::TrafficInfo::TransactionInfo::MulTrafficDescriptor *,0>(uint64_t a1, uint64_t a2, std::vector<std::string> *this)
{
  if (a1 != a2)
  {
    uint64_t v4 = a2;
    uint64_t v5 = a1;
    while (this == (std::vector<std::string> *)v5)
    {
LABEL_63:
      v5 += 192;
      this += 8;
      if (v5 == v4) {
        return this;
      }
    }
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this, *(std::string **)v5, *(long long **)(v5 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 8) - *(void *)v5) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this + 1, *(std::string **)(v5 + 24), *(long long **)(v5 + 32), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 32) - *(void *)(v5 + 24)) >> 3));
    std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(this + 2, *(std::string **)(v5 + 48), *(long long **)(v5 + 56), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v5 + 56) - *(void *)(v5 + 48)) >> 3));
    begiuint64_t n = this[3].__begin_;
    uint64_t v8 = *(void *)(v5 + 72);
    uint64_t v7 = *(void *)(v5 + 80);
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
    value = this[3].__end_cap_.__value_;
    if (0xAAAAAAAAAAAAAAABLL * (((char *)value - (char *)begin) >> 3) >= v9)
    {
      if (0xAAAAAAAAAAAAAAABLL * (((char *)this[3].__end_ - (char *)begin) >> 3) >= v9)
      {
        this[3].__end_ = (std::vector<std::string>::pointer)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(*(void *)(v5 + 72), *(void *)(v5 + 80), (uint64_t)begin);
LABEL_18:
        std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)&this[4], *(char **)(v5 + 96), *(void *)(v5 + 104), (uint64_t)(*(void *)(v5 + 104) - *(void *)(v5 + 96)) >> 1);
        std::vector<std::string>::pointer v17 = this[5].__begin_;
        uint64_t v19 = *(char **)(v5 + 120);
        uint64_t v18 = *(char **)(v5 + 128);
        unint64_t v20 = (v18 - v19) >> 2;
        uint64_t v21 = (uint64_t)this[5].__end_cap_.__value_;
        if (v20 <= (v21 - (uint64_t)v17) >> 2)
        {
          std::vector<std::string>::pointer end = this[5].__end_;
          unint64_t v28 = ((char *)end - (char *)v17) >> 2;
          if (v28 >= v20)
          {
            std::vector<std::string>::pointer v34 = this[5].__begin_;
            if (v19 != v18)
            {
              std::vector<std::string>::pointer v35 = this[5].__begin_;
              do
              {
                int v36 = *(_DWORD *)v19;
                v19 += 4;
                LODWORD(v35->__r_.__value_.__l.__data_) = v36;
                std::vector<std::string>::pointer v35 = (std::vector<std::string>::pointer)((char *)v35 + 4);
                std::vector<std::string>::pointer v34 = (std::vector<std::string>::pointer)((char *)v34 + 4);
              }
              while (v19 != v18);
            }
            int64_t v27 = (char *)v34 - (char *)v17;
            std::vector<std::string>::pointer end = v17;
          }
          else
          {
            int v29 = &v19[4 * v28];
            if (end != v17)
            {
              do
              {
                int v30 = *(_DWORD *)v19;
                v19 += 4;
                LODWORD(v17->__r_.__value_.__l.__data_) = v30;
                std::vector<std::string>::pointer v17 = (std::vector<std::string>::pointer)((char *)v17 + 4);
              }
              while (v19 != v29);
            }
            std::vector<std::string>::pointer v31 = end;
            if (v29 != v18)
            {
              unsigned int v32 = end;
              do
              {
                int v33 = *(_DWORD *)v29;
                v29 += 4;
                *v32++ = v33;
                std::vector<std::string>::pointer v31 = (std::vector<std::string>::pointer)((char *)v31 + 4);
              }
              while (v29 != v18);
            }
            int64_t v27 = (char *)v31 - (char *)end;
          }
        }
        else
        {
          if (v17)
          {
            this[5].__end_ = v17;
            operator delete(v17);
            uint64_t v21 = 0;
            this[5].__begin_ = 0;
            this[5].__end_ = 0;
            this[5].__end_cap_.__value_ = 0;
          }
          if (v18 - v19 < 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v22 = v21 >> 1;
          if (v21 >> 1 <= v20) {
            uint64_t v22 = (v18 - v19) >> 2;
          }
          if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFFCLL) {
            unint64_t v23 = 0x3FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v23 = v22;
          }
          std::vector<unsigned int>::__vallocate[abi:ne180100](&this[5].__begin_, v23);
          std::vector<std::string>::pointer end = this[5].__end_;
          std::vector<std::string>::pointer v25 = end;
          if (v19 != v18)
          {
            std::vector<std::string>::pointer v25 = this[5].__end_;
            do
            {
              int v26 = *(_DWORD *)v19;
              v19 += 4;
              LODWORD(v25->__r_.__value_.__l.__data_) = v26;
              std::vector<std::string>::pointer v25 = (std::vector<std::string>::pointer)((char *)v25 + 4);
            }
            while (v19 != v18);
          }
          int64_t v27 = (char *)v25 - (char *)end;
        }
        this[5].__end_ = (std::vector<std::string>::pointer)((char *)end + v27);
        std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)&this[6], *(char **)(v5 + 144), *(void *)(v5 + 152), (uint64_t)(*(void *)(v5 + 152) - *(void *)(v5 + 144)) >> 1);
        unint64_t v37 = this[7].__begin_;
        unint64_t v38 = *(char **)(v5 + 168);
        long long v39 = *(unsigned char **)(v5 + 176);
        size_t v40 = v39 - v38;
        unint64_t v41 = (v39 - v38) >> 3;
        uint64_t v42 = (uint64_t)this[7].__end_cap_.__value_;
        if (v41 > (v42 - (uint64_t)v37) >> 3)
        {
          if (v37)
          {
            this[7].__end_ = v37;
            operator delete(v37);
            uint64_t v42 = 0;
            this[7].__begin_ = 0;
            this[7].__end_ = 0;
            this[7].__end_cap_.__value_ = 0;
          }
          if ((v40 & 0x8000000000000000) != 0) {
            std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
          }
          uint64_t v43 = v42 >> 2;
          if (v42 >> 2 <= v41) {
            uint64_t v43 = (v39 - v38) >> 3;
          }
          if ((unint64_t)v42 >= 0x7FFFFFFFFFFFFFF8) {
            unint64_t v44 = 0x1FFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v43;
          }
          std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](&this[7].__begin_, v44);
          p_std::vector<std::string>::pointer end = &this[7].__end_;
          unint64_t v37 = this[7].__end_;
          if (v39 != v38) {
            memmove(this[7].__end_, v38, v39 - v38);
          }
          goto LABEL_62;
        }
        uint64_t v46 = v4;
        p_std::vector<std::string>::pointer end = &this[7].__end_;
        std::vector<std::string>::pointer v47 = this[7].__end_;
        unint64_t v48 = ((char *)v47 - (char *)v37) >> 3;
        if (v48 >= v41)
        {
          if (v39 == v38)
          {
LABEL_61:
            uint64_t v4 = v46;
LABEL_62:
            *p_std::vector<std::string>::pointer end = (std::string *)((char *)v37 + v40);
            goto LABEL_63;
          }
          std::vector<std::string>::pointer v50 = this[7].__begin_;
          unint64_t v49 = *(char **)(v5 + 168);
        }
        else
        {
          if (v47 != v37)
          {
            memmove(this[7].__begin_, *(const void **)(v5 + 168), (char *)v47 - (char *)v37);
            unint64_t v37 = *p_end;
          }
          unint64_t v49 = &v38[8 * v48];
          size_t v40 = v39 - v49;
          if (v39 == v49) {
            goto LABEL_61;
          }
          std::vector<std::string>::pointer v50 = v37;
        }
        memmove(v50, v49, v40);
        goto LABEL_61;
      }
      uint64_t v16 = v8 + 8 * (((char *)this[3].__end_ - (char *)begin) >> 3);
      std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(*(void *)(v5 + 72), v16, (uint64_t)begin);
      uint64_t v14 = this + 3;
      uint64_t v15 = v16;
    }
    else
    {
      if (begin)
      {
        this[3].__end_ = begin;
        operator delete(begin);
        value = 0;
        this[3].__begin_ = 0;
        this[3].__end_ = 0;
        this[3].__end_cap_.__value_ = 0;
      }
      if (v9 > 0xAAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)value >> 3);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v9) {
        uint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v7 - v8) >> 3);
      }
      if (v11 >= 0x555555555555555) {
        unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v13 = v12;
      }
      std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](&this[3].__begin_, v13);
      uint64_t v14 = this + 3;
      uint64_t v15 = v8;
    }
    std::vector<CSIPacketAddress>::__construct_at_end<CSIPacketAddress*,CSIPacketAddress*>((uint64_t)v14, v15, v7);
    goto LABEL_18;
  }
  return this;
}

void std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>(std::vector<std::string> *this, std::string *__str, long long *a3, unint64_t a4)
{
  p_end_cap = &this->__end_cap_;
  begiuint64_t n = this->__begin_;
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) < a4)
  {
    std::vector<std::string>::__vdeallocate(this);
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0x5555555555555556 * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3);
    if (v10 <= a4) {
      unint64_t v10 = a4;
    }
    if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_cap_.__value_ - (char *)this->__begin_) >> 3) >= 0x555555555555555) {
      unint64_t v11 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v11 = v10;
    }
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100](this, v11);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)__str, a3, this->__end_);
    goto LABEL_11;
  }
  if (0xAAAAAAAAAAAAAAABLL * (((char *)this->__end_ - (char *)begin) >> 3) < a4)
  {
    unint64_t v13 = (std::string *)((char *)__str + 8 * (((char *)this->__end_ - (char *)begin) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, v13, begin);
    uint64_t v12 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::string>,std::string*,std::string*,std::string*>((uint64_t)p_end_cap, (long long *)v13, a3, this->__end_);
LABEL_11:
    this->__end_ = v12;
    return;
  }
  std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(__str, (std::string *)a3, begin);
  uint64_t v15 = v14;
  std::vector<std::string>::pointer end = this->__end_;
  if (end != v14)
  {
    do
    {
      if (SHIBYTE(end[-1].__r_.__value_.__r.__words[2]) < 0) {
        operator delete(end[-1].__r_.__value_.__l.__data_);
      }
      --end;
    }
    while (end != v15);
  }
  this->__end_ = v15;
}

void sub_2223F5B08(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F5B10(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void std::vector<std::string>::__vdeallocate(std::vector<std::string> *this)
{
  if (this->__begin_)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)this);
    operator delete(this->__begin_);
    this->__begin_ = 0;
    this->__end_ = 0;
    this->__end_cap_.__value_ = 0;
  }
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::string *,std::string *,std::string *,0>(std::string *__str, std::string *a2, std::string *this)
{
  uint64_t v4 = __str;
  if (__str != a2)
  {
    do
      std::string::operator=(this++, v4++);
    while (v4 != a2);
    return a2;
  }
  return (std::string *)v4;
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,CSIPacketAddress *,CSIPacketAddress *,CSIPacketAddress *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      CSIPacketAddress::operator=();
      v5 += 24;
      a3 += 24;
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = result;
  unint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (uint64_t)(v8 - *(void *)result) >> 1)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      unint64_t v8 = 0;
      *uint64_t v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if ((a4 & 0x8000000000000000) != 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    if (v8 <= a4) {
      unint64_t v10 = a4;
    }
    else {
      unint64_t v10 = v8;
    }
    if (v8 >= 0x7FFFFFFFFFFFFFFELL) {
      uint64_t v11 = 0x7FFFFFFFFFFFFFFFLL;
    }
    else {
      uint64_t v11 = v10;
    }
    __n128 result = std::vector<unsigned short>::__vallocate[abi:ne180100](v7, v11);
    unint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_17:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_19;
    }
    goto LABEL_20;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 1;
  if (v15 >= a4) {
    goto LABEL_17;
  }
  uint64_t v16 = &__src[2 * v15];
  if (v14 != v9)
  {
    __n128 result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_19:
    __n128 result = (char *)memmove(v18, v19, v17);
  }
LABEL_20:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t qmi::MessageBase::applyTlv<wds::tlv::TdApnTypeMask,void({block_pointer}&)(wds::tlv::TdApnTypeMask&)>(qmi::MessageBase *a1, void *a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<wds::tlv::TdApnTypeMask>((unint64_t *)&v10, v5);
    if (v10)
    {
      return (*(uint64_t (**)(void))(*a2 + 16))(*a2);
    }
    else
    {
      unint64_t v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 16, v6, v7);
    }
  }
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DnnList,void({block_pointer}&)(wds::tlv::DnnList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v11 = TlvValue;
    memset(v10, 0, sizeof(v10));
    tlv::parseV<wds::tlv::DnnList>(&v11, v5, v10);
    if (v11)
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      uint64_t v12 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
    else
    {
      uint64_t v12 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
      unint64_t v8 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      v8(v9, 17, v6, v7);
    }
  }
}

void sub_2223F5EA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      goto LABEL_20;
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    unint64_t v13 = v11 >= 0x555555555555555 ? 0xAAAAAAAAAAAAAAALL : v12;
    if (v13 > 0xAAAAAAAAAAAAAAALL) {
LABEL_20:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    uint64_t v14 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v9, v13);
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v14;
    *(void *)(a1 + 16) = &v14[v15];
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v9, (long long *)__str, a3, v14);
    goto LABEL_14;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3) < a4)
  {
    size_t v17 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, v17, v10);
    uint64_t v16 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v9, (long long *)v17, a3, *(std::string **)(a1 + 8));
LABEL_14:
    *(void *)(a1 + 8) = v16;
    return;
  }
  uint64_t v18 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, (std::string *)a3, v10);
  for (uint64_t i = *(std::string **)(a1 + 8); i != v18; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  *(void *)(a1 + 8) = v18;
}

void sub_2223F604C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F6054(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::DnnInfo>,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(uint64_t a1, long long *a2, long long *a3, std::string *this)
{
  uint64_t v4 = this;
  unint64_t v11 = this;
  uint64_t v12 = this;
  v9[0] = a1;
  v9[1] = &v11;
  _OWORD v9[2] = &v12;
  uint64_t v10 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v4, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v12;
      }
      else
      {
        long long v7 = *v6;
        v4->__r_.__value_.__r.__words[2] = *((void *)v6 + 2);
        *(_OWORD *)&v4->__r_.__value_.__l.__data_ = v7;
      }
      uint64_t v6 = (long long *)((char *)v6 + 24);
      uint64_t v12 = ++v4;
    }
    while (v6 != a3);
  }
  LOBYTE(v10) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v9);
  return v4;
}

void sub_2223F6104(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

std::string *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    int v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

void qmi::MessageBase::applyTlv<wds::tlv::AppList,void({block_pointer}&)(wds::tlv::AppList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    unint64_t v11 = TlvValue;
    memset(v10, 0, sizeof(v10));
    tlv::parseV<wds::tlv::AppList>(&v11, v5, v10);
    if (v11)
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      uint64_t v12 = (void **)v10;
      std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
    else
    {
      uint64_t v12 = (void **)v10;
      std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100](&v12);
      uint64_t v8 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      v8(v9, 19, v6, v7);
    }
  }
}

void sub_2223F6254(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<wds::tlv::AppInfo>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(uint64_t *a1, long long *a2, long long *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  uint64_t v10 = *a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v10)
    {
      std::vector<wds::tlv::AppInfo>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0x555555555555555) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 4);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x2AAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x555555555555555;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<wds::tlv::AppInfo>::__vallocate[abi:ne180100](a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v9, a2, a3, a1[1]);
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1] - v10) >> 4) < a4)
  {
    uint64_t v15 = &a2[(a1[1] - v10) >> 4];
    std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(a2, v15, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::AppInfo>,wds::tlv::AppInfo*,wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v9, v15, a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  uint64_t v16 = std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(a2, a3, v10);
  for (uint64_t i = a1[1]; i != v16; i -= 48)
  {
    uint64_t v18 = *(void **)(i - 24);
    if (v18)
    {
      *(void *)(i - 16) = v18;
      operator delete(v18);
    }
  }
  a1[1] = v16;
}

void sub_2223F63E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F63E8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<wds::tlv::AppInfo *,wds::tlv::AppInfo *,wds::tlv::AppInfo *>(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    int v5 = a1;
    do
    {
      long long v6 = *v5;
      *(unsigned char *)(a3 + 16) = *((unsigned char *)v5 + 16);
      *(_OWORD *)a3 = v6;
      if (v5 != (long long *)a3) {
        std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>((void *)(a3 + 24), *((char **)v5 + 3), *((char **)v5 + 4), *((void *)v5 + 4) - *((void *)v5 + 3));
      }
      v5 += 3;
      a3 += 48;
    }
    while (v5 != a2);
  }
  return a3;
}

void std::vector<std::string>::__construct_one_at_end[abi:ne180100]<std::string const&>(uint64_t a1, long long *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(*(std::string **)(a1 + 8), *(const std::string::value_type **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  *(void *)(a1 + 8) = v3 + 24;
}

void sub_2223F64BC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::vector<std::string>::__emplace_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    uint64_t v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_2223F65D4(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void qmi::MessageBase::applyTlv<wds::tlv::FqdnList,void({block_pointer}&)(wds::tlv::FqdnList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    long long v6 = TlvValue;
    int v7 = v5;
    unint64_t v11 = TlvValue;
    memset(v10, 0, sizeof(v10));
    tlv::parseV<wds::tlv::FqdnList>(&v11, v5, v10);
    if (v11)
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      long long v12 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
    }
    else
    {
      long long v12 = (void **)v10;
      std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v12);
      unint64_t v8 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      v8(v9, 18, v6, v7);
    }
  }
}

void sub_2223F66CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(uint64_t a1, std::string *__str, long long *a3, unint64_t a4)
{
  uint64_t v9 = a1 + 16;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t v10 = *(std::string **)a1;
  if (0xAAAAAAAAAAAAAAABLL * ((v8 - *(void *)a1) >> 3) < a4)
  {
    if (v10)
    {
      std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)a1);
      operator delete(*(void **)a1);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    if (a4 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 3);
    uint64_t v12 = 2 * v11;
    if (2 * v11 <= a4) {
      uint64_t v12 = a4;
    }
    if (v11 >= 0x555555555555555) {
      unint64_t v13 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v13 = v12;
    }
    std::vector<wds::tlv::FqdnInfo>::__vallocate[abi:ne180100]((void *)a1, v13);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v9, (long long *)__str, a3, *(std::string **)(a1 + 8));
    goto LABEL_13;
  }
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3) < a4)
  {
    uint64_t v15 = (std::string *)((char *)__str + 8 * ((uint64_t)(*(void *)(a1 + 8) - (void)v10) >> 3));
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, v15, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<wds::tlv::FqdnInfo>,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v9, (long long *)v15, a3, *(std::string **)(a1 + 8));
LABEL_13:
    *(void *)(a1 + 8) = v14;
    return;
  }
  uint64_t v16 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,wds::tlv::DnnInfo *,0>(__str, (std::string *)a3, v10);
  for (uint64_t i = *(std::string **)(a1 + 8); i != v16; --i)
  {
    if (SHIBYTE(i[-1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(i[-1].__r_.__value_.__l.__data_);
    }
  }
  *(void *)(a1 + 8) = v16;
}

void sub_2223F6858(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F6860(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void qmi::MessageBase::applyTlv<wds::tlv::Ipv4AddrList,void({block_pointer}&)(wds::tlv::Ipv4AddrList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    long long v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = TlvValue;
    std::string __p = 0;
    uint64_t v12 = 0;
    tlv::parseV<wds::tlv::Ipv4AddrList>(&v14, v5, &__p);
    uint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      uint64_t v9 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 20, v6, v7);
    }
  }
}

void sub_2223F6940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::Ipv4AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv4AddrInfo*,wds::tlv::Ipv4AddrInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  uint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 3)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 2;
    if (v8 >> 2 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<nas::tlv::PlmnPriorityData>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    uint64_t v12 = (void **)(v7 + 1);
    uint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v12 = (void **)(result + 8);
  uint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 3;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[8 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    uint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *uint64_t v12 = &v9[v17];
  return result;
}

uint64_t std::vector<CSIPacketAddress>::__emplace_back_slow_path<CSIPacketAddress&>(uint64_t a1, const CSIPacketAddress *a2)
{
  uint64_t v3 = *(const CSIPacketAddress **)a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 8) - *(void *)a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = a1 + 16;
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 16) - (void)v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 16;
  if (v9) {
    uint64_t v10 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  std::string __p = v10;
  uint64_t v14 = (CSIPacketAddress *)&v10[24 * v4];
  uint64_t v16 = &v10[24 * v9];
  CSIPacketAddress::CSIPacketAddress(v14, a2);
  unint64_t v15 = (CSIPacketAddress *)((char *)v14 + 24);
  std::vector<CSIPacketAddress>::__swap_out_circular_buffer((const CSIPacketAddress **)a1, &__p);
  uint64_t v11 = *(void *)(a1 + 8);
  if (v15 != v14) {
    unint64_t v15 = (CSIPacketAddress *)((char *)v14 + (v15 - v14 - 24) % 0x18uLL);
  }
  if (__p) {
    operator delete(__p);
  }
  return v11;
}

void sub_2223F6B94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void std::vector<CSIPacketAddress>::__swap_out_circular_buffer(const CSIPacketAddress **a1, void *a2)
{
  unint64_t v5 = *a1;
  unint64_t v4 = a1[1];
  long long v6 = (const CSIPacketAddress *)a2[1];
  while (v4 != v5)
  {
    unint64_t v4 = (const CSIPacketAddress *)((char *)v4 - 24);
    CSIPacketAddress::CSIPacketAddress((const CSIPacketAddress *)((char *)v6 - 24), v4);
  }
  a2[1] = v6;
  uint64_t v7 = *a1;
  *a1 = v6;
  a2[1] = v7;
  unint64_t v8 = a1[1];
  a1[1] = (const CSIPacketAddress *)a2[2];
  a2[2] = v8;
  unint64_t v9 = a1[2];
  a1[2] = (const CSIPacketAddress *)a2[3];
  a2[3] = v9;
  *a2 = a2[1];
}

void qmi::MessageBase::applyTlv<wds::tlv::Ipv6AddrList,void({block_pointer}&)(wds::tlv::Ipv6AddrList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    long long v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    uint64_t v14 = TlvValue;
    std::string __p = 0;
    uint64_t v12 = 0;
    tlv::parseV<wds::tlv::Ipv6AddrList>(&v14, v5, (uint64_t *)&__p);
    unint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      unint64_t v9 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 21, v6, v7);
    }
  }
}

void sub_2223F6D40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::Ipv6AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv6AddrInfo*,wds::tlv::Ipv6AddrInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (0xF0F0F0F0F0F0F0F1 * (v8 - *(void *)result) < a4)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >= 0xF0F0F0F0F0F0F10) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * v8;
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= a4) {
      uint64_t v11 = a4;
    }
    if (v10 >= 0x787878787878787) {
      unint64_t v12 = 0xF0F0F0F0F0F0F0FLL;
    }
    else {
      unint64_t v12 = v11;
    }
    uint64_t result = std::vector<wds::tlv::Ipv6AddrInfo>::__vallocate[abi:ne180100](v7, v12);
    uint64_t v14 = (char *)v7[1];
    uint64_t v13 = (void **)(v7 + 1);
    unint64_t v9 = v14;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  uint64_t v13 = (void **)(result + 8);
  unint64_t v15 = (unsigned char *)*((void *)result + 1);
  if (0xF0F0F0F0F0F0F0F1 * (v15 - v9) >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[v15 - v9];
  if (v15 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v15 - v9);
    unint64_t v9 = (char *)*v13;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  char *v13 = &v9[v17];
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::DestPortList,void({block_pointer}&)(wds::tlv::DestPortList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    unint64_t v14 = TlvValue;
    std::string __p = 0;
    unint64_t v12 = 0;
    tlv::parseV<wds::tlv::DestPortList>(&v14, v5, (uint64_t)&__p);
    unint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      unint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      unint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 27, v6, v7);
    }
  }
}

void sub_2223F6F68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<wds::tlv::DestPortRangeList,void({block_pointer}&)(wds::tlv::DestPortRangeList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    unint64_t v14 = TlvValue;
    std::string __p = 0;
    unint64_t v12 = 0;
    tlv::parseV<wds::tlv::DestPortRangeList>(&v14, v5, &__p);
    unint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      unint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      unint64_t v9 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 30, v6, v7);
    }
  }
}

void sub_2223F705C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::DestPortRangeInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DestPortRangeInfo*,wds::tlv::DestPortRangeInfo*>(char *result, char *__src, uint64_t a3, unint64_t a4)
{
  int v7 = result;
  uint64_t v8 = *((void *)result + 2);
  unint64_t v9 = *(char **)result;
  if (a4 > (v8 - *(void *)result) >> 2)
  {
    if (v9)
    {
      *((void *)result + 1) = v9;
      operator delete(v9);
      uint64_t v8 = 0;
      *int v7 = 0;
      v7[1] = 0;
      _DWORD v7[2] = 0;
    }
    if (a4 >> 62) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v10 = v8 >> 1;
    if (v8 >> 1 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v11 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](v7, v11);
    uint64_t v13 = (char *)v7[1];
    unint64_t v12 = (void **)(v7 + 1);
    unint64_t v9 = v13;
LABEL_16:
    size_t v17 = a3 - (void)__src;
    if (v17)
    {
      uint64_t v18 = v9;
      uint64_t v19 = __src;
      goto LABEL_18;
    }
    goto LABEL_19;
  }
  unint64_t v12 = (void **)(result + 8);
  unint64_t v14 = (unsigned char *)*((void *)result + 1);
  unint64_t v15 = (v14 - v9) >> 2;
  if (v15 >= a4) {
    goto LABEL_16;
  }
  uint64_t v16 = &__src[4 * v15];
  if (v14 != v9)
  {
    uint64_t result = (char *)memmove(*(void **)result, __src, v14 - v9);
    unint64_t v9 = (char *)*v12;
  }
  size_t v17 = a3 - (void)v16;
  if (v17)
  {
    uint64_t v18 = v9;
    uint64_t v19 = v16;
LABEL_18:
    uint64_t result = (char *)memmove(v18, v19, v17);
  }
LABEL_19:
  *unint64_t v12 = &v9[v17];
  return result;
}

void qmi::MessageBase::applyTlv<wds::tlv::NextHdrProtList,void({block_pointer}&)(wds::tlv::NextHdrProtList const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    unint64_t v14 = TlvValue;
    std::string __p = 0;
    unint64_t v12 = 0;
    tlv::parseV<wds::tlv::NextHdrProtList>(&v14, v5, &__p);
    unint64_t v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      unint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      unint64_t v9 = (void (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 23, v6, v7);
    }
  }
}

void sub_2223F725C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::vector<TrafficDescriptor>::__emplace_back_slow_path<TrafficDescriptor>(uint64_t *a1, uint64_t a2)
{
  unint64_t v2 = 0x86BCA1AF286BCA1BLL * ((a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0xD79435E50D7943) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v6 = a1 + 2;
  if (0xD79435E50D79436 * ((a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0xD79435E50D79436 * ((a1[2] - *a1) >> 4);
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[2] - *a1) >> 4) >= 0x6BCA1AF286BCA1) {
    unint64_t v7 = 0xD79435E50D7943;
  }
  else {
    unint64_t v7 = v3;
  }
  unint64_t v15 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v11 = v7;
  unint64_t v12 = v7 + 304 * v2;
  unint64_t v14 = v7 + 304 * v8;
  MEMORY[0x223C99330](v12, a2);
  unint64_t v13 = v12 + 304;
  std::vector<TrafficDescriptor>::__swap_out_circular_buffer(a1, &v11);
  uint64_t v9 = a1[1];
  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)&v11);
  return v9;
}

void sub_2223F7380(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__split_buffer<TrafficDescriptor>::~__split_buffer((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *std::vector<TrafficDescriptor>::__swap_out_circular_buffer(uint64_t *result, void *a2)
{
  unint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  uint64_t v7 = a2[1];
  while (v5 + v4 != v6)
  {
    v4 -= 304;
    uint64_t result = (uint64_t *)MEMORY[0x223C99340](v4 + v7, v4 + v5);
  }
  a2[1] = v7 + v4;
  uint64_t v8 = *v3;
  uint64_t *v3 = v7 + v4;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  void v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(unint64_t a1)
{
  if (a1 >= 0xD79435E50D7944) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(304 * a1);
}

uint64_t std::__split_buffer<TrafficDescriptor>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 304;
    MEMORY[0x223C99360]();
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t std::vector<TrafficDescriptor>::__assign_with_size[abi:ne180100]<TrafficDescriptor*,TrafficDescriptor*>(uint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v8 = a1[2];
  uint64_t v9 = *a1;
  if (0x86BCA1AF286BCA1BLL * ((v8 - *a1) >> 4) < a4)
  {
    if (v9)
    {
      uint64_t v10 = a1[1];
      unint64_t v11 = (void *)v9;
      if (v10 != v9)
      {
        do
          uint64_t v10 = MEMORY[0x223C99360](v10 - 304);
        while (v10 != v9);
        unint64_t v11 = (void *)*a1;
      }
      a1[1] = v9;
      operator delete(v11);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 > 0xD79435E50D7943) {
      goto LABEL_22;
    }
    unint64_t v12 = 0x86BCA1AF286BCA1BLL * (v8 >> 4);
    uint64_t v13 = 2 * v12;
    if (2 * v12 <= a4) {
      uint64_t v13 = a4;
    }
    unint64_t v14 = v12 >= 0x6BCA1AF286BCA1 ? 0xD79435E50D7943 : v13;
    if (v14 > 0xD79435E50D7943) {
LABEL_22:
    }
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    unint64_t v15 = std::__allocate_at_least[abi:ne180100]<std::allocator<TrafficDescriptor>>(v14);
    *a1 = (uint64_t)v15;
    a1[1] = (uint64_t)v15;
    a1[2] = (uint64_t)v15 + 304 * v16;
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(a2, a3, (uint64_t)v15);
    goto LABEL_17;
  }
  if (0x86BCA1AF286BCA1BLL * ((a1[1] - v9) >> 4) < a4)
  {
    uint64_t v18 = a2 + 16 * ((a1[1] - v9) >> 4);
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(a2, v18, v9);
    uint64_t result = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(v18, a3, a1[1]);
LABEL_17:
    a1[1] = result;
    return result;
  }
  uint64_t v19 = std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(a2, a3, v9);
  for (uint64_t result = a1[1]; result != v19; uint64_t result = MEMORY[0x223C99360](result - 304))
    ;
  a1[1] = v19;
  return result;
}

void sub_2223F76A4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2223F76AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<TrafficDescriptor>,TrafficDescriptor*,TrafficDescriptor*,TrafficDescriptor*>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      MEMORY[0x223C99340](a3 + v6, a1 + v6);
      v6 += 304;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_2223F7714(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 304;
    do
    {
      MEMORY[0x223C99360](v4 + v2);
      v2 -= 304;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,TrafficDescriptor *,TrafficDescriptor *,TrafficDescriptor *,0>(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      TrafficDescriptor::operator=();
      v5 += 304;
      a3 += 304;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2(uint64_t result, _DWORD *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 40) = *a2;
  return result;
}

uint64_t ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_694(uint64_t result, void *a2)
{
  *(void *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_697(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_700(uint64_t a1, long long **a2)
{
  uint64_t v2 = (uint64_t *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (v2 != (uint64_t *)a2) {
    std::vector<wds::tlv::AppInfo>::__assign_with_size[abi:ne180100]<wds::tlv::AppInfo*,wds::tlv::AppInfo*>(v2, *a2, a2[1], 0xAAAAAAAAAAAAAAABLL * (a2[1] - *a2));
  }
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_703(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::DnnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DnnInfo*,wds::tlv::DnnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

void ___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_2_705(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(*(void *)(a1 + 32) + 8) + 40;
  if (v2 != a2) {
    std::vector<wds::tlv::FqdnInfo>::__assign_with_size[abi:ne180100]<wds::tlv::FqdnInfo*,wds::tlv::FqdnInfo*>(v2, *(std::string **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
  }
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_3(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::Ipv4AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv4AddrInfo*,wds::tlv::Ipv4AddrInfo*>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3);
  }
  return result;
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::Ipv6AddrInfo>::__assign_with_size[abi:ne180100]<wds::tlv::Ipv6AddrInfo*,wds::tlv::Ipv6AddrInfo*>(result, *(char **)a2, *(void *)(a2 + 8), 0xF0F0F0F0F0F0F0F1 * (*(void *)(a2 + 8) - *(void *)a2));
  }
  return result;
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 1);
  }
  return result;
}

char *___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t result = (char *)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != (char *)a2) {
    return std::vector<wds::tlv::DestPortRangeInfo>::__assign_with_size[abi:ne180100]<wds::tlv::DestPortRangeInfo*,wds::tlv::DestPortRangeInfo*>(result, *(char **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 2);
  }
  return result;
}

char **___ZN12_GLOBAL__N_119processWdsTdInfoIndIN3wds9RouteInfo10IndicationEN20QMIDataCommandDriver11TrafficInfoEPN3ctu11OsLogLoggerEZNS4_26handleWdsRouteInfoInd_syncERKS3_E3__0ZNS4_26handleWdsRouteInfoInd_syncESA_E3__1EEbRKT_RT0_RKT1_RKT2_RKT3__block_invoke_7(uint64_t a1, char **a2)
{
  uint64_t result = (char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != a2) {
    return (char **)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(result, *a2, a2[1], a2[1] - *a2);
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::DynamicCellularDataSwitchAllowed>::clone()
{
}

void *std::function<void ()(qmi::ResponseBase const&)>::operator=(void *a1, uint64_t a2)
{
  v4[4] = *MEMORY[0x263EF8340];
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::__value_func[abi:ne180100]((uint64_t)v4, a2);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::swap[abi:ne180100](v4, a1);
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100](v4);
  return a1;
}

void *std::__function::__value_func<void ()(qmi::ResponseBase const&)>::swap[abi:ne180100](void *result, void *a2)
{
  void v6[3] = *MEMORY[0x263EF8340];
  if (a2 != result)
  {
    char v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, 24);
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_2223F7D40(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  __clang_call_terminate(a1);
}

void QMIDataContextActivationGuard::~QMIDataContextActivationGuard(QMIDataContextActivationGuard *this)
{
}

void QMIActivationLock::~QMIActivationLock(QMIActivationLock *this)
{
  *(void *)this = &unk_26D4C3358;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 4);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  QMIActivationLock::~QMIActivationLock(this);

  JUMPOUT(0x223C9A950);
}

void QMIDataContextIPActivationLock::~QMIDataContextIPActivationLock(QMIDataContextIPActivationLock *this)
{
  *(void *)this = &unk_26D4C3378;
  uint64_t v1 = *((void *)this + 1);
  char v2 = *(unsigned char *)(v1 + 8) - 1;
  *(unsigned char *)(v1 + 8) = v2;
  if (!v2) {
    *(_DWORD *)(v1 + 12) = 0;
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

{
  uint64_t vars8;

  QMIDataContextIPActivationLock::~QMIDataContextIPActivationLock(this);

  JUMPOUT(0x223C9A950);
}

uint64_t asString@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v17 = 0;
  long long v15 = 0u;
  memset(v16, 0, sizeof(v16));
  *(_OWORD *)std::string __p = 0u;
  long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  uint64_t v4 = v12;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v12);
  if (*a1)
  {
    uint64_t v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"[mask: ", 7);
    uint64_t v6 = (const char *)asString();
    size_t v7 = strlen(v6);
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)v6, v7);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" semaphore: ", 12);
    uint64_t v4 = (void *)std::ostream::operator<<();
    uint64_t v9 = "]";
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v9 = "empty";
    uint64_t v10 = 5;
  }
  std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v9, v10);
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v12 + 8, a2);
  *(void *)&v12[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v12 + *(void *)(*(void *)&v12[0] - QMIDataCommandDriver::stopDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v12[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C9A8E0](v16);
}

void sub_2223F8084(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t asString@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v22 = 0;
  long long v20 = 0u;
  memset(v21, 0, sizeof(v21));
  *(_OWORD *)uint64_t v18 = 0u;
  long long v19 = 0u;
  memset(v17, 0, sizeof(v17));
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)v17);
  if (*(void *)a1)
  {
    uint64_t v4 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"{guard: ", 8);
    uint64_t v5 = *(std::__shared_weak_count **)(*(void *)a1 + 16);
    v14[0] = *(void *)(*(void *)a1 + 8);
    v14[1] = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    asString(v14, __p);
    if ((v16 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if ((v16 & 0x80u) == 0) {
      uint64_t v7 = v16;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    uint64_t v8 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v4, (uint64_t)v6, v7);
    uint64_t v9 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v8, (uint64_t)" lock family: ", 14);
    uint64_t v10 = (const char *)asString();
    size_t v11 = strlen(v10);
    unint64_t v12 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v9, (uint64_t)v10, v11);
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v12, (uint64_t)"}", 1);
    if ((char)v16 < 0) {
      operator delete(__p[0]);
    }
    if (v5) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  else
  {
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)"empty", 5);
  }
  std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)v17 + 8, a2);
  *(void *)&v17[0] = *MEMORY[0x263F8C2C8];
  *(void *)((char *)v17 + *(void *)(*(void *)&v17[0] - QMIDataCommandDriver::stopDataCommandDriver((QMIDataCommandDriver *)((char *)this - 24)) = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *((void *)&v17[0] + 1) = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C9A8E0](v21);
}

void sub_2223F82E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, char a18)
{
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  std::ostringstream::~ostringstream((uint64_t)&a18);
  _Unwind_Resume(a1);
}

void QMIP2PCommandDriver::create()
{
}

void sub_2223F83F8(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C408174DE9DLL);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIP2PCommandDriver::QMIP2PCommandDriver(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, dispatch_object_t *a5)
{
  xpc_object_t object = *a5;
  if (*a5) {
    dispatch_retain(*a5);
  }
  P2PCommandDriver::P2PCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_26D4C3408;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 104) = *a2;
  *(void *)(a1 + 112) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_2223F84DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void QMIP2PCommandDriver::~QMIP2PCommandDriver(QMIP2PCommandDriver *this)
{
  *(void *)this = &unk_26D4C3408;
  char v2 = (QMIP2PCommandDriver *)((char *)this + 72);
  if (*((void *)this + 11)) {
    qmi::Client::stop((QMIP2PCommandDriver *)((char *)this + 72));
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 14);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  qmi::Client::~Client(v2);

  MEMORY[0x270EE9588](this);
}

{
  uint64_t vars8;

  QMIP2PCommandDriver::~QMIP2PCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

uint64_t QMIP2PCommandDriver::init(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = (std::__shared_weak_count *)a2[1];
  if (v4)
  {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  *(void *)(a1 + 56) = v3;
  *(void *)(a1 + 64) = v4;
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I initializing the driver", buf, 2u);
  }
  std::string::basic_string[abi:ne180100]<0>(&v23, *(char **)(a1 + 48));
  uint64_t v7 = *(NSObject **)(a1 + 24);
  dispatch_object_t v22 = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "p2p");
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v8 || (uint64_t v9 = *(void *)(a1 + 8), (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  size_t v11 = v10;
  uint64_t v18 = v9;
  long long v19 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  Registry::getServerConnection(&v16, *(Registry **)(a1 + 104));
  qmi::Client::createWithQueueLocal();
  long long v12 = v27;
  long long v27 = 0uLL;
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 96);
  *(_OWORD *)(a1 + 88) = v12;
  if (v13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  }
  qmi::Client::~Client((qmi::Client *)buf);
  if (v17) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  if (v21 < 0) {
    operator delete(__p);
  }
  if (v22) {
    dispatch_release(v22);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  v15[0] = MEMORY[0x263EF8330];
  v15[1] = 0x40000000;
  v15[2] = ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke;
  _OWORD v15[3] = &__block_descriptor_tmp_10;
  void v15[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  uint64_t v26 = 0x40000000;
  *(void *)&long long v27 = ___ZNK3qmi6Client13setIndHandlerIRKN3p2p10P2PMessage10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  *((void *)&v27 + 1) = &unk_26460C030;
  unint64_t v28 = v15;
  qmi::Client::setIndHandler();
  qmi::Client::setHandler();
  return qmi::Client::setHandler();
}

void sub_2223F8884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,std::__shared_weak_count *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a25) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a25);
  }
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v33);
  if (a33 < 0) {
    operator delete(__p);
  }
  int v36 = *(NSObject **)(v34 - 128);
  if (v36) {
    dispatch_release(v36);
  }
  if (*(char *)(v34 - 97) < 0) {
    operator delete(*(void **)(v34 - 120));
  }
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = v3[6];
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "handleP2PMessageIndication_sync";
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: received P2PMessage indication", buf, 0x16u);
  }
  int v6 = *((_DWORD *)a2 + 1);
  if (v6)
  {
    uint64_t v7 = v3[5];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = v3[6];
      uint64_t v9 = qmi::asString();
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = v8;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "handleP2PMessageIndication_sync";
      *(_WORD *)&buf[22] = 1024;
      LODWORD(v54) = v6;
      WORD2(v54) = 2080;
      *(void *)((char *)&v54 + 6) = v9;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#N DATA.%s: %s: P2PMessage::Indication error: %d (%s)", buf, 0x26u);
    }
  }
  else
  {
    uint64_t v10 = (std::__shared_weak_count *)v3[8];
    if (v10)
    {
      size_t v11 = std::__shared_weak_count::lock(v10);
      if (v11)
      {
        long long v12 = v11;
        uint64_t v13 = v3[7];
        if (v13)
        {
          uint64_t v48 = 0;
          unint64_t v49 = &v48;
          uint64_t v50 = 0x2000000000;
          int v51 = 0;
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = buf;
          *(void *)&uint8_t buf[16] = 0x4002000000;
          *(void *)&long long v54 = __Block_byref_object_copy__2;
          *((void *)&v54 + 1) = __Block_byref_object_dispose__2;
          uint64_t v55 = 0;
          uint64_t v56 = 0;
          uint64_t v57 = 0;
          uint64_t v44 = 0;
          uint64_t v45 = &v44;
          uint64_t v46 = 0x2000000000;
          char v47 = 0;
          v40[0] = MEMORY[0x263EF8330];
          v40[1] = 0x40000000;
          unint64_t v41 = ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke;
          uint64_t v42 = &unk_26460BEA8;
          uint64_t v43 = &v48;
          uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
          uint64_t v16 = TlvValue;
          if (TlvValue)
          {
            int v17 = v15;
            v36[0] = TlvValue;
            LOWORD(__p) = tlv::parseV<p2p::tlv::MessageType>(v36, v15);
            if (v36[0]) {
              v41((uint64_t)v40, (unsigned __int16 *)&__p);
            }
            else {
              ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 2, v16, v17);
            }
          }
          v36[0] = MEMORY[0x263EF8330];
          v36[1] = 0x40000000;
          unint64_t v37 = ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke_2;
          unint64_t v38 = &unk_26460BED0;
          long long v39 = buf;
          uint64_t v18 = (void *)qmi::MessageBase::findTlvValue(a2);
          long long v20 = v18;
          if (v18)
          {
            int v21 = v19;
            unint64_t v28 = v18;
            std::string __p = 0;
            uint64_t v32 = 0;
            int v33 = 0;
            tlv::parseV<p2p::tlv::MessageData>((unint64_t *)&v28, v19, &__p);
            dispatch_object_t v22 = v28;
            if (v28) {
              v37((uint64_t)v36, (char **)&__p);
            }
            if (__p)
            {
              uint64_t v32 = (uint64_t)__p;
              operator delete(__p);
            }
            if (!v22) {
              ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v20, v21);
            }
          }
          std::string __p = (void *)MEMORY[0x263EF8330];
          uint64_t v32 = 0x40000000;
          int v33 = ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke_3;
          uint64_t v34 = &unk_26460BEF8;
          std::vector<std::string>::pointer v35 = &v44;
          unint64_t v23 = (void *)qmi::MessageBase::findTlvValue(a2);
          std::vector<std::string>::pointer v25 = v23;
          if (v23)
          {
            int v26 = v24;
            unint64_t v28 = v23;
            char v52 = tlv::parseV<p2p::tlv::Delete>((unint64_t *)&v28, v24);
            if (v28) {
              v33((uint64_t)&__p, &v52);
            }
            else {
              ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 17, v25, v26);
            }
          }
          uint64_t v27 = *((unsigned int *)v49 + 6);
          int v29 = 0;
          uint64_t v30 = 0;
          unint64_t v28 = 0;
          std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v28, *(const void **)(*(void *)&buf[8] + 40), *(void *)(*(void *)&buf[8] + 48), *(void *)(*(void *)&buf[8] + 48) - *(void *)(*(void *)&buf[8] + 40));
          (*(void (**)(uint64_t, uint64_t, void **, void))(*(void *)v13 + 32))(v13, v27, &v28, *((unsigned __int8 *)v45 + 24));
          if (v28)
          {
            int v29 = v28;
            operator delete(v28);
          }
          _Block_object_dispose(&v44, 8);
          _Block_object_dispose(buf, 8);
          if (v55)
          {
            uint64_t v56 = v55;
            operator delete(v55);
          }
          _Block_object_dispose(&v48, 8);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      }
    }
  }
}

void sub_2223F8D98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (__p) {
    operator delete(__p);
  }
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose((const void *)(v33 - 160), 8);
  std::vector<std::string>::pointer v35 = *(void **)(v33 - 120);
  if (v35)
  {
    *(void *)(v33 - 112) = v35;
    operator delete(v35);
  }
  _Block_object_dispose(&a32, 8);
  std::__shared_weak_count::__release_shared[abi:ne180100](v32);
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  char v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has started", v7, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[8];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v1[7];
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223F8EC0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN19QMIP2PCommandDriver4initENSt3__18weak_ptrI24P2PCommandDriverObserverEE_block_invoke_7(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  char v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Client has stopped", v7, 2u);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[8];
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = v1[7];
      if (v6) {
        (*(void (**)(uint64_t))(*(void *)v6 + 24))(v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_2223F8F80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIP2PCommandDriver::start(uint64_t this)
{
  if (*(void *)(this + 88)) {
    return qmi::Client::start((qmi::Client *)(this + 72));
  }
  return this;
}

uint64_t QMIP2PCommandDriver::stop(uint64_t this)
{
  if (*(void *)(this + 88)) {
    return qmi::Client::stop((qmi::Client *)(this + 72));
  }
  return this;
}

__n128 __Block_byref_object_copy__2(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 40) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void __Block_byref_object_dispose__2(uint64_t a1)
{
  char v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke(uint64_t result, unsigned __int16 *a2)
{
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2;
  return result;
}

char **___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke_2(uint64_t a1, char **a2)
{
  __n128 result = (char **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  if (result != a2) {
    return (char **)std::vector<unsigned char>::__assign_with_size[abi:ne180100]<unsigned char const*,unsigned char const*>(result, *a2, a2[1], a2[1] - *a2);
  }
  return result;
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PMessageIndication_syncERKN3p2p10P2PMessage10IndicationE_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *(unsigned char *)(*(void *)(*(void *)(result + 32) + 8) + 24) = *a2 != 0;
  return result;
}

void QMIP2PCommandDriver::handleP2PProximityStatusChanged(uint64_t a1, int a2, void *a3)
{
  uint64_t v58 = *MEMORY[0x263EF8340];
  long long v53 = 0u;
  long long v54 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v53);
  v48[0] = MEMORY[0x263EF8330];
  v48[1] = 1174405120;
  unint64_t v49 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke;
  uint64_t v50 = &__block_descriptor_tmp_15_14;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v51 = *a3;
  char v52 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = (const void **)*((void *)&v53 + 1);
  if (*((void *)&v53 + 1) != (void)v54)
  {
    while (*((unsigned char *)*v7 + 8) != 1)
    {
      if (++v7 == (const void **)v54) {
        goto LABEL_10;
      }
    }
  }
  if (v7 == (const void **)v54) {
LABEL_10:
  }
    operator new();
  if (!v8) {
    __cxa_bad_cast();
  }
  uint64_t v9 = (capabilities::ct *)v49((uint64_t)v48, v8 + 9);
  if (capabilities::ct::supportsDataQMIExtensions(v9))
  {
    v46[0] = MEMORY[0x263EF8330];
    v46[1] = 0x40000000;
    v46[2] = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16;
    v46[3] = &__block_descriptor_tmp_18_4;
    int v47 = a2;
    size_t v11 = (const void **)*((void *)&v53 + 1);
    if (*((void *)&v53 + 1) != (void)v54)
    {
      while (*((unsigned char *)*v11 + 8) != 19)
      {
        if (++v11 == (const void **)v54) {
          goto LABEL_19;
        }
      }
    }
    if (v11 == (const void **)v54) {
LABEL_19:
    }
      operator new();
    if (!v12) {
      __cxa_bad_cast();
    }
    ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16((uint64_t)v46, v12 + 3);
  }
  uint64_t v13 = *a3;
  if (*a3)
  {
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 1174405120;
    uint64_t v42 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_2;
    uint64_t v43 = &__block_descriptor_tmp_22_11;
    long long v14 = (std::__shared_weak_count *)a3[1];
    uint64_t v44 = v13;
    uint64_t v45 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v15 = (const void **)*((void *)&v53 + 1);
    if (*((void *)&v53 + 1) != (void)v54)
    {
      while (*((unsigned char *)*v15 + 8) != 16)
      {
        if (++v15 == (const void **)v54) {
          goto LABEL_30;
        }
      }
    }
    if (v15 == (const void **)v54) {
LABEL_30:
    }
      operator new();
    if (!v16) {
      __cxa_bad_cast();
    }
    v42((uint64_t)v41, (std::string *)(v16 + 16));
    v36[0] = MEMORY[0x263EF8330];
    v36[1] = 1174405120;
    unint64_t v37 = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_23;
    unint64_t v38 = &__block_descriptor_tmp_27_4;
    int v17 = (std::__shared_weak_count *)a3[1];
    uint64_t v39 = *a3;
    size_t v40 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v18 = (const void **)*((void *)&v53 + 1);
    if (*((void *)&v53 + 1) != (void)v54)
    {
      while (*((unsigned char *)*v18 + 8) != 17)
      {
        if (++v18 == (const void **)v54) {
          goto LABEL_40;
        }
      }
    }
    if (v18 == (const void **)v54) {
LABEL_40:
    }
      operator new();
    if (!v19) {
      __cxa_bad_cast();
    }
    v37((uint64_t)v36, v19 + 3);
    CFDictionaryRef v20 = *(const __CFDictionary **)(*a3 + 64);
    if (v20) {
      int v21 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
    }
    else {
      int v21 = 0;
    }
    if (v21)
    {
      Value = CFDictionaryGetValue(v20, @"bbinfo");
      unint64_t v23 = Value;
      if (Value)
      {
        CFTypeID v24 = CFGetTypeID(Value);
        if (v24 == CFDataGetTypeID())
        {
          v35[0] = MEMORY[0x263EF8330];
          v35[1] = 0x40000000;
          v35[2] = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_29;
          v35[3] = &__block_descriptor_tmp_30_1;
          v35[4] = v23;
          std::vector<std::string>::pointer v25 = (const void **)*((void *)&v53 + 1);
          if (*((void *)&v53 + 1) != (void)v54)
          {
            while (*((unsigned char *)*v25 + 8) != 18)
            {
              if (++v25 == (const void **)v54) {
                goto LABEL_54;
              }
            }
          }
          if (v25 == (const void **)v54) {
LABEL_54:
          }
            operator new();
          if (!v26) {
            __cxa_bad_cast();
          }
          ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_29((uint64_t)v35, (uint64_t)v26 + 16);
        }
      }
    }
    if (v40) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    }
    if (v45) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v45);
    }
  }
  uint64_t v27 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v28 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "handleP2PProximityStatusChanged";
    _os_log_impl(&dword_22231A000, v27, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: sending ProximityNotification", buf, 0x16u);
  }
  v30[5] = a1 + 72;
  uint64_t v31 = QMIServiceMsg::create();
  int v32 = 25000;
  uint64_t v33 = 0;
  long long aBlock = 0;
  v30[0] = MEMORY[0x263EF8330];
  v30[1] = 0x40000000;
  v30[2] = ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_31;
  v30[3] = &__block_descriptor_tmp_32;
  v30[4] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p21ProximityNotification8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v56 = &unk_26460C058;
  uint64_t v57 = v30;
  int v29 = _Block_copy(buf);
  long long aBlock = v29;
  if (v31)
  {
    qmi::Client::send();
    int v29 = aBlock;
  }
  if (v29) {
    _Block_release(v29);
  }
  if (v52) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v52);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v53);
}

void sub_2223F9C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  uint64_t v8 = *(std::__shared_weak_count **)(v6 - 184);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v6 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke(uint64_t result, BOOL *a2)
{
  *a2 = *(void *)(result + 32) != 0;
  return result;
}

uint64_t __copy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14P2PDeviceDescrEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c42_ZTSNSt3__110shared_ptrI14P2PDeviceDescrEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_16(uint64_t a1, _DWORD *a2)
{
  uint64_t result = subscriber::simSlotAsInstance();
  *a2 = result;
  return result;
}

std::string *___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_2(uint64_t a1, std::string *this)
{
  return std::string::operator=(this, *(const std::string **)(a1 + 32));
}

uint64_t ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_23(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 24);
  return result;
}

void ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_29(uint64_t a1, uint64_t a2)
{
  ctu::cf::assign();
  long long v3 = 0uLL;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
    long long v3 = 0uLL;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
}

void sub_2223F9DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN19QMIP2PCommandDriver31handleP2PProximityStatusChangedEN10subscriber7SimSlotENSt3__110shared_ptrI14P2PDeviceDescrEE_block_invoke_31(uint64_t a1, uint64_t a2)
{
  uint64_t v15 = *MEMORY[0x263EF8340];
  uint64_t v2 = *(void **)(a1 + 32);
  long long v3 = (std::__shared_weak_count *)v2[8];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = v5;
      uint64_t v7 = v2[7];
      if (v7)
      {
        int v8 = *(_DWORD *)(a2 + 4);
        uint64_t v9 = v2[5];
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            v12[0] = 67109378;
            v12[1] = v8;
            __int16 v13 = 2080;
            uint64_t v14 = qmi::asString();
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#N ProximityNotification failed: %d (%s)", (uint8_t *)v12, 0x12u);
          }
          uint64_t v11 = 0xFFFFFFFFLL;
        }
        else
        {
          if (v10)
          {
            LOWORD(v12[0]) = 0;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I ProximityNotification succeed", (uint8_t *)v12, 2u);
          }
          uint64_t v11 = 0;
        }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 40))(v7, v11);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_2223F9F20(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIP2PCommandDriver::sendP2PCompanionMessage(uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, const void *a6)
{
  uint64_t v41 = *MEMORY[0x263EF8340];
  long long v36 = 0u;
  long long v37 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v36);
  long long v12 = (const void **)*((void *)&v36 + 1);
  if (*((void *)&v36 + 1) != (void)v37)
  {
    while (*((unsigned char *)*v12 + 8) != 1)
    {
      if (++v12 == (const void **)v37) {
        goto LABEL_8;
      }
    }
  }
  if (v12 == (const void **)v37) {
LABEL_8:
  }
    operator new();
  if (!v13) {
    goto LABEL_53;
  }
  uint64_t v14 = v13 + 12;
  int v15 = time(0);
  _DWORD *v14 = v15;
  if (a2)
  {
    v35[0] = MEMORY[0x263EF8330];
    v35[1] = 0x40000000;
    v35[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_2;
    v35[3] = &__block_descriptor_tmp_36;
    v35[4] = a2;
    uint64_t v16 = (const void **)*((void *)&v36 + 1);
    if (*((void *)&v36 + 1) != (void)v37)
    {
      while (*((unsigned char *)*v16 + 8) != 16)
      {
        if (++v16 == (const void **)v37) {
          goto LABEL_17;
        }
      }
    }
    if (v16 == (const void **)v37) {
LABEL_17:
    }
      operator new();
    if (!v17) {
      goto LABEL_53;
    }
    ((void (*)(void *, char *))___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_2)(v35, v17 + 10);
  }
  if (a3)
  {
    v34[0] = MEMORY[0x263EF8330];
    v34[1] = 0x40000000;
    v34[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3;
    v34[3] = &__block_descriptor_tmp_37_1;
    v34[4] = a3;
    uint64_t v18 = (const void **)*((void *)&v36 + 1);
    if (*((void *)&v36 + 1) != (void)v37)
    {
      while (*((unsigned char *)*v18 + 8) != 17)
      {
        if (++v18 == (const void **)v37) {
          goto LABEL_26;
        }
      }
    }
    if (v18 == (const void **)v37) {
LABEL_26:
    }
      operator new();
    if (!v19) {
      goto LABEL_53;
    }
    ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3((uint64_t)v34, (uint64_t)v19 + 16);
  }
  if (a4)
  {
    CFDictionaryRef v20 = (const void **)*((void *)&v36 + 1);
    if (*((void *)&v36 + 1) != (void)v37)
    {
      while (*((unsigned char *)*v20 + 8) != 18)
      {
        if (++v20 == (const void **)v37) {
          goto LABEL_35;
        }
      }
    }
    if (v20 == (const void **)v37) {
LABEL_35:
    }
      operator new();
    if (!v21) {
      goto LABEL_53;
    }
    v21[9] = 1;
  }
  if (*(void *)a5 && *(_DWORD *)(*(void *)a5 + 72))
  {
    v33[0] = MEMORY[0x263EF8330];
    v33[1] = 0x40000000;
    void v33[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_5;
    void v33[3] = &__block_descriptor_tmp_43_1;
    void v33[4] = a5;
    dispatch_object_t v22 = (const void **)*((void *)&v36 + 1);
    if (*((void *)&v36 + 1) != (void)v37)
    {
      while (*((unsigned char *)*v22 + 8) != 19)
      {
        if (++v22 == (const void **)v37) {
          goto LABEL_45;
        }
      }
    }
    if (v22 == (const void **)v37) {
LABEL_45:
    }
      operator new();
    if (v23)
    {
      ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_5((uint64_t)v33, v23 + 3);
      goto LABEL_46;
    }
LABEL_53:
    __cxa_bad_cast();
  }
LABEL_46:
  CFTypeID v24 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = *(void *)(a1 + 48);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "sendP2PCompanionMessage";
    _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: sending P2PMessageDelivery", buf, 0x16u);
  }
  int v26 = _Block_copy(a6);
  v28[6] = a1 + 72;
  uint64_t v29 = QMIServiceMsg::create();
  int v30 = 25000;
  uint64_t v31 = 0;
  long long aBlock = 0;
  v28[0] = MEMORY[0x263EF8330];
  v28[1] = 0x40000000;
  v28[2] = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_44;
  v28[3] = &unk_26460C008;
  void v28[4] = v26;
  void v28[5] = a1;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p18P2PMessageDelivery8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  uint64_t v39 = &unk_26460C080;
  size_t v40 = v28;
  uint64_t v27 = _Block_copy(buf);
  long long aBlock = v27;
  if (v29)
  {
    qmi::Client::send();
    uint64_t v27 = aBlock;
  }
  if (v27) {
    _Block_release(v27);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v36);
}

void sub_2223FA9B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v7 - 176));
  _Unwind_Resume(a1);
}

uint64_t ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_2(uint64_t a1, _WORD *a2, const __CFNumber *a3)
{
  uint64_t v4 = *(int **)(a1 + 32);
  int v6 = 0;
  uint64_t result = ctu::cf::assign((ctu::cf *)&v6, v4, a3);
  *a2 = v6;
  return result;
}

void ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_3(uint64_t a1, uint64_t a2)
{
  ctu::cf::assign();
  long long v3 = 0uLL;
  uint64_t v4 = *(void **)a2;
  if (*(void *)a2)
  {
    *(void *)(a2 + 8) = v4;
    operator delete(v4);
    long long v3 = 0uLL;
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  *(_OWORD *)a2 = v3;
  *(void *)(a2 + 16) = 0;
}

void sub_2223FAAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_5(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(**(void **)(result + 32) + 72);
  return result;
}

const void **___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_44(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 40);
  uint64_t v24 = 0;
  uint64_t v25 = &v24;
  uint64_t v26 = 0x3002000000;
  uint64_t v27 = __Block_byref_object_copy__45;
  uint64_t v28 = __Block_byref_object_dispose__46;
  uint64_t v29 = 0;
  int v5 = *((_DWORD *)a2 + 1);
  int v6 = *(NSObject **)(v4 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v7)
    {
      uint64_t v8 = qmi::asString();
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v5;
      LOWORD(v32) = 2080;
      *(void *)((char *)&v32 + 2) = v8;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#N P2PMessageDelivery failed: %d (%s)", buf, 0x12u);
    }
  }
  else
  {
    if (v7)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I P2PMessageDelivery succeeded", buf, 2u);
    }
    v20[0] = MEMORY[0x263EF8330];
    v20[1] = 0x40000000;
    int v21 = ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_47;
    dispatch_object_t v22 = &unk_26460BFE0;
    unint64_t v23 = &v24;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v11 = TlvValue;
    if (TlvValue)
    {
      int v12 = v10;
      unint64_t v30 = TlvValue;
      *(void *)long long buf = 0;
      long long v32 = 0uLL;
      tlv::parseV<p2p::tlv::Watch_BB_Info>(&v30, v10, buf);
      unint64_t v13 = v30;
      if (v30) {
        v21((uint64_t)v20, (uint64_t)buf);
      }
      if (*(void *)buf)
      {
        *(void *)&long long v32 = *(void *)buf;
        operator delete(*(void **)buf);
      }
      if (!v13) {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 16, v11, v12);
      }
    }
  }
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = *((_DWORD *)a2 + 1);
  uint64_t v16 = (const void *)v25[5];
  if (v16 && (CFTypeID v17 = CFGetTypeID((CFTypeRef)v25[5]), v17 == CFDictionaryGetTypeID()))
  {
    int v19 = v16;
    CFRetain(v16);
  }
  else
  {
    int v19 = 0;
  }
  (*(void (**)(uint64_t, BOOL, void, const void **))(v14 + 16))(v14, v15 == 0, 0, &v19);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v19);
  _Block_release(*(const void **)(a1 + 32));
  _Block_object_dispose(&v24, 8);
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(&v29);
}

void sub_2223FAD68(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  uint64_t v11 = *(void **)(v9 - 96);
  if (v11)
  {
    *(void *)(v9 - 88) = v11;
    operator delete(v11);
  }
  _Block_object_dispose(va, 8);
  ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(v8);
  _Unwind_Resume(a1);
}

uint64_t __Block_byref_object_copy__45(uint64_t result, uint64_t a2)
{
  *(void *)(result + 40) = 0;
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(a2 + 40) = 0;
  return result;
}

const void **__Block_byref_object_dispose__46(uint64_t a1)
{
  return ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)(a1 + 40));
}

void ___ZN19QMIP2PCommandDriver23sendP2PCompanionMessageEPK10__CFNumberPK8__CFDatabRKNSt3__110shared_ptrI14P2PDeviceDescrEEU13block_pointerFvbbN3ctu2cf11CFSharedRefIK14__CFDictionaryEEE_block_invoke_47(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(*(void *)(a1 + 32) + 8);
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable((CFAllocatorRef)*MEMORY[0x263EFFB08], 0, MEMORY[0x263EFFF88], MEMORY[0x263EFFF90]);
  if (Mutable)
  {
    int v6 = *(void **)(v4 + 40);
    *(void *)(v4 + 40) = Mutable;
    std::string __p = v6;
    ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef((const void **)&__p);
  }
  BOOL v7 = *(__CFDictionary **)(*(void *)(*(void *)(a1 + 32) + 8) + 40);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  int v10 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v10, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  int v15 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v15, v10, (uint64_t)v11, v11 - (unsigned char *)v10);
  uint64_t v14 = 0;
  std::string __p = 0;
  int v19 = 0;
  uint64_t v20 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&__p, v15, (uint64_t)v16, v16 - (unsigned char *)v15);
  int v21 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v8 = v14;
    uint64_t v14 = v21;
    dispatch_object_t v22 = v8;
    ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v22);
  }
  if (__p)
  {
    int v19 = __p;
    operator delete(__p);
  }
  uint64_t v9 = v14;
  unint64_t v13 = v14;
  uint64_t v14 = 0;
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v14);
  if (v15)
  {
    uint64_t v16 = v15;
    operator delete(v15);
  }
  CFDictionaryAddValue(v7, @"bbinfo", v9);
  ctu::SharedRef<__CFData const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFData const>::~SharedRef(&v13);
  if (v10)
  {
    uint64_t v11 = v10;
    operator delete(v10);
  }
}

void sub_2223FAF38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, const void *a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

const void **ctu::SharedRef<__CFDictionary,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary>::~SharedRef(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

void std::shared_ptr<QMIP2PCommandDriver>::shared_ptr[abi:ne180100]<QMIP2PCommandDriver,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223FB09C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1}::operator() const(QMIP2PCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223FB0C4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIP2PCommandDriver *,std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver *)#1},std::allocator<QMIP2PCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIP2PCommandDriver> ctu::SharedSynchronizable<P2PCommandDriver>::make_shared_ptr<QMIP2PCommandDriver>(QMIP2PCommandDriver*)::{lambda(QMIP2PCommandDriver*)#1}::operator() const(QMIP2PCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3p2p10P2PMessage10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223FB264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::ProximityIndicator>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::IPPref>((unsigned char **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SubscriptionType>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C3610;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C3610;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::HWVersion>(a1 + 16);
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::HWVersion>((unsigned char **)a2, (unsigned char *)(a1 + 16));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::HWVersion>::clone()
{
}

void sub_2223FB60C(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1093C4081B1C094);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::SWVersion>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C36B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C36B0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info>::clone()
{
}

void sub_2223FB8AC(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p21ProximityNotification8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223FB994(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Timestamp>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageType>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C37A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C37A0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::getSize(uint64_t a1)
{
  return tlv::size<p2p::tlv::MessageData>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::MessageData>((_WORD **)a2, a1 + 16);
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::MessageData>::clone()
{
}

void sub_2223FBD30(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Watch_BB_Info_Req>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<p2p::tlv::Companion_OS_Type>((_WORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<p2p::tlv::Companion_OS_Type>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3p2p18P2PMessageDelivery8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    int v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      int v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2223FBFD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

uint64_t QMIAudioCommandDriver::QMIAudioCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  AudioCommandDriver::AudioCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_26D4C3878;
  *(void *)(a1 + 88) = &unk_26D4C38E8;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  return a1;
}

void sub_2223FC0B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void QMIAudioCommandDriver::~QMIAudioCommandDriver(QMIAudioCommandDriver *this)
{
  *(void *)this = &unk_26D4C3878;
  *((void *)this + 11) = &unk_26D4C38E8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }

  MEMORY[0x270EE95E0](this);
}

{
  uint64_t vars8;

  QMIAudioCommandDriver::~QMIAudioCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIAudioCommandDriver::~QMIAudioCommandDriver(QMIAudioCommandDriver *this)
{
}

{
  uint64_t vars8;

  QMIAudioCommandDriver::~QMIAudioCommandDriver((QMIAudioCommandDriver *)((char *)this - 88));

  JUMPOUT(0x223C9A950);
}

void QMIAudioCommandDriver::create()
{
}

void sub_2223FC298(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (v13) {
    dispatch_release(v13);
  }
  if (a12) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a12);
  }
  if (v14) {
    MEMORY[0x223C9A950](v12, 0xF1C40199CE48CLL);
  }
  _Unwind_Resume(exception_object);
}

void QMIAudioCommandDriver::bootstrap(uint64_t a1, dispatch_object_t *a2, uint64_t a3, xpc_object_t *a4)
{
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  uint64_t v8 = *(void *)(a3 + 8);
  if (v8) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a4) {
    xpc_retain(*a4);
  }
  else {
    xpc_null_create();
  }
  if (a4[1]) {
    xpc_retain(a4[1]);
  }
  else {
    xpc_null_create();
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIAudioCommandDriver::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  char v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIAudioCommandDriver::registered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIAudioCommandDriver::registered(uint64_t a1)
{
}

void QMIAudioCommandDriver::deregistered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIAudioCommandDriver::deregistered(uint64_t a1)
{
}

uint64_t QMIAudioCommandDriver::queryVocoderInfo(QMIAudioCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 12);
  memset(v9, 0, sizeof(v9));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
  char v3 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v3 || (uint64_t v4 = *((void *)this + 1), (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  if (!*(unsigned char *)(v2 + 72) || !*(void *)(v2 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v13 = v2 + 40;
  uint64_t v14 = QMIServiceMsg::create();
  int v15 = 25000;
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  v10[0] = MEMORY[0x263EF8330];
  v10[1] = 1174405120;
  _DWORD v10[2] = ___ZN16QMIVirtualClient4sendIN5audio14GetVocoderType7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver16queryVocoderInfoEvE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  uint64_t v10[3] = &__block_descriptor_tmp_42_8;
  v10[4] = v4;
  uint64_t v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v12 = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_26460C3C0;
  aBlock[4] = v10;
  uint64_t v7 = _Block_copy(aBlock);
  uint64_t v17 = v7;
  if (v14)
  {
    qmi::Client::send();
    uint64_t v7 = v17;
  }
  if (v7) {
    _Block_release(v7);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  std::__shared_weak_count::__release_weak(v6);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
  return 1;
}

void sub_2223FC8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,char a21)
{
  if (a19) {
    std::__shared_weak_count::__release_weak(a19);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a21);
  std::__shared_weak_count::__release_weak(v21);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a9);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = convertFromQMIVocoderType(*a2);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  unsigned int v5 = v6 >> 3;
  if (v5 > 5) {
    int v7 = 0;
  }
  else {
    int v7 = dword_222575238[v5];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  unsigned int v2 = v3 >> 3;
  if (v2 > 5) {
    int v4 = 0;
  }
  else {
    int v4 = dword_222575238[v2];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  unsigned int v2 = v3 >> 3;
  if (v2 > 5) {
    int v4 = 0;
  }
  else {
    int v4 = dword_222575238[v2];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  unsigned int v5 = v6 >> 3;
  if (v5 > 5) {
    int v7 = 0;
  }
  else {
    int v7 = dword_222575238[v5];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v7;
  return result;
}

uint64_t QMIAudioCommandDriver::audioRateSwitchComplete(void *a1, unsigned int *a2)
{
  char v4 = convertToQMIVocoderType(*a2);
  int v5 = a2[1];
  if (v5 <= 23999)
  {
    if (v5 == 8000)
    {
      char v6 = 8;
      goto LABEL_13;
    }
    if (v5 == 16000)
    {
      char v6 = 16;
      goto LABEL_13;
    }
  }
  else
  {
    switch(v5)
    {
      case 24000:
        char v6 = 24;
        goto LABEL_13;
      case 32000:
        char v6 = 32;
        goto LABEL_13;
      case 48000:
        char v6 = 48;
        goto LABEL_13;
    }
  }
  char v6 = -1;
LABEL_13:
  int v7 = a2[2];
  if (v7 <= 23999)
  {
    if (v7 == 8000)
    {
      char v8 = 8;
      goto LABEL_25;
    }
    if (v7 == 16000)
    {
      char v8 = 16;
      goto LABEL_25;
    }
  }
  else
  {
    switch(v7)
    {
      case 24000:
        char v8 = 24;
        goto LABEL_25;
      case 32000:
        char v8 = 32;
        goto LABEL_25;
      case 48000:
        char v8 = 48;
        goto LABEL_25;
    }
  }
  char v8 = -1;
LABEL_25:
  int v9 = a2[3];
  if (v9 <= 23999)
  {
    if (v9 == 8000)
    {
      char v10 = 8;
      goto LABEL_37;
    }
    if (v9 == 16000)
    {
      char v10 = 16;
      goto LABEL_37;
    }
  }
  else
  {
    switch(v9)
    {
      case 24000:
        char v10 = 24;
        goto LABEL_37;
      case 32000:
        char v10 = 32;
        goto LABEL_37;
      case 48000:
        char v10 = 48;
        goto LABEL_37;
    }
  }
  char v10 = -1;
LABEL_37:
  int v11 = a2[4];
  if (v11 <= 23999)
  {
    if (v11 == 8000)
    {
      char v12 = 8;
      goto LABEL_49;
    }
    if (v11 == 16000)
    {
      char v12 = 16;
      goto LABEL_49;
    }
  }
  else
  {
    switch(v11)
    {
      case 24000:
        char v12 = 24;
        goto LABEL_49;
      case 32000:
        char v12 = 32;
        goto LABEL_49;
      case 48000:
        char v12 = 48;
        goto LABEL_49;
    }
  }
  char v12 = -1;
LABEL_49:
  *(_OWORD *)std::string __p = 0u;
  long long v35 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v31[0] = MEMORY[0x263EF8330];
  v31[1] = 0x40000000;
  v31[2] = ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke;
  v31[3] = &__block_descriptor_tmp_8_3;
  char v32 = v4;
  char v33 = v6;
  uint64_t v13 = (const void **)__p[1];
  if (__p[1] != (void *)v35)
  {
    while (*((unsigned char *)*v13 + 8) != 1)
    {
      if (++v13 == (const void **)v35) {
        goto LABEL_56;
      }
    }
  }
  if (v13 == (const void **)v35) {
LABEL_56:
  }
    operator new();
  if (!v14) {
    goto LABEL_86;
  }
  ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke((uint64_t)v31, v14 + 9);
  v29[0] = MEMORY[0x263EF8330];
  v29[1] = 0x40000000;
  v29[2] = ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2;
  v29[3] = &__block_descriptor_tmp_9_3;
  char v30 = v8;
  int v15 = (const void **)__p[1];
  if (__p[1] != (void *)v35)
  {
    while (*((unsigned char *)*v15 + 8) != 16)
    {
      if (++v15 == (const void **)v35) {
        goto LABEL_64;
      }
    }
  }
  if (v15 == (const void **)v35) {
LABEL_64:
  }
    operator new();
  if (!v16) {
    goto LABEL_86;
  }
  ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2((uint64_t)v29, v16 + 9);
  v26[0] = MEMORY[0x263EF8330];
  v26[1] = 0x40000000;
  v26[2] = ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_3;
  v26[3] = &__block_descriptor_tmp_10_3;
  char v27 = v10;
  char v28 = v12;
  uint64_t v17 = (const void **)__p[1];
  if (__p[1] != (void *)v35)
  {
    while (*((unsigned char *)*v17 + 8) != 17)
    {
      if (++v17 == (const void **)v35) {
        goto LABEL_72;
      }
    }
  }
  if (v17 == (const void **)v35) {
LABEL_72:
  }
    operator new();
  if (!v18) {
LABEL_86:
  }
    __cxa_bad_cast();
  ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_3((uint64_t)v26, v18 + 9);
  int v19 = (std::__shared_weak_count *)a1[2];
  if (!v19 || (v20 = a1[12], v21 = a1[1], (dispatch_object_t v22 = std::__shared_weak_count::lock(v19)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  unint64_t v23 = v22;
  atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v22);
  if (!*(unsigned char *)(v20 + 72) || !*(void *)(v20 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v39 = v20 + 40;
  uint64_t v40 = QMIServiceMsg::create();
  int v41 = 25000;
  uint64_t v42 = 0;
  uint64_t v43 = 0;
  v36[0] = MEMORY[0x263EF8330];
  v36[1] = 1174405120;
  void v36[2] = ___ZN16QMIVirtualClient4sendIN5audio23AudioRateSwitchComplete7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfoE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS8_8weak_ptrIT0_EESA__block_invoke;
  v36[3] = &__block_descriptor_tmp_50_6;
  v36[4] = v21;
  long long v37 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  unint64_t v38 = a1;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_26460C3C0;
  aBlock[4] = v36;
  uint64_t v24 = _Block_copy(aBlock);
  uint64_t v43 = v24;
  if (v40)
  {
    qmi::Client::send();
    uint64_t v24 = v43;
  }
  if (v24) {
    _Block_release(v24);
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  std::__shared_weak_count::__release_weak(v23);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  return 1;
}

void sub_2223FD358(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35)
{
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)(v36 - 176));
  std::__shared_weak_count::__release_weak(v35);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a25);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  a2[1] = *(unsigned char *)(result + 33);
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_2(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfo_block_invoke_3(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  a2[1] = *(unsigned char *)(result + 33);
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t result = convertFromQMIVocoderType(*a2);
  *(_DWORD *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = result;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  unsigned int v5 = v6 >> 3;
  if (v5 > 5) {
    int v7 = 0;
  }
  else {
    int v7 = dword_222575238[v5];
  }
  *(_DWORD *)(*(void *)(*(void *)(a1 + 40) + 8) + 24) = v7;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_2(uint64_t result, unsigned __int8 *a2)
{
  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  unsigned int v2 = v3 >> 3;
  if (v2 > 5) {
    int v4 = 0;
  }
  else {
    int v4 = dword_222575238[v2];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  return result;
}

uint64_t ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_3(uint64_t result, unsigned __int8 *a2)
{
  HIDWORD(v3) = *a2;
  LODWORD(v3) = HIDWORD(v3) - 8;
  unsigned int v2 = v3 >> 3;
  if (v2 > 5) {
    int v4 = 0;
  }
  else {
    int v4 = dword_222575238[v2];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 32) + 8) + 24) = v4;
  HIDWORD(v6) = a2[1];
  LODWORD(v6) = HIDWORD(v6) - 8;
  unsigned int v5 = v6 >> 3;
  if (v5 > 5) {
    int v7 = 0;
  }
  else {
    int v7 = dword_222575238[v5];
  }
  *(_DWORD *)(*(void *)(*(void *)(result + 40) + 8) + 24) = v7;
  return result;
}

void AudioStats::~AudioStats(void **this)
{
  if (*((char *)this + 135) < 0) {
    operator delete(this[14]);
  }
  if (*((char *)this + 111) < 0) {
    operator delete(this[11]);
  }
  if (*((char *)this + 87) < 0) {
    operator delete(this[8]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(void *a1, int a2, unsigned int a3)
{
  uint64_t v38 = *MEMORY[0x263EF8340];
  unint64_t v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)
    && ((capabilities::ct::asString(), SHIBYTE(v29) >= 0) ? (int v7 = v27) : (int v7 = *(uint8_t **)v27),
        LODWORD(buf) = 136315138,
        *(void *)((char *)&buf + 4) = v7,
        _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Command type to use to switch the antenna: %s", (uint8_t *)&buf, 0xCu), SHIBYTE(v29) < 0))
  {
    operator delete(*(void **)v27);
    if (a2)
    {
LABEL_7:
      char v8 = a1[5];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)char v27 = 67109120;
        *(_DWORD *)&void v27[4] = a2;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#N Unhandled command type!: %u", v27, 8u);
      }
      return;
    }
  }
  else if (a2)
  {
    goto LABEL_7;
  }
  if (a3 >= 3) {
    __int16 v9 = 255;
  }
  else {
    __int16 v9 = 0x200000001uLL >> (16 * a3);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v18[0] = MEMORY[0x263EF8330];
  v18[1] = 0x40000000;
  void v18[2] = ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke;
  v18[3] = &__block_descriptor_tmp_17_5;
  __int16 v19 = v9;
  char v10 = (const void **)__p[1];
  if (__p[1] != (void *)v21)
  {
    while (*((unsigned char *)*v10 + 8) != 1)
    {
      if (++v10 == (const void **)v21) {
        goto LABEL_20;
      }
    }
  }
  if (v10 == (const void **)v21) {
LABEL_20:
  }
    operator new();
  if (!v11) {
    __cxa_bad_cast();
  }
  ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke((uint64_t)v18, v11 + 5);
  char v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (v13 = a1[14], v14 = a1[1], (int v15 = std::__shared_weak_count::lock(v12)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  if (!*(unsigned char *)(v13 + 72) || !*(void *)(v13 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v22 = v13 + 40;
  uint64_t v23 = QMIServiceMsg::create();
  int v24 = 25000;
  uint64_t v25 = 0;
  long long aBlock = 0;
  *(void *)char v27 = MEMORY[0x263EF8330];
  uint64_t v28 = 1174405120;
  uint64_t v29 = ___ZN16QMIVirtualClient4sendIN3bsp20SetAntennaPreference7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreferenceE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
  char v30 = &__block_descriptor_tmp_95_2;
  uint64_t v31 = v14;
  char v32 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v33 = a1;
  *(void *)&long long buf = MEMORY[0x263EF8330];
  *((void *)&buf + 1) = 0x40000000;
  long long v35 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  uint64_t v36 = &unk_26460C3C0;
  long long v37 = v27;
  uint64_t v17 = _Block_copy(&buf);
  long long aBlock = v17;
  if (v23)
  {
    qmi::Client::send();
    uint64_t v17 = aBlock;
  }
  if (v17) {
    _Block_release(v17);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  std::__shared_weak_count::__release_weak(v16);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223FD9EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a30) {
    std::__shared_weak_count::__release_weak(a30);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a20);
  std::__shared_weak_count::__release_weak(v30);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreference_block_invoke(uint64_t result, _WORD *a2)
{
  *a2 = *(_WORD *)(result + 32);
  return result;
}

void QMIAudioCommandDriver::sendAudioLoggingEnabled(QMIAudioCommandDriver *this, char a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v12[0] = MEMORY[0x263EF8330];
  v12[1] = 0x40000000;
  _DWORD v12[2] = ___ZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEb_block_invoke;
  void v12[3] = &__block_descriptor_tmp_19_2;
  char v13 = a2;
  int v4 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned char *)*v4 + 8) != 1)
    {
      if (++v4 == (const void **)v15) {
        goto LABEL_8;
      }
    }
  }
  if (v4 == (const void **)v15) {
LABEL_8:
  }
    operator new();
  if (!v5) {
    __cxa_bad_cast();
  }
  ___ZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEb_block_invoke((uint64_t)v12, v5 + 9);
  unint64_t v6 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v6
    || (uint64_t v7 = *((void *)this + 14), v8 = *((void *)this + 1), (v9 = std::__shared_weak_count::lock(v6)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  char v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  if (!*(unsigned char *)(v7 + 72) || !*(void *)(v7 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v19 = v7 + 40;
  uint64_t v20 = QMIServiceMsg::create();
  int v21 = 25000;
  uint64_t v22 = 0;
  uint64_t v23 = 0;
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 1174405120;
  void v16[2] = ___ZN16QMIVirtualClient4sendIN3bsp22SetAudioLoggingEnabled7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  void v16[3] = &__block_descriptor_tmp_98_5;
  v16[4] = v8;
  uint64_t v17 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v18 = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_26460C3C0;
  aBlock[4] = v16;
  int v11 = _Block_copy(aBlock);
  uint64_t v23 = v11;
  if (v20)
  {
    qmi::Client::send();
    int v11 = v23;
  }
  if (v11) {
    _Block_release(v11);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223FDDD8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

uint64_t ___ZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEb_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void QMIAudioCommandDriver::sendAudioStatIndsDisabled(QMIAudioCommandDriver *this, char a2, char a3, char a4)
{
  *(_OWORD *)std::string __p = 0u;
  long long v21 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  v16[0] = MEMORY[0x263EF8330];
  v16[1] = 0x40000000;
  void v16[2] = ___ZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbb_block_invoke;
  void v16[3] = &__block_descriptor_tmp_21_3;
  char v17 = a2;
  char v18 = a3;
  char v19 = a4;
  uint64_t v8 = (const void **)__p[1];
  if (__p[1] != (void *)v21)
  {
    while (*((unsigned char *)*v8 + 8) != 1)
    {
      if (++v8 == (const void **)v21) {
        goto LABEL_8;
      }
    }
  }
  if (v8 == (const void **)v21) {
LABEL_8:
  }
    operator new();
  if (!v9) {
    __cxa_bad_cast();
  }
  ___ZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbb_block_invoke((unsigned __int8 *)v16, v9 + 3);
  char v10 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v10
    || (uint64_t v11 = *((void *)this + 12), v12 = *((void *)this + 1), (v13 = std::__shared_weak_count::lock(v10)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v14 = v13;
  atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (!*(unsigned char *)(v11 + 72) || !*(void *)(v11 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v25 = v11 + 40;
  uint64_t v26 = QMIServiceMsg::create();
  int v27 = 25000;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  v22[0] = MEMORY[0x263EF8330];
  v22[1] = 1174405120;
  unint64_t v22[2] = ___ZN16QMIVirtualClient4sendIN5audio18SetAudioIndDisable7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke;
  v22[3] = &__block_descriptor_tmp_101_3;
  void v22[4] = v12;
  uint64_t v23 = v14;
  atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  int v24 = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_10;
  aBlock[3] = &unk_26460C3C0;
  aBlock[4] = v22;
  long long v15 = _Block_copy(aBlock);
  uint64_t v29 = v15;
  if (v26)
  {
    qmi::Client::send();
    long long v15 = v29;
  }
  if (v15) {
    _Block_release(v15);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  std::__shared_weak_count::__release_weak(v14);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_2223FE1D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

unsigned __int8 *___ZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbb_block_invoke(unsigned __int8 *result, _DWORD *a2)
{
  int v2 = result[33];
  *a2 = result[32];
  a2[1] = v2;
  a2[2] = result[34];
  return result;
}

void std::shared_ptr<QMIAudioCommandDriver>::shared_ptr[abi:ne180100]<QMIAudioCommandDriver,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_2223FE2FC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1}::operator() const(QMIAudioCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_2223FE324(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIAudioCommandDriver *,std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver *)#1},std::allocator<QMIAudioCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIAudioCommandDriver> ctu::SharedSynchronizable<AudioCommandDriver>::make_shared_ptr<QMIAudioCommandDriver>(QMIAudioCommandDriver*)::{lambda(QMIAudioCommandDriver*)#1}::operator() const(QMIAudioCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>(QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  v125 = a1;
  uint64_t v126 = v1;
  unint64_t v3 = *(void *)v1;
  int v2 = *(NSObject **)(v1 + 8);
  dispatch_group_t v153 = v2;
  if (v2)
  {
    dispatch_retain(v2);
    dispatch_group_enter(v2);
  }
  int v4 = *(std::__shared_weak_count **)(v1 + 24);
  uint64_t v151 = *(void *)(v1 + 16);
  v152 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  unsigned int v5 = *(void **)(v1 + 32);
  xpc_object_t v149 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v149 = xpc_null_create();
  }
  unint64_t v6 = *(void **)(v1 + 40);
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  AudioCommandDriver::bootstrap();
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v149);
  xpc_object_t v149 = 0;
  if (v152) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v152);
  }
  if (v153)
  {
    dispatch_group_leave(v153);
    dispatch_release(v153);
  }
  xpc_object_t v7 = xpc_null_create();
  uint64_t v8 = MEMORY[0x223C9AD60](*(void *)(v1 + 32));
  uint64_t v9 = MEMORY[0x263EF8718];
  if (v8 == MEMORY[0x263EF8718])
  {
    char v10 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 32));
    if (!v10) {
      char v10 = xpc_null_create();
    }
    xpc_object_t v11 = xpc_null_create();
    xpc_release(v7);
    xpc_release(v11);
  }
  else
  {
    char v10 = v7;
  }
  xpc_object_t v12 = xpc_null_create();
  if (MEMORY[0x223C9AD60](*(void *)(v1 + 40)) == v9)
  {
    char v13 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 40));
    if (!v13) {
      char v13 = xpc_null_create();
    }
    xpc_object_t v14 = xpc_null_create();
    xpc_release(v12);
    xpc_release(v14);
  }
  else
  {
    char v13 = v12;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 48));
  uint64_t v16 = ServiceMap;
  unint64_t v17 = (unint64_t)off_26D4CD628;
  char v18 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    char v19 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      char v18 = (char *)v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(ServiceMap);
  v142[0] = (unint64_t)v18;
  uint64_t v22 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v16[1].__m_.__sig, v142);
  if (!v22)
  {
    int v24 = 0;
    goto LABEL_33;
  }
  int v24 = (void *)v22[3];
  uint64_t v23 = (std::__shared_weak_count *)v22[4];
  if (!v23)
  {
LABEL_33:
    std::mutex::unlock(v16);
    uint64_t v23 = 0;
    char v25 = 1;
    goto LABEL_34;
  }
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v16);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v23);
  char v25 = 0;
LABEL_34:
  std::string::basic_string[abi:ne180100]<0>(__p, "audio");
  xpc_object_t v146 = v10;
  xpc_object_t v26 = xpc_null_create();
  QMIClientPool::requestClient(v24, 0xE1u, (uint64_t *)__p, v3 + 88, (uint64_t)&v146, &aBlock);
  long long v27 = aBlock;
  long long aBlock = 0uLL;
  uint64_t v28 = *(std::__shared_weak_count **)(v3 + 104);
  *(_OWORD *)(v3 + 96) = v27;
  if (v28)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    if (*((void *)&aBlock + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&aBlock + 1));
    }
  }
  xpc_release(v146);
  xpc_object_t v146 = 0;
  if ((v148 & 0x80000000) == 0)
  {
    if (v25) {
      goto LABEL_40;
    }
    goto LABEL_39;
  }
  operator delete(__p[0]);
  if ((v25 & 1) == 0) {
LABEL_39:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v23);
LABEL_40:
  uint64_t v29 = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 48));
  char v30 = v29;
  if ((v17 & 0x8000000000000000) != 0)
  {
    uint64_t v31 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v32 = 5381;
    do
    {
      unint64_t v17 = v32;
      unsigned int v33 = *v31++;
      uint64_t v32 = (33 * v32) ^ v33;
    }
    while (v33);
  }
  std::mutex::lock(v29);
  v142[0] = v17;
  uint64_t v34 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v30[1].__m_.__sig, v142);
  if (!v34)
  {
    uint64_t v36 = 0;
    goto LABEL_49;
  }
  uint64_t v36 = (void *)v34[3];
  long long v35 = (std::__shared_weak_count *)v34[4];
  if (!v35)
  {
LABEL_49:
    std::mutex::unlock(v30);
    long long v35 = 0;
    char v37 = 1;
    goto LABEL_50;
  }
  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v30);
  atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v35);
  char v37 = 0;
LABEL_50:
  std::string::basic_string[abi:ne180100]<0>(v144, "audio");
  xpc_object_t v143 = v13;
  xpc_object_t v38 = xpc_null_create();
  QMIClientPool::requestClient(v36, 0xE2u, (uint64_t *)v144, v3 + 88, (uint64_t)&v143, &aBlock);
  long long v39 = aBlock;
  long long aBlock = 0uLL;
  uint64_t v40 = *(std::__shared_weak_count **)(v3 + 120);
  *(_OWORD *)(v3 + 112) = v39;
  if (v40)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v40);
    if (*((void *)&aBlock + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&aBlock + 1));
    }
  }
  xpc_release(v143);
  xpc_object_t v143 = 0;
  if (v145 < 0)
  {
    operator delete(v144[0]);
    if (v37) {
      goto LABEL_56;
    }
    goto LABEL_55;
  }
  if ((v37 & 1) == 0) {
LABEL_55:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v35);
LABEL_56:
  uint64_t v41 = *(void *)(v3 + 96);
  v142[0] = MEMORY[0x263EF8330];
  v142[1] = 0x40000000;
  v142[2] = (unint64_t)___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke;
  v142[3] = (unint64_t)&__block_descriptor_tmp_30_2;
  v142[4] = v3;
  uint64_t v42 = *(std::__shared_weak_count **)(v41 + 8);
  if (v42)
  {
    uint64_t v42 = std::__shared_weak_count::lock(v42);
    if (v42)
    {
      uint64_t v44 = v42;
      uint64_t v45 = *(void *)v41;
      if (*(void *)v41)
      {
        uint64_t v137 = v41 + 88;
        uint64_t v138 = 1;
        MEMORY[0x223C999F0](v41 + 88, v43);
        uint64_t v46 = *(void *)(v41 + 24);
        if (v46)
        {
          uint64_t v47 = v41 + 24;
          do
          {
            unsigned int v48 = *(unsigned __int16 *)(v46 + 32);
            BOOL v49 = v48 >= 0x30;
            if (v48 >= 0x30) {
              uint64_t v50 = (uint64_t *)v46;
            }
            else {
              uint64_t v50 = (uint64_t *)(v46 + 8);
            }
            if (v49) {
              uint64_t v47 = v46;
            }
            uint64_t v46 = *v50;
          }
          while (*v50);
          if (v47 != v41 + 24 && *(unsigned __int16 *)(v47 + 32) <= 0x30u) {
            __TUAssertTrigger();
          }
        }
        *(void *)&long long aBlock = MEMORY[0x263EF8330];
        *((void *)&aBlock + 1) = 0x40000000;
        long long v160 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio15VocoderTypeInfo10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        long long v161 = &unk_26460C2F8;
        long long v162 = v142;
        uint64_t v51 = (uint64_t *)_Block_copy(&aBlock);
        LOWORD(v127) = 48;
        uint64_t v132 = &v127;
        char v52 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v41 + 16), (unsigned __int16 *)&v127, (uint64_t)&std::piecewise_construct, (_WORD **)&v132);
        long long v53 = v52[5];
        v52[5] = v51;
        if (v53) {
          _Block_release(v53);
        }
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v137);
        uint64_t v137 = 0;
        uint64_t v138 = 0;
        long long v54 = *(atomic_ullong **)(v41 + 64);
        uint64_t v139 = *(void (**)(uint64_t, uint64_t))(v41 + 56);
        uint64_t v140 = v54;
        if (v54) {
          atomic_fetch_add_explicit(v54 + 1, 1uLL, memory_order_relaxed);
        }
        QMIClientPool::registerUnsolicitedHandler(v45, (uint64_t)&v137, v41, 0x30u);
        qmi::Client::~Client((qmi::Client *)&v137);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v44);
    }
  }
  int v55 = capabilities::ct::supports5G((capabilities::ct *)v42);
  uint64_t v56 = *(void *)(v3 + 96);
  if (v55)
  {
    uint64_t v137 = MEMORY[0x263EF8330];
    uint64_t v138 = 0x40000000;
    uint64_t v139 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_2;
    uint64_t v140 = (atomic_ullong *)&__block_descriptor_tmp_31;
    unint64_t v141 = v3;
    uint64_t v57 = *(std::__shared_weak_count **)(v56 + 8);
    if (v57)
    {
      uint64_t v58 = std::__shared_weak_count::lock(v57);
      if (v58)
      {
        uint64_t v60 = v58;
        uint64_t v61 = *(void *)v56;
        if (*(void *)v56)
        {
          uint64_t v132 = (unsigned __int16 ****)(v56 + 88);
          uint64_t v133 = 1;
          MEMORY[0x223C999F0](v56 + 88, v59);
          uint64_t v62 = *(void *)(v56 + 24);
          if (v62)
          {
            uint64_t v63 = v56 + 24;
            do
            {
              unsigned int v64 = *(unsigned __int16 *)(v62 + 32);
              BOOL v65 = v64 >= 0x36;
              if (v64 >= 0x36) {
                uint64_t v66 = (uint64_t *)v62;
              }
              else {
                uint64_t v66 = (uint64_t *)(v62 + 8);
              }
              if (v65) {
                uint64_t v63 = v62;
              }
              uint64_t v62 = *v66;
            }
            while (*v66);
            if (v63 != v56 + 24 && *(unsigned __int16 *)(v63 + 32) <= 0x36u) {
              __TUAssertTrigger();
            }
          }
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 0x40000000;
          long long v160 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioDistortionInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          long long v161 = &unk_26460C320;
          long long v162 = (unint64_t *)&v137;
          uint64_t v67 = (uint64_t *)_Block_copy(&aBlock);
          LOWORD(v154) = 54;
          uint64_t v127 = &v154;
          uint64_t v68 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v56 + 16), (unsigned __int16 *)&v154, (uint64_t)&std::piecewise_construct, (_WORD **)&v127);
          uint64_t v69 = v68[5];
          v68[5] = v67;
          if (v69) {
            _Block_release(v69);
          }
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v132);
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          unint64_t v70 = *(atomic_ullong **)(v56 + 64);
          v134 = *(void (**)(uint64_t, uint64_t))(v56 + 56);
          char v135 = v70;
          if (v70) {
            atomic_fetch_add_explicit(v70 + 1, 1uLL, memory_order_relaxed);
          }
          QMIClientPool::registerUnsolicitedHandler(v61, (uint64_t)&v132, v56, 0x36u);
          qmi::Client::~Client((qmi::Client *)&v132);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v60);
      }
    }
    uint64_t v71 = *(void *)(v3 + 96);
    uint64_t v72 = *(std::__shared_weak_count **)(v71 + 8);
    if (v72)
    {
      uint64_t v73 = std::__shared_weak_count::lock(v72);
      if (v73)
      {
        uint64_t v75 = v73;
        uint64_t v76 = *(void *)v71;
        if (*(void *)v71)
        {
          uint64_t v132 = (unsigned __int16 ****)(v71 + 88);
          uint64_t v133 = 1;
          MEMORY[0x223C999F0](v71 + 88, v74);
          uint64_t v77 = *(void *)(v71 + 24);
          if (v77)
          {
            uint64_t v78 = v71 + 24;
            do
            {
              unsigned int v79 = *(unsigned __int16 *)(v77 + 32);
              BOOL v80 = v79 >= 0x2D;
              if (v79 >= 0x2D) {
                uint64_t v81 = (uint64_t *)v77;
              }
              else {
                uint64_t v81 = (uint64_t *)(v77 + 8);
              }
              if (v80) {
                uint64_t v78 = v77;
              }
              uint64_t v77 = *v81;
            }
            while (*v81);
            if (v78 != v71 + 24 && *(unsigned __int16 *)(v78 + 32) <= 0x2Du) {
              __TUAssertTrigger();
            }
          }
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 0x40000000;
          long long v160 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio20AudioInterfaceStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          long long v161 = &unk_26460C348;
          long long v162 = (unint64_t *)&__block_literal_global;
          unint64_t v82 = (uint64_t *)_Block_copy(&aBlock);
          LOWORD(v154) = 45;
          uint64_t v127 = &v154;
          uint64_t v83 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v71 + 16), (unsigned __int16 *)&v154, (uint64_t)&std::piecewise_construct, (_WORD **)&v127);
          int64_t v84 = v83[5];
          void v83[5] = v82;
          if (v84) {
            _Block_release(v84);
          }
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v132);
          uint64_t v132 = 0;
          uint64_t v133 = 0;
          uint64_t v85 = *(atomic_ullong **)(v71 + 64);
          v134 = *(void (**)(uint64_t, uint64_t))(v71 + 56);
          char v135 = v85;
          if (v85) {
            atomic_fetch_add_explicit(v85 + 1, 1uLL, memory_order_relaxed);
          }
          QMIClientPool::registerUnsolicitedHandler(v76, (uint64_t)&v132, v71, 0x2Du);
          qmi::Client::~Client((qmi::Client *)&v132);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v75);
      }
    }
    uint64_t v86 = *(void *)(v3 + 96);
    uint64_t v132 = (unsigned __int16 ****)MEMORY[0x263EF8330];
    uint64_t v133 = 0x40000000;
    v134 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_4;
    char v135 = (atomic_ullong *)&__block_descriptor_tmp_33_2;
    unint64_t v136 = v3;
    unint64_t v87 = *(std::__shared_weak_count **)(v86 + 8);
    if (v87)
    {
      uint64_t v88 = std::__shared_weak_count::lock(v87);
      if (v88)
      {
        int v92 = v88;
        uint64_t v93 = *(void *)v86;
        if (*(void *)v86)
        {
          uint64_t v127 = (unsigned __int16 ***)(v86 + 88);
          uint64_t v128 = 1;
          MEMORY[0x223C999F0](v86 + 88, v89, v90, v91);
          uint64_t v94 = *(void *)(v86 + 24);
          if (v94)
          {
            uint64_t v95 = v86 + 24;
            do
            {
              unsigned int v96 = *(unsigned __int16 *)(v94 + 32);
              BOOL v97 = v96 >= 0x35;
              if (v96 >= 0x35) {
                uint64_t v98 = (uint64_t *)v94;
              }
              else {
                uint64_t v98 = (uint64_t *)(v94 + 8);
              }
              if (v97) {
                uint64_t v95 = v94;
              }
              uint64_t v94 = *v98;
            }
            while (*v98);
            if (v95 != v86 + 24 && *(unsigned __int16 *)(v95 + 32) <= 0x35u) {
              __TUAssertTrigger();
            }
          }
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 0x40000000;
          long long v160 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          long long v161 = &unk_26460C370;
          long long v162 = (unint64_t *)&v132;
          unint64_t v99 = (uint64_t *)_Block_copy(&aBlock);
          LOWORD(v163) = 53;
          long long v154 = &v163;
          uint64_t v100 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v86 + 16), (unsigned __int16 *)&v163, (uint64_t)&std::piecewise_construct, (_WORD **)&v154);
          uint64_t v101 = v100[5];
          v100[5] = v99;
          if (v101) {
            _Block_release(v101);
          }
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v127);
          uint64_t v127 = 0;
          uint64_t v128 = 0;
          char v102 = *(atomic_ullong **)(v86 + 64);
          uint64_t v129 = *(void (**)(uint64_t, uint64_t))(v86 + 56);
          unint64_t v130 = v102;
          if (v102) {
            atomic_fetch_add_explicit(v102 + 1, 1uLL, memory_order_relaxed);
          }
          QMIClientPool::registerUnsolicitedHandler(v93, (uint64_t)&v127, v86, 0x35u);
          qmi::Client::~Client((qmi::Client *)&v127);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v92);
      }
    }
    uint64_t v103 = *(void *)(v3 + 96);
    uint64_t v127 = (unsigned __int16 ***)MEMORY[0x263EF8330];
    uint64_t v128 = 0x40000000;
    uint64_t v129 = ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_5;
    unint64_t v130 = (atomic_ullong *)&__block_descriptor_tmp_34_0;
    unint64_t v131 = v3;
    int v104 = *(std::__shared_weak_count **)(v103 + 8);
    if (v104)
    {
      v105 = std::__shared_weak_count::lock(v104);
      if (v105)
      {
        uint64_t v113 = v105;
        uint64_t v114 = *(void *)v103;
        if (*(void *)v103)
        {
          long long v154 = (unsigned __int16 **)(v103 + 88);
          uint64_t v155 = 1;
          MEMORY[0x223C999F0](v103 + 88, v106, v107, v108, v109, v110, v111, v112, v125, v126, v127, v128, v129, v130, v131, v132, v133, v134, v135,
            v136,
            v137,
            v138,
            v139);
          uint64_t v115 = *(void *)(v103 + 24);
          if (v115)
          {
            uint64_t v116 = v103 + 24;
            do
            {
              unsigned int v117 = *(unsigned __int16 *)(v115 + 32);
              BOOL v118 = v117 >= 0x37;
              if (v117 >= 0x37) {
                uint64_t v119 = (uint64_t *)v115;
              }
              else {
                uint64_t v119 = (uint64_t *)(v115 + 8);
              }
              if (v118) {
                uint64_t v116 = v115;
              }
              uint64_t v115 = *v119;
            }
            while (*v119);
            if (v116 != v103 + 24 && *(unsigned __int16 *)(v116 + 32) <= 0x37u) {
              __TUAssertTrigger();
            }
          }
          *(void *)&long long aBlock = MEMORY[0x263EF8330];
          *((void *)&aBlock + 1) = 0x40000000;
          long long v160 = ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio24AudioPSCallStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
          long long v161 = &unk_26460C398;
          long long v162 = (unint64_t *)&v127;
          uint64_t v120 = (uint64_t *)_Block_copy(&aBlock);
          unsigned __int16 v158 = 55;
          __int16 v163 = &v158;
          __int16 v121 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v103 + 16), &v158, (uint64_t)&std::piecewise_construct, &v163);
          v122 = v121[5];
          v121[5] = v120;
          if (v122) {
            _Block_release(v122);
          }
          std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v154);
          long long v154 = 0;
          uint64_t v155 = 0;
          uint64_t v123 = *(void *)(v103 + 64);
          uint64_t v156 = *(void *)(v103 + 56);
          uint64_t v157 = v123;
          if (v123) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v123 + 8), 1uLL, memory_order_relaxed);
          }
          QMIClientPool::registerUnsolicitedHandler(v114, (uint64_t)&v154, v103, 0x37u);
          qmi::Client::~Client((qmi::Client *)&v154);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v113);
      }
    }
    uint64_t v56 = *(void *)(v3 + 96);
  }
  QMIVirtualClient::addToPowerMode((QMIVirtualClient *)v56);
  xpc_release(v38);
  xpc_release(v26);
  std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](&v126);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v125);
}

void sub_2223FEFE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,xpc_object_t object,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,xpc_object_t a40,uint64_t a41,uint64_t a42,int a43,__int16 a44,char a45,char a46,xpc_object_t a47,xpc_object_t a48)
{
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100](v51 - 200);
  std::__shared_weak_count::__release_shared[abi:ne180100](v50);
  xpc_release(v49);
  xpc_release(v48);
  std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0,std::default_delete<QMIAudioCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<AudioCommandDriverDelegateInterface>,AudioCommandDriver::ServerEndpoints)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    xpc_release(*(xpc_object_t *)(v2 + 40));
    *(void *)(v2 + 40) = 0;
    xpc_release(*(xpc_object_t *)(v2 + 32));
    *(void *)(v2 + 32) = 0;
    unint64_t v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    int v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      unsigned int v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223C9A950](v2, 0xA0C40DF581522);
  }
  return a1;
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZZN21QMIAudioCommandDriver9bootstrapEN8dispatch13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEEN18AudioCommandDriver15ServerEndpointsEENK3__0clEv_block_invoke_5(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  int v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio15VocoderTypeInfo10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_2223FF830(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v61 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v20 = a1;
  uint64_t v21 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v57) = 2080;
      *(void *)((char *)&v57 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N Received vocoder info indication with error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    unsigned int v5 = (qmi::MessageBase *)(v1 + 8);
    uint64_t v51 = 0;
    char v52 = &v51;
    uint64_t v53 = 0x2000000000;
    int v54 = 18;
    uint64_t v47 = 0;
    unsigned int v48 = &v47;
    uint64_t v49 = 0x2000000000;
    int v50 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&long long v57 = 0x40000000;
    *((void *)&v57 + 1) = ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke;
    uint64_t v58 = &unk_26460C180;
    uint64_t v59 = &v51;
    uint64_t v60 = &v47;
    v26[0] = (unint64_t)buf;
    qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>((qmi::MessageBase *)(v1 + 8), (uint64_t)v26);
    uint64_t v43 = 0;
    uint64_t v44 = &v43;
    uint64_t v45 = 0x2000000000;
    int v46 = 0;
    int v46 = *((_DWORD *)v48 + 6);
    v39[0] = MEMORY[0x263EF8330];
    v39[1] = 0x40000000;
    uint64_t v40 = ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_2;
    uint64_t v41 = &unk_26460C1A8;
    uint64_t v42 = &v43;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(v5);
    uint64_t v8 = TlvValue;
    if (TlvValue)
    {
      int v9 = v7;
      v26[0] = TlvValue;
      LOBYTE(v35) = tlv::parseV<audio::tlv::I2SClockRateInfo>(v26, v7);
      if (v26[0]) {
        v40((uint64_t)v39, (unsigned __int8 *)&v35);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 16, v8, v9);
      }
    }
    uint64_t v35 = 0;
    uint64_t v36 = &v35;
    uint64_t v37 = 0x2000000000;
    int v38 = 8000;
    uint64_t v31 = 0;
    uint64_t v32 = &v31;
    uint64_t v33 = 0x2000000000;
    int v34 = 8000;
    v26[0] = MEMORY[0x263EF8330];
    v26[1] = 0x40000000;
    long long v27 = ___ZN21QMIAudioCommandDriver36handleVocoderTypeInfoIndication_syncERKN5audio15VocoderTypeInfo10IndicationE_block_invoke_3;
    uint64_t v28 = &unk_26460C1D0;
    uint64_t v29 = &v35;
    char v30 = &v31;
    uint64_t v10 = qmi::MessageBase::findTlvValue(v5);
    uint64_t v12 = v10;
    if (v10)
    {
      int v13 = v11;
      uint64_t v22 = v10;
      __int16 v55 = tlv::parseV<audio::tlv::EVSCodecInfo>((unint64_t *)&v22, v11);
      if (v22) {
        v27((uint64_t)v26, (unsigned __int8 *)&v55);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 17, v12, v13);
      }
    }
    int v14 = *((_DWORD *)v48 + 6);
    int v15 = *((_DWORD *)v44 + 6);
    int v16 = *((_DWORD *)v36 + 6);
    int v17 = *((_DWORD *)v32 + 6);
    uint64_t v18 = *(void *)(v2 + 64);
    LODWORD(v22) = *((_DWORD *)v52 + 6);
    HIDWORD(v22) = v14;
    int v23 = v15;
    int v24 = v16;
    int v25 = v17;
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v18 + 32))(v18, &v22, 1);
    _Block_object_dispose(&v31, 8);
    _Block_object_dispose(&v35, 8);
    _Block_object_dispose(&v43, 8);
    _Block_object_dispose(&v47, 8);
    _Block_object_dispose(&v51, 8);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v21);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v20);
}

void sub_2223FFBE4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)va1);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioDistortionInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_2223FFCC8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb0_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v34 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v25 = a1;
  uint64_t v26 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 67109378;
      DWORD1(buf[0]) = v3;
      WORD4(buf[0]) = 2080;
      *(void *)((char *)buf + 10) = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Received distortion indication with error code = 0x%x (%s)", (uint8_t *)buf, 0x12u);
    }
  }
  else
  {
    unsigned int v5 = (qmi::MessageBase *)(v1 + 8);
    memset(&v33[8], 0, 40);
    uint64_t v32 = 0;
    memset(buf, 0, sizeof(buf));
    *(int32x2_t *)uint64_t v33 = vdup_n_s32(0x1F40u);
    uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
    uint64_t v8 = TlvValue;
    if (TlvValue)
    {
      int v9 = v7;
      *(void *)&long long v27 = TlvValue;
      unsigned int v10 = tlv::parseV<audio::tlv::AudioDistortionInfo>((_DWORD **)&v27, v7);
      if ((void)v27) {
        *(void *)&buf[0] = __PAIR64__(v11, v10);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 1, v8, v9);
      }
    }
    uint64_t v12 = qmi::MessageBase::findTlvValue(v5);
    uint64_t v14 = v12;
    if (v12)
    {
      int v15 = v13;
      *(void *)&long long v27 = v12;
      uint64_t v16 = tlv::parseV<audio::tlv::AudioDistortionRatAndVocoderInfo>((_DWORD **)&v27, v13);
      if ((void)v27)
      {
        uint64_t v18 = v17;
        DWORD2(buf[0]) = v16;
        if (HIDWORD(v16) <= 0xD) {
          int v19 = HIDWORD(v16);
        }
        else {
          int v19 = 0;
        }
        uint64_t v20 = audioVocoderType4BytesAsString(v19);
        std::string::__assign_external((std::string *)&buf[1], v20);
        *(void *)uint64_t v33 = v18;
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 16, v14, v15);
      }
    }
    uint64_t v21 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
    if (v21)
    {
      char v30 = v21;
      long long v27 = 0u;
      memset(__p, 0, 28);
      tlv::parseV<audio::tlv::RadioMetrics>(&v30, v22, (uint64_t)&v27);
      if (v30)
      {
        if (!v33[44]) {
          v33[44] = 1;
        }
        *(_OWORD *)&v33[8] = v27;
        *(_OWORD *)&v33[24] = *(_OWORD *)__p;
        *(_DWORD *)&v33[40] = *(_DWORD *)&__p[16];
      }
    }
    uint64_t v23 = *(void *)(v2 + 64);
    *(void *)&long long v27 = *(void *)&buf[0];
    DWORD2(v27) = DWORD2(buf[0]);
    if (SHIBYTE(v32) < 0)
    {
      std::string::__init_copy_ctor_external((std::string *)__p, *(const std::string::value_type **)&buf[1], *((std::string::size_type *)&buf[1] + 1));
    }
    else
    {
      *(_OWORD *)std::string __p = buf[1];
      *(void *)&__p[16] = v32;
    }
    *(_OWORD *)&__p[24] = *(_OWORD *)v33;
    v29[0] = *(_OWORD *)&v33[16];
    *(_OWORD *)((char *)v29 + 13) = *(_OWORD *)&v33[29];
    (*(void (**)(uint64_t, long long *))(*(void *)v23 + 40))(v23, &v27);
    if ((__p[23] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(*(void **)&buf[1]);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v26);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v25);
}

void sub_2223FFFBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio20AudioInterfaceStatus10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_222400084(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio18AudioStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_22240010C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb2_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  uint64_t v71 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v28 = a1;
  uint64_t v29 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 67109378;
      HIDWORD(buf[0]) = v3;
      LOWORD(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 2) = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Received audio statistics indication with error code = 0x%x (%s)", (uint8_t *)buf, 0x12u);
    }
    goto LABEL_61;
  }
  unsigned int v5 = (qmi::MessageBase *)(v1 + 8);
  uint64_t v38 = 0;
  *(_OWORD *)uint64_t v36 = 0u;
  memset(v37, 0, 128);
  memset(v34, 0, sizeof(v34));
  *(_OWORD *)uint64_t v35 = (unint64_t)vdup_n_s32(0x1F40u);
  *(_OWORD *)&v35[16] = 0uLL;
  memset(&v37[60], 0, 17);
  *(void *)&v37[128] = "No Distortion";
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
  uint64_t v8 = TlvValue;
  if (!TlvValue) {
    goto LABEL_20;
  }
  int v9 = v7;
  *(void *)&v39[0] = TlvValue;
  memset(buf, 0, 40);
  tlv::parseV<audio::tlv::AudioInterfaceStatus>((_DWORD **)v39, v7, (uint64_t)buf);
  if (!*(void *)&v39[0])
  {
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 1, v8, v9);
LABEL_20:
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    goto LABEL_21;
  }
  v34[0] = (void *)buf[0];
  if (LODWORD(buf[1]) <= 0xD) {
    int v10 = buf[1];
  }
  else {
    int v10 = 0;
  }
  unsigned int v11 = audioVocoderType4BytesAsString(v10);
  std::string::__assign_external((std::string *)&v34[1], v11);
  *(_OWORD *)uint64_t v35 = *(_OWORD *)((char *)&buf[1] + 4);
  *(void *)&v35[16] = *(void *)((char *)&buf[3] + 4);
  *(_DWORD *)&v35[24] = HIDWORD(buf[4]);
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  switch(v10)
  {
    case 3:
      int v22 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v22)
      {
        uint64_t v41 = v22;
        memset(v39, 0, sizeof(v39));
        tlv::parseV<audio::tlv::AMRNBBitRateDistInfo>(&v41, v23, (uint64_t)v39);
        if (v41)
        {
          LODWORD(buf[0]) = v39[0];
          std::string::basic_string[abi:ne180100]<0>(&buf[1], "AMR-NB 4.75");
          LODWORD(buf[4]) = DWORD1(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&buf[5], "AMR-NB 5.15");
          LODWORD(v43.__r_.__value_.__l.__data_) = DWORD2(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v43.__r_.__value_.__l.__size_, "AMR-NB 5.9");
          LODWORD(v44.__r_.__value_.__r.__words[1]) = HIDWORD(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v44.__r_.__value_.__r.__words[2], "AMR-NB 6.7");
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v39[1];
          std::string::basic_string[abi:ne180100]<0>(&v46, "AMR-NB 7.4");
          DWORD2(v47) = DWORD1(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v48, "AMR-NB 7.95");
          DWORD2(v49) = DWORD2(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v50, "AMR-NB 10.2");
          int v52 = HIDWORD(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(v53, "AMR-NB 12.2");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>(&v31, buf, &v54, 8uLL);
          for (uint64_t i = 0; i != -32; i -= 4)
          {
            if (SHIBYTE(v53[i + 2]) < 0) {
              operator delete((void *)v53[i]);
            }
          }
        }
      }
      break;
    case 11:
      int v25 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v25)
      {
        uint64_t v41 = v25;
        LODWORD(v40[0]) = 0;
        memset(v39, 0, sizeof(v39));
        tlv::parseV<audio::tlv::AMRWBBitRateDistInfo>(&v41, v26, (uint64_t)v39);
        if (v41)
        {
          LODWORD(buf[0]) = v39[0];
          std::string::basic_string[abi:ne180100]<0>(&buf[1], "AMR-WB 6.6");
          LODWORD(buf[4]) = DWORD1(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&buf[5], "AMR-WB 8.85");
          LODWORD(v43.__r_.__value_.__l.__data_) = DWORD2(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v43.__r_.__value_.__l.__size_, "AMR-WB 12.65");
          LODWORD(v44.__r_.__value_.__r.__words[1]) = HIDWORD(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v44.__r_.__value_.__r.__words[2], "AMR-WB 14.25");
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v39[1];
          std::string::basic_string[abi:ne180100]<0>(&v46, "AMR-WB 15.85");
          DWORD2(v47) = DWORD1(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v48, "AMR-WB 18.25");
          DWORD2(v49) = DWORD2(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v50, "AMR-WB 19.85");
          int v52 = HIDWORD(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(v53, "AMR-WB 23.05");
          int v54 = v40[0];
          std::string::basic_string[abi:ne180100]<0>(v55, "AMR-WB 23.85");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>(&v31, buf, &v56, 9uLL);
          unint64_t v27 = 36;
          do
          {
            if (SHIBYTE(buf[v27 - 1]) < 0) {
              operator delete(*((void **)&v40[v27 / 2 + 1] + 1));
            }
            v27 -= 4;
          }
          while (v27 * 8);
        }
      }
      break;
    case 13:
      uint64_t v12 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
      if (v12)
      {
        uint64_t v41 = v12;
        memset(v40, 0, sizeof(v40));
        memset(v39, 0, sizeof(v39));
        tlv::parseV<audio::tlv::EVSBitRateDistInfo>(&v41, v13, (uint64_t)v39);
        if (v41)
        {
          LODWORD(buf[0]) = v39[0];
          std::string::basic_string[abi:ne180100]<0>(&buf[1], "EVS IO 6.6");
          LODWORD(buf[4]) = DWORD1(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&buf[5], "EVS IO 8.85");
          LODWORD(v43.__r_.__value_.__l.__data_) = DWORD2(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v43.__r_.__value_.__l.__size_, "EVS IO 12.65");
          LODWORD(v44.__r_.__value_.__r.__words[1]) = HIDWORD(v39[0]);
          std::string::basic_string[abi:ne180100]<0>(&v44.__r_.__value_.__r.__words[2], "EVS IO 14.25");
          LODWORD(__p.__r_.__value_.__r.__words[2]) = v39[1];
          std::string::basic_string[abi:ne180100]<0>(&v46, "EVS IO 15.85");
          DWORD2(v47) = DWORD1(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v48, "EVS IO 18.25");
          DWORD2(v49) = DWORD2(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(&v50, "EVS IO 19.85");
          int v52 = HIDWORD(v39[1]);
          std::string::basic_string[abi:ne180100]<0>(v53, "EVS IO 23.05");
          int v54 = v40[0];
          std::string::basic_string[abi:ne180100]<0>(v55, "EVS IO 23.85");
          int v56 = DWORD1(v40[0]);
          std::string::basic_string[abi:ne180100]<0>(v57, "EVS PRI 2.8");
          int v58 = DWORD2(v40[0]);
          std::string::basic_string[abi:ne180100]<0>(v59, "EVS PRI 7.2");
          int v60 = HIDWORD(v40[0]);
          std::string::basic_string[abi:ne180100]<0>(v61, "EVS PRI 8");
          int v62 = v40[1];
          std::string::basic_string[abi:ne180100]<0>(v63, "EVS PRI 9.6");
          int v64 = DWORD1(v40[1]);
          std::string::basic_string[abi:ne180100]<0>(v65, "EVS PRI 13.2");
          int v66 = DWORD2(v40[1]);
          std::string::basic_string[abi:ne180100]<0>(v67, "EVS PRI 16.4");
          int v68 = HIDWORD(v40[1]);
          std::string::basic_string[abi:ne180100]<0>(v69, "EVS PRI 24.4");
          std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>(&v31, buf, &v70, 0x10uLL);
          unint64_t v14 = 64;
          do
          {
            if (SHIBYTE(buf[v14 - 1]) < 0) {
              operator delete(*((void **)&v40[v14 / 2 + 1] + 1));
            }
            v14 -= 4;
          }
          while (v14 * 8);
        }
      }
      break;
  }
LABEL_21:
  if (v32 != v31) {
    AudioStats::fillTopUsedBitRates((uint64_t)v34, (uint64_t)&v31);
  }
  memset(v30, 0, sizeof(v30));
  if (!HIDWORD(v34[0]))
  {
    uint64_t v18 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
    if (v18)
    {
      uint64_t v41 = v18;
      LODWORD(v40[0]) = 0;
      memset(v39, 0, sizeof(v39));
      tlv::parseV<audio::tlv::DistortionTypesDistUL>(&v41, v19, (uint64_t)v39);
      if (v41)
      {
        v37[56] = 1;
        *(_DWORD *)&v37[60] = DWORD1(v39[0]);
        *(_DWORD *)&v37[120] = v39[0];
        *(void *)&v37[64] = __PAIR64__(DWORD1(v39[1]), HIDWORD(v39[0]));
        *(_DWORD *)&v37[72] = HIDWORD(v39[1]);
        LODWORD(buf[0]) = v40[0];
        buf[1] = "AudioDistortionTxZeros";
        LODWORD(buf[2]) = v39[1];
        _DWORD buf[3] = "AudioDistortionTxLowEnergy";
        LODWORD(buf[4]) = DWORD2(v39[0]);
        buf[5] = "AudioDistortionTxHighNoise";
        std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>((uint64_t)v30, (char *)buf, (char *)&buf[6], 3uLL);
        int v17 = DWORD2(v39[1]);
        goto LABEL_31;
      }
    }
LABEL_30:
    int v17 = 0;
    goto LABEL_31;
  }
  int v15 = (_DWORD *)qmi::MessageBase::findTlvValue(v5);
  if (!v15) {
    goto LABEL_30;
  }
  uint64_t v41 = v15;
  memset(v40, 0, 28);
  memset(v39, 0, sizeof(v39));
  tlv::parseV<audio::tlv::DistortionTypesDistDL>(&v41, v16, (uint64_t)v39);
  if (!v41) {
    goto LABEL_30;
  }
  v37[76] = 1;
  *(_DWORD *)&v37[120] = v39[0];
  *(void *)&v37[80] = __PAIR64__(DWORD1(v40[0]), HIDWORD(v39[1]));
  *(void *)&v37[88] = __PAIR64__(DWORD1(v40[1]), HIDWORD(v40[0]));
  *(_OWORD *)&v37[100] = *(_OWORD *)((char *)v39 + 8);
  *(_DWORD *)&v37[96] = DWORD1(v39[0]);
  *(_DWORD *)&v37[116] = DWORD2(v39[1]);
  LODWORD(buf[0]) = v40[0];
  buf[1] = "AudioDistortionRxHighNoise";
  LODWORD(buf[2]) = DWORD2(v40[0]);
  _DWORD buf[3] = "AudioDistortionRxLowEnergy";
  LODWORD(buf[4]) = DWORD2(v40[1]);
  buf[5] = "AudioDistortionRxZeros";
  LODWORD(buf[6]) = DWORD2(v39[0]);
  LODWORD(v43.__r_.__value_.__l.__data_) = v39[1];
  buf[7] = "AudioDistortionAverageSpeechLoss";
  v43.__r_.__value_.__l.__size_ = (std::string::size_type)"AudioDistortionContinuousSpeechLoss";
  LODWORD(v43.__r_.__value_.__r.__words[2]) = DWORD2(v39[1]);
  v44.__r_.__value_.__r.__words[0] = (std::string::size_type)"AudioDistortionRxLinkBroken";
  std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>((uint64_t)v30, (char *)buf, &v44.__r_.__value_.__s.__data_[8], 6uLL);
  int v17 = v40[1];
LABEL_31:
  AudioStats::fillDistortionDurMetrics((uint64_t)v34, (int **)v30, v17);
  uint64_t v20 = *(void *)(v2 + 64);
  buf[0] = v34[0];
  if (SHIBYTE(v34[3]) < 0)
  {
    std::string::__init_copy_ctor_external((std::string *)&buf[1], (const std::string::value_type *)v34[1], (std::string::size_type)v34[2]);
  }
  else
  {
    *(_OWORD *)&buf[1] = *(_OWORD *)&v34[1];
    _DWORD buf[3] = v34[3];
  }
  *(_OWORD *)&uint8_t buf[4] = *(_OWORD *)v35;
  *(_OWORD *)((char *)&buf[5] + 4) = *(_OWORD *)&v35[12];
  if ((v37[7] & 0x80000000) != 0)
  {
    std::string::__init_copy_ctor_external(&v43, (const std::string::value_type *)v36[0], (std::string::size_type)v36[1]);
  }
  else
  {
    *(_OWORD *)&v43.__r_.__value_.__l.__data_ = *(_OWORD *)v36;
    v43.__r_.__value_.__r.__words[2] = *(void *)v37;
  }
  if ((v37[31] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&v44, *(const std::string::value_type **)&v37[8], *(std::string::size_type *)&v37[16]);
  }
  else {
    std::string v44 = *(std::string *)&v37[8];
  }
  if ((v37[55] & 0x80000000) != 0) {
    std::string::__init_copy_ctor_external(&__p, *(const std::string::value_type **)&v37[32], *(std::string::size_type *)&v37[40]);
  }
  else {
    std::string __p = *(std::string *)&v37[32];
  }
  long long v48 = *(_OWORD *)&v37[88];
  long long v49 = *(_OWORD *)&v37[104];
  long long v50 = *(_OWORD *)&v37[120];
  int v51 = v38;
  long long v46 = *(_OWORD *)&v37[56];
  long long v47 = *(_OWORD *)&v37[72];
  (*(void (**)(uint64_t, void *))(*(void *)v20 + 48))(v20, buf);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v43.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf[3]) < 0) {
    operator delete((void *)buf[1]);
  }
  if (v30[0]) {
    operator delete(v30[0]);
  }
  *(void *)&v39[0] = &v31;
  std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)v39);
  if ((v37[55] & 0x80000000) != 0) {
    operator delete(*(void **)&v37[32]);
  }
  if ((v37[31] & 0x80000000) != 0) {
    operator delete(*(void **)&v37[8]);
  }
  if ((v37[7] & 0x80000000) != 0) {
    operator delete(v36[0]);
  }
  if (SHIBYTE(v34[3]) < 0) {
    operator delete(v34[1]);
  }
LABEL_61:
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v29);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v28);
}

void sub_222400C3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,char a55)
{
  uint64_t v56 = 288;
  while (1)
  {
    if (*(&a55 + v56 - 1) < 0) {
      operator delete(*(void **)((char *)&a52 + v56));
    }
    v56 -= 32;
    if (!v56)
    {
      a11 = &a14;
      std::vector<vs::tlv::RemoteNumberListItem>::__destroy_vector::operator()[abi:ne180100]((void ***)&a11);
      AudioStats::~AudioStats(&a17);
      _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
      std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
      _Unwind_Resume(a1);
    }
  }
}

void ___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN5audio24AudioPSCallStatisticsInd10IndicationEEEvU13block_pointerFvRKT_E_block_invoke(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a2[1];
  v5[0] = *a2;
  v5[1] = v3;
  uint64_t v4 = a2[2];
  _DWORD v5[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  qmi::MessageBase::validateMsgId((qmi::MessageBase *)v5);
  (*(void (**)(uint64_t, void *))(v2 + 16))(v2, v5);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v5);
}

void sub_222400E68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

uint64_t *_ZZN8dispatch5asyncIZNK3ctu20SharedSynchronizableI18AudioCommandDriverE15execute_wrappedIZZZN21QMIAudioCommandDriver9bootstrapENS_13group_sessionENSt3__110shared_ptrI35AudioCommandDriverDelegateInterfaceEENS3_15ServerEndpointsEENK3__0clEvEUb3_EUlvE_EEvOT_EUlvE_EEvP16dispatch_queue_sNS8_10unique_ptrISF_NS8_14default_deleteISF_EEEEENUlPvE_8__invokeESO_(uint64_t *a1)
{
  buf[9] = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  unsigned int v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf[0]) = 67109378;
      HIDWORD(buf[0]) = v3;
      LOWORD(buf[1]) = 2080;
      *(void *)((char *)&buf[1] + 2) = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Received PS Call Statistcs indication with error code = 0x%x (%s)", (uint8_t *)buf, 0x12u);
    }
  }
  else
  {
    memset(buf, 0, 64);
    uint64_t TlvValue = (_DWORD *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)(v1 + 8));
    if (TlvValue)
    {
      int v16 = TlvValue;
      memset(__p, 0, sizeof(__p));
      tlv::parseV<audio::tlv::AudioJBMStat>(&v16, v7, (uint64_t)__p);
      if (v16)
      {
        LODWORD(buf[0]) = 0;
        memset(&buf[1], 0, 48);
        LOBYTE(buf[7]) = 1;
        int v8 = HIDWORD(__p[3]) <= 0xD ? HIDWORD(__p[3]) : 0;
        int v9 = audioVocoderType4BytesAsString(v8);
        std::string::__assign_external((std::string *)&buf[1], v9);
        *(_OWORD *)((char *)&buf[4] + 4) = *(_OWORD *)__p;
        HIDWORD(buf[6]) = __p[2];
        LODWORD(buf[0]) = __p[3];
        LODWORD(buf[4]) = HIDWORD(__p[2]);
        if (LOBYTE(buf[7]))
        {
          uint64_t v10 = *(void *)(v2 + 64);
          LODWORD(__p[0]) = __p[3];
          if (SHIBYTE(buf[3]) < 0)
          {
            std::string::__init_copy_ctor_external((std::string *)&__p[1], (const std::string::value_type *)buf[1], buf[2]);
          }
          else
          {
            *(_OWORD *)&__p[1] = *(_OWORD *)&buf[1];
            __p[3] = (void *)buf[3];
          }
          long long v14 = *(_OWORD *)&buf[4];
          uint64_t v15 = buf[6];
          (*(void (**)(uint64_t, void **))(*(void *)v10 + 56))(v10, __p);
          if (SHIBYTE(__p[3]) < 0) {
            operator delete(__p[1]);
          }
          if (LOBYTE(buf[7]) && SHIBYTE(buf[3]) < 0) {
            operator delete((void *)buf[1]);
          }
        }
      }
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v12);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v11);
}

void sub_22240109C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32)
{
  if (a32)
  {
    if (a28 < 0) {
      operator delete(__p);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIAudioCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  int v9 = a1;
  uint64_t v10 = v4;
  uint64_t v5 = *(void *)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 96);
  if (v6)
  {
    uint64_t v11 = v6 + 88;
    uint64_t v12 = 1;
    MEMORY[0x223C999F0](v6 + 88, a2, a3, a4);
    *(unsigned char *)(v6 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v11);
  }
  uint64_t v7 = *(void *)(v5 + 112);
  if (v7)
  {
    uint64_t v11 = v7 + 88;
    uint64_t v12 = 1;
    MEMORY[0x223C999F0](v7 + 88, a2, a3, a4);
    *(unsigned char *)(v7 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v11);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v10);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v9);
}

void sub_22240117C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  (*(void (**)(void, uint64_t))(**(void **)(**(void **)a1 + 64) + 16))(*(void *)(**(void **)a1 + 64), 1);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_222401214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIAudioCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  (*(void (**)(void, void))(**(void **)(**(void **)a1 + 64) + 16))(*(void *)(**(void **)a1 + 64), 0);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_2224012BC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void ___ZN16QMIVirtualClient4sendIN5audio14GetVocoderType7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver16queryVocoderInfoEvE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(void *a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a2[1];
        uint64_t v10 = *a2;
        uint64_t v11 = v6;
        uint64_t v7 = a2[2];
        uint64_t v12 = v7;
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        qmi::MessageBase::validateMsgId((qmi::MessageBase *)&v10);
        uint64_t v8 = a1[6];
        uint64_t v13 = v8;
        uint64_t v14 = v10;
        uint64_t v15 = v11;
        uint64_t v16 = v12;
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
        }
        int v9 = *(std::__shared_weak_count **)(v8 + 16);
        if (v9)
        {
          if (std::__shared_weak_count::lock(v9)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_222401478(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t __copy_helper_block_e8_32c43_ZTSNSt3__18weak_ptrI18AudioCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c43_ZTSNSt3__18weak_ptrI18AudioCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>(QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::queryVocoderInfo(void)::$_0::operator() const(audio::GetVocoderType::Response const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v64 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v21 = a1;
  uint64_t v22 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = v3;
      LOWORD(v60) = 2080;
      *(void *)((char *)&v60 + 2) = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N Could not get vocoder type with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  else
  {
    uint64_t v5 = (qmi::MessageBase *)(v1 + 8);
    uint64_t v53 = 0;
    int v54 = &v53;
    uint64_t v55 = 0x2000000000;
    int v56 = 18;
    uint64_t v49 = 0;
    long long v50 = &v49;
    uint64_t v51 = 0x2000000000;
    int v52 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&long long v60 = 0x40000000;
    *((void *)&v60 + 1) = ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke;
    uint64_t v61 = &unk_26460C0A8;
    int v62 = &v53;
    uint64_t v63 = &v49;
    v28[0] = (unint64_t)buf;
    int v6 = qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>((qmi::MessageBase *)(v1 + 8), (uint64_t)v28);
    uint64_t v45 = 0;
    long long v46 = &v45;
    uint64_t v47 = 0x2000000000;
    int v48 = 0;
    int v48 = *((_DWORD *)v50 + 6);
    v41[0] = MEMORY[0x263EF8330];
    v41[1] = 0x40000000;
    uint64_t v42 = ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_2;
    std::string v43 = &unk_26460C0D0;
    std::string v44 = &v45;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(v5);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      v28[0] = TlvValue;
      LOBYTE(v37) = tlv::parseV<audio::tlv::I2SClockRateInfo>(v28, v8);
      if (v28[0]) {
        v42((uint64_t)v41, (unsigned __int8 *)&v37);
      }
      else {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 16, v9, v10);
      }
    }
    uint64_t v37 = 0;
    uint64_t v38 = &v37;
    uint64_t v39 = 0x2000000000;
    int v40 = 8000;
    uint64_t v33 = 0;
    uint64_t v34 = &v33;
    uint64_t v35 = 0x2000000000;
    int v36 = 8000;
    v28[0] = MEMORY[0x263EF8330];
    v28[1] = 0x40000000;
    uint64_t v29 = ___ZN21QMIAudioCommandDriver29handleGetVocoderTypeResp_syncERKN5audio14GetVocoderType8ResponseE_block_invoke_3;
    char v30 = &unk_26460C0F8;
    uint64_t v31 = &v37;
    uint64_t v32 = &v33;
    uint64_t v11 = (void *)qmi::MessageBase::findTlvValue(v5);
    uint64_t v13 = v11;
    if (v11)
    {
      int v14 = v12;
      __p[0] = v11;
      LOWORD(v26) = tlv::parseV<audio::tlv::EVSCodecInfo>((unint64_t *)__p, v12);
      if (__p[0]) {
        v29((uint64_t)v28, (unsigned __int8 *)&v26);
      }
      else {
        ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)v5, 17, v13, v14);
      }
    }
    if (v6)
    {
      int v15 = *((_DWORD *)v50 + 6);
      LODWORD(v26) = *((_DWORD *)v54 + 6);
      DWORD1(v26) = v15;
      int v16 = *((_DWORD *)v38 + 6);
      DWORD2(v26) = *((_DWORD *)v46 + 6);
      HIDWORD(v26) = v16;
      int v27 = *((_DWORD *)v34 + 6);
      int v17 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        VocoderInfo::asString((VocoderInfo *)&v26, __p);
        uint64_t v18 = v25 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)long long v57 = 136315138;
        int v58 = v18;
        _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I Got Vocoder Info: %s", v57, 0xCu);
        if (v25 < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v19 = *(void *)(v2 + 64);
      *(_OWORD *)std::string __p = v26;
      int v24 = v27;
      (*(void (**)(uint64_t, void **, void))(*(void *)v19 + 32))(v19, __p, 0);
    }
    _Block_object_dispose(&v33, 8);
    _Block_object_dispose(&v37, 8);
    _Block_object_dispose(&v45, 8);
    _Block_object_dispose(&v49, 8);
    _Block_object_dispose(&v53, 8);
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v22);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v21);
}

void sub_2224018FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37)
{
  _Block_object_dispose(&a24, 8);
  _Block_object_dispose(&a28, 8);
  _Block_object_dispose(&a37, 8);
  _Block_object_dispose((const void *)(v37 - 224), 8);
  _Block_object_dispose((const void *)(v37 - 192), 8);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t qmi::MessageBase::applyTlv<audio::tlv::VocoderInfo,void({block_pointer}&)(audio::tlv::VocoderInfo const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t result = qmi::MessageBase::findTlvValue(a1);
  if (result)
  {
    uint64_t v6 = result;
    int v7 = v5;
    uint64_t v10 = result;
    tlv::parseV<audio::tlv::VocoderInfo>((unint64_t *)&v10, v5);
    if (v10)
    {
      (*(void (**)(void))(*(void *)a2 + 16))();
      return 1;
    }
    else
    {
      int v8 = (uint64_t (*)(uint64_t, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78];
      uint64_t v9 = *(unsigned __int16 *)a1;
      return v8(v9, 1, v6, v7);
    }
  }
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::VocoderInfo>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::I2SClockRateInfo>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::ProfileIdentifer>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::EVSCodecInfo>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN5audio23AudioRateSwitchComplete7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23audioRateSwitchCompleteE11VocoderInfoE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS8_8weak_ptrIT0_EESA__block_invoke(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        int v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::audioRateSwitchComplete(VocoderInfo)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  int v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = *(_DWORD *)(v1 + 12);
  if (v3)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v11 = v3;
      __int16 v12 = 2080;
      uint64_t v13 = qmi::asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N Could not set audio rate switch complete with code = 0x%x (%s)", buf, 0x12u);
      int v3 = *(_DWORD *)(v1 + 12);
    }
    if (v3) {
      BOOL v5 = v3 == 26;
    }
    else {
      BOOL v5 = 1;
    }
    uint64_t v6 = v5;
  }
  else
  {
    uint64_t v6 = 1;
  }
  (*(void (**)(void, uint64_t))(**(void **)(v2 + 64) + 64))(*(void *)(v2 + 64), v6);
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev(&v9);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v8);
}

void sub_222401F3C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s, std::string::size_type __n)
{
  LODWORD(v6) = SHIBYTE(this->__r_.__value_.__r.__words[2]);
  if ((v6 & 0x80000000) != 0)
  {
    unint64_t v10 = this->__r_.__value_.__r.__words[2];
    unint64_t v9 = (v10 & 0x7FFFFFFFFFFFFFFFLL) - 1;
    if (v9 < __n)
    {
      std::string::size_type size = this->__r_.__value_.__l.__size_;
      goto LABEL_6;
    }
    unint64_t v6 = HIBYTE(v10);
    uint64_t v7 = (std::string *)this->__r_.__value_.__r.__words[0];
  }
  else
  {
    uint64_t v7 = this;
    if (__n > 0x16)
    {
      std::string::size_type size = HIBYTE(this->__r_.__value_.__r.__words[2]);
      unint64_t v9 = 22;
LABEL_6:
      std::string::__grow_by_and_replace(this, v9, __n - v9, size, 0, size, __n, __s);
      return this;
    }
  }
  if (__n)
  {
    memmove(v7, __s, __n);
    LOBYTE(v6) = *((unsigned char *)&this->__r_.__value_.__s + 23);
  }
  if ((v6 & 0x80) != 0) {
    this->__r_.__value_.__l.__size_ = __n;
  }
  else {
    *((unsigned char *)&this->__r_.__value_.__s + 23) = __n & 0x7F;
  }
  v7->__r_.__value_.__s.__data_[__n] = 0;
  return this;
}

std::string *__cdecl std::string::__assign_external(std::string *this, const std::string::value_type *__s)
{
  size_t v4 = strlen(__s);

  return std::string::__assign_external(this, __s, v4);
}

void std::vector<std::pair<unsigned int,std::string>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*>(uint64_t *a1, _DWORD *a2, _DWORD *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = a1[2];
  unint64_t v10 = (_DWORD *)*a1;
  if (a4 > (v8 - *a1) >> 5)
  {
    if (v10)
    {
      std::vector<vs::tlv::RemoteNumberListItem>::__clear[abi:ne180100](a1);
      operator delete((void *)*a1);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    uint64_t v11 = v8 >> 4;
    if (v8 >> 4 <= a4) {
      uint64_t v11 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v12 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v11;
    }
    if (v12 >> 59) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v13 = operator new(32 * v12);
    *a1 = (uint64_t)v13;
    a1[1] = (uint64_t)v13;
    a1[2] = (uint64_t)v13 + 32 * v12;
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(v9, (uint64_t)a2, (uint64_t)a3, (uint64_t)v13);
    goto LABEL_13;
  }
  unint64_t v15 = (a1[1] - (uint64_t)v10) >> 5;
  if (v15 < a4)
  {
    int v16 = &a2[8 * v15];
    std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(a2, v16, v10);
    uint64_t v14 = std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(v9, (uint64_t)v16, (uint64_t)a3, a1[1]);
LABEL_13:
    a1[1] = v14;
    return;
  }
  int v17 = (void **)std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(a2, a3, v10);
  for (uint64_t i = (void **)a1[1]; i != v17; i -= 4)
  {
    if (*((char *)i - 1) < 0) {
      operator delete(*(i - 3));
    }
  }
  a1[1] = (uint64_t)v17;
}

void sub_2224021AC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_2224021B4(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<std::pair<unsigned int,std::string>>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*>(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  _OWORD v11[2] = &v14;
  uint64_t v12 = 0;
  if (a2 != a3)
  {
    unint64_t v6 = (long long *)(a2 + 8);
    do
    {
      uint64_t v7 = (uint64_t)v6 - 8;
      *(_DWORD *)uint64_t v4 = *((_DWORD *)v6 - 2);
      uint64_t v8 = (std::string *)(v4 + 8);
      if (*((char *)v6 + 23) < 0)
      {
        std::string::__init_copy_ctor_external(v8, *(const std::string::value_type **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v9 = *v6;
        *(void *)(v4 + 24) = *((void *)v6 + 2);
        *(_OWORD *)&v8->__r_.__value_.__l.__data_ = v9;
      }
      v4 += 32;
      uint64_t v14 = v4;
      v6 += 2;
    }
    while (v7 + 32 != a3);
  }
  LOBYTE(v12) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<cat::tlv::Item>,cat::tlv::Item*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v11);
  return v4;
}

void sub_222402274(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

_DWORD *std::__unwrap_and_dispatch[abi:ne180100]<std::__overload<std::__copy_loop<std::_ClassicAlgPolicy>,std::__copy_trivial>,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string> const*,std::pair<unsigned int,std::string>*,0>(_DWORD *a1, _DWORD *a2, _DWORD *a3)
{
  if (a1 != a2)
  {
    BOOL v5 = a1;
    do
    {
      unint64_t v6 = (const std::string *)(v5 + 2);
      int v7 = *v5;
      v5 += 8;
      uint64_t v8 = (std::string *)(a3 + 2);
      *a3 = v7;
      a3 += 8;
      std::string::operator=(v8, v6);
    }
    while (v5 != a2);
  }
  return a3;
}

char *std::vector<std::pair<unsigned int,char const*>>::__assign_with_size[abi:ne180100]<std::pair<unsigned int,char const*> const*,std::pair<unsigned int,char const*> const*>(uint64_t a1, char *a2, char *a3, unint64_t a4)
{
  unint64_t v6 = a2;
  uint64_t v8 = *(void *)(a1 + 16);
  uint64_t result = *(char **)a1;
  if (a4 <= (v8 - (uint64_t)result) >> 4)
  {
    int v16 = *(char **)(a1 + 8);
    unint64_t v15 = (void *)(a1 + 8);
    uint64_t v12 = v16;
    unint64_t v17 = (v16 - result) >> 4;
    if (v17 >= a4)
    {
      uint64_t v22 = result;
      if (a2 != a3)
      {
        int v23 = result;
        do
        {
          *(_DWORD *)int v23 = *(_DWORD *)v6;
          *((void *)v23 + 1) = *((void *)v6 + 1);
          v22 += 16;
          v6 += 16;
          v23 += 16;
        }
        while (v6 != a3);
      }
      int64_t v14 = v22 - result;
      uint64_t v12 = result;
    }
    else
    {
      uint64_t v18 = &a2[16 * v17];
      if (v12 != result)
      {
        do
        {
          *(_DWORD *)uint64_t result = *(_DWORD *)v6;
          *((void *)result + 1) = *((void *)v6 + 1);
          v6 += 16;
          result += 16;
        }
        while (v6 != v18);
      }
      uint64_t v19 = v12;
      if (v18 != a3)
      {
        uint64_t v20 = v12;
        do
        {
          long long v21 = *(_OWORD *)v18;
          v18 += 16;
          *(_OWORD *)uint64_t v20 = v21;
          v20 += 16;
          v19 += 16;
        }
        while (v18 != a3);
      }
      int64_t v14 = v19 - v12;
    }
  }
  else
  {
    if (result)
    {
      *(void *)(a1 + 8) = result;
      operator delete(result);
      uint64_t v8 = 0;
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    uint64_t v10 = v8 >> 3;
    if (v8 >> 3 <= a4) {
      uint64_t v10 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v11 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v11 = v10;
    }
    if (v11 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = (char *)operator new(16 * v11);
    uint64_t v12 = result;
    *(void *)a1 = result;
    *(void *)(a1 + 8) = result;
    *(void *)(a1 + 16) = &result[16 * v11];
    uint64_t v13 = result;
    if (v6 != a3)
    {
      uint64_t result = (char *)memcpy(result, v6, ((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16);
      uint64_t v13 = &v12[((a3 - v6 - 16) & 0xFFFFFFFFFFFFFFF0) + 16];
    }
    int64_t v14 = v13 - v12;
    unint64_t v15 = (void *)(a1 + 8);
  }
  *unint64_t v15 = &v12[v14];
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::getSize()
{
  return tlv::size<wds::tlv::Profile3GPP_PcoMcc>();
}

_WORD **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_WORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::Profile3GPP_PcoMcc>((_WORD **)a2, (_WORD *)(a1 + 10));
  int v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AntennaPreference>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3bsp20SetAntennaPreference7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver30sendAudioIOStatePolicyDecisionEN12capabilities2ct24AntennaSwitchCommandTypeE17AntennaPreferenceE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioIOStatePolicyDecision(capabilities::ct::AntennaSwitchCommandType,AntennaPreference)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  int v2 = v1[3];
  if (v2)
  {
    char v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v8 = v2;
      __int16 v9 = 2080;
      uint64_t v10 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N SetAntennaPreference failed with error code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_22240278C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<bsp::tlv::AudioLoggingEnabled>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN3bsp22SetAudioLoggingEnabled7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver23sendAudioLoggingEnabledEbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        int v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioLoggingEnabled(BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  int v2 = v1[3];
  if (v2)
  {
    char v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v8 = v2;
      __int16 v9 = 2080;
      uint64_t v10 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Could not send audio logging enabled with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_222402AB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::getSize()
{
  return tlv::size<wds::tlv::Ipv4Address>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<awd::tlv::Metrics>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<audio::tlv::DisableStatus>::clone()
{
}

void ___ZN16QMIVirtualClient4sendIN5audio18SetAudioIndDisable7RequestE18AudioCommandDriverZN21QMIAudioCommandDriver25sendAudioStatIndsDisabledEbbbE3__0EENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NS7_8weak_ptrIT0_EES9__block_invoke(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[5];
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (a1[4])
      {
        uint64_t v6 = a1[6];
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        int v8 = *(std::__shared_weak_count **)(v6 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<AudioCommandDriver>::execute_wrapped<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>(QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1} &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1},dispatch_queue_s *::default_delete<QMIAudioCommandDriver::sendAudioStatIndsDisabled(BOOL,BOOL,BOOL)::$_0::operator() const(qmi::ResponseBase const&)::{lambda(void)#1}>>)::{lambda(void *)#1}::__invoke(_DWORD **a1)
{
  uint64_t v11 = *MEMORY[0x263EF8340];
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  int v2 = v1[3];
  if (v2)
  {
    char v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109378;
      int v8 = v2;
      __int16 v9 = 2080;
      uint64_t v10 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Could not send audio stat disabled with code = 0x%x (%s)", buf, 0x12u);
    }
  }
  _ZNSt3__110unique_ptrIZZN19QMIAQMCommandDriver9bootstrapEN8dispatch13group_sessionEN3xpc10connectionENS_10shared_ptrI33AQMCommandDriverDelegateInterfaceEEEUb_E3__0NS_14default_deleteIS9_EEED1B8ne180100Ev((uint64_t *)&v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_222402DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void QMIWiFiSettingsCommandDriver::create()
{
}

void sub_222402EC8(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C4020D9610FLL);
  }
  _Unwind_Resume(exception_object);
}

void *QMIWiFiSettingsCommandDriver::QMIWiFiSettingsCommandDriver(void *a1, uint64_t a2, dispatch_object_t *a3)
{
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  WiFiSettingsCommandDriver::WiFiSettingsCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  *a1 = &unk_26D4C3CB0;
  a1[12] = 0;
  a1[13] = 0;
  a1[11] = &unk_26D4C3D00;
  return a1;
}

void sub_222402FA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void QMIWiFiSettingsCommandDriver::registered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIWiFiSettingsCommandDriver::registered(uint64_t a1)
{
}

void QMIWiFiSettingsCommandDriver::deregistered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'QMIWiFiSettingsCommandDriver::deregistered(uint64_t a1)
{
}

void QMIWiFiSettingsCommandDriver::bootstrap(uint64_t a1, dispatch_object_t *a2, void **a3, uint64_t a4)
{
  uint64_t v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  int v8 = *a3;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_null_create();
  }
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (v10)
  {
    if (std::__shared_weak_count::lock(v10)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIWiFiSettingsCommandDriver::stop(uint64_t a1, dispatch_object_t *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIWiFiSettingsCommandDriver::sendNetworkInfo(uint64_t a1, uint64_t a2, const std::string::value_type *a3)
{
  uint64_t v43 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (const std::string::value_type *)a2;
    if (*(char *)(a2 + 23) < 0) {
      uint64_t v7 = *(const std::string::value_type **)a2;
    }
    int v8 = a3;
    if (a3[23] < 0) {
      int v8 = *(const std::string::value_type **)a3;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I Sending network info bssid: %s ssid: %s", buf, 0x16u);
  }
  if (a3[23] < 0) {
    unint64_t v9 = *((void *)a3 + 1);
  }
  else {
    unint64_t v9 = *((unsigned __int8 *)a3 + 23);
  }
  if (v9 >= 0x21)
  {
    unsigned int v10 = *((unsigned __int8 *)a3 + 23);
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = a3;
      if ((v10 & 0x80) != 0) {
        uint64_t v12 = *(const std::string::value_type **)a3;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v12;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = 32;
      _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#N Truncating SSID (%s) to %zu bytes", buf, 0x16u);
      unsigned int v10 = *((unsigned __int8 *)a3 + 23);
    }
    if ((v10 & 0x80) != 0)
    {
      if (*((void *)a3 + 1) >= 0x20uLL)
      {
        uint64_t v13 = *(const std::string::value_type **)a3;
        *((void *)a3 + 1) = 32;
        goto LABEL_20;
      }
    }
    else if (v10 > 0x1F)
    {
      *((unsigned char *)a3 + 23) = 32;
      uint64_t v13 = a3;
LABEL_20:
      *((unsigned char *)v13 + 32) = 0;
      goto LABEL_21;
    }
    std::string::__throw_out_of_range[abi:ne180100]();
  }
LABEL_21:
  __int16 v34 = 0;
  int v33 = 0;
  if (*(char *)(a2 + 23) < 0) {
    std::string::__init_copy_ctor_external(&v32, *(const std::string::value_type **)a2, *(void *)(a2 + 8));
  }
  else {
    std::string v32 = *(std::string *)a2;
  }
  char v14 = WiFiSettingsCommandDriver::parseBssid();
  char v15 = v14;
  if (SHIBYTE(v32.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v32.__r_.__value_.__l.__data_);
    if ((v15 & 1) == 0) {
      return;
    }
  }
  else if ((v14 & 1) == 0)
  {
    return;
  }
  *(_OWORD *)std::string __p = 0u;
  long long v31 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  int v16 = (const void **)__p[1];
  unint64_t v17 = (const void **)v31;
  if (__p[1] != (void *)v31)
  {
    while (*((unsigned char *)*v16 + 8) != 1)
    {
      if (++v16 == (const void **)v31) {
        goto LABEL_35;
      }
    }
  }
  if (v16 == (const void **)v31) {
LABEL_35:
  }
    operator new();
  if (!v18) {
    __cxa_bad_cast();
  }
  v18[9] = 1;
  v24[0] = MEMORY[0x263EF8330];
  v24[1] = 1174405120;
  char v25 = ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_2;
  long long v26 = &__block_descriptor_tmp_5_9;
  if (a3[23] < 0)
  {
    std::string::__init_copy_ctor_external(&v27, *(const std::string::value_type **)a3, *((void *)a3 + 1));
    unint64_t v17 = (const void **)v31;
  }
  else
  {
    std::string v27 = *(std::string *)a3;
  }
  int v28 = v33;
  __int16 v29 = v34;
  for (uint64_t i = (const void **)__p[1]; ; ++i)
  {
    if (i == v17) {
      goto LABEL_46;
    }
    if (*((unsigned char *)*i + 8) == 2) {
      break;
    }
  }
  if (i == v17) {
LABEL_46:
  }
    operator new();
  if (!v20) {
    __cxa_bad_cast();
  }
  v25(v24, v20 + 9);
  uint64_t v21 = *(void *)(a1 + 96);
  v23[0] = MEMORY[0x263EF8330];
  v23[1] = 0x40000000;
  v23[2] = ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_6;
  v23[3] = &__block_descriptor_tmp_8_4;
  void v23[4] = a1;
  if (!*(unsigned char *)(v21 + 72) || !*(void *)(v21 + 56)) {
    __TUAssertTrigger();
  }
  void v35[5] = v21 + 40;
  uint64_t v36 = QMIServiceMsg::create();
  int v37 = 25000;
  uint64_t v38 = 0;
  uint64_t v39 = 0;
  v35[0] = MEMORY[0x263EF8330];
  v35[1] = 0x40000000;
  v35[2] = ___ZN16QMIVirtualClient4sendIN3nas15WiFiNetworkInfo7RequestEU13block_pointerFvRKN3qmi12ResponseBaseEEEEvRKT_T0__block_invoke;
  v35[3] = &unk_26460C408;
  v35[4] = v23;
  *(void *)long long buf = MEMORY[0x263EF8330];
  *(void *)&uint8_t buf[8] = 0x40000000;
  *(void *)&uint8_t buf[16] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_11;
  uint64_t v41 = &unk_26460C430;
  uint64_t v42 = v35;
  uint64_t v22 = _Block_copy(buf);
  uint64_t v39 = v22;
  if (v36)
  {
    qmi::Client::send();
    uint64_t v22 = v39;
  }
  if (v22) {
    _Block_release(v22);
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
}

void sub_222403B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)(v35 - 168));
  if (a24 < 0) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a26);
  _Unwind_Resume(a1);
}

size_t *___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_2(size_t *result, char *__dst)
{
  int v3 = result;
  *(void *)(__dst + 30) = 0;
  *(_OWORD *)long long __dst = 0u;
  *((_OWORD *)__dst + 1) = 0u;
  if (*((char *)result + 55) < 0)
  {
    uint64_t v4 = (const void *)result[4];
    size_t v5 = result[5];
    if (!v5) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = result + 4;
  size_t v5 = *((unsigned __int8 *)result + 55);
  if (*((unsigned char *)result + 55)) {
LABEL_3:
  }
    uint64_t result = (size_t *)memmove(__dst, v4, v5);
LABEL_4:
  int v6 = *((_DWORD *)v3 + 14);
  *((_WORD *)__dst + 18) = *((_WORD *)v3 + 30);
  *((_DWORD *)__dst + 8) = v6;
  return result;
}

uint64_t ___ZN28QMIWiFiSettingsCommandDriver15sendNetworkInfoENSt3__112basic_stringIcNS0_11char_traitsIcEENS0_9allocatorIcEEEES6__block_invoke_6(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  size_t v5 = *(NSObject **)(v3 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      uint64_t v7 = qmi::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v13 = 136315394;
      uint64_t v14 = v7;
      __int16 v15 = 1024;
      int v16 = v8;
      unint64_t v9 = "#N Send WiFi network info failed: %s (%d)";
      unsigned int v10 = v5;
      uint32_t v11 = 18;
LABEL_6:
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, v9, (uint8_t *)&v13, v11);
    }
  }
  else if (v6)
  {
    LOWORD(v13) = 0;
    unint64_t v9 = "#I Send WiFi network info was successful";
    unsigned int v10 = v5;
    uint32_t v11 = 2;
    goto LABEL_6;
  }
  return (*(uint64_t (**)(void, BOOL))(**(void **)(v3 + 48) + 24))(*(void *)(v3 + 48), *(_DWORD *)(a2 + 4) == 0);
}

void QMIWiFiSettingsCommandDriver::~QMIWiFiSettingsCommandDriver(QMIWiFiSettingsCommandDriver *this)
{
  *(void *)this = &unk_26D4C3CB0;
  *((void *)this + 11) = &unk_26D4C3D00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(this);
}

{
  std::__shared_weak_count *v2;
  uint64_t vars8;

  *(void *)this = &unk_26D4C3CB0;
  *((void *)this + 11) = &unk_26D4C3D00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIWiFiSettingsCommandDriver::~QMIWiFiSettingsCommandDriver(QMIWiFiSettingsCommandDriver *this)
{
  uint64_t v1 = (QMIWiFiSettingsCommandDriver *)((char *)this - 88);
  *((void *)this - 11) = &unk_26D4C3CB0;
  *(void *)this = &unk_26D4C3D00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(v1);
}

{
  WiFiSettingsCommandDriver *v1;
  std::__shared_weak_count *v2;
  uint64_t vars8;

  uint64_t v1 = (QMIWiFiSettingsCommandDriver *)((char *)this - 88);
  *((void *)this - 11) = &unk_26D4C3CB0;
  *(void *)this = &unk_26D4C3D00;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  WiFiSettingsCommandDriver::~WiFiSettingsCommandDriver(v1);

  JUMPOUT(0x223C9A950);
}

void std::shared_ptr<QMIWiFiSettingsCommandDriver>::shared_ptr[abi:ne180100]<QMIWiFiSettingsCommandDriver,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222404004(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1}::operator() const(QMIWiFiSettingsCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22240402C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIWiFiSettingsCommandDriver *,std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver *)#1},std::allocator<QMIWiFiSettingsCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIWiFiSettingsCommandDriver> ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::make_shared_ptr<QMIWiFiSettingsCommandDriver>(QMIWiFiSettingsCommandDriver*)::{lambda(QMIWiFiSettingsCommandDriver*)#1}::operator() const(QMIWiFiSettingsCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::registered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  (*(void (**)(void, uint64_t))(**(void **)(**(void **)a1 + 48) + 16))(*(void *)(**(void **)a1 + 48), 1);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_222404184(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>(QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::deregistered(std::shared_ptr<QMIVirtualClient>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *(void *)a1;
  (*(void (**)(void, void))(**(void **)(**(void **)a1 + 48) + 16))(*(void *)(**(void **)a1 + 48), 0);
  MEMORY[0x223C9A950](v1, 0x20C4093837F09);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&v3);
}

void sub_22240422C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  MEMORY[0x223C9A950](v2, 0x20C4093837F09);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>(QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  uint64_t v20 = v1;
  uint64_t v2 = *(void *)v1;
  long long v3 = *(_OWORD *)(v1 + 24);
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  int v4 = *(std::__shared_weak_count **)(v2 + 56);
  *(_OWORD *)(v2 + 48) = v3;
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 64));
  BOOL v6 = ServiceMap;
  uint64_t v7 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    int v8 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = (char *)v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = v7;
  uint32_t v11 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v6[1].__m_.__sig, (unint64_t *)__p);
  if (v11)
  {
    int v13 = (void *)v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
      char v14 = 0;
      goto LABEL_11;
    }
  }
  else
  {
    int v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_11:
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  __int16 v15 = *(void **)(v1 + 16);
  xpc_object_t object = v15;
  if (v15) {
    xpc_retain(v15);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  QMIClientPool::requestClient(v13, 3u, (uint64_t *)__p, v2 + 88, (uint64_t)&object, &v24);
  long long v16 = v24;
  long long v24 = 0uLL;
  uint64_t v17 = *(std::__shared_weak_count **)(v2 + 104);
  *(_OWORD *)(v2 + 96) = v16;
  if (v17)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    if (*((void *)&v24 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v24 + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v23 < 0)
  {
    operator delete(__p[0]);
    if (v14) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  if ((v14 & 1) == 0) {
LABEL_19:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v12);
LABEL_20:
  std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&v20);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v19);
}

void sub_222404400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  xpc_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIWiFiSettingsCommandDriver::bootstrap(dispatch::group_session,xpc::connection,std::shared_ptr<WiFiSettingsCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    long long v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    int v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      size_t v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223C9A950](v2, 0xA0C4074E99163);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<WiFiSettingsCommandDriver>::execute_wrapped<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>(QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIWiFiSettingsCommandDriver::stop(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(*(void *)v4 + 96);
  if (v5)
  {
    v9[0] = v5 + 88;
    v9[1] = 1;
    MEMORY[0x223C999F0](v5 + 88, a2, a3, a4);
    *(unsigned char *)(v5 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_222404540(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkVersion>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::getSize()
{
  return tlv::size<nas::tlv::WiFiNetworkDescription>();
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  tlv::writeV<nas::tlv::WiFiNetworkDescription>(a2, a1 + 9);
  uint64_t v6 = *a2 - v5;
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = v6;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::WiFiNetworkDescription>::clone()
{
}

uint64_t ___ZN16QMIVirtualClient4sendIN3nas15WiFiNetworkInfo7RequestEU13block_pointerFvRKN3qmi12ResponseBaseEEEEvRKT_T0__block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void QMIDataContextIPAggregator::QMIDataContextIPAggregator(uint64_t a1, void *a2, NSObject **a3, char *a4, void *a5)
{
  *(void *)a1 = &unk_26D4B9A78;
  *(_DWORD *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = &unk_26D4C96E8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v12, (const char *)*MEMORY[0x263F03770], a4);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  uint64_t v9 = *a3;
  *(void *)(a1 + 40) = *a3;
  if (v9) {
    dispatch_retain(v9);
  }
  *(void *)(a1 + 48) = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v12);
  *(void *)a1 = &unk_26D4C3EA8;
  *(void *)(a1 + 16) = &unk_26D4C4188;
  *(void *)(a1 + 64) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 72) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 80) = *a5;
  uint64_t v11 = a5[1];
  *(void *)(a1 + 88) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 16), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)(a1 + 176));
  operator new();
}

void sub_222404960(_Unwind_Exception *a1)
{
  (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v1 + 17);
  uint64_t v6 = (std::__shared_weak_count *)v1[15];
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)v1[13];
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  uint64_t v8 = (std::__shared_weak_count *)v1[11];
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  uint64_t v9 = (std::__shared_weak_count *)v1[9];
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  MEMORY[0x223C99A30](v3);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable(v2);
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::~QMIDataContextIPAggregator(QMIDataContextIPAggregator *this)
{
  *(void *)this = &unk_26D4C3EA8;
  *((void *)this + 2) = &unk_26D4C4188;
  for (uint64_t i = 256; i != 192; i -= 32)
  {
    uint64_t v8 = (void **)((char *)this + i);
    std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v8);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 26);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((void *)this + 17);
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 15);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  uint64_t v6 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 9);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  MEMORY[0x223C99A30]((char *)this + 56);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 3);
}

{
  uint64_t vars8;

  QMIDataContextIPAggregator::~QMIDataContextIPAggregator(this);

  JUMPOUT(0x223C9A950);
}

void non-virtual thunk to'QMIDataContextIPAggregator::~QMIDataContextIPAggregator(QMIDataContextIPAggregator *this)
{
}

{
  uint64_t vars8;

  QMIDataContextIPAggregator::~QMIDataContextIPAggregator((QMIDataContextIPAggregator *)((char *)this - 16));

  JUMPOUT(0x223C9A950);
}

void QMIDataContextIPAggregator::initialize(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[9];
  uint64_t v16 = a1[8];
  uint64_t v17 = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v12, a1 + 3);
  if (v12) {
    uint64_t v8 = v12 + 16;
  }
  else {
    uint64_t v8 = 0;
  }
  uint64_t v14 = v8;
  uint64_t v15 = v13;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v9 = *(void *)(a3 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v10 = a1[5];
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v11 = *(void *)(a4 + 8);
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  QMIDataContextIP::create(&v18);
}

void sub_222404DCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (v24)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v24);
    if (!v28)
    {
LABEL_3:
      if (!v26) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }
  else if (!v28)
  {
    goto LABEL_3;
  }
  dispatch_release(v28);
  if (!v26)
  {
LABEL_4:
    if (!v27)
    {
LABEL_10:
      if (a24) {
        std::__shared_weak_count::__release_shared[abi:ne180100](a24);
      }
      if (v25) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v25);
      }
      _Unwind_Resume(exception_object);
    }
LABEL_9:
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
    goto LABEL_10;
  }
LABEL_8:
  std::__shared_weak_count::__release_shared[abi:ne180100](v26);
  if (!v27) {
    goto LABEL_10;
  }
  goto LABEL_9;
}

void QMIDataContextIP::create(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_22240507C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::bootstrapBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 16);
    return v4();
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::startBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 24);
    return v4();
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::stopBBCtxCmdDriver(QMIDataContextIPAggregator *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 32))(v2);
  }
  uint64_t result = *((void *)this + 14);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 32);
    return v4();
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getName(std::__shared_weak_count **this)
{
  uint64_t v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__on_zero_shared)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_22240535C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataContextIPAggregator::getIPAddress(uint64_t a1, int a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 1:
      uint64_t v4 = *(void *)(a1 + 96);
      goto LABEL_7;
    case 2:
      uint64_t v4 = *(void *)(a1 + 112);
LABEL_7:
      uint64_t v5 = *(uint64_t (**)(void))(*(void *)v4 + 104);
      uint64_t result = v5();
      break;
    default:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v6 = 136315138;
        uint64_t v7 = "called with wrong protocolFamily";
        _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT\n %s\n**********", (uint8_t *)&v6, 0xCu);
      }
      uint64_t result = a1 + 176;
      break;
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getOriginalIPv6Address(QMIDataContextIPAggregator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 112))();
}

uint64_t QMIDataContextIPAggregator::getLinkLocalIPAddress(QMIDataContextIPAggregator *this)
{
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 120))();
}

uint64_t QMIDataContextIPAggregator::getDNSAddresses(uint64_t a1, int a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  switch(a2)
  {
    case 0:
    case 3:
      if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
      {
        int v5 = 136315138;
        int v6 = "called with wrong protocolFamily";
        _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT\n %s\n**********", (uint8_t *)&v5, 0xCu);
      }
      goto LABEL_4;
    case 1:
      uint64_t v3 = *(void *)(a1 + 96);
      goto LABEL_7;
    case 2:
      uint64_t v3 = *(void *)(a1 + 112);
LABEL_7:
      uint64_t v4 = *(uint64_t (**)(void))(*(void *)v3 + 128);
      uint64_t result = v4();
      break;
    default:
LABEL_4:
      uint64_t result = sGetEmptyAddrs();
      break;
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getPDPMetricInfo(void *a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 3:
      uint64_t v2 = a1[7];
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int v6 = 0;
        _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "called with wrong ip family", v6, 2u);
      }
      goto LABEL_4;
    case 1:
      uint64_t v4 = a1[12];
      goto LABEL_7;
    case 2:
      uint64_t v4 = a1[14];
LABEL_7:
      int v5 = *(uint64_t (**)(void))(*(void *)v4 + 208);
      uint64_t result = v5();
      break;
    default:
LABEL_4:
      uint64_t result = sGetEmptyPDPMetricInfo();
      break;
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::activateDataContextIP(void *a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t v30 = *MEMORY[0x263EF8340];
  int v6 = (std::__shared_weak_count *)a1[11];
  if (!v6
    || (uint64_t v7 = std::__shared_weak_count::lock(v6)) == 0
    || (uint64_t v8 = a1[10], std::__shared_weak_count::__release_shared[abi:ne180100](v7), !v8))
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      long long v26 = "should have observer here";
      __int16 v27 = 2080;
      *(void *)int v28 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data/QMI/"
                       "Context/QMIDataContextIPAggregator.cpp";
      *(_WORD *)&v28[8] = 1024;
      int v29 = 125;
      _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT getObserver()\n %s\n at %s:%d\n**********", buf, 0x1Cu);
    }
    uint64_t v9 = (std::__shared_weak_count *)a1[11];
    if (!v9
      || (uint64_t v10 = std::__shared_weak_count::lock(v9)) == 0
      || (uint64_t v11 = a1[10], std::__shared_weak_count::__release_shared[abi:ne180100](v10), !v11))
    {
      __TUAssertTrigger();
    }
  }
  uint64_t v12 = (std::__shared_weak_count *)a1[11];
  if (!v12) {
    return 0;
  }
  uint64_t v13 = std::__shared_weak_count::lock(v12);
  if (!v13) {
    return 0;
  }
  uint64_t v14 = a1[10];
  std::__shared_weak_count::__release_shared[abi:ne180100](v13);
  if (!v14) {
    return 0;
  }
  uint64_t v15 = a1[7];
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = a1[25];
    int v17 = *(unsigned __int8 *)(v16 + 8);
    LODWORD(v16) = *(_DWORD *)(v16 + 12);
    *(_DWORD *)long long buf = 136315650;
    long long v26 = "activateDataContextIP";
    __int16 v27 = 1024;
    *(_DWORD *)int v28 = v17;
    *(_WORD *)&void v28[4] = 1024;
    *(_DWORD *)&v28[6] = v16;
    _os_log_impl(&dword_22231A000, v15, OS_LOG_TYPE_DEFAULT, "#I %s: fActivationGuard : semaphore=%d, family=%d", buf, 0x18u);
  }
  uint64_t v19 = a1[25];
  long long v18 = (std::__shared_weak_count *)a1[26];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (a4) {
    int v20 = a4;
  }
  else {
    int v20 = 3;
  }
  int v21 = *(_DWORD *)(v19 + 12);
  if (v21 != 3 && v20 != v21 && *(unsigned __int8 *)(v19 + 8) <= 1u) {
    operator new();
  }
  if (v18) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v18);
  }
  long long v24 = a1[7];
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    long long v26 = "activateDataContextIP";
    _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Cannot activate. Another activation in process", buf, 0xCu);
  }
  return 1;
}

void sub_222405D08(_Unwind_Exception *a1)
{
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  _Unwind_Resume(a1);
}

void QMIDataContextIPAggregator::clearPending(uint64_t a1, int a2, uint64_t a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (!a2) {
    return;
  }
  int v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315906;
    uint64_t v14 = a3;
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    __int16 v17 = 2080;
    uint64_t v18 = asString();
    __int16 v19 = 2080;
    uint64_t v20 = asString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(clear pending 1 <%s>): %s for pending %s, activation %s", (uint8_t *)&v13, 0x2Au);
  }
  if (a2 == 3 || (int v7 = *(_DWORD *)(a1 + 128), v7 == a2))
  {
    uint64_t v8 = "clear 1";
LABEL_7:
    QMIDataContextIPAggregator::clearPending((void *)a1, v8);
    return;
  }
  if (a2 == 1) {
    uint64_t v9 = 2;
  }
  else {
    uint64_t v9 = 1;
  }
  int v10 = *(_DWORD *)(a1 + 168);
  int v11 = v9;
  if (v10 == 3) {
    goto LABEL_15;
  }
  if (v10 == a2)
  {
    int v11 = 0;
LABEL_15:
    *(_DWORD *)(a1 + 168) = v11;
  }
  if (v7 == 3 || v7 == v9)
  {
    uint64_t v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v13) = 0;
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(pending1)", (uint8_t *)&v13, 2u);
    }
    QMIDataContextIPAggregator::activateProcedure(a1, v9, a1 + 136);
    uint64_t v8 = "clear 2";
    goto LABEL_7;
  }
}

uint64_t QMIDataContextIPAggregator::getDataContextState(uint64_t a1, int a2)
{
  switch(a2)
  {
    case 0:
    case 3:
      uint64_t v4 = a1 + 96;
      int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 96))(*(void *)(a1 + 96));
      uint64_t v7 = *(void *)(a1 + 112);
      uint64_t v6 = a1 + 112;
      if (v5 <= (*(int (**)(uint64_t))(*(void *)v7 + 96))(v7)) {
        uint64_t v8 = v6;
      }
      else {
        uint64_t v8 = v4;
      }
      goto LABEL_8;
    case 1:
      uint64_t v8 = a1 + 96;
      goto LABEL_8;
    case 2:
      uint64_t v8 = a1 + 112;
LABEL_8:
      int v10 = *(uint64_t (**)(void))(**(void **)v8 + 96);
      uint64_t result = v10();
      break;
    default:
      uint64_t result = 0;
      break;
  }
  return result;
}

BOOL QMIDataContextIPAggregator::isActivating(QMIDataContextIPAggregator *this)
{
  return (*(unsigned int (**)(void))(**((void **)this + 12) + 96))(*((void *)this + 12)) == 4
      || (*(unsigned int (**)(void))(**((void **)this + 14) + 96))(*((void *)this + 14)) == 4;
}

void QMIDataContextIPAggregator::cleanupActivationFull(uint64_t a1, int a2)
{
  char v2 = a2;
  uint64_t v24 = *MEMORY[0x263EF8340];
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"cleanup");
  memset(v15, 0, sizeof(v15));
  uint64_t v4 = (const CSIPacketAddress *)(*(uint64_t (**)(void))(**(void **)(a1 + 96) + 104))(*(void *)(a1 + 96));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v15, v4);
  memset(v14, 0, sizeof(v14));
  int v5 = (const CSIPacketAddress *)(*(uint64_t (**)(void))(**(void **)(a1 + 112) + 104))(*(void *)(a1 + 112));
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v14, v5);
  uint64_t v6 = *(NSObject **)(a1 + 56);
  if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_10;
  }
  uint64_t v7 = asString();
  CSIPacketAddress::operator std::string();
  CSIPacketAddress::operator std::string();
  uint64_t v8 = &v12;
  if (v13 < 0) {
    uint64_t v8 = v12;
  }
  if (v11 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = __p;
  }
  *(_DWORD *)long long buf = 136315906;
  __int16 v17 = "cleanupActivationFull";
  __int16 v18 = 2080;
  uint64_t v19 = v7;
  __int16 v20 = 2080;
  uint64_t v21 = v8;
  __int16 v22 = 2080;
  char v23 = p_p;
  _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: for %s: v4.ip=%s, v6.ip=%s", buf, 0x2Au);
  if (v11 < 0) {
    operator delete(__p);
  }
  if ((v13 & 0x80000000) == 0)
  {
LABEL_10:
    if ((v2 & 1) == 0) {
      goto LABEL_12;
    }
    goto LABEL_11;
  }
  operator delete(v12);
  if (v2)
  {
LABEL_11:
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
    *(unsigned char *)(a1 + 280) = 0;
    (*(void (**)(void))(**(void **)(a1 + 96) + 184))(*(void *)(a1 + 96));
  }
LABEL_12:
  if ((v2 & 2) != 0)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 224));
    *(unsigned char *)(a1 + 248) = 0;
    (*(void (**)(void))(**(void **)(a1 + 112) + 184))(*(void *)(a1 + 112));
  }
}

void sub_22240633C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPAggregator::activateFailureHandlingCompleteIP(uint64_t a1, int a2)
{
  char v2 = a2;
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"activation failure 1");
  if (v2)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 256));
    *(unsigned char *)(a1 + 280) = 0;
    (*(void (**)(void))(**(void **)(a1 + 96) + 88))(*(void *)(a1 + 96));
  }
  if ((v2 & 2) != 0)
  {
    std::vector<std::string>::__clear[abi:ne180100]((uint64_t *)(a1 + 224));
    *(unsigned char *)(a1 + 248) = 0;
    uint64_t v4 = *(void (**)(void))(**(void **)(a1 + 112) + 88);
    v4();
  }
}

uint64_t QMIDataContextIPAggregator::shouldReportActivation(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "shouldReportActivation";
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v5 = a1 + 112;
  uint64_t v6 = 96;
  if (a2 == 1) {
    uint64_t v6 = 112;
  }
  else {
    uint64_t v5 = a1 + 96;
  }
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(std::__shared_weak_count **)(v5 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 216))(v7);
  if ((v9 & 1) == 0)
  {
    int v10 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = asString();
      int v13 = 136315394;
      uint64_t v14 = "shouldReportActivation";
      __int16 v15 = 2080;
      uint64_t v16 = v11;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: %s is still in activating, don't report.", (uint8_t *)&v13, 0x16u);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v9;
}

void sub_2224065B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDataContextIPAggregator::isOnlyIPFamily(uint64_t a1, int a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315394;
    uint64_t v14 = "isOnlyIPFamily";
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", (uint8_t *)&v13, 0x16u);
  }
  uint64_t v5 = a1 + 112;
  uint64_t v6 = 96;
  if (a2 == 1) {
    uint64_t v6 = 112;
  }
  else {
    uint64_t v5 = a1 + 96;
  }
  uint64_t v7 = *(void *)(a1 + v6);
  uint64_t v8 = *(std::__shared_weak_count **)(v5 + 8);
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v9 = (*(uint64_t (**)(uint64_t))(*(void *)v7 + 224))(v7);
  if (v9)
  {
    int v10 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      (*(void (**)(uint64_t))(*(void *)v7 + 232))(v7);
      uint64_t v11 = asString();
      int v13 = 136315394;
      uint64_t v14 = "isOnlyIPFamily";
      __int16 v15 = 2080;
      uint64_t v16 = v11;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I %s: %s is active", (uint8_t *)&v13, 0x16u);
    }
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  return v9 ^ 1u;
}

void sub_222406794(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isOnlyIPFamily(uint64_t a1, int a2)
{
  return QMIDataContextIPAggregator::isOnlyIPFamily(a1 - 16, a2);
}

uint64_t QMIDataContextIPAggregator::deactivateDataContextIP(QMIDataContextIPAggregator *this, uint64_t a2, uint64_t a3)
{
  QMIDataContextIPAggregator::clearPending(this, "deactivate");
  int v6 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**((void **)this + 12) + 48))(*((void *)this + 12), a2, a3);
  return v6 | (*(unsigned int (**)(void, uint64_t, uint64_t))(**((void **)this + 14) + 48))(*((void *)this + 14), a2, a3);
}

void *QMIDataContextIPAggregator::clearPending(void *this, const char *a2)
{
  uint64_t v3 = this;
  uint64_t v11 = *MEMORY[0x263EF8340];
  if (*((_DWORD *)this + 32) || *((_DWORD *)this + 42))
  {
    uint64_t v4 = this[7];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315650;
      int v6 = a2;
      __int16 v7 = 2080;
      uint64_t v8 = asString();
      __int16 v9 = 2080;
      uint64_t v10 = asString();
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I qmiOnline(clear pending 2 <%s>): %s / %s", (uint8_t *)&v5, 0x20u);
    }
    *((_DWORD *)v3 + 42) = 0;
    *((_DWORD *)v3 + 32) = 0;
    return std::__function::__value_func<void ()(void)>::operator=[abi:ne180100](v3 + 17);
  }
  return this;
}

uint64_t QMIDataContextIPAggregator::transitionalStateMaskIP(QMIDataContextIPAggregator *this)
{
  int v2 = *((_DWORD *)this + 32);
  if ((v2 & 1) == 0)
  {
    int v3 = 0;
    if ((v2 & 2) == 0) {
      goto LABEL_10;
    }
    goto LABEL_7;
  }
  uint64_t v4 = *((void *)this + 7);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I we are processing IPv4 now, and we are still waiting for IPv6 processing to complete", buf, 2u);
    int v2 = *((_DWORD *)this + 32);
  }
  int v3 = 1;
  if ((v2 & 2) != 0)
  {
LABEL_7:
    int v5 = *((void *)this + 7);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I we are processing IPv6 now, and we are still waiting for IPv4 processing to complete", v8, 2u);
    }
    v3 |= 8u;
  }
LABEL_10:
  int v6 = (*(uint64_t (**)(void))(**((void **)this + 12) + 56))(*((void *)this + 12)) | v3;
  return v6 | (*(unsigned int (**)(void))(**((void **)this + 14) + 56))(*((void *)this + 14));
}

uint64_t QMIDataContextIPAggregator::suspendDataContextIP(QMIDataContextIPAggregator *this)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315138;
    __int16 v9 = "suspendDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v8, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending(this, "suspend");
  unsigned int v3 = (*(uint64_t (**)(void))(**((void **)this + 12) + 64))(*((void *)this + 12));
  int v4 = (*(uint64_t (**)(void))(**((void **)this + 14) + 64))(*((void *)this + 14));
  int v5 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v5)
  {
    int v5 = std::__shared_weak_count::lock(v5);
    int v6 = v5;
    if (v5) {
      int v5 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    int v6 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v5->__vftable[1].__on_zero_shared_weak)(v5);
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  return v4 | v3;
}

void sub_222406BDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t QMIDataContextIPAggregator::resumeDataContextIP(QMIDataContextIPAggregator *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "resumeDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  (*(void (**)(void))(**((void **)this + 12) + 72))(*((void *)this + 12));
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 72))(*((void *)this + 14));
}

void QMIDataContextIPAggregator::resetDataContextIP(QMIDataContextIPAggregator *this)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    uint64_t v6 = "resetDataContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v5, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending(this, "reset");
  (*(void (**)(void))(**((void **)this + 12) + 80))(*((void *)this + 12));
  (*(void (**)(void))(**((void **)this + 14) + 80))(*((void *)this + 14));
  unsigned int v3 = (uint64_t *)((char *)this + 224);
  int v4 = (uint64_t *)((char *)this + 288);
  do
  {
    std::vector<std::string>::__clear[abi:ne180100](v3);
    *((unsigned char *)v3 + 24) = 0;
    v3 += 4;
  }
  while (v3 != v4);
}

const void **QMIDataContextIPAggregator::setPacketNotificationFilter(uint64_t a1, uint64_t a2, const void **a3)
{
  uint64_t v6 = *(void *)(a1 + 96);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v10, a3);
  (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v6 + 136))(v6, a2, &v10);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v10);
  uint64_t v7 = *(void *)(a1 + 112);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v9, a3);
  (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v7 + 136))(v7, a2, &v9);
  return ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v9);
}

void sub_222406EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **QMIDataContextIPAggregator::dropIPPackets(uint64_t a1, const void **a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 96);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(&v10, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)v6 + 144))(v6, &v10, a3);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v10);
  uint64_t v7 = *(void *)(a1 + 112);
  ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(&v9, a2);
  (*(void (**)(uint64_t, const void **, uint64_t))(*(void *)v7 + 144))(v7, &v9, a3);
  return ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::~SharedRef(&v9);
}

void sub_222406FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t QMIDataContextIPAggregator::dropIMSPackets(QMIDataContextIPAggregator *this)
{
  (*(void (**)(void))(**((void **)this + 12) + 152))(*((void *)this + 12));
  int v2 = *(uint64_t (**)(void))(**((void **)this + 14) + 152);

  return v2();
}

uint64_t QMIDataContextIPAggregator::setQuality(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v3 = 96;
  if (a3 == 2) {
    uint64_t v3 = 112;
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + v3) + 160))();
}

uint64_t QMIDataContextIPAggregator::shutDownContextIP(QMIDataContextIPAggregator *this)
{
  uint64_t v6 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    int v5 = "shutDownContextIP";
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v4, 0xCu);
  }
  QMIDataContextIPAggregator::clearPending(this, "shutdown");
  (*(void (**)(void))(**((void **)this + 12) + 192))(*((void *)this + 12));
  return (*(uint64_t (**)(void))(**((void **)this + 14) + 192))(*((void *)this + 14));
}

uint64_t QMIDataContextIPAggregator::ipv6ServiceUp(QMIDataContextIPAggregator *this, const CSIPacketAddress *a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  int v4 = *((void *)this + 7);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    if (v8 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = __p;
    }
    *(_DWORD *)long long buf = 136315394;
    uint64_t v10 = "ipv6ServiceUp";
    __int16 v11 = 2080;
    uint64_t v12 = p_p;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I %s:  %s ", buf, 0x16u);
    if (v8 < 0) {
      operator delete(__p);
    }
  }
  return (*(uint64_t (**)(void, const CSIPacketAddress *))(**((void **)this + 14) + 168))(*((void *)this + 14), a2);
}

uint64_t QMIDataContextIPAggregator::ipv4ServiceUp(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 176))();
}

uint64_t QMIDataContextIPAggregator::getPdpId(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[1].__on_zero_shared)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_222407340(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::getPdpId(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getPdpId(this - 2);
}

uint64_t QMIDataContextIPAggregator::isDadRequired(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(uint64_t *__return_ptr))this[10]->__on_zero_shared_weak)(&v7);
  uint64_t v3 = v7;
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  if (!v3) {
    return 0;
  }
  int v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(uint64_t *__return_ptr))this[10]->__on_zero_shared_weak)(&v7);
  uint64_t v5 = (*(uint64_t (**)(uint64_t, void))(*(void *)v7 + 112))(v7, 0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_222407464(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isDadRequired(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isDadRequired(this - 2);
}

void QMIDataContextIPAggregator::handleDataContextIPActivated(uint64_t a1, int a2, char a3)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v17 = 136315394;
    __int16 v18 = "handleDataContextIPActivated";
    __int16 v19 = 2080;
    uint64_t v20 = asString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", (uint8_t *)&v17, 0x16u);
  }
  *(unsigned char *)(a1 + 216) = 0;
  if (a3) {
    shouldReportActivatiouint64_t n = 1;
  }
  else {
    shouldReportActivatiouint64_t n = QMIDataContextIPAggregator::shouldReportActivation(a1, a2);
  }
  char v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8)
  {
    char v8 = std::__shared_weak_count::lock(v8);
    __int16 v9 = v8;
    if (v8) {
      char v8 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    __int16 v9 = 0;
  }
  uint64_t v10 = ((uint64_t (*)(std::__shared_weak_count *, void))v8->__vftable[1].~__shared_weak_count)(v8, 0);
  if (v9) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  if (v10 != 0x10000)
  {
    __int16 v11 = *(std::__shared_weak_count **)(a1 + 88);
    if (v11)
    {
      __int16 v11 = std::__shared_weak_count::lock(v11);
      uint64_t v12 = v11;
      if (v11) {
        __int16 v11 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      uint64_t v12 = 0;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t))v11->__vftable[1].~__shared_weak_count_0)(v11, 1);
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  if (shouldReportActivation)
  {
    (*(void (**)(uint64_t))(*(void *)a1 + 480))(a1);
    uint64_t v13 = *(std::__shared_weak_count **)(a1 + 88);
    if (v13)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v13);
      uint64_t v14 = v13;
      if (v13) {
        uint64_t v13 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    ((void (*)(std::__shared_weak_count *))v13->__vftable[1].__get_deleter)(v13);
    if (v14) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v14);
    }
    __int16 v15 = *(std::__shared_weak_count **)(a1 + 88);
    if (v15)
    {
      __int16 v15 = std::__shared_weak_count::lock(v15);
      uint64_t v16 = v15;
      if (v15) {
        __int16 v15 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    ((void (*)(std::__shared_weak_count *))v15->__vftable[8].__get_deleter)(v15);
    if (v16) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_222407710(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPActivated(uint64_t a1, int a2, char a3)
{
}

uint64_t QMIDataContextIPAggregator::isPendingChannelInitialization(QMIDataContextIPAggregator *this)
{
  if ((*(uint64_t (**)(void))(**((void **)this + 12) + 240))(*((void *)this + 12))) {
    return 1;
  }
  uint64_t v3 = *(uint64_t (**)(void))(**((void **)this + 14) + 240);

  return v3();
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isPendingChannelInitialization(QMIDataContextIPAggregator *this)
{
  return QMIDataContextIPAggregator::isPendingChannelInitialization((QMIDataContextIPAggregator *)((char *)this - 16));
}

void QMIDataContextIPAggregator::handleDataContextIPActivateFailure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
  LODWORD(v10) = a3;
  uint64_t v39 = *MEMORY[0x263EF8340];
  if ((a2 - 1) >= 2)
  {
    if (os_log_type_enabled(&_os_log_internal, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315650;
      uint64_t v30 = "called with wrong ipFamily";
      __int16 v31 = 2080;
      std::string v32 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CommCenter/CommCenterCommandDrivers/Data/QMI/Context/QMI"
            "DataContextIPAggregator.cpp";
      __int16 v33 = 1024;
      LODWORD(v34) = 404;
      _os_log_error_impl(&dword_22231A000, &_os_log_internal, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT kDataProtocolFamilyIPv4 == ipFamily || kDataProtocolFamilyIPv6 == ipFamily\n %s\n at %s:%d\n**********", buf, 0x1Cu);
    }
    __TUAssertTrigger();
  }
  uint64_t v13 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = asString();
    uint64_t v15 = CSIErrorString();
    if (v10 <= 1) {
      uint64_t v10 = 1;
    }
    else {
      uint64_t v10 = v10;
    }
    uint64_t v16 = CSIErrorString();
    uint64_t v17 = asStringBool();
    *(_DWORD *)long long buf = 136316162;
    uint64_t v30 = "handleDataContextIPActivateFailure";
    __int16 v31 = 2080;
    std::string v32 = (const char *)v14;
    __int16 v33 = 2080;
    uint64_t v34 = v15;
    __int16 v35 = 2080;
    uint64_t v36 = v16;
    __int16 v37 = 2080;
    uint64_t v38 = v17;
    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I %s: for %s with %s, converted to %s (retry %s)", buf, 0x34u);
  }
  else if (v10 <= 1)
  {
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = v10;
  }
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"activation failure 2");
  if (a7) {
    *(unsigned char *)(a1 + 216) = 1;
  }
  if (QMIDataContextIPAggregator::getDataContextState(a1, 3) == 1
    || QMIDataContextIPAggregator::getDataContextState(a1, 3) == 2)
  {
    __int16 v18 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v30 = "handleDataContextIPActivateFailure";
      _os_log_impl(&dword_22231A000, v18, OS_LOG_TYPE_DEFAULT, "#I %s: Reporting error since we are done with this context", buf, 0xCu);
    }
    __int16 v19 = *(std::__shared_weak_count **)(a1 + 88);
    if (v19)
    {
      __int16 v19 = std::__shared_weak_count::lock(v19);
      uint64_t v20 = v19;
      if (v19) {
        __int16 v19 = *(std::__shared_weak_count **)(a1 + 80);
      }
    }
    else
    {
      uint64_t v20 = 0;
    }
    ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t, uint64_t, void, void))v19->__vftable[2].~__shared_weak_count)(v19, a2, v10, a4, a5, a6, *(unsigned __int8 *)(a1 + 216));
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
    *(unsigned char *)(a1 + 216) = 0;
    goto LABEL_26;
  }
  if (QMIDataContextIPAggregator::shouldReportActivation(a1, a2))
  {
    if (a2 == 1) {
      uint64_t v21 = 2;
    }
    else {
      uint64_t v21 = 1;
    }
    if (QMIDataContextIPAggregator::getDataContextState(a1, v21) - 7 > 0xFFFFFFFD)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 344))(a1, v21, 1);
      if (QMIDataContextIPAggregator::getDataContextState(a1, a2) == 2)
      {
        __int16 v22 = *(std::__shared_weak_count **)(a1 + 88);
        if (v22)
        {
          __int16 v22 = std::__shared_weak_count::lock(v22);
          char v23 = v22;
          if (v22) {
            __int16 v22 = *(std::__shared_weak_count **)(a1 + 80);
          }
        }
        else
        {
          char v23 = 0;
        }
        ((void (*)(std::__shared_weak_count *, uint64_t))v22->__vftable[5].~__shared_weak_count_0)(v22, a2);
        if (v23) {
          std::__shared_weak_count::__release_shared[abi:ne180100](v23);
        }
      }
    }
    else
    {
      QMIDataContextIPAggregator::getDataContextState(a1, a2);
    }
    if (a2 != 2)
    {
      if (a2 != 1) {
        goto LABEL_47;
      }
      uint64_t v24 = *(NSObject **)(a1 + 56);
      if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_47;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v30 = "handleDataContextIPActivateFailure";
      char v25 = "#I %s: Ignoring v4 error";
      goto LABEL_46;
    }
    uint64_t v24 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v30 = "handleDataContextIPActivateFailure";
      char v25 = "#I %s: Ignoring v6 error";
LABEL_46:
      _os_log_impl(&dword_22231A000, v24, OS_LOG_TYPE_DEFAULT, v25, buf, 0xCu);
    }
  }
LABEL_47:
  long long v26 = *(std::__shared_weak_count **)(a1 + 88);
  if (v26)
  {
    long long v26 = std::__shared_weak_count::lock(v26);
    __int16 v27 = v26;
    if (v26) {
      long long v26 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    __int16 v27 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v26->__vftable[2].~__shared_weak_count_0)(v26, a2);
  if (v27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  }
LABEL_26:
  QMIDataContextIPAggregator::activateFailureHandlingCompleteIP(a1, a2);
  QMIDataContextIPAggregator::cleanupActivationFull(a1, a2);
}

void sub_222407CA8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPActivateFailure(uint64_t a1, uint64_t a2, int a3, uint64_t a4, uint64_t a5, unsigned int a6, int a7)
{
}

void QMIDataContextIPAggregator::handleDataContextIPDeactivated(uint64_t a1, uint64_t a2)
{
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"deactivated");
  int v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      int v4 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[2].__on_zero_shared)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_222407D80(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDeactivated(uint64_t a1, uint64_t a2)
{
}

void QMIDataContextIPAggregator::handleDataContextIpDeactivatedContextDisappeared(uint64_t a1, int a2)
{
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"disappeared");
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v3);
    int v4 = v3;
    if (v3) {
      uint64_t v3 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    int v4 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v3->__vftable[2].__get_deleter)(v3);
  if (v4)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_222407E34(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIpDeactivatedContextDisappeared(uint64_t a1, int a2)
{
}

void QMIDataContextIPAggregator::updateBbThrottlingTimer(QMIDataContextIPAggregator *this, uint64_t a2)
{
  int v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      int v4 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[11].__on_zero_shared)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_222407EF8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::updateBbThrottlingTimer(QMIDataContextIPAggregator *this, uint64_t a2)
{
}

void QMIDataContextIPAggregator::handleDataContextIpDeactivatedNetworkDisconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"disconnect");
  char v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8)
  {
    char v8 = std::__shared_weak_count::lock(v8);
    __int16 v9 = v8;
    if (v8) {
      char v8 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    __int16 v9 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t))v8->__vftable[2].__on_zero_shared_weak)(v8, a2, a3, a4);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_222407FDC(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIpDeactivatedNetworkDisconnect(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void QMIDataContextIPAggregator::handleDataContextIPFailedCleaningDone(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[3].~__shared_weak_count)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222408084(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPFailedCleaningDone(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::sendAnbrActivationState(std::__shared_weak_count **this, uint64_t a2)
{
  int v4 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t))this[10]->__vftable[3].~__shared_weak_count_0)(this[10], a2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_22240811C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::sendAnbrActivationState(std::__shared_weak_count **this, uint64_t a2)
{
}

void QMIDataContextIPAggregator::sendAnbrBitrateRecommendation(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))this[10]->__vftable[3].__on_zero_shared)(this[10], a2, a3);

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_2224081B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::sendAnbrBitrateRecommendation(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
}

void QMIDataContextIPAggregator::handleDataContextIPAborted(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[3].__get_deleter)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_22240825C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPAborted(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::handleDataContextIPIdle(QMIDataContextIPAggregator *this)
{
  *((unsigned char *)this + 216) = 0;
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[3].__on_zero_shared_weak)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222408308(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPIdle(QMIDataContextIPAggregator *this)
{
}

uint64_t QMIDataContextIPAggregator::handleDataContextIPResume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  uint64_t v8 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t, uint64_t))v6->__vftable[4].~__shared_weak_count)(v6, a2, a3);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  return v8;
}

void sub_2224083B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPResume(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return QMIDataContextIPAggregator::handleDataContextIPResume(a1 - 16, a2, a3);
}

void QMIDataContextIPAggregator::handleDataContextIPResumed(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[4].~__shared_weak_count_0)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222408460(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPResumed(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::handleDataContextIPDidGetPcoInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v6->__vftable[4].__on_zero_shared)(v6, a2, a3);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_222408524(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDidGetPcoInfo(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void QMIDataContextIPAggregator::handleDataContextIPDidGetMTU(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v6->__vftable[4].__get_deleter)(v6, a2, a3);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_2224085E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPDidGetMTU(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void QMIDataContextIPAggregator::activateProcedure(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v6);
    uint64_t v7 = v6;
    if (v6) {
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v7 = 0;
  }
  int v8 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t, void, uint64_t))v6->__vftable[5].~__shared_weak_count)(v6, a2, 0, 1);
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  if (v8)
  {
    uint64_t v9 = *(void *)(a3 + 24);
    if (!v9) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    uint64_t v10 = *(void (**)(void))(*(void *)v9 + 48);
    v10();
  }
}

void sub_2224086E8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = *MEMORY[0x263EF8340];
  uint64_t v6 = *(NSObject **)(a1 + 56);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315650;
    *(void *)&buf[1] = asString();
    __int16 v23 = 2080;
    uint64_t v24 = asString();
    __int16 v25 = 2080;
    uint64_t v26 = asString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: ipFamily = %s, fActivationIpFamily = %s, pendingFamily = %s", (uint8_t *)buf, 0x20u);
  }
  int v7 = *(_DWORD *)(a1 + 168);
  if ((v7 - 1) < 2)
  {
    uint64_t v13 = *(NSObject **)(a1 + 56);
    if (v7 != a2)
    {
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        uint64_t v15 = "qmiOnline: Unexpected ipFamily";
        uint64_t v16 = v13;
LABEL_28:
        _os_log_error_impl(&dword_22231A000, v16, OS_LOG_TYPE_ERROR, v15, (uint8_t *)buf, 2u);
        goto LABEL_29;
      }
      goto LABEL_29;
    }
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(1)", (uint8_t *)buf, 2u);
    }
    QMIDataContextIPAggregator::activateProcedure(a1, a2, a3);
    QMIDataContextIPAggregator::clearPending(a1, a2, (uint64_t)"online 1");
  }
  else
  {
    if (!v7)
    {
      uint64_t v14 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        uint64_t v15 = "qmiOnline: we are not expecting any activation ?";
LABEL_27:
        uint64_t v16 = v14;
        goto LABEL_28;
      }
LABEL_29:
      __int16 v18 = *(std::__shared_weak_count **)(a1 + 32);
      if (v18 && std::__shared_weak_count::lock(v18)) {
        operator new();
      }
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    if (v7 != 3) {
      goto LABEL_29;
    }
    int v8 = *(_DWORD *)(a1 + 128);
    if (v8)
    {
      if ((v8 | a2) == 3)
      {
        if (a2 == 1)
        {
          uint64_t v9 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.1)", (uint8_t *)buf, 2u);
          }
          QMIDataContextIPAggregator::activateProcedure(a1, 1, a3);
          int v10 = *(_DWORD *)(a1 + 128);
          __int16 v11 = *(NSObject **)(a1 + 56);
          BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
          if ((v10 & 2) != 0)
          {
            if (v12)
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.2)", (uint8_t *)buf, 2u);
            }
            QMIDataContextIPAggregator::activateProcedure(a1, 2, a1 + 136);
          }
          else if (v12)
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl(&dword_22231A000, v11, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(2.3)", (uint8_t *)buf, 2u);
          }
        }
        else
        {
          __int16 v19 = *(NSObject **)(a1 + 56);
          if (v8)
          {
            if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(buf[0]) = 0;
              _os_log_impl(&dword_22231A000, v19, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(3.1)", (uint8_t *)buf, 2u);
            }
            QMIDataContextIPAggregator::activateProcedure(a1, 1, a1 + 136);
          }
          else if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf[0]) = 0;
            _os_log_error_impl(&dword_22231A000, v19, OS_LOG_TYPE_ERROR, "qmiOnline: go(3.2): activation of IPv4 was already initiated ?! Incorrect pending family", (uint8_t *)buf, 2u);
          }
          uint64_t v20 = *(NSObject **)(a1 + 56);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf[0]) = 0;
            _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: go(3.3)", (uint8_t *)buf, 2u);
          }
          QMIDataContextIPAggregator::activateProcedure(a1, 2, a3);
        }
        QMIDataContextIPAggregator::clearPending((void *)a1, "online");
        return;
      }
      uint64_t v14 = *(NSObject **)(a1 + 56);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf[0]) = 0;
        uint64_t v15 = "qmiOnline: Wrong ipFamily";
        goto LABEL_27;
      }
      goto LABEL_29;
    }
    uint64_t v17 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl(&dword_22231A000, v17, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: pend", (uint8_t *)buf, 2u);
    }
    std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v21, a3);
    *(_DWORD *)(a1 + 128) = a2;
    std::function<void ()(void)>::operator=((void *)(a1 + 136), (uint64_t)v21);
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v21);
  }
}

void sub_222408BF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t QMIDataContextIPAggregator::ipFamilyMustBeConfigured(uint64_t a1, uint64_t a2)
{
  int v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  uint64_t v5 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 80) + 192))(*(void *)(a1 + 80), a2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  return v5;
}

void sub_222408CA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::ipFamilyMustBeConfigured(uint64_t a1, uint64_t a2)
{
  return QMIDataContextIPAggregator::ipFamilyMustBeConfigured(a1 - 16, a2);
}

void QMIDataContextIPAggregator::reportProxyUpdate(QMIDataContextIPAggregator *this)
{
  int v2 = 0;
  LOBYTE(v3) = 0;
  char v4 = 0;
  uint64_t v5 = 0;
  uint64_t v26 = *MEMORY[0x263EF8340];
  __int16 v18 = 0;
  __int16 v19 = 0;
  unint64_t v20 = 0;
  *(void *)long long buf = 0x100000002;
  do
  {
    char v6 = v4;
    if (*(int *)&buf[4 * v5] >= 0) {
      int v7 = *(_DWORD *)&buf[4 * v5] & 1;
    }
    else {
      int v7 = -(*(_DWORD *)&buf[4 * v5] & 1);
    }
    uint64_t v8 = v7;
    uint64_t v9 = (char *)this + 32 * v7;
    uint64_t v10 = *((void *)v9 + 28);
    uint64_t v11 = *((void *)v9 + 29);
    while (v10 != v11)
    {
      if ((unint64_t)v2 >= v20)
      {
        int v2 = (std::string *)std::vector<std::string>::__push_back_slow_path<std::string const&>((uint64_t *)&v18, (long long *)v10);
      }
      else
      {
        if (*(char *)(v10 + 23) < 0)
        {
          std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)v10, *(void *)(v10 + 8));
        }
        else
        {
          long long v12 = *(_OWORD *)v10;
          v2->__r_.__value_.__r.__words[2] = *(void *)(v10 + 16);
          *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v12;
        }
        ++v2;
      }
      __int16 v19 = v2;
      v10 += 24;
    }
    BOOL v3 = v3 || *((unsigned char *)this + 32 * v8 + 248) != 0;
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v6 & 1) == 0);
  uint64_t v13 = (uint64_t)v18;
  if (v18 != v2)
  {
    uint64_t v14 = *((void *)this + 7);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = asStringBool();
      *(void *)&uint8_t buf[4] = "reportProxyUpdate";
      *(_DWORD *)long long buf = 136315650;
      __int16 v22 = 1024;
      int v23 = -1431655765 * (((unint64_t)v2 - v13) >> 3);
      __int16 v24 = 2080;
      uint64_t v25 = v15;
      _os_log_impl(&dword_22231A000, v14, OS_LOG_TYPE_DEFAULT, "#I %s: reporting combined PCSCF list of size %u, handover %s", buf, 0x1Cu);
    }
    uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 11);
    if (v16)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v16);
      uint64_t v17 = v16;
      if (v16) {
        uint64_t v16 = (std::__shared_weak_count *)*((void *)this + 10);
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    ((void (*)(std::__shared_weak_count *, std::string **, BOOL))v16->__vftable[5].__on_zero_shared)(v16, &v18, v3);
    if (v17) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v17);
    }
  }
  *(void *)long long buf = &v18;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
}

void sub_222408EF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&a13);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::reportProxyUpdate(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::proxyUpdate(uint64_t a1, int a2, uint64_t a3, char a4)
{
  uint64_t v23 = *MEMORY[0x263EF8340];
  char v6 = *(std::string **)a3;
  int v7 = *(long long **)(a3 + 8);
  if (v6 != (std::string *)v7)
  {
    int v10 = a2 & 1;
    if (a2 < 0) {
      int v10 = -v10;
    }
    uint64_t v11 = a1 + 32 * v10;
    if (v11 + 224 != a3) {
      std::vector<std::string>::__assign_with_size[abi:ne180100]<std::string*,std::string*>((std::vector<std::string> *)(v11 + 224), v6, v7, 0xAAAAAAAAAAAAAAABLL * (((char *)v7 - (char *)v6) >> 3));
    }
    *(unsigned char *)(v11 + 248) = a4;
    long long v12 = *(NSObject **)(a1 + 56);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = asString();
      int v14 = -1431655765 * ((*(void *)(a3 + 8) - *(void *)a3) >> 3);
      int v15 = 136315906;
      uint64_t v16 = "proxyUpdate";
      __int16 v17 = 2080;
      uint64_t v18 = v13;
      __int16 v19 = 1024;
      int v20 = v14;
      __int16 v21 = 2080;
      uint64_t v22 = asStringBool();
      _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I %s: family %s PCSCF list of size %u, handover %s", (uint8_t *)&v15, 0x26u);
    }
  }
}

void non-virtual thunk to'QMIDataContextIPAggregator::proxyUpdate(uint64_t a1, int a2, uint64_t a3, char a4)
{
}

void QMIDataContextIPAggregator::applicationIDUpdate(QMIDataContextIPAggregator *this, uint64_t a2)
{
  char v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    char v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      char v4 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[5].__get_deleter)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_222409130(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::applicationIDUpdate(QMIDataContextIPAggregator *this, uint64_t a2)
{
}

void QMIDataContextIPAggregator::getInterfaceAddress(uint64_t a1, uint64_t a2)
{
  char v4 = *(std::__shared_weak_count **)(a1 + 88);
  if (v4)
  {
    char v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      char v4 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[5].__on_zero_shared_weak)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_2224091F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::getInterfaceAddress(uint64_t a1, uint64_t a2)
{
}

uint64_t QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[6].~__shared_weak_count)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_222409278(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isInEnteringLowPowerForNoWowIP(this - 2);
}

void QMIDataContextIPAggregator::submitIpv4AddressChangeMetric(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[6].~__shared_weak_count_0)(this[10]);

  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
}

void sub_2224092FC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::submitIpv4AddressChangeMetric(std::__shared_weak_count **this)
{
}

void QMIDataContextIPAggregator::getDataSettingsInfo(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__on_zero_shared_weak)(this[10]);

  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
}

void sub_222409390(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::getDataSettingsInfo(std::__shared_weak_count **this)
{
}

uint64_t QMIDataContextIPAggregator::getCellularDataTechnology(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[6].__on_zero_shared)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_222409418(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::getCellularDataTechnology(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getCellularDataTechnology(this - 2);
}

void QMIDataContextIPAggregator::setOutgoingTrafficEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t))v8->__vftable[6].__get_deleter)(v8, a2, a3, a4);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_2224094F4(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::setOutgoingTrafficEnabled(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t QMIDataContextIPAggregator::getHandoverPduSessionId(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[7].~__shared_weak_count)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_222409580(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::getHandoverPduSessionId(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getHandoverPduSessionId(this - 2);
}

void QMIDataContextIPAggregator::freePduSessionId(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[7].~__shared_weak_count_0)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_22240962C(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::freePduSessionId(QMIDataContextIPAggregator *this)
{
}

uint64_t QMIDataContextIPAggregator::getIwlanSnssai(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[7].__on_zero_shared)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_2224096B8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::getIwlanSnssai(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::getIwlanSnssai(this - 2);
}

void QMIDataContextIPAggregator::updateHandoverPduSessionId(QMIDataContextIPAggregator *this, uint64_t a2)
{
  char v4 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v4)
  {
    char v4 = std::__shared_weak_count::lock(v4);
    uint64_t v5 = v4;
    if (v4) {
      char v4 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[7].__get_deleter)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_222409778(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::updateHandoverPduSessionId(QMIDataContextIPAggregator *this, uint64_t a2)
{
}

void QMIDataContextIPAggregator::reportContextConnectionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
  char v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6)
  {
    char v6 = std::__shared_weak_count::lock(v6);
    int v7 = v6;
    if (v6) {
      char v6 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    int v7 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))v6->__vftable[6].__on_zero_shared_weak)(v6, a2, a3);
  if (v7)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
}

void sub_222409844(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::reportContextConnectionError(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t QMIDataContextIPAggregator::isOnProbation(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[8].~__shared_weak_count)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_2224098D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isOnProbation(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isOnProbation(this - 2);
}

void QMIDataContextIPAggregator::sendServiceDisconnectionStatus_sync(uint64_t a1, uint64_t a2)
{
  char v4 = std::__shared_weak_count::lock(*(std::__shared_weak_count **)(a1 + 88));
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 80) + 432))(*(void *)(a1 + 80), a2);

  std::__shared_weak_count::__release_shared[abi:ne180100](v4);
}

void sub_22240996C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::sendServiceDisconnectionStatus_sync(uint64_t a1, uint64_t a2)
{
}

uint64_t QMIDataContextIPAggregator::isOnDNSProbation(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[8].~__shared_weak_count_0)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_2224099F4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isOnDNSProbation(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isOnDNSProbation(this - 2);
}

void QMIDataContextIPAggregator::setProbation(void *a1, int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  if (a2 == 1) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  int DataContextState = QMIDataContextIPAggregator::getDataContextState((uint64_t)a1, v4);
  char v6 = a1[7];
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (DataContextState == 6)
  {
    if (v7)
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "setProbation";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asString();
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: %s: other family has already dealt with probation", buf, 0x16u);
    }
    v14[0] = MEMORY[0x263EF8330];
    v14[1] = 0x40000000;
    void v14[2] = ___ZN26QMIDataContextIPAggregator12setProbationE18DataProtocolFamily_block_invoke;
    void v14[3] = &__block_descriptor_tmp_12;
    void v14[4] = a1;
    int v15 = a2;
    uint64_t v8 = (std::__shared_weak_count *)a1[4];
    if (!v8 || (uint64_t v9 = a1[3], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v11 = v10;
    long long v12 = a1[5];
    *(void *)long long buf = MEMORY[0x263EF8330];
    *(void *)&uint8_t buf[8] = 1174405120;
    *(void *)&uint8_t buf[16] = ___ZNK3ctu20SharedSynchronizableI26QMIDataContextIPAggregatorE15execute_wrappedEU13block_pointerFvvE_block_invoke;
    __int16 v17 = &unk_26D4C45C0;
    uint64_t v19 = v9;
    int v20 = v11;
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v18 = v14;
    dispatch_async(v12, buf);
    if (v20) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    }
LABEL_18:
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
    return;
  }
  if (v7)
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "setProbation";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  uint64_t v13 = (std::__shared_weak_count *)a1[11];
  if (v13)
  {
    uint64_t v13 = std::__shared_weak_count::lock(v13);
    uint64_t v11 = v13;
    if (v13) {
      uint64_t v13 = (std::__shared_weak_count *)a1[10];
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v13->__vftable[8].__on_zero_shared)(v13);
  if (v11) {
    goto LABEL_18;
  }
}

void sub_222409C80(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN26QMIDataContextIPAggregator12setProbationE18DataProtocolFamily_block_invoke(uint64_t a1)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(void **)(a1 + 32);
  int v2 = v1[7];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315394;
    char v6 = "setProbation_block_invoke";
    __int16 v7 = 2080;
    uint64_t v8 = asString();
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I %s: %s: check if already ready", (uint8_t *)&v5, 0x16u);
  }
  uint64_t v3 = (std::__shared_weak_count *)v1[11];
  if (v3)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v3);
    int v4 = v3;
    if (v3) {
      uint64_t v3 = (std::__shared_weak_count *)v1[10];
    }
  }
  else
  {
    int v4 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v3->__vftable[8].__get_deleter)(v3);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_222409DC8(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::setProbation(uint64_t a1, int a2)
{
}

void QMIDataContextIPAggregator::submitPDPContextStateChangeMetrics(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[9].~__shared_weak_count)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222409E78(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::submitPDPContextStateChangeMetrics(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::setDeactivating(QMIDataContextIPAggregator *this)
{
  int v2 = (std::__shared_weak_count *)*((void *)this + 11);
  if (v2)
  {
    int v2 = std::__shared_weak_count::lock(v2);
    uint64_t v3 = v2;
    if (v2) {
      int v2 = (std::__shared_weak_count *)*((void *)this + 10);
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  ((void (*)(std::__shared_weak_count *))v2->__vftable[8].__on_zero_shared_weak)(v2);
  if (v3)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
}

void sub_222409F28(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::setDeactivating(QMIDataContextIPAggregator *this)
{
}

void QMIDataContextIPAggregator::getAPNObserver(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *))this[10]->__vftable[7].__on_zero_shared_weak)(this[10]);

  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
}

void sub_222409FC8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::getAPNObserver(std::__shared_weak_count **this)
{
}

void QMIDataContextIPAggregator::resetBaseband(void *a1, uint64_t a2)
{
  QMIDataContextIPAggregator::clearPending(a1, "reset BB");
  int v4 = (std::__shared_weak_count *)a1[11];
  if (v4)
  {
    int v4 = std::__shared_weak_count::lock(v4);
    int v5 = v4;
    if (v4) {
      int v4 = (std::__shared_weak_count *)a1[10];
    }
  }
  else
  {
    int v5 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t))v4->__vftable[9].__on_zero_shared_weak)(v4, a2);
  if (v5)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
}

void sub_22240A094(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::resetBaseband(uint64_t a1, uint64_t a2)
{
}

void QMIDataContextIPAggregator::updateResetBasebandTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 88);
  if (v8)
  {
    uint64_t v8 = std::__shared_weak_count::lock(v8);
    uint64_t v9 = v8;
    if (v8) {
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 80);
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t, uint64_t))v8->__vftable[10].~__shared_weak_count)(v8, a2, a3, a4);
  if (v9)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
}

void sub_22240A174(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'QMIDataContextIPAggregator::updateResetBasebandTimer(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void QMIDataContextIPAggregator::submitCommCenterIPSetupFailure(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
  char v6 = std::__shared_weak_count::lock(this[11]);
  ((void (*)(std::__shared_weak_count *, uint64_t, uint64_t))this[10]->__vftable[10].~__shared_weak_count_0)(this[10], a2, a3);

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_22240A21C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'QMIDataContextIPAggregator::submitCommCenterIPSetupFailure(std::__shared_weak_count **this, uint64_t a2, uint64_t a3)
{
}

uint64_t QMIDataContextIPAggregator::dumpState(QMIDataContextIPAggregator *this)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = std::__shared_weak_count::lock(*((std::__shared_weak_count **)this + 11));
    uint64_t v4 = (*(uint64_t (**)(void))(**((void **)this + 10) + 16))(*((void *)this + 10));
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ------- %s (driver) -------", buf, 0xCu);
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v32 = 0;
  long long v30 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v28 = 0u;
  long long v29 = 0u;
  long long v26 = 0u;
  long long v27 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v25 = 0u;
  std::ostringstream::basic_ostringstream[abi:ne180100]((uint64_t)buf);
  long long __p = 0uLL;
  uint64_t v23 = 0;
  std::stringbuf::str[abi:ne180100]((uint64_t)&buf[8], &__p);
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  int v5 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(buf, (uint64_t)"\t", 1);
  char v6 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v5, (uint64_t)"fActivationGuard=", 17);
  __int16 v7 = (std::__shared_weak_count *)*((void *)this + 26);
  v20[0] = *((void *)this + 25);
  v20[1] = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  asString(v20, &__p);
  if (v23 >= 0) {
    uint64_t p_p = (uint64_t)&__p;
  }
  else {
    uint64_t p_p = __p;
  }
  if (v23 >= 0) {
    uint64_t v9 = HIBYTE(v23);
  }
  else {
    uint64_t v9 = *((void *)&__p + 1);
  }
  int v10 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v6, p_p, v9);
  std::ios_base::getloc((const std::ios_base *)((char *)v10 + *(void *)(*v10 - 24)));
  uint64_t v11 = std::locale::use_facet(v21, MEMORY[0x263F8C108]);
  ((void (*)(const std::locale::facet *, uint64_t))v11->__vftable[2].~facet_0)(v11, 10);
  std::locale::~locale(v21);
  std::ostream::put();
  std::ostream::flush();
  if (SHIBYTE(v23) < 0) {
    operator delete((void *)__p);
  }
  if (v7) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
  }
  long long v12 = *((void *)this + 7);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    std::stringbuf::str[abi:ne180100]<std::allocator<char>>((uint64_t)&buf[8], &__p);
    if (v23 >= 0) {
      uint64_t v13 = (std::locale::__imp *)&__p;
    }
    else {
      uint64_t v13 = (std::locale::__imp *)__p;
    }
    LODWORD(v21[0].__locale_) = 136315138;
    *(std::locale::__imp **)((char *)&v21[0].__locale_ + 4) = v13;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", (uint8_t *)v21, 0xCu);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
    long long v12 = *((void *)this + 7);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = asString();
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v14;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I DATA:: fPendingFamily = %s", (uint8_t *)&__p, 0xCu);
    long long v12 = *((void *)this + 7);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = asString();
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v15;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I DATA:: fActivationIpFamily = %s", (uint8_t *)&__p, 0xCu);
    long long v12 = *((void *)this + 7);
  }
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *((_DWORD *)this + 43);
    LODWORD(__p) = 67109120;
    DWORD1(__p) = v16;
    _os_log_impl(&dword_22231A000, v12, OS_LOG_TYPE_DEFAULT, "#I DATA:: fNumOfActiveContext = %d", (uint8_t *)&__p, 8u);
  }
  uint64_t v17 = *((void *)this + 12);
  if (v17) {
    (*(void (**)(uint64_t))(*(void *)v17 + 200))(v17);
  }
  uint64_t v18 = *((void *)this + 14);
  if (v18) {
    (*(void (**)(uint64_t))(*(void *)v18 + 200))(v18);
  }
  *(void *)long long buf = *MEMORY[0x263F8C2C8];
  *(void *)&buf[*(void *)(*(void *)buf - 24)] = *(void *)(MEMORY[0x263F8C2C8] + 24);
  *(void *)&uint8_t buf[8] = MEMORY[0x263F8C318] + 16;
  if (SHIBYTE(v29) < 0) {
    operator delete(*((void **)&v28 + 1));
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return MEMORY[0x223C9A8E0](v31);
}

void sub_22240A720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::locale a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
}

uint64_t QMIDataContextIPAggregator::isInLoopBackMode(std::__shared_weak_count **this)
{
  int v2 = std::__shared_weak_count::lock(this[11]);
  uint64_t v3 = ((uint64_t (*)(std::__shared_weak_count *))this[10]->__vftable[10].__on_zero_shared)(this[10]);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  return v3;
}

void sub_22240A818(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'QMIDataContextIPAggregator::isInLoopBackMode(std::__shared_weak_count **this)
{
  return QMIDataContextIPAggregator::isInLoopBackMode(this - 2);
}

void QMIDataContextIPAggregator::resetfActivationGuard(QMIDataContextIPAggregator *this)
{
  int v2 = *((void *)this + 7);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I fActivationGuard reset", v4, 2u);
  }
  uint64_t v3 = *((void *)this + 25);
  *(unsigned char *)(v3 + 8) = 0;
  *(_DWORD *)(v3 + 1QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
}

uint64_t QMIDataContextIPAggregator::convertConnectionMaskToApnTypeMask(QMIDataContextIPAggregator *this, int a2)
{
  uint64_t v2 = 2;
  uint64_t v3 = 1;
  uint64_t v4 = 4;
  uint64_t v5 = 16;
  if ((*(void *)&a2 & 0x400000) == 0) {
    uint64_t v5 = 1;
  }
  uint64_t v6 = 8;
  if ((a2 & 0x8000010) == 0) {
    uint64_t v6 = v5;
  }
  if ((a2 & 4) == 0) {
    uint64_t v4 = v6;
  }
  if ((a2 & 1) == 0) {
    uint64_t v3 = v4;
  }
  if ((a2 & 0x20000) == 0) {
    uint64_t v2 = v3;
  }
  if ((a2 & 0x40000) != 0) {
    return 512;
  }
  else {
    return v2;
  }
}

uint64_t QMIDataContextIPAggregator::updateVoLTEDataCallType(QMIDataContextIPAggregator *this, uint64_t a2)
{
  uint64_t v5 = (char *)this + 112;
  uint64_t v4 = *((void *)this + 14);
  if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 224))(v4))
  {
    uint64_t v6 = *((void *)this + 7);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      __int16 v11 = 0;
      __int16 v7 = "#I Sending VoLTE data type from IP v6";
      uint64_t v8 = (uint8_t *)&v11;
LABEL_9:
      _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
      return (*(uint64_t (**)(void, uint64_t))(**(void **)v5 + 312))(*(void *)v5, a2);
    }
    return (*(uint64_t (**)(void, uint64_t))(**(void **)v5 + 312))(*(void *)v5, a2);
  }
  uint64_t v5 = (char *)this + 96;
  uint64_t result = *((void *)this + 12);
  if (result)
  {
    uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)result + 224))(result);
    if (result)
    {
      uint64_t v6 = *((void *)this + 7);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v10 = 0;
        __int16 v7 = "#I Sending VoLTE data type from IP v4";
        uint64_t v8 = (uint8_t *)&v10;
        goto LABEL_9;
      }
      return (*(uint64_t (**)(void, uint64_t))(**(void **)v5 + 312))(*(void *)v5, a2);
    }
  }
  return result;
}

uint64_t QMIDataContextIPAggregator::getAnbr(QMIDataContextIPAggregator *this)
{
  return 0;
}

uint64_t QMIDataContextIPAggregator::getAnbrActivationState(uint64_t a1, uint64_t a2)
{
  return std::function<void ()(BOOL,BOOL)>::operator()(a2, 0, 0);
}

uint64_t QMIDataContextIPAggregator::queryAnbrBitrate(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return std::function<void ()(BOOL)>::operator()(a4, 0);
}

void std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIP *,std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP *)#1},std::allocator<QMIDataContextIP>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDataContextIP> ctu::SharedSynchronizable<QMIDataContextIPBase>::make_shared_ptr<QMIDataContextIP>(QMIDataContextIP*)::{lambda(QMIDataContextIP*)#1}::operator() const(QMIDataContextIP*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::shared_ptr<QMIDataContextIPActivationLock>::reset[abi:ne180100]<QMIDataContextIPActivationLock,void>()
{
}

void sub_22240ABE8(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIActivationLock *,std::shared_ptr<QMIActivationLock>::__shared_ptr_default_delete<QMIActivationLock,QMIActivationLock>,std::allocator<QMIActivationLock>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIDataContextIPActivationLock *,std::shared_ptr<QMIDataContextIPActivationLock>::__shared_ptr_default_delete<QMIDataContextIPActivationLock,QMIDataContextIPActivationLock>,std::allocator<QMIDataContextIPActivationLock>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

const void **ctu::SharedRef<__CFArray const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFArray const>::SharedRef(const void **a1, const void **a2)
{
  uint64_t v3 = *a2;
  *a1 = *a2;
  if (v3) {
    CFRetain(v3);
  }
  return a1;
}

uint64_t std::vector<std::string>::__push_back_slow_path<std::string const&>(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a1 + 2);
  if (v9) {
    __int16 v10 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v7, v9);
  }
  else {
    __int16 v10 = 0;
  }
  std::__split_buffer<std::string>::pointer end = v10 + v4;
  __v.__first_ = v10;
  __v.__begin_ = end;
  __v.__end_ = end;
  __v.__end_cap_.__value_ = &v10[v9];
  if (*((char *)a2 + 23) < 0)
  {
    std::string::__init_copy_ctor_external(end, *(const std::string::value_type **)a2, *((void *)a2 + 1));
    std::__split_buffer<std::string>::pointer end = __v.__end_;
  }
  else
  {
    long long v12 = *a2;
    end->__r_.__value_.__r.__words[2] = *((void *)a2 + 2);
    *(_OWORD *)&end->__r_.__value_.__l.__data_ = v12;
  }
  __v.__end_ = end + 1;
  std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a1, &__v);
  uint64_t v13 = a1[1];
  std::__split_buffer<std::string>::~__split_buffer(&__v);
  return v13;
}

void sub_22240AEC8(_Unwind_Exception *a1, std::__split_buffer<std::string> *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::__on_zero_shared(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<QMIDataContextActivationGuard *,std::shared_ptr<QMIDataContextActivationGuard>::__shared_ptr_default_delete<QMIDataContextActivationGuard,QMIDataContextActivationGuard>,std::allocator<QMIDataContextActivationGuard>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMIDataContextIPAggregator>::execute_wrapped<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>(QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0,std::default_delete<QMIDataContextIPAggregator::handleDataContextIPOnlineWithCB(DataProtocolFamily,std::function<void ()(void)> const&)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v14 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 56);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N qmiOnline: cleaning on error", buf, 2u);
  }
  if (*((_DWORD *)v1 + 2) == 1) {
    int v4 = 2;
  }
  else {
    int v4 = 1;
  }
  unint64_t v5 = (void *)(v2 + 96);
  uint64_t v6 = 96;
  if (*((_DWORD *)v1 + 2) == 1)
  {
    uint64_t v6 = 112;
    uint64_t v7 = v2 + 112;
  }
  else
  {
    uint64_t v7 = v2 + 96;
  }
  uint64_t v8 = *(void *)(v2 + v6);
  unint64_t v9 = *(std::__shared_weak_count **)(v7 + 8);
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(_DWORD *)(v2 + 128) & v4) != 0 || (*(unsigned int (**)(uint64_t))(*(void *)v8 + 96))(v8) == 5)
  {
    __int16 v10 = *(NSObject **)(v2 + 56);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v16 = 0;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I qmiOnline: deactivate otherFamily", v16, 2u);
    }
    (*(void (**)(uint64_t, void, void))(*(void *)v8 + 48))(v8, 0, 0);
  }
  int v11 = *((_DWORD *)v1 + 2);
  if (v11 == 1) {
    goto LABEL_19;
  }
  if (v11 == 2)
  {
    unint64_t v5 = (void *)(v2 + 112);
LABEL_19:
    (*(void (**)(void, void, void))(*(void *)*v5 + 48))(*v5, 0, 0);
    goto LABEL_21;
  }
  long long v12 = *(NSObject **)(v2 + 56);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v15 = 0;
    _os_log_error_impl(&dword_22231A000, v12, OS_LOG_TYPE_ERROR, "qmiOnline: Unexpected ipFamily: something is very very wrong (2)", v15, 2u);
    if (!v9) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
LABEL_21:
  if (v9) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_23:
  MEMORY[0x223C9A950](v1, 0x1020C403A5D3213);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v14);
}

void sub_22240B1B4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x223C9A950](v2, 0x1020C403A5D3213);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZNK3ctu20SharedSynchronizableI26QMIDataContextIPAggregatorE15execute_wrappedEU13block_pointerFvvE_block_invoke(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t __copy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIK26QMIDataContextIPAggregatorEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c55_ZTSNSt3__110shared_ptrIK26QMIDataContextIPAggregatorEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::stringbuf::str[abi:ne180100](uint64_t a1, long long *a2)
{
  uint64_t v4 = a1 + 64;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)v4);
  }
  long long v5 = *a2;
  *(void *)(v4 + 16) = *((void *)a2 + 2);
  *(_OWORD *)uint64_t v4 = v5;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;

  std::stringbuf::__init_buf_ptrs[abi:ne180100](a1);
}

void std::stringbuf::__init_buf_ptrs[abi:ne180100](uint64_t a1)
{
  *(void *)(a1 + 88) = 0;
  uint64_t v2 = (std::string *)(a1 + 64);
  char v3 = *(unsigned char *)(a1 + 87);
  if (v3 < 0)
  {
    uint64_t v4 = *(std::string **)(a1 + 64);
    unint64_t v5 = *(void *)(a1 + 72);
  }
  else
  {
    uint64_t v4 = v2;
    unint64_t v5 = *(unsigned __int8 *)(a1 + 87);
  }
  int v6 = *(_DWORD *)(a1 + 96);
  if ((v6 & 8) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    *(void *)(a1 + 16) = v4;
    *(void *)(a1 + 24) = v4;
    *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = (char *)v4 + v5;
  }
  if ((v6 & 0x10) != 0)
  {
    *(void *)(a1 + 88) = (char *)v4 + v5;
    std::string::size_type v7 = v3 < 0 ? (*(void *)(a1 + 80) & 0x7FFFFFFFFFFFFFFFLL) - 1 : 22;
    std::string::resize(v2, v7, 0);
    uint64_t v8 = *(char *)(a1 + 87) < 0 ? *(void *)(a1 + 72) : *(unsigned __int8 *)(a1 + 87);
    *(void *)(a1 + 40) = v4;
    *(void *)(a1 + 48) = v4;
    *(void *)(a1 + 56) = (char *)v4 + v8;
    if ((*(unsigned char *)(a1 + 96) & 3) != 0)
    {
      if (v5 >> 31)
      {
        uint64_t v9 = ((v5 - 0x80000000) * (unsigned __int128)0x200000005uLL) >> 64;
        unint64_t v10 = 0x7FFFFFFF * ((v9 + ((v5 - 0x80000000 - v9) >> 1)) >> 30);
        uint64_t v4 = (std::string *)((char *)v4 + v10 + 0x7FFFFFFF);
        unint64_t v5 = v5 - v10 - 0x7FFFFFFF;
        *(void *)(a1 + 48) = v4;
      }
      if (v5) {
        *(void *)(a1 + 48) = (char *)v4 + v5;
      }
    }
  }
}

uint64_t QMISignalStrengthCommandDriver::QMISignalStrengthCommandDriver(uint64_t a1, void *a2, NSObject **a3)
{
  *(void *)a1 = MEMORY[0x263F038D8] + 16;
  *(void *)(a1 + 8) = &unk_26D4CD5C0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v8, (const char *)*MEMORY[0x263F03770], "sig.qmi");
  ctu::SharedLoggable<QMISignalStrengthCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>((void *)(a1 + 16), a3);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)v8);
  *(void *)a1 = &unk_26D4C4600;
  *(void *)(a1 + 8) = &unk_26D4C4680;
  *(void *)(a1 + 56) = *a2;
  uint64_t v6 = a2[1];
  *(void *)(a1 + 64) = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  return a1;
}

void sub_22240B4B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  SignalStrengthCommandDriver::~SignalStrengthCommandDriver(v9);
  _Unwind_Resume(a1);
}

void *ctu::SharedLoggable<QMISignalStrengthCommandDriver,ctu::OsLogLogger>::SharedLoggable<ctu::OsLogContext>(void *a1, NSObject **a2)
{
  *a1 = 0;
  a1[1] = 0;
  char v3 = *a2;
  a1[2] = *a2;
  if (v3) {
    dispatch_retain(v3);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger();
  ctu::OsLogLogger::OsLogLogger();
  MEMORY[0x223C99A30](v5);
  return a1;
}

void QMISignalStrengthCommandDriver::~QMISignalStrengthCommandDriver(QMISignalStrengthCommandDriver *this)
{
  *(void *)this = &unk_26D4C4600;
  *((void *)this + 1) = &unk_26D4C4680;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 10);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 8);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  MEMORY[0x223C99A30]((char *)this + 48);
  ctu::SharedSynchronizable<QMIDataSystemDeterminationManager>::~SharedSynchronizable((void *)this + 2);

  SignalStrengthCommandDriver::~SignalStrengthCommandDriver(this);
}

void QMISignalStrengthCommandDriver::bootstrap(uint64_t a1, dispatch_object_t *a2, void **a3, uint64_t a4)
{
  std::string::size_type v7 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v7);
  }
  uint64_t v8 = *a3;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    xpc_null_create();
  }
  uint64_t v9 = *(void *)(a4 + 8);
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  v10[0] = 0;
  v10[1] = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(v10, (void *)(a1 + 16));
  operator new();
}

void QMISignalStrengthCommandDriver::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = (void *)(a1 + 16);
  char v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  v4[0] = 0;
  v4[1] = 0;
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(v4, v2);
  operator new();
}

uint64_t QMISignalStrengthCommandDriver::poll(void *a1)
{
  uint64_t v2 = a1[6];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I poll", v4, 2u);
  }
  return (*(uint64_t (**)(void *, void))(*a1 + 104))(a1, 0);
}

void QMISignalStrengthCommandDriver::start(void *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a1[6];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I start", buf, 2u);
  }
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *, void))(*a1 + 96))(a1, &v7, 0);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_22240B9C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::shared_ptr<InputThresholds const>::~shared_ptr[abi:ne180100](uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void QMISignalStrengthCommandDriver::update(void *a1, uint64_t a2, uint64_t *a3)
{
  unint64_t v5 = a1[6];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I update", buf, 2u);
  }
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  uint64_t v7 = *a3;
  uint64_t v8 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v7, 2);
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
}

void sub_22240BAD4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a10);
  }
  _Unwind_Resume(exception_object);
}

void QMISignalStrengthCommandDriver::stop(void *a1)
{
  uint64_t v2 = a1[6];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I stop", buf, 2u);
  }
  if ((atomic_load_explicit((atomic_uchar *volatile)&_MergedGlobals, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&_MergedGlobals))
  {
    operator new();
  }
  uint64_t v3 = qword_26AB7A130;
  uint64_t v4 = (std::__shared_weak_count *)qword_26AB7A138;
  if (qword_26AB7A138) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(qword_26AB7A138 + 8), 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void *, uint64_t *, uint64_t))(*a1 + 96))(a1, &v3, 1);
  if (v4) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
}

void sub_22240BC2C(_Unwind_Exception *a1)
{
}

uint64_t QMISignalStrengthCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  if (QMIVirtualClient::getServiceType(*a2) != 3) {
    __TUAssertTrigger();
  }
  QMIVirtualClient::disableNasServingSystemIndications(*a2, (const ctu::OsLogLogger *)(a1 + 48));
  uint64_t v4 = *(uint64_t (**)(void))(**(void **)(a1 + 88) + 16);

  return v4();
}

uint64_t non-virtual thunk to'QMISignalStrengthCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  return QMISignalStrengthCommandDriver::registered(a1 - 8, a2);
}

uint64_t QMISignalStrengthCommandDriver::deregistered(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), 1, 0);
}

uint64_t non-virtual thunk to'QMISignalStrengthCommandDriver::deregistered(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 80) + 16))(*(void *)(a1 + 80), 1, 0);
}

uint64_t QMISignalStrengthCommandDriver::exitPowerMode(uint64_t a1)
{
  return (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 104))(a1, 0);
}

uint64_t non-virtual thunk to'QMISignalStrengthCommandDriver::exitPowerMode(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 8) + 104))();
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>(QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v3 = *(void *)(v1 + 32);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(v2 + 96);
  *(void *)(v2 + 88) = v4;
  *(void *)(v2 + 96) = v3;
  if (v5) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 56));
  uint64_t v7 = ServiceMap;
  uint64_t v8 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = (char *)v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = v8;
  long long v12 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v7[1].__m_.__sig, (unint64_t *)__p);
  if (v12)
  {
    uint64_t v14 = (void *)v12[3];
    uint64_t v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v13);
      char v15 = 0;
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  uint64_t v13 = 0;
  char v15 = 1;
LABEL_13:
  std::string::basic_string[abi:ne180100]<0>(__p, "registration");
  xpc_object_t v16 = xpc_null_create();
  xpc_object_t object = v16;
  if (MEMORY[0x223C9AD60](*(void *)(v1 + 16)) == MEMORY[0x263EF8718])
  {
    uint64_t v17 = xpc_connection_create_from_endpoint(*(xpc_endpoint_t *)(v1 + 16));
    if (!v17) {
      uint64_t v17 = xpc_null_create();
    }
    xpc_object_t v18 = xpc_null_create();
    xpc_object_t object = v17;
    xpc_release(v16);
    xpc_release(v18);
  }
  QMIClientPool::requestClient(v14, 3u, (uint64_t *)__p, v2 + 8, (uint64_t)&object, &v27);
  long long v19 = v27;
  long long v27 = 0uLL;
  int v20 = *(std::__shared_weak_count **)(v2 + 80);
  *(_OWORD *)(v2 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = v19;
  if (v20)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v20);
    if (*((void *)&v27 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v27 + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v26 < 0)
  {
    operator delete(__p[0]);
    if (v15) {
      goto LABEL_23;
    }
    goto LABEL_22;
  }
  if ((v15 & 1) == 0) {
LABEL_22:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
LABEL_23:
  std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&v23);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v22);
}

void sub_22240BF9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  xpc_release(object);
  xpc_object_t object = 0;
  if (a17 < 0) {
    operator delete(__p);
  }
  if ((v18 & 1) == 0) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v17);
  }
  std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a10);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0,std::default_delete<QMISignalStrengthCommandDriver::bootstrap(dispatch::group_session,xpc::endpoint,std::shared_ptr<SignalStrengthDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v2 + 32);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    xpc_release(*(xpc_object_t *)(v2 + 16));
    *(void *)(v2 + 16) = 0;
    uint64_t v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      unint64_t v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223C9A950](v2, 0xA0C4074E99163);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<QMISignalStrengthCommandDriver>::execute_wrapped<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>(QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMISignalStrengthCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v4;
  uint64_t v5 = *(void *)(*(void *)v4 + 72);
  if (v5)
  {
    v9[0] = v5 + 88;
    v9[1] = 1;
    MEMORY[0x223C999F0](v5 + 88, a2, a3, a4);
    *(unsigned char *)(v5 + 74) = 0;
    std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](&v8);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v7);
}

void sub_22240C0E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void std::shared_ptr<InputThresholds const>::shared_ptr[abi:ne180100]<InputThresholds,void>(uint64_t a1)
{
  qword_26AB7A130 = a1;
  uint64_t v1 = a1;
  operator new();
}

void sub_22240C17C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::unique_ptr<InputThresholds>::reset[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

uint64_t std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::__on_zero_shared(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 24);
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1 + 8, *(void **)(v1 + 16));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<InputThresholds *,std::shared_ptr<InputThresholds const>::__shared_ptr_default_delete<InputThresholds const,InputThresholds>,std::allocator<InputThresholds>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(uint64_t a1, void *a2)
{
  if (a2)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(a1, *a2);
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(a1, a2[1]);
    operator delete(a2);
  }
}

uint64_t *std::unique_ptr<InputThresholds>::reset[abi:ne180100](uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy(v1 + 8, *(void **)(v1 + 16));
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t dms::convertSubscriptionType(int a1)
{
  if (a1 == 2) {
    return 2;
  }
  else {
    return 1;
  }
}

void *convertCallEndReasonToString@<X0>(int a1@<W0>, void *a2@<X8>)
{
  if (a1 > 140)
  {
    switch(a1)
    {
      case 141:
        uint64_t v2 = "QMI_FAILURE_CAUSE_UNASSIGNED_NUMBER";
        break;
      case 142:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_ROUTE_TO_DESTINATION";
        break;
      case 143:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CHANNEL_UNACCEPTABLE";
        break;
      case 144:
        uint64_t v2 = "QMI_FAILURE_CAUSE_OPERATOR_DETERMINED_BARRING";
        break;
      case 145:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NORMAL_CALL_CLEARING";
        break;
      case 146:
        uint64_t v2 = "QMI_FAILURE_CAUSE_END_USER_BUSY";
        break;
      case 147:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_USER_RESPONDING";
        break;
      case 148:
        uint64_t v2 = "QMI_FAILURE_CAUSE_USER_ALERTING_NO_ANSWER";
        break;
      case 149:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CALL_REJECTED";
        break;
      case 150:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NUMBER_CHANGED";
        break;
      case 151:
        uint64_t v2 = "QMI_FAILURE_CAUSE_PREEMPTION";
        break;
      case 152:
        uint64_t v2 = "QMI_FAILURE_CAUSE_DESTINATION_OUT_OF_ORDER";
        break;
      case 153:
        uint64_t v2 = "QMI_FAILURE_CAUSE_INVALID_NUMBER_FORMAT";
        break;
      case 154:
        uint64_t v2 = "QMI_FAILURE_CAUSE_FACILITY_REJECTED";
        break;
      case 155:
        uint64_t v2 = "QMI_FAILURE_CAUSE_RESP_TO_STATUS_ENQUIRY";
        break;
      case 156:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NORMAL_UNSPECIFIED";
        break;
      case 157:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_CIRCUIT_OR_CHANNEL_AVAILABLE";
        break;
      case 158:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NETWORK_OUT_OF_ORDER";
        break;
      case 159:
        uint64_t v2 = "QMI_FAILURE_CAUSE_TEMPORARY_FAILURE";
        break;
      case 160:
      case 161:
      case 163:
      case 164:
      case 165:
      case 166:
      case 167:
      case 168:
      case 169:
      case 170:
      case 171:
      case 172:
      case 173:
      case 174:
      case 175:
      case 176:
      case 177:
      case 178:
      case 179:
      case 180:
      case 181:
      case 182:
      case 183:
      case 184:
      case 185:
      case 188:
      case 189:
      case 190:
      case 191:
      case 192:
      case 193:
      case 194:
      case 195:
      case 196:
      case 197:
      case 198:
      case 199:
      case 200:
      case 201:
      case 202:
      case 203:
      case 204:
      case 205:
      case 206:
      case 207:
      case 208:
      case 210:
      case 211:
      case 213:
      case 214:
      case 215:
      case 217:
      case 218:
      case 219:
      case 221:
      case 227:
      case 231:
      case 232:
      case 237:
        goto LABEL_12;
      case 162:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REQ_CIRCUIT_OR_CHANNEL_NOT_AVAILABLE";
        break;
      case 186:
        uint64_t v2 = "QMI_FAILURE_CAUSE_RECOVERY_ON_TIMER_EXPIRED";
        break;
      case 187:
        uint64_t v2 = "QMI_FAILURE_CAUSE_PROTOCOL_ERROR_UNSPECIFIED";
        break;
      case 209:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NETWORK_CONGESTION";
        break;
      case 212:
        uint64_t v2 = "QMI_FAILURE_CAUSE_SERVICE_TEMPORARILY_OUT_OF_ORDER";
        break;
      case 216:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_FAILURE";
        break;
      case 220:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_RESOURCES";
        break;
      case 222:
        uint64_t v2 = "QMI_FAILURE_CAUSE_TIMER_T3230_EXPIRED";
        break;
      case 223:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_CELL_AVAILABLE";
        break;
      case 224:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ABORT_MSG_RECEIVED";
        break;
      case 225:
        uint64_t v2 = "QMI_FAILURE_CAUSE_RADIO_LINK_LOST";
        break;
      case 226:
        uint64_t v2 = "QMI_FAILURE_CAUSE_TIMER_T303_EXPIRED";
        break;
      case 228:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RR_REL_IND";
        break;
      case 229:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RR_RANDOM_ACCESS_FAILURE";
        break;
      case 230:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_IND";
        break;
      case 233:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL";
        break;
      case 234:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_FAIL_REDIAL_NOT_ALLOWED";
        break;
      case 235:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_LOW_LEVEL_IMMED_RETRY";
        break;
      case 236:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_ABORT_RADIO_UNAVAILABLE";
        break;
      case 238:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_STRATUM_REJ_RRC_REL_UNSPEC_IND";
        break;
      case 239:
        uint64_t v2 = "QMI_FAILURE_CAUSE_RRC_REL_UNSPEC_IND";
        break;
      default:
        if (a1 == 378)
        {
          uint64_t v2 = "CALL_END_CAUSE_CS_HARD_FAILURE";
        }
        else if (a1 == 379)
        {
          uint64_t v2 = "CALL_END_CAUSE_CS_ACQ_FAILURE";
        }
        else
        {
LABEL_12:
          uint64_t v2 = "Unknown";
        }
        break;
    }
  }
  else
  {
    switch(a1)
    {
      case 20:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CDMA_LOCK";
        break;
      case 21:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_SRV";
        break;
      case 22:
        uint64_t v2 = "QMI_FAILURE_CAUSE_FADE";
        break;
      case 23:
        uint64_t v2 = "QMI_FAILURE_CAUSE_INTERCEPT";
        break;
      case 24:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REORDER";
        break;
      case 25:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REL_NORMAL";
        break;
      case 26:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REL_SO_REJ";
        break;
      case 27:
        uint64_t v2 = "QMI_FAILURE_CAUSE_INCOM_CALL";
        break;
      case 28:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ALERT_STOP";
        break;
      case 29:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CLIENT_END";
        break;
      case 30:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACTIVATION";
        break;
      case 31:
        uint64_t v2 = "QMI_FAILURE_CAUSE_MC_ABORT";
        break;
      case 32:
        uint64_t v2 = "QMI_FAILURE_CAUSE_MAX_ACCESS_PROBE";
        break;
      case 33:
        uint64_t v2 = "QMI_FAILURE_CAUSE_PSIST_N";
        break;
      case 34:
        uint64_t v2 = "QMI_FAILURE_CAUSE_UIM_NOT_PRESENT";
        break;
      case 35:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACC_IN_PROG";
        break;
      case 36:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACC_FAIL";
        break;
      case 37:
        uint64_t v2 = "QMI_FAILURE_CAUSE_RETRY_ORDER";
        break;
      case 38:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CCS_NOT_SUPPORTED_BY_BS";
        break;
      case 39:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_RESPONSE_FROM_BS";
        break;
      case 40:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REJECTED_BY_BS";
        break;
      case 41:
        uint64_t v2 = "QMI_FAILURE_CAUSE_INCOMPATIBLE";
        break;
      case 42:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_BLOCK";
        break;
      case 43:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ALREADY_IN_TC";
        break;
      case 44:
        uint64_t v2 = "QMI_FAILURE_CAUSE_EMERGENCY_FLASHED";
        break;
      case 45:
        uint64_t v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_GPS";
        break;
      case 46:
        uint64_t v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_SMS";
        break;
      case 47:
        uint64_t v2 = "QMI_FAILURE_CAUSE_USER_CALL_ORIG_DATA";
        break;
      case 48:
        uint64_t v2 = "QMI_FAILURE_CAUSE_REDIR_OR_HANDOFF";
        break;
      case 49:
        uint64_t v2 = "QMI_FAILURE_CAUSE_ACCESS_BLOCK_ALL";
        break;
      case 50:
        uint64_t v2 = "QMI_FAILURE_CAUSE_OTASP_SPC_ERR";
        break;
      case 51:
        uint64_t v2 = "QMI_FAILURE_CAUSE_IS707B_MAX_ACC";
        break;
      case 52:
      case 53:
      case 54:
      case 55:
      case 56:
      case 57:
      case 58:
      case 59:
      case 60:
      case 61:
      case 62:
      case 63:
      case 64:
      case 65:
      case 66:
      case 67:
      case 68:
      case 69:
      case 70:
      case 71:
      case 72:
      case 73:
      case 74:
      case 75:
      case 76:
      case 77:
      case 78:
      case 79:
      case 80:
      case 81:
      case 82:
      case 83:
      case 84:
      case 85:
      case 86:
      case 87:
      case 88:
      case 89:
      case 90:
      case 91:
      case 92:
      case 93:
      case 94:
      case 95:
      case 96:
      case 97:
      case 98:
      case 99:
      case 100:
      case 101:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
        goto LABEL_12;
      case 102:
        uint64_t v2 = "QMI_FAILURE_CAUSE_INCOM_REJ";
        break;
      case 103:
        uint64_t v2 = "QMI_FAILURE_CAUSE_SETUP_REJ";
        break;
      case 104:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NETWORK_END";
        break;
      case 105:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_FUNDS";
        break;
      case 106:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_GW_SRV";
        break;
      case 107:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_CDMA_SRV";
        break;
      case 108:
        uint64_t v2 = "QMI_FAILURE_CAUSE_NO_FULL_SRV";
        break;
      case 109:
        uint64_t v2 = "QMI_FAILURE_CAUSE_MAX_PS_CALLS";
        break;
      case 115:
        uint64_t v2 = "QMI_FAILURE_CAUSE_CALL_BARRED";
        break;
      default:
        if (a1) {
          goto LABEL_12;
        }
        uint64_t v2 = "QMI_FAILURE_CAUSE_OFFLINE";
        break;
    }
  }
  return std::string::basic_string[abi:ne180100]<0>(a2, v2);
}

uint64_t convertCallEndBBCodeToCSIError(int a1)
{
  if (a1 > 186)
  {
    uint64_t v2 = (a1 - 187);
    if (v2 > 0x31) {
      return (a1 - 378) >= 2;
    }
    if (((1 << (a1 + 69)) & 0x3C6F822400001) != 0) {
      return 24;
    }
    if (v2 == 33) {
      return 18;
    }
    else {
      return (a1 - 378) >= 2;
    }
  }
  else
  {
    switch(a1)
    {
      case 106:
      case 107:
      case 108:
      case 157:
      case 158:
      case 159:
      case 162:
        return 24;
      case 109:
      case 110:
      case 111:
      case 112:
      case 113:
      case 114:
      case 116:
      case 117:
      case 118:
      case 119:
      case 120:
      case 121:
      case 122:
      case 123:
      case 124:
      case 125:
      case 126:
      case 127:
      case 128:
      case 129:
      case 130:
      case 131:
      case 132:
      case 133:
      case 134:
      case 135:
      case 136:
      case 137:
      case 138:
      case 139:
      case 140:
      case 160:
      case 161:
        return 1;
      case 115:
      case 144:
        uint64_t result = 26;
        break;
      case 141:
      case 142:
      case 143:
      case 145:
      case 147:
      case 148:
      case 149:
      case 150:
      case 151:
      case 152:
      case 153:
      case 154:
      case 155:
      case 156:
        return 0;
      case 146:
        uint64_t result = 28;
        break;
      default:
        int v3 = a1 - 20;
        uint64_t result = 32;
        switch(v3)
        {
          case 0:
            uint64_t result = 71;
            break;
          case 1:
            return 24;
          case 2:
            uint64_t result = 72;
            break;
          case 4:
            uint64_t result = 33;
            break;
          case 5:
          case 8:
          case 9:
          case 10:
          case 18:
          case 21:
            return 0;
          case 20:
            return result;
          default:
            return 1;
        }
        break;
    }
  }
  return result;
}

uint64_t QMIDataSubscriptionCommandDriver::create@<X0>(capabilities::ct *a1@<X0>, void *a2@<X8>)
{
  int v3 = (capabilities::ct *)capabilities::ct::supportsDynamicSID(a1);
  if (v3) {
    operator new();
  }
  uint64_t v4 = (capabilities::ct *)capabilities::ct::supportsHydra(v3);
  if (v4) {
    operator new();
  }
  uint64_t result = capabilities::ct::supportsDisableICCIDCommand(v4);
  if (result) {
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_22240CE70(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F3C40C6CAB3ECLL);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(QMIDataSubscriptionCommandDriver *this)
{
  *(void *)this = &unk_26D4C47F0;
  std::__tree<std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::__map_value_compare<std::pair<Technology,Type>,std::__value_type<std::pair<Technology,Type>,InputThreshold>,std::less<std::pair<Technology,Type>>,true>,std::allocator<std::__value_type<std::pair<Technology,Type>,InputThreshold>>>::destroy((uint64_t)this + 208, *((void **)this + 27));
  if (*((unsigned char *)this + 200)) {
    qmi::Client::~Client((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
  }
  if (*((unsigned char *)this + 160)) {
    qmi::Client::~Client((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
  }

  MEMORY[0x270EE9860](this);
}

{
  uint64_t vars8;

  QMIDataSubscriptionCommandDriver::~QMIDataSubscriptionCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMIDataSubscriptionCommandDriver::bootstrap(uint64_t a1, uint64_t a2, long long *a3)
{
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v13 = 0;
    _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#I Initializing command driver", v13, 2u);
  }
  long long v6 = *a3;
  *(void *)a3 = 0;
  *((void *)a3 + 1) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 56);
  *(_OWORD *)(a1 + 48) = v6;
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 112))(v13, a1);
  if (*(unsigned __int8 *)(a1 + 160) == v15)
  {
    if (!*(unsigned char *)(a1 + 160)) {
      goto LABEL_14;
    }
    long long v8 = v14;
    long long v14 = 0uLL;
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 152);
    *(_OWORD *)(a1 + 144) = v8;
    if (v9) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
    }
  }
  else
  {
    uint64_t v10 = (qmi::Client *)(a1 + 128);
    if (*(unsigned char *)(a1 + 160))
    {
      qmi::Client::~Client(v10);
      *(unsigned char *)(a1 + 160) = 0;
    }
    else
    {
      *(void *)uint64_t v10 = 0;
      *(void *)(a1 + 136) = 0;
      *(_OWORD *)(a1 + 144) = v14;
      long long v14 = 0uLL;
      *(unsigned char *)(a1 + 160) = 1;
    }
  }
  if (v15) {
    qmi::Client::~Client((qmi::Client *)v13);
  }
LABEL_14:
  if (*(unsigned char *)(a1 + 160)) {
    ++*(_DWORD *)(a1 + 232);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)a1 + 120))(v13, a1);
  if (*(unsigned char *)(a1 + 200))
  {
    long long v11 = v14;
    long long v14 = 0uLL;
    long long v12 = *(std::__shared_weak_count **)(a1 + 192);
    *(_OWORD *)(a1 + 184) = v11;
    if (v12) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v12);
    }
  }
  else
  {
    *(void *)(a1 + 168) = 0;
    *(void *)(a1 + 176) = 0;
    *(_OWORD *)(a1 + 184) = v14;
    long long v14 = 0uLL;
    *(unsigned char *)(a1 + 200) = 1;
  }
  qmi::Client::~Client((qmi::Client *)v13);
  if (*(unsigned char *)(a1 + 200)) {
    ++*(_DWORD *)(a1 + 232);
  }
}

void QMIDataSubscriptionCommandDriver::start(QMIDataSubscriptionCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  if (*((unsigned char *)this + 160)) {
    qmi::Client::start((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
  }
  if (*((unsigned char *)this + 200)) {
    qmi::Client::start((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
  }
}

void QMIDataSubscriptionCommandDriver::stop(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v3 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Stopping", v3, 2u);
  }
  if (*(unsigned char *)(a1 + 160)) {
    qmi::Client::stop((qmi::Client *)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 200)) {
    qmi::Client::stop((qmi::Client *)(a1 + 168));
  }
}

uint64_t QMIDataSubscriptionCommandDriver::basebandRequireAirplaneMode(QMIDataSubscriptionCommandDriver *this)
{
  if (capabilities::ct::supportsDynamicSID(this)) {
    return 2;
  }
  else {
    return 0;
  }
}

uint64_t QMIDataSubscriptionCommandDriver::requireSimInfoForConfiguration(QMIDataSubscriptionCommandDriver *this)
{
  return 1;
}

void QMIDataSubscriptionCommandDriver::registered(uint64_t a1, unsigned int a2)
{
  uint64_t v18 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = 136315138;
    uint64_t v17 = qmi::asShortString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI Client (%s) registered", (uint8_t *)&v16, 0xCu);
  }
  QMIDataSubscriptionCommandDriver::verifyClientService_sync((unsigned char *)a1, a2);
  long long v6 = (void *)(a1 + 216);
  uint64_t v5 = *(void *)(a1 + 216);
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (void *)v5;
        unsigned int v8 = *(unsigned __int8 *)(v5 + 25);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        long long v6 = v7;
        if (!*v7) {
          goto LABEL_11;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        long long v6 = v7 + 1;
        goto LABEL_11;
      }
    }
    uint64_t v11 = *(void *)(a1 + 224);
  }
  else
  {
    uint64_t v7 = (void *)(a1 + 216);
LABEL_11:
    uint64_t v9 = operator new(0x20uLL);
    v9[25] = a2;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v7;
    *long long v6 = v9;
    uint64_t v10 = **(void **)(a1 + 208);
    if (v10)
    {
      *(void *)(a1 + 208) = v10;
      uint64_t v9 = (unsigned char *)*v6;
    }
    std::__tree_balance_after_insert[abi:ne180100]<std::__tree_node_base<void *> *>(*(uint64_t **)(a1 + 216), (uint64_t *)v9);
    uint64_t v11 = *(void *)(a1 + 224) + 1;
    *(void *)(a1 + 224) = v11;
  }
  if (v11 == *(_DWORD *)(a1 + 232))
  {
    long long v12 = *(std::__shared_weak_count **)(a1 + 56);
    if (v12)
    {
      uint64_t v13 = std::__shared_weak_count::lock(v12);
      if (v13)
      {
        long long v14 = v13;
        uint64_t v15 = *(void *)(a1 + 48);
        if (v15) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 16))(v15, 1);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v14);
      }
    }
  }
  if (*(unsigned char *)(a1 + 160) && qmi::Client::getSvcType((qmi::Client *)(a1 + 128)) == a2) {
    (*(void (**)(uint64_t))(*(void *)a1 + 136))(a1);
  }
  if (*(unsigned char *)(a1 + 200))
  {
    if (qmi::Client::getSvcType((qmi::Client *)(a1 + 168)) == a2) {
      (*(void (**)(uint64_t))(*(void *)a1 + 128))(a1);
    }
  }
}

void sub_22240D470(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataSubscriptionCommandDriver::verifyClientService_sync(unsigned char *a1, int a2)
{
  if (!a1[160] || (uint64_t result = qmi::Client::getSvcType((qmi::Client *)(a1 + 128)), result != a2))
  {
    if (!a1[200] || (uint64_t result = qmi::Client::getSvcType((qmi::Client *)(a1 + 168)), result != a2))
    {
      return __TUAssertTrigger();
    }
  }
  return result;
}

void QMIDataSubscriptionCommandDriver::deregistered(uint64_t a1, unsigned int a2)
{
  uint64_t v21 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v19 = 136315138;
    uint64_t v20 = qmi::asShortString();
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I QMI Client (%s) deregistered", (uint8_t *)&v19, 0xCu);
  }
  QMIDataSubscriptionCommandDriver::verifyClientService_sync((unsigned char *)a1, a2);
  if (a2 == 42) {
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
  uint64_t v5 = *(uint64_t **)(a1 + 216);
  if (v5)
  {
    uint64_t v6 = a1 + 216;
    uint64_t v7 = *(void *)(a1 + 216);
    do
    {
      unsigned int v8 = *(unsigned __int8 *)(v7 + 25);
      BOOL v9 = v8 >= a2;
      if (v8 >= a2) {
        uint64_t v10 = (uint64_t *)v7;
      }
      else {
        uint64_t v10 = (uint64_t *)(v7 + 8);
      }
      if (v9) {
        uint64_t v6 = v7;
      }
      uint64_t v7 = *v10;
    }
    while (*v10);
    if (v6 != a1 + 216 && *(unsigned __int8 *)(v6 + 25) <= a2)
    {
      uint64_t v11 = *(void **)(v6 + 8);
      if (v11)
      {
        do
        {
          long long v12 = v11;
          uint64_t v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        uint64_t v13 = (void *)v6;
        do
        {
          long long v12 = (void *)v13[2];
          BOOL v14 = *v12 == (void)v13;
          uint64_t v13 = v12;
        }
        while (!v14);
      }
      if (*(void *)(a1 + 208) == v6) {
        *(void *)(a1 + 208) = v12;
      }
      --*(void *)(a1 + 224);
      std::__tree_remove[abi:ne180100]<std::__tree_node_base<void *> *>(v5, (uint64_t *)v6);
      operator delete((void *)v6);
    }
  }
  if (!*(void *)(a1 + 224))
  {
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 56);
    if (v15)
    {
      int v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        uint64_t v17 = v16;
        uint64_t v18 = *(void *)(a1 + 48);
        if (v18) {
          (*(void (**)(uint64_t, void))(*(void *)v18 + 16))(v18, 0);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v17);
      }
    }
  }
}

void sub_22240D6D0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::handleDataSubscriptionRegistered_sync(QMIDataSubscriptionCommandDriver *this)
{
  long long v14 = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v14);
  uint64_t v2 = (const void **)*((void *)&v14 + 1);
  if (*((void *)&v14 + 1) != (void)v15)
  {
    while (*((unsigned char *)*v2 + 8) != 24)
    {
      if (++v2 == (const void **)v15) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == (const void **)v15) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  v3[9] = 1;
  void v9[5] = (char *)this + 128;
  uint64_t v10 = QMIServiceMsg::create();
  int v11 = 25000;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  void v9[2] = ___ZN32QMIDataSubscriptionCommandDriver46sendRegisterForCurrentDataSubscriptionInd_syncEv_block_invoke;
  void v9[3] = &__block_descriptor_tmp_34_1;
  void v9[4] = this;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v17 = 0x40000000;
  uint64_t v18 = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd18RegisterIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0;
  int v19 = &unk_26460C5A0;
  uint64_t v20 = v9;
  uint64_t v4 = _Block_copy(&aBlock);
  uint64_t v13 = v4;
  if (v10)
  {
    qmi::Client::send();
    uint64_t v4 = v13;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v14);
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, (void *)this + 1);
  uint64_t v6 = aBlock;
  uint64_t v5 = (std::__shared_weak_count *)v17;
  if (v17)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 16), 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v5);
  }
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 1174405120;
  _DWORD v7[2] = ___ZN32QMIDataSubscriptionCommandDriver37handleDataSubscriptionRegistered_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_37;
  void v7[4] = this;
  void v7[5] = v6;
  unsigned int v8 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(QMIDataSubscriptionCommandDriver *, void *))(*(void *)this + 104))(this, v7);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_22240DA6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v22) {
    std::__shared_weak_count::__release_weak(v22);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN32QMIDataSubscriptionCommandDriver37handleDataSubscriptionRegistered_syncEv_block_invoke(void *a1, uint64_t a2)
{
  int v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[5])
      {
        unsigned int v8 = *(std::__shared_weak_count **)(v5 + 56);
        if (v8)
        {
          BOOL v9 = std::__shared_weak_count::lock(v8);
          if (v9)
          {
            uint64_t v10 = v9;
            uint64_t v11 = *(void *)(v5 + 48);
            if (v11) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 24))(v11, a2);
            }
            std::__shared_weak_count::__release_shared[abi:ne180100](v10);
          }
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    }
  }
}

void sub_22240DB74(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::handleSubscriptionConfigurationRegistered_sync(QMIDataSubscriptionCommandDriver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *((void *)this + 6);
      if (v5)
      {
        SubscriptionSlotConfiguration::SubscriptionSlotConfiguration((SubscriptionSlotConfiguration *)v6);
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 40))(v5, v6);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_22240DC10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

uint64_t QMIDataSubscriptionCommandDriver::isDriverReady_sync(QMIDataSubscriptionCommandDriver *this)
{
  if (*((unsigned char *)this + 160))
  {
    unsigned int SvcType = qmi::Client::getSvcType((QMIDataSubscriptionCommandDriver *)((char *)this + 128));
    for (uint64_t i = (uint64_t **)*((void *)this + 27); i; uint64_t i = (uint64_t **)*i)
    {
      unsigned int v4 = *((unsigned __int8 *)i + 25);
      if (SvcType >= v4)
      {
        if (v4 >= SvcType) {
          goto LABEL_8;
        }
        ++i;
      }
    }
    return 0;
  }
LABEL_8:
  if (*((unsigned char *)this + 200))
  {
    unsigned int v5 = qmi::Client::getSvcType((QMIDataSubscriptionCommandDriver *)((char *)this + 168));
    for (uint64_t j = (uint64_t **)*((void *)this + 27); j; uint64_t j = (uint64_t **)*j)
    {
      unsigned int v7 = *((unsigned __int8 *)j + 25);
      if (v5 >= v7)
      {
        if (v7 >= v5) {
          return 1;
        }
        ++j;
      }
    }
    return 0;
  }
  return 1;
}

void QMIDataSubscriptionCommandDriver::handleQueryCurrentDataSubscription_sync(uint64_t a1, uint64_t a2)
{
  memset(v10, 0, sizeof(v10));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v10);
  v5[5] = a1 + 128;
  uint64_t v6 = QMIServiceMsg::create();
  int v7 = 25000;
  uint64_t v8 = 0;
  BOOL v9 = 0;
  v5[0] = MEMORY[0x263EF8330];
  v5[1] = 0x40000000;
  _DWORD v5[2] = ___ZN32QMIDataSubscriptionCommandDriver39handleQueryCurrentDataSubscription_syncEU13block_pointerFvN10subscriber7SimSlotEE_block_invoke;
  void v5[3] = &unk_26460C478;
  v5[4] = a2;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd23CurrentDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460C528;
  aBlock[4] = v5;
  unsigned int v4 = _Block_copy(aBlock);
  BOOL v9 = v4;
  if (v6)
  {
    qmi::Client::send();
    unsigned int v4 = v9;
  }
  if (v4) {
    _Block_release(v4);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v10);
}

void sub_22240DDE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver39handleQueryCurrentDataSubscription_syncEU13block_pointerFvN10subscriber7SimSlotEE_block_invoke(uint64_t a1, qmi::MessageBase *this)
{
  uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
  if (TlvValue)
  {
    uint64_t v6 = TlvValue;
    int v7 = v5;
    uint64_t v9 = TlvValue;
    tlv::parseV<dsd::tlv::CurrentDataSubscription>((unint64_t *)&v9, v5);
    if (!v9) {
      ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v6, v7);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void QMIDataSubscriptionCommandDriver::handleConfigureSubscription_sync(uint64_t a1, uint64_t *a2, uint64_t a3, int a4)
{
  uint64_t v5 = *a2;
  v13[0] = MEMORY[0x263EF8330];
  v13[1] = 0x40000000;
  long long v14 = ___ZN32QMIDataSubscriptionCommandDriver32handleConfigureSubscription_syncERK29SubscriptionSlotConfigurationRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN10subscriber7SimSlotE_block_invoke;
  long long v15 = &__block_descriptor_tmp_7_4;
  uint64_t v16 = a1;
  int v17 = a4;
  uint64_t v25 = v5;
  if (SubscriptionSlotConfiguration::isValid())
  {
    *(_OWORD *)long long __p = 0u;
    long long v24 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    if (DataSubscriptionBaseCommandDriver::isValidSlot_sync())
    {
      int v6 = v25;
      int v7 = (const void **)__p[1];
      if (__p[1] != (void *)v24)
      {
        while (*((unsigned char *)*v7 + 8) != 16)
        {
          if (++v7 == (const void **)v24) {
            goto LABEL_11;
          }
        }
      }
      if (v7 == (const void **)v24) {
LABEL_11:
      }
        operator new();
      if (!v8) {
        __cxa_bad_cast();
      }
      if ((v6 - 1) <= 2) {
        v8[9] = v6;
      }
    }
    if (DataSubscriptionBaseCommandDriver::isValidSlot_sync())
    {
      int v9 = HIDWORD(v25);
      uint64_t v10 = (const void **)__p[1];
      if (__p[1] != (void *)v24)
      {
        while (*((unsigned char *)*v10 + 8) != 17)
        {
          if (++v10 == (const void **)v24) {
            goto LABEL_22;
          }
        }
      }
      if (v10 == (const void **)v24) {
LABEL_22:
      }
        operator new();
      if (!v11) {
        __cxa_bad_cast();
      }
      if ((v9 - 1) <= 2) {
        v11[9] = v9;
      }
    }
    _DWORD v18[7] = a1 + 168;
    uint64_t v19 = QMIServiceMsg::create();
    int v20 = 25000;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN32QMIDataSubscriptionCommandDriver35sendProvisioningSessionToSlots_syncE29SubscriptionSlotConfigurationU13block_pointerFvbE_block_invoke;
    v18[3] = &unk_26460C500;
    v18[5] = a1;
    void v18[6] = v25;
    void v18[4] = v13;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim28MapProvisioningSessionToSlot8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_26460C5F0;
    aBlock[4] = v18;
    uint64_t v12 = _Block_copy(aBlock);
    uint64_t v22 = v12;
    if (v19)
    {
      qmi::Client::send();
      uint64_t v12 = v22;
    }
    if (v12) {
      _Block_release(v12);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    v14((uint64_t)v13, 1);
  }
}

void sub_22240E3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *aBlock,char a27)
{
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver32handleConfigureSubscription_syncERK29SubscriptionSlotConfigurationRKNSt3__112basic_stringIcNS3_11char_traitsIcEENS3_9allocatorIcEEEEN10subscriber7SimSlotE_block_invoke(uint64_t a1, char a2)
{
  int v3 = *(unsigned char **)(a1 + 32);
  if ((a2 & 1) != 0 && v3[160]) {
    return (*(uint64_t (**)(unsigned char *, void, uint64_t))(*(void *)v3 + 96))(v3, *(unsigned int *)(a1 + 40), 1);
  }
  else {
    return DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
}

void QMIDataSubscriptionCommandDriver::handleChangeDefaultDataSubscription_sync(uint64_t a1, int a2, int a3)
{
  if (*(unsigned char *)(a1 + 160) && (subscriber::isValidSimSlot() & 1) != 0)
  {
    *(_OWORD *)long long __p = 0u;
    long long v18 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    int v6 = (const void **)__p[1];
    int v7 = (const void **)v18;
    if (__p[1] != (void *)v18)
    {
      while (*((unsigned char *)*v6 + 8) != 1)
      {
        if (++v6 == (const void **)v18) {
          goto LABEL_13;
        }
      }
    }
    if (v6 == (const void **)v18) {
LABEL_13:
    }
      operator new();
    if (!v8) {
      __cxa_bad_cast();
    }
    if ((a2 - 1) <= 1) {
      v8[3] = a2;
    }
    for (uint64_t i = (const void **)__p[1]; ; ++i)
    {
      if (i == v7) {
        goto LABEL_23;
      }
      if (*((unsigned char *)*i + 8) == 16) {
        break;
      }
    }
    if (i == v7) {
LABEL_23:
    }
      operator new();
    if (!v10) {
      __cxa_bad_cast();
    }
    uint64_t v10[3] = a3 != 1;
    void v12[5] = a1 + 128;
    uint64_t v13 = QMIServiceMsg::create();
    int v14 = 25000;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    v12[0] = MEMORY[0x263EF8330];
    v12[1] = 0x40000000;
    _DWORD v12[2] = ___ZN32QMIDataSubscriptionCommandDriver41sendDefaultDataSubscriptionSwitchReq_syncEN10subscriber7SimSlotEb_block_invoke;
    void v12[3] = &__block_descriptor_tmp_35_1;
    void v12[4] = a1;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd22SwitchDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
    aBlock[3] = &unk_26460C5C8;
    aBlock[4] = v12;
    uint64_t v11 = _Block_copy(aBlock);
    uint64_t v16 = v11;
    if (v13)
    {
      qmi::Client::send();
      uint64_t v11 = v16;
    }
    if (v11) {
      _Block_release(v11);
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  else
  {
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
}

void sub_22240E928(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::registerDataSubscriptionClient_sync(QMIDataSubscriptionCommandDriver *this@<X0>, uint64_t a2@<X8>)
{
  if (capabilities::ct::supportsDynamicSID(this))
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  }
  else
  {
    long long v34 = 0u;
    long long v35 = 0u;
    std::string::basic_string[abi:ne180100]<0>(&v36, *((char **)this + 10));
    unsigned int v4 = *((void *)this + 3);
    dispatch_object_t v33 = v4;
    if (v4) {
      dispatch_retain(v4);
    }
    std::string::basic_string[abi:ne180100]<0>(&v31, "dsd");
    std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v27, (void *)this + 1);
    uint64_t v29 = v27;
    long long v30 = v28;
    if (v28) {
      atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    Registry::getServerConnection(&v25, *((Registry **)this + 8));
    qmi::Client::createWithQueueLocal();
    if (v26) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    }
    if (v30) {
      std::__shared_weak_count::__release_weak(v30);
    }
    if (v28) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v28);
    }
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v33) {
      dispatch_release(v33);
    }
    if (SHIBYTE(v38) < 0) {
      operator delete(v36);
    }
    std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v36, (void *)this + 1);
    int v6 = v36;
    uint64_t v5 = (std::__shared_weak_count *)v37;
    if (v37)
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 16), 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
    uint64_t v18 = MEMORY[0x263EF8330];
    uint64_t v19 = 1174405120;
    int v20 = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke;
    uint64_t v21 = &__block_descriptor_tmp_12_15;
    uint64_t v22 = this;
    uint64_t v23 = v6;
    long long v24 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    qmi::Client::setHandler();
    uint64_t v11 = MEMORY[0x263EF8330];
    uint64_t v12 = 1174405120;
    uint64_t v13 = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_13;
    int v14 = &__block_descriptor_tmp_16_5;
    uint64_t v15 = this;
    uint64_t v16 = v6;
    int v17 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    qmi::Client::setHandler();
    v9[0] = MEMORY[0x263EF8330];
    v9[1] = 1174405120;
    void v9[2] = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_17;
    void v9[3] = &__block_descriptor_tmp_20_12;
    void v9[4] = this;
    void v9[5] = v6;
    uint64_t v10 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = (void *)MEMORY[0x263EF8330];
    uint64_t v37 = 0x40000000;
    uint64_t v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3dsd27CurrentDataSubscriptionInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v39 = &unk_26460C550;
    int v40 = v9;
    qmi::Client::setIndHandler();
    v7[0] = MEMORY[0x263EF8330];
    v7[1] = 1174405120;
    _DWORD v7[2] = ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_21;
    v7[3] = &__block_descriptor_tmp_24_11;
    void v7[4] = this;
    void v7[5] = v6;
    uint64_t v8 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v36 = (void *)MEMORY[0x263EF8330];
    uint64_t v37 = 0x40000000;
    uint64_t v38 = ___ZNK3qmi6Client13setIndHandlerIRKN3dsd22SwitchDataSubscription10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
    uint64_t v39 = &unk_26460C578;
    int v40 = v7;
    qmi::Client::setIndHandler();
    qmi::Client::setIndShouldWake((qmi::Client *)&v34);
    qmi::Client::setIndShouldWake((qmi::Client *)&v34);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(_OWORD *)(a2 + 16) = v35;
    long long v35 = 0uLL;
    *(unsigned char *)(a2 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 1;
    if (v8) {
      std::__shared_weak_count::__release_weak(v8);
    }
    if (v10) {
      std::__shared_weak_count::__release_weak(v10);
    }
    if (v17) {
      std::__shared_weak_count::__release_weak(v17);
    }
    if (v24) {
      std::__shared_weak_count::__release_weak(v24);
    }
    if (v5) {
      std::__shared_weak_count::__release_weak(v5);
    }
    qmi::Client::~Client((qmi::Client *)&v34);
  }
}

void sub_22240ED68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38)
{
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  if (a36) {
    std::__shared_weak_count::__release_weak(a36);
  }
  if (v38) {
    std::__shared_weak_count::__release_weak(v38);
  }
  qmi::Client::~Client((qmi::Client *)(v39 - 144));
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::registered(v3, 0x2Au);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22240EEC4(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_13(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::deregistered(v3, 0x2Au);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22240EF50(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_17(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      int v6 = v5;
      if (*(void *)(a1 + 40))
      {
        uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
        uint64_t v9 = TlvValue;
        if (TlvValue)
        {
          int v10 = v8;
          uint64_t v11 = TlvValue;
          tlv::parseV<dsd::tlv::CurrentDataSubscription>((unint64_t *)&v11, v8);
          if (!v11) {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v9, v10);
          }
        }
        DataSubscriptionBaseCommandDriver::operationCompleted_sync();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

void sub_22240F064(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver35registerDataSubscriptionClient_syncEv_block_invoke_21(uint64_t a1, qmi::MessageBase *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v3) {
    return;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return;
  }
  int v6 = v5;
  if (*(void *)(a1 + 40))
  {
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(a2);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      uint64_t v12 = TlvValue;
      int v11 = tlv::parseV<dsd::tlv::DefaultDataSwitchResult>((unint64_t *)&v12, v8);
      if (v12)
      {
        if (!v11) {
          goto LABEL_11;
        }
      }
      else
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)a2, 1, v9, v10);
      }
    }
    DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
LABEL_11:

  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
}

void sub_22240F164(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void QMIDataSubscriptionCommandDriver::registerSubscriptionConfigurationClient_sync(QMIDataSubscriptionCommandDriver *this@<X0>, _OWORD *a2@<X8>)
{
  *a2 = 0u;
  a2[1] = 0u;
  std::string::basic_string[abi:ne180100]<0>(&v14, *((char **)this + 10));
  uint64_t v3 = *((void *)this + 3);
  dispatch_object_t v13 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&v11, "sim");
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v7, (void *)this + 1);
  uint64_t v9 = v7;
  int v10 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  Registry::getServerConnection(&v5, *((Registry **)this + 8));
  qmi::Client::createWithQueueLocal();
  if (v6) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  }
  if (v10) {
    std::__shared_weak_count::__release_weak(v10);
  }
  if (v8) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v13) {
    dispatch_release(v13);
  }
  if (v16 < 0) {
    operator delete(v14);
  }
  std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&v14, (void *)this + 1);
  unsigned int v4 = v15;
  if (v15)
  {
    atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v4);
  }
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  qmi::Client::setHandler();
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_22240F3B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  if (v28) {
    std::__shared_weak_count::__release_weak(v28);
  }
  qmi::Client::~Client(v27);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::registered(v3, 0xBu);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22240F4E0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver44registerSubscriptionConfigurationClient_syncEv_block_invoke_29(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    unsigned int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5]) {
        QMIDataSubscriptionCommandDriver::deregistered(v3, 0xBu);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
}

void sub_22240F56C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void ___ZN32QMIDataSubscriptionCommandDriver46sendRegisterForCurrentDataSubscriptionInd_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_error_impl(&dword_22231A000, v2, OS_LOG_TYPE_ERROR, "Failed to register for current data subscription ind", v3, 2u);
    }
  }
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver41sendDefaultDataSubscriptionSwitchReq_syncEN10subscriber7SimSlotEb_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)(a2 + 4)) {
    return DataSubscriptionBaseCommandDriver::operationCompleted_sync();
  }
  return result;
}

uint64_t ___ZN32QMIDataSubscriptionCommandDriver35sendProvisioningSessionToSlots_syncE29SubscriptionSlotConfigurationU13block_pointerFvbE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v17 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    unsigned int v4 = *(NSObject **)(*(void *)(a1 + 40) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      uint64_t v6 = subscriber::asString();
      uint64_t v7 = subscriber::asString();
      int v8 = *(_DWORD *)(a2 + 4);
      int v9 = 136315906;
      uint64_t v10 = v6;
      __int16 v11 = 2080;
      uint64_t v12 = v7;
      __int16 v13 = 1024;
      int v14 = v8;
      __int16 v15 = 2080;
      uint64_t v16 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Configuration (%s, %s) falled 0x%04x (%s)", (uint8_t *)&v9, 0x26u);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void std::shared_ptr<QMIDataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIDataSubscriptionCommandDriver,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22240F804(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1}::operator() const(QMIDataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22240F82C(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIDataSubscriptionCommandDriver *,std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver *)#1},std::allocator<QMIDataSubscriptionCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIDataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIDataSubscriptionCommandDriver>(QMIDataSubscriptionCommandDriver*)::{lambda(QMIDataSubscriptionCommandDriver*)#1}::operator() const(QMIDataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void std::shared_ptr<QMIMav20DataSubscriptionCommandDriver>::shared_ptr[abi:ne180100]<QMIMav20DataSubscriptionCommandDriver,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22240F9D4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1}::operator() const(QMIMav20DataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22240F9FC(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIMav20DataSubscriptionCommandDriver *,std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver *)#1},std::allocator<QMIMav20DataSubscriptionCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIMav20DataSubscriptionCommandDriver> ctu::SharedSynchronizable<DataSubscriptionBaseCommandDriver>::make_shared_ptr<QMIMav20DataSubscriptionCommandDriver>(QMIMav20DataSubscriptionCommandDriver*)::{lambda(QMIMav20DataSubscriptionCommandDriver*)#1}::operator() const(QMIMav20DataSubscriptionCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd23CurrentDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22240FB9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dsd27CurrentDataSubscriptionInfo10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22240FCA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void ___ZNK3qmi6Client13setIndHandlerIRKN3dsd22SwitchDataSubscription10IndicationEEEvtU13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_22240FDA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::ReportCurrentDefaultSubscription>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd18RegisterIndication8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<dsd::RegisterIndication::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_22240FF0C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)unsigned int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSubscription>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  uint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)unsigned int v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<dsd::tlv::DefaultDataSwitchType>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3dsd22SwitchDataSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_2224101A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::PrimarySlot>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unsigned int v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *unsigned int v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<uim::tlv::SecondarySlot>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3uim28MapProvisioningSessionToSlot8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long __p = 0;
    uint64_t v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      uint64_t v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222410458(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void Mav20QMIAttachApnCommandDriver::create(void *a1@<X8>)
{
  uint64_t v1 = *MEMORY[0x263EF8340];
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_2224106A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void Mav20QMIAttachApnCommandDriver::~Mav20QMIAttachApnCommandDriver(Mav20QMIAttachApnCommandDriver *this)
{
  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav20QMIAttachApnCommandDriver *)((char *)this + 96));

  AttachApnCommandDriver::~AttachApnCommandDriver(this);
}

{
  uint64_t vars8;

  *(void *)this = &unk_26D4B8F38;
  qmi::Client::~Client((Mav20QMIAttachApnCommandDriver *)((char *)this + 96));
  AttachApnCommandDriver::~AttachApnCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void Mav20QMIAttachApnCommandDriver::handleBasebandOn_sync(Mav20QMIAttachApnCommandDriver *this)
{
  uint64_t v2 = (Mav20QMIAttachApnCommandDriver *)((char *)this + 96);
  char v3 = (const char *)*MEMORY[0x263F8AFE0];
  subscriber::simSlotAsInstance();
  qmi::Client::set(v2, v3);
  memset(v12, 0, sizeof(v12));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
  LODWORD(v3) = *((_DWORD *)this + 16);
  unsigned int v4 = qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>((uint64_t)v12, 1);
  if (v3 == 2) {
    int v5 = 2;
  }
  else {
    int v5 = 1;
  }
  *(_DWORD *)unsigned int v4 = v5;
  void v7[5] = v2;
  uint64_t v8 = QMIServiceMsg::create();
  int v9 = 25000;
  uint64_t v10 = 0;
  __int16 v11 = 0;
  v7[0] = MEMORY[0x263EF8330];
  v7[1] = 0x40000000;
  _DWORD v7[2] = ___ZN30Mav20QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke;
  v7[3] = &__block_descriptor_tmp_13;
  void v7[4] = this;
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
  aBlock[3] = &unk_26460C6F8;
  aBlock[4] = v7;
  uint64_t v6 = _Block_copy(aBlock);
  __int16 v11 = v6;
  if (v8)
  {
    qmi::Client::send();
    uint64_t v6 = v11;
  }
  if (v6) {
    _Block_release(v6);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);

  QMIAttachApnCommandDriverBase::handleBasebandOn_sync(this);
}

void sub_222410984(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, char a19)
{
  if (a15) {
    qmi::Client::send();
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a19);
  _Unwind_Resume(a1);
}

void ___ZN30Mav20QMIAttachApnCommandDriver21bindSubscription_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    char v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

void Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v208 = *MEMORY[0x263EF8340];
  memset(v189, 0, sizeof(v189));
  std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v189, a3);
  char v6 = *(unsigned char *)(a3 + 32);
  uint64_t v7 = (char *)operator new(0x20uLL);
  *((void *)v7 + 1) = 0;
  *((void *)v7 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)uint64_t v7 = &unk_26D4C4F28;
  v7[24] = 0;
  __int16 v8 = v7 + 24;
  int v9 = dispatch_group_create();
  uint64_t v10 = v9;
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v10);
    dispatch_release(v10);
  }
  char v11 = *(unsigned char *)(a1 + 128);
  if (!v11)
  {
    *__int16 v8 = 1;
    goto LABEL_252;
  }
  if (!*(unsigned char *)(a2 + 8)
    || (*(void *)a2
      ? (uint64_t v12 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get)
      : (uint64_t v12 = 0),
        !v12))
  {
    BOOL v65 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v191 = 0;
      _os_log_impl(&dword_22231A000, v65, OS_LOG_TYPE_DEFAULT, "#I dummy push complete", v191, 2u);
    }
    goto LABEL_252;
  }
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(v10);
  }
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&cf, (const void **)a2);
  unsigned int v112 = *(unsigned __int16 *)(a3 + 64);
  atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
  v187[0] = &unk_26D4C4F78;
  v187[1] = v7 + 24;
  v187[2] = v7;
  uint64_t v188 = v187;
  uint64_t v124 = 0;
  v125 = 0;
  uint64_t v126 = 0;
  CFTypeRef v123 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v113 = v10;
  unint64_t v117 = a1;
  AttachApnCommandDriver::getApnListForType_sync();
  uint64_t v107 = (const void **)a2;
  uint64_t v108 = v7;
  uint64_t v109 = v7 + 24;
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v123);
  uint64_t v120 = 0;
  uint64_t v121 = 0;
  uint64_t v122 = 0;
  __int16 v13 = v124;
  uint64_t v111 = v125;
  char v106 = v11;
  if (v124 == v125)
  {
    unint64_t v61 = a1;
    goto LABEL_125;
  }
  char v14 = 0;
  uint64_t v110 = (char *)*MEMORY[0x263F03688];
  uint64_t v115 = *(void *)(MEMORY[0x263F8C2B8] + 64);
  uint64_t v116 = *MEMORY[0x263F8C2B8];
  uint64_t v114 = *(void *)(MEMORY[0x263F8C2B8] + 72);
  uint64_t v15 = 32;
  while (1)
  {
    char v180 = 0;
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)&v180, v13);
    uint64_t v207 = 0;
    long long v205 = 0u;
    long long v206 = 0u;
    long long v203 = 0u;
    long long v204 = 0u;
    long long v201 = 0u;
    long long v202 = 0u;
    long long v199 = 0u;
    long long v200 = 0u;
    long long v197 = 0u;
    long long v198 = 0u;
    long long v195 = 0u;
    long long v196 = 0u;
    long long v194 = 0u;
    long long v192 = 0u;
    memset(v193, 0, sizeof(v193));
    *(_OWORD *)int v191 = 0u;
    std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v191);
    uint64_t v17 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v192, (uint64_t)"trying to push 3GPP attach APN ", 31);
    uint64_t v18 = v180
        ? ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get
        : 0;
    if (v18)
    {
      ctu::cf_to_xpc((uint64_t *)&object, v180, v16);
      xpc::object::to_string((uint64_t *)&__p, (xpc::object *)&object);
    }
    else
    {
      std::string::basic_string[abi:ne180100]<0>(&__p, "empty");
    }
    uint64_t v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    uint64_t v20 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? HIBYTE(__p.__r_.__value_.__r.__words[2])
        : __p.__r_.__value_.__l.__size_;
    std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v17, (uint64_t)v19, v20);
    if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      break;
    }
    operator delete(__p.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_31;
    }
LABEL_32:
    uint64_t v21 = *(void *)(v117 + 88);
    if (v21) {
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v21 + 48))(v21, v191);
    }
    v178[1] = 0;
    v178[0] = 0;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v178, v180);
    memset(v177, 0, sizeof(v177));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v177);
    xpc_object_t v172 = (xpc_object_t)MEMORY[0x263EF8330];
    uint64_t v173 = 1174405120;
    uint64_t v174 = (uint64_t)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke;
    uint64_t v175 = (uint64_t)&__block_descriptor_tmp_11_11;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v176, (const ctu::cf::dict_adapter *)v178);
    uint64_t v22 = qmi::MutableMessageBase::getTLV<wds::tlv::PdpType3GPP>((uint64_t)v177, 17);
    ((void (*)(xpc_object_t *, char *))v174)(&v172, v22);
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingLTE");
    int Int = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v178, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    if ((Int - 1) <= 2)
    {
      v168[0] = (__CFDictionary *)MEMORY[0x263EF8330];
      v168[1] = (__CFDictionary *)0x40000000;
      unint64_t v169 = (uint64_t (*)(uint64_t, char *))___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2;
      uint64_t v170 = &__block_descriptor_tmp_17_6;
      int v171 = Int - 1;
      long long v24 = qmi::MutableMessageBase::getTLV<wds::tlv::LTERoamingPdpType>((uint64_t)v177, 65);
      v169((uint64_t)v168, v24);
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "AllowedProtocolMaskInRoamingUMTS");
    int v25 = ctu::cf::map_adapter::getInt((ctu::cf::map_adapter *)v178, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    if ((v25 - 1) <= 2)
    {
      v164[0] = (xpc_object_t)MEMORY[0x263EF8330];
      v164[1] = (xpc_object_t)0x40000000;
      long long v165 = (uint64_t (*)(uint64_t, char *))___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3;
      long long v166 = &__block_descriptor_tmp_20_1;
      int v167 = v25 - 1;
      char v26 = qmi::MutableMessageBase::getTLV<wds::tlv::UMTSRoamingPdpType>((uint64_t)v177, 66);
      v165((uint64_t)v164, v26);
    }
    uint64_t v27 = *(const void **)(a3 + 40);
    uint64_t v28 = *(void *)(a3 + 48);
    uint64_t v29 = v28 - (void)v27;
    if ((const void *)v28 != v27)
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v117;
      uint64_t v30 = v29 >> 1;
      __p.__r_.__value_.__r.__words[2] = 0;
      uint64_t v162 = 0;
      std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&__p.__r_.__value_.__l.__size_, v27, v28, v29 >> 1);
      unint64_t v163 = v30;
      __int16 v31 = qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>((uint64_t)v177, 71);
      if (v163 >= 0xB)
      {
        char v32 = *(NSObject **)(__p.__r_.__value_.__r.__words[0] + 40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 134217984;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = 10;
          _os_log_impl(&dword_22231A000, v32, OS_LOG_TYPE_DEFAULT, "#E Too many container IDs. Using only the first %lu IDs", (uint8_t *)&buf, 0xCu);
        }
      }
      *(void *)__int16 v31 = 0;
      *((void *)v31 + 1) = 0;
      *((_DWORD *)v31 + 4) = 0;
      uint64_t v33 = v163;
      if (v163 >= 0xA) {
        uint64_t v33 = 10;
      }
      if (v33) {
        memmove(v31, (const void *)__p.__r_.__value_.__l.__size_, 2 * v33);
      }
      if (__p.__r_.__value_.__l.__size_)
      {
        __p.__r_.__value_.__r.__words[2] = __p.__r_.__value_.__l.__size_;
        operator delete((void *)__p.__r_.__value_.__l.__size_);
      }
    }
    if (v112 >= 0x100) {
      *qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>((uint64_t)v177, 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = v112;
    }
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "PcscfAddressRequired");
    int Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)v178, (const __CFString *)__p.__r_.__value_.__l.__data_);
    MEMORY[0x223C99AF0](&__p);
    long long v35 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>((uint64_t)v177, 221);
    uint64_t v36 = 1;
    if (Bool) {
      uint64_t v36 = 2;
    }
    *(void *)long long v35 = v36;
    *(void *)&long long v158 = MEMORY[0x263EF8330];
    *((void *)&v158 + 1) = 1174405120;
    *(void *)&long long v159 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4;
    *((void *)&v159 + 1) = &__block_descriptor_tmp_26_6;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v160, (const ctu::cf::dict_adapter *)v178);
    uint64_t v37 = qmi::MutableMessageBase::getTLV<wds::tlv::ApnName>((uint64_t)v177, 20);
    ((void (*)(long long *, char *))v159)(&v158, v37);
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__s, "username");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](&__s);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    if (size)
    {
      aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      aBlock.__r_.__value_.__l.__size_ = 1174405120;
      aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_28;
      uint64_t v183 = &__block_descriptor_tmp_29_5;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v184, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string v184 = __p;
      }
      uint64_t v39 = qmi::MutableMessageBase::getTLV<wds::tlv::UserName>((uint64_t)v177, 27);
      ((void (*)(std::string *, char *))aBlock.__r_.__value_.__r.__words[2])(&aBlock, v39);
      if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v184.__r_.__value_.__l.__data_);
      }
    }
    memset(&buf, 0, sizeof(buf));
    memset(&__s, 0, sizeof(__s));
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v152, "password");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](v152);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    std::string::size_type v40 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v40 = buf.__r_.__value_.__l.__size_;
    }
    if (v40)
    {
      v154.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
      v154.__r_.__value_.__l.__size_ = 1174405120;
      v154.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_31;
      uint64_t v155 = &__block_descriptor_tmp_34_9;
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v156, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string v156 = buf;
      }
      uint64_t v41 = qmi::MutableMessageBase::getTLV<wds::tlv::Password>((uint64_t)v177, 28);
      ((void (*)(std::string *, char *))v154.__r_.__value_.__r.__words[2])(&v154, v41);
      if (SHIBYTE(v156.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v156.__r_.__value_.__l.__data_);
      }
    }
    memset(&__s, 0, sizeof(__s));
    v152[1] = 0;
    v152[0] = 0;
    uint64_t v153 = 0;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v181, "auth_type");
    ctu::cf::map_adapter::getString();
    MEMORY[0x223C99AF0](&v181);
    if (SHIBYTE(v153) < 0) {
      operator delete(v152[0]);
    }
    std::string::size_type v42 = HIBYTE(__s.__r_.__value_.__r.__words[2]);
    if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v42 = __s.__r_.__value_.__l.__size_;
    }
    if (v42)
    {
      *(void *)&long long v149 = MEMORY[0x263EF8330];
      *((void *)&v149 + 1) = 1174405120;
      *(void *)&long long v150 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_36;
      *((void *)&v150 + 1) = &__block_descriptor_tmp_40_10;
      if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
        std::string::__init_copy_ctor_external(&v151, __s.__r_.__value_.__l.__data_, __s.__r_.__value_.__l.__size_);
      }
      else {
        std::string v151 = __s;
      }
      uint64_t v43 = qmi::MutableMessageBase::getTLV<wds::tlv::AuthPref>((uint64_t)v177, 29);
      ((void (*)(long long *, char *))v150)(&v149, v43);
      if (SHIBYTE(v151.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v151.__r_.__value_.__l.__data_);
      }
    }
    uint64_t v144 = MEMORY[0x263EF8330];
    uint64_t v145 = 1174405120;
    xpc_object_t v146 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_41;
    long long v147 = &__block_descriptor_tmp_47_5;
    ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)v148, (const ctu::cf::dict_adapter *)v178);
    std::string v44 = qmi::MutableMessageBase::getTLV<wds::tlv::ProxyAddrUsingPco>((uint64_t)v177, 31);
    v146((uint64_t)&v144, v44);
    LODWORD(v181) = -1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v152, "APNClass");
    uint64_t v45 = (int *)(*(uint64_t (**)(void *, void *))v178[0])(v178, v152[0]);
    long long v46 = v45;
    if (v45)
    {
      CFTypeID v47 = CFGetTypeID(v45);
      if (v47 == CFNumberGetTypeID()) {
        int v49 = ctu::cf::assign((ctu::cf *)&v181, v46, v48);
      }
      else {
        int v49 = 0;
      }
      CFRelease(v46);
    }
    else
    {
      int v49 = 0;
    }
    MEMORY[0x223C99AF0](v152);
    if (v49 && (v181 & 0x80000000) == 0)
    {
      v140[0] = (const void *)MEMORY[0x263EF8330];
      v140[1] = (const void *)0x40000000;
      unint64_t v141 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_49;
      uint64_t v142 = &__block_descriptor_tmp_51_3;
      int v143 = v181;
      long long v50 = qmi::MutableMessageBase::getTLV<wds::tlv::APNClass>((uint64_t)v177, 49);
      v141((uint64_t)v140, v50);
    }
    char v139 = 1;
    ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)v152, v110);
    uint64_t v51 = (BOOL *)(*(uint64_t (**)(void *, void *))v178[0])(v178, v152[0]);
    int v52 = v51;
    if (v51)
    {
      CFTypeID v53 = CFGetTypeID(v51);
      if (v53 == CFBooleanGetTypeID()) {
        int v55 = ctu::cf::assign((ctu::cf *)&v139, v52, v54);
      }
      else {
        int v55 = 0;
      }
      CFRelease(v52);
      MEMORY[0x223C99AF0](v152);
      if (v55)
      {
        v135[0] = (xpc_object_t)MEMORY[0x263EF8330];
        v135[1] = (xpc_object_t)0x40000000;
        unint64_t v136 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_52;
        uint64_t v137 = &__block_descriptor_tmp_54_0;
        char v138 = v139;
        int v56 = qmi::MutableMessageBase::getTLV<wds::tlv::RoamingDisallow>((uint64_t)v177, 62);
        v136((uint64_t)v135, v56);
      }
    }
    else
    {
      MEMORY[0x223C99AF0](v152);
    }
    v131[0] = MEMORY[0x263EF8330];
    v131[1] = 0x40000000;
    uint64_t v132 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_55;
    uint64_t v133 = &__block_descriptor_tmp_57_3;
    char v134 = v14 & 1;
    long long v57 = qmi::MutableMessageBase::getTLV<wds::tlv::Append>((uint64_t)v177, 144);
    v132((uint64_t)v131, v57);
    *(_DWORD *)qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>((uint64_t)v177, 145) = 0;
    std::vector<wds::SetAttachProfileInfo3GPP::Request>::push_back[abi:ne180100](&v120);
    MEMORY[0x223C99B30](v148);
    if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__s.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    MEMORY[0x223C99B30](v160);
    MEMORY[0x223C99B30](v176);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v177);
    MEMORY[0x223C99B30](v178);
    *(void *)int v191 = v116;
    *(void *)&v191[*(void *)(v116 - 24)] = v115;
    *(void *)&long long v192 = v114;
    *((void *)&v192 + 1) = MEMORY[0x263F8C318] + 16;
    if (SHIBYTE(v196) < 0) {
      operator delete(*((void **)&v195 + 1));
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    MEMORY[0x223C9A8E0](&v198);
    ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)&v180);
    ++v13;
    v15 -= 32;
    char v14 = 1;
    if (v13 == v111)
    {
      v127[0] = MEMORY[0x263EF8330];
      v127[1] = 0x40000000;
      uint64_t v128 = ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_5;
      uint64_t v129 = &__block_descriptor_tmp_63_0;
      char v130 = v6;
      int v58 = qmi::MutableMessageBase::getTLV<wds::tlv::AttachProfileAction>(v120 - v15, 145);
      v128((uint64_t)v127, (int *)v58);
      uint64_t v59 = v120;
      uint64_t v60 = v121;
      unint64_t v61 = v117;
      if (v120 != v121)
      {
        int v62 = 0;
        *(void *)&long long v149 = 0;
        *((void *)&v149 + 1) = &v149;
        *(void *)&long long v150 = 0x2000000000;
        BYTE8(v150) = 0;
        xpc_object_t v172 = 0;
        uint64_t v173 = (uint64_t)&v172;
        uint64_t v174 = 0x2000000000;
        uint64_t v175 = (v121 - v120) >> 5;
        do
        {
          long long v158 = 0u;
          long long v159 = 0u;
          qmi::MutableMessageBase::MutableMessageBase();
          v154.__r_.__value_.__r.__words[0] = v117 + 96;
          v154.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
          LODWORD(v154.__r_.__value_.__r.__words[2]) = 25000;
          uint64_t v155 = 0;
          v156.__r_.__value_.__r.__words[0] = 0;
          *(void *)int v191 = MEMORY[0x263EF8330];
          *(void *)&v191[8] = 1174405120;
          *(void *)&long long v192 = ___ZN30Mav20QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke;
          *((void *)&v192 + 1) = &unk_26D4C4CA0;
          v193[2] = v117;
          v193[3] = v113;
          if (v113)
          {
            dispatch_retain(v113);
            if (v193[3]) {
              dispatch_group_enter((dispatch_group_t)v193[3]);
            }
          }
          LODWORD(v196) = v62;
          v193[0] = &v149;
          v193[1] = &v172;
          std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)&v194, (uint64_t)v187);
          aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
          aBlock.__r_.__value_.__l.__size_ = 0x40000000;
          aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
          uint64_t v183 = &unk_26460C6F8;
          v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
          uint64_t v63 = _Block_copy(&aBlock);
          v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v63;
          if (v154.__r_.__value_.__l.__size_)
          {
            qmi::Client::send();
            uint64_t v63 = (void *)v156.__r_.__value_.__r.__words[0];
          }
          if (v63) {
            _Block_release(v63);
          }
          std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&v194);
          if (v193[3])
          {
            dispatch_group_leave((dispatch_group_t)v193[3]);
            if (v193[3]) {
              dispatch_release((dispatch_object_t)v193[3]);
            }
          }
          qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v158);
          v59 += 32;
          ++v62;
        }
        while (v59 != v60);
        _Block_object_dispose(&v172, 8);
        _Block_object_dispose(&v149, 8);
        uint64_t v7 = v108;
        uint64_t v64 = v113;
        unint64_t v61 = v117;
        goto LABEL_157;
      }
LABEL_125:
      uint64_t v207 = 0;
      long long v205 = 0u;
      long long v206 = 0u;
      long long v203 = 0u;
      long long v204 = 0u;
      long long v201 = 0u;
      long long v202 = 0u;
      long long v199 = 0u;
      long long v200 = 0u;
      long long v197 = 0u;
      long long v198 = 0u;
      long long v195 = 0u;
      long long v196 = 0u;
      long long v194 = 0u;
      long long v192 = 0u;
      memset(v193, 0, sizeof(v193));
      *(_OWORD *)int v191 = 0u;
      std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v191);
      uint64_t v7 = v108;
      uint64_t v64 = v113;
      int v66 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v192, (uint64_t)"Nothing found to push for ", 26);
      memset(&aBlock, 0, sizeof(aBlock));
      ctu::cf::assign();
      std::string v154 = aBlock;
      if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v67 = &v154;
      }
      else {
        uint64_t v67 = (std::string *)v154.__r_.__value_.__r.__words[0];
      }
      if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v68 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v68 = v154.__r_.__value_.__l.__size_;
      }
      uint64_t v69 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v66, (uint64_t)v67, v68);
      uint64_t v71 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v69, (uint64_t)" in value ", 10);
      if (cf) {
        uint64_t v72 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
      }
      else {
        uint64_t v72 = 0;
      }
      if (v72)
      {
        ctu::cf_to_xpc((uint64_t *)v135, (ctu *)cf, v70);
        xpc::object::to_string((uint64_t *)&aBlock, (xpc::object *)v135);
      }
      else
      {
        std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
      }
      if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_std::string aBlock = &aBlock;
      }
      else {
        p_std::string aBlock = (std::string *)aBlock.__r_.__value_.__r.__words[0];
      }
      if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type v74 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type v74 = aBlock.__r_.__value_.__l.__size_;
      }
      std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v71, (uint64_t)p_aBlock, v74);
      if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(aBlock.__r_.__value_.__l.__data_);
        if (v72) {
          goto LABEL_147;
        }
      }
      else
      {
        if (!v72) {
          goto LABEL_148;
        }
LABEL_147:
        xpc_release(v135[0]);
      }
LABEL_148:
      if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v154.__r_.__value_.__l.__data_);
      }
      uint64_t v75 = *(void *)(v61 + 88);
      if (v75) {
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v75 + 48))(v75, v191);
      }
      if (v188) {
        std::function<void ()(BOOL)>::operator()((uint64_t)v187, 0);
      }
      uint64_t v116 = *MEMORY[0x263F8C2B8];
      *(void *)int v191 = *MEMORY[0x263F8C2B8];
      uint64_t v76 = *(void *)(MEMORY[0x263F8C2B8] + 72);
      uint64_t v115 = *(void *)(MEMORY[0x263F8C2B8] + 64);
      *(void *)&v191[*(void *)(*(void *)v191 - 24)] = v115;
      uint64_t v114 = v76;
      *(void *)&long long v192 = v76;
      *((void *)&v192 + 1) = MEMORY[0x263F8C318] + 16;
      if (SHIBYTE(v196) < 0) {
        operator delete(*((void **)&v195 + 1));
      }
      std::streambuf::~streambuf();
      std::iostream::~basic_iostream();
      MEMORY[0x223C9A8E0](&v198);
LABEL_157:
      aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v120;
      std::vector<wds::ModifyProfileSettings3GPP::Request>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
      aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v124;
      std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v187);
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&cf);
      if (v64)
      {
        dispatch_group_leave(v64);
        dispatch_release(v64);
        dispatch_retain(v64);
        dispatch_group_enter(v64);
      }
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef(&v118, v107);
      atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
      v185[0] = &unk_26D4C5008;
      v185[1] = v109;
      v185[2] = v7;
      unint64_t v186 = v185;
      long long v158 = 0uLL;
      *(void *)&long long v159 = 0;
      v140[0] = v118;
      if (v118) {
        CFRetain(v118);
      }
      AttachApnCommandDriver::getApnListForType_sync();
      ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(v140);
      long long v149 = 0u;
      long long v150 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v149);
      uint64_t v78 = (const void **)*((void *)&v158 + 1);
      uint64_t v77 = (const void **)v158;
      if ((void)v158 == *((void *)&v158 + 1))
      {
        unint64_t v89 = v61;
        goto LABEL_218;
      }
      char v79 = 0;
      while (2)
      {
        v168[0] = 0;
        ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::SharedRef((const void **)v168, v77);
        uint64_t v207 = 0;
        long long v205 = 0u;
        long long v206 = 0u;
        long long v203 = 0u;
        long long v204 = 0u;
        long long v201 = 0u;
        long long v202 = 0u;
        long long v199 = 0u;
        long long v200 = 0u;
        long long v197 = 0u;
        long long v198 = 0u;
        long long v195 = 0u;
        long long v196 = 0u;
        long long v194 = 0u;
        long long v192 = 0u;
        memset(v193, 0, sizeof(v193));
        *(_OWORD *)int v191 = 0u;
        std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v191);
        uint64_t v81 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v192, (uint64_t)"trying to push fallback APN ", 28);
        if (v168[0]) {
          unint64_t v82 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
        }
        else {
          unint64_t v82 = 0;
        }
        if (v82)
        {
          ctu::cf_to_xpc((uint64_t *)v164, v168[0], v80);
          xpc::object::to_string((uint64_t *)&v154, (xpc::object *)v164);
        }
        else
        {
          std::string::basic_string[abi:ne180100]<0>(&v154, "empty");
        }
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v83 = &v154;
        }
        else {
          uint64_t v83 = (std::string *)v154.__r_.__value_.__r.__words[0];
        }
        if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v84 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v84 = v154.__r_.__value_.__l.__size_;
        }
        std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v81, (uint64_t)v83, v84);
        if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0)
        {
          operator delete(v154.__r_.__value_.__l.__data_);
          if (!v82) {
            goto LABEL_180;
          }
        }
        else if (!v82)
        {
LABEL_180:
          uint64_t v85 = *(void *)(v117 + 88);
          if (v85) {
            (*(void (**)(uint64_t, uint8_t *))(*(void *)v85 + 48))(v85, v191);
          }
          uint64_t v145 = 0;
          uint64_t v144 = 0;
          ctu::cf::dict_adapter::dict_adapter((ctu::cf::dict_adapter *)&v144, v168[0]);
          memset(&v154, 0, sizeof(v154));
          uint64_t v173 = 0;
          xpc_object_t v172 = 0;
          uint64_t v174 = 0;
          ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&__p, "apn");
          ctu::cf::map_adapter::getString();
          MEMORY[0x223C99AF0](&__p);
          if (SHIBYTE(v174) < 0) {
            operator delete(v172);
          }
          std::string::size_type v86 = HIBYTE(v154.__r_.__value_.__r.__words[2]);
          if ((v154.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type v86 = v154.__r_.__value_.__l.__size_;
          }
          if (v86)
          {
            aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
            aBlock.__r_.__value_.__l.__size_ = 1174405120;
            aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZN30Mav20QMIAttachApnCommandDriver41createSetFallbackProfile3GPP2Request_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERN3wds23SetEHRPDFallbackApnList7RequestE_block_invoke;
            uint64_t v183 = &__block_descriptor_tmp_65_6;
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              std::string::__init_copy_ctor_external(&v184, v154.__r_.__value_.__l.__data_, v154.__r_.__value_.__l.__size_);
            }
            else {
              std::string v184 = v154;
            }
            unint64_t v87 = (const void **)*((void *)&v149 + 1);
            if (*((void *)&v149 + 1) != (void)v150)
            {
              while (*((unsigned char *)*v87 + 8) != 1)
              {
                if (++v87 == (const void **)v150) {
                  goto LABEL_197;
                }
              }
            }
            if (v87 == (const void **)v150) {
LABEL_197:
            }
              operator new();
            if (!v88) {
              __cxa_bad_cast();
            }
            ((void (*)(std::string *, char *))aBlock.__r_.__value_.__r.__words[2])(&aBlock, v88 + 16);
            if (SHIBYTE(v184.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v184.__r_.__value_.__l.__data_);
            }
            char v79 = 1;
          }
          if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v154.__r_.__value_.__l.__data_);
          }
          MEMORY[0x223C99B30](&v144);
          *(void *)int v191 = v116;
          *(void *)&v191[*(void *)(v116 - 24)] = v115;
          *(void *)&long long v192 = v114;
          *((void *)&v192 + 1) = MEMORY[0x263F8C318] + 16;
          if (SHIBYTE(v196) < 0) {
            operator delete(*((void **)&v195 + 1));
          }
          std::streambuf::~streambuf();
          std::iostream::~basic_iostream();
          MEMORY[0x223C9A8E0](&v198);
          ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef((const void **)v168);
          if (++v77 == v78)
          {
            uint64_t v7 = v108;
            unint64_t v89 = v117;
            if (v79)
            {
              a1 = v117;
              v154.__r_.__value_.__r.__words[0] = v117 + 96;
              uint64_t v90 = v113;
              __int16 v8 = v109;
              char v11 = v106;
              v154.__r_.__value_.__l.__size_ = QMIServiceMsg::create();
              LODWORD(v154.__r_.__value_.__r.__words[2]) = 25000;
              v156.__r_.__value_.__r.__words[0] = 0;
              uint64_t v155 = 0;
              *(void *)int v191 = MEMORY[0x263EF8330];
              *(void *)&v191[8] = 1174405120;
              *(void *)&long long v192 = ___ZN30Mav20QMIAttachApnCommandDriver21pushFallbackApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENSt3__18functionIFvbEEE_block_invoke;
              *((void *)&v192 + 1) = &__block_descriptor_tmp_7_13;
              v193[0] = v117;
              v193[1] = v113;
              if (v113)
              {
                dispatch_retain(v113);
                if (v193[1]) {
                  dispatch_group_enter((dispatch_group_t)v193[1]);
                }
              }
              std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)&v193[2], (uint64_t)v185);
              aBlock.__r_.__value_.__r.__words[0] = MEMORY[0x263EF8330];
              aBlock.__r_.__value_.__l.__size_ = 0x40000000;
              aBlock.__r_.__value_.__r.__words[2] = (std::string::size_type)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_12;
              uint64_t v183 = &unk_26460C6F8;
              v184.__r_.__value_.__r.__words[0] = (std::string::size_type)v191;
              uint64_t v91 = _Block_copy(&aBlock);
              v156.__r_.__value_.__r.__words[0] = (std::string::size_type)v91;
              if (v154.__r_.__value_.__l.__size_)
              {
                qmi::Client::send();
                uint64_t v91 = (void *)v156.__r_.__value_.__r.__words[0];
              }
              if (v91) {
                _Block_release(v91);
              }
              std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&v193[2]);
              if (v193[1])
              {
                dispatch_group_leave((dispatch_group_t)v193[1]);
                if (v193[1]) {
                  dispatch_release((dispatch_object_t)v193[1]);
                }
              }
              goto LABEL_250;
            }
LABEL_218:
            uint64_t v207 = 0;
            long long v205 = 0u;
            long long v206 = 0u;
            long long v203 = 0u;
            long long v204 = 0u;
            long long v201 = 0u;
            long long v202 = 0u;
            long long v199 = 0u;
            long long v200 = 0u;
            long long v197 = 0u;
            long long v198 = 0u;
            long long v195 = 0u;
            long long v196 = 0u;
            long long v194 = 0u;
            long long v192 = 0u;
            memset(v193, 0, sizeof(v193));
            *(_OWORD *)int v191 = 0u;
            uint64_t v90 = v113;
            std::basic_stringstream<char,std::char_traits<char>,std::allocator<char>>::basic_stringstream[abi:ne180100]((uint64_t)v191);
            int v92 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(&v192, (uint64_t)"No fallback APNs found for ", 27);
            uint64_t v93 = (void *)MEMORY[0x263F8C2B8];
            uint64_t v94 = v92;
            a1 = v89;
            memset(&aBlock, 0, sizeof(aBlock));
            ctu::cf::assign();
            std::string v154 = aBlock;
            if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v95 = &v154;
            }
            else {
              uint64_t v95 = (std::string *)aBlock.__r_.__value_.__r.__words[0];
            }
            if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v96 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v96 = aBlock.__r_.__value_.__l.__size_;
            }
            BOOL v97 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v94, (uint64_t)v95, v96);
            unint64_t v99 = std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v97, (uint64_t)" in value ", 10);
            if (v118) {
              uint64_t v100 = ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::get;
            }
            else {
              uint64_t v100 = 0;
            }
            if (v100)
            {
              ctu::cf_to_xpc((uint64_t *)&v172, (ctu *)v118, v98);
              xpc::object::to_string((uint64_t *)&aBlock, (xpc::object *)&v172);
            }
            else
            {
              std::string::basic_string[abi:ne180100]<0>(&aBlock, "empty");
            }
            if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              uint64_t v101 = &aBlock;
            }
            else {
              uint64_t v101 = (std::string *)aBlock.__r_.__value_.__r.__words[0];
            }
            if ((aBlock.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              std::string::size_type v102 = HIBYTE(aBlock.__r_.__value_.__r.__words[2]);
            }
            else {
              std::string::size_type v102 = aBlock.__r_.__value_.__l.__size_;
            }
            std::__put_character_sequence[abi:ne180100]<char,std::char_traits<char>>(v99, (uint64_t)v101, v102);
            if (SHIBYTE(aBlock.__r_.__value_.__r.__words[2]) < 0)
            {
              operator delete(aBlock.__r_.__value_.__l.__data_);
              if (v100) {
                goto LABEL_240;
              }
            }
            else
            {
              if (!v100) {
                goto LABEL_241;
              }
LABEL_240:
              xpc_release(v172);
            }
LABEL_241:
            if (SHIBYTE(v154.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v154.__r_.__value_.__l.__data_);
            }
            uint64_t v103 = *(void *)(a1 + 88);
            char v11 = v106;
            if (v103) {
              (*(void (**)(uint64_t, uint8_t *))(*(void *)v103 + 48))(v103, v191);
            }
            if (v186) {
              std::function<void ()(BOOL)>::operator()((uint64_t)v185, 0);
            }
            *(void *)int v191 = *v93;
            uint64_t v104 = v93[9];
            *(void *)&v191[*(void *)(*(void *)v191 - 24)] = v93[8];
            *(void *)&long long v192 = v104;
            *((void *)&v192 + 1) = MEMORY[0x263F8C318] + 16;
            if (SHIBYTE(v196) < 0) {
              operator delete(*((void **)&v195 + 1));
            }
            std::streambuf::~streambuf();
            std::iostream::~basic_iostream();
            MEMORY[0x223C9A8E0](&v198);
            __int16 v8 = v109;
LABEL_250:
            qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v149);
            aBlock.__r_.__value_.__r.__words[0] = (std::string::size_type)&v158;
            std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&aBlock);
            std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v185);
            ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&v118);
            if (v90)
            {
              dispatch_group_leave(v90);
              dispatch_release(v90);
            }
LABEL_252:
            *(void *)int v191 = a1;
            std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)&v191[8], (uint64_t)v189);
            std::shared_ptr<AttachApnCommandDriver>::shared_ptr[abi:ne180100]<AttachApnCommandDriver,void>(&aBlock, (void *)(a1 + 8));
            v105 = (std::__shared_weak_count *)aBlock.__r_.__value_.__l.__size_;
            *(_OWORD *)&v193[1] = *(_OWORD *)&aBlock.__r_.__value_.__l.__data_;
            if (aBlock.__r_.__value_.__l.__size_)
            {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(aBlock.__r_.__value_.__l.__size_ + 16), 1uLL, memory_order_relaxed);
              std::__shared_weak_count::__release_shared[abi:ne180100](v105);
            }
            v193[3] = v8;
            *(void *)&long long v194 = v7;
            atomic_fetch_add_explicit((atomic_ullong *volatile)v7 + 1, 1uLL, memory_order_relaxed);
            BYTE8(v194) = v11;
            operator new();
          }
          continue;
        }
        break;
      }
      xpc_release(v164[0]);
      goto LABEL_180;
    }
  }
  if (!v18) {
    goto LABEL_32;
  }
LABEL_31:
  xpc_release(object);
  goto LABEL_32;
}

void sub_222412B14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,NSObject *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,const void *a46)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v46);
  if (STACK[0x4E8])
  {
    dispatch_group_leave((dispatch_group_t)STACK[0x4E8]);
    if (STACK[0x4E8]) {
      dispatch_release((dispatch_object_t)STACK[0x4E8]);
    }
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&STACK[0x290]);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&STACK[0x240]);
  STACK[0x290] = (unint64_t)&STACK[0x2E0];
  std::vector<ctu::cf::CFSharedRef<__CFDictionary const>>::__destroy_vector::operator()[abi:ne180100]((void ***)&STACK[0x290]);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](&STACK[0x440]);
  ctu::SharedRef<__CFDictionary const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFDictionary const>::~SharedRef(&a46);
  if (a30)
  {
    dispatch_group_leave(a30);
    dispatch_release(a30);
    dispatch_group_leave(a30);
    dispatch_release(a30);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&STACK[0x480]);
  _Unwind_Resume(a1);
}

void *Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2::~$_2(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](a1 + 1);
  return a1;
}

void ___ZN30Mav20QMIAttachApnCommandDriver19pushAttachApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEEbRKNSt3__16vectorItNS8_9allocatorItEEEENS8_8optionalIbEENS8_8functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v13 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 48);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    int v5 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 67109378;
      int v10 = v4;
      __int16 v11 = 2080;
      uint64_t v12 = qmi::asString();
      _os_log_impl(&dword_22231A000, v5, OS_LOG_TYPE_DEFAULT, "#E Sending 3GPP APN failed with error %d (%s)", (uint8_t *)&v9, 0x12u);
    }
    *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24) = 1;
  }
  else
  {
    uint64_t v6 = *(void *)(v3 + 88);
    if (v6) {
      (*(void (**)(uint64_t))(*(void *)v6 + 16))(v6);
    }
    uint64_t v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *(_DWORD *)(a1 + 96);
      int v9 = 67109120;
      int v10 = v8;
      _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, "#I 3GPP APN success response received (request order %d)", (uint8_t *)&v9, 8u);
    }
  }
  if (!--*(void *)(*(void *)(*(void *)(a1 + 40) + 8) + 24))
  {
    if (*(void *)(a1 + 88)) {
      std::function<void ()(BOOL)>::operator()(a1 + 64, *(unsigned char *)(*(void *)(*(void *)(a1 + 32) + 8) + 24));
    }
  }
}

uint64_t __copy_helper_block_e8_56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a2 + 56);
  *(void *)(a1 + 56) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    int v5 = *(NSObject **)(a1 + 56);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 64, a2 + 64);
}

void sub_222413334(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 56);
  if (v3)
  {
    dispatch_group_leave(v3);
    int v4 = *(NSObject **)(v1 + 56);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_56c31_ZTSKN8dispatch13group_sessionE64c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 64));
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void ___ZN30Mav20QMIAttachApnCommandDriver21pushFallbackApns_syncEN8dispatch13group_sessionEN3ctu2cf11CFSharedRefIK14__CFDictionaryEENSt3__18functionIFvbEEE_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v14 = *MEMORY[0x263EF8340];
  uint64_t v3 = *(void *)(a1 + 32);
  int v4 = *(_DWORD *)(a2 + 4);
  if (v4)
  {
    int v5 = *(NSObject **)(v3 + 40);
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_9;
    }
    v11[0] = 67109378;
    v11[1] = v4;
    __int16 v12 = 2080;
    uint64_t v13 = qmi::asString();
    uint64_t v6 = "#E Sending fallback APN failed with error %d (%s)";
    uint64_t v7 = v5;
    uint32_t v8 = 18;
    goto LABEL_8;
  }
  uint64_t v9 = *(void *)(v3 + 88);
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
  }
  int v10 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v11[0]) = 0;
    uint64_t v6 = "#I Fallback APN success response received";
    uint64_t v7 = v10;
    uint32_t v8 = 2;
LABEL_8:
    _os_log_impl(&dword_22231A000, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)v11, v8);
  }
LABEL_9:
  if (*(void *)(a1 + 72)) {
    std::function<void ()(BOOL)>::operator()(a1 + 48, v4 != 0);
  }
}

uint64_t __copy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1, uint64_t a2)
{
  int v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4)
  {
    dispatch_retain(v4);
    int v5 = *(NSObject **)(a1 + 40);
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  return std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100](a1 + 48, a2 + 48);
}

void sub_222413540(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(NSObject **)(v1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    int v4 = *(NSObject **)(v1 + 40);
    if (v4) {
      dispatch_release(v4);
    }
  }
  _Unwind_Resume(exception_object);
}

void __destroy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE48c27_ZTSNSt3__18functionIFvbEEE(uint64_t a1)
{
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((void *)(a1 + 48));
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke(uint64_t a1, int *a2)
{
  uint64_t v3 = (ctu::cf::map_adapter *)(a1 + 32);
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v6, "AllowedProtocolMask");
  LODWORD(v3) = ctu::cf::map_adapter::getInt(v3, v6);
  uint64_t result = MEMORY[0x223C99AF0](&v6);
  int v5 = 2 * (v3 == 2);
  if (v3 == 3) {
    int v5 = 3;
  }
  *a2 = v5;
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3(uint64_t result, _DWORD *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_4(uint64_t a1, std::string *a2)
{
  v3[0] = 0;
  v3[1] = 0;
  uint64_t v4 = 0;
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v5, "apn");
  ctu::cf::map_adapter::getString();
  MEMORY[0x223C99AF0](&v5);
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(a2, (std::string::value_type *)v3, (std::string::value_type *)v3, 0);
  if (SHIBYTE(v4) < 0) {
    operator delete(v3[0]);
  }
}

void sub_222413708(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_28(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_31(uint64_t a1, std::string *this)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(std::string::value_type **)(a1 + 32);
    std::string::size_type v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (std::string::value_type *)(a1 + 32);
    std::string::size_type v4 = *(unsigned __int8 *)(a1 + 55);
  }
  std::string::__assign_trivial[abi:ne180100]<unsigned char const*,unsigned char const*>(this, v3, &v3[v4], v4);
}

size_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_36(uint64_t a1, char *a2)
{
  uint64_t v3 = (void *)(a1 + 32);
  int v4 = *(char *)(a1 + 55);
  if (v4 >= 0) {
    size_t v5 = *(unsigned __int8 *)(a1 + 55);
  }
  else {
    size_t v5 = *(void *)(a1 + 40);
  }
  if (v5 == strlen((const char *)*MEMORY[0x263F036A8]))
  {
    uint64_t v6 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v6, (const void *)*MEMORY[0x263F036A8], v5);
    if (!result)
    {
      char v9 = 1;
      goto LABEL_16;
    }
  }
  size_t result = strlen((const char *)*MEMORY[0x263F036A0]);
  if (v5 == result)
  {
    uint32_t v8 = v4 >= 0 ? v3 : (void *)*v3;
    size_t result = memcmp(v8, (const void *)*MEMORY[0x263F036A0], v5);
    if (!result)
    {
      char v9 = 2;
LABEL_16:
      *a2 = v9;
    }
  }
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_41(uint64_t a1, unsigned char *a2)
{
  memset(&__p, 0, sizeof(__p));
  std::string::basic_string[abi:ne180100]<0>(&__p, "Pcs");
  std::string::append(&__p, "cfAddressRequired", 0x11uLL);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    uint64_t p_p = &__p;
  }
  else {
    uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  ctu::cf::MakeCFString::MakeCFString((ctu::cf::MakeCFString *)&v7, (const char *)p_p);
  char Bool = ctu::cf::map_adapter::getBool((ctu::cf::map_adapter *)(a1 + 32), v7);
  MEMORY[0x223C99AF0](&v7);
  *a2 = Bool;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_49(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_2_52(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32) ^ 1;
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_3_55(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

uint64_t ___ZN30Mav20QMIAttachApnCommandDriver43createSetAttachProfileInfo3GPPRequests_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERNS1_IN3wds24SetAttachProfileInfo3GPP7RequestENS8_ISF_EEEEbRKNS1_ItNS8_ItEEEENS0_8optionalIbEE_block_invoke_5(uint64_t result, int *a2)
{
  if (*(unsigned char *)(result + 32)) {
    int v2 = 2;
  }
  else {
    int v2 = 1;
  }
  *a2 = v2;
  return result;
}

void ___ZN30Mav20QMIAttachApnCommandDriver41createSetFallbackProfile3GPP2Request_syncERKNSt3__16vectorIN3ctu2cf11CFSharedRefIK14__CFDictionaryEENS0_9allocatorIS7_EEEERN3wds23SetEHRPDFallbackApnList7RequestE_block_invoke(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 55) < 0)
  {
    uint64_t v3 = *(char **)(a1 + 32);
    unint64_t v4 = *(void *)(a1 + 40);
  }
  else
  {
    uint64_t v3 = (char *)(a1 + 32);
    unint64_t v4 = *(unsigned __int8 *)(a1 + 55);
  }
  uint64_t v5 = a2 + 16;
  unint64_t v6 = *(void *)(a2 + 16);
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >= v6)
  {
    unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *(void *)a2) >> 3);
    if (v9 + 1 > 0xAAAAAAAAAAAAAAALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - *(void *)a2) >> 3);
    uint64_t v11 = 2 * v10;
    if (2 * v10 <= v9 + 1) {
      uint64_t v11 = v9 + 1;
    }
    if (v10 >= 0x555555555555555) {
      unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v12 = v11;
    }
    __v.__end_cap_.__value_ = (std::allocator<std::string> *)(a2 + 16);
    if (v12) {
      uint64_t v13 = (std::string *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::string>>(v5, v12);
    }
    else {
      uint64_t v13 = 0;
    }
    __v.__first_ = v13;
    __v.__begin_ = v13 + v9;
    __v.__end_cap_.__value_ = &v13[v12];
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(__v.__begin_->__r_.__value_.__r.__words, v3, &v3[v4], v4);
    __v.__end_ = __v.__begin_ + 1;
    std::vector<std::string>::__swap_out_circular_buffer((std::vector<std::string> *)a2, &__v);
    unint64_t v8 = *(void *)(a2 + 8);
    std::__split_buffer<std::string>::~__split_buffer(&__v);
  }
  else
  {
    std::string::__init_with_size[abi:ne180100]<std::__wrap_iter<unsigned char const*>,std::__wrap_iter<unsigned char const*>>(*(void **)(a2 + 8), v3, &v3[v4], v4);
    unint64_t v8 = v7 + 24;
    *(void *)(a2 + 8) = v7 + 24;
  }
  *(void *)(a2 + 8) = v8;
}

void sub_222413AC0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__split_buffer<std::string> *a10)
{
  *(void *)(v10 + 8) = v11;
  _Unwind_Resume(exception_object);
}

void __copy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1, uint64_t a2)
{
  int v2 = (std::string *)(a1 + 32);
  if (*(char *)(a2 + 55) < 0)
  {
    std::string::__init_copy_ctor_external(v2, *(const std::string::value_type **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v3 = *(_OWORD *)(a2 + 32);
    v2->__r_.__value_.__r.__words[2] = *(void *)(a2 + 48);
    *(_OWORD *)&v2->__r_.__value_.__l.__data_ = v3;
  }
}

void __destroy_helper_block_e8_32c67_ZTSKNSt3__112basic_stringIcNS_11char_traitsIcEENS_9allocatorIcEEEE(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
}

void std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<Mav20QMIAttachApnCommandDriver *,std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver *)#1},std::allocator<Mav20QMIAttachApnCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<Mav20QMIAttachApnCommandDriver> ctu::SharedSynchronizable<AttachApnCommandDriver>::make_shared_ptr<Mav20QMIAttachApnCommandDriver>(Mav20QMIAttachApnCommandDriver*)::{lambda(Mav20QMIAttachApnCommandDriver*)#1}::operator() const(Mav20QMIAttachApnCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::SubscriptionType>(uint64_t a1, int a2)
{
  int v2 = *(const void ***)(a1 + 8);
  long long v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::SubscriptionType>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 12;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::SubscriptionType>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::getSize()
{
  return tlv::size<wds::tlv::PktDataHandle>();
}

_DWORD **qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  unint64_t v4 = (_DWORD *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  size_t result = tlv::writeV<wds::tlv::PktDataHandle>((_DWORD **)a2, (_DWORD *)(a1 + 12));
  unint64_t v7 = (char *)(*a2 - v5);
  *(unsigned char *)unint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::SubscriptionType>::clone()
{
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C4F28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<BOOL>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C4F28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C4F78;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C4F78;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t a1)
{
  size_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *size_t result = &unk_26D4C4F78;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D4C4F78;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::operator()(uint64_t result, unsigned char *a2)
{
  if (*a2) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_0>,void ()(BOOL)>::target_type()
{
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C5008;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  return a1;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::~__func(void *a1)
{
  *a1 = &unk_26D4C5008;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::__clone(uint64_t a1)
{
  size_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *size_t result = &unk_26D4C5008;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::__clone(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = &unk_26D4C5008;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::destroy(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::destroy_deallocate(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  operator delete(__p);
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::operator()(uint64_t result, unsigned char *a2)
{
  if (*a2) {
    **(unsigned char **)(result + 8) = 1;
  }
  return result;
}

uint64_t std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1,std::allocator<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_1>,void ()(BOOL)>::target_type()
{
}

void *std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)*a1;
  *a1 = 0;
  if (v2)
  {
    uint64_t v3 = (std::__shared_weak_count *)v2[8];
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v2[6];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v2 + 1);
    MEMORY[0x223C9A950](v2, 0x1030C400424FB1CLL);
  }
  return a1;
}

void *dispatch::detail::group_notify<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>(dispatch_group_s *,dispatch_queue_s *,Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2 &&,std::integral_constant<BOOL,false>)::{lambda(void *)#1}::__invoke(uint64_t *a1)
{
  void v11[4] = *MEMORY[0x263EF8340];
  uint64_t v10 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(void *)(v3 + 88);
        if (v6)
        {
          int v7 = *(unsigned __int8 *)a1[7];
          int v8 = *((unsigned __int8 *)a1 + 72);
          std::__function::__value_func<void ()(void)>::__value_func[abi:ne180100]((uint64_t)v11, (uint64_t)(a1 + 1));
          (*(void (**)(uint64_t, BOOL, void, BOOL, void *))(*(void *)v6 + 24))(v6, v7 != 0, 0, v8 != 0, v11);
          std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](v11);
        }
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v5);
    }
  }
  return std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&v10);
}

void sub_222414490(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  std::__function::__value_func<void ()(void)>::~__value_func[abi:ne180100](&a10);
  std::__shared_weak_count::__release_shared[abi:ne180100](v10);
  std::unique_ptr<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2,std::default_delete<Mav20QMIAttachApnCommandDriver::performPushSettingsToBB_sync(std::optional<ctu::cf::CFSharedRef<__CFDictionary const>>,AttachApnCommandDriver::AttachApnPushConfig const&)::$_2>>::~unique_ptr[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::PcoContainerIds>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  uint64_t v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::PcoContainerIds>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 10;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::PcoContainerIds>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::getSize()
{
  return tlv::size<wds::tlv::PcoContainerIds>();
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::write(uint64_t a1, __n128 **a2)
{
  unsigned __int8 v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2)->n128_i64 + 3;
  *a2 = (__n128 *)v5;
  tlv::writeV<wds::tlv::PcoContainerIds>(a2, (__n128 *)(a1 + 10));
  uint64_t v6 = (char *)*a2 - v5;
  v4->n128_u8[0] = v3;
  *(unsigned __int16 *)((char *)v4->n128_u16 + 1) = (unsigned __int16)v6;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::PcoContainerIds>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::RequestMSISDNUsingPco>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  unsigned __int8 v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::RequestMSISDNUsingPco>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 9;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::RequestMSISDNUsingPco>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  size_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::RequestMSISDNUsingPco>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<wds::tlv::ApnTypeMask>(uint64_t a1, int a2)
{
  uint64_t v2 = *(const void ***)(a1 + 8);
  char v3 = *(const void ***)(a1 + 16);
  if (v2 != v3)
  {
    while (*((unsigned __int8 *)*v2 + 8) != a2)
    {
      if (++v2 == v3) {
        goto LABEL_8;
      }
    }
  }
  if (v2 == v3)
  {
LABEL_8:
    qmi::MutableMessageBase::createTLV<wds::tlv::ApnTypeMask>();
  }
  if (!v4) {
    __cxa_bad_cast();
  }
  return v4 + 16;
}

void qmi::MutableMessageBase::createTLV<wds::tlv::ApnTypeMask>()
{
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::getSize()
{
  return tlv::size<wds::tlv::ProfileTypeMask>();
}

void **qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (void *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  size_t result = tlv::writeV<wds::tlv::ProfileTypeMask>((void **)a2, (void *)(a1 + 16));
  int v7 = (char *)(*a2 - v5);
  *(unsigned char *)uint64_t v4 = v3;
  *(_WORD *)((char *)v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::ApnTypeMask>::clone()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C5190;
  char v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4C5190;
  char v3 = (void **)(a1 + 16);
  std::vector<std::string>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::getSize(uint64_t a1)
{
  return tlv::size<wds::tlv::FallbackApnList>((uint64_t *)(a1 + 16));
}

char *qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::write(uint64_t a1, char **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = *a2;
  uint64_t v5 = (uint64_t)(*a2 + 3);
  *a2 = (char *)v5;
  size_t result = tlv::writeV<wds::tlv::FallbackApnList>(a2, (_DWORD *)(a1 + 16));
  int v7 = &(*a2)[-v5];
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<wds::tlv::FallbackApnList>::clone()
{
}

void sub_222414EB4(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void EurekaCallFormatter::~EurekaCallFormatter(EurekaCallFormatter *this)
{
  *(void *)this = &unk_26D4C51C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 5);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  char v3 = (std::__shared_weak_count *)*((void *)this + 3);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  MEMORY[0x223C99A30]((char *)this + 8);
}

void EurekaCallFormatter::createAnswerIncomingCallReq(uint64_t a1)
{
  uint64_t v3 = *MEMORY[0x263EF8340];
  uint64_t v1 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Going to answer the incoming call!", buf, 2u);
  }
  operator new();
}

void sub_22241517C(_Unwind_Exception *a1)
{
  std::__function::__value_func<void ()(qmi::ResponseBase const&)>::~__value_func[abi:ne180100]((void *)(v5 - 104));
  CallInfo::~CallInfo(v4);
  EurekaVoiceRequestMessage::~EurekaVoiceRequestMessage(v1);
  CallInfo::~CallInfo(v3);
  std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  _Unwind_Resume(a1);
}

uint64_t ___ZN19EurekaCallFormatter27createAnswerIncomingCallReqE8CallInfo_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(result + 124);
  return result;
}

uint64_t EurekaCallFormatter::shouldValidateCallCollisionScenario(EurekaCallFormatter *this)
{
  return 0;
}

void std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

qmi::MutableMessageBase *std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::__on_zero_shared(uint64_t a1)
{
  size_t result = *(qmi::MutableMessageBase **)(a1 + 24);
  if (result)
  {
    qmi::MutableMessageBase::~MutableMessageBase(result);
    JUMPOUT(0x223C9A950);
  }
  return result;
}

uint64_t std::__shared_ptr_pointer<vs::AnswerCall::Request *,std::shared_ptr<vs::AnswerCall::Request>::__shared_ptr_default_delete<vs::AnswerCall::Request,vs::AnswerCall::Request>,std::allocator<vs::AnswerCall::Request>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C5358;
  CallInfo::~CallInfo((void **)(a1 + 16));
  return a1;
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::~__func(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C5358;
  CallInfo::~CallInfo((void **)(a1 + 16));

  JUMPOUT(0x223C9A950);
}

void *std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1)
{
  uint64_t v2 = operator new(0x1A8uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = &unk_26D4C5358;
  v2[1] = v3;
  CallInfo::CallInfo((CallInfo *)(v2 + 2), (const CallInfo *)(a1 + 16));
  return v2;
}

void sub_2224153FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::__clone(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = &unk_26D4C5358;
  a2[1] = v2;
  CallInfo::CallInfo((CallInfo *)(a2 + 2), (const CallInfo *)(a1 + 16));
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy(uint64_t a1)
{
}

void std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::destroy_deallocate(void **a1)
{
  CallInfo::~CallInfo(a1 + 2);

  operator delete(a1);
}

const void **std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::operator()(const void **result, uint64_t a2)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v2 = result;
    uint64_t v3 = result[1];
    uint64_t v4 = *((void *)v3 + 1);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v4, OS_LOG_TYPE_ERROR, "Got error when trying to answer incoming call. Error: %s", __p, 0xCu);
    }
    uint64_t v5 = *((void *)v3 + 2);
    ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::SharedRef(&v6, v2 + 2);
    printUuid();
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 80))(v5, __p);
    if (v8 < 0) {
      operator delete(*(void **)__p);
    }
    return ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&v6);
  }
  return result;
}

void sub_2224155A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  ctu::SharedRef<__CFUUID const,ctu::cf::cfretain_functor,ctu::cf::cfrelease_functor,__CFUUID const>::~SharedRef(&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0,std::allocator<EurekaCallFormatter::createAnswerIncomingCallReq(CallInfo)::$_0>,void ()(qmi::ResponseBase const&)>::target_type()
{
}

void QMIEnhancedLQMCommandDriver::create()
{
}

void sub_2224156E0(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C40E90A8BEFLL);
  }
  _Unwind_Resume(exception_object);
}

void QMIEnhancedLQMCommandDriver::~QMIEnhancedLQMCommandDriver(QMIEnhancedLQMCommandDriver *this)
{
  *(void *)this = &unk_26D4C5400;
  qmi::Client::~Client((QMIEnhancedLQMCommandDriver *)((char *)this + 96));
  uint64_t v2 = *((void *)this + 11);
  *((void *)this + 11) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }

  EnhancedLQMCommandDriver::~EnhancedLQMCommandDriver(this);
}

{
  uint64_t vars8;

  QMIEnhancedLQMCommandDriver::~QMIEnhancedLQMCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMIEnhancedLQMCommandDriver::bootstrap(uint64_t a1, dispatch_object_t *a2, uint64_t a3)
{
  uint64_t v5 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v5);
  }
  uint64_t v6 = *(void *)(a3 + 8);
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIEnhancedLQMCommandDriver::start(uint64_t a1, dispatch_object_t *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void QMIEnhancedLQMCommandDriver::shutdown(uint64_t a1, dispatch_object_t *a2)
{
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t QMIEnhancedLQMCommandDriver::QMIEnhancedLQMCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  v8[8] = *MEMORY[0x263EF8340];
  xpc_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  EnhancedLQMCommandDriver::EnhancedLQMCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  v7[0] = &unk_26D4C05F8;
  v7[3] = v7;
  uint64_t v4 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v8, (uint64_t)v7);
  *(void *)(a1 + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v8);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v7);
  *(void *)a1 = &unk_26D4C5400;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  return a1;
}

void sub_222415CF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v3, 0x10A1C40FF1576FELL);
  uint64_t v5 = *((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  EnhancedLQMCommandDriver::~EnhancedLQMCommandDriver(v2);
  _Unwind_Resume(a1);
}

void sub_222415D7C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x222415D74);
}

void ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke_2(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I Entering low power", v3, 2u);
  }
  QMIEnhancedLQMCommandDriver::unregister_sync(v1, 3);
}

void QMIEnhancedLQMCommandDriver::unregister_sync(uint64_t a1, uint64_t a2)
{
  if (a2 == 3)
  {
    subscriber::makeSimSlotRange();
    uint64_t v3 = v7;
    if (v7 != v8)
    {
      while ((v9(*v3) & 1) == 0)
      {
        if (++v3 == v8)
        {
          uint64_t v3 = v8;
          break;
        }
      }
LABEL_6:
      while (v3 != v8)
      {
        uint64_t v4 = v3 + 1;
        QMIEnhancedLQMCommandDriver::unregister_sync(a1, *v3);
        uint64_t v3 = v8;
        if (v4 != v8)
        {
          uint64_t v3 = v4;
          while ((v9(*v3) & 1) == 0)
          {
            if (++v3 == v8)
            {
              uint64_t v3 = v8;
              goto LABEL_6;
            }
          }
        }
      }
    }
  }
  else
  {
    v6[0] = 0;
    v6[1] = 0;
    uint64_t v5 = v6;
    (*(void (**)(uint64_t, uint64_t, void ***))(*(void *)a1 + 56))(a1, a2, &v5);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v6[0]);
  }
}

void sub_222415F34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void QMIEnhancedLQMCommandDriver::querySupportedIndications(uint64_t a1, uint64_t a2)
{
  v10[4] = *MEMORY[0x263EF8340];
  memset(v7, 0, sizeof(v7));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v7);
  *qmi::MutableMessageBase::getTLV<elqm::tlv::Query>((uint64_t)v7) = 17;
  uint64_t v5 = QMIServiceMsg::create();
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 1174405120;
  void v9[2] = ___ZN27QMIEnhancedLQMCommandDriver25querySupportedIndicationsENSt3__18functionIFvNS0_3setI21EnhancedLQMIndicationNS0_4lessIS3_EENS0_9allocatorIS3_EEEEEEE_block_invoke_2;
  void v9[3] = &__block_descriptor_tmp_8_16;
  void v9[4] = a1;
  std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::__value_func[abi:ne180100]((uint64_t)v10, a2);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460C7E8;
  aBlock[4] = v9;
  uint64_t v4 = _Block_copy(aBlock);
  uint64_t v6 = v4;
  if (v5)
  {
    qmi::Client::send();
    uint64_t v4 = v6;
  }
  if (v4) {
    _Block_release(v4);
  }
  std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::~__value_func[abi:ne180100](v10);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v7);
}

void sub_2224160C8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void sub_222416100()
{
}

void sub_222416108(void *a1, int a2)
{
  if (a2) {
    __clang_call_terminate(a1);
  }
  JUMPOUT(0x2224160F8);
}

void ___ZN27QMIEnhancedLQMCommandDriver25querySupportedIndicationsENSt3__18functionIFvNS0_3setI21EnhancedLQMIndicationNS0_4lessIS3_EENS0_9allocatorIS3_EEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *this)
{
  if (*((_DWORD *)this + 1))
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 32) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N Unable to query baseband for supported indications", buf, 2u);
    }
    v43[0] = 0;
    v43[1] = 0;
    std::string::size_type v42 = v43;
    uint64_t v4 = *(void *)(a1 + 64);
    if (!v4) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void **))(*(void *)v4 + 48))(v4, &v42);
    uint64_t v5 = (void *)v43[0];
  }
  else
  {
    std::string::size_type v40 = 0;
    uint64_t v41 = 0;
    *(void *)std::string buf = &v40;
    uint64_t TlvValue = qmi::MessageBase::findTlvValue(this);
    uint64_t v9 = TlvValue;
    if (TlvValue)
    {
      int v10 = v8;
      uint64_t v44 = TlvValue;
      char v11 = tlv::parseV<elqm::tlv::LinkStateSupported>((unint64_t *)&v44, v8);
      if (v44 && v11)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 16, 16);
      }
      else if (!v44)
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 32, v9, v10);
      }
    }
    uint64_t v12 = qmi::MessageBase::findTlvValue(this);
    uint64_t v14 = v12;
    if (v12)
    {
      int v15 = v13;
      uint64_t v44 = v12;
      char v16 = tlv::parseV<elqm::tlv::LinkFingerprintSupported>((unint64_t *)&v44, v13);
      if (v44 && v16)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 17, 17);
      }
      else if (!v44)
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 33, v14, v15);
      }
    }
    uint64_t v17 = qmi::MessageBase::findTlvValue(this);
    uint64_t v19 = v17;
    if (v17)
    {
      int v20 = v18;
      uint64_t v44 = v17;
      char v21 = tlv::parseV<elqm::tlv::TrafficClassSupported>((unint64_t *)&v44, v18);
      if (v44 && v21)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 18, 18);
      }
      else if (!v44)
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 34, v19, v20);
      }
    }
    uint64_t v22 = qmi::MessageBase::findTlvValue(this);
    uint64_t v24 = v22;
    if (v22)
    {
      int v25 = v23;
      uint64_t v44 = v22;
      char v26 = tlv::parseV<elqm::tlv::DataTransferTimeSupported>((unint64_t *)&v44, v23);
      if (v44 && v26)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 19, 19);
      }
      else if (!v44)
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 35, v24, v25);
      }
    }
    uint64_t v27 = qmi::MessageBase::findTlvValue(this);
    uint64_t v29 = v27;
    if (v27)
    {
      int v30 = v28;
      uint64_t v44 = v27;
      char v31 = tlv::parseV<elqm::tlv::LinkPowerCostSupported>((unint64_t *)&v44, v28);
      if (v44 && v31)
      {
        std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 21, 21);
      }
      else if (!v44)
      {
        ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 36, v29, v30);
      }
    }
    char v32 = (capabilities::ct *)qmi::MessageBase::findTlvValue(this);
    long long v34 = v32;
    if (v32)
    {
      int v35 = v33;
      uint64_t v44 = (uint64_t)v32;
      char v32 = (capabilities::ct *)tlv::parseV<elqm::tlv::DataStallSupported>((unint64_t *)&v44, v33);
      if (v44 && (_BYTE)v32)
      {
        char v32 = (capabilities::ct *)std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 22, 22);
      }
      else if (!v44)
      {
        char v32 = (capabilities::ct *)((uint64_t (*)(void, uint64_t, capabilities::ct *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 37, v34, v35);
      }
    }
    if (capabilities::ct::supports5G(v32))
    {
      std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 23, 23);
      std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>((uint64_t *)buf, 24, 24);
    }
    uint64_t v37 = *(void ***)buf;
    v38[0] = v40;
    v38[1] = v41;
    if (v41)
    {
      _OWORD v40[2] = v38;
      *(void *)std::string buf = &v40;
      std::string::size_type v40 = 0;
      uint64_t v41 = 0;
    }
    else
    {
      uint64_t v37 = v38;
    }
    uint64_t v36 = *(void *)(a1 + 64);
    if (!v36) {
      std::__throw_bad_function_call[abi:ne180100]();
    }
    (*(void (**)(uint64_t, void ***))(*(void *)v36 + 48))(v36, &v37);
    std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v38[0]);
    uint64_t v5 = v40;
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v5);
}

void sub_222416524(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
}

void sub_222416568()
{
}

uint64_t __copy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_3setI21EnhancedLQMIndicationNS_4lessIS2_EENS_9allocatorIS2_EEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::__value_func[abi:ne180100](a1 + 40, a2 + 40);
}

void *__destroy_helper_block_e8_40c92_ZTSNSt3__18functionIFvNS_3setI21EnhancedLQMIndicationNS_4lessIS2_EENS_9allocatorIS2_EEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::~__value_func[abi:ne180100]((void *)(a1 + 40));
}

void QMIEnhancedLQMCommandDriver::queryMaxThroughput(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v12[4] = *MEMORY[0x263EF8340];
  memset(v9, 0, sizeof(v9));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v9);
  uint64_t v4 = (capabilities::ct *)qmi::MutableMessageBase::getTLV<elqm::tlv::Query>((uint64_t)v9);
  *(unsigned char *)uint64_t v4 = 16;
  if (capabilities::ct::supportsGemini(v4))
  {
    uint64_t v5 = qmi::MutableMessageBase::getTLV<elqm::tlv::SubscriptionId>((uint64_t)v9);
    *uint64_t v5 = subscriber::simSlotAsInstance();
  }
  uint64_t v7 = QMIServiceMsg::create();
  v11[0] = MEMORY[0x263EF8330];
  v11[1] = 1174405120;
  _DWORD v11[2] = ___ZN27QMIEnhancedLQMCommandDriver18queryMaxThroughputEN10subscriber7SimSlotENSt3__18functionIFviNS2_6vectorIhNS2_9allocatorIhEEEEEEE_block_invoke_2;
  void v11[3] = &__block_descriptor_tmp_12_16;
  std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::__value_func[abi:ne180100]((uint64_t)v12, a3);
  aBlock[0] = MEMORY[0x263EF8330];
  aBlock[1] = 0x40000000;
  aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  aBlock[3] = &unk_26460C7E8;
  aBlock[4] = v11;
  uint64_t v6 = _Block_copy(aBlock);
  int v8 = v6;
  if (v7)
  {
    qmi::Client::send();
    uint64_t v6 = v8;
  }
  if (v6) {
    _Block_release(v6);
  }
  std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::~__value_func[abi:ne180100](v12);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v9);
}

void sub_222416728(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::~__value_func[abi:ne180100](v2);
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)va);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)va1);
  _Unwind_Resume(a1);
}

void ___ZN27QMIEnhancedLQMCommandDriver18queryMaxThroughputEN10subscriber7SimSlotENSt3__18functionIFviNS2_6vectorIhNS2_9allocatorIhEEEEEEE_block_invoke_2(uint64_t a1, qmi::MessageBase *this)
{
  char v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  uint64_t TlvValue = (char *)qmi::MessageBase::findTlvValue(this);
  uint64_t v6 = TlvValue;
  if (TlvValue)
  {
    int v7 = v5;
    uint64_t v21 = 0;
    uint64_t v22 = TlvValue;
    std::string __p = 0;
    int v20 = 0;
    tlv::parseV<elqm::tlv::EstimatedThroughput>(&v22, v5, &__p);
    uint64_t v8 = v22;
    uint64_t v9 = __p;
    if (v22)
    {
      int v10 = v20;
      int v23 = &v16;
      if (__p != v20)
      {
        do
          std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100]((unint64_t **)&v23, v9++);
        while (v9 != v10);
        uint64_t v9 = __p;
      }
    }
    if (v9)
    {
      int v20 = v9;
      operator delete(v9);
    }
    if (!v8) {
      ((void (*)(void, uint64_t, char *, void))*MEMORY[0x263F8BD78])(*(unsigned __int16 *)this, 16, v6, v7);
    }
  }
  int v11 = *((_DWORD *)this + 1);
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  int v13 = 0;
  std::vector<unsigned char>::__init_with_size[abi:ne180100]<unsigned char *,unsigned char *>(&v13, v16, (uint64_t)v17, v17 - (unsigned char *)v16);
  uint64_t v12 = *(void *)(a1 + 56);
  LODWORD(__p) = v11;
  if (!v12) {
    std::__throw_bad_function_call[abi:ne180100]();
  }
  (*(void (**)(uint64_t, void **, void **))(*(void *)v12 + 48))(v12, &__p, &v13);
  if (v13)
  {
    uint64_t v14 = v13;
    operator delete(v13);
  }
  if (v16)
  {
    uint64_t v17 = v16;
    operator delete(v16);
  }
}

void sub_2224168E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t __copy_helper_block_e8_32c58_ZTSNSt3__18functionIFviNS_6vectorIhNS_9allocatorIhEEEEEEE(uint64_t a1, uint64_t a2)
{
  return std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::__value_func[abi:ne180100](a1 + 32, a2 + 32);
}

void *__destroy_helper_block_e8_32c58_ZTSNSt3__18functionIFviNS_6vectorIhNS_9allocatorIhEEEEEEE(uint64_t a1)
{
  return std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::~__value_func[abi:ne180100]((void *)(a1 + 32));
}

void QMIEnhancedLQMCommandDriver::registrationRequest(uint64_t a1, uint64_t a2, void *a3)
{
  long long v57 = 0u;
  long long v58 = 0u;
  uint64_t v4 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v57);
  if (capabilities::ct::supportsGemini(v4))
  {
    int v5 = qmi::MutableMessageBase::getTLV<elqm::tlv::SubscriptionId>((uint64_t)&v57);
    *int v5 = subscriber::simSlotAsInstance();
  }
  uint64_t v6 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v6 + 8) != 16)
    {
      if (++v6 == (const void **)v58) {
        goto LABEL_10;
      }
    }
  }
  if (v6 == (const void **)v58) {
LABEL_10:
  }
    operator new();
  if (!v7) {
    __cxa_bad_cast();
  }
  for (uint64_t i = (uint64_t *)a3[1]; i; uint64_t i = (uint64_t *)*i)
  {
    int v9 = *((_DWORD *)i + 7);
    if (v9 <= 16)
    {
      if (v9 == 16)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  v7[9] = (_BYTE)i;
  v53[0] = MEMORY[0x263EF8330];
  v53[1] = 1174405120;
  CFBooleanRef v54 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke;
  int v55 = &__block_descriptor_tmp_14_8;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v56, a3);
  int v10 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v10 + 8) != 17)
    {
      if (++v10 == (const void **)v58) {
        goto LABEL_25;
      }
    }
  }
  if (v10 == (const void **)v58) {
LABEL_25:
  }
    operator new();
  if (!v11) {
    __cxa_bad_cast();
  }
  v54((uint64_t)v53, v11 + 9);
  v49[0] = MEMORY[0x263EF8330];
  v49[1] = 1174405120;
  long long v50 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_15;
  uint64_t v51 = &__block_descriptor_tmp_19_13;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v52, a3);
  uint64_t v12 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v12 + 8) != 18)
    {
      if (++v12 == (const void **)v58) {
        goto LABEL_33;
      }
    }
  }
  if (v12 == (const void **)v58) {
LABEL_33:
  }
    operator new();
  if (!v13) {
    __cxa_bad_cast();
  }
  v50((uint64_t)v49, v13 + 9);
  v45[0] = MEMORY[0x263EF8330];
  v45[1] = 1174405120;
  long long v46 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_20;
  CFTypeID v47 = &__block_descriptor_tmp_24_12;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v48, a3);
  uint64_t v14 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v14 + 8) != 19)
    {
      if (++v14 == (const void **)v58) {
        goto LABEL_41;
      }
    }
  }
  if (v14 == (const void **)v58) {
LABEL_41:
  }
    operator new();
  if (!v15) {
    __cxa_bad_cast();
  }
  v46((uint64_t)v45, v15 + 9);
  v41[0] = MEMORY[0x263EF8330];
  v41[1] = 1174405120;
  std::string::size_type v42 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_25;
  uint64_t v43 = &__block_descriptor_tmp_29_6;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v44, a3);
  char v16 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v16 + 8) != 20)
    {
      if (++v16 == (const void **)v58) {
        goto LABEL_49;
      }
    }
  }
  if (v16 == (const void **)v58) {
LABEL_49:
  }
    operator new();
  if (!v17) {
    __cxa_bad_cast();
  }
  v42((uint64_t)v41, v17 + 9);
  v37[0] = MEMORY[0x263EF8330];
  v37[1] = 1174405120;
  uint64_t v38 = ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_30;
  uint64_t v39 = &__block_descriptor_tmp_34_10;
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)v40, a3);
  uint64_t v18 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v18 + 8) != 21)
    {
      if (++v18 == (const void **)v58) {
        goto LABEL_57;
      }
    }
  }
  if (v18 == (const void **)v58) {
LABEL_57:
  }
    operator new();
  if (!v19) {
    __cxa_bad_cast();
  }
  int v20 = (capabilities::ct *)v38((uint64_t)v37, v19 + 9);
  if (!capabilities::ct::supports5G(v20)) {
    goto LABEL_94;
  }
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)&aBlock, a3);
  uint64_t v22 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v22 + 8) != 22)
    {
      if (++v22 == (const void **)v58) {
        goto LABEL_66;
      }
    }
  }
  if (v22 == (const void **)v58) {
LABEL_66:
  }
    operator new();
  if (!v23) {
    __cxa_bad_cast();
  }
  uint64_t v24 = v23 + 9;
  int v25 = (void *)v60;
  if (!v60)
  {
    LOBYTE(v26) = 0;
    goto LABEL_76;
  }
  uint64_t v26 = v60;
  while (1)
  {
    int v27 = *(_DWORD *)(v26 + 28);
    if (v27 <= 23) {
      break;
    }
LABEL_72:
    uint64_t v26 = *(void *)v26;
    if (!v26) {
      goto LABEL_76;
    }
  }
  if (v27 != 23)
  {
    v26 += 8;
    goto LABEL_72;
  }
  LOBYTE(v26) = 1;
LABEL_76:
  unsigned char *v24 = v26;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v25);
  std::set<EnhancedLQMIndication>::set[abi:ne180100]((uint64_t)&aBlock, a3);
  int v28 = (const void **)*((void *)&v57 + 1);
  if (*((void *)&v57 + 1) != (void)v58)
  {
    while (*((unsigned char *)*v28 + 8) != 23)
    {
      if (++v28 == (const void **)v58) {
        goto LABEL_83;
      }
    }
  }
  if (v28 == (const void **)v58) {
LABEL_83:
  }
    operator new();
  if (!v29) {
    __cxa_bad_cast();
  }
  int v30 = v29 + 9;
  char v31 = (void *)v60;
  if (!v60)
  {
    LOBYTE(v3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    goto LABEL_93;
  }
  uint64_t v32 = v60;
  while (2)
  {
    int v33 = *(_DWORD *)(v32 + 28);
    if (v33 > 24)
    {
LABEL_89:
      uint64_t v32 = *(void *)v32;
      if (!v32) {
        goto LABEL_93;
      }
      continue;
    }
    break;
  }
  if (v33 != 24)
  {
    v32 += 8;
    goto LABEL_89;
  }
  LOBYTE(v3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 1;
LABEL_93:
  *int v30 = v32;
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v31);
LABEL_94:
  uint64_t v35 = QMIServiceMsg::create();
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v60 = 0x40000000;
  unint64_t v61 = ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm10BBRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke;
  int v62 = &unk_26460C810;
  uint64_t v63 = &__block_literal_global_38;
  long long v34 = _Block_copy(&aBlock);
  uint64_t v36 = v34;
  if (v35)
  {
    qmi::Client::send();
    long long v34 = v36;
  }
  if (v34) {
    _Block_release(v34);
  }
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v40[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v44[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v48[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v52[1]);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v56[1]);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v57);
}

void sub_222417934(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a19);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a26);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a33);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(a40);
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(*(void **)(v40 - 176));
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v40 - 160));
  _Unwind_Resume(a1);
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  for (uint64_t i = *(uint64_t **)(result + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v3 = *((_DWORD *)i + 7);
    if (v3 <= 17)
    {
      if (v3 == 17)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t __copy_helper_block_e8_32c74_ZTSNSt3__13setI21EnhancedLQMIndicationNS_4lessIS1_EENS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  return std::set<EnhancedLQMIndication>::set[abi:ne180100](a1 + 32, (void *)(a2 + 32));
}

void __destroy_helper_block_e8_32c74_ZTSNSt3__13setI21EnhancedLQMIndicationNS_4lessIS1_EENS_9allocatorIS1_EEEE(uint64_t a1)
{
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_15(uint64_t result, unsigned char *a2)
{
  for (uint64_t i = *(uint64_t **)(result + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v3 = *((_DWORD *)i + 7);
    if (v3 <= 18)
    {
      if (v3 == 18)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_20(uint64_t result, unsigned char *a2)
{
  for (uint64_t i = *(uint64_t **)(result + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v3 = *((_DWORD *)i + 7);
    if (v3 <= 19)
    {
      if (v3 == 19)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_25(uint64_t result, unsigned char *a2)
{
  for (uint64_t i = *(uint64_t **)(result + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v3 = *((_DWORD *)i + 7);
    if (v3 <= 21)
    {
      if (v3 == 21)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

uint64_t ___ZN27QMIEnhancedLQMCommandDriver19registrationRequestEN10subscriber7SimSlotENSt3__13setI21EnhancedLQMIndicationNS2_4lessIS4_EENS2_9allocatorIS4_EEEE_block_invoke_30(uint64_t result, unsigned char *a2)
{
  for (uint64_t i = *(uint64_t **)(result + 40); i; uint64_t i = (uint64_t *)*i)
  {
    int v3 = *((_DWORD *)i + 7);
    if (v3 <= 22)
    {
      if (v3 == 22)
      {
        LOBYTE(i) = 1;
        break;
      }
      ++i;
    }
  }
  *a2 = (_BYTE)i;
  return result;
}

void QMIEnhancedLQMCommandDriver::unregistrationRequest(QMIEnhancedLQMCommandDriver *this)
{
}

CFIndex ___ZN27QMIEnhancedLQMCommandDriver15sendTrafficInfoEN10subscriber7SimSlotEtN3ctu2cf11CFSharedRefIK8__CFDataEE_block_invoke_41(uint64_t a1, unint64_t *a2)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  CFIndex result = CFDataGetLength(*(CFDataRef *)(a1 + 32));
  int v7 = a2;
  if (result)
  {
    CFIndex v6 = result;
    do
    {
      CFIndex result = (CFIndex)std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v7, BytePtr++);
      --v6;
    }
    while (v6);
  }
  return result;
}

CFIndex ___ZN27QMIEnhancedLQMCommandDriver15sendTrafficInfoEN10subscriber7SimSlotEtN3ctu2cf11CFSharedRefIK8__CFDataEE_block_invoke_45(uint64_t a1, unint64_t *a2)
{
  BytePtr = (UInt8 *)CFDataGetBytePtr(*(CFDataRef *)(a1 + 32));
  CFIndex result = CFDataGetLength(*(CFDataRef *)(a1 + 32));
  int v7 = a2;
  if (result)
  {
    CFIndex v6 = result;
    do
    {
      CFIndex result = (CFIndex)std::back_insert_iterator<std::vector<unsigned char>>::operator=[abi:ne180100](&v7, BytePtr++);
      --v6;
    }
    while (v6);
  }
  return result;
}

uint64_t QMIEnhancedLQMCommandDriver::sendTaggedInfo(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return std::function<void ()(BOOL)>::operator()(a5, 0);
}

void std::shared_ptr<QMIEnhancedLQMCommandDriver>::shared_ptr[abi:ne180100]<QMIEnhancedLQMCommandDriver,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_222417CBC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1}::operator() const(QMIEnhancedLQMCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_222417CE4(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMIEnhancedLQMCommandDriver *,std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver *)#1},std::allocator<QMIEnhancedLQMCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMIEnhancedLQMCommandDriver> ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::make_shared_ptr<QMIEnhancedLQMCommandDriver>(QMIEnhancedLQMCommandDriver*)::{lambda(QMIEnhancedLQMCommandDriver*)#1}::operator() const(QMIEnhancedLQMCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>(QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = *a1;
  char v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *v1;
  std::string::basic_string[abi:ne180100]<0>(&v25, "QMIEnhancedLQMCommandDriver");
  int v3 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  std::string::basic_string[abi:ne180100]<0>(&__p, "elqm");
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v4 || (v5 = *(void *)(v2 + 8), (CFIndex v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  int v7 = v6;
  atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v6);
  uint64_t v8 = std::__shared_weak_count::lock(v7);
  if (v8)
  {
    int v9 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v20 = v5;
    uint64_t v21 = v8;
    std::__shared_weak_count::__release_weak(v7);
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
  }
  else
  {
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    std::__shared_weak_count::__release_weak(v7);
  }
  Registry::getServerConnection(&v18, *(Registry **)(v2 + 48));
  qmi::Client::createWithQueueLocal();
  long long v10 = v28;
  long long v28 = 0uLL;
  int v11 = *(std::__shared_weak_count **)(v2 + 120);
  *(_OWORD *)(v2 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = v10;
  if (v11) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v11);
  }
  qmi::Client::~Client((qmi::Client *)v27);
  if (v19) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v19);
  }
  if (v21) {
    std::__shared_weak_count::__release_weak(v21);
  }
  if (v23 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  uint64_t v13 = v1[2];
  uint64_t v12 = v1[3];
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 80);
  *(void *)(v2 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = v13;
  *(void *)(v2 + 80) = v12;
  if (v14) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v14);
  }
  std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v17);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v16);
}

void sub_222417F64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,dispatch_object_t object,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a13) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a13);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](&a11);
  std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100](&a10);
  _Unwind_Resume(a1);
}

uint64_t *std::unique_ptr<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0,std::default_delete<QMIEnhancedLQMCommandDriver::bootstrap(dispatch::group_session,std::shared_ptr<EnhancedLQMCommandDriverDelegateInterface>)::$_0>>::~unique_ptr[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    int v3 = *(std::__shared_weak_count **)(v2 + 24);
    if (v3) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v3);
    }
    uint64_t v4 = *(NSObject **)(v2 + 8);
    if (v4)
    {
      dispatch_group_leave(v4);
      uint64_t v5 = *(NSObject **)(v2 + 8);
      if (v5) {
        dispatch_release(v5);
      }
    }
    MEMORY[0x223C9A950](v2, 0x20C40DC1BFBCFLL);
  }
  return a1;
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::start(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  v6[0] = (uint64_t)v1;
  uint64_t v2 = *v1;
  int v3 = (qmi::Client *)(*v1 + 96);
  void v6[6] = MEMORY[0x263EF8330];
  v6[7] = 0x40000000;
  unsigned char v6[8] = (uint64_t)___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke;
  v6[9] = (uint64_t)&__block_descriptor_tmp_59_2;
  v6[10] = v2;
  qmi::Client::setHandler();
  v6[1] = MEMORY[0x263EF8330];
  _DWORD v6[2] = 0x40000000;
  void v6[3] = (uint64_t)___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2;
  void v6[4] = (uint64_t)&__block_descriptor_tmp_60_4;
  v6[5] = v2;
  qmi::Client::setHandler();
  qmi::Client::start(v3);
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100](v6);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
}

void sub_22241814C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t ___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  v3[0] = MEMORY[0x263EF8330];
  v3[1] = 0x40000000;
  void v3[2] = ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke;
  v3[3] = &__block_descriptor_tmp_14;
  v3[4] = v1;
  uint64_t v4 = MEMORY[0x263EF8330];
  uint64_t v5 = 0x40000000;
  CFIndex v6 = ___ZNK3qmi6Client13setIndHandlerIRKN4elqm12BBIndication10IndicationEEEvtU13block_pointerFvT_E_block_invoke;
  int v7 = &unk_26460C7C0;
  uint64_t v8 = v3;
  qmi::Client::setIndHandler();
  uint64_t v4 = MEMORY[0x263EF8330];
  uint64_t v5 = 0x40000000;
  CFIndex v6 = ___ZN27QMIEnhancedLQMCommandDriver24handleClientStarted_syncEv_block_invoke_2;
  int v7 = &__block_descriptor_tmp_5_1;
  uint64_t v8 = (void *)v1;
  qmi::Client::setHandler();
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 72) + 16))(*(void *)(v1 + 72), 1);
}

uint64_t ___ZZN27QMIEnhancedLQMCommandDriver5startEN8dispatch13group_sessionEENK3__0clEv_block_invoke_2(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(*(void *)(a1 + 32) + 72) + 16))(*(void *)(*(void *)(a1 + 32) + 72), 0);
}

uint64_t *dispatch::async<void ctu::SharedSynchronizable<EnhancedLQMCommandDriver>::execute_wrapped<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>(QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0 &&)::{lambda(void)#1}>(dispatch_queue_s *,std::unique_ptr<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0,dispatch_queue_s *::default_delete<QMIEnhancedLQMCommandDriver::shutdown(dispatch::group_session)::$_0>>)::{lambda(void *)#1}::__invoke(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  if (*(void *)(v2 + 112)) {
    qmi::Client::stop((qmi::Client *)(v2 + 96));
  }
  std::unique_ptr<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0,std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>>::~unique_ptr[abi:ne180100]((uint64_t *)&v5);
  return std::unique_ptr<void ctu::SharedSynchronizable<CSISMSCommandDriver>::execute_wrapped<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0>(QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&)::{lambda(void)#1},std::default_delete<QMISMSCommandDriver::bootstrap(dispatch::group_session)::$_0 &&>>::~unique_ptr[abi:ne180100]((uint64_t *)&v4);
}

void sub_22241832C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void SimInstanceLoggable<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMIEnhancedLQMCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

char *qmi::MutableMessageBase::getTLV<elqm::tlv::Query>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned char *)*v1 + 8) != 1)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::Query>::clone()
{
}

uint64_t *std::__tree<EnhancedLQMIndication>::__emplace_unique_key_args<EnhancedLQMIndication,EnhancedLQMIndication>(uint64_t *result, int a2, int a3)
{
  uint64_t v4 = (uint64_t **)result;
  CFIndex v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        int v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 7);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        CFIndex v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        CFIndex v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    int v7 = (uint64_t **)(result + 1);
LABEL_9:
    int v9 = (uint64_t *)operator new(0x20uLL);
    *((_DWORD *)v9 + 7) = a3;
    return std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at(v4, (uint64_t)v7, v6, v9);
  }
  return result;
}

void *std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(std::set<EnhancedLQMIndication>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm5Query8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    CFIndex v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      CFIndex v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222418878(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::SubscriptionId>::clone()
{
}

void *std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::~__value_func[abi:ne180100](void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t std::__function::__value_func<void ()(int,std::vector<unsigned char>)>::__value_func[abi:ne180100](uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkState>::clone()
{
}

uint64_t std::set<EnhancedLQMIndication>::set[abi:ne180100](uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  char v3 = (uint64_t *)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    CFIndex v6 = 0;
    uint64_t v7 = (uint64_t *)(a1 + 8);
    while (1)
    {
      int v8 = *((_DWORD *)v5 + 7);
      int v9 = v3;
      if (v7 == v3) {
        goto LABEL_9;
      }
      long long v10 = v6;
      int v11 = v3;
      if (v6)
      {
        do
        {
          int v9 = v10;
          long long v10 = (uint64_t *)v10[1];
        }
        while (v10);
      }
      else
      {
        do
        {
          int v9 = (uint64_t *)v11[2];
          BOOL v12 = *v9 == (void)v11;
          int v11 = v9;
        }
        while (v12);
      }
      if (*((_DWORD *)v9 + 7) < v8)
      {
LABEL_9:
        if (v6) {
          uint64_t v13 = (uint64_t **)v9;
        }
        else {
          uint64_t v13 = (uint64_t **)v3;
        }
        if (v6) {
          uint64_t v14 = (uint64_t **)(v9 + 1);
        }
        else {
          uint64_t v14 = (uint64_t **)v3;
        }
        if (!*v14)
        {
LABEL_25:
          uint64_t v17 = (uint64_t *)operator new(0x20uLL);
          *((_DWORD *)v17 + 7) = v8;
          std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__insert_node_at((uint64_t **)a1, (uint64_t)v13, v14, v17);
        }
      }
      else
      {
        uint64_t v14 = (uint64_t **)v3;
        uint64_t v13 = (uint64_t **)v3;
        if (!v6) {
          goto LABEL_25;
        }
        uint64_t v15 = v6;
        while (1)
        {
          while (1)
          {
            uint64_t v13 = (uint64_t **)v15;
            int v16 = *((_DWORD *)v15 + 7);
            if (v16 <= v8) {
              break;
            }
            uint64_t v15 = *v13;
            uint64_t v14 = v13;
            if (!*v13) {
              goto LABEL_25;
            }
          }
          if (v16 >= v8) {
            break;
          }
          uint64_t v15 = v13[1];
          if (!v15)
          {
            uint64_t v14 = v13 + 1;
            goto LABEL_25;
          }
        }
      }
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void *)v5[2];
          BOOL v12 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v12);
      }
      if (v19 == v4) {
        return a1;
      }
      uint64_t v7 = *(uint64_t **)a1;
      CFIndex v6 = *(uint64_t **)(a1 + 8);
      uint64_t v5 = v19;
    }
  }
  return a1;
}

void sub_222418C78(_Unwind_Exception *a1)
{
  std::__tree<std::__value_type<AQMThroughputKey,unsigned int>,std::__map_value_compare<AQMThroughputKey,std::__value_type<AQMThroughputKey,unsigned int>,std::less<AQMThroughputKey>,true>,std::allocator<std::__value_type<AQMThroughputKey,unsigned int>>>::destroy(v1);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkFingerPrint>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportTrafficClass>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataTransferTime>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportLinkPowerCost>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportDataStall>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportHighThroughput>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::ReportNRServingCellType>::clone()
{
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN4elqm10BBRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke(uint64_t a1, QMIServiceMsg *this)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    std::string __p = 0;
    CFIndex v6 = 0;
    uint64_t v7 = 0;
    QMIServiceMsg::serialize((uint64_t *)&__p, this);
    qmi::ResponseBase::ResponseBase((qmi::ResponseBase *)v4, __p);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
    if (__p)
    {
      CFIndex v6 = __p;
      operator delete(__p);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v4);
  }
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v4);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v4);
}

void sub_222419338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
}

void *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::TrafficClassReport>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C5AA0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::TrafficClassReport>::clone()
{
}

void sub_222419440(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C5AF0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C5AF0;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::getSize(uint64_t a1)
{
  return tlv::size<vs::tlv::CallingNumber>((void *)(a1 + 16));
}

void *qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::write(uint64_t a1, void **a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (char *)*a2;
  uint64_t v5 = (uint64_t)*a2 + 3;
  *a2 = (void *)v5;
  CFIndex result = tlv::writeV<vs::tlv::CallingNumber>(a2, a1 + 16);
  uint64_t v7 = (char *)*a2 - v5;
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<elqm::tlv::JobSizeReport>::clone()
{
}

void sub_222419600(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x1091C40A3A4EB6ALL);
  _Unwind_Resume(a1);
}

void QMICellMonitorCommandDriver::create()
{
}

void sub_2224196D4(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v3) {
    MEMORY[0x223C9A950](v1, 0xF1C40985F9F7CLL);
  }
  _Unwind_Resume(exception_object);
}

void QMICellMonitorCommandDriver::QMICellMonitorCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3)
{
  uint8_t v7[8] = *MEMORY[0x263EF8340];
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  CellMonitorCommandDriver::CellMonitorCommandDriver();
  if (object) {
    dispatch_release(object);
  }
  v6[0] = &unk_26D4C05F8;
  void v6[3] = v6;
  uint64_t v4 = (capabilities::ct *)std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::__value_func[abi:ne180100]((uint64_t)v7, (uint64_t)v6);
  *(void *)(a1 + 88) = 0;
  if ((capabilities::ct::supportsGemini(v4) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 88)) {
    operator new();
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v7);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100](v6);
  *(void *)a1 = &unk_26D4C5B28;
  qmi::ClientRouter::ClientRouter((qmi::ClientRouter *)(a1 + 96), *(os_log_s **)(a1 + 40));
  ctu::enable_make_unique<qmi::NotifyHelper>::make_unique<std::shared_ptr<Registry const> const&>();
}

void sub_222419918(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  uint64_t v14 = va_arg(va2, void);
  uint64_t v15 = va_arg(va2, void);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va2);
  MEMORY[0x223C9A950](v3, 0x10A1C40FF1576FELL);
  uint64_t v5 = *((void *)v2 + 11);
  *((void *)v2 + 11) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va1);
  std::__function::__value_func<char const* const ()(subscriber::SimSlot)>::~__value_func[abi:ne180100]((uint64_t *)va);
  CellMonitorCommandDriver::~CellMonitorCommandDriver(v2);
  _Unwind_Resume(a1);
}

void sub_2224199E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x2224199E0);
}

void QMICellMonitorCommandDriver::~QMICellMonitorCommandDriver(qmi::NotifyHelper **this)
{
  *this = (qmi::NotifyHelper *)&unk_26D4C5B28;
  std::unique_ptr<qmi::NotifyHelper>::reset[abi:ne180100](this + 14, 0);
  uint64_t v2 = (std::__shared_weak_count *)this[13];
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }
  uint64_t v3 = this[11];
  this[11] = 0;
  if (v3) {
    (*(void (**)(qmi::NotifyHelper *))(*(void *)v3 + 8))(v3);
  }

  CellMonitorCommandDriver::~CellMonitorCommandDriver((CellMonitorCommandDriver *)this);
}

{
  uint64_t vars8;

  QMICellMonitorCommandDriver::~QMICellMonitorCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void QMICellMonitorCommandDriver::bootstrap(void *a1, uint64_t *a2)
{
  uint64_t v33 = *MEMORY[0x263EF8340];
  uint64_t v17 = (Registry **)(a1 + 8);
  subscriber::makeSimSlotRange();
  uint64_t v3 = v18;
  if (v18 != v19)
  {
    while ((v20(*v3) & 1) == 0)
    {
      if (++v3 == v19)
      {
        uint64_t v3 = v19;
        break;
      }
    }
    while (v3 != v19)
    {
      if (*v3 == 1)
      {
        uint64_t v4 = "QMICellMonitor.1";
      }
      else if (*v3 == 2)
      {
        uint64_t v4 = "QMICellMonitor.2";
      }
      else
      {
        uint64_t v4 = 0;
      }
      uint64_t v5 = (std::__shared_weak_count *)a1[2];
      if (!v5 || (uint64_t v6 = a1[1], (v7 = std::__shared_weak_count::lock(v5)) == 0)) {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      uint64_t v8 = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v7);
      Registry::getServerConnection((uint64_t *)&v21, *v17);
      long long v31 = 0u;
      long long v32 = 0u;
      std::string::basic_string[abi:ne180100]<0>(&v28, v4);
      uint64_t v9 = a1[3];
      dispatch_object_t object = v9;
      if (v9) {
        dispatch_retain(v9);
      }
      std::string::basic_string[abi:ne180100]<0>(&__p, "cellmonitor");
      uint64_t v23 = 0;
      uint64_t v24 = 0;
      uint64_t v10 = std::__shared_weak_count::lock(v8);
      if (v10)
      {
        uint64_t v11 = v10;
        atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        uint64_t v23 = v6;
        uint64_t v24 = v10;
        std::__shared_weak_count::__release_weak(v8);
        std::__shared_weak_count::__release_shared[abi:ne180100](v11);
      }
      else
      {
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        std::__shared_weak_count::__release_weak(v8);
      }
      long long v22 = v21;
      long long v21 = 0uLL;
      qmi::Client::createWithQueueLocal();
      if (*((void *)&v22 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v22 + 1));
      }
      if (v24) {
        std::__shared_weak_count::__release_weak(v24);
      }
      if (v26 < 0) {
        operator delete(__p);
      }
      if (object) {
        dispatch_release(object);
      }
      if (SBYTE7(v30) < 0) {
        operator delete(v28);
      }
      long long v28 = 0;
      uint64_t v29 = 0;
      long long v30 = v32;
      long long v32 = 0uLL;
      qmi::ClientRouter::addClient();
      qmi::Client::~Client((qmi::Client *)&v28);
      qmi::ClientRouter::get();
      qmi::Client::~Client((qmi::Client *)&v31);
      if (*((void *)&v21 + 1)) {
        std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v21 + 1));
      }
      BOOL v12 = v3 + 1;
      uint64_t v3 = v19;
      if (v12 != v19)
      {
        uint64_t v3 = v12;
        while ((v20(*v3) & 1) == 0)
        {
          if (++v3 == v19)
          {
            uint64_t v3 = v19;
            break;
          }
        }
      }
    }
  }
  *(void *)&long long v31 = &unk_26D4C5E30;
  *((void *)&v31 + 1) = a1;
  *((void *)&v32 + 1) = &v31;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v31);
  *(void *)&long long v31 = &unk_26D4C5EB0;
  *((void *)&v31 + 1) = a1;
  *((void *)&v32 + 1) = &v31;
  qmi::ClientRouter::setIndHandlerInternal();
  std::__function::__value_func<void ()(qmi::SubscriptionType,QMIServiceMsg const&)>::~__value_func[abi:ne180100](&v31);
  qmi::ClientRouter::setIndShouldWake((qmi::ClientRouter *)(a1 + 12));
  *(void *)&long long v31 = &unk_26D4C5F30;
  *((void *)&v31 + 1) = a1;
  *((void *)&v32 + 1) = &v31;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v31);
  long long v28 = &unk_26D4C5FB0;
  uint64_t v29 = a1;
  *((void *)&v30 + 1) = &v28;
  qmi::ClientRouter::setHandler();
  std::__function::__value_func<void ()(qmi::SubscriptionType)>::~__value_func[abi:ne180100](&v28);
  uint64_t v14 = *a2;
  uint64_t v13 = a2[1];
  if (v13) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = (std::__shared_weak_count *)a1[7];
  a1[6] = v14;
  a1[7] = v13;
  if (v15) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v15);
  }
}

void sub_222419EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,dispatch_object_t object,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
}

uint64_t QMICellMonitorCommandDriver::start(QMICellMonitorCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Starting", v3, 2u);
  }
  return qmi::ClientRouter::start();
}

uint64_t QMICellMonitorCommandDriver::shutdown(QMICellMonitorCommandDriver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl(&dword_22231A000, v1, OS_LOG_TYPE_DEFAULT, "#I Shutting down", v3, 2u);
  }
  return qmi::ClientRouter::stop();
}

uint64_t QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0::~$_0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 8);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 8);
    if (v3) {
      dispatch_release(v3);
    }
  }
  return a1;
}

void ___ZN27QMICellMonitorCommandDriver31process5GCellV1Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(*(void *)(a1 + 32) + 192, (uint64_t)v13);
  *(void *)&long long v24 = v13;
  std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[13].i8[8]
    || (std::vector<NrCell>::resize(v4 + 12, 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 4)),
        uint64_t v5 = *(void *)(a1 + 32),
        !*(unsigned char *)(v5 + 216)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *(_WORD **)(v5 + 192);
    do
    {
      long long v24 = 0u;
      long long v25 = 0u;
      MEMORY[0x223C99930](&v24, *(unsigned __int16 *)(v6 + 2));
      long long v22 = 0u;
      long long v23 = 0u;
      MEMORY[0x223C99980](&v22, *(unsigned __int16 *)(v6 + 4), &v24);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)&v22);
      LOWORD(v19) = *(_WORD *)(v6 + 6);
      DWORD1(v19) = *(_DWORD *)(v6 + 8);
      *((void *)&v19 + 1) = *(void *)(v6 + 16);
      LODWORD(v20) = *(_DWORD *)(v6 + 24);
      WORD2(v20) = *(_WORD *)(v6 + 28);
      *((void *)&v20 + 1) = *(void *)(v6 + 32);
      *(_WORD *)long long v21 = *(_WORD *)(v6 + 40);
      std::locale v21[2] = *(unsigned char *)(v6 + 42);
      *(_DWORD *)&void v21[4] = *(_DWORD *)(v6 + 44);
      v21[8] = 0;
      *(_DWORD *)&v21[12] = 0;
      *(_WORD *)&v21[16] = 0;
      *(_DWORD *)&v21[20] = 0;
      *(_DWORD *)&v21[24] = 0;
      if (SHIBYTE(v23) < 0) {
        operator delete(*((void **)&v22 + 1));
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(*((void **)&v24 + 1));
      }
      *uint64_t v8 = v13[0];
      MCC::operator=();
      uint64_t v9 = v8 + 20;
      MCC::operator=();
      long long v10 = v19;
      long long v11 = v20;
      long long v12 = *(_OWORD *)v21;
      *(_OWORD *)((char *)v9 + 76) = *(_OWORD *)&v21[12];
      void v9[3] = v11;
      void v9[4] = v12;
      _OWORD v9[2] = v10;
      if (v18 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      v6 += 48;
      uint64_t v8 = v9 + 6;
    }
    while (v6 != v7);
  }
}

void sub_22241A2E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 97) < 0) {
    operator delete(*(void **)(v17 - 120));
  }
  if (*(char *)(v17 - 65) < 0) {
    operator delete(*(void **)(v17 - 88));
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    uint64_t v4 = *(void **)a1;
    if (*(void *)a1)
    {
      uint64_t v5 = *(void *)(a1 + 8);
      uint64_t v6 = *(void **)a1;
      if ((void *)v5 != v4)
      {
        do
        {
          v5 -= 136;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v5);
        }
        while ((void *)v5 != v4);
        uint64_t v6 = *(void **)a1;
      }
      *(void *)(a1 + 8) = v4;
      operator delete(v6);
      *(void *)a1 = 0;
      *(void *)(a1 + 8) = 0;
      *(void *)(a1 + 16) = 0;
    }
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else
  {
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    *(_OWORD *)a1 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void std::vector<NrCell>::resize(int64x2_t *a1, unint64_t a2)
{
  uint64_t v4 = a1->i64[0];
  uint64_t v5 = a1->i64[1];
  unint64_t v6 = 0xF0F0F0F0F0F0F0F1 * ((v5 - a1->i64[0]) >> 3);
  unint64_t v7 = a2 - v6;
  if (a2 <= v6)
  {
    if (a2 < v6)
    {
      uint64_t v26 = v4 + 136 * a2;
      while (v5 != v26)
      {
        v5 -= 136;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v5);
      }
      a1->i64[1] = v26;
    }
  }
  else
  {
    uint64_t v8 = a1[1].i64[0];
    if (0xF0F0F0F0F0F0F0F1 * ((v8 - v5) >> 3) >= v7)
    {
      unint64_t v27 = v5 + 136 * v7;
      uint64_t v28 = 136 * a2 - 8 * ((v5 - a1->i64[0]) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(v5);
        v5 += 136;
        v28 -= 136;
      }
      while (v28);
      a1->i64[1] = v27;
    }
    else
    {
      if (a2 > 0x1E1E1E1E1E1E1E1) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xF0F0F0F0F0F0F0F1 * ((v8 - v4) >> 3);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= a2) {
        uint64_t v10 = a2;
      }
      if (v9 >= 0xF0F0F0F0F0F0F0) {
        unint64_t v11 = 0x1E1E1E1E1E1E1E1;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t v33 = a1 + 1;
      long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<NrCell>>(v11);
      uint64_t v13 = (uint64_t)&v12[136 * v6];
      long long v30 = v12;
      v31.i64[0] = v13;
      v31.i64[1] = v13;
      long long v32 = &v12[136 * v14];
      char v15 = &v12[136 * a2];
      uint64_t v16 = 136 * a2 - 136 * v6;
      do
      {
        _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(v13);
        v13 += 136;
        v16 -= 136;
      }
      while (v16);
      v31.i64[1] = (uint64_t)v15;
      uint64_t v18 = a1->i64[0];
      unint64_t v17 = a1->u64[1];
      uint64_t v19 = v31.i64[0];
      if (v17 == a1->i64[0])
      {
        int64x2_t v25 = vdupq_n_s64(v17);
      }
      else
      {
        uint64_t v20 = 0;
        do
        {
          *(_WORD *)(v19 + v20 - 136) = *(_WORD *)(v17 + v20 - 136);
          MCC::MCC();
          MCC::MCC((MCC *)(v19 + v20 - 96), (const MCC *)(v17 + v20 - 96));
          uint64_t v21 = v19 + v20;
          long long v22 = *(_OWORD *)(v17 + v20 - 64);
          long long v23 = *(_OWORD *)(v17 + v20 - 48);
          long long v24 = *(_OWORD *)(v17 + v20 - 32);
          *(_OWORD *)(v21 - 20) = *(_OWORD *)(v17 + v20 - 20);
          *(_OWORD *)(v21 - 48) = v23;
          *(_OWORD *)(v21 - 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = v24;
          *(_OWORD *)(v21 - 64) = v22;
          v20 -= 136;
        }
        while (v17 + v20 != v18);
        int64x2_t v25 = *a1;
        char v15 = (char *)v31.i64[1];
        v19 += v20;
      }
      a1->i64[0] = v19;
      a1->i64[1] = (uint64_t)v15;
      int64x2_t v31 = v25;
      uint64_t v29 = (char *)a1[1].i64[0];
      a1[1].i64[0] = (uint64_t)v32;
      long long v32 = v29;
      long long v30 = (char *)v25.i64[0];
      std::__split_buffer<NrCell>::~__split_buffer((uint64_t)&v30);
    }
  }
}

void ___ZN27QMICellMonitorCommandDriver31process5GCellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  std::optional<NrCellInformation>::operator=[abi:ne180100]<NrCellInformation,void>(*(void *)(a1 + 32) + 192, (uint64_t)v13);
  *(void *)&long long v24 = v13;
  std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v24);
  uint64_t v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[13].i8[8]
    || (std::vector<NrCell>::resize(v4 + 12, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 3)),
        uint64_t v5 = *(void *)(a1 + 32),
        !*(unsigned char *)(v5 + 216)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *(_WORD **)(v5 + 192);
    do
    {
      long long v24 = 0u;
      long long v25 = 0u;
      MEMORY[0x223C99930](&v24, *(unsigned __int16 *)(v6 + 2));
      long long v22 = 0u;
      long long v23 = 0u;
      MEMORY[0x223C99980](&v22, *(unsigned __int16 *)(v6 + 4), &v24);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)&v22);
      LOWORD(v19) = *(_WORD *)(v6 + 6);
      DWORD1(v19) = *(_DWORD *)(v6 + 8);
      *((void *)&v19 + 1) = *(void *)(v6 + 16);
      LODWORD(v20) = *(_DWORD *)(v6 + 24);
      WORD2(v20) = *(_WORD *)(v6 + 28);
      *((void *)&v20 + 1) = *(void *)(v6 + 32);
      *(_WORD *)uint64_t v21 = *(_WORD *)(v6 + 40);
      std::locale v21[2] = *(unsigned char *)(v6 + 42);
      *(_DWORD *)&void v21[4] = *(_DWORD *)(v6 + 44);
      v21[8] = *(unsigned char *)(v6 + 48);
      *(_DWORD *)&v21[12] = *(_DWORD *)(v6 + 52);
      *(_WORD *)&v21[16] = *(_WORD *)(v6 + 56);
      *(_DWORD *)&v21[20] = 0;
      *(_DWORD *)&v21[24] = 0;
      if (SHIBYTE(v23) < 0) {
        operator delete(*((void **)&v22 + 1));
      }
      if (SHIBYTE(v25) < 0) {
        operator delete(*((void **)&v24 + 1));
      }
      *uint64_t v8 = v13[0];
      MCC::operator=();
      unint64_t v9 = v8 + 20;
      MCC::operator=();
      long long v10 = v19;
      long long v11 = v20;
      long long v12 = *(_OWORD *)v21;
      *(_OWORD *)((char *)v9 + 76) = *(_OWORD *)&v21[12];
      void v9[3] = v11;
      void v9[4] = v12;
      _OWORD v9[2] = v10;
      if (v18 < 0) {
        operator delete(__p);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      v6 += 72;
      uint64_t v8 = v9 + 6;
    }
    while (v6 != v7);
  }
}

void sub_22241A870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v17 - 97) < 0) {
    operator delete(*(void **)(v17 - 120));
  }
  if (*(char *)(v17 - 65) < 0) {
    operator delete(*(void **)(v17 - 88));
  }
  _Unwind_Resume(exception_object);
}

void ___ZN27QMICellMonitorCommandDriver32processLTECellV3Information_syncERKN3nas11GetCellInfo7RespIndER14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  v13[0] = 0;
  v13[1] = 0;
  uint64_t v14 = 0;
  std::optional<LteCellInformation>::operator=[abi:ne180100]<LteCellInformation,void>(*(void *)(a1 + 32) + 128, (uint64_t)v13);
  *(void *)&long long v25 = v13;
  std::vector<LteCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v25);
  uint64_t v4 = *(int64x2_t **)(a1 + 32);
  if (!v4[9].i8[8]
    || (std::vector<LteCell>::resize(v4 + 8, 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2)),
        uint64_t v5 = *(void *)(a1 + 32),
        !*(unsigned char *)(v5 + 152)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  if (*a2 != v7)
  {
    uint64_t v8 = *(_WORD **)(v5 + 128);
    do
    {
      long long v25 = 0u;
      long long v26 = 0u;
      MEMORY[0x223C99930](&v25, *(unsigned __int16 *)(v6 + 2));
      *(_OWORD *)std::string __p = 0u;
      long long v24 = 0u;
      MEMORY[0x223C99980](__p, *(unsigned __int16 *)(v6 + 4), &v25);
      LOWORD(v13[0]) = *(_WORD *)v6;
      MCC::MCC();
      MCC::MCC((MCC *)&v16, (const MCC *)__p);
      LOBYTE(v19) = *(unsigned char *)(v6 + 6) + 1;
      *(void *)((char *)&v19 + 4) = *(void *)(v6 + 8);
      HIDWORD(v19) = *(_DWORD *)(v6 + 16);
      LOWORD(v20) = *(_WORD *)(v6 + 20);
      *(void *)((char *)&v20 + 4) = *(void *)(v6 + 24);
      WORD6(v20) = *(_WORD *)(v6 + 32);
      BYTE14(v20) = 1;
      LODWORD(v21) = 0;
      BYTE4(v21) = 0;
      DWORD2(v21) = 0;
      WORD6(v21) = 0;
      uint64_t v22 = 0;
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(*((void **)&v25 + 1));
      }
      *uint64_t v8 = v13[0];
      MCC::operator=();
      unint64_t v9 = v8 + 20;
      MCC::operator=();
      long long v10 = v19;
      long long v11 = v20;
      long long v12 = v21;
      *((void *)v9 + 10) = v22;
      *((_OWORD *)v9 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = v11;
      *((_OWORD *)v9 + 4) = v12;
      *((_OWORD *)v9 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v10;
      if (v18 < 0) {
        operator delete(v17);
      }
      if (v15 < 0) {
        operator delete(v14);
      }
      v6 += 36;
      uint64_t v8 = v9 + 44;
    }
    while (v6 != v7);
  }
}

void sub_22241AAC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (*(char *)(v34 - 65) < 0) {
    operator delete(*(void **)(v34 - 88));
  }
  _Unwind_Resume(exception_object);
}

void QMICellMonitorCommandDriver::sendRegistrationHints(uint64_t a1, uint64_t a2, unsigned int a3, unsigned int a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  subscriber::makeSimSlotRange();
  uint64_t v13 = v22;
  if (v22 != v23)
  {
    while ((v24(*v13) & 1) == 0)
    {
      if (++v13 == v23)
      {
        uint64_t v13 = v23;
        break;
      }
    }
    while (v13 != v23)
    {
      unsigned int v14 = *v13;
      if (*v13 == 3)
      {
        uint64_t v15 = 3;
      }
      else if (v14 == 2)
      {
        uint64_t v15 = 2;
      }
      else
      {
        uint64_t v15 = v14 == 1;
      }
      uint64_t v43 = 0;
      uint64_t v44 = 0;
      uint64_t v45 = 0;
      std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(&v43, *(const void **)a5, *(void *)(a5 + 8), (uint64_t)(*(void *)(a5 + 8) - *(void *)a5) >> 3);
      uint64_t v40 = 0;
      uint64_t v41 = 0;
      uint64_t v42 = 0;
      std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(&v40, *(const void **)a6, *(void *)(a6 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2));
      uint64_t v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v37, *(const void **)a7, *(void *)(a7 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a7 + 8) - *(void *)a7) >> 1));
      uint64_t v34 = 0;
      uint64_t v35 = 0;
      uint64_t v36 = 0;
      std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v34, *(const void **)a8, *(void *)(a8 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a8 + 8) - *(void *)a8) >> 1));
      int64x2_t v31 = 0;
      long long v32 = 0;
      uint64_t v33 = 0;
      std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(&v31, *(const void **)a9, *(void *)(a9 + 8), (uint64_t)(*(void *)(a9 + 8) - *(void *)a9) >> 4);
      uint64_t v28 = 0;
      uint64_t v29 = 0;
      uint64_t v30 = 0;
      std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v28, *(const void **)a10, *(void *)(a10 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a10 + 8) - *(void *)a10) >> 1));
      std::string __p = 0;
      long long v26 = 0;
      uint64_t v27 = 0;
      std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(&__p, *(const void **)a11, *(void *)(a11 + 8), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a11 + 8) - *(void *)a11) >> 2));
      (*(void (**)(uint64_t, uint64_t, void, void, void **, void **, void **, void **, void **, void **, void **))(*(void *)a1 + 72))(a1, v15, a3, a4, &v43, &v40, &v37, &v34, &v31, &v28, &__p);
      if (__p)
      {
        long long v26 = __p;
        operator delete(__p);
      }
      if (v28)
      {
        uint64_t v29 = v28;
        operator delete(v28);
      }
      if (v31)
      {
        long long v32 = v31;
        operator delete(v31);
      }
      if (v34)
      {
        uint64_t v35 = v34;
        operator delete(v34);
      }
      if (v37)
      {
        uint64_t v38 = v37;
        operator delete(v37);
      }
      if (v40)
      {
        uint64_t v41 = v40;
        operator delete(v40);
      }
      if (v43)
      {
        uint64_t v44 = v43;
        operator delete(v43);
      }
      uint64_t v16 = v13 + 1;
      uint64_t v13 = v23;
      if (v16 != v23)
      {
        uint64_t v13 = v16;
        while ((v24(*v13) & 1) == 0)
        {
          if (++v13 == v23)
          {
            uint64_t v13 = v23;
            break;
          }
        }
      }
    }
  }
}

void sub_22241ADF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31)
{
  if (__p) {
    operator delete(__p);
  }
  if (a24) {
    operator delete(a24);
  }
  if (a27) {
    operator delete(a27);
  }
  if (a30) {
    operator delete(a30);
  }
  uint64_t v33 = *(void **)(v31 - 160);
  if (v33)
  {
    *(void *)(v31 - 15QMIDataContextIPAggregator::getAPNObserver(this - 2) = v33;
    operator delete(v33);
  }
  uint64_t v34 = *(void **)(v31 - 136);
  if (v34)
  {
    *(void *)(v31 - 128) = v34;
    operator delete(v34);
  }
  uint64_t v35 = *(void **)(v31 - 112);
  if (v35)
  {
    *(void *)(v31 - 104) = v35;
    operator delete(v35);
  }
  _Unwind_Resume(exception_object);
}

void QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(uint64_t a1, uint64_t a2, char a3, char a4, const void **a5, const void **a6, const void **a7, const void **a8, const void **a9, const void **a10, const void **a11)
{
  int v11 = a2;
  long long v12 = *a5;
  uint64_t v13 = a5[1];
  uint64_t v14 = *a5 != v13;
  uint64_t v126 = v14;
  if (*a6 != a6[1])
  {
    uint64_t v14 = 1;
    if (v12 != v13) {
      uint64_t v14 = 2;
    }
    uint64_t v126 = v14;
  }
  if (*a7 != a7[1]) {
    uint64_t v126 = ++v14;
  }
  if (*a8 != a8[1]) {
    uint64_t v126 = ++v14;
  }
  if (*a9 != a9[1]) {
    uint64_t v126 = ++v14;
  }
  if (*a10 != a10[1]) {
    uint64_t v126 = ++v14;
  }
  if (*a11 != a11[1]) {
    uint64_t v126 = v14 + 1;
  }
  uint64_t v15 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2);
  if ((v11 - 1) >= 3) {
    int v16 = 0;
  }
  else {
    int v16 = v11;
  }
  long long v124 = 0u;
  long long v125 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v124);
  v122[0] = MEMORY[0x263EF8330];
  v122[1] = 0x40000000;
  v122[2] = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke;
  v122[3] = &__block_descriptor_tmp_22_5;
  v122[4] = a1;
  char v123 = a3;
  uint64_t v17 = (const void **)*((void *)&v124 + 1);
  if (*((void *)&v124 + 1) != (void)v125)
  {
    while (*((unsigned __int8 *)*v17 + 8) != 193)
    {
      if (++v17 == (const void **)v125) {
        goto LABEL_25;
      }
    }
  }
  if (v17 == (const void **)v125) {
LABEL_25:
  }
    operator new();
  if (!v18) {
    goto LABEL_129;
  }
  ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke((uint64_t)v122, v18 + 9);
  long long v19 = (const void **)*((void *)&v124 + 1);
  if (*((void *)&v124 + 1) != (void)v125)
  {
    while (*((unsigned __int8 *)*v19 + 8) != 192)
    {
      if (++v19 == (const void **)v125) {
        goto LABEL_33;
      }
    }
  }
  if (v19 == (const void **)v125) {
LABEL_33:
  }
    operator new();
  if (!v20) {
LABEL_129:
  }
    __cxa_bad_cast();
  v20[9] = 0;
  v117[0] = MEMORY[0x263EF8330];
  v117[1] = 0x40000000;
  CFTypeRef v118 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_3;
  uint64_t v119 = &__block_descriptor_tmp_28;
  uint64_t v120 = v126;
  uint64_t v121 = v15;
  long long v21 = qmi::MutableMessageBase::getTLV<nas::tlv::StatusType>((uint64_t)&v124);
  v118((uint64_t)v117, v21);
  uint64_t v22 = *a5;
  uint64_t v23 = (uint64_t)a5[1];
  uint64_t v24 = v23 - (void)*a5;
  if ((const void *)v23 == *a5)
  {
    long long v26 = *a6;
    uint64_t v27 = (uint64_t)a6[1];
    uint64_t v28 = v27 - (void)*a6;
    if ((const void *)v27 == *a6)
    {
      uint64_t v30 = *a7;
      uint64_t v31 = (uint64_t)a7[1];
      uint64_t v32 = v31 - (void)*a7;
      if ((const void *)v31 == *a7)
      {
        uint64_t v34 = *a8;
        uint64_t v35 = (uint64_t)a8[1];
        uint64_t v36 = v35 - (void)*a8;
        if ((const void *)v35 == *a8)
        {
          uint64_t v38 = *a9;
          uint64_t v39 = (uint64_t)a9[1];
          uint64_t v40 = v39 - (void)*a9;
          if ((const void *)v39 == *a9)
          {
            uint64_t v43 = *a10;
            uint64_t v44 = (uint64_t)a10[1];
            uint64_t v45 = v44 - (void)*a10;
            if ((const void *)v44 == *a10)
            {
              long long v50 = *a11;
              uint64_t v51 = (uint64_t)a11[1];
              uint64_t v52 = v51 - (void)*a11;
              if ((const void *)v51 != *a11)
              {
                v75[0] = MEMORY[0x263EF8330];
                v75[1] = 1174405120;
                uint64_t v76 = (void (*)(void *, char *))___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_46;
                uint64_t v77 = &__block_descriptor_tmp_47_6;
                char v79 = 0;
                uint64_t v80 = 0;
                std::string __p = 0;
                std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(&__p, v50, v51, 0xCCCCCCCCCCCCCCCDLL * (v52 >> 2));
                CFTypeID v53 = (const void **)*((void *)&v124 + 1);
                if (*((void *)&v124 + 1) != (void)v125)
                {
                  while (*((unsigned __int8 *)*v53 + 8) != 224)
                  {
                    if (++v53 == (const void **)v125) {
                      goto LABEL_105;
                    }
                  }
                }
                if (v53 == (const void **)v125) {
LABEL_105:
                }
                  operator new();
                if (!v58) {
                  __cxa_bad_cast();
                }
                v76(v75, v58 + 16);
                --v126;
                uint64_t v127 = MEMORY[0x263EF8330];
                uint64_t v128 = 0x40000000;
                uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
                char v130 = &__block_descriptor_tmp_56_1;
                unint64_t v131 = &v126;
                uint64_t v64 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
                v129((uint64_t)&v127, (BOOL *)v64);
                long long v57 = __p;
                if (__p)
                {
                  char v79 = __p;
                  goto LABEL_120;
                }
              }
            }
            else
            {
              v81[0] = MEMORY[0x263EF8330];
              v81[1] = 1174405120;
              unint64_t v82 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_42;
              uint64_t v83 = &__block_descriptor_tmp_45_4;
              uint64_t v85 = 0;
              uint64_t v86 = 0;
              std::string::size_type v84 = 0;
              std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v84, v43, v44, 0xCCCCCCCCCCCCCCCDLL * (v45 >> 1));
              long long v46 = (const void **)*((void *)&v124 + 1);
              if (*((void *)&v124 + 1) != (void)v125)
              {
                while (*((unsigned __int8 *)*v46 + 8) != 178)
                {
                  if (++v46 == (const void **)v125) {
                    goto LABEL_97;
                  }
                }
              }
              if (v46 == (const void **)v125) {
LABEL_97:
              }
                operator new();
              if (!v55) {
                __cxa_bad_cast();
              }
              v82((char ***)v81, v55 + 2);
              --v126;
              uint64_t v127 = MEMORY[0x263EF8330];
              uint64_t v128 = 0x40000000;
              uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
              char v130 = &__block_descriptor_tmp_56_1;
              unint64_t v131 = &v126;
              uint64_t v63 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
              v129((uint64_t)&v127, (BOOL *)v63);
              long long v57 = v84;
              if (v84)
              {
                uint64_t v85 = v84;
                goto LABEL_120;
              }
            }
          }
          else
          {
            v87[0] = MEMORY[0x263EF8330];
            v87[1] = 1174405120;
            uint64_t v88 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_40;
            unint64_t v89 = &__block_descriptor_tmp_41_3;
            uint64_t v91 = 0;
            uint64_t v92 = 0;
            uint64_t v90 = 0;
            std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(&v90, v38, v39, v40 >> 4);
            uint64_t v41 = (const void **)*((void *)&v124 + 1);
            if (*((void *)&v124 + 1) != (void)v125)
            {
              while (*((unsigned __int8 *)*v41 + 8) != 209)
              {
                if (++v41 == (const void **)v125) {
                  goto LABEL_90;
                }
              }
            }
            if (v41 == (const void **)v125) {
LABEL_90:
            }
              operator new();
            if (!v54) {
              __cxa_bad_cast();
            }
            v88((uint64_t)v87, v54 + 2);
            --v126;
            uint64_t v127 = MEMORY[0x263EF8330];
            uint64_t v128 = 0x40000000;
            uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
            char v130 = &__block_descriptor_tmp_56_1;
            unint64_t v131 = &v126;
            int v62 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
            v129((uint64_t)&v127, (BOOL *)v62);
            long long v57 = v90;
            if (v90)
            {
              uint64_t v91 = v90;
              goto LABEL_120;
            }
          }
        }
        else
        {
          v93[0] = MEMORY[0x263EF8330];
          v93[1] = 1174405120;
          uint64_t v94 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_36;
          uint64_t v95 = &__block_descriptor_tmp_39_9;
          BOOL v97 = 0;
          uint64_t v98 = 0;
          std::string::size_type v96 = 0;
          std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v96, v34, v35, 0xCCCCCCCCCCCCCCCDLL * (v36 >> 1));
          uint64_t v37 = (const void **)*((void *)&v124 + 1);
          if (*((void *)&v124 + 1) != (void)v125)
          {
            while (*((unsigned __int8 *)*v37 + 8) != 176)
            {
              if (++v37 == (const void **)v125) {
                goto LABEL_81;
              }
            }
          }
          if (v37 == (const void **)v125) {
LABEL_81:
          }
            operator new();
          if (!v49) {
            __cxa_bad_cast();
          }
          v94((char ***)v93, v49 + 2);
          --v126;
          uint64_t v127 = MEMORY[0x263EF8330];
          uint64_t v128 = 0x40000000;
          uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
          char v130 = &__block_descriptor_tmp_56_1;
          unint64_t v131 = &v126;
          unint64_t v61 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
          v129((uint64_t)&v127, (BOOL *)v61);
          long long v57 = v96;
          if (v96)
          {
            BOOL v97 = v96;
            goto LABEL_120;
          }
        }
      }
      else
      {
        v99[0] = MEMORY[0x263EF8330];
        v99[1] = 1174405120;
        uint64_t v100 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_34;
        uint64_t v101 = &__block_descriptor_tmp_35_6;
        uint64_t v103 = 0;
        uint64_t v104 = 0;
        std::string::size_type v102 = 0;
        std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(&v102, v30, v31, 0xCCCCCCCCCCCCCCCDLL * (v32 >> 1));
        uint64_t v33 = (const void **)*((void *)&v124 + 1);
        if (*((void *)&v124 + 1) != (void)v125)
        {
          while (*((unsigned __int8 *)*v33 + 8) != 175)
          {
            if (++v33 == (const void **)v125) {
              goto LABEL_77;
            }
          }
        }
        if (v33 == (const void **)v125) {
LABEL_77:
        }
          operator new();
        if (!v48) {
          __cxa_bad_cast();
        }
        v100((char ***)v99, v48 + 2);
        --v126;
        uint64_t v127 = MEMORY[0x263EF8330];
        uint64_t v128 = 0x40000000;
        uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
        char v130 = &__block_descriptor_tmp_56_1;
        unint64_t v131 = &v126;
        uint64_t v60 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
        v129((uint64_t)&v127, (BOOL *)v60);
        long long v57 = v102;
        if (v102)
        {
          uint64_t v103 = v102;
          goto LABEL_120;
        }
      }
    }
    else
    {
      v105[0] = MEMORY[0x263EF8330];
      v105[1] = 1174405120;
      char v106 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_32;
      uint64_t v107 = &__block_descriptor_tmp_33_8;
      uint64_t v109 = 0;
      uint64_t v110 = 0;
      uint64_t v108 = 0;
      std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(&v108, v26, v27, 0xCCCCCCCCCCCCCCCDLL * (v28 >> 2));
      uint64_t v29 = (const void **)*((void *)&v124 + 1);
      if (*((void *)&v124 + 1) != (void)v125)
      {
        while (*((unsigned __int8 *)*v29 + 8) != 164)
        {
          if (++v29 == (const void **)v125) {
            goto LABEL_71;
          }
        }
      }
      if (v29 == (const void **)v125) {
LABEL_71:
      }
        operator new();
      if (!v47) {
        __cxa_bad_cast();
      }
      v106((uint64_t)v105, v47 + 2);
      --v126;
      uint64_t v127 = MEMORY[0x263EF8330];
      uint64_t v128 = 0x40000000;
      uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
      char v130 = &__block_descriptor_tmp_56_1;
      unint64_t v131 = &v126;
      uint64_t v59 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
      v129((uint64_t)&v127, (BOOL *)v59);
      long long v57 = v108;
      if (v108)
      {
        uint64_t v109 = v108;
        goto LABEL_120;
      }
    }
  }
  else
  {
    v111[0] = MEMORY[0x263EF8330];
    v111[1] = 1174405120;
    unsigned int v112 = ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_29;
    uint64_t v113 = &__block_descriptor_tmp_31_2;
    uint64_t v115 = 0;
    uint64_t v116 = 0;
    uint64_t v114 = 0;
    std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(&v114, v22, v23, v24 >> 3);
    long long v25 = (const void **)*((void *)&v124 + 1);
    if (*((void *)&v124 + 1) != (void)v125)
    {
      while (*((unsigned __int8 *)*v25 + 8) != 163)
      {
        if (++v25 == (const void **)v125) {
          goto LABEL_62;
        }
      }
    }
    if (v25 == (const void **)v125) {
LABEL_62:
    }
      operator new();
    if (!v42) {
      __cxa_bad_cast();
    }
    v112((uint64_t)v111, v42 + 2);
    --v126;
    uint64_t v127 = MEMORY[0x263EF8330];
    uint64_t v128 = 0x40000000;
    uint64_t v129 = ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke;
    char v130 = &__block_descriptor_tmp_56_1;
    unint64_t v131 = &v126;
    int v56 = qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>((uint64_t)&v124);
    v129((uint64_t)&v127, (BOOL *)v56);
    long long v57 = v114;
    if (v114)
    {
      uint64_t v115 = v114;
LABEL_120:
      operator delete(v57);
    }
  }
  BOOL v65 = (const void **)*((void *)&v124 + 1);
  if (*((void *)&v124 + 1) != (void)v125)
  {
    while (*((unsigned __int8 *)*v65 + 8) != 195)
    {
      if (++v65 == (const void **)v125) {
        goto LABEL_128;
      }
    }
  }
  if (v65 != (const void **)v125)
  {
    if (v66)
    {
      v66[9] = a4;
      qmi::ClientRouter::get();
      qmi::ClientRouter::SendProxy::SendProxy<nas::FrequencyHints::Request>(&v74, v16);
    }
    __cxa_bad_cast();
  }
LABEL_128:
  operator new();
}

void sub_22241C970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)(v50 - 240));
  _Unwind_Resume(a1);
}

uint64_t ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke(uint64_t result, unsigned char *a2)
{
  unsigned int v2 = *(unsigned __int8 *)(result + 40);
  if (v2 >= 4) {
    LOBYTE(vQMIDataContextIPAggregator::getAPNObserver(this - 2) = 4;
  }
  *a2 = v2;
  return result;
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_3(uint64_t a1, char *a2)
{
  if (*(void *)(a1 + 32))
  {
    char v3 = 0;
  }
  else
  {
    uint64_t v4 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#N No technology hints remaining, informing baseband of no hits", v5, 2u);
    }
    char v3 = 1;
  }
  *a2 = v3;
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_29(uint64_t a1, unint64_t **a2)
{
  unsigned int v2 = *(unsigned __int8 **)(a1 + 32);
  char v3 = *(unsigned __int8 **)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v5 = a2 + 2;
    uint64_t v6 = a2[1];
    do
    {
      unint64_t v7 = *v2 | ((unint64_t)*((unsigned __int16 *)v2 + 1) << 16) | ((unint64_t)*((unsigned int *)v2 + 1) << 32);
      if ((unint64_t)v6 >= *v5)
      {
        uint64_t v8 = v6 - *a2;
        if ((unint64_t)(v8 + 1) >> 61) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v9 = *v5 - (void)*a2;
        uint64_t v10 = v9 >> 2;
        if (v9 >> 2 <= (unint64_t)(v8 + 1)) {
          uint64_t v10 = v8 + 1;
        }
        if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFF8) {
          unint64_t v11 = 0x1FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        if (v11) {
          long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wds::tlv::Ipv4AddrInfo>>((uint64_t)v5, v11);
        }
        else {
          long long v12 = 0;
        }
        uint64_t v13 = (unint64_t *)&v12[8 * v8];
        unint64_t *v13 = v7;
        uint64_t v6 = v13 + 1;
        uint64_t v15 = (char *)*a2;
        uint64_t v14 = (char *)a2[1];
        if (v14 != (char *)*a2)
        {
          do
          {
            unint64_t v16 = *((void *)v14 - 1);
            v14 -= 8;
            *--uint64_t v13 = v16;
          }
          while (v14 != v15);
          uint64_t v14 = (char *)*a2;
        }
        *a2 = v13;
        a2[1] = v6;
        a2[2] = (unint64_t *)&v12[8 * v11];
        if (v14) {
          operator delete(v14);
        }
      }
      else
      {
        *v6++ = v7;
      }
      a2[1] = v6;
      v2 += 8;
    }
    while (v2 != v3);
  }
}

void *__copy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecord1xNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  unsigned int v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3);
}

void __destroy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecord1xNS_9allocatorIS1_EEEE(uint64_t a1)
{
  unsigned int v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_32(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  if (v2 != v3)
  {
    uint64_t v5 = (uint64_t)(a2 + 2);
    do
    {
      HintConverter::operator()(v2, (uint64_t)&v17);
      unint64_t v6 = a2[1];
      unint64_t v7 = a2[2];
      if (v6 >= v7)
      {
        uint64_t v8 = (uint64_t)(v6 - *a2) >> 5;
        unint64_t v9 = v8 + 1;
        if ((unint64_t)(v8 + 1) >> 59) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v10 = v7 - *a2;
        if (v10 >> 4 > v9) {
          unint64_t v9 = v10 >> 4;
        }
        if ((unint64_t)v10 >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v9;
        }
        void v20[4] = v5;
        long long v12 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<vs::tlv::RemoteNumberListItem>>(v5, v11);
        uint64_t v13 = &v12[32 * v8];
        v20[0] = v12;
        v20[1] = v13;
        v20[3] = &v12[32 * v14];
        *(_DWORD *)uint64_t v13 = v17;
        *((void *)v13 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
        *((void *)v13 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = 0;
        *((void *)v13 + 1) = 0;
        *(_OWORD *)(v13 + 8) = *(_OWORD *)__p;
        *((void *)v13 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = v19;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v19 = 0;
        void v20[2] = v13 + 32;
        std::vector<nas::tlv::C2KEVDOHintItem>::__swap_out_circular_buffer(a2, v20);
        uint64_t v15 = a2[1];
        std::__split_buffer<at::tlv::CommandCallback>::~__split_buffer((uint64_t)v20);
        unint64_t v16 = __p[0];
        a2[1] = v15;
        if (v16)
        {
          __p[1] = v16;
          operator delete(v16);
        }
      }
      else
      {
        *(_DWORD *)unint64_t v6 = v17;
        *(void *)(v6 + 16) = 0;
        *(void *)(v6 + 24) = 0;
        *(void *)(v6 + 8) = 0;
        *(_OWORD *)(v6 + 8) = *(_OWORD *)__p;
        *(void *)(v6 + 24) = v19;
        a2[1] = v6 + 32;
      }
      v2 += 20;
    }
    while (v2 != v3);
  }
}

void sub_22241CDE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *__copy_helper_block_e8_32c58_ZTSNSt3__16vectorI16SystemRecordEVDONS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c58_ZTSNSt3__16vectorI16SystemRecordEVDONS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

char ***___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_34(char ***result, char **a2)
{
  uint64_t v2 = (unsigned int *)result[4];
  uint64_t v3 = (unsigned int *)result[5];
  unint64_t v7 = a2;
  while (v2 != v3)
  {
    __int16 v4 = *((_WORD *)v2 + 4);
    unint64_t v5 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int16 *)v2 + 3) << 48);
    __int16 v6 = v4;
    CFIndex result = std::back_insert_iterator<std::vector<nas::tlv::GSMHintItem>>::operator=[abi:ne180100](&v7, (uint64_t *)&v5);
    uint64_t v2 = (unsigned int *)((char *)v2 + 10);
  }
  return result;
}

void *__copy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordGSMNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 1));
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordGSMNS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

char ***___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_36(char ***result, char **a2)
{
  uint64_t v2 = (unsigned int *)result[4];
  uint64_t v3 = (unsigned int *)result[5];
  unint64_t v7 = a2;
  while (v2 != v3)
  {
    __int16 v4 = *((_WORD *)v2 + 4);
    unint64_t v5 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int16 *)v2 + 3) << 48);
    __int16 v6 = v4;
    CFIndex result = std::back_insert_iterator<std::vector<nas::tlv::GSMHintItem>>::operator=[abi:ne180100](&v7, (uint64_t *)&v5);
    uint64_t v2 = (unsigned int *)((char *)v2 + 10);
  }
  return result;
}

void ___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_40(uint64_t a1, unint64_t **a2)
{
  uint64_t v2 = *(unsigned int **)(a1 + 32);
  uint64_t v3 = *(unsigned int **)(a1 + 40);
  if (v2 != v3)
  {
    unint64_t v5 = a2 + 2;
    __int16 v6 = a2[1];
    do
    {
      if (*((unsigned char *)v2 + 14)) {
        unint64_t v7 = (unint64_t)*((unsigned __int8 *)v2 + 13) << 40;
      }
      else {
        unint64_t v7 = 0;
      }
      unint64_t v8 = v2[2] | ((unint64_t)*((unsigned __int8 *)v2 + 12) << 32) | v7;
      unint64_t v9 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32);
      if ((unint64_t)v6 >= *v5)
      {
        uint64_t v10 = ((char *)v6 - (char *)*a2) >> 4;
        if ((unint64_t)(v10 + 1) >> 60) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        uint64_t v11 = *v5 - (void)*a2;
        uint64_t v12 = v11 >> 3;
        if (v11 >> 3 <= (unint64_t)(v10 + 1)) {
          uint64_t v12 = v10 + 1;
        }
        if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v13 = v12;
        }
        if (v13) {
          uint64_t v14 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<std::array<unsigned char,16ul>>>((uint64_t)v5, v13);
        }
        else {
          uint64_t v14 = 0;
        }
        uint64_t v15 = (unint64_t *)&v14[16 * v10];
        *uint64_t v15 = v9;
        v15[1] = v8;
        int v17 = *a2;
        unint64_t v16 = a2[1];
        char v18 = v15;
        if (v16 != *a2)
        {
          do
          {
            unint64_t v19 = *(v16 - 2);
            v16 -= 2;
            unint64_t v20 = *(unint64_t *)((char *)v16 + 6);
            *(v18 - QMIDataContextIPAggregator::getAPNObserver(this - 2) = v19;
            v18 -= 2;
            *(unint64_t *)((char *)v18 + 6) = v20;
          }
          while (v16 != v17);
          unint64_t v16 = *a2;
        }
        __int16 v6 = v15 + 2;
        *a2 = v18;
        a2[1] = v15 + 2;
        a2[2] = (unint64_t *)&v14[16 * v13];
        if (v16) {
          operator delete(v16);
        }
      }
      else
      {
        *__int16 v6 = v9;
        v6[1] = v8;
        v6 += 2;
      }
      a2[1] = v6;
      v2 += 4;
    }
    while (v2 != v3);
  }
}

void *__copy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordLTENS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 4);
}

void __destroy_helper_block_e8_32c57_ZTSNSt3__16vectorI15SystemRecordLTENS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

char ***___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_42(char ***result, char **a2)
{
  uint64_t v2 = (unsigned int *)result[4];
  uint64_t v3 = (unsigned int *)result[5];
  unint64_t v7 = a2;
  while (v2 != v3)
  {
    __int16 v4 = *((_WORD *)v2 + 4);
    unint64_t v5 = *v2 | ((unint64_t)*((unsigned __int8 *)v2 + 4) << 32) | ((unint64_t)*((unsigned __int16 *)v2 + 3) << 48);
    __int16 v6 = v4;
    CFIndex result = std::back_insert_iterator<std::vector<nas::tlv::GSMHintItem>>::operator=[abi:ne180100](&v7, (uint64_t *)&v5);
    uint64_t v2 = (unsigned int *)((char *)v2 + 10);
  }
  return result;
}

void *___ZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEE_block_invoke_46(void *result, void *a2)
{
  uint64_t v3 = (__int16 *)result[4];
  uint64_t v2 = (__int16 *)result[5];
  if (v3 != v2)
  {
    CFIndex result = a2 + 2;
    unint64_t v5 = (char *)a2[1];
    uint64_t v22 = a2 + 2;
    uint64_t v23 = v2;
    do
    {
      __int16 v6 = *v3;
      __int16 v7 = v3[1];
      __int16 v8 = v3[2];
      int v9 = *((_DWORD *)v3 + 2);
      __int16 v10 = v3[6];
      char v11 = *((unsigned char *)v3 + 14);
      int v12 = *((_DWORD *)v3 + 4);
      if ((unint64_t)v5 >= *result)
      {
        unint64_t v13 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)&v5[-*a2] >> 2);
        unint64_t v14 = v13 + 1;
        if (v13 + 1 > 0xCCCCCCCCCCCCCCCLL) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        if (0x999999999999999ALL * ((uint64_t)(*result - *a2) >> 2) > v14) {
          unint64_t v14 = 0x999999999999999ALL * ((uint64_t)(*result - *a2) >> 2);
        }
        if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*result - *a2) >> 2) >= 0x666666666666666) {
          unint64_t v15 = 0xCCCCCCCCCCCCCCCLL;
        }
        else {
          unint64_t v15 = v14;
        }
        if (v15) {
          unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::NRHintItem>>((uint64_t)result, v15);
        }
        else {
          unint64_t v16 = 0;
        }
        int v17 = &v16[20 * v13];
        *(_WORD *)int v17 = v6;
        *((_WORD *)v17 + 1) = v7;
        *((_WORD *)v17 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v8;
        *((_WORD *)v17 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = 0;
        *((_DWORD *)v17 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v9;
        *((_WORD *)v17 + 6) = v10;
        v17[14] = v11;
        void v17[15] = 0;
        *((_DWORD *)v17 + 4) = v12;
        unint64_t v19 = (char *)*a2;
        char v18 = (char *)a2[1];
        unint64_t v20 = v17;
        if (v18 != (char *)*a2)
        {
          do
          {
            long long v21 = *(_OWORD *)(v18 - 20);
            *((_DWORD *)v20 - 1) = *((_DWORD *)v18 - 1);
            *(_OWORD *)(v20 - 20) = v21;
            v20 -= 20;
            v18 -= 20;
          }
          while (v18 != v19);
          char v18 = (char *)*a2;
        }
        unint64_t v5 = v17 + 20;
        *a2 = v20;
        a2[1] = v17 + 20;
        a2[2] = &v16[20 * v15];
        if (v18) {
          operator delete(v18);
        }
        CFIndex result = v22;
        uint64_t v2 = v23;
      }
      else
      {
        *(_WORD *)unint64_t v5 = v6;
        *((_WORD *)v5 + 1) = v7;
        *((_WORD *)v5 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v8;
        *((_WORD *)v5 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = 0;
        *((_DWORD *)v5 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v9;
        *((_WORD *)v5 + 6) = v10;
        v5[14] = v11;
        v5[15] = 0;
        *((_DWORD *)v5 + 4) = v12;
        v5 += 20;
      }
      a2[1] = v5;
      v3 += 10;
    }
    while (v3 != v2);
  }
  return result;
}

void *__copy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecordNRNS_9allocatorIS1_EEEE(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2));
}

void __destroy_helper_block_e8_32c56_ZTSNSt3__16vectorI14SystemRecordNRNS_9allocatorIS1_EEEE(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void QMICellMonitorCommandDriver::sendStatusHint(uint64_t a1, uint64_t a2, unsigned int a3, uint64_t *a4)
{
  subscriber::makeSimSlotRange();
  unint64_t v5 = v17;
  if (v17 != v18)
  {
    while ((v19(*v5) & 1) == 0)
    {
      if (++v5 == v18)
      {
        unint64_t v5 = v18;
        break;
      }
    }
    while (v5 != v18)
    {
      unsigned int v6 = *v5 == 1;
      if (*v5 == 2) {
        unsigned int v6 = 2;
      }
      if (*v5 == 3) {
        uint64_t v7 = 3;
      }
      else {
        uint64_t v7 = v6;
      }
      unint64_t v20 = 0;
      long long v21 = 0;
      uint64_t v22 = 0;
      v23[0] = (void **)&v20;
      uint64_t v9 = *a4;
      uint64_t v8 = a4[1];
      int64_t v10 = v8 - *a4;
      if (v8 != *a4)
      {
        v23[1] = 0;
        if (v10 < 0) {
          std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
        }
        char v11 = (char *)operator new(v10);
        uint64_t v12 = 0;
        unint64_t v20 = v11;
        long long v21 = v11;
        uint64_t v22 = &v11[64 * (v10 >> 6)];
        do
        {
          uint64_t v13 = MCC::MCC();
          MCC::MCC((MCC *)(v13 + 32), (const MCC *)(v9 + v12 + 32));
          v12 += 64;
        }
        while (v9 + v12 != v8);
        long long v21 = &v11[v12];
      }
      (*(void (**)(uint64_t, uint64_t, void, char **))(*(void *)a1 + 80))(a1, v7, a3, &v20);
      v23[0] = (void **)&v20;
      std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100](v23);
      unint64_t v14 = v5 + 1;
      unint64_t v5 = v18;
      if (v14 != v18)
      {
        unint64_t v5 = v14;
        while ((v19(*v5) & 1) == 0)
        {
          if (++v5 == v18)
          {
            unint64_t v5 = v18;
            break;
          }
        }
      }
    }
  }
}

void sub_22241D514(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, ...)
{
  va_start(va, a11);
  std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100]((void ***)va);
  _Unwind_Resume(a1);
}

void QMICellMonitorCommandDriver::sendStatusHintForSlot(uint64_t a1, uint64_t a2, int a3)
{
  memset(v11, 0, sizeof(v11));
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v11);
  uint64_t v6 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 88) + 16))(*(void *)(a1 + 88), a2);
  v9[0] = MEMORY[0x263EF8330];
  v9[1] = 0x40000000;
  _OWORD v9[2] = ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke;
  void v9[3] = &__block_descriptor_tmp_48_3;
  int v10 = a3;
  void v9[4] = v6;
  uint64_t v7 = qmi::MutableMessageBase::getTLV<nas::tlv::StatusType>((uint64_t)v11);
  ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke((uint64_t)v9, v7);
  if ((a2 - 1) >= 3) {
    LODWORD(aQMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  }
  qmi::ClientRouter::get();
  qmi::ClientRouter::SendProxy::SendProxy<nas::FrequencyHints::Request>(&v8, a2);
}

void sub_22241D7A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::__shared_weak_count *a27)
{
  if (a27) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a27);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v27);
  uint64_t v29 = a10;
  a10 = 0;
  if (v29) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v29);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a17);
  _Unwind_Resume(a1);
}

void ___ZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS3_9allocatorIS5_EEEE_block_invoke(uint64_t a1, unsigned char *a2)
{
  uint64_t v8 = *MEMORY[0x263EF8340];
  unsigned int v3 = *(_DWORD *)(a1 + 40) - 1;
  if (v3 <= 5) {
    *a2 = 0x40305020100uLL >> (8 * v3);
  }
  __int16 v4 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = nas::asString(*a2);
    int v6 = 136315138;
    uint64_t v7 = v5;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I Sending LASD status hint %s", (uint8_t *)&v6, 0xCu);
  }
}

void NrCell::~NrCell(void **this)
{
  if (*((char *)this + 71) < 0) {
    operator delete(this[6]);
  }
  if (*((char *)this + 39) < 0) {
    operator delete(this[2]);
  }
}

void std::vector<NrCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    unint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      unint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I6NrCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(void *)(a1 + 128) = 0;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(unsigned char *)(a1 + 106) = 0;
  *(unsigned char *)(a1 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  return a1;
}

void sub_22241D9E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NrCell>>(unint64_t a1)
{
  if (a1 >= 0x1E1E1E1E1E1E1E2) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(136 * a1);
}

uint64_t std::__split_buffer<NrCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *std::vector<SystemRecord1x>::__init_with_size[abi:ne180100]<SystemRecord1x*,SystemRecord1x*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >> 61) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    CFIndex result = operator new(8 * a4);
    uint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    _DWORD v5[2] = &result[a4];
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFIndex result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22241DB24(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t ___ZZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS3_9allocatorIS5_EEEENS4_I16SystemRecordEVDONS6_IS9_EEEENS4_I15SystemRecordGSMNS6_ISC_EEEESE_NS4_I15SystemRecordLTENS6_ISF_EEEESE_NS4_I14SystemRecordNRNS6_ISI_EEEEENK3__0clERN3nas14FrequencyHints7RequestE_block_invoke(uint64_t result, BOOL *a2)
{
  *a2 = **(void **)(result + 32) == 0;
  return result;
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::MessageComplete>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned __int8 *)*v1 + 8) != 208)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageComplete>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageComplete>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageComplete>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  CFIndex result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::MessageComplete>::clone()
{
}

void *std::vector<SystemRecordEVDO>::__init_with_size[abi:ne180100]<SystemRecordEVDO*,SystemRecordEVDO*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v5 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    CFIndex result = operator new(20 * a4);
    uint64_t v8 = result;
    *uint64_t v5 = result;
    v5[1] = result;
    _DWORD v5[2] = (char *)result + 20 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFIndex result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22241DE74(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char ***std::back_insert_iterator<std::vector<nas::tlv::GSMHintItem>>::operator=[abi:ne180100](char ***a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = (unint64_t)(*a1)[1];
  int v6 = *a1;
  unint64_t v9 = (unint64_t)v6[2];
  uint64_t v7 = (uint64_t)(v6 + 2);
  unint64_t v8 = v9;
  if (v5 >= v9)
  {
    unint64_t v12 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v5 - (void)*v4) >> 1);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x1999999999999999) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    unint64_t v14 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v8 - (void)*v4) >> 1);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0xCCCCCCCCCCCCCCCLL) {
      unint64_t v15 = 0x1999999999999999;
    }
    else {
      unint64_t v15 = v13;
    }
    if (v15) {
      unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::GSMHintItem>>(v7, v15);
    }
    else {
      unint64_t v16 = 0;
    }
    int v17 = &v16[10 * v12];
    char v18 = &v16[10 * v15];
    uint64_t v19 = *a2;
    *((_WORD *)v17 + 4) = *((_WORD *)a2 + 4);
    *(void *)int v17 = v19;
    char v11 = v17 + 10;
    long long v21 = *v4;
    unint64_t v20 = v4[1];
    if (v20 != *v4)
    {
      do
      {
        uint64_t v22 = *(void *)(v20 - 10);
        v20 -= 10;
        __int16 v23 = *((_WORD *)v20 + 4);
        *(void *)(v17 - 10) = v22;
        v17 -= 10;
        *((_WORD *)v17 + 4) = v23;
      }
      while (v20 != v21);
      unint64_t v20 = *v4;
    }
    *uint64_t v4 = v17;
    v4[1] = v11;
    void v4[2] = v18;
    if (v20) {
      operator delete(v20);
    }
  }
  else
  {
    uint64_t v10 = *a2;
    *(_WORD *)(v5 + 8) = *((_WORD *)a2 + 4);
    *(void *)unint64_t v5 = v10;
    char v11 = (char *)(v5 + 10);
  }
  v4[1] = v11;
  return a1;
}

void *std::vector<SystemRecordGSM>::__init_with_size[abi:ne180100]<SystemRecordGSM*,SystemRecordGSM*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >= 0x199999999999999ALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    CFIndex result = operator new(10 * a4);
    unint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    _DWORD v5[2] = (char *)result + 10 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFIndex result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22241E054(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<SystemRecordLTE>::__init_with_size[abi:ne180100]<SystemRecordLTE*,SystemRecordLTE*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >> 60) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    CFIndex result = operator new(16 * a4);
    unint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    _DWORD v5[2] = &result[2 * a4];
    uint64_t v9 = a3 - (void)a2;
    if (v9) {
      CFIndex result = memcpy(result, a2, v9 - 1);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22241E0F8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<SystemRecordNR>::__init_with_size[abi:ne180100]<SystemRecordNR*,SystemRecordNR*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v5 = result;
    if (a4 >= 0xCCCCCCCCCCCCCCDLL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    CFIndex result = operator new(20 * a4);
    unint64_t v8 = result;
    *unint64_t v5 = result;
    v5[1] = result;
    _DWORD v5[2] = (char *)result + 20 * a4;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      CFIndex result = memcpy(result, a2, v9);
    }
    v5[1] = (char *)v8 + v9;
  }
  return result;
}

void sub_22241E1B0(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void std::shared_ptr<QMICellMonitorCommandDriver>::shared_ptr[abi:ne180100]<QMICellMonitorCommandDriver,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1},void>(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_22241E298(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1}::operator() const(QMICellMonitorCommandDriver*)::{lambda(void *)#1}::__invoke);
  __cxa_rethrow();
}

void sub_22241E2C0(_Unwind_Exception *a1)
{
}

void std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::~__shared_ptr_pointer(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::__on_zero_shared(uint64_t a1)
{
}

uint64_t std::__shared_ptr_pointer<QMICellMonitorCommandDriver *,std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver *)#1},std::allocator<QMICellMonitorCommandDriver>>::__get_deleter(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t std::shared_ptr<QMICellMonitorCommandDriver> ctu::SharedSynchronizable<CellMonitorCommandDriver>::make_shared_ptr<QMICellMonitorCommandDriver>(QMICellMonitorCommandDriver*)::{lambda(QMICellMonitorCommandDriver*)#1}::operator() const(QMICellMonitorCommandDriver*)::{lambda(void *)#1}::__invoke(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void SimInstanceLoggable<QMICellMonitorCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::~SimInstanceLoggable()
{
}

uint64_t SimInstanceLoggable<QMICellMonitorCommandDriver,ctu::OsLogLogger,subscriber::SimSlot>::getLoggerForSlot(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

qmi::NotifyHelper *std::unique_ptr<qmi::NotifyHelper>::reset[abi:ne180100](qmi::NotifyHelper **a1, qmi::NotifyHelper *a2)
{
  CFIndex result = *a1;
  *a1 = a2;
  if (result)
  {
    qmi::NotifyHelper::~NotifyHelper(result);
    JUMPOUT(0x223C9A950);
  }
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  CFIndex result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *CFIndex result = &unk_26D4C5E30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C5E30;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_2>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_2 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_2 &&,QMIServiceMsg const)>::target_type()
{
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v4 + 24))
  {
    unint64_t v5 = *(void **)v4;
    if (*(void *)v4)
    {
      uint64_t v6 = *(void *)(v4 + 8);
      uint64_t v7 = *(void **)v4;
      if ((void *)v6 != v5)
      {
        do
        {
          v6 -= 104;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v6);
        }
        while ((void *)v6 != v5);
        uint64_t v7 = *(void **)v4;
      }
      *(void *)(v4 + 8) = v5;
      operator delete(v7);
      *(void *)uint64_t v4 = 0;
      *(void *)(v4 + 8) = 0;
      *(void *)(v4 + 16) = 0;
    }
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
  }
  else
  {
    *(void *)uint64_t v4 = 0;
    *(void *)(v4 + 8) = 0;
    *(void *)(v4 + 16) = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    uint64_t v44 = 0;
    *(unsigned char *)(v4 + 24) = 1;
  }
  *(void *)&long long v53 = &v42;
  std::vector<Cdma1xCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v53);
  unint64_t v8 = *(char ***)(a1 + 32);
  if (!*((unsigned char *)v8 + 24)) {
    goto LABEL_47;
  }
  uint64_t v9 = a2[1] - *a2;
  unint64_t v10 = v9 >> 5;
  char v11 = *v8;
  uint64_t v12 = (uint64_t)v8[1];
  unint64_t v13 = 0x4EC4EC4EC4EC4EC5 * ((v12 - (uint64_t)*v8) >> 3);
  unint64_t v14 = (v9 >> 5) - v13;
  if (v9 >> 5 <= v13)
  {
    if (v9 >> 5 < v13)
    {
      uint64_t v32 = &v11[104 * v10];
      while ((char *)v12 != v32)
      {
        v12 -= 104;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v8[1] = v32;
    }
  }
  else
  {
    unint64_t v15 = v8[2];
    if (0x4EC4EC4EC4EC4EC5 * ((uint64_t)&v15[-v12] >> 3) >= v14)
    {
      unint64_t v33 = v12 + 104 * v14;
      uint64_t v34 = 104 * v10 - 8 * ((v12 - (uint64_t)*v8) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 104;
        v34 -= 104;
      }
      while (v34);
      v8[1] = (char *)v33;
    }
    else
    {
      if ((unint64_t)v9 >= 0x4EC4EC4EC4EC4EC1) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0x4EC4EC4EC4EC4EC5 * ((v15 - v11) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = v10;
      }
      unint64_t v18 = v16 >= 0x13B13B13B13B13BLL ? 0x276276276276276 : v17;
      long long v46 = v8 + 2;
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<Cdma1xCell>>(v18);
      unint64_t v20 = &v19[104 * v13];
      uint64_t v42 = v19;
      uint64_t v43 = v20;
      uint64_t v44 = v20;
      uint64_t v45 = &v19[104 * v21];
      uint64_t v22 = 104 * v10;
      __int16 v23 = &v19[104 * v10];
      unint64_t v24 = v22 - 104 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 104;
        v24 -= 104;
      }
      while (v24);
      uint64_t v44 = v23;
      long long v26 = *v8;
      long long v25 = v8[1];
      uint64_t v27 = v43;
      if (v25 == *v8)
      {
        uint64_t v31 = v8[1];
      }
      else
      {
        uint64_t v28 = 0;
        do
        {
          *(_WORD *)&v27[v28 - 104] = *(_WORD *)&v25[v28 - 104];
          MCC::MCC();
          MCC::MCC((MCC *)&v27[v28 - 64], (const MCC *)&v25[v28 - 64]);
          uint64_t v29 = &v27[v28];
          long long v30 = *(_OWORD *)&v25[v28 - 32];
          *(_OWORD *)(v29 - 2QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_OWORD *)&v25[v28 - 22];
          *((_OWORD *)v29 - QMIDataContextIPAggregator::getAPNObserver(this - 2) = v30;
          v28 -= 104;
        }
        while (&v25[v28] != v26);
        uint64_t v31 = *v8;
        long long v25 = v8[1];
        v27 += v28;
        __int16 v23 = (char *)v44;
      }
      *unint64_t v8 = v27;
      uint64_t v42 = v31;
      uint64_t v43 = v31;
      v8[1] = v23;
      uint64_t v44 = v25;
      uint64_t v35 = v8[2];
      _DWORD v8[2] = v45;
      uint64_t v45 = v35;
      std::__split_buffer<Cdma1xCell>::~__split_buffer((uint64_t)&v42);
    }
  }
  uint64_t v36 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v36 + 24)) {
LABEL_47:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v37 = *a2;
  uint64_t v38 = a2[1];
  if (*a2 != v38)
  {
    uint64_t v39 = *(_WORD **)v36;
    do
    {
      long long v53 = 0u;
      long long v54 = 0u;
      MEMORY[0x223C99930](&v53, *(unsigned __int16 *)(v37 + 2));
      *(_OWORD *)std::string __p = 0u;
      long long v52 = 0u;
      MEMORY[0x223C99980](__p, *(unsigned __int16 *)(v37 + 4), &v53);
      LOWORD(v4QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_WORD *)v37;
      MCC::MCC();
      MCC::MCC((MCC *)&v47, (const MCC *)__p);
      v50[0] = *(unsigned char *)(v37 + 6);
      *(void *)&void v50[2] = *(void *)(v37 + 8);
      *(void *)&v50[12] = *(void *)(v37 + 16);
      *(_WORD *)&v50[20] = *(_WORD *)(v37 + 24);
      *(_DWORD *)&v50[22] = *(_DWORD *)(v37 + 26);
      if (SHIBYTE(v52) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(*((void **)&v53 + 1));
      }
      *uint64_t v39 = (_WORD)v42;
      MCC::operator=();
      uint64_t v40 = v39 + 20;
      MCC::operator=();
      long long v41 = *(_OWORD *)v50;
      *(_OWORD *)(v40 + 21) = *(_OWORD *)&v50[10];
      *((_OWORD *)v40 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v41;
      if (v49 < 0) {
        operator delete(v48);
      }
      if (SHIBYTE(v46) < 0) {
        operator delete(v44);
      }
      v37 += 32;
      uint64_t v39 = v40 + 32;
    }
    while (v37 != v38);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_2(uint64_t a1, uint64_t *a2)
{
  uint64_t v47 = *MEMORY[0x263EF8340];
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (uint64_t *)(v4 + 32);
  if (*(unsigned char *)(v4 + 56))
  {
    if (*v5)
    {
      std::vector<CdmaEvdoCell>::__clear[abi:ne180100](v5);
      operator delete((void *)*v5);
      *unint64_t v5 = 0;
      v5[1] = 0;
      _DWORD v5[2] = 0;
    }
    *unint64_t v5 = 0;
    v5[1] = 0;
    _DWORD v5[2] = 0;
    *(void *)uint64_t v44 = 0;
    *(void *)&v44[8] = 0;
    uint64_t v43 = 0;
  }
  else
  {
    *unint64_t v5 = 0;
    *(void *)(v4 + 40) = 0;
    *(void *)(v4 + 48) = 0;
    *(void *)uint64_t v44 = 0;
    *(void *)&v44[8] = 0;
    uint64_t v43 = 0;
    *(unsigned char *)(v4 + 56) = 1;
  }
  __p[0] = &v43;
  std::vector<CdmaEvdoCell>::__destroy_vector::operator()[abi:ne180100]((void ***)__p);
  uint64_t v6 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v6 + 56)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  unint64_t v7 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2);
  uint64_t v8 = *(void *)(v6 + 32);
  uint64_t v9 = *(void *)(v6 + 40);
  unint64_t v10 = 0x8E38E38E38E38E39 * ((v9 - v8) >> 3);
  unint64_t v11 = v7 - v10;
  if (v7 <= v10)
  {
    if (v7 >= v10) {
      goto LABEL_30;
    }
    uint64_t v31 = v8 + 8 * ((a2[1] - *a2) >> 2);
    while (v9 != v31)
    {
      if (*(char *)(v9 - 33) < 0) {
        operator delete(*(void **)(v9 - 56));
      }
      v9 -= 72;
    }
    goto LABEL_29;
  }
  uint64_t v12 = *(void *)(v6 + 48);
  if (0x8E38E38E38E38E39 * ((v12 - v9) >> 3) >= v11)
  {
    uint64_t v31 = v9 + 72 * v11;
    uint64_t v32 = 8 * ((a2[1] - *a2) >> 2) - 8 * ((v9 - v8) >> 3);
    do
    {
      *(void *)(v9 + 64) = 0;
      *(_OWORD *)(v9 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
      *(_OWORD *)(v9 + 48) = 0u;
      *(_OWORD *)uint64_t v9 = 0u;
      *(_OWORD *)(v9 + 16) = 0u;
      MCC::MCC((MCC *)(v9 + 8));
      *(unsigned char *)(v9 + 40) = 0;
      v9 += 72;
      v32 -= 72;
    }
    while (v32);
LABEL_29:
    *(void *)(v6 + 40) = v31;
    goto LABEL_30;
  }
  if (v7 > 0x38E38E38E38E38ELL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  unint64_t v13 = 0x8E38E38E38E38E39 * ((v12 - v8) >> 3);
  uint64_t v14 = 2 * v13;
  if (2 * v13 <= v7) {
    uint64_t v14 = 0x8E38E38E38E38E39 * ((a2[1] - *a2) >> 2);
  }
  if (v13 >= 0x1C71C71C71C71C7) {
    unint64_t v15 = 0x38E38E38E38E38ELL;
  }
  else {
    unint64_t v15 = v14;
  }
  uint64_t v45 = v6 + 48;
  unint64_t v16 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<CdmaEvdoCell>>(v15);
  uint64_t v17 = &v16[72 * v10];
  *(void *)uint64_t v44 = v17;
  *(void *)&v44[8] = v17;
  uint64_t v43 = v16;
  *(void *)&v44[16] = &v16[72 * v18];
  uint64_t v19 = 9 * v7;
  unint64_t v20 = &v16[72 * v7];
  uint64_t v21 = 8 * v19 - 72 * v10;
  do
  {
    *((void *)v17 + 8) = 0;
    *((_OWORD *)v17 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
    *((_OWORD *)v17 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = 0u;
    *(_OWORD *)uint64_t v17 = 0u;
    *((_OWORD *)v17 + 1) = 0u;
    MCC::MCC((MCC *)(v17 + 8));
    v17[40] = 0;
    v17 += 72;
    v21 -= 72;
  }
  while (v21);
  *(void *)&v44[8] = v20;
  uint64_t v22 = *(void *)(v6 + 32);
  uint64_t v23 = *(void *)(v6 + 40);
  uint64_t v24 = *(void *)v44;
  *(void *)&long long v42 = *(void *)v44;
  *((void *)&v42 + 1) = *(void *)v44;
  long long v41 = v42;
  __p[0] = (void *)(v6 + 48);
  __p[1] = &v41;
  long long v40 = (unint64_t)&v42;
  if (v23 != v22)
  {
    uint64_t v25 = v23;
    do
    {
      __int16 v26 = *(_WORD *)(v25 - 72);
      v25 -= 72;
      *(_WORD *)(v24 - 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = v26;
      MCC::MCC();
      long long v27 = *(_OWORD *)(v23 - 18);
      *(_OWORD *)(v24 - 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_OWORD *)(v23 - 32);
      *(_OWORD *)(v24 - 18) = v27;
      uint64_t v24 = *((void *)&v42 + 1) - 72;
      *((void *)&v42 + 1) -= 72;
      uint64_t v23 = v25;
    }
    while (v25 != v22);
  }
  BYTE8(v40) = 1;
  std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,std::reverse_iterator<CdmaEvdoCell*>>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)__p);
  uint64_t v28 = *(void *)(v6 + 48);
  long long v29 = *(_OWORD *)&v44[8];
  long long v30 = *(_OWORD *)(v6 + 32);
  *(void *)(v6 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = v24;
  *(_OWORD *)uint64_t v44 = v30;
  *(_OWORD *)(v6 + 40) = v29;
  *(void *)&v44[16] = v28;
  uint64_t v43 = (char *)v30;
  std::__split_buffer<CdmaEvdoCell>::~__split_buffer((uint64_t)&v43);
LABEL_30:
  uint64_t v33 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v33 + 56)) {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v34 = *a2;
  uint64_t v35 = a2[1];
  if (*a2 != v35)
  {
    uint64_t v36 = *(_WORD **)(v33 + 32);
    do
    {
      *(_OWORD *)std::string __p = 0u;
      long long v40 = 0u;
      MEMORY[0x223C99930](__p, *(unsigned __int16 *)(v34 + 2));
      LOWORD(v4QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = *(_WORD *)v34;
      MCC::MCC();
      v46[0] = *(unsigned char *)(v34 + 4);
      *(_WORD *)&v46[2] = *(_WORD *)(v34 + 6);
      *(_OWORD *)&void v46[4] = *(_OWORD *)(v34 + 8);
      *(void *)&v46[20] = *(void *)(v34 + 24);
      *(_WORD *)&v46[28] = *(_WORD *)(v34 + 32);
      if (SHIBYTE(v40) < 0) {
        operator delete(__p[1]);
      }
      *uint64_t v36 = (_WORD)v43;
      uint64_t v37 = v36 + 4;
      MCC::operator=();
      long long v38 = *(_OWORD *)v46;
      *(_OWORD *)(v37 + 2QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = *(_OWORD *)&v46[14];
      *((_OWORD *)v37 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v38;
      if (SHIBYTE(v45) < 0) {
        operator delete(*(void **)&v44[8]);
      }
      v34 += 36;
      uint64_t v36 = v37 + 32;
    }
    while (v34 != v35);
  }
}

void sub_22241ED90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_3(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (void **)(v4 + 64);
  if (*(unsigned char *)(v4 + 88))
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = *(void *)(v4 + 72);
      uint64_t v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 96;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        uint64_t v8 = *v5;
      }
      *(void *)(v4 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = v6;
      operator delete(v8);
      *unint64_t v5 = 0;
      *(void *)(v4 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
      *(void *)(v4 + 80) = 0;
    }
    *unint64_t v5 = 0;
    *(void *)(v4 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    *(void *)(v4 + 80) = 0;
    v42[0] = 0;
    v42[1] = 0;
    long long v41 = 0;
  }
  else
  {
    *unint64_t v5 = 0;
    *(void *)(v4 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    *(void *)(v4 + 80) = 0;
    v42[0] = 0;
    v42[1] = 0;
    long long v41 = 0;
    *(unsigned char *)(v4 + 88) = 1;
  }
  *(void *)&long long v51 = &v41;
  std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  uint64_t v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[5].i8[8]) {
    goto LABEL_47;
  }
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
  uint64_t v11 = v9[4].i64[0];
  uint64_t v12 = v9[4].i64[1];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 5);
  unint64_t v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      uint64_t v31 = v11 + 0x24924924924924A0 * ((a2[1] - *a2) >> 2);
      while (v12 != v31)
      {
        v12 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[4].i64[1] = v31;
    }
  }
  else
  {
    uint64_t v15 = v9[5].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 5) >= v14)
    {
      unint64_t v32 = v12 + 96 * v14;
      uint64_t v33 = 0x24924924924924A0 * ((a2[1] - *a2) >> 2) - 32 * ((v12 - v11) >> 5);
      do
      {
        _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 96;
        v33 -= 96;
      }
      while (v33);
      v9[4].i64[1] = v32;
    }
    else
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
      }
      unint64_t v18 = v16 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v17;
      uint64_t v44 = v9 + 5;
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(v18);
      unint64_t v20 = &v19[96 * v13];
      long long v41 = v19;
      v42[0] = v20;
      v42[1] = v20;
      uint64_t v43 = &v19[96 * v21];
      uint64_t v22 = &v19[96 * v10];
      uint64_t v23 = 96 * v10 - 96 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 96;
        v23 -= 96;
      }
      while (v23);
      v42[1] = v22;
      uint64_t v25 = v9[4].i64[0];
      unint64_t v24 = v9[4].u64[1];
      __int16 v26 = (char *)v42[0];
      if (v24 == v25)
      {
        int64x2_t v30 = vdupq_n_s64(v24);
      }
      else
      {
        uint64_t v27 = 0;
        do
        {
          *(_WORD *)&v26[v27 - 96] = *(_WORD *)(v24 + v27 - 96);
          MCC::MCC();
          MCC::MCC((MCC *)&v26[v27 - 56], (const MCC *)(v24 + v27 - 56));
          uint64_t v28 = &v26[v27];
          long long v29 = *(_OWORD *)(v24 + v27 - 24);
          *((_DWORD *)v28 - QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_DWORD *)(v24 + v27 - 8);
          *(_OWORD *)(v28 - 24) = v29;
          v27 -= 96;
        }
        while (v24 + v27 != v25);
        int64x2_t v30 = v9[4];
        uint64_t v22 = (char *)v42[1];
        v26 += v27;
      }
      v9[4].i64[0] = (uint64_t)v26;
      v9[4].i64[1] = (uint64_t)v22;
      *(int64x2_t *)long long v42 = v30;
      uint64_t v34 = (char *)v9[5].i64[0];
      v9[5].i64[0] = (uint64_t)v43;
      uint64_t v43 = v34;
      long long v41 = (char *)v30.i64[0];
      std::__split_buffer<UmtsCell>::~__split_buffer((uint64_t)&v41);
    }
  }
  uint64_t v35 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v35 + 88)) {
LABEL_47:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v36 = *a2;
  uint64_t v37 = a2[1];
  if (*a2 != v37)
  {
    long long v38 = *(_WORD **)(v35 + 64);
    do
    {
      long long v51 = 0u;
      long long v52 = 0u;
      MEMORY[0x223C99930](&v51, *(unsigned __int16 *)(v36 + 2));
      *(_OWORD *)std::string __p = 0u;
      long long v50 = 0u;
      MEMORY[0x223C99980](__p, *(unsigned __int16 *)(v36 + 4), &v51);
      LOWORD(v41) = *(_WORD *)v36;
      MCC::MCC();
      MCC::MCC((MCC *)&v45, (const MCC *)__p);
      v48[0] = *(unsigned char *)(v36 + 6);
      *(_WORD *)&void v48[2] = *(_WORD *)(v36 + 8);
      *(_DWORD *)&v48[4] = *(_DWORD *)(v36 + 12);
      *(_DWORD *)&v48[8] = *(_DWORD *)(v36 + 16);
      *(void *)&v48[12] = *(void *)(v36 + 20);
      if (SHIBYTE(v50) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(*((void **)&v51 + 1));
      }
      _WORD *v38 = (_WORD)v41;
      MCC::operator=();
      uint64_t v39 = v38 + 20;
      MCC::operator=();
      long long v40 = *(_OWORD *)v48;
      *((_DWORD *)v39 + 1QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_DWORD *)&v48[16];
      *((_OWORD *)v39 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v40;
      if (v47 < 0) {
        operator delete(v46);
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(v42[1]);
      }
      v36 += 28;
      long long v38 = v39 + 28;
    }
    while (v36 != v37);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (void **)(v4 + 96);
  if (*(unsigned char *)(v4 + 120))
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = *(void *)(v4 + 104);
      uint64_t v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 88;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        uint64_t v8 = *v5;
      }
      *(void *)(v4 + 104) = v6;
      operator delete(v8);
      *unint64_t v5 = 0;
      *(void *)(v4 + 104) = 0;
      *(void *)(v4 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    }
    *unint64_t v5 = 0;
    *(void *)(v4 + 104) = 0;
    *(void *)(v4 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v39 = 0;
  }
  else
  {
    *unint64_t v5 = 0;
    *(void *)(v4 + 104) = 0;
    *(void *)(v4 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    v40[0] = 0;
    v40[1] = 0;
    uint64_t v39 = 0;
    *(unsigned char *)(v4 + 120) = 1;
  }
  *(void *)&long long v49 = &v39;
  std::vector<GsmCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v49);
  uint64_t v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[7].i8[8]) {
    goto LABEL_47;
  }
  unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
  uint64_t v11 = v9[6].i64[0];
  uint64_t v12 = v9[6].i64[1];
  unint64_t v13 = 0x2E8BA2E8BA2E8BA3 * ((v12 - v11) >> 3);
  unint64_t v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      uint64_t v30 = v11 - 0x5555555555555538 * ((a2[1] - *a2) >> 3);
      while (v12 != v30)
      {
        v12 -= 88;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[6].i64[1] = v30;
    }
  }
  else
  {
    uint64_t v15 = v9[7].i64[0];
    if (0x2E8BA2E8BA2E8BA3 * ((v15 - v12) >> 3) >= v14)
    {
      unint64_t v31 = v12 + 88 * v14;
      unint64_t v32 = 0xAAAAAAAAAAAAAAC8 * ((a2[1] - *a2) >> 3) - 8 * ((v12 - v11) >> 3);
      do
      {
        _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 88;
        v32 -= 88;
      }
      while (v32);
      v9[6].i64[1] = v31;
    }
    else
    {
      if (v10 > 0x2E8BA2E8BA2E8BALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0x2E8BA2E8BA2E8BA3 * ((v15 - v11) >> 3);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3);
      }
      unint64_t v18 = v16 >= 0x1745D1745D1745DLL ? 0x2E8BA2E8BA2E8BALL : v17;
      long long v42 = v9 + 7;
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<GsmCell>>(v18);
      uint64_t v20 = 88 * v13;
      uint64_t v21 = &v19[88 * v13];
      uint64_t v39 = v19;
      v40[0] = v21;
      v40[1] = v21;
      long long v41 = &v19[88 * v22];
      uint64_t v23 = &v19[88 * v10];
      unint64_t v24 = 88 * v10 - v20;
      do
      {
        _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_((uint64_t)v21);
        v21 += 88;
        v24 -= 88;
      }
      while (v24);
      v40[1] = v23;
      uint64_t v26 = v9[6].i64[0];
      unint64_t v25 = v9[6].u64[1];
      uint64_t v27 = (char *)v40[0];
      if (v25 == v26)
      {
        int64x2_t v29 = vdupq_n_s64(v25);
      }
      else
      {
        uint64_t v28 = 0;
        do
        {
          *(_WORD *)&v27[v28 - 88] = *(_WORD *)(v25 + v28 - 88);
          MCC::MCC();
          MCC::MCC((MCC *)&v27[v28 - 48], (const MCC *)(v25 + v28 - 48));
          *(_OWORD *)&v27[v28 - 16] = *(_OWORD *)(v25 + v28 - 16);
          v28 -= 88;
        }
        while (v25 + v28 != v26);
        int64x2_t v29 = v9[6];
        uint64_t v23 = (char *)v40[1];
        v27 += v28;
      }
      v9[6].i64[0] = (uint64_t)v27;
      v9[6].i64[1] = (uint64_t)v23;
      *(int64x2_t *)long long v40 = v29;
      uint64_t v33 = (char *)v9[7].i64[0];
      v9[7].i64[0] = (uint64_t)v41;
      long long v41 = v33;
      uint64_t v39 = (char *)v29.i64[0];
      std::__split_buffer<GsmCell>::~__split_buffer((uint64_t)&v39);
    }
  }
  uint64_t v34 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v34 + 120)) {
LABEL_47:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v35 = *a2;
  uint64_t v36 = a2[1];
  if (*a2 != v36)
  {
    uint64_t v37 = *(_WORD **)(v34 + 96);
    do
    {
      long long v49 = 0u;
      long long v50 = 0u;
      MEMORY[0x223C99930](&v49, *(unsigned __int16 *)(v35 + 2));
      *(_OWORD *)std::string __p = 0u;
      long long v48 = 0u;
      MEMORY[0x223C99980](__p, *(unsigned __int16 *)(v35 + 4), &v49);
      LOWORD(v39) = *(_WORD *)v35;
      MCC::MCC();
      MCC::MCC((MCC *)&v43, (const MCC *)__p);
      LOBYTE(v46) = *(unsigned char *)(v35 + 6);
      WORD1(v46) = *(_WORD *)(v35 + 8);
      DWORD1(v46) = *(_DWORD *)(v35 + 10);
      *((void *)&v46 + 1) = *(void *)(v35 + 16);
      if (SHIBYTE(v48) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(*((void **)&v49 + 1));
      }
      _WORD *v37 = (_WORD)v39;
      MCC::operator=();
      long long v38 = v37 + 20;
      MCC::operator=();
      *((_OWORD *)v38 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v46;
      if (v45 < 0) {
        operator delete(v44);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(v40[1]);
      }
      v35 += 24;
      uint64_t v37 = v38 + 24;
    }
    while (v35 != v36);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_5(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  unint64_t v5 = (void **)(v4 + 160);
  if (*(unsigned char *)(v4 + 184))
  {
    uint64_t v6 = *v5;
    if (*v5)
    {
      uint64_t v7 = *(void *)(v4 + 168);
      uint64_t v8 = *v5;
      if ((void *)v7 != v6)
      {
        do
        {
          v7 -= 96;
          std::__destroy_at[abi:ne180100]<NrCell,0>(v7);
        }
        while ((void *)v7 != v6);
        uint64_t v8 = *v5;
      }
      *(void *)(v4 + 168) = v6;
      operator delete(v8);
      *unint64_t v5 = 0;
      *(void *)(v4 + 168) = 0;
      *(void *)(v4 + 176) = 0;
    }
    *unint64_t v5 = 0;
    *(void *)(v4 + 168) = 0;
    *(void *)(v4 + 176) = 0;
    v42[0] = 0;
    v42[1] = 0;
    long long v41 = 0;
  }
  else
  {
    *unint64_t v5 = 0;
    *(void *)(v4 + 168) = 0;
    *(void *)(v4 + 176) = 0;
    v42[0] = 0;
    v42[1] = 0;
    long long v41 = 0;
    *(unsigned char *)(v4 + 184) = 1;
  }
  *(void *)&long long v51 = &v41;
  std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100]((void ***)&v51);
  uint64_t v9 = *(int64x2_t **)(a1 + 32);
  if (!v9[11].i8[8]) {
    goto LABEL_47;
  }
  unint64_t v10 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
  uint64_t v11 = v9[10].i64[0];
  uint64_t v12 = v9[10].i64[1];
  unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((v12 - v11) >> 5);
  unint64_t v14 = v10 - v13;
  if (v10 <= v13)
  {
    if (v10 < v13)
    {
      uint64_t v31 = v11 + 0x24924924924924A0 * ((a2[1] - *a2) >> 2);
      while (v12 != v31)
      {
        v12 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v12);
      }
      v9[10].i64[1] = v31;
    }
  }
  else
  {
    uint64_t v15 = v9[11].i64[0];
    if (0xAAAAAAAAAAAAAAABLL * ((v15 - v12) >> 5) >= v14)
    {
      unint64_t v32 = v12 + 96 * v14;
      uint64_t v33 = 0x24924924924924A0 * ((a2[1] - *a2) >> 2) - 32 * ((v12 - v11) >> 5);
      do
      {
        _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_(v12);
        v12 += 96;
        v33 -= 96;
      }
      while (v33);
      v9[10].i64[1] = v32;
    }
    else
    {
      if (v10 > 0x2AAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v16 = 0xAAAAAAAAAAAAAAABLL * ((v15 - v11) >> 5);
      uint64_t v17 = 2 * v16;
      if (2 * v16 <= v10) {
        uint64_t v17 = 0x6DB6DB6DB6DB6DB7 * ((a2[1] - *a2) >> 2);
      }
      unint64_t v18 = v16 >= 0x155555555555555 ? 0x2AAAAAAAAAAAAAALL : v17;
      uint64_t v44 = v9 + 11;
      uint64_t v19 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(v18);
      uint64_t v20 = &v19[96 * v13];
      long long v41 = v19;
      v42[0] = v20;
      v42[1] = v20;
      uint64_t v43 = &v19[96 * v21];
      uint64_t v22 = &v19[96 * v10];
      uint64_t v23 = 96 * v10 - 96 * v13;
      do
      {
        _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_((uint64_t)v20);
        v20 += 96;
        v23 -= 96;
      }
      while (v23);
      v42[1] = v22;
      uint64_t v25 = v9[10].i64[0];
      unint64_t v24 = v9[10].u64[1];
      uint64_t v26 = (char *)v42[0];
      if (v24 == v25)
      {
        int64x2_t v30 = vdupq_n_s64(v24);
      }
      else
      {
        uint64_t v27 = 0;
        do
        {
          *(_WORD *)&v26[v27 - 96] = *(_WORD *)(v24 + v27 - 96);
          MCC::MCC();
          MCC::MCC((MCC *)&v26[v27 - 56], (const MCC *)(v24 + v27 - 56));
          uint64_t v28 = &v26[v27];
          long long v29 = *(_OWORD *)(v24 + v27 - 24);
          *((_DWORD *)v28 - QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_DWORD *)(v24 + v27 - 8);
          *(_OWORD *)(v28 - 24) = v29;
          v27 -= 96;
        }
        while (v24 + v27 != v25);
        int64x2_t v30 = v9[10];
        uint64_t v22 = (char *)v42[1];
        v26 += v27;
      }
      v9[10].i64[0] = (uint64_t)v26;
      v9[10].i64[1] = (uint64_t)v22;
      *(int64x2_t *)long long v42 = v30;
      uint64_t v34 = (char *)v9[11].i64[0];
      v9[11].i64[0] = (uint64_t)v43;
      uint64_t v43 = v34;
      long long v41 = (char *)v30.i64[0];
      std::__split_buffer<UmtsCell>::~__split_buffer((uint64_t)&v41);
    }
  }
  uint64_t v35 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v35 + 184)) {
LABEL_47:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v36 = *a2;
  uint64_t v37 = a2[1];
  if (*a2 != v37)
  {
    long long v38 = *(_WORD **)(v35 + 160);
    do
    {
      long long v51 = 0u;
      long long v52 = 0u;
      MEMORY[0x223C99930](&v51, *(unsigned __int16 *)(v36 + 2));
      *(_OWORD *)std::string __p = 0u;
      long long v50 = 0u;
      MEMORY[0x223C99980](__p, *(unsigned __int16 *)(v36 + 4), &v51);
      LOWORD(v41) = *(_WORD *)v36;
      MCC::MCC();
      MCC::MCC((MCC *)&v45, (const MCC *)__p);
      v48[0] = *(unsigned char *)(v36 + 6);
      *(_WORD *)&void v48[2] = *(_WORD *)(v36 + 8);
      *(_DWORD *)&v48[4] = *(_DWORD *)(v36 + 12);
      *(_DWORD *)&v48[8] = *(_DWORD *)(v36 + 16);
      *(void *)&v48[12] = *(void *)(v36 + 20);
      if (SHIBYTE(v50) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(v52) < 0) {
        operator delete(*((void **)&v51 + 1));
      }
      _WORD *v38 = (_WORD)v41;
      MCC::operator=();
      uint64_t v39 = v38 + 20;
      MCC::operator=();
      long long v40 = *(_OWORD *)v48;
      *((_DWORD *)v39 + 1QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(_DWORD *)&v48[16];
      *((_OWORD *)v39 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v40;
      if (v47 < 0) {
        operator delete(v46);
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(v42[1]);
      }
      v36 += 28;
      long long v38 = v39 + 28;
    }
    while (v36 != v37);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_6(uint64_t a1, int **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 256;
  if (*(unsigned char *)(v4 + 280))
  {
    uint64_t v6 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(v4 + 264) = v6;
      operator delete(v6);
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v4 + 264) = 0;
    *(void *)(v4 + 27QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    *(unsigned char *)(v4 + 280) = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 280)) {
LABEL_29:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  unint64_t v9 = v8 >> 2;
  uint64_t v10 = *(void *)(v7 + 256);
  uint64_t v11 = *(void *)(v7 + 264);
  unint64_t v12 = (v11 - v10) >> 2;
  if (v8 >> 2 <= v12)
  {
    if (v9 >= v12) {
      goto LABEL_24;
    }
    uint64_t v25 = v10 + 4 * v9;
    goto LABEL_23;
  }
  unint64_t v13 = v9 - v12;
  uint64_t v14 = *(void *)(v7 + 272);
  if (v9 - v12 <= (v14 - v11) >> 2)
  {
    bzero(*(void **)(v7 + 264), 4 * v13);
    uint64_t v25 = v11 + 4 * v13;
LABEL_23:
    *(void *)(v7 + 264) = v25;
    goto LABEL_24;
  }
  if (v8 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v14 - v10;
  if (v15 >> 1 > v9) {
    unint64_t v9 = v15 >> 1;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFFCLL) {
    unint64_t v16 = 0x3FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v9;
  }
  uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<subscriber::HardwareSimSlot>>(v16);
  unint64_t v18 = &v17[4 * v12];
  uint64_t v20 = &v17[4 * v19];
  bzero(v18, 4 * v13);
  uint64_t v21 = &v18[4 * v13];
  uint64_t v23 = *(char **)(v7 + 256);
  uint64_t v22 = *(char **)(v7 + 264);
  if (v22 != v23)
  {
    do
    {
      int v24 = *((_DWORD *)v22 - 1);
      v22 -= 4;
      *((_DWORD *)v18 - 1) = v24;
      v18 -= 4;
    }
    while (v22 != v23);
    uint64_t v22 = *(char **)(v7 + 256);
  }
  *(void *)(v7 + 256) = v18;
  *(void *)(v7 + 264) = v21;
  *(void *)(v7 + 27QMIDataContextIPAggregator::getAPNObserver(this - 2) = v20;
  if (v22) {
    operator delete(v22);
  }
LABEL_24:
  uint64_t v26 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v26 + 280)) {
    goto LABEL_29;
  }
  uint64_t v28 = *a2;
  uint64_t v27 = a2[1];
  if (*a2 != v27)
  {
    long long v29 = *(_DWORD **)(v26 + 256);
    do
    {
      int v30 = *v28++;
      *v29++ = v30;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_7(uint64_t a1, uint64_t **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 224;
  if (*(unsigned char *)(v4 + 248))
  {
    uint64_t v6 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(v4 + 23QMIDataContextIPAggregator::getAPNObserver(this - 2) = v6;
      operator delete(v6);
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v4 + 23QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    *(void *)(v4 + 240) = 0;
    *(unsigned char *)(v4 + 248) = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 248)) {
LABEL_29:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  unint64_t v9 = v8 >> 3;
  uint64_t v10 = *(void *)(v7 + 224);
  uint64_t v11 = *(void *)(v7 + 232);
  unint64_t v12 = (v11 - v10) >> 3;
  if (v8 >> 3 <= v12)
  {
    if (v9 >= v12) {
      goto LABEL_24;
    }
    uint64_t v25 = v10 + 8 * v9;
    goto LABEL_23;
  }
  unint64_t v13 = v9 - v12;
  uint64_t v14 = *(void *)(v7 + 240);
  if (v9 - v12 <= (v14 - v11) >> 3)
  {
    bzero(*(void **)(v7 + 232), 8 * v13);
    uint64_t v25 = v11 + 8 * v13;
LABEL_23:
    *(void *)(v7 + 23QMIDataContextIPAggregator::getAPNObserver(this - 2) = v25;
    goto LABEL_24;
  }
  if (v8 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v14 - v10;
  if (v15 >> 2 > v9) {
    unint64_t v9 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v9;
  }
  uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
  unint64_t v18 = &v17[8 * v12];
  uint64_t v20 = &v17[8 * v19];
  bzero(v18, 8 * v13);
  uint64_t v21 = &v18[8 * v13];
  uint64_t v23 = *(char **)(v7 + 224);
  uint64_t v22 = *(char **)(v7 + 232);
  if (v22 != v23)
  {
    do
    {
      uint64_t v24 = *((void *)v22 - 1);
      v22 -= 8;
      *((void *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    uint64_t v22 = *(char **)(v7 + 224);
  }
  *(void *)(v7 + 224) = v18;
  *(void *)(v7 + 23QMIDataContextIPAggregator::getAPNObserver(this - 2) = v21;
  *(void *)(v7 + 240) = v20;
  if (v22) {
    operator delete(v22);
  }
LABEL_24:
  uint64_t v26 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v26 + 248)) {
    goto LABEL_29;
  }
  uint64_t v28 = *a2;
  uint64_t v27 = a2[1];
  if (*a2 != v27)
  {
    long long v29 = *(void **)(v26 + 224);
    do
    {
      uint64_t v30 = *v28++;
      *v29++ = v30;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_8(uint64_t a1, unsigned __int16 **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 400;
  if (*(unsigned char *)(v4 + 424))
  {
    uint64_t v6 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(v4 + 408) = v6;
      operator delete(v6);
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v4 + 408) = 0;
    *(void *)(v4 + 416) = 0;
    *(unsigned char *)(v4 + 424) = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 424)) {
LABEL_29:
  }
    std::__throw_bad_optional_access[abi:ne180100]();
  uint64_t v8 = (char *)a2[1] - (char *)*a2;
  unint64_t v9 = v8 >> 3;
  uint64_t v10 = *(void *)(v7 + 400);
  uint64_t v11 = *(void *)(v7 + 408);
  unint64_t v12 = (v11 - v10) >> 3;
  if (v8 >> 3 <= v12)
  {
    if (v9 >= v12) {
      goto LABEL_24;
    }
    uint64_t v25 = v10 + 8 * v9;
    goto LABEL_23;
  }
  unint64_t v13 = v9 - v12;
  uint64_t v14 = *(void *)(v7 + 416);
  if (v9 - v12 <= (v14 - v11) >> 3)
  {
    bzero(*(void **)(v7 + 408), 8 * v13);
    uint64_t v25 = v11 + 8 * v13;
LABEL_23:
    *(void *)(v7 + 408) = v25;
    goto LABEL_24;
  }
  if (v8 < 0) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t v15 = v14 - v10;
  if (v15 >> 2 > v9) {
    unint64_t v9 = v15 >> 2;
  }
  if ((unint64_t)v15 >= 0x7FFFFFFFFFFFFFF8) {
    unint64_t v16 = 0x1FFFFFFFFFFFFFFFLL;
  }
  else {
    unint64_t v16 = v9;
  }
  uint64_t v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<embms::TMGIInfo>>(v16);
  unint64_t v18 = &v17[8 * v12];
  uint64_t v20 = &v17[8 * v19];
  bzero(v18, 8 * v13);
  uint64_t v21 = &v18[8 * v13];
  uint64_t v23 = *(char **)(v7 + 400);
  uint64_t v22 = *(char **)(v7 + 408);
  if (v22 != v23)
  {
    do
    {
      uint64_t v24 = *((void *)v22 - 1);
      v22 -= 8;
      *((void *)v18 - 1) = v24;
      v18 -= 8;
    }
    while (v22 != v23);
    uint64_t v22 = *(char **)(v7 + 400);
  }
  *(void *)(v7 + 400) = v18;
  *(void *)(v7 + 408) = v21;
  *(void *)(v7 + 416) = v20;
  if (v22) {
    operator delete(v22);
  }
LABEL_24:
  uint64_t v26 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v26 + 424)) {
    goto LABEL_29;
  }
  uint64_t v28 = *a2;
  uint64_t v27 = a2[1];
  if (*a2 != v27)
  {
    long long v29 = *(unint64_t **)(v26 + 400);
    do
    {
      *v29++ = *v28 | ((unint64_t)*((unsigned __int8 *)v28 + 2) << 16) | ((unint64_t)*((unsigned int *)v28 + 1) << 32);
      v28 += 4;
    }
    while (v28 != v27);
  }
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_11(uint64_t a1, uint64_t *a2)
{
  memset(__p, 0, sizeof(__p));
  std::optional<NrNeighborInformation>::operator=[abi:ne180100]<NrNeighborInformation,void>(*(void *)(a1 + 32) + 432, (uint64_t)__p);
  if (__p[0]) {
    operator delete(__p[0]);
  }
  uint64_t v4 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v4 + 456)
    || (std::vector<NrNeighborCell>::resize((char **)(v4 + 432), 0xAAAAAAAAAAAAAAABLL * ((a2[1] - *a2) >> 3)),
        uint64_t v5 = *(void *)(a1 + 32),
        !*(unsigned char *)(v5 + 456)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v7 = *a2;
  uint64_t v6 = a2[1];
  if (*a2 != v6)
  {
    uint64_t v8 = *(void *)(v5 + 432);
    do
    {
      int v9 = *(_DWORD *)(v7 + 4);
      __int16 v10 = *(_WORD *)(v7 + 8);
      __int16 v11 = *(_WORD *)(v7 + 10);
      int v12 = *(_DWORD *)(v7 + 12);
      *(_DWORD *)uint64_t v8 = *(_DWORD *)v7;
      *(_DWORD *)(v8 + 4) = v9;
      *(_WORD *)(v8 + 8) = v10;
      *(_WORD *)(v8 + 10) = v11;
      *(_DWORD *)(v8 + 1QMIDataContextIPAggregator::getAPNObserver(this - 2) = v12;
      *(_WORD *)(v8 + 16) = 0;
      v7 += 24;
      *(_DWORD *)(v8 + 20) = 0;
      *(_DWORD *)(v8 + 24) = 0;
      v8 += 28;
    }
    while (v7 != v6);
  }
}

double ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_12(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    bzero(v7, v4 - v5);
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&v7[v6];
    do
    {
      __int16 v10 = &v7[v8];
      uint64_t v11 = v5 + v8;
      __int16 v12 = *(_WORD *)(v5 + v8 + 4);
      char v13 = *(unsigned char *)(v5 + v8 + 6);
      *(_DWORD *)__int16 v10 = *(unsigned __int16 *)(v5 + v8) | (*(unsigned __int8 *)(v5 + v8 + 2) << 16);
      void v10[6] = v13;
      *((_WORD *)v10 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v12;
      v8 += 8;
    }
    while (v11 + 8 != v4);
  }
  *(_WORD *)uint64_t v19 = *(_WORD *)a2;
  _OWORD v19[2] = *(unsigned char *)(a2 + 2);
  *(_WORD *)&void v19[4] = *(_WORD *)(a2 + 4);
  void v19[6] = *(unsigned char *)(a2 + 6);
  uint64_t v21 = 0;
  long long v20 = 0uLL;
  std::vector<Cdma1xNeighborCell>::__init_with_size[abi:ne180100]<Cdma1xNeighborCell*,Cdma1xNeighborCell*>(&v20, v7, v9, (v9 - (uint64_t)v7) >> 3);
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = *(unsigned __int8 *)(v14 + 352);
  *(_DWORD *)(v14 + 320) = *(_DWORD *)v19;
  *(_DWORD *)(v14 + 32QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = *(_DWORD *)&v19[3];
  unint64_t v16 = (_OWORD *)(v14 + 328);
  if (!v15)
  {
    double result = *(double *)&v20;
    *unint64_t v16 = v20;
    *(void *)(v14 + 344) = v21;
    *(unsigned char *)(v14 + 35QMIDataContextIPAggregator::getAPNObserver(this - 2) = 1;
    if (!v7) {
      return result;
    }
    goto LABEL_11;
  }
  uint64_t v17 = *(void **)v16;
  if (*(void *)v16)
  {
    *(void *)(v14 + 336) = v17;
    operator delete(v17);
    *(void *)unint64_t v16 = 0;
    *(void *)(v14 + 336) = 0;
    *(void *)(v14 + 344) = 0;
  }
  double result = *(double *)&v20;
  *unint64_t v16 = v20;
  *(void *)(v14 + 344) = v21;
  if (v7)
  {
LABEL_11:
    operator delete(v7);
  }
  return result;
}

void sub_2224202B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

double ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_13(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v6 = v4 - v5;
  if (v4 == v5)
  {
    uint64_t v9 = 0;
    uint64_t v7 = 0;
  }
  else
  {
    if (v6 < 0) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t v7 = (char *)operator new(v4 - v5);
    bzero(v7, v4 - v5);
    uint64_t v8 = 0;
    uint64_t v9 = (uint64_t)&v7[v6];
    do
    {
      __int16 v10 = &v7[v8];
      uint64_t v11 = v5 + v8;
      __int16 v12 = *(_WORD *)(v5 + v8 + 4);
      char v13 = *(unsigned char *)(v5 + v8 + 6);
      *(_DWORD *)__int16 v10 = *(unsigned __int16 *)(v5 + v8) | (*(unsigned __int8 *)(v5 + v8 + 2) << 16);
      void v10[6] = v13;
      *((_WORD *)v10 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v12;
      v8 += 8;
    }
    while (v11 + 8 != v4);
  }
  *(_WORD *)unint64_t v18 = *(_WORD *)a2;
  void v18[2] = *(unsigned char *)(a2 + 2);
  *(_WORD *)&void v18[4] = *(_WORD *)(a2 + 4);
  void v18[6] = *(unsigned char *)(a2 + 6);
  uint64_t v20 = 0;
  long long v19 = 0uLL;
  std::vector<CdmaEvdoNeighborCell>::__init_with_size[abi:ne180100]<CdmaEvdoNeighborCell*,CdmaEvdoNeighborCell*>(&v19, v7, v9, (v9 - (uint64_t)v7) >> 3);
  uint64_t v14 = *(void *)(a1 + 32);
  int v15 = *(unsigned __int8 *)(v14 + 392);
  *(_DWORD *)(v14 + 360) = *(_DWORD *)v18;
  *(_DWORD *)(v14 + 36QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = *(_DWORD *)&v18[3];
  if (!v15)
  {
    double result = *(double *)&v19;
    *(_OWORD *)(v14 + 368) = v19;
    *(void *)(v14 + 384) = v20;
    *(unsigned char *)(v14 + 39QMIDataContextIPAggregator::getAPNObserver(this - 2) = 1;
    if (!v7) {
      return result;
    }
    goto LABEL_11;
  }
  unint64_t v16 = *(void **)(v14 + 368);
  if (v16)
  {
    *(void *)(v14 + 376) = v16;
    operator delete(v16);
    *(void *)(v14 + 368) = 0;
    *(void *)(v14 + 376) = 0;
    *(void *)(v14 + 384) = 0;
  }
  double result = *(double *)&v19;
  *(_OWORD *)(v14 + 368) = v19;
  *(void *)(v14 + 384) = v20;
  if (v7)
  {
LABEL_11:
    operator delete(v7);
  }
  return result;
}

void sub_222420458(_Unwind_Exception *exception_object)
{
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(exception_object);
}

void ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_14(uint64_t a1, const void **a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = v4 + 464;
  if (*(unsigned char *)(v4 + 488))
  {
    uint64_t v6 = *(void **)v5;
    if (*(void *)v5)
    {
      *(void *)(v4 + 47QMIDataContextIPAggregator::getAPNObserver(this - 2) = v6;
      operator delete(v6);
    }
    *(void *)uint64_t v5 = 0;
    *(void *)(v5 + 8) = 0;
    *(void *)(v5 + 16) = 0;
  }
  else
  {
    *(void *)uint64_t v5 = 0;
    *(void *)(v4 + 47QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
    *(void *)(v4 + 480) = 0;
    *(unsigned char *)(v4 + 488) = 1;
  }
  uint64_t v7 = *(void *)(a1 + 32);
  if (!*(unsigned char *)(v7 + 488)
    || (std::vector<unsigned short>::resize(v7 + 464, ((unsigned char *)a2[1] - (unsigned char *)*a2) >> 1),
        uint64_t v8 = *(void *)(a1 + 32),
        !*(unsigned char *)(v8 + 488)))
  {
    std::__throw_bad_optional_access[abi:ne180100]();
  }
  uint64_t v9 = *a2;
  __int16 v10 = a2[1];
  size_t v11 = v10 - (unsigned char *)*a2;
  if (v10 != *a2)
  {
    __int16 v12 = *(void **)(v8 + 464);
    memmove(v12, v9, v11);
  }
}

uint64_t ___ZN27QMICellMonitorCommandDriver33processCommonCellInformation_syncIN3nas11GetCellInfo7RespIndEEEvRKT_R14CellInfoUpdate_block_invoke_15(uint64_t result, unsigned __int8 *a2)
{
  *(_WORD *)(*(void *)(result + 32) + 496) = *a2 | 0x100;
  return result;
}

void std::vector<Cdma1xCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 104;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I10Cdma1xCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(unsigned char *)(a1 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(_WORD *)(a1 + 96) = 0;
  return a1;
}

void sub_222420620(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<Cdma1xCell>>(unint64_t a1)
{
  if (a1 >= 0x276276276276277) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(104 * a1);
}

uint64_t std::__split_buffer<Cdma1xCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 104;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 104);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<CdmaEvdoCell>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 72)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

void std::vector<CdmaEvdoCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<CdmaEvdoCell>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<CdmaEvdoCell>>(unint64_t a1)
{
  if (a1 >= 0x38E38E38E38E38FLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(72 * a1);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,std::reverse_iterator<CdmaEvdoCell*>>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 72)
    {
      if (*(char *)(i + 39) < 0) {
        operator delete(*(void **)(i + 16));
      }
    }
  }
  return a1;
}

uint64_t std::__split_buffer<CdmaEvdoCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2 - 72;
      *(void *)(a1 + 16) = v2 - 72;
      if (*(char *)(v2 - 33) < 0)
      {
        operator delete(*(void **)(v2 - 56));
        uint64_t v4 = *(void *)(a1 + 16);
      }
      uint64_t v2 = v4;
    }
    while (v4 != v3);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<UmtsCell>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 96;
        std::__destroy_at[abi:ne180100]<NrCell,0>(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t _ZNSt3__112construct_atB8ne180100I8UmtsCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(unsigned char *)(a1 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  return a1;
}

void sub_222420958(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<UmtsCell>>(unint64_t a1)
{
  if (a1 >= 0x2AAAAAAAAAAAAABLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(96 * a1);
}

uint64_t std::__split_buffer<UmtsCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 96;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 96);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t _ZNSt3__112construct_atB8ne180100I7GsmCellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(void *)(a1 + 80) = 0;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)a1 = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(unsigned char *)(a1 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  return a1;
}

void sub_222420A54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<GsmCell>>(unint64_t a1)
{
  if (a1 >= 0x2E8BA2E8BA2E8BBLL) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(88 * a1);
}

uint64_t std::__split_buffer<GsmCell>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 88;
    std::__destroy_at[abi:ne180100]<NrCell,0>(i - 88);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t _ZNSt3__112construct_atB8ne180100I11TDSCDMACellJEPS1_EEPT_S4_DpOT0_(uint64_t a1)
{
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  MCC::MCC((MCC *)(a1 + 8));
  MNC::MNC((MNC *)(a1 + 40));
  *(unsigned char *)(a1 + 7QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  return a1;
}

void sub_222420B54(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 39) < 0) {
    operator delete(*(void **)(v1 + 16));
  }
  _Unwind_Resume(exception_object);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<LteNeighborCell>>(unint64_t a1)
{
  if (a1 >> 59) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(32 * a1);
}

void *std::__allocate_at_least[abi:ne180100]<std::allocator<NrNeighborCell>>(unint64_t a1)
{
  if (a1 >= 0x924924924924925) {
    std::__throw_bad_array_new_length[abi:ne180100]();
  }
  return operator new(28 * a1);
}

char *std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >> 61) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  double result = (char *)operator new(8 * a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[8 * a2];
  return result;
}

void *std::vector<Cdma1xNeighborCell>::__init_with_size[abi:ne180100]<Cdma1xNeighborCell*,Cdma1xNeighborCell*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 1);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222420C98(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<CdmaEvdoNeighborCell>::__init_with_size[abi:ne180100]<CdmaEvdoNeighborCell*,CdmaEvdoNeighborCell*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    double result = std::vector<Cdma1xNeighborCell>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      double result = memmove((void *)v6[1], a2, v8 - 1);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222420D14(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<CdmaEvdoCell>,CdmaEvdoCell*>>::~__exception_guard_exceptions[abi:ne180100](uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = **(void **)(a1 + 8);
    for (uint64_t i = **(void **)(a1 + 16); i != v3; i -= 72)
    {
      if (*(char *)(i - 33) < 0) {
        operator delete(*(void **)(i - 56));
      }
    }
  }
  return a1;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::~__func()
{
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D4C5EB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C5EB0;
  a2[1] = v2;
  return result;
}

void std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::operator()(uint64_t a1, unsigned int *a2, QMIServiceMsg *this)
{
  uint64_t v68 = *MEMORY[0x263EF8340];
  unsigned int v4 = *a2;
  if (*((_DWORD *)this + 10) != 1 || *((_WORD *)this + 22) == 3)
  {
    long long buf = 0uLL;
    *(void *)&long long v65 = 0;
    QMIServiceMsg::serialize((uint64_t *)&buf, this);
    qmi::MessageBase::MessageBase((qmi::MessageBase *)v48, (const void *)buf);
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v48);
    if ((void)buf)
    {
      *((void *)&buf + 1) = buf;
      operator delete((void *)buf);
    }
  }
  else
  {
    QMIServiceMsg::getNewError(this);
    qmi::MessageBase::MessageBase();
    qmi::MessageBase::validateMsgId((qmi::MessageBase *)v48);
  }
  uint64_t v6 = *(void *)(a1 + 8);
  if (v4 - 1 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v4;
  }
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
  uint64_t TlvValue = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
  uint64_t v11 = TlvValue;
  if (TlvValue)
  {
    int v12 = v10;
    *(void *)&long long buf = TlvValue;
    char v13 = tlv::parseV<nas::tlv::Fetch>((unint64_t *)&buf, v10);
    if ((void)buf)
    {
      int v14 = 1;
      switch(v13)
      {
        case 0:
          *(_OWORD *)std::string __p = 0u;
          long long v50 = 0u;
          int v15 = (void *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
          uint64_t v17 = v15;
          if (v15)
          {
            int v18 = v16;
            uint64_t v60 = v15;
            long long buf = 0uLL;
            *(void *)&long long v65 = 0;
            tlv::parseV<nas::tlv::LAPSMCCInfo>((unint64_t *)&v60, v16, (uint64_t)&buf);
            long long v19 = v60;
            if (v60)
            {
              if (BYTE8(v50))
              {
                std::vector<unsigned short>::__assign_with_size[abi:ne180100]<unsigned short *,unsigned short *>((char *)__p, (char *)buf, *((uint64_t *)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 1);
              }
              else
              {
                __p[0] = 0;
                __p[1] = 0;
                *(void *)&long long v50 = 0;
                std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(__p, (const void *)buf, *((uint64_t *)&buf + 1), (uint64_t)(*((void *)&buf + 1) - buf) >> 1);
                BYTE8(v50) = 1;
              }
            }
            if ((void)buf)
            {
              *((void *)&buf + 1) = buf;
              operator delete((void *)buf);
            }
            if (!v19) {
              ((void (*)(void, uint64_t, void *, void))*MEMORY[0x263F8BD78])(v48[0], 177, v17, v18);
            }
          }
          if (!BYTE8(v50)) {
            goto LABEL_25;
          }
          uint64_t v46 = *(void *)(v6 + 48);
          *(void *)&long long v65 = 0;
          long long buf = 0uLL;
          std::vector<unsigned short>::__init_with_size[abi:ne180100]<unsigned short *,unsigned short *>(&buf, __p[0], (uint64_t)__p[1], ((char *)__p[1] - (char *)__p[0]) >> 1);
          (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v46 + 32))(v46, v7, &buf);
          uint64_t v45 = (void *)buf;
          if (!(void)buf) {
            goto LABEL_22;
          }
          *((void *)&buf + 1) = buf;
          goto LABEL_71;
        case 1:
          *(_OWORD *)std::string __p = 0u;
          long long v50 = 0u;
          uint64_t v23 = (unsigned __int8 *)qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
          uint64_t v25 = v23;
          if (!v23) {
            goto LABEL_22;
          }
          int v26 = v24;
          long long v57 = v23;
          uint64_t v60 = 0;
          unint64_t v61 = 0;
          uint64_t v62 = 0;
          tlv::parseV<nas::tlv::LAPSPLMNInfo>(&v57, v24, &v60);
          uint64_t v27 = v57;
          uint64_t v28 = (char *)v60;
          if (v57)
          {
            *(void *)&long long v65 = 0;
            long long buf = 0uLL;
            int64_t v29 = v61 - (unsigned char *)v60;
            if (v61 == v60)
            {
              uint64_t v31 = 0;
            }
            else
            {
              std::vector<unsigned int>::__vallocate[abi:ne180100](&buf, v29 >> 2);
              uint64_t v30 = *((void *)&buf + 1);
              bzero(*((void **)&buf + 1), v29);
              uint64_t v31 = (int *)(v30 + v29);
              int64_t v29 = buf;
              uint64_t v28 = (char *)v60;
              unint64_t v32 = v61;
              if (v60 != v61)
              {
                uint64_t v33 = 0;
                do
                {
                  *(_DWORD *)(v29 + v3QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = *(_DWORD *)&v28[v33];
                  v33 += 4;
                }
                while (&v28[v33] != v32);
              }
            }
          }
          else
          {
            int64_t v29 = 0;
            uint64_t v31 = 0;
          }
          if (v28)
          {
            unint64_t v61 = v28;
            operator delete(v28);
          }
          if (v27)
          {
            uint64_t v47 = *(void *)(v6 + 48);
            *(void *)&long long v65 = 0;
            long long buf = 0uLL;
            std::vector<std::pair<unsigned short,unsigned short>>::__init_with_size[abi:ne180100]<std::pair<unsigned short,unsigned short>*,std::pair<unsigned short,unsigned short>*>((char *)&buf, (int *)v29, v31, ((uint64_t)v31 - v29) >> 2);
            (*(void (**)(uint64_t, uint64_t, long long *))(*(void *)v47 + 40))(v47, v7, &buf);
            if ((void)buf)
            {
              *((void *)&buf + 1) = buf;
              operator delete((void *)buf);
            }
            if (v29)
            {
              uint64_t v45 = (void *)v29;
              goto LABEL_71;
            }
          }
          else
          {
            ((void (*)(void, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78])(v48[0], 178, v25, v26);
          }
          goto LABEL_22;
        case 2:
          goto LABEL_34;
        case 3:
          int v14 = 0;
LABEL_34:
          *(_OWORD *)std::string __p = 0u;
          long long v50 = 0u;
          uint64_t v34 = qmi::MessageBase::findTlvValue((qmi::MessageBase *)v48);
          uint64_t v36 = v34;
          if (!v34) {
            goto LABEL_22;
          }
          int v37 = v35;
          uint64_t v53 = 0;
          uint64_t v54 = v34;
          uint64_t v51 = 0;
          uint64_t v52 = 0;
          tlv::parseV<nas::tlv::LAPSCellInfo_V2>((unint64_t *)&v54, v35, &v51);
          if (!v54)
          {
            ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v48[0], 180, v36, v37);
            goto LABEL_22;
          }
          long long v38 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 88) + 16))(*(void *)(v6 + 88), v7);
          unsigned int v39 = v53;
          if (v53 <= 4)
          {
            uint64_t v40 = dword_222577D58[(int)v53];
            long long v66 = 0u;
            long long v67 = 0u;
            long long buf = 0u;
            long long v65 = 0u;
            long long v41 = (MCCAndMNC *)MEMORY[0x223C99FC0](&buf, (unsigned __int16)v51, WORD1(v51));
            uint64_t v42 = *(void *)(v6 + 48);
            if (v14)
            {
              MCCAndMNC::getMcc((uint64_t *)&v60, v41);
              MCCAndMNC::getMnc((uint64_t *)&v57, (MCCAndMNC *)&buf);
              (*(void (**)(uint64_t, uint64_t, uint64_t, void **, unsigned __int8 **, void, uint64_t))(*(void *)v42 + 56))(v42, v7, v40, &v60, &v57, HIDWORD(v51), v52);
              if (v59 < 0) {
                operator delete(v58);
              }
              if (v63 < 0)
              {
                uint64_t v43 = &v60;
LABEL_50:
                operator delete(v43[1]);
              }
            }
            else
            {
              MCCAndMNC::getMcc(v55, v41);
              MCCAndMNC::getMnc((uint64_t *)&v57, (MCCAndMNC *)&buf);
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, unsigned __int8 **, void, uint64_t))(*(void *)v42 + 48))(v42, v7, v40, v55, &v57, HIDWORD(v51), v52);
              if (v59 < 0) {
                operator delete(v58);
              }
              if (v56 < 0)
              {
                uint64_t v43 = (void **)v55;
                goto LABEL_50;
              }
            }
            if (SHIBYTE(v67) < 0) {
              operator delete(*((void **)&v66 + 1));
            }
            if (SHIBYTE(v65) < 0)
            {
              uint64_t v45 = (void *)*((void *)&buf + 1);
LABEL_71:
              operator delete(v45);
            }
            goto LABEL_22;
          }
          uint64_t v20 = *v38;
          if (!os_log_type_enabled(*v38, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_22;
          }
          uint64_t v44 = nas::asString(v39);
          LODWORD(buf) = 136315138;
          *(void *)((char *)&buf + 4) = v44;
          uint64_t v22 = "#N Ignoring RAT %s";
          break;
        default:
          goto LABEL_19;
      }
      goto LABEL_21;
    }
    ((void (*)(void, uint64_t, uint64_t, void))*MEMORY[0x263F8BD78])(v48[0], 161, v11, v12);
  }
LABEL_19:
  *(_OWORD *)std::string __p = 0u;
  long long v50 = 0u;
  uint64_t v20 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = asString();
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v21;
    uint64_t v22 = "#N Unhandled fetch type (%s) from LAPS fetch indication";
LABEL_21:
    _os_log_impl(&dword_22231A000, v20, OS_LOG_TYPE_DEFAULT, v22, (uint8_t *)&buf, 0xCu);
  }
LABEL_22:
  if (BYTE8(v50) && __p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_25:
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v48);
}

void sub_222421508(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  MCCAndMNC::~MCCAndMNC((void **)(v41 - 160));
  if (a16)
  {
    if (a13)
    {
      a14 = (uint64_t)a13;
      operator delete(a13);
    }
  }
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)&a10);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<void qmi::ClientRouter::setIndHandler<QMICellMonitorCommandDriver::init_sync(void)::$_3>(unsigned short,QMICellMonitorCommandDriver::init_sync(void)::$_3 &&)::{lambda(qmi::SubscriptionType,QMIServiceMsg const&)#1},std::allocator<QMIServiceMsg const&>,void ()(QMICellMonitorCommandDriver::init_sync(void)::$_3 &&,QMIServiceMsg const)>::target_type()
{
}

void std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D4C5F30;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C5F30;
  a2[1] = v2;
  return result;
}

void std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, unsigned int *a2)
{
  unsigned int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  unsigned int v4 = *a2 - 1;
  if (v4 >= 3) {
    uint64_t v5 = 0;
  }
  else {
    uint64_t v5 = v2;
  }
  uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v6, OS_LOG_TYPE_DEFAULT, "#I NAS Client has started", buf, 2u);
  }
  if (v4 >= 3) {
    uint64_t v7 = 0;
  }
  else {
    uint64_t v7 = v2;
  }
  uint64_t v8 = (capabilities::ct *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v3 + 88) + 16))(*(void *)(v3 + 88), v7);
  if (capabilities::ct::supportsGemini(v8))
  {
    *(_OWORD *)std::string __p = 0u;
    long long v15 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    *qmi::MutableMessageBase::getTLV<nas::tlv::SubType>((uint64_t)__p, 1) = v2 == 2;
    qmi::ClientRouter::get();
    qmi::ClientRouter::SendProxy::SendProxy<nas::BindSubscription::Request>(&v13, v2);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v15 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v9 = (const void **)__p[1];
  if (__p[1] != (void *)v15)
  {
    while (*((unsigned __int8 *)*v9 + 8) != 160)
    {
      if (++v9 == (const void **)v15) {
        goto LABEL_18;
      }
    }
  }
  if (v9 != (const void **)v15)
  {
    if (v10)
    {
      v10[9] = 1;
      *qmi::MutableMessageBase::getTLV<nas::tlv::ServingSysEvents>((uint64_t)__p, 19) = 0;
      *qmi::MutableMessageBase::getTLV<nas::tlv::SysInfoEvents>((uint64_t)__p, 24) = 0;
      uint64_t v11 = (const void **)__p[1];
      if (__p[1] != (void *)v15)
      {
        while (*((unsigned __int8 *)*v11 + 8) != 208)
        {
          if (++v11 == (const void **)v15) {
            goto LABEL_26;
          }
        }
      }
      if (v11 == (const void **)v15) {
LABEL_26:
      }
        operator new();
      if (v12)
      {
        v12[9] = 1;
        qmi::ClientRouter::get();
        qmi::ClientRouter::SendProxy::SendProxy<nas::IndicationRegister::Request>(&v13, v2);
      }
    }
    __cxa_bad_cast();
  }
LABEL_18:
  operator new();
}

void sub_222421E44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    std::__shared_weak_count::__release_shared[abi:ne180100](a20);
  }
  std::__shared_weak_count::__release_shared[abi:ne180100](v20);
  uint64_t v22 = a10;
  a10 = 0;
  if (v22) {
    std::default_delete<qmi::Client::SendProxy>::operator()[abi:ne180100]((uint64_t)&a10, v22);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a11);
  _Unwind_Resume(a1);
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_0,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_0>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::~__func()
{
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t a1)
{
  double result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *double result = &unk_26D4C5FB0;
  result[1] = v3;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::__clone(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = &unk_26D4C5FB0;
  a2[1] = v2;
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::operator()(uint64_t a1, _DWORD *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if ((*a2 - 1) >= 3) {
    uint64_t v3 = 0;
  }
  else {
    uint64_t v3 = *a2;
  }
  unsigned int v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 88) + 16))(*(void *)(v2 + 88), v3);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl(&dword_22231A000, v4, OS_LOG_TYPE_DEFAULT, "#I NAS Client has stopped", v6, 2u);
  }
  uint64_t result = qmi::NotifyHelper::shouldNotifyStop(*(unint64_t ***)(v2 + 112));
  if (result) {
    return (*(uint64_t (**)(void, void))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48), 0);
  }
  return result;
}

uint64_t std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

void *std::__function::__func<QMICellMonitorCommandDriver::init_sync(void)::$_1,std::allocator<QMICellMonitorCommandDriver::init_sync(void)::$_1>,void ()(qmi::SubscriptionType)>::target_type()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21bindSubscription_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v10 = *MEMORY[0x263EF8340];
  if (*(_DWORD *)(a2 + 4))
  {
    uint64_t v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      uint64_t v4 = qmi::asString();
      int v5 = *(_DWORD *)(a2 + 4);
      int v6 = 136315394;
      uint64_t v7 = v4;
      __int16 v8 = 1024;
      int v9 = v5;
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Error binding subscription: %s (0x%x)", (uint8_t *)&v6, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c110_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21bindSubscription_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6060;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::bindSubscription_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6060;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas16BindSubscription8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::BindSubscription::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_222422274(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::CellInfoChange>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  uint64_t v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LAPSFetchReport>::clone()
{
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver27registerForIndications_syncENS_16SubscriptionTypeEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v12 = *MEMORY[0x263EF8340];
  unsigned int v3 = *(_DWORD *)(a1 + 48);
  if (v3 - 1 >= 3) {
    uint64_t v4 = 0;
  }
  else {
    uint64_t v4 = v3;
  }
  uint64_t v5 = *(void *)(**(void **)(a1 + 32) + 88);
  int v6 = (os_log_t *)(*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 16))(v5, v4);
  int v7 = *(_DWORD *)(a2 + 4);
  if (v7)
  {
    __int16 v8 = *v6;
    if (os_log_type_enabled(*v6, OS_LOG_TYPE_ERROR))
    {
      v9[0] = 67109378;
      v9[1] = v7;
      __int16 v10 = 2080;
      uint64_t v11 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v8, OS_LOG_TYPE_ERROR, "Cell Monitor Indication Register failed: Error in response with code %d (%s)", (uint8_t *)v9, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver27registerForIndications_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c116_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver27registerForIndications_syncEN3qmi16SubscriptionTypeEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6180;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0,std::allocator<QMICellMonitorCommandDriver::registerForIndications_sync(qmi::SubscriptionType)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6180;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void ___ZNO3qmi6Client9SendProxy8callbackIRKN3nas18IndicationRegister8ResponseEEEOS1_U13block_pointerFvT_E_block_invoke_1(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  cast_message_type<nas::IndicationRegister::Response const&>::cast(a2, (qmi::ResponseBase *)v3);
  (*(void (**)(uint64_t, unsigned char *))(v2 + 16))(v2, v3);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)v3);
}

void sub_22242262C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  qmi::MessageBase::~MessageBase((qmi::MessageBase *)va);
  _Unwind_Resume(a1);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0,std::allocator<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0,std::allocator<QMICellMonitorCommandDriver::getCellInformationForSlot(subscriber::SimSlot,CellInfoSource,dispatch::group_session)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void qmi::MessageBase::applyTlv<nas::tlv::NrCellInformation_V2,void({block_pointer}&)(nas::tlv::NrCellInformation_V2 const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    int v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    int v14 = TlvValue;
    std::string __p = 0;
    uint64_t v12 = 0;
    tlv::parseV<nas::tlv::NrCellInformation_V2>(&v14, v5, (uint64_t *)&__p);
    __int16 v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      int v9 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 226, v6, v7);
    }
  }
}

void sub_22242278C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MessageBase::applyTlv<nas::tlv::LteCellInformation_V3,void({block_pointer}&)(nas::tlv::LteCellInformation_V3 const&)>(qmi::MessageBase *a1, uint64_t a2)
{
  uint64_t TlvValue = (unsigned __int8 *)qmi::MessageBase::findTlvValue(a1);
  if (TlvValue)
  {
    int v6 = TlvValue;
    int v7 = v5;
    uint64_t v13 = 0;
    int v14 = TlvValue;
    std::string __p = 0;
    uint64_t v12 = 0;
    tlv::parseV<nas::tlv::LteCellInformation_V3>(&v14, v5, (uint64_t *)&__p);
    __int16 v8 = v14;
    if (v14) {
      (*(void (**)(void))(*(void *)a2 + 16))();
    }
    if (__p)
    {
      uint64_t v12 = __p;
      operator delete(__p);
    }
    if (!v8)
    {
      int v9 = (void (*)(uint64_t, uint64_t, unsigned __int8 *, void))*MEMORY[0x263F8BD78];
      uint64_t v10 = *(unsigned __int16 *)a1;
      v9(v10, 210, v6, v7);
    }
  }
}

void sub_222422880(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::HintType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::HintType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::HintType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::HintType>::clone()
{
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::BorderInfo>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::BorderInfo>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::BorderInfo>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::BorderInfo>::clone()
{
}

char *qmi::MutableMessageBase::getTLV<nas::tlv::StatusType>(uint64_t a1)
{
  uint64_t v1 = *(const void ***)(a1 + 8);
  uint64_t v2 = *(const void ***)(a1 + 16);
  if (v1 != v2)
  {
    while (*((unsigned __int8 *)*v1 + 8) != 194)
    {
      if (++v1 == v2) {
        goto LABEL_8;
      }
    }
  }
  if (v1 == v2) {
LABEL_8:
  }
    operator new();
  if (!v3) {
    __cxa_bad_cast();
  }
  return v3 + 9;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::StatusType>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::StatusType>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::StatusType>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::StatusType>::clone()
{
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6358;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6358;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2K1XHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::C2K1XHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2K1XHints>::clone()
{
}

void sub_222422EC0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::~TlvWrapper(uint64_t a1)
{
  *(void *)a1 = &unk_26D4C63A8;
  char v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return a1;
}

{
  void **v3;

  *(void *)a1 = &unk_26D4C63A8;
  char v3 = (void **)(a1 + 16);
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&v3);
  return MEMORY[0x223C9A950](a1, 0x10A1C403082B835);
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::C2KEVDOHints>((uint64_t *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::C2KEVDOHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::C2KEVDOHints>::clone()
{
}

void sub_222423144(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  std::vector<at::tlv::CommandCallback>::__destroy_vector::operator()[abi:ne180100](&a9);
  MEMORY[0x223C9A950](v9, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C63F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C63F8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::GSMHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::GSMHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::GSMHints>::clone()
{
}

void sub_222423330(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *std::vector<nas::tlv::GSMHintItem>::__init_with_size[abi:ne180100]<nas::tlv::GSMHintItem*,nas::tlv::GSMHintItem*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v4 = result;
    if (a4 >= 0x199999999999999ALL) {
      std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
    }
    uint64_t result = std::__allocate_at_least[abi:ne180100]<std::allocator<nas::tlv::GSMHintItem>>((uint64_t)(result + 2), a4);
    int v7 = result;
    *uint64_t v4 = result;
    v4[1] = result;
    void v4[2] = (char *)result + 10 * v8;
    size_t v9 = a3 - (void)a2;
    if (v9) {
      uint64_t result = memmove(result, a2, v9);
    }
    v4[1] = (char *)v7 + v9;
  }
  return result;
}

void sub_2224233E8(_Unwind_Exception *exception_object)
{
  char v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6448;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6448;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::GSMHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::GSMHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::UMTSHints>::clone()
{
}

void sub_2224235B0(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6498;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6498;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::LTEHints_V3>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::LTEHints_V3>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::LTEHints_V3>::clone()
{
}

void sub_2224237C8(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C64E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C64E8;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::GSMHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::GSMHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::TDSHints>::clone()
{
}

void sub_2224239A8(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void *qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6538;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }
  return a1;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::~TlvWrapper(void *a1)
{
  *a1 = &unk_26D4C6538;
  uint64_t v2 = (void *)a1[2];
  if (v2)
  {
    a1[3] = v2;
    operator delete(v2);
  }

  JUMPOUT(0x223C9A950);
}

unint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::getSize(uint64_t a1)
{
  return tlv::size<nas::tlv::NRHints>((void *)(a1 + 16));
}

unsigned char *qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<nas::tlv::NRHints>((unsigned char **)a2, (_DWORD *)(a1 + 16));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::NRHints>::clone()
{
}

void sub_222423BE0(_Unwind_Exception *a1)
{
  uint64_t v4 = *v2;
  if (*v2)
  {
    *(void *)(v1 + 24) = v4;
    operator delete(v4);
  }
  MEMORY[0x223C9A950](v1, 0x10A1C403082B835);
  _Unwind_Resume(a1);
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::IsBootstrapDatabase>::~TlvWrapper()
{
}

uint64_t qmi::MutableMessageBase::TlvWrapper<nas::tlv::IsBootstrapDatabase>::getSize()
{
  return tlv::size<wds::tlv::IPPref>();
}

unsigned char **qmi::MutableMessageBase::TlvWrapper<nas::tlv::IsBootstrapDatabase>::write(uint64_t a1, uint64_t *a2)
{
  char v3 = *(unsigned char *)(a1 + 8);
  uint64_t v4 = (unsigned char *)*a2;
  uint64_t v5 = *a2 + 3;
  *a2 = v5;
  uint64_t result = tlv::writeV<wds::tlv::LocalAbort>((unsigned char **)a2, (unsigned char *)(a1 + 9));
  int v7 = (unsigned char *)(*a2 - v5);
  *uint64_t v4 = v3;
  *(_WORD *)(v4 + 1) = (_WORD)v7;
  return result;
}

void qmi::MutableMessageBase::TlvWrapper<nas::tlv::IsBootstrapDatabase>::clone()
{
}

void qmi::ClientRouter::SendProxy::SendProxy<nas::FrequencyHints::Request>(_DWORD *a1, int a2)
{
  *a1 = a2;
  operator new();
}

void sub_222423D60(_Unwind_Exception *a1)
{
  MEMORY[0x223C9A950](v1, 0x10F0C401BA14CC5);
  _Unwind_Resume(a1);
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNSt3__16vectorI14SystemRecord1xNS7_9allocatorIS9_EEEENS8_I16SystemRecordEVDONSA_ISD_EEEENS8_I15SystemRecordGSMNSA_ISG_EEEESI_NS8_I15SystemRecordLTENSA_ISJ_EEEESI_NS8_I14SystemRecordNRNSA_ISM_EEEEE3__2EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    char v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_error_impl(&dword_22231A000, v3, OS_LOG_TYPE_ERROR, "Bulk hints request failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c316_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNS_6vectorI14SystemRecord1xNS_9allocatorIS6_EEEENS5_I16SystemRecordEVDONS7_ISA_EEEENS5_I15SystemRecordGSMNS7_ISD_EEEESF_NS5_I15SystemRecordLTENS7_ISG_EEEESF_NS5_I14SystemRecordNRNS7_ISJ_EEEEE3__2EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c316_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver28sendRegistrationHintsForSlotEN10subscriber7SimSlotE9FetchTypebNS_6vectorI14SystemRecord1xNS_9allocatorIS6_EEEENS5_I16SystemRecordEVDONS7_ISA_EEEENS5_I15SystemRecordGSMNS7_ISD_EEEESF_NS5_I15SystemRecordLTENS7_ISG_EEEESF_NS5_I14SystemRecordNRNS7_ISJ_EEEEE3__2EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2,std::allocator<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C65F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2,std::allocator<QMICellMonitorCommandDriver::sendRegistrationHintsForSlot(subscriber::SimSlot,FetchType,BOOL,std::vector<SystemRecord1x>,std::vector<SystemRecordEVDO>,std::vector<SystemRecordGSM>,std::vector<SystemRecordGSM>,std::vector<SystemRecordLTE>,std::vector<SystemRecordGSM>,std::vector<SystemRecordNR>)::$_2>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C65F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void std::__destroy_at[abi:ne180100]<MCCAndMNC,0>(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void MCCAndMNC::~MCCAndMNC(void **this)
{
  if (*((char *)this + 63) < 0) {
    operator delete(this[5]);
  }
  if (*((char *)this + 31) < 0) {
    operator delete(this[1]);
  }
}

void std::vector<MCCAndMNC>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    __int16 v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        std::__destroy_at[abi:ne180100]<MCCAndMNC,0>(v4);
      }
      while ((void *)v4 != v2);
      __int16 v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void ___ZNO3qmi12ClientRouter9SendProxy8callbackIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNSt3__16vectorI9MCCAndMNCNS7_9allocatorIS9_EEEEE3__0EEOS1_OT__block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *MEMORY[0x263EF8340];
  int v2 = *(_DWORD *)(a2 + 4);
  if (v2)
  {
    char v3 = ***(NSObject ****)(a1 + 32);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      v4[0] = 67109378;
      v4[1] = v2;
      __int16 v5 = 2080;
      uint64_t v6 = qmi::asString();
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#N APACS status request failed: Error in response with code %d (%s)", (uint8_t *)v4, 0x12u);
    }
  }
}

uint64_t __copy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNS_6vectorI9MCCAndMNCNS_9allocatorIS6_EEEEE3__0EE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c166_ZTSNSt3__110shared_ptrIZN27QMICellMonitorCommandDriver21sendStatusHintForSlotEN10subscriber7SimSlotE14LASDStatusHintNS_6vectorI9MCCAndMNCNS_9allocatorIS6_EEEEE3__0EE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0,std::allocator<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6670;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void std::__shared_ptr_emplace<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0,std::allocator<QMICellMonitorCommandDriver::sendStatusHintForSlot(subscriber::SimSlot,LASDStatusHint,std::vector<MCCAndMNC>)::$_0>>::~__shared_ptr_emplace(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)&unk_26D4C6670;
  std::__shared_weak_count::~__shared_weak_count(a1);

  JUMPOUT(0x223C9A950);
}

void dormancy::QMIDormancyCommandDriver::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_22242423C(_Unwind_Exception *exception_object)
{
  char v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v3);
  }
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::initQMIDLFilterCommandDriver(capabilities::ct *a1, void *a2)
{
  char v3 = a1;
  uint64_t v72 = *MEMORY[0x263EF8340];
  if (!capabilities::ct::supportsDataQMIExtensions(a1)) {
    return;
  }
  if (!*a2)
  {
    uint64_t v52 = *((void *)v3 + 5);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v52, OS_LOG_TYPE_DEFAULT, "#E invaid factory", buf, 2u);
    }
    return;
  }
  if (*((int *)v3 + 41) < 1) {
    return;
  }
  unint64_t v4 = 0;
  uint64_t v54 = (uint64_t *)((char *)v3 + 112);
  uint64_t v53 = (void *)((char *)v3 + 128);
  do
  {
    int64x2_t v66 = 0uLL;
    long long v67 = 0;
    subscriber::makeSimSlotRange();
    uint64_t v6 = v63;
    __int16 v5 = v64;
    if (v63 != v64)
    {
      uint64_t v7 = v65;
      while ((v7(*v6) & 1) == 0)
      {
        if (++v6 == v5)
        {
          uint64_t v6 = v5;
          break;
        }
      }
      long long v57 = v64;
      if (v6 != v64)
      {
        int v55 = v7;
        char v56 = v5;
        do
        {
          char v8 = 0;
          uint64_t v9 = 0;
          long long v58 = v6;
          uint64_t v10 = *v6;
          uint64_t v68 = 0x200000001;
          do
          {
            char v11 = v8;
            uint64_t v12 = *(unsigned int *)&buf[4 * v9 - 8];
            uint64_t v13 = *((void *)v3 + 5);
            if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v14 = subscriber::asString();
              uint64_t v15 = asString();
              *(_DWORD *)long long buf = 67109634;
              *(_DWORD *)&uint8_t buf[4] = v4;
              *(_WORD *)int v70 = 2080;
              *(void *)&v70[2] = v14;
              *(_WORD *)&v70[10] = 2080;
              *(void *)&v70[12] = v15;
              _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I create DFSClientDriver for pdpID %d, simSlot %s, ipFamily %s", buf, 0x1Cu);
            }
            long long v62 = 0uLL;
            uint64_t v16 = *a2;
            uint64_t v17 = *((void *)v3 + 3);
            dispatch_object_t object = v17;
            if (v17) {
              dispatch_retain(v17);
            }
            int v18 = (std::__shared_weak_count *)*((void *)v3 + 10);
            uint64_t v59 = *((void *)v3 + 9);
            uint64_t v60 = v18;
            if (v18) {
              atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(long long *__return_ptr, uint64_t, dispatch_object_t *, uint64_t, uint64_t, unint64_t, uint64_t *))(*(void *)v16 + 264))(&v62, v16, &object, v10, v12, v4, &v59);
            if (v60) {
              std::__shared_weak_count::__release_weak(v60);
            }
            if (object) {
              dispatch_release(object);
            }
            long long v19 = (void *)v66.i64[1];
            uint64_t v20 = v67;
            if (v66.i64[1] >= (unint64_t)v67)
            {
              uint64_t v21 = (void *)v66.i64[0];
              uint64_t v22 = (v66.i64[1] - v66.i64[0]) >> 4;
              unint64_t v23 = v22 + 1;
              if ((unint64_t)(v22 + 1) >> 60) {
                std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
              }
              int v24 = v3;
              uint64_t v25 = v10;
              unint64_t v26 = v4;
              uint64_t v27 = a2;
              if ((uint64_t)&v67[-v66.i64[0]] >> 3 > v23) {
                unint64_t v23 = (uint64_t)&v67[-v66.i64[0]] >> 3;
              }
              if ((unint64_t)&v67[-v66.i64[0]] >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v28 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v28 = v23;
              }
              uint64_t v71 = &v67;
              if (v28 >> 60) {
                std::__throw_bad_array_new_length[abi:ne180100]();
              }
              int64_t v29 = (char *)operator new(16 * v28);
              uint64_t v30 = &v29[16 * v22];
              *(_OWORD *)uint64_t v30 = v62;
              uint64_t v31 = v30 + 16;
              long long v62 = 0uLL;
              unint64_t v32 = &v29[16 * v28];
              *(void *)&v70[8] = v30 + 16;
              *(void *)&v70[16] = v32;
              if (v19 == v21)
              {
                int64x2_t v34 = vdupq_n_s64((unint64_t)v19);
                a2 = v27;
              }
              else
              {
                a2 = v27;
                do
                {
                  long long v33 = *((_OWORD *)v19 - 1);
                  v19 -= 2;
                  *((_OWORD *)v30 - 1) = v33;
                  v30 -= 16;
                  *long long v19 = 0;
                  v19[1] = 0;
                }
                while (v19 != v21);
                int64x2_t v34 = v66;
                uint64_t v20 = v67;
                uint64_t v31 = *(_OWORD **)&v70[8];
                unint64_t v32 = *(char **)&v70[16];
              }
              unint64_t v4 = v26;
              v66.i64[0] = (uint64_t)v30;
              v66.i64[1] = (uint64_t)v31;
              *(int64x2_t *)int v70 = v34;
              long long v67 = v32;
              *(void *)&v70[16] = v20;
              *(void *)long long buf = v34.i64[0];
              std::__split_buffer<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::~__split_buffer((uint64_t)buf);
              v66.i64[1] = (uint64_t)v31;
              uint64_t v10 = v25;
              char v3 = v24;
              if (*((void *)&v62 + 1)) {
                std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v62 + 1));
              }
            }
            else
            {
              *(_OWORD *)v66.i64[1] = v62;
              v66.i64[1] = (uint64_t)(v19 + 2);
            }
            char v8 = 1;
            uint64_t v9 = 1;
          }
          while ((v11 & 1) == 0);
          uint64_t v6 = v56;
          if (v58 + 1 != v56)
          {
            uint64_t v6 = v58 + 1;
            while ((v55(*v6) & 1) == 0)
            {
              if (++v6 == v56)
              {
                uint64_t v6 = v56;
                break;
              }
            }
          }
        }
        while (v6 != v57);
      }
    }
    unint64_t v35 = *((void *)v3 + 15);
    if (!v35)
    {
      unint64_t v37 = 0;
LABEL_63:
      uint64_t v41 = (char *)operator new(0x30uLL);
      *(void *)uint64_t v41 = 0;
      *((void *)v41 + 1) = v4;
      *((_DWORD *)v41 + 4) = v4;
      *(int64x2_t *)(v41 + 24) = v66;
      *((void *)v41 + 5) = v67;
      int64x2_t v66 = 0uLL;
      long long v67 = 0;
      float v42 = (float)(unint64_t)(*((void *)v3 + 17) + 1);
      float v43 = *((float *)v3 + 36);
      if (!v35 || (float)(v43 * (float)v35) < v42)
      {
        BOOL v44 = (v35 & (v35 - 1)) != 0;
        if (v35 < 3) {
          BOOL v44 = 1;
        }
        unint64_t v45 = v44 | (2 * v35);
        unint64_t v46 = vcvtps_u32_f32(v42 / v43);
        if (v45 <= v46) {
          size_t v47 = v46;
        }
        else {
          size_t v47 = v45;
        }
        std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::__rehash<true>((uint64_t)v54, v47);
        unint64_t v35 = *((void *)v3 + 15);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v35 <= v4) {
            unint64_t v37 = v4 % v35;
          }
          else {
            unint64_t v37 = v4;
          }
        }
        else
        {
          unint64_t v37 = (v35 + 0x7FFFFFFF) & v4;
        }
      }
      uint64_t v48 = *v54;
      long long v49 = *(void **)(*v54 + 8 * v37);
      if (v49)
      {
        *(void *)uint64_t v41 = *v49;
      }
      else
      {
        *(void *)uint64_t v41 = *v53;
        *uint64_t v53 = v41;
        *(void *)(v48 + 8 * v37) = v53;
        if (!*(void *)v41)
        {
LABEL_84:
          ++*((void *)v3 + 17);
          goto LABEL_85;
        }
        unint64_t v50 = *(void *)(*(void *)v41 + 8);
        if ((v35 & (v35 - 1)) != 0)
        {
          if (v50 >= v35) {
            v50 %= v35;
          }
        }
        else
        {
          v50 &= v35 - 1;
        }
        long long v49 = (void *)(*v54 + 8 * v50);
      }
      *long long v49 = v41;
      goto LABEL_84;
    }
    uint8x8_t v36 = (uint8x8_t)vcnt_s8((int8x8_t)v35);
    v36.i16[0] = vaddlv_u8(v36);
    if (v36.u32[0] > 1uLL)
    {
      unint64_t v37 = v4;
      if (v35 <= v4) {
        unint64_t v37 = v4 % v35;
      }
    }
    else
    {
      unint64_t v37 = (v35 + 0x7FFFFFFF) & v4;
    }
    long long v38 = *(uint64_t ***)(*v54 + 8 * v37);
    if (!v38) {
      goto LABEL_63;
    }
    unsigned int v39 = *v38;
    if (!*v38) {
      goto LABEL_63;
    }
    while (1)
    {
      unint64_t v40 = v39[1];
      if (v40 == v4) {
        break;
      }
      if (v36.u32[0] > 1uLL)
      {
        if (v40 >= v35) {
          v40 %= v35;
        }
      }
      else
      {
        v40 &= v35 - 1;
      }
      if (v40 != v37) {
        goto LABEL_63;
      }
LABEL_62:
      unsigned int v39 = (uint64_t *)*v39;
      if (!v39) {
        goto LABEL_63;
      }
    }
    if (v4 != *((_DWORD *)v39 + 4)) {
      goto LABEL_62;
    }
    uint64_t v51 = (void **)(v39 + 3);
    if (v39[3])
    {
      std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__clear[abi:ne180100](v39 + 3);
      operator delete(*v51);
      *uint64_t v51 = 0;
      v39[4] = 0;
      void v39[5] = 0;
    }
    *(int64x2_t *)(v39 + QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = v66;
    void v39[5] = (uint64_t)v67;
    long long v67 = 0;
    int64x2_t v66 = 0uLL;
LABEL_85:
    *(void *)long long buf = &v66;
    std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)buf);
    ++v4;
  }
  while ((uint64_t)v4 < *((int *)v3 + 41));
}

void sub_2224248C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,dispatch_object_t object,char *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  *(void *)(v30 - 160) = v29 + 24;
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)(v30 - 160));
  operator delete(v29);
  a23 = &a29;
  std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100]((void ***)&a23);
  _Unwind_Resume(a1);
}

uint64_t dormancy::QMIDormancyCommandDriver::QMIDormancyCommandDriver(uint64_t a1, uint64_t a2, dispatch_object_t *a3, int a4)
{
  dispatch_object_t object = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  DormancyCommandDriver::DormancyCommandDriver();
  uint64_t v6 = (capabilities::ct *)object;
  if (object) {
    dispatch_release(object);
  }
  *(void *)a1 = &unk_26D4C66C0;
  *(void *)(a1 + 88) = &unk_26D4C6760;
  *(_OWORD *)(a1 + 11QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_DWORD *)(a1 + 144) = 1065353216;
  *(_DWORD *)(a1 + 15QMIDataContextIPAggregator::getAPNObserver(this - 2) = a4;
  *(unsigned char *)(a1 + 156) = 0;
  *(unsigned char *)(a1 + 160) = 0;
  uint64_t v7 = (capabilities::ct *)capabilities::ct::supportedPDPContextCount(v6);
  *(_DWORD *)(a1 + 164) = v7;
  *(_WORD *)(a1 + 168) = 0;
  if ((unint64_t)capabilities::ct::supportedPDPContextCount(v7) >> 31) {
    __assert_rtn("QMIDormancyCommandDriver", "QMIDormancyCommandDriver.cpp", 74, "capabilities::ct::supportedPDPContextCount() <= std::numeric_limits<int>::max()");
  }
  return a1;
}

void sub_222424A64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(dormancy::QMIDormancyCommandDriver *this)
{
  *(void *)this = &unk_26D4C66C0;
  *((void *)this + 11) = &unk_26D4C6760;
  std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::~__hash_table((uint64_t)this + 112);
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 13);
  if (v2) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v2);
  }

  DormancyCommandDriver::~DormancyCommandDriver(this);
}

{
  uint64_t vars8;

  dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(this);

  JUMPOUT(0x223C9A950);
}

void dormancy::QMIDormancyCommandDriver::setObserver(void *a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[10];
  a1[9] = v5;
  a1[10] = v4;
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)v6))
  {
    for (uint64_t i = (void *)a1[16]; i; uint64_t i = (void *)*i)
    {
      char v8 = (uint64_t *)i[3];
      uint64_t v9 = (uint64_t *)i[4];
      while (v8 != v9)
      {
        uint64_t v10 = *v8;
        char v11 = (std::__shared_weak_count *)a2[1];
        uint64_t v12 = *a2;
        uint64_t v13 = v11;
        if (v11) {
          atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 40))(v10, &v12);
        if (v13) {
          std::__shared_weak_count::__release_weak(v13);
        }
        v8 += 2;
      }
    }
  }
}

void sub_222424C08(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

void dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(uint64_t a1, uint64_t a2, void *a3)
{
  char v3 = a3 + 1;
  uint64_t v4 = (void *)*a3;
  if ((void *)*a3 != a3 + 1)
  {
    uint64_t v6 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        break;
      }
      uint64_t v8 = *((unsigned int *)v4 + 8);
      uint64_t v9 = v6;
      do
      {
        int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 < (int)v8;
        if (v10 >= (int)v8) {
          uint64_t v12 = (uint64_t *)v7;
        }
        else {
          uint64_t v12 = (uint64_t *)(v7 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || (int)v8 < *((_DWORD *)v9 + 8)) {
        goto LABEL_49;
      }
      uint64_t v13 = v4 + 5;
      if (v9[7] != v4[7]) {
        goto LABEL_50;
      }
      uint64_t v14 = (void *)v9[5];
      uint64_t v15 = v9 + 6;
      if (v14 != v15)
      {
        uint64_t v16 = (void *)*v13;
        while (*((_DWORD *)v14 + 8) == *((_DWORD *)v16 + 8) && v14[7] == v16[7])
        {
          uint64_t v17 = (void *)v14[5];
          if (v17 != v14 + 6)
          {
            int v18 = (void *)v16[5];
            do
            {
              BOOL v19 = *((_DWORD *)v17 + 7) == *((_DWORD *)v18 + 7)
                 && *((unsigned __int8 *)v17 + 32) == *((unsigned __int8 *)v18 + 32);
              if (!v19) {
                goto LABEL_50;
              }
              uint64_t v20 = (void *)v17[1];
              uint64_t v21 = v17;
              if (v20)
              {
                do
                {
                  uint64_t v17 = v20;
                  uint64_t v20 = (void *)*v20;
                }
                while (v20);
              }
              else
              {
                do
                {
                  uint64_t v17 = (void *)v21[2];
                  BOOL v19 = *v17 == (void)v21;
                  uint64_t v21 = v17;
                }
                while (!v19);
              }
              uint64_t v22 = (void *)v18[1];
              if (v22)
              {
                do
                {
                  unint64_t v23 = v22;
                  uint64_t v22 = (void *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  unint64_t v23 = (void *)v18[2];
                  BOOL v19 = *v23 == (void)v18;
                  int v18 = v23;
                }
                while (!v19);
              }
              int v18 = v23;
            }
            while (v17 != v14 + 6);
          }
          int v24 = (void *)v14[1];
          if (v24)
          {
            do
            {
              uint64_t v25 = v24;
              int v24 = (void *)*v24;
            }
            while (v24);
          }
          else
          {
            do
            {
              uint64_t v25 = (void *)v14[2];
              BOOL v19 = *v25 == (void)v14;
              uint64_t v14 = v25;
            }
            while (!v19);
          }
          unint64_t v26 = (void *)v16[1];
          if (v26)
          {
            do
            {
              uint64_t v27 = v26;
              unint64_t v26 = (void *)*v26;
            }
            while (v26);
          }
          else
          {
            do
            {
              uint64_t v27 = (void *)v16[2];
              BOOL v19 = *v27 == (void)v16;
              uint64_t v16 = v27;
            }
            while (!v19);
          }
          uint64_t v16 = v27;
          uint64_t v14 = v25;
          if (v25 == v15) {
            goto LABEL_51;
          }
        }
        goto LABEL_50;
      }
LABEL_51:
      unint64_t v28 = (void *)v4[1];
      if (v28)
      {
        do
        {
          int64_t v29 = v28;
          unint64_t v28 = (void *)*v28;
        }
        while (v28);
      }
      else
      {
        do
        {
          int64_t v29 = (void *)v4[2];
          BOOL v19 = *v29 == (void)v4;
          uint64_t v4 = v29;
        }
        while (!v19);
      }
      uint64_t v4 = v29;
      if (v29 == v3) {
        return;
      }
    }
    uint64_t v8 = *((unsigned int *)v4 + 8);
LABEL_49:
    uint64_t v13 = v4 + 5;
LABEL_50:
    dormancy::QMIDormancyCommandDriver::handlePdpStateChanged_sync(std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&,std::map<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>> const&)::$_0::operator()<subscriber::SimSlot,std::map<int,std::map<DataContextType,BOOL>>>(a1, v8, v13);
    goto LABEL_51;
  }
}

void dormancy::QMIDormancyCommandDriver::start(dormancy::QMIDormancyCommandDriver *this)
{
  if (*((void *)this + 12)) {
    goto LABEL_16;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*((Registry **)this + 6));
  char v3 = ServiceMap;
  uint64_t v4 = off_26D4CD628;
  if (((unint64_t)off_26D4CD628 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)((unint64_t)off_26D4CD628 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = (char *)v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  aBlock[0] = (unint64_t)v4;
  uint64_t v8 = std::__hash_table<std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::__unordered_map_hasher<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::hash<unsigned long>,std::equal_to<unsigned long>,true>,std::__unordered_map_equal<unsigned long,std::__hash_value_type<unsigned long,std::shared_ptr<void>>,std::equal_to<unsigned long>,std::hash<unsigned long>,true>,std::allocator<std::__hash_value_type<unsigned long,std::shared_ptr<void>>>>::find<unsigned long>(&v3[1].__m_.__sig, aBlock);
  if (v8)
  {
    int v10 = (void *)v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v9);
      char v11 = 0;
      goto LABEL_10;
    }
  }
  else
  {
    int v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  char v11 = 1;
LABEL_10:
  std::string::basic_string[abi:ne180100]<0>(__p, "dormancy");
  xpc_object_t object = xpc_null_create();
  QMIClientPool::requestClient(v10, 1u, (uint64_t *)__p, (uint64_t)this + 88, (uint64_t)&object, &v34);
  long long v12 = v34;
  long long v34 = 0uLL;
  uint64_t v13 = (std::__shared_weak_count *)*((void *)this + 13);
  *((_OWORD *)this + 6) = v12;
  if (v13)
  {
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    if (*((void *)&v34 + 1)) {
      std::__shared_weak_count::__release_shared[abi:ne180100](*((std::__shared_weak_count **)&v34 + 1));
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v33 < 0)
  {
    operator delete(__p[0]);
    if (v11) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }
  if ((v11 & 1) == 0) {
LABEL_15:
  }
    std::__shared_weak_count::__release_shared[abi:ne180100](v9);
LABEL_16:
  uint64_t v14 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v14 || (uint64_t v15 = *((void *)this + 1), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v17 = v16;
  p_shared_weak_owners = &v16->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v16);
  uint64_t v19 = *((void *)this + 12);
  *(void *)&long long v34 = MEMORY[0x263EF8330];
  *((void *)&v34 + 1) = 1174405120;
  unint64_t v35 = ___ZN8dormancy24QMIDormancyCommandDriver11startClientEv_block_invoke;
  uint8x8_t v36 = &__block_descriptor_tmp_39;
  unint64_t v37 = this;
  uint64_t v38 = v15;
  unsigned int v39 = v17;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v20 = *(std::__shared_weak_count **)(v19 + 8);
  if (v20)
  {
    uint64_t v21 = std::__shared_weak_count::lock(v20);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = *(void *)v19;
      if (*(void *)v19)
      {
        uint64_t v40 = v19 + 88;
        uint64_t v41 = 1;
        MEMORY[0x223C999F0](v19 + 88);
        uint64_t v24 = *(void *)(v19 + 24);
        if (v24)
        {
          uint64_t v25 = v19 + 24;
          do
          {
            if (*(_WORD *)(v24 + 32)) {
              unint64_t v26 = (uint64_t *)v24;
            }
            else {
              unint64_t v26 = (uint64_t *)(v24 + 8);
            }
            if (*(_WORD *)(v24 + 32)) {
              uint64_t v25 = v24;
            }
            uint64_t v24 = *v26;
          }
          while (*v26);
          if (v25 != v19 + 24 && *(unsigned __int16 *)(v25 + 32) <= 1u) {
            __TUAssertTrigger();
          }
        }
        aBlock[0] = MEMORY[0x263EF8330];
        aBlock[1] = 0x40000000;
        aBlock[2] = (unint64_t)___ZN16QMIVirtualClient26registerUnsolicitedHandlerIN3wds11EventReport10IndicationEEEvU13block_pointerFvRKT_E_block_invoke;
        aBlock[3] = (unint64_t)&unk_26460CC70;
        aBlock[4] = (unint64_t)&v34;
        uint64_t v27 = (uint64_t *)_Block_copy(aBlock);
        unsigned __int16 v44 = 1;
        unint64_t v46 = &v44;
        unint64_t v28 = std::__tree<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::__map_value_compare<unsigned short,std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>,std::less<unsigned short>,true>,std::allocator<std::__value_type<unsigned short,dispatch::block<void({block_pointer})(qmi::IndicationBase const&)>>>>::__emplace_unique_key_args<unsigned short,std::piecewise_construct_t const&,std::tuple<unsigned short &&>,std::tuple<>>((uint64_t **)(v19 + 16), &v44, (uint64_t)&std::piecewise_construct, &v46);
        int64_t v29 = v28[5];
        void v28[5] = v27;
        if (v29) {
          _Block_release(v29);
        }
        std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&v40);
        uint64_t v40 = 0;
        uint64_t v41 = 0;
        uint64_t v30 = *(void *)(v19 + 64);
        uint64_t v42 = *(void *)(v19 + 56);
        uint64_t v43 = v30;
        if (v30) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v30 + 8), 1uLL, memory_order_relaxed);
        }
        QMIClientPool::registerUnsolicitedHandler(v23, (uint64_t)&v40, v19, 1u);
        qmi::Client::~Client((qmi::Client *)&v40);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v22);
    }
  }
  if (v39) {
    std::__shared_weak_count::__release_weak(v39);
  }
  std::__shared_weak_count::__release_weak(v17);
}

void sub_222425184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22,uint64_t a23,char a24)
{
  std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)&a24);
  std::__shared_weak_count::__release_shared[abi:ne180100](v25);
  if (a22) {
    std::__shared_weak_count::__release_weak(a22);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver11startClientEv_block_invoke(void *a1, uint64_t a2)
{
  char v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    uint64_t v5 = a1[4];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      if (a1[5])
      {
        uint64_t v7 = *(void *)(a2 + 16);
        if (v7) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v8 = *(std::__shared_weak_count **)(v5 + 16);
        if (v8)
        {
          if (std::__shared_weak_count::lock(v8)) {
            operator new();
          }
        }
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v6);
    }
  }
}

uint64_t __copy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21DormancyCommandDriverEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_40c46_ZTSNSt3__18weak_ptrI21DormancyCommandDriverEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void non-virtual thunk to'dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver(dormancy::QMIDormancyCommandDriver *this)
{
}

{
  uint64_t vars8;

  dormancy::QMIDormancyCommandDriver::~QMIDormancyCommandDriver((dormancy::QMIDormancyCommandDriver *)((char *)this - 88));

  JUMPOUT(0x223C9A950);
}

uint64_t dormancy::QMIDormancyCommandDriver::shutdown(dormancy::QMIDormancyCommandDriver *this, uint64_t a2)
{
  uint64_t v3 = *((void *)this + 12);
  v9[0] = v3 + 88;
  v9[1] = 1;
  MEMORY[0x223C999F0](v3 + 88, a2);
  *(unsigned char *)(v3 + 74) = 0;
  uint64_t result = std::unique_lock<ctu::UnfairLock>::~unique_lock[abi:ne180100]((uint64_t)v9);
  for (uint64_t i = (void *)*((void *)this + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v6 = (uint64_t *)i[3];
    uint64_t v7 = (uint64_t *)i[4];
    while (v6 != v7)
    {
      uint64_t v8 = *v6;
      v6 += 2;
      uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)v8 + 72))(v8);
    }
  }
  return result;
}

void dormancy::QMIDormancyCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
  if (QMIVirtualClient::getServiceType(*a2) != 1) {
    __TUAssertTrigger();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'dormancy::QMIDormancyCommandDriver::registered(uint64_t a1, QMIVirtualClient **a2)
{
}

void dormancy::QMIDormancyCommandDriver::deregistered(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void non-virtual thunk to'dormancy::QMIDormancyCommandDriver::deregistered(uint64_t a1)
{
}

void dormancy::QMIDormancyCommandDriver::registerDormancyReports_sync(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 12);
  if (*(unsigned char *)(v2 + 72) && *(void *)(v2 + 56))
  {
    uint64_t v3 = *((void *)this + 5);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I registerDormancyReports", buf, 2u);
    }
    memset(v12, 0, sizeof(v12));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
    *qmi::MutableMessageBase::getTLV<wds::tlv::ReportDormancyStatus>((uint64_t)v12, 19) = 1;
    uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v4
      || (v5 = *((void *)this + 12), uint64_t v6 = *((void *)this + 1), (v7 = std::__shared_weak_count::lock(v4)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v8 = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v7);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 0x40000000;
    _OWORD v11[2] = ___ZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEv_block_invoke_2;
    void v11[3] = &__block_descriptor_tmp_10_4;
    void v11[4] = this;
    if (!*(unsigned char *)(v5 + 72) || !*(void *)(v5 + 56)) {
      __TUAssertTrigger();
    }
    uint64_t v20 = v5 + 40;
    uint64_t v21 = QMIServiceMsg::create();
    int v22 = 25000;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v14 = 1174405120;
    uint64_t v15 = ___ZN16QMIVirtualClient4sendIN3wds14SetEventReport7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    uint64_t v16 = &unk_26D4C6B50;
    uint64_t v18 = v6;
    uint64_t v19 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v11;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_26460CCD8;
    aBlock[4] = buf;
    uint64_t v9 = _Block_copy(aBlock);
    uint64_t v24 = v9;
    if (v21)
    {
      qmi::Client::send();
      uint64_t v9 = v24;
    }
    if (v9) {
      _Block_release(v9);
    }
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
    std::__shared_weak_count::__release_weak(v8);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
  }
  else
  {
    int v10 = *((void *)this + 5);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v10, OS_LOG_TYPE_DEFAULT, "#I registerDormancyReports, QMI Client is not valid", buf, 2u);
    }
  }
}

void sub_22242597C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver28registerDormancyReports_syncEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void dormancy::QMIDormancyCommandDriver::enterPowerMode(uint64_t a1, QMIVirtualClient **a2, uint64_t a3, int a4)
{
  if (a4 == 1 && QMIVirtualClient::getServiceType(*a2) == 1)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 80);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = v7;
        uint64_t v9 = *(void *)(a1 + 72);
        if (v9) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 40))(v9, a3);
        }
        std::__shared_weak_count::__release_shared[abi:ne180100](v8);
      }
    }
  }
}

void sub_222425BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'dormancy::QMIDormancyCommandDriver::enterPowerMode(uint64_t a1, QMIVirtualClient **a2, uint64_t a3, int a4)
{
}

void dormancy::QMIDormancyCommandDriver::exitPowerMode(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 72);
      if (v5) {
        (*(void (**)(uint64_t))(*(void *)v5 + 48))(v5);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
}

void sub_222425C3C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  _Unwind_Resume(a1);
}

void non-virtual thunk to'dormancy::QMIDormancyCommandDriver::exitPowerMode(uint64_t a1)
{
}

void dormancy::QMIDormancyCommandDriver::sendDormancyRequest_sync(void *a1, uint64_t *a2, uint64_t a3, NSObject **a4)
{
  uint64_t v65 = *MEMORY[0x263EF8340];
  uint64_t v5 = a1[12];
  if (*(unsigned char *)(v5 + 72) && *(void *)(v5 + 56))
  {
    uint64_t v9 = a1[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a3;
      _os_log_impl(&dword_22231A000, v9, OS_LOG_TYPE_DEFAULT, "#I QMI Client is valid, sending QMI_WDS_GO_DORMANT due to %s", (uint8_t *)&buf, 0xCu);
    }
    long long v51 = 0u;
    long long v52 = 0u;
    int v10 = (capabilities::ct *)qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)&v51);
    if (capabilities::ct::supportsDataQMIExtensions(v10))
    {
      v46[0] = MEMORY[0x263EF8330];
      v46[1] = 1174405120;
      size_t v47 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke;
      uint64_t v48 = &__block_descriptor_tmp_12_17;
      char v11 = (std::__shared_weak_count *)a2[1];
      uint64_t v49 = *a2;
      unint64_t v50 = v11;
      if (v11) {
        atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v12 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned char *)*v12 + 8) != 17)
        {
          if (++v12 == (const void **)v52) {
            goto LABEL_31;
          }
        }
      }
      if (v12 == (const void **)v52) {
LABEL_31:
      }
        operator new();
      if (!v20) {
        __cxa_bad_cast();
      }
      v47((uint64_t)v46, v20 + 9);
      int v22 = v50;
      if (!v50) {
        goto LABEL_35;
      }
    }
    else
    {
      v41[0] = MEMORY[0x263EF8330];
      v41[1] = 1174405120;
      uint64_t v42 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_13;
      uint64_t v43 = &__block_descriptor_tmp_17_13;
      uint64_t v18 = (std::__shared_weak_count *)a2[1];
      uint64_t v44 = *a2;
      unint64_t v45 = v18;
      if (v18) {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v19 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned __int8 *)*v19 + 8) != 161)
        {
          if (++v19 == (const void **)v52) {
            goto LABEL_32;
          }
        }
      }
      if (v19 == (const void **)v52) {
LABEL_32:
      }
        operator new();
      if (!v21) {
        __cxa_bad_cast();
      }
      v42((uint64_t)v41, v21 + 9);
      v36[0] = MEMORY[0x263EF8330];
      v36[1] = 1174405120;
      unint64_t v37 = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_18;
      uint64_t v38 = &__block_descriptor_tmp_22_12;
      uint64_t v30 = (std::__shared_weak_count *)a2[1];
      uint64_t v39 = *a2;
      uint64_t v40 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v31 = (const void **)*((void *)&v51 + 1);
      if (*((void *)&v51 + 1) != (void)v52)
      {
        while (*((unsigned __int8 *)*v31 + 8) != 162)
        {
          if (++v31 == (const void **)v52) {
            goto LABEL_62;
          }
        }
      }
      if (v31 == (const void **)v52) {
LABEL_62:
      }
        operator new();
      if (!v32) {
        __cxa_bad_cast();
      }
      v37((uint64_t)v36, v32 + 9);
      if (v40) {
        std::__shared_weak_count::__release_shared[abi:ne180100](v40);
      }
      int v22 = v45;
      if (!v45) {
        goto LABEL_35;
      }
    }
    std::__shared_weak_count::__release_shared[abi:ne180100](v22);
LABEL_35:
    uint64_t v23 = (std::__shared_weak_count *)a1[2];
    if (!v23 || (v24 = a1[12], v25 = a1[1], (unint64_t v26 = std::__shared_weak_count::lock(v23)) == 0)) {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v27 = v26;
    atomic_fetch_add_explicit(&v26->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v26);
    v33[0] = MEMORY[0x263EF8330];
    v33[1] = 1174405120;
    void v33[2] = ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_23;
    void v33[3] = &__block_descriptor_tmp_24_13;
    unint64_t v28 = *a4;
    void v33[4] = a1;
    dispatch_group_t group = v28;
    if (v28)
    {
      dispatch_retain(v28);
      dispatch_group_enter(group);
    }
    uint64_t v35 = a3;
    if (!*(unsigned char *)(v24 + 72) || !*(void *)(v24 + 56)) {
      __TUAssertTrigger();
    }
    uint64_t v53 = v24 + 40;
    uint64_t v54 = QMIServiceMsg::create();
    int v55 = 25000;
    uint64_t v56 = 0;
    long long v57 = 0;
    *(void *)&long long buf = MEMORY[0x263EF8330];
    *((void *)&buf + 1) = 1174405120;
    uint64_t v60 = ___ZN16QMIVirtualClient4sendIN3wds10DormantReq7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    unint64_t v61 = &unk_26D4C6C78;
    uint64_t v63 = v25;
    uint64_t v64 = v27;
    atomic_fetch_add_explicit(&v27->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    long long v62 = v33;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_26460CCD8;
    aBlock[4] = &buf;
    int64_t v29 = _Block_copy(aBlock);
    long long v57 = v29;
    if (v54)
    {
      qmi::Client::send();
      int64_t v29 = v57;
    }
    if (v29) {
      _Block_release(v29);
    }
    if (v64) {
      std::__shared_weak_count::__release_weak(v64);
    }
    std::__shared_weak_count::__release_weak(v27);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&v51);
    return;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl(&dword_22231A000, v13, OS_LOG_TYPE_DEFAULT, "#I QMI Client is not valid", (uint8_t *)&buf, 2u);
  }
  uint64_t v14 = (std::__shared_weak_count *)a1[10];
  if (v14)
  {
    uint64_t v15 = std::__shared_weak_count::lock(v14);
    if (v15)
    {
      uint64_t v16 = v15;
      uint64_t v17 = a1[9];
      if (v17) {
        (*(void (**)(uint64_t, void, void))(*(void *)v17 + 56))(v17, 0, 0);
      }
      std::__shared_weak_count::__release_shared[abi:ne180100](v16);
    }
  }
}

void sub_2224265A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, dispatch_group_t group, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  std::__shared_weak_count::__release_shared[abi:ne180100](v39);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke(uint64_t result, BOOL *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 4) != 0;
  return result;
}

uint64_t __copy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrIN8dormancy5Model7RequestEEE(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void __destroy_helper_block_e8_32c51_ZTSNSt3__110shared_ptrIN8dormancy5Model7RequestEEE(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_shared[abi:ne180100](v1);
  }
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_13(uint64_t result, unsigned char *a2)
{
  *a2 = **(unsigned char **)(result + 32);
  return result;
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_18(uint64_t result, unsigned char *a2)
{
  *a2 = *(_DWORD *)(*(void *)(result + 32) + 4);
  return result;
}

void ___ZN8dormancy24QMIDormancyCommandDriver24sendDormancyRequest_syncENSt3__110shared_ptrINS_5Model7RequestEEEPKcN8dispatch13group_sessionE_block_invoke_23(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void __copy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3)
  {
    dispatch_retain(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_group_enter(v4);
    }
  }
}

void __destroy_helper_block_e8_40c31_ZTSKN8dispatch13group_sessionE(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (v3)
    {
      dispatch_release(v3);
    }
  }
}

void dormancy::QMIDormancyCommandDriver::requestCurrentDormancyStatus_sync(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v2 = *((void *)this + 12);
  uint64_t v3 = *((void *)this + 5);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I Getting current dormancy status", buf, 2u);
    }
    memset(v12, 0, sizeof(v12));
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)v12);
    uint64_t v5 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v5
      || (uint64_t v6 = *((void *)this + 12), v7 = *((void *)this + 1), (v8 = std::__shared_weak_count::lock(v5)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v9 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v8);
    v11[0] = MEMORY[0x263EF8330];
    v11[1] = 0x40000000;
    _OWORD v11[2] = ___ZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEv_block_invoke;
    void v11[3] = &__block_descriptor_tmp_25_1;
    void v11[4] = this;
    if (!*(unsigned char *)(v6 + 72) || !*(void *)(v6 + 56)) {
      __TUAssertTrigger();
    }
    uint64_t v20 = v6 + 40;
    uint64_t v21 = QMIServiceMsg::create();
    int v22 = 25000;
    uint64_t v23 = 0;
    uint64_t v24 = 0;
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v14 = 1174405120;
    uint64_t v15 = ___ZN16QMIVirtualClient4sendIN3wds17GetDormancyStatus7RequestE21DormancyCommandDriverU13block_pointerFvRKNS2_8ResponseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSA_8weak_ptrIT0_EESC__block_invoke;
    uint64_t v16 = &unk_26D4C6CB0;
    uint64_t v18 = v7;
    uint64_t v19 = v9;
    atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    uint64_t v17 = v11;
    aBlock[0] = MEMORY[0x263EF8330];
    aBlock[1] = 0x40000000;
    aBlock[2] = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = &unk_26460CCD8;
    aBlock[4] = buf;
    int v10 = _Block_copy(aBlock);
    uint64_t v24 = v10;
    if (v21)
    {
      qmi::Client::send();
      int v10 = v24;
    }
    if (v10) {
      _Block_release(v10);
    }
    if (v19) {
      std::__shared_weak_count::__release_weak(v19);
    }
    std::__shared_weak_count::__release_weak(v9);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)v12);
  }
  else if (v4)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl(&dword_22231A000, v3, OS_LOG_TYPE_DEFAULT, "#I WDS Client is not ready", buf, 2u);
  }
}

void sub_222426B04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27)
{
  if (a25) {
    std::__shared_weak_count::__release_weak(a25);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)&a27);
  std::__shared_weak_count::__release_weak(v27);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a15);
  _Unwind_Resume(a1);
}

void ___ZN8dormancy24QMIDormancyCommandDriver33requestCurrentDormancyStatus_syncEv_block_invoke(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void *___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_2(void *result, void **a2)
{
  if (result + 4 != a2)
  {
    uint64_t v3 = (char *)result[4];
    BOOL v4 = (unsigned char *)result[5];
    size_t v5 = v4 - v3;
    unint64_t v6 = (v4 - v3) >> 2;
    uint64_t v7 = (uint64_t)a2[2];
    uint64_t v8 = (char *)*a2;
    if (v6 <= (v7 - (uint64_t)*a2) >> 2)
    {
      char v11 = a2 + 1;
      uint64_t v13 = (char *)a2[1];
      unint64_t v14 = (v13 - v8) >> 2;
      if (v14 < v6)
      {
        uint64_t v15 = &v3[4 * v14];
        if (v13 != v8)
        {
          uint64_t result = memmove(*a2, v3, v13 - v8);
          uint64_t v8 = (char *)*v11;
        }
        size_t v5 = v4 - v15;
        if (v4 == v15) {
          goto LABEL_20;
        }
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        goto LABEL_19;
      }
    }
    else
    {
      if (v8)
      {
        a2[1] = v8;
        operator delete(v8);
        uint64_t v7 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if ((v5 & 0x8000000000000000) != 0) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      uint64_t v9 = v7 >> 1;
      if (v7 >> 1 <= v6) {
        uint64_t v9 = (v4 - v3) >> 2;
      }
      if ((unint64_t)v7 >= 0x7FFFFFFFFFFFFFFCLL) {
        unint64_t v10 = 0x3FFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v10 = v9;
      }
      uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](a2, v10);
      long long v12 = (char *)a2[1];
      char v11 = a2 + 1;
      uint64_t v8 = v12;
    }
    if (v4 == v3)
    {
LABEL_20:
      *char v11 = &v8[v5];
      return result;
    }
    uint64_t v16 = v8;
    uint64_t v17 = v3;
LABEL_19:
    uint64_t result = memmove(v16, v17, v5);
    goto LABEL_20;
  }
  return result;
}

void *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList1E(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), (uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 2);
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList1E(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void *___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_2(void *result, void **a2)
{
  if (result + 4 != a2)
  {
    uint64_t v3 = (char *)result[4];
    BOOL v4 = (unsigned char *)result[5];
    size_t v5 = v4 - v3;
    unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 1);
    uint64_t v7 = (uint64_t)a2[2];
    uint64_t v8 = (char *)*a2;
    if (0xAAAAAAAAAAAAAAABLL * ((v7 - (uint64_t)*a2) >> 1) >= v6)
    {
      long long v12 = a2 + 1;
      unint64_t v14 = (char *)a2[1];
      if (0xAAAAAAAAAAAAAAABLL * ((v14 - v8) >> 1) < v6)
      {
        uint64_t v15 = &v3[2 * ((v14 - v8) >> 1)];
        if (v14 != v8)
        {
          uint64_t result = memmove(*a2, v3, v14 - v8);
          uint64_t v8 = (char *)*v12;
        }
        size_t v5 = v4 - v15;
        if (v4 == v15) {
          goto LABEL_20;
        }
        uint64_t v16 = v8;
        uint64_t v17 = v15;
        goto LABEL_19;
      }
    }
    else
    {
      if (v8)
      {
        a2[1] = v8;
        operator delete(v8);
        uint64_t v7 = 0;
        *a2 = 0;
        a2[1] = 0;
        a2[2] = 0;
      }
      if (v6 > 0x2AAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v9 = 0xAAAAAAAAAAAAAAABLL * (v7 >> 1);
      uint64_t v10 = 2 * v9;
      if (2 * v9 <= v6) {
        uint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v4 - v3) >> 1);
      }
      if (v9 >= 0x1555555555555555) {
        unint64_t v11 = 0x2AAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v11 = v10;
      }
      uint64_t result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](a2, v11);
      uint64_t v13 = (char *)a2[1];
      long long v12 = a2 + 1;
      uint64_t v8 = v13;
    }
    if (v4 == v3)
    {
LABEL_20:
      *long long v12 = &v8[v5];
      return result;
    }
    uint64_t v16 = v8;
    uint64_t v17 = v3;
LABEL_19:
    uint64_t result = memmove(v16, v17, v5);
    goto LABEL_20;
  }
  return result;
}

void *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList2E(uint64_t a1, uint64_t a2)
{
  *(void *)(a1 + 3QMIDataContextIPAggregator::getAPNObserver(this - 2) = 0;
  *(void *)(a1 + 40) = 0;
  uint64_t v2 = (void *)(a1 + 32);
  v2[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(v2, *(const void **)(a2 + 32), *(void *)(a2 + 40), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 1));
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList2E(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_36(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

_WORD *___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_2(_WORD *result, char *a2)
{
  *(_WORD *)a2 = result[16];
  uint64_t v2 = a2 + 8;
  if (a2 != (char *)(result + 16))
  {
    BOOL v4 = (char *)*((void *)result + 5);
    size_t v5 = (unsigned char *)*((void *)result + 6);
    size_t v6 = v5 - v4;
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 1);
    uint64_t v8 = *((void *)a2 + 3);
    unint64_t v9 = (char *)*((void *)a2 + 1);
    if (0xAAAAAAAAAAAAAAABLL * ((v8 - (uint64_t)v9) >> 1) >= v7)
    {
      uint64_t v13 = (void **)(a2 + 16);
      uint64_t v15 = (unsigned char *)*((void *)a2 + 2);
      if (0xAAAAAAAAAAAAAAABLL * ((v15 - v9) >> 1) < v7)
      {
        uint64_t v16 = &v4[2 * ((v15 - v9) >> 1)];
        if (v15 != v9)
        {
          uint64_t result = memmove(*((void **)a2 + 1), v4, v15 - v9);
          unint64_t v9 = (char *)*v13;
        }
        size_t v6 = v5 - v16;
        if (v5 == v16) {
          goto LABEL_20;
        }
        uint64_t v17 = v9;
        uint64_t v18 = v16;
        goto LABEL_19;
      }
    }
    else
    {
      if (v9)
      {
        *((void *)a2 + QMIDataContextIPAggregator::getAPNObserver(this - 2) = v9;
        operator delete(v9);
        uint64_t v8 = 0;
        void *v2 = 0;
        v2[1] = 0;
        v2[2] = 0;
      }
      if (v7 > 0x2AAAAAAAAAAAAAAALL) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (v8 >> 1);
      uint64_t v11 = 2 * v10;
      if (2 * v10 <= v7) {
        uint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v4) >> 1);
      }
      if (v10 >= 0x1555555555555555) {
        unint64_t v12 = 0x2AAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v12 = v11;
      }
      uint64_t result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](v2, v12);
      unint64_t v14 = (char *)*((void *)a2 + 2);
      uint64_t v13 = (void **)(a2 + 16);
      unint64_t v9 = v14;
    }
    if (v5 == v4)
    {
LABEL_20:
      char *v13 = &v9[v6];
      return result;
    }
    uint64_t v17 = v9;
    uint64_t v18 = v4;
LABEL_19:
    uint64_t result = memmove(v17, v18, v6);
    goto LABEL_20;
  }
  return result;
}

void *__copy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList3E(uint64_t a1, uint64_t a2)
{
  __int16 v2 = *(_WORD *)(a2 + 32);
  *(void *)(a1 + 40) = 0;
  uint64_t v3 = (void *)(a1 + 40);
  *((_WORD *)v3 - 4) = v2;
  v3[1] = 0;
  void v3[2] = 0;
  return std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(v3, *(const void **)(a2 + 40), *(void *)(a2 + 48), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 48) - *(void *)(a2 + 40)) >> 1));
}

void __destroy_helper_block_e8_32c36_ZTSKN3wds3tlv19FilteringPortsList3E(uint64_t a1)
{
  __int16 v2 = *(void **)(a1 + 40);
  if (v2)
  {
    *(void *)(a1 + 48) = v2;
    operator delete(v2);
  }
}

void ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_42(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  BOOL v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void dormancy::QMIDormancyCommandDriver::sendFilterUnsolicitedPacketsRequest_sync(uint64_t a1, int a2, NSObject **a3)
{
  if (capabilities::ct::supportsDataQMIExtensions((capabilities::ct *)a1)) {
    return;
  }
  uint64_t v6 = *(void *)(a1 + 96);
  if (!v6 || !*(unsigned char *)(v6 + 72) || !*(void *)(v6 + 56)) {
    return;
  }
  uint64_t v7 = 156;
  if (!*(unsigned char *)(a1 + 160)) {
    uint64_t v7 = 152;
  }
  switch(*(_DWORD *)(a1 + v7))
  {
    case 0:
      uint64_t v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl(&dword_22231A000, v8, OS_LOG_TYPE_DEFAULT, "#I Packet filtering is not supported", buf, 2u);
      }
      return;
    case 1:
      unint64_t v9 = *a3;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v67[0] = 0;
      v67[1] = 0;
      *(void *)&long long v68 = 0;
      *(_DWORD *)long long buf = 0;
      unsigned int v22 = *MEMORY[0x263F037F8];
      LODWORD(v91) = 0;
      if (!v22)
      {
        long long v34 = 0;
        char v33 = 0;
        goto LABEL_97;
      }
      unsigned int v23 = 0;
      while (2)
      {
        if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((void *)a1, (int **)v67, (unsigned int *)&v91, 5, (unsigned int *)buf))int v24 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((void *)a1, (int **)v67, (unsigned int *)&v91, 9, (unsigned int *)buf); {
        else
        }
          int v24 = 0;
LABEL_57:
        if (*(unsigned char *)(a1 + 160)) {
          uint64_t v25 = 156;
        }
        else {
          uint64_t v25 = 152;
        }
        int v26 = *(_DWORD *)(a1 + v25);
        if (v26 == 2)
        {
          if ((v24 & 1) == 0)
          {
            int v27 = 0;
            goto LABEL_67;
          }
        }
        else
        {
          int v27 = (v26 != 3) & v24;
          if (v26 != 3 || ((v24 ^ 1) & 1) != 0) {
            goto LABEL_67;
          }
        }
        int v27 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((void *)a1, (int **)v67, (unsigned int *)&v91, 6, (unsigned int *)buf);
        if (v27) {
          int v27 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList1>((void *)a1, (int **)v67, (unsigned int *)&v91, 10, (unsigned int *)buf);
        }
LABEL_67:
        LODWORD(v91) = ++v23;
        if (v23 < v22)
        {
          int v24 = 0;
          if (v27) {
            continue;
          }
          goto LABEL_57;
        }
        break;
      }
      if (!v27) {
        goto LABEL_76;
      }
      char v33 = v67[0];
      long long v34 = v67[1];
LABEL_97:
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(&v63, v33, (uint64_t)v34, (v34 - (unsigned char *)v33) >> 2);
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      *(_OWORD *)std::string __p = 0u;
      long long v90 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      uint64_t v84 = MEMORY[0x263EF8330];
      uint64_t v85 = 0x40000000;
      uint64_t v86 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke;
      unint64_t v87 = &__block_descriptor_tmp_27;
      char v88 = a2;
      uint64_t v40 = qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>((uint64_t)__p);
      v86((uint64_t)&v84, v40);
      if (a2 && v63 != v64)
      {
        uint64_t v91 = MEMORY[0x263EF8330];
        uint64_t v92 = 1174405120;
        uint64_t v93 = (void (*)(uint64_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_2;
        uint64_t v94 = &__block_descriptor_tmp_29_7;
        std::string::size_type v96 = 0;
        BOOL v97 = 0;
        uint64_t v95 = 0;
        std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(&v95, v63, (uint64_t)v64, ((unsigned char *)v64 - (unsigned char *)v63) >> 2);
        uint64_t v41 = (const void **)__p[1];
        if (__p[1] != (void *)v90)
        {
          while (*((unsigned char *)*v41 + 8) != 16)
          {
            if (++v41 == (const void **)v90) {
              goto LABEL_118;
            }
          }
        }
        if (v41 == (const void **)v90) {
LABEL_118:
        }
          operator new();
        if (!v45) {
          __cxa_bad_cast();
        }
        v93(&v91, v45 + 16);
        if (v95)
        {
          std::string::size_type v96 = v95;
          operator delete(v95);
        }
      }
      uint64_t v59 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v59
        || (uint64_t v60 = *(void *)(a1 + 96), v61 = *(void **)(a1 + 8), (v62 = std::__shared_weak_count::lock(v59)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      unint64_t v50 = v62;
      atomic_fetch_add_explicit(&v62->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v62);
      uint64_t v69 = MEMORY[0x263EF8330];
      uint64_t v70 = 1174405120;
      uint64_t v71 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList1EN8dispatch13group_sessionE_block_invoke_30;
      uint64_t v72 = &__block_descriptor_tmp_33_9;
      uint64_t v73 = a1;
      dispatch_group_t group = v9;
      if (v9)
      {
        dispatch_retain(v9);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      char v75 = a2;
      if (!*(unsigned char *)(v60 + 72) || !*(void *)(v60 + 56)) {
        __TUAssertTrigger();
      }
      uint64_t v98 = v60 + 40;
      uint64_t v99 = QMIServiceMsg::create();
      int v100 = 25000;
      uint64_t v101 = 0;
      std::string::size_type v102 = 0;
      *(void *)long long buf = MEMORY[0x263EF8330];
      uint64_t v77 = 1174405120;
      uint64_t v78 = (void (*)(uint8_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets17RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
      char v79 = &unk_26D4C6D88;
      uint64_t v81 = v61;
      unint64_t v82 = v50;
      atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v80 = &v69;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v104 = 0x40000000;
      v105 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
      char v106 = &unk_26460CCD8;
      uint64_t v107 = buf;
      long long v51 = _Block_copy(&aBlock);
      std::string::size_type v102 = v51;
      if (v99)
      {
        qmi::Client::send();
        long long v51 = v102;
      }
      if (v51) {
        goto LABEL_171;
      }
      goto LABEL_172;
    case 2:
      unint64_t v9 = *a3;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      v67[0] = 0;
      v67[1] = 0;
      *(void *)&long long v68 = 0;
      *(_DWORD *)long long buf = 0;
      unsigned int v10 = *MEMORY[0x263F037F8];
      LODWORD(v91) = 0;
      if (!v10)
      {
        int64_t v29 = 0;
        unint64_t v28 = 0;
        goto LABEL_79;
      }
      unsigned int v11 = 0;
      while (2)
      {
        if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((void *)a1, v67, (unsigned int *)&v91, 5, (unsigned int *)buf))int v12 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((void *)a1, v67, (unsigned int *)&v91, 9, (unsigned int *)buf); {
        else
        }
          int v12 = 0;
LABEL_17:
        if (*(unsigned char *)(a1 + 160)) {
          uint64_t v13 = 156;
        }
        else {
          uint64_t v13 = 152;
        }
        int v14 = *(_DWORD *)(a1 + v13);
        if (v14 == 2)
        {
          if ((v12 & 1) == 0)
          {
            int v15 = 0;
            goto LABEL_27;
          }
        }
        else
        {
          int v15 = (v14 != 3) & v12;
          if (v14 != 3 || ((v12 ^ 1) & 1) != 0) {
            goto LABEL_27;
          }
        }
        int v15 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((void *)a1, v67, (unsigned int *)&v91, 6, (unsigned int *)buf);
        if (v15) {
          int v15 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList2>((void *)a1, v67, (unsigned int *)&v91, 10, (unsigned int *)buf);
        }
LABEL_27:
        LODWORD(v91) = ++v11;
        if (v11 < v10)
        {
          int v12 = 0;
          if (v15) {
            continue;
          }
          goto LABEL_17;
        }
        break;
      }
      if (!v15)
      {
LABEL_76:
        uint64_t v35 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl(&dword_22231A000, v35, OS_LOG_TYPE_DEFAULT, "#I Getting port lists failed", buf, 2u);
        }
        goto LABEL_181;
      }
      unint64_t v28 = v67[0];
      int64_t v29 = v67[1];
LABEL_79:
      uint64_t v63 = 0;
      uint64_t v64 = 0;
      uint64_t v65 = 0;
      std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(&v63, v28, (uint64_t)v29, 0xAAAAAAAAAAAAAAABLL * ((v29 - (unsigned char *)v28) >> 1));
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      *(_OWORD *)std::string __p = 0u;
      long long v90 = 0u;
      qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
      uint64_t v84 = MEMORY[0x263EF8330];
      uint64_t v85 = 0x40000000;
      uint64_t v86 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke;
      unint64_t v87 = &__block_descriptor_tmp_34_2;
      char v88 = a2;
      uint8x8_t v36 = qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>((uint64_t)__p);
      v86((uint64_t)&v84, v36);
      if (a2 && v63 != v64)
      {
        uint64_t v91 = MEMORY[0x263EF8330];
        uint64_t v92 = 1174405120;
        uint64_t v93 = (void (*)(uint64_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_2;
        uint64_t v94 = &__block_descriptor_tmp_35_7;
        std::string::size_type v96 = 0;
        BOOL v97 = 0;
        uint64_t v95 = 0;
        std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(&v95, v63, (uint64_t)v64, 0xAAAAAAAAAAAAAAABLL * (((unsigned char *)v64 - (unsigned char *)v63) >> 1));
        unint64_t v37 = (const void **)__p[1];
        if (__p[1] != (void *)v90)
        {
          while (*((unsigned char *)*v37 + 8) != 16)
          {
            if (++v37 == (const void **)v90) {
              goto LABEL_116;
            }
          }
        }
        if (v37 == (const void **)v90) {
LABEL_116:
        }
          operator new();
        if (!v43) {
          __cxa_bad_cast();
        }
        v93(&v91, v43 + 16);
        if (v95)
        {
          std::string::size_type v96 = v95;
          operator delete(v95);
        }
      }
      unint64_t v46 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v46
        || (uint64_t v47 = *(void *)(a1 + 96), v48 = *(void **)(a1 + 8), (v49 = std::__shared_weak_count::lock(v46)) == 0))
      {
        std::__throw_bad_weak_ptr[abi:ne180100]();
      }
      unint64_t v50 = v49;
      atomic_fetch_add_explicit(&v49->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      std::__shared_weak_count::__release_shared[abi:ne180100](v49);
      uint64_t v69 = MEMORY[0x263EF8330];
      uint64_t v70 = 1174405120;
      uint64_t v71 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList2EN8dispatch13group_sessionE_block_invoke_36;
      uint64_t v72 = &__block_descriptor_tmp_39_10;
      uint64_t v73 = a1;
      dispatch_group_t group = v9;
      if (v9)
      {
        dispatch_retain(v9);
        if (group) {
          dispatch_group_enter(group);
        }
      }
      char v75 = a2;
      if (!*(unsigned char *)(v47 + 72) || !*(void *)(v47 + 56)) {
        __TUAssertTrigger();
      }
      uint64_t v98 = v47 + 40;
      uint64_t v99 = QMIServiceMsg::create();
      int v100 = 25000;
      uint64_t v101 = 0;
      std::string::size_type v102 = 0;
      *(void *)long long buf = MEMORY[0x263EF8330];
      uint64_t v77 = 1174405120;
      uint64_t v78 = (void (*)(uint8_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets27RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
      char v79 = &unk_26D4C6E10;
      uint64_t v81 = v48;
      unint64_t v82 = v50;
      atomic_fetch_add_explicit(&v50->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      uint64_t v80 = &v69;
      uint64_t aBlock = MEMORY[0x263EF8330];
      uint64_t v104 = 0x40000000;
      v105 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
      char v106 = &unk_26460CCD8;
      uint64_t v107 = buf;
      long long v51 = _Block_copy(&aBlock);
      std::string::size_type v102 = v51;
      if (v99)
      {
        qmi::Client::send();
        long long v51 = v102;
      }
      if (v51) {
LABEL_171:
      }
        _Block_release(v51);
LABEL_172:
      if (v82) {
        std::__shared_weak_count::__release_weak(v82);
      }
      std::__shared_weak_count::__release_weak(v50);
      if (group)
      {
        dispatch_group_leave(group);
        if (group) {
          dispatch_release(group);
        }
      }
      qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
      if (v9)
      {
        dispatch_group_leave(v9);
        dispatch_release(v9);
      }
      if (v63)
      {
        uint64_t v64 = v63;
        operator delete(v63);
      }
LABEL_181:
      long long v58 = v67[0];
      if (!v67[0]) {
        goto LABEL_184;
      }
      v67[1] = v67[0];
      goto LABEL_183;
    case 3:
      unint64_t v9 = *a3;
      if (v9)
      {
        dispatch_retain(v9);
        dispatch_group_enter(v9);
      }
      *(_OWORD *)long long v67 = 0u;
      long long v68 = 0u;
      *(_DWORD *)long long buf = 0;
      unsigned int v16 = *MEMORY[0x263F037F8];
      LODWORD(v91) = 0;
      if (!v16)
      {
        uint64_t v32 = 0;
        uint64_t v31 = 0;
        __int16 v30 = 0;
        goto LABEL_88;
      }
      unsigned int v17 = 0;
      break;
    default:
      return;
  }
LABEL_34:
  if (dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((void *)a1, (uint64_t)v67, (unsigned int *)&v91, 5, (unsigned int *)buf))int v18 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((void *)a1, (uint64_t)v67, (unsigned int *)&v91, 9, (unsigned int *)buf); {
  else
  }
    int v18 = 0;
  while (1)
  {
    uint64_t v19 = *(unsigned char *)(a1 + 160) ? 156 : 152;
    int v20 = *(_DWORD *)(a1 + v19);
    if (v20 == 2)
    {
      if ((v18 & 1) == 0)
      {
        int v21 = 0;
        goto LABEL_47;
      }
    }
    else
    {
      int v21 = (v20 != 3) & v18;
      if (v20 != 3 || ((v18 ^ 1) & 1) != 0) {
        goto LABEL_47;
      }
    }
    int v21 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((void *)a1, (uint64_t)v67, (unsigned int *)&v91, 6, (unsigned int *)buf);
    if (v21) {
      int v21 = dormancy::QMIDormancyCommandDriver::addOpenPorts_sync<wds::tlv::FilteringPortsList3>((void *)a1, (uint64_t)v67, (unsigned int *)&v91, 10, (unsigned int *)buf);
    }
LABEL_47:
    LODWORD(v91) = ++v17;
    if (v17 >= v16) {
      break;
    }
    int v18 = 0;
    if (v21) {
      goto LABEL_34;
    }
  }
  if (!v21)
  {
    uint64_t v42 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl(&dword_22231A000, v42, OS_LOG_TYPE_DEFAULT, "#I Getting port lists failed", buf, 2u);
    }
    goto LABEL_156;
  }
  __int16 v30 = (__int16)v67[0];
  uint64_t v31 = v67[1];
  uint64_t v32 = v68;
LABEL_88:
  LOWORD(v6QMIEnhancedLQMCommandDriver::unregister_sync((uint64_t)this, 3) = v30;
  uint64_t v65 = 0;
  uint64_t v66 = 0;
  uint64_t v64 = 0;
  std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(&v64, v31, v32, 0xAAAAAAAAAAAAAAABLL * ((v32 - (uint64_t)v31) >> 1));
  if (v9)
  {
    dispatch_retain(v9);
    dispatch_group_enter(v9);
  }
  *(_OWORD *)std::string __p = 0u;
  long long v90 = 0u;
  qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
  uint64_t v84 = MEMORY[0x263EF8330];
  uint64_t v85 = 0x40000000;
  uint64_t v86 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke;
  unint64_t v87 = &__block_descriptor_tmp_40_4;
  char v88 = a2;
  uint64_t v38 = qmi::MutableMessageBase::getTLV<wds::tlv::EnableFiltering>((uint64_t)__p);
  v86((uint64_t)&v84, v38);
  if (a2 && v64 != v65)
  {
    *(void *)long long buf = MEMORY[0x263EF8330];
    uint64_t v77 = 1174405120;
    uint64_t v78 = (void (*)(uint8_t *, char *))___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_2;
    char v79 = &__block_descriptor_tmp_41_4;
    LOWORD(v80) = (_WORD)v63;
    unint64_t v82 = 0;
    uint64_t v83 = 0;
    uint64_t v81 = 0;
    std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(&v81, v64, (uint64_t)v65, 0xAAAAAAAAAAAAAAABLL * ((v65 - (unsigned char *)v64) >> 1));
    uint64_t v39 = (const void **)__p[1];
    if (__p[1] != (void *)v90)
    {
      while (*((unsigned char *)*v39 + 8) != 16)
      {
        if (++v39 == (const void **)v90) {
          goto LABEL_117;
        }
      }
    }
    if (v39 == (const void **)v90) {
LABEL_117:
    }
      operator new();
    if (!v44) {
      __cxa_bad_cast();
    }
    v78(buf, v44 + 16);
    if (v81)
    {
      unint64_t v82 = (std::__shared_weak_count *)v81;
      operator delete(v81);
    }
  }
  long long v52 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v52
    || (uint64_t v53 = *(void *)(a1 + 96), v54 = *(uint64_t **)(a1 + 8), (v55 = std::__shared_weak_count::lock(v52)) == 0))
  {
    std::__throw_bad_weak_ptr[abi:ne180100]();
  }
  uint64_t v56 = v55;
  atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  std::__shared_weak_count::__release_shared[abi:ne180100](v55);
  uint64_t v69 = MEMORY[0x263EF8330];
  uint64_t v70 = 1174405120;
  uint64_t v71 = ___ZN8dormancy24QMIDormancyCommandDriver15sendQMIMessagesEbN3wds3tlv19FilteringPortsList3EN8dispatch13group_sessionE_block_invoke_42;
  uint64_t v72 = &__block_descriptor_tmp_45_5;
  uint64_t v73 = a1;
  dispatch_group_t group = v9;
  if (v9)
  {
    dispatch_retain(v9);
    if (group) {
      dispatch_group_enter(group);
    }
  }
  char v75 = a2;
  if (!*(unsigned char *)(v53 + 72) || !*(void *)(v53 + 56)) {
    __TUAssertTrigger();
  }
  uint64_t v98 = v53 + 40;
  uint64_t v99 = QMIServiceMsg::create();
  int v100 = 25000;
  uint64_t v101 = 0;
  std::string::size_type v102 = 0;
  uint64_t v91 = MEMORY[0x263EF8330];
  uint64_t v92 = 1174405120;
  uint64_t v93 = (void (*)(uint64_t *, char *))___ZN16QMIVirtualClient4sendIN3wds25FilterUnsolicitedPackets37RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
  uint64_t v94 = &unk_26D4C6E98;
  std::string::size_type v96 = v54;
  BOOL v97 = v56;
  atomic_fetch_add_explicit(&v56->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v95 = &v69;
  uint64_t aBlock = MEMORY[0x263EF8330];
  uint64_t v104 = 0x40000000;
  v105 = ___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
  char v106 = &unk_26460CCD8;
  uint64_t v107 = (uint8_t *)&v91;
  long long v57 = _Block_copy(&aBlock);
  std::string::size_type v102 = v57;
  if (v99)
  {
    qmi::Client::send();
    long long v57 = v102;
  }
  if (v57) {
    _Block_release(v57);
  }
  if (v97) {
    std::__shared_weak_count::__release_weak(v97);
  }
  std::__shared_weak_count::__release_weak(v56);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
  if (v64)
  {
    uint64_t v65 = v64;
    operator delete(v64);
  }
LABEL_156:
  long long v58 = v67[1];
  if (v67[1])
  {
    *(void **)&long long v68 = v67[1];
LABEL_183:
    operator delete(v58);
  }
LABEL_184:
  if (v9)
  {
    dispatch_group_leave(v9);
    dispatch_release(v9);
  }
}

void sub_2224287E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,dispatch_group_t group,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,std::__shared_weak_count *a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  uint64_t v42 = *(void **)(v40 - 200);
  if (v42)
  {
    *(void *)(v40 - 19QMIDataContextIPAggregator::getAPNObserver(this - 2) = v42;
    operator delete(v42);
  }
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a39);
  if (v39)
  {
    dispatch_group_leave(v39);
    dispatch_release(v39);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a13) {
    operator delete(a13);
  }
  if (v39)
  {
    dispatch_group_leave(v39);
    dispatch_release(v39);
  }
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::getLLFilters_sync(dormancy::QMIDormancyCommandDriver *this@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v4 = *((void *)this + 15);
  if (v4)
  {
    uint8x8_t v5 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v5.i16[0] = vaddlv_u8(v5);
    if (v5.u32[0] > 1uLL)
    {
      unint64_t v6 = a2;
      if (v4 <= a2) {
        unint64_t v6 = a2 % v4;
      }
    }
    else
    {
      unint64_t v6 = (v4 - 1) & a2;
    }
    uint64_t v7 = *(uint64_t ***)(*((void *)this + 14) + 8 * v6);
    if (v7)
    {
      for (uint64_t i = *v7; i; uint64_t i = (uint64_t *)*i)
      {
        unint64_t v9 = i[1];
        if (v9 == a2)
        {
          if (*((_DWORD *)i + 4) == a2)
          {
            uint64_t v10 = i[3];
            for (uint64_t j = i[4]; v10 != j; v10 += 16)
            {
              uint64_t v12 = 0;
              uint64_t v13 = 0;
              uint64_t v14 = 0;
              (*(void (**)(uint64_t *__return_ptr))(**(void **)v10 + 96))(&v12);
              std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(a3, a3[1], v12, v13, 0xCCCCCCCCCCCCCCCDLL * ((v13 - v12) >> 5));
              int v15 = (void **)&v12;
              std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v15);
            }
            return;
          }
        }
        else
        {
          if (v5.u32[0] > 1uLL)
          {
            if (v9 >= v4) {
              v9 %= v4;
            }
          }
          else
          {
            v9 &= v4 - 1;
          }
          if (v9 != v6) {
            return;
          }
        }
      }
    }
  }
}

void sub_222428B0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, void ***a12)
{
  a12 = &a9;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a12);
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&a9);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::addLLFilter_sync(dormancy::QMIDormancyCommandDriver *a1, int a2, uint64_t a3, void *a4)
{
  v13[4] = *MEMORY[0x263EF8340];
  uint64_t v7 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>((void *)a1 + 14, a2);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)v7[3];
    unint64_t v9 = (uint64_t *)v7[4];
    if (v8 == v9) {
      goto LABEL_10;
    }
    char v10 = 0;
    do
    {
      while (1)
      {
        uint64_t v11 = *v8;
        std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v12, (uint64_t)a4);
        LOBYTE(v11) = (*(uint64_t (**)(uint64_t, uint64_t, void *))(*(void *)v11 + 80))(v11, a3, v12);
        std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v12);
        if ((v11 & 1) == 0) {
          break;
        }
        v13[0] = &unk_26D4C6ED8;
        v13[3] = v13;
        std::__function::__value_func<void ()(BOOL)>::swap[abi:ne180100](v13, a4);
        std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v13);
        v8 += 2;
        char v10 = 1;
        if (v8 == v9) {
          goto LABEL_11;
        }
      }
      v8 += 2;
    }
    while (v8 != v9);
    if ((v10 & 1) == 0) {
LABEL_10:
    }
      std::function<void ()(BOOL)>::operator()((uint64_t)a4, 0);
LABEL_11:
    dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(a1);
  }
  else
  {
    std::function<void ()(BOOL)>::operator()((uint64_t)a4, 0);
  }
}

void sub_222428CDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v2 = (void *)*((void *)this + 16);
  uint64_t v23 = 0;
  uint64_t v24 = 0;
  uint64_t v22 = 0;
  if (v2)
  {
    do
    {
      uint64_t v3 = v2[3];
      uint64_t v4 = v2[4];
      while (v3 != v4)
      {
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        int v27 = 0;
        (*(void (**)(void ***__return_ptr))(**(void **)v3 + 96))(&v25);
        std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(&v22, v23, (uint64_t)v25, v26, 0xCCCCCCCCCCCCCCCDLL * ((v26 - (uint64_t)v25) >> 5));
        aBlock[0] = (void **)&v25;
        std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](aBlock);
        v3 += 16;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
    uint64_t v5 = v22;
    uint64_t v6 = v23;
  }
  else
  {
    uint64_t v6 = 0;
    uint64_t v5 = 0;
  }
  int v7 = v5 != v6;
  if (!*((unsigned char *)this + 169) || *((unsigned __int8 *)this + 168) != v7)
  {
    *((_WORD *)this + 84) = (v5 != v6) | 0x100;
    *(_OWORD *)std::string __p = 0u;
    long long v21 = 0u;
    qmi::MutableMessageBase::MutableMessageBase((qmi::MutableMessageBase *)__p);
    v18[0] = MEMORY[0x263EF8330];
    v18[1] = 0x40000000;
    void v18[2] = ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke;
    v18[3] = &__block_descriptor_tmp_47_1;
    char v19 = v7;
    uint64_t v8 = (const void **)__p[1];
    if (__p[1] != (void *)v21)
    {
      while (*((unsigned char *)*v8 + 8) != 16)
      {
        if (++v8 == (const void **)v21) {
          goto LABEL_17;
        }
      }
    }
    if (v8 == (const void **)v21) {
LABEL_17:
    }
      operator new();
    if (!v9) {
      __cxa_bad_cast();
    }
    ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke((uint64_t)v18, v9 + 9);
    char v10 = (std::__shared_weak_count *)*((void *)this + 2);
    if (!v10
      || (uint64_t v11 = *((void *)this + 12), v12 = *((void *)this + 1), (v13 = std::__shared_weak_count::lock(v10)) == 0))
    {
      std::__throw_bad_weak_ptr[abi:ne180100]();
    }
    uint64_t v14 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_shared[abi:ne180100](v13);
    v16[0] = MEMORY[0x263EF8330];
    v16[1] = 0x40000000;
    void v16[2] = ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke_2;
    void v16[3] = &__block_descriptor_tmp_48_4;
    void v16[4] = this;
    char v17 = v7;
    if (!*(unsigned char *)(v11 + 72) || !*(void *)(v11 + 56)) {
      __TUAssertTrigger();
    }
    uint64_t v32 = v11 + 40;
    uint64_t v33 = QMIServiceMsg::create();
    int v34 = 25000;
    uint64_t v35 = 0;
    uint8x8_t v36 = 0;
    uint64_t v25 = (void **)MEMORY[0x263EF8330];
    uint64_t v26 = 1174405120;
    int v27 = ___ZN16QMIVirtualClient4sendIN3wds16DataActivityInfo7RequestE21DormancyCommandDriverU13block_pointerFvRKN3qmi12ResponseBaseEEEENSt3__19enable_ifIXntsr3std26is_member_function_pointerIT1_EE5valueEvE4typeERKT_NSB_8weak_ptrIT0_EESD__block_invoke;
    unint64_t v28 = &unk_26D4C6FA0;
    uint64_t v30 = v12;
    uint64_t v31 = v14;
    atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    int64_t v29 = v16;
    aBlock[0] = (void **)MEMORY[0x263EF8330];
    aBlock[1] = (void **)0x40000000;
    aBlock[2] = (void **)___ZNO3qmi6Client9SendProxy8callbackIRKNS_12ResponseBaseEEEOS1_U13block_pointerFvT_E_block_invoke_14;
    aBlock[3] = (void **)&unk_26460CCD8;
    aBlock[4] = (void **)&v25;
    int v15 = _Block_copy(aBlock);
    uint8x8_t v36 = v15;
    if (v33)
    {
      qmi::Client::send();
      int v15 = v36;
    }
    if (v15) {
      _Block_release(v15);
    }
    if (v31) {
      std::__shared_weak_count::__release_weak(v31);
    }
    std::__shared_weak_count::__release_weak(v14);
    qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)__p);
  }
  uint64_t v25 = (void **)&v22;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100](&v25);
}

void sub_2224291AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char *a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    std::__shared_weak_count::__release_weak(a34);
  }
  qmi::Client::SendProxy::~SendProxy((qmi::Client::SendProxy *)(v35 - 160));
  std::__shared_weak_count::__release_weak(v34);
  qmi::MutableMessageBase::~MutableMessageBase((qmi::MutableMessageBase *)&a21);
  a21 = &a25;
  std::vector<DataIPFilter>::__destroy_vector::operator()[abi:ne180100]((void ***)&a21);
  _Unwind_Resume(a1);
}

void dormancy::QMIDormancyCommandDriver::deleteLLFilter_sync(dormancy::QMIDormancyCommandDriver *a1, int a2, uint64_t a3, uint64_t a4)
{
  void v11[4] = *MEMORY[0x263EF8340];
  int v7 = std::__hash_table<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::__unordered_map_hasher<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::hash<int>,std::equal_to<int>,true>,std::__unordered_map_equal<int,std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>,std::equal_to<int>,std::hash<int>,true>,std::allocator<std::__hash_value_type<int,std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>>>>::find<int>((void *)a1 + 14, a2);
  if (v7)
  {
    uint64_t v8 = (uint64_t *)v7[3];
    unint64_t v9 = (uint64_t *)v7[4];
    while (v8 != v9)
    {
      uint64_t v10 = *v8;
      std::__function::__value_func<void ()(BOOL)>::__value_func[abi:ne180100]((uint64_t)v11, a4);
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v10 + 88))(v10, a3, v11);
      std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100](v11);
      v8 += 2;
    }
    dormancy::QMIDormancyCommandDriver::updateLLFiltersInstalledStatus(a1);
  }
}

void sub_222429310(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  std::__function::__value_func<void ()(BOOL)>::~__value_func[abi:ne180100]((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke(uint64_t result, unsigned char *a2)
{
  *a2 = *(unsigned char *)(result + 32);
  return result;
}

void ___ZN8dormancy24QMIDormancyCommandDriver30updateLLFiltersInstalledStatusEv_block_invoke_2(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(a2 + 16);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  std::__throw_bad_weak_ptr[abi:ne180100]();
}

void dormancy::QMIDormancyCommandDriver::handleDumpState_sync(dormancy::QMIDormancyCommandDriver *this)
{
  uint64_t v9 = *MEMORY[0x263EF8340];
  uint64_t v2 = *((void *)this + 5);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = 136315138;
    uint64_t v8 = asStringBool();
    _os_log_impl(&dword_22231A000, v2, OS_LOG_TYPE_DEFAULT, "#I DATA::     fIsLLFiltersInstalled: %s", (uint8_t *)&v7, 0xCu);
  }
  for (uint64_t i = (void *)*((void *)this + 16); i; uint64_t i = (void *)*i)
  {
    uint64_t v4 = (uint64_t *)i[3];
    uint64_t v5 = (uint64_t *)i[4];
    while (v4 != v5)
    {
      uint64_t v6 = *v4;
      v4 += 2;
      (*(void (**)(uint64_t))(*(void *)v6 + 64))(v6);
    }
  }
}

uint64_t std::__split_buffer<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::~__split_buffer(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  while (v2 != v3)
  {
    *(void *)(a1 + 16) = v2 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v2 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
      uint64_t v2 = *(void *)(a1 + 16);
    }
    else
    {
      v2 -= 16;
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__destroy_vector::operator()[abi:ne180100](void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__clear[abi:ne180100]((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void std::vector<std::shared_ptr<QMIDownLinkFilterCommandDriverInterface>>::__clear[abi:ne180100](uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_shared[abi:ne180100](v4);
    }
  }
  a1[1] = v2;
}

void *std::vector<wds::tlv::FilteringPortInfo1>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo1*,wds::tlv::FilteringPortInfo1*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<unsigned int>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2224296DC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](void *a1, unint64_t a2)
{
  if (a2 >= 0x2AAAAAAAAAAAAAABLL) {
    std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
  }
  uint64_t result = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<wms::tlv::BroadcastConfig3GPP>>((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[6 * v4];
  return result;
}

void *std::vector<wds::tlv::FilteringPortInfo2>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo2*,wds::tlv::FilteringPortInfo2*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_2224297AC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *std::vector<wds::tlv::FilteringPortInfo3>::__init_with_size[abi:ne180100]<wds::tlv::FilteringPortInfo3*,wds::tlv::FilteringPortInfo3*>(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = std::vector<wds::tlv::FilteringPortInfo2>::__vallocate[abi:ne180100](result, a4);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_222429828(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *std::vector<DataIPFilter>::__insert_with_size[abi:ne180100]<std::__wrap_iter<DataIPFilter*>,std::__wrap_iter<DataIPFilter*>>(uint64_t *result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a5 >= 1)
  {
    uint64_t v6 = a3;
    uint64_t v7 = result;
    uint64_t v8 = *result;
    uint64_t v9 = (a2 - *result) / 160;
    uint64_t v10 = *result + 160 * v9;
    uint64_t v12 = (uint64_t)(result + 2);
    uint64_t v11 = result[2];
    unint64_t v13 = result[1];
    if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v11 - v13) >> 5)) >= a5)
    {
      if ((uint64_t)(0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v13 - v10) >> 5)) >= a5)
      {
        uint64_t v40 = (a2 - *result) / 160;
        uint64_t v41 = a3 + 160 * a5;
        char v19 = (uint64_t *)result[1];
      }
      else
      {
        uint64_t v18 = a3 + 32 * ((uint64_t)(v13 - v10) >> 5);
        uint64_t result = (uint64_t *)std::__uninitialized_allocator_copy_impl[abi:ne180100]<std::allocator<DataIPFilter>,DataIPFilter*,DataIPFilter*,DataIPFilter*>((uint64_t)(result + 2), v18, a4, v13);
        char v19 = result;
        v7[1] = (uint64_t)result;
        if ((uint64_t)(v13 - v10) < 1) {
          return result;
        }
        uint64_t v40 = v9;
        uint64_t v41 = v18;
      }
      uint64_t v20 = v10 + 160 * a5;
      unint64_t v21 = (unint64_t)&v19[-20 * a5];
      uint64_t v22 = (uint64_t)v19;
      if (v21 < v13)
      {
        unint64_t v23 = v21;
        uint64_t v22 = (uint64_t)v19;
        do
        {
          std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v22, v23);
          v23 += 160;
          v22 += 160;
        }
        while (v23 < v13);
      }
      v7[1] = v22;
      if (v19 != (uint64_t *)v20)
      {
        uint64_t v24 = 0;
        uint64_t v25 = v8 + 32 * (((uint64_t)v19 - v20) >> 5) + 160 * v40;
        do
        {
          uint64_t v26 = &v19[v24];
          long long v27 = *(_OWORD *)(v25 + v24 * 8 - 144);
          *((_OWORD *)v26 - 10) = *(_OWORD *)(v25 + v24 * 8 - 160);
          *((_OWORD *)v26 - 9) = v27;
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)&v19[v24 - 16], (__n128 *)(v21 + v24 * 8 - 128));
          std::__optional_storage_base<DataIPFilterEndpoint,false>::__assign_from[abi:ne180100]<std::__optional_move_assign_base<DataIPFilterEndpoint,false>>((uint64_t)&v19[v24 - 9], (__n128 *)(v21 + v24 * 8 - 72));
          unint64_t v28 = &v19[v24];
          uint64_t v29 = *(void *)(v25 + v24 * 8 - 16);
          *(uint64_t *)((char *)v28 - 10) = *(void *)(v25 + v24 * 8 - 10);
          *(v28 - QMIDataContextIPAggregator::getAPNObserver(this - 2) = v29;
          v24 -= 20;
        }
        while (-4 * (((uint64_t)v19 - v20) >> 5) != v24);
      }
      return (uint64_t *)std::__copy_loop<std::_ClassicAlgPolicy>::operator()[abi:ne180100]<DataIPFilter *,DataIPFilter *,DataIPFilter *>((uint64_t)&v42, v6, v41, v10);
    }
    else
    {
      unint64_t v14 = a5 - 0x3333333333333333 * ((uint64_t)(v13 - v8) >> 5);
      if (v14 > 0x199999999999999) {
        std::vector<unsigned char>::__throw_length_error[abi:ne180100]();
      }
      unint64_t v15 = 0xCCCCCCCCCCCCCCCDLL * ((v11 - v8) >> 5);
      if (2 * v15 > v14) {
        unint64_t v14 = 2 * v15;
      }
      if (v15 >= 0xCCCCCCCCCCCCCCLL) {
        unint64_t v16 = 0x199999999999999;
      }
      else {
        unint64_t v16 = v14;
      }
      unint64_t v45 = result + 2;
      if (v16) {
        char v17 = (char *)std::__allocate_at_least[abi:ne180100]<std::allocator<DataIPFilter>>((uint64_t)(result + 2), v16);
      }
      else {
        char v17 = 0;
      }
      uint64_t v30 = (uint64_t)&v17[160 * v9];
      uint64_t v42 = v17;
      *(void *)&long long v43 = v30;
      *((void *)&v43 + 1) = v30;
      uint64_t v44 = &v17[160 * v16];
      uint64_t v31 = 5 * a5;
      uint64_t v32 = v30 + 160 * a5;
      uint64_t v33 = 32 * v31;
      do
      {
        std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter&,DataIPFilter*>(v30, v6);
        v30 += 160;
        v6 += 160;
        v33 -= 160;
      }
      while (v33);
      *((void *)&v43 + 1) = v32;
      std::__uninitialized_allocator_move_if_noexcept[abi:ne180100]<std::allocator<DataIPFilter>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>,std::reverse_iterator<DataIPFilter*>>(v12, v10, v10, *v7, *v7, v43, v43);
      *(void *)&long long v43 = v34;
      uint64_t v35 = v7[1];
      uint64_t v36 = v32;
      uint64_t v48 = v32;
      v46[0] = v12;
      v46[1] = &v47;
      v46[3] = 1;
      uint64_t v47 = v32;
      for (void v46[2] = &v48; v10 != v35; v48 += 160)
      {
        std::construct_at[abi:ne180100]<DataIPFilter,DataIPFilter,DataIPFilter*>(v36, v10);
        v10 += 160;
        uint64_t v36 = v48 + 160;
      }
      std::__exception_guard_exceptions<std::_AllocatorDestroyRangeReverse<std::allocator<DataIPFilter>,DataIPFilter*>>::~__exception_guard_exceptions[abi:ne180100]((uint64_t)v46);
      long long v37 = *(_OWORD *)v7;
      uint64_t v38 = (uint64_t)v44;
      *uint64_t v7 = v43;
      v7[1] = v36;
      long long v43 = v37;
      uint64_t v39 = v7[2];
      _OWORD v7[2] = v38;
      uint64_t v44 = (char *)v39;
      uint64_t v42 = (char *)v37;
      return (uint64_t *)std::__split_buffer<DataIPFilter>::~__split_buffer((uint64_t)&v42);
    }
  }
  return result;
}