void sub_100C0082C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  std::__shared_weak_count *v15;
  std::__shared_weak_count *v16;

  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v16);
  sub_10004D2C8(v15);
  sub_100C006F8(&a9);
  _Unwind_Resume(a1);
}

void sub_100C00868(uint64_t **a1)
{
  v1 = *a1;
  uint64_t v2 = **a1;
  *(unsigned char *)(v2 + 832) = *((unsigned char *)*a1 + 12);
  int v3 = *((_DWORD *)v1 + 2);
  if (v3) {
    BOOL v4 = v3 == 2;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    v5 = *(std::__shared_weak_count **)(v2 + 824);
    *(_OWORD *)(v2 + 816) = 0u;
    if (v5) {
      sub_10004D2C8(v5);
    }
    sub_100BF4A98(v2, 0);
  }
  else if (v3 == 1 && !*(void *)(v2 + 816))
  {
    v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = 20;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Created timer to track GPS acquisition. Duration: %lld seconds", (uint8_t *)&buf, 0xCu);
    }
    sub_100058DB0(&__p, "GPSAcquisitionTracker");
    *(void *)&long long buf = off_101A47790;
    *((void *)&buf + 1) = v2;
    p_long long buf = &buf;
    AutoStartTimer::create();
    long long v7 = v11;
    long long v11 = 0uLL;
    v8 = *(std::__shared_weak_count **)(v2 + 824);
    *(_OWORD *)(v2 + 816) = v7;
    if (v8)
    {
      sub_10004D2C8(v8);
      if (*((void *)&v11 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v11 + 1));
      }
    }
    sub_10003B34C(&buf);
    if (v10 < 0) {
      operator delete(__p);
    }
  }
  sub_100BF8CBC(v2);
}

void sub_100C00A1C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  operator delete();
}

void sub_100C00A6C()
{
}

void *sub_100C00A80(uint64_t a1)
{
  result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A47790;
  result[1] = v3;
  return result;
}

uint64_t sub_100C00AC8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A47790;
  a2[1] = v2;
  return result;
}

void sub_100C00AF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 134217984;
    uint64_t v4 = 20;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I GPS acquisition timer expired after: %lld seconds", (uint8_t *)&v3, 0xCu);
  }
  sub_100BF4A98(v1, 0);
  sub_100BF8CBC(v1);
}

uint64_t sub_100C00BA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C00BE8()
{
}

void sub_100C00BF4(uint64_t **a1)
{
  v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  long long v3 = *(_OWORD *)(*a1 + 1);
  *(void *)(v2 + 847) = *(uint64_t *)((char *)*a1 + 22);
  *(_OWORD *)(v2 + 833) = v3;
  int v4 = *((_DWORD *)v1 + 8);
  if (*(unsigned char *)(v2 + 853) == 2)
  {
    if (!v4) {
      int v4 = *(_DWORD *)(v2 + 856);
    }
    if (!v4) {
      int v4 = 2;
    }
  }
  *(_DWORD *)(v2 + 856) = v4;
  sub_100BF4A98(v2, 0);
  sub_100BF8CBC(v2);
}

void sub_100C00C9C()
{
}

void sub_100C00CC8(uint64_t **a1)
{
  int v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  int v3 = *((unsigned __int8 *)v1 + 8);
  if (*(unsigned __int8 *)(v2 + 855) != v3)
  {
    *(unsigned char *)(v2 + 855) = v3;
    sub_100BF8CBC(v2);
  }
  operator delete();
}

void sub_100C00D30()
{
}

void sub_100C00D5C(uint64_t **a1)
{
  int v3 = a1;
  uint64_t v1 = **a1;
  if (*(unsigned char *)(v1 + 600))
  {
    int v2 = *(unsigned __int8 *)(v1 + 520);
    *(_OWORD *)(v1 + 504) = *(_OWORD *)(*a1 + 1);
    if (!v2) {
      *(unsigned char *)(v1 + 520) = 1;
    }
    sub_100BF4A98(v1, 0);
    sub_100BF8CBC(v1);
  }
  operator delete();
}

void sub_100C00DE4()
{
}

void sub_100C00E10(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = (*a1)[1];
  if (!v3) {
    goto LABEL_52;
  }
  uint64_t v4 = *(void *)(v2 + 224);
  if (!v4) {
    goto LABEL_5;
  }
  v5 = *(const void **)(v3 + 72);
  size_t v6 = *(void *)(v3 + 80) - (void)v5;
  long long v7 = *(const void **)(v4 + 72);
  if (v6 != *(void *)(v4 + 80) - (void)v7) {
    goto LABEL_5;
  }
  if (memcmp(v5, v7, v6)) {
    goto LABEL_5;
  }
  if (*(float *)(v3 + 96) != *(float *)(v4 + 96)) {
    goto LABEL_5;
  }
  uint64_t v39 = *(void *)(v3 + 104);
  uint64_t v38 = *(void *)(v3 + 112);
  uint64_t v40 = (v38 - v39) >> 1;
  v41 = *(unsigned char **)(v4 + 104);
  v42 = *(unsigned char **)(v4 + 112);
  if (v40 != (v42 - v41) >> 1) {
    goto LABEL_5;
  }
  memset(buf, 0, sizeof(buf));
  v66 = 0;
  if (v38 == v39) {
    goto LABEL_80;
  }
  if (v38 - v39 < 0) {
    sub_10006A748();
  }
  v43 = (char *)sub_10006E5B8((uint64_t)&v66, (v38 - v39) >> 1);
  v44 = v43;
  *(void *)long long buf = v43;
  *(void *)&buf[8] = v43;
  v66 = &v43[2 * v45];
  if (v42 != v41) {
    memmove(v43, v41, v42 - v41);
  }
  v46 = (unsigned __int8 *)&v44[2 * v40];
  *(void *)&buf[8] = v46;
  v47 = *(unsigned __int8 **)(v3 + 104);
  v48 = *(unsigned __int8 **)(v3 + 112);
  if (v47 == v48)
  {
LABEL_80:
    int v49 = 1;
    goto LABEL_82;
  }
  int v49 = 1;
  while (1)
  {
    v50 = *(unsigned __int8 **)buf;
    if (*(unsigned __int8 **)buf == v46)
    {
      int v49 = 0;
      if (v46) {
        goto LABEL_83;
      }
      goto LABEL_84;
    }
    while (*v47 != *v50 || v47[1] != v50[1])
    {
      v50 += 2;
      if (v50 == v46) {
        goto LABEL_81;
      }
    }
    if (v50 == v46) {
      break;
    }
    for (i = v50 + 2; i != v46; i += 2)
    {
      if (*v47 != *i || v47[1] != i[1])
      {
        *(_WORD *)v50 = *(_WORD *)i;
        v50 += 2;
      }
    }
    if (v50 == v46) {
      break;
    }
    v47 += 2;
    if (v47 == v48) {
      goto LABEL_82;
    }
  }
LABEL_81:
  int v49 = 0;
LABEL_82:
  v46 = *(unsigned __int8 **)buf;
  if (*(void *)buf)
  {
LABEL_83:
    *(void *)&buf[8] = v46;
    operator delete(v46);
  }
LABEL_84:
  if (!v49
    || *(float *)(v3 + 152) != *(float *)(v4 + 152)
    || *(float *)(v3 + 156) != *(float *)(v4 + 156)
    || (unint64_t v54 = (uint64_t)(*(void *)(v3 + 136) - *(void *)(v3 + 128)) >> 4,
        v55 = *(const void **)(v4 + 128),
        uint64_t v56 = *(void *)(v4 + 136),
        v54 != (v56 - (uint64_t)v55) >> 4))
  {
LABEL_5:
    v8 = (os_log_t *)(v2 + 40);
    v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - provisioningData changed", buf, 2u);
    }
    uint64_t v11 = v1[1];
    uint64_t v10 = v1[2];
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
    v12 = *(std::__shared_weak_count **)(v2 + 232);
    *(void *)(v2 + 224) = v11;
    *(void *)(v2 + 232) = v10;
    if (v12) {
      sub_10004D2C8(v12);
    }
    uint64_t v13 = v1[1];
    sub_10012CD04(buf, *(char **)(v13 + 72), *(char **)(v13 + 80), *(void *)(v13 + 80) - *(void *)(v13 + 72));
    v14 = (void **)(v2 + 256);
    if (*(char *)(v2 + 279) < 0) {
      operator delete(*v14);
    }
    *(_OWORD *)v14 = *(_OWORD *)buf;
    *(void *)(v2 + 272) = v66;
    v15 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v2 + 279) < 0) {
        v14 = (void **)*v14;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&buf[4] = v14;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - iso3166Alpha3CountryCode: '%s'", buf, 0xCu);
      v15 = *v8;
    }
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      double v16 = *(float *)(v13 + 96);
      *(_DWORD *)long long buf = 134217984;
      *(double *)&buf[4] = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - threshold: %.2f", buf, 0xCu);
      v15 = *v8;
    }
    *(double *)(v2 + 240) = *(float *)(v13 + 96) * 3.14159265 / 180.0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      double v17 = *(float *)(v13 + 156);
      *(_DWORD *)long long buf = 134217984;
      *(double *)&buf[4] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - anchor threshold: %.2f", buf, 0xCu);
      v15 = *v8;
    }
    *(double *)(v2 + 248) = *(float *)(v13 + 156) * 3.14159265 / 180.0;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = (uint64_t)(*(void *)(v13 + 112) - *(void *)(v13 + 104)) >> 1;
      *(_DWORD *)long long buf = 134217984;
      *(void *)&buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - %zu Gen2->Gen1 mappings:", buf, 0xCu);
    }
    v19 = operator new(0x30uLL);
    v19[1] = 0;
    v19[2] = 0;
    void *v19 = off_101A47930;
    v19[5] = 0;
    v19[4] = 0;
    v19[3] = v19 + 4;
    v20 = *(std::__shared_weak_count **)(v2 + 288);
    *(void *)(v2 + 280) = v19 + 3;
    *(void *)(v2 + 288) = v19;
    if (v20) {
      sub_10004D2C8(v20);
    }
    v21 = *(unsigned __int8 **)(v13 + 104);
    v22 = *(unsigned __int8 **)(v13 + 112);
    uint64_t v64 = v13;
    if (v21 == v22) {
LABEL_51:
    }
      stewie::AnchorStorage::create((int **)(v64 + 128), (os_log_t *)(v2 + 40));
    while (1)
    {
      int v23 = *v21;
      unsigned int v24 = v21[1];
      v25 = *(uint64_t ***)(v2 + 280);
      v26 = v25 + 1;
      uint64_t v27 = (uint64_t)v25[1];
      v28 = v25 + 1;
      uint64_t v29 = v27;
      if (!v27) {
        goto LABEL_46;
      }
      do
      {
        unsigned int v30 = *(_DWORD *)(v29 + 28);
        BOOL v31 = v30 >= v24;
        if (v30 >= v24) {
          v32 = (uint64_t *)v29;
        }
        else {
          v32 = (uint64_t *)(v29 + 8);
        }
        if (v31) {
          v28 = (uint64_t **)v29;
        }
        uint64_t v29 = *v32;
      }
      while (*v32);
      if (v28 != v26 && *((_DWORD *)v28 + 7) <= v24)
      {
        v33 = *v8;
        if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&buf[4] = v23;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I    Gen2->Gen1: duplicate mapping for %d", buf, 8u);
          v25 = *(uint64_t ***)(v2 + 280);
          uint64_t v27 = (uint64_t)v25[1];
        }
      }
      if (!v27) {
        break;
      }
      do
      {
        while (1)
        {
          uint64_t v34 = v27;
          unsigned int v35 = *(_DWORD *)(v27 + 28);
          if (v35 > v24) {
            break;
          }
          if (v35 >= v24) {
            goto LABEL_48;
          }
          uint64_t v27 = *(void *)(v27 + 8);
          if (!v27)
          {
            v26 = (uint64_t **)(v34 + 8);
            goto LABEL_47;
          }
        }
        uint64_t v27 = *(void *)v27;
      }
      while (*(void *)v34);
      v26 = (uint64_t **)v34;
LABEL_47:
      v36 = (uint64_t *)operator new(0x28uLL);
      *((_DWORD *)v36 + 7) = v24;
      *((_DWORD *)v36 + 8) = 0;
      sub_100046C38(v25, v34, v26, v36);
      uint64_t v34 = (uint64_t)v36;
LABEL_48:
      *(_DWORD *)(v34 + 32) = v23;
      v37 = *v8;
      if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        *(_DWORD *)&buf[4] = v24;
        *(_WORD *)&buf[8] = 1024;
        *(_DWORD *)&buf[10] = v23;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I    Gen2->Gen1: %d -> %d", buf, 0xEu);
      }
      v21 += 2;
      if (v21 == v22) {
        goto LABEL_51;
      }
    }
    v26 = v25 + 1;
LABEL_46:
    uint64_t v34 = (uint64_t)v26;
    goto LABEL_47;
  }
  memset(buf, 0, sizeof(buf));
  v66 = 0;
  sub_100BFD348(buf, v55, v56, v54);
  uint64_t v57 = *(void *)(v3 + 128);
  uint64_t v58 = *(void *)(v3 + 136);
  if (v57 == v58)
  {
    int v60 = 1;
LABEL_111:
    v59 = *(float **)buf;
    if (!*(void *)buf) {
      goto LABEL_113;
    }
  }
  else
  {
    v59 = *(float **)&buf[8];
    int v60 = 1;
    while (1)
    {
      v61 = *(float **)buf;
      if (*(float **)buf == v59) {
        break;
      }
      while (*(_DWORD *)v57 != *(_DWORD *)v61
           || *(float *)(v57 + 4) != v61[1]
           || *(float *)(v57 + 8) != v61[2]
           || *(float *)(v57 + 12) != v61[3])
      {
        v61 += 4;
        if (v61 == v59) {
          goto LABEL_109;
        }
      }
      if (v61 == v59) {
        goto LABEL_109;
      }
      for (j = v61 + 4; j != v59; j += 4)
      {
        if (*(_DWORD *)v57 != *(_DWORD *)j
          || *(float *)(v57 + 4) != j[1]
          || *(float *)(v57 + 8) != j[2]
          || *(float *)(v57 + 12) != j[3])
        {
          *(_OWORD *)v61 = *(_OWORD *)j;
          v61 += 4;
        }
      }
      if (v61 == v59)
      {
LABEL_109:
        int v60 = 0;
        goto LABEL_111;
      }
      v57 += 16;
      if (v57 == v58) {
        goto LABEL_111;
      }
    }
    int v60 = 0;
    if (!v59)
    {
LABEL_113:
      if (v60)
      {
        v63 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I updateProvisioningData_sync - provisioningData not changed, skipping update", buf, 2u);
        }
LABEL_52:
        sub_100BF8CBC(v2);
      }
      goto LABEL_5;
    }
  }
  *(void *)&buf[8] = v59;
  operator delete(v59);
  goto LABEL_113;
}

void sub_100C016D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (__p)
  {
    a18 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_100046B58(&a16);
  sub_100046B58(&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C01720(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v11 = a1;
  v12 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = *(void *)(*v1 + 312);
  if (v3 != v4)
  {
    if (v3) {
      BOOL v5 = v4 == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5)
    {
LABEL_11:
      uint64_t v8 = v1[2];
      if (v8) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
      }
      v9 = *(std::__shared_weak_count **)(v2 + 320);
      *(void *)(v2 + 312) = v3;
      *(void *)(v2 + 320) = v8;
      if (v9) {
        sub_10004D2C8(v9);
      }
      sub_100BF8CBC(v2);
    }
    char v6 = sub_1012AD3D4(v1[1], *(void *)(*v1 + 312));
    if (*(unsigned __int16 *)(v3 + 32) == *(unsigned __int16 *)(v4 + 32)) {
      char v7 = v6;
    }
    else {
      char v7 = 0;
    }
    if ((v7 & 1) == 0)
    {
      uint64_t v3 = v1[1];
      goto LABEL_11;
    }
  }
  sub_100046B58((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_100C017D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100C017EC(void *a1)
{
  uint64_t v2 = a1;
  uint64_t v1 = *a1;
  if (*(unsigned char *)(*(void *)v1 + 360)) {
    *(unsigned char *)(*(void *)v1 + 360) = 0;
  }
  operator delete();
}

void sub_100C0183C(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v6 = v2;
  uint64_t v7 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  stewie::TargetCoordsFactory::create();
}

void sub_100C01C84(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (a21) {
    sub_10004D2C8(a21);
  }
  if (a23) {
    sub_10004D2C8(a23);
  }
  sub_10025B9C0((uint64_t)&a25);
  if (a30) {
    sub_10004D2C8(a30);
  }
  v32 = *(std::__shared_weak_count **)(v30 - 104);
  if (v32) {
    sub_10004D2C8(v32);
  }
  v33 = *(std::__shared_weak_count **)(v30 - 88);
  if (v33) {
    sub_10004D2C8(v33);
  }
  uint64_t v34 = *(std::__shared_weak_count **)(v30 - 40);
  if (v34) {
    sub_10004D2C8(v34);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_1000E1A60(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100C01D74(uint64_t **a1)
{
  uint64_t v29 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 24));
  uint64_t v3 = *(void *)(v2 + 216);
  if (v3 && (uint64_t v4 = *(stewie::ConnectionAssistantGPSDataSource **)(v2 + 328)) != 0)
  {
    if (*((unsigned char *)v1 + 33))
    {
      uint64_t v5 = *((unsigned __int8 *)v1 + 32);
      *(void *)long long buf = stewie::ConnectionAssistantGPSDataSource::location(v4);
      *(void *)&buf[8] = v6;
      *(void *)&uint8_t buf[16] = v7;
      uint64_t v8 = *(void *)(v2 + 328);
      if (*(unsigned char *)(v8 + 40)) {
        int v9 = *(_DWORD *)(v8 + 24);
      }
      else {
        int v9 = 0;
      }
      stewie::ConnectionAssistantGPSDataSource::currentGPSTime((stewie::ConnectionAssistantGPSDataSource *)v8, &v30);
      LOBYTE(v11) = stewie::ConnectionAssistantTargetDataSource::updateLLCTarget(v3, v5, (long long *)buf, v9, &v30);
LABEL_12:
      v12 = (_DWORD *)(v2 + 336);
      if (*(unsigned char *)(v2 + 360))
      {
        unsigned int v13 = *((_DWORD *)v1 + 2);
        if ((v11 & 1) == 0 && *v12 == v13 && *(_DWORD *)(v2 + 340) == *((_DWORD *)v1 + 3))
        {
          int v14 = 0;
          goto LABEL_27;
        }
      }
      else
      {
        *(void *)v12 = 0;
        *(void *)(v2 + 344) = 0;
        *(void *)(v2 + 352) = 0;
        *(unsigned char *)(v2 + 360) = 1;
        unsigned int v13 = *((_DWORD *)v1 + 2);
      }
      v15 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        if (v13 > 3) {
          double v16 = "???";
        }
        else {
          double v16 = off_101A47B30[v13];
        }
        uint64_t v17 = *((int *)v1 + 3);
        if (v17 > 2) {
          uint64_t v18 = "???";
        }
        else {
          uint64_t v18 = off_101A47B50[v17];
        }
        *(_DWORD *)long long buf = 136315394;
        *(void *)&buf[4] = v16;
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = v18;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Received updated connectionStatus: %s, registrationStatus: %s", buf, 0x16u);
        unsigned int v13 = *((_DWORD *)v1 + 2);
      }
      int v14 = 1;
LABEL_27:
      *(_DWORD *)(v2 + 336) = v13;
      *(_DWORD *)(v2 + 340) = *((_DWORD *)v1 + 3);
      if (*((unsigned char *)v1 + 28))
      {
        v19 = (int *)(v1 + 3);
        v20 = (_DWORD *)(v2 + 344);
        if (!*(unsigned char *)(v2 + 348) || *v20 != *v19)
        {
          v21 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = *v19;
            if (v22 > 5) {
              int v23 = "???";
            }
            else {
              int v23 = off_101A47B68[v22];
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&buf[4] = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Received updated congestionStatus: %s", buf, 0xCu);
          }
        }
        if (v14)
        {
          int v14 = 1;
        }
        else
        {
          int v14 = (*(unsigned char *)(v2 + 348) != 0) ^ (*((unsigned char *)v1 + 28) != 0);
          if (*(unsigned char *)(v2 + 348) && *((unsigned char *)v1 + 28)) {
            int v14 = *v20 != *v19;
          }
        }
        int v24 = *v19;
        *(unsigned char *)(v2 + 348) = *((unsigned char *)v1 + 28);
        _DWORD *v20 = v24;
      }
      if (*((unsigned char *)v1 + 20))
      {
        v25 = (int *)(v1 + 2);
        if ((v14 & 1) != 0 || !*(unsigned char *)(v2 + 356))
        {
          int v28 = *v25;
          *(unsigned char *)(v2 + 356) = *((unsigned char *)v1 + 20);
          *(_DWORD *)(v2 + 352) = v28;
        }
        else
        {
          int v26 = *(_DWORD *)(v2 + 352);
          int v27 = *v25;
          *(unsigned char *)(v2 + 356) = *((unsigned char *)v1 + 20);
          *(_DWORD *)(v2 + 352) = v27;
          if (v26 == v27) {
LABEL_49:
          }
            operator delete();
        }
      }
      else if (!v14)
      {
        goto LABEL_49;
      }
      sub_100BF8CBC(v2);
    }
  }
  else if (*((unsigned char *)v1 + 33))
  {
    uint64_t v10 = *(NSObject **)(v2 + 40);
    int v11 = os_log_type_enabled(v10, OS_LOG_TYPE_ERROR);
    if (!v11) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Received updateServiceInfo with LLC target when TargetDataSource or GPSDataSource is down", buf, 2u);
  }
  LOBYTE(v11) = 0;
  goto LABEL_12;
}

void sub_100C020E8()
{
}

uint64_t *sub_100C02114(uint64_t **a1)
{
  uint64_t v1 = *a1;
  v65 = a1;
  v66 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = (unsigned __int8 *)v1[2];
  uint64_t v4 = (unsigned __int8 *)v1[3];
  uint64_t v5 = *(NSObject **)(*v1 + 40);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v3 == v4)
  {
    if (!v6) {
      goto LABEL_13;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "#I updateServiceOutageInfo_sync - serviceOutageInfo: empty";
    goto LABEL_12;
  }
  if (v6)
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I updateServiceOutageInfo_sync - serviceOutageInfo: [", buf, 2u);
    uint64_t v3 = (unsigned __int8 *)v1[2];
    uint64_t v4 = (unsigned __int8 *)v1[3];
  }
  for (; v3 != v4; v3 += 24)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = *v3;
      uint64_t v9 = *((void *)v3 + 1);
      uint64_t v10 = *((void *)v3 + 2);
      *(_DWORD *)long long buf = 67109632;
      *(_DWORD *)&buf[4] = v8;
      *(_WORD *)&buf[8] = 2048;
      *(void *)&buf[10] = v9;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v10;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I     FMID %u: start at gps time: %llu, duration: %llu", buf, 0x1Cu);
    }
  }
  uint64_t v5 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    int v11 = "#I ]";
LABEL_12:
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
  }
LABEL_13:
  if (!*(void *)(v2 + 216))
  {
    uint64_t v39 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_89;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v40 = "Received updateServiceOutageInfo when TargetDataSource is down";
LABEL_51:
    _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, v40, buf, 2u);
    goto LABEL_89;
  }
  if (!*(unsigned char *)(v2 + 600))
  {
    uint64_t v39 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_89;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v40 = "Received updateServiceOutageInfo in OFF state";
    goto LABEL_51;
  }
  v12 = (unsigned __int8 *)v1[2];
  unsigned int v13 = (unsigned __int8 *)v1[3];
  if (v12 == v13)
  {
    uint64_t v56 = *(NSObject **)(v2 + 40);
    if (*(void *)(v2 + 584))
    {
      if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I Clearing target service schedule", buf, 2u);
      }
      uint64_t v57 = *(std::__shared_weak_count **)(v2 + 592);
      *(void *)(v2 + 584) = 0;
      *(void *)(v2 + 592) = 0;
      if (v57) {
        sub_10004D2C8(v57);
      }
LABEL_79:
      uint64_t v60 = *(void *)(v2 + 216);
      uint64_t v61 = *(void *)(v2 + 592);
      *(void *)long long buf = *(void *)(v2 + 584);
      *(void *)&buf[8] = v61;
      if (v61) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v61 + 8), 1uLL, memory_order_relaxed);
      }
      *(_OWORD *)&uint8_t buf[16] = 0uLL;
      stewie::ConnectionAssistantTargetDataSource::updateServiceSchedules(v60, (long long *)buf);
      if (*(void *)&buf[24]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[24]);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      sub_100BF8CBC(v2);
    }
    goto LABEL_87;
  }
  int v14 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    *(void *)&buf[4] = 0xAAAAAAAAAAAAAAABLL * ((v13 - v12) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Satellite outages reported: %zu", buf, 0xCu);
    v12 = (unsigned __int8 *)v1[2];
    unsigned int v13 = (unsigned __int8 *)v1[3];
  }
  if (v12 == v13)
  {
    uint64_t v51 = 0;
    v50 = 0;
  }
  else
  {
    v15 = 0;
    *(void *)&buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    *(void *)long long buf = &buf[8];
    while (1)
    {
      unsigned int v16 = *v12;
      uint64_t v17 = (uint64_t **)&buf[8];
      uint64_t v18 = (uint64_t **)&buf[8];
      if (v15)
      {
        while (1)
        {
          while (1)
          {
            uint64_t v18 = (uint64_t **)v15;
            unsigned int v19 = *((_DWORD *)v15 + 8);
            if (v19 <= v16) {
              break;
            }
            v15 = *v18;
            uint64_t v17 = v18;
            if (!*v18) {
              goto LABEL_27;
            }
          }
          if (v19 >= v16) {
            break;
          }
          v15 = v18[1];
          if (!v15)
          {
            uint64_t v17 = v18 + 1;
            goto LABEL_27;
          }
        }
        v20 = v18;
      }
      else
      {
LABEL_27:
        v20 = operator new(0x40uLL);
        v20[8] = v16;
        *((void *)v20 + 6) = 0;
        *((void *)v20 + 7) = 0;
        *((void *)v20 + 5) = 0;
        *(void *)v20 = 0;
        *((void *)v20 + 1) = 0;
        *((void *)v20 + 2) = v18;
        *uint64_t v17 = (uint64_t *)v20;
        v21 = (uint64_t *)v20;
        if (**(void **)buf)
        {
          *(void *)long long buf = **(void **)buf;
          v21 = *v17;
        }
        sub_100046C90(*(uint64_t **)&buf[8], v21);
        ++*(void *)&buf[16];
      }
      uint64_t v22 = *((void *)v12 + 1);
      uint64_t v23 = 1000000000 * v22;
      uint64_t v24 = 1000000000 * (*((void *)v12 + 2) + v22);
      int v26 = (uint64_t *)*((void *)v20 + 6);
      unint64_t v25 = *((void *)v20 + 7);
      if ((unint64_t)v26 >= v25)
      {
        uint64_t v28 = *((void *)v20 + 5);
        uint64_t v29 = ((uint64_t)v26 - v28) >> 4;
        unint64_t v30 = v29 + 1;
        if ((unint64_t)(v29 + 1) >> 60) {
          sub_10006A748();
        }
        uint64_t v31 = v25 - v28;
        if (v31 >> 3 > v30) {
          unint64_t v30 = v31 >> 3;
        }
        if ((unint64_t)v31 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v32 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v32 = v30;
        }
        if (v32 >> 60) {
          sub_10006A7CC();
        }
        v33 = (char *)operator new(16 * v32);
        uint64_t v34 = (uint64_t *)&v33[16 * v29];
        *uint64_t v34 = v23;
        v34[1] = v24;
        unsigned int v35 = (void *)*((void *)v20 + 5);
        v36 = (void *)*((void *)v20 + 6);
        v37 = v34;
        while (v36 != v35)
        {
          uint64_t v38 = *(v36 - 2);
          v36 -= 2;
          *(v37 - 2) = v38;
          v37 -= 2;
          v37[1] = v36[1];
        }
        int v27 = v34 + 2;
        *((void *)v20 + 5) = v37;
        *((void *)v20 + 6) = v34 + 2;
        *((void *)v20 + 7) = &v33[16 * v32];
        if (v35) {
          operator delete(v35);
        }
      }
      else
      {
        *int v26 = v23;
        v26[1] = v24;
        int v27 = v26 + 2;
        *((void *)v20 + 6) = v26 + 2;
      }
      *((void *)v20 + 6) = v27;
      v12 += 24;
      if (v12 == v13) {
        break;
      }
      v15 = *(uint64_t **)&buf[8];
    }
    v41 = *(void **)buf;
    if (*(unsigned char **)buf != &buf[8])
    {
      do
      {
        v42 = (unint64_t *)v41[5];
        v43 = (unint64_t *)v41[6];
        unint64_t v44 = 126 - 2 * __clz(((char *)v43 - (char *)v42) >> 4);
        if (v43 == v42) {
          uint64_t v45 = 0;
        }
        else {
          uint64_t v45 = v44;
        }
        sub_100BFD3E8(v42, v43, v45, 1);
        v46 = (void *)v41[1];
        if (v46)
        {
          do
          {
            v47 = v46;
            v46 = (void *)*v46;
          }
          while (v46);
        }
        else
        {
          do
          {
            v47 = (unsigned char *)v41[2];
            BOOL v48 = *(void *)v47 == (void)v41;
            v41 = v47;
          }
          while (!v48);
        }
        v41 = v47;
      }
      while (v47 != &buf[8]);
    }
    int v49 = (std::__shared_weak_count *)operator new(0x38uLL);
    v50 = v49;
    v49->__shared_owners_ = 0;
    v49->__shared_weak_owners_ = 0;
    v49->__vftable = (std::__shared_weak_count_vtbl *)off_101A47488;
    uint64_t v51 = (uint64_t)&v49[1];
    uint64_t v53 = *(void *)buf;
    v52 = *(void **)&buf[8];
    v49[1].__vftable = (std::__shared_weak_count_vtbl *)off_1019F0728;
    v49[1].__shared_owners_ = v53;
    v49[1].__shared_weak_owners_ = (uint64_t)v52;
    p_shared_weak_owners = &v49[1].__shared_weak_owners_;
    uint64_t v55 = *(void *)&buf[16];
    v49[2].__vftable = *(std::__shared_weak_count_vtbl **)&buf[16];
    if (v55)
    {
      v52[2] = p_shared_weak_owners;
      *(void *)long long buf = &buf[8];
      *(void *)&buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      v52 = 0;
    }
    else
    {
      v49[1].__shared_owners_ = (uint64_t)p_shared_weak_owners;
    }
    sub_10026CF54((uint64_t)buf, v52);
  }
  uint64_t v58 = *(void **)(v2 + 584);
  if (v58 != (void *)v51 && (!v51 || !v58 || (stewie::operator==(v58, v51) & 1) == 0))
  {
    v63 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I Updating target service schedule", buf, 2u);
    }
    if (v50) {
      atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)(v2 + 584) = v51;
    uint64_t v64 = *(std::__shared_weak_count **)(v2 + 592);
    *(void *)(v2 + 592) = v50;
    if (v64) {
      sub_10004D2C8(v64);
    }
    char v59 = 1;
    if (!v50) {
      goto LABEL_78;
    }
    goto LABEL_77;
  }
  char v59 = 0;
  if (v50) {
LABEL_77:
  }
    sub_10004D2C8(v50);
LABEL_78:
  if (v59) {
    goto LABEL_79;
  }
  uint64_t v56 = *(NSObject **)(v2 + 40);
LABEL_87:
  if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I Received the same StewieServiceOutageInformation, ignoring", buf, 2u);
  }
LABEL_89:
  sub_100AB6F5C((uint64_t *)&v66);
  return sub_100046B58((uint64_t *)&v65);
}

void sub_100C027D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v5 = va_arg(va1, void);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_100AB6F5C((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C0283C(uint64_t **a1)
{
  uint64_t v1 = **a1;
  int v2 = *((unsigned __int8 *)*a1 + 8);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 24));
  if (!*(unsigned char *)(v1 + 600))
  {
    v12 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "Received emergencyConversationIDCommitted in OFF state", buf, 2u);
    }
LABEL_15:
    sub_100BF8CBC(v1);
  }
  if (!*(unsigned char *)(v1 + 392))
  {
    unsigned int v13 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v16 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "ConversationID == %hhu was committed without prior knowledge about it", buf, 8u);
    }
    char v4 = 0;
    char v6 = 0;
    char v5 = 0;
    int v3 = 0;
    goto LABEL_13;
  }
  int v3 = *(_DWORD *)(v1 + 380);
  char v4 = *(unsigned char *)(v1 + 386);
  char v5 = *(unsigned char *)(v1 + 387);
  char v6 = *(unsigned char *)(v1 + 388);
  int v7 = *(unsigned __int8 *)(v1 + 384);
  if (v7 == v2)
  {
    int v8 = *(NSObject **)(v1 + 40);
    if (!*(unsigned char *)(v1 + 385))
    {
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        int v16 = v2;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I ConversationID == %hhu was committed", buf, 8u);
      }
      goto LABEL_13;
    }
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v16 = v2;
      uint64_t v9 = "ConversationID == %hhu was committed again";
      uint64_t v10 = v8;
      uint32_t v11 = 8;
LABEL_19:
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v9, buf, v11);
    }
  }
  else
  {
    int v14 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109376;
      int v16 = v2;
      __int16 v17 = 1024;
      int v18 = v7;
      uint64_t v9 = "ConversationID == %hhu was committed, but tracked ConversationID == %hhu, overriding";
      uint64_t v10 = v14;
      uint32_t v11 = 14;
      goto LABEL_19;
    }
  }
LABEL_13:
  if (!*(unsigned char *)(v1 + 600)) {
    sub_10016C840();
  }
  *(_DWORD *)(v1 + 380) = v3;
  *(unsigned char *)(v1 + 384) = v2;
  *(unsigned char *)(v1 + 385) = 1;
  *(unsigned char *)(v1 + 386) = v4;
  *(unsigned char *)(v1 + 387) = v5;
  *(unsigned char *)(v1 + 388) = v6;
  *(unsigned char *)(v1 + 392) = 1;
  goto LABEL_15;
}

void sub_100C02AD4()
{
}

void sub_100C02B00(uint64_t **a1)
{
  uint64_t v1 = **a1;
  int v2 = *((unsigned __int8 *)*a1 + 8);
  uint64_t v3 = (*a1)[2];
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 24));
  char v4 = *(NSObject **)(v1 + 40);
  if (!*(unsigned char *)(v1 + 600))
  {
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Received roadsideConversationIDCommitted in OFF state", buf, 2u);
    }
LABEL_19:
    sub_100BF8CBC(v1);
  }
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109376;
    int v17 = v2;
    __int16 v18 = 2048;
    unsigned int v19 = (const char *)v3;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I (Roadside) Got notified that ConversationID == %hhu was committed, providerId=%llu", buf, 0x12u);
    if (!*(unsigned char *)(v1 + 600)) {
LABEL_24:
    }
      sub_10016C840();
  }
  if (*(unsigned char *)(v1 + 432))
  {
    char v5 = *(unsigned char *)(v1 + 424);
    char v6 = *(unsigned char *)(v1 + 425);
    char v7 = *(unsigned char *)(v1 + 426);
    int v8 = *(unsigned __int8 *)(v1 + 400);
    if (v8 != v2)
    {
      v15 = *(NSObject **)(v1 + 40);
      if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      *(_DWORD *)long long buf = 67109376;
      int v17 = v2;
      __int16 v18 = 1024;
      LODWORD(v19) = v8;
      uint32_t v11 = "(Roadside) ConversationID == %hhu was committed, but tracked ConversationID == %hhu, overriding";
      v12 = v15;
      uint32_t v13 = 14;
      goto LABEL_23;
    }
    uint64_t v9 = *(NSObject **)(v1 + 40);
    if (*(unsigned char *)(v1 + 416))
    {
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_17;
      }
      uint64_t v10 = ", overriding";
      if (*(void *)(v1 + 408) == v3) {
        uint64_t v10 = "";
      }
      *(_DWORD *)long long buf = 67109378;
      int v17 = v2;
      __int16 v18 = 2080;
      unsigned int v19 = v10;
      uint32_t v11 = "(Roadside) ConversationID == %hhu was committed again %s";
      v12 = v9;
      uint32_t v13 = 18;
LABEL_23:
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, v11, buf, v13);
      goto LABEL_17;
    }
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      int v17 = v2;
      __int16 v18 = 2048;
      unsigned int v19 = (const char *)v3;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I (Roadside) ConversationID == %hhu was committed, providerId=%llu", buf, 0x12u);
    }
  }
  else
  {
    int v14 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 67109120;
      int v17 = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "(Roadside) ConversationID == %hhu was committed without prior knowledge about it", buf, 8u);
    }
    char v5 = 0;
    char v7 = 0;
    char v6 = 0;
  }
LABEL_17:
  if (*(unsigned char *)(v1 + 600))
  {
    *(unsigned char *)(v1 + 400) = v2;
    *(unsigned char *)(v1 + 401) = 1;
    *(void *)(v1 + 408) = v3;
    *(unsigned char *)(v1 + 416) = 1;
    *(unsigned char *)(v1 + 424) = v5;
    *(unsigned char *)(v1 + 425) = v6;
    *(unsigned char *)(v1 + 426) = v7;
    *(unsigned char *)(v1 + 432) = 1;
    goto LABEL_19;
  }
  goto LABEL_24;
}

void sub_100C02E20()
{
}

void sub_100C02E4C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = (const void **)(*a1 + 1);
  uint64_t v2 = **a1;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v2 + 24));
  if (*(unsigned char *)(v2 + 600))
  {
    if (*(void *)(v2 + 328))
    {
      if (*v3) {
        char v4 = sub_100136254;
      }
      else {
        char v4 = 0;
      }
      if (v4)
      {
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v48 = 0;
        sub_100BC8FAC((CFUUIDRef *)v1 + 1, __p);
        char v6 = v1 + 2;
        unsigned int v5 = *((_DWORD *)v1 + 4);
        if (v5 > 9 || ((1 << v5) & 0x37A) == 0)
        {
          uint64_t v31 = *(NSObject **)(v2 + 40);
          if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_78;
          }
          unint64_t v32 = __p;
          if (v48 < 0) {
            unint64_t v32 = (void **)__p[0];
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v32;
          *(_WORD *)&buf[12] = 1024;
          *(_DWORD *)&buf[14] = v5;
          v33 = "#I Message %s of type %d is ignored";
          uint64_t v34 = v31;
          uint32_t v35 = 18;
        }
        else
        {
          switch(*((_DWORD *)v1 + 6))
          {
            case 0:
              int v8 = *(NSObject **)(v2 + 40);
              if (!os_log_type_enabled(v8, OS_LOG_TYPE_ERROR)) {
                goto LABEL_78;
              }
              uint64_t v9 = __p;
              if (v48 < 0) {
                uint64_t v9 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v9;
              uint64_t v10 = "Received unexpected message status == kUnknown for message %s";
              goto LABEL_16;
            case 1:
              int v24 = *((unsigned __int8 *)v1 + 20);
              if (v24 != 1)
              {
                v36 = *(NSObject **)(v2 + 40);
                if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
                {
                  v37 = __p;
                  if (v48 < 0) {
                    v37 = (void **)__p[0];
                  }
                  *(_DWORD *)long long buf = 136315394;
                  *(void *)&uint8_t buf[4] = v37;
                  *(_WORD *)&buf[12] = 256;
                  buf[14] = v24;
                  v21 = "#I Message %s on transport %hhu is ignored";
                  uint64_t v22 = v36;
                  uint32_t v23 = 15;
LABEL_55:
                  _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);
                }
LABEL_56:
                if (!*(unsigned char *)(v2 + 600)) {
LABEL_88:
                }
                  sub_10016C840();
                if (*(unsigned char *)(v2 + 496))
                {
                  sub_10012577C((const void **)(v2 + 440));
                  *(unsigned char *)(v2 + 496) = 0;
                }
                goto LABEL_78;
              }
              double v25 = round(sub_1003ACE18(v1[4]));
              int v26 = *(NSObject **)(v2 + 40);
              BOOL v27 = os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT);
              if (v25 >= 0.0 && v25 <= 4294967300.0)
              {
                if (v27)
                {
                  uint64_t v28 = __p;
                  if (v48 < 0) {
                    uint64_t v28 = (void **)__p[0];
                  }
                  *(_DWORD *)long long buf = 136315138;
                  *(void *)&uint8_t buf[4] = v28;
                  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I Message %s is in progress", buf, 0xCu);
                }
                if (!*(unsigned char *)(v2 + 600)) {
                  sub_10016C840();
                }
                sub_10012A394((const void **)buf, v3);
                long long v29 = *(_OWORD *)v6;
                uint64_t v54 = v6[2];
                *(_OWORD *)&buf[8] = v29;
                stewie::ConnectionAssistantGPSDataSource::currentGPSTime(*(stewie::ConnectionAssistantGPSDataSource **)(v2 + 328), &v55);
                unint64_t v30 = (const void **)(v2 + 440);
                unsigned int v56 = v25;
                unint64_t v57 = 0;
                goto LABEL_77;
              }
              if (!v27) {
                goto LABEL_78;
              }
              v41 = __p;
              if (v48 < 0) {
                v41 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 134218242;
              *(double *)&uint8_t buf[4] = v25;
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = v41;
              v33 = "#I Received unacceptable getEstimatedSendTimeOverStewieInSeconds result: %f for message %s";
              uint64_t v34 = v26;
              uint32_t v35 = 22;
              break;
            case 2:
              if (!*(unsigned char *)(v2 + 600)) {
                goto LABEL_88;
              }
              int v13 = *((unsigned __int8 *)v1 + 20);
              if (!*(unsigned char *)(v2 + 496))
              {
                if (v13 == 1)
                {
                  int v8 = *(NSObject **)(v2 + 40);
                  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
                  {
                    uint64_t v38 = __p;
                    if (v48 < 0) {
                      uint64_t v38 = (void **)__p[0];
                    }
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v38;
                    uint64_t v10 = "Received unexpected message status == kSent for untracked message %s, ignoring.";
LABEL_16:
                    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, v10, buf, 0xCu);
                  }
                }
                goto LABEL_78;
              }
              if ((v13 - 1) < 2)
              {
                int v14 = CFEqual(*(CFTypeRef *)(v2 + 440), *v3);
                v15 = *(NSObject **)(v2 + 40);
                if (v14)
                {
                  if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_DEFAULT))
                  {
                    int v16 = __p;
                    if (v48 < 0) {
                      int v16 = (void **)__p[0];
                    }
                    *(_DWORD *)long long buf = 136315138;
                    *(void *)&uint8_t buf[4] = v16;
                    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Message %s is sent", buf, 0xCu);
                  }
                  if (*(unsigned char *)(v2 + 600))
                  {
                    sub_10012A394((const void **)buf, v3);
                    uint64_t v17 = v6[2];
                    *(_OWORD *)&buf[8] = *(_OWORD *)v6;
                    unint64_t v18 = *(void *)(v2 + 472);
                    uint64_t v54 = v17;
                    unint64_t v55 = v18;
                    unsigned int v56 = *(_DWORD *)(v2 + 480);
                    stewie::ConnectionAssistantGPSDataSource::currentGPSTime(*(stewie::ConnectionAssistantGPSDataSource **)(v2 + 328), &v57);
LABEL_76:
                    unint64_t v30 = (const void **)(v2 + 440);
LABEL_77:
                    sub_100BF9F4C(v30, (uint64_t)buf);
                    sub_10012577C((const void **)buf);
LABEL_78:
                    if (SHIBYTE(v48) < 0) {
                      operator delete(__p[0]);
                    }
LABEL_80:
                    sub_100BF8CBC(v2);
                  }
                }
                else
                {
                  if (os_log_type_enabled(*(os_log_t *)(v2 + 40), OS_LOG_TYPE_ERROR))
                  {
                    int v43 = SHIBYTE(v48);
                    unint64_t v44 = (void **)__p[0];
                    sub_100BC8FAC((CFUUIDRef *)(v2 + 440), buf);
                    uint64_t v45 = __p;
                    if (v43 < 0) {
                      uint64_t v45 = v44;
                    }
                    if (buf[23] >= 0) {
                      v46 = buf;
                    }
                    else {
                      v46 = *(unsigned char **)buf;
                    }
                    *(_DWORD *)int v49 = 136446466;
                    v50 = v45;
                    __int16 v51 = 2080;
                    v52 = v46;
                    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Received message status == kSent for ID %{public}s, but tracking ID %s. Marking it sent anyway.", v49, 0x16u);
                    if ((buf[23] & 0x80000000) != 0) {
                      operator delete(*(void **)buf);
                    }
                  }
                  if (*(unsigned char *)(v2 + 600))
                  {
                    sub_10012A394((const void **)buf, v3);
                    uint64_t v42 = v6[2];
                    *(_OWORD *)&buf[8] = *(_OWORD *)v6;
                    uint64_t v54 = v42;
                    unint64_t v55 = 0;
                    unsigned int v56 = 0;
                    stewie::ConnectionAssistantGPSDataSource::currentGPSTime(*(stewie::ConnectionAssistantGPSDataSource **)(v2 + 328), &v57);
                    goto LABEL_76;
                  }
                }
                sub_10016C840();
              }
              uint64_t v39 = *(NSObject **)(v2 + 40);
              if (!os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_78;
              }
              uint64_t v40 = __p;
              if (v48 < 0) {
                uint64_t v40 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v40;
              *(_WORD *)&buf[12] = 256;
              buf[14] = v13;
              v33 = "#I Message %s on transport %hhu is ignored";
              uint64_t v34 = v39;
              uint32_t v35 = 15;
              break;
            case 3:
              unsigned int v19 = *(NSObject **)(v2 + 40);
              if (!os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT)) {
                goto LABEL_56;
              }
              v20 = __p;
              if (v48 < 0) {
                v20 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v20;
              v21 = "#I Message %s was canceled";
              uint64_t v22 = v19;
              uint32_t v23 = 12;
              goto LABEL_55;
            default:
              goto LABEL_78;
          }
        }
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, v33, buf, v35);
        goto LABEL_78;
      }
      uint32_t v11 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      *(_WORD *)long long buf = 0;
      v12 = "Received message status update with null MessageID";
    }
    else
    {
      uint32_t v11 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
        goto LABEL_80;
      }
      *(_WORD *)long long buf = 0;
      v12 = "Received updateOutgoingMessageStatus when GPSDataSource is down";
    }
  }
  else
  {
    uint32_t v11 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_80;
    }
    *(_WORD *)long long buf = 0;
    v12 = "Received updateOutgoingMessageStatus in OFF state";
  }
  _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
  goto LABEL_80;
}

void sub_100C03594(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_10026E7A8(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_100C035FC(uint64_t **a1)
{
  uint32_t v11 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  int v3 = *(unsigned __int8 *)(v2 + 810);
  int v4 = *(unsigned __int8 *)(v2 + 809);
  int v5 = *((unsigned __int8 *)*a1 + 8);
  if (*(unsigned char *)(v2 + 810)) {
    BOOL v6 = v4 == v5;
  }
  else {
    BOOL v6 = 0;
  }
  if (!v6)
  {
    char v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      int v8 = "true";
      uint64_t v9 = "<none>";
      if (v4) {
        uint64_t v10 = "true";
      }
      else {
        uint64_t v10 = "false";
      }
      if (v3) {
        uint64_t v9 = v10;
      }
      if (!v5) {
        int v8 = "false";
      }
      *(_DWORD *)long long buf = 136315394;
      int v13 = v9;
      __int16 v14 = 2080;
      v15 = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I OffTheGridMode changed from %s to %s", buf, 0x16u);
      LOWORD(v5) = *((unsigned __int8 *)v1 + 8);
    }
    *(_WORD *)(v2 + 809) = v5 | 0x100;
    sub_100BF4CA0(v2);
  }
  operator delete();
}

void sub_100C03744()
{
}

void sub_100C03770(uint64_t **a1)
{
  char v7 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  int v3 = *((unsigned __int8 *)*a1 + 8);
  if (*(unsigned __int8 *)(v2 + 811) != v3 || *(unsigned __int8 *)(v2 + 812) != *((unsigned __int8 *)v1 + 9))
  {
    int v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = "true";
      if (v3) {
        BOOL v6 = "true";
      }
      else {
        BOOL v6 = "false";
      }
      if (!*((unsigned char *)v1 + 9)) {
        int v5 = "false";
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v9 = v6;
      __int16 v10 = 2080;
      uint32_t v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I isDisplayActive: %s, isCoversheetActive: %s", buf, 0x16u);
      LOBYTE(v3) = *((unsigned char *)v1 + 8);
    }
    *(unsigned char *)(v2 + 811) = v3;
    *(unsigned char *)(v2 + 812) = *((unsigned char *)v1 + 9);
    sub_100BF4CA0(v2);
  }
  operator delete();
}

void sub_100C038A4()
{
}

void sub_100C038D0(uint64_t **a1)
{
  int v3 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(_WORD *)(v2 + 813) = *((_WORD *)v1 + 4);
  sub_100BF4CA0(v2);
  operator delete();
}

void sub_100C03930()
{
}

void sub_100C03960()
{
}

void *sub_100C03974()
{
  result = operator new(0x10uLL);
  void *result = off_101A47810;
  return result;
}

void sub_100C039AC(uint64_t a1, void *a2)
{
  *a2 = off_101A47810;
}

void sub_100C039D4(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  sub_100BF360C();
  int v3 = qword_101B10258;
  if (v2)
  {
    if (os_log_type_enabled((os_log_t)qword_101B10258, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Assistant app launched successfully", buf, 2u);
    }
  }
  else if (os_log_type_enabled((os_log_t)qword_101B10258, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)int v4 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Failed to launch Assistant app", v4, 2u);
  }
}

uint64_t sub_100C03A80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C03AC0()
{
}

void sub_100C03ACC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A47890;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C03AEC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A47890;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C03B40(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 360);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 351) < 0) {
    operator delete(*(void **)(a1 + 328));
  }
  if (*(unsigned char *)(a1 + 264) && *(unsigned char *)(a1 + 256)) {
    sub_10012577C((const void **)(a1 + 216));
  }
  if (*(unsigned char *)(a1 + 152))
  {
    int v3 = *(void **)(a1 + 128);
    if (v3)
    {
      *(void *)(a1 + 136) = v3;
      operator delete(v3);
    }
  }
}

uint64_t *sub_100C03BC8(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    int v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      sub_10004D2C8(v2);
    }
    int v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100C03C28(void *a1)
{
  uint32_t v11 = a1;
  int v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    int v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      int v4 = v3;
      uint64_t v5 = *a1;
      if (*a1)
      {
        BOOL v6 = *(std::__shared_weak_count **)(v5 + 136);
        if (v6)
        {
          char v7 = std::__shared_weak_count::lock(v6);
          if (v7)
          {
            int v8 = v7;
            uint64_t v9 = *(void *)(v5 + 128);
            if (v9)
            {
              (*(void (**)(uint64_t))(*(void *)v9 + 16))(v9);
              (***(void (****)(void, void))(v5 + 88))(*(void *)(v5 + 88), a1[2]);
            }
            sub_10004D2C8(v8);
          }
        }
      }
      sub_10004D2C8(v4);
    }
  }
  return sub_100C03BC8((uint64_t *)&v11);
}

void sub_100C03CFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004D2C8(v3);
  sub_10004D2C8(v2);
  sub_100C03BC8((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C03D20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A478E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C03D40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A478E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C03D94(uint64_t a1)
{
  int v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
}

void sub_100C03DB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A47930;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C03DD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A47930;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C03E24(uint64_t a1)
{
}

void sub_100C03E38(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100BFA094(**a1);
  operator delete();
}

void sub_100C03E8C()
{
}

uint64_t sub_100C03EB8(uint64_t a1, uint64_t a2)
{
  int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    int v3 = (void *)(a1 + 24);
  }
  *int v3 = 0;
  return a1;
}

uint64_t *sub_100C03F38(void ***a1)
{
  uint64_t v1 = *a1;
  v67 = a1;
  v68 = v1;
  int v2 = *v1;
  xpc_object_t object = 0;
  __p = v1 + 1;
  v73 = "location";
  sub_10000CB28((uint64_t)&__p, &object);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    sub_100058DB0(&__p, "location: is deprecated, use gps-time-and-loc instead");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&__p, 0);
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  __p = v1 + 1;
  v73 = "target-coords";
  sub_100048BAC((uint64_t)&__p, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_100058DB0(&__p, "target-coords is: obsolete");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&__p, 0);
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
  }
  xpc_release(object);
  xpc_object_t object = 0;
  __p = v1 + 1;
  v73 = "service-threshold";
  sub_100048BAC((uint64_t)&__p, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    sub_100058DB0(&__p, "service-threshold: obsolete");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&__p, 0);
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
  }
  xpc_release(object);
  v82[0] = 0;
  __p = v1 + 1;
  v73 = "service-outages";
  sub_10000CB28((uint64_t)&__p, v82);
  if (xpc_get_type(v82[0]) != (xpc_type_t)&_xpc_type_dictionary) {
    goto LABEL_11;
  }
  uint64_t v4 = (stewie::ConnectionAssistantGPSDataSource *)v2[41];
  if (!v4 || !v2[27])
  {
    sub_100058DB0(&__p, "service-outages: GPSDataSource or TargetDataSource is down");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&__p, 0);
    if (SHIBYTE(v74) < 0)
    {
      int v8 = __p;
      goto LABEL_162;
    }
LABEL_163:
    int v3 = 0;
    goto LABEL_164;
  }
  unint64_t v81 = 0;
  stewie::ConnectionAssistantGPSDataSource::currentGPSTime(v4, &v81);
  xpc_object_t v80 = 0;
  __p = v82;
  v73 = "outages";
  sub_100048BAC((uint64_t)&__p, &v80);
  if (xpc_get_type(v80) == (xpc_type_t)&_xpc_type_null)
  {
    v66 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    goto LABEL_159;
  }
  if (xpc_get_type(v80) != (xpc_type_t)&_xpc_type_array)
  {
    sub_100058DB0(&__p, "service-outages: outages - invalid format, array expected");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&__p, 0);
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
    v66 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    int v7 = 1;
    goto LABEL_160;
  }
  xpc_object_t v9 = v80;
  if (v80) {
    xpc_retain(v80);
  }
  else {
    xpc_object_t v9 = xpc_null_create();
  }
  xpc_object_t v10 = xpc_null_create();
  if (v9 && xpc_get_type(v9) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v9);
    xpc_object_t xarray = v9;
    xpc_type_t type = xpc_get_type(v9);
  }
  else
  {
    xpc_object_t xarray = xpc_null_create();
    xpc_type_t type = xpc_get_type(xarray);
  }
  if (type != (xpc_type_t)&_xpc_type_array)
  {
    if (v10)
    {
      xpc_retain(v10);
      xpc_object_t v12 = v10;
    }
    else
    {
      xpc_object_t v12 = xpc_null_create();
    }
    xpc_release(xarray);
    xpc_object_t xarray = v12;
  }
  xpc_release(v10);
  xpc_release(v9);
  __p = xarray;
  if (xarray) {
    xpc_retain(xarray);
  }
  else {
    __p = xpc_null_create();
  }
  sub_100048BF4(&object, &__p, 0);
  xpc_release(__p);
  __p = xarray;
  if (xarray) {
    xpc_retain(xarray);
  }
  else {
    __p = xpc_null_create();
  }
  if (xpc_get_type(xarray) == (xpc_type_t)&_xpc_type_array) {
    count = (void *)xpc_array_get_count(xarray);
  }
  else {
    count = 0;
  }
  sub_100048BF4(&v78, &__p, count);
  xpc_release(__p);
  xpc_object_t v14 = object;
  size_t v15 = v70;
  if (v70 == v79 && object == v78)
  {
    v66 = 0;
    uint64_t v5 = 0;
    unint64_t v6 = 0;
    char v16 = 0;
    int v7 = 0;
    uint64_t v17 = xarray;
    goto LABEL_158;
  }
  uint64_t v5 = 0;
  unint64_t v62 = 0;
  uint64_t v65 = (uint64_t)(v1 + 2);
  v66 = 0;
  while (1)
  {
    xpc_object_t value = xpc_array_get_value(v14, v15);
    if (xpc_get_type(value) != (xpc_type_t)&_xpc_type_dictionary) {
      break;
    }
    xpc_object_t v77 = 0;
    xpc_object_t v19 = xpc_array_get_value(object, v15);
    xpc_object_t v20 = v19;
    v21 = v66;
    if (v19) {
      xpc_retain(v19);
    }
    else {
      xpc_object_t v20 = xpc_null_create();
    }
    xpc_object_t v22 = xpc_null_create();
    xpc_object_t v77 = v20;
    if (v20 && xpc_get_type(v20) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v20);
      xpc_object_t v23 = v77;
    }
    else
    {
      xpc_object_t v23 = xpc_null_create();
      xpc_object_t v77 = v23;
    }
    if (xpc_get_type(v23) != (xpc_type_t)&_xpc_type_dictionary)
    {
      if (v22)
      {
        xpc_retain(v22);
        xpc_object_t v24 = v22;
      }
      else
      {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_object_t v25 = v77;
      xpc_object_t v77 = v24;
      xpc_release(v25);
    }
    xpc_release(v22);
    xpc_release(v20);
    xpc_object_t v76 = 0;
    __p = &v77;
    v73 = "fmid";
    sub_100048BAC((uint64_t)&__p, &v76);
    if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_null)
    {
      sub_100058DB0(&__p, "service-outage: fmid is missing");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    else
    {
      if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_int64)
      {
        __p = v76;
        if (v76) {
          xpc_retain(v76);
        }
        else {
          __p = xpc_null_create();
        }
        int v27 = xpc::dyn_cast_or_default((xpc *)&__p, 0, v28);
        xpc_release(__p);
        int v26 = 1;
        goto LABEL_71;
      }
      sub_100058DB0(&__p, "service-outage: fmid - invalid format, integer expected");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
    int v26 = 0;
    int v27 = 0;
LABEL_71:
    xpc_release(v76);
    if (!v26) {
      goto LABEL_98;
    }
    xpc_object_t v76 = 0;
    __p = &v77;
    v73 = "startInSec";
    sub_100048BAC((uint64_t)&__p, &v76);
    if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_null)
    {
      sub_100058DB0(&__p, "service-outage: startIn is missing");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    else
    {
      if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_int64)
      {
        unint64_t v30 = v81;
        __p = v76;
        if (v76) {
          xpc_retain(v76);
        }
        else {
          __p = xpc_null_create();
        }
        uint64_t v32 = xpc::dyn_cast_or_default((xpc *)&__p, 0, v31);
        xpc_release(__p);
        unint64_t v63 = v32 + v30 / 0x3B9ACA00;
        int v29 = 1;
        goto LABEL_83;
      }
      sub_100058DB0(&__p, "service-outage: start - invalid format, integer expected");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
    int v29 = 0;
    unint64_t v63 = 0;
LABEL_83:
    xpc_release(v76);
    if (!v29) {
      goto LABEL_98;
    }
    xpc_object_t v76 = 0;
    __p = &v77;
    v73 = "durationSec";
    sub_100048BAC((uint64_t)&__p, &v76);
    if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_null)
    {
      sub_100058DB0(&__p, "service-outage: duration is missing");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    else
    {
      if (xpc_get_type(v76) == (xpc_type_t)&_xpc_type_int64)
      {
        __p = v76;
        if (v76) {
          xpc_retain(v76);
        }
        else {
          __p = xpc_null_create();
        }
        uint64_t v61 = xpc::dyn_cast_or_default((xpc *)&__p, 0, v34);
        xpc_release(__p);
        int v33 = 1;
        goto LABEL_95;
      }
      sub_100058DB0(&__p, "service-outage: duration - invalid format, integer expected");
      sub_100C04F1C(v65, (uint64_t)&__p, 0);
    }
    if (SHIBYTE(v74) < 0) {
      operator delete(__p);
    }
    int v33 = 0;
    uint64_t v61 = 0;
LABEL_95:
    xpc_release(v76);
    if (!v33)
    {
LABEL_98:
      int v35 = 0;
      goto LABEL_99;
    }
    if (v27) {
      goto LABEL_97;
    }
    uint64_t v36 = v2[27];
    if (*(unsigned char *)(v36 + 184))
    {
      int v37 = *(_DWORD *)(v36 + 152);
      if ((unint64_t)v5 >= v62)
      {
        unint64_t v38 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v66) >> 3) + 1;
        if (v38 > 0xAAAAAAAAAAAAAAALL) {
          sub_10006A748();
        }
        if (0x5555555555555556 * ((uint64_t)(v62 - (void)v66) >> 3) > v38) {
          unint64_t v38 = 0x5555555555555556 * ((uint64_t)(v62 - (void)v66) >> 3);
        }
        if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)v66) >> 3) >= 0x555555555555555) {
          unint64_t v39 = 0xAAAAAAAAAAAAAAALL;
        }
        else {
          unint64_t v39 = v38;
        }
        if (v39) {
          unint64_t v39 = (unint64_t)sub_100601864(v39);
        }
        else {
          uint64_t v40 = 0;
        }
        unint64_t v41 = v39 + 8 * ((v5 - v66) >> 3);
        *(unsigned char *)unint64_t v41 = v37;
        *(void *)(v41 + 8) = v63;
        *(void *)(v41 + 16) = v61;
        if (v5 == v66)
        {
          unint64_t v44 = v39 + 8 * ((v5 - v66) >> 3);
        }
        else
        {
          unint64_t v42 = v39 + 8 * ((v5 - v66) >> 3);
          do
          {
            long long v43 = *(_OWORD *)(v5 - 24);
            unint64_t v44 = v42 - 24;
            *(void *)(v42 - 8) = *((void *)v5 - 1);
            *(_OWORD *)(v42 - 24) = v43;
            v5 -= 24;
            v42 -= 24;
          }
          while (v5 != v66);
        }
        unint64_t v62 = v39 + 24 * v40;
        uint64_t v5 = (char *)(v41 + 24);
        if (v66) {
          operator delete(v66);
        }
        v21 = (char *)v44;
      }
      else
      {
        char *v5 = v37;
        *((void *)v5 + 1) = v63;
        *((void *)v5 + 2) = v61;
        v5 += 24;
      }
      uint64_t v36 = v2[27];
    }
    v66 = v21;
    if (!*(unsigned char *)(v36 + 304) || (v46 = *(uint64_t **)(v36 + 280), uint64_t v45 = *(uint64_t **)(v36 + 288), v46 == v45))
    {
LABEL_97:
      int v35 = 1;
    }
    else
    {
      unint64_t v47 = v63;
      unint64_t v48 = v61 + v63;
      do
      {
        unint64_t v49 = *v46 / 0x3B9ACA00uLL;
        if (v47 <= v49 && v49 <= v48)
        {
          int v51 = *((_DWORD *)v46 + 2);
          if ((unint64_t)v5 >= v62)
          {
            unint64_t v52 = 0xAAAAAAAAAAAAAAABLL * ((v5 - v66) >> 3) + 1;
            if (v52 > 0xAAAAAAAAAAAAAAALL) {
              sub_10006A748();
            }
            if (0x5555555555555556 * ((uint64_t)(v62 - (void)v66) >> 3) > v52) {
              unint64_t v52 = 0x5555555555555556 * ((uint64_t)(v62 - (void)v66) >> 3);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v62 - (void)v66) >> 3) >= 0x555555555555555) {
              unint64_t v53 = 0xAAAAAAAAAAAAAAALL;
            }
            else {
              unint64_t v53 = v52;
            }
            if (v53) {
              unint64_t v53 = (unint64_t)sub_100601864(v53);
            }
            else {
              uint64_t v54 = 0;
            }
            unint64_t v55 = v53 + 8 * ((v5 - v66) >> 3);
            *(unsigned char *)unint64_t v55 = v51;
            *(void *)(v55 + 8) = v63;
            *(void *)(v55 + 16) = v61;
            if (v5 == v66)
            {
              uint64_t v58 = (char *)(v53 + 8 * ((v5 - v66) >> 3));
            }
            else
            {
              unint64_t v56 = v53 + 8 * ((v5 - v66) >> 3);
              do
              {
                long long v57 = *(_OWORD *)(v5 - 24);
                uint64_t v58 = (char *)(v56 - 24);
                *(void *)(v56 - 8) = *((void *)v5 - 1);
                *(_OWORD *)(v56 - 24) = v57;
                v5 -= 24;
                v56 -= 24;
              }
              while (v5 != v66);
            }
            unint64_t v62 = v53 + 24 * v54;
            uint64_t v5 = (char *)(v55 + 24);
            if (v66) {
              operator delete(v66);
            }
            v66 = v58;
            unint64_t v47 = v63;
          }
          else
          {
            char *v5 = v51;
            *((void *)v5 + 1) = v47;
            *((void *)v5 + 2) = v61;
            v5 += 24;
          }
        }
        unint64_t v59 = *v46;
        v46 += 5;
        int v35 = 1;
      }
      while (v59 / 0x3B9ACA00 < v48 && v46 != v45);
    }
LABEL_99:
    xpc_release(v77);
    if (!v35)
    {
      int v7 = 1;
      goto LABEL_157;
    }
    xpc_object_t v14 = object;
    size_t v15 = v70 + 1;
    size_t v70 = v15;
    if (v15 == v79 && object == v78)
    {
      int v7 = 0;
LABEL_157:
      char v16 = v35 ^ 1;
      uint64_t v17 = xarray;
      unint64_t v6 = v62;
      goto LABEL_158;
    }
  }
  sub_100058DB0(&__p, "service-outages: outage - invalid format, dict expected");
  uint64_t v17 = xarray;
  sub_100C04F1C(v65, (uint64_t)&__p, 0);
  unint64_t v6 = v62;
  if (SHIBYTE(v74) < 0) {
    operator delete(__p);
  }
  char v16 = 1;
  int v7 = 1;
LABEL_158:
  xpc_release(v78);
  xpc_release(object);
  xpc_release(v17);
  if ((v16 & 1) == 0) {
LABEL_159:
  }
    int v7 = 0;
LABEL_160:
  xpc_release(v80);
  int v8 = v66;
  if (v7)
  {
    if (v66) {
LABEL_162:
    }
      operator delete(v8);
    goto LABEL_163;
  }
  LODWORD(__p) = 0;
  v73 = v66;
  v74 = v5;
  unint64_t v75 = v6;
  (*(void (**)(void *, void **))(*v2 + 144))(v2, &__p);
  if (v73)
  {
    v74 = v73;
    operator delete(v73);
  }
LABEL_11:
  int v3 = 1;
LABEL_164:
  xpc_release(v82[0]);
  if (v3)
  {
    sub_100058DB0(&object, "");
    sub_100C04F1C((uint64_t)(v1 + 2), (uint64_t)&object, 0);
    if (v71 < 0) {
      operator delete(object);
    }
  }
  sub_100C04EBC((uint64_t *)&v68);
  return sub_100046B58((uint64_t *)&v67);
}

void sub_100C04B08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, xpc_object_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,xpc_object_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,xpc_object_t a31,xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v32 - 128));
  xpc_release(a18);
  xpc_release(a13);
  xpc_release(*(xpc_object_t *)(v32 - 112));
  if (__p) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v32 - 96));
  sub_100C04EBC(&a17);
  sub_100046B58(&a16);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C04EBC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_1001E917C((void *)(v1 + 16));
    xpc_release(*(xpc_object_t *)(v1 + 8));
    *(void *)(v1 + 8) = 0;
    operator delete();
  }
  return result;
}

uint64_t sub_100C04F1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void sub_100C0522C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C05440(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v16)
  {
    std::__shared_weak_count::__release_weak(v16);
    std::__shared_weak_count::__release_weak(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0546C(void *a1, char a2, const std::string *a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      int v8 = v7;
      if (a1[5])
      {
        uint64_t v9 = a1[4];
        if (a2)
        {
          *(unsigned char *)(v9 + 32) = a2;
          std::string::operator=((std::string *)(v9 + 72), a3);
          (*(void (**)(void))(*(void *)(a1[4] + 48) + 16))();
        }
        else
        {
          xpc_object_t v10 = **(NSObject ***)(v9 + 120);
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%sschedule findAccountName retry", buf, 0x16u);
            uint64_t v9 = a1[4];
          }
          Registry::getTimerService(&v19, *(Registry **)(v9 + 16));
          uint64_t v11 = v19;
          sub_100058DB0(__p, "ACAccountStore retry");
          xpc_object_t v12 = *(NSObject **)(a1[4] + 40);
          dispatch_object_t object = v12;
          if (v12) {
            dispatch_retain(v12);
          }
          *(void *)long long buf = _NSConcreteStackBlock;
          *(void *)&buf[8] = 3321888768;
          *(void *)&uint8_t buf[16] = sub_100C05DD0;
          xpc_object_t v23 = &unk_101A47C28;
          int v13 = (std::__shared_weak_count *)a1[6];
          uint64_t v25 = a1[5];
          int v26 = v13;
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v24 = a1[4];
          aBlock = _Block_copy(buf);
          sub_100118A44(v11, (uint64_t)__p, 1, 5000000, &object, &aBlock);
          sub_1004DC2E0((void *)(a1[4] + 56), &v21);
          uint64_t v14 = v21;
          uint64_t v21 = 0;
          if (v14) {
            (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (object) {
            dispatch_release(object);
          }
          if (v18 < 0) {
            operator delete(__p[0]);
          }
          if (v20) {
            sub_10004D2C8(v20);
          }
          if (v26) {
            std::__shared_weak_count::__release_weak(v26);
          }
        }
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_100C056E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C0579C(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C057C0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100C05904(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_100C05A04(_Unwind_Exception *exception_object)
{
  if (v2) {
    dispatch_release(v2);
  }
  if (v1)
  {
    std::__shared_weak_count::__release_weak(v1);
    std::__shared_weak_count::__release_weak(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C05C70(void *a1)
{
  *a1 = off_101A47BD8;
  uint64_t v2 = (void *)a1[1];
  if (v2) {

  }
  return a1;
}

void sub_100C05CC4(void *a1)
{
  sub_100C05C70(a1);

  operator delete();
}

void sub_100C05CFC()
{
}

void sub_100C05D90(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  operator delete();
}

id sub_100C05DC0(uint64_t a1)
{
  return [*(id *)(a1 + 8) getPrimaryAccount];
}

id sub_100C05DC8(uint64_t a1)
{
  return [*(id *)(a1 + 8) isManagedAppleId];
}

void sub_100C05DD0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (a1[5])
      {
        uint64_t v5 = (void **)a1[4];
        unint64_t v6 = *v5[15];
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 136315394;
          int v8 = "";
          __int16 v9 = 2080;
          xpc_object_t v10 = "";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sstarting scheduled retry", (uint8_t *)&v7, 0x16u);
          uint64_t v5 = (void **)a1[4];
        }
        [v5 initAccountNameWithRetry];
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_100C05EC0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C05ED4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C05EF0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *sub_100C05F00(void *a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  *a1 = off_101A47BD8;
  int v8 = [ACAccountStoreDelegate alloc];
  __int16 v9 = *a2;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  xpc_object_t v10 = [(ACAccountStoreDelegate *)v8 initWithCallback:a3 queue:&object registry:a4];
  if (object) {
    dispatch_release(object);
  }
  a1[1] = v10;
  return a1;
}

void sub_100C05FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C05FC8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C06000(uint64_t a1)
{
}

uint64_t sub_100C06008(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t *sub_100C0604C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

void sub_100C060A0(uint64_t a1)
{
  objc_opt_new();
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  operator new();
}

void sub_100C06168(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100C0604C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C0617C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100C061D0(void *a1)
{
  int v8 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3 && a1[1])
    {
      uint64_t v4 = *a1;
      uint64_t v5 = **(NSObject ***)(*a1 + 120);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        xpc_object_t v10 = "";
        __int16 v11 = 2080;
        xpc_object_t v12 = "";
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%sACAccountStore created", buf, 0x16u);
        uint64_t v4 = *a1;
      }
      *(void *)(v4 + 8) = a1[3];
      unint64_t v6 = +[NSNotificationCenter defaultCenter];
      [(NSNotificationCenter *)v6 addObserver:*a1 selector:"storeStatusChanged:" name:ACDAccountStoreDidChangeNotification object:0];
      [(id)*a1 initAccountNameWithRetry];
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }

  if (v3) {
LABEL_9:
  }
    sub_10004D2C8(v3);
  return sub_100C0617C((uint64_t *)&v8);
}

void sub_100C06314(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100C0617C((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C0633C(void *a1)
{
  __int16 v9 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = a1[1];
      if (v5)
      {
        unint64_t v6 = (unsigned char *)*a1;
        if (!*(unsigned char *)(*a1 + 33))
        {
          v6[33] = 1;
          v10[0] = _NSConcreteStackBlock;
          v10[1] = 3321888768;
          v10[2] = sub_100C06474;
          v10[3] = &unk_101A47CD0;
          int v7 = (std::__shared_weak_count *)a1[2];
          if (v7)
          {
            atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            __int16 v11 = v6;
            uint64_t v12 = v5;
            int v13 = v7;
            atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          }
          else
          {
            __int16 v11 = v6;
            uint64_t v12 = v5;
            int v13 = 0;
          }
          objc_msgSend(v6, "findAccountName:", v10, v9);
          if (v7) {
            std::__shared_weak_count::__release_weak(v7);
          }
          if (v13) {
            std::__shared_weak_count::__release_weak(v13);
          }
        }
      }
      sub_10004D2C8(v4);
    }
  }
  return sub_100C0604C((uint64_t *)&v9);
}

void sub_100C06440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  sub_10004D2C8(v16);
  sub_100C0604C(&a9);
  _Unwind_Resume(a1);
}

void sub_100C06474(void *a1, int a2, const std::string *a3)
{
  *(unsigned char *)(a1[4] + 33) = 0;
  if (a2)
  {
    uint64_t v4 = (std::__shared_weak_count *)a1[6];
    if (v4)
    {
      unint64_t v6 = std::__shared_weak_count::lock(v4);
      if (v6)
      {
        int v7 = v6;
        if (!a1[5]) {
          goto LABEL_32;
        }
        uint64_t v8 = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        if ((v8 & 0x80u) == 0) {
          std::string::size_type size = HIBYTE(a3->__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = a3->__r_.__value_.__l.__size_;
        }
        uint64_t v10 = a1[4];
        __int16 v11 = (std::string *)(v10 + 72);
        uint64_t v12 = *(unsigned __int8 *)(v10 + 95);
        if (size)
        {
          uint64_t v13 = *(void *)(v10 + 80);
          if ((v12 & 0x80u) == 0) {
            uint64_t v13 = v12;
          }
          if (size == v13)
          {
            if ((v12 & 0x80u) == 0) {
              uint64_t v14 = v11;
            }
            else {
              uint64_t v14 = (std::string *)v11->__r_.__value_.__r.__words[0];
            }
            if ((v8 & 0x80) == 0)
            {
              if (*((unsigned char *)&a3->__r_.__value_.__s + 23))
              {
                size_t v15 = a3;
                while (v15->__r_.__value_.__s.__data_[0] == v14->__r_.__value_.__s.__data_[0])
                {
                  size_t v15 = (const std::string *)((char *)v15 + 1);
                  uint64_t v14 = (std::string *)((char *)v14 + 1);
                  if (!--v8) {
                    goto LABEL_32;
                  }
                }
                goto LABEL_31;
              }
LABEL_32:
              sub_10004D2C8(v7);
              return;
            }
            if (!memcmp(a3->__r_.__value_.__l.__data_, v14, a3->__r_.__value_.__l.__size_)) {
              goto LABEL_32;
            }
          }
LABEL_31:
          std::string::operator=(v11, a3);
          (*(void (**)(void))(*(void *)(a1[4] + 48) + 16))();
          goto LABEL_32;
        }
        if ((v12 & 0x80) != 0)
        {
          unint64_t v16 = *(void *)(v10 + 80);
          if (!v16) {
            goto LABEL_32;
          }
          __p[0] = 0;
          __p[1] = 0;
          uint64_t v18 = 0;
          sub_10004FC84(__p, v11->__r_.__value_.__l.__data_, v16);
          uint64_t v10 = a1[4];
          if (*(char *)(v10 + 95) < 0)
          {
            *(void *)(v10 + 80) = 0;
            __int16 v11 = *(std::string **)(v10 + 72);
LABEL_28:
            v11->__r_.__value_.__s.__data_[0] = 0;
            (*(void (**)(void))(*(void *)(a1[4] + 48) + 16))();
            if (SHIBYTE(v18) < 0) {
              operator delete(__p[0]);
            }
            goto LABEL_32;
          }
          __int16 v11 = (std::string *)(v10 + 72);
        }
        else
        {
          if (!*(unsigned char *)(v10 + 95)) {
            goto LABEL_32;
          }
          *(_OWORD *)__p = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
          uint64_t v18 = *(void *)(v10 + 88);
        }
        *(unsigned char *)(v10 + 95) = 0;
        goto LABEL_28;
      }
    }
  }
}

void sub_100C06614(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_10004D2C8(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100C06648(uint64_t result, uint64_t a2)
{
  *(_OWORD *)(result + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C0666C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void *sub_100C0667C(void *result)
{
  uint64_t v1 = (void *)*result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = (const void *)v1[5];
    if (v2) {
      _Block_release(v2);
    }
    uint64_t v3 = v1[3];
    if (v3) {
      dispatch_release(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete();
  }
  return result;
}

void *sub_100C066EC(uint64_t a1)
{
  uint64_t v18 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      if (*(void *)(a1 + 8))
      {
        uint64_t v4 = **(NSObject ***)(*(void *)a1 + 120);
        if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315394;
          int v29 = "";
          __int16 v30 = 2080;
          uint64_t v31 = "";
          _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%squerying acount name", buf, 0x16u);
        }
        id v6 = objc_msgSend(*(id *)(a1 + 32), "accountsWithAccountType:", objc_msgSend(*(id *)(a1 + 32), "accountTypeWithAccountTypeIdentifier:", ACAccountTypeIdentifierAppleAccount, v18));
        long long v23 = 0u;
        long long v24 = 0u;
        long long v21 = 0u;
        long long v22 = 0u;
        id v7 = [v6 countByEnumeratingWithState:&v21 objects:buf count:16];
        if (v7)
        {
          uint64_t v8 = *(void *)v22;
          do
          {
            for (i = 0; i != v7; i = (char *)i + 1)
            {
              if (*(void *)v22 != v8) {
                objc_enumerationMutation(v6);
              }
              uint64_t v10 = *(void **)(*((void *)&v21 + 1) + 8 * i);
              if (objc_msgSend(objc_msgSend(v10, "accountPropertyForKey:", @"primaryAccount"), "BOOLValue"))
              {
                id v11 = [v10 username];
LABEL_16:

                v19[0] = 0;
                v19[1] = 0;
                xpc_object_t v20 = 0;
                if (v11) {
                  uint64_t v12 = (char *)[v11 UTF8String];
                }
                else {
                  uint64_t v12 = "";
                }
                sub_100058DB0(v19, v12);
                uint64_t v13 = **(NSObject ***)(*(void *)a1 + 120);
                if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)uint64_t v25 = 136315906;
                  uint64_t v14 = v19;
                  *(void *)&v25[4] = "";
                  if (SHIBYTE(v20) < 0) {
                    uint64_t v14 = (void **)v19[0];
                  }
                  *(_WORD *)&v25[12] = 2080;
                  *(void *)&v25[14] = "";
                  __int16 v26 = 2080;
                  __p[0] = "success";
                  LOWORD(__p[1]) = 2080;
                  *(void **)((char *)&__p[1] + 2) = v14;
                  _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s%squery result:%s name:%s", v25, 0x2Au);
                }
                uint64_t v15 = *(void *)(a1 + 16);
                *(void *)uint64_t v25 = *(void *)(a1 + 8);
                *(void *)&v25[8] = v15;
                if (v15) {
                  atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
                }
                v25[16] = 1;
                if (SHIBYTE(v20) < 0)
                {
                  sub_10004FC84(__p, v19[0], (unint64_t)v19[1]);
                }
                else
                {
                  *(_OWORD *)__p = *(_OWORD *)v19;
                  __p[2] = v20;
                }
                unint64_t v16 = *(void **)(a1 + 40);
                if (v16) {
                  unint64_t v16 = _Block_copy(v16);
                }
                __p[3] = v16;
                operator new();
              }
            }
            id v7 = [v6 countByEnumeratingWithState:&v21 objects:buf count:16];
          }
          while (v7);
        }
        id v11 = 0;
        goto LABEL_16;
      }
      sub_10004D2C8(v3);
    }
  }
  return sub_100C0667C(&v18);
}

void sub_100C06ABC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint8_t buf,std::__shared_weak_count *a27,int a28,__int16 a29,__int16 a30,uint64_t a31)
{
  if (a27) {
    std::__shared_weak_count::__release_weak(a27);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v31);
  sub_100C0667C(&a9);
  _Unwind_Resume(a1);
}

void sub_100C06BD4()
{
}

uint64_t *sub_100C06BE0(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 48);
    if (v2) {
      _Block_release(v2);
    }
    if (*(char *)(v1 + 47) < 0) {
      operator delete(*(void **)(v1 + 24));
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100C06C54(void *a1)
{
  id v6 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      if (*a1) {
        (*(void (**)(void))(a1[6] + 16))();
      }
      sub_10004D2C8(v4);
    }
  }
  return sub_100C06BE0((uint64_t *)&v6);
}

void sub_100C06CC4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10004D2C8(v2);
  sub_100C06BE0((uint64_t *)va);
  _Unwind_Resume(a1);
}

capabilities::ct *TravelHandler::create@<X0>(capabilities::ct *result@<X0>, void *a2@<X8>)
{
  if (*(void *)result)
  {
    uint64_t v3 = (capabilities::ct *)capabilities::ct::supportsGemini(result);
    if ((v3 & 1) != 0
      || (result = (capabilities::ct *)capabilities::ct::dataOnlySingleSIMDevice(v3), result))
    {
      *a2 = 0;
      a2[1] = 0;
      operator new();
    }
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_100C07114(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, ctu::OsLogLogger *a10, uint64_t a11, CTLocationControllerDelegateInterface *a12, dispatch_object_t object, dispatch_object_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21)
{
  if (a21) {
    (*(void (**)(uint64_t))(*(void *)a21 + 8))(a21);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  sub_10004D2C8(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100C0731C(uint64_t a1)
{
  *(void *)a1 = off_101A47D10;
  uint64_t v2 = (CTLocationControllerDelegateInterface *)(a1 + 8);
  *(void *)(a1 + 8) = off_101A47D98;
  sub_1000346F8(a1 + 336, *(void **)(a1 + 344));
  sub_1000346F8(a1 + 312, *(void **)(a1 + 320));
  id v7 = (void **)(a1 + 288);
  sub_10008A88C(&v7);
  id v7 = (void **)(a1 + 264);
  sub_1000C56F4(&v7);
  sub_10005CD2C(a1 + 240, *(char **)(a1 + 248));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 232);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_100C0D60C(*(void **)(a1 + 208));

  sub_1002C3E38(a1 + 160, *(void **)(a1 + 168));
  sub_10005CD2C(a1 + 136, *(char **)(a1 + 144));
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 80);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 64);
  if (v5) {
    sub_10004D2C8(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 48));
  sub_100087E88((void *)(a1 + 16));
  CTLocationControllerDelegateInterface::~CTLocationControllerDelegateInterface(v2);
  return a1;
}

uint64_t sub_100C0745C(uint64_t a1)
{
  return sub_100C0731C(a1 - 8);
}

void sub_100C07464(uint64_t a1)
{
  sub_100C0731C(a1);

  operator delete();
}

void sub_100C0749C(uint64_t a1)
{
  sub_100C0731C(a1 - 8);

  operator delete();
}

void sub_100C074D8(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C07600(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (uint64_t *)*(unsigned __int8 *)(a2 + 23);
  if ((char)v3 < 0) {
    uint64_t v3 = *(uint64_t **)(a2 + 8);
  }
  if (v3)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 56));
    id v6 = ServiceMap;
    if (v7 < 0)
    {
      uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v7;
    id v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
    if (v11)
    {
      uint64_t v13 = v11[3];
      uint64_t v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v6);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v12);
        char v14 = 0;
        if (!v13) {
          goto LABEL_10;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v14 = 1;
    if (!v13)
    {
LABEL_10:
      uint64_t v15 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Unable to get isoCache", buf, 2u);
        if (v14) {
          return;
        }
        goto LABEL_50;
      }
      goto LABEL_49;
    }
LABEL_17:
    unint64_t v39 = 0;
    uint64_t v40 = 0;
    uint64_t v41 = 0;
    (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 24))(&v39, v13, a2);
    uint64_t v17 = HIBYTE(v41);
    if (v41 < 0) {
      uint64_t v17 = v40;
    }
    if (v17)
    {
      int v37 = 0;
      unint64_t v38 = 0;
      uint64_t v36 = &v37;
      sub_100046BAC((uint64_t **)&v36, &v39, (uint64_t)&v39);
      uint64_t v18 = *(void *)(a1 + 288);
      uint64_t v19 = *(void *)(a1 + 296);
      if (v18 != v19)
      {
        uint64_t v20 = v18 + 96;
        do
        {
          if (*(char *)(v20 - 1) < 0)
          {
            sub_10004FC84(__p, *(void **)(v20 - 24), *(void *)(v20 - 16));
          }
          else
          {
            long long v21 = *(_OWORD *)(v20 - 24);
            uint64_t v35 = *(void *)(v20 - 8);
            *(_OWORD *)__p = v21;
          }
          BOOL v22 = sub_100C07A8C(*(void *)(a1 + 264), *(void *)(a1 + 272), (uint64_t)__p);
          BOOL v23 = v22;
          if (SHIBYTE(v35) < 0)
          {
            operator delete(__p[0]);
            if (!v23)
            {
LABEL_29:
              *(_OWORD *)uint64_t v32 = 0u;
              long long v33 = 0u;
              *(_OWORD *)long long buf = 0u;
              sub_100E63EA4((uint64_t)buf);
              unsigned int v28 = 0;
              uint64_t v29 = 0;
              uint64_t v30 = 0;
              (*(void (**)(void **__return_ptr, uint64_t, uint8_t *))(*(void *)v13 + 24))(&v28, v13, buf);
              uint64_t v24 = HIBYTE(v30);
              char v25 = HIBYTE(v30);
              if (v30 < 0) {
                uint64_t v24 = v29;
              }
              if (v24)
              {
                sub_100046BAC((uint64_t **)&v36, &v28, (uint64_t)&v28);
                char v25 = HIBYTE(v30);
              }
              if (v25 < 0) {
                operator delete(v28);
              }
              if (SHIBYTE(v33) < 0) {
                operator delete(v32[1]);
              }
              if (SHIBYTE(v32[0]) < 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          else if (!v22)
          {
            goto LABEL_29;
          }
          uint64_t v26 = v20 + 72;
          v20 += 168;
        }
        while (v26 != v19);
      }
      if (v38 > 1)
      {
        memset(buf, 0, sizeof(buf));
        (***(void (****)(uint8_t *__return_ptr))(a1 + 72))(buf);
        if (*(void *)buf) {
          (***(void (****)(void, const __CFString *, const __CFString *))buf)(*(void *)buf, @"com.apple.CommCenter.multiCountryeSIMProvisioned", @"com.apple.commcenter");
        }
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      sub_10005CD2C((uint64_t)&v36, v37);
    }
    else
    {
      int v27 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Could not find country for new mcc", buf, 2u);
      }
    }
    if (SHIBYTE(v41) < 0)
    {
      operator delete(v39);
      if (v14) {
        return;
      }
LABEL_50:
      sub_10004D2C8(v12);
      return;
    }
LABEL_49:
    if (v14) {
      return;
    }
    goto LABEL_50;
  }
  unint64_t v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "mcc not provided", buf, 2u);
  }
}

void sub_100C07A04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, std::__shared_weak_count *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,char *a27)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  sub_10005CD2C((uint64_t)&a26, a27);
  if (*(char *)(v29 - 65) < 0) {
    operator delete(*(void **)(v29 - 88));
  }
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v27);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100C07A8C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 == a2) {
    return 0;
  }
  uint64_t v5 = a1;
  while (1)
  {
    if (*(unsigned char *)(v5 + 80))
    {
      uint64_t v6 = *(void *)(v5 + 56);
      uint64_t v7 = *(void *)(v5 + 64);
      if (v6 != v7) {
        break;
      }
    }
LABEL_23:
    v5 += 88;
    if (v5 == a2) {
      return 0;
    }
  }
  int v8 = *(char *)(a3 + 23);
  if (v8 >= 0) {
    uint64_t v9 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v9 = *(void *)(a3 + 8);
  }
  while (1)
  {
    uint64_t v10 = *(unsigned __int8 *)(v6 + 39);
    if ((v10 & 0x80u) == 0) {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 39);
    }
    else {
      uint64_t v11 = *(void *)(v6 + 24);
    }
    if (v11 != v9) {
      goto LABEL_22;
    }
    uint64_t v12 = v8 >= 0 ? (unsigned __int8 *)a3 : *(unsigned __int8 **)a3;
    if ((v10 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v6 + 39)) {
      return *(unsigned char *)(v6 + 88) != 0;
    }
    uint64_t v13 = 0;
    while (*(unsigned __int8 *)(v6 + v13 + 16) == v12[v13])
    {
      if (v10 == ++v13) {
        return *(unsigned char *)(v6 + 88) != 0;
      }
    }
LABEL_22:
    v6 += 216;
    if (v6 == v7) {
      goto LABEL_23;
    }
  }
  if (memcmp(*(const void **)(v6 + 16), v12, *(void *)(v6 + 24))) {
    goto LABEL_22;
  }
  return *(unsigned char *)(v6 + 88) != 0;
}

uint64_t sub_100C07B98(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 360);
  if (v2) {
    BOOL v3 = v2 == 3;
  }
  else {
    BOOL v3 = 1;
  }
  if (v3)
  {
    if (sub_100C07E30((uint64_t *)a1))
    {
      uint64_t v7 = *(NSObject **)(a1 + 48);
      BOOL v4 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v4)
      {
        LOWORD(v30) = 0;
        uint64_t v6 = "#I Device currently has no SIMs, returning false";
LABEL_11:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, (uint8_t *)&v30, 2u);
        return 0;
      }
    }
    else
    {
      uint64_t v10 = *(int **)(a1 + 288);
      uint64_t v11 = *(int **)(a1 + 296);
      if (v10 == v11)
      {
        int v12 = 0;
LABEL_40:
        unsigned int v26 = 1;
      }
      else
      {
        int v12 = 0;
        uint64_t v13 = (uint64_t *)(a1 + 320);
        char v14 = (uint64_t *)(a1 + 344);
        while (1)
        {
          if (subscriber::isSimReady())
          {
            ++v12;
            uint64_t v15 = *v13;
            if (*v13)
            {
              int v16 = *v10;
              uint64_t v17 = a1 + 320;
              do
              {
                int v18 = *(_DWORD *)(v15 + 28);
                BOOL v19 = v18 < v16;
                if (v18 >= v16) {
                  uint64_t v20 = (uint64_t *)v15;
                }
                else {
                  uint64_t v20 = (uint64_t *)(v15 + 8);
                }
                if (!v19) {
                  uint64_t v17 = v15;
                }
                uint64_t v15 = *v20;
              }
              while (*v20);
              if ((uint64_t *)v17 != v13 && v16 >= *(_DWORD *)(v17 + 28) && *(unsigned char *)(v17 + 32))
              {
                int v27 = *(NSObject **)(a1 + 48);
                if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_49;
                }
                goto LABEL_48;
              }
            }
            uint64_t v21 = *v14;
            if (*v14)
            {
              int v22 = *v10;
              uint64_t v17 = a1 + 344;
              do
              {
                int v23 = *(_DWORD *)(v21 + 28);
                BOOL v24 = v23 < v22;
                if (v23 >= v22) {
                  char v25 = (uint64_t *)v21;
                }
                else {
                  char v25 = (uint64_t *)(v21 + 8);
                }
                if (!v24) {
                  uint64_t v17 = v21;
                }
                uint64_t v21 = *v25;
              }
              while (*v25);
              if ((uint64_t *)v17 != v14 && v22 >= *(_DWORD *)(v17 + 28) && *(unsigned char *)(v17 + 32)) {
                break;
              }
            }
          }
          v10 += 42;
          if (v10 == v11) {
            goto LABEL_40;
          }
        }
        int v27 = *(NSObject **)(a1 + 48);
        if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_49;
        }
LABEL_48:
        uint64_t v28 = subscriber::asString();
        int v29 = *(unsigned __int8 *)(v17 + 32);
        int v30 = 136315394;
        uint64_t v31 = v28;
        __int16 v32 = 1024;
        int v33 = v29;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I slot %s roamingSetting = %d", (uint8_t *)&v30, 0x12u);
LABEL_49:
        unsigned int v26 = 0;
      }
      if (v12) {
        return v26;
      }
      else {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v7 = *(NSObject **)(a1 + 48);
    BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
    BOOL v9 = v8;
    uint64_t result = 0;
    if (v9)
    {
      LOWORD(v30) = 0;
      uint64_t v6 = "#I Bootstrap is enabled, returning false";
      goto LABEL_11;
    }
  }
  return result;
}

uint64_t sub_100C07E30(uint64_t *a1)
{
  for (uint64_t i = a1[33]; ; i += 88)
  {
    if (i == a1[34])
    {
      uint64_t v5 = a1[36];
      uint64_t v6 = a1[37];
      while (1)
      {
        if (v5 == v6) {
          return 1;
        }
        uint64_t v7 = (void **)(v5 + 72);
        if (*(char *)(v5 + 95) < 0)
        {
          unint64_t v9 = *(void *)(v5 + 80);
          if (!v9) {
            goto LABEL_21;
          }
          sub_10004FC84(__p, *v7, v9);
        }
        else
        {
          if (!*(unsigned char *)(v5 + 95)) {
            goto LABEL_21;
          }
          long long v8 = *(_OWORD *)v7;
          uint64_t v14 = *(void *)(v5 + 88);
          *(_OWORD *)__p = v8;
        }
        BOOL v10 = sub_100C07A8C(a1[33], a1[34], (uint64_t)__p);
        BOOL v11 = v10;
        if (SHIBYTE(v14) < 0)
        {
          operator delete(__p[0]);
          if (!v11) {
            return 0;
          }
        }
        else if (!v10)
        {
          return 0;
        }
LABEL_21:
        v5 += 168;
      }
    }
    if (*(unsigned char *)(i + 80))
    {
      uint64_t v3 = *(void *)(i + 56);
      uint64_t v4 = *(void *)(i + 64);
      if (v3 != v4)
      {
        while (*(unsigned char *)(v3 + 88))
        {
          v3 += 216;
          if (v3 == v4) {
            goto LABEL_9;
          }
        }
      }
      if (v3 != v4) {
        break;
      }
    }
LABEL_9:
    ;
  }
  return 0;
}

void sub_100C07F2C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    long long v8 = *(unsigned char **)a3;
    uint64_t v6 = *(uint64_t **)(a3 + 8);
    uint64_t v7 = (char *)v6 + *(void *)a3;
  }
  else
  {
    uint64_t v6 = (uint64_t *)*(unsigned __int8 *)(a3 + 23);
    uint64_t v7 = (char *)v6 + a3;
    long long v8 = (unsigned char *)a3;
  }
  while (v8 != v7)
  {
    unsigned char *v8 = __tolower((char)*v8);
    ++v8;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a2 + 56));
  BOOL v10 = ServiceMap;
  if (v11 < 0)
  {
    int v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v16 = v15[3];
    uint64_t v17 = (std::__shared_weak_count *)v15[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v33 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v17 = 0;
  char v33 = 1;
LABEL_14:
  __int16 v32 = v17;
  if (v16)
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a1 + 8;
    uint64_t v18 = *(void *)(a2 + 264);
    for (uint64_t i = *(void *)(a2 + 272); v18 != i; v18 += 88)
    {
      if (*(unsigned char *)(v18 + 80))
      {
        uint64_t v21 = *(void *)(v18 + 56);
        uint64_t v20 = *(void *)(v18 + 64);
        while (v21 != v20)
        {
          if (!*(unsigned char *)(v21 + 88))
          {
            VinylProfileDetails::createCarrierBundleCriteria((uint64_t *)&v42, (VinylProfileDetails *)v21);
            memset(buf, 0, sizeof(buf));
            v37[0] = 0;
            long long v43 = v42;
            if (v42) {
              CFRetain(v42);
            }
            sub_100C0C044((uint64_t *)buf, a2, (void **)(v21 + 16), (const void **)&v43);
            sub_100057D78((const void **)&v43);
            int v22 = sub_100046F68((uint64_t)buf, (void **)a3);
            sub_10005CD2C((uint64_t)buf, *(char **)&buf[8]);
            sub_100057D78((const void **)&v42);
            if (&buf[8] != (uint8_t *)v22 || a4 && ctu::starts_with())
            {
              *(void *)long long buf = v21 + 16;
              *((unsigned char *)sub_1000ED870((uint64_t **)a1, (void **)(v21 + 16), (uint64_t)&unk_10144E20E, (long long **)buf)
              + 56) = 0;
            }
          }
          v21 += 216;
        }
      }
    }
    uint64_t v23 = *(void *)(a2 + 288);
    for (uint64_t j = *(void *)(a2 + 296); v23 != j; v23 += 168)
    {
      if (*(char *)(v23 + 95) < 0)
      {
        sub_10004FC84(__p, *(void **)(v23 + 72), *(void *)(v23 + 80));
      }
      else
      {
        long long v25 = *(_OWORD *)(v23 + 72);
        uint64_t v41 = *(void *)(v23 + 88);
        *(_OWORD *)__p = v25;
      }
      BOOL v26 = sub_100C07A8C(*(void *)(a2 + 264), *(void *)(a2 + 272), (uint64_t)__p);
      BOOL v27 = v26;
      if (SHIBYTE(v41) < 0)
      {
        operator delete(__p[0]);
        if (v27) {
          continue;
        }
      }
      else if (v26)
      {
        continue;
      }
      BasicSimInfo::createBundleCriteria((uint64_t *)&cf, (BasicSimInfo *)v23);
      memset(buf, 0, sizeof(buf));
      v37[0] = 0;
      long long v43 = (long long *)cf;
      if (cf) {
        CFRetain(cf);
      }
      sub_100C0C044((uint64_t *)buf, a2, (void **)(v23 + 72), (const void **)&v43);
      sub_100057D78((const void **)&v43);
      uint64_t v28 = sub_100046F68((uint64_t)buf, (void **)a3);
      sub_10005CD2C((uint64_t)buf, *(char **)&buf[8]);
      sub_100057D78(&cf);
      if (&buf[8] == (uint8_t *)v28)
      {
        if (*(char *)(v23 + 119) < 0)
        {
          if (*(void *)(v23 + 104))
          {
LABEL_46:
            *(_OWORD *)int v37 = 0u;
            long long v38 = 0u;
            *(_OWORD *)long long buf = 0u;
            sub_100E63EA4((uint64_t)buf);
            if (a4 && ctu::starts_with())
            {
              char isSimReady = subscriber::isSimReady();
              long long v43 = (long long *)(v23 + 72);
              *((unsigned char *)sub_1000ED870((uint64_t **)a1, (void **)(v23 + 72), (uint64_t)&unk_10144E20E, &v43) + 56) = isSimReady;
            }
            if (SHIBYTE(v38) < 0) {
              operator delete(v37[1]);
            }
            if (SHIBYTE(v37[0]) < 0) {
              operator delete(*(void **)buf);
            }
          }
        }
        else if (*(unsigned char *)(v23 + 119))
        {
          goto LABEL_46;
        }
      }
      else
      {
        char v29 = subscriber::isSimReady();
        *(void *)long long buf = v23 + 72;
        *((unsigned char *)sub_1000ED870((uint64_t **)a1, (void **)(v23 + 72), (uint64_t)&unk_10144E20E, (long long **)buf) + 56) = v29;
      }
    }
  }
  else
  {
    uint64_t v31 = *(NSObject **)(a2 + 48);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "Unable to get isoCache", buf, 2u);
    }
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a1 + 8;
  }
  if ((v33 & 1) == 0) {
    sub_10004D2C8(v32);
  }
}

void sub_100C083EC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, char a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_1001085D8((uint64_t)va);
  sub_10005CD2C(a5, *(char **)(a5 + 8));
  if ((a4 & 1) == 0) {
    sub_10004D2C8(a3);
  }
  _Unwind_Resume(a1);
}

void sub_100C08488(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 364))
  {
    uint64_t v11 = 0;
    int v12 = 0;
    (*(void (**)(void (****__return_ptr)(void, uint64_t *, void *)))(**(void **)(a1 + 72)
                                                                                            + 8))(&v11);
    unint64_t v9 = 0;
    BOOL v10 = 0;
    long long v8 = "TravelHandler";
    sub_1002BFAE4(&v8, (dispatch_object_t *)(a1 + 32), &v9);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v6, *(Registry **)(a1 + 56));
    ctu::RestModule::connect();
    if (v7) {
      sub_10004D2C8(v7);
    }
    int v2 = v11;
    uint64_t v3 = (std::__shared_weak_count *)v9[1];
    uint64_t v4 = *v9;
    uint64_t v5 = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v13[0] = off_101A48220;
    v13[1] = a1;
    v13[3] = v13;
    (**v2)(v2, &v4, v13);
    sub_10001E914(v13);
    if (v5) {
      sub_10004D2C8(v5);
    }
    if (v10) {
      sub_10004D2C8(v10);
    }
    if (v12) {
      sub_10004D2C8(v12);
    }
  }
}

void sub_100C085FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, std::__shared_weak_count *a18)
{
  sub_10001E914((void *)(v18 - 56));
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }
  _Unwind_Resume(a1);
}

void sub_100C0865C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 288);
  uint64_t v1 = *(void *)(a1 + 296);
  if (v2 != v1)
  {
    v46 = (uint64_t **)(a1 + 200);
    uint64_t v3 = (void **)(a1 + 208);
    do
    {
      if (subscriber::isSimReady())
      {
        if (*(char *)(v2 + 95) < 0)
        {
          if (!*(void *)(v2 + 80)) {
            goto LABEL_141;
          }
        }
        else if (!*(unsigned char *)(v2 + 95))
        {
          goto LABEL_141;
        }
        if (*(char *)(v2 + 119) < 0)
        {
          if (*(void *)(v2 + 104))
          {
LABEL_12:
            long long v53 = 0u;
            memset(&v54, 0, sizeof(v54));
            *(_OWORD *)string = 0u;
            *(_OWORD *)unint64_t v52 = 0u;
            long long v50 = 0u;
            memset(v49, 0, sizeof(v49));
            std::string::operator=((std::string *)v49, (const std::string *)(v2 + 96));
            long long v48 = 0u;
            memset(__str, 0, sizeof(__str));
            sub_100E63EA4((uint64_t)__str);
            std::string::operator=((std::string *)&v49[24], (const std::string *)__str);
            std::string::operator=((std::string *)string, (const std::string *)&__str[24]);
            std::string::operator=((std::string *)&v52[1], (const std::string *)(v2 + 120));
            std::string::operator=(&v54, (const std::string *)(v2 + 144));
            uint64_t v4 = *v3;
            if (*v3)
            {
              uint64_t v5 = v3;
              do
              {
                char v6 = sub_100046FE8(v4 + 4, (void **)(v2 + 72));
                if (v6 >= 0) {
                  uint64_t v7 = v4;
                }
                else {
                  uint64_t v7 = v4 + 1;
                }
                if (v6 >= 0) {
                  uint64_t v5 = (void **)v4;
                }
                uint64_t v4 = (void *)*v7;
              }
              while (*v7);
              if (v5 != v3 && (sub_100046FE8((void *)(v2 + 72), v5 + 4) & 0x80) == 0)
              {
                *(void *)long long buf = v2 + 72;
                long long v8 = sub_100C0F030(v46, (void **)(v2 + 72), (long long **)buf);
                uint64_t v9 = *(unsigned __int8 *)(v2 + 119);
                if ((v9 & 0x80u) == 0) {
                  uint64_t v10 = *(unsigned __int8 *)(v2 + 119);
                }
                else {
                  uint64_t v10 = *(void *)(v2 + 104);
                }
                uint64_t v11 = v8[79];
                int v12 = (char)v11;
                if ((v11 & 0x80u) != 0) {
                  uint64_t v11 = *((void *)v8 + 8);
                }
                if (v10 != v11) {
                  goto LABEL_38;
                }
                uint64_t v15 = (char *)*((void *)v8 + 7);
                uint64_t v13 = v8 + 56;
                unsigned int v14 = v15;
                if (v12 >= 0) {
                  uint64_t v16 = v13;
                }
                else {
                  uint64_t v16 = v14;
                }
                if ((v9 & 0x80) != 0)
                {
                  if (memcmp(*(const void **)(v2 + 96), v16, *(void *)(v2 + 104))) {
                    goto LABEL_38;
                  }
                }
                else if (*(unsigned char *)(v2 + 119))
                {
                  uint64_t v17 = 0;
                  while (*(unsigned __int8 *)(v2 + v17 + 96) == v16[v17])
                  {
                    if (v9 == ++v17) {
                      goto LABEL_127;
                    }
                  }
LABEL_38:
                  *(void *)long long buf = v2 + 72;
                  uint64_t v18 = sub_100C0F030(v46, (void **)(v2 + 72), (long long **)buf);
                  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)a1, *(Registry **)(a1 + 56));
                  uint64_t v20 = ServiceMap;
                  if (v21 < 0)
                  {
                    int v22 = (unsigned __int8 *)(v21 & 0x7FFFFFFFFFFFFFFFLL);
                    uint64_t v23 = 5381;
                    do
                    {
                      uint64_t v21 = v23;
                      unsigned int v24 = *v22++;
                      uint64_t v23 = (33 * v23) ^ v24;
                    }
                    while (v24);
                  }
                  std::mutex::lock(ServiceMap);
                  *(void *)long long buf = v21;
                  long long v25 = sub_10004D37C(&v20[1].__m_.__sig, (unint64_t *)buf);
                  unint64_t v44 = v18;
                  if (v25)
                  {
                    BOOL v26 = (std::__shared_weak_count *)v25[4];
                    uint64_t v43 = v25[3];
                    if (v26)
                    {
                      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                      std::mutex::unlock(v20);
                      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
                      BOOL v27 = v26;
                      sub_10004D2C8(v26);
                      char v28 = 0;
                      goto LABEL_46;
                    }
                  }
                  else
                  {
                    uint64_t v43 = 0;
                  }
                  std::mutex::unlock(v20);
                  BOOL v27 = 0;
                  char v28 = 1;
LABEL_46:
                  if (v43)
                  {
                    v73[0] = 0;
                    xpc_object_t v29 = xpc_dictionary_create(0, 0, 0);
                    xpc_object_t v30 = v29;
                    if (v29)
                    {
                      v73[0] = v29;
                      goto LABEL_52;
                    }
                    xpc_object_t v30 = xpc_null_create();
                    v73[0] = v30;
                    if (v30)
                    {
LABEL_52:
                      if (xpc_get_type(v30) != (xpc_type_t)&_xpc_type_dictionary)
                      {
                        xpc_object_t v33 = xpc_null_create();
                        goto LABEL_56;
                      }
                      xpc_retain(v30);
                    }
                    else
                    {
                      xpc_object_t v33 = xpc_null_create();
                      xpc_object_t v30 = 0;
LABEL_56:
                      v73[0] = v33;
                    }
                    xpc_release(v30);
                    unint64_t v34 = v44 + 80;
                    if (v44[103] < 0)
                    {
                      if (!*((void *)v44 + 11)) {
                        goto LABEL_65;
                      }
                      unint64_t v34 = *(const char **)v34;
                    }
                    else if (!v44[103])
                    {
                      goto LABEL_65;
                    }
                    xpc_object_t v71 = xpc_string_create(v34);
                    if (!v71) {
                      xpc_object_t v71 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "previousMCC";
                    sub_100035E70((uint64_t)buf, &v71, &v72);
                    xpc_release(v72);
                    xpc_object_t v72 = 0;
                    xpc_release(v71);
                    xpc_object_t v71 = 0;
LABEL_65:
                    uint64_t v35 = v44 + 104;
                    if (v44[127] < 0)
                    {
                      if (!*((void *)v44 + 14)) {
                        goto LABEL_73;
                      }
                      uint64_t v35 = *(const char **)v35;
                    }
                    else if (!v44[127])
                    {
                      goto LABEL_73;
                    }
                    xpc_object_t v67 = xpc_string_create(v35);
                    if (!v67) {
                      xpc_object_t v67 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "previousMNC";
                    sub_100035E70((uint64_t)buf, &v67, &v68);
                    xpc_release(v68);
                    xpc_object_t v68 = 0;
                    xpc_release(v67);
                    xpc_object_t v67 = 0;
LABEL_73:
                    uint64_t v36 = v44 + 128;
                    if (v44[151] < 0)
                    {
                      if (!*((void *)v44 + 17)) {
                        goto LABEL_81;
                      }
                      uint64_t v36 = *(const char **)v36;
                    }
                    else if (!v44[151])
                    {
                      goto LABEL_81;
                    }
                    xpc_object_t v65 = xpc_string_create(v36);
                    if (!v65) {
                      xpc_object_t v65 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "previousGID1";
                    sub_100035E70((uint64_t)buf, &v65, &v66);
                    xpc_release(v66);
                    xpc_object_t v66 = 0;
                    xpc_release(v65);
                    xpc_object_t v65 = 0;
LABEL_81:
                    int v37 = v44 + 152;
                    if (v44[175] < 0)
                    {
                      if (!*((void *)v44 + 20)) {
                        goto LABEL_89;
                      }
                      int v37 = *(const char **)v37;
                    }
                    else if (!v44[175])
                    {
                      goto LABEL_89;
                    }
                    xpc_object_t v63 = xpc_string_create(v37);
                    if (!v63) {
                      xpc_object_t v63 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "previousGID2";
                    sub_100035E70((uint64_t)buf, &v63, &v64);
                    xpc_release(v64);
                    xpc_object_t v64 = 0;
                    xpc_release(v63);
                    xpc_object_t v63 = 0;
LABEL_89:
                    if (SHIBYTE(v50) < 0)
                    {
                      if (!(void)v50) {
                        goto LABEL_97;
                      }
                      long long v38 = *(const char **)&v49[24];
                    }
                    else
                    {
                      long long v38 = &v49[24];
                      if (!HIBYTE(v50)) {
                        goto LABEL_97;
                      }
                    }
                    xpc_object_t v61 = xpc_string_create(v38);
                    if (!v61) {
                      xpc_object_t v61 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "currentMCC";
                    sub_100035E70((uint64_t)buf, &v61, &v62);
                    xpc_release(v62);
                    xpc_object_t v62 = 0;
                    xpc_release(v61);
                    xpc_object_t v61 = 0;
LABEL_97:
                    if (SHIBYTE(v52[0]) < 0)
                    {
                      if (!string[1]) {
                        goto LABEL_105;
                      }
                      unint64_t v39 = string[0];
                    }
                    else
                    {
                      unint64_t v39 = (const char *)string;
                      if (!HIBYTE(v52[0])) {
                        goto LABEL_105;
                      }
                    }
                    xpc_object_t v59 = xpc_string_create(v39);
                    if (!v59) {
                      xpc_object_t v59 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "currentMNC";
                    sub_100035E70((uint64_t)buf, &v59, &v60);
                    xpc_release(v60);
                    xpc_object_t v60 = 0;
                    xpc_release(v59);
                    xpc_object_t v59 = 0;
LABEL_105:
                    if (SHIBYTE(v53) < 0)
                    {
                      if (!(void)v53) {
                        goto LABEL_113;
                      }
                      uint64_t v40 = v52[1];
                    }
                    else
                    {
                      uint64_t v40 = (const char *)&v52[1];
                      if (!HIBYTE(v53)) {
                        goto LABEL_113;
                      }
                    }
                    xpc_object_t v57 = xpc_string_create(v40);
                    if (!v57) {
                      xpc_object_t v57 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "currentGID1";
                    sub_100035E70((uint64_t)buf, &v57, &v58);
                    xpc_release(v58);
                    xpc_object_t v58 = 0;
                    xpc_release(v57);
                    xpc_object_t v57 = 0;
LABEL_113:
                    if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0)
                    {
                      if (!v54.__r_.__value_.__l.__size_) {
                        goto LABEL_121;
                      }
                      uint64_t v41 = (std::string *)v54.__r_.__value_.__r.__words[0];
                    }
                    else
                    {
                      uint64_t v41 = &v54;
                      if (!*((unsigned char *)&v54.__r_.__value_.__s + 23)) {
                        goto LABEL_121;
                      }
                    }
                    xpc_object_t v55 = xpc_string_create((const char *)v41);
                    if (!v55) {
                      xpc_object_t v55 = xpc_null_create();
                    }
                    *(void *)long long buf = v73;
                    size_t v70 = "currentGID2";
                    sub_100035E70((uint64_t)buf, &v55, &object);
                    xpc_release(object);
                    xpc_object_t object = 0;
                    xpc_release(v55);
                    xpc_object_t v55 = 0;
LABEL_121:
                    *(xpc_object_t *)long long buf = v73[0];
                    if (v73[0]) {
                      xpc_retain(v73[0]);
                    }
                    else {
                      *(void *)long long buf = xpc_null_create();
                    }
                    (*(void (**)(uint64_t, const char *, uint8_t *))(*(void *)v43 + 16))(v43, "commCenterIMSISwitchEvent", buf);
                    char v31 = v28;
                    xpc_release(*(xpc_object_t *)buf);
                    *(void *)long long buf = 0;
                    xpc_release(v73[0]);
                  }
                  else
                  {
                    char v31 = v28;
                    __int16 v32 = *(NSObject **)(a1 + 48);
                    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Couldn't get analytics handler", buf, 2u);
                    }
                  }
                  if ((v31 & 1) == 0) {
                    sub_10004D2C8(v27);
                  }
                }
              }
            }
LABEL_127:
            *(void *)long long buf = v2 + 72;
            unint64_t v42 = sub_100C0F030(v46, (void **)(v2 + 72), (long long **)buf);
            std::string::operator=((std::string *)(v42 + 56), (const std::string *)v49);
            std::string::operator=((std::string *)(v42 + 80), (const std::string *)&v49[24]);
            std::string::operator=((std::string *)(v42 + 104), (const std::string *)string);
            std::string::operator=((std::string *)(v42 + 128), (const std::string *)&v52[1]);
            std::string::operator=((std::string *)(v42 + 152), &v54);
            if (SHIBYTE(v48) < 0) {
              operator delete(*(void **)&__str[24]);
            }
            if ((__str[23] & 0x80000000) != 0) {
              operator delete(*(void **)__str);
            }
            if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v54.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v53) < 0) {
              operator delete(v52[1]);
            }
            if (SHIBYTE(v52[0]) < 0) {
              operator delete(string[0]);
            }
            if (SHIBYTE(v50) < 0) {
              operator delete(*(void **)&v49[24]);
            }
            if ((v49[23] & 0x80000000) != 0) {
              operator delete(*(void **)v49);
            }
          }
        }
        else if (*(unsigned char *)(v2 + 119))
        {
          goto LABEL_12;
        }
      }
LABEL_141:
      v2 += 168;
    }
    while (v2 != v1);
  }
}

void sub_100C08F58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va1, a7);
  va_start(va, a7);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  xpc_release(*(xpc_object_t *)(v9 - 128));
  *(void *)(v9 - 128) = 0;
  xpc_release(*(xpc_object_t *)(v9 - 96));
  if ((v8 & 1) == 0) {
    sub_10004D2C8(v7);
  }
  sub_1001085D8((uint64_t)va);
  sub_10039A890((uint64_t)va1);
  _Unwind_Resume(a1);
}

void sub_100C08FC4(uint64_t a1, void **a2)
{
  if (!capabilities::ct::dataOnlySingleSIMDevice((capabilities::ct *)a1)
    || !_os_feature_enabled_impl())
  {
    return;
  }
  if (!a2[2])
  {
    unsigned int v24 = *(NSObject **)(a1 + 48);
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v25 = "#I No previous country found";
    BOOL v26 = v24;
    goto LABEL_43;
  }
  uint64_t v4 = *(void *)(a1 + 256);
  uint64_t v5 = *(NSObject **)(a1 + 48);
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (!v4)
  {
    if (!v6) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v25 = "#I No current country found";
    BOOL v26 = v5;
LABEL_43:
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, 2u);
    return;
  }
  if (v6)
  {
    uint64_t v7 = (char *)*a2 + 32;
    if (*((char *)*a2 + 55) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I prev country: %{public}s", buf, 0xCu);
    uint64_t v5 = *(NSObject **)(a1 + 48);
  }
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = *(void *)(a1 + 240);
    uint64_t v9 = (void *)(v8 + 32);
    if (*(char *)(v8 + 55) < 0) {
      uint64_t v9 = (void *)*v9;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I current country: %{public}s", buf, 0xCu);
  }
  uint64_t v10 = &v59;
  xpc_object_t v59 = 0;
  uint64_t v60 = 0;
  xpc_object_t v58 = &v59;
  uint64_t v11 = a2 + 1;
  int v12 = (void **)*a2;
  uint64_t v13 = *(void ***)(a1 + 240);
  __dst[0] = &v58;
  __dst[1] = &v59;
  if (v12 != a2 + 1)
  {
    if (v13 == (void **)(a1 + 248))
    {
      uint64_t v23 = &v58;
LABEL_45:
      *(void *)long long buf = v23;
      *(void *)&uint8_t buf[8] = v10;
      do
      {
        sub_100C0CFDC((uint64_t)buf, v12 + 4);
        BOOL v27 = (void **)v12[1];
        if (v27)
        {
          do
          {
            char v28 = v27;
            BOOL v27 = (void **)*v27;
          }
          while (v27);
        }
        else
        {
          do
          {
            char v28 = (void **)v12[2];
            BOOL v16 = *v28 == v12;
            int v12 = v28;
          }
          while (!v16);
        }
        int v12 = v28;
      }
      while (v28 != v11);
    }
    else
    {
      while (1)
      {
        if ((sub_100046FE8(v12 + 4, v13 + 4) & 0x80) != 0)
        {
          sub_100C0CFDC((uint64_t)__dst, v12 + 4);
          BOOL v19 = (void **)v12[1];
          if (v19)
          {
            do
            {
              int v12 = v19;
              BOOL v19 = (void **)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              uint64_t v20 = v12;
              int v12 = (void **)v12[2];
            }
            while (*v12 != v20);
          }
        }
        else if ((sub_100046FE8(v13 + 4, v12 + 4) & 0x80) != 0)
        {
          uint64_t v21 = (void **)v13[1];
          if (v21)
          {
            do
            {
              uint64_t v13 = v21;
              uint64_t v21 = (void **)*v21;
            }
            while (v21);
          }
          else
          {
            do
            {
              int v22 = v13;
              uint64_t v13 = (void **)v13[2];
            }
            while (*v13 != v22);
          }
        }
        else
        {
          uint64_t v14 = (void **)v12[1];
          if (v14)
          {
            do
            {
              uint64_t v15 = v14;
              uint64_t v14 = (void **)*v14;
            }
            while (v14);
          }
          else
          {
            do
            {
              uint64_t v15 = (void **)v12[2];
              BOOL v16 = *v15 == v12;
              int v12 = v15;
            }
            while (!v16);
          }
          uint64_t v17 = (void **)v13[1];
          if (v17)
          {
            do
            {
              uint64_t v13 = v17;
              uint64_t v17 = (void **)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              uint64_t v18 = v13;
              uint64_t v13 = (void **)v13[2];
            }
            while (*v13 != v18);
          }
          int v12 = v15;
        }
        if (v12 == v11) {
          break;
        }
        if (v13 == (void **)(a1 + 248))
        {
          uint64_t v23 = (char ***)__dst[0];
          uint64_t v10 = (char **)__dst[1];
          goto LABEL_45;
        }
      }
    }
  }
  if (!v60) {
    goto LABEL_116;
  }
  if (!*(unsigned char *)(a1 + 192))
  {
    uint64_t v41 = *a2;
    uint64_t v42 = *(void *)(a1 + 240);
    sub_100058DB0(buf, "");
    sub_100058DB0(__dst, "");
    sub_100058DB0(__p, "location disabled");
    sub_100C09738(a1, a1 + 88, (uint64_t)v41 + 32, v42 + 32, 0, (uint64_t *)buf, (uint64_t)__dst, (uint64_t)__p, v43);
    if (v55 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v57) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v62) < 0) {
      operator delete(*(void **)buf);
    }
    unint64_t v44 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I location not enabled", buf, 2u);
    }
    goto LABEL_116;
  }
  if ((sub_100C07E30((uint64_t *)a1) & 1) != 0 || (xpc_object_t v29 = *(int **)(a1 + 288), v30 = *(int **)(a1 + 296), v29 == v30))
  {
LABEL_77:
    memset(buf, 0, sizeof(buf));
    uint64_t v62 = 0;
    uint64_t v40 = *a2;
    if (*((char *)*a2 + 55) < 0)
    {
      sub_10004FC84(buf, *((void **)v40 + 4), *((void *)v40 + 5));
    }
    else
    {
      *(_OWORD *)long long buf = *((_OWORD *)v40 + 2);
      uint64_t v62 = *((void *)v40 + 6);
    }
    if (v62 >= 0) {
      uint64_t v45 = &buf[HIBYTE(v62)];
    }
    else {
      uint64_t v45 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
    }
    if (v62 >= 0) {
      v46 = buf;
    }
    else {
      v46 = *(uint8_t **)buf;
    }
    while (v46 != v45)
    {
      uint8_t *v46 = __tolower((char)*v46);
      ++v46;
    }
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v57 = 0;
    uint64_t v47 = *(void *)(a1 + 240);
    if (*(char *)(v47 + 55) < 0)
    {
      sub_10004FC84(__dst, *(void **)(v47 + 32), *(void *)(v47 + 40));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)(v47 + 32);
      uint64_t v57 = *(void *)(v47 + 48);
    }
    if (v57 >= 0) {
      long long v48 = (void **)((char *)__dst + HIBYTE(v57));
    }
    else {
      long long v48 = (void **)((char *)__dst[0] + (unint64_t)__dst[1]);
    }
    if (v57 >= 0) {
      unint64_t v49 = __dst;
    }
    else {
      unint64_t v49 = (void **)__dst[0];
    }
    while (v49 != v48)
    {
      *(unsigned char *)unint64_t v49 = __tolower(*(char *)v49);
      unint64_t v49 = (void **)((char *)v49 + 1);
    }
    if (sub_10001D294((unsigned __int8 *)(a1 + 88), (unsigned __int8 *)__dst))
    {
      long long v50 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I user returning home", (uint8_t *)__p, 2u);
      }
      sub_100C09FB8(a1, (uint64_t)buf, (uint64_t)__dst);
    }
    else
    {
      sub_100C0A85C(a1, (uint64_t)buf, (uint64_t)__dst);
    }
    goto LABEL_112;
  }
  char v31 = (uint64_t *)(a1 + 320);
  while (1)
  {
    if (*((char *)v29 + 95) < 0)
    {
      sub_10004FC84(buf, *((void **)v29 + 9), *((void *)v29 + 10));
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)(v29 + 18);
      uint64_t v62 = *((void *)v29 + 11);
    }
    BOOL v32 = sub_100C07A8C(*(void *)(a1 + 264), *(void *)(a1 + 272), (uint64_t)buf);
    BOOL v33 = v32;
    if (SHIBYTE(v62) < 0) {
      break;
    }
    if (!v32) {
      goto LABEL_64;
    }
LABEL_76:
    v29 += 42;
    if (v29 == v30) {
      goto LABEL_77;
    }
  }
  operator delete(*(void **)buf);
  if (v33) {
    goto LABEL_76;
  }
LABEL_64:
  if (!subscriber::isSimReady()) {
    goto LABEL_76;
  }
  uint64_t v34 = *v31;
  if (!*v31) {
    goto LABEL_76;
  }
  int v35 = *v29;
  uint64_t v36 = a1 + 320;
  do
  {
    int v37 = *(_DWORD *)(v34 + 28);
    BOOL v38 = v37 < v35;
    if (v37 >= v35) {
      unint64_t v39 = (uint64_t *)v34;
    }
    else {
      unint64_t v39 = (uint64_t *)(v34 + 8);
    }
    if (!v38) {
      uint64_t v36 = v34;
    }
    uint64_t v34 = *v39;
  }
  while (*v39);
  if ((uint64_t *)v36 == v31 || v35 < *(_DWORD *)(v36 + 28) || !*(unsigned char *)(v36 + 32)) {
    goto LABEL_76;
  }
  int v51 = *a2;
  uint64_t v52 = *(void *)(a1 + 240);
  sub_100058DB0(buf, "");
  sub_100058DB0(__dst, "");
  sub_100058DB0(__p, "roaming enabled");
  sub_100C09738(a1, a1 + 88, (uint64_t)v51 + 32, v52 + 32, 0, (uint64_t *)buf, (uint64_t)__dst, (uint64_t)__p, v53);
  if (v55 < 0) {
    operator delete(__p[0]);
  }
LABEL_112:
  if (SHIBYTE(v57) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_116:
  sub_10005CD2C((uint64_t)&v58, v59);
}

void sub_100C096A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,char *a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_10005CD2C((uint64_t)&a22, a23);
  _Unwind_Resume(a1);
}

void sub_100C09738(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, BOOL a5@<W4>, uint64_t *a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t *a9@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a9, *(Registry **)(a1 + 56));
  BOOL v16 = ServiceMap;
  if (v17 < 0)
  {
    uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      uint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v17;
  uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)buf);
  BOOL value = a5;
  if (!v21)
  {
    uint64_t v22 = 0;
LABEL_9:
    std::mutex::unlock(v16);
    uint64_t v23 = 0;
    char v24 = 1;
    if (v22) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v22 = v21[3];
  uint64_t v23 = (std::__shared_weak_count *)v21[4];
  if (!v23) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v16);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v23);
  char v24 = 0;
  if (v22) {
    goto LABEL_12;
  }
LABEL_10:
  long long v25 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "Couldn't get analytics handler", buf, 2u);
  }
LABEL_12:
  v79[0] = 0;
  xpc_object_t v26 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v27 = v26;
  if (v26)
  {
    v79[0] = v26;
  }
  else
  {
    xpc_object_t v27 = xpc_null_create();
    v79[0] = v27;
    if (!v27)
    {
      xpc_object_t v28 = xpc_null_create();
      xpc_object_t v27 = 0;
      goto LABEL_19;
    }
  }
  if (xpc_get_type(v27) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v27);
    goto LABEL_20;
  }
  xpc_object_t v28 = xpc_null_create();
LABEL_19:
  v79[0] = v28;
LABEL_20:
  xpc_release(v27);
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v29 = *(void *)(a2 + 8);
    if (!v29) {
      goto LABEL_41;
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v78 = 0;
    sub_10004FC84(buf, *(void **)a2, v29);
  }
  else
  {
    if (!*(unsigned char *)(a2 + 23)) {
      goto LABEL_41;
    }
    *(_OWORD *)long long buf = *(_OWORD *)a2;
    uint64_t v78 = *(void *)(a2 + 16);
  }
  char v30 = HIBYTE(v78);
  char v31 = *(uint8_t **)buf;
  if (v78 >= 0) {
    BOOL v32 = &buf[HIBYTE(v78)];
  }
  else {
    BOOL v32 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if (v78 >= 0) {
    BOOL v33 = buf;
  }
  else {
    BOOL v33 = *(uint8_t **)buf;
  }
  if (v33 != v32)
  {
    do
    {
      uint8_t *v33 = __toupper((char)*v33);
      ++v33;
    }
    while (v33 != v32);
    char v30 = HIBYTE(v78);
    char v31 = *(uint8_t **)buf;
  }
  if (v30 >= 0) {
    uint64_t v34 = buf;
  }
  else {
    uint64_t v34 = v31;
  }
  xpc_object_t v75 = xpc_string_create((const char *)v34);
  if (!v75) {
    xpc_object_t v75 = xpc_null_create();
  }
  v73 = v79;
  v74 = "home_country";
  sub_100035E70((uint64_t)&v73, &v75, &v76);
  xpc_release(v76);
  xpc_object_t v76 = 0;
  xpc_release(v75);
  xpc_object_t v75 = 0;
  if (SHIBYTE(v78) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_41:
  if (*(char *)(a3 + 23) < 0)
  {
    unint64_t v35 = *(void *)(a3 + 8);
    if (!v35) {
      goto LABEL_62;
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v78 = 0;
    sub_10004FC84(buf, *(void **)a3, v35);
  }
  else
  {
    if (!*(unsigned char *)(a3 + 23)) {
      goto LABEL_62;
    }
    *(_OWORD *)long long buf = *(_OWORD *)a3;
    uint64_t v78 = *(void *)(a3 + 16);
  }
  char v36 = HIBYTE(v78);
  int v37 = *(uint8_t **)buf;
  if (v78 >= 0) {
    BOOL v38 = &buf[HIBYTE(v78)];
  }
  else {
    BOOL v38 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if (v78 >= 0) {
    unint64_t v39 = buf;
  }
  else {
    unint64_t v39 = *(uint8_t **)buf;
  }
  if (v39 != v38)
  {
    do
    {
      *unint64_t v39 = __toupper((char)*v39);
      ++v39;
    }
    while (v39 != v38);
    char v36 = HIBYTE(v78);
    int v37 = *(uint8_t **)buf;
  }
  if (v36 >= 0) {
    uint64_t v40 = buf;
  }
  else {
    uint64_t v40 = v37;
  }
  xpc_object_t v71 = xpc_string_create((const char *)v40);
  if (!v71) {
    xpc_object_t v71 = xpc_null_create();
  }
  v73 = v79;
  v74 = "previous_country";
  sub_100035E70((uint64_t)&v73, &v71, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v71);
  xpc_object_t v71 = 0;
  if (SHIBYTE(v78) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_62:
  if (*(char *)(a4 + 23) < 0)
  {
    unint64_t v41 = *(void *)(a4 + 8);
    if (!v41) {
      goto LABEL_83;
    }
    memset(buf, 0, sizeof(buf));
    uint64_t v78 = 0;
    sub_10004FC84(buf, *(void **)a4, v41);
  }
  else
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_83;
    }
    *(_OWORD *)long long buf = *(_OWORD *)a4;
    uint64_t v78 = *(void *)(a4 + 16);
  }
  char v42 = HIBYTE(v78);
  uint64_t v43 = *(uint8_t **)buf;
  if (v78 >= 0) {
    unint64_t v44 = &buf[HIBYTE(v78)];
  }
  else {
    unint64_t v44 = (uint8_t *)(*(void *)buf + *(void *)&buf[8]);
  }
  if (v78 >= 0) {
    uint64_t v45 = buf;
  }
  else {
    uint64_t v45 = *(uint8_t **)buf;
  }
  if (v45 != v44)
  {
    do
    {
      *uint64_t v45 = __toupper((char)*v45);
      ++v45;
    }
    while (v45 != v44);
    char v42 = HIBYTE(v78);
    uint64_t v43 = *(uint8_t **)buf;
  }
  if (v42 >= 0) {
    v46 = buf;
  }
  else {
    v46 = v43;
  }
  xpc_object_t v69 = xpc_string_create((const char *)v46);
  if (!v69) {
    xpc_object_t v69 = xpc_null_create();
  }
  v73 = v79;
  v74 = "current_country";
  sub_100035E70((uint64_t)&v73, &v69, &v70);
  xpc_release(v70);
  xpc_object_t v70 = 0;
  xpc_release(v69);
  xpc_object_t v69 = 0;
  if (SHIBYTE(v78) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_83:
  xpc_object_t v67 = xpc_BOOL_create(value);
  long long v48 = (const char *)a7;
  uint64_t v47 = (const char *)a8;
  if (!v67) {
    xpc_object_t v67 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "did_show";
  sub_100035E70((uint64_t)buf, &v67, &v68);
  xpc_release(v68);
  xpc_object_t v68 = 0;
  xpc_release(v67);
  xpc_object_t v67 = 0;
  if (*((char *)a6 + 23) < 0)
  {
    if (!a6[1]) {
      goto LABEL_93;
    }
    a6 = (uint64_t *)*a6;
  }
  else if (!*((unsigned char *)a6 + 23))
  {
    goto LABEL_93;
  }
  xpc_object_t v65 = xpc_string_create((const char *)a6);
  if (!v65) {
    xpc_object_t v65 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "profile_status";
  sub_100035E70((uint64_t)buf, &v65, &v66);
  xpc_release(v66);
  xpc_object_t v66 = 0;
  xpc_release(v65);
  xpc_object_t v65 = 0;
LABEL_93:
  if (*(char *)(a7 + 23) < 0)
  {
    if (!*(void *)(a7 + 8)) {
      goto LABEL_101;
    }
    long long v48 = *(const char **)a7;
  }
  else if (!*(unsigned char *)(a7 + 23))
  {
    goto LABEL_101;
  }
  xpc_object_t v63 = xpc_string_create(v48);
  if (!v63) {
    xpc_object_t v63 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "options_shown";
  sub_100035E70((uint64_t)buf, &v63, &v64);
  xpc_release(v64);
  xpc_object_t v64 = 0;
  xpc_release(v63);
  xpc_object_t v63 = 0;
LABEL_101:
  if (*(char *)(a8 + 23) < 0)
  {
    if (!*(void *)(a8 + 8)) {
      goto LABEL_109;
    }
    uint64_t v47 = *(const char **)a8;
  }
  else if (!*(unsigned char *)(a8 + 23))
  {
    goto LABEL_109;
  }
  xpc_object_t v61 = xpc_string_create(v47);
  if (!v61) {
    xpc_object_t v61 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "reason";
  sub_100035E70((uint64_t)buf, &v61, &v62);
  xpc_release(v62);
  xpc_object_t v62 = 0;
  xpc_release(v61);
  xpc_object_t v61 = 0;
LABEL_109:
  int v49 = *(_DWORD *)(a1 + 360);
  if (v49) {
    BOOL v50 = v49 == 3;
  }
  else {
    BOOL v50 = 1;
  }
  int v51 = !v50;
  if (*(unsigned char *)(a1 + 365) == 2)
  {
    if (v51) {
      int64_t v52 = 3;
    }
    else {
      int64_t v52 = 2;
    }
  }
  else if (*(unsigned char *)(a1 + 365))
  {
    int64_t v52 = 1;
  }
  else if (v51)
  {
    int64_t v52 = 3;
  }
  else
  {
    int64_t v52 = 0;
  }
  xpc_object_t v59 = xpc_int64_create(v52);
  if (!v59) {
    xpc_object_t v59 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "internet_transport";
  sub_100035E70((uint64_t)buf, &v59, &v60);
  xpc_release(v60);
  xpc_object_t v60 = 0;
  xpc_release(v59);
  xpc_object_t v59 = 0;
  xpc_object_t v57 = xpc_int64_create(*(unsigned int *)(a1 + 196));
  if (!v57) {
    xpc_object_t v57 = xpc_null_create();
  }
  *(void *)long long buf = v79;
  *(void *)&uint8_t buf[8] = "rate_limit";
  sub_100035E70((uint64_t)buf, &v57, &v58);
  xpc_release(v58);
  xpc_object_t v58 = 0;
  xpc_release(v57);
  xpc_object_t v56 = v79[0];
  xpc_object_t v57 = 0;
  if (v79[0]) {
    xpc_retain(v79[0]);
  }
  else {
    xpc_object_t v56 = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v22 + 16))(v22, "commCentereSIMTravelBuddy", &v56);
  xpc_release(v56);
  xpc_object_t v56 = 0;
  xpc_release(v79[0]);
  if ((v24 & 1) == 0) {
    sub_10004D2C8(v23);
  }
}

void sub_100C09EB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(*(xpc_object_t *)(v14 - 104));
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(a1);
}

void sub_100C09FB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (!*(unsigned char *)(a1 + 193)) {
    return;
  }
  sub_100C0BA6C();
  if (sub_100046F68((uint64_t)&qword_101B10278, (void **)a3) != &qword_101B10280)
  {
    BOOL v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I denylisted country", buf, 2u);
    }
    sub_100058DB0(buf, "");
    sub_100058DB0(__s1, "");
    sub_100058DB0(&__p, "deny listed country");
    sub_100C09738(a1, a1 + 88, a2, a3, 0, (uint64_t *)buf, (uint64_t)__s1, (uint64_t)&__p, v7);
    if (SHIBYTE(v51) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(*(void **)__s1);
    }
    if (SHIBYTE(v57) < 0) {
      goto LABEL_10;
    }
    return;
  }
  *(void *)long long buf = 0;
  uint64_t v56 = 0;
  uint64_t v57 = 0;
  sub_100C0B81C(buf, a1, a2, &qword_101B10280);
  int v8 = SHIBYTE(v57);
  if (v57 >= 0) {
    uint64_t v9 = HIBYTE(v57);
  }
  else {
    uint64_t v9 = v56;
  }
  if (v9)
  {
    *(void *)__s1 = 0;
    size_t __n = 0;
    uint64_t v54 = 0;
    sub_100C0B81C(__s1, a1, a3, (uint64_t *)HIBYTE(v57));
    char v10 = HIBYTE(v54);
    uint64_t v11 = (uint8_t *)SHIBYTE(v54);
    if ((int)v11 >= 0) {
      size_t v12 = HIBYTE(v54);
    }
    else {
      size_t v12 = __n;
    }
    if (v12)
    {
      if (v12 != v9) {
        goto LABEL_38;
      }
      uint64_t v11 = *(uint8_t **)buf;
      if (v8 >= 0) {
        char v13 = buf;
      }
      else {
        char v13 = *(uint8_t **)buf;
      }
      if (v54 < 0)
      {
        uint64_t v15 = *(const void **)__s1;
        int v18 = memcmp(*(const void **)__s1, v13, __n);
        if (v9 != 1 || v18) {
          goto LABEL_38;
        }
      }
      else
      {
        if (HIBYTE(v54))
        {
          uint64_t v11 = __s1;
          uint64_t v14 = HIBYTE(v54);
          while (*v11 == *v13)
          {
            ++v11;
            ++v13;
            if (!--v14) {
              goto LABEL_29;
            }
          }
LABEL_38:
          ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v11, *(Registry **)(a1 + 56));
          unsigned int v20 = ServiceMap;
          if (v21 < 0)
          {
            uint64_t v22 = (unsigned __int8 *)(v21 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v23 = 5381;
            do
            {
              uint64_t v21 = v23;
              unsigned int v24 = *v22++;
              uint64_t v23 = (33 * v23) ^ v24;
            }
            while (v24);
          }
          std::mutex::lock(ServiceMap);
          __p = (void *)v21;
          long long v25 = sub_10004D37C(&v20[1].__m_.__sig, (unint64_t *)&__p);
          if (v25)
          {
            uint64_t v27 = v25[3];
            xpc_object_t v26 = (std::__shared_weak_count *)v25[4];
            if (v26)
            {
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v20);
              atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v26);
              char v28 = 0;
              if (!v27) {
                goto LABEL_48;
              }
              goto LABEL_47;
            }
          }
          else
          {
            uint64_t v27 = 0;
          }
          std::mutex::unlock(v20);
          xpc_object_t v26 = 0;
          char v28 = 1;
          if (!v27)
          {
LABEL_48:
            if ((v28 & 1) == 0) {
              sub_10004D2C8(v26);
            }
            __p = 0;
            BOOL v50 = 0;
            uint64_t v51 = 0;
            if (*(char *)(a3 + 23) < 0)
            {
              sub_10004FC84(__dst, *(void **)a3, *(void *)(a3 + 8));
            }
            else
            {
              *(_OWORD *)__dst = *(_OWORD *)a3;
              uint64_t v44 = *(void *)(a3 + 16);
            }
            if (v12 == 1)
            {
              unint64_t v29 = __s1;
              if (v10 < 0) {
                unint64_t v29 = *(uint8_t **)__s1;
              }
              BOOL v30 = *v29 == 50;
            }
            else
            {
              BOOL v30 = 0;
            }
            sub_100C07F2C((uint64_t)&__p, a1, (uint64_t)__dst, v30);
            if (SHIBYTE(v44) < 0) {
              operator delete(__dst[0]);
            }
            if (v51)
            {
              char v31 = (char *)__p;
              if (__p == &v50)
              {
LABEL_69:
                sub_100058DB0(v47, (char *)[@"prefs:root=MOBILE_DATA_SETTINGS_ID&client=com.apple.CommCenter&path=CELLULAR" UTF8String]);
                sub_100C0BDA8(a1, @"TRAVEL_NOTIFICATION_RETURN_HOME_TITLE", @"TRAVEL_NOTIFICATION_RETURN_HOME_MESSAGE", (uint64_t *)v47, v35);
                if (v48 < 0) {
                  operator delete(v47[0]);
                }
                sub_100058DB0(v47, "");
                sub_100058DB0(v45, "");
                sub_100058DB0(v41, "");
                sub_100C09738(a1, a1 + 88, a2, a3, 1, (uint64_t *)v47, (uint64_t)v45, (uint64_t)v41, v36);
              }
              else
              {
                while (!v31[56])
                {
                  BOOL v32 = (char *)*((void *)v31 + 1);
                  if (v32)
                  {
                    do
                    {
                      BOOL v33 = (char **)v32;
                      BOOL v32 = *(char **)v32;
                    }
                    while (v32);
                  }
                  else
                  {
                    do
                    {
                      BOOL v33 = (char **)*((void *)v31 + 2);
                      BOOL v34 = *v33 == v31;
                      char v31 = (char *)v33;
                    }
                    while (!v34);
                  }
                  char v31 = (char *)v33;
                  if (v33 == &v50) {
                    goto LABEL_69;
                  }
                }
                sub_100058DB0(v47, "");
                sub_100058DB0(v45, "");
                sub_100058DB0(v41, "local plan enabled");
                sub_100C09738(a1, a1 + 88, a2, a3, 0, (uint64_t *)v47, (uint64_t)v45, (uint64_t)v41, v38);
              }
            }
            else
            {
              sub_100058DB0(v47, "");
              sub_100058DB0(v45, "");
              sub_100058DB0(v41, "Home Plan Enabled");
              sub_100C09738(a1, a1 + 88, a2, a3, 0, (uint64_t *)v47, (uint64_t)v45, (uint64_t)v41, v37);
            }
            if (v42 < 0) {
              operator delete(v41[0]);
            }
            if (v46 < 0) {
              operator delete(v45[0]);
            }
            if (v48 < 0) {
              operator delete(v47[0]);
            }
            sub_10005CD2C((uint64_t)&__p, v50);
            goto LABEL_81;
          }
LABEL_47:
          *(unsigned char *)(a1 + 193) = 0;
          (*(void (**)(uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v27 + 16))(v27, @"TravelNotificationShowReturnHome", kCFBooleanFalse, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          (*(void (**)(uint64_t, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v27 + 48))(v27, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          goto LABEL_48;
        }
LABEL_29:
        if (v9 != 1) {
          goto LABEL_38;
        }
        uint64_t v15 = __s1;
      }
      if (memcmp(v15, "2", 1uLL)) {
        goto LABEL_38;
      }
      unint64_t v39 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p) = 0;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I In EU, skip travel notification", (uint8_t *)&__p, 2u);
      }
      sub_100058DB0(&__p, "");
      sub_100058DB0(v47, "");
      sub_100058DB0(v45, "EU Travel");
      sub_100C09738(a1, a1 + 88, a2, a3, 0, (uint64_t *)&__p, (uint64_t)v47, (uint64_t)v45, v40);
      if (v46 < 0) {
        operator delete(v45[0]);
      }
      if (v48 < 0) {
        operator delete(v47[0]);
      }
      if (SHIBYTE(v51) < 0) {
        operator delete(__p);
      }
    }
    else
    {
      uint64_t v17 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to retrieve current continent code", (uint8_t *)&__p, 2u);
      }
    }
LABEL_81:
    if (v10 < 0) {
      operator delete(*(void **)__s1);
    }
    goto LABEL_83;
  }
  BOOL v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__s1 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to retrieve previous continent code", __s1, 2u);
  }
LABEL_83:
  if (v8 < 0) {
LABEL_10:
  }
    operator delete(*(void **)buf);
}

void sub_100C0A6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  if (v48 < 0) {
    operator delete(a43);
  }
  if (a10 < 0) {
    operator delete(*(void **)(v49 - 112));
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0A85C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100C0BA6C();
  if (sub_100046F68((uint64_t)&qword_101B10278, (void **)a3) != &qword_101B10280)
  {
    BOOL v6 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I denylisted country", buf, 2u);
    }
    sub_100058DB0(buf, "");
    sub_100058DB0(__s1, "");
    sub_100058DB0(&__p, "deny listed country");
    sub_100C09738(a1, a1 + 88, a2, a3, 0, (uint64_t *)buf, (uint64_t)__s1, (uint64_t)&__p, v7);
    if (SHIBYTE(v102) < 0) {
      operator delete(__p);
    }
    if (SHIBYTE(v105) < 0) {
      operator delete(*(void **)__s1);
    }
    if (SHIBYTE(v108) < 0) {
      goto LABEL_9;
    }
    return;
  }
  *(void *)long long buf = 0;
  uint64_t v107 = 0;
  uint64_t v108 = 0;
  sub_100C0B81C(buf, a1, a2, &qword_101B10280);
  int v8 = SHIBYTE(v108);
  if (v108 >= 0) {
    uint64_t v9 = HIBYTE(v108);
  }
  else {
    uint64_t v9 = v107;
  }
  if (v9)
  {
    uint64_t v90 = a2;
    *(void *)__s1 = 0;
    size_t v104 = 0;
    uint64_t v105 = 0;
    sub_100C0B81C(__s1, a1, a3, (uint64_t *)HIBYTE(v108));
    uint64_t v10 = HIBYTE(v105);
    LODWORD(v11) = SHIBYTE(v105);
    if (v105 >= 0) {
      size_t v12 = HIBYTE(v105);
    }
    else {
      size_t v12 = v104;
    }
    if (!v12)
    {
      uint64_t v17 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Failed to retrieve current continent code", (uint8_t *)&__p, 2u);
      }
      goto LABEL_132;
    }
    if (v12 == v9)
    {
      if (v8 >= 0) {
        char v13 = buf;
      }
      else {
        char v13 = *(uint8_t **)buf;
      }
      if (SHIBYTE(v105) < 0)
      {
        uint64_t v15 = *(const void **)__s1;
        int v18 = memcmp(*(const void **)__s1, v13, v104);
        if (v9 != 1 || v18) {
          goto LABEL_37;
        }
      }
      else
      {
        if (HIBYTE(v105))
        {
          uint64_t v14 = __s1;
          while (*v14 == *v13)
          {
            ++v14;
            ++v13;
            if (!--v10) {
              goto LABEL_28;
            }
          }
          goto LABEL_37;
        }
LABEL_28:
        if (v9 != 1) {
          goto LABEL_37;
        }
        uint64_t v15 = __s1;
      }
      if (!memcmp(v15, "2", 1uLL))
      {
        xpc_object_t v80 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v80, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p) = 0;
          _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I in EU, skip travel notification", (uint8_t *)&__p, 2u);
        }
        sub_100058DB0(&__p, "");
        sub_100058DB0(&v99, "");
        sub_100058DB0(&v96, "EU Travel");
        sub_100C09738(a1, a1 + 88, v90, a3, 0, (uint64_t *)&__p, (uint64_t)&v99, (uint64_t)&v96, v81);
        goto LABEL_151;
      }
    }
LABEL_37:
    uint64_t v19 = (void *)(a1 + 144);
    unsigned int v20 = *(void **)(a1 + 144);
    if (v20)
    {
      uint64_t v21 = a1 + 144;
      do
      {
        char v22 = sub_100046FE8(v20 + 4, (void **)a3);
        if (v22 >= 0) {
          uint64_t v23 = v20;
        }
        else {
          uint64_t v23 = v20 + 1;
        }
        if (v22 >= 0) {
          uint64_t v21 = (uint64_t)v20;
        }
        unsigned int v20 = (void *)*v23;
      }
      while (*v23);
      if ((void *)v21 != v19 && (sub_100046FE8((void *)a3, (void **)(v21 + 32)) & 0x80) == 0)
      {
        double v25 = *(double *)(v21 + 56);
        if (v25 + 31536000.0 > sub_100C0BC70(*(Registry **)(a1 + 56), v24))
        {
          xpc_object_t v26 = (uint64_t *)(*(_DWORD *)(a1 + 196) + 1);
          *(_DWORD *)(a1 + 196) = v26;
          ServiceMap = (std::mutex *)Registry::getServiceMap(v26, *(Registry **)(a1 + 56));
          char v28 = ServiceMap;
          if (v29 < 0)
          {
            BOOL v30 = (unsigned __int8 *)(v29 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v31 = 5381;
            do
            {
              uint64_t v29 = v31;
              unsigned int v32 = *v30++;
              uint64_t v31 = (33 * v31) ^ v32;
            }
            while (v32);
          }
          std::mutex::lock(ServiceMap);
          __p = (void *)v29;
          BOOL v33 = sub_10004D37C(&v28[1].__m_.__sig, (unint64_t *)&__p);
          if (v33)
          {
            uint64_t v35 = v33[3];
            BOOL v34 = (std::__shared_weak_count *)v33[4];
            if (v34)
            {
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v28);
              atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v34);
              char v36 = 0;
              goto LABEL_142;
            }
          }
          else
          {
            uint64_t v35 = 0;
          }
          std::mutex::unlock(v28);
          BOOL v34 = 0;
          char v36 = 1;
LABEL_142:
          if (v35)
          {
            v82 = (void *)*(unsigned int *)(a1 + 196);
            v99.__r_.__value_.__r.__words[0] = 0;
            __p = v82;
            char v88 = v11;
            CFNumberRef v83 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongLongType, &__p);
            if (v83)
            {
              v84 = (void *)v99.__r_.__value_.__r.__words[0];
              v99.__r_.__value_.__r.__words[0] = (std::string::size_type)v83;
              __p = v84;
              sub_1000570E8((const void **)&__p);
            }
            std::string::size_type v11 = v99.__r_.__value_.__r.__words[0];
            v96 = (void *)v99.__r_.__value_.__r.__words[0];
            v99.__r_.__value_.__r.__words[0] = 0;
            sub_1000570E8((const void **)&v99.__r_.__value_.__l.__data_);
            (*(void (**)(uint64_t, const __CFString *, std::string::size_type, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v35 + 16))(v35, @"TravelNotificationRateLimitCount", v11, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
            (*(void (**)(uint64_t, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v35 + 48))(v35, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
            sub_1000570E8((const void **)&v96);
            LOBYTE(v11) = v88;
            if (v36) {
              goto LABEL_150;
            }
          }
          else
          {
            v85 = *(NSObject **)(a1 + 48);
            if (os_log_type_enabled(v85, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v85, OS_LOG_TYPE_ERROR, "Could not get preferences", (uint8_t *)&__p, 2u);
              if (v36) {
                goto LABEL_150;
              }
            }
            else if (v36)
            {
LABEL_150:
              sub_100058DB0(&__p, "");
              sub_100058DB0(&v99, "");
              sub_100058DB0(&v96, "rate limited");
              sub_100C09738(a1, a1 + 88, v90, a3, 0, (uint64_t *)&__p, (uint64_t)&v99, (uint64_t)&v96, v86);
LABEL_151:
              if (SHIBYTE(v98) < 0) {
                operator delete(v96);
              }
              if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v99.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(v102) < 0) {
                operator delete(__p);
              }
              goto LABEL_132;
            }
          }
          sub_10004D2C8(v34);
          goto LABEL_150;
        }
      }
    }
    __p = 0;
    v101 = 0;
    uint64_t v102 = 0;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(__dst, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)__dst = *(_OWORD *)a3;
      uint64_t v95 = *(void *)(a3 + 16);
    }
    if (v12 == 1)
    {
      int v37 = *(uint8_t **)__s1;
      if ((v11 & 0x80000000) == 0) {
        int v37 = __s1;
      }
      BOOL v38 = *v37 == 50;
    }
    else
    {
      BOOL v38 = 0;
    }
    sub_100C07F2C((uint64_t)&__p, a1, (uint64_t)__dst, v38);
    if (SHIBYTE(v95) < 0) {
      operator delete(__dst[0]);
    }
    unint64_t v39 = (char *)__p;
    if (__p != &v101)
    {
      while (!v39[56])
      {
        uint64_t v40 = (char *)*((void *)v39 + 1);
        if (v40)
        {
          do
          {
            unint64_t v41 = (char **)v40;
            uint64_t v40 = *(char **)v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            unint64_t v41 = (char **)*((void *)v39 + 2);
            BOOL v42 = *v41 == v39;
            unint64_t v39 = (char *)v41;
          }
          while (!v42);
        }
        unint64_t v39 = (char *)v41;
        if (v41 == &v101) {
          goto LABEL_72;
        }
      }
      sub_100058DB0(&v99, "");
      sub_100058DB0(&v96, "");
      sub_100058DB0(v92, "local plan enabled");
      sub_100C09738(a1, a1 + 88, v90, a3, 0, (uint64_t *)&v99, (uint64_t)&v96, (uint64_t)v92, v58);
      if (v93 < 0) {
        operator delete(v92[0]);
      }
      if (SHIBYTE(v98) < 0) {
        operator delete(v96);
      }
      if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v99.__r_.__value_.__l.__data_);
      }
      goto LABEL_131;
    }
LABEL_72:
    double v43 = sub_100C0BC70(*(Registry **)(a1 + 56), (uint64_t *)&v101);
    uint64_t v44 = (void *)(a1 + 136);
    v99.__r_.__value_.__r.__words[0] = a3;
    *((double *)sub_10042E5B0((uint64_t **)(a1 + 136), (void **)a3, (uint64_t)&unk_10144E20E, (long long **)&v99) + 7) = v43;
    char v46 = (std::mutex *)Registry::getServiceMap(v45, *(Registry **)(a1 + 56));
    uint64_t v47 = v46;
    if ((v48 & 0x8000000000000000) != 0)
    {
      uint64_t v49 = (unsigned __int8 *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v50 = 5381;
      do
      {
        std::string::size_type v48 = v50;
        unsigned int v51 = *v49++;
        uint64_t v50 = (33 * v50) ^ v51;
      }
      while (v51);
    }
    std::mutex::lock(v46);
    v99.__r_.__value_.__r.__words[0] = v48;
    int64_t v52 = sub_10004D37C(&v47[1].__m_.__sig, (unint64_t *)&v99);
    if (v52)
    {
      uint64_t v53 = v52[3];
      uint64_t v54 = (std::__shared_weak_count *)v52[4];
      if (v54)
      {
        uint64_t v55 = v52[3];
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v47);
        atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v53 = v55;
        uint64_t v56 = v54;
        sub_10004D2C8(v54);
        char v57 = 0;
LABEL_86:
        v89 = v56;
        if (v53)
        {
          if (*(void *)(a1 + 152))
          {
            uint64_t v87 = v53;
            v91 = +[NSMutableArray arrayWithCapacity:](NSMutableArray, "arrayWithCapacity:");
            xpc_object_t v59 = (void *)*v44;
            if ((void *)*v44 != v19)
            {
              do
              {
                xpc_object_t v60 = objc_opt_new();
                sub_1008C01C4(v59 + 4, @"key", v60);
                xpc_object_t v61 = @"value";
                xpc_object_t v62 = v60;
                xpc_object_t v63 = +[NSNumber numberWithDouble:*((double *)v59 + 7)];
                codec::setItem(v63, (objc_object *)@"value", v62, v64);

                if (v62) {
                  [v91 addObject:v62];
                }

                xpc_object_t v65 = (void *)v59[1];
                if (v65)
                {
                  do
                  {
                    xpc_object_t v66 = v65;
                    xpc_object_t v65 = (void *)*v65;
                  }
                  while (v65);
                }
                else
                {
                  do
                  {
                    xpc_object_t v66 = (void *)v59[2];
                    BOOL v42 = *v66 == (void)v59;
                    xpc_object_t v59 = v66;
                  }
                  while (!v42);
                }
                xpc_object_t v59 = v66;
              }
              while (v66 != v19);
            }
            uint64_t v53 = v87;
            if ([v91 count]) {
              id v67 = v91;
            }
            else {
              id v67 = 0;
            }
          }
          else
          {
            id v67 = 0;
          }
          (*(void (**)(uint64_t, const __CFString *, id, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v53 + 16))(v53, @"TravelNotificationTimestamps", v67, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          *(unsigned char *)(a1 + 193) = 1;
          (*(void (**)(uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v53 + 16))(v53, @"TravelNotificationShowReturnHome", kCFBooleanTrue, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          (*(void (**)(uint64_t, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v53 + 48))(v53, @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
        }
        else
        {
          xpc_object_t v68 = *(NSObject **)(a1 + 48);
          if (os_log_type_enabled(v68, OS_LOG_TYPE_ERROR))
          {
            LOWORD(v99.__r_.__value_.__l.__data_) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_ERROR, "Could not get preferences", (uint8_t *)&v99, 2u);
          }
        }
        if ((v57 & 1) == 0) {
          sub_10004D2C8(v89);
        }
        memset(&v99, 0, sizeof(v99));
        sub_100058DB0(&v99, "");
        v96 = 0;
        uint64_t v97 = 0;
        uint64_t v98 = 0;
        sub_100058DB0(&v96, "");
        if (sub_100C07E30((uint64_t *)a1))
        {
          if (SHIBYTE(v98) < 0)
          {
            uint64_t v97 = 6;
            xpc_object_t v70 = v96;
            xpc_object_t v69 = (char *)v96 + 6;
          }
          else
          {
            xpc_object_t v69 = (char *)&v96 + 6;
            HIBYTE(v98) = 6;
            xpc_object_t v70 = &v96;
          }
          v70[2] = 28009;
          *(_DWORD *)xpc_object_t v70 = 1931505518;
          xpc_object_t v71 = @"prefs:root=MOBILE_DATA_SETTINGS_ID&client=com.apple.CommCenter&path=CELLULAR&type=travelEducation";
        }
        else
        {
          [@"prefs:root=MOBILE_DATA_SETTINGS_ID&client=com.apple.CommCenter&path=CELLULAR&type=travelEducation" stringByAppendingString:@"&showRoamingOption=1"];
          xpc_object_t v71 = (__CFString *)objc_claimAutoreleasedReturnValue();
          std::string::append(&v99, "data roaming_", 0xDuLL);
          if (SHIBYTE(v98) < 0)
          {
            uint64_t v97 = 13;
            xpc_object_t v72 = v96;
            xpc_object_t v69 = (char *)v96 + 13;
          }
          else
          {
            xpc_object_t v69 = (char *)&v97 + 5;
            HIBYTE(v98) = 13;
            xpc_object_t v72 = &v96;
          }
          qmemcpy(v72, "has user sims", 13);
        }
        *xpc_object_t v69 = 0;
        if (v102)
        {
          uint64_t v73 = [(__CFString *)v71 stringByAppendingString:@"&showLocalPlanOption=1"];

          std::string::append(&v99, "switch to existing plan_", 0x18uLL);
          if (SHIBYTE(v98) < 0)
          {
            uint64_t v97 = 13;
            v74 = (char *)v96;
          }
          else
          {
            HIBYTE(v98) = 13;
            v74 = (char *)&v96;
          }
          strcpy(v74, "has local sim");
          xpc_object_t v75 = (void *)v73;
        }
        else
        {
          xpc_object_t v75 = v71;
        }
        xpc_object_t v76 = [v75 stringByAppendingString:@"&showPurchaseOption=1"];

        std::string::append(&v99, "purchase local plan", 0x13uLL);
        id v77 = v76;
        sub_100058DB0(v92, (char *)[v77 UTF8String]);
        sub_100C0BDA8(a1, @"TRAVEL_NOTIFICATION_TITLE", @"TRAVEL_NOTIFICATION_MESSAGE", (uint64_t *)v92, v78);
        if (v93 < 0) {
          operator delete(v92[0]);
        }
        sub_100058DB0(v92, "");
        sub_100C09738(a1, a1 + 88, v90, a3, 1, (uint64_t *)&v96, (uint64_t)&v99, (uint64_t)v92, v79);
        if (v93 < 0) {
          operator delete(v92[0]);
        }

        if (SHIBYTE(v98) < 0) {
          operator delete(v96);
        }
        if (SHIBYTE(v99.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v99.__r_.__value_.__l.__data_);
        }
        LOBYTE(v11) = HIBYTE(v105);
LABEL_131:
        sub_10005CD2C((uint64_t)&__p, v101);
LABEL_132:
        if ((v11 & 0x80) != 0) {
          operator delete(*(void **)__s1);
        }
        LOBYTE(v8) = HIBYTE(v108);
        goto LABEL_135;
      }
    }
    else
    {
      uint64_t v53 = 0;
    }
    std::mutex::unlock(v47);
    uint64_t v56 = 0;
    char v57 = 1;
    goto LABEL_86;
  }
  BOOL v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)__s1 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Failed to retrieve previous continent code", __s1, 2u);
  }
LABEL_135:
  if ((v8 & 0x80) != 0) {
LABEL_9:
  }
    operator delete(*(void **)buf);
}

void sub_100C0B5B4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  sub_1000570E8((const void **)&a33);
  if ((v45 & 1) == 0) {
    sub_10004D2C8(v46);
  }
  if (a10 < 0) {
    operator delete(*(void **)(v47 - 160));
  }
  if (*(char *)(v47 - 105) < 0) {
    operator delete(*(void **)(v47 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100C0B81C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  BOOL v6 = a1;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *(Registry **)(a2 + 56));
  int v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, &v21);
  if (!v13)
  {
    uint64_t v15 = 0;
LABEL_10:
    std::mutex::unlock(v8);
    uint64_t v14 = 0;
    char v16 = 1;
    if (!v15)
    {
LABEL_7:
      uint64_t v17 = *(NSObject **)(a2 + 48);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v21) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to get isoCache", (uint8_t *)&v21, 2u);
      }
      goto LABEL_26;
    }
    goto LABEL_11;
  }
  uint64_t v15 = v13[3];
  uint64_t v14 = (std::__shared_weak_count *)v13[4];
  if (!v14) {
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
  if (!v15) {
    goto LABEL_7;
  }
LABEL_11:
  (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v15 + 64))(&v21, v15, a3);
  unint64_t v18 = v21;
  if (v21 == v22)
  {
    uint64_t v19 = *(NSObject **)(a2 + 48);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "mccs are empty", buf, 2u);
    }
    goto LABEL_25;
  }
  while ((*(char *)(v18 + 23) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v18 + 23)) {
      goto LABEL_21;
    }
LABEL_16:
    v18 += 24;
    if (v18 == v22) {
      goto LABEL_25;
    }
  }
  if (!*(void *)(v18 + 8)) {
    goto LABEL_16;
  }
  unint64_t v18 = *(void *)v18;
LABEL_21:
  char v20 = *(unsigned char *)v18;
  if (*((char *)v6 + 23) < 0)
  {
    v6[1] = 1;
    BOOL v6 = (void *)*v6;
  }
  else
  {
    *((unsigned char *)v6 + 23) = 1;
  }
  *(unsigned char *)BOOL v6 = v20;
  *((unsigned char *)v6 + 1) = 0;
LABEL_25:
  *(void *)long long buf = &v21;
  sub_100047F64((void ***)buf);
LABEL_26:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100C0BA38(_Unwind_Exception *exception_object)
{
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0BA6C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B10270, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B10270))
  {
    sub_100058DB0(v5, "ru");
    sub_100058DB0(v6, "ir");
    sub_100058DB0(v7, "sy");
    sub_100058DB0(v8, "cu");
    sub_100058DB0(v9, "kp");
    sub_100058DB0(v10, "by");
    sub_1000EA30C((uint64_t)&v2, v5, 6);
    v0 = (char *)v3;
    qword_101B10278 = (uint64_t)v2;
    qword_101B10280 = v3;
    qword_101B10288 = v4;
    if (v4)
    {
      *(void *)(v3 + 16) = &qword_101B10280;
      uint64_t v2 = &v3;
      uint64_t v3 = 0;
      uint64_t v4 = 0;
      v0 = 0;
    }
    else
    {
      qword_101B10278 = (uint64_t)&qword_101B10280;
    }
    sub_10005CD2C((uint64_t)&v2, v0);
    for (uint64_t i = 0; i != -18; i -= 3)
    {
      if (SHIBYTE(v10[i + 2]) < 0) {
        operator delete((void *)v10[i]);
      }
    }
    __cxa_guard_release(&qword_101B10270);
  }
}

void sub_100C0BC04(_Unwind_Exception *a1)
{
  uint64_t v3 = 0;
  while (1)
  {
    if (*(char *)(v1 + v3 + 143) < 0) {
      operator delete(*(void **)(v1 + v3 + 120));
    }
    v3 -= 24;
    if (v3 == -144)
    {
      __cxa_guard_abort(&qword_101B10270);
      _Unwind_Resume(a1);
    }
  }
}

double sub_100C0BC70@<D0>(Registry *a1@<X0>, uint64_t *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, a1);
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v15 = v4;
  int v8 = sub_10004D37C(&v3[1].__m_.__sig, &v15);
  if (!v8)
  {
    uint64_t v10 = 0;
LABEL_9:
    std::mutex::unlock(v3);
    unint64_t v9 = 0;
    char v11 = 1;
    if (!v10) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v8[3];
  unint64_t v9 = (std::__shared_weak_count *)v8[4];
  if (!v9) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  char v11 = 0;
  if (!v10)
  {
LABEL_7:
    double Current = CFAbsoluteTimeGetCurrent();
    goto LABEL_11;
  }
LABEL_10:
  double Current = (*(double (**)(uint64_t))(*(void *)v10 + 96))(v10);
LABEL_11:
  double v13 = Current;
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  return v13;
}

void sub_100C0BD88(_Unwind_Exception *exception_object)
{
  char v3 = v2;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C0BDA8(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X3>, uint64_t *a5@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a5, *(Registry **)(a1 + 56));
  uint64_t v10 = ServiceMap;
  if (v11 < 0)
  {
    unsigned int v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  unint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    char v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_7;
      }
LABEL_11:
      *(void *)long long buf = 0;
      uint64_t v20 = kCBMessageLocalizationTable;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, const __CFString *, void, uint64_t, uint64_t))(*(void *)v17 + 32))(buf, v17, @"com.apple.CoreTelephony", kCBMessageLocalizationTable, a2, 1);
      xpc_object_t v26 = 0;
      (*(void (**)(const void **__return_ptr, uint64_t, const __CFString *, uint64_t, uint64_t, uint64_t))(*(void *)v17 + 32))(&v26, v17, @"com.apple.CoreTelephony", v20, a3, 1);
      unint64_t v21 = objc_alloc_init(CellularPlanUserNotificationDelegate);
      uint64_t v23 = v26;
      uint64_t v22 = *(void *)buf;
      if (*((char *)a4 + 23) >= 0) {
        unsigned int v24 = a4;
      }
      else {
        unsigned int v24 = (uint64_t *)*a4;
      }
      double v25 = +[NSString stringWithUTF8String:v24];
      [(CellularPlanUserNotificationDelegate *)v21 publishUserNotificationWithBundleIdentifier:@"com.apple.Preferences" requestIdentifier:@"travel education" title:v22 body:v23 actionUrl:v25 destinations:7];

      sub_1000558F4(&v26);
      sub_1000558F4((const void **)buf);
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  char v16 = 0;
  char v18 = 1;
  if (v17) {
    goto LABEL_11;
  }
LABEL_7:
  uint64_t v19 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "invalid localizer", buf, 2u);
  }
LABEL_15:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
}

void sub_100C0BFF0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  unsigned int v7 = va_arg(va1, const void *);

  sub_1000558F4((const void **)va);
  sub_1000558F4((const void **)va1);
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100C0C044(uint64_t *a1, uint64_t a2, void **a3, const void **a4)
{
  uint64_t v8 = a2 + 160;
  if (sub_10010E128(a2 + 160, a3))
  {
    *(void *)&long long buf = 0;
    uint64_t v10 = *sub_100046ED4(v8, &buf, a3);
    if (!v10) {
      sub_1000C14F0("map::at:  key not found");
    }
    sub_1000C6BDC(a1, v10 + 56);
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a2 + 56));
  unsigned int v12 = ServiceMap;
  if (v13 < 0)
  {
    unsigned int v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v13;
  uint64_t v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)&buf);
  unsigned int v51 = (uint64_t **)v8;
  if (v17)
  {
    uint64_t v19 = v17[3];
    char v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v12);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v18);
      char v53 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v12);
  char v18 = 0;
  char v53 = 1;
LABEL_14:
  int64_t v52 = v18;
  if (!v19)
  {
    unsigned int v32 = *(NSObject **)(a2 + 48);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Unable to get isoCache", (uint8_t *)&buf, 2u);
    }
    goto LABEL_27;
  }
  if (*a4) {
    uint64_t v20 = sub_100080778;
  }
  else {
    uint64_t v20 = 0;
  }
  if (!v20)
  {
LABEL_27:
    a1[2] = 0;
    a1[1] = 0;
    *a1 = (uint64_t)(a1 + 1);
    goto LABEL_113;
  }
  uint64_t v85 = 0;
  long long v83 = 0u;
  long long __src = 0u;
  long long v81 = 0u;
  long long v82 = 0u;
  long long v79 = 0u;
  long long v80 = 0u;
  long long v77 = 0u;
  long long v78 = 0u;
  long long buf = 0u;
  unint64_t v21 = (std::mutex *)Registry::getServiceMap((uint64_t *)&v60, *(Registry **)(a2 + 56));
  uint64_t v22 = v21;
  uint64_t v23 = a3;
  if (v24 < 0)
  {
    double v25 = (unsigned __int8 *)(v24 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v26 = 5381;
    do
    {
      uint64_t v24 = v26;
      unsigned int v27 = *v25++;
      uint64_t v26 = (33 * v26) ^ v27;
    }
    while (v27);
  }
  std::mutex::lock(v21);
  *(void *)&long long v65 = v24;
  char v28 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)&v65);
  if (!v28)
  {
    uint64_t v30 = 0;
    goto LABEL_29;
  }
  uint64_t v30 = v28[3];
  uint64_t v29 = (std::__shared_weak_count *)v28[4];
  if (!v29)
  {
LABEL_29:
    std::mutex::unlock(v22);
    uint64_t v29 = 0;
    char v31 = 1;
    goto LABEL_30;
  }
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v22);
  atomic_fetch_add_explicit(&v29->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v23 = a3;
  sub_10004D2C8(v29);
  char v31 = 0;
LABEL_30:
  sub_100058198(&v75, a4);
  (*(void (**)(long long *__return_ptr, uint64_t, const void **))(*(void *)v30 + 32))(&buf, v30, &v75);
  sub_100057D78(&v75);
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v29);
  }
  long long __dst = 0uLL;
  uint64_t v74 = 0;
  if (SHIBYTE(v85) < 0)
  {
    sub_10004FC84(&__dst, (void *)__src, *((unint64_t *)&__src + 1));
  }
  else
  {
    long long __dst = __src;
    uint64_t v74 = v85;
  }
  long long v71 = 0u;
  long long v72 = 0u;
  long long v69 = 0u;
  long long v70 = 0u;
  long long v67 = 0u;
  long long v68 = 0u;
  long long v65 = 0u;
  long long v66 = 0u;
  sub_100029158((char *)&v65, &buf);
  uint64_t v33 = HIBYTE(v74);
  if (v74 < 0) {
    uint64_t v33 = *((void *)&__dst + 1);
  }
  if (v33)
  {
    CFDictionaryRef theDict = 0;
    Registry::getFileSystemInterface((uint64_t *)v57, *(Registry **)(a2 + 56));
    (*(void (**)(CFDictionaryRef *__return_ptr))(**(void **)v57 + 152))(&theDict);
    if (*(void *)&v57[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v57[8]);
    }
    if (theDict) {
      BOOL v34 = sub_100080778;
    }
    else {
      BOOL v34 = 0;
    }
    if (v34
      && (Value = (void *)CFDictionaryGetValue(theDict, @"SupportedSIMs"), (char v36 = Value) != 0)
      && (CFTypeID v37 = CFGetTypeID(Value), v37 == CFArrayGetTypeID()))
    {
      id v38 = v36;
      a1[1] = 0;
      a1[2] = 0;
      *a1 = (uint64_t)(a1 + 1);
      long long v60 = 0u;
      long long v61 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      id v39 = v38;
      id v40 = [v39 countByEnumeratingWithState:&v60 objects:v86 count:16];
      if (v40)
      {
        uint64_t v41 = *(void *)v61;
        do
        {
          for (uint64_t i = 0; i != v40; uint64_t i = (char *)i + 1)
          {
            if (*(void *)v61 != v41) {
              objc_enumerationMutation(v39);
            }
            double v43 = *(void **)(*((void *)&v60 + 1) + 8 * i);
            objc_opt_class();
            if (objc_opt_isKindOfClass())
            {
              memset(&__str, 0, sizeof(__str));
              sub_100058DB0(&__str, (char *)[v43 UTF8String]);
              if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                size_t size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
              }
              else {
                size_t size = __str.__r_.__value_.__l.__size_;
              }
              if (size)
              {
                char v45 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                    ? &__str
                    : (std::string *)__str.__r_.__value_.__r.__words[0];
                char v46 = memchr(v45, 95, size);
                if (v46)
                {
                  if (v46 - (unsigned char *)v45 != -1)
                  {
                    std::string::basic_string((std::string *)v57, &__str, 0, v46 - (unsigned char *)v45, (std::allocator<char> *)&__p);
                    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                      operator delete(__str.__r_.__value_.__l.__data_);
                    }
                    std::string __str = *(std::string *)v57;
                  }
                }
              }
              long long v58 = 0u;
              memset(v57, 0, sizeof(v57));
              sub_100E63EA4((uint64_t)v57);
              __p = 0;
              uint64_t v55 = 0;
              uint64_t v56 = 0;
              (*(void (**)(void **__return_ptr, uint64_t, unsigned char *))(*(void *)v19 + 24))(&__p, v19, v57);
              if (SHIBYTE(v56) < 0)
              {
                uint64_t v47 = v55;
                if (v55)
                {
                  p_p = __p;
                  goto LABEL_69;
                }
LABEL_73:
                operator delete(__p);
              }
              else
              {
                uint64_t v47 = HIBYTE(v56);
                if (HIBYTE(v56))
                {
                  p_p = &__p;
LABEL_69:
                  uint64_t v49 = &p_p[v47];
                  while (p_p != v49)
                  {
                    unsigned char *p_p = __tolower((char)*p_p);
                    ++p_p;
                  }
                  sub_1000F29CC((uint64_t **)a1, &__p, (uint64_t)&__p);
                  uint64_t v23 = a3;
                  if (SHIBYTE(v56) < 0) {
                    goto LABEL_73;
                  }
                }
              }
              if (SHIBYTE(v58) < 0) {
                operator delete(*(void **)&v57[24]);
              }
              if ((v57[23] & 0x80000000) != 0) {
                operator delete(*(void **)v57);
              }
              if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__str.__r_.__value_.__l.__data_);
              }
              continue;
            }
          }
          id v40 = [v39 countByEnumeratingWithState:&v60 objects:v86 count:16];
        }
        while (v40);
      }

      if (a1[2])
      {
        *(void *)char v57 = v23;
        uint64_t v50 = (uint64_t **)(sub_1002C4058(v51, v23, (uint64_t)&unk_10144E20E, (long long **)v57) + 7);
        if (v50 != (uint64_t **)a1) {
          sub_1000EA390(v50, (void *)*a1, a1 + 1);
        }
      }
    }
    else
    {
      a1[2] = 0;
      a1[1] = 0;
      *a1 = (uint64_t)(a1 + 1);
    }
    sub_100057D78((const void **)&theDict);
  }
  else
  {
    a1[2] = 0;
    a1[1] = 0;
    *a1 = (uint64_t)(a1 + 1);
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)v71);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(*((void **)&v69 + 1));
  }
  if (SBYTE7(v69) < 0) {
    operator delete((void *)v68);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(*((void **)&v66 + 1));
  }
  if (SBYTE7(v66) < 0) {
    operator delete((void *)v65);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v85) < 0) {
    operator delete((void *)__src);
  }
  if (SBYTE7(v83) < 0) {
    operator delete((void *)v82);
  }
  if (SHIBYTE(v81) < 0) {
    operator delete(*((void **)&v80 + 1));
  }
  if (SBYTE7(v80) < 0) {
    operator delete((void *)v79);
  }
  if (SHIBYTE(v78) < 0) {
    operator delete(*((void **)&v77 + 1));
  }
  if (SBYTE7(v77) < 0) {
    operator delete((void *)buf);
  }
LABEL_113:
  if ((v53 & 1) == 0) {
    sub_10004D2C8(v52);
  }
}

void sub_100C0C804(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, int a13, char a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,const void *a37,__int16 a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *__p,uint64_t a55,int a56,__int16 a57,char a58,char a59,uint64_t a60,__int16 a61)
{
  sub_10005CD2C(v61, *(char **)(v61 + 8));
  sub_100057D78(&a37);
  sub_10039A890((uint64_t)&a38);
  if (a59 < 0) {
    operator delete(__p);
  }
  sub_10015C5A0((uint64_t)&a61);
  if ((a14 & 1) == 0) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100C0C92C(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *(Registry **)(a1 + 56));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (!v13)
  {
    uint64_t v15 = 0;
LABEL_9:
    std::mutex::unlock(v8);
    unsigned int v14 = 0;
    char v16 = 1;
    if (v15) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  uint64_t v15 = v13[3];
  unsigned int v14 = (std::__shared_weak_count *)v13[4];
  if (!v14) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
  if (v15) {
    goto LABEL_12;
  }
LABEL_10:
  uint64_t v17 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Couldn't get analytics handler", buf, 2u);
  }
LABEL_12:
  xpc_object_t v28 = 0;
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v19 = v18;
  if (v18)
  {
    xpc_object_t v28 = v18;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    xpc_object_t v28 = v19;
    if (!v19)
    {
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v19 = 0;
      goto LABEL_19;
    }
  }
  if (xpc_get_type(v19) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v19);
    goto LABEL_20;
  }
  xpc_object_t v20 = xpc_null_create();
LABEL_19:
  xpc_object_t v28 = v20;
LABEL_20:
  xpc_release(v19);
  if (*((char *)a2 + 23) < 0)
  {
    if (!a2[1]) {
      goto LABEL_28;
    }
    a2 = (uint64_t *)*a2;
  }
  else if (!*((unsigned char *)a2 + 23))
  {
    goto LABEL_28;
  }
  xpc_object_t v26 = xpc_string_create((const char *)a2);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  *(void *)long long buf = &v28;
  double v25 = "final_action";
  sub_100035E70((uint64_t)buf, &v26, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
LABEL_28:
  if (*((char *)a3 + 23) < 0)
  {
    if (!a3[1]) {
      goto LABEL_36;
    }
    a3 = (uint64_t *)*a3;
  }
  else if (!*((unsigned char *)a3 + 23))
  {
    goto LABEL_36;
  }
  xpc_object_t v22 = xpc_string_create((const char *)a3);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  *(void *)long long buf = &v28;
  double v25 = "carrier_name";
  sub_100035E70((uint64_t)buf, &v22, &v23);
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
LABEL_36:
  xpc_object_t v21 = v28;
  if (v28) {
    xpc_retain(v28);
  }
  else {
    xpc_object_t v21 = xpc_null_create();
  }
  (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v15 + 16))(v15, "commCentereSIMTravelBuddy", &v21);
  xpc_release(v21);
  xpc_object_t v21 = 0;
  xpc_release(v28);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100C0CC3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18)
{
  xpc_release(object);
  xpc_release(a18);
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v18);
  }
  _Unwind_Resume(a1);
}

void sub_100C0CC84(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    char v3 = (void *)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      char v3 = (void *)*v3;
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v15 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I The user's home country selection is: (%s)", buf, 0xCu);
  }
  unint64_t v4 = *(void **)(a1 + 136);
  if (v4 != (void *)(a1 + 144))
  {
    do
    {
      char v5 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = v4 + 4;
        if (*((char *)v4 + 55) < 0) {
          uint64_t v6 = (void *)*v6;
        }
        uint64_t v7 = v4[7];
        *(_DWORD *)long long buf = 136315394;
        uint64_t v15 = v6;
        __int16 v16 = 2048;
        uint64_t v17 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Country: %s, timestamp: %f\n", buf, 0x16u);
      }
      uint64_t v8 = (void *)v4[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = v8;
          uint64_t v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void *)v4[2];
          BOOL v10 = *v9 == (void)v4;
          unint64_t v4 = v9;
        }
        while (!v10);
      }
      unint64_t v4 = v9;
    }
    while (v9 != (void *)(a1 + 144));
  }
  uint64_t v11 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = *(unsigned __int8 *)(a1 + 193);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v15) = v12;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Should show inbound travel notification: %d", buf, 8u);
    uint64_t v11 = *(NSObject **)(a1 + 48);
  }
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = *(_DWORD *)(a1 + 196);
    *(_DWORD *)long long buf = 67109120;
    LODWORD(v15) = v13;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I rate limited count: %d", buf, 8u);
  }
}

void sub_100C0CEC4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C0CFB4(uint64_t a1)
{
}

uint64_t sub_100C0CFDC(uint64_t a1, void **a2)
{
  char v3 = sub_100C0D048(*(uint64_t ***)a1, *(void *)(a1 + 8), a2, (uint64_t)a2);
  *(void *)(a1 + 8) = v3;
  unint64_t v4 = (uint64_t *)v3[1];
  if (v4)
  {
    do
    {
      char v5 = v4;
      unint64_t v4 = (uint64_t *)*v4;
    }
    while (v4);
  }
  else
  {
    do
    {
      char v5 = (uint64_t *)v3[2];
      BOOL v6 = *v5 == (void)v3;
      char v3 = v5;
    }
    while (!v6);
  }
  *(void *)(a1 + 8) = v5;
  return a1;
}

uint64_t *sub_100C0D048(uint64_t **a1, uint64_t a2, void **a3, uint64_t a4)
{
  uint64_t v9 = 0;
  BOOL v10 = 0;
  BOOL v6 = (uint64_t **)sub_1000C6D50(a1, a2, &v10, &v9, a3);
  uint64_t result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_100C0D0D8((uint64_t)a1, a4, v8);
    sub_100046C38(a1, (uint64_t)v10, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_100C0D0D8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  BOOL v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  v7[56] = *(unsigned char *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100C0D170(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100C0D190(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C0D1C8(uint64_t a1)
{
}

uint64_t sub_100C0D1E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C0D228(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void sub_100C0D254(ServiceManager::Service *this)
{
  *(void *)this = off_101A47F20;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100C0D2B0(ServiceManager::Service *this)
{
  *(void *)this = off_101A47F20;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100C0D320@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "TravelHandler");
}

unsigned char *sub_100C0D330@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v2 = operator new(1uLL);
  *a1 = v2;
  *char v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100C0D370(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100C074D8(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100C074D8(v4, 0);
}

uint64_t sub_100C0D3F4()
{
  return 0;
}

uint64_t sub_100C0D3FC()
{
  return 1;
}

uint64_t sub_100C0D404()
{
  return 0;
}

void sub_100C0D410(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 24);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100C0D4F0(uint64_t result, int a2, ServiceStage *this)
{
  if (a2 == 2)
  {
    uint64_t v3 = *(void *)(result + 8);
    ServiceStage::holdOffStage((uint64_t *)&group[1], this);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 24);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  return result;
}

void sub_100C0D60C(void *a1)
{
  if (a1)
  {
    sub_100C0D60C(*a1);
    sub_100C0D60C(a1[1]);
    sub_100688128((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

uint64_t *sub_100C0D660(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 224));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100C0D6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100C0D6C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v63 = a1;
  uint64_t v64 = v1;
  uint64_t v2 = *(void *)v1;
  Registry::createRestModuleOneTimeUseConnection(&v65, *(Registry **)(*(void *)v1 + 56));
  ctu::RestModule::connect();
  if (v66) {
    sub_10004D2C8(v66);
  }
  sub_100058DB0(__p, "/cc/props/regulatory_domain_country_list");
  uint64_t v3 = operator new(0x28uLL);
  *uint64_t v3 = off_101A47FA0;
  v3[1] = v2 + 240;
  v3[2] = v2;
  v3[3] = sub_100C08FC4;
  v3[4] = 0;
  long long v81 = v3;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SBYTE7(v74) < 0) {
    operator delete(__p[0]);
  }
  sub_1001067E0(v2 + 264);
  sub_100058DB0(__p, "/cc/props/sims_on_device");
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = off_101A48020;
  v4[1] = v2 + 288;
  v4[2] = v2;
  v4[3] = sub_100C0865C;
  v4[4] = 0;
  long long v81 = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SBYTE7(v74) < 0) {
    operator delete(__p[0]);
  }
  sub_1002D7A3C(v2 + 312);
  sub_100C0E2B8(v2 + 336);
  sub_100899E4C(v2 + 360);
  sub_100058DB0(__p, "/cc/props/baseband_activated");
  uint64_t v5 = operator new(0x28uLL);
  void *v5 = off_101A48120;
  v5[1] = v2 + 364;
  v5[2] = v2;
  v5[3] = sub_100C08488;
  v5[4] = 0;
  long long v81 = v5;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SBYTE7(v74) < 0) {
    operator delete(__p[0]);
  }
  sub_1000DDC20(v2 + 365);
  sub_100058DB0(__p, "/cc/events/dump_state");
  BOOL v6 = operator new(0x20uLL);
  void *v6 = off_101A481A0;
  v6[1] = v2;
  v6[2] = sub_100C0CC84;
  void v6[3] = 0;
  long long v81 = v6;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  uint64_t v7 = (uint64_t *)SBYTE7(v74);
  if ((v7 & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *(Registry **)(v2 + 56));
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v10;
  unsigned int v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)buf);
  if (v14)
  {
    uint64_t v15 = v14[3];
    __int16 v16 = (std::__shared_weak_count *)v14[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v62 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v9);
  __int16 v16 = 0;
  char v62 = 1;
LABEL_19:
  xpc_object_t v59 = v16;
  if (v15)
  {
    long long v70 = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, const __CFString *, const __CFString *))(*(void *)v15 + 40))(buf, v15, @"TravelNotificationTimestamps", @"no_backup/com.apple.commcenter.travel");
    sub_100044D6C(&v70, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    long long v68 = 0;
    long long v69 = 0;
    long long v67 = &v68;
    uint64_t v17 = v70;
    sub_10005CD2C((uint64_t)&v67, v68);
    long long v68 = 0;
    long long v69 = 0;
    long long v67 = &v68;
    long long v58 = v17;
    xpc_object_t v18 = +[NSArray typecast:v17];
    if (v18)
    {
      long long v75 = 0u;
      long long v76 = 0u;
      *(_OWORD *)__p = 0u;
      long long v74 = 0u;
      id v57 = v18;
      obuint64_t j = v18;
      char v19 = (char *)[obj countByEnumeratingWithState:__p objects:buf count:16];
      if (v19)
      {
        uint64_t v60 = *(void *)v74;
        while (2)
        {
          for (uint64_t i = 0; i != v19; ++i)
          {
            if (*(void *)v74 != v60) {
              objc_enumerationMutation(obj);
            }
            id v21 = *((id *)__p[1] + i);
            *(_OWORD *)long long v71 = 0u;
            long long v72 = 0u;
            xpc_object_t v22 = +[NSDictionary typecast:v21];
            if (!v22 || (sub_1008675A4((std::string *)v71, @"key", v22) & 1) == 0)
            {
              id v24 = v22;
              goto LABEL_63;
            }
            xpc_object_t v23 = @"value";
            id v24 = v22;
            if ((objc_opt_respondsToSelector() & 1) == 0) {
              goto LABEL_61;
            }
            id v25 = [v24 objectForKey:@"value"];
            if (!v25
              || (objc_opt_class(), (objc_opt_isKindOfClass() & 1) == 0)
              || (objc_opt_respondsToSelector() & 1) == 0)
            {

LABEL_61:
LABEL_63:

              if (SBYTE7(v72) < 0) {
                operator delete(v71[0]);
              }

              xpc_object_t v18 = v57;
              goto LABEL_66;
            }
            [v25 doubleValue];
            *((void *)&v72 + 1) = v26;

            uint64_t v77 = 0;
            unsigned int v27 = sub_100046ED4((uint64_t)&v67, &v77, v71);
            if (!*v27)
            {
              xpc_object_t v28 = operator new(0x40uLL);
              v28[2] = *(_OWORD *)v71;
              *((void *)v28 + 6) = v72;
              v71[1] = 0;
              *(void *)&long long v72 = 0;
              v71[0] = 0;
              *((void *)v28 + 7) = *((void *)&v72 + 1);
              uint64_t v29 = v77;
              *(void *)xpc_object_t v28 = 0;
              *((void *)v28 + 1) = 0;
              *((void *)v28 + 2) = v29;
              *unsigned int v27 = v28;
              if (*v67)
              {
                long long v67 = (char **)*v67;
                xpc_object_t v28 = (_OWORD *)*v27;
              }
              sub_100046C90((uint64_t *)v68, (uint64_t *)v28);
              ++v69;
            }
            if (SBYTE7(v72) < 0) {
              operator delete(v71[0]);
            }
          }
          char v19 = (char *)[obj countByEnumeratingWithState:__p objects:buf count:16];
          if (v19) {
            continue;
          }
          break;
        }
      }

      uint64_t v30 = (char *)[obj count];
      BOOL v31 = v30 == v69;

      if (v31 && (char ***)(v2 + 136) != &v67)
      {
        unsigned int v32 = (uint64_t *)v67;
        if (*(void *)(v2 + 152))
        {
          uint64_t v33 = *(void *)(v2 + 144);
          BOOL v34 = *(void **)(v2 + 136);
          *(void *)(v2 + 136) = v2 + 144;
          *(void *)(v33 + 16) = 0;
          *(void *)(v2 + 144) = 0;
          *(void *)(v2 + 152) = 0;
          if (v34[1]) {
            uint64_t v35 = (void *)v34[1];
          }
          else {
            uint64_t v35 = v34;
          }
          *(void *)long long buf = v2 + 136;
          long long v79 = v35;
          long long v80 = v35;
          if (v35)
          {
            long long v79 = sub_1000EA590((uint64_t)v35);
            char v36 = (uint64_t **)&v68;
            if (v32 != (uint64_t *)&v68)
            {
              do
              {
                std::string::operator=((std::string *)(v35 + 4), (const std::string *)(v32 + 4));
                v35[7] = v32[7];
                CFTypeID v37 = v80;
                __p[0] = 0;
                id v38 = (uint64_t **)sub_1000EA518(v2 + 136, __p, v80 + 4);
                sub_100046C38((uint64_t **)(v2 + 136), (uint64_t)__p[0], v38, v37);
                uint64_t v35 = v79;
                long long v80 = v79;
                if (v79) {
                  long long v79 = sub_1000EA590((uint64_t)v79);
                }
                id v39 = (uint64_t *)v32[1];
                if (v39)
                {
                  do
                  {
                    char v36 = (uint64_t **)v39;
                    id v39 = (uint64_t *)*v39;
                  }
                  while (v39);
                }
                else
                {
                  do
                  {
                    char v36 = (uint64_t **)v32[2];
                    BOOL v40 = *v36 == v32;
                    unsigned int v32 = (uint64_t *)v36;
                  }
                  while (!v40);
                }
                if (!v35) {
                  break;
                }
                unsigned int v32 = (uint64_t *)v36;
              }
              while (v36 != (uint64_t **)&v68);
            }
          }
          else
          {
            char v36 = (uint64_t **)v32;
          }
          sub_1000EA5E4((uint64_t)buf);
          unsigned int v32 = (uint64_t *)v36;
        }
        if (v32 != (uint64_t *)&v68)
        {
          do
          {
            long long v80 = 0;
            uint64_t v50 = (uint64_t *)operator new(0x40uLL);
            unsigned int v51 = v50;
            long long v79 = (void *)(v2 + 144);
            int64_t v52 = v50 + 4;
            if (*((char *)v32 + 55) < 0)
            {
              sub_10004FC84((unsigned char *)v50 + 32, (void *)v32[4], v32[5]);
            }
            else
            {
              long long v53 = *((_OWORD *)v32 + 2);
              v50[6] = v32[6];
              *(_OWORD *)int64_t v52 = v53;
            }
            v51[7] = v32[7];
            __p[0] = 0;
            uint64_t v54 = (uint64_t **)sub_1000EA518(v2 + 136, __p, v52);
            sub_100046C38((uint64_t **)(v2 + 136), (uint64_t)__p[0], v54, v51);
            uint64_t v55 = (uint64_t *)v32[1];
            if (v55)
            {
              do
              {
                uint64_t v56 = (uint64_t **)v55;
                uint64_t v55 = (uint64_t *)*v55;
              }
              while (v55);
            }
            else
            {
              do
              {
                uint64_t v56 = (uint64_t **)v32[2];
                BOOL v40 = *v56 == v32;
                unsigned int v32 = (uint64_t *)v56;
              }
              while (!v40);
            }
            unsigned int v32 = (uint64_t *)v56;
          }
          while (v56 != (uint64_t **)&v68);
        }
      }
    }
    else
    {
LABEL_66:
    }
    *(void *)long long buf = 0;
    (*(void (**)(uint8_t *__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v15 + 40))(buf, v15, @"TravelNotificationShowReturnHome", @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    BOOL v42 = *(BOOL **)buf;
    if (*(void *)buf) {
      double v43 = sub_100080934;
    }
    else {
      double v43 = 0;
    }
    if (v43)
    {
      LOBYTE(__p[0]) = 0;
      if (*(void *)buf && (CFTypeID v44 = CFGetTypeID(*(CFTypeRef *)buf), v44 == CFBooleanGetTypeID()))
      {
        ctu::cf::assign((ctu::cf *)__p, v42, v45);
        char v46 = (char)__p[0];
      }
      else
      {
        char v46 = 0;
      }
      *(unsigned char *)(v2 + 193) = v46;
    }
    __p[0] = 0;
    (*(void (**)(void **__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v15 + 40))(v71, v15, @"TravelNotificationRateLimitCount", @"no_backup/com.apple.commcenter.travel", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000842D0(__p, (CFTypeRef *)v71);
    sub_1000577C4((const void **)v71);
    if (__p[0]) {
      std::string::size_type v48 = sub_100081E58;
    }
    else {
      std::string::size_type v48 = 0;
    }
    if (v48)
    {
      LODWORD(v71[0]) = 0;
      ctu::cf::assign((ctu::cf *)v71, (unsigned int *)__p[0], v47);
      LODWORD(v48) = v71[0];
    }
    *(_DWORD *)(v2 + 196) = v48;
    sub_1000570E8((const void **)__p);
    sub_1000577C4((const void **)buf);
    sub_10005CD2C((uint64_t)&v67, v68);
    sub_100044D00((const void **)&v70);
  }
  else
  {
    uint64_t v41 = *(NSObject **)(v2 + 48);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Could not get preferences", buf, 2u);
    }
  }
  if ((v62 & 1) == 0) {
    sub_10004D2C8(v59);
  }
  sub_100088C88(&v64);
  return sub_100046B58((uint64_t *)&v63);
}

void sub_100C0E108(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25,uint64_t a26,const void *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  sub_10005CD2C((uint64_t)&a24, a25);
  sub_100044D00(&a27);
  if ((a19 & 1) == 0) {
    sub_10004D2C8(a12);
  }
  sub_100088C88(&a21);
  sub_100046B58(&a20);
  _Unwind_Resume(a1);
}

void sub_100C0E2B8(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/in_home_countries");
  v4[0] = off_101A480A0;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_100C0E36C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C0E39C()
{
}

__n128 sub_100C0E3B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A47FA0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C0E404(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A47FA0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C0E43C(void *a1, xpc_object_t *a2)
{
  char v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    *char v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_100C0E560((uint64_t)v3, a2);
  BOOL v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    BOOL v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10005CD2C((uint64_t)&v9, v10);
}

void sub_100C0E4FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_100C0E514(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C0E554()
{
}

void sub_100C0E560(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_10005CD2C(a1, *(char **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v11, object, 0);
    xpc_release(object[0]);
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v10, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v12; i != v10[1] || v11 != v10[0]; uint64_t i = ++v12)
    {
      v9[0] = &v11;
      v9[1] = i;
      *(_OWORD *)xpc_object_t object = 0u;
      long long v8 = 0u;
      sub_1000492E0((uint64_t)v9, &v6);
      ctu::rest::read_rest_value<RegulatoryCountry>((uint64_t)object, &v6);
      xpc_release(v6);
      sub_100C0E7A8((uint64_t **)a1, object, (uint64_t)object);
      if (SBYTE7(v8) < 0) {
        operator delete(object[0]);
      }
    }
    xpc_release(v11);
    xpc_release(v11);
  }
  xpc_release(v3);
}

void sub_100C0E724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v21 - 48));
  xpc_release(v20);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C0E7A8(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_100C0E834((uint64_t)a1, a3, v7);
    sub_100046C38(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

unsigned char *sub_100C0E834@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  xpc_object_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  v7[56] = *(unsigned char *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100C0E8CC(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100C0E8EC()
{
}

__n128 sub_100C0E900(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A48020;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C0E954(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48020;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C0E98C(uint64_t a1, xpc_object_t *a2)
{
  sub_100089CF0(*(uint64_t **)(a1 + 8), a2);
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)(*(void *)(a1 + 16) + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100C0EA08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C0EA48()
{
}

void sub_100C0EA58()
{
}

void *sub_100C0EA6C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A480A0;
  result[1] = v3;
  return result;
}

uint64_t sub_100C0EAB4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A480A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100C0EAE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C0EB20()
{
}

void sub_100C0EB30()
{
}

__n128 sub_100C0EB44(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A48120;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C0EB98(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48120;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C0EBD0(void *a1, xpc *this, BOOL a3)
{
  uint64_t v4 = (unsigned char *)a1[1];
  *uint64_t v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = (uint64_t (*)(void *))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *))(*v7 + v5);
  }

  return v5(v7);
}

uint64_t sub_100C0EC58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C0EC98()
{
}

void sub_100C0ECA8()
{
}

__n128 sub_100C0ECBC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A481A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C0ED10(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A481A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C0ED48(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100C0ED90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C0EDD0()
{
}

void sub_100C0EDDC(uint64_t **a1)
{
  uint64_t v6 = a1;
  uint64_t v1 = **a1;
  uint64_t v2 = [CTLocationController alloc];
  uint64_t v3 = *(void **)(v1 + 184);
  *(void *)(v1 + 184) = v2;

  id v4 = [*(id *)(v1 + 184) initWithBundlePath:@"/System/Library/LocationBundles/eSIMTravelBuddy.bundle/" withQueue:*(void *)(v1 + 32) withDelegate:v1 + 8];
  uint64_t v5 = *(void **)(v1 + 184);
  *(void *)(v1 + 184) = v4;

  operator delete();
}

void sub_100C0EE6C()
{
}

void sub_100C0EE9C()
{
}

void *sub_100C0EEB0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A48220;
  result[1] = v3;
  return result;
}

uint64_t sub_100C0EEF8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A48220;
  a2[1] = v2;
  return result;
}

void sub_100C0EF24(uint64_t a1, std::string *a2)
{
  std::string __p = *a2;
  unint64_t v2 = __p.__r_.__value_.__r.__words[2];
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  a2->__r_.__value_.__r.__words[0] = 0;
  uint64_t v3 = *(void *)(a1 + 8);
  v2 >>= 56;
  int v4 = (char)v2;
  uint64_t v5 = (char *)&__p + v2;
  if (v4 >= 0) {
    std::string::size_type v6 = (std::string::size_type)v5;
  }
  else {
    std::string::size_type v6 = __p.__r_.__value_.__r.__words[0] + __p.__r_.__value_.__l.__size_;
  }
  if (v4 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  while (p_p != (std::string *)v6)
  {
    p_p->__r_.__value_.__s.__data_[0] = __tolower(p_p->__r_.__value_.__s.__data_[0]);
    p_p = (std::string *)((char *)p_p + 1);
  }
  std::string::operator=((std::string *)(v3 + 88), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100C0EFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C0EFE4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C0F024()
{
}

char *sub_100C0F030(uint64_t **a1, void **a2, long long **a3)
{
  std::string::size_type v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  uint64_t v7 = (char **)(a1 + 1);
  uint64_t v8 = (char **)(a1 + 1);
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = (char **)(a1 + 1);
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (char **)v5;
      uint64_t v10 = v5 + 32;
      if ((sub_100046FE8(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((sub_100046FE8(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    unsigned int v13 = (char *)operator new(0xB0uLL);
    v18[0] = v13;
    v18[1] = v6;
    unsigned int v14 = v13 + 32;
    if (*((char *)v12 + 23) < 0)
    {
      sub_10004FC84(v14, *(void **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      *((void *)v13 + 6) = *((void *)v12 + 2);
      *(_OWORD *)unsigned int v14 = v15;
    }
    *((void *)v13 + 21) = 0;
    *(_OWORD *)(v13 + 152) = 0u;
    *(_OWORD *)(v13 + 136) = 0u;
    *(_OWORD *)(v13 + 120) = 0u;
    *(_OWORD *)(v13 + 104) = 0u;
    *(_OWORD *)(v13 + 88) = 0u;
    *(_OWORD *)(v13 + 72) = 0u;
    *(_OWORD *)(v13 + 56) = 0u;
    LOBYTE(v19) = 1;
    *(void *)unsigned int v13 = 0;
    *((void *)v13 + 1) = 0;
    *((void *)v13 + 2) = v8;
    *uint64_t v7 = v13;
    __int16 v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      unsigned int v13 = *v7;
    }
    sub_100046C90(a1[1], (uint64_t *)v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (char *)v18[0];
    v18[0] = 0;
    sub_100C0F1B0((uint64_t)v18);
  }
  return v11;
}

void sub_100C0F19C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C0F1B0((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C0F1B0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100688128((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_100C0F208(uint64_t **a1)
{
  uint64_t v5 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(NSObject **)(v2 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = *((unsigned __int8 *)v1 + 8);
    *(_DWORD *)long long buf = 67109120;
    int v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Location services status changed to %d", buf, 8u);
  }
  *(unsigned char *)(v2 + 192) = *((unsigned char *)v1 + 8);
  operator delete();
}

void sub_100C0F2E0()
{
}

uint64_t sub_100C0F308(uint64_t a1, unsigned __int8 a2)
{
  uint64_t v2 = sub_100C0F334(a2);

  return _AudioServicesStartSystemSound(v2);
}

uint64_t sub_100C0F334(int a1)
{
  if ((a1 - 35) > 0x16) {
    return 0;
  }
  else {
    return dword_101558C9C[(char)(a1 - 35)];
  }
}

uint64_t sub_100C0F35C(uint64_t a1, unsigned __int8 a2, uint64_t a3)
{
  uint64_t v4 = sub_100C0F334(a2);

  return _AudioServicesStopSystemSound(v4, a3);
}

void sub_100C0F398(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A482B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C0F3B8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A482B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C0F40C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100C0F438(CallAudioServiceInterface *a1)
{
  CallAudioServiceInterface::~CallAudioServiceInterface(a1);

  operator delete();
}

uint64_t sub_100C0F470()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B102A0, memory_order_acquire) & 1) == 0)
  {
    uint64_t v1 = (capabilities::ct *)__cxa_guard_acquire(&qword_101B102A0);
    if (v1)
    {
      int v2 = capabilities::ct::supportsGemini(v1);
      uint64_t v3 = 1;
      if (v2) {
        uint64_t v3 = 2;
      }
      qword_101B10298 = v3;
      __cxa_guard_release(&qword_101B102A0);
    }
  }
  return qword_101B10298;
}

void sub_100C0F4D8(_Unwind_Exception *a1)
{
}

uint64_t sub_100C0F4F0(uint64_t a1)
{
  *(void *)a1 = off_101A48358;
  *(void *)(a1 + 48) = off_101A484D0;
  sub_100C33524(*(void **)(a1 + 1200));
  std::mutex::~mutex((std::mutex *)(a1 + 1128));
  int v2 = *(std::__shared_weak_count **)(a1 + 1120);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1104);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 1088);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*(char *)(a1 + 1079) < 0) {
    operator delete(*(void **)(a1 + 1056));
  }
  sub_10010C0E0(a1 + 1032, *(void **)(a1 + 1040));
  sub_100706DDC(a1 + 1008, *(const void ***)(a1 + 1016));
  sub_100C2F8F4(a1 + 944);
  std::mutex::~mutex((std::mutex *)(a1 + 880));
  sub_10023A670(a1 + 856, *(void **)(a1 + 864));
  sub_10023A670(a1 + 832, *(void **)(a1 + 840));
  sub_100C2F9C0(a1 + 784);
  uint64_t v5 = *(void *)(a1 + 776);
  *(void *)(a1 + 776) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = *(void *)(a1 + 768);
  *(void *)(a1 + 768) = 0;
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
  }
  sub_100C334D0(*(void **)(a1 + 752));
  sub_100C2FB80((void *)(a1 + 696));
  std::mutex::~mutex((std::mutex *)(a1 + 632));
  int v7 = *(std::__shared_weak_count **)(a1 + 616);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 600);
  if (v8) {
    sub_10004D2C8(v8);
  }
  sub_10005CD2C(a1 + 568, *(char **)(a1 + 576));
  sub_10026D080(*(char **)(a1 + 544));
  sub_10005CD2C(a1 + 512, *(char **)(a1 + 520));
  sub_10005CD2C(a1 + 488, *(char **)(a1 + 496));
  sub_10005CD2C(a1 + 464, *(char **)(a1 + 472));
  sub_10005CD2C(a1 + 440, *(char **)(a1 + 448));
  sub_1003DDBD8(*(void **)(a1 + 424));
  xpc_object_t v18 = (void **)(a1 + 392);
  sub_10077EE24(&v18);
  uint64_t v9 = *(void **)(a1 + 368);
  if (v9)
  {
    *(void *)(a1 + 376) = v9;
    operator delete(v9);
  }
  uint64_t v10 = *(void **)(a1 + 344);
  if (v10)
  {
    *(void *)(a1 + 352) = v10;
    operator delete(v10);
  }
  uint64_t v11 = *(void **)(a1 + 320);
  if (v11)
  {
    *(void *)(a1 + 328) = v11;
    operator delete(v11);
  }
  if (*(unsigned char *)(a1 + 312) && *(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  sub_1001085D8(a1 + 240);
  sub_10019D614(a1 + 216, *(void **)(a1 + 224));
  sub_10010C0E0(a1 + 184, *(void **)(a1 + 192));
  xpc_object_t v18 = (void **)(a1 + 160);
  sub_1000C56F4(&v18);
  xpc_object_t v18 = (void **)(a1 + 136);
  sub_10008A88C(&v18);
  uint64_t v12 = *(std::__shared_weak_count **)(a1 + 128);
  if (v12) {
    sub_10004D2C8(v12);
  }
  unsigned int v13 = *(std::__shared_weak_count **)(a1 + 112);
  if (v13) {
    sub_10004D2C8(v13);
  }
  unsigned int v14 = *(std::__shared_weak_count **)(a1 + 88);
  if (v14) {
    sub_10004D2C8(v14);
  }
  long long v15 = *(std::__shared_weak_count **)(a1 + 72);
  if (v15) {
    sub_10004D2C8(v15);
  }
  __int16 v16 = *(NSObject **)(a1 + 56);
  if (v16) {
    dispatch_release(v16);
  }
  PersonalityShop::~PersonalityShop((PersonalityShop *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

uint64_t sub_100C0F7B4(uint64_t a1)
{
  return sub_100C0F4F0(a1 - 48);
}

void sub_100C0F7BC(uint64_t a1)
{
  sub_100C0F4F0(a1);

  operator delete();
}

void sub_100C0F7F4(uint64_t a1)
{
  sub_100C0F4F0(a1 - 48);

  operator delete();
}

void sub_100C0F830()
{
}

void sub_100C10128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,ctu::OsLogLogger *a25,uint64_t a26,uint64_t a27,uint64_t a28,_Unwind_Exception *exception_object)
{
  uint64_t v31 = *(void *)(v30 - 128);
  *(void *)(v30 - 128) = 0;
  if (v31) {
    (*(void (**)(uint64_t))(*(void *)v31 + 8))(v31);
  }
  unsigned int v32 = *(std::__shared_weak_count **)(v30 - 144);
  if (v32) {
    sub_10004D2C8(v32);
  }
  sub_10004D2C8(v29);
  _Unwind_Resume(a1);
}

void sub_100C101A4(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v29[3], v29, (dispatch_function_t)sub_100C33614);
    __cxa_rethrow();
  }
  JUMPOUT(0x100C10570);
}

void sub_100C101D8()
{
}

void sub_100C101E8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char **a14, char **a15, uint64_t a16, char **a17, uint64_t a18, char **a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,std::mutex *a27,uint64_t a28,uint64_t a29)
{
  sub_100C33524(*(void **)(v29 + 1200));
  std::mutex::~mutex(v32);
  CFTypeID v37 = *(std::__shared_weak_count **)(v29 + 1120);
  if (v37) {
    sub_10004D2C8(v37);
  }
  id v38 = *(std::__shared_weak_count **)(v29 + 1104);
  if (v38) {
    sub_10004D2C8(v38);
  }
  id v39 = *(std::__shared_weak_count **)(v29 + 1088);
  if (v39) {
    sub_10004D2C8(v39);
  }
  if (*(char *)(v29 + 1079) < 0) {
    operator delete(*(void **)(v29 + 1056));
  }
  BOOL v40 = (uint64_t *)(v29 + 768);
  sub_10010C0E0(v29 + 1032, *(void **)(v29 + 1040));
  sub_100706DDC(v29 + 1008, *(const void ***)(v29 + 1016));
  sub_100C2F8F4(v29 + 944);
  std::mutex::~mutex(v30);
  sub_10023A670(v29 + 856, *(void **)(v29 + 864));
  sub_10023A670(v29 + 832, *(void **)(v29 + 840));
  sub_100C2F9C0(v29 + 784);
  uint64_t v41 = *(void *)(v29 + 776);
  *(void *)(v29 + 776) = 0;
  if (v41) {
    (*(void (**)(uint64_t))(*(void *)v41 + 8))(v41);
  }
  uint64_t v42 = *v40;
  *BOOL v40 = 0;
  if (v42) {
    (*(void (**)(uint64_t))(*(void *)v42 + 8))(v42);
  }
  sub_100C334D0(*(void **)(v29 + 752));
  sub_100C2FB80((void *)(v29 + 696));
  std::mutex::~mutex(a27);
  double v43 = *(std::__shared_weak_count **)(v29 + 616);
  if (v43) {
    sub_10004D2C8(v43);
  }
  CFTypeID v44 = *(std::__shared_weak_count **)(v29 + 600);
  if (v44) {
    sub_10004D2C8(v44);
  }
  sub_10005CD2C(v29 + 568, *a14);
  sub_10026D080(*a15);
  sub_10005CD2C(a16, *v33);
  sub_10005CD2C(v29 + 488, *a17);
  sub_10005CD2C(a18, *v31);
  sub_10005CD2C(v29 + 440, *a19);
  sub_1003DDBD8(*v34);
  *(void *)(v36 - 128) = v35;
  JUMPOUT(0x100C10460);
}

void sub_100C1034C()
{
}

void sub_100C10374(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,dispatch_object_t object)
{
  if (object) {
    dispatch_release(object);
  }
  uint64_t v31 = *(NSObject **)(v30 - 160);
  if (v31) {
    dispatch_release(v31);
  }
  if (*(char *)(v30 - 129) < 0) {
    operator delete(*(void **)(v30 - 152));
  }
  JUMPOUT(0x100C10528);
}

void sub_100C103A4()
{
}

void sub_100C103AC()
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(v1 - 128));
  sub_100087E88(v0);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)(v1 - 152));
  JUMPOUT(0x100C10558);
}

void sub_100C103DC()
{
}

void sub_100C10578(void *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  JUMPOUT(0x100C10570);
}

void sub_100C10588(void *a1)
{
  int v2 = a1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    buf[0] = 136315394;
    *(void *)&buf[1] = "";
    __int16 v13 = 2080;
    unsigned int v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sinit", (uint8_t *)buf, 0x16u);
  }
  uint64_t v3 = a1[3];
  dispatch_object_t v9 = v3;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    uint64_t v5 = a1;
    uint64_t v6 = a1[1];
    int v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v6 + 48;
      if (!v6) {
        uint64_t v8 = 0;
      }
      *(void *)uint64_t v10 = v8;
      uint64_t v11 = v7;
      sub_1008E4500((uint64_t)(v5 + 8), &v9);
    }
  }
  sub_100088B9C();
}

void sub_100C12888(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *a56,uint64_t a57)
{
  *(void *)(v58 + 8) = v57;
  sub_100C145F4(v59 - 208);
  sub_100C145F4(v59 - 256);
  if (a28 < 0) {
    operator delete(__p);
  }
  sub_100057D78((const void **)&a46);
  if (a57) {
    sub_10004D2C8((std::__shared_weak_count *)a57);
  }
  if (a51) {
    sub_10004D2C8((std::__shared_weak_count *)a51);
  }
  sub_100044D00((const void **)&a34);
  sub_100044D00((const void **)&a42);
  _Unwind_Resume(a1);
}

void sub_100C12E9C(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C12F68(uint64_t a1, NSObject **a2, uint64_t a3, uint64_t a4)
{
  int v7 = *a2;
  if (*a2)
  {
    dispatch_retain(v7);
    dispatch_group_enter(v7);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  uint64_t v8 = *(atomic_ullong **)(a4 + 8);
  __p[3] = *(void **)a4;
  __p[4] = v8;
  if (v8) {
    atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
  }
  dispatch_object_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C13118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C13144(void *a1, uint64_t a2, uint64_t a3, int a4, char a5)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v10 = (char *)operator new(0x80uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = off_1019C7410;
  *(_OWORD *)(v10 + 24) = 0u;
  *(_OWORD *)(v10 + 72) = 0u;
  *(_OWORD *)(v10 + 88) = 0u;
  *(_OWORD *)(v10 + 104) = 0u;
  *((void *)v10 + 14) = 0;
  *((void *)v10 + 15) = 0;
  *(_OWORD *)(v10 + 40) = 0u;
  *(_OWORD *)(v10 + 56) = 0u;
  *((_DWORD *)v10 + 20) = -1;
  v10[88] = 1;
  *((void *)v10 + 12) = 0;
  *((void *)v10 + 13) = 0;
  *a1 = v10 + 24;
  a1[1] = v10;
  v10[120] = 0;
  std::string::operator=((std::string *)v10 + 2, (const std::string *)a3);
  memset(&__str, 0, sizeof(__str));
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a2 + 120) + 24))(&cf);
  *(void *)long long v69 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFDictionaryRef v68 = 0;
  *(void *)long long buf = 0;
  sub_10004EFE4(buf, (CFTypeRef *)v69);
  if (*(void *)buf) {
    uint64_t v11 = sub_100080778;
  }
  else {
    uint64_t v11 = 0;
  }
  if (v11) {
    sub_100058140((const void **)&v68, (const void **)buf);
  }
  sub_100057D78((const void **)buf);
  CFDictionaryRef theDict = v68;
  CFDictionaryRef v68 = 0;
  sub_100057D78((const void **)&v68);
  sub_1000577C4((const void **)v69);
  sub_1000577C4(&cf);
  if (theDict) {
    uint64_t v12 = sub_100080778;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"type");
    CFStringRef v14 = Value;
    if (!Value || (CFTypeID v15 = CFGetTypeID(Value), v15 != CFStringGetTypeID()) || CFStringCompare(v14, @"sim", 0))
    {
      __int16 v16 = *(NSObject **)(a2 + 40);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
        BOOL v18 = (v17 & 0x80u) != 0;
        if ((v17 & 0x80u) != 0) {
          uint64_t v17 = *(void *)(a3 + 8);
        }
        if (v18) {
          uint64_t v19 = *(const char **)a3;
        }
        else {
          uint64_t v19 = (const char *)a3;
        }
        if (v17) {
          xpc_object_t v20 = v19;
        }
        else {
          xpc_object_t v20 = "<invalid>";
        }
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2080;
        long long v71 = v20;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#W %s%sPersonality %s is not yet marked as SIM type", buf, 0x20u);
      }
    }
    uint64_t v21 = (BOOL *)CFDictionaryGetValue(theDict, @"eap_aka");
    xpc_object_t v22 = v21;
    buf[0] = 0;
    if (v21)
    {
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v22, v24);
      }
    }
    BOOL v64 = buf[0] != 0;
    id v25 = (BOOL *)CFDictionaryGetValue(theDict, @"no_src");
    uint64_t v26 = v25;
    buf[0] = 0;
    if (v25)
    {
      CFTypeID v27 = CFGetTypeID(v25);
      if (v27 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v26, v28);
      }
    }
    BOOL v63 = buf[0] == 0;
    uint64_t v29 = (BOOL *)CFDictionaryGetValue(theDict, @"disabled_src");
    uint64_t v30 = v29;
    buf[0] = 0;
    if (v29)
    {
      CFTypeID v31 = CFGetTypeID(v29);
      if (v31 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v30, v32);
      }
    }
    BYTE4(v62) = buf[0] != 0;
    uint64_t v33 = (BOOL *)CFDictionaryGetValue(theDict, @"unauthorized_src");
    BOOL v34 = v33;
    buf[0] = 0;
    if (v33)
    {
      CFTypeID v35 = CFGetTypeID(v33);
      if (v35 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v34, v36);
      }
    }
    BOOL v37 = buf[0] != 0;
    CFDictionaryGetValue(theDict, @"mdn");
    LOBYTE(v62) = v37;
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)buf;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&buf[15];
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = buf[23];
    id v38 = (BOOL *)CFDictionaryGetValue(theDict, @"esim");
    id v39 = v38;
    buf[0] = 0;
    if (v38)
    {
      CFTypeID v40 = CFGetTypeID(v38);
      if (v40 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v39, v41);
      }
    }
    BYTE4(v61) = buf[0] != 0;
    uint64_t v42 = (BOOL *)CFDictionaryGetValue(theDict, @"provisioning");
    double v43 = v42;
    buf[0] = 0;
    if (v42)
    {
      CFTypeID v44 = CFGetTypeID(v42);
      if (v44 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)buf, v43, v45);
      }
    }
    LOBYTE(v61) = buf[0] != 0;
    char v46 = (BOOL *)CFDictionaryGetValue(theDict, @"offloading");
    CFNumberRef v47 = v46;
    buf[0] = 0;
    if (v46 && (CFTypeID v48 = CFGetTypeID(v46), v48 == CFBooleanGetTypeID()))
    {
      ctu::cf::assign((ctu::cf *)buf, v47, v49);
      BOOL v50 = buf[0] != 0;
    }
    else
    {
      BOOL v50 = 0;
    }
    unsigned int v51 = (BOOL *)CFDictionaryGetValue(theDict, @"data-only-plan");
    int64_t v52 = v51;
    buf[0] = 0;
    if (v51)
    {
      CFTypeID v53 = CFGetTypeID(v51);
      if (v53 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)buf, v52, v54);
        LOBYTE(v52) = buf[0] != 0;
      }
      else
      {
        LOBYTE(v52) = 0;
      }
    }
  }
  else
  {
    uint64_t v61 = 0;
    uint64_t v62 = 0;
    BOOL v50 = 0;
    LOBYTE(v52) = 0;
    BOOL v63 = 1;
    BOOL v64 = 0;
  }
  int v55 = a4;
  subscriber::generateUuidStrFromSlotId();
  uint64_t v56 = a2;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  uint64_t v57 = *(void *)buf;
  *(void *)long long v69 = *(void *)&buf[8];
  *(void *)&v69[7] = *(void *)&buf[15];
  uint8_t v58 = buf[23];
  if (v10[47] < 0) {
    operator delete(*((void **)v10 + 3));
  }
  uint64_t v59 = *(void *)v69;
  *((void *)v10 + 3) = v57;
  *((void *)v10 + 4) = v59;
  *(void *)(v10 + 39) = *(void *)&v69[7];
  v10[47] = v58;
  sub_1000558F4((const void **)&v68);
  int v60 = 0;
  *((_WORD *)v10 + 36) = 0;
  *((_DWORD *)v10 + 19) = v55;
  if ((a5 & 1) == 0)
  {
    int v60 = *(_DWORD *)(v56 + 624);
    *(_DWORD *)(v56 + 624) = v60 + 1;
  }
  *((_DWORD *)v10 + 20) = v60;
  v10[84] = v64;
  v10[88] = v63;
  v10[89] = BYTE4(v62);
  v10[90] = v62;
  std::string::operator=((std::string *)v10 + 4, &__str);
  v10[85] = BYTE4(v61);
  v10[86] = v61;
  v10[87] = v50;
  v10[120] = (char)v52;
  sub_100057D78((const void **)&theDict);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100C137D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, int a14, const void *a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a15);
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_10004D2C8(v33);
  _Unwind_Resume(a1);
}

void sub_100C1387C(void *a1, uint64_t a2, const std::string *a3, char a4)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v8 = (char *)operator new(0x80uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_1019C7410;
  *(_OWORD *)(v8 + 24) = 0u;
  dispatch_object_t v9 = (void **)(v8 + 24);
  *(_OWORD *)(v8 + 72) = 0u;
  *(_OWORD *)(v8 + 88) = 0u;
  *(_OWORD *)(v8 + 104) = 0u;
  *((void *)v8 + 14) = 0;
  *((void *)v8 + 15) = 0;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *((_DWORD *)v8 + 20) = -1;
  v8[88] = 1;
  *((void *)v8 + 12) = 0;
  *((void *)v8 + 13) = 0;
  *a1 = v8 + 24;
  a1[1] = v8;
  v8[120] = 0;
  std::string::operator=((std::string *)v8 + 2, a3);
  memset(&__str, 0, sizeof(__str));
  CFDictionaryRef v15 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a2 + 120) + 24))(&cf);
  CFTypeRef v18 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFDictionaryRef v17 = 0;
  *(void *)uint64_t v19 = 0;
  sub_10004EFE4(v19, &v18);
  if (*(void *)v19) {
    uint64_t v10 = sub_100080778;
  }
  else {
    uint64_t v10 = 0;
  }
  if (v10) {
    sub_100058140((const void **)&v17, (const void **)v19);
  }
  sub_100057D78((const void **)v19);
  CFDictionaryRef v11 = v17;
  CFDictionaryRef v15 = v17;
  CFDictionaryRef v17 = 0;
  sub_100057D78((const void **)&v17);
  sub_1000577C4(&v18);
  sub_1000577C4(&cf);
  if (v11) {
    uint64_t v12 = sub_100080778;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    CFDictionaryGetValue(v11, @"mdn");
    memset(v19, 0, sizeof(v19));
    ctu::cf::assign();
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)v19;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 7) = *(void *)&v19[15];
    *((unsigned char *)&__str.__r_.__value_.__s + 23) = v19[23];
  }
  if (a4) {
    sub_100058DB0(v19, "");
  }
  else {
    sub_100C13B78((uint64_t)v19);
  }
  if (v8[47] < 0) {
    operator delete(*v9);
  }
  int v13 = 0;
  *(_OWORD *)dispatch_object_t v9 = *(_OWORD *)v19;
  *((void *)v8 + 5) = *(void *)&v19[16];
  *((_WORD *)v8 + 36) = 256;
  *((_DWORD *)v8 + 19) = 0;
  if ((a4 & 1) == 0)
  {
    int v13 = *(_DWORD *)(a2 + 624);
    *(_DWORD *)(a2 + 624) = v13 + 1;
  }
  *((_DWORD *)v8 + 20) = v13;
  std::string::operator=((std::string *)v8 + 4, &__str);
  sub_100057D78((const void **)&v15);
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100C13AFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10004D2C8(v27);
  _Unwind_Resume(a1);
}

const void **sub_100C13B78(uint64_t a1)
{
  CFUUIDRef v4 = CFUUIDCreate(0);
  CFStringRef v3 = CFUUIDCreateString(0, v4);
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  *(void *)(a1 + 16) = v6;
  sub_1000558F4((const void **)&v3);
  return sub_10012577C((const void **)&v4);
}

void sub_100C13BF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a10);
  sub_10012577C(&a11);
  _Unwind_Resume(a1);
}

BOOL sub_100C13C24(uint64_t a1)
{
  if (sub_10001D294((unsigned __int8 *)(*(void *)a1 + 24), (unsigned __int8 *)&kEmergencyPersonalityId)) {
    return 1;
  }
  CFStringRef v3 = (unsigned __int8 *)(*(void *)a1 + 24);

  return sub_10001D294(v3, (unsigned __int8 *)&kEmergency2PersonalityId);
}

uint64_t sub_100C13C8C(capabilities::ct *a1, char ***a2, int64x2_t *a3)
{
  uint64_t v6 = (capabilities::ct *)capabilities::ct::supportsCellRadio(a1);
  if (!v6) {
    return 0;
  }
  int v7 = **a2;
  uint64_t v8 = (*a2)[1];
  if (v7 != v8)
  {
    while (*(unsigned char *)(*(void *)v7 + 49) || *(_DWORD *)(*(void *)v7 + 52) != 1)
    {
      v7 += 16;
      if (v7 == v8) {
        goto LABEL_13;
      }
    }
  }
  if (v7 == v8)
  {
LABEL_13:
    CFDictionaryRef v11 = 0;
  }
  else
  {
    uint64_t v10 = *(void *)v7;
    CFDictionaryRef v11 = (std::__shared_weak_count *)*((void *)v7 + 1);
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v10)
    {
      uint64_t v9 = 0;
      goto LABEL_59;
    }
  }
  long long v86 = 0uLL;
  sub_100C13144(&v86, (uint64_t)a1, (uint64_t)&kEmergencyPersonalityId, 1, 0);
  uint64_t v12 = *a2;
  long long v13 = v86;
  CFStringRef v14 = (PersonalityInfo *)v86;
  *(unsigned char *)(v86 + 64) = 0;
  CFDictionaryRef v15 = (std::__shared_weak_count *)*((void *)&v13 + 1);
  if (*((void *)&v13 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v16 = v12[2];
  CFDictionaryRef v17 = v12[1];
  if (v17 >= v16)
  {
    long long v77 = v13;
    uint64_t v19 = (v17 - *v12) >> 4;
    unint64_t v20 = v19 + 1;
    if ((unint64_t)(v19 + 1) >> 60) {
      sub_10006A748();
    }
    uint64_t v21 = v16 - *v12;
    if (v21 >> 3 > v20) {
      unint64_t v20 = v21 >> 3;
    }
    if ((unint64_t)v21 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v22 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v22 = v20;
    }
    *(void *)&long long v89 = v12 + 2;
    CFTypeID v23 = (char *)sub_10006A794((uint64_t)(v12 + 2), v22);
    CFBooleanRef v24 = &v23[16 * v19];
    *(void *)long long buf = v23;
    char v88 = &v23[16 * v25];
    *(_OWORD *)CFBooleanRef v24 = v77;
    *(void *)&uint8_t buf[16] = v24 + 16;
    CFTypeID v27 = *v12;
    for (uint64_t i = v12[1]; i != v27; *((void *)i + 1) = 0)
    {
      long long v28 = *((_OWORD *)i - 1);
      i -= 16;
      *((_OWORD *)v24 - 1) = v28;
      v24 -= 16;
      *(void *)uint64_t i = 0;
    }
    *(void *)&uint8_t buf[8] = v24;
    uint64_t v29 = *v12;
    std::__shared_weak_count *v12 = v24;
    *(void *)&uint8_t buf[8] = v29;
    uint64_t v30 = v12[1];
    v12[1] = *(char **)&buf[16];
    uint64_t v31 = *(void *)&buf[8];
    *(void *)&uint8_t buf[16] = v30;
    CFBooleanRef v32 = v12[2];
    v12[2] = v88;
    char v88 = v32;
    *(void *)long long buf = v31;
    CFTypeRef v18 = v12[1];
    sub_10019E528((uint64_t)buf);
  }
  else
  {
    *(void *)CFDictionaryRef v17 = v14;
    *((void *)v17 + 1) = *((void *)&v13 + 1);
    CFTypeRef v18 = v17 + 16;
    v12[1] = v17 + 16;
  }
  v12[1] = v18;
  uint64_t v33 = *((void *)a1 + 5);
  if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v34 = subscriber::asString();
    int v35 = *((_DWORD *)v14 + 14);
    uint64_t v36 = PersonalityInfo::logPrefix(v14);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    char v88 = (char *)v34;
    LOWORD(v89) = 1024;
    *(_DWORD *)((char *)&v89 + 2) = v35;
    WORD3(v89) = 2080;
    *((void *)&v89 + 1) = v36;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I %s%sAdded emergency personality on slot %s [%d] %s", buf, 0x30u);
  }
  if (*((char *)&kEmergencyPersonalityId + 23) < 0)
  {
    sub_10004FC84(__dst, kEmergencyPersonalityId, *((void *)&kEmergencyPersonalityId + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)&kEmergencyPersonalityId;
    uint64_t v80 = *((void *)&kEmergencyPersonalityId + 2);
  }
  char v81 = 0;
  if (SHIBYTE(v80) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
    char v37 = v81;
  }
  else
  {
    char v37 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v83 = v80;
  }
  char v84 = v37;
  *(void *)&long long v85 = v14;
  *((void *)&v85 + 1) = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v83) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v83;
  }
  LOBYTE(v88) = v84;
  long long v89 = v85;
  long long v85 = 0uLL;
  unint64_t v38 = a3->u64[1];
  if (v38 >= a3[1].i64[0])
  {
    uint64_t v40 = sub_100C2FC44(a3, (long long *)buf);
    CFBooleanRef v41 = (std::__shared_weak_count *)*((void *)&v89 + 1);
    a3->i64[1] = v40;
    if (v41) {
      sub_10004D2C8(v41);
    }
  }
  else
  {
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_10004FC84((unsigned char *)a3->i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      long long v39 = *(_OWORD *)buf;
      *(void *)(v38 + 16) = *(void *)&buf[16];
      *(_OWORD *)unint64_t v38 = v39;
    }
    *(unsigned char *)(v38 + 24) = (_BYTE)v88;
    *(_OWORD *)(v38 + 32) = v89;
    long long v89 = 0uLL;
    a3->i64[1] = v38 + 48;
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v6 = (capabilities::ct *)*((void *)&v85 + 1);
  if (*((void *)&v85 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v85 + 1));
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete(__dst[0]);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  uint64_t v9 = 1;
LABEL_59:
  if (!capabilities::ct::supportsGemini(v6)) {
    goto LABEL_71;
  }
  uint64_t v42 = **a2;
  double v43 = (*a2)[1];
  if (v42 != v43)
  {
    while (*(unsigned char *)(*(void *)v42 + 49) || *(_DWORD *)(*(void *)v42 + 52) != 2)
    {
      v42 += 16;
      if (v42 == v43) {
        goto LABEL_74;
      }
    }
  }
  if (v42 == v43)
  {
LABEL_74:
    CFBooleanRef v45 = 0;
  }
  else
  {
    uint64_t v44 = *(void *)v42;
    CFBooleanRef v45 = (std::__shared_weak_count *)*((void *)v42 + 1);
    if (v45) {
      atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v44)
    {
      if (!v45) {
        goto LABEL_71;
      }
      goto LABEL_70;
    }
  }
  long long v86 = 0uLL;
  sub_100C13144(&v86, (uint64_t)a1, (uint64_t)&kEmergency2PersonalityId, 2, 0);
  CFNumberRef v47 = *a2;
  long long v48 = v86;
  CFBooleanRef v49 = (PersonalityInfo *)v86;
  *(unsigned char *)(v86 + 64) = 0;
  BOOL v50 = (std::__shared_weak_count *)*((void *)&v48 + 1);
  if (*((void *)&v48 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v48 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  unsigned int v51 = v47[2];
  int64_t v52 = v47[1];
  if (v52 >= v51)
  {
    long long v78 = v48;
    uint64_t v54 = (v52 - *v47) >> 4;
    unint64_t v55 = v54 + 1;
    if ((unint64_t)(v54 + 1) >> 60) {
      sub_10006A748();
    }
    uint64_t v56 = v51 - *v47;
    if (v56 >> 3 > v55) {
      unint64_t v55 = v56 >> 3;
    }
    if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v57 = v55;
    }
    *(void *)&long long v89 = v47 + 2;
    uint8_t v58 = (char *)sub_10006A794((uint64_t)(v47 + 2), v57);
    uint64_t v59 = &v58[16 * v54];
    *(void *)long long buf = v58;
    char v88 = &v58[16 * v60];
    *(_OWORD *)uint64_t v59 = v78;
    *(void *)&uint8_t buf[16] = v59 + 16;
    uint64_t v62 = *v47;
    for (uint64_t j = v47[1]; j != v62; *((void *)j + 1) = 0)
    {
      long long v63 = *((_OWORD *)j - 1);
      j -= 16;
      *((_OWORD *)v59 - 1) = v63;
      v59 -= 16;
      *(void *)uint64_t j = 0;
    }
    *(void *)&uint8_t buf[8] = v59;
    BOOL v64 = *v47;
    BOOL *v47 = v59;
    *(void *)&uint8_t buf[8] = v64;
    uint64_t v65 = v47[1];
    v47[1] = *(char **)&buf[16];
    uint64_t v66 = *(void *)&buf[8];
    *(void *)&uint8_t buf[16] = v65;
    long long v67 = v47[2];
    v47[2] = v88;
    char v88 = v67;
    *(void *)long long buf = v66;
    CFTypeID v53 = v47[1];
    sub_10019E528((uint64_t)buf);
  }
  else
  {
    *(void *)int64_t v52 = v49;
    *((void *)v52 + 1) = *((void *)&v48 + 1);
    CFTypeID v53 = v52 + 16;
    v47[1] = v52 + 16;
  }
  v47[1] = v53;
  CFDictionaryRef v68 = *((void *)a1 + 5);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v69 = subscriber::asString();
    int v70 = *((_DWORD *)v49 + 14);
    uint64_t v71 = PersonalityInfo::logPrefix(v49);
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    char v88 = (char *)v69;
    LOWORD(v89) = 1024;
    *(_DWORD *)((char *)&v89 + 2) = v70;
    WORD3(v89) = 2080;
    *((void *)&v89 + 1) = v71;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#I %s%sAdded emergency personality on slot %s [%d] %s", buf, 0x30u);
  }
  if (*((char *)&kEmergency2PersonalityId + 23) < 0)
  {
    sub_10004FC84(__dst, kEmergency2PersonalityId, *((void *)&kEmergency2PersonalityId + 1));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)&kEmergency2PersonalityId;
    uint64_t v80 = *((void *)&kEmergency2PersonalityId + 2);
  }
  char v81 = 0;
  if (SHIBYTE(v80) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
    char v72 = v81;
  }
  else
  {
    char v72 = 0;
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v83 = v80;
  }
  char v84 = v72;
  *(void *)&long long v85 = v49;
  *((void *)&v85 + 1) = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(v83) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v83;
  }
  LOBYTE(v88) = v84;
  long long v89 = v85;
  long long v85 = 0uLL;
  unint64_t v73 = a3->u64[1];
  if (v73 >= a3[1].i64[0])
  {
    uint64_t v75 = sub_100C2FC44(a3, (long long *)buf);
    long long v76 = (std::__shared_weak_count *)*((void *)&v89 + 1);
    a3->i64[1] = v75;
    if (v76) {
      sub_10004D2C8(v76);
    }
  }
  else
  {
    if ((buf[23] & 0x80000000) != 0)
    {
      sub_10004FC84((unsigned char *)a3->i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
    }
    else
    {
      long long v74 = *(_OWORD *)buf;
      *(void *)(v73 + 16) = *(void *)&buf[16];
      *(_OWORD *)unint64_t v73 = v74;
    }
    *(unsigned char *)(v73 + 24) = (_BYTE)v88;
    *(_OWORD *)(v73 + 32) = v89;
    long long v89 = 0uLL;
    a3->i64[1] = v73 + 48;
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (*((void *)&v85 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v85 + 1));
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v80) < 0) {
    operator delete(__dst[0]);
  }
  if (v50) {
    sub_10004D2C8(v50);
  }
  uint64_t v9 = 1;
  if (!v45) {
    goto LABEL_71;
  }
LABEL_70:
  sub_10004D2C8(v45);
LABEL_71:
  if (v11) {
    sub_10004D2C8(v11);
  }
  return v9;
}

void sub_100C144A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  *(void *)(v27 + 8) = v30;
  sub_100C145F4((uint64_t)&a26);
  sub_100C145F4((uint64_t)&a18);
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v28) {
    sub_10004D2C8(v28);
  }
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C145A0(int64x2_t *a1, long long *a2)
{
  unint64_t v3 = a1->u64[1];
  if (v3 >= a1[1].i64[0])
  {
    uint64_t result = sub_100C2FC44(a1, a2);
  }
  else
  {
    sub_100C2FE28((void *)a1->i64[1], a2);
    uint64_t result = v3 + 48;
    a1->i64[1] = v3 + 48;
  }
  a1->i64[1] = result;
  return result;
}

void sub_100C145EC(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100C145F4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100C14634(uint64_t a1, void *a2, const __CFString *a3, uint64_t a4)
{
  uint64_t v44 = 0;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  *(_OWORD *)CFBooleanRef v32 = 0u;
  long long v33 = 0u;
  memset(v31, 0, sizeof(v31));
  long long v30 = 0u;
  sub_10004BD84((uint64_t)&v30);
  if (a2[2])
  {
    CFMutableArrayRef v29 = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFMutableArrayRef v9 = v29;
      CFMutableArrayRef v29 = Mutable;
      *(void *)long long buf = v9;
      sub_1000440D4((const void **)buf);
    }
    uint64_t v12 = (void *)*a2;
    uint64_t v10 = a2 + 1;
    CFDictionaryRef v11 = v12;
    if (v12 != v10)
    {
      uint64_t v13 = 0;
      while (1)
      {
        CFStringRef v14 = v29;
        if (*((char *)v11 + 55) < 0)
        {
          sub_10004FC84(__p, (void *)v11[4], v11[5]);
        }
        else
        {
          *(_OWORD *)std::string __p = *((_OWORD *)v11 + 2);
          uint64_t v27 = v11[6];
        }
        if (SHIBYTE(v27) < 0)
        {
          sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long __dst = *(_OWORD *)__p;
          uint64_t v47 = v27;
        }
        CFBooleanRef v45 = 0;
        if (SHIBYTE(v47) < 0)
        {
          sub_10004FC84(buf, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          *(_OWORD *)long long buf = __dst;
          *(void *)&uint8_t buf[16] = v47;
        }
        long long v48 = 0;
        if (ctu::cf::convert_copy())
        {
          CFDictionaryRef v15 = v45;
          CFBooleanRef v45 = v48;
          CFBooleanRef v49 = v15;
          sub_1000558F4(&v49);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        BOOL value = v45;
        CFBooleanRef v45 = 0;
        sub_1000558F4((const void **)&v45);
        if (SHIBYTE(v47) < 0) {
          operator delete((void *)__dst);
        }
        CFArrayAppendValue(v14, value);
        sub_1000558F4((const void **)&value);
        if ((SHIBYTE(v27) & 0x80000000) == 0) {
          break;
        }
        operator delete(__p[0]);
        if (v13) {
          goto LABEL_25;
        }
LABEL_26:
        int v16 = *((char *)v11 + 55);
        if (v16 >= 0) {
          uint64_t v17 = (uint64_t)(v11 + 4);
        }
        else {
          uint64_t v17 = v11[4];
        }
        if (v16 >= 0) {
          uint64_t v18 = *((unsigned __int8 *)v11 + 55);
        }
        else {
          uint64_t v18 = v11[5];
        }
        sub_10004B96C(v31, v17, v18);
        uint64_t v19 = (void *)v11[1];
        if (v19)
        {
          do
          {
            unint64_t v20 = v19;
            uint64_t v19 = (void *)*v19;
          }
          while (v19);
        }
        else
        {
          do
          {
            unint64_t v20 = (void *)v11[2];
            BOOL v21 = *v20 == (void)v11;
            CFDictionaryRef v11 = v20;
          }
          while (!v21);
        }
        ++v13;
        CFDictionaryRef v11 = v20;
        if (v20 == v10) {
          goto LABEL_38;
        }
      }
      if (!v13) {
        goto LABEL_26;
      }
LABEL_25:
      sub_10004B96C(v31, (uint64_t)", ", 2);
      goto LABEL_26;
    }
LABEL_38:
    sub_1000825C4(*(os_unfair_lock_s **)(a1 + 104), a3, v29, 0, 0, 0, 0, 0);
    sub_1000440D4((const void **)&v29);
  }
  else
  {
    sub_1000832B0(*(os_unfair_lock_s **)(a1 + 104), a3, 0, 0, 0);
  }
  unint64_t v22 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)v31 + 8, &__dst);
    CFTypeID v23 = v47 >= 0 ? &__dst : (long long *)__dst;
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    uint64_t v51 = a4;
    __int16 v52 = 2080;
    CFTypeID v53 = v23;
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s%s%s updated with: [%s]", buf, 0x2Au);
    if (SHIBYTE(v47) < 0) {
      operator delete((void *)__dst);
    }
  }
  *(void *)((char *)&v31[-1]
  *(void *)&v31[0] = v24;
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100C14AE0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
}

const void **sub_100C14B7C(uint64_t a1, uint64_t **a2, const __CFString *a3, uint64_t a4)
{
  sub_100083254(*(os_unfair_lock_s **)(a1 + 104), a3, 0, 0, 0, &v37);
  *(void *)long long buf = v37;
  if (v37) {
    CFRetain(v37);
  }
  std::string __p = 0;
  *(void *)&long long v22 = 0;
  sub_100044D6C(&v22, (CFTypeRef *)buf);
  if ((void)v22) {
    int v7 = sub_100083F10;
  }
  else {
    int v7 = 0;
  }
  if (v7) {
    sub_100449580((const void **)&__p, (const void **)&v22);
  }
  sub_100044D00((const void **)&v22);
  CFArrayRef v38 = (const __CFArray *)__p;
  std::string __p = 0;
  sub_100044D00((const void **)&__p);
  sub_1000577C4((const void **)buf);
  sub_1000577C4(&v37);
  if (v38) {
    uint64_t v8 = sub_100083F10;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    uint64_t v36 = 0;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)xpc_object_t v24 = 0u;
    long long v25 = 0u;
    memset(v23, 0, sizeof(v23));
    long long v22 = 0u;
    sub_10004BD84((uint64_t)&v22);
    CFIndex Count = CFArrayGetCount(v38);
    if (Count)
    {
      for (CFIndex i = 0; i != Count; ++i)
      {
        std::string __p = 0;
        uint64_t v20 = 0;
        uint64_t v21 = 0;
        CFArrayGetValueAtIndex(v38, i);
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        CFDictionaryRef v11 = *(void **)buf;
        int v18 = *(_DWORD *)&buf[16];
        HIBYTE(v18) = buf[19];
        if ((char)buf[23] < 0)
        {
          sub_10004FC84(&__p, *(void **)buf, *(unint64_t *)&buf[8]);
          operator delete(v11);
        }
        else
        {
          std::string __p = *(void **)buf;
          uint64_t v20 = *(void *)&buf[8];
          LODWORD(v21) = v18;
          *(_DWORD *)((char *)&v21 + 3) = *(_DWORD *)&buf[19];
          HIBYTE(v21) = buf[23];
        }
        sub_100C36978(a2, &__p, (uint64_t)&__p);
        if (i) {
          sub_10004B96C(v23, (uint64_t)", ", 2);
        }
        if (v21 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        if (v21 >= 0) {
          uint64_t v13 = HIBYTE(v21);
        }
        else {
          uint64_t v13 = v20;
        }
        sub_10004B96C(v23, (uint64_t)p_p, v13);
        if (SHIBYTE(v21) < 0) {
          operator delete(__p);
        }
      }
    }
    CFStringRef v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BC98((uint64_t)v23 + 8, &__p);
      CFDictionaryRef v15 = v21 >= 0 ? &__p : (void **)__p;
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2048;
      CFIndex v40 = Count;
      __int16 v41 = 2080;
      uint64_t v42 = a4;
      __int16 v43 = 2080;
      uint64_t v44 = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%sRecovered %zu %s: [%s]", buf, 0x34u);
      if (SHIBYTE(v21) < 0) {
        operator delete(__p);
      }
    }
    *(void *)((char *)&v23[-1]
    *(void *)&v23[0] = v16;
    if (SHIBYTE(v25) < 0) {
      operator delete(v24[1]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  return sub_100044D00((const void **)&v38);
}

void sub_100C14FC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10008248C((uint64_t)va);
  sub_100044D00((const void **)(v7 - 168));
  _Unwind_Resume(a1);
}

void sub_100C1505C(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 608);
  long long v5 = (std::__shared_weak_count *)operator new(0x38uLL);
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__vftable = 0;
  uint64_t v6 = (uint64_t)&v5[1];
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_101A48FC8;
  v5[1].__shared_owners_ = 0;
  v5[1].__shared_weak_owners_ = 0;
  sub_1005B26C0(&v5[1].__vftable, *(void **)v4, *(void **)(v4 + 8), (uint64_t)(*(void *)(v4 + 8) - *(void *)v4) >> 4);
  LOBYTE(v5[2].__vftable) = *(unsigned char *)(v4 + 24);
  uint64_t v17 = v5 + 1;
  int v18 = v5;
  if (a2)
  {
    sub_100C1F6F8((void *)(a1 + 696), v6, (uint64_t)v5);
  }
  else
  {
    std::mutex::lock((std::mutex *)(a1 + 632));
    sub_100C1F6F8((void *)(a1 + 696), v6, (uint64_t)v5);
    std::mutex::unlock((std::mutex *)(a1 + 632));
  }
  uint64_t v7 = *(void **)(a1 + 744);
  if (v7 == (void *)(a1 + 752))
  {
    uint64_t v8 = 0;
  }
  else
  {
    uint64_t v8 = 0;
    do
    {
      CFMutableArrayRef v9 = (std::__shared_weak_count *)v7[8];
      if (v9)
      {
        uint64_t v10 = std::__shared_weak_count::lock(v9);
        if (v10)
        {
          CFDictionaryRef v11 = v10;
          uint64_t v12 = v7[7];
          if (v12)
          {
            (*(void (**)(uint64_t, std::__shared_weak_count **))(*(void *)v12 + 24))(v12, &v17);
            ++v8;
          }
          sub_10004D2C8(v11);
        }
      }
      uint64_t v13 = (void *)v7[1];
      if (v13)
      {
        do
        {
          CFStringRef v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          CFStringRef v14 = (void *)v7[2];
          BOOL v15 = *v14 == (void)v7;
          uint64_t v7 = v14;
        }
        while (!v15);
      }
      uint64_t v7 = v14;
    }
    while (v14 != (void *)(a1 + 752));
  }
  xpc_object_t v16 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long buf = 136315650;
    uint64_t v20 = "";
    __int16 v21 = 2080;
    long long v22 = "";
    __int16 v23 = 2048;
    uint64_t v24 = v8;
    _os_log_debug_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEBUG, "#D %s%s%zu observers updated with new set", buf, 0x20u);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
}

void sub_100C15278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  std::mutex::unlock(v11);
  sub_10004D2C8(v10);
  _Unwind_Resume(a1);
}

void sub_100C152CC(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEBUG))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    _os_log_debug_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEBUG, "#D %s%sprocessSimStateChanged", (uint8_t *)&buf, 0x16u);
  }
  BOOL v159 = sub_100C16C5C((capabilities::ct *)v1);
  int v3 = 0;
  unint64_t v4 = 0;
  int64x2_t v170 = 0uLL;
  unint64_t v171 = 0;
  uint64_t v167 = v1;
  while (v4 < sub_100C0F470())
  {
    int v6 = subscriber::instanceAsSimSlot((subscriber *)v4, v5);
    int v7 = v6;
    uint64_t v9 = *(void *)(v1 + 136);
    uint64_t v8 = *(void *)(v1 + 144);
    if (v9 != v8)
    {
      while (*(_DWORD *)v9 != v6)
      {
        v9 += 168;
        if (v9 == v8) {
          goto LABEL_12;
        }
      }
    }
    if (v9 == v8)
    {
LABEL_12:
      uint64_t v165 = 0;
      uint64_t v166 = 0;
      BOOL v11 = 0;
      int v10 = 0;
      int v169 = 0;
      memset(&__dst, 0, sizeof(__dst));
    }
    else
    {
      int v10 = *(_DWORD *)(v9 + 8);
      memset(&__dst, 0, sizeof(__dst));
      if (*(char *)(v9 + 95) < 0)
      {
        sub_10004FC84(&__dst, *(void **)(v9 + 72), *(void *)(v9 + 80));
        uint64_t v8 = *(void *)(v1 + 144);
      }
      else
      {
        std::string __dst = *(std::string *)(v9 + 72);
      }
      if (v9 == v8)
      {
        BOOL v11 = 0;
        uint64_t v165 = 0;
        uint64_t v166 = 0;
        uint64_t v8 = v9;
      }
      else
      {
        uint64_t v13 = *(void *)(v9 + 16);
        uint64_t v12 = *(void *)(v9 + 24);
        if (v13 == v12)
        {
          BOOL v11 = 0;
        }
        else
        {
          uint64_t v14 = v13 + 4;
          do
          {
            int v15 = *(_DWORD *)(v14 - 4);
            BOOL v11 = v15 == 2;
            BOOL v16 = v15 == 2 || v14 == v12;
            v14 += 4;
          }
          while (!v16);
        }
        if (*(_DWORD *)(v9 + 64))
        {
          unsigned int isEsimCapable = subscriber::isEsimCapable();
          uint64_t v8 = *(void *)(v1 + 144);
          uint64_t v165 = 256;
          uint64_t v166 = isEsimCapable;
        }
        else
        {
          uint64_t v165 = 0;
          uint64_t v166 = 0;
        }
      }
      if (v9 == v8) {
        int v169 = 0;
      }
      else {
        int v169 = *(_DWORD *)(v9 + 12);
      }
    }
    if (sub_100C16CE8((os_unfair_lock_s *)v1, (void **)&__dst.__r_.__value_.__l.__data_))
    {
      int v18 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = subscriber::asString();
        std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = __dst.__r_.__value_.__l.__size_;
        }
        p_dst = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        BOOL v16 = size == 0;
        long long v22 = "<invalid>";
        if (!v16) {
          long long v22 = (const char *)p_dst;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        uint64_t v184 = v19;
        *(_WORD *)v185 = 2080;
        *(void *)&v185[2] = v22;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%s%s: abandoned SIM %s in slot - suppressed", (uint8_t *)&buf, 0x2Au);
      }
      memset(&buf, 0, sizeof(buf));
      std::string::operator=(&__dst, &buf);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      int v169 = 3;
      int v10 = 1;
    }
    if (v7 != 1 || !sub_100C16D58(v1) || subscriber::isSimPresent())
    {
      int v23 = *(_DWORD *)(*(void *)(v1 + 368) + 4 * v4);
      v168 = (subscriber *)v4;
      int v24 = *(_DWORD *)(*(void *)(v1 + 344) + 4 * v4);
      long long v25 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        v161 = v25;
        int v162 = v3;
        uint64_t v26 = subscriber::asString();
        std::string::size_type v27 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v27 = __dst.__r_.__value_.__l.__size_;
        }
        long long v28 = &__dst;
        if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          long long v28 = (std::string *)__dst.__r_.__value_.__r.__words[0];
        }
        if (v27) {
          long long v29 = (const char *)v28;
        }
        else {
          long long v29 = "<invalid>";
        }
        uint64_t v30 = subscriber::asString();
        if (v24 == v10)
        {
          v160 = ":";
          long long v31 = "simstate unchanged";
        }
        else
        {
          long long v31 = (const char *)subscriber::asString();
          v160 = "->";
        }
        uint64_t v32 = subscriber::asString();
        if (v23 == v169)
        {
          long long v33 = ":";
          long long v34 = "unchanged";
        }
        else
        {
          long long v34 = (const char *)subscriber::asString();
          long long v33 = "->";
        }
        uint64_t v35 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136317698;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        uint64_t v184 = v26;
        *(_WORD *)v185 = 2080;
        *(void *)&v185[2] = v29;
        *(_WORD *)&v185[10] = 2080;
        *(void *)&v185[12] = v30;
        __int16 v186 = 2080;
        v187 = v31;
        __int16 v188 = 2080;
        v189 = v160;
        __int16 v190 = 2080;
        uint64_t v191 = v32;
        __int16 v192 = 2080;
        v193 = v34;
        __int16 v194 = 2080;
        v195 = v33;
        __int16 v196 = 2080;
        uint64_t v197 = v35;
        _os_log_impl((void *)&_mh_execute_header, v161, OS_LOG_TYPE_DEFAULT, "#I %s%s--> slot %s update: iccid:'%s' (%s) %s%s%s; tray %s%s%s",
          (uint8_t *)&buf,
          0x70u);
        uint64_t v1 = v167;
        int v3 = v162;
      }
      unint64_t v163 = v165 | v166 | v163 & 0xFFFFFFFFFFFF0000;
      v3 |= sub_100C16DB4(v1, v7, (uint64_t)&__dst, v10, v169, v11, (unsigned __int16)v165 | (unsigned __int16)v166, &v170);
      unint64_t v4 = (unint64_t)v168;
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    ++v4;
  }
  int v36 = sub_100C16C5C((capabilities::ct *)v1);
  int v37 = v36;
  uint64_t v38 = *(void *)(v1 + 608);
  int v39 = *(unsigned __int8 *)(v38 + 24);
  if (v39 != v36)
  {
    *(unsigned char *)(v38 + 24) = v36;
    CFIndex v40 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v41 = asStringBool(v37);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v184 = v41;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s%sSettled state changed to %s", (uint8_t *)&buf, 0x20u);
    }
  }
  if (!v159) {
    goto LABEL_134;
  }
  v181 = 0;
  uint64_t v182 = 0;
  v180 = &v181;
  uint64_t v42 = *(void **)(v1 + 488);
  __int16 v43 = (void *)(v1 + 496);
  if (v42 == (void *)(v1 + 496)) {
    goto LABEL_133;
  }
  int v164 = v37;
  char v44 = 0;
  uint64_t v45 = v1;
  char v46 = (uint64_t **)(v1 + 488);
  uint64_t v47 = v45 + 512;
  long long v48 = (void **)(v45 + 520);
  do
  {
    if (!isReal()) {
      goto LABEL_82;
    }
    if (v48 != sub_100046F68(v47, (void **)v42 + 4))
    {
      CFBooleanRef v49 = *(NSObject **)(v167 + 40);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = *((unsigned __int8 *)v42 + 55);
        BOOL v51 = (v50 & 0x80u) != 0;
        if ((v50 & 0x80u) != 0) {
          uint64_t v50 = v42[5];
        }
        if (v51) {
          __int16 v52 = (const char *)v42[4];
        }
        else {
          __int16 v52 = (const char *)(v42 + 4);
        }
        BOOL v16 = v50 == 0;
        CFTypeID v53 = "<invalid>";
        if (!v16) {
          CFTypeID v53 = v52;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        uint64_t v184 = (uint64_t)v53;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I %s%ssim %s hidden, keep", (uint8_t *)&buf, 0x20u);
      }
LABEL_82:
      sub_100C36C48((uint64_t **)&v180, (void **)v42 + 4, (uint64_t)(v42 + 4));
      goto LABEL_83;
    }
    (*(void (**)(void, void *, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(v167 + 120) + 16))(*(void *)(v167 + 120), v42 + 4, @"no_src", kCFBooleanTrue, @"info", 0, 0, 0);
    if (*((char *)v42 + 55) < 0) {
      sub_10004FC84(&__p, (void *)v42[4], v42[5]);
    }
    else {
      std::string __p = *(std::string *)(v42 + 4);
    }
    char v175 = 7;
    sub_100C13144(&v172, v167, (uint64_t)(v42 + 4), 0, 1);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __p;
    }
    char v56 = v175;
    char v177 = v175;
    uint64_t v57 = v172;
    uint8_t v58 = v173;
    uint64_t v178 = v172;
    v179 = v173;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
      char v56 = v177;
      uint64_t v57 = v178;
      uint8_t v58 = v179;
    }
    else
    {
      std::string buf = __dst;
    }
    LOBYTE(v184) = v56;
    *(void *)v185 = v57;
    *(void *)&v185[8] = v58;
    uint64_t v178 = 0;
    v179 = 0;
    uint64_t v59 = v170.i64[1];
    if (v170.i64[1] >= v171)
    {
      v170.i64[1] = sub_100C2FC44(&v170, (long long *)&buf);
      if (*(void *)&v185[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v185[8]);
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)v170.i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v60 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v170.i64[1] + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)uint64_t v59 = v60;
      }
      *(unsigned char *)(v59 + 24) = v184;
      *(_OWORD *)(v59 + 32) = *(_OWORD *)v185;
      *(void *)v185 = 0;
      *(void *)&v185[8] = 0;
      v170.i64[1] = v59 + 48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (v179) {
      sub_10004D2C8(v179);
    }
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    uint64_t v61 = *(NSObject **)(v167 + 40);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v62 = *((unsigned __int8 *)v42 + 55);
      BOOL v63 = (v62 & 0x80u) != 0;
      if ((v62 & 0x80u) != 0) {
        uint64_t v62 = v42[5];
      }
      if (v63) {
        BOOL v64 = (const char *)v42[4];
      }
      else {
        BOOL v64 = (const char *)(v42 + 4);
      }
      BOOL v16 = v62 == 0;
      uint64_t v65 = "<invalid>";
      if (!v16) {
        uint64_t v65 = v64;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      uint64_t v184 = (uint64_t)v65;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#I %s%sindicate %s as gone", (uint8_t *)&buf, 0x20u);
    }
    char v44 = 1;
LABEL_83:
    uint64_t v54 = (void *)v42[1];
    if (v54)
    {
      do
      {
        unint64_t v55 = v54;
        uint64_t v54 = (void *)*v54;
      }
      while (v54);
    }
    else
    {
      do
      {
        unint64_t v55 = (void *)v42[2];
        BOOL v16 = *v55 == (void)v42;
        uint64_t v42 = v55;
      }
      while (!v16);
    }
    uint64_t v42 = v55;
  }
  while (v55 != v43);
  uint64_t v66 = (uint64_t *)v180;
  int v37 = v164;
  if (v180 != &v181)
  {
    do
    {
      sub_1000E9358(v46, (void **)v66 + 4);
      long long v67 = (char *)v66[1];
      if (v67)
      {
        do
        {
          CFDictionaryRef v68 = (char **)v67;
          long long v67 = *(char **)v67;
        }
        while (v67);
      }
      else
      {
        do
        {
          CFDictionaryRef v68 = (char **)v66[2];
          BOOL v16 = *v68 == (char *)v66;
          uint64_t v66 = (uint64_t *)v68;
        }
        while (!v16);
      }
      uint64_t v66 = (uint64_t *)v68;
    }
    while (v68 != &v181);
  }
  uint64_t v1 = v167;
  if (v44) {
    sub_100C1BFB4(v167, (uint64_t)"SIM has been gone");
  }
LABEL_133:
  sub_10005CD2C((uint64_t)&v180, v181);
LABEL_134:
  char v69 = sub_100C13C8C((capabilities::ct *)v1, (char ***)(v1 + 608), &v170) | v3;
  if (v39 != v37 || (v69 & 1) != 0) {
    sub_100C19920(v1, v69 & 1);
  }
  sub_100C1A9F4((void *)v1);
  uint64_t v71 = v170.i64[0];
  if (v170.i64[1] != v170.i64[0])
  {
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    do
    {
      sub_100C1AE18((void *)v1, v71 + v72);
      ++v73;
      uint64_t v71 = v170.i64[0];
      v72 += 48;
    }
    while (v73 < 0xAAAAAAAAAAAAAAABLL * ((v170.i64[1] - v170.i64[0]) >> 4));
  }
  if (v159)
  {
    if (capabilities::ct::supportsGemini(v70))
    {
      long long v74 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v74, OS_LOG_TYPE_DEBUG))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        _os_log_debug_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEBUG, "#D %s%sanalyzeRemovedSims", (uint8_t *)&buf, 0x16u);
      }
      memset(&__dst, 0, sizeof(__dst));
      sub_100C1EADC((const void **)&__dst.__r_.__value_.__l.__data_, v1);
      uint64_t v75 = *(NSObject **)(v1 + 40);
      if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#I %s%s======== present", (uint8_t *)&buf, 0x16u);
      }
      std::string::size_type v76 = __dst.__r_.__value_.__r.__words[0];
      if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
      {
        do
        {
          long long v77 = sub_100046F68(v167 + 832, (void **)(v76 + 32));
          long long v78 = *(NSObject **)(v167 + 40);
          if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v79 = *(unsigned __int8 *)(v76 + 55);
            BOOL v80 = (v79 & 0x80u) != 0;
            if ((v79 & 0x80u) != 0) {
              uint64_t v79 = *(void *)(v76 + 40);
            }
            if (v80) {
              char v81 = *(const char **)(v76 + 32);
            }
            else {
              char v81 = (const char *)(v76 + 32);
            }
            if (v79) {
              long long v82 = v81;
            }
            else {
              long long v82 = "<invalid>";
            }
            if ((void **)(v167 + 840) == v77)
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              uint64_t v184 = (uint64_t)v82;
              *(_WORD *)v185 = 2080;
              *(void *)&v185[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
            }
            else
            {
              asString();
              p_p = &__p;
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
              uint64_t v184 = (uint64_t)v82;
              *(_WORD *)v185 = 2080;
              *(void *)&v185[2] = p_p;
              _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
            }
          }
          char v84 = *(std::string **)(v76 + 8);
          if (v84)
          {
            do
            {
              long long v85 = v84;
              char v84 = (std::string *)v84->__r_.__value_.__r.__words[0];
            }
            while (v84);
          }
          else
          {
            do
            {
              long long v85 = *(std::string **)(v76 + 16);
              BOOL v16 = v85->__r_.__value_.__r.__words[0] == v76;
              std::string::size_type v76 = (std::string::size_type)v85;
            }
            while (!v16);
          }
          std::string::size_type v76 = (std::string::size_type)v85;
        }
        while (v85 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
      }
      uint64_t v1 = v167;
      long long v86 = *(void ***)(v167 + 488);
      uint64_t v87 = (void **)(v167 + 496);
      if (v86 != (void **)(v167 + 496))
      {
        do
        {
          sub_100C36C48((uint64_t **)(v167 + 440), v86 + 4, (uint64_t)(v86 + 4));
          char v88 = (void **)v86[1];
          if (v88)
          {
            do
            {
              long long v89 = v88;
              char v88 = (void **)*v88;
            }
            while (v88);
          }
          else
          {
            do
            {
              long long v89 = (void **)v86[2];
              BOOL v16 = *v89 == v86;
              long long v86 = v89;
            }
            while (!v16);
          }
          long long v86 = v89;
        }
        while (v89 != v87);
      }
      sub_10005CD2C(v167 + 488, *(char **)(v167 + 496));
      *(void *)(v167 + 496) = 0;
      *(void *)(v167 + 504) = 0;
      *(void *)(v167 + 488) = v87;
      uint64_t v90 = (uint64_t **)(v167 + 440);
      if (*(void *)(v167 + 456))
      {
        *(_OWORD *)&__p.__r_.__value_.__r.__words[1] = 0uLL;
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p.__r_.__value_.__l.__size_;
        v91 = *(void ***)(v167 + 440);
        v92 = (uint64_t *)(v167 + 448);
        if (v91 != (void **)(v167 + 448))
        {
          do
          {
            if (&__dst.__r_.__value_.__r.__words[1] == (std::string::size_type *)sub_100046F68((uint64_t)&__dst, v91 + 4))
            {
              v100 = sub_100046F68(v167 + 832, v91 + 4);
              if ((void **)(v167 + 840) == v100)
              {
                v110 = *(NSObject **)(v167 + 40);
                if (!os_log_type_enabled(v110, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_225;
                }
                v111 = (void *)*((unsigned __int8 *)v91 + 55);
                BOOL v112 = (char)v111 < 0;
                if ((char)v111 < 0) {
                  v111 = v91[5];
                }
                if (v112) {
                  v113 = (const char *)v91[4];
                }
                else {
                  v113 = (const char *)(v91 + 4);
                }
                BOOL v16 = v111 == 0;
                v114 = "<invalid>";
                if (!v16) {
                  v114 = v113;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v114;
                uint64_t v98 = v110;
                std::string v99 = "#I %s%sanalyzeRemovedSims. label for '%s' not found - skipping";
                goto LABEL_187;
              }
              v101 = (void *)*((unsigned __int8 *)v100 + 79);
              if ((char)v101 < 0) {
                v101 = v100[8];
              }
              if (v101) {
                goto LABEL_331;
              }
              uint64_t v102 = (void *)*((unsigned __int8 *)v100 + 103);
              if ((char)v102 < 0) {
                uint64_t v102 = v100[11];
              }
              if (v102)
              {
LABEL_331:
                if (sub_100C16CE8((os_unfair_lock_s *)v167, v91 + 4))
                {
                  v103 = *(NSObject **)(v167 + 40);
                  if (os_log_type_enabled(v103, OS_LOG_TYPE_DEBUG))
                  {
                    size_t v104 = (void *)*((unsigned __int8 *)v91 + 55);
                    BOOL v105 = (char)v104 < 0;
                    if ((char)v104 < 0) {
                      size_t v104 = v91[5];
                    }
                    if (v105) {
                      v106 = (const char *)v91[4];
                    }
                    else {
                      v106 = (const char *)(v91 + 4);
                    }
                    BOOL v16 = v104 == 0;
                    uint64_t v107 = "<invalid>";
                    if (!v16) {
                      uint64_t v107 = v106;
                    }
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                    uint64_t v184 = (uint64_t)v107;
                    uint64_t v108 = v103;
                    v109 = "#D %s%s%s is abandoned - ignored";
LABEL_224:
                    _os_log_debug_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, v109, (uint8_t *)&buf, 0x20u);
                  }
                }
                else
                {
                  sub_100C36C48((uint64_t **)&__p, v91 + 4, (uint64_t)(v91 + 4));
                }
              }
              else
              {
                v115 = *(NSObject **)(v167 + 40);
                if (os_log_type_enabled(v115, OS_LOG_TYPE_DEBUG))
                {
                  v116 = (void *)*((unsigned __int8 *)v91 + 55);
                  BOOL v117 = (char)v116 < 0;
                  if ((char)v116 < 0) {
                    v116 = v91[5];
                  }
                  if (v117) {
                    v118 = (const char *)v91[4];
                  }
                  else {
                    v118 = (const char *)(v91 + 4);
                  }
                  BOOL v16 = v116 == 0;
                  v119 = "<invalid>";
                  if (!v16) {
                    v119 = v118;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                  uint64_t v184 = (uint64_t)v119;
                  uint64_t v108 = v115;
                  v109 = "#D %s%s%s has super label - ignored";
                  goto LABEL_224;
                }
              }
            }
            else
            {
              char v93 = *(NSObject **)(v167 + 40);
              if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
              {
                v94 = (void *)*((unsigned __int8 *)v91 + 55);
                BOOL v95 = (char)v94 < 0;
                if ((char)v94 < 0) {
                  v94 = v91[5];
                }
                if (v95) {
                  v96 = (const char *)v91[4];
                }
                else {
                  v96 = (const char *)(v91 + 4);
                }
                BOOL v16 = v94 == 0;
                uint64_t v97 = "<invalid>";
                if (!v16) {
                  uint64_t v97 = v96;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v97;
                uint64_t v98 = v93;
                std::string v99 = "#I %s%sanalyzeRemovedSims. SIM '%s' found within present - skipping";
LABEL_187:
                _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, v99, (uint8_t *)&buf, 0x20u);
              }
            }
LABEL_225:
            v120 = (uint64_t *)v91[1];
            if (v120)
            {
              do
              {
                v121 = v120;
                v120 = (uint64_t *)*v120;
              }
              while (v120);
            }
            else
            {
              do
              {
                v121 = (uint64_t *)v91[2];
                BOOL v16 = *v121 == (void)v91;
                v91 = (void **)v121;
              }
              while (!v16);
            }
            v91 = (void **)v121;
          }
          while (v121 != v92);
        }
        v122 = *(NSObject **)(v167 + 40);
        if (os_log_type_enabled(v122, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v123 = *(void *)(v167 + 456);
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          uint64_t v184 = v123;
          _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "#I %s%s======== removed raw %zu", (uint8_t *)&buf, 0x20u);
        }
        v124 = *v90;
        if (*v90 != v92)
        {
          do
          {
            v125 = sub_100046F68(v167 + 832, (void **)v124 + 4);
            v126 = *(NSObject **)(v167 + 40);
            if (os_log_type_enabled(v126, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v127 = *((unsigned __int8 *)v124 + 55);
              BOOL v128 = (v127 & 0x80u) != 0;
              if ((v127 & 0x80u) != 0) {
                uint64_t v127 = v124[5];
              }
              if (v128) {
                v129 = (const char *)v124[4];
              }
              else {
                v129 = (const char *)(v124 + 4);
              }
              if (v127) {
                v130 = v129;
              }
              else {
                v130 = "<invalid>";
              }
              if ((void **)(v167 + 840) == v125)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v130;
                *(_WORD *)v185 = 2080;
                *(void *)&v185[2] = "";
                _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
              }
              else
              {
                asString();
                v131 = (uint64_t **)&v180;
                if (v182 < 0) {
                  v131 = (uint64_t **)v180;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v130;
                *(_WORD *)v185 = 2080;
                *(void *)&v185[2] = v131;
                _os_log_impl((void *)&_mh_execute_header, v126, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
                if (SHIBYTE(v182) < 0) {
                  operator delete(v180);
                }
              }
            }
            v132 = (uint64_t *)v124[1];
            if (v132)
            {
              do
              {
                v133 = v132;
                v132 = (uint64_t *)*v132;
              }
              while (v132);
            }
            else
            {
              do
              {
                v133 = (uint64_t *)v124[2];
                BOOL v16 = *v133 == (void)v124;
                v124 = v133;
              }
              while (!v16);
            }
            v124 = v133;
          }
          while (v133 != v92);
        }
        v134 = *(NSObject **)(v167 + 40);
        if (os_log_type_enabled(v134, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
          uint64_t v184 = __p.__r_.__value_.__r.__words[2];
          _os_log_impl((void *)&_mh_execute_header, v134, OS_LOG_TYPE_DEFAULT, "#I %s%s======== removed %zu", (uint8_t *)&buf, 0x20u);
        }
        std::string::size_type v135 = __p.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__p.__r_.__value_.__l.__data_ != &__p.__r_.__value_.__r.__words[1])
        {
          do
          {
            v136 = sub_100046F68(v167 + 832, (void **)(v135 + 32));
            v137 = *(NSObject **)(v167 + 40);
            if (os_log_type_enabled(v137, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v138 = *(unsigned __int8 *)(v135 + 55);
              BOOL v139 = (v138 & 0x80u) != 0;
              if ((v138 & 0x80u) != 0) {
                uint64_t v138 = *(void *)(v135 + 40);
              }
              if (v139) {
                v140 = *(const char **)(v135 + 32);
              }
              else {
                v140 = (const char *)(v135 + 32);
              }
              if (v138) {
                v141 = v140;
              }
              else {
                v141 = "<invalid>";
              }
              if ((void **)(v167 + 840) == v136)
              {
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v141;
                *(_WORD *)v185 = 2080;
                *(void *)&v185[2] = "";
                _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
              }
              else
              {
                asString();
                v142 = (uint64_t **)&v180;
                if (v182 < 0) {
                  v142 = (uint64_t **)v180;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                uint64_t v184 = (uint64_t)v141;
                *(_WORD *)v185 = 2080;
                *(void *)&v185[2] = v142;
                _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", (uint8_t *)&buf, 0x2Au);
                if (SHIBYTE(v182) < 0) {
                  operator delete(v180);
                }
              }
            }
            v143 = *(std::string **)(v135 + 8);
            if (v143)
            {
              do
              {
                v144 = v143;
                v143 = (std::string *)v143->__r_.__value_.__r.__words[0];
              }
              while (v143);
            }
            else
            {
              do
              {
                v144 = *(std::string **)(v135 + 16);
                BOOL v16 = v144->__r_.__value_.__r.__words[0] == v135;
                std::string::size_type v135 = (std::string::size_type)v144;
              }
              while (!v16);
            }
            std::string::size_type v135 = (std::string::size_type)v144;
          }
          while (v144 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
        }
        if (v90 != (uint64_t **)&__p)
        {
          std::string::size_type v145 = __p.__r_.__value_.__r.__words[0];
          if (*(void *)(v167 + 456))
          {
            v146 = *v90;
            *uint64_t v90 = v92;
            *(void *)(*v92 + 16) = 0;
            uint64_t *v92 = 0;
            *(void *)(v167 + 456) = 0;
            if (v146[1]) {
              std::string::size_type v147 = v146[1];
            }
            else {
              std::string::size_type v147 = (std::string::size_type)v146;
            }
            buf.__r_.__value_.__r.__words[0] = v167 + 440;
            buf.__r_.__value_.__l.__size_ = v147;
            buf.__r_.__value_.__r.__words[2] = v147;
            if (v147)
            {
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1000EA590(v147);
              if ((std::string::size_type *)v145 == &__p.__r_.__value_.__r.__words[1])
              {
                v151 = (std::string *)&__p.__r_.__value_.__r.__words[1];
              }
              else
              {
                do
                {
                  std::string::operator=((std::string *)(v147 + 32), (const std::string *)(v145 + 32));
                  v148 = (uint64_t *)buf.__r_.__value_.__r.__words[2];
                  v180 = 0;
                  v149 = (uint64_t **)sub_1000EA518((uint64_t)v90, &v180, (void *)(buf.__r_.__value_.__r.__words[2] + 32));
                  sub_100046C38(v90, (uint64_t)v180, v149, v148);
                  std::string::size_type v147 = buf.__r_.__value_.__l.__size_;
                  buf.__r_.__value_.__r.__words[2] = buf.__r_.__value_.__l.__size_;
                  if (buf.__r_.__value_.__l.__size_) {
                    buf.__r_.__value_.__l.__size_ = (std::string::size_type)sub_1000EA590(buf.__r_.__value_.__l.__size_);
                  }
                  v150 = *(std::string **)(v145 + 8);
                  if (v150)
                  {
                    do
                    {
                      v151 = v150;
                      v150 = (std::string *)v150->__r_.__value_.__r.__words[0];
                    }
                    while (v150);
                  }
                  else
                  {
                    do
                    {
                      v151 = *(std::string **)(v145 + 16);
                      BOOL v16 = v151->__r_.__value_.__r.__words[0] == v145;
                      std::string::size_type v145 = (std::string::size_type)v151;
                    }
                    while (!v16);
                  }
                  if (!v147) {
                    break;
                  }
                  std::string::size_type v145 = (std::string::size_type)v151;
                }
                while (v151 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
              }
            }
            else
            {
              v151 = (std::string *)v145;
            }
            sub_1000EA5E4((uint64_t)&buf);
            std::string::size_type v145 = (std::string::size_type)v151;
          }
          if ((std::string::size_type *)v145 != &__p.__r_.__value_.__r.__words[1])
          {
            do
            {
              memset(&buf, 0, sizeof(buf));
              sub_100C36CD4((uint64_t)v90, v145 + 32, &buf);
              v180 = 0;
              v152 = (uint64_t **)sub_1000EA518((uint64_t)v90, &v180, (void *)(buf.__r_.__value_.__r.__words[0] + 32));
              sub_100046C38(v90, (uint64_t)v180, v152, (uint64_t *)buf.__r_.__value_.__l.__data_);
              v153 = *(std::string **)(v145 + 8);
              if (v153)
              {
                do
                {
                  v154 = v153;
                  v153 = (std::string *)v153->__r_.__value_.__r.__words[0];
                }
                while (v153);
              }
              else
              {
                do
                {
                  v154 = *(std::string **)(v145 + 16);
                  BOOL v16 = v154->__r_.__value_.__r.__words[0] == v145;
                  std::string::size_type v145 = (std::string::size_type)v154;
                }
                while (!v16);
              }
              std::string::size_type v145 = (std::string::size_type)v154;
            }
            while (v154 != (std::string *)&__p.__r_.__value_.__r.__words[1]);
          }
        }
        sub_10005CD2C((uint64_t)&__p, (char *)__p.__r_.__value_.__l.__size_);
        uint64_t v1 = v167;
      }
      if (__dst.__r_.__value_.__r.__words[2] >= 2)
      {
        if (*(void *)(v1 + 456))
        {
          v155 = *(NSObject **)(v1 + 40);
          if (os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT))
          {
            LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
            *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
            WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
            *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
            _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "#I %s%sMore then 1 present SIM -> flush list of removed SIMs, cancel alert", (uint8_t *)&buf, 0x16u);
          }
          sub_10005CD2C((uint64_t)v90, *(char **)(v1 + 448));
          *(void *)(v1 + 448) = 0;
          *(void *)(v1 + 456) = 0;
          *(void *)(v1 + 440) = v1 + 448;
        }
        (*(void (**)(void))(**(void **)(v1 + 1096) + 48))(*(void *)(v1 + 1096));
      }
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      (*(void (**)(std::string *__return_ptr))(**(void **)(v1 + 1096) + 56))(&buf);
      if (buf.__r_.__value_.__r.__words[0])
      {
        std::string::size_type v156 = __dst.__r_.__value_.__r.__words[0];
        if ((std::string::size_type *)__dst.__r_.__value_.__l.__data_ != &__dst.__r_.__value_.__r.__words[1])
        {
          do
          {
            if (sub_10001D294((unsigned __int8 *)(buf.__r_.__value_.__r.__words[0] + 104), (unsigned __int8 *)(v156 + 32)))
            {
              (*(void (**)(void))(**(void **)(v1 + 1096) + 48))(*(void *)(v1 + 1096));
            }
            v157 = *(std::string **)(v156 + 8);
            if (v157)
            {
              do
              {
                v158 = v157;
                v157 = (std::string *)v157->__r_.__value_.__r.__words[0];
              }
              while (v157);
            }
            else
            {
              do
              {
                v158 = *(std::string **)(v156 + 16);
                BOOL v16 = v158->__r_.__value_.__r.__words[0] == v156;
                std::string::size_type v156 = (std::string::size_type)v158;
              }
              while (!v16);
            }
            std::string::size_type v156 = (std::string::size_type)v158;
          }
          while (v158 != (std::string *)&__dst.__r_.__value_.__r.__words[1]);
        }
      }
      sub_100C1ED64((void *)v1);
      if (buf.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
      sub_10005CD2C((uint64_t)&__dst, (char *)__dst.__r_.__value_.__l.__size_);
    }
    else
    {
      sub_10005CD2C(v1 + 488, *(char **)(v1 + 496));
      *(void *)(v1 + 496) = 0;
      *(void *)(v1 + 504) = 0;
      *(void *)(v1 + 488) = v1 + 496;
    }
    sub_10005CD2C(v1 + 464, *(char **)(v1 + 472));
    *(void *)(v1 + 472) = 0;
    *(void *)(v1 + 480) = 0;
    *(void *)(v1 + 464) = v1 + 472;
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v170;
  sub_100C30EFC((void ***)&buf);
}

void sub_100C16AF4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,char *a41,int a42,__int16 a43,char a44,char a45)
{
  std::string __p = &a28;
  sub_100C30EFC((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_100C16C5C(capabilities::ct *isSimSettled)
{
  uint64_t v1 = isSimSettled;
  uint64_t v2 = (_DWORD *)*((void *)isSimSettled + 17);
  int v3 = (_DWORD *)*((void *)isSimSettled + 18);
  while (v2 != v3)
  {
    if (*v2)
    {
      isSimSettled = (capabilities::ct *)subscriber::isSimSettled();
      if (isSimSettled) {
        BOOL v4 = v2[3] == 0;
      }
      else {
        BOOL v4 = 1;
      }
      if (v4) {
        return 0;
      }
    }
    else if (!v2[3])
    {
      return 0;
    }
    v2 += 42;
  }
  return !capabilities::ct::supportsCellRadio(isSimSettled)
      || *((void *)v1 + 17) != *((void *)v1 + 18);
}

BOOL sub_100C16CE8(os_unfair_lock_s *a1, void **a2)
{
  BOOL v4 = a1 + 140;
  os_unfair_lock_lock(a1 + 140);
  BOOL v5 = &a1[144] != (os_unfair_lock_s *)sub_100046F68((uint64_t)&a1[142], a2);
  os_unfair_lock_unlock(v4);
  return v5;
}

void sub_100C16D44(_Unwind_Exception *a1)
{
  os_unfair_lock_unlock(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C16D58(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 424);
  if (!v1) {
    return 0;
  }
  uint64_t v2 = a1 + 424;
  do
  {
    int v3 = *(_DWORD *)(v1 + 32);
    BOOL v4 = v3 < 1;
    if (v3 >= 1) {
      BOOL v5 = (uint64_t *)v1;
    }
    else {
      BOOL v5 = (uint64_t *)(v1 + 8);
    }
    if (!v4) {
      uint64_t v2 = v1;
    }
    uint64_t v1 = *v5;
  }
  while (*v5);
  return v2 != a1 + 424 && *(int *)(v2 + 32) <= 1 && *(unsigned char *)(v2 + 65) == 2;
}

uint64_t sub_100C16DB4(uint64_t a1, int a2, uint64_t a3, int a4, int a5, int a6, __int16 a7, int64x2_t *a8)
{
  uint64_t v13 = a1;
  uint64_t v14 = *(void *)(a1 + 608);
  int v15 = *(void **)v14;
  BOOL v16 = *(void **)(v14 + 8);
  if (v15 != v16)
  {
    while (*(unsigned char *)(*v15 + 49) || *(_DWORD *)(*v15 + 52) != a2)
    {
      v15 += 2;
      if (v15 == v16) {
        goto LABEL_12;
      }
    }
  }
  if (v15 == v16)
  {
LABEL_12:
    int v18 = 0;
LABEL_13:
    __dst[0] = 0;
    __dst[1] = 0;
    uint64_t v333 = 0;
    goto LABEL_14;
  }
  uint64_t v17 = *v15;
  int v18 = (std::__shared_weak_count *)v15[1];
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v333 = 0;
  if (!v17) {
    goto LABEL_13;
  }
  if (*(char *)(v17 + 47) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v17 + 24), *(void *)(v17 + 32));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(v17 + 24);
    uint64_t v333 = *(void *)(v17 + 40);
  }
LABEL_14:
  v324 = v18;
  unsigned int v19 = subscriber::simSlotAsInstance();
  uint64_t v20 = *(void *)(v13 + 344);
  uint64_t v328 = v19;
  if (*(_DWORD *)(v20 + 4 * v19) == a4
    && *(_DWORD *)(*(void *)(v13 + 320) + 4 * v19) == a4
    && *(_DWORD *)(*(void *)(v13 + 368) + 4 * v19) == a5)
  {
    uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    if (!v21 || sub_10001D294((unsigned __int8 *)a3, (unsigned __int8 *)__dst))
    {
      uint64_t v22 = 0;
      goto LABEL_590;
    }
    uint64_t v20 = *(void *)(v13 + 344);
  }
  *(_DWORD *)(v20 + 4 * v328) = a4;
  uint64_t v23 = *(unsigned __int8 *)(a3 + 23);
  if ((v23 & 0x80u) != 0) {
    uint64_t v23 = *(void *)(a3 + 8);
  }
  uint64_t v327 = v13;
  int v326 = a4;
  if (!v23)
  {
    uint64_t v22 = 0;
    goto LABEL_278;
  }
  (*(void (**)(void, uint64_t))(**(void **)(v13 + 120) + 88))(*(void *)(v13 + 120), a3);
  int v24 = *(uint64_t **)(v13 + 608);
  uint64_t v26 = *v24;
  uint64_t v25 = v24[1];
  __int16 v319 = a7;
  if (v26 != v25)
  {
    while (*(unsigned char *)(*(void *)v26 + 49) || *(_DWORD *)(*(void *)v26 + 52) != a2)
    {
      v26 += 16;
      if (v26 == v25) {
        goto LABEL_36;
      }
    }
  }
  if (v26 == v25) {
    goto LABEL_36;
  }
  if (!sub_10001D294((unsigned __int8 *)(*(void *)v26 + 24), (unsigned __int8 *)a3))
  {
    uint64_t v55 = v13;
    uint64_t v56 = *(void *)(v13 + 136);
    uint64_t v57 = *(void *)(v55 + 144);
    int v58 = a5;
    if (v56 != v57)
    {
      int v59 = *(char *)(*(void *)v26 + 47);
      long long v60 = (const void **)(*(void *)v26 + 24);
      if (v59 >= 0) {
        uint64_t v61 = *(unsigned __int8 *)(*(void *)v26 + 47);
      }
      else {
        uint64_t v61 = *(void *)(*(void *)v26 + 32);
      }
      while (1)
      {
        uint64_t v62 = *(unsigned __int8 *)(v56 + 95);
        if ((v62 & 0x80u) == 0) {
          uint64_t v63 = *(unsigned __int8 *)(v56 + 95);
        }
        else {
          uint64_t v63 = *(void *)(v56 + 80);
        }
        if (v63 == v61)
        {
          if (v59 >= 0) {
            BOOL v64 = (unsigned __int8 *)v60;
          }
          else {
            BOOL v64 = (unsigned __int8 *)*v60;
          }
          if ((v62 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v56 + 72), v64, *(void *)(v56 + 80)))
            {
LABEL_84:
              if (*(_DWORD *)v56 != a2) {
                break;
              }
            }
          }
          else
          {
            if (!*(unsigned char *)(v56 + 95)) {
              goto LABEL_84;
            }
            uint64_t v65 = 0;
            while (*(unsigned __int8 *)(v56 + v65 + 72) == v64[v65])
            {
              if (v62 == ++v65) {
                goto LABEL_84;
              }
            }
          }
        }
        v56 += 168;
        if (v56 == v57) {
          goto LABEL_97;
        }
      }
    }
    if (v56 != v57)
    {
      uint64_t v66 = *(NSObject **)(v327 + 40);
      if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
      {
        int v67 = *(_DWORD *)(*(void *)v26 + 56);
        uint64_t v68 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v26);
        uint64_t v69 = *(void *)(*(void *)v26 + 24);
        uint64_t v70 = *(unsigned __int8 *)(*(void *)v26 + 47);
        int v71 = (char)v70;
        if ((v70 & 0x80u) != 0) {
          uint64_t v70 = *(void *)(*(void *)v26 + 32);
        }
        if (v71 >= 0) {
          uint64_t v69 = *(void *)v26 + 24;
        }
        if (v70) {
          uint64_t v72 = (const char *)v69;
        }
        else {
          uint64_t v72 = "<invalid>";
        }
        uint64_t v73 = subscriber::asString();
        uint64_t v74 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)v344 = v67;
        *(_WORD *)&v344[4] = 2080;
        *(void *)&v344[6] = v68;
        *(_WORD *)&v344[14] = 2080;
        *(void *)&v344[16] = v72;
        *(_WORD *)v345 = 2080;
        *(void *)&v345[2] = v73;
        *(_WORD *)&v345[10] = 2080;
        *(void *)&v345[12] = v74;
        _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s (previously on slot %s) relocated onto slot %s", (uint8_t *)&buf, 0x44u);
      }
    }
LABEL_97:
    uint64_t v75 = *(NSObject **)(v327 + 40);
    if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
    {
      int v316 = *(_DWORD *)(*(void *)v26 + 56);
      uint64_t v76 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v26);
      long long v77 = (const char *)(*(void *)v26 + 24);
      long long v78 = *(const char **)v77;
      uint64_t v79 = *(unsigned __int8 *)(*(void *)v26 + 47);
      uint64_t v80 = *(void *)(*(void *)v26 + 32);
      uint64_t v81 = subscriber::asString();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      if ((v79 & 0x80u) == 0) {
        uint64_t v82 = v79;
      }
      else {
        uint64_t v82 = v80;
      }
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      uint64_t v83 = "<invalid>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if ((v79 & 0x80u) == 0) {
        char v84 = v77;
      }
      else {
        char v84 = v78;
      }
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      if (v82) {
        uint64_t v83 = v84;
      }
      *(_DWORD *)v344 = v316;
      *(_WORD *)&v344[4] = 2080;
      *(void *)&v344[6] = v76;
      *(_WORD *)&v344[14] = 2080;
      *(void *)&v344[16] = v83;
      *(_WORD *)v345 = 2080;
      *(void *)&v345[2] = v81;
      _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s (previously on slot %s) is detached", (uint8_t *)&buf, 0x3Au);
    }
    long long v339 = 0uLL;
    sub_100612480(*(long long **)v26, &v339);
    uint64_t v85 = v339;
    if (*(unsigned char *)(v339 + 48))
    {
      *(unsigned char *)(v339 + 48) = 0;
      uint64_t v13 = v327;
      if (*(char *)(v85 + 47) < 0) {
        sub_10004FC84(&v334, *(void **)(v85 + 24), *(void *)(v85 + 32));
      }
      else {
        std::string v334 = *(std::string *)(v85 + 24);
      }
      char v335 = 2;
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
        char v104 = v335;
      }
      else
      {
        std::string __p = v334;
        char v104 = 2;
      }
      char v337 = v104;
      long long v338 = v339;
      if (*((void *)&v339 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = __p;
      }
      v344[0] = v337;
      *(_OWORD *)&v344[8] = v338;
      long long v338 = 0uLL;
      unint64_t v105 = a8->u64[1];
      if (v105 >= a8[1].i64[0])
      {
        uint64_t v107 = sub_100C2FC44(a8, (long long *)&buf);
        uint64_t v108 = *(std::__shared_weak_count **)&v344[16];
        a8->i64[1] = v107;
        if (v108) {
          sub_10004D2C8(v108);
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v106 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v105 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v105 = v106;
        }
        *(unsigned char *)(v105 + 24) = v344[0];
        *(_OWORD *)(v105 + 32) = *(_OWORD *)&v344[8];
        *(_OWORD *)&v344[8] = 0uLL;
        a8->i64[1] = v105 + 48;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v338 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      uint64_t v85 = v339;
    }
    else
    {
      uint64_t v13 = v327;
    }
    if (*(char *)(v85 + 47) < 0) {
      sub_10004FC84(&v334, *(void **)(v85 + 24), *(void *)(v85 + 32));
    }
    else {
      std::string v334 = *(std::string *)(v85 + 24);
    }
    a5 = v58;
    char v335 = 6;
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
      char v229 = v335;
    }
    else
    {
      std::string __p = v334;
      char v229 = 6;
    }
    char v337 = v229;
    long long v338 = v339;
    if (*((void *)&v339 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __p;
    }
    v344[0] = v337;
    *(_OWORD *)&v344[8] = v338;
    long long v338 = 0uLL;
    unint64_t v230 = a8->u64[1];
    if (v230 >= a8[1].i64[0])
    {
      uint64_t v232 = sub_100C2FC44(a8, (long long *)&buf);
      v233 = *(std::__shared_weak_count **)&v344[16];
      a8->i64[1] = v232;
      if (v233) {
        sub_10004D2C8(v233);
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v231 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v230 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v230 = v231;
      }
      *(unsigned char *)(v230 + 24) = v344[0];
      *(_OWORD *)(v230 + 32) = *(_OWORD *)&v344[8];
      *(_OWORD *)&v344[8] = 0uLL;
      a8->i64[1] = v230 + 48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v338 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v334.__r_.__value_.__l.__data_);
    }
    uint64_t v234 = v339;
    v235.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (*(char *)(v234 + 47) < 0) {
      sub_10004FC84(&buf, *(void **)(v234 + 24), *(void *)(v234 + 32));
    }
    else {
      std::string buf = *(std::string *)(v234 + 24);
    }
    *(std::chrono::steady_clock::time_point *)v344 = v235;
    v236 = sub_100C36AF0((uint64_t **)(v13 + 536), *(_DWORD *)(v339 + 52), (_DWORD *)(v339 + 52));
    std::string::operator=((std::string *)(v236 + 40), &buf);
    *((void *)v236 + 8) = *(void *)v344;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(v13 + 120) + 24))(&buf);
    v237 = (BOOL *)buf.__r_.__value_.__r.__words[0];
    __p.__r_.__value_.__s.__data_[0] = 0;
    if (buf.__r_.__value_.__r.__words[0])
    {
      CFTypeID v238 = CFGetTypeID(buf.__r_.__value_.__l.__data_);
      if (v238 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&__p, v237, v239);
      }
      int v240 = __p.__r_.__value_.__s.__data_[0];
      sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
      if (v240)
      {
        (*(void (**)(void, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(v13 + 120) + 16))(*(void *)(v13 + 120), v339 + 24, @"disabled_src", kCFBooleanTrue, @"info", 0, 0, 0);
LABEL_442:
        uint64_t v241 = *(void *)(v13 + 608);
        uint64_t v242 = sub_1009ED218((long long *)(v26 + 16), *(long long **)(v241 + 8), v26);
        for (uint64_t i = *(void *)(v241 + 8); i != v242; i -= 16)
        {
          v244 = *(std::__shared_weak_count **)(i - 8);
          if (v244) {
            sub_10004D2C8(v244);
          }
        }
        *(void *)(v241 + 8) = v242;
        if (*((void *)&v339 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v339 + 1));
        }
        int v28 = 1;
        int v18 = v324;
        goto LABEL_37;
      }
    }
    else
    {
      sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
    }
    sub_100C36978((uint64_t **)(v13 + 488), (void **)(v339 + 24), v339 + 24);
    goto LABEL_442;
  }
  std::string::size_type v27 = *(PersonalityInfo **)v26;
  if (*(unsigned char *)(*(void *)v26 + 64) == 2)
  {
LABEL_36:
    int v28 = 0;
    goto LABEL_37;
  }
  int v86 = a5;
  uint64_t v87 = *(NSObject **)(v13 + 40);
  if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v90 = (const char *)*((void *)v27 + 3);
    char v88 = (char *)v27 + 24;
    long long v89 = v90;
    uint64_t v91 = v88[23];
    uint64_t v92 = *((void *)v88 + 1);
    uint64_t v93 = subscriber::asString();
    if ((v91 & 0x80u) == 0) {
      uint64_t v94 = v91;
    }
    else {
      uint64_t v94 = v92;
    }
    if ((v91 & 0x80u) == 0) {
      BOOL v95 = v88;
    }
    else {
      BOOL v95 = v89;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    if (v94) {
      v96 = v95;
    }
    else {
      v96 = "<invalid>";
    }
    *(void *)v344 = v96;
    *(_WORD *)&v344[8] = 2080;
    *(void *)&v344[10] = v93;
    _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#I %s%sSIM is back for %s (%s) added", (uint8_t *)&buf, 0x2Au);
  }
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  sub_100612480(*(long long **)v26, &buf);
  long long v97 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(unsigned char *)(buf.__r_.__value_.__r.__words[0] + 64) = 2;
  if (*((void *)&v97 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v97 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v98 = *(std::__shared_weak_count **)(v26 + 8);
  *(_OWORD *)uint64_t v26 = v97;
  if (v98) {
    sub_10004D2C8(v98);
  }
  int v18 = v324;
  (*(void (**)(void, std::string::size_type, const __CFString *, const __CFString *, void, void))(**(void **)(v13 + 120) + 32))(*(void *)(v13 + 120), buf.__r_.__value_.__r.__words[0] + 24, @"no_src", @"info", 0, 0);
  a5 = v86;
  if (buf.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
  }
  int v28 = 1;
LABEL_37:
  long long v29 = *(uint64_t **)(v13 + 608);
  uint64_t v31 = *v29;
  uint64_t v30 = v29[1];
  int v317 = a5;
  if (*v29 == v30) {
    goto LABEL_209;
  }
  while (*(unsigned char *)(*(void *)v31 + 49)
       || !sub_10001D294((unsigned __int8 *)(*(void *)v31 + 24), (unsigned __int8 *)a3))
  {
    v31 += 16;
    if (v31 == v30)
    {
      uint64_t v31 = v30;
      break;
    }
  }
  uint64_t v32 = *(void *)(*(void *)(v13 + 608) + 8);
  if (v31 == v32) {
    goto LABEL_209;
  }
  long long v33 = *(PersonalityInfo **)v31;
  if (*(_DWORD *)(*(void *)v31 + 52) != a2)
  {
    long long v34 = *(NSObject **)(v13 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      int v35 = *((_DWORD *)v33 + 14);
      uint64_t v36 = PersonalityInfo::logPrefix(v33);
      int v37 = (const char *)(*(void *)v31 + 24);
      uint64_t v38 = *(const char **)v37;
      uint64_t v39 = *(unsigned __int8 *)(*(void *)v31 + 47);
      uint64_t v40 = *(void *)(*(void *)v31 + 32);
      uint64_t v41 = subscriber::asString();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      if ((v39 & 0x80u) == 0) {
        uint64_t v42 = v39;
      }
      else {
        uint64_t v42 = v40;
      }
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      __int16 v43 = "<invalid>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if ((v39 & 0x80u) == 0) {
        char v44 = v37;
      }
      else {
        char v44 = v38;
      }
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      if (v42) {
        __int16 v43 = v44;
      }
      *(_DWORD *)v344 = v35;
      *(_WORD *)&v344[4] = 2080;
      *(void *)&v344[6] = v36;
      *(_WORD *)&v344[14] = 2080;
      *(void *)&v344[16] = v43;
      *(_WORD *)v345 = 2080;
      *(void *)&v345[2] = v41;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s (previously on slot %s) is detached", (uint8_t *)&buf, 0x3Au);
      long long v34 = *(NSObject **)(v327 + 40);
    }
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      int v45 = *(_DWORD *)(*(void *)v31 + 56);
      uint64_t v46 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v31);
      uint64_t v47 = *(void *)(*(void *)v31 + 24);
      uint64_t v48 = *(unsigned __int8 *)(*(void *)v31 + 47);
      int v49 = (char)v48;
      if ((v48 & 0x80u) != 0) {
        uint64_t v48 = *(void *)(*(void *)v31 + 32);
      }
      if (v49 >= 0) {
        uint64_t v47 = *(void *)v31 + 24;
      }
      if (v48) {
        uint64_t v50 = (const char *)v47;
      }
      else {
        uint64_t v50 = "<invalid>";
      }
      uint64_t v51 = subscriber::asString();
      uint64_t v52 = subscriber::asString();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316674;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      *(_DWORD *)v344 = v45;
      *(_WORD *)&v344[4] = 2080;
      *(void *)&v344[6] = v46;
      *(_WORD *)&v344[14] = 2080;
      *(void *)&v344[16] = v50;
      *(_WORD *)v345 = 2080;
      *(void *)&v345[2] = v51;
      *(_WORD *)&v345[10] = 2080;
      *(void *)&v345[12] = v52;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s moved from slot %s to slot %s", (uint8_t *)&buf, 0x44u);
    }
    long long v339 = 0uLL;
    sub_100612480(*(long long **)v31, &v339);
    uint64_t v53 = v339;
    if (*(unsigned char *)(v339 + 48))
    {
      *(unsigned char *)(v339 + 48) = 0;
      uint64_t v13 = v327;
      uint64_t v54 = a8;
      if (*(char *)(v53 + 47) < 0) {
        sub_10004FC84(&v334, *(void **)(v53 + 24), *(void *)(v53 + 32));
      }
      else {
        std::string v334 = *(std::string *)(v53 + 24);
      }
      char v335 = 2;
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
        char v99 = v335;
      }
      else
      {
        std::string __p = v334;
        char v99 = 2;
      }
      char v337 = v99;
      long long v338 = v339;
      if (*((void *)&v339 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = __p;
      }
      v344[0] = v337;
      *(_OWORD *)&v344[8] = v338;
      long long v338 = 0uLL;
      unint64_t v100 = a8->u64[1];
      if (v100 >= a8[1].i64[0])
      {
        uint64_t v102 = sub_100C2FC44(a8, (long long *)&buf);
        v103 = *(std::__shared_weak_count **)&v344[16];
        a8->i64[1] = v102;
        if (v103) {
          sub_10004D2C8(v103);
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v101 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v100 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v100 = v101;
        }
        *(unsigned char *)(v100 + 24) = v344[0];
        *(_OWORD *)(v100 + 32) = *(_OWORD *)&v344[8];
        *(_OWORD *)&v344[8] = 0uLL;
        a8->i64[1] = v100 + 48;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v338 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v334.__r_.__value_.__l.__data_);
      }
      uint64_t v53 = v339;
    }
    else
    {
      uint64_t v13 = v327;
      uint64_t v54 = a8;
    }
    if (*(char *)(v53 + 47) < 0) {
      sub_10004FC84(&v334, *(void **)(v53 + 24), *(void *)(v53 + 32));
    }
    else {
      std::string v334 = *(std::string *)(v53 + 24);
    }
    a5 = v317;
    char v335 = 6;
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
      char v109 = v335;
    }
    else
    {
      std::string __p = v334;
      char v109 = 6;
    }
    char v337 = v109;
    long long v338 = v339;
    if (*((void *)&v339 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __p;
    }
    v344[0] = v337;
    *(_OWORD *)&v344[8] = v338;
    long long v338 = 0uLL;
    unint64_t v110 = v54->u64[1];
    if (v110 >= v54[1].i64[0])
    {
      uint64_t v112 = sub_100C2FC44(v54, (long long *)&buf);
      v113 = *(std::__shared_weak_count **)&v344[16];
      v54->i64[1] = v112;
      if (v113) {
        sub_10004D2C8(v113);
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)v54->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v111 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v110 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v110 = v111;
      }
      *(unsigned char *)(v110 + 24) = v344[0];
      *(_OWORD *)(v110 + 32) = *(_OWORD *)&v344[8];
      *(_OWORD *)&v344[8] = 0uLL;
      v54->i64[1] = v110 + 48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v338 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v334.__r_.__value_.__l.__data_);
    }
    uint64_t v114 = v339;
    v115.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
    if (*(char *)(v114 + 47) < 0) {
      sub_10004FC84(&buf, *(void **)(v114 + 24), *(void *)(v114 + 32));
    }
    else {
      std::string buf = *(std::string *)(v114 + 24);
    }
    *(std::chrono::steady_clock::time_point *)v344 = v115;
    v116 = sub_100C36AF0((uint64_t **)(v13 + 536), *(_DWORD *)(v339 + 52), (_DWORD *)(v339 + 52));
    std::string::operator=((std::string *)(v116 + 40), &buf);
    *((void *)v116 + 8) = *(void *)v344;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    uint64_t v117 = *(void *)(v13 + 608);
    uint64_t v118 = sub_1009ED218((long long *)(v31 + 16), *(long long **)(v117 + 8), v31);
    for (uint64_t j = *(void *)(v117 + 8); j != v118; j -= 16)
    {
      v120 = *(std::__shared_weak_count **)(j - 8);
      if (v120) {
        sub_10004D2C8(v120);
      }
    }
    *(void *)(v117 + 8) = v118;
    uint64_t v121 = *(void *)(v13 + 608);
    uint64_t v31 = *(void *)(v121 + 8);
    if (*((void *)&v339 + 1))
    {
      sub_10004D2C8(*((std::__shared_weak_count **)&v339 + 1));
      uint64_t v121 = *(void *)(v13 + 608);
    }
    int v18 = v324;
    uint64_t v32 = *(void *)(v121 + 8);
    int v28 = 1;
  }
  if (v31 == v32)
  {
LABEL_209:
    (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, void, void))(**(void **)(v13 + 120) + 32))(*(void *)(v13 + 120), a3, @"no_src", @"info", 0, 0);
    long long v339 = 0uLL;
    sub_100C13144(&v339, v327, a3, a2, 0);
    uint64_t v122 = v339;
    *(unsigned char *)(v339 + 64) = 2;
    uint64_t v123 = (const char *)(v122 + 24);
    if (*(char *)(v122 + 47) < 0)
    {
      sub_10004FC84(&v334, *(void **)(v122 + 24), *(void *)(v122 + 32));
    }
    else
    {
      *(_OWORD *)&v334.__r_.__value_.__l.__data_ = *(_OWORD *)v123;
      v334.__r_.__value_.__r.__words[2] = *(void *)(v122 + 40);
    }
    uint64_t v124 = v327;
    char v335 = 0;
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
      char v125 = v335;
    }
    else
    {
      char v125 = 0;
      std::string __p = v334;
    }
    char v337 = v125;
    uint64_t v126 = *((void *)&v339 + 1);
    *(void *)&long long v338 = v122;
    *((void *)&v338 + 1) = *((void *)&v339 + 1);
    if (*((void *)&v339 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __p;
    }
    v344[0] = v337;
    *(_OWORD *)&v344[8] = v338;
    long long v338 = 0uLL;
    unint64_t v127 = a8->u64[1];
    if (v127 >= a8[1].i64[0])
    {
      uint64_t v129 = sub_100C2FC44(a8, (long long *)&buf);
      v130 = *(std::__shared_weak_count **)&v344[16];
      a8->i64[1] = v129;
      if (v130) {
        sub_10004D2C8(v130);
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v128 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v127 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v127 = v128;
      }
      *(unsigned char *)(v127 + 24) = v344[0];
      *(_OWORD *)(v127 + 32) = *(_OWORD *)&v344[8];
      *(_OWORD *)&v344[8] = 0uLL;
      a8->i64[1] = v127 + 48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v338 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v334.__r_.__value_.__l.__data_);
    }
    v131 = *(std::string::size_type **)(v327 + 608);
    if (v126) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v126 + 8), 1uLL, memory_order_relaxed);
    }
    unint64_t v132 = v131[2];
    v133 = (void *)v131[1];
    if ((unint64_t)v133 >= v132)
    {
      uint64_t v135 = (uint64_t)((uint64_t)v133 - *v131) >> 4;
      unint64_t v136 = v135 + 1;
      if ((unint64_t)(v135 + 1) >> 60) {
        sub_10006A748();
      }
      uint64_t v137 = v132 - *v131;
      if (v137 >> 3 > v136) {
        unint64_t v136 = v137 >> 3;
      }
      if ((unint64_t)v137 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v138 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v138 = v136;
      }
      *(void *)&v344[8] = v131 + 2;
      BOOL v139 = (char *)sub_10006A794((uint64_t)(v131 + 2), v138);
      v141 = &v139[16 * v135];
      *(void *)v141 = v122;
      *((void *)v141 + 1) = v126;
      v134 = v141 + 16;
      v143 = (void *)*v131;
      v142 = (void *)v131[1];
      if (v142 == (void *)*v131)
      {
        std::string::size_type v145 = v131[1];
      }
      else
      {
        do
        {
          long long v144 = *((_OWORD *)v142 - 1);
          v142 -= 2;
          *((_OWORD *)v141 - 1) = v144;
          v141 -= 16;
          void *v142 = 0;
          v142[1] = 0;
        }
        while (v142 != v143);
        std::string::size_type v145 = *v131;
        v142 = (void *)v131[1];
      }
      std::string::size_type *v131 = (std::string::size_type)v141;
      buf.__r_.__value_.__r.__words[0] = v145;
      buf.__r_.__value_.__l.__size_ = v145;
      v131[1] = (std::string::size_type)v134;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)v142;
      std::string::size_type v146 = v131[2];
      v131[2] = (std::string::size_type)&v139[16 * v140];
      *(void *)v344 = v146;
      sub_10019E528((uint64_t)&buf);
    }
    else
    {
      void *v133 = v122;
      v133[1] = v126;
      v134 = v133 + 2;
      v131[1] = (std::string::size_type)(v133 + 2);
    }
    v131[1] = (std::string::size_type)v134;
    sub_1000E9358((uint64_t **)(v327 + 488), (void **)(v122 + 24));
    std::string::size_type v147 = *(NSObject **)(v327 + 40);
    if (os_log_type_enabled(v147, OS_LOG_TYPE_DEFAULT))
    {
      int v148 = *(_DWORD *)(v122 + 56);
      uint64_t v149 = PersonalityInfo::logPrefix((PersonalityInfo *)v122);
      uint64_t v150 = *(unsigned __int8 *)(v122 + 47);
      uint64_t v153 = v122 + 24;
      v151 = *(const char **)(v122 + 24);
      uint64_t v152 = *(void *)(v153 + 8);
      uint64_t v154 = subscriber::asString();
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      if ((v150 & 0x80u) == 0) {
        uint64_t v155 = v150;
      }
      else {
        uint64_t v155 = v152;
      }
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      std::string::size_type v156 = "<invalid>";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if ((v150 & 0x80u) == 0) {
        v157 = v123;
      }
      else {
        v157 = v151;
      }
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      if (v155) {
        std::string::size_type v156 = v157;
      }
      *(_DWORD *)v344 = v148;
      *(_WORD *)&v344[4] = 2080;
      *(void *)&v344[6] = v149;
      *(_WORD *)&v344[14] = 2080;
      *(void *)&v344[16] = v156;
      *(_WORD *)v345 = 2080;
      *(void *)&v345[2] = v154;
      _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s introduced on slot %s", (uint8_t *)&buf, 0x3Au);
      uint64_t v124 = v327;
    }
    v158 = *(std::__shared_weak_count **)(v124 + 16);
    if (v158 && std::__shared_weak_count::lock(v158)) {
      operator new();
    }
    sub_100088B9C();
  }
  uint64_t v22 = v28 != 0;
  if ((v319 & 0xFF00) != 0)
  {
    if ((_BYTE)v319)
    {
      BOOL v159 = *(uint64_t **)(v13 + 608);
      uint64_t v160 = *v159;
      uint64_t v161 = v159[1];
      if (*v159 != v161)
      {
        while (!sub_10001D294((unsigned __int8 *)(*(void *)v160 + 24), (unsigned __int8 *)a3))
        {
          v160 += 16;
          if (v160 == v161)
          {
            uint64_t v160 = v161;
            break;
          }
        }
        if (v160 != *(void *)(*(void *)(v13 + 608) + 8) && !*(unsigned char *)(*(void *)v160 + 61))
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          sub_100612480(*(long long **)v160, &buf);
          long long v162 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(unsigned char *)(buf.__r_.__value_.__r.__words[0] + 61) = 1;
          if (*((void *)&v162 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v162 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          unint64_t v163 = *(std::__shared_weak_count **)(v160 + 8);
          *(_OWORD *)uint64_t v160 = v162;
          if (v163) {
            sub_10004D2C8(v163);
          }
          (*(void (**)(void, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(v13 + 120) + 16))(*(void *)(v13 + 120), a3, @"esim", kCFBooleanTrue, @"info", 0, 0, 0);
          if (buf.__r_.__value_.__l.__size_) {
            sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          uint64_t v22 = 1;
        }
      }
    }
  }
LABEL_278:
  int v164 = v326;
  if (!subscriber::isSimSettled()) {
    goto LABEL_590;
  }
  uint64_t v165 = *(unsigned __int8 *)(a3 + 23);
  char v166 = v165;
  uint64_t v167 = *(void *)(a3 + 8);
  if ((v165 & 0x80u) == 0) {
    uint64_t v168 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v168 = *(void *)(a3 + 8);
  }
  uint64_t v169 = *(void *)(v13 + 320);
  if (v168 || *(_DWORD *)(v169 + 4 * v328) == 5)
  {
    *(_DWORD *)(v169 + 4 * v328) = v326;
    uint64_t v165 = *(unsigned __int8 *)(a3 + 23);
    uint64_t v167 = *(void *)(a3 + 8);
    char v166 = *(unsigned char *)(a3 + 23);
  }
  if (v166 < 0) {
    uint64_t v165 = v167;
  }
  if (v326 == 5 && v165)
  {
    int64x2_t v170 = *(uint64_t **)(v13 + 608);
    uint64_t v172 = *v170;
    uint64_t v171 = v170[1];
    if (*v170 != v171)
    {
      while (!sub_10001D294((unsigned __int8 *)(*(void *)v172 + 24), (unsigned __int8 *)a3))
      {
        v172 += 16;
        if (v172 == v171)
        {
          uint64_t v172 = v171;
          break;
        }
      }
    }
    long long v339 = 0uLL;
    sub_100612480(*(long long **)v172, &v339);
    uint64_t v173 = v339;
    int v174 = *(unsigned __int8 *)(v339 + 60);
    BOOL v175 = v174 != a6;
    if (v174 != a6) {
      *(unsigned char *)(v339 + 60) = a6;
    }
    if (*(unsigned char *)(v173 + 65))
    {
      *(unsigned char *)(v173 + 65) = 0;
      v176 = *(NSObject **)(v327 + 40);
      if (os_log_type_enabled(v176, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v177 = *(unsigned __int8 *)(a3 + 23);
        BOOL v178 = (v177 & 0x80u) != 0;
        v179 = *(const char **)a3;
        if ((v177 & 0x80u) != 0) {
          uint64_t v177 = *(void *)(a3 + 8);
        }
        if (!v178) {
          v179 = (const char *)a3;
        }
        if (v177) {
          v180 = v179;
        }
        else {
          v180 = "<invalid>";
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        *(void *)v344 = v180;
        _os_log_impl((void *)&_mh_execute_header, v176, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s is turned ON", (uint8_t *)&buf, 0x20u);
      }
      (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, void, void))(**(void **)(v327 + 120) + 32))(*(void *)(v327 + 120), a3, @"disabled_src", @"info", 0, 0);
      BOOL v175 = 1;
      uint64_t v173 = v339;
    }
    if (*(unsigned char *)(v173 + 48))
    {
      v181 = *(NSObject **)(v327 + 40);
      if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v320 = v175;
        unsigned int v322 = v22;
        int v182 = a5;
        int v183 = *(_DWORD *)(*(void *)v172 + 56);
        uint64_t v184 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v172);
        v185 = (const char *)(*(void *)v172 + 24);
        __int16 v186 = *(const char **)v185;
        uint64_t v187 = *(unsigned __int8 *)(*(void *)v172 + 47);
        uint64_t v188 = *(void *)(*(void *)v172 + 32);
        uint64_t v189 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        if ((v187 & 0x80u) == 0) {
          uint64_t v190 = v187;
        }
        else {
          uint64_t v190 = v188;
        }
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        uint64_t v191 = "<invalid>";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        if ((v187 & 0x80u) == 0) {
          __int16 v192 = v185;
        }
        else {
          __int16 v192 = v186;
        }
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        if (v190) {
          uint64_t v191 = v192;
        }
        *(_DWORD *)v344 = v183;
        *(_WORD *)&v344[4] = 2080;
        *(void *)&v344[6] = v184;
        *(_WORD *)&v344[14] = 2080;
        *(void *)&v344[16] = v191;
        *(_WORD *)v345 = 2080;
        *(void *)&v345[2] = v189;
        _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s recovered on slot %s", (uint8_t *)&buf, 0x3Au);
        int v18 = v324;
        a5 = v182;
        uint64_t v22 = v322;
        BOOL v175 = v320;
      }
      v193 = *(long long **)v172;
      if (*(char *)(*(void *)v172 + 47) < 0) {
        sub_10004FC84(&__p, *((void **)v193 + 3), *((void *)v193 + 4));
      }
      else {
        std::string __p = *(std::string *)((unsigned char *)v193 + 1);
      }
      char v337 = 3;
      sub_100C2FEDC(&buf, (long long *)&__p, (void *)v172);
      unint64_t v209 = a8->u64[1];
      if (v209 >= a8[1].i64[0])
      {
        uint64_t v211 = sub_100C2FC44(a8, (long long *)&buf);
        v212 = *(std::__shared_weak_count **)&v344[16];
        a8->i64[1] = v211;
        int v164 = v326;
        if (v212) {
          sub_10004D2C8(v212);
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v210 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v209 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v209 = v210;
        }
        *(unsigned char *)(v209 + 24) = v344[0];
        *(_OWORD *)(v209 + 32) = *(_OWORD *)&v344[8];
        *(_OWORD *)&v344[8] = 0uLL;
        a8->i64[1] = v209 + 48;
        int v164 = v326;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
      {
        v213 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_390:
        operator delete(v213);
      }
    }
    else
    {
      __int16 v194 = (std::__shared_weak_count *)*((void *)&v339 + 1);
      v331[0] = v173;
      v331[1] = *((void *)&v339 + 1);
      if (*((void *)&v339 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      BOOL v195 = sub_100C1B538(v327, v331);
      if (v194) {
        sub_10004D2C8(v194);
      }
      if (v195)
      {
        __int16 v196 = *(NSObject **)(v327 + 40);
        if (os_log_type_enabled(v196, OS_LOG_TYPE_DEFAULT))
        {
          int v197 = a5;
          int v198 = *(_DWORD *)(v339 + 56);
          uint64_t v199 = PersonalityInfo::logPrefix((PersonalityInfo *)v339);
          v200 = (const char *)(v339 + 24);
          v201 = *(const char **)(v339 + 24);
          uint64_t v202 = *(unsigned __int8 *)(v339 + 47);
          uint64_t v203 = *(void *)(v339 + 32);
          uint64_t v204 = subscriber::asString();
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          if ((v202 & 0x80u) == 0) {
            uint64_t v205 = v202;
          }
          else {
            uint64_t v205 = v203;
          }
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          v206 = "<invalid>";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          if ((v202 & 0x80u) == 0) {
            v207 = v200;
          }
          else {
            v207 = v201;
          }
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
          if (v205) {
            v206 = v207;
          }
          *(_DWORD *)v344 = v198;
          *(_WORD *)&v344[4] = 2080;
          *(void *)&v344[6] = v199;
          *(_WORD *)&v344[14] = 2080;
          *(void *)&v344[16] = v206;
          *(_WORD *)v345 = 2080;
          *(void *)&v345[2] = v204;
          _os_log_impl((void *)&_mh_execute_header, v196, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s activated on slot %s", (uint8_t *)&buf, 0x3Au);
          int v18 = v324;
          a5 = v197;
        }
        uint64_t v208 = v339;
        *(unsigned char *)(v339 + 48) = 1;
        if (*(char *)(v208 + 47) < 0) {
          sub_10004FC84(&v334, *(void **)(v208 + 24), *(void *)(v208 + 32));
        }
        else {
          std::string v334 = *(std::string *)(v208 + 24);
        }
        char v335 = 1;
        if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
          char v222 = v335;
        }
        else
        {
          std::string __p = v334;
          char v222 = 1;
        }
        char v337 = v222;
        long long v338 = v339;
        if (*((void *)&v339 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
        }
        else {
          std::string buf = __p;
        }
        v344[0] = v337;
        *(_OWORD *)&v344[8] = v338;
        long long v338 = 0uLL;
        unint64_t v223 = a8->u64[1];
        if (v223 >= a8[1].i64[0])
        {
          uint64_t v225 = sub_100C2FC44(a8, (long long *)&buf);
          v226 = *(std::__shared_weak_count **)&v344[16];
          a8->i64[1] = v225;
          int v164 = v326;
          if (v226) {
            sub_10004D2C8(v226);
          }
        }
        else
        {
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v224 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
            *(void *)(v223 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v223 = v224;
          }
          *(unsigned char *)(v223 + 24) = v344[0];
          *(_OWORD *)(v223 + 32) = *(_OWORD *)&v344[8];
          *(_OWORD *)&v344[8] = 0uLL;
          a8->i64[1] = v223 + 48;
          int v164 = v326;
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (*((void *)&v338 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
        }
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v334.__r_.__value_.__l.__data_);
        }
        goto LABEL_459;
      }
      if (*(char *)(v339 + 47) < 0)
      {
        sub_10004FC84(v329, *(void **)(v339 + 24), *(void *)(v339 + 32));
      }
      else
      {
        *(_OWORD *)v329 = *(_OWORD *)(v339 + 24);
        uint64_t v330 = *(void *)(v339 + 40);
      }
      v214 = *(NSObject **)(v327 + 40);
      if (os_log_type_enabled(v214, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v215 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        *(void *)v344 = v215;
        _os_log_impl((void *)&_mh_execute_header, v214, OS_LOG_TYPE_DEFAULT, "#I %s%sstarting Untrusted CB Timer for slot %s", (uint8_t *)&buf, 0x20u);
      }
      v216 = *(std::__shared_weak_count **)(v327 + 16);
      if (!v216 || (uint64_t v217 = *(void *)(v327 + 8), (v218 = std::__shared_weak_count::lock(v216)) == 0)) {
        sub_100088B9C();
      }
      v219 = v218;
      atomic_fetch_add_explicit(&v218->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v218);
      Registry::getTimerService((uint64_t *)&v334, *(Registry **)(v327 + 64));
      uint64_t v220 = v334.__r_.__value_.__r.__words[0];
      sub_100058DB0(&__p, "Waiting for CB");
      v221 = *(NSObject **)(v327 + 24);
      v341 = v221;
      if (v221) {
        dispatch_retain(v221);
      }
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)_NSConcreteStackBlock;
      buf.__r_.__value_.__l.__size_ = 1174405120;
      buf.__r_.__value_.__r.__words[2] = (std::string::size_type)sub_100C22944;
      *(void *)v344 = &unk_101A48540;
      *(void *)&v344[8] = v327;
      *(void *)&v344[16] = v217;
      *(void *)v345 = v219;
      atomic_fetch_add_explicit(&v219->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      int v347 = a2;
      if (SHIBYTE(v330) < 0)
      {
        sub_10004FC84(&v345[8], v329[0], (unint64_t)v329[1]);
      }
      else
      {
        *(_OWORD *)&v345[8] = *(_OWORD *)v329;
        uint64_t v346 = v330;
      }
      v340 = _Block_copy(&buf);
      sub_100118A44(v220, (uint64_t)&__p, 2, 6000000, &v341, &v340);
      unsigned int v227 = subscriber::simSlotAsInstance();
      int v164 = v326;
      sub_1004DC2E0((void *)(*(void *)(v327 + 392) + 16 * v227), &v342);
      uint64_t v228 = v342;
      uint64_t v342 = 0;
      if (v228) {
        (*(void (**)(uint64_t))(*(void *)v228 + 8))(v228);
      }
      if (v340) {
        _Block_release(v340);
      }
      if (v341) {
        dispatch_release(v341);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (v334.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)v334.__r_.__value_.__l.__size_);
      }
      if (SHIBYTE(v346) < 0) {
        operator delete(*(void **)&v345[8]);
      }
      if (*(void *)v345) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)v345);
      }
      std::__shared_weak_count::__release_weak(v219);
      if (SHIBYTE(v330) < 0)
      {
        v213 = v329[0];
        goto LABEL_390;
      }
    }
    if (!v175)
    {
LABEL_464:
      if (*((void *)&v339 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v339 + 1));
      }
      uint64_t v13 = v327;
      goto LABEL_467;
    }
LABEL_459:
    long long v245 = v339;
    if (*((void *)&v339 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    v246 = *(std::__shared_weak_count **)(v172 + 8);
    *(_OWORD *)uint64_t v172 = v245;
    if (v246) {
      sub_10004D2C8(v246);
    }
    uint64_t v22 = 1;
    goto LABEL_464;
  }
LABEL_467:
  if (v164 == 5) {
    goto LABEL_590;
  }
  v247 = *(uint64_t **)(v13 + 608);
  uint64_t v249 = *v247;
  uint64_t v248 = v247[1];
  if (v249 != v248)
  {
    while (*(unsigned char *)(*(void *)v249 + 49) || *(_DWORD *)(*(void *)v249 + 52) != a2)
    {
      v249 += 16;
      if (v249 == v248)
      {
        uint64_t v250 = v328;
        goto LABEL_587;
      }
    }
  }
  uint64_t v250 = v328;
  if (v249 != v248 && isReal())
  {
    long long v339 = 0uLL;
    sub_100612480(*(long long **)v249, &v339);
    uint64_t v251 = v339;
    int v252 = *(unsigned __int8 *)(v339 + 48);
    BOOL v323 = *(unsigned char *)(v339 + 48) != 0;
    if (*(unsigned char *)(v339 + 48))
    {
      v253 = *(NSObject **)(v13 + 40);
      if (os_log_type_enabled(v253, OS_LOG_TYPE_DEFAULT))
      {
        int v318 = a5;
        int v254 = *(_DWORD *)(v251 + 56);
        uint64_t v255 = PersonalityInfo::logPrefix((PersonalityInfo *)v251);
        v257 = (const char *)(v339 + 24);
        v256 = *(const char **)(v339 + 24);
        uint64_t v258 = *(unsigned __int8 *)(v339 + 47);
        uint64_t v259 = *(void *)(v339 + 32);
        uint64_t v260 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        if ((v258 & 0x80u) == 0) {
          uint64_t v261 = v258;
        }
        else {
          uint64_t v261 = v259;
        }
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        v262 = "<invalid>";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        if ((v258 & 0x80u) == 0) {
          v263 = v257;
        }
        else {
          v263 = v256;
        }
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        if (v261) {
          v262 = v263;
        }
        *(_DWORD *)v344 = v254;
        *(_WORD *)&v344[4] = 2080;
        *(void *)&v344[6] = v255;
        *(_WORD *)&v344[14] = 2080;
        *(void *)&v344[16] = v262;
        *(_WORD *)v345 = 2080;
        *(void *)&v345[2] = v260;
        _os_log_impl((void *)&_mh_execute_header, v253, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s de-activated on slot %s", (uint8_t *)&buf, 0x3Au);
        uint64_t v251 = v339;
        int v18 = v324;
        a5 = v318;
        uint64_t v13 = v327;
        uint64_t v250 = v328;
      }
      *(unsigned char *)(v251 + 48) = 0;
      if (*(char *)(v251 + 47) < 0) {
        sub_10004FC84(&v334, *(void **)(v251 + 24), *(void *)(v251 + 32));
      }
      else {
        std::string v334 = *(std::string *)(v251 + 24);
      }
      char v335 = 2;
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(&__p, v334.__r_.__value_.__l.__data_, v334.__r_.__value_.__l.__size_);
        char v264 = v335;
      }
      else
      {
        std::string __p = v334;
        char v264 = 2;
      }
      char v337 = v264;
      long long v338 = v339;
      if (*((void *)&v339 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = __p;
      }
      v344[0] = v337;
      *(_OWORD *)&v344[8] = v338;
      long long v338 = 0uLL;
      unint64_t v265 = a8->u64[1];
      if (v265 >= a8[1].i64[0])
      {
        uint64_t v267 = sub_100C2FC44(a8, (long long *)&buf);
        v268 = *(std::__shared_weak_count **)&v344[16];
        a8->i64[1] = v267;
        int v164 = v326;
        if (v268) {
          sub_10004D2C8(v268);
        }
      }
      else
      {
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84((unsigned char *)a8->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else
        {
          long long v266 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
          *(void *)(v265 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
          *(_OWORD *)unint64_t v265 = v266;
        }
        *(unsigned char *)(v265 + 24) = v344[0];
        *(_OWORD *)(v265 + 32) = *(_OWORD *)&v344[8];
        *(_OWORD *)&v344[8] = 0uLL;
        a8->i64[1] = v265 + 48;
        int v164 = v326;
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v338 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v338 + 1));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v334.__r_.__value_.__l.__data_);
      }
    }
    unsigned int v269 = v164 & 0xFFFFFFFE;
    if ((v164 & 0xFFFFFFFE) == 8)
    {
      uint64_t v270 = v339;
      if (!*(unsigned char *)(v339 + 65))
      {
        int v271 = 1;
        goto LABEL_519;
      }
    }
    else if ((v164 - 10) <= 0xFFFFFFFD)
    {
      int isSimInserted = subscriber::isSimInserted();
      int v273 = v323;
      if (!isSimInserted) {
        goto LABEL_535;
      }
      uint64_t v270 = v339;
      if (!*(unsigned char *)(v339 + 65)) {
        goto LABEL_535;
      }
      int v271 = 0;
LABEL_519:
      *(unsigned char *)(v270 + 65) = v271;
      v274 = *(NSObject **)(v13 + 40);
      if (os_log_type_enabled(v274, OS_LOG_TYPE_DEFAULT))
      {
        v277 = *(const char **)(v270 + 24);
        uint64_t v276 = v270 + 24;
        v275 = v277;
        uint64_t v278 = *(unsigned __int8 *)(v276 + 23);
        int v279 = (char)v278;
        if ((v278 & 0x80u) != 0) {
          uint64_t v278 = *(void *)(v276 + 8);
        }
        if (v279 >= 0) {
          v275 = (const char *)v276;
        }
        if (!v278) {
          v275 = "<invalid>";
        }
        v280 = "ON";
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        if (v269 == 8) {
          v280 = "OFF";
        }
        *(void *)v344 = v275;
        *(_WORD *)&v344[8] = 2080;
        *(void *)&v344[10] = v280;
        _os_log_impl((void *)&_mh_execute_header, v274, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s is turned %s", (uint8_t *)&buf, 0x2Au);
        uint64_t v270 = v339;
        int v271 = *(unsigned __int8 *)(v339 + 65);
      }
      uint64_t v281 = *(void *)(v13 + 120);
      uint64_t v282 = v270 + 24;
      int v164 = v326;
      if (v271) {
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(*(void *)v281 + 16))(v281, v282, @"disabled_src", kCFBooleanTrue, @"info", 0, 0, 0);
      }
      else {
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const __CFString *, void, void))(*(void *)v281 + 32))(v281, v282, @"disabled_src", @"info", 0, 0);
      }
      uint64_t v250 = v328;
      int v273 = 1;
LABEL_535:
      BOOL v283 = v164 == 1;
      if (v164 == 1 && a5 == 1 && (uint64_t v284 = v339, *(unsigned char *)(v339 + 64) == 2))
      {
        BOOL v283 = 1;
        *(unsigned char *)(v339 + 64) = 1;
        v285 = *(NSObject **)(v13 + 40);
        if (os_log_type_enabled(v285, OS_LOG_TYPE_DEFAULT))
        {
          int v286 = a5;
          v289 = *(const char **)(v284 + 24);
          uint64_t v288 = v284 + 24;
          v287 = v289;
          uint64_t v290 = *(unsigned __int8 *)(v288 + 23);
          uint64_t v291 = *(void *)(v288 + 8);
          uint64_t v292 = subscriber::asString();
          if ((v290 & 0x80u) == 0) {
            uint64_t v293 = v290;
          }
          else {
            uint64_t v293 = v291;
          }
          if ((v290 & 0x80u) == 0) {
            v294 = (const char *)v288;
          }
          else {
            v294 = v287;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          if (v293) {
            v295 = v294;
          }
          else {
            v295 = "<invalid>";
          }
          *(void *)v344 = v295;
          *(_WORD *)&v344[8] = 2080;
          *(void *)&v344[10] = v292;
          _os_log_impl((void *)&_mh_execute_header, v285, OS_LOG_TYPE_DEFAULT, "#I %s%sSIM %s is out of slot (%s)", (uint8_t *)&buf, 0x2Au);
          BOOL v283 = 1;
          int v18 = v324;
          a5 = v286;
          uint64_t v250 = v328;
        }
      }
      else if (!v273)
      {
LABEL_555:
        if (a5 == 3 && v283)
        {
          uint64_t v298 = v339;
          if (!*(unsigned char *)(v339 + 61))
          {
            if (*(unsigned char *)(v339 + 64))
            {
              v299 = *(NSObject **)(v13 + 40);
              if (os_log_type_enabled(v299, OS_LOG_TYPE_DEFAULT))
              {
                int v300 = a5;
                v303 = *(const char **)(v298 + 24);
                uint64_t v301 = v298 + 24;
                v302 = v303;
                uint64_t v304 = *(unsigned __int8 *)(v301 + 23);
                uint64_t v305 = *(void *)(v301 + 8);
                uint64_t v306 = subscriber::asString();
                if ((v304 & 0x80u) == 0) {
                  uint64_t v307 = v304;
                }
                else {
                  uint64_t v307 = v305;
                }
                if ((v304 & 0x80u) == 0) {
                  v308 = (const char *)v301;
                }
                else {
                  v308 = v302;
                }
                LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                if (v307) {
                  v309 = v308;
                }
                else {
                  v309 = "<invalid>";
                }
                *(void *)v344 = v309;
                *(_WORD *)&v344[8] = 2080;
                *(void *)&v344[10] = v306;
                _os_log_impl((void *)&_mh_execute_header, v299, OS_LOG_TYPE_DEFAULT, "#I %s%sSIM %s removed from (%s)", (uint8_t *)&buf, 0x2Au);
                uint64_t v298 = v339;
                int v18 = v324;
                a5 = v300;
                uint64_t v250 = v328;
              }
              *(unsigned char *)(v298 + 64) = 0;
              if (*(char *)(v298 + 47) < 0) {
                sub_10004FC84(&v334, *(void **)(v298 + 24), *(void *)(v298 + 32));
              }
              else {
                std::string v334 = *(std::string *)(v298 + 24);
              }
              char v335 = 6;
              sub_100C2FEDC(&__p, (long long *)&v334, &v339);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
              }
              else {
                std::string buf = __p;
              }
              v344[0] = v337;
              *(_OWORD *)&v344[8] = v338;
              long long v338 = 0uLL;
              sub_100C145A0(a8, (long long *)&buf);
              sub_100C145F4((uint64_t)&buf);
              sub_100C145F4((uint64_t)&__p);
              if (SHIBYTE(v334.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v334.__r_.__value_.__l.__data_);
              }
              uint64_t v310 = v339;
              v311.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
              if (*(char *)(v310 + 47) < 0) {
                sub_10004FC84(&buf, *(void **)(v310 + 24), *(void *)(v310 + 32));
              }
              else {
                std::string buf = *(std::string *)(v310 + 24);
              }
              *(std::chrono::steady_clock::time_point *)v344 = v311;
              v312 = sub_100C36AF0((uint64_t **)(v13 + 536), *(_DWORD *)(v339 + 52), (_DWORD *)(v339 + 52));
              std::string::operator=((std::string *)(v312 + 40), &buf);
              *((void *)v312 + 8) = *(void *)v344;
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              sub_100C36978((uint64_t **)(v13 + 488), (void **)(v339 + 24), v339 + 24);
              sub_1009D343C(*(void *)(v13 + 608), v249);
              uint64_t v22 = 1;
            }
          }
        }
        goto LABEL_585;
      }
LABEL_550:
      long long v296 = v339;
      if (*((void *)&v339 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v339 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v297 = *(std::__shared_weak_count **)(v249 + 8);
      *(_OWORD *)uint64_t v249 = v296;
      if (v297) {
        sub_10004D2C8(v297);
      }
      uint64_t v22 = 1;
      goto LABEL_555;
    }
    if (!v252)
    {
LABEL_585:
      if (*((void *)&v339 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v339 + 1));
      }
      goto LABEL_587;
    }
    BOOL v283 = 0;
    goto LABEL_550;
  }
LABEL_587:
  if (subscriber::isSimAbsent())
  {
    v313 = (void *)(*(void *)(v13 + 392) + 16 * v250);
    v314 = (std::__shared_weak_count *)v313[1];
    void *v313 = 0;
    v313[1] = 0;
    if (v314) {
      sub_10004D2C8(v314);
    }
  }
LABEL_590:
  *(_DWORD *)(*(void *)(v13 + 368) + 4 * v328) = a5;
  if (SHIBYTE(v333) < 0) {
    operator delete(__dst[0]);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  return v22;
}

void sub_100C195DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if (a51) {
    sub_10004D2C8(a51);
  }
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C19920(uint64_t a1, int a2)
{
  uint64_t v3 = a1;
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(v3 + 608) + 8) - **(void **)(v3 + 608)) >> 4;
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%supdating personalities (%zu items)", buf, 0x20u);
  }
  if (a2 && !*(unsigned char *)(v3 + 96))
  {
    int v6 = *(uint64_t **)(v3 + 608);
    int v7 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%ssaving cache", buf, 0x16u);
    }
    CFArrayRef v91 = 0;
    CFMutableArrayRef theArray = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFMutableArrayRef v9 = theArray;
      CFMutableArrayRef theArray = Mutable;
      *(void *)std::string buf = v9;
      sub_1000440D4((const void **)buf);
    }
    CFArrayRef v10 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (v10)
    {
      CFArrayRef v11 = v91;
      CFArrayRef v91 = v10;
      *(void *)std::string buf = v11;
      sub_1000440D4((const void **)buf);
    }
    uint64_t v90 = 0;
    __p[0] = 0;
    *(void *)std::string buf = time(0);
    CFNumberRef v12 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, buf);
    if (v12)
    {
      uint64_t v13 = __p[0];
      __p[0] = v12;
      *(void *)std::string buf = v13;
      sub_1000570E8((const void **)buf);
    }
    uint64_t v90 = __p[0];
    __p[0] = 0;
    sub_1000570E8((const void **)__p);
    for (uint64_t i = 0; (unint64_t)i < sub_100C0F470(); uint64_t i = (subscriber *)((char *)i + 1))
    {
      uint64_t v17 = *v6;
      uint64_t v16 = v6[1];
      if (*v6 == v16) {
        goto LABEL_22;
      }
      while (1)
      {
        if (!*(unsigned char *)(*(void *)v17 + 49))
        {
          int v18 = *(_DWORD *)(*(void *)v17 + 52);
          if (v18 == subscriber::instanceAsSimSlot(i, v15)) {
            break;
          }
        }
        v17 += 16;
        if (v17 == v16)
        {
          uint64_t v17 = v16;
          break;
        }
      }
      if (v17 == v6[1] || sub_100C13C24(v17))
      {
LABEL_22:
        CFArrayAppendValue(theArray, &stru_101AC1B28);
      }
      else
      {
        unsigned int v19 = theArray;
        uint64_t v20 = *(void *)v17;
        if (*(char *)(*(void *)v17 + 47) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v20 + 24), *(void *)(v20 + 32));
        }
        else
        {
          *(_OWORD *)std::string __dst = *(_OWORD *)(v20 + 24);
          long long v89 = *(long long **)(v20 + 40);
        }
        if (SHIBYTE(v89) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)__dst;
          uint64_t v102 = v89;
        }
        *(void *)long long v97 = 0;
        if (SHIBYTE(v102) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v102;
        }
        uint64_t v98 = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v21 = *(void **)v97;
          *(void *)long long v97 = v98;
          v93[0] = v21;
          sub_1000558F4((const void **)v93);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        value[0] = *(void **)v97;
        *(void *)long long v97 = 0;
        sub_1000558F4((const void **)v97);
        if (SHIBYTE(v102) < 0) {
          operator delete(__p[0]);
        }
        CFArrayAppendValue(v19, value[0]);
        sub_1000558F4((const void **)value);
        if (SHIBYTE(v89) < 0) {
          operator delete(__dst[0]);
        }
        if (*(unsigned char *)(*(void *)v17 + 60)) {
          CFBooleanRef v22 = kCFBooleanTrue;
        }
        else {
          CFBooleanRef v22 = kCFBooleanFalse;
        }
        (*(void (**)(void, uint64_t, const __CFString *, void *, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), *(void *)v17 + 24, @"ts", v90, @"info", 0, 0, 0);
        (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), *(void *)v17 + 24, @"type", @"sim", @"info", 0, 0, 0);
        (*(void (**)(void, uint64_t, const __CFString *, CFBooleanRef, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), *(void *)v17 + 24, @"eap_aka", v22, @"info", 0, 0, 0);
      }
    }
    uint64_t v23 = *(os_unfair_lock_s **)(v3 + 104);
    if (CFArrayGetCount(theArray)) {
      CFMutableArrayRef v24 = theArray;
    }
    else {
      CFMutableArrayRef v24 = 0;
    }
    sub_1000825C4(v23, @"PersonalitySlots", v24, 0, 0, 0, 0, 0);
    uint64_t v25 = *v6;
    uint64_t v26 = v6[1];
    if (*v6 != v26)
    {
      do
      {
        uint64_t v27 = *(void *)v25;
        if (*(unsigned char *)(*(void *)v25 + 49) == 1)
        {
          int v28 = v91;
          if (*(char *)(v27 + 47) < 0)
          {
            sub_10004FC84(value, *(void **)(v27 + 24), *(void *)(v27 + 32));
          }
          else
          {
            *(_OWORD *)BOOL value = *(_OWORD *)(v27 + 24);
            uint64_t v87 = *(long long **)(v27 + 40);
          }
          if (SHIBYTE(v87) < 0)
          {
            sub_10004FC84(__p, value[0], (unint64_t)value[1]);
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)value;
            uint64_t v102 = v87;
          }
          *(void *)long long v97 = 0;
          if (SHIBYTE(v102) < 0)
          {
            sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            *(_OWORD *)std::string buf = *(_OWORD *)__p;
            *(void *)&uint8_t buf[16] = v102;
          }
          uint64_t v98 = 0;
          if (ctu::cf::convert_copy())
          {
            long long v29 = *(void **)v97;
            *(void *)long long v97 = v98;
            v93[0] = v29;
            sub_1000558F4((const void **)v93);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          *(void *)&long long v105 = *(void *)v97;
          *(void *)long long v97 = 0;
          sub_1000558F4((const void **)v97);
          if (SHIBYTE(v102) < 0) {
            operator delete(__p[0]);
          }
          CFArrayAppendValue(v28, (const void *)v105);
          sub_1000558F4((const void **)&v105);
          if (SHIBYTE(v87) < 0) {
            operator delete(value[0]);
          }
          (*(void (**)(void, uint64_t, const __CFString *, void *, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), *(void *)v25 + 24, @"ts", v90, @"info", 0, 0, 0);
          (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), *(void *)v25 + 24, @"type", @"cloud", @"info", 0, 0, 0);
        }
        v25 += 16;
      }
      while (v25 != v26);
    }
    uint64_t v30 = *(os_unfair_lock_s **)(v3 + 104);
    if (CFArrayGetCount(v91)) {
      CFArrayRef v31 = v91;
    }
    else {
      CFArrayRef v31 = 0;
    }
    sub_1000825C4(v30, @"PersonalityCloud", v31, 0, 0, 0, 0, 0);
    uint64_t v98 = 0;
    char v99 = 0;
    uint64_t v100 = 0;
    (*(void (**)(std::string **__return_ptr))(**(void **)(v3 + 120) + 80))(&v98);
    uint64_t v32 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEBUG))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2048;
      *(void *)&uint8_t buf[24] = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3);
      _os_log_debug_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEBUG, "#D %s%sremoveOutdatedPersonalities. wallets: %zu", buf, 0x20u);
    }
    long long v33 = v99;
    if (v99 != v98)
    {
      unint64_t v34 = 0;
      while (1)
      {
        if (isReal())
        {
          if ((void **)(v3 + 840) == sub_100046F68(v3 + 832, (void **)&v98[v34].__r_.__value_.__l.__data_))
          {
            ++v34;
            long long v33 = v99;
            goto LABEL_90;
          }
          int v35 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEBUG))
          {
            uint64_t v40 = (const char *)&v98[v34];
            uint64_t v41 = *((unsigned __int8 *)v40 + 23);
            BOOL v42 = (v41 & 0x80u) != 0;
            if ((v41 & 0x80u) != 0) {
              uint64_t v41 = *((void *)v40 + 1);
            }
            if (v42) {
              uint64_t v40 = *(const char **)v40;
            }
            if (!v41) {
              uint64_t v40 = "<invalid>";
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v40;
            _os_log_debug_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEBUG, "#D %s%s%s has label - cannot be deleted", buf, 0x20u);
          }
          long long v33 = sub_100C2FF58(&v98[v34 + 1], v99, &v98[v34]);
          for (uint64_t j = v99; j != v33; --j)
          {
            if (SHIBYTE(j[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(j[-1].__r_.__value_.__l.__data_);
            }
          }
        }
        else
        {
          (*(void (**)(void, std::string *))(**(void **)(v3 + 120) + 112))(*(void *)(v3 + 120), &v98[v34]);
          long long v33 = sub_100C2FF58(&v98[v34 + 1], v99, &v98[v34]);
          for (k = v99; k != v33; --k)
          {
            if (SHIBYTE(k[-1].__r_.__value_.__r.__words[2]) < 0) {
              operator delete(k[-1].__r_.__value_.__l.__data_);
            }
          }
        }
        char v99 = v33;
LABEL_90:
        uint64_t v38 = v98;
        unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v33 - (char *)v98) >> 3);
        if (v34 >= v39) {
          goto LABEL_101;
        }
      }
    }
    unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * (((char *)v99 - (char *)v98) >> 3);
    uint64_t v38 = v99;
LABEL_101:
    if (v39 > 5)
    {
      memset(v97, 0, sizeof(v97));
      if (v38 == v33)
      {
        uint64_t v70 = 0;
        uint64_t v69 = 0;
      }
      else
      {
        uint64_t v43 = v3;
        CFStringRef v44 = @"info";
        uint64_t v84 = v3;
        do
        {
          CFTypeRef cf = 0;
          (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v43 + 120) + 24))(&cf);
          int v45 = (uint64_t *)cf;
          if (cf) {
            uint64_t v46 = sub_100080934;
          }
          else {
            uint64_t v46 = 0;
          }
          if (v46)
          {
            *(void *)std::string buf = 0;
            if (cf)
            {
              CFTypeID v47 = CFGetTypeID(cf);
              if (v47 == CFNumberGetTypeID()) {
                ctu::cf::assign((ctu::cf *)buf, v45, v48);
              }
            }
            uint64_t v49 = *(void *)buf;
          }
          else
          {
            uint64_t v49 = 0;
          }
          if (SHIBYTE(v38->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_10004FC84(v93, v38->__r_.__value_.__l.__data_, v38->__r_.__value_.__l.__size_);
          }
          else
          {
            long long v50 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
            std::string::size_type v94 = v38->__r_.__value_.__r.__words[2];
            *(_OWORD *)uint64_t v93 = v50;
          }
          uint64_t v95 = v49;
          uint64_t v51 = *(void *)&v97[8];
          if (*(void *)&v97[8] >= *(void *)&v97[16])
          {
            uint64_t v53 = *(long long **)v97;
            uint64_t v54 = (uint64_t)(*(void *)&v97[8] - *(void *)v97) >> 5;
            unint64_t v55 = v54 + 1;
            if ((unint64_t)(v54 + 1) >> 59) {
              sub_10006A748();
            }
            CFStringRef v56 = v44;
            uint64_t v57 = *(void *)&v97[16] - *(void *)v97;
            if ((uint64_t)(*(void *)&v97[16] - *(void *)v97) >> 4 > v55) {
              unint64_t v55 = v57 >> 4;
            }
            if ((unint64_t)v57 >= 0x7FFFFFFFFFFFFFE0) {
              unint64_t v58 = 0x7FFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v58 = v55;
            }
            uint64_t v107 = &v97[16];
            if (v58)
            {
              if (v58 >> 59) {
                sub_10006A7CC();
              }
              int v59 = operator new(32 * v58);
            }
            else
            {
              int v59 = 0;
            }
            uint64_t v61 = &v59[32 * v54];
            *(void *)std::string buf = v59;
            *(void *)&uint8_t buf[8] = v61;
            *(void *)&uint8_t buf[16] = v61;
            *(void *)&uint8_t buf[24] = &v59[32 * v58];
            if (SHIBYTE(v94) < 0)
            {
              sub_10004FC84(&v59[32 * v54], v93[0], (unint64_t)v93[1]);
              CFStringRef v44 = v56;
              uint64_t v51 = *(void *)&v97[8];
              uint64_t v53 = *(long long **)v97;
              uint64_t v61 = *(char **)&buf[8];
              uint64_t v62 = *(char **)&buf[16];
              uint64_t v49 = v95;
            }
            else
            {
              *(_OWORD *)uint64_t v61 = *(_OWORD *)v93;
              *((void *)v61 + 2) = v94;
              uint64_t v62 = &v59[32 * v54];
              CFStringRef v44 = v56;
            }
            *(void *)&v59[32 * v54 + 24] = v49;
            *(void *)&uint8_t buf[16] = v62 + 32;
            *(void *)&long long v105 = v61;
            *((void *)&v105 + 1) = v61;
            long long v104 = v105;
            __p[0] = &v97[16];
            __p[1] = &v104;
            uint64_t v102 = &v105;
            uint64_t v103 = 0;
            if ((long long *)v51 == v53)
            {
              uint64_t v43 = v84;
            }
            else
            {
              uint64_t v43 = v84;
              do
              {
                uint64_t v63 = v61 - 32;
                BOOL v64 = (long long *)(v51 - 32);
                if (*(char *)(v51 - 9) < 0)
                {
                  sub_10004FC84(v63, *(void **)(v51 - 32), *(void *)(v51 - 24));
                  uint64_t v66 = (char *)*((void *)&v105 + 1);
                }
                else
                {
                  long long v65 = *v64;
                  *((void *)v61 - 2) = *(void *)(v51 - 16);
                  *(_OWORD *)uint64_t v63 = v65;
                  uint64_t v66 = v61;
                }
                *((void *)v61 - 1) = *(void *)(v51 - 8);
                uint64_t v61 = v66 - 32;
                *((void *)&v105 + 1) = v66 - 32;
                v51 -= 32;
              }
              while (v64 != v53);
            }
            LOBYTE(v103) = 1;
            sub_100C2FFB0((uint64_t)__p);
            uint64_t v67 = *(void *)&v97[16];
            long long v85 = *(_OWORD *)&buf[16];
            long long v68 = *(_OWORD *)v97;
            *(void *)long long v97 = v61;
            *(_OWORD *)&uint8_t buf[8] = v68;
            *(_OWORD *)&v97[8] = v85;
            *(void *)&uint8_t buf[24] = v67;
            *(void *)std::string buf = v68;
            sub_1000F5AA0((uint64_t)buf);
            uint64_t v60 = v85;
          }
          else
          {
            if (SHIBYTE(v94) < 0)
            {
              sub_10004FC84(*(unsigned char **)&v97[8], v93[0], (unint64_t)v93[1]);
            }
            else
            {
              long long v52 = *(_OWORD *)v93;
              *(void *)(*(void *)&v97[8] + 16) = v94;
              *(_OWORD *)uint64_t v51 = v52;
            }
            *(void *)(v51 + 24) = v95;
            uint64_t v60 = v51 + 32;
          }
          *(void *)&v97[8] = v60;
          if (SHIBYTE(v94) < 0) {
            operator delete(v93[0]);
          }
          sub_1000577C4(&cf);
          ++v38;
        }
        while (v38 != v33);
        uint64_t v70 = *(std::string **)&v97[8];
        uint64_t v69 = *(std::string **)v97;
        uint64_t v3 = v43;
      }
      unint64_t v71 = 126 - 2 * __clz(((char *)v70 - (char *)v69) >> 5);
      if (v70 == v69) {
        uint64_t v72 = 0;
      }
      else {
        uint64_t v72 = v71;
      }
      sub_100C30010(v69, v70, v72, 1);
      uint64_t v73 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v73, OS_LOG_TYPE_DEBUG))
      {
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = ((*(void *)&v97[8] - *(void *)v97) >> 5) - 5;
        _os_log_debug_impl((void *)&_mh_execute_header, v73, OS_LOG_TYPE_DEBUG, "#D %s%sSuppose to delete %d wallets", buf, 0x1Cu);
      }
      uint64_t v74 = *(void *)v97;
      if (*(void *)&v97[8] - *(void *)v97 >= 0xA1uLL)
      {
        do
        {
          uint64_t v75 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v75, OS_LOG_TYPE_DEFAULT))
          {
            long long v78 = *(const char **)(v74 + 160);
            uint64_t v77 = v74 + 160;
            uint64_t v76 = v78;
            uint64_t v79 = *(unsigned __int8 *)(v77 + 23);
            int v80 = (char)v79;
            if ((v79 & 0x80u) != 0) {
              uint64_t v79 = *(void *)(v77 + 8);
            }
            if (v80 >= 0) {
              uint64_t v76 = (const char *)v77;
            }
            if (!v79) {
              uint64_t v76 = "<invalid>";
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&buf[22] = 2080;
            *(void *)&uint8_t buf[24] = v76;
            _os_log_impl((void *)&_mh_execute_header, v75, OS_LOG_TYPE_DEFAULT, "#I %s%sremoving outdated personality for %s", buf, 0x20u);
            uint64_t v74 = *(void *)v97;
          }
          (*(void (**)(void, uint64_t))(**(void **)(v3 + 120) + 112))(*(void *)(v3 + 120), v74 + 160);
          uint64_t v81 = *(void *)&v97[8];
          uint64_t v82 = *(void *)v97 + 160;
          uint64_t v83 = *(void *)v97 + 192;
          if (*(void *)v97 + 192 != *(void *)&v97[8])
          {
            do
            {
              std::string::operator=((std::string *)v82, (const std::string *)(v82 + 32));
              *(void *)(v82 + 24) = *(void *)(v82 + 56);
              v82 += 32;
            }
            while (v82 + 32 != v81);
            uint64_t v83 = *(void *)&v97[8];
          }
          while (v83 != v82)
          {
            if (*(char *)(v83 - 9) < 0) {
              operator delete(*(void **)(v83 - 32));
            }
            v83 -= 32;
          }
          *(void *)&v97[8] = v82;
          uint64_t v74 = *(void *)v97;
        }
        while ((unint64_t)(v82 - *(void *)v97) > 0xA0);
      }
      *(void *)std::string buf = v97;
      sub_1003DDDFC((void ***)buf);
    }
    *(void *)std::string buf = &v98;
    sub_100047F64((void ***)buf);
    sub_1000570E8((const void **)&v90);
    sub_1000440D4((const void **)&v91);
    sub_1000440D4((const void **)&theArray);
  }
  sub_100C1505C(v3, 0);
}

void sub_100C1A83C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26,const void *a27,const void *a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,char a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,uint64_t a43,char a44,uint64_t a45,uint64_t a46,__int16 *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  a47 = &a39;
  sub_1003DDDFC((void ***)&a47);
  a47 = (__int16 *)&a44;
  sub_100047F64((void ***)&a47);
  sub_1000570E8(&a26);
  sub_1000440D4(&a27);
  sub_1000440D4(&a28);
  _Unwind_Resume(a1);
}

void sub_100C1A9F4(void *a1)
{
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  CFArrayRef v31 = &v32;
  uint64_t v2 = (uint64_t *)a1[76];
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (*v2 != v4)
  {
    uint64_t v5 = (void **)(a1 + 105);
    int v6 = (void **)(a1 + 108);
    do
    {
      if (!*(unsigned char *)(*(void *)v3 + 49) && !sub_100C13C24(v3))
      {
        subscriber::simSlotAsInstance();
        if (subscriber::isSimInserted())
        {
          if (v5 == sub_100046F68((uint64_t)(a1 + 104), (void **)(*(void *)v3 + 24))
            && v6 == sub_100046F68((uint64_t)(a1 + 107), (void **)(*(void *)v3 + 24)))
          {
            sub_100C3B554((uint64_t **)&v31, *(void *)v3 + 24);
          }
        }
      }
      v3 += 16;
    }
    while (v3 != v4);
    if (v33)
    {
      sub_100C25BAC((uint64_t)&v23, (uint64_t)a1, &v31);
      if (v30 < 0) {
        operator delete(__p);
      }
      if (v28 < 0) {
        operator delete(v27);
      }
      if (v26 < 0) {
        operator delete(v25);
      }
      if (v24 < 0) {
        operator delete(v23);
      }
    }
  }
  if (!a1[60]) {
    goto LABEL_49;
  }
  uint64_t v21 = 0;
  v22[0] = 0;
  v22[1] = 0;
  sub_100C1EADC(&v21, (uint64_t)a1);
  long long v20 = 0u;
  memset(v19, 0, sizeof(v19));
  int v7 = (uint64_t *)a1[76];
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  if (*v7 == v9) {
    goto LABEL_48;
  }
  while (1)
  {
    if (*(unsigned char *)(*(void *)v8 + 49)
      || v22 == (char **)sub_100046F68((uint64_t)&v21, (void **)(*(void *)v8 + 24)))
    {
      goto LABEL_22;
    }
    CFArrayRef v10 = sub_100046F68((uint64_t)(a1 + 104), (void **)(*(void *)v8 + 24)) + 7;
    if (!BYTE8(v20))
    {
      sub_10023C008((uint64_t)v19, (uint64_t)v10);
      BYTE8(v20) = 1;
      goto LABEL_22;
    }
    if (SimLabel::sameLabelContent()) {
      break;
    }
LABEL_22:
    v8 += 16;
    if (v8 == v9) {
      goto LABEL_48;
    }
  }
  CFArrayRef v11 = (void **)a1[58];
  if (v11 == a1 + 59)
  {
    char v12 = 1;
  }
  else
  {
    char v12 = 1;
    do
    {
      uint64_t v13 = sub_100046F68((uint64_t)(a1 + 104), v11 + 4);
      if (a1 + 105 != v13) {
        v12 &= *((unsigned char *)v13 + 128) != 0;
      }
      uint64_t v14 = (void **)v11[1];
      if (v14)
      {
        do
        {
          unsigned int v15 = v14;
          uint64_t v14 = (void **)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          unsigned int v15 = (void **)v11[2];
          BOOL v16 = *v15 == v11;
          CFArrayRef v11 = v15;
        }
        while (!v16);
      }
      CFArrayRef v11 = v15;
    }
    while (v15 != a1 + 59);
  }
  uint64_t v17 = a1[5];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sDuplicated label detected", buf, 0x16u);
  }
  if (v12)
  {
    int v18 = a1[5];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%sSIMs are marked as requiring label resolution", buf, 0x16u);
    }
    memset(buf, 0, sizeof(buf));
    sub_100C28CB0((uint64_t)a1, (uint64_t)buf, 0);
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_48:
  sub_100C31C64((uint64_t)v19);
  sub_10005CD2C((uint64_t)&v21, v22[0]);
LABEL_49:
  sub_100C1E074((uint64_t)a1, "label evaluation", 0);
  sub_1000DA2E4(v32);
}

void sub_100C1ADB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24,char *a25)
{
  if (*(char *)(v25 - 73) < 0) {
    operator delete(*(void **)(v25 - 96));
  }
  sub_100C31C64((uint64_t)&a9);
  sub_10005CD2C((uint64_t)&a24, a25);
  sub_1000DA2E4(*(char **)(v25 - 112));
  _Unwind_Resume(a1);
}

void sub_100C1AE18(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[103];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    *(void *)&__p[16] = *(void *)(a2 + 16);
  }
  LOBYTE(v121) = *(unsigned char *)(a2 + 24);
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)&v123[2] = *(void *)(a2 + 32);
  *(void *)&v123[10] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  int v6 = (char *)a1[100];
  int v7 = (char *)a1[99];
  unint64_t v8 = (v6 - v7) >> 3;
  if (v6 == v7) {
    uint64_t v9 = 0;
  }
  else {
    uint64_t v9 = 85 * v8 - 1;
  }
  unint64_t v10 = a1[102];
  if (v9 == a1[103] + v10)
  {
    BOOL v11 = v10 >= 0x55;
    unint64_t v12 = v10 - 85;
    if (v11)
    {
      a1[102] = v12;
      uint64_t v15 = *(void *)v7;
      uint64_t v13 = v7 + 8;
      uint64_t v14 = v15;
      a1[99] = v13;
      if (v6 == (char *)a1[101])
      {
        unint64_t v16 = a1[98];
        uint64_t v17 = (uint64_t)&v13[-v16];
        if ((unint64_t)v13 <= v16)
        {
          uint64_t v42 = (uint64_t)&v6[-v16];
          BOOL v41 = v42 == 0;
          uint64_t v43 = v42 >> 2;
          if (v41) {
            unint64_t v44 = 1;
          }
          else {
            unint64_t v44 = v43;
          }
          int v45 = (char *)sub_100048350(v44);
          CFTypeID v47 = &v45[8 * (v44 >> 2)];
          CFNumberRef v48 = (uint64_t *)a1[99];
          int v6 = v47;
          uint64_t v49 = a1[100] - (void)v48;
          if (v49)
          {
            int v6 = &v47[v49 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v50 = 8 * (v49 >> 3);
            uint64_t v51 = &v45[8 * (v44 >> 2)];
            do
            {
              uint64_t v52 = *v48++;
              *(void *)uint64_t v51 = v52;
              v51 += 8;
              v50 -= 8;
            }
            while (v50);
          }
          uint64_t v53 = (void *)a1[98];
          a1[98] = v45;
          a1[99] = v47;
          a1[100] = v6;
          a1[101] = &v45[8 * v46];
          if (v53)
          {
            operator delete(v53);
            int v6 = (char *)a1[100];
          }
        }
        else
        {
          uint64_t v18 = v17 >> 3;
          BOOL v19 = v17 >> 3 < -1;
          uint64_t v20 = (v17 >> 3) + 2;
          if (v19) {
            uint64_t v21 = v20;
          }
          else {
            uint64_t v21 = v18 + 1;
          }
          uint64_t v22 = -(v21 >> 1);
          uint64_t v23 = v21 >> 1;
          char v24 = &v13[-8 * v23];
          int64_t v25 = v6 - v13;
          if (v6 != v13)
          {
            memmove(&v13[-8 * v23], v13, v6 - v13);
            int v6 = (char *)a1[99];
          }
          char v26 = &v6[8 * v22];
          int v6 = &v24[v25];
          a1[100] = &v24[v25];
          a1[99] = v26;
        }
      }
      *(void *)int v6 = v14;
    }
    else
    {
      uint64_t v27 = (char *)a1[101];
      char v28 = (char *)a1[98];
      if (v8 >= (v27 - v28) >> 3)
      {
        if (v27 == v28) {
          unint64_t v31 = 1;
        }
        else {
          unint64_t v31 = (v27 - v28) >> 2;
        }
        uint64_t v32 = (char *)sub_100048350(v31);
        uint64_t v34 = v33;
        uint64_t v117 = v4;
        int v35 = operator new(0xFF0uLL);
        uint64_t v36 = &v32[8 * v8];
        int v37 = &v32[8 * v34];
        if (v8 == v34)
        {
          uint64_t v38 = 8 * v8;
          if (v6 - v7 < 1)
          {
            int v80 = v35;
            uint64_t v81 = v38 >> 2;
            if (v6 == v7) {
              unint64_t v82 = 1;
            }
            else {
              unint64_t v82 = v81;
            }
            uint64_t v83 = (char *)sub_100048350(v82);
            uint64_t v36 = &v83[8 * (v82 >> 2)];
            int v37 = &v83[8 * v84];
            if (v32) {
              operator delete(v32);
            }
            uint64_t v32 = v83;
            int v35 = v80;
          }
          else
          {
            uint64_t v39 = v38 >> 3;
            if (v39 >= -1) {
              unint64_t v40 = v39 + 1;
            }
            else {
              unint64_t v40 = v39 + 2;
            }
            v36 -= 8 * (v40 >> 1);
          }
        }
        *(void *)uint64_t v36 = v35;
        int v6 = v36 + 8;
        for (uint64_t i = a1[100]; i != a1[99]; i -= 8)
        {
          if (v36 == v32)
          {
            if (v6 >= v37)
            {
              if (v37 == v32) {
                unint64_t v90 = 1;
              }
              else {
                unint64_t v90 = (v37 - v32) >> 2;
              }
              CFArrayRef v91 = (char *)sub_100048350(v90);
              uint64_t v93 = v91;
              uint64_t v36 = &v91[(2 * v90 + 6) & 0xFFFFFFFFFFFFFFF8];
              uint64_t v94 = v6 - v32;
              BOOL v41 = v6 == v32;
              int v6 = v36;
              if (!v41)
              {
                int v6 = &v36[v94 & 0xFFFFFFFFFFFFFFF8];
                uint64_t v95 = 8 * (v94 >> 3);
                v96 = v36;
                long long v97 = v32;
                do
                {
                  uint64_t v98 = *(void *)v97;
                  v97 += 8;
                  *(void *)v96 = v98;
                  v96 += 8;
                  v95 -= 8;
                }
                while (v95);
              }
              int v37 = &v91[8 * v92];
              if (v32) {
                operator delete(v32);
              }
              uint64_t v32 = v93;
            }
            else
            {
              uint64_t v86 = (v37 - v6) >> 3;
              if (v86 >= -1) {
                uint64_t v87 = v86 + 1;
              }
              else {
                uint64_t v87 = v86 + 2;
              }
              uint64_t v88 = v87 >> 1;
              uint64_t v36 = &v32[8 * (v87 >> 1)];
              long long v89 = v32;
              if (v6 != v32)
              {
                memmove(v36, v32, v6 - v32);
                long long v89 = v6;
              }
              int v6 = &v89[8 * v88];
            }
          }
          uint64_t v99 = *(void *)(i - 8);
          *((void *)v36 - 1) = v99;
          v36 -= 8;
        }
        uint64_t v100 = (void *)a1[98];
        a1[98] = v32;
        a1[99] = v36;
        a1[100] = v6;
        a1[101] = v37;
        uint64_t v4 = v117;
        if (v100)
        {
          operator delete(v100);
          int v6 = (char *)a1[100];
        }
        goto LABEL_42;
      }
      long long v29 = operator new(0xFF0uLL);
      char v30 = v29;
      if (v27 == v6)
      {
        if (v7 == v28)
        {
          if (v6 == v7) {
            unint64_t v58 = 1;
          }
          else {
            unint64_t v58 = (v27 - v7) >> 2;
          }
          int v59 = (char *)sub_100048350(v58);
          int v7 = &v59[(2 * v58 + 6) & 0xFFFFFFFFFFFFFFF8];
          uint64_t v61 = (uint64_t *)a1[99];
          uint64_t v62 = v7;
          uint64_t v63 = a1[100] - (void)v61;
          if (v63)
          {
            uint64_t v62 = &v7[v63 & 0xFFFFFFFFFFFFFFF8];
            uint64_t v64 = 8 * (v63 >> 3);
            long long v65 = &v59[(2 * v58 + 6) & 0xFFFFFFFFFFFFFFF8];
            do
            {
              uint64_t v66 = *v61++;
              *(void *)long long v65 = v66;
              v65 += 8;
              v64 -= 8;
            }
            while (v64);
          }
          uint64_t v67 = (void *)a1[98];
          a1[98] = v59;
          a1[99] = v7;
          a1[100] = v62;
          a1[101] = &v59[8 * v60];
          if (v67)
          {
            operator delete(v67);
            int v7 = (char *)a1[99];
          }
        }
        *((void *)v7 - 1) = v30;
        long long v68 = (char *)a1[99];
        a1[99] = v68 - 8;
        uint64_t v69 = *((void *)v68 - 1);
        a1[99] = v68;
        uint64_t v70 = (char *)a1[100];
        if (v70 == (char *)a1[101])
        {
          unint64_t v71 = a1[98];
          uint64_t v72 = (uint64_t)&v68[-v71];
          if ((unint64_t)v68 <= v71)
          {
            uint64_t v105 = (uint64_t)&v70[-v71];
            BOOL v41 = v105 == 0;
            uint64_t v106 = v105 >> 2;
            if (v41) {
              unint64_t v107 = 1;
            }
            else {
              unint64_t v107 = v106;
            }
            uint64_t v108 = (char *)sub_100048350(v107);
            unint64_t v110 = &v108[8 * (v107 >> 2)];
            long long v111 = (uint64_t *)a1[99];
            uint64_t v70 = v110;
            uint64_t v112 = a1[100] - (void)v111;
            if (v112)
            {
              uint64_t v70 = &v110[v112 & 0xFFFFFFFFFFFFFFF8];
              uint64_t v113 = 8 * (v112 >> 3);
              uint64_t v114 = &v108[8 * (v107 >> 2)];
              do
              {
                uint64_t v115 = *v111++;
                *(void *)uint64_t v114 = v115;
                v114 += 8;
                v113 -= 8;
              }
              while (v113);
            }
            v116 = (void *)a1[98];
            a1[98] = v108;
            a1[99] = v110;
            a1[100] = v70;
            a1[101] = &v108[8 * v109];
            if (v116)
            {
              operator delete(v116);
              uint64_t v70 = (char *)a1[100];
            }
          }
          else
          {
            uint64_t v73 = v72 >> 3;
            BOOL v19 = v72 >> 3 < -1;
            uint64_t v74 = (v72 >> 3) + 2;
            if (v19) {
              uint64_t v75 = v74;
            }
            else {
              uint64_t v75 = v73 + 1;
            }
            uint64_t v76 = -(v75 >> 1);
            uint64_t v77 = v75 >> 1;
            long long v78 = &v68[-8 * v77];
            int64_t v79 = v70 - v68;
            if (v70 != v68)
            {
              memmove(&v68[-8 * v77], v68, v70 - v68);
              long long v68 = (char *)a1[99];
            }
            uint64_t v70 = &v78[v79];
            a1[100] = &v78[v79];
            a1[99] = &v68[8 * v76];
          }
        }
        *(void *)uint64_t v70 = v69;
      }
      else
      {
        *(void *)int v6 = v29;
      }
    }
    int v6 = (char *)(a1[100] + 8);
    a1[100] = v6;
LABEL_42:
    int v7 = (char *)a1[99];
  }
  if (v6 == v7)
  {
    unint64_t v55 = 0;
  }
  else
  {
    unint64_t v54 = a1[103] + a1[102];
    unint64_t v55 = *(void *)&v7[8 * (v54 / 0x55)] + 48 * (v54 % 0x55);
  }
  if ((__p[23] & 0x80000000) != 0)
  {
    sub_10004FC84((unsigned char *)v55, *(void **)__p, *(unint64_t *)&__p[8]);
  }
  else
  {
    long long v56 = *(_OWORD *)__p;
    *(void *)(v55 + 16) = *(void *)&__p[16];
    *(_OWORD *)unint64_t v55 = v56;
  }
  *(unsigned char *)(v55 + 24) = v121;
  *(_OWORD *)(v55 + 32) = *(_OWORD *)&v123[2];
  *(_OWORD *)&v123[2] = 0uLL;
  ++a1[103];
  if ((__p[23] & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (v4) {
      return;
    }
  }
  else if (v4)
  {
    return;
  }
  uint64_t v57 = a1[5];
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEBUG))
  {
    long long v101 = *(PersonalityInfo **)(a2 + 32);
    int v102 = *((_DWORD *)v101 + 14);
    uint64_t v103 = PersonalityInfo::logPrefix(v101);
    asString();
    if (v119 >= 0) {
      long long v104 = &v118;
    }
    else {
      long long v104 = v118;
    }
    *(_DWORD *)std::string __p = 136316162;
    *(void *)&__p[4] = "";
    *(_WORD *)&__p[12] = 2080;
    *(void *)&__p[14] = "";
    *(_WORD *)&__p[22] = 1024;
    int v121 = v102;
    __int16 v122 = 2080;
    *(void *)uint64_t v123 = v103;
    *(_WORD *)&v123[8] = 2080;
    *(void *)&v123[10] = v104;
    _os_log_debug_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEBUG, "#D %s%sdirect event push: [%d] %s %s", __p, 0x30u);
    if (v119 < 0) {
      operator delete(v118);
    }
  }
  sub_100C1F780((uint64_t)a1);
}

void sub_100C1B4F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13)
{
  operator delete(v14);
  if (v13) {
    operator delete(v13);
  }
  sub_100C145F4((uint64_t)&a13);
  _Unwind_Resume(a1);
}

BOOL sub_100C1B538(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = *(void *)(a1 + 424);
  if (!v4) {
    goto LABEL_11;
  }
  int v5 = *(_DWORD *)(v3 + 52);
  uint64_t v6 = a1 + 424;
  do
  {
    int v7 = *(_DWORD *)(v4 + 32);
    BOOL v8 = v7 < v5;
    if (v7 >= v5) {
      uint64_t v9 = (uint64_t *)v4;
    }
    else {
      uint64_t v9 = (uint64_t *)(v4 + 8);
    }
    if (!v8) {
      uint64_t v6 = v4;
    }
    uint64_t v4 = *v9;
  }
  while (*v9);
  if (v6 != a1 + 424 && v5 >= *(_DWORD *)(v6 + 32)) {
    BOOL v10 = !sub_10001D294((unsigned __int8 *)(v6 + 40), (unsigned __int8 *)(v3 + 24));
  }
  else {
LABEL_11:
  }
    BOOL v10 = 1;
  return *(_DWORD *)(*(void *)(a1 + 320) + 4 * subscriber::simSlotAsInstance()) == 5 && !v10;
}

void sub_100C1B5E4(char ***a1, uint64_t a2, unint64_t a3)
{
  if (!*(_DWORD *)(a2 + 4))
  {
    if (*(_DWORD *)a2)
    {
      int v5 = *(subscriber **)(a2 + 8);
      uint64_t v6 = *(subscriber **)(a2 + 16);
      int v7 = (const unsigned __int8 *)(v6 - v5);
      if (v6 != v5)
      {
        v61[0] = 0;
        v61[1] = 0;
        uint64_t v62 = 0;
        subscriber::sDecodeIccid((uint64_t *)v61, v5, v7, a3);
        BOOL v8 = (void *)HIBYTE(v62);
        if (v62 < 0) {
          BOOL v8 = v61[1];
        }
        if (!v8) {
          goto LABEL_76;
        }
        int v9 = ((uint64_t (*)(char ***, void **))(*a1)[38])(a1, v61);
        BOOL v10 = a1[5];
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        if (v9)
        {
          if (!v11) {
            goto LABEL_76;
          }
          int v12 = SHIBYTE(v62);
          uint64_t v13 = (void **)v61[0];
          uint64_t v14 = subscriber::asString();
          uint64_t v15 = v61;
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "";
          if (v12 < 0) {
            uint64_t v15 = v13;
          }
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&buf[22] = 2080;
          uint64_t v64 = (uint64_t)v15;
          __int16 v65 = 2080;
          uint64_t v66 = v14;
          unint64_t v16 = "#I %s%sabandoned SIM %s in slot:%s - sim file event suppressed";
          uint64_t v17 = v10;
        }
        else
        {
          if (v11)
          {
            int v23 = SHIBYTE(v62);
            char v24 = (void **)v61[0];
            uint64_t v25 = subscriber::asString();
            char v26 = v61;
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "";
            if (v23 < 0) {
              char v26 = v24;
            }
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&buf[22] = 2080;
            uint64_t v64 = (uint64_t)v26;
            __int16 v65 = 2080;
            uint64_t v66 = v25;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%s--> received simfile iccid:%s for slot:%s", buf, 0x2Au);
          }
          uint64_t v27 = a1[68];
          if (!v27) {
            goto LABEL_44;
          }
          int v28 = *(_DWORD *)a2;
          long long v29 = a1 + 68;
          do
          {
            int v30 = *((_DWORD *)v27 + 8);
            BOOL v31 = v30 < v28;
            if (v30 >= v28) {
              uint64_t v32 = (char ***)v27;
            }
            else {
              uint64_t v32 = (char ***)(v27 + 1);
            }
            if (!v31) {
              long long v29 = (char ***)v27;
            }
            uint64_t v27 = *v32;
          }
          while (*v32);
          if (v29 == a1 + 68 || v28 < *((_DWORD *)v29 + 8)) {
            goto LABEL_44;
          }
          if (SHIBYTE(v62) < 0)
          {
            sub_10004FC84(buf, v61[0], (unint64_t)v61[1]);
          }
          else
          {
            *(_OWORD *)std::string buf = *(_OWORD *)v61;
            *(void *)&uint8_t buf[16] = v62;
          }
          BOOL v33 = sub_10001D294((unsigned __int8 *)v29 + 40, buf);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (!v33 || std::chrono::steady_clock::now().__d_.__rep_ >= (uint64_t)(v29[8] + 12500000))
          {
LABEL_44:
            uint64_t v39 = a1[76];
            unint64_t v40 = (char **)*v39;
            BOOL v41 = (char **)v39[1];
            if (v40 != v41)
            {
              while ((*v40)[49] || *((_DWORD *)*v40 + 13) != *(_DWORD *)a2)
              {
                v40 += 2;
                if (v40 == v41) {
                  goto LABEL_63;
                }
              }
            }
            if (v40 == v41)
            {
LABEL_63:
              uint64_t v42 = 0;
            }
            else
            {
              uint64_t v43 = *v40;
              uint64_t v42 = (std::__shared_weak_count *)v40[1];
              if (v42) {
                atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v43)
              {
                sub_100C1BCE8(v43, (uint64_t)buf);
                BOOL v44 = sub_10001D294(buf, (unsigned __int8 *)v61);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                if (!v44)
                {
                  int v45 = a1[5];
                  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
                  {
                    sub_100C1BCE8(v43, (uint64_t)__p);
                    int v46 = SHIBYTE(v60);
                    CFTypeID v47 = (void **)__p[0];
                    int v48 = SHIBYTE(v62);
                    uint64_t v49 = (void **)v61[0];
                    uint64_t v50 = subscriber::asString();
                    uint64_t v51 = v61;
                    *(_DWORD *)std::string buf = 136316162;
                    if (v48 < 0) {
                      uint64_t v51 = v49;
                    }
                    *(void *)&uint8_t buf[4] = "";
                    *(void *)&buf[14] = "";
                    uint64_t v52 = __p;
                    *(_WORD *)&buf[12] = 2080;
                    if (v46 < 0) {
                      uint64_t v52 = v47;
                    }
                    *(_WORD *)&buf[22] = 2080;
                    uint64_t v64 = (uint64_t)v52;
                    __int16 v65 = 2080;
                    uint64_t v66 = (uint64_t)v51;
                    __int16 v67 = 2080;
                    uint64_t v68 = v50;
                    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I %s%sdetected SimSwap iccid:%s -> %s for slot:%s", buf, 0x34u);
                    if (SHIBYTE(v60) < 0) {
                      operator delete(__p[0]);
                    }
                  }
                }
              }
            }
            memset(buf, 0, sizeof(buf));
            unsigned int v53 = subscriber::simSlotAsInstance();
            int v54 = *(_DWORD *)a2;
            if (SHIBYTE(v62) < 0)
            {
              sub_10004FC84(__p, v61[0], (unint64_t)v61[1]);
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v61;
              uint64_t v60 = v62;
            }
            int v55 = sub_100C16DB4((uint64_t)a1, v54, (uint64_t)__p, *((_DWORD *)a1[43] + v53), *((_DWORD *)a1[46] + v53), 0, 0, (int64x2_t *)buf);
            if (SHIBYTE(v60) < 0) {
              operator delete(__p[0]);
            }
            if ((sub_100C13C8C((capabilities::ct *)a1, a1 + 76, (int64x2_t *)buf) | v55)) {
              sub_100C19920((uint64_t)a1, 1);
            }
            sub_100C1A9F4(a1);
            uint64_t v56 = *(void *)buf;
            if (*(void *)&buf[8] != *(void *)buf)
            {
              uint64_t v57 = 0;
              unint64_t v58 = 0;
              do
              {
                sub_100C1AE18(a1, v56 + v57);
                ++v58;
                uint64_t v56 = *(void *)buf;
                v57 += 48;
              }
              while (v58 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
            }
            __p[0] = buf;
            sub_100C30EFC((void ***)__p);
            if (v42) {
              sub_10004D2C8(v42);
            }
            goto LABEL_76;
          }
          uint64_t v34 = a1[5];
          if (!os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
LABEL_76:
            if (SHIBYTE(v62) < 0) {
              operator delete(v61[0]);
            }
            return;
          }
          int v35 = SHIBYTE(v62);
          uint64_t v36 = (void **)v61[0];
          uint64_t v37 = subscriber::asString();
          uint64_t v38 = v61;
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "";
          if (v35 < 0) {
            uint64_t v38 = v36;
          }
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&buf[22] = 2080;
          uint64_t v64 = (uint64_t)v38;
          __int16 v65 = 2080;
          uint64_t v66 = v37;
          unint64_t v16 = "#I %s%sSIM %s was detached from slot:%s few milliseconds ago - ignore";
          uint64_t v17 = v34;
        }
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, v16, buf, 0x2Au);
        goto LABEL_76;
      }
      uint64_t v22 = a1[5];
      if (!os_log_type_enabled(v22, (os_log_type_t)v7)) {
        return;
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2080;
      uint64_t v64 = subscriber::asString();
      BOOL v19 = "#W %s%shandleSimFileEvent received with ICCID / slot:%s but without empty fData";
      uint64_t v20 = v22;
      uint32_t v21 = 32;
    }
    else
    {
      uint64_t v18 = a1[5];
      if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      BOOL v19 = "#W %s%shandleSimFileEvent received with ICCID but without slot";
      uint64_t v20 = v18;
      uint32_t v21 = 22;
    }
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, v19, buf, v21);
  }
}

void sub_100C1BC48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100C1BCE8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[49])
  {
    *(void *)a2 = 0;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
  }
  else if (result[47] < 0)
  {
    return (char *)sub_10004FC84((unsigned char *)a2, *((void **)result + 3), *((void *)result + 4));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)(result + 24);
    *(void *)(a2 + 16) = *((void *)result + 5);
  }
  return result;
}

void sub_100C1BD28(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 608);
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void **)(v2 + 8);
  if (v3 != v4)
  {
    while (*(unsigned char *)(*v3 + 49) || *(_DWORD *)(*v3 + 52) != 1)
    {
      v3 += 2;
      if (v3 == v4) {
        goto LABEL_9;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_9:
    int v5 = 0;
    uint64_t v6 = 0;
  }
  else
  {
    uint64_t v6 = *v3;
    int v5 = (std::__shared_weak_count *)v3[1];
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (*(unsigned char *)(a1 + 312))
  {
    int v7 = (_OWORD *)(a1 + 288);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    if (*(char *)(a1 + 311) < 0)
    {
      sub_10004FC84(__p, *(void **)(a1 + 288), *(void *)(a1 + 296));
    }
    else
    {
      *(_OWORD *)std::string __p = *v7;
      uint64_t v13 = *(void *)(a1 + 304);
    }
    if (!v6 || !sub_10001D294((unsigned __int8 *)(v6 + 24), (unsigned __int8 *)__p) || !*(unsigned char *)(v6 + 48))
    {
      BOOL v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 311) < 0) {
          int v7 = *(_OWORD **)v7;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2080;
        unint64_t v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sSimulating SIM personality for carrierID based configuration: %s", buf, 0x20u);
      }
      memset(buf, 0, sizeof(buf));
      if (((uint64_t (*)(uint64_t, uint64_t, void **, uint64_t, uint64_t, void, uint64_t, uint8_t *))sub_100C16DB4)(a1, 1, __p, 5, 2, 0, 256, buf))sub_100C19920(a1, 1); {
      sub_100C1A9F4((void *)a1);
      }
      uint64_t v9 = *(void *)buf;
      if (*(void *)&buf[8] != *(void *)buf)
      {
        uint64_t v10 = 0;
        unint64_t v11 = 0;
        do
        {
          sub_100C1AE18((void *)a1, v9 + v10);
          ++v11;
          uint64_t v9 = *(void *)buf;
          v10 += 48;
        }
        while (v11 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
      }
      uint64_t v14 = buf;
      sub_100C30EFC((void ***)&v14);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_100C1BF6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16)
{
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1BFB4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    uint64_t v106 = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%shandleVinylInfoChanged: %s", buf, 0x20u);
  }
  uint64_t v6 = capabilities::ct::supportedVinylSlotCount((capabilities::ct *)v5);
  uint64_t v8 = *(void *)(a1 + 160);
  uint64_t v7 = *(void *)(a1 + 168);
  uint64_t v9 = 0x2E8BA2E8BA2E8BA3 * ((v7 - v8) >> 3);
  if (v9 == v6)
  {
    char v104 = 0;
    int64x2_t v102 = 0uLL;
    unint64_t v103 = 0;
    v101[0] = (unsigned char *)a1;
    v101[1] = &v104;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    uint64_t v98 = &v99;
    if (v8 != v7)
    {
      char v75 = 0;
      uint64_t v76 = (uint64_t **)(a1 + 832);
      uint64_t v74 = v7;
      while (!*(unsigned char *)(v8 + 80))
      {
LABEL_78:
        v8 += 88;
        if (v8 == v74) {
          goto LABEL_83;
        }
      }
      uint64_t v10 = *(void *)(v8 + 56);
      uint64_t v11 = *(void *)(v8 + 64);
      while (1)
      {
        if (v10 == v11) {
          goto LABEL_78;
        }
        cf[0] = 0;
        cf[1] = 0;
        uint64_t v83 = 0;
        int v12 = (long long *)(v10 + 16);
        if (*(char *)(v10 + 39) < 0)
        {
          sub_10004FC84(cf, *(void **)(v10 + 16), *(void *)(v10 + 24));
        }
        else
        {
          long long v13 = *v12;
          uint64_t v83 = *(void *)(v10 + 32);
          *(_OWORD *)CFTypeRef cf = v13;
        }
        (*(void (**)(void, CFTypeRef *))(**(void **)(a1 + 120) + 88))(*(void *)(a1 + 120), cf);
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
        uint64_t v14 = *(BOOL **)buf;
        LOBYTE(__dst[0]) = 0;
        if (!*(void *)buf) {
          break;
        }
        CFTypeID v15 = CFGetTypeID(*(CFTypeRef *)buf);
        if (v15 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)__dst, v14, v16);
        }
        int v17 = LOBYTE(__dst[0]);
        sub_1000577C4((const void **)buf);
        if (!v17) {
          goto LABEL_18;
        }
LABEL_27:
        if (!*(unsigned char *)(v10 + 88)) {
          goto LABEL_60;
        }
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
        int v23 = *(BOOL **)buf;
        LOBYTE(__dst[0]) = 0;
        if (!*(void *)buf)
        {
          sub_1000577C4((const void **)buf);
LABEL_34:
          uint64_t v27 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
          {
            CFTypeRef v28 = (CFTypeRef)HIBYTE(v83);
            if (v83 < 0) {
              CFTypeRef v28 = cf[1];
            }
            long long v29 = cf;
            if (v83 < 0) {
              long long v29 = (CFTypeRef *)cf[0];
            }
            BOOL v21 = v28 == 0;
            int v30 = "<invalid>";
            if (!v21) {
              int v30 = (const char *)v29;
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&buf[22] = 2080;
            uint64_t v106 = (uint64_t)v30;
            LOWORD(v107) = 2080;
            *(void *)((char *)&v107 + 2) = "Provisioning";
            _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s%smarking %s as %s", buf, 0x2Au);
          }
          (*(void (**)(void, CFTypeRef *, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), cf, @"provisioning", kCFBooleanTrue, @"info", 0, 0, 0);
          v109[0] = off_101A48E48;
          v109[3] = v109;
          sub_100C1D130(v101, (unsigned __int8 *)cf, (uint64_t)v109);
          sub_100C36E54(v109);
          if ((void **)(a1 + 840) != sub_100046F68((uint64_t)v76, (void **)cf))
          {
            if (*(void *)(a1 + 848) != 1) {
              sub_100C36FAC(v76, (void **)cf);
            }
            sub_100C1D258((uint64_t)&v90, a1, (uint64_t)cf, (long long *)"Provisioning", &xmmword_101B102B8);
            if (v97 < 0) {
              operator delete(__p);
            }
            if (v95 < 0) {
              operator delete(v94);
            }
            if (v93 < 0) {
              operator delete(v92);
            }
            if (v91 < 0) {
              operator delete(v90);
            }
            (*(void (**)(void, CFTypeRef *, const __CFString *, const __CFString *, void, void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), cf, @"label-id", @"info", 0, 0);
            (*(void (**)(void, CFTypeRef *, const __CFString *, const __CFString *, void, void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), cf, @"label-id-confirmed", @"info", 0, 0);
            if (SHIBYTE(v83) < 0)
            {
              sub_10004FC84(buf, (void *)cf[0], (unint64_t)cf[1]);
            }
            else
            {
              *(_OWORD *)std::string buf = *(_OWORD *)cf;
              *(void *)&uint8_t buf[16] = v83;
            }
            LOBYTE(v106) = 1;
            sub_100C1D4C4(a1, buf);
            if ((_BYTE)v106 && (char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
            char v75 = 1;
          }
          goto LABEL_60;
        }
        CFTypeID v24 = CFGetTypeID(*(CFTypeRef *)buf);
        if (v24 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)__dst, v23, v25);
        }
        int v26 = LOBYTE(__dst[0]);
        sub_1000577C4((const void **)buf);
        if (!v26) {
          goto LABEL_34;
        }
LABEL_60:
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
        BOOL v31 = *(BOOL **)buf;
        LOBYTE(__dst[0]) = 0;
        if (*(void *)buf)
        {
          CFTypeID v32 = CFGetTypeID(*(CFTypeRef *)buf);
          if (v32 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)__dst, v31, v33);
          }
          int v34 = LOBYTE(__dst[0]);
          sub_1000577C4((const void **)buf);
          if (v34)
          {
            (*(void (**)(void, CFTypeRef *, const __CFString *, const __CFString *, void, void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), cf, @"no_src", @"info", 0, 0);
            v108[0] = off_101A48EC8;
            v108[3] = v108;
            sub_100C1D130(v101, (unsigned __int8 *)cf, (uint64_t)v108);
            sub_100C36E54(v108);
          }
        }
        else
        {
          sub_1000577C4((const void **)buf);
        }
        if (*(char *)(v10 + 39) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v10 + 16), *(void *)(v10 + 24));
        }
        else
        {
          long long v35 = *v12;
          uint64_t v80 = *(void *)(v10 + 32);
          *(_OWORD *)std::string __dst = v35;
        }
        uint64_t v87 = 0;
        uint64_t v36 = (uint64_t **)sub_100046ED4((uint64_t)&v98, &v87, __dst);
        if (!*v36)
        {
          memset(buf, 0, sizeof(buf));
          sub_100C370E8((uint64_t)&v98, (uint64_t)__dst, buf);
          uint64_t v37 = v87;
          uint64_t v38 = *(uint64_t **)buf;
          **(void **)std::string buf = 0;
          v38[1] = 0;
          v38[2] = v37;
          char *v36 = v38;
          if (*v98)
          {
            uint64_t v98 = (uint64_t **)*v98;
            uint64_t v38 = *v36;
          }
          sub_100046C90(v99, v38);
          ++v100;
        }
        if (SHIBYTE(v80) < 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(v83) < 0) {
          operator delete((void *)cf[0]);
        }
        v10 += 216;
      }
      sub_1000577C4((const void **)buf);
LABEL_18:
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeRef v19 = (CFTypeRef)HIBYTE(v83);
        if (v83 < 0) {
          CFTypeRef v19 = cf[1];
        }
        uint64_t v20 = cf;
        if (v83 < 0) {
          uint64_t v20 = (CFTypeRef *)cf[0];
        }
        BOOL v21 = v19 == 0;
        uint64_t v22 = "<invalid>";
        if (!v21) {
          uint64_t v22 = (const char *)v20;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&buf[22] = 2080;
        uint64_t v106 = (uint64_t)v22;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%smarking %s as eSIM", buf, 0x20u);
      }
      (*(void (**)(void, CFTypeRef *, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), cf, @"esim", kCFBooleanTrue, @"info", 0, 0, 0);
      v110[0] = off_101A48DB8;
      v110[3] = v110;
      sub_100C1D130(v101, (unsigned __int8 *)cf, (uint64_t)v110);
      sub_100C36E54(v110);
      goto LABEL_27;
    }
    char v75 = 0;
LABEL_83:
    uint64_t v87 = 0;
    uint64_t v88 = 0;
    uint64_t v89 = 0;
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 120) + 80))(&v87);
    uint64_t v40 = v87;
    uint64_t v41 = v88;
    if (v87 != v88)
    {
      uint64_t v42 = (uint64_t **)(a1 + 608);
      do
      {
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
        uint64_t v43 = *(BOOL **)buf;
        LOBYTE(__dst[0]) = 0;
        if (*(void *)buf)
        {
          CFTypeID v44 = CFGetTypeID(*(CFTypeRef *)buf);
          if (v44 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)__dst, v43, v45);
          }
          int v46 = LOBYTE(__dst[0]);
          sub_1000577C4((const void **)buf);
          if (!v46 || &v99 != (uint64_t **)sub_100046F68((uint64_t)&v98, (void **)v40)) {
            goto LABEL_96;
          }
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
          CFTypeID v47 = *(BOOL **)buf;
          LOBYTE(__dst[0]) = 0;
          if (*(void *)buf)
          {
            CFTypeID v48 = CFGetTypeID(*(CFTypeRef *)buf);
            if (v48 == CFBooleanGetTypeID()) {
              ctu::cf::assign((ctu::cf *)__dst, v47, v49);
            }
            int v50 = LOBYTE(__dst[0]);
            sub_1000577C4((const void **)buf);
            if (v50) {
              goto LABEL_96;
            }
          }
          else
          {
            sub_1000577C4((const void **)buf);
          }
          uint64_t v51 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v52 = *(unsigned __int8 *)(v40 + 23);
            BOOL v53 = (v52 & 0x80u) != 0;
            if ((v52 & 0x80u) != 0) {
              uint64_t v52 = *(void *)(v40 + 8);
            }
            if (v53) {
              int v54 = *(const char **)v40;
            }
            else {
              int v54 = (const char *)v40;
            }
            BOOL v21 = v52 == 0;
            int v55 = "<invalid>";
            if (!v21) {
              int v55 = v54;
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&buf[22] = 2080;
            uint64_t v106 = (uint64_t)v55;
            _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I %s%sDetected deleted eSIM: %s", buf, 0x20u);
          }
          (*(void (**)(void, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v40, @"no_src", kCFBooleanTrue, @"info", 0, 0, 0);
          uint64_t v56 = **v42;
          uint64_t v57 = (*v42)[1];
          if (v56 == v57) {
            goto LABEL_114;
          }
          while (!sub_10001D294((unsigned __int8 *)(*(void *)v56 + 24), (unsigned __int8 *)v40))
          {
            v56 += 16;
            if (v56 == v57)
            {
              uint64_t v56 = v57;
              break;
            }
          }
          if (v56 == (*v42)[1])
          {
LABEL_114:
            if (*(char *)(v40 + 23) < 0)
            {
              sub_10004FC84(__dst, *(void **)v40, *(void *)(v40 + 8));
            }
            else
            {
              long long v58 = *(_OWORD *)v40;
              uint64_t v80 = *(void *)(v40 + 16);
              *(_OWORD *)std::string __dst = v58;
            }
            char v81 = 7;
            sub_100C13144(&v77, a1, v40, 0, 1);
            if (SHIBYTE(v80) < 0)
            {
              sub_10004FC84(cf, __dst[0], (unint64_t)__dst[1]);
            }
            else
            {
              *(_OWORD *)CFTypeRef cf = *(_OWORD *)__dst;
              uint64_t v83 = v80;
            }
            char v59 = v81;
            char v84 = v81;
            uint64_t v60 = v77;
            uint64_t v61 = v78;
            uint64_t v85 = v77;
            uint64_t v86 = v78;
            uint64_t v77 = 0;
            long long v78 = 0;
            if (SHIBYTE(v83) < 0)
            {
              sub_10004FC84(buf, (void *)cf[0], (unint64_t)cf[1]);
              char v59 = v84;
              uint64_t v60 = v85;
              uint64_t v61 = v86;
            }
            else
            {
              *(_OWORD *)std::string buf = *(_OWORD *)cf;
              *(void *)&uint8_t buf[16] = v83;
            }
            LOBYTE(v106) = v59;
            *(void *)&long long v107 = v60;
            *((void *)&v107 + 1) = v61;
            uint64_t v85 = 0;
            uint64_t v86 = 0;
            uint64_t v62 = v102.i64[1];
            if (v102.i64[1] >= v103)
            {
              v102.i64[1] = sub_100C2FC44(&v102, (long long *)buf);
              if (*((void *)&v107 + 1)) {
                sub_10004D2C8(*((std::__shared_weak_count **)&v107 + 1));
              }
            }
            else
            {
              if ((char)buf[23] < 0)
              {
                sub_10004FC84((unsigned char *)v102.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
              }
              else
              {
                long long v63 = *(_OWORD *)buf;
                *(void *)(v102.i64[1] + 16) = *(void *)&buf[16];
                *(_OWORD *)uint64_t v62 = v63;
              }
              *(unsigned char *)(v62 + 24) = v106;
              *(_OWORD *)(v62 + 32) = v107;
              long long v107 = 0uLL;
              v102.i64[1] = v62 + 48;
            }
            if ((char)buf[23] < 0) {
              operator delete(*(void **)buf);
            }
            if (v86) {
              sub_10004D2C8(v86);
            }
            if (SHIBYTE(v83) < 0) {
              operator delete((void *)cf[0]);
            }
            if (SHIBYTE(v80) < 0) {
              operator delete(__dst[0]);
            }
          }
          else
          {
            *(void *)std::string buf = v56;
            sub_100C1D930(a1, (long long ***)buf, (char ***)(a1 + 608), &v102);
            char v104 = 1;
          }
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
          uint64_t v64 = *(BOOL **)buf;
          LOBYTE(__dst[0]) = 0;
          if (!*(void *)buf) {
            goto LABEL_143;
          }
          CFTypeID v65 = CFGetTypeID(*(CFTypeRef *)buf);
          if (v65 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)__dst, v64, v66);
          }
          if (LOBYTE(__dst[0]))
          {
            sub_1000577C4((const void **)buf);
          }
          else
          {
LABEL_143:
            (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(a1 + 120) + 24))(cf);
            __int16 v67 = (BOOL *)cf[0];
            LOBYTE(__dst[0]) = 0;
            if (cf[0])
            {
              CFTypeID v68 = CFGetTypeID(cf[0]);
              if (v68 == CFBooleanGetTypeID()) {
                ctu::cf::assign((ctu::cf *)__dst, v67, v69);
              }
              int v70 = LOBYTE(__dst[0]);
            }
            else
            {
              int v70 = 0;
            }
            sub_1000577C4(cf);
            sub_1000577C4((const void **)buf);
            if (!v70)
            {
              (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 128))(*(void *)(a1 + 120), v40);
              goto LABEL_96;
            }
          }
          (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 112))(*(void *)(a1 + 120), v40);
          sub_100C36FAC((uint64_t **)(a1 + 856), (void **)v40);
          char v75 = 1;
        }
        else
        {
          sub_1000577C4((const void **)buf);
        }
LABEL_96:
        v40 += 24;
      }
      while (v40 != v41);
    }
    if (v104) {
      sub_100C19920(a1, 1);
    }
    if (v75) {
      sub_100C1E074(a1, "vinyl correction", 0);
    }
    uint64_t v71 = v102.i64[0];
    if (v102.i64[1] != v102.i64[0])
    {
      uint64_t v72 = 0;
      unint64_t v73 = 0;
      do
      {
        sub_100C1AE18((void *)a1, v71 + v72);
        ++v73;
        uint64_t v71 = v102.i64[0];
        v72 += 48;
      }
      while (v73 < 0xAAAAAAAAAAAAAAABLL * ((v102.i64[1] - v102.i64[0]) >> 4));
    }
    *(void *)std::string buf = &v87;
    sub_100047F64((void ***)buf);
    sub_10005CD2C((uint64_t)&v98, (char *)v99);
    *(void *)std::string buf = &v102;
    sub_100C30EFC((void ***)buf);
  }
  else
  {
    uint64_t v39 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2048;
      uint64_t v106 = v9;
      LOWORD(v107) = 2048;
      *(void *)((char *)&v107 + 2) = v6;
      _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s%sIncomplete vinyl info, %zu elements instead of %zu", buf, 0x2Au);
    }
  }
}

void sub_100C1CF90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,char *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,char *a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59,uint64_t a60)
{
  sub_100C145F4(v60 - 256);
  sub_100C145F4((uint64_t)&a28);
  if (a26 < 0) {
    operator delete(__p);
  }
  *(void *)(v60 - 256) = &a38;
  sub_100047F64((void ***)(v60 - 256));
  sub_10005CD2C((uint64_t)&a54, a55);
  a28 = &a59;
  sub_100C30EFC((void ***)&a28);
  _Unwind_Resume(a1);
}

void sub_100C1D130(unsigned char **a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v3 = *a1;
  uint64_t v4 = (uint64_t *)*((void *)*a1 + 76);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), a2))
    {
      v5 += 16;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    if (v5 != *(void *)(v3[76] + 8))
    {
      uint64_t v14 = 0;
      CFTypeID v15 = 0;
      sub_100612480(*(long long **)v5, &v14);
      uint64_t v10 = *(void *)(a3 + 24);
      if (!v10) {
        sub_10007B600();
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v10 + 48))(v10, &v14);
      uint64_t v12 = v14;
      uint64_t v11 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v13 = *(std::__shared_weak_count **)(v5 + 8);
      *(void *)uint64_t v5 = v12;
      *(void *)(v5 + 8) = v11;
      if (v13) {
        sub_10004D2C8(v13);
      }
      *a1[1] = 1;
      if (v15) {
        sub_10004D2C8(v15);
      }
    }
  }
}

void sub_100C1D240(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C1D258(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5)
{
  uint64_t v10 = *(void *)(a2 + 608);
  uint64_t v11 = *(void **)v10;
  uint64_t v12 = *(void **)(v10 + 8);
  if (*(void **)v10 == v12) {
    goto LABEL_8;
  }
  while (!sub_10001D294((unsigned __int8 *)(*v11 + 24), (unsigned __int8 *)a3))
  {
    v11 += 2;
    if (v11 == v12)
    {
      uint64_t v11 = v12;
      break;
    }
  }
  if (v11 == *(void **)(v10 + 8))
  {
LABEL_8:
    long long v13 = 0;
  }
  else
  {
    long long v13 = (std::__shared_weak_count *)v11[1];
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  memset(buf, 0, sizeof(buf));
  long long __p = 0uLL;
  uint64_t v23 = 0;
  sub_100C31734((char *)a1, a5, (long long *)buf, a4, 1, &__p);
  uint64_t v14 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = *(unsigned __int8 *)(a3 + 23);
    int v17 = *(const char **)a3;
    uint64_t v16 = *(void *)(a3 + 8);
    asString();
    if ((v15 & 0x80u) == 0) {
      uint64_t v18 = v15;
    }
    else {
      uint64_t v18 = v16;
    }
    if ((v15 & 0x80u) == 0) {
      CFTypeRef v19 = (const char *)a3;
    }
    else {
      CFTypeRef v19 = v17;
    }
    uint64_t p_p = __p;
    *(_DWORD *)std::string buf = 136315906;
    if (!v18) {
      CFTypeRef v19 = "<invalid>";
    }
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    if (v23 >= 0) {
      uint64_t p_p = (uint64_t)&__p;
    }
    *(_WORD *)&buf[22] = 2080;
    CFBooleanRef v25 = v19;
    __int16 v26 = 2080;
    uint64_t v27 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%screatePrefixedLabel, %s <- %s", buf, 0x2Au);
    if (SHIBYTE(v23) < 0) {
      operator delete((void *)__p);
    }
  }
  *(void *)std::string buf = a3;
  BOOL v21 = sub_100C3B444((uint64_t **)(a2 + 856), (void **)a3, (long long **)buf);
  std::string::operator=((std::string *)(v21 + 7), (const std::string *)a1);
  std::string::operator=((std::string *)(v21 + 10), (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(v21 + 13), (const std::string *)(a1 + 48));
  *((unsigned char *)v21 + 128) = *(unsigned char *)(a1 + 72);
  std::string::operator=((std::string *)(v21 + 17), (const std::string *)(a1 + 80));
  if (v13) {
    sub_10004D2C8(v13);
  }
}

void sub_100C1D498(_Unwind_Exception *a1)
{
  sub_1001A7138(v1);
  if (v2) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100C1D4C4(uint64_t a1, unsigned __int8 *a2)
{
  if (*(void *)(a1 + 848) != 1) {
    return;
  }
  uint64_t v4 = (uint64_t *)(a1 + 832);
  long long __dst = 0uLL;
  uint64_t v36 = 0;
  uint64_t v5 = *(void *)(a1 + 832);
  if (*(char *)(v5 + 55) < 0)
  {
    sub_10004FC84(&__dst, *(void **)(v5 + 32), *(void *)(v5 + 40));
    uint64_t v5 = *v4;
  }
  else
  {
    long long __dst = *(_OWORD *)(v5 + 32);
    uint64_t v36 = *(void *)(v5 + 48);
  }
  long long v33 = 0u;
  memset(&v34, 0, sizeof(v34));
  long long v31 = 0u;
  *(_OWORD *)CFTypeID v32 = 0u;
  *(_OWORD *)long long v29 = 0u;
  *(_OWORD *)int v30 = 0u;
  sub_10023C008((uint64_t)v29, v5 + 56);
  if (a2[24] && sub_10001D294((unsigned __int8 *)&__dst, a2))
  {
    int v6 = 1;
  }
  else
  {
    uint64_t v7 = (void *)HIBYTE(v30[0]);
    if (SHIBYTE(v30[0]) < 0) {
      uint64_t v7 = v29[1];
    }
    if (!v7)
    {
      uint64_t v8 = HIBYTE(v31);
      if (v31 < 0) {
        uint64_t v8 = v31;
      }
      if (!v8) {
        goto LABEL_59;
      }
    }
    int v6 = 0;
  }
  uint64_t v9 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    if (v6) {
      uint64_t v10 = "reassigning";
    }
    else {
      uint64_t v10 = "converting";
    }
    if ((SBYTE7(v33) & 0x80u) == 0) {
      uint64_t v11 = v32;
    }
    else {
      uint64_t v11 = (void **)v32[0];
    }
    if (v6)
    {
      p_dst = "parked_super_label";
    }
    else
    {
      if (SHIBYTE(v36) < 0)
      {
        sub_10004FC84(__p, (void *)__dst, *((unint64_t *)&__dst + 1));
        goto LABEL_27;
      }
      p_dst = (const char *)&__dst;
    }
    *(_OWORD *)long long __p = *(_OWORD *)p_dst;
    uint64_t v17 = *((void *)p_dst + 2);
LABEL_27:
    long long v13 = (void *)HIBYTE(v17);
    if (v17 < 0) {
      long long v13 = __p[1];
    }
    uint64_t v14 = __p;
    if (v17 < 0) {
      uint64_t v14 = (void **)__p[0];
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    if (!v13) {
      uint64_t v14 = (void **)"<invalid>";
    }
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    *(void *)&uint8_t buf[24] = v10;
    __int16 v38 = 2080;
    uint64_t v39 = v11;
    __int16 v40 = 2080;
    uint64_t v41 = v14;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s%s%s label '%s' to super label for persona [%s]", buf, 0x34u);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10023A670((uint64_t)v4, *(void **)(a1 + 840));
  *(void *)(a1 + 832) = a1 + 840;
  *(void *)(a1 + 848) = 0;
  *(void *)(a1 + 840) = 0;
  memset(buf, 0, sizeof(buf));
  if (v6)
  {
    uint64_t v15 = "parked_super_label";
  }
  else
  {
    sub_100093B44((std::string *)buf, &v34);
    if (SHIBYTE(v36) < 0)
    {
      sub_10004FC84(v19, (void *)__dst, *((unint64_t *)&__dst + 1));
      goto LABEL_40;
    }
    uint64_t v15 = (const char *)&__dst;
  }
  *(_OWORD *)CFTypeRef v19 = *(_OWORD *)v15;
  uint64_t v20 = *((void *)v15 + 2);
LABEL_40:
  if (SBYTE7(v33) < 0)
  {
    sub_10004FC84(__p, v32[0], (unint64_t)v32[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v32;
    uint64_t v17 = v33;
  }
  char v18 = 1;
  sub_100C29034((uint64_t)&v21, a1, (uint64_t)v19, (uint64_t)__p, (uint64_t)buf);
  if (v28 < 0) {
    operator delete(v27);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v18 && SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(v19[0]);
  }
  if (buf[24] && (buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_59:
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SBYTE7(v33) < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  if (SHIBYTE(v30[0]) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v36) < 0) {
    operator delete((void *)__dst);
  }
}

void sub_100C1D8A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  sub_1001A7138((uint64_t)&a35);
  if (*(char *)(v35 - 137) < 0) {
    operator delete(*(void **)(v35 - 160));
  }
  _Unwind_Resume(a1);
}

void sub_100C1D930(uint64_t a1, long long ***a2, char ***a3, int64x2_t *a4)
{
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = **a2;
    int v10 = *((_DWORD *)v9 + 14);
    uint64_t v11 = PersonalityInfo::logPrefix((PersonalityInfo *)v9);
    uint64_t v12 = **a2;
    uint64_t v15 = (const char *)*((void *)v12 + 3);
    long long v13 = (char *)v12 + 24;
    uint64_t v14 = v15;
    uint64_t v16 = v13[23];
    int v17 = (char)v16;
    if ((v16 & 0x80u) != 0) {
      uint64_t v16 = *((void *)v13 + 1);
    }
    if (v17 >= 0) {
      uint64_t v14 = v13;
    }
    if (v16) {
      char v18 = v14;
    }
    else {
      char v18 = "<invalid>";
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
    *(_DWORD *)uint64_t v52 = v10;
    *(_WORD *)&v52[4] = 2080;
    *(void *)&v52[6] = v11;
    *(_WORD *)&v52[14] = 2080;
    *(void *)&v52[16] = v18;
    __int16 v53 = 2080;
    uint64_t v54 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s (previously on slot %s) is gone (forced out)", (uint8_t *)&buf, 0x3Au);
  }
  sub_1000E9358((uint64_t **)(a1 + 464), (void **)**a2 + 3);
  long long v50 = 0uLL;
  sub_100612480(**a2, &v50);
  uint64_t v19 = v50;
  if (*(unsigned char *)(v50 + 48))
  {
    *(unsigned char *)(v50 + 48) = 0;
    if (*(char *)(v19 + 47) < 0) {
      sub_10004FC84(&v45, *(void **)(v19 + 24), *(void *)(v19 + 32));
    }
    else {
      std::string v45 = *(std::string *)(v19 + 24);
    }
    char v46 = 2;
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
      char v20 = v46;
    }
    else
    {
      std::string __p = v45;
      char v20 = 2;
    }
    char v48 = v20;
    long long v49 = v50;
    if (*((void *)&v50 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __p;
    }
    v52[0] = v48;
    *(_OWORD *)&v52[8] = v49;
    long long v49 = 0uLL;
    unint64_t v21 = a4->u64[1];
    if (v21 >= a4[1].i64[0])
    {
      uint64_t v23 = sub_100C2FC44(a4, (long long *)&buf);
      char v24 = *(std::__shared_weak_count **)&v52[16];
      a4->i64[1] = v23;
      if (v24) {
        sub_10004D2C8(v24);
      }
    }
    else
    {
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84((unsigned char *)a4->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else
      {
        long long v22 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
        *(void *)(v21 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
        *(_OWORD *)unint64_t v21 = v22;
      }
      *(unsigned char *)(v21 + 24) = v52[0];
      *(_OWORD *)(v21 + 32) = *(_OWORD *)&v52[8];
      *(_OWORD *)&v52[8] = 0uLL;
      a4->i64[1] = v21 + 48;
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (*((void *)&v49 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v49 + 1));
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v45.__r_.__value_.__l.__data_);
    }
    uint64_t v19 = v50;
  }
  if (*(char *)(v19 + 47) < 0) {
    sub_10004FC84(&v45, *(void **)(v19 + 24), *(void *)(v19 + 32));
  }
  else {
    std::string v45 = *(std::string *)(v19 + 24);
  }
  char v46 = 6;
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(&__p, v45.__r_.__value_.__l.__data_, v45.__r_.__value_.__l.__size_);
    char v25 = v46;
  }
  else
  {
    std::string __p = v45;
    char v25 = 6;
  }
  char v48 = v25;
  long long v49 = v50;
  if (*((void *)&v50 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v50 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  v52[0] = v48;
  *(_OWORD *)&v52[8] = v49;
  long long v49 = 0uLL;
  unint64_t v26 = a4->u64[1];
  if (v26 >= a4[1].i64[0])
  {
    uint64_t v28 = sub_100C2FC44(a4, (long long *)&buf);
    long long v29 = *(std::__shared_weak_count **)&v52[16];
    a4->i64[1] = v28;
    if (v29) {
      sub_10004D2C8(v29);
    }
  }
  else
  {
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84((unsigned char *)a4->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v27 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v26 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v26 = v27;
    }
    *(unsigned char *)(v26 + 24) = v52[0];
    *(_OWORD *)(v26 + 32) = *(_OWORD *)&v52[8];
    *(_OWORD *)&v52[8] = 0uLL;
    a4->i64[1] = v26 + 48;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (*((void *)&v49 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v49 + 1));
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v45.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v45.__r_.__value_.__l.__data_);
  }
  uint64_t v30 = v50;
  v31.__d_.__rep_ = std::chrono::steady_clock::now().__d_.__rep_;
  if (*(char *)(v30 + 47) < 0) {
    sub_10004FC84(&buf, *(void **)(v30 + 24), *(void *)(v30 + 32));
  }
  else {
    std::string buf = *(std::string *)(v30 + 24);
  }
  *(std::chrono::steady_clock::time_point *)uint64_t v52 = v31;
  CFTypeID v32 = sub_100C36AF0((uint64_t **)(a1 + 536), *(_DWORD *)(v50 + 52), (_DWORD *)(v50 + 52));
  std::string::operator=((std::string *)(v32 + 40), &buf);
  *((void *)v32 + 8) = *(void *)v52;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  sub_1000E9358((uint64_t **)(a1 + 488), (void **)**a2 + 3);
  long long v33 = *a2;
  std::string v34 = **a2;
  if (*((char *)v34 + 47) < 0)
  {
    sub_10004FC84(&__p, *((void **)v34 + 3), *((void *)v34 + 4));
    long long v33 = *a2;
  }
  else
  {
    std::string __p = *(std::string *)((unsigned char *)v34 + 1);
  }
  char v48 = 7;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    char v35 = v48;
  }
  else
  {
    std::string buf = __p;
    char v35 = 7;
  }
  v52[0] = v35;
  *(void *)&v52[8] = *v33;
  uint64_t v36 = v33[1];
  *(void *)&v52[16] = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v36 + 1, 1uLL, memory_order_relaxed);
  }
  unint64_t v37 = a4->u64[1];
  if (v37 >= a4[1].i64[0])
  {
    uint64_t v39 = sub_100C2FC44(a4, (long long *)&buf);
    __int16 v40 = *(std::__shared_weak_count **)&v52[16];
    a4->i64[1] = v39;
    if (v40) {
      sub_10004D2C8(v40);
    }
  }
  else
  {
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84((unsigned char *)a4->i64[1], buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else
    {
      long long v38 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      *(void *)(v37 + 16) = *((void *)&buf.__r_.__value_.__l + 2);
      *(_OWORD *)unint64_t v37 = v38;
    }
    *(unsigned char *)(v37 + 24) = v52[0];
    *(_OWORD *)(v37 + 32) = *(_OWORD *)&v52[8];
    *(_OWORD *)&v52[8] = 0uLL;
    a4->i64[1] = v37 + 48;
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v41 = *a3;
  uint64_t v42 = sub_1009ED218((long long *)*a2 + 1, (long long *)(*a3)[1], (uint64_t)*a2);
  for (uint64_t i = v41[1]; i != (char *)v42; i -= 16)
  {
    CFTypeID v44 = (std::__shared_weak_count *)*((void *)i - 1);
    if (v44) {
      sub_10004D2C8(v44);
    }
  }
  v41[1] = (char *)v42;
  sub_100C13C8C((capabilities::ct *)a1, a3, a4);
  if (*((void *)&v50 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v50 + 1));
  }
}

void sub_100C1DFAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  *(void *)(v32 + 8) = v33;
  sub_100C145F4((uint64_t)&a27);
  sub_100C145F4((uint64_t)&a16);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a26) {
    sub_10004D2C8(a26);
  }
  _Unwind_Resume(a1);
}

void sub_100C1E074(uint64_t a1, void *a2, char a3)
{
  long long v70 = 0u;
  long long v71 = 0u;
  uint64_t v77 = 0;
  uint64_t v78 = 0;
  uint64_t v76 = &v77;
  if ((capabilities::ct::supportsGemini((capabilities::ct *)a1) & 1) == 0)
  {
    LOBYTE(v70) = 0;
    sub_100C40634((uint64_t)&v70 + 8, &v76);
    goto LABEL_113;
  }
  char v66 = a3;
  uint64_t v5 = (std::__shared_weak_count *)operator new(0x30uLL);
  int v6 = 0;
  v5->__shared_owners_ = 0;
  v5->__shared_weak_owners_ = 0;
  v5[1].__shared_owners_ = 0;
  p_shared_owners = &v5[1].__shared_owners_;
  v5->__vftable = (std::__shared_weak_count_vtbl *)off_101A493D8;
  v5[1].__vftable = (std::__shared_weak_count_vtbl *)&v5[1].__shared_owners_;
  CFTypeID v68 = v5;
  CFBooleanRef v69 = v5 + 1;
  v5[1].__shared_weak_owners_ = 0;
  while ((unint64_t)v6 < sub_100C0F470())
  {
    int v9 = subscriber::instanceAsSimSlot(v6, v8);
    int v10 = v9;
    uint64_t v11 = *(void *)(a1 + 608);
    uint64_t v12 = *(void **)v11;
    long long v13 = *(void **)(v11 + 8);
    if (v12 != v13)
    {
      while (*(unsigned char *)(*v12 + 49) || *(_DWORD *)(*v12 + 52) != v9)
      {
        v12 += 2;
        if (v12 == v13) {
          goto LABEL_36;
        }
      }
    }
    if (v12 != v13)
    {
      uint64_t v14 = *v12;
      uint64_t v15 = (std::__shared_weak_count *)v12[1];
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v14) {
        goto LABEL_34;
      }
      uint64_t v16 = sub_100046F68(a1 + 832, (void **)(v14 + 24));
      if ((void **)(a1 + 840) == v16) {
        goto LABEL_34;
      }
      int v17 = (void *)*((unsigned __int8 *)v16 + 79);
      if ((char)v17 < 0) {
        int v17 = v16[8];
      }
      if (v17) {
        goto LABEL_20;
      }
      char v18 = (void *)*((unsigned __int8 *)v16 + 103);
      if ((char)v18 < 0) {
        char v18 = v16[11];
      }
      if (v18) {
LABEL_20:
      }
        sub_10023C0CC((char *)buf, (long long *)(v16 + 7));
      else {
        sub_100C31D2C(buf, "", "USER_LABEL_PRIMARY");
      }
      uint64_t v19 = (void **)*p_shared_owners;
      char v20 = (void **)p_shared_owners;
      unint64_t v21 = (void **)p_shared_owners;
      if (*p_shared_owners)
      {
        while (1)
        {
          while (1)
          {
            unint64_t v21 = v19;
            int v22 = *((_DWORD *)v19 + 8);
            if (v22 <= v10) {
              break;
            }
            uint64_t v19 = (void **)*v21;
            char v20 = v21;
            if (!*v21) {
              goto LABEL_28;
            }
          }
          if (v22 >= v10) {
            break;
          }
          uint64_t v19 = (void **)v21[1];
          if (!v19)
          {
            char v20 = v21 + 1;
            goto LABEL_28;
          }
        }
      }
      else
      {
LABEL_28:
        uint64_t v80 = 0;
        uint64_t v23 = operator new(0x58uLL);
        *(void *)&long long v79 = v23;
        *((void *)&v79 + 1) = p_shared_owners;
        *((_DWORD *)v23 + 8) = v10;
        sub_10023C0CC((char *)v23 + 40, (long long *)buf);
        LOBYTE(v80) = 1;
        *(void *)uint64_t v23 = 0;
        *((void *)v23 + 1) = 0;
        *((void *)v23 + 2) = v21;
        CFTypeRef *v20 = v23;
        char v24 = v69->~__shared_weak_count;
        if (v24)
        {
          v69->__vftable = (std::__shared_weak_count_vtbl *)v24;
          uint64_t v23 = *v20;
        }
        char v25 = (uint64_t *)v23;
        uint64_t v5 = v68;
        sub_100046C90((uint64_t *)v68[1].__shared_owners_, v25);
        ++v68[1].__shared_weak_owners_;
        *(void *)&long long v79 = 0;
        sub_100C408C0((uint64_t)&v79);
      }
      if (SBYTE3(v86) < 0) {
        operator delete(v82);
      }
      if (((char)buf[23] & 0x80000000) == 0)
      {
LABEL_34:
        if (!v15) {
          goto LABEL_36;
        }
LABEL_35:
        sub_10004D2C8(v15);
        goto LABEL_36;
      }
      operator delete(*(void **)buf);
      if (v15) {
        goto LABEL_35;
      }
    }
LABEL_36:
    int v6 = (subscriber *)((char *)v6 + 1);
  }
  uint64_t v26 = *(unsigned __int8 *)(a1 + 287);
  if (*(char *)(a1 + 287) < 0)
  {
    if (!*(void *)(a1 + 272)) {
      goto LABEL_83;
    }
  }
  else if (!*(unsigned char *)(a1 + 287))
  {
LABEL_83:
    char v40 = 0;
    goto LABEL_112;
  }
  if ((v26 & 0x80u) == 0) {
    uint64_t v27 = *(unsigned __int8 *)(a1 + 287);
  }
  else {
    uint64_t v27 = *(void *)(a1 + 272);
  }
  uint64_t v28 = *(unsigned __int8 *)(a1 + 1079);
  int v29 = (char)v28;
  if ((v28 & 0x80u) != 0) {
    uint64_t v28 = *(void *)(a1 + 1064);
  }
  if (v27 == v28)
  {
    if (v29 >= 0) {
      uint64_t v30 = (unsigned __int8 *)(a1 + 1056);
    }
    else {
      uint64_t v30 = *(unsigned __int8 **)(a1 + 1056);
    }
    if ((v26 & 0x80) == 0)
    {
      if (*(unsigned char *)(a1 + 287))
      {
        std::chrono::steady_clock::time_point v31 = (unsigned __int8 *)(a1 + 264);
        while (*v31 == *v30)
        {
          ++v31;
          ++v30;
          if (!--v26) {
            goto LABEL_61;
          }
        }
        goto LABEL_79;
      }
LABEL_61:
      uint64_t v32 = *(void **)(a1 + 1080);
      if (v32 && v5[1].__shared_weak_owners_ == v32[2])
      {
        on_zero_shared = v69->__vftable;
        if ((uint64_t *)v69->__vftable == p_shared_owners) {
          goto LABEL_83;
        }
        std::string v34 = (void *)*v32;
        while (LODWORD(on_zero_shared->__on_zero_shared_weak) == *((_DWORD *)v34 + 8)
             && SimLabelContent::operator==())
        {
          char v35 = on_zero_shared->~__shared_weak_count_0;
          uint64_t v36 = on_zero_shared;
          if (v35)
          {
            do
            {
              on_zero_shared = (std::__shared_weak_count_vtbl *)v35;
              char v35 = *(void (__cdecl **)(std::__shared_weak_count *__hidden))v35;
            }
            while (v35);
          }
          else
          {
            do
            {
              on_zero_shared = (std::__shared_weak_count_vtbl *)v36->__on_zero_shared;
              BOOL v37 = on_zero_shared->~__shared_weak_count == (void (__cdecl *)(std::__shared_weak_count *__hidden))v36;
              uint64_t v36 = on_zero_shared;
            }
            while (!v37);
          }
          long long v38 = (void *)v34[1];
          if (v38)
          {
            do
            {
              uint64_t v39 = v38;
              long long v38 = (void *)*v38;
            }
            while (v38);
          }
          else
          {
            do
            {
              uint64_t v39 = (void *)v34[2];
              BOOL v37 = *v39 == (void)v34;
              std::string v34 = v39;
            }
            while (!v37);
          }
          char v40 = 0;
          std::string v34 = v39;
          if (on_zero_shared == (std::__shared_weak_count_vtbl *)p_shared_owners) {
            goto LABEL_112;
          }
        }
      }
      goto LABEL_79;
    }
    if (!memcmp(*(const void **)(a1 + 264), v30, *(void *)(a1 + 272))) {
      goto LABEL_61;
    }
  }
LABEL_79:
  uint64_t v41 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&buf[22] = 2080;
    unint64_t v82 = a2;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I %s%sprocessing badge recalculation caused by %s", buf, 0x20u);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 1096) + 64))(buf);
  sub_100706DDC((uint64_t)&v76, v77);
  uint64_t v42 = *(const void ***)&buf[8];
  uint64_t v76 = *(const void ****)buf;
  uint64_t v77 = *(const void ***)&buf[8];
  uint64_t v78 = *(void *)&buf[16];
  if (*(void *)&buf[16])
  {
    *(void *)(*(void *)&buf[8] + 16) = &v77;
    *(void *)std::string buf = &buf[8];
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&uint8_t buf[16] = 0;
    uint64_t v42 = 0;
  }
  else
  {
    uint64_t v76 = &v77;
  }
  sub_100706DDC((uint64_t)buf, v42);
  if (v78 == v5[1].__shared_weak_owners_)
  {
    uint64_t v43 = v76;
    if (v76 != &v77)
    {
      do
      {
        CFTypeID v44 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
        {
          std::string v45 = (void *)subscriber::asString();
          uint64_t v46 = *p_shared_owners;
          if (*p_shared_owners)
          {
            do
            {
              if (*(_DWORD *)(v46 + 32) >= *((_DWORD *)v43 + 8)) {
                CFTypeID v47 = (uint64_t *)v46;
              }
              else {
                CFTypeID v47 = (uint64_t *)(v46 + 8);
              }
              uint64_t v46 = *v47;
            }
            while (*v47);
          }
          asString();
          int v48 = v75;
          long long v49 = (void **)v74;
          long long v79 = 0uLL;
          uint64_t v80 = 0;
          ctu::cf::assign();
          long long v50 = &v74;
          if (v48 < 0) {
            long long v50 = v49;
          }
          *(_OWORD *)std::string __p = v79;
          uint64_t v73 = v80;
          uint64_t v51 = (void **)v79;
          if (v80 >= 0) {
            uint64_t v51 = __p;
          }
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&buf[22] = 2080;
          unint64_t v82 = v45;
          __int16 v83 = 2080;
          char v84 = v50;
          __int16 v85 = 2080;
          uint64_t v86 = v51;
          _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I %s%sbadging %s: [%s] -> %s", buf, 0x34u);
          if (SHIBYTE(v73) < 0) {
            operator delete(__p[0]);
          }
          if (v75 < 0) {
            operator delete(v74);
          }
        }
        uint64_t v52 = v43[1];
        if (v52)
        {
          do
          {
            __int16 v53 = (const void ***)v52;
            uint64_t v52 = (const void **)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            __int16 v53 = (const void ***)v43[2];
            BOOL v37 = *v53 == (const void **)v43;
            uint64_t v43 = v53;
          }
          while (!v37);
        }
        uint64_t v43 = v53;
      }
      while (v53 != &v77);
    }
    uint64_t v5 = v68;
    std::string::operator=((std::string *)(a1 + 1056), (const std::string *)(a1 + 264));
    char v40 = 1;
    atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
    *(void *)(a1 + 1080) = v69;
    uint64_t v54 = *(std::__shared_weak_count **)(a1 + 1088);
    *(void *)(a1 + 1088) = v68;
    if (v54)
    {
      sub_10004D2C8(v54);
      char v40 = 1;
    }
  }
  else
  {
    char v40 = 0;
    if (*(char *)(a1 + 1079) < 0)
    {
      **(unsigned char **)(a1 + 1056) = 0;
      *(void *)(a1 + 1064) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 1056) = 0;
      *(unsigned char *)(a1 + 1079) = 0;
    }
  }
LABEL_112:
  LOBYTE(v70) = v40;
  sub_100C40634((uint64_t)&v70 + 8, &v76);
  sub_10004D2C8(v5);
  a3 = v66;
LABEL_113:
  sub_100706DDC((uint64_t)&v76, v77);
  std::mutex::lock((std::mutex *)(a1 + 880));
  if ((_BYTE)v70)
  {
    uint64_t v55 = a1 + 1016;
    sub_100706DDC(a1 + 1008, *(const void ***)(a1 + 1016));
    uint64_t v56 = v71;
    *(void *)(a1 + 1008) = *((void *)&v70 + 1);
    *(void *)(a1 + 1016) = v56;
    uint64_t v57 = *((void *)&v71 + 1);
    *(void *)(a1 + 1024) = *((void *)&v71 + 1);
    if (v57)
    {
      *(void *)(v56 + 16) = v55;
      *((void *)&v70 + 1) = &v71;
      long long v71 = 0uLL;
    }
    else
    {
      *(void *)(a1 + 1008) = v55;
    }
  }
  memset(buf, 0, sizeof(buf));
  long long v58 = sub_100319F54((uint64_t *)buf, a1 + 832);
  sub_100319FAC(v58, *(void ***)(a1 + 856), (void **)(a1 + 864));
  if ((a3 & 1) == 0 && *(unsigned char *)(a1 + 1000) && *(void *)(a1 + 992) == *(void *)&buf[16])
  {
    uint64_t v60 = *(unsigned __int8 **)(a1 + 976);
    if (v60 != (unsigned __int8 *)(a1 + 984))
    {
      uint64_t v61 = *(unsigned __int8 **)buf;
      while (sub_10001D294(v60 + 32, v61 + 32) && SimLabel::operator==())
      {
        uint64_t v62 = (unsigned __int8 *)*((void *)v60 + 1);
        long long v63 = v60;
        if (v62)
        {
          do
          {
            uint64_t v60 = v62;
            uint64_t v62 = *(unsigned __int8 **)v62;
          }
          while (v62);
        }
        else
        {
          do
          {
            uint64_t v60 = (unsigned __int8 *)*((void *)v63 + 2);
            BOOL v37 = *(void *)v60 == (void)v63;
            long long v63 = v60;
          }
          while (!v37);
        }
        uint64_t v64 = (unsigned __int8 *)*((void *)v61 + 1);
        if (v64)
        {
          do
          {
            CFTypeID v65 = v64;
            uint64_t v64 = *(unsigned __int8 **)v64;
          }
          while (v64);
        }
        else
        {
          do
          {
            CFTypeID v65 = (unsigned __int8 *)*((void *)v61 + 2);
            BOOL v37 = *(void *)v65 == (void)v61;
            uint64_t v61 = v65;
          }
          while (!v37);
        }
        uint64_t v61 = v65;
        if (v60 == (unsigned __int8 *)(a1 + 984)) {
          goto LABEL_137;
        }
      }
      goto LABEL_118;
    }
LABEL_137:
    sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
    std::mutex::unlock((std::mutex *)(a1 + 880));
  }
  else
  {
LABEL_118:
    sub_100C273A8(a1 + 944, (uint64_t)buf);
    sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
    std::mutex::unlock((std::mutex *)(a1 + 880));
    char v59 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2080;
      unint64_t v82 = a2;
      _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I %s%spublished assigned sim labels update caused by %s", buf, 0x20u);
    }
  }
  if ((_BYTE)v70) {
    (*(void (**)(void))(**(void **)(a1 + 1112) + 64))(*(void *)(a1 + 1112));
  }
  sub_100706DDC((uint64_t)&v70 + 8, (const void **)v71);
}

void sub_100C1E9FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,const void **a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
}

const void **sub_100C1EADC(const void **result, uint64_t a2)
{
  result[2] = 0;
  result[1] = 0;
  void *result = result + 1;
  uint64_t v2 = *(void ***)(a2 + 832);
  uint64_t v3 = (void **)(a2 + 840);
  if (v2 != (void **)(a2 + 840))
  {
    uint64_t v5 = (uint64_t **)result;
    uint64_t v22 = a2 + 512;
    uint64_t v23 = a2 + 488;
    char v20 = (void **)(a2 + 520);
    unint64_t v21 = (void **)(a2 + 496);
    do
    {
      CFDictionaryRef theDict = 0;
      (*(void (**)(const void **__return_ptr))(**(void **)(a2 + 120) + 24))(&v24);
      sub_10004EFE4(&theDict, &v24);
      sub_1000577C4(&v24);
      if (theDict) {
        int v6 = sub_100080778;
      }
      else {
        int v6 = 0;
      }
      if (v6)
      {
        CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"type");
        CFStringRef v8 = Value;
        if (Value)
        {
          CFTypeID v9 = CFGetTypeID(Value);
          if (v9 == CFStringGetTypeID() && CFEqual(v8, @"sim"))
          {
            CFBooleanRef v12 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"no_src");
            CFBooleanRef v13 = v12;
            v15 = v12 && (CFTypeID v14 = CFGetTypeID(v12), v14 == CFBooleanGetTypeID()) && CFBooleanGetValue(v13) == 1;
            uint64_t v16 = sub_100046F68(v23, v2 + 4);
            int v17 = sub_100046F68(v22, v2 + 4);
            BOOL v18 = v21 != v16 && v20 == v17;
            int v19 = !v18;
            if (!v15 && v19 && !sub_100C16CE8((os_unfair_lock_s *)a2, v2 + 4)) {
              sub_100C36C48(v5, v2 + 4, (uint64_t)(v2 + 4));
            }
          }
        }
      }
      uint64_t result = sub_100057D78((const void **)&theDict);
      int v10 = (void **)v2[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          int v10 = (void **)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void **)v2[2];
          BOOL v18 = *v11 == v2;
          uint64_t v2 = v11;
        }
        while (!v18);
      }
      uint64_t v2 = v11;
    }
    while (v11 != v3);
  }
  return result;
}

void sub_100C1ED18(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100057D78((const void **)va);
  sub_10005CD2C(v6, *(char **)(v6 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100C1ED64(void *a1)
{
  uint64_t v2 = (uint64_t **)(a1 + 55);
  if (a1[57])
  {
    uint64_t v61 = (uint64_t **)(a1 + 55);
    uint64_t v3 = a1[55];
    v70[0] = off_101A49348;
    v70[1] = a1;
    v70[3] = v70;
    uint64_t v4 = a1[5];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = *(unsigned __int8 *)(v3 + 55);
      BOOL v6 = (v5 & 0x80u) != 0;
      if ((v5 & 0x80u) != 0) {
        uint64_t v5 = *(void *)(v3 + 40);
      }
      if (v6) {
        uint64_t v7 = *(char **)(v3 + 32);
      }
      else {
        uint64_t v7 = (char *)(v3 + 32);
      }
      if (v5) {
        CFStringRef v8 = v7;
      }
      else {
        CFStringRef v8 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      __int16 v72 = 2080;
      uint64_t v73 = v8;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sresolveSimLabel, %s", buf, 0x20u);
      uint64_t v4 = a1[5];
    }
    int64x2_t v67 = 0uLL;
    CFTypeID v68 = 0;
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%s======== available", buf, 0x16u);
    }
    uint64_t v62 = (void **)(v3 + 32);
    uint64_t v60 = v3;
    CFTypeID v9 = (uint64_t **)a1[76];
    int v10 = *v9;
    uint64_t v11 = v9[1];
    if (*v9 == v11)
    {
      char v13 = 1;
    }
    else
    {
      CFBooleanRef v12 = (void **)(a1 + 105);
      char v13 = 1;
      do
      {
        uint64_t v14 = *v10;
        if (!*(unsigned char *)(*v10 + 49) && *(unsigned char *)(v14 + 48))
        {
          BOOL v15 = sub_100046F68((uint64_t)(a1 + 104), (void **)(v14 + 24));
          uint64_t v16 = a1[5];
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = *v10 + 24;
            uint64_t v18 = *(unsigned __int8 *)(*v10 + 47);
            int v19 = (char)v18;
            if ((v18 & 0x80u) != 0) {
              uint64_t v18 = *(void *)(*v10 + 32);
            }
            if (v19 < 0) {
              uint64_t v17 = *(void *)(*v10 + 24);
            }
            if (v18) {
              char v20 = (char *)v17;
            }
            else {
              char v20 = "<invalid>";
            }
            if (v12 == v15)
            {
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "";
              __int16 v72 = 2080;
              uint64_t v73 = v20;
              *(_WORD *)uint64_t v74 = 2080;
              *(void *)&v74[2] = "";
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", buf, 0x2Au);
            }
            else
            {
              asString();
              unint64_t v21 = (void **)&v80;
              if (v81.i8[15] < 0) {
                unint64_t v21 = v80;
              }
              *(_DWORD *)std::string buf = 136315906;
              *(void *)&uint8_t buf[4] = "";
              *(_WORD *)&buf[12] = 2080;
              *(void *)&buf[14] = "";
              __int16 v72 = 2080;
              uint64_t v73 = v20;
              *(_WORD *)uint64_t v74 = 2080;
              *(void *)&v74[2] = v21;
              _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", buf, 0x2Au);
              if (v81.i8[15] < 0) {
                operator delete(v80);
              }
            }
          }
          if (v12 != v15)
          {
            uint64_t v22 = *v10;
            (*(void (**)(unsigned char *__return_ptr, void *, void **))(*a1 + 152))(buf, a1, v15 + 7);
            sub_100C3EE84((uint64_t *)&v63, (long long *)(v22 + 24), (uint64_t)buf);
            uint64_t v23 = v67.i64[1];
            if (v67.i64[1] >= (unint64_t)v68)
            {
              uint64_t v25 = (v67.i64[1] - v67.i64[0]) >> 4;
              if ((unint64_t)(v25 + 1) >> 60) {
                sub_10006A748();
              }
              unint64_t v26 = (uint64_t)&v68[-v67.i64[0]] >> 3;
              if (v26 <= v25 + 1) {
                unint64_t v26 = v25 + 1;
              }
              if ((unint64_t)&v68[-v67.i64[0]] >= 0x7FFFFFFFFFFFFFF0) {
                unint64_t v27 = 0xFFFFFFFFFFFFFFFLL;
              }
              else {
                unint64_t v27 = v26;
              }
              __int16 v83 = &v68;
              uint64_t v28 = (char *)sub_10006A794((uint64_t)&v68, v27);
              int v29 = &v28[16 * v25];
              unint64_t v82 = &v28[16 * v30];
              *(_OWORD *)int v29 = v63;
              char v24 = v29 + 16;
              long long v63 = 0uLL;
              v81.i64[1] = (uint64_t)(v29 + 16);
              std::chrono::steady_clock::time_point v31 = (void *)v67.i64[1];
              uint64_t v32 = (void *)v67.i64[0];
              if (v67.i64[1] == v67.i64[0])
              {
                int64x2_t v34 = vdupq_n_s64(v67.u64[1]);
              }
              else
              {
                do
                {
                  long long v33 = *((_OWORD *)v31 - 1);
                  v31 -= 2;
                  *((_OWORD *)v29 - 1) = v33;
                  v29 -= 16;
                  *std::chrono::steady_clock::time_point v31 = 0;
                  v31[1] = 0;
                }
                while (v31 != v32);
                int64x2_t v34 = v67;
                char v24 = (_OWORD *)v81.i64[1];
              }
              v67.i64[0] = (uint64_t)v29;
              v67.i64[1] = (uint64_t)v24;
              int64x2_t v81 = v34;
              char v35 = v68;
              CFTypeID v68 = v82;
              unint64_t v82 = v35;
              uint64_t v80 = (void **)v34.i64[0];
              sub_10019E528((uint64_t)&v80);
            }
            else
            {
              *(_OWORD *)v67.i64[1] = v63;
              char v24 = (_OWORD *)(v23 + 16);
            }
            v67.i64[1] = (uint64_t)v24;
            if (v79 < 0) {
              operator delete(__p);
            }
            if (v77 < 0) {
              operator delete(v76);
            }
            if (v75 < 0) {
              operator delete(v73);
            }
            if (SHIBYTE(v72) < 0) {
              operator delete(*(void **)buf);
            }
            v13 &= *((unsigned char *)v15 + 128) != 0;
          }
        }
        v10 += 2;
      }
      while (v10 != v11);
    }
    BOOL v37 = sub_100046F68((uint64_t)(a1 + 104), v62);
    if (a1 + 105 == v37)
    {
      uint64_t v39 = 0;
      goto LABEL_71;
    }
    (*(void (**)(unsigned char *__return_ptr, void *, void **))(*a1 + 152))(buf, a1, v37 + 7);
    sub_100C3EE84((uint64_t *)&v80, (long long *)v62, (uint64_t)buf);
    long long v38 = v80;
    uint64_t v39 = (std::__shared_weak_count *)v81.i64[0];
    if (v79 < 0) {
      operator delete(__p);
    }
    if (v77 < 0) {
      operator delete(v76);
    }
    if (v75 < 0) {
      operator delete(v73);
    }
    if (SHIBYTE(v72) < 0)
    {
      operator delete(*(void **)buf);
      if (!v38) {
        goto LABEL_71;
      }
    }
    else if (!v38)
    {
LABEL_71:
      char v40 = a1[5];
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v41 = *(unsigned __int8 *)(v60 + 55);
        BOOL v42 = (v41 & 0x80u) != 0;
        if ((v41 & 0x80u) != 0) {
          uint64_t v41 = *(void *)(v60 + 40);
        }
        if (v42) {
          uint64_t v43 = *(char **)(v60 + 32);
        }
        else {
          uint64_t v43 = (char *)v62;
        }
        BOOL v44 = v41 == 0;
        std::string v45 = "<invalid>";
        if (!v44) {
          std::string v45 = v43;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&buf[12] = 2080;
        *(void *)&buf[14] = "";
        __int16 v72 = 2080;
        uint64_t v73 = v45;
        uint64_t v46 = "#I %s%sFailed to find label for: %s";
        CFTypeID v47 = v40;
        uint32_t v48 = 32;
        goto LABEL_93;
      }
LABEL_94:
      int v58 = 0;
LABEL_95:
      CFBooleanRef v69 = &v67;
      sub_10005CBF0((void ***)&v69);
      if (v39) {
        sub_10004D2C8(v39);
      }
      sub_100C3FD20(v70);
      uint64_t v2 = v61;
      if (v58) {
        sub_1000E1C44(v61, (uint64_t)*v61);
      }
      return sub_100C14634((uint64_t)a1, v2, @"RemovedSims", (uint64_t)"sims-to-resolve");
    }
    long long v50 = (char *)v67.i64[1];
    long long v49 = (char *)v67.i64[0];
    if (v67.i64[1] == v67.i64[0])
    {
      uint64_t v57 = a1[5];
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      uint64_t v46 = "#I %s%sNo SIMs to resolve to";
    }
    else
    {
      if (v13)
      {
        uint64_t v51 = a1[137];
        CFTypeID v65 = v38;
        char v66 = v39;
        if (v39)
        {
          atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          long long v50 = (char *)v67.i64[1];
        }
        long long v63 = 0uLL;
        uint64_t v64 = 0;
        sub_1008E9E78(&v63, v49, v50, (v50 - v49) >> 4);
        *(void *)std::string buf = a1;
        sub_100C3FC88((uint64_t)&buf[8], (uint64_t)v70);
        unint64_t v82 = 0;
        uint64_t v52 = operator new(0x30uLL);
        __int16 v53 = (char *)v52;
        uint64_t v54 = *(void *)buf;
        uint64_t v55 = *(unsigned char **)v74;
        void *v52 = off_101A492C8;
        v52[1] = v54;
        if (v55)
        {
          if (v55 == &buf[8])
          {
            v52[5] = v52 + 2;
            (*(void (**)(unsigned char *))(*(void *)&buf[8] + 24))(&buf[8]);
LABEL_103:
            unint64_t v82 = v53;
            int v58 = (*(uint64_t (**)(uint64_t, void ***, long long *, void ***))(*(void *)v51 + 32))(v51, &v65, &v63, &v80);
            sub_1008E9FC4(&v80);
            sub_100C3FD20(&buf[8]);
            CFBooleanRef v69 = (int64x2_t *)&v63;
            sub_10005CBF0((void ***)&v69);
            if (v66) {
              sub_10004D2C8(v66);
            }
            goto LABEL_95;
          }
          uint64_t v56 = v74;
          v52[5] = v55;
        }
        else
        {
          uint64_t v56 = v52 + 5;
        }
        *uint64_t v56 = 0;
        goto LABEL_103;
      }
      uint64_t v57 = a1[5];
      if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_94;
      }
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      uint64_t v46 = "#I %s%sNot all To: SIMs were setup via SimBuddy - postpone";
    }
    CFTypeID v47 = v57;
    uint32_t v48 = 22;
LABEL_93:
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
    goto LABEL_94;
  }
  uint64_t v36 = a1[5];
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %s%sdoResolveRemovedSims, nothing to resolve", buf, 0x16u);
  }
  return sub_100C14634((uint64_t)a1, v2, @"RemovedSims", (uint64_t)"sims-to-resolve");
}

void sub_100C1F614(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C1F6F8(void *a1, uint64_t a2, uint64_t a3)
{
  if (a3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(a3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  a1[4] = a2;
  a1[5] = a3;
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t result = a1[3];
  if (result)
  {
    BOOL v6 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v6();
  }
  return result;
}

void sub_100C1F780(uint64_t a1)
{
  unint64_t v2 = *(void *)(*(void *)(a1 + 792) + 8 * (*(void *)(a1 + 816) / 0x55uLL))
     + 48 * (*(void *)(a1 + 816) % 0x55uLL);
  uint64_t v3 = (PersonalityInfo **)(v2 + 32);
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *((_DWORD *)*v3 + 14);
    uint64_t v6 = PersonalityInfo::logPrefix(*v3);
    uint64_t v7 = *(unsigned __int8 *)(v2 + 23);
    BOOL v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v2 + 8);
    }
    if (v8) {
      CFTypeID v9 = *(const char **)v2;
    }
    else {
      CFTypeID v9 = (const char *)v2;
    }
    if (v7) {
      int v10 = v9;
    }
    else {
      int v10 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = v5;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v6;
    *(_WORD *)&buf[38] = 2080;
    *(void *)&buf[40] = v10;
    __int16 v47 = 2080;
    uint64_t v48 = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sfiring: [%d] %s [persona:%s -> %s]", buf, 0x3Au);
  }
  BOOL v42 = 0;
  uint64_t v43 = 0;
  *(void *)std::string buf = dispatch_group_create();
  sub_100C3730C((NSObject **)buf, &v42);
  if (*(void *)buf) {
    dispatch_release(*(dispatch_object_t *)buf);
  }
  uint64_t v11 = *(void **)(a1 + 744);
  if (v11 != (void *)(a1 + 752))
  {
    do
    {
      CFBooleanRef v12 = (std::__shared_weak_count *)v11[8];
      if (v12)
      {
        char v13 = std::__shared_weak_count::lock(v12);
        if (v13)
        {
          if (v11[7])
          {
            uint64_t v41 = 0;
            uint64_t v14 = v42;
            if (*((char *)v11 + 55) < 0)
            {
              sub_10004FC84(__p, (void *)v11[4], v11[5]);
            }
            else
            {
              *(_OWORD *)std::string __p = *((_OWORD *)v11 + 2);
              uint64_t v40 = v11[6];
            }
            long long v44 = *(_OWORD *)__p;
            uint64_t v45 = v40;
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v40 = 0;
            memset(buf, 0, sizeof(buf));
            sub_100C30F80(v14, (uint64_t)&v44, (uint64_t *)buf, &v41);
          }
          sub_10004D2C8(v13);
        }
      }
      BOOL v15 = (void *)v11[1];
      if (v15)
      {
        do
        {
          uint64_t v16 = v15;
          BOOL v15 = (void *)*v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint64_t v16 = (void *)v11[2];
          BOOL v17 = *v16 == (void)v11;
          uint64_t v11 = v16;
        }
        while (!v17);
      }
      uint64_t v11 = v16;
    }
    while (v16 != (void *)(a1 + 752));
  }
  uint64_t v18 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEBUG))
  {
    asString();
    long long v33 = v45 >= 0 ? &v44 : (long long *)v44;
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&uint8_t buf[24] = 0;
    *(_WORD *)&unsigned char buf[32] = 2080;
    *(void *)&buf[34] = v33;
    _os_log_debug_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEBUG, "#D %s%s%zu observers updated with %s", buf, 0x2Au);
    if (SHIBYTE(v45) < 0) {
      operator delete((void *)v44);
    }
  }
  unsigned int v19 = *(unsigned __int8 *)(v2 + 24);
  if (v19 - 2 >= 6)
  {
    if (v19 < 2)
    {
      char v20 = *(std::__shared_weak_count **)(a1 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(a1 + 8);
        uint64_t v22 = std::__shared_weak_count::lock(v20);
        if (v22)
        {
          uint64_t v23 = v22;
          atomic_fetch_add_explicit(&v22->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v22);
          Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 64));
          uint64_t v24 = *(void *)buf;
          sub_100058DB0(v37, "event delivery cutoff timer");
          uint64_t v25 = *(NSObject **)(a1 + 24);
          dispatch_object_t object = v25;
          if (v25) {
            dispatch_retain(v25);
          }
          aBlock[0] = _NSConcreteStackBlock;
          aBlock[1] = 1174405120;
          aBlock[2] = sub_100C20220;
          aBlock[3] = &unk_101A484E0;
          aBlock[4] = a1;
          aBlock[5] = v21;
          aBlock[6] = v23;
          atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          aBlock[7] = v42;
          aBlock[8] = v43;
          if (v43) {
            atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v35 = _Block_copy(aBlock);
          sub_100118A44(v24, (uint64_t)v37, 2, 60000000, &object, &v35);
          uint64_t v26 = v44;
          *(void *)&long long v44 = 0;
          uint64_t v27 = *(void *)(a1 + 768);
          *(void *)(a1 + 768) = v26;
          if (v27)
          {
            (*(void (**)(uint64_t))(*(void *)v27 + 8))(v27);
            uint64_t v28 = v44;
            *(void *)&long long v44 = 0;
            if (v28) {
              (*(void (**)(uint64_t))(*(void *)v28 + 8))(v28);
            }
          }
          if (v35) {
            _Block_release(v35);
          }
          if (object) {
            dispatch_release(object);
          }
          if (v38 < 0) {
            operator delete(v37[0]);
          }
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
          int v29 = *(std::__shared_weak_count **)(a1 + 16);
          if (v29)
          {
            uint64_t v30 = std::__shared_weak_count::lock(v29);
            if (v30)
            {
              atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v30);
              operator new();
            }
          }
          sub_100088B9C();
        }
      }
      sub_100088B9C();
    }
    std::chrono::steady_clock::time_point v31 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      asString();
      uint64_t v32 = v45 >= 0 ? &v44 : (long long *)v44;
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = v32;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "#E %s%sshouldSyncPersonalityEvent called with invalid event: %s", buf, 0x20u);
      if (SHIBYTE(v45) < 0) {
        operator delete((void *)v44);
      }
    }
  }
  sub_100C206E8(a1);
  if (v43) {
    sub_10004D2C8(v43);
  }
}

void sub_100C20038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *aBlock,dispatch_object_t object,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,uint64_t a36,void *a37,dispatch_object_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C20220(void *a1)
{
  unint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(void *)(v3 + 768);
        *(void *)(v3 + 768) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v30 = 0;
        unint64_t v31 = 0;
        int v29 = 0;
        uint64_t v7 = a1[7];
        BOOL v8 = *(uint64_t **)(v7 + 8);
        CFTypeID v9 = *(uint64_t **)(v7 + 16);
        while (v8 != v9)
        {
          int v10 = (std::__shared_weak_count *)v8[1];
          if (v10)
          {
            uint64_t v11 = std::__shared_weak_count::lock(v10);
            if (v11)
            {
              CFBooleanRef v12 = v11;
              uint64_t v13 = *v8;
              if (*v8)
              {
                uint64_t v14 = v30;
                if ((unint64_t)v30 >= v31)
                {
                  uint64_t v16 = (std::string *)sub_10030E9EC((uint64_t *)&v29, (long long *)v13);
                }
                else
                {
                  if (*(char *)(v13 + 23) < 0)
                  {
                    sub_10004FC84(v30, *(void **)v13, *(void *)(v13 + 8));
                  }
                  else
                  {
                    long long v15 = *(_OWORD *)v13;
                    v30->__r_.__value_.__r.__words[2] = *(void *)(v13 + 16);
                    *(_OWORD *)&v14->__r_.__value_.__l.__data_ = v15;
                  }
                  uint64_t v16 = v14 + 1;
                }
                uint64_t v30 = v16;
              }
              sub_10004D2C8(v12);
            }
          }
          v8 += 2;
        }
        BOOL v17 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "";
          __int16 v33 = 2080;
          int64x2_t v34 = "";
          _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "#E %s%s******************************", buf, 0x16u);
        }
        uint64_t v18 = 10;
        do
        {
          unsigned int v19 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "";
            __int16 v33 = 2080;
            int64x2_t v34 = "";
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "#E %s%s", buf, 0x16u);
          }
          --v18;
        }
        while (v18);
        char v20 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          asString();
          if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            uint64_t p_p = &__p;
          }
          else {
            uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
          }
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = "";
          __int16 v33 = 2080;
          int64x2_t v34 = "";
          __int16 v35 = 2080;
          unint64_t v36 = (unint64_t)p_p;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#E %s%sfiring timed out!!!: %s", buf, 0x20u);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v20 = *(NSObject **)(v3 + 40);
        }
        if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
        {
          uint64_t v26 = v29;
          uint64_t v25 = v30;
          sub_100062B40(v29, v30, ",", 1uLL, &__p);
          uint64_t v27 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &__p
              : (std::string *)__p.__r_.__value_.__r.__words[0];
          *(_DWORD *)std::string buf = 136315906;
          *(void *)&uint8_t buf[4] = "";
          __int16 v33 = 2080;
          int64x2_t v34 = "";
          __int16 v35 = 2048;
          unint64_t v36 = 0xAAAAAAAAAAAAAAABLL * (((char *)v25 - (char *)v26) >> 3);
          __int16 v37 = 2082;
          char v38 = v27;
          _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "#E %s%s%zu client(s) is stuck: %{public}s", buf, 0x2Au);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v21 = 10;
        do
        {
          uint64_t v22 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)std::string buf = 136315394;
            *(void *)&uint8_t buf[4] = "";
            __int16 v33 = 2080;
            int64x2_t v34 = "";
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "#E %s%s", buf, 0x16u);
          }
          --v21;
        }
        while (v21);
        uint64_t v23 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
        {
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = "";
          __int16 v33 = 2080;
          int64x2_t v34 = "";
          _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "#E %s%s******************************", buf, 0x16u);
        }
        sub_100C206E8(v3);
        *(void *)std::string buf = &v29;
        sub_100047F64((void ***)buf);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100C206A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a14;
  sub_100047F64(&a17);
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

void sub_100C206E8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 768);
  if (v2)
  {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
    uint64_t v3 = *(void *)(a1 + 768);
    *(void *)(a1 + 768) = 0;
    if (v3) {
      (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    }
  }
  uint64_t v4 = *(void *)(a1 + 776);
  if (v4)
  {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
    uint64_t v5 = *(void *)(a1 + 776);
    *(void *)(a1 + 776) = 0;
    if (v5) {
      (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
    }
  }
  sub_100C2FB2C(*(void *)(*(void *)(a1 + 792) + 8 * (*(void *)(a1 + 816) / 0x55uLL)) + 48
                                                                                           * (*(void *)(a1 + 816)
                                                                                            % 0x55uLL));
  uint64_t v6 = *(void *)(a1 + 824) - 1;
  *(void *)(a1 + 824) = v6;
  unint64_t v7 = *(void *)(a1 + 816) + 1;
  *(void *)(a1 + 816) = v7;
  if (v7 >= 0xAA)
  {
    operator delete(**(void ***)(a1 + 792));
    *(void *)(a1 + 792) += 8;
    *(void *)(a1 + 816) -= 85;
    uint64_t v6 = *(void *)(a1 + 824);
  }
  if (v6)
  {
    sub_100C1F780(a1);
  }
}

void *sub_100C2085C(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C20890(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100C208E0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v28 = 0;
        unint64_t v29 = 0;
        uint64_t v27 = 0;
        uint64_t v6 = a1[7];
        unint64_t v7 = *(uint64_t **)(v6 + 8);
        BOOL v8 = *(uint64_t **)(v6 + 16);
        if (v7 != v8)
        {
          do
          {
            CFTypeID v9 = (std::__shared_weak_count *)v7[1];
            if (v9)
            {
              int v10 = std::__shared_weak_count::lock(v9);
              if (v10)
              {
                uint64_t v11 = v10;
                uint64_t v12 = *v7;
                if (*v7)
                {
                  uint64_t v13 = v28;
                  if ((unint64_t)v28 >= v29)
                  {
                    long long v15 = (std::string *)sub_10030E9EC((uint64_t *)&v27, (long long *)v12);
                  }
                  else
                  {
                    if (*(char *)(v12 + 23) < 0)
                    {
                      sub_10004FC84(v28, *(void **)v12, *(void *)(v12 + 8));
                    }
                    else
                    {
                      long long v14 = *(_OWORD *)v12;
                      v28->__r_.__value_.__r.__words[2] = *(void *)(v12 + 16);
                      *(_OWORD *)&v13->__r_.__value_.__l.__data_ = v14;
                    }
                    long long v15 = v13 + 1;
                  }
                  uint64_t v28 = v15;
                }
                sub_10004D2C8(v11);
              }
            }
            v7 += 2;
          }
          while (v7 != v8);
          BOOL v17 = v27;
          uint64_t v16 = v28;
          uint64_t v18 = (char *)v28 - (char *)v27;
          if (v28 != v27)
          {
            unsigned int v19 = (int *)a1[9];
            int v20 = *v19 + 1;
            int *v19 = v20;
            uint64_t v21 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
            {
              sub_100062B40(v17, v16, ",", 1uLL, &__p);
              if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                uint64_t p_p = &__p;
              }
              else {
                uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
              }
              LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
              int v32 = v20;
              __int16 v33 = 2048;
              unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * (v18 >> 3);
              __int16 v35 = 2082;
              unint64_t v36 = p_p;
              _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "#E %s%s! %d secs delay on event queue by %zu client(s) : %{public}s", (uint8_t *)&buf, 0x30u);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              int v20 = *(_DWORD *)a1[9];
            }
            if (v20 == 30)
            {
              uint64_t v22 = *(NSObject **)(v3 + 40);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_FAULT))
              {
                uint64_t v25 = v27;
                uint64_t v24 = v28;
                sub_100062B40(v27, v28, ",", 1uLL, &buf);
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
                  p_std::string buf = &buf;
                }
                else {
                  p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
                }
                LODWORD(__p.__r_.__value_.__l.__data_) = 134218242;
                *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = 0xAAAAAAAAAAAAAAABLL
                                                                                       * (((char *)v24 - (char *)v25) >> 3);
                WORD2(__p.__r_.__value_.__r.__words[1]) = 2082;
                *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)p_buf;
                _os_log_fault_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_FAULT, "Long delay on event queue by %zu client(s) : %{public}s", (uint8_t *)&__p, 0x16u);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
              }
            }
          }
        }
        buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v27;
        sub_100047F64((void ***)&buf);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100C20BD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void **a17)
{
  a17 = (void **)&a10;
  sub_100047F64(&a17);
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

void *sub_100C20C14(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[10];
  result[9] = a2[9];
  result[10] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C20C60(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

void sub_100C20CBC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (void *)(a1 + 288);
  if (sub_1005AD5C4(a2, (unsigned __int8 *)(a1 + 288)))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (*(unsigned char *)(a1 + 312))
    {
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a1 + 311) < 0) {
          uint64_t v3 = (void *)*v3;
        }
        int v5 = 136315650;
        uint64_t v6 = "";
        __int16 v7 = 2080;
        BOOL v8 = "";
        __int16 v9 = 2080;
        int v10 = v3;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%smeid detected: %s", (uint8_t *)&v5, 0x20u);
      }
      if (sub_100C16D58(a1)) {
        sub_100C1BD28(a1);
      }
    }
    else if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315394;
      uint64_t v6 = "";
      __int16 v7 = 2080;
      BOOL v8 = "";
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "#E %s%sno meid detected", (uint8_t *)&v5, 0x16u);
    }
  }
}

void sub_100C20E14(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  int v176 = a2;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 64));
  __int16 v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    __int16 v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      std::string::size_type v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)&buf);
  if (!v12)
  {
    uint64_t v13 = 0;
    goto LABEL_8;
  }
  uint64_t v13 = v12[3];
  long long v14 = (std::__shared_weak_count *)v12[4];
  if (!v14)
  {
LABEL_8:
    std::mutex::unlock(v7);
    long long v14 = 0;
    char v15 = 1;
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v15 = 0;
LABEL_9:
  CFDictionaryRef theDict = 0;
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 200))(&buf, v13, a2);
  __p.__r_.__value_.__r.__words[0] = 0;
  CFDictionaryRef theDict = (CFDictionaryRef)buf.__r_.__value_.__l.__size_;
  buf.__r_.__value_.__l.__size_ = 0;
  sub_100057D78((const void **)&__p.__r_.__value_.__l.__data_);
  sub_100057D78((const void **)&buf.__r_.__value_.__r.__words[2]);
  sub_100057D78((const void **)&buf.__r_.__value_.__l.__size_);
  memset(&v174, 0, sizeof(v174));
  if (theDict) {
    uint64_t v16 = sub_100080778;
  }
  else {
    uint64_t v16 = 0;
  }
  if (!v16) {
    goto LABEL_16;
  }
  CFStringRef Value = CFDictionaryGetValue(theDict, (const void *)qword_101B13EB8);
  if (Value)
  {
    CFGetTypeID(Value);
    CFStringGetTypeID();
  }
  memset(&buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)&v174.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
  *(std::string::size_type *)((char *)&v174.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 7);
  *((unsigned char *)&v174.__r_.__value_.__s + 23) = *((unsigned char *)&buf.__r_.__value_.__s + 23);
  memset(&__dst, 0, sizeof(__dst));
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__dst, buf.__r_.__value_.__l.__data_, v174.__r_.__value_.__l.__size_);
  }
  else {
LABEL_16:
  }
    std::string __dst = v174;
  uint64_t v18 = *(std::string ****)(a1 + 608);
  int v19 = v176;
  int v20 = *v18;
  uint64_t v21 = v18[1];
  if (v20 != v21)
  {
    while ((*v20)[2].__r_.__value_.__s.__data_[1] || HIDWORD((*v20)[2].__r_.__value_.__r.__words[0]) != v176)
    {
      v20 += 2;
      if (v20 == v21) {
        goto LABEL_26;
      }
    }
  }
  if (v20 == v21)
  {
LABEL_26:
    uint64_t v22 = 0;
    uint64_t v23 = 0;
  }
  else
  {
    uint64_t v22 = *v20;
    uint64_t v23 = (std::__shared_weak_count *)v20[1];
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  if (v19 == 1 && a3[1] == 2 && *(unsigned char *)(a1 + 312))
  {
    sub_100C1BD28(a1);
    uint64_t v24 = *(const std::string ****)(a1 + 608);
    uint64_t v25 = *v24;
    uint64_t v26 = v24[1];
    if (v25 != v26)
    {
      while ((*v25)[2].__r_.__value_.__s.__data_[1] || HIDWORD((*v25)[2].__r_.__value_.__r.__words[0]) != 1)
      {
        v25 += 2;
        if (v25 == v26) {
          goto LABEL_39;
        }
      }
    }
    if (v25 == v26)
    {
LABEL_39:
      uint64_t v28 = 0;
      uint64_t v27 = 0;
    }
    else
    {
      uint64_t v28 = *v25;
      uint64_t v27 = (std::__shared_weak_count *)v25[1];
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
    }
    if (v23) {
      sub_10004D2C8(v23);
    }
    if (v28)
    {
      uint64_t v169 = (std::string *)v28;
      std::string::operator=(&__dst, v28 + 1);
    }
    else
    {
      uint64_t v169 = 0;
    }
  }
  else
  {
    uint64_t v169 = v22;
    uint64_t v27 = v23;
  }
  unint64_t v29 = (uint64_t *)(a1 + 424);
  uint64_t v30 = *(void *)(a1 + 424);
  if (v30)
  {
    uint64_t v31 = a1 + 424;
    do
    {
      int v32 = *(_DWORD *)(v30 + 32);
      BOOL v33 = v32 < v176;
      if (v32 >= v176) {
        unint64_t v34 = (uint64_t *)v30;
      }
      else {
        unint64_t v34 = (uint64_t *)(v30 + 8);
      }
      if (!v33) {
        uint64_t v31 = v30;
      }
      uint64_t v30 = *v34;
    }
    while (*v34);
    if ((uint64_t *)v31 != v29
      && v176 >= *(_DWORD *)(v31 + 32)
      && sub_10001D294((unsigned __int8 *)(v31 + 40), (unsigned __int8 *)&__dst)
      && (rest::operator==() & 1) != 0)
    {
LABEL_247:
      if (!v27) {
        goto LABEL_249;
      }
      goto LABEL_248;
    }
  }
  std::string::size_type size = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = __dst.__r_.__value_.__l.__size_;
  }
  if (!size)
  {
    char v38 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v39 = subscriber::asString();
      asString();
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      uint64_t v41 = &v174;
      if ((v174.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v41 = (std::string *)v174.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
      *(void *)__int16 v186 = v39;
      *(_WORD *)&v186[8] = 2082;
      *(void *)&v186[10] = p_p;
      *(_WORD *)&v186[18] = 2080;
      *(void *)&v186[20] = v41;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s%s--> carrier_bundle slot %s: %{public}s [iccid:%s] -- No PersonalityID while CB changed", (uint8_t *)&buf, 0x34u);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    goto LABEL_247;
  }
  switch(*a3)
  {
    case 1u:
    case 4u:
      int v164 = v14;
      char v36 = 0;
      char v37 = 1;
      int v153 = 1;
      int v155 = 0;
      break;
    case 2u:
    case 3u:
      int v164 = v14;
      char v37 = 0;
      int v153 = 0;
      int v155 = 1;
      char v36 = 1;
      break;
    case 5u:
      goto LABEL_247;
    default:
      if (*a3 == 255) {
        goto LABEL_247;
      }
      int v164 = v14;
      char v37 = 0;
      char v36 = 0;
      int v153 = 1;
      int v155 = 1;
      break;
  }
  uint64_t v167 = a3;
  BOOL v42 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v43 = subscriber::asString();
    uint64_t v44 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
    long long v45 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
    asString();
    if ((v44 & 0x80u) == 0) {
      uint64_t v46 = v44;
    }
    else {
      uint64_t v46 = *((void *)&v45 + 1);
    }
    p_dst = &__dst;
    if ((v44 & 0x80u) != 0) {
      p_dst = (std::string *)v45;
    }
    BOOL v48 = v46 == 0;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    long long v49 = "<invalid>";
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    if (!v48) {
      long long v49 = (const char *)p_dst;
    }
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v50 = &__p;
    }
    else {
      long long v50 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    *(void *)__int16 v186 = v43;
    *(_WORD *)&v186[8] = 2080;
    *(void *)&v186[10] = v49;
    *(_WORD *)&v186[18] = 2082;
    *(void *)&v186[20] = v50;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s%s--> carrier_bundle slot %s [%s] event: %{public}s", (uint8_t *)&buf, 0x34u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v51 = *v29;
  if (!*v29) {
    goto LABEL_99;
  }
  uint64_t v52 = a1 + 424;
  do
  {
    int v53 = *(_DWORD *)(v51 + 32);
    BOOL v54 = v53 < v176;
    if (v53 >= v176) {
      uint64_t v55 = (uint64_t *)v51;
    }
    else {
      uint64_t v55 = (uint64_t *)(v51 + 8);
    }
    if (!v54) {
      uint64_t v52 = v51;
    }
    uint64_t v51 = *v55;
  }
  while (*v55);
  if ((uint64_t *)v52 != v29
    && v176 >= *(_DWORD *)(v52 + 32)
    && sub_10001D294((unsigned __int8 *)(v52 + 40), (unsigned __int8 *)&__dst))
  {
    long long v162 = v27;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
    {
      long long v14 = v164;
      sub_10004FC84(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else
    {
      std::string buf = __dst;
      long long v14 = v164;
    }
    uint64_t v56 = v169;
    *(_WORD *)__int16 v186 = *(_WORD *)v167;
    if ((char)v167[31] < 0)
    {
      sub_10004FC84(&v186[8], *((void **)v167 + 1), *((void *)v167 + 2));
    }
    else
    {
      *(_OWORD *)&v186[8] = *(_OWORD *)(v167 + 8);
      *(void *)&v186[24] = *((void *)v167 + 3);
    }
    if ((char)v167[55] < 0)
    {
      sub_10004FC84(&v186[32], *((void **)v167 + 4), *((void *)v167 + 5));
    }
    else
    {
      *(_OWORD *)&v186[32] = *((_OWORD *)v167 + 2);
      *(void *)&v186[48] = *((void *)v167 + 6);
    }
    if (v153) {
      BOOL v61 = *(unsigned char *)(v52 + 120) != 0;
    }
    else {
      BOOL v61 = 1;
    }
    LOBYTE(v187) = v61;
    if (v155) {
      BOOL v62 = *(unsigned char *)(v52 + 121) != 0;
    }
    else {
      BOOL v62 = 1;
    }
    HIBYTE(v187) = v62;
    long long v63 = sub_100C377E4((uint64_t **)(a1 + 416), v176, &v176);
    std::string::operator=((std::string *)(v63 + 40), &buf);
    *((_WORD *)v63 + 32) = *(_WORD *)v186;
    uint64_t v64 = (void **)(v63 + 72);
    if (v63[95] < 0) {
      operator delete(*v64);
    }
    char v65 = 0;
    *((void *)v63 + 11) = *(void *)&v186[24];
    *(_OWORD *)uint64_t v64 = *(_OWORD *)&v186[8];
    v186[31] = 0;
    v186[8] = 0;
    char v66 = (void **)(v63 + 96);
    if (v63[119] < 0)
    {
      operator delete(*v66);
      char v65 = v186[31];
    }
    *(_OWORD *)char v66 = *(_OWORD *)&v186[32];
    *((void *)v63 + 14) = *(void *)&v186[48];
    v186[55] = 0;
    v186[32] = 0;
    *((_WORD *)v63 + 60) = v187;
    if (v65 < 0) {
      operator delete(*(void **)&v186[8]);
    }
    uint64_t v27 = v162;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      goto LABEL_137;
    }
  }
  else
  {
LABEL_99:
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&buf, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string buf = __dst;
    }
    uint64_t v56 = v169;
    *(_WORD *)__int16 v186 = *(_WORD *)v167;
    if ((char)v167[31] < 0)
    {
      sub_10004FC84(&v186[8], *((void **)v167 + 1), *((void *)v167 + 2));
    }
    else
    {
      *(_OWORD *)&v186[8] = *(_OWORD *)(v167 + 8);
      *(void *)&v186[24] = *((void *)v167 + 3);
    }
    if ((char)v167[55] < 0)
    {
      sub_10004FC84(&v186[32], *((void **)v167 + 4), *((void *)v167 + 5));
    }
    else
    {
      *(_OWORD *)&v186[32] = *((_OWORD *)v167 + 2);
      *(void *)&v186[48] = *((void *)v167 + 6);
    }
    LOBYTE(v187) = v36;
    HIBYTE(v187) = v37;
    uint64_t v57 = sub_100C377E4((uint64_t **)(a1 + 416), v176, &v176);
    std::string::operator=((std::string *)(v57 + 40), &buf);
    *((_WORD *)v57 + 32) = *(_WORD *)v186;
    int v58 = (void **)(v57 + 72);
    long long v14 = v164;
    if (v57[95] < 0) {
      operator delete(*v58);
    }
    char v59 = 0;
    *((void *)v57 + 11) = *(void *)&v186[24];
    *(_OWORD *)int v58 = *(_OWORD *)&v186[8];
    v186[31] = 0;
    v186[8] = 0;
    uint64_t v60 = (void **)(v57 + 96);
    if (v57[119] < 0)
    {
      operator delete(*v60);
      char v59 = v186[31];
    }
    *(_OWORD *)uint64_t v60 = *(_OWORD *)&v186[32];
    *((void *)v57 + 14) = *(void *)&v186[48];
    v186[55] = 0;
    v186[32] = 0;
    *((_WORD *)v57 + 60) = v187;
    if (v59 < 0) {
      operator delete(*(void **)&v186[8]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
LABEL_137:
      operator delete(buf.__r_.__value_.__l.__data_);
      if (!v56) {
        goto LABEL_247;
      }
      goto LABEL_138;
    }
  }
  if (!v56) {
    goto LABEL_247;
  }
LABEL_138:
  int64x2_t v67 = (unsigned __int8 *)&v169[1];
  if (!isReal() || !sub_10001D294(v67, (unsigned __int8 *)&__dst)) {
    goto LABEL_247;
  }
  int v68 = v176;
  CFBooleanRef v69 = (void *)(*(void *)(a1 + 392) + 16 * subscriber::simSlotAsInstance());
  long long v70 = (std::__shared_weak_count *)v69[1];
  *CFBooleanRef v69 = 0;
  v69[1] = 0;
  if (v70) {
    sub_10004D2C8(v70);
  }
  long long v71 = sub_100C377E4((uint64_t **)(a1 + 416), v68, &v176);
  __int16 v72 = v167;
  unint64_t v163 = v27;
  if (!v71[121])
  {
    memset(&__p, 0, sizeof(__p));
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 120) + 24))(&v177);
    memset(&buf, 0, sizeof(buf));
    ctu::cf::assign();
    std::string __p = buf;
    sub_1000577C4((const void **)&v177.__r_.__value_.__l.__data_);
    memset(&v177, 0, sizeof(v177));
    (*(void (**)(std::string **__return_ptr))(**(void **)(a1 + 120) + 24))(&v183);
    memset(&buf, 0, sizeof(buf));
    ctu::cf::assign();
    std::string v177 = buf;
    sub_1000577C4((const void **)&v183);
    uint64_t v73 = v167[55];
    if ((v73 & 0x80u) == 0) {
      uint64_t v74 = v167[55];
    }
    else {
      uint64_t v74 = *((void *)v167 + 5);
    }
    std::string::size_type v75 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v75 = __p.__r_.__value_.__l.__size_;
    }
    if (v74 != v75) {
      goto LABEL_159;
    }
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v76 = &__p;
    }
    else {
      uint64_t v76 = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    if ((v73 & 0x80) != 0)
    {
      if (memcmp(*((const void **)v167 + 4), v76, *((void *)v167 + 5))) {
        goto LABEL_159;
      }
    }
    else if (v167[55])
    {
      char v77 = v167 + 32;
      while (*v77 == v76->__r_.__value_.__s.__data_[0])
      {
        ++v77;
        uint64_t v76 = (std::string *)((char *)v76 + 1);
        if (!--v73) {
          goto LABEL_304;
        }
      }
LABEL_159:
      uint64_t v78 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v165 = v14;
        int v159 = v169[2].__r_.__value_.__r.__words[1];
        uint64_t v156 = PersonalityInfo::logPrefix((PersonalityInfo *)v169);
        std::string::size_type v79 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
        data = v169[1].__r_.__value_.__l.__data_;
        std::string::size_type v81 = v169[1].__r_.__value_.__l.__size_;
        uint64_t v82 = subscriber::asString();
        if ((v79 & 0x80u) == 0) {
          std::string::size_type v83 = v79;
        }
        else {
          std::string::size_type v83 = v81;
        }
        if ((v79 & 0x80u) == 0) {
          char v84 = (const char *)&v169[1];
        }
        else {
          char v84 = data;
        }
        if (!v83) {
          char v84 = "<invalid>";
        }
        int v85 = (char)v167[55];
        uint64_t v86 = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t v86 = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        uint64_t v87 = (unsigned __int8 *)*((void *)v167 + 4);
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316930;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        if (v85 >= 0) {
          uint64_t v87 = v167 + 32;
        }
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        *(_DWORD *)__int16 v186 = v159;
        *(_WORD *)&v186[4] = 2080;
        *(void *)&v186[6] = v156;
        *(_WORD *)&v186[14] = 2080;
        *(void *)&v186[16] = v84;
        *(_WORD *)&v186[24] = 2080;
        *(void *)&v186[26] = v82;
        *(_WORD *)&v186[34] = 2082;
        *(void *)&v186[36] = v86;
        *(_WORD *)&v186[44] = 2082;
        *(void *)&v186[46] = v87;
        uint64_t v88 = "#I %s%sCB VER don't match cache for [%d] %s %s, slot:%s, ver:[%{public}s] -> [%{public}s]";
        goto LABEL_173;
      }
      goto LABEL_174;
    }
LABEL_304:
    std::string::size_type v142 = HIBYTE(v177.__r_.__value_.__r.__words[2]);
    if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v142 = v177.__r_.__value_.__l.__size_;
    }
    if (!v142 || sub_10001D294((unsigned __int8 *)&v177, v167 + 8)) {
      goto LABEL_175;
    }
    uint64_t v78 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v165 = v14;
      int v161 = v169[2].__r_.__value_.__r.__words[1];
      uint64_t v158 = PersonalityInfo::logPrefix((PersonalityInfo *)v169);
      std::string::size_type v143 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
      std::string::size_type v145 = v169[1].__r_.__value_.__l.__data_;
      std::string::size_type v144 = v169[1].__r_.__value_.__l.__size_;
      uint64_t v146 = subscriber::asString();
      if ((v143 & 0x80u) == 0) {
        std::string::size_type v147 = v143;
      }
      else {
        std::string::size_type v147 = v144;
      }
      if ((v143 & 0x80u) == 0) {
        int v148 = (const char *)&v169[1];
      }
      else {
        int v148 = v145;
      }
      if (!v147) {
        int v148 = "<invalid>";
      }
      int v149 = (char)v167[31];
      uint64_t v150 = &v177;
      if ((v177.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        uint64_t v150 = (std::string *)v177.__r_.__value_.__r.__words[0];
      }
      v151 = (unsigned __int8 *)*((void *)v167 + 1);
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316930;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      if (v149 >= 0) {
        v151 = v167 + 8;
      }
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      *(_DWORD *)__int16 v186 = v161;
      *(_WORD *)&v186[4] = 2080;
      *(void *)&v186[6] = v158;
      *(_WORD *)&v186[14] = 2080;
      *(void *)&v186[16] = v148;
      *(_WORD *)&v186[24] = 2080;
      *(void *)&v186[26] = v146;
      *(_WORD *)&v186[34] = 2082;
      *(void *)&v186[36] = v150;
      *(_WORD *)&v186[44] = 2082;
      *(void *)&v186[46] = v151;
      uint64_t v88 = "#I %s%sCB ID don't match cache for [%d] %s %s, slot:%s, id:[%{public}s] -> [%{public}s]";
LABEL_173:
      _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, v88, (uint8_t *)&buf, 0x4Eu);
      uint64_t v27 = v163;
      long long v14 = v165;
    }
LABEL_174:
    sub_100C377E4((uint64_t **)(a1 + 416), v176, &v176)[121] = 1;
    __int16 v72 = v167;
LABEL_175:
    if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v177.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  uint64_t v89 = *(void *)(a1 + 120);
  unint64_t v90 = v72 + 32;
  if ((char)v72[55] < 0)
  {
    sub_10004FC84(&v171, *((void **)v72 + 4), *((void *)v72 + 5));
  }
  else
  {
    *(_OWORD *)&v171.__r_.__value_.__l.__data_ = *v90;
    v171.__r_.__value_.__r.__words[2] = *((void *)v72 + 6);
  }
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, v171.__r_.__value_.__l.__data_, v171.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v171;
  }
  *(void *)&long long v182 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  int v183 = 0;
  if (ctu::cf::convert_copy())
  {
    std::string::size_type v91 = v182;
    *(void *)&long long v182 = v183;
    v177.__r_.__value_.__r.__words[0] = v91;
    sub_1000558F4((const void **)&v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v172 = (const void *)v182;
  *(void *)&long long v182 = 0;
  sub_1000558F4((const void **)&v182);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, const __CFString *, const void *, const __CFString *, void, void, void))(*(void *)v89 + 16))(v89, v67, @"cb_ver", v172, @"info", 0, 0, 0);
  sub_1000558F4(&v172);
  if (SHIBYTE(v171.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v171.__r_.__value_.__l.__data_);
  }
  uint64_t v92 = *(void *)(a1 + 120);
  if ((char)v167[31] < 0) {
    sub_10004FC84(&v170, *((void **)v167 + 1), *((void *)v167 + 2));
  }
  else {
    std::string v170 = *(std::string *)(v167 + 8);
  }
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, v170.__r_.__value_.__l.__data_, v170.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v170;
  }
  *(void *)&long long v182 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  int v183 = 0;
  if (ctu::cf::convert_copy())
  {
    std::string::size_type v93 = v182;
    *(void *)&long long v182 = v183;
    v177.__r_.__value_.__r.__words[0] = v93;
    sub_1000558F4((const void **)&v177.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  uint64_t v172 = (const void *)v182;
  *(void *)&long long v182 = 0;
  sub_1000558F4((const void **)&v182);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  (*(void (**)(uint64_t, unsigned __int8 *, const __CFString *, const void *, const __CFString *, void, void, void))(*(void *)v92 + 16))(v92, v67, @"cb_id", v172, @"info", 0, 0, 0);
  sub_1000558F4(&v172);
  if (SHIBYTE(v170.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v170.__r_.__value_.__l.__data_);
  }
  int v94 = v176;
  if (sub_100C377E4((uint64_t **)(a1 + 416), v176, &v176)[121]
    || v169[2].__r_.__value_.__s.__data_[0] && sub_100C377E4((uint64_t **)(a1 + 416), v94, &v176)[120])
  {
    char v95 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v95, OS_LOG_TYPE_DEFAULT))
    {
      v157 = v90;
      char v166 = v14;
      int v154 = v169[2].__r_.__value_.__r.__words[1];
      uint64_t v96 = PersonalityInfo::logPrefix((PersonalityInfo *)v169);
      std::string::size_type v97 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
      uint64_t v99 = v169[1].__r_.__value_.__l.__data_;
      std::string::size_type v98 = v169[1].__r_.__value_.__l.__size_;
      uint64_t v100 = subscriber::asString();
      if ((v97 & 0x80u) == 0) {
        std::string::size_type v101 = v97;
      }
      else {
        std::string::size_type v101 = v98;
      }
      if ((v97 & 0x80u) == 0) {
        int64x2_t v102 = (const char *)&v169[1];
      }
      else {
        int64x2_t v102 = v99;
      }
      BOOL v48 = v101 == 0;
      unint64_t v103 = "<invalid>";
      if (!v48) {
        unint64_t v103 = v102;
      }
      int v104 = (char)v167[55];
      uint64_t v105 = (_OWORD *)*((void *)v167 + 4);
      uint64_t v106 = v167 + 8;
      if ((v167[31] & 0x80u) != 0) {
        uint64_t v106 = (unsigned __int8 *)*((void *)v167 + 1);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136316930;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      if (v104 >= 0) {
        uint64_t v105 = v157;
      }
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
      *(_DWORD *)__int16 v186 = v154;
      *(_WORD *)&v186[4] = 2080;
      *(void *)&v186[6] = v96;
      *(_WORD *)&v186[14] = 2080;
      *(void *)&v186[16] = v103;
      *(_WORD *)&v186[24] = 2080;
      *(void *)&v186[26] = v100;
      *(_WORD *)&v186[34] = 2082;
      *(void *)&v186[36] = v106;
      *(_WORD *)&v186[44] = 2082;
      *(void *)&v186[46] = v105;
      _os_log_impl((void *)&_mh_execute_header, v95, OS_LOG_TYPE_DEFAULT, "#I %s%sCB for personality [%d] %s %s updated, slot:%s, %{public}s:[%{public}s]", (uint8_t *)&buf, 0x4Eu);
      uint64_t v27 = v163;
      long long v14 = v166;
    }
    if (SHIBYTE(v169[1].__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&__p, v169[1].__r_.__value_.__l.__data_, v169[1].__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = *(_OWORD *)v67;
      __p.__r_.__value_.__r.__words[2] = v169[1].__r_.__value_.__r.__words[2];
    }
    char v180 = 4;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      char v107 = v180;
    }
    else
    {
      std::string buf = __p;
      char v107 = 4;
    }
    v186[0] = v107;
    *(void *)&v186[8] = v169;
    *(void *)&v186[16] = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100C1AE18((void *)a1, (uint64_t)&buf);
    if (*(void *)&v186[16]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v186[16]);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    int v94 = v176;
  }
  sub_100C377E4((uint64_t **)(a1 + 416), v94, &v176)[120] = 0;
  sub_100C377E4((uint64_t **)(a1 + 416), v94, &v176)[121] = 0;
  if (v169[2].__r_.__value_.__s.__data_[0]) {
    goto LABEL_247;
  }
  char v160 = v15;
  uint64_t v108 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT))
  {
    std::string::size_type v109 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
    long long v111 = v169[1].__r_.__value_.__l.__data_;
    std::string::size_type v110 = v169[1].__r_.__value_.__l.__size_;
    uint64_t v112 = subscriber::asString();
    if ((v109 & 0x80u) == 0) {
      std::string::size_type v113 = v109;
    }
    else {
      std::string::size_type v113 = v110;
    }
    if ((v109 & 0x80u) == 0) {
      uint64_t v114 = (const char *)&v169[1];
    }
    else {
      uint64_t v114 = v111;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    if (v113) {
      uint64_t v115 = v114;
    }
    else {
      uint64_t v115 = "<invalid>";
    }
    *(void *)__int16 v186 = v115;
    *(_WORD *)&v186[8] = 2080;
    *(void *)&v186[10] = v112;
    _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#I %s%scheck if personality %s on slot %s can be activated now", (uint8_t *)&buf, 0x2Au);
    uint64_t v27 = v163;
  }
  if (v27)
  {
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v184 = v27;
    atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  else
  {
    uint64_t v184 = 0;
  }
  int v183 = v169;
  BOOL v116 = sub_100C1B538(a1, (uint64_t *)&v183);
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (v116)
  {
    uint64_t v117 = *(void *)(a1 + 608);
    uint64_t v118 = *(void **)v117;
    char v119 = *(void **)(v117 + 8);
    if (*(void **)v117 == v119) {
      goto LABEL_294;
    }
    while (!sub_10001D294((unsigned __int8 *)(*v118 + 24), v67))
    {
      v118 += 2;
      if (v118 == v119)
      {
        uint64_t v118 = v119;
        break;
      }
    }
    if (v118 == *(void **)(*(void *)(a1 + 608) + 8))
    {
LABEL_294:
      unint64_t v132 = *(NSObject **)(a1 + 40);
      uint64_t v27 = v163;
      if (os_log_type_enabled(v132, OS_LOG_TYPE_ERROR))
      {
        int v133 = v169[2].__r_.__value_.__r.__words[1];
        uint64_t v134 = PersonalityInfo::logPrefix((PersonalityInfo *)v169);
        std::string::size_type v135 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
        unint64_t v136 = v169[1].__r_.__value_.__l.__data_;
        std::string::size_type v137 = v169[1].__r_.__value_.__l.__size_;
        uint64_t v138 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        if ((v135 & 0x80u) == 0) {
          std::string::size_type v139 = v135;
        }
        else {
          std::string::size_type v139 = v137;
        }
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        uint64_t v140 = "<invalid>";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        if ((v135 & 0x80u) == 0) {
          v141 = (const char *)&v169[1];
        }
        else {
          v141 = v136;
        }
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        if (v139) {
          uint64_t v140 = v141;
        }
        *(_DWORD *)__int16 v186 = v133;
        *(_WORD *)&v186[4] = 2080;
        *(void *)&v186[6] = v134;
        *(_WORD *)&v186[14] = 2080;
        *(void *)&v186[16] = v140;
        *(_WORD *)&v186[24] = 2080;
        *(void *)&v186[26] = v138;
        _os_log_error_impl((void *)&_mh_execute_header, v132, OS_LOG_TYPE_ERROR, "#E %s%simpossible. Personality disappeared from array. [%d] %s %s slot %s", (uint8_t *)&buf, 0x3Au);
        uint64_t v27 = v163;
      }
    }
    else
    {
      v120 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v120, OS_LOG_TYPE_DEFAULT))
      {
        int v168 = v169[2].__r_.__value_.__r.__words[1];
        uint64_t v121 = PersonalityInfo::logPrefix((PersonalityInfo *)v169);
        std::string::size_type v122 = HIBYTE(v169[1].__r_.__value_.__r.__words[2]);
        uint64_t v123 = v169[1].__r_.__value_.__l.__data_;
        std::string::size_type v124 = v169[1].__r_.__value_.__l.__size_;
        uint64_t v125 = subscriber::asString();
        LODWORD(buf.__r_.__value_.__l.__data_) = 136316418;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        if ((v122 & 0x80u) == 0) {
          std::string::size_type v126 = v122;
        }
        else {
          std::string::size_type v126 = v124;
        }
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        unint64_t v127 = "<invalid>";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        if ((v122 & 0x80u) == 0) {
          long long v128 = (const char *)&v169[1];
        }
        else {
          long long v128 = v123;
        }
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 1024;
        if (v126) {
          unint64_t v127 = v128;
        }
        *(_DWORD *)__int16 v186 = v168;
        *(_WORD *)&v186[4] = 2080;
        *(void *)&v186[6] = v121;
        *(_WORD *)&v186[14] = 2080;
        *(void *)&v186[16] = v127;
        *(_WORD *)&v186[24] = 2080;
        *(void *)&v186[26] = v125;
        _os_log_impl((void *)&_mh_execute_header, v120, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s activated on slot %s", (uint8_t *)&buf, 0x3Au);
      }
      long long v182 = 0uLL;
      sub_100612480((long long *)v169, &v182);
      long long v129 = v182;
      *(unsigned char *)(v182 + 48) = 1;
      if (*((void *)&v129 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v129 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      v130 = (std::__shared_weak_count *)v118[1];
      *(_OWORD *)uint64_t v118 = v129;
      uint64_t v27 = v163;
      if (v130) {
        sub_10004D2C8(v130);
      }
      sub_100C19920(a1, 1);
      uint64_t v131 = *v118;
      if (*(char *)(*v118 + 47) < 0) {
        sub_10004FC84(&v177, *(void **)(v131 + 24), *(void *)(v131 + 32));
      }
      else {
        std::string v177 = *(std::string *)(v131 + 24);
      }
      char v178 = 1;
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(&__p, v177.__r_.__value_.__l.__data_, v177.__r_.__value_.__l.__size_);
        char v152 = v178;
      }
      else
      {
        std::string __p = v177;
        char v152 = 1;
      }
      char v180 = v152;
      long long v181 = v182;
      if (*((void *)&v182 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v182 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
      }
      else {
        std::string buf = __p;
      }
      v186[0] = v180;
      *(_OWORD *)&v186[8] = v181;
      long long v181 = 0uLL;
      sub_100C1AE18((void *)a1, (uint64_t)&buf);
      if (*(void *)&v186[16]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v186[16]);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v181 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v181 + 1));
      }
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v177.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v177.__r_.__value_.__l.__data_);
      }
      if (*((void *)&v182 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v182 + 1));
      }
    }
  }
  char v15 = v160;
  if (v27)
  {
    sub_10004D2C8(v27);
LABEL_248:
    sub_10004D2C8(v27);
  }
LABEL_249:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v174.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v174.__r_.__value_.__l.__data_);
  }
  sub_100057D78((const void **)&theDict);
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100C22568(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,const void *a43,uint64_t a44,void *__p,uint64_t a46,int a47,__int16 a48,char a49,char a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  sub_100C145F4((uint64_t)&a52);
  if (a50 < 0) {
    operator delete(__p);
  }
  uint64_t v60 = *(std::__shared_weak_count **)(v58 - 216);
  if (v60) {
    sub_10004D2C8(v60);
  }
  if (a13)
  {
    sub_10004D2C8(a13);
    sub_10004D2C8(a13);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  sub_100057D78(&a43);
  if ((a12 & 1) == 0) {
    sub_10004D2C8(v57);
  }
  _Unwind_Resume(a1);
}

void sub_100C22944(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (!*(void *)(a1 + 40))
      {
LABEL_43:
        sub_10004D2C8(v5);
        return;
      }
      uint64_t v6 = (void *)(v3[49] + 16 * subscriber::simSlotAsInstance());
      __int16 v7 = (std::__shared_weak_count *)v6[1];
      void *v6 = 0;
      v6[1] = 0;
      if (v7) {
        sub_10004D2C8(v7);
      }
      std::string::size_type v8 = v3[5];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = subscriber::asString();
        uint64_t v10 = (const char *)(a1 + 56);
        uint64_t v11 = *(unsigned __int8 *)(a1 + 79);
        int v12 = (char)v11;
        if ((v11 & 0x80u) != 0) {
          uint64_t v11 = *(void *)(a1 + 64);
        }
        if (v12 < 0) {
          uint64_t v10 = *(const char **)(a1 + 56);
        }
        int v27 = 136315906;
        uint64_t v28 = "";
        __int16 v29 = 2080;
        if (!v11) {
          uint64_t v10 = "<invalid>";
        }
        uint64_t v30 = "";
        __int16 v31 = 2080;
        uint64_t v32 = v9;
        __int16 v33 = 2080;
        unint64_t v34 = v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sUntrusted CB Timer for slot %s (%s) expired", (uint8_t *)&v27, 0x2Au);
      }
      uint64_t v13 = v3[76];
      long long v14 = *(void **)v13;
      char v15 = *(void **)(v13 + 8);
      if (v14 != v15)
      {
        while (*(unsigned char *)(*v14 + 49) || *(_DWORD *)(*v14 + 52) != *(_DWORD *)(a1 + 80))
        {
          v14 += 2;
          if (v14 == v15) {
            goto LABEL_38;
          }
        }
      }
      if (v14 == v15)
      {
LABEL_38:
        uint64_t v16 = 0;
      }
      else
      {
        uint64_t v17 = *v14;
        uint64_t v16 = (std::__shared_weak_count *)v14[1];
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v17 && sub_10001D294((unsigned __int8 *)(v17 + 24), (unsigned __int8 *)(a1 + 56)))
        {
          if (!*(unsigned char *)(v17 + 48))
          {
            uint64_t v18 = v3[53];
            if (v18)
            {
              uint64_t v19 = *(unsigned int *)(a1 + 80);
              int v20 = (unsigned __int8 *)(v3 + 53);
              do
              {
                int v21 = *(_DWORD *)(v18 + 32);
                BOOL v22 = v21 < (int)v19;
                if (v21 >= (int)v19) {
                  uint64_t v23 = (uint64_t *)v18;
                }
                else {
                  uint64_t v23 = (uint64_t *)(v18 + 8);
                }
                if (!v22) {
                  int v20 = (unsigned __int8 *)v18;
                }
                uint64_t v18 = *v23;
              }
              while (*v23);
              if (v20 != (unsigned __int8 *)(v3 + 53) && (int)v19 >= *((_DWORD *)v20 + 8))
              {
                uint64_t v24 = v3[5];
                if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v25 = subscriber::asString();
                  int v27 = 136315650;
                  uint64_t v28 = "";
                  __int16 v29 = 2080;
                  uint64_t v30 = "";
                  __int16 v31 = 2080;
                  uint64_t v32 = v25;
                  _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%ssimulating CB event in case incorrect ICCID was caught on slot %s", (uint8_t *)&v27, 0x20u);
                  uint64_t v19 = *(unsigned int *)(a1 + 80);
                }
                sub_100C20E14((uint64_t)v3, v19, v20 + 64);
              }
            }
          }
          goto LABEL_41;
        }
      }
      uint64_t v26 = v3[5];
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        int v27 = 136315394;
        uint64_t v28 = "";
        __int16 v29 = 2080;
        uint64_t v30 = "";
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s%stimer ignored. Personality swapped", (uint8_t *)&v27, 0x16u);
      }
LABEL_41:
      if (v16) {
        sub_10004D2C8(v16);
      }
      goto LABEL_43;
    }
  }
}

void sub_100C22C44(_Unwind_Exception *a1)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_100C22C74(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)uint64_t result = v5;
  return result;
}

void sub_100C22CDC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C22CF4(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100C22D48(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C22EB0(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23018(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  long long v5 = operator new(0x30uLL);
  v5[1] = 0;
  uint64_t v6 = v5 + 1;
  v5[2] = 0;
  v5[3] = 0;
  void *v5 = off_101A490B8;
  v5[4] = 0;
  v5[5] = 0;
  sub_10010CB7C(v5 + 3, v3, v4, 0xCF3CF3CF3CF3CF3DLL * ((v4 - v3) >> 3));
  atomic_fetch_add_explicit(v6, 1uLL, memory_order_relaxed);
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23180(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100C2319C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v8, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string::size_type v8 = *(_OWORD *)a2;
    v8[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v9, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a3;
    void v9[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    __p[2] = *(void **)(a4 + 16);
  }
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C233B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C233EC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23544(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C236AC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23804(uint64_t a1, uint64_t a2, char *a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = *a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23970(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23AC8(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  long long v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23C30(void *a1, uint64_t a2, const void *a3)
{
  CFTypeRef cf = 0;
  if (a3)
  {
    std::string::size_type v8 = a3;
    sub_100282490(&cf, &v8);
  }
  else
  {
    CFDictionaryRef v5 = CFDictionaryCreate(0, 0, 0, 0, 0, 0);
    CFTypeRef v6 = cf;
    CFTypeRef cf = v5;
    std::string::size_type v8 = v6;
    sub_100057D78(&v8);
  }
  std::string::size_type v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  __p[3] = (void *)cf;
  if (cf) {
    CFRetain(cf);
  }
  char v7 = (std::__shared_weak_count *)a1[2];
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C23DFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100C23E24(uint64_t a1@<X0>, void **a2@<X1>, const void **a3@<X8>)
{
  CFTypeRef v6 = (std::mutex *)(a1 + 1128);
  std::mutex::lock((std::mutex *)(a1 + 1128));
  char v7 = sub_100046F68(a1 + 1192, a2);
  if ((void **)(a1 + 1200) == v7) {
    *a3 = 0;
  }
  else {
    sub_100058198(a3, (const void **)v7 + 7);
  }

  std::mutex::unlock(v6);
}

const void **sub_100C23EA0@<X0>(uint64_t a1@<X0>, void *a2@<X2>, const void *a3@<X3>, const void **a4@<X8>)
{
  uint64_t v19 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(*(void *)a1 + 112))(&cf);
  char v7 = cf;
  CFDictionaryRef theDict = (CFDictionaryRef)cf;
  if (cf)
  {
    std::string::size_type v8 = sub_100080934;
    CFRetain(cf);
  }
  else
  {
    std::string::size_type v8 = 0;
  }
  sub_100057D78(&cf);
  if (v8)
  {
    uint64_t v9 = a2[1] - *a2;
    if (v9)
    {
      unint64_t v10 = 0;
      unint64_t v11 = v9 >> 3;
      uint64_t v12 = (v9 >> 3) - 1;
      do
      {
        CFTypeID v13 = CFGetTypeID(v7);
        if (v13 != CFDictionaryGetTypeID() || v10 >= v11) {
          break;
        }
        if (v10 >= (uint64_t)(a2[1] - *a2) >> 3) {
          sub_10015B728();
        }
        CFTypeRef cf = CFDictionaryGetValue(theDict, *(const void **)(*a2 + 8 * v10));
        sub_100057DAC((const void **)&theDict, &cf);
        if (v12 == v10) {
          sub_100058470(&v19, (const void **)&theDict);
        }
        ++v10;
        char v7 = theDict;
      }
      while (theDict ? sub_100080934 : 0);
    }
    else
    {
      sub_100058470(&v19, (const void **)&theDict);
    }
  }
  if (v19) {
    char v15 = sub_100080934;
  }
  else {
    char v15 = 0;
  }
  if (v15)
  {
    sub_1000584C8(a4, &v19);
  }
  else if (a3)
  {
    *a4 = a3;
    CFRetain(a3);
  }
  else
  {
    *a4 = 0;
  }
  sub_1000577C4((const void **)&theDict);
  return sub_1000577C4(&v19);
}

void sub_100C24074(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000577C4((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_100C240A0@<X0>(uint64_t a1@<X0>, const __CFUUID *a2@<X1>, const void ***a3@<X8>)
{
  CFStringRef v19 = CFUUIDCreateString(0, a2);
  CFDictionaryRef v5 = (std::mutex *)(a1 + 632);
  std::mutex::lock((std::mutex *)(a1 + 632));
  CFTypeRef v6 = *(const void *****)(a1 + 728);
  if (!v6)
  {
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_21;
  }
  long long v20 = 0uLL;
  unint64_t v21 = 0;
  ctu::cf::assign();
  uint64_t v18 = 0;
  *(_OWORD *)std::string __p = 0uLL;
  char v7 = *v6;
  std::string::size_type v8 = v6[1];
  if (*v6 == v8) {
    goto LABEL_22;
  }
  uint64_t v9 = (const void *)HIBYTE(v21);
  while (1)
  {
    unint64_t v10 = *v7;
    uint64_t v11 = *((unsigned __int8 *)*v7 + 23);
    if ((v11 & 0x80u) == 0) {
      uint64_t v12 = (const void *)*((unsigned __int8 *)*v7 + 23);
    }
    else {
      uint64_t v12 = (*v7)[1];
    }
    if (v12 != v9) {
      goto LABEL_15;
    }
    if ((v11 & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)*v7 + 23)) {
      goto LABEL_18;
    }
    CFTypeID v13 = __p;
    long long v14 = *v7;
    while (*(unsigned __int8 *)v14 == *(unsigned __int8 *)v13)
    {
      long long v14 = (const void **)((char *)v14 + 1);
      CFTypeID v13 = (void **)((char *)v13 + 1);
      if (!--v11) {
        goto LABEL_18;
      }
    }
LABEL_15:
    v7 += 2;
    if (v7 == v8) {
      goto LABEL_22;
    }
  }
  if (memcmp(*v10, __p, (size_t)(*v7)[1])) {
    goto LABEL_15;
  }
LABEL_18:
  if (v7 == v8)
  {
LABEL_22:
    *a3 = 0;
    a3[1] = 0;
    goto LABEL_21;
  }
  char v15 = v7[1];
  *a3 = v10;
  a3[1] = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v15 + 1, 1uLL, memory_order_relaxed);
  }
LABEL_21:
  std::mutex::unlock(v5);
  return sub_1000558F4((const void **)&v19);
}

void sub_100C24214(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(v19);
  sub_1000558F4(&a13);
  _Unwind_Resume(a1);
}

void sub_100C24248(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 64));
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    CFDictionaryRef v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v4;
  std::string::size_type v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)buf);
  if (v8)
  {
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    char v166 = (void *)v8[3];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      int v164 = v9;
      sub_10004D2C8(v9);
      char v165 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    char v166 = 0;
  }
  std::mutex::unlock(v3);
  int v164 = 0;
  char v165 = 1;
LABEL_9:
  unint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = (uint64_t)(*(void *)(*(void *)(a1 + 608) + 8) - **(void **)(a1 + 608)) >> 4;
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2048;
    *(void *)&uint8_t buf[24] = v11;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonalities: %zu items", buf, 0x20u);
  }
  uint64_t v12 = *(PersonalityInfo ****)(a1 + 608);
  long long v14 = *v12;
  CFTypeID v13 = v12[1];
  if (*v12 != v13)
  {
    do
    {
      memset(__p, 0, sizeof(__p));
      memset(values, 0, 24);
      memset(v170, 0, 24);
      if (!*((unsigned char *)*v14 + 49) && isReal())
      {
        (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 120) + 24))(&v169);
        memset(buf, 0, 24);
        ctu::cf::assign();
        char v15 = *(void **)buf;
        *(void *)uint64_t v184 = *(void *)&buf[8];
        *(void *)&v184[7] = *(void *)&buf[15];
        uint8_t v16 = buf[23];
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
        __p[0] = v15;
        __p[1] = *(void **)v184;
        *(void **)((char *)&__p[1] + 7) = *(void **)&v184[7];
        HIBYTE(__p[2]) = v16;
        sub_1000577C4(&v169);
        (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 120) + 24))(&v169);
        memset(buf, 0, 24);
        ctu::cf::assign();
        uint64_t v17 = *(void ***)buf;
        *(void *)uint64_t v184 = *(void *)&buf[8];
        *(void *)&v184[7] = *(void *)&buf[15];
        uint8_t v18 = buf[23];
        if (SHIBYTE(values[2]) < 0) {
          operator delete(values[0]);
        }
        values[0] = v17;
        values[1] = *(void ***)v184;
        *(void ***)((char *)&values[1] + 7) = *(void ***)&v184[7];
        HIBYTE(values[2]) = v18;
        sub_1000577C4(&v169);
        if (v166)
        {
          (*(void (**)(const void **__return_ptr))(*(void *)v166 + 80))(&v169);
          memset(buf, 0, 24);
          ctu::cf::assign();
          CFStringRef v19 = *(void **)buf;
          *(void *)uint64_t v184 = *(void *)&buf[8];
          *(void *)&v184[7] = *(void *)&buf[15];
          uint8_t v20 = buf[23];
          if (SHIBYTE(v170[2]) < 0) {
            operator delete(v170[0]);
          }
          v170[0] = v19;
          v170[1] = *(void **)v184;
          *(void **)((char *)&v170[1] + 7) = *(void **)&v184[7];
          HIBYTE(v170[2]) = v20;
          sub_1000577C4(&v169);
        }
      }
      unint64_t v21 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        int v22 = *((_DWORD *)*v14 + 14);
        uint64_t v23 = PersonalityInfo::logPrefix(*v14);
        uint64_t v24 = asString();
        uint64_t v25 = *v14;
        uint64_t v26 = *((unsigned __int8 *)*v14 + 47);
        BOOL v27 = (v26 & 0x80u) != 0;
        if ((v26 & 0x80u) != 0) {
          uint64_t v26 = *((void *)*v14 + 4);
        }
        uint64_t v28 = (char *)v25 + 24;
        if (v27) {
          uint64_t v28 = (const char *)*((void *)v25 + 3);
        }
        if (v26) {
          __int16 v29 = v28;
        }
        else {
          __int16 v29 = "<invalid>";
        }
        int v30 = *((unsigned __int8 *)v25 + 49);
        if (*((unsigned char *)v25 + 49))
        {
          __int16 v31 = "";
          uint64_t v32 = "";
          __int16 v33 = "";
        }
        else
        {
          int v34 = *((unsigned __int8 *)v25 + 61);
          __int16 v33 = (const char *)subscriber::asString();
          uint64_t v32 = " (e)";
          if (!v34) {
            uint64_t v32 = " (f)";
          }
          uint64_t v25 = *v14;
          int v30 = *((unsigned __int8 *)*v14 + 49);
          __int16 v31 = " slot:";
        }
        __int16 v35 = " cb:";
        if (v30) {
          __int16 v35 = "";
        }
        char v36 = values;
        if (SHIBYTE(values[2]) < 0) {
          char v36 = (void ***)values[0];
        }
        char v37 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          char v37 = (void **)__p[0];
        }
        char v38 = v170;
        if (SHIBYTE(v170[2]) < 0) {
          char v38 = (void **)v170[0];
        }
        uint64_t v39 = "active";
        if (!*((unsigned char *)v25 + 48)) {
          uint64_t v39 = "inactive";
        }
        uint64_t v40 = "";
        if (!v30)
        {
          if (*((unsigned char *)v25 + 64))
          {
            uint64_t v40 = ", turned OFF";
            if (!*((unsigned char *)v25 + 65))
            {
              uint64_t v40 = ", unauthorized";
              if (!*((unsigned char *)v25 + 66)) {
                uint64_t v40 = "";
              }
            }
          }
          else
          {
            uint64_t v40 = ", noSIM";
          }
        }
        uint64_t v41 = (void *)((char *)v25 + 72);
        if (*((char *)v25 + 95) < 0) {
          uint64_t v41 = (void *)*v41;
        }
        *(_DWORD *)std::string buf = 136318978;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 1024;
        *(_DWORD *)&uint8_t buf[24] = v22;
        *(_WORD *)&buf[28] = 2080;
        *(void *)&buf[30] = v23;
        *(_WORD *)&buf[38] = 2080;
        *(void *)&buf[40] = v24;
        *(_WORD *)&uint8_t buf[48] = 2080;
        *(void *)&buf[50] = v29;
        *(_WORD *)&buf[58] = 2080;
        *(void *)&buf[60] = v32;
        *(_WORD *)&buf[68] = 2080;
        *(void *)&buf[70] = v31;
        *(_WORD *)&buf[78] = 2080;
        *(void *)&buf[80] = v33;
        *(_WORD *)&buf[88] = 2080;
        *(void *)&buf[90] = v35;
        *(_WORD *)&buf[98] = 2082;
        *(void *)&buf[100] = v36;
        *(_WORD *)&buf[108] = 2082;
        *(void *)&buf[110] = v37;
        *(_WORD *)&buf[118] = 2082;
        *(void *)&buf[120] = v38;
        LOWORD(v175[0]) = 2080;
        *(void *)((char *)v175 + 2) = v39;
        HIWORD(v175[2]) = 2080;
        *(void *)&v175[3] = v40;
        LOWORD(v175[5]) = 2080;
        *(void *)((char *)&v175[5] + 2) = v41;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I %s%s | [%d] %s %-5s %s%s%s%s%s%{public}s:%{public}s %{public}s - %s%s %s", buf, 0x9Eu);
      }
      if (SHIBYTE(v170[2]) < 0) {
        operator delete(v170[0]);
      }
      if (SHIBYTE(values[2]) < 0) {
        operator delete(values[0]);
      }
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      v14 += 2;
    }
    while (v14 != v13);
  }
  BOOL v42 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s%sLabel assignments:", buf, 0x16u);
  }
  uint64_t v43 = *(void **)(a1 + 832);
  if (v43 != (void *)(a1 + 840))
  {
    do
    {
      uint64_t v44 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        long long v45 = (const char *)v43[4];
        uint64_t v46 = *((unsigned __int8 *)v43 + 55);
        uint64_t v47 = v43[5];
        asString();
        if ((v46 & 0x80u) == 0) {
          uint64_t v48 = v46;
        }
        else {
          uint64_t v48 = v47;
        }
        if ((v46 & 0x80u) == 0) {
          long long v49 = (const char *)(v43 + 4);
        }
        else {
          long long v49 = v45;
        }
        BOOL v50 = v48 == 0;
        *(_DWORD *)std::string buf = 136315906;
        uint64_t v51 = "<invalid>";
        if (!v50) {
          uint64_t v51 = v49;
        }
        *(void *)&uint8_t buf[4] = "";
        uint64_t v52 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          uint64_t v52 = (void **)__p[0];
        }
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&uint8_t buf[24] = v51;
        *(_WORD *)&unsigned char buf[32] = 2080;
        *(void *)&buf[34] = v52;
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I %s%s | %s: %s", buf, 0x2Au);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      int v53 = (void *)v43[1];
      if (v53)
      {
        do
        {
          BOOL v54 = v53;
          int v53 = (void *)*v53;
        }
        while (v53);
      }
      else
      {
        do
        {
          BOOL v54 = (void *)v43[2];
          BOOL v50 = *v54 == (void)v43;
          uint64_t v43 = v54;
        }
        while (!v50);
      }
      uint64_t v43 = v54;
    }
    while (v54 != (void *)(a1 + 840));
  }
  uint64_t v55 = *(void **)(a1 + 856);
  if (v55 != (void *)(a1 + 864))
  {
    do
    {
      uint64_t v56 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v57 = (const char *)v55[4];
        uint64_t v58 = *((unsigned __int8 *)v55 + 55);
        uint64_t v59 = v55[5];
        asString();
        if ((v58 & 0x80u) == 0) {
          uint64_t v60 = v58;
        }
        else {
          uint64_t v60 = v59;
        }
        if ((v58 & 0x80u) == 0) {
          BOOL v61 = (const char *)(v55 + 4);
        }
        else {
          BOOL v61 = v57;
        }
        BOOL v50 = v60 == 0;
        *(_DWORD *)std::string buf = 136315906;
        BOOL v62 = "<invalid>";
        if (!v50) {
          BOOL v62 = v61;
        }
        *(void *)&uint8_t buf[4] = "";
        long long v63 = __p;
        if (SHIBYTE(__p[2]) < 0) {
          long long v63 = (void **)__p[0];
        }
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&uint8_t buf[24] = v62;
        *(_WORD *)&unsigned char buf[32] = 2080;
        *(void *)&buf[34] = v63;
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I %s%s | %s: prefixed %s", buf, 0x2Au);
        if (SHIBYTE(__p[2]) < 0) {
          operator delete(__p[0]);
        }
      }
      uint64_t v64 = (void *)v55[1];
      if (v64)
      {
        do
        {
          char v65 = v64;
          uint64_t v64 = (void *)*v64;
        }
        while (v64);
      }
      else
      {
        do
        {
          char v65 = (void *)v55[2];
          BOOL v50 = *v65 == (void)v55;
          uint64_t v55 = v65;
        }
        while (!v50);
      }
      uint64_t v55 = v65;
    }
    while (v65 != (void *)(a1 + 864));
  }
  std::mutex::lock((std::mutex *)(a1 + 880));
  char v66 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
  {
    int64x2_t v67 = (void *)(a1 + 1056);
    if (*(char *)(a1 + 1079) < 0) {
      int64x2_t v67 = (void *)*v67;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2082;
    *(void *)&uint8_t buf[24] = v67;
    _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#I %s%sbadges language: %{public}s", buf, 0x20u);
  }
  int v68 = *(void **)(a1 + 1008);
  if (v68 != (void *)(a1 + 1016))
  {
    do
    {
      memset(values, 0, 24);
      uint64_t v69 = *(void *)(a1 + 1080);
      if (v69)
      {
        uint64_t v72 = *(void *)(v69 + 8);
        uint64_t v70 = v69 + 8;
        uint64_t v71 = v72;
        if (v72)
        {
          int v73 = *((_DWORD *)v68 + 8);
          uint64_t v74 = v70;
          do
          {
            int v75 = *(_DWORD *)(v71 + 32);
            BOOL v76 = v75 < v73;
            if (v75 >= v73) {
              char v77 = (uint64_t *)v71;
            }
            else {
              char v77 = (uint64_t *)(v71 + 8);
            }
            if (!v76) {
              uint64_t v74 = v71;
            }
            uint64_t v71 = *v77;
          }
          while (*v77);
          if (v74 != v70 && v73 >= *(_DWORD *)(v74 + 32))
          {
            asString();
            if (SHIBYTE(values[2]) < 0) {
              operator delete(values[0]);
            }
            *(_OWORD *)values = *(_OWORD *)buf;
            values[2] = *(void ***)&buf[16];
          }
        }
      }
      uint64_t v78 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v79 = subscriber::asString();
        int v80 = SHIBYTE(values[2]);
        std::string::size_type v81 = values[0];
        memset(__p, 0, sizeof(__p));
        ctu::cf::assign();
        uint64_t v82 = values;
        if (v80 < 0) {
          uint64_t v82 = (void ***)v81;
        }
        *(_OWORD *)std::string v170 = *(_OWORD *)__p;
        v170[2] = __p[2];
        std::string::size_type v83 = (void **)__p[0];
        if (SHIBYTE(__p[2]) >= 0) {
          std::string::size_type v83 = v170;
        }
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2080;
        *(void *)&uint8_t buf[24] = v79;
        *(_WORD *)&unsigned char buf[32] = 2080;
        *(void *)&buf[34] = v82;
        *(_WORD *)&buf[42] = 2080;
        *(void *)&buf[44] = v83;
        _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I %s%sbadge %s [%s] -> %s", buf, 0x34u);
        if (SHIBYTE(v170[2]) < 0) {
          operator delete(v170[0]);
        }
      }
      if (SHIBYTE(values[2]) < 0) {
        operator delete(values[0]);
      }
      char v84 = (void *)v68[1];
      if (v84)
      {
        do
        {
          int v85 = v84;
          char v84 = (void *)*v84;
        }
        while (v84);
      }
      else
      {
        do
        {
          int v85 = (void *)v68[2];
          BOOL v50 = *v85 == (void)v68;
          int v68 = v85;
        }
        while (!v50);
      }
      int v68 = v85;
    }
    while (v85 != (void *)(a1 + 1016));
  }
  std::mutex::unlock((std::mutex *)(a1 + 880));
  if (*(void *)(a1 + 528))
  {
    uint64_t v183 = 0;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v176 = 0u;
    memset(v175, 0, sizeof(v175));
    memset(buf, 0, sizeof(buf));
    sub_10004BD84((uint64_t)buf);
    uint64_t v86 = *(void **)(a1 + 512);
    if (v86 != (void *)(a1 + 520))
    {
      uint64_t v87 = 0;
      do
      {
        if (v87) {
          sub_10004B96C(&buf[16], (uint64_t)", ", 2);
        }
        int v88 = *((char *)v86 + 55);
        if (v88 >= 0) {
          uint64_t v89 = (uint64_t)(v86 + 4);
        }
        else {
          uint64_t v89 = v86[4];
        }
        if (v88 >= 0) {
          uint64_t v90 = *((unsigned __int8 *)v86 + 55);
        }
        else {
          uint64_t v90 = v86[5];
        }
        sub_10004B96C(&buf[16], v89, v90);
        std::string::size_type v91 = (void *)v86[1];
        if (v91)
        {
          do
          {
            uint64_t v92 = v91;
            std::string::size_type v91 = (void *)*v91;
          }
          while (v91);
        }
        else
        {
          do
          {
            uint64_t v92 = (void *)v86[2];
            BOOL v50 = *v92 == (void)v86;
            uint64_t v86 = v92;
          }
          while (!v50);
        }
        ++v87;
        uint64_t v86 = v92;
      }
      while (v92 != (void *)(a1 + 520));
    }
    std::string::size_type v93 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v93, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BC98((uint64_t)&buf[24], values);
      int v94 = SHIBYTE(values[2]) >= 0 ? values : (void ***)values[0];
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "";
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = "";
      HIWORD(__p[2]) = 2080;
      uint64_t v173 = v94;
      _os_log_impl((void *)&_mh_execute_header, v93, OS_LOG_TYPE_DEFAULT, "#I %s%shidden 4FF sims: [%s]", (uint8_t *)__p, 0x20u);
      if (SHIBYTE(values[2]) < 0) {
        operator delete(values[0]);
      }
    }
    *(void *)&uint8_t buf[16] = v95;
    if ((char)buf[111] < 0) {
      operator delete(*(void **)&buf[88]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 560));
  if (*(void *)(a1 + 584))
  {
    uint64_t v183 = 0;
    long long v181 = 0u;
    long long v182 = 0u;
    long long v179 = 0u;
    long long v180 = 0u;
    long long v177 = 0u;
    long long v178 = 0u;
    long long v176 = 0u;
    memset(v175, 0, sizeof(v175));
    memset(buf, 0, sizeof(buf));
    sub_10004BD84((uint64_t)buf);
    uint64_t v96 = *(void **)(a1 + 568);
    if (v96 != (void *)(a1 + 576))
    {
      uint64_t v97 = 0;
      do
      {
        if (v97) {
          sub_10004B96C(&buf[16], (uint64_t)", ", 2);
        }
        int v98 = *((char *)v96 + 55);
        if (v98 >= 0) {
          uint64_t v99 = (uint64_t)(v96 + 4);
        }
        else {
          uint64_t v99 = v96[4];
        }
        if (v98 >= 0) {
          uint64_t v100 = *((unsigned __int8 *)v96 + 55);
        }
        else {
          uint64_t v100 = v96[5];
        }
        sub_10004B96C(&buf[16], v99, v100);
        std::string::size_type v101 = (void *)v96[1];
        if (v101)
        {
          do
          {
            int64x2_t v102 = v101;
            std::string::size_type v101 = (void *)*v101;
          }
          while (v101);
        }
        else
        {
          do
          {
            int64x2_t v102 = (void *)v96[2];
            BOOL v50 = *v102 == (void)v96;
            uint64_t v96 = v102;
          }
          while (!v50);
        }
        ++v97;
        uint64_t v96 = v102;
      }
      while (v102 != (void *)(a1 + 576));
    }
    unint64_t v103 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v103, OS_LOG_TYPE_DEFAULT))
    {
      sub_10004BC98((uint64_t)&buf[24], values);
      int v104 = SHIBYTE(values[2]) >= 0 ? values : (void ***)values[0];
      LODWORD(__p[0]) = 136315650;
      *(void **)((char *)__p + 4) = "";
      WORD2(__p[1]) = 2080;
      *(void **)((char *)&__p[1] + 6) = "";
      HIWORD(__p[2]) = 2080;
      uint64_t v173 = v104;
      _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_DEFAULT, "#I %s%sabandoned sims: [%s]", (uint8_t *)__p, 0x20u);
      if (SHIBYTE(values[2]) < 0) {
        operator delete(values[0]);
      }
    }
    *(void *)&uint8_t buf[16] = v105;
    if ((char)buf[111] < 0) {
      operator delete(*(void **)&buf[88]);
    }
    std::streambuf::~streambuf();
    std::iostream::~basic_iostream();
    std::ios::~ios();
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 560));
  *(void *)uint64_t v184 = 0;
  sub_100080780(@"label-remap-history", kDevicePersistentStoreDataArchive, 0, (const void **)buf);
  sub_10004EFE4(v184, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (*(void *)v184) {
    uint64_t v106 = sub_100080778;
  }
  else {
    uint64_t v106 = 0;
  }
  if (!v106)
  {
    uint64_t v108 = *(NSObject **)(a1 + 40);
    char v162 = v165;
    if (!os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_274;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    unint64_t v163 = "#I %s%sLabelID remap journal is missing";
LABEL_267:
    _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, v163, buf, 0x16u);
    goto LABEL_274;
  }
  CFIndex Count = CFDictionaryGetCount(*(CFDictionaryRef *)v184);
  uint64_t v108 = *(NSObject **)(a1 + 40);
  BOOL v109 = os_log_type_enabled(v108, OS_LOG_TYPE_DEFAULT);
  if (!Count)
  {
    char v162 = v165;
    if (!v109) {
      goto LABEL_274;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    unint64_t v163 = "#I %s%sLabelID remap journal is empty";
    goto LABEL_267;
  }
  if (v109)
  {
    std::string::size_type v110 = " (max)";
    *(_DWORD *)std::string buf = 136315906;
    if (Count != 30) {
      std::string::size_type v110 = "";
    }
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)&uint8_t buf[24] = Count;
    *(_WORD *)&buf[28] = 2080;
    *(void *)&buf[30] = v110;
    _os_log_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEFAULT, "#I %s%sLabelID remap journal: %d element(s)%s", buf, 0x26u);
  }
  memset(__p, 0, sizeof(__p));
  sub_10019E8F0(__p, Count);
  memset(values, 0, 24);
  sub_10004EE3C(values, Count);
  CFDictionaryGetKeysAndValues(*(CFDictionaryRef *)v184, (const void **)__p[0], (const void **)values[0]);
  memset(v170, 0, 24);
  sub_100C2F6C4(v170, Count);
  for (uint64_t i = 0; i != Count; ++i)
  {
    CFDictionaryRef v112 = (const __CFDictionary *)values[0][i];
    if (v112)
    {
      CFTypeID v113 = CFGetTypeID(values[0][i]);
      if (v113 == CFDictionaryGetTypeID())
      {
        CFStringRef Value = (uint64_t *)CFDictionaryGetValue(v112, @"ts");
        uint64_t v115 = Value;
        if (Value && (CFTypeID v116 = CFGetTypeID(Value), v116 == CFNumberGetTypeID()))
        {
          *(void *)std::string buf = 0;
          ctu::cf::assign((ctu::cf *)buf, v115, v117);
          uint64_t v118 = *(void *)buf;
        }
        else
        {
          uint64_t v118 = 0;
        }
        char v119 = v170[1];
        if (v170[1] >= v170[2])
        {
          uint64_t v121 = v170[0];
          int64_t v122 = ((char *)v170[1] - (char *)v170[0]) >> 4;
          unint64_t v123 = v122 + 1;
          if ((unint64_t)(v122 + 1) >> 60) {
            sub_10006A748();
          }
          int64_t v124 = (char *)v170[2] - (char *)v170[0];
          if (((char *)v170[2] - (char *)v170[0]) >> 3 > v123) {
            unint64_t v123 = v124 >> 3;
          }
          if ((unint64_t)v124 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v125 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v125 = v123;
          }
          if (v125) {
            unint64_t v125 = (unint64_t)sub_1009C886C(v125);
          }
          else {
            uint64_t v126 = 0;
          }
          unint64_t v127 = (char *)(v125 + 16 * v122);
          *(void *)unint64_t v127 = i;
          *((void *)v127 + 1) = v118;
          long long v128 = v127;
          if (v119 != v121)
          {
            do
            {
              *((_OWORD *)v128 - 1) = *((_OWORD *)v119 - 1);
              v128 -= 16;
              v119 -= 2;
            }
            while (v119 != v121);
            char v119 = v170[0];
          }
          v120 = v127 + 16;
          v170[0] = v128;
          v170[2] = (void *)(v125 + 16 * v126);
          if (v119) {
            operator delete(v119);
          }
        }
        else
        {
          *(void *)v170[1] = i;
          v119[1] = v118;
          v120 = v119 + 2;
        }
        v170[1] = v120;
      }
    }
  }
  v130 = (uint64_t *)v170[0];
  long long v129 = (uint64_t *)v170[1];
  unint64_t v131 = ((char *)v170[1] - (char *)v170[0]) >> 4;
  unint64_t v132 = 126 - 2 * __clz(v131);
  if (v170[1] == v170[0]) {
    uint64_t v133 = 0;
  }
  else {
    uint64_t v133 = v132;
  }
  sub_100C32960((uint64_t *)v170[0], (uint64_t *)v170[1], v133, 1);
  uint64_t v167 = v130;
  if (v129 != v130)
  {
    uint64_t v134 = 0;
    if (v131 <= 1) {
      uint64_t v135 = 1;
    }
    else {
      uint64_t v135 = v131;
    }
    uint64_t v168 = v135;
    do
    {
      uint64_t v136 = *v130;
      uint64_t v137 = *((void *)__p[0] + *v130);
      if (v137)
      {
        CFTypeID v138 = CFGetTypeID(*((CFTypeRef *)__p[0] + *v130));
        if (v138 == CFStringGetTypeID()) {
          uint64_t v139 = v137;
        }
        else {
          uint64_t v139 = 0;
        }
        uint64_t v136 = *v130;
      }
      else
      {
        uint64_t v139 = 0;
      }
      CFDictionaryRef v140 = (const __CFDictionary *)values[0][v136];
      if (v140 && (CFTypeID v141 = CFGetTypeID(values[0][v136]), v141 == CFDictionaryGetTypeID()))
      {
        CFStringRef v142 = (const __CFString *)CFDictionaryGetValue(v140, @"to");
        CFStringRef v143 = v142;
        if (v142)
        {
          CFTypeID v144 = CFGetTypeID(v142);
          if (v144 == CFStringGetTypeID()) {
            CFStringRef v145 = v143;
          }
          else {
            CFStringRef v145 = 0;
          }
        }
        else
        {
          CFStringRef v145 = 0;
        }
        CFStringRef v149 = (const __CFString *)CFDictionaryGetValue(v140, @"action");
        CFStringRef v150 = v149;
        if (v149)
        {
          CFTypeID v151 = CFGetTypeID(v149);
          if (v151 == CFStringGetTypeID()) {
            CFStringRef v147 = v150;
          }
          else {
            CFStringRef v147 = 0;
          }
        }
        else
        {
          CFStringRef v147 = 0;
        }
        char v152 = (uint64_t *)CFDictionaryGetValue(v140, @"from_dated");
        int v153 = v152;
        *(void *)std::string buf = 0;
        if (v152)
        {
          CFTypeID v154 = CFGetTypeID(v152);
          if (v154 == CFNumberGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v153, v155);
          }
        }
        uint64_t v146 = *(void *)buf;
        uint64_t v156 = (uint64_t *)CFDictionaryGetValue(v140, @"to_dated");
        v157 = v156;
        *(void *)std::string buf = 0;
        if (v156)
        {
          CFTypeID v158 = CFGetTypeID(v156);
          if (v158 == CFNumberGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v157, v159);
          }
        }
        uint64_t v148 = *(void *)buf;
      }
      else
      {
        uint64_t v146 = -1;
        CFStringRef v147 = @"?";
        CFStringRef v145 = @"?";
        uint64_t v148 = -1;
      }
      char v160 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v160, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v161 = v130[1];
        *(_DWORD *)std::string buf = 136317186;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2048;
        *(void *)&uint8_t buf[24] = v134;
        *(_WORD *)&unsigned char buf[32] = 2114;
        *(void *)&buf[34] = v139;
        *(_WORD *)&buf[42] = 2048;
        *(void *)&buf[44] = v146;
        *(_WORD *)&buf[52] = 2114;
        *(void *)&buf[54] = v145;
        *(_WORD *)&buf[62] = 2048;
        *(void *)&buf[64] = v148;
        *(_WORD *)&buf[72] = 2048;
        *(void *)&buf[74] = v161;
        *(_WORD *)&buf[82] = 2114;
        *(void *)&buf[84] = v147;
        _os_log_impl((void *)&_mh_execute_header, v160, OS_LOG_TYPE_DEFAULT, "#I %s%s  %02zu: %{public}@ dated:%ld -> %{public}@ dated:%ld ts:%ld, %{public}@", buf, 0x5Cu);
      }
      ++v134;
      v130 += 2;
    }
    while (v168 != v134);
    goto LABEL_269;
  }
  if (v130) {
LABEL_269:
  }
    operator delete(v167);
  if (values[0])
  {
    values[1] = values[0];
    operator delete(values[0]);
  }
  char v162 = v165;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
LABEL_274:
  sub_100057D78((const void **)v184);
  if ((v162 & 1) == 0) {
    sub_10004D2C8(v164);
  }
}

void sub_100C258C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::mutex *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48)
{
  sub_10008248C((uint64_t)&a43);
  os_unfair_lock_unlock(v48);
  if ((a11 & 1) == 0) {
    sub_10004D2C8(a9);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100C25A74(uint64_t a1)
{
  uint64_t v2 = operator new(8uLL);
  CFStringRef theString1 = 0;
  std::string __p = v2;
  *uint64_t v2 = @"info";
  uint64_t v9 = v2 + 1;
  unint64_t v10 = v2 + 1;
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 120) + 24))(&v6);
  sub_100056248(&theString1, &v6);
  sub_1000577C4(&v6);
  if (theString1) {
    uint64_t v3 = sub_1000810B8;
  }
  else {
    uint64_t v3 = 0;
  }
  BOOL v4 = v3 && CFEqual(theString1, @"sim");
  sub_1000558F4((const void **)&theString1);
  if (__p)
  {
    uint64_t v9 = __p;
    operator delete(__p);
  }
  return v4;
}

void sub_100C25B70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, void *__p, uint64_t a14)
{
  if (__p)
  {
    a14 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C25BAC(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v173 = 0;
  uint64_t v172 = 0;
  uint64_t v174 = 0;
  sub_100C1EADC((const void **)&v172, a2);
  uint64_t v126 = a1;
  uint64_t v6 = v174;
  uint64_t v7 = a3[2];
  std::string::size_type v8 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
    *(void *)long long v181 = v6;
    *(_WORD *)&v181[8] = 2048;
    *(void *)&v181[10] = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sIdentified %zu labeled sims, %zu need labels", (uint8_t *)&buf, 0x2Au);
  }
  uint64_t v171 = 0;
  memset(v170, 0, sizeof(v170));
  uint64_t v9 = *(uint64_t **)(a2 + 832);
  unint64_t v10 = (uint64_t *)(a2 + 840);
  if (v9 != (uint64_t *)(a2 + 840))
  {
    while (1)
    {
      uint64_t v11 = *((unsigned __int8 *)v9 + 79);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = v9[8];
      }
      if (!v11)
      {
        uint64_t v12 = *((unsigned __int8 *)v9 + 103);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = v9[11];
        }
        if (!v12) {
          break;
        }
      }
      CFTypeID v13 = (uint64_t *)v9[1];
      if (v13)
      {
        do
        {
          long long v14 = v13;
          CFTypeID v13 = (uint64_t *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (uint64_t *)v9[2];
          BOOL v15 = *v14 == (void)v9;
          uint64_t v9 = v14;
        }
        while (!v15);
      }
      uint64_t v9 = v14;
      if (v14 == v10) {
        goto LABEL_16;
      }
    }
    if (*((char *)v9 + 55) < 0) {
      sub_10004FC84(&buf, (void *)v9[4], v9[5]);
    }
    else {
      std::string buf = *(std::string *)(v9 + 4);
    }
    if (*((char *)v9 + 127) < 0)
    {
      sub_10004FC84(v181, (void *)v9[13], v9[14]);
    }
    else
    {
      *(_OWORD *)long long v181 = *(_OWORD *)(v9 + 13);
      *(void *)&v181[16] = v9[15];
    }
    sub_100C28F78(v170, &buf);
    if ((v181[23] & 0x80000000) != 0) {
      operator delete(*(void **)v181);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
  }
LABEL_16:
  unint64_t v129 = v7 + v6;
  long long v128 = (uint64_t **)(a2 + 832);
  unint64_t v127 = a3;
  uint8_t v18 = (void *)*a3;
  uint64_t v17 = a3 + 1;
  uint8_t v16 = v18;
  if (v18 != v17)
  {
    do
    {
      CFStringRef v19 = v16 + 4;
      uint8_t v20 = *(NSObject **)(a2 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v21 = *((unsigned __int8 *)v16 + 55);
        BOOL v22 = (v21 & 0x80u) != 0;
        if ((v21 & 0x80u) != 0) {
          uint64_t v21 = v16[5];
        }
        if (v22) {
          uint64_t v23 = (const char *)v16[4];
        }
        else {
          uint64_t v23 = (const char *)(v16 + 4);
        }
        BOOL v15 = v21 == 0;
        uint64_t v24 = "<invalid>";
        if (!v15) {
          uint64_t v24 = v23;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
        *(void *)long long v181 = v24;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sNeed to label %s", (uint8_t *)&buf, 0x20u);
      }
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 120) + 24))(&buf);
      uint64_t v25 = (BOOL *)buf.__r_.__value_.__r.__words[0];
      LOBYTE(__dst[0]) = 0;
      if (buf.__r_.__value_.__r.__words[0])
      {
        CFTypeID v26 = CFGetTypeID(buf.__r_.__value_.__l.__data_);
        if (v26 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)__dst, v25, v27);
        }
        int v28 = LOBYTE(__dst[0]);
        sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
        if (v28)
        {
          sub_100C1D258((uint64_t)&v162, a2, (uint64_t)(v16 + 4), (long long *)"Provisioning", &xmmword_101B102B8);
          if (v169 < 0) {
            operator delete(__p);
          }
          if (v167 < 0) {
            operator delete(v166);
          }
          if (v165 < 0) {
            operator delete(v164);
          }
          if (v163 < 0)
          {
            __int16 v29 = v162;
            goto LABEL_264;
          }
          goto LABEL_265;
        }
      }
      else
      {
        sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
      }
      (*(void (**)(std::string *__return_ptr))(**(void **)(a2 + 120) + 24))(&buf);
      int v30 = (BOOL *)buf.__r_.__value_.__r.__words[0];
      LOBYTE(__dst[0]) = 0;
      if (buf.__r_.__value_.__r.__words[0])
      {
        CFTypeID v31 = CFGetTypeID(buf.__r_.__value_.__l.__data_);
        if (v31 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)__dst, v30, v32);
        }
        int v33 = LOBYTE(__dst[0]);
        int v34 = sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
        if (v33)
        {
          sub_100C1D258((uint64_t)&v154, a2, (uint64_t)(v16 + 4), (long long *)"Other", &xmmword_101B102D0);
          if (v161 < 0) {
            operator delete(v160);
          }
          if (v159 < 0) {
            operator delete(v158);
          }
          if (v157 < 0) {
            operator delete(v156);
          }
          if (v155 < 0)
          {
            __int16 v29 = v154;
            goto LABEL_264;
          }
          goto LABEL_265;
        }
      }
      else
      {
        int v34 = sub_1000577C4((const void **)&buf.__r_.__value_.__l.__data_);
      }
      if (v129 >= 2 && v174)
      {
        __int16 v35 = *(NSObject **)(a2 + 40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v36 = *((unsigned __int8 *)v16 + 55);
          BOOL v37 = (v36 & 0x80u) != 0;
          if ((v36 & 0x80u) != 0) {
            uint64_t v36 = v16[5];
          }
          if (v37) {
            char v38 = (const char *)v16[4];
          }
          else {
            char v38 = (const char *)(v16 + 4);
          }
          BOOL v15 = v36 == 0;
          uint64_t v39 = "<invalid>";
          if (!v15) {
            uint64_t v39 = v38;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          *(void *)long long v181 = v39;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I %s%screating default label for %s", (uint8_t *)&buf, 0x20u);
        }
        if (*(void *)(a2 + 848))
        {
          unsigned int v40 = time(0);
          srand(v40);
          uint64_t v41 = 0;
          while (1)
          {
            unint64_t v42 = rand() % 5uLL + 1;
            uint64_t v43 = *(NSObject **)(a2 + 40);
            if (os_log_type_enabled(v43, OS_LOG_TYPE_DEBUG))
            {
              LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
              *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
              WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
              *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
              HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
              *(void *)long long v181 = v41;
              *(_WORD *)&v181[8] = 2048;
              *(void *)&v181[10] = v42;
              _os_log_debug_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEBUG, "#D %s%sdice %zu: %zu", (uint8_t *)&buf, 0x2Au);
            }
            uint64_t v44 = off_101A48570[v42];
            long long v45 = *v128;
            if (*v128 == v10) {
              break;
            }
            size_t v46 = strlen(off_101A48570[v42]);
            uint64_t v47 = *v128;
            while (1)
            {
              uint64_t v48 = *((unsigned __int8 *)v47 + 103);
              int v49 = (char)v48;
              if ((v48 & 0x80u) != 0) {
                uint64_t v48 = v47[11];
              }
              if (v48 == v46)
              {
                BOOL v50 = v49 >= 0 ? v47 + 10 : (uint64_t *)v47[10];
                if (!memcmp(v50, v44, v46)) {
                  break;
                }
              }
              uint64_t v51 = (uint64_t *)v47[1];
              if (v51)
              {
                do
                {
                  uint64_t v52 = v51;
                  uint64_t v51 = (uint64_t *)*v51;
                }
                while (v51);
              }
              else
              {
                do
                {
                  uint64_t v52 = (uint64_t *)v47[2];
                  BOOL v15 = *v52 == (void)v47;
                  uint64_t v47 = v52;
                }
                while (!v15);
              }
              uint64_t v47 = v52;
              if (v52 == v10) {
                goto LABEL_130;
              }
            }
            if (++v41 == 3)
            {
              uint64_t v107 = 1;
              while (1)
              {
                uint64_t v108 = *(NSObject **)(a2 + 40);
                if (os_log_type_enabled(v108, OS_LOG_TYPE_DEBUG))
                {
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315650;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2048;
                  *(void *)long long v181 = v107;
                  _os_log_debug_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_DEBUG, "#D %s%spassthrough %zu", (uint8_t *)&buf, 0x20u);
                  long long v45 = *v128;
                }
                uint64_t v44 = off_101A48570[v107];
                if (v45 == v10) {
                  goto LABEL_130;
                }
                size_t v109 = strlen(off_101A48570[v107]);
                std::string::size_type v110 = v45;
                while (1)
                {
                  uint64_t v111 = *((unsigned __int8 *)v110 + 103);
                  int v112 = (char)v111;
                  if ((v111 & 0x80u) != 0) {
                    uint64_t v111 = v110[11];
                  }
                  if (v111 == v109)
                  {
                    CFTypeID v113 = v112 >= 0 ? v110 + 10 : (uint64_t *)v110[10];
                    if (!memcmp(v113, v44, v109)) {
                      break;
                    }
                  }
                  uint64_t v114 = (uint64_t *)v110[1];
                  if (v114)
                  {
                    do
                    {
                      uint64_t v115 = v114;
                      uint64_t v114 = (uint64_t *)*v114;
                    }
                    while (v114);
                  }
                  else
                  {
                    do
                    {
                      uint64_t v115 = (uint64_t *)v110[2];
                      BOOL v15 = *v115 == (void)v110;
                      std::string::size_type v110 = v115;
                    }
                    while (!v15);
                  }
                  std::string::size_type v110 = v115;
                  if (v115 == v10) {
                    goto LABEL_130;
                  }
                }
                if (++v107 == 6)
                {
                  size_t v116 = strlen("USER_LABEL_PRIMARY");
                  while (1)
                  {
                    uint64_t v117 = *((unsigned __int8 *)v45 + 103);
                    int v118 = (char)v117;
                    if ((v117 & 0x80u) != 0) {
                      uint64_t v117 = v45[11];
                    }
                    if (v117 == v116)
                    {
                      char v119 = v118 >= 0 ? v45 + 10 : (uint64_t *)v45[10];
                      if (!memcmp(v119, "USER_LABEL_PRIMARY", v116)) {
                        break;
                      }
                    }
                    v120 = (uint64_t *)v45[1];
                    if (v120)
                    {
                      do
                      {
                        uint64_t v121 = v120;
                        v120 = (uint64_t *)*v120;
                      }
                      while (v120);
                    }
                    else
                    {
                      do
                      {
                        uint64_t v121 = (uint64_t *)v45[2];
                        BOOL v15 = *v121 == (void)v45;
                        long long v45 = v121;
                      }
                      while (!v15);
                    }
                    long long v45 = v121;
                    if (v121 == v10) {
                      goto LABEL_133;
                    }
                  }
                  int v122 = rand();
                  sub_100058DB0(v148, "");
                  sub_100058DB0(&v146, off_101A48570[v122 % 5uLL + 1]);
                  buf.__r_.__value_.__s.__data_[0] = 0;
                  v181[0] = 0;
                  LOBYTE(__dst[0]) = 0;
                  v152[8] = 0;
                  sub_100C298EC((uint64_t)v138, a2, (uint64_t)(v16 + 4), (long long *)v148, (long long *)&v146, (uint64_t)&buf, (uint64_t)__dst);
                  goto LABEL_134;
                }
              }
            }
          }
LABEL_130:
          sub_100058DB0(v148, "");
          sub_100058DB0(&v146, v44);
          buf.__r_.__value_.__s.__data_[0] = 0;
          v181[0] = 0;
          LOBYTE(__dst[0]) = 0;
          v152[8] = 0;
          sub_100C298EC((uint64_t)v138, a2, (uint64_t)(v16 + 4), (long long *)v148, (long long *)&v146, (uint64_t)&buf, (uint64_t)__dst);
        }
        else
        {
LABEL_133:
          sub_100058DB0(v148, "");
          sub_100058DB0(&v146, "USER_LABEL_PRIMARY");
          buf.__r_.__value_.__s.__data_[0] = 0;
          v181[0] = 0;
          LOBYTE(__dst[0]) = 0;
          v152[8] = 0;
          sub_100C298EC((uint64_t)v138, a2, (uint64_t)(v16 + 4), (long long *)v148, (long long *)&v146, (uint64_t)&buf, (uint64_t)__dst);
        }
LABEL_134:
        if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v146.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v149) < 0) {
          operator delete(v148[0]);
        }
        if (v145 < 0) {
          operator delete(v144);
        }
        if (v143 < 0) {
          operator delete(v142);
        }
        if (v141 < 0) {
          operator delete(v140);
        }
        if (v139 < 0)
        {
          __int16 v29 = (void *)v138[0];
          goto LABEL_264;
        }
        goto LABEL_265;
      }
      if ((_BYTE)v171)
      {
        int v53 = *(NSObject **)(a2 + 40);
        if (os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT))
        {
          data = &v170[1];
          if ((v170[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            data = (std::string *)v170[1].__r_.__value_.__l.__data_;
          }
          std::string::size_type size = HIBYTE(v170[0].__r_.__value_.__r.__words[2]);
          if ((v170[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            std::string::size_type size = v170[0].__r_.__value_.__l.__size_;
          }
          uint64_t v56 = v170;
          if ((v170[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            uint64_t v56 = (std::string *)v170[0].__r_.__value_.__r.__words[0];
          }
          uint64_t v57 = *((unsigned __int8 *)v16 + 55);
          BOOL v58 = (v57 & 0x80u) != 0;
          if ((v57 & 0x80u) != 0) {
            uint64_t v57 = v16[5];
          }
          if (v58) {
            uint64_t v59 = (const char *)v16[4];
          }
          else {
            uint64_t v59 = (const char *)(v16 + 4);
          }
          if (size) {
            uint64_t v60 = (const char *)v56;
          }
          else {
            uint64_t v60 = "<invalid>";
          }
          if (v57) {
            BOOL v61 = v59;
          }
          else {
            BOOL v61 = "<invalid>";
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
          WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
          *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
          HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
          *(void *)long long v181 = data;
          *(_WORD *)&v181[8] = 2080;
          *(void *)&v181[10] = v60;
          *(_WORD *)&v181[18] = 2080;
          *(void *)&v181[20] = v61;
          _os_log_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_DEFAULT, "#I %s%sReassigned label %s from '%s' to '%s'", (uint8_t *)&buf, 0x34u);
        }
        BOOL v62 = *v128;
        if (*v128 == v10) {
          goto LABEL_159;
        }
        if ((v170[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type v63 = HIBYTE(v170[1].__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type v63 = v170[1].__r_.__value_.__l.__size_;
        }
        if ((v170[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v64 = &v170[1];
        }
        else {
          uint64_t v64 = (std::string *)v170[1].__r_.__value_.__l.__data_;
        }
        while (1)
        {
          uint64_t v65 = *((unsigned __int8 *)v62 + 127);
          if ((v65 & 0x80u) == 0) {
            uint64_t v66 = *((unsigned __int8 *)v62 + 127);
          }
          else {
            uint64_t v66 = v62[14];
          }
          if (v66 == v63)
          {
            if ((v65 & 0x80) != 0)
            {
              if (!memcmp((const void *)v62[13], v64, v62[14]))
              {
LABEL_146:
                if (v62 != v10)
                {
                  if (sub_10001D294((unsigned __int8 *)v62 + 32, (unsigned __int8 *)v16 + 32))
                  {
                    uint64_t v71 = *(NSObject **)(a2 + 40);
                    if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v72 = &v170[1];
                      if ((v170[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                        uint64_t v72 = (std::string *)v170[1].__r_.__value_.__l.__data_;
                      }
                      uint64_t v73 = *((unsigned __int8 *)v16 + 55);
                      BOOL v74 = (v73 & 0x80u) != 0;
                      if ((v73 & 0x80u) != 0) {
                        uint64_t v73 = v16[5];
                      }
                      if (v74) {
                        int v75 = (const char *)v16[4];
                      }
                      else {
                        int v75 = (const char *)(v16 + 4);
                      }
                      BOOL v15 = v73 == 0;
                      BOOL v76 = "<invalid>";
                      if (!v15) {
                        BOOL v76 = v75;
                      }
                      LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                      HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                      *(void *)long long v181 = v72;
                      *(_WORD *)&v181[8] = 2080;
                      *(void *)&v181[10] = v76;
                      char v77 = v71;
                      uint64_t v78 = "#W %s%sassignLabel, called for label %s to be assigned to it's own persona %s - suppressed";
                      goto LABEL_170;
                    }
                    goto LABEL_254;
                  }
                  v148[0] = 0;
                  v148[1] = 0;
                  uint64_t v149 = 0;
                  if (*((char *)v62 + 55) < 0)
                  {
                    sub_10004FC84(v148, (void *)v62[4], v62[5]);
                  }
                  else
                  {
                    *(_OWORD *)uint64_t v148 = *((_OWORD *)v62 + 2);
                    uint64_t v149 = v62[6];
                  }
                  long long v177 = 0;
                  if (SHIBYTE(v170[1].__r_.__value_.__r.__words[2]) < 0) {
                    sub_10004FC84(&v146, v170[1].__r_.__value_.__l.__data_, v170[1].__r_.__value_.__l.__size_);
                  }
                  else {
                    std::string v146 = v170[1];
                  }
                  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_10004FC84(__dst, v146.__r_.__value_.__l.__data_, v146.__r_.__value_.__l.__size_);
                  }
                  else
                  {
                    *(_OWORD *)std::string __dst = *(_OWORD *)&v146.__r_.__value_.__l.__data_;
                    *(void *)char v152 = *((void *)&v146.__r_.__value_.__l + 2);
                  }
                  long long v178 = 0;
                  if ((v152[7] & 0x80000000) != 0)
                  {
                    sub_10004FC84(&buf, __dst[0], (unint64_t)__dst[1]);
                  }
                  else
                  {
                    *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *(_OWORD *)__dst;
                    buf.__r_.__value_.__r.__words[2] = *(void *)v152;
                  }
                  long long v179 = 0;
                  if (ctu::cf::convert_copy())
                  {
                    int v85 = v178;
                    long long v178 = v179;
                    v175[0] = v85;
                    sub_1000558F4(v175);
                  }
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  long long v177 = v178;
                  long long v178 = 0;
                  sub_1000558F4(&v178);
                  if ((v152[7] & 0x80000000) != 0) {
                    operator delete(__dst[0]);
                  }
                  if (SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(v146.__r_.__value_.__l.__data_);
                  }
                  *(_OWORD *)std::string __dst = 0u;
                  *(_OWORD *)char v152 = 0u;
                  uint64_t v86 = sub_100046F68((uint64_t)v128, (void **)v16 + 4);
                  if (v10 != (uint64_t *)v86) {
                    sub_100093B44((std::string *)__dst, (const std::string *)(v86 + 13));
                  }
                  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)(v16 + 4);
                  uint64_t v87 = sub_100C3B444(v128, (void **)v16 + 4, (long long **)&buf);
                  std::string::operator=((std::string *)(v87 + 7), (const std::string *)(v62 + 7));
                  std::string::operator=((std::string *)(v87 + 10), (const std::string *)(v62 + 10));
                  std::string::operator=((std::string *)(v87 + 13), (const std::string *)(v62 + 13));
                  *((unsigned char *)v87 + 128) = *((unsigned char *)v62 + 128);
                  int v88 = (std::string *)(v87 + 17);
                  std::string::operator=((std::string *)(v87 + 17), (const std::string *)(v62 + 17));
                  *((unsigned char *)v87 + 128) = 0;
                  uint64_t v89 = *(void *)(a2 + 608);
                  uint64_t v90 = *(void **)v89;
                  std::string::size_type v91 = *(void **)(v89 + 8);
                  if (*(void **)v89 == v91) {
                    goto LABEL_222;
                  }
                  while (!sub_10001D294((unsigned __int8 *)(*v90 + 24), (unsigned __int8 *)v16 + 32))
                  {
                    v90 += 2;
                    if (v90 == v91)
                    {
                      uint64_t v90 = v91;
                      break;
                    }
                  }
                  if (v90 == *(void **)(v89 + 8))
                  {
LABEL_222:
                    std::string::size_type v93 = 0;
                  }
                  else
                  {
                    uint64_t v92 = *v90;
                    std::string::size_type v93 = (std::__shared_weak_count *)v90[1];
                    if (v93) {
                      atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                    }
                    if (v92)
                    {
                      if (*(char *)(v92 + 95) < 0) {
                        sub_10004FC84(&buf, *(void **)(v92 + 72), *(void *)(v92 + 80));
                      }
                      else {
                        std::string buf = *(std::string *)(v92 + 72);
                      }
                      goto LABEL_224;
                    }
                  }
                  memset(&buf, 0, sizeof(buf));
LABEL_224:
                  std::string::operator=(v88, &buf);
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  int v94 = *(NSObject **)(a2 + 40);
                  if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
                  {
                    unint64_t v125 = v93;
                    uint64_t v95 = *((unsigned __int8 *)v16 + 55);
                    uint64_t v97 = (const char *)v16[4];
                    uint64_t v96 = v16[5];
                    asString();
                    if ((v95 & 0x80u) == 0) {
                      uint64_t v98 = v95;
                    }
                    else {
                      uint64_t v98 = v96;
                    }
                    if ((v95 & 0x80u) == 0) {
                      uint64_t v99 = (const char *)(v16 + 4);
                    }
                    else {
                      uint64_t v99 = v97;
                    }
                    BOOL v15 = v98 == 0;
                    LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                    uint64_t v100 = "<invalid>";
                    if (!v15) {
                      uint64_t v100 = v99;
                    }
                    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                    std::string::size_type v101 = v175;
                    if (v176 < 0) {
                      std::string::size_type v101 = (const void **)v175[0];
                    }
                    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                    *(void *)long long v181 = v100;
                    *(_WORD *)&v181[8] = 2080;
                    *(void *)&v181[10] = v101;
                    _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I %s%sassignLabel, %s <- %s", (uint8_t *)&buf, 0x2Au);
                    if (v176 < 0) {
                      operator delete((void *)v175[0]);
                    }
                    std::string::size_type v93 = v125;
                  }
                  sub_100C36FAC(v128, v148);
                  (*(void (**)(void, void **, const __CFString *, const __CFString *, void, void))(**(void **)(a2 + 120) + 32))(*(void *)(a2 + 120), v148, @"label-id", @"info", 0, 0);
                  (*(void (**)(void, void **, const __CFString *, const __CFString *, void, void))(**(void **)(a2 + 120) + 32))(*(void *)(a2 + 120), v148, @"label-id-confirmed", @"info", 0, 0);
                  if (v152[8] && (sub_100C2744C(a2, (unsigned __int8 **)__dst) & 1) == 0)
                  {
                    int64x2_t v102 = operator new(8uLL);
                    buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v102;
                    *int64x2_t v102 = @"unique-sim-label-store";
                    buf.__r_.__value_.__l.__size_ = (std::string::size_type)(v102 + 1);
                    buf.__r_.__value_.__r.__words[2] = (std::string::size_type)(v102 + 1);
                    int v104 = v152[7] >= 0 ? (const __CFString **)__dst : (const __CFString **)__dst[0];
                    sub_100083980(*(os_unfair_lock_s **)(a2 + 104), v104, &buf.__r_.__value_.__l.__data_, 0, v103);
                    if (buf.__r_.__value_.__r.__words[0])
                    {
                      buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
                      operator delete(buf.__r_.__value_.__l.__data_);
                    }
                  }
                  (*(void (**)(void, void *, const __CFString *, const void *, const __CFString *, void, void, void))(**(void **)(a2 + 120) + 16))(*(void *)(a2 + 120), v16 + 4, @"label-id", v177, @"info", 0, 0, 0);
                  (*(void (**)(void, void *, const __CFString *, const __CFString *, void, void))(**(void **)(a2 + 120) + 32))(*(void *)(a2 + 120), v16 + 4, @"label-id-confirmed", @"info", 0, 0);
                  if (v93) {
                    sub_10004D2C8(v93);
                  }
                  if (v152[8] && (v152[7] & 0x80000000) != 0) {
                    operator delete(__dst[0]);
                  }
                  sub_1000558F4(&v177);
                  if (SHIBYTE(v149) < 0) {
                    operator delete(v148[0]);
                  }
                  goto LABEL_254;
                }
LABEL_159:
                uint64_t v79 = *(NSObject **)(a2 + 40);
                if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v80 = *((unsigned __int8 *)v16 + 55);
                  BOOL v81 = (v80 & 0x80u) != 0;
                  if ((v80 & 0x80u) != 0) {
                    uint64_t v80 = v16[5];
                  }
                  if (v81) {
                    uint64_t v82 = (const char *)v16[4];
                  }
                  else {
                    uint64_t v82 = (const char *)(v16 + 4);
                  }
                  BOOL v15 = v80 == 0;
                  std::string::size_type v83 = "<invalid>";
                  if (!v15) {
                    std::string::size_type v83 = v82;
                  }
                  char v84 = &v170[1];
                  if ((v170[1].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    char v84 = (std::string *)v170[1].__r_.__value_.__l.__data_;
                  }
                  LODWORD(buf.__r_.__value_.__l.__data_) = 136315906;
                  *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
                  WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
                  *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
                  HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
                  *(void *)long long v181 = v83;
                  *(_WORD *)&v181[8] = 2080;
                  *(void *)&v181[10] = v84;
                  char v77 = v79;
                  uint64_t v78 = "#W %s%sassignLabel, %s <- %s failed : label not found";
LABEL_170:
                  _os_log_impl((void *)&_mh_execute_header, v77, OS_LOG_TYPE_DEFAULT, v78, (uint8_t *)&buf, 0x2Au);
                }
LABEL_254:
                if (*((char *)v16 + 55) < 0)
                {
                  sub_10004FC84(&buf, (void *)v16[4], v16[5]);
                }
                else
                {
                  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = *v19;
                  buf.__r_.__value_.__r.__words[2] = v16[6];
                }
                if (SHIBYTE(v170[1].__r_.__value_.__r.__words[2]) < 0) {
                  sub_10004FC84(v181, v170[1].__r_.__value_.__l.__data_, v170[1].__r_.__value_.__l.__size_);
                }
                else {
                  *(std::string *)long long v181 = v170[1];
                }
                sub_100C28F78(v170, &buf);
                if ((v181[23] & 0x80000000) != 0) {
                  operator delete(*(void **)v181);
                }
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
                {
                  __int16 v29 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_264:
                  operator delete(v29);
                }
                goto LABEL_265;
              }
            }
            else
            {
              if (!*((unsigned char *)v62 + 127)) {
                goto LABEL_146;
              }
              int64x2_t v67 = v64;
              int v68 = (unsigned __int8 *)(v62 + 13);
              while (*v68 == v67->__r_.__value_.__s.__data_[0])
              {
                ++v68;
                int64x2_t v67 = (std::string *)((char *)v67 + 1);
                if (!--v65) {
                  goto LABEL_146;
                }
              }
            }
          }
          uint64_t v69 = (uint64_t *)v62[1];
          if (v69)
          {
            do
            {
              uint64_t v70 = v69;
              uint64_t v69 = (uint64_t *)*v69;
            }
            while (v69);
          }
          else
          {
            do
            {
              uint64_t v70 = (uint64_t *)v62[2];
              BOOL v15 = *v70 == (void)v62;
              BOOL v62 = v70;
            }
            while (!v15);
          }
          BOOL v62 = v70;
          if (v70 == v10) {
            goto LABEL_159;
          }
        }
      }
      LOBYTE(v148[0]) = 0;
      char v150 = 0;
      v146.__r_.__value_.__s.__data_[0] = 0;
      char v147 = 0;
      sub_100C29034((uint64_t)v34, a2, (uint64_t)(v16 + 4), (uint64_t)v148, (uint64_t)&v146);
      if (*((char *)v16 + 55) < 0)
      {
        sub_10004FC84(__dst, (void *)v16[4], v16[5]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *v19;
        *(void *)char v152 = v16[6];
      }
      *(_OWORD *)&v152[8] = *(_OWORD *)&v181[24];
      uint64_t v153 = v182;
      *(void *)&v181[32] = 0;
      uint64_t v182 = 0;
      *(void *)&v181[24] = 0;
      sub_100C28F78(v170, (std::string *)__dst);
      if (SHIBYTE(v153) < 0) {
        operator delete(*(void **)&v152[8]);
      }
      if ((v152[7] & 0x80000000) != 0) {
        operator delete(__dst[0]);
      }
      if (v184 < 0) {
        operator delete(v183);
      }
      if (SHIBYTE(v182) < 0) {
        operator delete(*(void **)&v181[24]);
      }
      if ((v181[23] & 0x80000000) != 0) {
        operator delete(*(void **)v181);
      }
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v147 && SHIBYTE(v146.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v146.__r_.__value_.__l.__data_);
      }
      if (v150 && SHIBYTE(v149) < 0)
      {
        __int16 v29 = v148[0];
        goto LABEL_264;
      }
LABEL_265:
      sub_100C36C48(&v172, (void **)v16 + 4, (uint64_t)(v16 + 4));
      xpc_object_t v105 = (void *)v16[1];
      if (v105)
      {
        do
        {
          uint64_t v106 = v105;
          xpc_object_t v105 = (void *)*v105;
        }
        while (v105);
      }
      else
      {
        do
        {
          uint64_t v106 = (void *)v16[2];
          BOOL v15 = *v106 == (void)v16;
          uint8_t v16 = v106;
        }
        while (!v15);
      }
      uint8_t v16 = v106;
    }
    while (v106 != v17);
  }
  if (v129 >= 2)
  {
    if ((_BYTE)v171)
    {
      unint64_t v123 = sub_100046F68((uint64_t)v128, (void **)&v170[0].__r_.__value_.__l.__data_);
      if (v10 != (uint64_t *)v123)
      {
        sub_100058DB0(&buf, "");
        sub_100058DB0(__dst, "USER_LABEL_PRIMARY");
        sub_100C291D0((uint64_t)&v130, a2, (uint64_t)v170, &buf, (const std::string *)__dst, *((unsigned __int8 *)v123 + 128));
        if (v137 < 0) {
          operator delete(v136);
        }
        if (v135 < 0) {
          operator delete(v134);
        }
        if (v133 < 0) {
          operator delete(v132);
        }
        if (v131 < 0) {
          operator delete(v130);
        }
        if ((v152[7] & 0x80000000) != 0) {
          operator delete(__dst[0]);
        }
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  int64_t v124 = sub_100046F68((uint64_t)v128, (void **)(*v127 + 32));
  if (v10 == (uint64_t *)v124) {
    int64_t v124 = sub_100046F68(a2 + 856, (void **)(*v127 + 32));
  }
  sub_10023C008(v126, (uint64_t)(v124 + 7));
  sub_10013E528((uint64_t)v170);
  sub_10005CD2C((uint64_t)&v172, v173);
}

void sub_100C2719C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *__p,uint64_t a52,int a53,__int16 a54,char a55,char a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a56 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  sub_10013E528((uint64_t)&STACK[0x290]);
  sub_10005CD2C((uint64_t)&STACK[0x2C8], (char *)STACK[0x2D0]);
  _Unwind_Resume(a1);
}

uint64_t sub_100C273A8(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (a1 + 32 != a2) {
      sub_100426EA4((uint64_t **)(a1 + 32), *(long long **)a2, (long long *)(a2 + 8));
    }
  }
  else
  {
    sub_100319F54((uint64_t *)(a1 + 32), a2);
    *(unsigned char *)(a1 + 56) = 1;
  }
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    BOOL v4 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v4();
  }
  return result;
}

uint64_t sub_100C2744C(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v2 = *(void **)(a1 + 832);
  uint64_t v3 = (void *)(a1 + 840);
  if (v2 == (void *)(a1 + 840)) {
    return 0;
  }
  char v4 = *((unsigned char *)a2 + 23);
  if (v4 >= 0) {
    CFDictionaryRef v5 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
  }
  else {
    CFDictionaryRef v5 = a2[1];
  }
  if (v4 >= 0) {
    uint64_t v6 = (unsigned __int8 *)a2;
  }
  else {
    uint64_t v6 = *a2;
  }
  while (1)
  {
    uint64_t v7 = *((unsigned __int8 *)v2 + 127);
    if ((v7 & 0x80u) == 0) {
      std::string::size_type v8 = (unsigned __int8 *)*((unsigned __int8 *)v2 + 127);
    }
    else {
      std::string::size_type v8 = (unsigned __int8 *)v2[14];
    }
    if (v8 != v5) {
      goto LABEL_19;
    }
    uint64_t v9 = (const void **)(v2 + 13);
    if ((v7 & 0x80) != 0) {
      break;
    }
    if (!*((unsigned char *)v2 + 127)) {
      return 1;
    }
    for (uint64_t i = v6; *(unsigned __int8 *)v9 == *i; ++i)
    {
      uint64_t v9 = (const void **)((char *)v9 + 1);
      if (!--v7) {
        return 1;
      }
    }
LABEL_19:
    uint64_t v11 = (void *)v2[1];
    if (v11)
    {
      do
      {
        uint64_t v12 = v11;
        uint64_t v11 = (void *)*v11;
      }
      while (v11);
    }
    else
    {
      do
      {
        uint64_t v12 = (void *)v2[2];
        BOOL v13 = *v12 == (void)v2;
        uint64_t v2 = v12;
      }
      while (!v13);
    }
    uint64_t v2 = v12;
    if (v12 == v3) {
      return 0;
    }
  }
  if (memcmp(*v9, v6, v2[14])) {
    goto LABEL_19;
  }
  return 1;
}

void sub_100C2753C(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = a1[5];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v8 = *(unsigned __int8 *)(a2 + 23);
    BOOL v9 = (v8 & 0x80u) != 0;
    unint64_t v10 = *(const char **)a2;
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(a2 + 8);
    }
    if (!v9) {
      unint64_t v10 = (const char *)a2;
    }
    if (v8) {
      uint64_t v11 = v10;
    }
    else {
      uint64_t v11 = "<invalid>";
    }
    LODWORD(v12[0]) = 136315650;
    *(void **)((char *)v12 + 4) = "";
    WORD2(v12[1]) = 2080;
    *(void **)((char *)&v12[1] + 6) = "";
    HIWORD(v12[2]) = 2080;
    v12[3] = (void *)v11;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#D %s%sgetLocalizedSimLabel, %s", (uint8_t *)v12, 0x20u);
  }
  uint64_t v17 = 0;
  long long v15 = 0u;
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  *(_OWORD *)long long v14 = 0u;
  memset(v12, 0, sizeof(v12));
  (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 176))(v12, a1, a2);
  uint64_t v7 = (void *)BYTE7(v15);
  if (SBYTE7(v15) < 0) {
    uint64_t v7 = v14[1];
  }
  if (v7)
  {
    (*(void (**)(void *, void **))(*a1 + 152))(a1, v12);
  }
  else
  {
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 57) = 0u;
  }
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SBYTE7(v15) < 0) {
    operator delete(v14[0]);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[3]);
  }
  if (SHIBYTE(v12[2]) < 0) {
    operator delete(v12[0]);
  }
}

void sub_100C27718(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C27734(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEBUG))
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    BOOL v10 = (v9 & 0x80u) != 0;
    uint64_t v11 = *(const char **)a2;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (!v10) {
      uint64_t v11 = (const char *)a2;
    }
    if (v9) {
      uint64_t v12 = v11;
    }
    else {
      uint64_t v12 = "<invalid>";
    }
    int v13 = 136315650;
    long long v14 = "";
    __int16 v15 = 2080;
    uint8_t v16 = "";
    __int16 v17 = 2080;
    uint8_t v18 = v12;
    _os_log_debug_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEBUG, "#D %s%sgetRawSimLabel, %s", (uint8_t *)&v13, 0x20u);
  }
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a2 + 8);
  }
  if (v7 && *(unsigned char *)(a1 + 1000) && (uint64_t v8 = sub_100046F68(a1 + 976, (void **)a2), (void **)(a1 + 984) != v8))
  {
    sub_10023C008(a3, (uint64_t)(v8 + 7));
  }
  else
  {
    *(void *)(a3 + 80) = 0;
    *(void *)(a3 + 88) = 0;
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)(a3 + 57) = 0u;
  }
  std::mutex::unlock((std::mutex *)(a1 + 880));
}

void sub_100C2789C(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C278B8(uint64_t a1, uint64_t a2)
{
  char v4 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (v5 && *(unsigned char *)(a1 + 1000) && (void **)(a1 + 984) != sub_100046F68(a1 + 976, (void **)a2))
  {
    CFDictionaryRef theDict = 0;
    (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 120) + 24))(&v15);
    sub_10004EFE4(&theDict, &v15);
    sub_1000577C4(&v15);
    if (theDict) {
      uint64_t v6 = sub_100080778;
    }
    else {
      uint64_t v6 = 0;
    }
    if (v6)
    {
      CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"type");
      CFStringRef v8 = Value;
      if (Value)
      {
        CFTypeID v9 = CFGetTypeID(Value);
        if (v9 == CFStringGetTypeID() && CFEqual(v8, @"sim"))
        {
          CFBooleanRef v12 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"no_src");
          CFBooleanRef v13 = v12;
          if (!v12 || (CFTypeID v14 = CFGetTypeID(v12), v14 != CFBooleanGetTypeID()) || !CFBooleanGetValue(v13))
          {
            sub_100057D78((const void **)&theDict);
            uint64_t v10 = 1;
            goto LABEL_15;
          }
        }
      }
    }
    sub_100057D78((const void **)&theDict);
  }
  uint64_t v10 = 0;
LABEL_15:
  std::mutex::unlock(v4);
  return v10;
}

void sub_100C27A54(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  std::mutex::unlock(v2);
  _Unwind_Resume(a1);
}

void sub_100C27A90(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 8) = 0;
  char v4 = (uint64_t *)(a2 + 8);
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = a2 + 8;
  uint64_t v5 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  if (*(unsigned char *)(a1 + 1000))
  {
    uint64_t v6 = *(void **)(a1 + 976);
    if (v6 != (void *)(a1 + 984))
    {
      do
      {
        CFDictionaryRef theDict = 0;
        (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
        sub_10004EFE4(&theDict, (CFTypeRef *)buf);
        sub_1000577C4((const void **)buf);
        if (theDict) {
          uint64_t v7 = sub_100080778;
        }
        else {
          uint64_t v7 = 0;
        }
        if (v7)
        {
          CFStringRef Value = (const __CFString *)CFDictionaryGetValue(theDict, @"type");
          CFStringRef v9 = Value;
          if (Value)
          {
            CFTypeID v10 = CFGetTypeID(Value);
            if (v10 == CFStringGetTypeID() && CFEqual(v9, @"sim"))
            {
              CFBooleanRef v11 = (const __CFBoolean *)CFDictionaryGetValue(theDict, @"no_src");
              CFBooleanRef v12 = v11;
              if (!v11 || (CFTypeID v13 = CFGetTypeID(v11), v13 != CFBooleanGetTypeID()) || !CFBooleanGetValue(v12))
              {
                __p[0] = 0;
                __p[1] = 0;
                uint64_t v27 = 0;
                CFDictionaryGetValue(theDict, @"mdn");
                memset(buf, 0, sizeof(buf));
                ctu::cf::assign();
                *(_OWORD *)std::string __p = *(_OWORD *)buf;
                uint64_t v27 = *(void *)&buf[16];
                uint64_t v14 = *(void *)&buf[8];
                uint8_t v15 = buf[23];
                if ((buf[23] & 0x80u) == 0) {
                  uint64_t v14 = HIBYTE(*(void *)&buf[16]);
                }
                if (v14)
                {
                  sub_1000EA6A0((uint64_t **)a2, __p, (uint64_t)__p);
                  uint8_t v15 = HIBYTE(v27);
                }
                if ((v15 & 0x80) != 0) {
                  operator delete(__p[0]);
                }
              }
            }
          }
        }
        sub_100057D78((const void **)&theDict);
        uint8_t v16 = (void *)v6[1];
        if (v16)
        {
          do
          {
            __int16 v17 = v16;
            uint8_t v16 = (void *)*v16;
          }
          while (v16);
        }
        else
        {
          do
          {
            __int16 v17 = (void *)v6[2];
            BOOL v18 = *v17 == (void)v6;
            uint64_t v6 = v17;
          }
          while (!v18);
        }
        uint64_t v6 = v17;
      }
      while (v17 != (void *)(a1 + 984));
    }
  }
  CFStringRef v19 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint8_t v20 = *(void **)(a2 + 16);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2048;
    int v30 = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%s--- %zu MDNs from present labeled SIMs --", buf, 0x20u);
  }
  uint64_t v21 = *(uint64_t **)a2;
  if (*(uint64_t **)a2 != v4)
  {
    do
    {
      BOOL v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = v21 + 4;
        if (*((char *)v21 + 55) < 0) {
          uint64_t v23 = (void *)*v23;
        }
        *(_DWORD *)std::string buf = 136315650;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2080;
        int v30 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s", buf, 0x20u);
      }
      uint64_t v24 = (uint64_t *)v21[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          uint64_t v24 = (uint64_t *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (uint64_t *)v21[2];
          BOOL v18 = *v25 == (void)v21;
          uint64_t v21 = v25;
        }
        while (!v18);
      }
      uint64_t v21 = v25;
    }
    while (v25 != v4);
  }
  std::mutex::unlock(v5);
}

void sub_100C27E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a17);
  std::mutex::unlock(v23);
  sub_10005CD2C(v24, *(char **)(v24 + 8));
  _Unwind_Resume(a1);
}

void sub_100C27EAC(uint64_t *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = *(long long **)(a2 + 832);
  uint64_t v3 = (long long *)(a2 + 840);
  if (v2 != (long long *)(a2 + 840))
  {
    uint64_t v6 = (uint64_t)(a1 + 2);
    do
    {
      if (sub_100C25A74(a2))
      {
        sub_100C31AD0((uint64_t)v18, v2 + 2, (uint64_t)v2 + 56);
        unint64_t v8 = a1[1];
        unint64_t v7 = a1[2];
        if (v8 >= v7)
        {
          unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v8 - *a1) >> 3);
          unint64_t v11 = v10 + 1;
          if (v10 + 1 > 0x1E1E1E1E1E1E1E1) {
            sub_10006A748();
          }
          unint64_t v12 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v7 - *a1) >> 3);
          if (2 * v12 > v11) {
            unint64_t v11 = 2 * v12;
          }
          if (v12 >= 0xF0F0F0F0F0F0F0) {
            unint64_t v13 = 0x1E1E1E1E1E1E1E1;
          }
          else {
            unint64_t v13 = v11;
          }
          uint64_t v32 = v6;
          if (v13) {
            uint64_t v14 = (char *)sub_100320E18(v6, v13);
          }
          else {
            uint64_t v14 = 0;
          }
          int v28 = v14;
          __int16 v29 = &v14[136 * v10];
          uint64_t v30 = (uint64_t)v29;
          CFTypeID v31 = &v14[136 * v13];
          sub_100C31864((uint64_t)v29, (uint64_t)v18);
          v30 += 136;
          sub_100C31910(a1, &v28);
          uint64_t v9 = a1[1];
          sub_100C31A80((uint64_t)&v28);
        }
        else
        {
          sub_100C31864(a1[1], (uint64_t)v18);
          uint64_t v9 = v8 + 136;
          a1[1] = v9;
        }
        a1[1] = v9;
        if (v27 < 0) {
          operator delete(__p);
        }
        if (v25 < 0) {
          operator delete(v24);
        }
        if (v23 < 0) {
          operator delete(v22);
        }
        if (v21 < 0) {
          operator delete(v20);
        }
        if (v19 < 0) {
          operator delete(v18[0]);
        }
      }
      uint8_t v15 = (long long *)*((void *)v2 + 1);
      if (v15)
      {
        do
        {
          uint8_t v16 = v15;
          uint8_t v15 = *(long long **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          uint8_t v16 = (long long *)*((void *)v2 + 2);
          BOOL v17 = *(void *)v16 == (void)v2;
          uint64_t v2 = v16;
        }
        while (!v17);
      }
      uint64_t v2 = v16;
    }
    while (v16 != v3);
  }
}

void sub_100C280A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C280F0((uint64_t)va);
  sub_100320504((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C280F0(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100C28164(uint64_t a1, long long **a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * (((char *)a2[1] - (char *)*a2) >> 3);
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2048;
    uint64_t v22 = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAllEndUserSimLabelsLocalized, %zu to exclude", buf, 0x20u);
  }
  *(void *)std::string buf = a1;
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  uint64_t v22 = 0;
  unint64_t v8 = *a2;
  uint64_t v9 = a2[1];
  uint8_t v15 = &buf[8];
  if (v9 != v8)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * (((char *)v9 - (char *)v8) >> 3);
    uint64_t v16 = 0;
    if (v10 >= 0xAAAAAAAAAAAAAABLL) {
      sub_10006A748();
    }
    *(void *)&uint8_t buf[8] = sub_10004812C((uint64_t)&v22, v10);
    *(void *)&uint8_t buf[16] = *(void *)&buf[8];
    uint64_t v22 = *(void *)&buf[8] + 24 * v11;
    uint64_t v19 = *(void *)&buf[8];
    uint64_t v20 = *(void *)&buf[8];
    v17[0] = &v22;
    v17[1] = &v19;
    v17[2] = &v20;
    uint64_t v18 = 0;
    uint64_t v12 = *(void *)&buf[8];
    do
    {
      if (*((char *)v8 + 23) < 0)
      {
        sub_10004FC84((unsigned char *)v12, *(void **)v8, *((void *)v8 + 1));
        uint64_t v12 = v20;
      }
      else
      {
        long long v13 = *v8;
        *(void *)(v12 + 16) = *((void *)v8 + 2);
        *(_OWORD *)uint64_t v12 = v13;
      }
      unint64_t v8 = (long long *)((char *)v8 + 24);
      v12 += 24;
      uint64_t v20 = v12;
    }
    while (v8 != v9);
    LOBYTE(v18) = 1;
    sub_100601970((uint64_t)v17);
    *(void *)&uint8_t buf[16] = v12;
  }
  sub_100C3B6EC((uint64_t)&v23, a3);
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    if (std::__shared_weak_count::lock(v14)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C28420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2845C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  v5[2] = sub_100C3D7EC;
  v5[3] = &unk_101A490F8;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100C3D94C;
    unint64_t v10 = &unk_101A49138;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    *a2 = 0;
    a2[1] = 0;
    a2[2] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100C3D8DC;
    unint64_t v10 = &unk_101A49118;
    uint64_t v11 = a2;
    uint64_t v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_100C28580(uint64_t a1@<X0>, long long *a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  uint64_t v7 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v9 = *((void *)a2 + 2);
  }
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  v10[2] = sub_100C3D9BC;
  void v10[3] = &unk_101A49158;
  void v10[4] = v5;
  v10[5] = &v7;
  uint64_t v11 = v10;
  uint64_t v6 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v13 = 0x40000000;
    uint64_t v14 = sub_100C3DDE4;
    uint8_t v15 = &unk_101A49198;
    uint64_t v16 = a3;
    BOOL v17 = &v11;
    dispatch_async_and_wait(v6, &block);
  }
  else
  {
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v13 = 0x40000000;
    uint64_t v14 = sub_100C3DD0C;
    uint8_t v15 = &unk_101A49178;
    uint64_t v16 = a3;
    BOOL v17 = &v11;
    dispatch_sync(v6, &block);
  }
  if (SHIBYTE(v9) < 0) {
    operator delete((void *)__p);
  }
}

void sub_100C28718(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, long long *a4@<X3>, char a5@<W4>, uint64_t a6@<X8>)
{
  uint64_t v12 = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&v13, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v13 = *a2;
    uint64_t v14 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v15, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v15 = *a3;
    uint64_t v16 = *((void *)a3 + 2);
  }
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long __p = *a4;
    uint64_t v18 = *((void *)a4 + 2);
  }
  char v19 = a5;
  v20[0] = _NSConcreteStackBlock;
  v20[1] = 0x40000000;
  v20[2] = sub_100C3DEBC;
  v20[3] = &unk_101A491B8;
  v20[4] = a1 + 8;
  v20[5] = &v12;
  char v21 = v20;
  uint64_t v11 = *(NSObject **)(a1 + 24);
  if (*(void *)(a1 + 32))
  {
    *(void *)(a6 + 96) = 0;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100C3DDE4;
    char v25 = &unk_101A49198;
    uint64_t v26 = a6;
    char v27 = &v21;
    dispatch_async_and_wait(v11, &block);
  }
  else
  {
    *(void *)(a6 + 96) = 0;
    *(_OWORD *)(a6 + 64) = 0u;
    *(_OWORD *)(a6 + 80) = 0u;
    *(_OWORD *)(a6 + 32) = 0u;
    *(_OWORD *)(a6 + 48) = 0u;
    *(_OWORD *)a6 = 0u;
    *(_OWORD *)(a6 + 16) = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v23 = 0x40000000;
    uint64_t v24 = sub_100C3DD0C;
    char v25 = &unk_101A49178;
    uint64_t v26 = a6;
    char v27 = &v21;
    dispatch_sync(v11, &block);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)v15);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)v13);
  }
}

void sub_100C28940(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C28974(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    v6[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C28B24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C28B48(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C28CB0(uint64_t a1, uint64_t a2, BOOL a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    BOOL v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v8) {
      uint64_t v9 = *(const char **)a2;
    }
    else {
      uint64_t v9 = (const char *)a2;
    }
    if (v7) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    char v27 = v10;
    __int16 v28 = 2080;
    uint64_t v29 = asStringBool(a3);
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%smarkDidSetup, %s -> %s", buf, 0x2Au);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
  if ((v11 & 0x80u) != 0) {
    uint64_t v11 = *(void *)(a2 + 8);
  }
  if (v11)
  {
    unint64_t v12 = sub_100C31B40((uint64_t *)buf, (long long *)a2);
    *(void *)&uint8_t buf[8] = v12;
  }
  else
  {
    long long v13 = *(uint64_t ***)(a1 + 608);
    uint64_t v14 = *v13;
    long long v15 = v13[1];
    if (*v13 == v15)
    {
      unint64_t v12 = 0;
    }
    else
    {
      unint64_t v12 = 0;
      do
      {
        uint64_t v16 = *v14;
        if (!*(unsigned char *)(*v14 + 49))
        {
          BOOL v17 = (long long *)(v16 + 24);
          if (v12 >= *(void *)&buf[16])
          {
            unint64_t v12 = sub_100C31B40((uint64_t *)buf, v17);
          }
          else
          {
            if (*(char *)(v16 + 47) < 0)
            {
              sub_10004FC84((unsigned char *)v12, *(void **)(v16 + 24), *(void *)(v16 + 32));
            }
            else
            {
              long long v18 = *v17;
              *(void *)(v12 + 16) = *(void *)(v16 + 40);
              *(_OWORD *)unint64_t v12 = v18;
            }
            v12 += 24;
          }
          *(void *)&uint8_t buf[8] = v12;
        }
        v14 += 2;
      }
      while (v14 != v15);
    }
  }
  char v19 = *(void ***)buf;
  if (*(void *)buf != v12)
  {
    do
    {
      uint64_t v20 = sub_100046F68(a1 + 832, v19);
      if ((void **)(a1 + 840) != v20) {
        *((unsigned char *)v20 + 128) = a3;
      }
      v19 += 3;
    }
    while (v19 != (void **)v12);
    uint64_t v21 = *(void *)buf;
    uint64_t v22 = *(void *)&buf[8];
    if (*(void *)buf != *(void *)&buf[8])
    {
      uint64_t v23 = &kCFBooleanTrue;
      if (!a3) {
        uint64_t v23 = &kCFBooleanFalse;
      }
      CFBooleanRef v24 = *v23;
      do
      {
        (*(void (**)(void, uint64_t, const __CFString *, CFBooleanRef, const __CFString *, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v21, @"label-id-confirmed", v24, @"info", 0, 0, 0);
        v21 += 24;
      }
      while (v21 != v22);
    }
  }
  char v25 = buf;
  sub_100047F64((void ***)&v25);
}

void sub_100C28F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  sub_100047F64(&a10);
  _Unwind_Resume(a1);
}

std::string *sub_100C28F78(std::string *__dst, std::string *__str)
{
  if (__dst[2].__r_.__value_.__s.__data_[0])
  {
    std::string::operator=(__dst, __str);
    p_data = (void **)&__dst[1].__r_.__value_.__l.__data_;
    if (SHIBYTE(__dst[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(*p_data);
    }
    long long v5 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    __dst[1].__r_.__value_.__r.__words[2] = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)p_data = v5;
    *((unsigned char *)&__str[1].__r_.__value_.__s + 23) = 0;
    __str[1].__r_.__value_.__s.__data_[0] = 0;
  }
  else
  {
    if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(__dst, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v6 = *(_OWORD *)&__str->__r_.__value_.__l.__data_;
      __dst->__r_.__value_.__r.__words[2] = __str->__r_.__value_.__r.__words[2];
      *(_OWORD *)&__dst->__r_.__value_.__l.__data_ = v6;
    }
    long long v7 = *(_OWORD *)&__str[1].__r_.__value_.__l.__data_;
    __dst[1].__r_.__value_.__r.__words[2] = __str[1].__r_.__value_.__r.__words[2];
    *(_OWORD *)&__dst[1].__r_.__value_.__l.__data_ = v7;
    __str[1].__r_.__value_.__l.__size_ = 0;
    __str[1].__r_.__value_.__r.__words[2] = 0;
    __str[1].__r_.__value_.__r.__words[0] = 0;
    __dst[2].__r_.__value_.__s.__data_[0] = 1;
  }
  return __dst;
}

void sub_100C29034(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v10 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    BOOL v12 = (v11 & 0x80u) != 0;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    if (v12) {
      long long v13 = *(const char **)a3;
    }
    else {
      long long v13 = (const char *)a3;
    }
    *(_DWORD *)std::string buf = 136315650;
    if (v11) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = "<invalid>";
    }
    *(void *)&uint8_t buf[4] = "";
    __int16 v18 = 2080;
    char v19 = "";
    __int16 v20 = 2080;
    uint64_t v21 = v14;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%screating super label for %s", buf, 0x20u);
  }
  sub_100058DB0(buf, "");
  sub_100058DB0(__p, "");
  sub_100C298EC(a1, a2, a3, (long long *)buf, (long long *)__p, a4, a5);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v20) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100C29194(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C291D0(uint64_t a1, uint64_t a2, uint64_t a3, const std::string *a4, const std::string *a5, int a6)
{
  *(void *)std::string buf = a3;
  BOOL v12 = sub_100C3B444((uint64_t **)(a2 + 832), (void **)a3, (long long **)buf);
  std::string::operator=((std::string *)(v12 + 7), a4);
  std::string::operator=((std::string *)(v12 + 10), a5);
  *((unsigned char *)v12 + 128) = a6;
  long long v13 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v14 = (const __CFString *)(v12 + 13);
    if (*((char *)v12 + 127) < 0) {
      CFStringRef v14 = (const __CFString *)v14->isa;
    }
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v15 = a4;
    }
    else {
      long long v15 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v16 = a5;
    }
    else {
      char v16 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    uint64_t v17 = *(unsigned __int8 *)(a3 + 23);
    BOOL v18 = (v17 & 0x80u) != 0;
    if ((v17 & 0x80u) != 0) {
      uint64_t v17 = *(void *)(a3 + 8);
    }
    if (v18) {
      char v19 = *(const char **)a3;
    }
    else {
      char v19 = (const char *)a3;
    }
    if (v17) {
      __int16 v20 = v19;
    }
    else {
      __int16 v20 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    CFStringRef v55 = v14;
    __int16 v56 = 2080;
    uint64_t v57 = v15;
    __int16 v58 = 2080;
    uint64_t v59 = v16;
    __int16 v60 = 2080;
    BOOL v61 = v20;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s%supdateLabelText, %s <- text:%s (tag:%s) : belongs to %s", buf, 0x3Eu);
  }
  uint64_t v21 = operator new(8uLL);
  uint64_t v38 = a1;
  CFDictionaryRef theDict = 0;
  size_t v46 = v21;
  void *v21 = @"unique-sim-label-store";
  uint64_t v48 = v21 + 1;
  uint64_t v47 = v21 + 1;
  uint64_t v23 = (const __CFString **)(v12 + 13);
  CFBooleanRef v24 = (__CFString *)(v12 + 13);
  if (*((char *)v12 + 127) < 0) {
    CFBooleanRef v24 = (__CFString *)*v23;
  }
  sub_1000838B0(*(os_unfair_lock_s **)(a2 + 104), (const __CFString **)v24, (char **)&v46, 0, v22, buf);
  CFDictionaryRef v25 = *(const __CFDictionary **)buf;
  if (*(void *)buf && (CFTypeID v26 = CFGetTypeID(*(CFTypeRef *)buf), v26 == CFDictionaryGetTypeID()))
  {
    CFDictionaryRef theDict = v25;
    CFRetain(v25);
  }
  else
  {
    CFDictionaryRef theDict = 0;
  }
  sub_1000577C4((const void **)buf);
  CFMutableDictionaryRef v44 = 0;
  if (theDict) {
    char v27 = sub_1000C06D0;
  }
  else {
    char v27 = 0;
  }
  if (v27)
  {
    CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
LABEL_35:
    CFMutableDictionaryRef v31 = v44;
    CFMutableDictionaryRef v44 = MutableCopy;
    *(void *)std::string buf = v31;
    sub_10005717C((const void **)buf);
    goto LABEL_36;
  }
  uint64_t v29 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
  {
    CFStringRef v30 = (const __CFString *)(v12 + 13);
    if (*((char *)v12 + 127) < 0) {
      CFStringRef v30 = *v23;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    CFStringRef v55 = v30;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#W %s%supdateLabelText called for missing labelID %s", buf, 0x20u);
  }
  CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (MutableCopy) {
    goto LABEL_35;
  }
LABEL_36:
  uint64_t v32 = v44;
  if (SHIBYTE(a4->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(__dst, a4->__r_.__value_.__l.__data_, a4->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)&a4->__r_.__value_.__l.__data_;
    std::string::size_type v42 = a4->__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v42) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    std::string::size_type v51 = v42;
  }
  int v49 = 0;
  if (SHIBYTE(v51) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v51;
  }
  uint64_t v52 = 0;
  if (ctu::cf::convert_copy())
  {
    int v33 = v49;
    int v49 = v52;
    int v53 = v33;
    sub_1000558F4(&v53);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  BOOL value = v49;
  int v49 = 0;
  sub_1000558F4((const void **)&v49);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  CFDictionarySetValue(v32, @"text", value);
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v42) < 0) {
    operator delete(__dst[0]);
  }
  int v34 = v44;
  if (SHIBYTE(a5->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(v39, a5->__r_.__value_.__l.__data_, a5->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)&a5->__r_.__value_.__l.__data_;
    std::string::size_type v40 = a5->__r_.__value_.__r.__words[2];
  }
  if (SHIBYTE(v40) < 0)
  {
    sub_10004FC84(__p, v39[0], (unint64_t)v39[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v39;
    std::string::size_type v51 = v40;
  }
  int v49 = 0;
  if (SHIBYTE(v51) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)std::string buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v51;
  }
  uint64_t v52 = 0;
  if (ctu::cf::convert_copy())
  {
    __int16 v35 = v49;
    int v49 = v52;
    int v53 = v35;
    sub_1000558F4(&v53);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v36 = v49;
  BOOL value = v49;
  int v49 = 0;
  sub_1000558F4((const void **)&v49);
  if (SHIBYTE(v51) < 0) {
    operator delete(__p[0]);
  }
  CFDictionarySetValue(v34, @"tag", v36);
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v40) < 0) {
    operator delete(v39[0]);
  }
  if (*((char *)v12 + 127) < 0) {
    uint64_t v23 = (const __CFString **)*v23;
  }
  sub_1000837C0(*(os_unfair_lock_s **)(a2 + 104), v23, v44, (char **)&v46, 0, 0, 0);
  BOOL v37 = &kCFBooleanTrue;
  if (!a6) {
    BOOL v37 = &kCFBooleanFalse;
  }
  (*(void (**)(void, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(a2 + 120) + 16))(*(void *)(a2 + 120), a3, @"label-id-confirmed", *v37, @"info", 0, 0, 0);
  sub_10023C008(v38, (uint64_t)(v12 + 7));
  sub_10005717C((const void **)&v44);
  sub_10005717C((const void **)&theDict);
  if (v46)
  {
    uint64_t v47 = v46;
    operator delete(v46);
  }
}

void sub_100C297C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,uint64_t a35,char a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,void *a46,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C298EC(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, long long *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = *(void *)(a2 + 608);
  long long v15 = *(void **)v14;
  char v16 = *(void **)(v14 + 8);
  if (*(void **)v14 == v16) {
    goto LABEL_8;
  }
  while (!sub_10001D294((unsigned __int8 *)(*v15 + 24), (unsigned __int8 *)a3))
  {
    v15 += 2;
    if (v15 == v16)
    {
      long long v15 = v16;
      break;
    }
  }
  if (v15 == *(void **)(v14 + 8))
  {
LABEL_8:
    uint64_t v17 = 0;
  }
  else
  {
    uint64_t v17 = *v15;
    uint64_t v18 = v15[1];
    if (v18)
    {
      __int16 v58 = (std::__shared_weak_count *)v15[1];
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
      goto LABEL_10;
    }
  }
  __int16 v58 = 0;
LABEL_10:
  long long __dst = 0uLL;
  uint64_t v72 = 0;
  if (!*(unsigned char *)(a7 + 24))
  {
    if (!v17) {
      goto LABEL_18;
    }
    a7 = v17 + 72;
    if (*(char *)(v17 + 95) < 0)
    {
      char v19 = (unint64_t *)(v17 + 80);
      goto LABEL_17;
    }
LABEL_15:
    long long __dst = *(_OWORD *)a7;
    uint64_t v72 = *(void *)(a7 + 16);
    goto LABEL_18;
  }
  if ((*(char *)(a7 + 23) & 0x80000000) == 0) {
    goto LABEL_15;
  }
  char v19 = (unint64_t *)(a7 + 8);
LABEL_17:
  sub_10004FC84(&__dst, *(void **)a7, *v19);
LABEL_18:
  *(void *)(a1 + 96) = 0;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  if (*(unsigned char *)(a6 + 24))
  {
    if (*(char *)(a6 + 23) < 0)
    {
      sub_10004FC84(buf, *(void **)a6, *(void *)(a6 + 8));
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)a6;
      *(void *)&uint8_t buf[16] = *(void *)(a6 + 16);
    }
  }
  else
  {
    sub_100C13B78((uint64_t)buf);
  }
  sub_100C31734((char *)a1, (long long *)buf, a4, a5, 0, &__dst);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  __int16 v20 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    CFAllocatorRef v22 = *(const char **)a3;
    uint64_t v23 = *(void *)(a3 + 8);
    asString();
    if ((v21 & 0x80u) == 0) {
      uint64_t v24 = v21;
    }
    else {
      uint64_t v24 = v23;
    }
    if ((v21 & 0x80u) == 0) {
      CFDictionaryRef v25 = (const char *)a3;
    }
    else {
      CFDictionaryRef v25 = v22;
    }
    CFTypeID v26 = (void **)__p[0];
    *(_DWORD *)std::string buf = 136315906;
    if (!v24) {
      CFDictionaryRef v25 = "<invalid>";
    }
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    if ((SBYTE7(v70) & 0x80u) == 0) {
      CFTypeID v26 = __p;
    }
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v79 = (void *)v25;
    __int16 v80 = 2080;
    BOOL v81 = v26;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%screateNewLabel, %s <- %s", buf, 0x2Au);
    if (SBYTE7(v70) < 0) {
      operator delete(__p[0]);
    }
  }
  long long v70 = 0u;
  *(_OWORD *)long long __p = 0u;
  char v27 = sub_100046F68(a2 + 832, (void **)a3);
  if ((void **)(a2 + 840) != v27)
  {
    sub_100093B44((std::string *)__p, (const std::string *)(v27 + 13));
    __int16 v28 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v29 = __p;
      if (SBYTE7(v70) < 0) {
        uint64_t v29 = (void **)__p[0];
      }
      uint64_t v30 = *(unsigned __int8 *)(a3 + 23);
      BOOL v31 = (v30 & 0x80u) != 0;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *(void *)(a3 + 8);
      }
      if (v31) {
        uint64_t v32 = *(const char **)a3;
      }
      else {
        uint64_t v32 = (const char *)a3;
      }
      if (v30) {
        int v33 = v32;
      }
      else {
        int v33 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v79 = v29;
      __int16 v80 = 2080;
      BOOL v81 = (void *)v33;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#W %s%slabel '%s' was assigned to %s. Will be destroyed", buf, 0x2Au);
    }
  }
  *(void *)std::string buf = a3;
  int v34 = sub_100C3B444((uint64_t **)(a2 + 832), (void **)a3, (long long **)buf);
  std::string::operator=((std::string *)(v34 + 7), (const std::string *)a1);
  __int16 v35 = (void **)(a1 + 24);
  std::string::operator=((std::string *)(v34 + 10), (const std::string *)(a1 + 24));
  std::string::operator=((std::string *)(v34 + 13), (const std::string *)(a1 + 48));
  *((unsigned char *)v34 + 128) = *(unsigned char *)(a1 + 72);
  std::string::operator=((std::string *)(v34 + 17), (const std::string *)(a1 + 80));
  int v68 = 0;
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10004FC84(v66, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)uint64_t v66 = *(_OWORD *)(a1 + 48);
    uint64_t v67 = *(void *)(a1 + 64);
  }
  if (SHIBYTE(v67) < 0)
  {
    sub_10004FC84(&v74, v66[0], (unint64_t)v66[1]);
  }
  else
  {
    long long v74 = *(_OWORD *)v66;
    uint64_t v75 = v67;
  }
  uint64_t v73 = 0;
  if (SHIBYTE(v75) < 0)
  {
    sub_10004FC84(buf, (void *)v74, *((unint64_t *)&v74 + 1));
  }
  else
  {
    *(_OWORD *)std::string buf = v74;
    *(void *)&uint8_t buf[16] = v75;
  }
  BOOL v76 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v36 = v73;
    uint64_t v73 = v76;
    char v77 = v36;
    sub_1000558F4((const void **)&v77);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  int v68 = v73;
  uint64_t v73 = 0;
  sub_1000558F4((const void **)&v73);
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  if (SHIBYTE(v67) < 0) {
    operator delete(v66[0]);
  }
  CFMutableDictionaryRef theDict = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v38 = theDict;
    CFMutableDictionaryRef theDict = Mutable;
    *(void *)std::string buf = v38;
    sub_10005717C((const void **)buf);
  }
  uint64_t v39 = theDict;
  if (*(char *)(a1 + 23) < 0)
  {
    sub_10004FC84(v62, *(void **)a1, *(void *)(a1 + 8));
  }
  else
  {
    *(_OWORD *)BOOL v62 = *(_OWORD *)a1;
    uint64_t v63 = *(void *)(a1 + 16);
  }
  if (SHIBYTE(v63) < 0)
  {
    sub_10004FC84(&v74, v62[0], (unint64_t)v62[1]);
  }
  else
  {
    long long v74 = *(_OWORD *)v62;
    uint64_t v75 = v63;
  }
  uint64_t v73 = 0;
  if (SHIBYTE(v75) < 0)
  {
    sub_10004FC84(buf, (void *)v74, *((unint64_t *)&v74 + 1));
  }
  else
  {
    *(_OWORD *)std::string buf = v74;
    *(void *)&uint8_t buf[16] = v75;
  }
  BOOL v76 = 0;
  if (ctu::cf::convert_copy())
  {
    std::string::size_type v40 = v73;
    uint64_t v73 = v76;
    char v77 = v40;
    sub_1000558F4((const void **)&v77);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  BOOL value = v73;
  uint64_t v73 = 0;
  sub_1000558F4((const void **)&v73);
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  CFDictionaryAddValue(v39, @"text", value);
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v63) < 0) {
    operator delete(v62[0]);
  }
  if (*(char *)(a1 + 47) < 0)
  {
    unint64_t v42 = *(void *)(a1 + 32);
    if (!v42) {
      goto LABEL_106;
    }
    uint64_t v41 = theDict;
    sub_10004FC84(v60, *v35, v42);
  }
  else
  {
    if (!*(unsigned char *)(a1 + 47)) {
      goto LABEL_106;
    }
    uint64_t v41 = theDict;
    *(_OWORD *)__int16 v60 = *(_OWORD *)v35;
    uint64_t v61 = *(void *)(a1 + 40);
  }
  if (SHIBYTE(v61) < 0)
  {
    sub_10004FC84(&v74, v60[0], (unint64_t)v60[1]);
  }
  else
  {
    long long v74 = *(_OWORD *)v60;
    uint64_t v75 = v61;
  }
  uint64_t v73 = 0;
  if (SHIBYTE(v75) < 0)
  {
    sub_10004FC84(buf, (void *)v74, *((unint64_t *)&v74 + 1));
  }
  else
  {
    *(_OWORD *)std::string buf = v74;
    *(void *)&uint8_t buf[16] = v75;
  }
  BOOL v76 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v43 = v73;
    uint64_t v73 = v76;
    char v77 = v43;
    sub_1000558F4((const void **)&v77);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  BOOL value = v73;
  uint64_t v73 = 0;
  sub_1000558F4((const void **)&v73);
  if (SHIBYTE(v75) < 0) {
    operator delete((void *)v74);
  }
  CFDictionaryAddValue(v41, @"tag", value);
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v61) < 0) {
    operator delete(v60[0]);
  }
LABEL_106:
  uint64_t v73 = 0;
  if (*(unsigned char *)(a6 + 24))
  {
    CFMutableDictionaryRef v44 = v68;
    long long v45 = operator new(0x10uLL);
    *(void *)&uint8_t buf[8] = v45 + 2;
    *(void *)&uint8_t buf[16] = v45 + 2;
    *long long v45 = @"unique-sim-label-store";
    v45[1] = v44;
    *(void *)std::string buf = v45;
    sub_100083254(*(os_unfair_lock_s **)(a2 + 104), @"ts", 0, (char **)buf, 0, &cf);
    char v77 = (void *)cf;
    if (cf) {
      CFRetain(cf);
    }
    BOOL v76 = 0;
    *(void *)&long long v74 = 0;
    sub_1000842D0(&v74, (CFTypeRef *)&v77);
    if ((void)v74) {
      size_t v46 = sub_100081E58;
    }
    else {
      size_t v46 = 0;
    }
    if (v46) {
      sub_1001AA2BC((const void **)&v76, (const void **)&v74);
    }
    sub_1000570E8((const void **)&v74);
    BOOL value = v76;
    BOOL v76 = 0;
    sub_1000570E8((const void **)&v76);
    sub_1000577C4((const void **)&v77);
    uint64_t v47 = v73;
    uint64_t v73 = value;
    *(void *)&long long v74 = v47;
    BOOL value = 0;
    sub_1000570E8((const void **)&v74);
    sub_1000570E8((const void **)&value);
    sub_1000577C4(&cf);
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    uint64_t v48 = v73;
  }
  else
  {
    uint64_t v48 = 0;
  }
  if (v48) {
    int v49 = sub_100081E58;
  }
  else {
    int v49 = 0;
  }
  if (!v49)
  {
    time_t v50 = time(0);
    *(void *)&long long v74 = 0;
    *(void *)std::string buf = v50;
    CFNumberRef v51 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, buf);
    if (v51)
    {
      uint64_t v52 = v74;
      *(void *)&long long v74 = v51;
      *(void *)std::string buf = v52;
      sub_1000570E8((const void **)buf);
    }
    char v77 = (void *)v74;
    *(void *)&long long v74 = 0;
    sub_1000570E8((const void **)&v74);
    int v53 = v73;
    uint64_t v73 = v77;
    char v77 = 0;
    *(void *)std::string buf = v53;
    sub_1000570E8((const void **)buf);
    sub_1000570E8((const void **)&v77);
    uint64_t v48 = v73;
  }
  CFDictionaryAddValue(theDict, @"ts", v48);
  BOOL v54 = operator new(8uLL);
  *(void *)std::string buf = v54;
  *BOOL v54 = @"unique-sim-label-store";
  *(void *)&uint8_t buf[8] = v54 + 1;
  *(void *)&uint8_t buf[16] = v54 + 1;
  if (*(char *)(a1 + 71) >= 0) {
    CFStringRef v55 = (const __CFString **)(a1 + 48);
  }
  else {
    CFStringRef v55 = *(const __CFString ***)(a1 + 48);
  }
  sub_1000837C0(*(os_unfair_lock_s **)(a2 + 104), v55, theDict, (char **)buf, 0, 0, 0);
  if (BYTE8(v70) && (sub_100C2744C(a2, (unsigned __int8 **)__p) & 1) == 0)
  {
    if ((SBYTE7(v70) & 0x80u) == 0) {
      uint64_t v57 = __p;
    }
    else {
      uint64_t v57 = (void **)__p[0];
    }
    sub_100083980(*(os_unfair_lock_s **)(a2 + 104), (const __CFString **)v57, (char **)buf, 0, v56);
  }
  (*(void (**)(void, uint64_t, const __CFString *, void *, const __CFString *, void, void, void))(**(void **)(a2 + 120) + 16))(*(void *)(a2 + 120), a3, @"label-id", v68, @"info", 0, 0, 0);
  (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, void, void))(**(void **)(a2 + 120)
                                                                                                  + 32))(*(void *)(a2 + 120), a3, @"label-id-confirmed", @"info", 0, 0);
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
  sub_1000570E8((const void **)&v73);
  sub_10005717C((const void **)&theDict);
  sub_1000558F4((const void **)&v68);
  if (BYTE8(v70) && SBYTE7(v70) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)__dst);
  }
  if (v58) {
    sub_10004D2C8(v58);
  }
}

void sub_100C2A338(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,int a26,const void *a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,const void *a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47,const void *a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  sub_1000558F4(&a48);
  if (a54 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10005717C(&a27);
  sub_1000558F4(&a34);
  if (a41 && a40 < 0) {
    operator delete(a35);
  }
  sub_1001A7138(v54);
  if (a47 < 0) {
    operator delete(a42);
  }
  if (a9) {
    sub_10004D2C8(a9);
  }
  _Unwind_Resume(a1);
}

void sub_100C2A560(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  uint64_t v6 = *(unsigned __int8 *)(a2 + 47);
  if (v5)
  {
    uint64_t v7 = *(void *)(a2 + 32);
  }
  else
  {
    uint64_t v7 = *(void *)(a2 + 32);
    if ((v6 & 0x80u) == 0) {
      uint64_t v8 = *(unsigned __int8 *)(a2 + 47);
    }
    else {
      uint64_t v8 = *(void *)(a2 + 32);
    }
    if (!v8)
    {
      *(void *)(a3 + 96) = 0;
      *(_OWORD *)(a3 + 64) = 0u;
      *(_OWORD *)(a3 + 80) = 0u;
      *(_OWORD *)(a3 + 32) = 0u;
      *(_OWORD *)(a3 + 48) = 0u;
      *(_OWORD *)a3 = 0u;
      *(_OWORD *)(a3 + 16) = 0u;
      sub_10023C008(a3, a2);
      sub_100058DB0(&v12, "USER_LABEL_PRIMARY");
      uint64_t v9 = (void **)(a3 + 24);
      if (*(char *)(a3 + 47) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)uint64_t v9 = v12;
      *(void *)(a3 + 40) = v13;
      goto LABEL_20;
    }
  }
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = v7;
  }
  if (v6)
  {
    *(void *)(a3 + 96) = 0;
    *(_OWORD *)(a3 + 64) = 0u;
    *(_OWORD *)(a3 + 80) = 0u;
    *(_OWORD *)(a3 + 32) = 0u;
    *(_OWORD *)(a3 + 48) = 0u;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    sub_10023C008(a3, a2);
LABEL_20:
    std::mutex::lock((std::mutex *)(a1 + 880));
    unint64_t v10 = sub_100046F68(a1 + 1032, (void **)(a3 + 24));
    if ((void **)(a1 + 1040) == v10) {
      uint64_t v11 = (const std::string *)(a3 + 24);
    }
    else {
      uint64_t v11 = (const std::string *)(v10 + 7);
    }
    std::string::operator=((std::string *)a3, v11);
    std::mutex::unlock((std::mutex *)(a1 + 880));
    return;
  }

  sub_10023C008(a3, a2);
}

void sub_100C2A6B0(_Unwind_Exception *a1)
{
  sub_1001A7138(v1);
  _Unwind_Resume(a1);
}

void sub_100C2A6D8(Registry **a1@<X0>, uint64_t a2@<X1>, const void **a3@<X8>)
{
  *a3 = 0;
  uint64_t v49 = 0;
  time_t v50 = 0;
  (*(void (**)(uint64_t *__return_ptr))*a1)(&v49);
  if (!v49)
  {
    uint64_t v17 = a1[5];
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_92;
    }
    uint64_t v18 = *(unsigned __int8 *)(a2 + 23);
    BOOL v19 = (v18 & 0x80u) != 0;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(a2 + 8);
    }
    if (v19) {
      __int16 v20 = *(const char **)a2;
    }
    else {
      __int16 v20 = (const char *)a2;
    }
    if (v18) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)&unsigned char buf[24] = v21;
    uint64_t v14 = "#I %s%spersona '%s' is not present";
    long long v15 = v17;
    uint32_t v16 = 32;
    goto LABEL_24;
  }
  if (*(unsigned char *)(v49 + 49))
  {
    uint64_t v6 = a1[5];
    if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_92;
    }
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    uint64_t v9 = *(const char **)a2;
    uint64_t v8 = *(void *)(a2 + 8);
    uint64_t v10 = asString();
    if ((v7 & 0x80u) == 0) {
      uint64_t v11 = v7;
    }
    else {
      uint64_t v11 = v8;
    }
    if ((v7 & 0x80u) == 0) {
      long long v12 = (const char *)a2;
    }
    else {
      long long v12 = v9;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    if (v11) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = "<invalid>";
    }
    *(void *)&unsigned char buf[24] = v13;
    LOWORD(v66) = 2080;
    *(void *)((char *)&v66 + 2) = v10;
    uint64_t v14 = "#I %s%spersona '%s' is of %s type - currently don't support UserFacingName";
    long long v15 = v6;
    uint32_t v16 = 42;
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
    goto LABEL_92;
  }
  uint64_t v70 = 0;
  long long v68 = 0u;
  long long v69 = 0u;
  long long v66 = 0u;
  long long v67 = 0u;
  memset(buf, 0, sizeof(buf));
  (*((void (**)(uint8_t *__return_ptr, Registry **, uint64_t))*a1 + 22))(buf, a1, a2);
  uint64_t v22 = BYTE7(v68);
  if (SBYTE7(v68) < 0) {
    uint64_t v22 = *((void *)&v67 + 1);
  }
  if (!v22)
  {
    uint64_t v24 = a1[5];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = *(unsigned __int8 *)(a2 + 23);
      BOOL v26 = (v25 & 0x80u) != 0;
      if ((v25 & 0x80u) != 0) {
        uint64_t v25 = *(void *)(a2 + 8);
      }
      if (v26) {
        char v27 = *(char **)a2;
      }
      else {
        char v27 = (char *)a2;
      }
      if (v25) {
        __int16 v28 = v27;
      }
      else {
        __int16 v28 = "<invalid>";
      }
      *(_DWORD *)__int16 v58 = 136315650;
      *(void *)&v58[4] = "";
      *(_WORD *)&v58[12] = 2080;
      *(void *)&v58[14] = "";
      *(_WORD *)&v58[22] = 2080;
      uint64_t v59 = v28;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sNo label found for persona '%s'", v58, 0x20u);
    }
    goto LABEL_84;
  }
  uint64_t v23 = buf[23];
  if ((buf[23] & 0x80u) != 0) {
    uint64_t v23 = *(void *)&buf[8];
  }
  if (v23)
  {
    uint64_t v48 = 0;
    goto LABEL_45;
  }
  uint64_t v29 = HIBYTE(v66);
  if (v66 < 0) {
    uint64_t v29 = v66;
  }
  uint64_t v48 = 0;
  if (v29)
  {
LABEL_45:
    (*((void (**)(uint8_t *__return_ptr, Registry **, uint8_t *))*a1 + 19))(v58, a1, buf);
    BOOL v31 = *(void **)v58;
    uint64_t v30 = *(void **)&v58[8];
    *(_DWORD *)size_t v46 = *(_DWORD *)&v58[16];
    *(_DWORD *)&v46[3] = *(_DWORD *)&v58[19];
    int v32 = (char)v58[23];
    memset(v58, 0, sizeof(v58));
    if (v32 < 0)
    {
      sub_10004FC84(__dst, v31, (unint64_t)v30);
      CFNumberRef v51 = 0;
      if (SHIBYTE(v53) < 0)
      {
        sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
        goto LABEL_49;
      }
    }
    else
    {
      __dst[0] = v31;
      __dst[1] = v30;
      LODWORD(v53) = *(_DWORD *)v46;
      *(_DWORD *)((char *)&v53 + 3) = *(_DWORD *)&v46[3];
      HIBYTE(v53) = v32;
      CFNumberRef v51 = 0;
    }
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    uint64_t v55 = v53;
LABEL_49:
    CFAllocatorRef v56 = 0;
    if (ctu::cf::convert_copy())
    {
      int v33 = v51;
      CFNumberRef v51 = v56;
      uint64_t v57 = v33;
      sub_1000558F4(&v57);
    }
    if (SHIBYTE(v55) < 0) {
      operator delete(__p[0]);
    }
    int v34 = v51;
    uint64_t v47 = v51;
    CFNumberRef v51 = 0;
    sub_1000558F4(&v51);
    if (SHIBYTE(v53) < 0) {
      operator delete(__dst[0]);
    }
    if (&v47 != a3)
    {
      __p[0] = (void *)*a3;
      *a3 = v34;
      uint64_t v47 = 0;
      sub_1000558F4((const void **)__p);
    }
    sub_1000558F4(&v47);
    if (v32 < 0) {
      operator delete(v31);
    }
    if (v64 < 0) {
      operator delete(v63);
    }
    if (v62 < 0) {
      operator delete(v61);
    }
    if (v60 < 0) {
      operator delete(v59);
    }
    if ((char)v58[23] < 0) {
      operator delete(*(void **)v58);
    }
    goto LABEL_83;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(0, a1[8]);
  uint64_t v36 = ServiceMap;
  if (v37 < 0)
  {
    CFMutableDictionaryRef v38 = (unsigned __int8 *)(v37 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v39 = 5381;
    do
    {
      uint64_t v37 = v39;
      unsigned int v40 = *v38++;
      uint64_t v39 = (33 * v39) ^ v40;
    }
    while (v40);
  }
  std::mutex::lock(ServiceMap);
  *(void *)__int16 v58 = v37;
  uint64_t v41 = sub_10004D37C(&v36[1].__m_.__sig, (unint64_t *)v58);
  if (v41)
  {
    uint64_t v43 = v41[3];
    unint64_t v42 = (std::__shared_weak_count *)v41[4];
    if (v42)
    {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v36);
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v42);
      char v44 = 0;
      goto LABEL_76;
    }
  }
  else
  {
    uint64_t v43 = 0;
  }
  std::mutex::unlock(v36);
  unint64_t v42 = 0;
  char v44 = 1;
LABEL_76:
  (*(void (**)(void **__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v43 + 80))(__dst, v43, *(unsigned int *)(v49 + 52), 1, @"CarrierName", 0, 0);
  sub_100056248(__p, (CFTypeRef *)__dst);
  *(void *)__int16 v58 = v48;
  uint64_t v48 = __p[0];
  __p[0] = 0;
  sub_1000558F4((const void **)v58);
  sub_1000558F4((const void **)__p);
  sub_1000577C4((const void **)__dst);
  if ((v44 & 1) == 0) {
    sub_10004D2C8(v42);
  }
  if (v48) {
    long long v45 = sub_1000810B8;
  }
  else {
    long long v45 = 0;
  }
  if (!v45) {
    goto LABEL_45;
  }
  sub_100083EB8(a3, (const void **)&v48);
LABEL_83:
  sub_1000558F4((const void **)&v48);
LABEL_84:
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SBYTE7(v68) < 0) {
    operator delete((void *)v67);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(*(void **)&buf[24]);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
LABEL_92:
  if (v50) {
    sub_10004D2C8(v50);
  }
}

void sub_100C2AD2C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, std::__shared_weak_count *a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,char a31)
{
  sub_1000558F4(&a15);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  sub_1001A7138((uint64_t)&a31);
  sub_1000558F4(&a12);
  sub_1001A7138(v34 - 192);
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_1000558F4(v31);
  _Unwind_Resume(a1);
}

void sub_100C2ADFC(uint64_t a1, const void **a2)
{
  uint64_t v2 = a2;
  sub_100C31CD0(a2, (const void **)*a2);
  uint64_t v29 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v4 = *(void **)(a1 + 1032);
  uint64_t v5 = (void *)(a1 + 1040);
  if (v4 != (void *)(a1 + 1040))
  {
    do
    {
      if (*((char *)v4 + 55) < 0)
      {
        sub_10004FC84(__dst, (void *)v4[4], v4[5]);
      }
      else
      {
        *(_OWORD *)long long __dst = *((_OWORD *)v4 + 2);
        uint64_t v34 = v4[6];
      }
      if (SHIBYTE(v34) < 0)
      {
        sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)__dst;
        uint64_t v39 = v34;
      }
      uint64_t v37 = 0;
      if (SHIBYTE(v39) < 0)
      {
        sub_10004FC84(&v40, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v40 = *(_OWORD *)__p;
        uint64_t v41 = v39;
      }
      unint64_t v42 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v6 = v37;
        uint64_t v37 = v42;
        v43[0] = v6;
        sub_1000558F4(v43);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
      __int16 v35 = v37;
      uint64_t v37 = 0;
      sub_1000558F4(&v37);
      if (SHIBYTE(v39) < 0) {
        operator delete(__p[0]);
      }
      if (*((char *)v4 + 79) < 0)
      {
        sub_10004FC84(v30, (void *)v4[7], v4[8]);
      }
      else
      {
        *(_OWORD *)uint64_t v30 = *(_OWORD *)(v4 + 7);
        uint64_t v31 = v4[9];
      }
      if (SHIBYTE(v31) < 0)
      {
        sub_10004FC84(__p, v30[0], (unint64_t)v30[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)v30;
        uint64_t v39 = v31;
      }
      uint64_t v37 = 0;
      if (SHIBYTE(v39) < 0)
      {
        sub_10004FC84(&v40, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        long long v40 = *(_OWORD *)__p;
        uint64_t v41 = v39;
      }
      unint64_t v42 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v7 = v37;
        uint64_t v37 = v42;
        v43[0] = v7;
        sub_1000558F4(v43);
      }
      if (SHIBYTE(v41) < 0) {
        operator delete((void *)v40);
      }
      int v32 = v37;
      uint64_t v37 = 0;
      sub_1000558F4(&v37);
      if (SHIBYTE(v39) < 0) {
        operator delete(__p[0]);
      }
      uint64_t v8 = v35;
      __int16 v35 = 0;
      *(void *)&long long v36 = v8;
      uint64_t v9 = v32;
      *((void *)&v36 + 1) = v32;
      int v32 = 0;
      uint64_t v11 = (const void **)v2[1];
      unint64_t v10 = (unint64_t)v2[2];
      if ((unint64_t)v11 >= v10)
      {
        uint64_t v13 = v5;
        uint64_t v14 = v2;
        long long v15 = (const void **)*v2;
        uint64_t v16 = ((char *)v11 - (unsigned char *)*v2) >> 4;
        unint64_t v17 = v16 + 1;
        if ((unint64_t)(v16 + 1) >> 60) {
          sub_10006A748();
        }
        uint64_t v18 = v10 - (void)v15;
        if (v18 >> 3 > v17) {
          unint64_t v17 = v18 >> 3;
        }
        if ((unint64_t)v18 >= 0x7FFFFFFFFFFFFFF0) {
          unint64_t v19 = 0xFFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v19 = v17;
        }
        if (v19 >> 60) {
          sub_10006A7CC();
        }
        __int16 v20 = (char *)operator new(16 * v19);
        uint64_t v21 = &v20[16 * v16];
        *(void *)uint64_t v21 = v8;
        *((void *)v21 + 1) = v9;
        uint64_t v22 = &v20[16 * v19];
        long long v36 = 0uLL;
        long long v12 = v21 + 16;
        if (v11 == v15)
        {
          uint64_t v2 = v14;
          *uint64_t v14 = v21;
          v14[1] = v12;
          v14[2] = v22;
        }
        else
        {
          uint64_t v2 = v14;
          do
          {
            *((void *)v21 - 2) = 0;
            v21 -= 16;
            uint64_t v23 = (uint64_t)*(v11 - 2);
            v11 -= 2;
            *(void *)uint64_t v21 = v23;
            *uint64_t v11 = 0;
            *((void *)v21 + 1) = 0;
            *((void *)v21 + 1) = v11[1];
            v11[1] = 0;
          }
          while (v11 != v15);
          uint64_t v11 = (const void **)*v14;
          uint64_t v24 = (const void **)v14[1];
          *uint64_t v14 = v21;
          v14[1] = v12;
          v14[2] = v22;
          if (v24 != v11)
          {
            do
            {
              uint64_t v25 = v24 - 2;
              sub_1000558F4(v24 - 1);
              sub_1000558F4(v25);
              uint64_t v24 = v25;
            }
            while (v25 != v11);
          }
        }
        uint64_t v5 = v13;
        if (v11) {
          operator delete(v11);
        }
      }
      else
      {
        *(_OWORD *)uint64_t v11 = 0u;
        *(_OWORD *)uint64_t v11 = v36;
        long long v36 = 0u;
        long long v12 = v11 + 2;
      }
      v2[1] = v12;
      sub_1000558F4((const void **)&v36 + 1);
      sub_1000558F4((const void **)&v36);
      sub_1000558F4(&v32);
      if (SHIBYTE(v31) < 0) {
        operator delete(v30[0]);
      }
      sub_1000558F4(&v35);
      if (SHIBYTE(v34) < 0) {
        operator delete(__dst[0]);
      }
      BOOL v26 = (void *)v4[1];
      if (v26)
      {
        do
        {
          char v27 = v26;
          BOOL v26 = (void *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          char v27 = (void *)v4[2];
          BOOL v28 = *v27 == (void)v4;
          uint64_t v4 = v27;
        }
        while (!v28);
      }
      uint64_t v4 = v27;
    }
    while (v27 != v5);
  }
  std::mutex::unlock(v29);
}

void sub_100C2B228(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::mutex *a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  std::mutex::unlock(a9);
  _Unwind_Resume(a1);
}

void sub_100C2B310(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2B468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v6 = *(_OWORD *)a2;
    v6[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2B634(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*v17);
  }
  sub_10006A6AC(a1);
}

void sub_100C2B678(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    BOOL v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v8) {
      uint64_t v9 = *(const char **)a2;
    }
    else {
      uint64_t v9 = (const char *)a2;
    }
    if (v7) {
      unint64_t v10 = v9;
    }
    else {
      unint64_t v10 = "<invalid>";
    }
    uint64_t v11 = *(unsigned __int8 *)(a3 + 23);
    BOOL v12 = (v11 & 0x80u) != 0;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *(void *)(a3 + 8);
    }
    if (v12) {
      uint64_t v13 = *(const char **)a3;
    }
    else {
      uint64_t v13 = (const char *)a3;
    }
    if (v11) {
      uint64_t v14 = v13;
    }
    else {
      uint64_t v14 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    size_t v46 = v10;
    __int16 v47 = 2080;
    uint64_t v48 = (std::string *)v14;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sremapSimLabel %s -> %s", buf, 0x2Au);
  }
  memset(&v44, 0, sizeof(v44));
  memset(&__p, 0, sizeof(__p));
  uint64_t v15 = *(unsigned __int8 *)(a2 + 23);
  if ((v15 & 0x80u) != 0) {
    uint64_t v15 = *(void *)(a2 + 8);
  }
  if (v15 && !sub_10001D294((unsigned __int8 *)a2, (unsigned __int8 *)a3))
  {
    sub_100C2BC4C(a1, a2);
    uint64_t v25 = sub_100046F68(a1 + 832, (void **)a2);
    if ((void **)(a1 + 840) != v25) {
      std::string::operator=(&v44, (const std::string *)(v25 + 13));
    }
    uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(a3 + 8);
    }
    if (v26)
    {
      char v27 = sub_100046F68(a1 + 832, (void **)a3);
      if ((void **)(a1 + 840) != v27) {
        std::string::operator=(&__p, (const std::string *)(v27 + 13));
      }
    }
    uint64_t v28 = *(void *)(a1 + 848);
    if (v28 != 1) {
      sub_100C36FAC((uint64_t **)(a1 + 832), (void **)a2);
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(buf, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)a2;
      *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    }
    LOBYTE(v46) = 1;
    sub_100C1D4C4(a1, buf);
    if ((_BYTE)v46 && (buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_100C1E074(a1, "remapping", 0);
    uint64_t v29 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v30 = *(unsigned __int8 *)(a2 + 23);
      BOOL v31 = (v30 & 0x80u) != 0;
      int v32 = *(const char **)a2;
      if ((v30 & 0x80u) != 0) {
        uint64_t v30 = *(void *)(a2 + 8);
      }
      if (!v31) {
        int v32 = (const char *)a2;
      }
      if (v30) {
        int v33 = v32;
      }
      else {
        int v33 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      size_t v46 = v33;
      _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s%spersona %s destroyed", buf, 0x20u);
    }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 120) + 112))(*(void *)(a1 + 120), a2);
    if (v28 != 1)
    {
      uint64_t v34 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v35 = *(unsigned __int8 *)(a2 + 23);
        BOOL v36 = (v35 & 0x80u) != 0;
        if ((v35 & 0x80u) != 0) {
          uint64_t v35 = *(void *)(a2 + 8);
        }
        if (v36) {
          uint64_t v37 = *(const char **)a2;
        }
        else {
          uint64_t v37 = (const char *)a2;
        }
        if (!v35) {
          uint64_t v37 = "<invalid>";
        }
        CFMutableDictionaryRef v38 = &v44;
        if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          CFMutableDictionaryRef v38 = (std::string *)v44.__r_.__value_.__r.__words[0];
        }
        uint64_t p_p = &__p;
        if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          uint64_t p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)std::string buf = 136316162;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2080;
        size_t v46 = v37;
        __int16 v47 = 2080;
        uint64_t v48 = v38;
        __int16 v49 = 2080;
        time_t v50 = p_p;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s%sexecute remapSimLabel %s '%s' -> '%s'", buf, 0x34u);
      }
      sub_100C2BF30(a1, (long long *)&v44, (uint64_t)&__p, @"remap");
      long long v40 = operator new(8uLL);
      *(void *)std::string buf = v40;
      *long long v40 = @"unique-sim-label-store";
      *(void *)&uint8_t buf[8] = v40 + 1;
      *(void *)&uint8_t buf[16] = v40 + 1;
      if ((v44.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        unint64_t v42 = (const __CFString **)&v44;
      }
      else {
        unint64_t v42 = (const __CFString **)v44.__r_.__value_.__r.__words[0];
      }
      sub_100083980(*(os_unfair_lock_s **)(a1 + 104), v42, (char **)buf, 0, v41);
      (*(void (**)(void, std::string *, std::string *))(**(void **)(a1 + 1096) + 24))(*(void *)(a1 + 1096), &v44, &__p);
      (*(void (**)(void))(**(void **)(a1 + 1096) + 16))(*(void *)(a1 + 1096));
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
  }
  else
  {
    uint64_t v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
      BOOL v18 = (v17 & 0x80u) != 0;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(a2 + 8);
      }
      if (v18) {
        unint64_t v19 = *(const char **)a2;
      }
      else {
        unint64_t v19 = (const char *)a2;
      }
      uint64_t v20 = *(unsigned __int8 *)(a3 + 23);
      BOOL v21 = (v20 & 0x80u) != 0;
      uint64_t v22 = *(const char **)a3;
      if ((v20 & 0x80u) != 0) {
        uint64_t v20 = *(void *)(a3 + 8);
      }
      if (!v21) {
        uint64_t v22 = (const char *)a3;
      }
      if (v17) {
        uint64_t v23 = v19;
      }
      else {
        uint64_t v23 = "<invalid>";
      }
      if (v20) {
        uint64_t v24 = v22;
      }
      else {
        uint64_t v24 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      size_t v46 = v23;
      __int16 v47 = 2080;
      uint64_t v48 = (std::string *)v24;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#W %s%signoring inadequate request to remap persona '%s' -> '%s'", buf, 0x2Au);
    }
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v44.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v44.__r_.__value_.__l.__data_);
  }
}

void sub_100C2BBD8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C2BC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void ****)(a1 + 608);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 == v6) {
    goto LABEL_12;
  }
  while (!sub_10001D294((unsigned __int8 *)*v5 + 24, (unsigned __int8 *)a2))
  {
    v5 += 2;
    if (v5 == v6)
    {
      uint64_t v5 = v6;
      break;
    }
  }
  if (v5 == *(void ***)(*(void *)(a1 + 608) + 8))
  {
LABEL_12:
    unint64_t v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v12) {
        uint64_t v13 = *(const char **)a2;
      }
      else {
        uint64_t v13 = (const char *)a2;
      }
      if (v11) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)uint64_t v26 = v14;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s is not listed as present. Nothing to do. (makeSurePersonalityIsNotIN)", buf, 0x20u);
    }
    return 1;
  }
  if (*((unsigned char *)*v5 + 64) != 2 || sub_100C16CE8((os_unfair_lock_s *)a1, (void **)a2))
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v24 = v5;
    sub_100C1D930(a1, (long long ***)&v24, (char ***)(a1 + 608), (int64x2_t *)buf);
    sub_100C19920(a1, 1);
    uint64_t v7 = *(void *)buf;
    if (*(void *)&buf[8] != *(void *)buf)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        sub_100C1AE18((void *)a1, v7 + v8);
        ++v9;
        uint64_t v7 = *(void *)buf;
        v8 += 48;
      }
      while (v9 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 4));
    }
    uint64_t v24 = (void **)buf;
    sub_100C30EFC(&v24);
    return 1;
  }
  uint64_t v16 = *(NSObject **)(a1 + 40);
  BOOL v17 = os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v17)
  {
    int v18 = *((_DWORD *)*v5 + 14);
    uint64_t v19 = PersonalityInfo::logPrefix((PersonalityInfo *)*v5);
    uint64_t v20 = *((void *)*v5 + 3);
    uint64_t v21 = *((unsigned __int8 *)*v5 + 47);
    int v22 = (char)v21;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *((void *)*v5 + 4);
    }
    if (v22 >= 0) {
      uint64_t v20 = (uint64_t)*v5 + 24;
    }
    if (v21) {
      uint64_t v23 = (const char *)v20;
    }
    else {
      uint64_t v23 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136316418;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 1024;
    *(_DWORD *)uint64_t v26 = v18;
    *(_WORD *)&v26[4] = 2080;
    *(void *)&v26[6] = v19;
    __int16 v27 = 2080;
    uint64_t v28 = v23;
    __int16 v29 = 2080;
    uint64_t v30 = subscriber::asString();
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%sCannot remove Personality [%d] %s %s from <Present> since it is available on slot %s", buf, 0x3Au);
    return 0;
  }
  return result;
}

void sub_100C2BF0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10, char a11)
{
  a10 = (void **)&a11;
  sub_100C30EFC(&a10);
  _Unwind_Resume(a1);
}

const void **sub_100C2BF30(uint64_t a1, long long *a2, uint64_t a3, const void *a4)
{
  int64x2_t v102 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v101 = *((void *)a2 + 2);
  }
  if (SHIBYTE(v101) < 0)
  {
    sub_10004FC84(&v104, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v104 = __dst;
    uint64_t v105 = v101;
  }
  BOOL value = 0;
  if (SHIBYTE(v105) < 0)
  {
    sub_10004FC84(valuePtr, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    *(_OWORD *)valuePtr = v104;
    *(void *)&valuePtr[16] = v105;
  }
  std::string::size_type v91 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v7 = value;
    BOOL value = v91;
    int v94 = v7;
    sub_1000558F4((const void **)&v94);
  }
  if ((valuePtr[23] & 0x80000000) != 0) {
    operator delete(*(void **)valuePtr);
  }
  int64x2_t v102 = value;
  BOOL value = 0;
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  if (SHIBYTE(v101) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v99 = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    uint64_t v98 = *(void *)(a3 + 16);
  }
  if (SHIBYTE(v98) < 0)
  {
    sub_10004FC84(&v104, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v104 = *(_OWORD *)__p;
    uint64_t v105 = v98;
  }
  BOOL value = 0;
  if (SHIBYTE(v105) < 0)
  {
    sub_10004FC84(valuePtr, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    *(_OWORD *)valuePtr = v104;
    *(void *)&valuePtr[16] = v105;
  }
  std::string::size_type v91 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v8 = value;
    BOOL value = v91;
    int v94 = v8;
    sub_1000558F4((const void **)&v94);
  }
  if ((valuePtr[23] & 0x80000000) != 0) {
    operator delete(*(void **)valuePtr);
  }
  uint64_t v99 = value;
  BOOL value = 0;
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  if (SHIBYTE(v98) < 0) {
    operator delete(__p[0]);
  }
  unint64_t v9 = v102;
  unint64_t v10 = operator new(0x10uLL);
  uint64_t v95 = v10 + 2;
  uint64_t v96 = v10 + 2;
  *unint64_t v10 = @"unique-sim-label-store";
  v10[1] = v9;
  int v94 = v10;
  uint64_t v11 = v99;
  BOOL v12 = operator new(0x10uLL);
  uint64_t v92 = v12 + 2;
  std::string::size_type v93 = v12 + 2;
  void *v12 = @"unique-sim-label-store";
  v12[1] = v11;
  uint64_t v90 = 0;
  std::string::size_type v91 = v12;
  sub_100083254(*(os_unfair_lock_s **)(a1 + 104), @"ts", 0, (char **)&v94, 0, &cf);
  *(void *)&long long v104 = cf;
  if (cf) {
    CFRetain(cf);
  }
  BOOL value = 0;
  *(void *)valuePtr = 0;
  sub_1000842D0(valuePtr, (CFTypeRef *)&v104);
  if (*(void *)valuePtr) {
    uint64_t v13 = sub_100081E58;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13) {
    sub_1001AA2BC((const void **)&value, (const void **)valuePtr);
  }
  sub_1000570E8((const void **)valuePtr);
  uint64_t v90 = value;
  BOOL value = 0;
  sub_1000570E8((const void **)&value);
  sub_1000577C4((const void **)&v104);
  sub_1000577C4(&cf);
  int v88 = 0;
  sub_100083254(*(os_unfair_lock_s **)(a1 + 104), @"ts", 0, (char **)&v91, 0, &v87);
  *(void *)&long long v104 = v87;
  if (v87) {
    CFRetain(v87);
  }
  BOOL value = 0;
  *(void *)valuePtr = 0;
  sub_1000842D0(valuePtr, (CFTypeRef *)&v104);
  if (*(void *)valuePtr) {
    uint64_t v14 = sub_100081E58;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14) {
    sub_1001AA2BC((const void **)&value, (const void **)valuePtr);
  }
  sub_1000570E8((const void **)valuePtr);
  int v88 = value;
  BOOL value = 0;
  sub_1000570E8((const void **)&value);
  sub_1000577C4((const void **)&v104);
  sub_1000577C4(&v87);
  CFMutableDictionaryRef theDict = 0;
  CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v16 = theDict;
    CFMutableDictionaryRef theDict = Mutable;
    *(void *)valuePtr = v16;
    sub_10005717C((const void **)valuePtr);
  }
  BOOL v17 = theDict;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v84, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)char v84 = *(_OWORD *)a3;
    uint64_t v85 = *(void *)(a3 + 16);
  }
  if (SHIBYTE(v85) < 0)
  {
    sub_10004FC84(&v104, v84[0], (unint64_t)v84[1]);
  }
  else
  {
    long long v104 = *(_OWORD *)v84;
    uint64_t v105 = v85;
  }
  uint64_t v72 = 0;
  if (SHIBYTE(v105) < 0)
  {
    sub_10004FC84(valuePtr, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    *(_OWORD *)valuePtr = v104;
    *(void *)&valuePtr[16] = v105;
  }
  values = 0;
  if (ctu::cf::convert_copy())
  {
    int v18 = v72;
    uint64_t v72 = values;
    BOOL value = v18;
    sub_1000558F4((const void **)&value);
  }
  if ((valuePtr[23] & 0x80000000) != 0) {
    operator delete(*(void **)valuePtr);
  }
  CFAllocatorRef v103 = v72;
  uint64_t v72 = 0;
  sub_1000558F4((const void **)&v72);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  CFDictionarySetValue(v17, @"to", v103);
  sub_1000558F4((const void **)&v103);
  if (SHIBYTE(v85) < 0) {
    operator delete(v84[0]);
  }
  uint64_t v19 = theDict;
  time_t v20 = time(0);
  *(void *)&long long v104 = 0;
  *(void *)valuePtr = v20;
  CFNumberRef v21 = CFNumberCreate(kCFAllocatorDefault, kCFNumberLongType, valuePtr);
  if (v21)
  {
    uint64_t v22 = v104;
    *(void *)&long long v104 = v21;
    *(void *)valuePtr = v22;
    sub_1000570E8((const void **)valuePtr);
  }
  BOOL value = (void *)v104;
  *(void *)&long long v104 = 0;
  sub_1000570E8((const void **)&v104);
  CFDictionarySetValue(v19, @"ts", value);
  sub_1000570E8((const void **)&value);
  CFDictionarySetValue(theDict, @"action", a4);
  if (v90) {
    uint64_t v23 = sub_100081E58;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23) {
    CFDictionarySetValue(theDict, @"from_dated", v90);
  }
  if (v88) {
    uint64_t v24 = sub_100081E58;
  }
  else {
    uint64_t v24 = 0;
  }
  if (v24) {
    CFDictionarySetValue(theDict, @"to_dated", v88);
  }
  uint64_t v25 = operator new(8uLL);
  BOOL value = v25;
  void *v25 = @"label-remap-history";
  uint64_t v82 = v25 + 1;
  std::string::size_type v83 = v25 + 1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v78, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v78 = *a2;
    uint64_t v79 = *((void *)a2 + 2);
  }
  if (SHIBYTE(v79) < 0)
  {
    sub_10004FC84(&v104, v78[0], (unint64_t)v78[1]);
  }
  else
  {
    long long v104 = *(_OWORD *)v78;
    uint64_t v105 = v79;
  }
  CFAllocatorRef v103 = 0;
  if (SHIBYTE(v105) < 0)
  {
    sub_10004FC84(valuePtr, (void *)v104, *((unint64_t *)&v104 + 1));
  }
  else
  {
    *(_OWORD *)valuePtr = v104;
    *(void *)&valuePtr[16] = v105;
  }
  uint64_t v72 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v26 = v103;
    CFAllocatorRef v103 = v72;
    values = v26;
    sub_1000558F4((const void **)&values);
  }
  CFStringRef v27 = (const __CFString *)kDevicePersistentStoreDataArchive;
  if ((valuePtr[23] & 0x80000000) != 0) {
    operator delete(*(void **)valuePtr);
  }
  CFDictionaryRef MutableCopy = (CFDictionaryRef)v103;
  CFAllocatorRef v103 = 0;
  sub_1000558F4((const void **)&v103);
  if (SHIBYTE(v105) < 0) {
    operator delete((void *)v104);
  }
  sub_100080408(v27, (const __CFString *)MutableCopy, theDict, (CFStringRef **)&value);
  sub_1000558F4((const void **)&MutableCopy);
  if (SHIBYTE(v79) < 0) {
    operator delete(v78[0]);
  }
  CFAllocatorRef v103 = 0;
  sub_100080780(@"label-remap-history", v27, 0, (const void **)valuePtr);
  sub_10004EFE4(&v103, (CFTypeRef *)valuePtr);
  sub_1000577C4((const void **)valuePtr);
  if (v103) {
    uint64_t v28 = sub_100080778;
  }
  else {
    uint64_t v28 = 0;
  }
  if (v28)
  {
    unint64_t Count = CFDictionaryGetCount((CFDictionaryRef)v103);
    if (Count >= 0x1F)
    {
      CFDictionaryRef MutableCopy = 0;
      CFDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(0, 0, (CFDictionaryRef)v103);
      long long v104 = 0uLL;
      uint64_t v105 = 0;
      sub_10019E8F0(&v104, Count);
      values = 0;
      BOOL v76 = 0;
      uint64_t v77 = 0;
      sub_10004EE3C(&values, Count);
      CFDictionaryGetKeysAndValues(MutableCopy, (const void **)v104, (const void **)values);
      uint64_t v72 = 0;
      uint64_t v73 = 0;
      unint64_t v74 = 0;
      sub_100C2F6C4((void **)&v72, Count);
      CFStringRef v70 = v27;
      for (uint64_t i = 0; i != (void *)Count; uint64_t i = (char *)i + 1)
      {
        CFDictionaryRef v31 = (const __CFDictionary *)values[(void)i];
        if (v31
          && (CFTypeID v32 = CFGetTypeID(values[(void)i]), v32 == CFDictionaryGetTypeID())
          && (v33 = (uint64_t *)CFDictionaryGetValue(v31, @"ts"), (uint64_t v34 = v33) != 0)
          && (CFTypeID v35 = CFGetTypeID(v33), v35 == CFNumberGetTypeID()))
        {
          *(void *)valuePtr = 0;
          ctu::cf::assign((ctu::cf *)valuePtr, v34, v36);
          uint64_t v37 = *(void **)valuePtr;
        }
        else
        {
          uint64_t v37 = 0;
        }
        CFMutableDictionaryRef v38 = v73;
        if ((unint64_t)v73 >= v74)
        {
          long long v40 = v72;
          uint64_t v41 = ((char *)v73 - (char *)v72) >> 4;
          unint64_t v42 = v41 + 1;
          if ((unint64_t)(v41 + 1) >> 60) {
            sub_10006A748();
          }
          uint64_t v43 = v74 - (void)v72;
          if ((uint64_t)(v74 - (void)v72) >> 3 > v42) {
            unint64_t v42 = v43 >> 3;
          }
          if ((unint64_t)v43 >= 0x7FFFFFFFFFFFFFF0) {
            unint64_t v44 = 0xFFFFFFFFFFFFFFFLL;
          }
          else {
            unint64_t v44 = v42;
          }
          if (v44) {
            unint64_t v44 = (unint64_t)sub_1009C886C(v44);
          }
          else {
            uint64_t v45 = 0;
          }
          size_t v46 = (void *)(v44 + 16 * v41);
          void *v46 = i;
          v46[1] = v37;
          __int16 v47 = (char *)v46;
          if (v38 != v40)
          {
            do
            {
              *((_OWORD *)v47 - 1) = *((_OWORD *)v38 - 1);
              v47 -= 16;
              v38 -= 2;
            }
            while (v38 != v40);
            CFMutableDictionaryRef v38 = v72;
          }
          uint64_t v39 = (void **)(v46 + 2);
          uint64_t v72 = (void **)v47;
          unint64_t v74 = v44 + 16 * v45;
          if (v38) {
            operator delete(v38);
          }
        }
        else
        {
          void *v73 = i;
          v38[1] = v37;
          uint64_t v39 = v38 + 2;
        }
        uint64_t v73 = v39;
      }
      unint64_t v48 = 126 - 2 * __clz(((char *)v39 - (char *)v72) >> 4);
      if (v39 == v72) {
        uint64_t v49 = 0;
      }
      else {
        uint64_t v49 = v48;
      }
      sub_100C31E04((uint64_t *)v72, (uint64_t *)v39, v49, 1);
      unint64_t v50 = Count - 30;
      long long v69 = v72;
      CFNumberRef v51 = v72;
      do
      {
        CFDictionaryRef v52 = (const __CFDictionary *)values[(void)*v51];
        if (v52)
        {
          CFTypeID v53 = CFGetTypeID(values[(void)*v51]);
          CFStringRef v54 = @"?";
          CFStringRef v55 = @"?";
          if (v53 == CFDictionaryGetTypeID())
          {
            CFStringRef v56 = (const __CFString *)CFDictionaryGetValue(v52, @"to");
            CFStringRef v57 = v56;
            if (v56)
            {
              CFTypeID v58 = CFGetTypeID(v56);
              if (v58 == CFStringGetTypeID()) {
                CFStringRef v54 = v57;
              }
              else {
                CFStringRef v54 = 0;
              }
            }
            else
            {
              CFStringRef v54 = 0;
            }
            CFStringRef v59 = (const __CFString *)CFDictionaryGetValue(v52, @"action");
            CFStringRef v60 = v59;
            if (v59)
            {
              CFTypeID v61 = CFGetTypeID(v59);
              if (v61 == CFStringGetTypeID()) {
                CFStringRef v55 = v60;
              }
              else {
                CFStringRef v55 = 0;
              }
            }
            else
            {
              CFStringRef v55 = 0;
            }
          }
        }
        else
        {
          CFStringRef v54 = @"?";
          CFStringRef v55 = @"?";
        }
        char v62 = *(NSObject **)(a1 + 40);
        BOOL v63 = os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT);
        char v64 = *v51;
        if (v63)
        {
          CFStringRef v65 = *(const __CFString **)(v104 + 8 * (void)v64);
          long long v66 = v51[1];
          *(_DWORD *)valuePtr = 136316418;
          *(void *)&valuePtr[4] = "";
          *(_WORD *)&valuePtr[12] = 2080;
          *(void *)&valuePtr[14] = "";
          *(_WORD *)&valuePtr[22] = 2114;
          CFStringRef v107 = v65;
          __int16 v108 = 2114;
          CFStringRef v109 = v54;
          __int16 v110 = 2048;
          uint64_t v111 = v66;
          __int16 v112 = 2114;
          CFStringRef v113 = v55;
          _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#I %s%sremoving oldest record from remap journal: %{public}@ -> %{public}@ ts:%ld, %{public}@", valuePtr, 0x3Eu);
          char v64 = *v51;
        }
        CFDictionaryRemoveValue(MutableCopy, *(const void **)(v104 + 8 * (void)v64));
        v51 += 2;
        --v50;
      }
      while (v50);
      CFStringRef v27 = v70;
      sub_100080408(v70, @"label-remap-history", MutableCopy, 0);
      operator delete(v69);
      if (values)
      {
        BOOL v76 = values;
        operator delete(values);
      }
      if ((void)v104)
      {
        *((void *)&v104 + 1) = v104;
        operator delete((void *)v104);
      }
      sub_10005717C((const void **)&MutableCopy);
    }
  }
  else
  {
    long long v67 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v67, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)valuePtr = 136315650;
      *(void *)&valuePtr[4] = "";
      *(_WORD *)&valuePtr[12] = 2080;
      *(void *)&valuePtr[14] = "";
      *(_WORD *)&valuePtr[22] = 2112;
      CFStringRef v107 = @"label-remap-history";
      _os_log_error_impl((void *)&_mh_execute_header, v67, OS_LOG_TYPE_ERROR, "#E %s%sfailed to read %@ on updateRemapHistory", valuePtr, 0x20u);
    }
  }
  sub_10008093C(v27);
  sub_100057D78((const void **)&v103);
  if (value)
  {
    uint64_t v82 = value;
    operator delete(value);
  }
  sub_10005717C((const void **)&theDict);
  sub_1000570E8((const void **)&v88);
  sub_1000570E8((const void **)&v90);
  if (v91)
  {
    uint64_t v92 = v91;
    operator delete(v91);
  }
  if (v94)
  {
    uint64_t v95 = v94;
    operator delete(v94);
  }
  sub_1000558F4((const void **)&v99);
  return sub_1000558F4((const void **)&v102);
}

void sub_100C2CB8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,const void *a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,const void *a32,uint64_t a33,const void *a34,uint64_t a35,const void *a36,void *a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,void *a43,uint64_t a44,uint64_t a45,const void *a46)
{
  if (__p) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  unint64_t v48 = *(void **)(v46 - 208);
  if (v48)
  {
    *(void *)(v46 - 200) = v48;
    operator delete(v48);
  }
  sub_10005717C(&a25);
  sub_100057D78((const void **)(v46 - 216));
  if (a26)
  {
    a27 = (uint64_t)a26;
    operator delete(a26);
  }
  sub_10005717C(&a32);
  sub_1000570E8(&a34);
  sub_1000570E8(&a36);
  if (a37)
  {
    a38 = (uint64_t)a37;
    operator delete(a37);
  }
  if (a40)
  {
    a41 = (uint64_t)a40;
    operator delete(a40);
  }
  sub_1000558F4(&a46);
  sub_1000558F4((const void **)(v46 - 224));
  _Unwind_Resume(a1);
}

void sub_100C2CEA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __dst[0] = 0;
  __dst[1] = 0;
  unint64_t v10 = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    unint64_t v10 = *(void **)(a2 + 16);
  }
  std::mutex::lock((std::mutex *)(a1 + 880));
  uint64_t v5 = (void *)HIBYTE(v10);
  if (SHIBYTE(v10) < 0) {
    uint64_t v5 = __dst[1];
  }
  if (v5 && *(unsigned char *)(a1 + 1000)) {
    sub_100046F68(a1 + 976, __dst);
  }
  std::mutex::unlock((std::mutex *)(a1 + 880));
  if (SHIBYTE(v10) < 0)
  {
    sub_10004FC84(v7, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)__dst;
    v7[2] = v10;
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2D104(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v25 + 31) < 0) {
    operator delete(*v26);
  }
  sub_10006A6AC(a1);
}

BOOL sub_100C2D174(uint64_t a1, uint64_t a2, uint64_t a3, BOOL a4)
{
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
    BOOL v10 = (v9 & 0x80u) != 0;
    uint64_t v11 = *(const char **)a2;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *(void *)(a2 + 8);
    }
    if (!v10) {
      uint64_t v11 = (const char *)a2;
    }
    if (v9) {
      BOOL v12 = v11;
    }
    else {
      BOOL v12 = "<invalid>";
    }
    uint64_t v13 = *(unsigned __int8 *)(a3 + 23);
    BOOL v14 = (v13 & 0x80u) != 0;
    if ((v13 & 0x80u) != 0) {
      uint64_t v13 = *(void *)(a3 + 8);
    }
    if (v14) {
      uint64_t v15 = *(const char **)a3;
    }
    else {
      uint64_t v15 = (const char *)a3;
    }
    if (v13) {
      CFMutableDictionaryRef v16 = v15;
    }
    else {
      CFMutableDictionaryRef v16 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)uint64_t v82 = v12;
    *(_WORD *)&v82[8] = 2080;
    *(void *)&v82[10] = v16;
    *(_WORD *)&v82[18] = 2080;
    *(void *)&v82[20] = asStringBool(a4);
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%stransferPersonality %s -> %s (userAction:%s)", buf, 0x34u);
  }
  uint64_t v17 = *(unsigned __int8 *)(a2 + 23);
  if ((v17 & 0x80u) != 0) {
    uint64_t v17 = *(void *)(a2 + 8);
  }
  if (!v17) {
    goto LABEL_25;
  }
  uint64_t v18 = *(unsigned __int8 *)(a3 + 23);
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *(void *)(a3 + 8);
  }
  if (!v18 || sub_10001D294((unsigned __int8 *)a2, (unsigned __int8 *)a3))
  {
LABEL_25:
    uint64_t v19 = *(NSObject **)(a1 + 40);
    BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (v20)
    {
      uint64_t v22 = *(unsigned __int8 *)(a2 + 23);
      BOOL v23 = (v22 & 0x80u) != 0;
      if ((v22 & 0x80u) != 0) {
        uint64_t v22 = *(void *)(a2 + 8);
      }
      if (v23) {
        uint64_t v24 = *(const char **)a2;
      }
      else {
        uint64_t v24 = (const char *)a2;
      }
      if (v22) {
        uint64_t v25 = v24;
      }
      else {
        uint64_t v25 = "<invalid>";
      }
      uint64_t v26 = *(unsigned __int8 *)(a3 + 23);
      BOOL v27 = (v26 & 0x80u) != 0;
      if ((v26 & 0x80u) != 0) {
        uint64_t v26 = *(void *)(a3 + 8);
      }
      if (v27) {
        uint64_t v28 = *(const char **)a3;
      }
      else {
        uint64_t v28 = (const char *)a3;
      }
      if (v26) {
        __int16 v29 = v28;
      }
      else {
        __int16 v29 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)uint64_t v82 = v25;
      *(_WORD *)&v82[8] = 2080;
      *(void *)&v82[10] = v29;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#W %s%signoring inadequate request to transfer persona '%s' -> '%s'", buf, 0x2Au);
      return 0;
    }
    return result;
  }
  memset(&v77, 0, sizeof(v77));
  uint64_t v30 = sub_100046F68(a1 + 832, (void **)a2);
  CFDictionaryRef v31 = v30;
  if ((void **)(a1 + 840) == v30)
  {
    CFTypeID v32 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = *(unsigned __int8 *)(a2 + 23);
      BOOL v34 = (v33 & 0x80u) != 0;
      CFTypeID v35 = *(const char **)a2;
      if ((v33 & 0x80u) != 0) {
        uint64_t v33 = *(void *)(a2 + 8);
      }
      if (!v34) {
        CFTypeID v35 = (const char *)a2;
      }
      if (v33) {
        CFNumberRef v36 = v35;
      }
      else {
        CFNumberRef v36 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)uint64_t v82 = v36;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#W %s%sPersonality (from) %s is unlabeled", buf, 0x20u);
    }
  }
  else
  {
    std::string::operator=(&v77, (const std::string *)(v30 + 13));
  }
  int v37 = sub_100C2BC4C(a1, a2);
  CFMutableDictionaryRef v38 = *(NSObject **)(a1 + 40);
  BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
  if (!v37)
  {
    if (v39)
    {
      uint64_t v52 = *(unsigned __int8 *)(a2 + 23);
      BOOL v53 = (v52 & 0x80u) != 0;
      if ((v52 & 0x80u) != 0) {
        uint64_t v52 = *(void *)(a2 + 8);
      }
      if (v53) {
        CFStringRef v54 = *(const char **)a2;
      }
      else {
        CFStringRef v54 = (const char *)a2;
      }
      uint64_t v55 = *(unsigned __int8 *)(a3 + 23);
      BOOL v56 = (v55 & 0x80u) != 0;
      CFStringRef v57 = *(const char **)a3;
      if ((v55 & 0x80u) != 0) {
        uint64_t v55 = *(void *)(a3 + 8);
      }
      if (!v56) {
        CFStringRef v57 = (const char *)a3;
      }
      if (v52) {
        CFTypeID v58 = v54;
      }
      else {
        CFTypeID v58 = "<invalid>";
      }
      if (v55) {
        CFStringRef v59 = v57;
      }
      else {
        CFStringRef v59 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)uint64_t v82 = v58;
      *(_WORD *)&v82[8] = 2080;
      *(void *)&v82[10] = v59;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s%sUnable to transferPersonality from '%s' to '%s'", buf, 0x2Au);
    }
    int v60 = 0;
    goto LABEL_159;
  }
  if (v39)
  {
    long long v40 = &v77;
    if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      long long v40 = (std::string *)v77.__r_.__value_.__r.__words[0];
    }
    uint64_t v41 = *(unsigned __int8 *)(a2 + 23);
    BOOL v42 = (v41 & 0x80u) != 0;
    if ((v41 & 0x80u) != 0) {
      uint64_t v41 = *(void *)(a2 + 8);
    }
    if (v42) {
      uint64_t v43 = *(const char **)a2;
    }
    else {
      uint64_t v43 = (const char *)a2;
    }
    uint64_t v44 = *(unsigned __int8 *)(a3 + 23);
    BOOL v45 = (v44 & 0x80u) != 0;
    if ((v44 & 0x80u) != 0) {
      uint64_t v44 = *(void *)(a3 + 8);
    }
    if (v45) {
      uint64_t v46 = *(const char **)a3;
    }
    else {
      uint64_t v46 = (const char *)a3;
    }
    if (v41) {
      __int16 v47 = v43;
    }
    else {
      __int16 v47 = "<invalid>";
    }
    if (v44) {
      unint64_t v48 = v46;
    }
    else {
      unint64_t v48 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136316162;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    *(void *)uint64_t v82 = v40;
    *(_WORD *)&v82[8] = 2080;
    *(void *)&v82[10] = v47;
    *(_WORD *)&v82[18] = 2080;
    *(void *)&v82[20] = v48;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s%sexecute transferPersonality '%s' %s -> %s", buf, 0x34u);
  }
  v79.__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
  sub_10004EFE4(&v79, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (v79.__r_.__value_.__r.__words[0]) {
    uint64_t v49 = sub_100080778;
  }
  else {
    uint64_t v49 = 0;
  }
  if (v49)
  {
    CFDictionaryRef theDict = 0;
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 24))(buf);
    sub_10004EFE4(&theDict, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 120) + 104))(*(void *)(a1 + 120), a2, a3);
    xpc_object_t object = 0;
    if (theDict) {
      unint64_t v50 = sub_100080778;
    }
    else {
      unint64_t v50 = 0;
    }
    if (v50)
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    }
    else
    {
      CFMutableDictionaryRef MutableCopy = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      if (!MutableCopy)
      {
LABEL_105:
        char v62 = (__CFDictionary *)object;
        CFDictionaryRef v63 = (const __CFDictionary *)v79.__r_.__value_.__r.__words[0];
        std::string::size_type size = HIBYTE(v77.__r_.__value_.__r.__words[2]);
        if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = v77.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          CFStringRef Value = CFDictionaryGetValue((CFDictionaryRef)v79.__r_.__value_.__l.__data_, @"label-id");
          if (Value) {
            CFDictionarySetValue(v62, @"label-id", Value);
          }
          else {
            CFDictionaryRemoveValue(v62, @"label-id");
          }
          long long v66 = CFDictionaryGetValue(v63, @"label-id-confirmed");
          if (v66) {
            CFDictionarySetValue(v62, @"label-id-confirmed", v66);
          }
          else {
            CFDictionaryRemoveValue(v62, @"label-id-confirmed");
          }
        }
        long long v67 = CFDictionaryGetValue(v63, @"mdn");
        if (v67) {
          CFDictionarySetValue(v62, @"mdn", v67);
        }
        else {
          CFDictionaryRemoveValue(v62, @"mdn");
        }
        (*(void (**)(void, uint64_t, const __CFString *, xpc_object_t, void, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), a3, @"info", object, 0, 0, 0, 0);
        sub_10005717C((const void **)&object);
        sub_100057D78((const void **)&theDict);
        int v60 = 1;
        goto LABEL_118;
      }
    }
    xpc_object_t v61 = object;
    xpc_object_t object = MutableCopy;
    *(void *)std::string buf = v61;
    sub_10005717C((const void **)buf);
    goto LABEL_105;
  }
  int v60 = 0;
LABEL_118:
  sub_100057D78((const void **)&v79.__r_.__value_.__l.__data_);
  std::string::size_type v68 = HIBYTE(v77.__r_.__value_.__r.__words[2]);
  if ((v77.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v68 = v77.__r_.__value_.__l.__size_;
  }
  if (v68)
  {
    memset(&v79, 0, sizeof(v79));
    long long v69 = sub_100046F68(a1 + 832, (void **)a3);
    if ((void **)(a1 + 840) != v69) {
      std::string::operator=(&v79, (const std::string *)(v69 + 13));
    }
    *(void *)std::string buf = a3;
    CFStringRef v70 = sub_100C3B444((uint64_t **)(a1 + 832), (void **)a3, (long long **)buf);
    std::string::operator=((std::string *)(v70 + 7), (const std::string *)(v31 + 7));
    std::string::operator=((std::string *)(v70 + 10), (const std::string *)(v31 + 10));
    std::string::operator=((std::string *)(v70 + 13), (const std::string *)(v31 + 13));
    *((unsigned char *)v70 + 128) = *((unsigned char *)v31 + 128);
    std::string::operator=((std::string *)(v70 + 17), (const std::string *)(v31 + 17));
    sub_100C36FAC((uint64_t **)(a1 + 832), (void **)a2);
    if (a4) {
      sub_100C28CB0(a1, a3, 1);
    }
    buf[0] = 0;
    v82[0] = 0;
    sub_100C1D4C4(a1, buf);
    if (v82[0] && (buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    sub_100C1E074(a1, "label transfer", 0);
    std::string::size_type v71 = HIBYTE(v79.__r_.__value_.__r.__words[2]);
    if ((v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v71 = v79.__r_.__value_.__l.__size_;
    }
    if (v71)
    {
      uint64_t v72 = a4 ? @"manual transfer" : @"mdn match transfer";
      sub_100C2BF30(a1, (long long *)&v79, (uint64_t)&v77, v72);
      uint64_t v73 = operator new(8uLL);
      *(void *)std::string buf = v73;
      void *v73 = @"unique-sim-label-store";
      *(void *)&uint8_t buf[8] = v73 + 1;
      *(void *)&uint8_t buf[16] = v73 + 1;
      uint64_t v75 = (v79.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? (const __CFString **)&v79
          : (const __CFString **)v79.__r_.__value_.__r.__words[0];
      sub_100083980(*(os_unfair_lock_s **)(a1 + 104), v75, (char **)buf, 0, v74);
      (*(void (**)(void, std::string *, std::string *))(**(void **)(a1 + 1096) + 24))(*(void *)(a1 + 1096), &v79, &v77);
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
    }
    (*(void (**)(void))(**(void **)(a1 + 1096) + 16))(*(void *)(a1 + 1096));
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
  }
  if (v49)
  {
    v79.__r_.__value_.__r.__words[0] = a3;
    BOOL v76 = sub_100C3B444((uint64_t **)(a1 + 832), (void **)a3, (long long **)&v79);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(buf, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string buf = *(_OWORD *)a2;
      *(void *)&uint8_t buf[16] = *(void *)(a2 + 16);
    }
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(v82, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v82 = *(_OWORD *)a3;
      *(void *)&v82[16] = *(void *)(a3 + 16);
    }
    if (*((char *)v76 + 159) < 0)
    {
      sub_10004FC84(&v82[24], (void *)v76[17], v76[18]);
    }
    else
    {
      *(_OWORD *)&v82[24] = *(_OWORD *)(v76 + 17);
      uint64_t v83 = v76[19];
    }
    CFDictionaryRef theDict = 0;
    rest::write_rest_value();
    sub_100058DB0(&v79, "/cc/events/service_transferred");
    xpc_object_t object = theDict;
    CFDictionaryRef theDict = (CFDictionaryRef)xpc_null_create();
    ctu::RestModule::sendEvent();
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(v79.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v79.__r_.__value_.__l.__data_);
    }
    xpc_release(theDict);
    if (SHIBYTE(v83) < 0) {
      operator delete(*(void **)&v82[24]);
    }
    if ((v82[23] & 0x80000000) != 0) {
      operator delete(*(void **)v82);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
LABEL_159:
  if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v77.__r_.__value_.__l.__data_);
  }
  return v60 != 0;
}

void sub_100C2DBF8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2DD54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = (std::mutex *)(a1 + 880);
  std::mutex::lock((std::mutex *)(a1 + 880));
  sub_100C40634(a2, (void *)(a1 + 1008));

  std::mutex::unlock(v4);
}

void sub_100C2DDAC(_Unwind_Exception *a1)
{
  std::mutex::unlock(v1);
  _Unwind_Resume(a1);
}

void sub_100C2DDC0(uint64_t a1, uint64_t *a2, void *a3)
{
  long long v13 = 0uLL;
  uint64_t v5 = *a2;
  uint64_t v6 = a2[1];
  if (v6 != *a2)
  {
    unint64_t v7 = 0xAAAAAAAAAAAAAAABLL * ((v6 - v5) >> 4);
    if (v7 >= 0x555555555555556) {
      sub_10006A748();
    }
    uint64_t v8 = (char *)sub_10019F624((uint64_t)&v13 + 8, v7);
    uint64_t v9 = 0;
    *((void *)&v13 + 1) = &v8[48 * v10];
    do
    {
      sub_10023C0CC(&v8[v9], (long long *)(v5 + v9));
      v9 += 48;
    }
    while (v5 + v9 != v6);
  }
  uint64_t v11 = a3[3];
  if (v11)
  {
    if ((void *)v11 == a3)
    {
      uint64_t v15 = v14;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v14);
LABEL_10:
      BOOL v12 = *(std::__shared_weak_count **)(a1 + 16);
      if (v12)
      {
        if (std::__shared_weak_count::lock(v12)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
    uint64_t v11 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11);
  }
  uint64_t v15 = (void *)v11;
  goto LABEL_10;
}

void sub_100C2E060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2E0BC(uint64_t a1)
{
  char v89 = 0;
  int64x2_t v87 = 0uLL;
  unint64_t v88 = 0;
  uint64_t v2 = *(void **)(a1 + 216);
  uint64_t v3 = (void *)(a1 + 224);
  if (v2 == (void *)(a1 + 224)) {
    goto LABEL_229;
  }
  char v72 = 0;
  uint64_t v73 = (void ***)(a1 + 832);
  uint64_t v4 = (void **)(a1 + 840);
  do
  {
    uint64_t v5 = *((unsigned __int8 *)v2 + 55);
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = v2[5];
    }
    if (v5) {
      BOOL v6 = *((unsigned char *)v2 + 136) == 0;
    }
    else {
      BOOL v6 = 1;
    }
    if (!v6)
    {
      uint64_t v7 = *(void *)(a1 + 608);
      uint64_t v8 = *(void **)v7;
      uint64_t v9 = *(void **)(v7 + 8);
      if (*(void **)v7 != v9)
      {
        uint64_t v10 = v2 + 4;
        uint64_t v11 = v2 + 7;
        while (!sub_10001D294((unsigned __int8 *)(*v8 + 24), (unsigned __int8 *)v2 + 32))
        {
          v8 += 2;
          if (v8 == v9)
          {
            uint64_t v8 = v9;
            break;
          }
        }
        if (v8 != *(void **)(v7 + 8))
        {
          uint64_t v12 = *v8;
          long long v13 = (std::__shared_weak_count *)v8[1];
          if (v13) {
            atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v12)
          {
            BOOL v14 = (void **)(v2 + 10);
            uint64_t v15 = *(unsigned __int8 *)(v12 + 95);
            size_t v16 = *(void *)(v12 + 80);
            if ((v15 & 0x80u) == 0) {
              uint64_t v17 = *(unsigned __int8 *)(v12 + 95);
            }
            else {
              uint64_t v17 = *(void *)(v12 + 80);
            }
            int v18 = *((unsigned __int8 *)v2 + 103);
            uint64_t v19 = v2[11];
            if ((v18 & 0x80u) == 0) {
              uint64_t v19 = *((unsigned __int8 *)v2 + 103);
            }
            if (v17 != v19) {
              goto LABEL_33;
            }
            BOOL v20 = (const void **)(v12 + 72);
            if ((v18 & 0x80u) == 0) {
              CFNumberRef v21 = (unsigned __int8 *)(v2 + 10);
            }
            else {
              CFNumberRef v21 = (unsigned __int8 *)*v14;
            }
            if ((v15 & 0x80) != 0)
            {
              if (memcmp(*v20, v21, v16)) {
                goto LABEL_33;
              }
            }
            else if (v15)
            {
              while (*(unsigned __int8 *)v20 == *v21)
              {
                BOOL v20 = (const void **)((char *)v20 + 1);
                ++v21;
                if (!--v15) {
                  goto LABEL_219;
                }
              }
LABEL_33:
              uint64_t v22 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                std::string::size_type v71 = v13;
                BOOL v23 = v2 + 10;
                if ((v18 & 0x80) != 0) {
                  BOOL v23 = *v14;
                }
                uint64_t v24 = asString();
                uint64_t v25 = *((unsigned __int8 *)v2 + 55);
                BOOL v26 = (v25 & 0x80u) != 0;
                if ((v25 & 0x80u) != 0) {
                  uint64_t v25 = v2[5];
                }
                if (v26) {
                  BOOL v27 = (const char *)v2[4];
                }
                else {
                  BOOL v27 = (const char *)(v2 + 4);
                }
                BOOL v6 = v25 == 0;
                uint64_t v28 = "<invalid>";
                if (!v6) {
                  uint64_t v28 = v27;
                }
                if (*((char *)v2 + 79) < 0) {
                  uint64_t v11 = (void *)*v11;
                }
                *(_DWORD *)std::string buf = 136316418;
                *(void *)&uint8_t buf[4] = "";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "";
                *(_WORD *)&unsigned char buf[22] = 2080;
                *(void *)&unsigned char buf[24] = v23;
                *(_WORD *)&uint8_t buf[32] = 2080;
                *(void *)&buf[34] = v24;
                *(_WORD *)&buf[42] = 2080;
                *(void *)&buf[44] = v28;
                *(_WORD *)&buf[52] = 2080;
                *(void *)&buf[54] = v11;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s%sAssigning MDN '%s src:%s' to %s (msisdn:%s)", buf, 0x3Eu);
                int v18 = *((unsigned __int8 *)v2 + 103);
                long long v13 = v71;
              }
              if ((v18 & 0x80) != 0)
              {
                unint64_t v29 = v2[11];
                if (v29)
                {
                  CFStringRef theString2 = 0;
                  sub_10004FC84(__dst, *v14, v29);
                  goto LABEL_51;
                }
              }
              else if (v18)
              {
                CFStringRef theString2 = 0;
                *(_OWORD *)long long __dst = *(_OWORD *)v14;
                unint64_t v85 = v2[12];
LABEL_51:
                if (SHIBYTE(v85) < 0)
                {
                  sub_10004FC84(&__p, __dst[0], (unint64_t)__dst[1]);
                }
                else
                {
                  *(_OWORD *)&__p.var0 = *(_OWORD *)__dst;
                  __p.var2.__r_.__value_.var0.var1.__size_ = v85;
                }
                CFStringRef v90 = 0;
                if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0)
                {
                  sub_10004FC84(buf, *(void **)&__p.var0, (unint64_t)__p.var2.__r_.__value_.var0.var1.__data_);
                }
                else
                {
                  *(_OWORD *)std::string buf = *(_OWORD *)&__p.var0;
                  *(void *)&uint8_t buf[16] = __p.var2.__r_.__value_.var0.var1.__size_;
                }
                BOOL v76 = 0;
                if (ctu::cf::convert_copy())
                {
                  CFStringRef v31 = v90;
                  CFStringRef v90 = (const __CFString *)v76;
                  v74.__r_.__value_.__r.__words[0] = (std::string::size_type)v31;
                  sub_1000558F4((const void **)&v74.__r_.__value_.__l.__data_);
                }
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
                CFStringRef theString2 = v90;
                CFStringRef v90 = 0;
                sub_1000558F4((const void **)&v90);
                if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
                  operator delete(*(void **)&__p.var0);
                }
                if (SHIBYTE(v85) < 0) {
                  operator delete(__dst[0]);
                }
                memset(&v74, 0, sizeof(v74));
                CFTypeID v32 = *v73;
                if (*((char *)v2 + 103) < 0)
                {
                  sub_10004FC84(v80, (void *)v2[10], v2[11]);
                }
                else
                {
                  *(_OWORD *)__int16 v80 = *(_OWORD *)v14;
                  uint64_t v81 = v2[12];
                }
                uint64_t v82 = a1;
                uint64_t v83 = &v89;
                uint64_t v33 = (void **)(a1 + 840);
                if (v32 != v4)
                {
                  uint64_t v33 = v32;
                  while (1)
                  {
                    uint64_t v34 = v82;
                    uint64_t v103 = 0;
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    long long v100 = 0u;
                    memset(buf, 0, sizeof(buf));
                    CSIPhoneNumber::CSIPhoneNumber();
                    uint64_t v97 = 0;
                    long long v95 = 0u;
                    long long v96 = 0u;
                    *(_OWORD *)std::string::size_type v93 = 0u;
                    *(_OWORD *)int v94 = 0u;
                    long long v92 = 0u;
                    memset(&__p, 0, sizeof(__p));
                    CSIPhoneNumber::CSIPhoneNumber();
                    int isOriginalNumberSame = CSIPhoneNumber::isOriginalNumberSame((CSIPhoneNumber *)buf, &__p);
                    if (SHIBYTE(v95) < 0) {
                      operator delete(v94[1]);
                    }
                    if (SHIBYTE(v94[0]) < 0) {
                      operator delete(v93[0]);
                    }
                    if (SBYTE7(v92) < 0) {
                      operator delete(*(void **)&__p.var2.__r_.var0);
                    }
                    if (*((char *)&__p.var2.__r_.__value_.var0.var1 + 23) < 0) {
                      operator delete(__p.var2.__r_.__value_.var0.var1.__data_);
                    }
                    if (SHIBYTE(v101) < 0) {
                      operator delete(*((void **)&v100 + 1));
                    }
                    if (SBYTE7(v100) < 0) {
                      operator delete((void *)v99);
                    }
                    if ((buf[55] & 0x80000000) != 0) {
                      operator delete(*(void **)&buf[32]);
                    }
                    if ((buf[31] & 0x80000000) != 0)
                    {
                      operator delete(*(void **)&buf[8]);
                      if (isOriginalNumberSame)
                      {
LABEL_89:
                        if (sub_100C25A74(v34)) {
                          break;
                        }
                      }
                    }
                    else if (isOriginalNumberSame)
                    {
                      goto LABEL_89;
                    }
                    CFNumberRef v36 = (void **)v33[1];
                    if (v36)
                    {
                      do
                      {
                        int v37 = v36;
                        CFNumberRef v36 = (void **)*v36;
                      }
                      while (v36);
                    }
                    else
                    {
                      do
                      {
                        int v37 = (void **)v33[2];
                        BOOL v6 = *v37 == v33;
                        uint64_t v33 = v37;
                      }
                      while (!v6);
                    }
                    uint64_t v33 = v37;
                    if (v37 == v4)
                    {
                      uint64_t v33 = (void **)(a1 + 840);
                      break;
                    }
                  }
                }
                if (SHIBYTE(v81) < 0) {
                  operator delete(v80[0]);
                }
                if (v33 == v4)
                {
                  memset(buf, 0, 24);
                  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 120) + 80))(buf);
                  BOOL v39 = *(std::string **)buf;
                  CFMutableDictionaryRef v38 = *(std::string **)&buf[8];
                  while (v39 != v38)
                  {
                    if (!sub_10001D294((unsigned __int8 *)v39, (unsigned __int8 *)v2 + 32))
                    {
                      *(void *)&__p.var0 = 0;
                      (*(void (**)(std::string **__return_ptr))(**(void **)(a1 + 120) + 24))(&v76);
                      sub_100056248(&__p, (CFTypeRef *)&v76);
                      sub_1000577C4((const void **)&v76);
                      if (*(void *)&__p.var0) {
                        long long v40 = sub_1000810B8;
                      }
                      else {
                        long long v40 = 0;
                      }
                      if (v40
                        && CFEqual(*(CFStringRef *)&__p.var0, theString2)
                        && sub_100C25A74(a1))
                      {
                        std::string::operator=(&v74, v39);
                        sub_1000558F4((const void **)&__p);
                        break;
                      }
                      sub_1000558F4((const void **)&__p);
                    }
                    ++v39;
                  }
                  *(void *)&__p.var0 = buf;
                  sub_100047F64((void ***)&__p);
                }
                else if (!sub_10001D294((unsigned __int8 *)v33 + 32, (unsigned __int8 *)v2 + 32))
                {
                  std::string::operator=(&v74, (const std::string *)(v33 + 4));
                }
                std::string::size_type size = HIBYTE(v74.__r_.__value_.__r.__words[2]);
                int v42 = SHIBYTE(v74.__r_.__value_.__r.__words[2]);
                if ((v74.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type size = v74.__r_.__value_.__l.__size_;
                }
                if (size)
                {
                  uint64_t v43 = *(NSObject **)(a1 + 40);
                  if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v44 = (std::string *)v74.__r_.__value_.__r.__words[0];
                    if (v42 >= 0) {
                      uint64_t v44 = &v74;
                    }
                    BOOL v45 = v2 + 10;
                    if (*((char *)v2 + 103) < 0) {
                      BOOL v45 = *v14;
                    }
                    *(_DWORD *)std::string buf = 136315906;
                    *(void *)&uint8_t buf[4] = "";
                    *(_WORD *)&unsigned char buf[12] = 2080;
                    *(void *)&buf[14] = "";
                    *(_WORD *)&unsigned char buf[22] = 2080;
                    *(void *)&unsigned char buf[24] = v44;
                    *(_WORD *)&uint8_t buf[32] = 2080;
                    *(void *)&buf[34] = v45;
                    _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I %s%sDetected older Personality %s with the same MDN %s. Executing automatic transfer", buf, 0x2Au);
                  }
                  BOOL v30 = sub_100C2D174(a1, (uint64_t)&v74, (uint64_t)(v2 + 4), 0);
                }
                else
                {
                  BOOL v30 = 0;
                }
                (*(void (**)(void, void *, const __CFString *, CFStringRef, const __CFString *, void, void, void))(**(void **)(a1 + 120) + 16))(*(void *)(a1 + 120), v2 + 4, @"mdn", theString2, @"info", 0, 0, 0);
                if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(v74.__r_.__value_.__l.__data_);
                }
                sub_1000558F4((const void **)&theString2);
LABEL_129:
                uint64_t v46 = sub_100046F68((uint64_t)v73, (void **)v2 + 4);
                if (v4 == v46) {
                  goto LABEL_147;
                }
                __int16 v47 = (std::string *)(v46 + 17);
                uint64_t v48 = *((unsigned __int8 *)v46 + 159);
                if ((v48 & 0x80u) == 0) {
                  uint64_t v49 = (void *)*((unsigned __int8 *)v46 + 159);
                }
                else {
                  uint64_t v49 = v46[18];
                }
                unint64_t v50 = (void *)*((unsigned __int8 *)v2 + 103);
                int v51 = (char)v50;
                if ((char)v50 < 0) {
                  unint64_t v50 = (void *)v2[11];
                }
                if (v49 == v50)
                {
                  if (v51 >= 0) {
                    uint64_t v52 = (unsigned __int8 *)(v2 + 10);
                  }
                  else {
                    uint64_t v52 = (unsigned __int8 *)*v14;
                  }
                  if ((v48 & 0x80) == 0)
                  {
                    if (*((unsigned char *)v46 + 159))
                    {
                      BOOL v53 = (unsigned __int8 *)(v46 + 17);
                      while (*v53 == *v52)
                      {
                        ++v53;
                        ++v52;
                        if (!--v48) {
                          goto LABEL_147;
                        }
                      }
                      goto LABEL_146;
                    }
LABEL_147:
                    CFStringRef v54 = *(uint64_t **)(a1 + 608);
                    uint64_t v55 = *v54;
                    uint64_t v56 = v54[1];
                    if (*((char *)v2 + 55) < 0)
                    {
                      sub_10004FC84(v78, (void *)v2[4], v2[5]);
                    }
                    else
                    {
                      *(_OWORD *)uint64_t v78 = *v10;
                      uint64_t v79 = v2[6];
                    }
                    if (v55 != v56)
                    {
                      while (*(unsigned char *)(*(void *)v55 + 49)
                           || !sub_10001D294((unsigned __int8 *)(*(void *)v55 + 24), (unsigned __int8 *)v78))
                      {
                        v55 += 16;
                        if (v55 == v56)
                        {
                          uint64_t v55 = v56;
                          break;
                        }
                      }
                    }
                    if (SHIBYTE(v79) < 0) {
                      operator delete(v78[0]);
                    }
                    if (v55 != *(void *)(*(void *)(a1 + 608) + 8))
                    {
                      BOOL v76 = 0;
                      std::string v77 = 0;
                      sub_100612480(*(long long **)v55, &v76);
                      std::string::operator=(v76 + 3, (const std::string *)(v2 + 10));
                      CFTypeID v58 = v76;
                      CFStringRef v57 = v77;
                      if (v77) {
                        atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                      }
                      CFStringRef v59 = *(std::__shared_weak_count **)(v55 + 8);
                      *(void *)uint64_t v55 = v58;
                      *(void *)(v55 + 8) = v57;
                      if (v59) {
                        sub_10004D2C8(v59);
                      }
                      if (v30)
                      {
                        if (*((char *)v2 + 55) < 0)
                        {
                          sub_10004FC84(&v74, (void *)v2[4], v2[5]);
                        }
                        else
                        {
                          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *v10;
                          v74.__r_.__value_.__r.__words[2] = v2[6];
                        }
                        char v75 = 5;
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                        {
                          sub_10004FC84(&__p, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
                          char v60 = v75;
                        }
                        else
                        {
                          *(_OWORD *)&__p.var0 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
                          __p.var2.__r_.__value_.var0.var1.__size_ = v74.__r_.__value_.__r.__words[2];
                          char v60 = 5;
                        }
                        __p.var2.__r_.__value_.var0.var0.__data_[16] = v60;
                        *(void *)&__p.var2.__r_.var0 = v76;
                        __p.var2.var0 = (int64_t)v77;
                        if (v77) {
                          atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0)
                        {
                          sub_10004FC84(buf, *(void **)&__p.var0, (unint64_t)__p.var2.__r_.__value_.var0.var1.__data_);
                        }
                        else
                        {
                          *(_OWORD *)std::string buf = *(_OWORD *)&__p.var0;
                          *(void *)&uint8_t buf[16] = __p.var2.__r_.__value_.var0.var1.__size_;
                        }
                        unsigned char buf[24] = __p.var2.__r_.__value_.var0.var0.__data_[16];
                        *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)&__p.var2.__r_.var0;
                        *(void *)&__p.var2.__r_.var0 = 0;
                        __p.var2.var0 = 0;
                        uint64_t v61 = v87.i64[1];
                        if (v87.i64[1] >= v88)
                        {
                          v87.i64[1] = sub_100C2FC44(&v87, (long long *)buf);
                          if (*(void *)&buf[40]) {
                            sub_10004D2C8(*(std::__shared_weak_count **)&buf[40]);
                          }
                        }
                        else
                        {
                          if ((buf[23] & 0x80000000) != 0)
                          {
                            sub_10004FC84((unsigned char *)v87.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
                          }
                          else
                          {
                            long long v62 = *(_OWORD *)buf;
                            *(void *)(v87.i64[1] + 16) = *(void *)&buf[16];
                            *(_OWORD *)uint64_t v61 = v62;
                          }
                          *(unsigned char *)(v61 + 24) = buf[24];
                          *(_OWORD *)(v61 + 32) = *(_OWORD *)&buf[32];
                          *(_OWORD *)&uint8_t buf[32] = 0uLL;
                          v87.i64[1] = v61 + 48;
                        }
                        if ((buf[23] & 0x80000000) != 0) {
                          operator delete(*(void **)buf);
                        }
                        if (__p.var2.var0) {
                          sub_10004D2C8((std::__shared_weak_count *)__p.var2.var0);
                        }
                        if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
                          operator delete(*(void **)&__p.var0);
                        }
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v74.__r_.__value_.__l.__data_);
                        }
                      }
                      if (v76[2].__r_.__value_.__s.__data_[0])
                      {
                        if (*((char *)v2 + 55) < 0)
                        {
                          sub_10004FC84(&v74, (void *)v2[4], v2[5]);
                        }
                        else
                        {
                          *(_OWORD *)&v74.__r_.__value_.__l.__data_ = *v10;
                          v74.__r_.__value_.__r.__words[2] = v2[6];
                        }
                        char v75 = 3;
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0)
                        {
                          sub_10004FC84(&__p, v74.__r_.__value_.__l.__data_, v74.__r_.__value_.__l.__size_);
                          char v63 = v75;
                        }
                        else
                        {
                          *(_OWORD *)&__p.var0 = *(_OWORD *)&v74.__r_.__value_.__l.__data_;
                          __p.var2.__r_.__value_.var0.var1.__size_ = v74.__r_.__value_.__r.__words[2];
                          char v63 = 3;
                        }
                        __p.var2.__r_.__value_.var0.var0.__data_[16] = v63;
                        *(void *)&__p.var2.__r_.var0 = v76;
                        __p.var2.var0 = (int64_t)v77;
                        if (v77) {
                          atomic_fetch_add_explicit(&v77->__shared_owners_, 1uLL, memory_order_relaxed);
                        }
                        if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0)
                        {
                          sub_10004FC84(buf, *(void **)&__p.var0, (unint64_t)__p.var2.__r_.__value_.var0.var1.__data_);
                        }
                        else
                        {
                          *(_OWORD *)std::string buf = *(_OWORD *)&__p.var0;
                          *(void *)&uint8_t buf[16] = __p.var2.__r_.__value_.var0.var1.__size_;
                        }
                        unsigned char buf[24] = __p.var2.__r_.__value_.var0.var0.__data_[16];
                        *(_OWORD *)&uint8_t buf[32] = *(_OWORD *)&__p.var2.__r_.var0;
                        *(void *)&__p.var2.__r_.var0 = 0;
                        __p.var2.var0 = 0;
                        uint64_t v64 = v87.i64[1];
                        if (v87.i64[1] >= v88)
                        {
                          v87.i64[1] = sub_100C2FC44(&v87, (long long *)buf);
                          if (*(void *)&buf[40]) {
                            sub_10004D2C8(*(std::__shared_weak_count **)&buf[40]);
                          }
                        }
                        else
                        {
                          if ((buf[23] & 0x80000000) != 0)
                          {
                            sub_10004FC84((unsigned char *)v87.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
                          }
                          else
                          {
                            long long v65 = *(_OWORD *)buf;
                            *(void *)(v87.i64[1] + 16) = *(void *)&buf[16];
                            *(_OWORD *)uint64_t v64 = v65;
                          }
                          *(unsigned char *)(v64 + 24) = buf[24];
                          *(_OWORD *)(v64 + 32) = *(_OWORD *)&buf[32];
                          *(_OWORD *)&uint8_t buf[32] = 0uLL;
                          v87.i64[1] = v64 + 48;
                        }
                        if ((buf[23] & 0x80000000) != 0) {
                          operator delete(*(void **)buf);
                        }
                        if (__p.var2.var0) {
                          sub_10004D2C8((std::__shared_weak_count *)__p.var2.var0);
                        }
                        if (__p.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
                          operator delete(*(void **)&__p.var0);
                        }
                        if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
                          operator delete(v74.__r_.__value_.__l.__data_);
                        }
                      }
                      if (v77) {
                        sub_10004D2C8(v77);
                      }
                      char v72 = 1;
                    }
                    goto LABEL_219;
                  }
                  if (!memcmp(v47->__r_.__value_.__l.__data_, v52, (size_t)v46[18])) {
                    goto LABEL_147;
                  }
                }
LABEL_146:
                std::string::operator=(v47, (const std::string *)(v2 + 10));
                goto LABEL_147;
              }
              (*(void (**)(void, void *, const __CFString *, const __CFString *, void, void))(**(void **)(a1 + 120) + 32))(*(void *)(a1 + 120), v2 + 4, @"mdn", @"info", 0, 0);
              BOOL v30 = 0;
              goto LABEL_129;
            }
          }
LABEL_219:
          if (v13) {
            sub_10004D2C8(v13);
          }
        }
      }
    }
    long long v66 = (void *)v2[1];
    if (v66)
    {
      do
      {
        long long v67 = v66;
        long long v66 = (void *)*v66;
      }
      while (v66);
    }
    else
    {
      do
      {
        long long v67 = (void *)v2[2];
        BOOL v6 = *v67 == (void)v2;
        uint64_t v2 = v67;
      }
      while (!v6);
    }
    uint64_t v2 = v67;
  }
  while (v67 != v3);
  if (v72) {
    sub_100C19920(a1, 1);
  }
LABEL_229:
  uint64_t v68 = v87.i64[0];
  if (v87.i64[1] != v87.i64[0])
  {
    uint64_t v69 = 0;
    unint64_t v70 = 0;
    do
    {
      sub_100C1AE18((void *)a1, v68 + v69);
      ++v70;
      uint64_t v68 = v87.i64[0];
      v69 += 48;
    }
    while (v70 < 0xAAAAAAAAAAAAAAABLL * ((v87.i64[1] - v87.i64[0]) >> 4));
  }
  sub_100C1E074(a1, "phone number changed", 0);
  *(void *)std::string buf = &v87;
  sub_100C30EFC((void ***)buf);
}

void sub_100C2EE00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,const void *a44,__int16 a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50)
{
  sub_1000558F4((const void **)&a50);
  a50 = (void *)(v51 - 240);
  sub_100047F64((void ***)&a50);
  if (a26 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a44);
  if (v50) {
    sub_10004D2C8(v50);
  }
  CSIPhoneNumber __p = &a45;
  sub_100C30EFC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100C2F054(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_100C40A70;
  void v6[3] = &unk_101A49418;
  v6[4] = a1 + 8;
  v6[5] = v5;
  uint64_t v7 = v6;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0;
    a3[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_100C40CA0;
    uint64_t v11 = &unk_101A49458;
    uint64_t v12 = a3;
    long long v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_100C40C38;
    uint64_t v11 = &unk_101A49438;
    uint64_t v12 = a3;
    long long v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

void sub_100C2F174(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)CSIPhoneNumber __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2F2CC(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2F398(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)CSIPhoneNumber __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

BOOL sub_100C2F4E4(os_unfair_lock_s *a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)CSIPhoneNumber __p = *(_OWORD *)a2;
    uint64_t v6 = *(void *)(a2 + 16);
  }
  BOOL v3 = sub_100C16CE8(a1, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  return v3;
}

void sub_100C2F55C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C2F578(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)CSIPhoneNumber __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  BOOL v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2F6C4(void **a1, unint64_t a2)
{
  if (a2 > ((unsigned char *)a1[2] - (unsigned char *)*a1) >> 4)
  {
    if (a2 >> 60) {
      sub_10006A748();
    }
    int64_t v3 = (unsigned char *)a1[1] - (unsigned char *)*a1;
    uint64_t v4 = (char *)sub_1009C886C(a2);
    uint64_t v5 = &v4[v3 & 0xFFFFFFFFFFFFFFF0];
    uint64_t v7 = &v4[16 * v6];
    uint64_t v9 = (char *)*a1;
    uint64_t v8 = (char *)a1[1];
    uint64_t v10 = v5;
    if (v8 != *a1)
    {
      do
      {
        *((_OWORD *)v10 - 1) = *((_OWORD *)v8 - 1);
        v10 -= 16;
        v8 -= 16;
      }
      while (v8 != v9);
      uint64_t v8 = (char *)*a1;
    }
    *a1 = v10;
    a1[1] = v5;
    a1[2] = v7;
    if (v8)
    {
      operator delete(v8);
    }
  }
}

void sub_100C2F778(uint64_t a1, const void *a2, uint64_t a3)
{
  uint64_t v6 = a1;
  sub_100C416C4((uint64_t)v7, a3);
  v7[4] = a2;
  if (a2) {
    CFRetain(a2);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C2F8DC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100C2F8F4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56)) {
    sub_10023A670(a1 + 32, *(void **)(a1 + 40));
  }

  return sub_100C2F93C((void *)a1);
}

void *sub_100C2F93C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100C2F9C0(uint64_t a1)
{
  uint64_t v2 = *(void ***)(a1 + 8);
  int64_t v3 = *(void ***)(a1 + 16);
  if (v3 == v2)
  {
    uint64_t v4 = (void *)(a1 + 40);
    int64_t v3 = *(void ***)(a1 + 8);
  }
  else
  {
    uint64_t v4 = (void *)(a1 + 40);
    unint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = &v2[v5 / 0x55];
    uint64_t v7 = (uint64_t)*v6 + 48 * (v5 % 0x55);
    unint64_t v8 = (unint64_t)v2[(*(void *)(a1 + 40) + v5) / 0x55] + 48 * ((*(void *)(a1 + 40) + v5) % 0x55);
    if (v7 != v8)
    {
      do
      {
        sub_100C2FB2C(v7);
        v7 += 48;
        if (v7 - (void)*v6 == 4080)
        {
          uint64_t v9 = (uint64_t)v6[1];
          ++v6;
          uint64_t v7 = v9;
        }
      }
      while (v7 != v8);
      uint64_t v2 = *(void ***)(a1 + 8);
      int64_t v3 = *(void ***)(a1 + 16);
    }
  }
  *uint64_t v4 = 0;
  unint64_t v10 = (char *)v3 - (char *)v2;
  if ((unint64_t)((char *)v3 - (char *)v2) >= 0x11)
  {
    do
    {
      operator delete(*v2);
      int64_t v3 = *(void ***)(a1 + 16);
      uint64_t v2 = (void **)(*(void *)(a1 + 8) + 8);
      *(void *)(a1 + 8) = v2;
      unint64_t v10 = (char *)v3 - (char *)v2;
    }
    while ((unint64_t)((char *)v3 - (char *)v2) > 0x10);
  }
  unint64_t v11 = v10 >> 3;
  if (v11 == 1)
  {
    uint64_t v12 = 42;
    goto LABEL_14;
  }
  if (v11 == 2)
  {
    uint64_t v12 = 85;
LABEL_14:
    *(void *)(a1 + 32) = v12;
  }
  if (v2 != v3)
  {
    do
    {
      long long v13 = *v2++;
      operator delete(v13);
    }
    while (v2 != v3);
    uint64_t v15 = *(void *)(a1 + 8);
    uint64_t v14 = *(void *)(a1 + 16);
    if (v14 != v15) {
      *(void *)(a1 + 16) = v14 + ((v15 - v14 + 7) & 0xFFFFFFFFFFFFFFF8);
    }
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100C2FB2C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    int64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void *sub_100C2FB80(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_100C2FBC0(a1);
}

void *sub_100C2FBC0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100C2FC44(int64x2_t *a1, long long *a2)
{
  unint64_t v2 = 0xAAAAAAAAAAAAAAABLL * ((a1->i64[1] - a1->i64[0]) >> 4);
  unint64_t v3 = v2 + 1;
  if (v2 + 1 > 0x555555555555555) {
    sub_10006A748();
  }
  if (0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4) > v3) {
    unint64_t v3 = 0x5555555555555556 * ((a1[1].i64[0] - a1->i64[0]) >> 4);
  }
  if (0xAAAAAAAAAAAAAAABLL * ((a1[1].i64[0] - a1->i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
    unint64_t v6 = 0x555555555555555;
  }
  else {
    unint64_t v6 = v3;
  }
  uint64_t v24 = a1 + 1;
  if (v6)
  {
    if (v6 > 0x555555555555555) {
      sub_10006A7CC();
    }
    uint64_t v7 = (char *)operator new(48 * v6);
  }
  else
  {
    uint64_t v7 = 0;
  }
  CFNumberRef v21 = v7;
  v22.i64[0] = (uint64_t)&v7[48 * v2];
  BOOL v23 = &v7[48 * v6];
  sub_100C2FE28(v22.i64[0], a2);
  uint64_t v8 = v22.i64[0];
  uint64_t v9 = v22.i64[0] + 48;
  v22.i64[1] = v22.i64[0] + 48;
  uint64_t v11 = a1->i64[0];
  unint64_t v10 = a1->u64[1];
  if (v10 == a1->i64[0])
  {
    int64x2_t v18 = vdupq_n_s64(v10);
  }
  else
  {
    uint64_t v12 = 0;
    do
    {
      long long v13 = (unsigned char *)(v8 + v12 - 48);
      uint64_t v14 = (void **)(v10 + v12 - 48);
      if (*(char *)(v10 + v12 - 25) < 0)
      {
        sub_10004FC84(v13, *v14, *(void *)(v10 + v12 - 40));
      }
      else
      {
        long long v15 = *(_OWORD *)v14;
        *(void *)(v8 + v12 - 32) = *(void *)(v10 + v12 - 32);
        *(_OWORD *)long long v13 = v15;
      }
      uint64_t v16 = v8 + v12;
      *(unsigned char *)(v16 - 24) = *(unsigned char *)(v10 + v12 - 24);
      *(void *)(v16 - 16) = *(void *)(v10 + v12 - 16);
      uint64_t v17 = *(void *)(v10 + v12 - 8);
      *(void *)(v16 - 8) = v17;
      if (v17) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
      }
      v12 -= 48;
    }
    while (v10 + v12 != v11);
    int64x2_t v18 = *a1;
    uint64_t v9 = v22.i64[1];
    v8 += v12;
  }
  a1->i64[0] = v8;
  a1->i64[1] = v9;
  int64x2_t v22 = v18;
  uint64_t v19 = (char *)a1[1].i64[0];
  a1[1].i64[0] = (uint64_t)v23;
  BOOL v23 = v19;
  CFNumberRef v21 = (char *)v18.i64[0];
  sub_100C2FE8C((uint64_t)&v21);
  return v9;
}

void sub_100C2FDF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C2FE8C((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100C2FE28(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((unsigned char *)__dst + 24) = *((unsigned char *)a2 + 24);
  *((_OWORD *)__dst + 2) = a2[2];
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  return __dst;
}

uint64_t sub_100C2FE8C(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_100C2FB2C(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100C2FEDC(void *__dst, long long *a2, void *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v6;
  }
  *((unsigned char *)__dst + 24) = *((unsigned char *)a2 + 24);
  uint64_t v7 = a3[1];
  __dst[4] = *a3;
  __dst[5] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return __dst;
}

std::string *sub_100C2FF58(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    unint64_t v5 = __str;
    do
      std::string::operator=(this++, v5++);
    while (v5 != a2);
  }
  return this;
}

uint64_t sub_100C2FFB0(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 8) + 8);
    for (uint64_t i = *(void *)(*(void *)(a1 + 16) + 8); i != v3; i += 32)
    {
      if (*(char *)(i + 23) < 0) {
        operator delete(*(void **)i);
      }
    }
  }
  return a1;
}

void sub_100C30010(std::string *a1, std::string *a2, uint64_t a3, char a4)
{
  while (2)
  {
    unint64_t v10 = a1;
    while (1)
    {
      while (1)
      {
        a1 = v10;
        uint64_t v11 = (char *)a2 - (char *)v10;
        uint64_t v12 = ((char *)a2 - (char *)v10) >> 5;
        if (!(!v5 & v4))
        {
          switch(v12)
          {
            case 0:
            case 1:
              return;
            case 2:
              if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] <= (int64_t)a1[1].__r_.__value_.__r.__words[0]) {
                return;
              }
              long long v40 = a1;
              uint64_t v41 = (std::string *)((char *)a2 - 32);
              break;
            case 3:
              sub_100C30A3C(a1, (std::string *)((char *)a1 + 32), (std::string *)((char *)a2 - 32));
              return;
            case 4:
              sub_100C30E54(a1, (std::string *)((char *)a1 + 32), (std::string *)((char *)a1 + 64), (std::string *)((char *)a2 - 32));
              return;
            case 5:
              sub_100C30E54(a1, (std::string *)((char *)a1 + 32), (std::string *)((char *)a1 + 64), a1 + 4);
              if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] <= (int64_t)a1[5].__r_.__value_.__r.__words[0]) {
                return;
              }
              sub_100C30DA4(a1 + 4, (std::string *)((char *)a2 - 32));
              if ((int64_t)a1[5].__r_.__value_.__r.__words[0] <= (int64_t)a1[3].__r_.__value_.__r.__words[2]) {
                return;
              }
              sub_100C30DA4((std::string *)((char *)a1 + 64), a1 + 4);
              if ((int64_t)a1[3].__r_.__value_.__r.__words[2] <= (int64_t)a1[2].__r_.__value_.__l.__size_) {
                return;
              }
              sub_100C30DA4((std::string *)((char *)a1 + 32), (std::string *)((char *)a1 + 64));
              if ((int64_t)a1[2].__r_.__value_.__l.__size_ <= (int64_t)a1[1].__r_.__value_.__r.__words[0]) {
                return;
              }
              long long v40 = a1;
              uint64_t v41 = (std::string *)((char *)a1 + 32);
              break;
            default:
              JUMPOUT(0);
          }
          sub_100C30DA4(v40, v41);
          return;
        }
        if (v11 <= 767)
        {
          if (a4)
          {
            if (a1 != a2)
            {
              int v42 = &a1[1].__r_.__value_.__s.__data_[8];
              if (&a1[1].__r_.__value_.__r.__words[1] != (std::string::size_type *)a2)
              {
                uint64_t v43 = 0;
                uint64_t v44 = a1;
                do
                {
                  BOOL v45 = (std::string *)v42;
                  int64_t size = v44[2].__r_.__value_.__l.__size_;
                  if (size > (int64_t)v44[1].__r_.__value_.__r.__words[0])
                  {
                    memset(__str, 0, sizeof(__str));
                    if (v44[2].__r_.__value_.__s.__data_[7] < 0)
                    {
                      sub_10004FC84(__str, v45->__r_.__value_.__l.__data_, v44[1].__r_.__value_.__r.__words[2]);
                      int64_t size = v44[2].__r_.__value_.__l.__size_;
                    }
                    else
                    {
                      long long v47 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
                      *(void *)&__str[16] = *((void *)&v45->__r_.__value_.__l + 2);
                      *(_OWORD *)std::string __str = v47;
                    }
                    *(void *)&__str[24] = size;
                    uint64_t v48 = v43;
                    while (1)
                    {
                      std::string::operator=((std::string *)((char *)a1 + v48 + 32), (std::string *)((char *)a1 + v48));
                      *(std::string::size_type *)((char *)&a1[2].__r_.__value_.__l.__size_ + v48) = *(std::string::size_type *)((char *)a1[1].__r_.__value_.__r.__words + v48);
                      if (!v48) {
                        break;
                      }
                      uint64_t v49 = *(void *)((char *)&a1->__r_.__value_.__l + v48 - 8);
                      v48 -= 32;
                      if (*(uint64_t *)&__str[24] <= v49)
                      {
                        unint64_t v50 = (std::string *)((char *)a1 + v48 + 32);
                        goto LABEL_89;
                      }
                    }
                    unint64_t v50 = a1;
LABEL_89:
                    std::string::operator=(v50, (const std::string *)__str);
                    v50[1].__r_.__value_.__r.__words[0] = *(void *)&__str[24];
                    if ((__str[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__str);
                    }
                  }
                  int v42 = &v45[1].__r_.__value_.__s.__data_[8];
                  v43 += 32;
                  uint64_t v44 = v45;
                }
                while (&v45[1].__r_.__value_.__r.__words[1] != (std::string::size_type *)a2);
              }
            }
          }
          else if (a1 != a2)
          {
            char v84 = (std::string *)((char *)a1 + 32);
            while (v84 != a2)
            {
              unint64_t v85 = v84;
              int64_t v86 = a1[2].__r_.__value_.__l.__size_;
              if (v86 > (int64_t)a1[1].__r_.__value_.__r.__words[0])
              {
                memset(__str, 0, sizeof(__str));
                if (a1[2].__r_.__value_.__s.__data_[7] < 0)
                {
                  sub_10004FC84(__str, v85->__r_.__value_.__l.__data_, a1[1].__r_.__value_.__r.__words[2]);
                  int64_t v86 = a1[2].__r_.__value_.__l.__size_;
                }
                else
                {
                  long long v87 = *(_OWORD *)&v85->__r_.__value_.__l.__data_;
                  *(void *)&__str[16] = *((void *)&v85->__r_.__value_.__l + 2);
                  *(_OWORD *)std::string __str = v87;
                }
                *(void *)&__str[24] = v86;
                do
                {
                  std::string::operator=((std::string *)((char *)a1 + 32), a1);
                  a1[2].__r_.__value_.__l.__size_ = a1[1].__r_.__value_.__r.__words[0];
                  unint64_t v88 = &a1[-2].__r_.__value_.__s.__data_[16];
                  uint64_t v89 = a1[-1].__r_.__value_.__r.__words[2];
                  a1 = (std::string *)((char *)a1 - 32);
                }
                while (*(uint64_t *)&__str[24] > v89);
                std::string::operator=((std::string *)(v88 + 32), (const std::string *)__str);
                *((void *)v88 + 7) = *(void *)&__str[24];
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
              }
              char v84 = (std::string *)((char *)v85 + 32);
              a1 = v85;
            }
          }
          return;
        }
        if (!a3)
        {
          if (a1 != a2)
          {
            int64_t v51 = (unint64_t)(v12 - 2) >> 1;
            int64_t v52 = v51;
            do
            {
              int64_t v53 = v52;
              if (v51 >= v52)
              {
                uint64_t v54 = (2 * v52) | 1;
                uint64_t v55 = (std::string *)((char *)a1 + 32 * v54);
                if (2 * v52 + 2 < v12)
                {
                  std::string::pointer data = v55[1].__r_.__value_.__l.__data_;
                  int64_t v57 = v55[2].__r_.__value_.__l.__size_;
                  uint64_t v55 = (const std::string *)((char *)v55 + 32 * ((uint64_t)data > v57));
                  if ((uint64_t)data > v57) {
                    uint64_t v54 = 2 * v52 + 2;
                  }
                }
                CFTypeID v58 = (char *)a1 + 32 * v52;
                int64_t v61 = *((void *)v58 + 3);
                char v60 = (int64_t *)(v58 + 24);
                int64_t v59 = v61;
                if ((int64_t)v55[1].__r_.__value_.__r.__words[0] <= v61)
                {
                  long long v62 = (std::string *)((char *)a1 + 32 * v53);
                  memset(__str, 0, sizeof(__str));
                  if (SHIBYTE(v62->__r_.__value_.__r.__words[2]) < 0)
                  {
                    sub_10004FC84(__str, v62->__r_.__value_.__l.__data_, v62->__r_.__value_.__l.__size_);
                    int64_t v59 = *v60;
                  }
                  else
                  {
                    long long v63 = *(_OWORD *)&v62->__r_.__value_.__l.__data_;
                    *(void *)&__str[16] = *((void *)&v62->__r_.__value_.__l + 2);
                    *(_OWORD *)std::string __str = v63;
                  }
                  *(void *)&__str[24] = v59;
                  do
                  {
                    uint64_t v64 = (std::string *)v55;
                    std::string::operator=(v62, v55);
                    v62[1].__r_.__value_.__r.__words[0] = v55[1].__r_.__value_.__r.__words[0];
                    if (v51 < v54) {
                      break;
                    }
                    uint64_t v65 = (2 * v54) | 1;
                    uint64_t v55 = (std::string *)((char *)a1 + 32 * v65);
                    if (2 * v54 + 2 < v12)
                    {
                      std::string::pointer v66 = v55[1].__r_.__value_.__l.__data_;
                      int64_t v67 = v55[2].__r_.__value_.__l.__size_;
                      uint64_t v55 = (const std::string *)((char *)v55 + 32 * ((uint64_t)v66 > v67));
                      if ((uint64_t)v66 > v67) {
                        uint64_t v65 = 2 * v54 + 2;
                      }
                    }
                    long long v62 = v64;
                    uint64_t v54 = v65;
                  }
                  while ((int64_t)v55[1].__r_.__value_.__r.__words[0] <= *(uint64_t *)&__str[24]);
                  std::string::operator=(v64, (const std::string *)__str);
                  v64[1].__r_.__value_.__r.__words[0] = *(void *)&__str[24];
                  if ((__str[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__str);
                  }
                }
              }
              int64_t v52 = v53 - 1;
            }
            while (v53);
            uint64_t v68 = (unint64_t)v11 >> 5;
            do
            {
              memset(__dst, 0, sizeof(__dst));
              if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
              {
                sub_10004FC84(__dst, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
              }
              else
              {
                long long v69 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
                *(void *)&__dst[16] = *((void *)&a1->__r_.__value_.__l + 2);
                *(_OWORD *)long long __dst = v69;
              }
              uint64_t v70 = 0;
              *(void *)&__dst[24] = a1[1].__r_.__value_.__l.__data_;
              std::string::size_type v71 = a1;
              do
              {
                char v72 = (std::string *)((char *)v71 + 32 * v70 + 32);
                uint64_t v73 = 2 * v70;
                uint64_t v70 = (2 * v70) | 1;
                uint64_t v74 = v73 + 2;
                if (v73 + 2 < v68)
                {
                  std::string::pointer v75 = v72[1].__r_.__value_.__l.__data_;
                  int64_t v76 = v72[2].__r_.__value_.__l.__size_;
                  char v72 = (std::string *)((char *)v72 + 32 * ((uint64_t)v75 > v76));
                  if ((uint64_t)v75 > v76) {
                    uint64_t v70 = v74;
                  }
                }
                std::string::operator=(v71, v72);
                v71[1].__r_.__value_.__r.__words[0] = v72[1].__r_.__value_.__r.__words[0];
                std::string::size_type v71 = v72;
              }
              while (v70 <= (uint64_t)((unint64_t)(v68 - 2) >> 1));
              std::string v77 = (std::string *)((char *)a2 - 32);
              if (v72 == (std::string *)&a2[-2].__r_.__value_.__r.__words[2])
              {
                std::string::operator=(v72, (const std::string *)__dst);
                v72[1].__r_.__value_.__r.__words[0] = *(void *)&__dst[24];
              }
              else
              {
                std::string::operator=(v72, (std::string *)((char *)a2 - 32));
                v72[1].__r_.__value_.__r.__words[0] = a2[-1].__r_.__value_.__r.__words[2];
                std::string::operator=((std::string *)((char *)a2 - 32), (const std::string *)__dst);
                a2[-1].__r_.__value_.__r.__words[2] = *(void *)&__dst[24];
                uint64_t v78 = (char *)v72 - (char *)a1 + 32;
                if (v78 >= 33)
                {
                  unint64_t v79 = (((unint64_t)v78 >> 5) - 2) >> 1;
                  std::string::pointer v80 = v72[1].__r_.__value_.__l.__data_;
                  if ((int64_t)a1[1].__r_.__value_.__r.__words[4 * v79] > (uint64_t)v80)
                  {
                    memset(__str, 0, sizeof(__str));
                    if (SHIBYTE(v72->__r_.__value_.__r.__words[2]) < 0)
                    {
                      sub_10004FC84(__str, v72->__r_.__value_.__l.__data_, v72->__r_.__value_.__l.__size_);
                      std::string::pointer v80 = v72[1].__r_.__value_.__l.__data_;
                    }
                    else
                    {
                      long long v81 = *(_OWORD *)&v72->__r_.__value_.__l.__data_;
                      *(void *)&__str[16] = *((void *)&v72->__r_.__value_.__l + 2);
                      *(_OWORD *)std::string __str = v81;
                    }
                    *(void *)&__str[24] = v80;
                    do
                    {
                      uint64_t v82 = (std::string *)((char *)a1 + 32 * v79);
                      std::string::operator=(v72, v82);
                      v72[1].__r_.__value_.__r.__words[0] = v82[1].__r_.__value_.__r.__words[0];
                      if (!v79) {
                        break;
                      }
                      unint64_t v79 = (v79 - 1) >> 1;
                      char v72 = v82;
                    }
                    while ((int64_t)a1[1].__r_.__value_.__r.__words[4 * v79] > *(uint64_t *)&__str[24]);
                    std::string::operator=(v82, (const std::string *)__str);
                    v82[1].__r_.__value_.__r.__words[0] = *(void *)&__str[24];
                    if ((__str[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__str);
                    }
                  }
                }
              }
              if ((__dst[23] & 0x80000000) != 0) {
                operator delete(*(void **)__dst);
              }
              a2 = v77;
            }
            while (v68-- > 2);
          }
          return;
        }
        unint64_t v13 = (unint64_t)v12 >> 1;
        uint64_t v14 = (std::string *)((char *)a1 + 32 * ((unint64_t)v12 >> 1));
        if ((unint64_t)v11 <= 0x1000)
        {
          sub_100C30A3C(v14, a1, (std::string *)((char *)a2 - 32));
        }
        else
        {
          sub_100C30A3C(a1, v14, (std::string *)((char *)a2 - 32));
          sub_100C30A3C((std::string *)((char *)a1 + 32), (std::string *)((char *)v14 - 32), (std::string *)((char *)a2 - 64));
          sub_100C30A3C((std::string *)((char *)a1 + 64), (std::string *)&a1[1].__r_.__value_.__r.__words[4 * v13 + 1], a2 - 4);
          sub_100C30A3C((std::string *)((char *)v14 - 32), v14, (std::string *)&a1[1].__r_.__value_.__r.__words[4 * v13 + 1]);
          sub_100C30DA4(a1, v14);
        }
        --a3;
        if ((a4 & 1) != 0
          || (int64_t)a1[-1].__r_.__value_.__r.__words[2] > (int64_t)a1[1].__r_.__value_.__r.__words[0])
        {
          break;
        }
        memset(__str, 0, sizeof(__str));
        if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(__str, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v29 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
          *(void *)&__str[16] = *((void *)&a1->__r_.__value_.__l + 2);
          *(_OWORD *)std::string __str = v29;
        }
        int64_t v30 = (int64_t)a1[1].__r_.__value_.__l.__data_;
        *(void *)&__str[24] = v30;
        if (v30 <= (int64_t)a2[-1].__r_.__value_.__r.__words[2])
        {
          uint64_t v33 = (std::string *)((char *)a1 + 32);
          do
          {
            unint64_t v10 = v33;
            if (v33 >= a2) {
              break;
            }
            std::string::pointer v34 = v33[1].__r_.__value_.__l.__data_;
            uint64_t v33 = (std::string *)((char *)v33 + 32);
          }
          while (v30 <= (uint64_t)v34);
        }
        else
        {
          CFStringRef v31 = a1;
          do
          {
            unint64_t v10 = (std::string *)((char *)v31 + 32);
            int64_t v32 = v31[2].__r_.__value_.__l.__size_;
            CFStringRef v31 = (std::string *)((char *)v31 + 32);
          }
          while (v30 <= v32);
        }
        CFTypeID v35 = a2;
        if (v10 < a2)
        {
          CFNumberRef v36 = a2;
          do
          {
            CFTypeID v35 = (std::string *)((char *)v36 - 32);
            int64_t v37 = v36[-1].__r_.__value_.__r.__words[2];
            CFNumberRef v36 = (std::string *)((char *)v36 - 32);
          }
          while (v30 > v37);
        }
        while (v10 < v35)
        {
          sub_100C30DA4(v10, v35);
          do
          {
            uint64_t v38 = v10[2].__r_.__value_.__l.__size_;
            unint64_t v10 = (std::string *)((char *)v10 + 32);
          }
          while (*(uint64_t *)&__str[24] <= v38);
          do
          {
            uint64_t v39 = v35[-1].__r_.__value_.__r.__words[2];
            CFTypeID v35 = (std::string *)((char *)v35 - 32);
          }
          while (*(uint64_t *)&__str[24] > v39);
        }
        if (&v10[-2].__r_.__value_.__r.__words[2] != (std::string::size_type *)a1)
        {
          std::string::operator=(a1, (std::string *)((char *)v10 - 32));
          a1[1].__r_.__value_.__r.__words[0] = v10[-1].__r_.__value_.__r.__words[2];
        }
        std::string::operator=((std::string *)((char *)v10 - 32), (const std::string *)__str);
        v10[-1].__r_.__value_.__r.__words[2] = *(void *)&__str[24];
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
LABEL_40:
        a4 = 0;
      }
      memset(__str, 0, sizeof(__str));
      if (SHIBYTE(a1->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(__str, a1->__r_.__value_.__l.__data_, a1->__r_.__value_.__l.__size_);
      }
      else
      {
        long long v15 = *(_OWORD *)&a1->__r_.__value_.__l.__data_;
        *(void *)&__str[16] = *((void *)&a1->__r_.__value_.__l + 2);
        *(_OWORD *)std::string __str = v15;
      }
      uint64_t v16 = 0;
      std::string::pointer v17 = a1[1].__r_.__value_.__l.__data_;
      *(void *)&__str[24] = v17;
      do
      {
        uint64_t v18 = *(std::string::size_type *)((char *)&a1[2].__r_.__value_.__l.__size_ + v16);
        v16 += 32;
      }
      while (v18 > (uint64_t)v17);
      uint64_t v19 = (std::string *)((char *)a1 + v16);
      BOOL v20 = a2;
      if (v16 == 32)
      {
        BOOL v23 = a2;
        while (v19 < v23)
        {
          CFNumberRef v21 = (std::string *)((char *)v23 - 32);
          uint64_t v24 = v23[-1].__r_.__value_.__r.__words[2];
          BOOL v23 = (std::string *)((char *)v23 - 32);
          if (v24 > (uint64_t)v17) {
            goto LABEL_24;
          }
        }
        CFNumberRef v21 = v23;
      }
      else
      {
        do
        {
          CFNumberRef v21 = (std::string *)((char *)v20 - 32);
          uint64_t v22 = v20[-1].__r_.__value_.__r.__words[2];
          BOOL v20 = (std::string *)((char *)v20 - 32);
        }
        while (v22 <= (uint64_t)v17);
      }
LABEL_24:
      if (v19 >= v21)
      {
        unint64_t v10 = v19;
      }
      else
      {
        uint64_t v25 = v21;
        unint64_t v10 = v19;
        do
        {
          sub_100C30DA4(v10, v25);
          do
          {
            uint64_t v26 = v10[2].__r_.__value_.__l.__size_;
            unint64_t v10 = (std::string *)((char *)v10 + 32);
          }
          while (v26 > *(uint64_t *)&__str[24]);
          do
          {
            uint64_t v27 = v25[-1].__r_.__value_.__r.__words[2];
            uint64_t v25 = (std::string *)((char *)v25 - 32);
          }
          while (v27 <= *(uint64_t *)&__str[24]);
        }
        while (v10 < v25);
      }
      if (&v10[-2].__r_.__value_.__r.__words[2] != (std::string::size_type *)a1)
      {
        std::string::operator=(a1, (std::string *)((char *)v10 - 32));
        a1[1].__r_.__value_.__r.__words[0] = v10[-1].__r_.__value_.__r.__words[2];
      }
      std::string::operator=((std::string *)((char *)v10 - 32), (const std::string *)__str);
      v10[-1].__r_.__value_.__r.__words[2] = *(void *)&__str[24];
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (v19 < v21)
      {
LABEL_39:
        sub_100C30010(a1, &v10[-2].__r_.__value_.__r.__words[2], a3, a4 & 1);
        goto LABEL_40;
      }
      BOOL v28 = sub_100C30AFC(a1, (std::string *)((char *)v10 - 32));
      if (sub_100C30AFC(v10, a2)) {
        break;
      }
      if (!v28) {
        goto LABEL_39;
      }
    }
    a2 = (std::string *)((char *)v10 - 32);
    if (!v28) {
      continue;
    }
    break;
  }
}

void sub_100C309B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C30A3C(std::string *this, std::string *a2, std::string *__str)
{
  char v5 = this;
  std::string::pointer data = a2[1].__r_.__value_.__l.__data_;
  std::string::pointer v7 = __str[1].__r_.__value_.__l.__data_;
  if ((uint64_t)data <= (int64_t)this[1].__r_.__value_.__r.__words[0])
  {
    if ((uint64_t)v7 <= (uint64_t)data) {
      return;
    }
    sub_100C30DA4(a2, __str);
    if ((int64_t)a2[1].__r_.__value_.__r.__words[0] <= (int64_t)v5[1].__r_.__value_.__r.__words[0]) {
      return;
    }
    this = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if ((uint64_t)v7 <= (uint64_t)data)
    {
      sub_100C30DA4(this, a2);
      if ((int64_t)__str[1].__r_.__value_.__r.__words[0] <= (int64_t)a2[1].__r_.__value_.__r.__words[0]) {
        return;
      }
      this = a2;
    }
    uint64_t v8 = __str;
  }

  sub_100C30DA4(this, v8);
}

BOOL sub_100C30AFC(std::string *this, std::string *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)this) >> 5;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] > (int64_t)this[1].__r_.__value_.__r.__words[0])
      {
        long long v6 = (std::string *)((char *)a2 - 32);
        std::string::pointer v7 = this;
        goto LABEL_4;
      }
      return result;
    case 3:
      sub_100C30A3C(this, (std::string *)((char *)this + 32), (std::string *)((char *)a2 - 32));
      return 1;
    case 4:
      sub_100C30E54(this, (std::string *)((char *)this + 32), (std::string *)((char *)this + 64), (std::string *)((char *)a2 - 32));
      return 1;
    case 5:
      sub_100C30E54(this, (std::string *)((char *)this + 32), (std::string *)((char *)this + 64), this + 4);
      if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] > (int64_t)this[5].__r_.__value_.__r.__words[0])
      {
        sub_100C30DA4(this + 4, (std::string *)((char *)a2 - 32));
        if ((int64_t)this[5].__r_.__value_.__r.__words[0] > (int64_t)this[3].__r_.__value_.__r.__words[2])
        {
          sub_100C30DA4((std::string *)((char *)this + 64), this + 4);
          if ((int64_t)this[3].__r_.__value_.__r.__words[2] > (int64_t)this[2].__r_.__value_.__l.__size_)
          {
            sub_100C30DA4((std::string *)((char *)this + 32), (std::string *)((char *)this + 64));
            if ((int64_t)this[2].__r_.__value_.__l.__size_ > (int64_t)this[1].__r_.__value_.__r.__words[0])
            {
              std::string::pointer v7 = this;
              long long v6 = (std::string *)((char *)this + 32);
LABEL_4:
              sub_100C30DA4(v7, v6);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = (std::string *)((char *)this + 64);
      sub_100C30A3C(this, (std::string *)((char *)this + 32), (std::string *)((char *)this + 64));
      uint64_t v9 = this + 4;
      if (&this[4] == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    std::string::pointer data = v9[1].__r_.__value_.__l.__data_;
    if ((uint64_t)data > (int64_t)v8[1].__r_.__value_.__r.__words[0])
    {
      *(_OWORD *)CSIPhoneNumber __p = 0u;
      long long v17 = 0u;
      if (SHIBYTE(v9->__r_.__value_.__r.__words[2]) < 0)
      {
        sub_10004FC84(__p, v9->__r_.__value_.__l.__data_, v9->__r_.__value_.__l.__size_);
        std::string::pointer data = v9[1].__r_.__value_.__l.__data_;
      }
      else
      {
        *(_OWORD *)CSIPhoneNumber __p = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
        *(void *)&long long v17 = *((void *)&v9->__r_.__value_.__l + 2);
      }
      *((void *)&v17 + 1) = data;
      uint64_t v13 = v10;
      while (1)
      {
        std::string::operator=((std::string *)((char *)this + v13 + 96), (std::string *)((char *)this + v13 + 64));
        *(std::string::size_type *)((char *)this[5].__r_.__value_.__r.__words + v13) = *(std::string::size_type *)((char *)&this[3].__r_.__value_.__r.__words[2] + v13);
        if (v13 == -64) {
          break;
        }
        uint64_t v14 = *(std::string::size_type *)((char *)&this[2].__r_.__value_.__l.__size_ + v13);
        v13 -= 32;
        if (*((uint64_t *)&v17 + 1) <= v14)
        {
          long long v15 = (std::string *)((char *)this + v13 + 96);
          goto LABEL_16;
        }
      }
      long long v15 = this;
LABEL_16:
      std::string::operator=(v15, (const std::string *)__p);
      v15[1].__r_.__value_.__r.__words[0] = *((void *)&v17 + 1);
      if (SBYTE7(v17) < 0) {
        operator delete(__p[0]);
      }
      if (++v11 == 8) {
        return &v9[1].__r_.__value_.__r.__words[1] == (std::string::size_type *)a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 32;
    uint64_t v9 = (std::string *)((char *)v9 + 32);
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_100C30D6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C30DA4(std::string *this, std::string *__str)
{
  memset(&__p, 0, sizeof(__p));
  if (SHIBYTE(this->__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, this->__r_.__value_.__l.__data_, this->__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = *this;
  }
  std::string::operator=(this, __str);
  std::string::operator=(__str, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  std::string::pointer data = this[1].__r_.__value_.__l.__data_;
  this[1].__r_.__value_.__r.__words[0] = __str[1].__r_.__value_.__r.__words[0];
  __str[1].__r_.__value_.__r.__words[0] = (std::string::size_type)data;
}

void sub_100C30E38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C30E54(std::string *a1, std::string *a2, std::string *a3, std::string *a4)
{
  sub_100C30A3C(a1, a2, a3);
  if ((int64_t)a4[1].__r_.__value_.__r.__words[0] > (int64_t)a3[1].__r_.__value_.__r.__words[0])
  {
    sub_100C30DA4(a3, a4);
    if ((int64_t)a3[1].__r_.__value_.__r.__words[0] > (int64_t)a2[1].__r_.__value_.__r.__words[0])
    {
      sub_100C30DA4(a2, a3);
      if ((int64_t)a2[1].__r_.__value_.__r.__words[0] > (int64_t)a1[1].__r_.__value_.__r.__words[0])
      {
        sub_100C30DA4(a1, a2);
      }
    }
  }
}

void sub_100C30EFC(void ***a1)
{
  uint64_t v1 = *a1;
  unint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_100C2FB2C(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100C30F80(dispatch_object_t *a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, NSObject **a4@<X8>)
{
  uint64_t v8 = dispatch_group_create();
  uint64_t v9 = v8;
  *a4 = v8;
  if (v8)
  {
    dispatch_retain(v8);
    dispatch_group_enter(v9);
    dispatch_release(v9);
  }
  uint64_t v10 = (char *)operator new(0x30uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = off_101A486A0;
  *(_OWORD *)(v10 + 24) = *(_OWORD *)a2;
  *((void *)v10 + 5) = *(void *)(a2 + 16);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v14 = v10 + 24;
  long long v15 = v10;
  int v11 = *a1;
  if (*a1)
  {
    dispatch_retain(*a1);
    dispatch_group_enter(v11);
  }
  global_queue = dispatch_get_global_queue(0, 0);
  if (global_queue) {
    dispatch_retain(global_queue);
  }
  uint64_t v16 = v10 + 24;
  long long v17 = v10;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v10 + 1, 1uLL, memory_order_relaxed);
  dispatch_group_t group = v11;
  if (v11)
  {
    dispatch_retain(v11);
    dispatch_group_enter(v11);
  }
  uint64_t v13 = a3[1];
  uint64_t v19 = *a3;
  uint64_t v20 = v13;
  sub_1000336E8((uint64_t)&v21, (uint64_t)(a3 + 2));
  *a3 = 0;
  a3[1] = 0;
  sub_100033AF4(a3 + 2);
  sub_100C313C8();
}

void sub_100C31168(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, char a11)
{
  if (v12)
  {
    dispatch_group_leave(v12);
    dispatch_release(v12);
  }
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v11)
  {
    dispatch_group_leave(v11);
    dispatch_release(v11);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C311CC(void *a1)
{
  sub_1000339DC(a1 + 3);
  unint64_t v2 = a1[2];
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = a1[2];
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (v4) {
    sub_10004D2C8(v4);
  }
  return a1;
}

void *sub_100C3121C(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = a1 + 2;
  unint64_t v5 = v6;
  std::string::pointer v7 = (void *)*(v4 - 1);
  if ((unint64_t)v7 >= v6)
  {
    uint64_t v10 = ((uint64_t)v7 - *a1) >> 4;
    unint64_t v11 = v10 + 1;
    if ((unint64_t)(v10 + 1) >> 60) {
      sub_10006A748();
    }
    uint64_t v12 = v5 - *a1;
    if (v12 >> 3 > v11) {
      unint64_t v11 = v12 >> 3;
    }
    if ((unint64_t)v12 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v13 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v13 = v11;
    }
    v19[4] = v4;
    uint64_t v14 = (char *)sub_10006A794((uint64_t)v4, v13);
    long long v15 = &v14[16 * v10];
    v19[0] = v14;
    v19[1] = v15;
    v19[3] = &v14[16 * v16];
    long long v17 = *a2;
    *(_OWORD *)long long v15 = *a2;
    if (*((void *)&v17 + 1)) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v17 + 1) + 16), 1uLL, memory_order_relaxed);
    }
    v19[2] = v15 + 16;
    sub_100C31528(a1, v19);
    uint64_t v9 = (void *)a1[1];
    sub_100C316AC(v19);
  }
  else
  {
    *std::string::pointer v7 = *(void *)a2;
    uint64_t v8 = *((void *)a2 + 1);
    v7[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 16), 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = v7 + 2;
    a1[1] = (uint64_t)(v7 + 2);
  }
  a1[1] = (uint64_t)v9;
  return v9 - 2;
}

void sub_100C31328(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C316AC((void **)va);
  _Unwind_Resume(a1);
}

void sub_100C3133C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A486A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C3135C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A486A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C313B0(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_100C313C8()
{
}

void sub_100C31480(void *a1)
{
  uint64_t v1 = 0;
  if (a1) {
    sub_100C314B0((uint64_t)&v1, a1);
  }
}

void sub_100C314B0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1000339DC(a2 + 3);
    uint64_t v3 = a2[2];
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = a2[2];
      if (v4) {
        dispatch_release(v4);
      }
    }
    unint64_t v5 = (std::__shared_weak_count *)a2[1];
    if (v5) {
      sub_10004D2C8(v5);
    }
    operator delete();
  }
}

uint64_t sub_100C31528(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100C315A0((uint64_t)(a1 + 2), a1[1], (void *)a1[1], *a1, (void *)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C315A0(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, void *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v14 = a6;
  *((void *)&v14 + 1) = a7;
  long long v13 = v14;
  v12[0] = a1;
  v12[1] = &v13;
  v12[2] = &v14;
  v12[3] = 1;
  if (a3 == a5)
  {
    uint64_t v10 = a6;
  }
  else
  {
    uint64_t v8 = (_OWORD *)(a7 - 16);
    do
    {
      long long v9 = *((_OWORD *)a3 - 1);
      a3 -= 2;
      _OWORD *v8 = v9;
      *a3 = 0;
      a3[1] = 0;
      *((void *)&v14 + 1) = v8;
      v7 -= 16;
      --v8;
    }
    while (a3 != a5);
    uint64_t v10 = v14;
  }
  sub_100C31630((uint64_t)v12);
  return v10;
}

uint64_t sub_100C31630(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100C31668(a1);
  }
  return a1;
}

void sub_100C31668(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    v1 += 16;
  }
}

void **sub_100C316AC(void **a1)
{
  if (*a1) {
    operator delete(*a1);
  }
  return a1;
}

void sub_100C316E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v1 = *(void *)(a1 + 16);
  while (v1 != v2)
  {
    *(void *)(a1 + 16) = v1 - 16;
    uint64_t v4 = *(std::__shared_weak_count **)(v1 - 8);
    if (v4)
    {
      std::__shared_weak_count::__release_weak(v4);
      uint64_t v1 = *(void *)(a1 + 16);
    }
    else
    {
      v1 -= 16;
    }
  }
}

char *sub_100C31734(char *__dst, long long *a2, long long *a3, long long *a4, char a5, long long *a6)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v11 = *a3;
    *((void *)__dst + 2) = *((void *)a3 + 2);
    *(_OWORD *)long long __dst = v11;
  }
  uint64_t v12 = __dst + 24;
  if (*((char *)a4 + 23) < 0)
  {
    sub_10004FC84(v12, *(void **)a4, *((void *)a4 + 1));
  }
  else
  {
    long long v13 = *a4;
    *((void *)__dst + 5) = *((void *)a4 + 2);
    *(_OWORD *)uint64_t v12 = v13;
  }
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst + 48, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v14 = *a2;
    *((void *)__dst + 8) = *((void *)a2 + 2);
    *((_OWORD *)__dst + 3) = v14;
  }
  __dst[72] = a5;
  long long v15 = __dst + 80;
  if (*((char *)a6 + 23) < 0)
  {
    sub_10004FC84(v15, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long v16 = *a6;
    *((void *)__dst + 12) = *((void *)a6 + 2);
    *(_OWORD *)long long v15 = v16;
  }
  return __dst;
}

void sub_100C31820(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  sub_1001085D8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C31864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10023C008(a1, a2) + 104;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    *(void *)(v4 + 16) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

void sub_100C318C4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100C31910(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v4 = 0;
  uint64_t v6 = *result;
  uint64_t v5 = result[1];
  uint64_t v7 = a2[1];
  while (v5 + v4 != v6)
  {
    v4 -= 136;
    uint64_t result = (uint64_t *)sub_100C319D4(v4 + v7, v4 + v5);
  }
  a2[1] = v7 + v4;
  uint64_t v8 = *v3;
  *uint64_t v3 = v7 + v4;
  a2[1] = v8;
  uint64_t v9 = v3[1];
  v3[1] = a2[2];
  a2[2] = v9;
  uint64_t v10 = v3[2];
  v3[2] = a2[3];
  a2[3] = v10;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100C319D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_10023C008(a1, a2) + 104;
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 104);
    *(void *)(v4 + 16) = *(void *)(a2 + 120);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  return a1;
}

void sub_100C31A34(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*(void **)(v1 + 80));
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*(void **)(v1 + 48));
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*(void **)(v1 + 24));
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C31A80(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 136;
    sub_100320588(i - 136);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100C31AD0(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v5 = sub_10023C008(a1, a3) + 104;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)v5, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v6 = *a2;
    *(void *)(v5 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(void *)(a1 + 128) = 0;
  return a1;
}

void sub_100C31B2C(_Unwind_Exception *a1)
{
  sub_1001A7138(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C31B40(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v18 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10004812C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  long long v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a2, *((void *)a2 + 1));
    long long v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v11 = v12;
  }
  long long v16 = v11 + 24;
  sub_100320734(a1, v15);
  uint64_t v13 = a1[1];
  sub_100048174((uint64_t)v15);
  return v13;
}

void sub_100C31C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100048174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C31C64(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

const void **sub_100C31CD0(const void **result, const void **a2)
{
  uint64_t v3 = result;
  unint64_t v4 = (const void **)result[1];
  if (v4 != a2)
  {
    do
    {
      unint64_t v5 = v4 - 2;
      sub_1000558F4(v4 - 1);
      uint64_t result = sub_1000558F4(v5);
      unint64_t v4 = v5;
    }
    while (v5 != a2);
  }
  v3[1] = a2;
  return result;
}

void *sub_100C31D2C(void *a1, char *a2, char *a3)
{
  unint64_t v5 = sub_100058DB0(a1, a2);
  sub_100058DB0(v5 + 3, a3);
  return a1;
}

void sub_100C31D64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C31D80(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100C31E04(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  unint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          unint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) < v10[1])
                {
                  uint64_t v44 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v44;
                  uint64_t v45 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                uint64_t result = sub_100C325A4(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                uint64_t result = sub_100C32898(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                uint64_t result = sub_100C32898(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*(a2 - 1) < v10[7])
                {
                  uint64_t v46 = v10[6];
                  void v10[6] = *(a2 - 2);
                  *(a2 - 2) = v46;
                  uint64_t v47 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v47;
                  uint64_t v48 = v10[7];
                  uint64_t v49 = v10[5];
                  if (v48 < v49)
                  {
                    uint64_t v50 = v10[6];
                    uint64_t v51 = v10[3];
                    uint64_t v52 = v10[4];
                    void v10[4] = v50;
                    v10[5] = v48;
                    void v10[6] = v52;
                    v10[7] = v49;
                    if (v48 < v51)
                    {
                      uint64_t v53 = v10[1];
                      uint64_t v54 = v10[2];
                      v10[2] = v50;
                      void v10[3] = v48;
                      void v10[4] = v54;
                      v10[5] = v51;
                      if (v48 < v53)
                      {
                        uint64_t v55 = *v10;
                        *uint64_t v10 = v50;
                        v10[1] = v48;
                        v10[2] = v55;
                        void v10[3] = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v56 = v10 + 2;
            BOOL v58 = v10 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                char v60 = v10;
                do
                {
                  uint64_t v61 = v60[3];
                  uint64_t v62 = v60[1];
                  char v60 = v56;
                  if (v61 < v62)
                  {
                    uint64_t v63 = *v56;
                    uint64_t v64 = v59;
                    while (1)
                    {
                      uint64_t v65 = (char *)v10 + v64;
                      uint64_t v66 = *(uint64_t *)((char *)v10 + v64 + 8);
                      *((void *)v65 + 2) = *(uint64_t *)((char *)v10 + v64);
                      *((void *)v65 + 3) = v66;
                      if (!v64) {
                        break;
                      }
                      v64 -= 16;
                      if (v61 >= *((void *)v65 - 1))
                      {
                        int64_t v67 = (uint64_t *)((char *)v10 + v64 + 16);
                        goto LABEL_87;
                      }
                    }
                    int64_t v67 = v10;
LABEL_87:
                    *int64_t v67 = v63;
                    v67[1] = v61;
                  }
                  uint64_t v56 = v60 + 2;
                  v59 += 16;
                }
                while (v60 + 2 != a2);
              }
            }
            else if (!v58)
            {
              int v94 = v10 + 3;
              do
              {
                uint64_t v95 = v9[3];
                uint64_t v96 = v9[1];
                unint64_t v9 = v56;
                if (v95 < v96)
                {
                  uint64_t v97 = *v56;
                  uint64_t v98 = v94;
                  do
                  {
                    long long v99 = v98;
                    uint64_t v100 = *(v98 - 4);
                    *(v98 - 1) = *(v98 - 3);
                    uint64_t v101 = *(v98 - 2);
                    v98 -= 2;
                    *long long v99 = v101;
                  }
                  while (v95 < v100);
                  *(v98 - 1) = v97;
                  *uint64_t v98 = v95;
                }
                uint64_t v56 = v9 + 2;
                v94 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  char v72 = &v10[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v12)
                  {
                    BOOL v73 = v72[1] < v72[3];
                    v72 += 2 * v73;
                    if (v73) {
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  uint64_t v74 = v10[2 * v70 + 1];
                  if (v72[1] >= v74)
                  {
                    uint64_t result = &v10[2 * v70];
                    uint64_t v75 = *result;
                    do
                    {
                      int64_t v76 = v72;
                      unsigned char *result = *v72;
                      result[1] = v72[1];
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      char v72 = &v10[2 * v77];
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v12)
                      {
                        BOOL v73 = v72[1] < v72[3];
                        v72 += 2 * v73;
                        if (v73) {
                          uint64_t v77 = v78;
                        }
                      }
                      uint64_t result = v76;
                      uint64_t v71 = v77;
                    }
                    while (v72[1] >= v74);
                    *int64_t v76 = v75;
                    v76[1] = v74;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v79 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v80 = 0;
                uint64_t v81 = *v10;
                uint64_t v82 = v10[1];
                uint64_t v83 = v10;
                do
                {
                  char v84 = &v83[2 * v80 + 2];
                  uint64_t v85 = (2 * v80) | 1;
                  uint64_t v86 = 2 * v80 + 2;
                  if (v86 < v79)
                  {
                    uint64_t v87 = v84[1];
                    uint64_t v88 = v84[3];
                    v84 += 2 * (v87 < v88);
                    if (v87 < v88) {
                      uint64_t v85 = v86;
                    }
                  }
                  *uint64_t v83 = *v84;
                  v83[1] = v84[1];
                  uint64_t v83 = v84;
                  uint64_t v80 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v84 == a2 - 2)
                {
                  uint64_t *v84 = v81;
                  v84[1] = v82;
                }
                else
                {
                  uint64_t *v84 = *(a2 - 2);
                  v84[1] = *(a2 - 1);
                  *(a2 - 2) = v81;
                  *(a2 - 1) = v82;
                  uint64_t v89 = (char *)v84 - (char *)v10 + 16;
                  if (v89 >= 17)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 4) - 2) >> 1;
                    uint64_t v91 = v84[1];
                    if (v10[2 * v90 + 1] < v91)
                    {
                      uint64_t v92 = *v84;
                      do
                      {
                        std::string::size_type v93 = v84;
                        char v84 = &v10[2 * v90];
                        *std::string::size_type v93 = *v84;
                        v93[1] = v84[1];
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                      }
                      while (v10[2 * v90 + 1] < v91);
                      uint64_t *v84 = v92;
                      v84[1] = v91;
                    }
                  }
                }
                a2 -= 2;
                BOOL v73 = v79-- <= 2;
              }
              while (!v73);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          long long v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_100C325A4(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_100C325A4(v9 + 2, v14 - 2, a2 - 4);
            sub_100C325A4(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            uint64_t result = sub_100C325A4(v14 - 2, v14, &v9[2 * v13 + 2]);
            long long v15 = *(_OWORD *)v9;
            *(_OWORD *)unint64_t v9 = *(_OWORD *)v14;
            *(_OWORD *)long long v14 = v15;
          }
          else
          {
            uint64_t result = sub_100C325A4(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v16 = v9[1];
          if (*(v9 - 1) < v16) {
            goto LABEL_13;
          }
          if (v16 >= *(a2 - 1))
          {
            std::string::pointer v34 = v9 + 2;
            do
            {
              uint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              uint64_t v35 = v34[1];
              v34 += 2;
            }
            while (v16 >= v35);
          }
          else
          {
            int64_t v32 = v9;
            do
            {
              uint64_t v10 = v32 + 2;
              uint64_t v33 = v32[3];
              v32 += 2;
            }
            while (v16 >= v33);
          }
          CFNumberRef v36 = a2;
          if (v10 < a2)
          {
            int64_t v37 = a2;
            do
            {
              CFNumberRef v36 = v37 - 2;
              uint64_t v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v16 < v38);
          }
          uint64_t v39 = *v9;
          while (v10 < v36)
          {
            uint64_t v40 = *v10;
            *uint64_t v10 = *v36;
            uint64_t *v36 = v40;
            uint64_t v41 = v10[1];
            v10[1] = v36[1];
            v36[1] = v41;
            do
            {
              uint64_t v42 = v10[3];
              v10 += 2;
            }
            while (v16 >= v42);
            do
            {
              uint64_t v43 = *(v36 - 1);
              v36 -= 2;
            }
            while (v16 < v43);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            uint64_t *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v39;
          *(v10 - 1) = v16;
        }
        uint64_t v16 = v9[1];
LABEL_13:
        uint64_t v17 = 0;
        uint64_t v18 = *v9;
        do
        {
          uint64_t v19 = v9[v17 + 3];
          v17 += 2;
        }
        while (v19 < v16);
        uint64_t v20 = &v9[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            uint64_t v22 = v24 - 2;
            uint64_t v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 < v16) {
              goto LABEL_23;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            uint64_t v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
LABEL_23:
        if (v20 >= v22)
        {
          uint64_t v10 = v20;
        }
        else
        {
          uint64_t v26 = v22;
          uint64_t v10 = v20;
          do
          {
            uint64_t v27 = *v10;
            *uint64_t v10 = *v26;
            *uint64_t v26 = v27;
            uint64_t v28 = v10[1];
            v10[1] = v26[1];
            v26[1] = v28;
            do
            {
              uint64_t v29 = v10[3];
              v10 += 2;
            }
            while (v29 < v16);
            do
            {
              uint64_t v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 >= v16);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          uint64_t *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_36:
        uint64_t result = (uint64_t *)sub_100C31E04(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_100C32680(v9, v10 - 2);
      uint64_t result = (uint64_t *)sub_100C32680(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_36;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

uint64_t *sub_100C325A4(uint64_t *result, uint64_t *a2, uint64_t *a3)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = a2[1];
  BOOL v5 = result + 1;
  uint64_t v6 = a3[1];
  if (v4 < result[1])
  {
    uint64_t v7 = *result;
    if (v6 >= v4)
    {
      unsigned char *result = *a2;
      *a2 = v7;
      uint64_t v11 = result[1];
      result[1] = a2[1];
      a2[1] = v11;
      if (a3[1] >= v11) {
        return result;
      }
      uint64_t v12 = *a2;
      *a2 = *a3;
      *a3 = v12;
      BOOL v5 = a2 + 1;
    }
    else
    {
      unsigned char *result = *a3;
      *a3 = v7;
    }
    uint64_t v3 = a3 + 1;
    goto LABEL_10;
  }
  if (v6 < v4)
  {
    uint64_t v8 = *a2;
    *a2 = *a3;
    *a3 = v8;
    uint64_t v9 = a2[1];
    a2[1] = a3[1];
    a3[1] = v9;
    if (a2[1] < *v5)
    {
      uint64_t v10 = *result;
      unsigned char *result = *a2;
      *a2 = v10;
LABEL_10:
      uint64_t v13 = *v5;
      uint64_t *v5 = *v3;
      *uint64_t v3 = v13;
    }
  }
  return result;
}

BOOL sub_100C32680(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100C325A4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_100C32898(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_100C32898(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        uint64_t v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        uint64_t v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v20 = a1[7];
        uint64_t v21 = a1[5];
        if (v20 < v21)
        {
          uint64_t v22 = a1[6];
          uint64_t v23 = a1[3];
          uint64_t v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            uint64_t v25 = a1[1];
            uint64_t v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              uint64_t v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      sub_100C325A4(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = v9[1];
    if (v12 < v8[1])
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v10;
      while (1)
      {
        long long v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (v12 >= v15[3])
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v13;
      v17[1] = v12;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_100C32898(uint64_t *a1, uint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  BOOL result = sub_100C325A4(a1, a2, a3);
  if (a4[1] < a3[1])
  {
    uint64_t v9 = *a3;
    *a3 = *a4;
    *a4 = v9;
    uint64_t v10 = a3[1];
    a3[1] = a4[1];
    a4[1] = v10;
    if (a3[1] < a2[1])
    {
      uint64_t v11 = *a2;
      *a2 = *a3;
      *a3 = v11;
      uint64_t v12 = a2[1];
      a2[1] = a3[1];
      a3[1] = v12;
      if (a2[1] < a1[1])
      {
        uint64_t v13 = *a1;
        *a1 = *a2;
        *a2 = v13;
        uint64_t v14 = a1[1];
        a1[1] = a2[1];
        a2[1] = v14;
      }
    }
  }
  return result;
}

uint64_t *sub_100C32960(uint64_t *result, uint64_t *a2, uint64_t a3, char a4)
{
  uint64_t v9 = result;
  while (2)
  {
    uint64_t v10 = v9;
    while (1)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v9 = v10;
          uint64_t v11 = (char *)a2 - (char *)v10;
          unint64_t v12 = ((char *)a2 - (char *)v10) >> 4;
          if (v5 || !v4)
          {
            switch(v12)
            {
              case 0uLL:
              case 1uLL:
                return result;
              case 2uLL:
                if (*(a2 - 1) < v10[1])
                {
                  uint64_t v44 = *v10;
                  *uint64_t v10 = *(a2 - 2);
                  *(a2 - 2) = v44;
                  uint64_t v45 = v10[1];
                  v10[1] = *(a2 - 1);
                  *(a2 - 1) = v45;
                }
                break;
              case 3uLL:
                BOOL result = sub_100C325A4(v10, v10 + 2, a2 - 2);
                break;
              case 4uLL:
                BOOL result = sub_100C32898(v10, v10 + 2, v10 + 4, a2 - 2);
                break;
              case 5uLL:
                BOOL result = sub_100C32898(v10, v10 + 2, v10 + 4, v10 + 6);
                if (*(a2 - 1) < v10[7])
                {
                  uint64_t v46 = v10[6];
                  void v10[6] = *(a2 - 2);
                  *(a2 - 2) = v46;
                  uint64_t v47 = v10[7];
                  v10[7] = *(a2 - 1);
                  *(a2 - 1) = v47;
                  uint64_t v48 = v10[7];
                  uint64_t v49 = v10[5];
                  if (v48 < v49)
                  {
                    uint64_t v50 = v10[6];
                    uint64_t v51 = v10[3];
                    uint64_t v52 = v10[4];
                    void v10[4] = v50;
                    v10[5] = v48;
                    void v10[6] = v52;
                    v10[7] = v49;
                    if (v48 < v51)
                    {
                      uint64_t v53 = v10[1];
                      uint64_t v54 = v10[2];
                      v10[2] = v50;
                      void v10[3] = v48;
                      void v10[4] = v54;
                      v10[5] = v51;
                      if (v48 < v53)
                      {
                        uint64_t v55 = *v10;
                        *uint64_t v10 = v50;
                        v10[1] = v48;
                        v10[2] = v55;
                        void v10[3] = v53;
                      }
                    }
                  }
                }
                break;
              default:
                JUMPOUT(0);
            }
            return result;
          }
          if (v11 <= 383)
          {
            uint64_t v56 = v10 + 2;
            BOOL v58 = v10 == a2 || v56 == a2;
            if (a4)
            {
              if (!v58)
              {
                uint64_t v59 = 0;
                char v60 = v10;
                do
                {
                  uint64_t v61 = v60[3];
                  uint64_t v62 = v60[1];
                  char v60 = v56;
                  if (v61 < v62)
                  {
                    uint64_t v63 = *v56;
                    uint64_t v64 = v59;
                    while (1)
                    {
                      uint64_t v65 = (char *)v10 + v64;
                      uint64_t v66 = *(uint64_t *)((char *)v10 + v64 + 8);
                      *((void *)v65 + 2) = *(uint64_t *)((char *)v10 + v64);
                      *((void *)v65 + 3) = v66;
                      if (!v64) {
                        break;
                      }
                      v64 -= 16;
                      if (v61 >= *((void *)v65 - 1))
                      {
                        int64_t v67 = (uint64_t *)((char *)v10 + v64 + 16);
                        goto LABEL_87;
                      }
                    }
                    int64_t v67 = v10;
LABEL_87:
                    *int64_t v67 = v63;
                    v67[1] = v61;
                  }
                  uint64_t v56 = v60 + 2;
                  v59 += 16;
                }
                while (v60 + 2 != a2);
              }
            }
            else if (!v58)
            {
              int v94 = v10 + 3;
              do
              {
                uint64_t v95 = v9[3];
                uint64_t v96 = v9[1];
                uint64_t v9 = v56;
                if (v95 < v96)
                {
                  uint64_t v97 = *v56;
                  uint64_t v98 = v94;
                  do
                  {
                    long long v99 = v98;
                    uint64_t v100 = *(v98 - 4);
                    *(v98 - 1) = *(v98 - 3);
                    uint64_t v101 = *(v98 - 2);
                    v98 -= 2;
                    *long long v99 = v101;
                  }
                  while (v95 < v100);
                  *(v98 - 1) = v97;
                  *uint64_t v98 = v95;
                }
                uint64_t v56 = v9 + 2;
                v94 += 2;
              }
              while (v9 + 2 != a2);
            }
            return result;
          }
          if (!a3)
          {
            if (v10 != a2)
            {
              int64_t v68 = (v12 - 2) >> 1;
              int64_t v69 = v68;
              do
              {
                int64_t v70 = v69;
                if (v68 >= v69)
                {
                  uint64_t v71 = (2 * v69) | 1;
                  char v72 = &v10[2 * v71];
                  if (2 * v70 + 2 < (uint64_t)v12)
                  {
                    BOOL v73 = v72[1] < v72[3];
                    v72 += 2 * v73;
                    if (v73) {
                      uint64_t v71 = 2 * v70 + 2;
                    }
                  }
                  uint64_t v74 = v10[2 * v70 + 1];
                  if (v72[1] >= v74)
                  {
                    BOOL result = &v10[2 * v70];
                    uint64_t v75 = *result;
                    do
                    {
                      int64_t v76 = v72;
                      uint64_t *result = *v72;
                      result[1] = v72[1];
                      if (v68 < v71) {
                        break;
                      }
                      uint64_t v77 = (2 * v71) | 1;
                      char v72 = &v10[2 * v77];
                      uint64_t v78 = 2 * v71 + 2;
                      if (v78 < (uint64_t)v12)
                      {
                        BOOL v73 = v72[1] < v72[3];
                        v72 += 2 * v73;
                        if (v73) {
                          uint64_t v77 = v78;
                        }
                      }
                      BOOL result = v76;
                      uint64_t v71 = v77;
                    }
                    while (v72[1] >= v74);
                    *int64_t v76 = v75;
                    v76[1] = v74;
                  }
                }
                int64_t v69 = v70 - 1;
              }
              while (v70);
              uint64_t v79 = (unint64_t)v11 >> 4;
              do
              {
                uint64_t v80 = 0;
                uint64_t v81 = *v10;
                uint64_t v82 = v10[1];
                uint64_t v83 = v10;
                do
                {
                  char v84 = &v83[2 * v80 + 2];
                  uint64_t v85 = (2 * v80) | 1;
                  uint64_t v86 = 2 * v80 + 2;
                  if (v86 < v79)
                  {
                    uint64_t v87 = v84[1];
                    uint64_t v88 = v84[3];
                    v84 += 2 * (v87 < v88);
                    if (v87 < v88) {
                      uint64_t v85 = v86;
                    }
                  }
                  *uint64_t v83 = *v84;
                  v83[1] = v84[1];
                  uint64_t v83 = v84;
                  uint64_t v80 = v85;
                }
                while (v85 <= (uint64_t)((unint64_t)(v79 - 2) >> 1));
                if (v84 == a2 - 2)
                {
                  uint64_t *v84 = v81;
                  v84[1] = v82;
                }
                else
                {
                  uint64_t *v84 = *(a2 - 2);
                  v84[1] = *(a2 - 1);
                  *(a2 - 2) = v81;
                  *(a2 - 1) = v82;
                  uint64_t v89 = (char *)v84 - (char *)v10 + 16;
                  if (v89 >= 17)
                  {
                    unint64_t v90 = (((unint64_t)v89 >> 4) - 2) >> 1;
                    uint64_t v91 = v84[1];
                    if (v10[2 * v90 + 1] < v91)
                    {
                      uint64_t v92 = *v84;
                      do
                      {
                        std::string::size_type v93 = v84;
                        char v84 = &v10[2 * v90];
                        *std::string::size_type v93 = *v84;
                        v93[1] = v84[1];
                        if (!v90) {
                          break;
                        }
                        unint64_t v90 = (v90 - 1) >> 1;
                      }
                      while (v10[2 * v90 + 1] < v91);
                      uint64_t *v84 = v92;
                      v84[1] = v91;
                    }
                  }
                }
                a2 -= 2;
                BOOL v73 = v79-- <= 2;
              }
              while (!v73);
            }
            return result;
          }
          unint64_t v13 = v12 >> 1;
          uint64_t v14 = &v10[2 * (v12 >> 1)];
          if ((unint64_t)v11 >= 0x801)
          {
            sub_100C325A4(v9, &v9[2 * (v12 >> 1)], a2 - 2);
            sub_100C325A4(v9 + 2, v14 - 2, a2 - 4);
            sub_100C325A4(v9 + 4, &v9[2 * v13 + 2], a2 - 6);
            BOOL result = sub_100C325A4(v14 - 2, v14, &v9[2 * v13 + 2]);
            long long v15 = *(_OWORD *)v9;
            *(_OWORD *)uint64_t v9 = *(_OWORD *)v14;
            *(_OWORD *)uint64_t v14 = v15;
          }
          else
          {
            BOOL result = sub_100C325A4(&v9[2 * (v12 >> 1)], v9, a2 - 2);
          }
          --a3;
          if (a4) {
            break;
          }
          uint64_t v16 = v9[1];
          if (*(v9 - 1) < v16) {
            goto LABEL_13;
          }
          if (v16 >= *(a2 - 1))
          {
            std::string::pointer v34 = v9 + 2;
            do
            {
              uint64_t v10 = v34;
              if (v34 >= a2) {
                break;
              }
              uint64_t v35 = v34[1];
              v34 += 2;
            }
            while (v16 >= v35);
          }
          else
          {
            int64_t v32 = v9;
            do
            {
              uint64_t v10 = v32 + 2;
              uint64_t v33 = v32[3];
              v32 += 2;
            }
            while (v16 >= v33);
          }
          CFNumberRef v36 = a2;
          if (v10 < a2)
          {
            int64_t v37 = a2;
            do
            {
              CFNumberRef v36 = v37 - 2;
              uint64_t v38 = *(v37 - 1);
              v37 -= 2;
            }
            while (v16 < v38);
          }
          uint64_t v39 = *v9;
          while (v10 < v36)
          {
            uint64_t v40 = *v10;
            *uint64_t v10 = *v36;
            uint64_t *v36 = v40;
            uint64_t v41 = v10[1];
            v10[1] = v36[1];
            v36[1] = v41;
            do
            {
              uint64_t v42 = v10[3];
              v10 += 2;
            }
            while (v16 >= v42);
            do
            {
              uint64_t v43 = *(v36 - 1);
              v36 -= 2;
            }
            while (v16 < v43);
          }
          BOOL v4 = v10 - 2 >= v9;
          BOOL v5 = v10 - 2 == v9;
          if (v10 - 2 != v9)
          {
            uint64_t *v9 = *(v10 - 2);
            v9[1] = *(v10 - 1);
          }
          a4 = 0;
          *(v10 - 2) = v39;
          *(v10 - 1) = v16;
        }
        uint64_t v16 = v9[1];
LABEL_13:
        uint64_t v17 = 0;
        uint64_t v18 = *v9;
        do
        {
          uint64_t v19 = v9[v17 + 3];
          v17 += 2;
        }
        while (v19 < v16);
        uint64_t v20 = &v9[v17];
        uint64_t v21 = a2;
        if (v17 == 2)
        {
          uint64_t v24 = a2;
          while (v20 < v24)
          {
            uint64_t v22 = v24 - 2;
            uint64_t v25 = *(v24 - 1);
            v24 -= 2;
            if (v25 < v16) {
              goto LABEL_23;
            }
          }
          uint64_t v22 = v24;
        }
        else
        {
          do
          {
            uint64_t v22 = v21 - 2;
            uint64_t v23 = *(v21 - 1);
            v21 -= 2;
          }
          while (v23 >= v16);
        }
LABEL_23:
        if (v20 >= v22)
        {
          uint64_t v10 = v20;
        }
        else
        {
          uint64_t v26 = v22;
          uint64_t v10 = v20;
          do
          {
            uint64_t v27 = *v10;
            *uint64_t v10 = *v26;
            *uint64_t v26 = v27;
            uint64_t v28 = v10[1];
            v10[1] = v26[1];
            v26[1] = v28;
            do
            {
              uint64_t v29 = v10[3];
              v10 += 2;
            }
            while (v29 < v16);
            do
            {
              uint64_t v30 = *(v26 - 1);
              v26 -= 2;
            }
            while (v30 >= v16);
          }
          while (v10 < v26);
        }
        if (v10 - 2 != v9)
        {
          uint64_t *v9 = *(v10 - 2);
          v9[1] = *(v10 - 1);
        }
        *(v10 - 2) = v18;
        *(v10 - 1) = v16;
        if (v20 >= v22) {
          break;
        }
LABEL_36:
        BOOL result = (uint64_t *)sub_100C32960(v9, v10 - 2, a3, a4 & 1);
        a4 = 0;
      }
      BOOL v31 = sub_100C33100(v9, v10 - 2);
      BOOL result = (uint64_t *)sub_100C33100(v10, a2);
      if (result) {
        break;
      }
      if (!v31) {
        goto LABEL_36;
      }
    }
    a2 = v10 - 2;
    if (!v31) {
      continue;
    }
    return result;
  }
}

BOOL sub_100C33100(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 4;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      if (*(a2 - 1) < a1[1])
      {
        uint64_t v6 = *a1;
        *a1 = *(a2 - 2);
        *(a2 - 2) = v6;
        uint64_t v7 = a1[1];
        a1[1] = *(a2 - 1);
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100C325A4(a1, a1 + 2, a2 - 2);
      return 1;
    case 4:
      sub_100C32898(a1, a1 + 2, a1 + 4, a2 - 2);
      return 1;
    case 5:
      sub_100C32898(a1, a1 + 2, a1 + 4, a1 + 6);
      if (*(a2 - 1) < a1[7])
      {
        uint64_t v18 = a1[6];
        a1[6] = *(a2 - 2);
        *(a2 - 2) = v18;
        uint64_t v19 = a1[7];
        a1[7] = *(a2 - 1);
        *(a2 - 1) = v19;
        uint64_t v20 = a1[7];
        uint64_t v21 = a1[5];
        if (v20 < v21)
        {
          uint64_t v22 = a1[6];
          uint64_t v23 = a1[3];
          uint64_t v24 = a1[4];
          a1[4] = v22;
          a1[5] = v20;
          a1[6] = v24;
          a1[7] = v21;
          if (v20 < v23)
          {
            uint64_t v25 = a1[1];
            uint64_t v26 = a1[2];
            a1[2] = v22;
            a1[3] = v20;
            a1[4] = v26;
            a1[5] = v23;
            if (v20 < v25)
            {
              uint64_t v27 = *a1;
              *a1 = v22;
              a1[1] = v20;
              a1[2] = v27;
              a1[3] = v25;
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = a1 + 4;
      sub_100C325A4(a1, a1 + 2, a1 + 4);
      uint64_t v9 = a1 + 6;
      if (a1 + 6 == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    uint64_t v12 = v9[1];
    if (v12 < v8[1])
    {
      uint64_t v13 = *v9;
      uint64_t v14 = v10;
      while (1)
      {
        long long v15 = (uint64_t *)((char *)a1 + v14);
        uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 40);
        v15[6] = *(uint64_t *)((char *)a1 + v14 + 32);
        v15[7] = v16;
        if (v14 == -32) {
          break;
        }
        v14 -= 16;
        if (v12 >= v15[3])
        {
          uint64_t v17 = (uint64_t *)((char *)a1 + v14 + 48);
          goto LABEL_13;
        }
      }
      uint64_t v17 = a1;
LABEL_13:
      *uint64_t v17 = v13;
      v17[1] = v12;
      if (++v11 == 8) {
        return v9 + 2 == a2;
      }
    }
    uint64_t v8 = v9;
    v10 += 16;
    v9 += 2;
    if (v9 == a2) {
      return 1;
    }
  }
}

void sub_100C33318(void *a1, uint64_t a2)
{
  *a1 = a2;
  uint64_t v2 = a2;
  operator new();
}

void sub_100C33398(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C3347C((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100C333B0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C333E8(uint64_t result)
{
  if (*(void *)(result + 24))
  {
    uint64_t v1 = *(void ***)(result + 24);
    sub_10005CBF0(&v1);
    operator delete();
  }
  return result;
}

uint64_t sub_100C33438(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void ***sub_100C3347C(void ***result)
{
  uint64_t v1 = *result;
  uint64_t *result = 0;
  if (v1)
  {
    uint64_t v2 = v1;
    sub_10005CBF0(&v2);
    operator delete();
  }
  return result;
}

void sub_100C334D0(void *a1)
{
  if (a1)
  {
    sub_100C334D0(*a1);
    sub_100C334D0(a1[1]);
    sub_1001608F8((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100C33524(void *a1)
{
  if (a1)
  {
    sub_100C33524(*a1);
    sub_100C33524(a1[1]);
    sub_10008E614((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100C3357C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C335B4(uint64_t a1)
{
}

uint64_t sub_100C335D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C33614(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 344))();
  }
  return result;
}

void sub_100C33648(void *a1)
{
  uint64_t v1 = (void **)*a1;
  uint64_t v2 = a1;
  uint64_t v3 = v1;
  sub_100C10588(*v1);
}

void sub_100C3368C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100C336A8(ServiceManager::Service *this)
{
  *(void *)this = off_101A487C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100C33704(ServiceManager::Service *this)
{
  *(void *)this = off_101A487C8;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100C33774@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "PersonalityShop");
}

_WORD *sub_100C33784@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(2uLL);
  *a1 = v2;
  *uint64_t v2 = 512;
  BOOL result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100C337C4(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100C12E9C(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100C12E9C(v4, 0);
}

uint64_t sub_100C33848()
{
  return 0;
}

uint64_t sub_100C33850()
{
  return 1;
}

uint64_t sub_100C33858()
{
  return 0;
}

void sub_100C33864(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C33944(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_100C33A58(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  BOOL v5 = v1;
  uint64_t v2 = *v1;
  *(unsigned char *)(v2 + 96) = 1;
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 80));
  sub_100088C88((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100C33AA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100C33AC4(uint64_t a1)
{
  uint64_t v14 = a1;
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(NSObject **)(*(void *)a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sbootstrap", buf, 0x16u);
  }
  uint64_t v3 = (unsigned char *)(v1 + 696);
  uint64_t v4 = v1 + 80;
  *(void *)std::string buf = off_101A48848;
  *(void *)&uint8_t buf[8] = v1 + 80;
  uint64_t v16 = buf;
  if (buf != (unsigned char *)(v1 + 696))
  {
    BOOL v5 = *(unsigned char **)(v1 + 720);
    if (v5 == v3)
    {
      uint64_t v18 = v1 + 80;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      std::string __p = off_101A48848;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 24))(v1 + 696, buf);
      (*(void (**)(void))(**(void **)(v1 + 720) + 32))(*(void *)(v1 + 720));
      *(void *)(v1 + 720) = 0;
      uint64_t v16 = buf;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v1 + 696);
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else
    {
      *(void *)(v1 + 696) = off_101A48848;
      *(void *)(v1 + 704) = v4;
      uint64_t v16 = v5;
    }
    *(void *)(v1 + 720) = v3;
  }
  sub_100C2FBC0(buf);
  uint64_t v6 = *(void *)(v1 + 720);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 48))(v6, v1 + 728);
  }
  uint64_t v7 = (unsigned char *)(v1 + 944);
  *(void *)std::string buf = off_101A488D8;
  *(void *)&uint8_t buf[8] = v1 + 80;
  uint64_t v16 = buf;
  if (buf != (unsigned char *)(v1 + 944))
  {
    uint64_t v8 = *(unsigned char **)(v1 + 968);
    if (v8 == v7)
    {
      uint64_t v18 = v1 + 80;
      uint64_t v19 = 0;
      uint64_t v16 = 0;
      std::string __p = off_101A488D8;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v7 + 24))(v1 + 944, buf);
      (*(void (**)(void))(**(void **)(v1 + 968) + 32))(*(void *)(v1 + 968));
      *(void *)(v1 + 968) = 0;
      uint64_t v16 = buf;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v1 + 944);
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else
    {
      *(void *)(v1 + 944) = off_101A488D8;
      *(void *)(v1 + 952) = v4;
      uint64_t v16 = v8;
    }
    *(void *)(v1 + 968) = v7;
  }
  sub_100C2F93C(buf);
  uint64_t v9 = *(void *)(v1 + 968);
  if (v9) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 48))(v9, v1 + 976);
  }
  sub_100058DB0(&__p, "/cc/props/vinyl_info");
  *(void *)std::string buf = off_101A48968;
  *(void *)&uint8_t buf[8] = v1 + 160;
  *(void *)&uint8_t buf[16] = v1;
  uint64_t v16 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/carrier_bundle_event");
  *(void *)std::string buf = off_101A489E8;
  *(void *)&uint8_t buf[8] = v1;
  uint64_t v16 = buf;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/personalized_phone_numbers");
  *(void *)std::string buf = off_101A48A68;
  *(void *)&uint8_t buf[8] = v1 + 216;
  *(void *)&uint8_t buf[16] = v1;
  uint64_t v16 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/localized_language");
  *(void *)std::string buf = off_101A48AE8;
  *(void *)&uint8_t buf[8] = v1 + 240;
  *(void *)&uint8_t buf[16] = v1;
  uint64_t v16 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/props/bound_sims");
  *(void *)std::string buf = off_101A48B68;
  *(void *)&uint8_t buf[8] = v1 + 184;
  *(void *)&uint8_t buf[16] = v1;
  uint64_t v16 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/subscriber_sim_file_event");
  uint64_t v10 = operator new(0x20uLL);
  *uint64_t v10 = off_101A48BE8;
  v10[1] = v1;
  v10[2] = sub_100C1B5E4;
  void v10[3] = 0;
  uint64_t v16 = v10;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/prefs-nb/meid");
  int v11 = operator new(0x28uLL);
  *int v11 = off_101A48C68;
  v11[1] = v1 + 288;
  v11[2] = v1;
  v11[3] = sub_100C20CBC;
  v11[4] = 0;
  uint64_t v16 = v11;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/events/dump_state");
  uint64_t v12 = operator new(0x20uLL);
  void *v12 = off_101A48CE8;
  v12[1] = v1;
  v12[2] = sub_100C24248;
  v12[3] = 0;
  uint64_t v16 = v12;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v19) < 0) {
    operator delete(__p);
  }
  Registry::createRestModuleOneTimeUseConnection((uint64_t *)buf, *(Registry **)(v1 + 64));
  ctu::RestModule::connect();
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  return sub_1003C2130(&v14);
}

void sub_100C341F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C3427C()
{
}

void *sub_100C34290(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A48848;
  result[1] = v3;
  return result;
}

uint64_t sub_100C342D8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A48848;
  a2[1] = v2;
  return result;
}

void sub_100C34304()
{
  xpc_object_t v3 = 0;
  write_rest_value();
  sub_100058DB0(&__p, "/cc/props/personalities");
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100C343A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100C343EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C3442C()
{
}

void sub_100C3443C()
{
}

void *sub_100C34450(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A488D8;
  result[1] = v3;
  return result;
}

uint64_t sub_100C34498(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A488D8;
  a2[1] = v2;
  return result;
}

void sub_100C344C4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 24))
  {
    xpc_object_t v3 = xpc_array_create(0, 0);
    if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
    {
      if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_retain(v3);
        xpc_object_t v4 = v3;
      }
      else
      {
        xpc_object_t v4 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
      xpc_object_t v3 = 0;
    }
    xpc_release(v3);
    uint64_t v8 = *(void **)a2;
    uint64_t v6 = (void *)(a2 + 8);
    uint64_t v7 = v8;
    if (v8 != v6)
    {
      do
      {
        xpc_object_t v9 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v10 = v9;
        if (v9)
        {
          xpc_object_t v23 = v9;
        }
        else
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v23 = v10;
          if (!v10)
          {
            xpc_object_t v11 = xpc_null_create();
            xpc_object_t v10 = 0;
            goto LABEL_17;
          }
        }
        if (xpc_get_type(v10) != (xpc_type_t)&_xpc_type_dictionary)
        {
          xpc_object_t v11 = xpc_null_create();
LABEL_17:
          xpc_object_t v23 = v11;
          goto LABEL_18;
        }
        xpc_retain(v10);
LABEL_18:
        xpc_release(v10);
        write_rest_value();
        std::string __p = &v23;
        uint64_t v17 = "first";
        sub_100035E70((uint64_t)&__p, &v21, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v21);
        xpc_object_t v21 = 0;
        write_rest_value();
        std::string __p = &v23;
        uint64_t v17 = "second";
        sub_100035E70((uint64_t)&__p, &v19, &v20);
        xpc_release(v20);
        xpc_object_t v20 = 0;
        xpc_release(v19);
        xpc_object_t v19 = 0;
        xpc_object_t v12 = v23;
        if (v23) {
          xpc_retain(v23);
        }
        else {
          xpc_object_t v12 = xpc_null_create();
        }
        xpc_release(v23);
        xpc_array_append_value(v4, v12);
        xpc_release(v12);
        uint64_t v13 = (void *)v7[1];
        if (v13)
        {
          do
          {
            uint64_t v14 = v13;
            uint64_t v13 = (void *)*v13;
          }
          while (v13);
        }
        else
        {
          do
          {
            uint64_t v14 = (void *)v7[2];
            BOOL v15 = *v14 == (void)v7;
            uint64_t v7 = v14;
          }
          while (!v15);
        }
        uint64_t v7 = v14;
      }
      while (v14 != v6);
    }
    if (v4)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_release(v4);
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/assigned_sim_labels");
  xpc_object_t v23 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v23 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if (v18 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100C347A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object)
{
  xpc_release(object);
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v19);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3484C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C3488C()
{
}

void sub_100C3489C()
{
}

__n128 sub_100C348B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A48968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C348FC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48968;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C3492C(uint64_t a1, xpc_object_t *a2)
{
  sub_10010C4E0(*(uint64_t **)(a1 + 8), a2);
  uint64_t v3 = *(void *)(a1 + 16);

  sub_100C1BFB4(v3, (uint64_t)"property updated");
}

uint64_t sub_100C34970(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C349B0()
{
}

void sub_100C349C0()
{
}

void *sub_100C349D4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A489E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100C34A1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A489E8;
  a2[1] = v2;
  return result;
}

void sub_100C34A48(uint64_t a1)
{
  memset(v3, 0, sizeof(v3));
  rest::read_rest_value();
  uint64_t v2 = *(void *)(a1 + 8);
  __int16 v4 = 255;
  long long v5 = 0u;
  uint64_t v6 = 0;
  long long __p = *(_OWORD *)&v3[1];
  uint64_t v8 = 0;
  sub_100C20E14(v2, 0, (unsigned __int8 *)&v4);
  if (SHIBYTE(v8) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete((void *)v5);
  }
}

void sub_100C34B68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C34BC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C34C04()
{
}

void sub_100C34C14()
{
}

__n128 sub_100C34C28(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A48A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C34C74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48A68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C34CA4(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  __int16 v4 = v3 + 1;
  long long v5 = (void *)v3[1];
  uint64_t v6 = (void **)*v3;
  uint64_t v7 = v5;
  if (v3[2])
  {
    void v5[2] = &v7;
    *uint64_t v3 = v4;
    *__int16 v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v6 = &v7;
  }
  sub_1001A6D14((uint64_t)v3, a2);
  sub_100C2E0BC(*(void *)(a1 + 16));
  sub_10019D614((uint64_t)&v6, v7);
}

void sub_100C34D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100C34D38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C34D78()
{
}

void sub_100C34D88()
{
}

__n128 sub_100C34D9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A48AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C34DE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48AE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C34E18(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *(_OWORD *)int64_t v37 = *(_OWORD *)v2;
  uint64_t v38 = *(void *)(v2 + 16);
  *(void *)uint64_t v2 = 0;
  *(void *)(v2 + 8) = 0;
  long long v3 = *(_OWORD *)(v2 + 24);
  *(void *)(v2 + 16) = 0;
  *(void *)(v2 + 24) = 0;
  *(_OWORD *)uint64_t v39 = v3;
  uint64_t v40 = *(void *)(v2 + 40);
  *(void *)(v2 + 32) = 0;
  *(void *)(v2 + 40) = 0;
  read_rest_value();
  uint64_t v4 = *(void *)(a1 + 16);
  long long v5 = (const void **)(v4 + 264);
  char v6 = *(unsigned char *)(v4 + 287);
  if (v6 >= 0) {
    uint64_t v7 = (void *)*(unsigned __int8 *)(v4 + 287);
  }
  else {
    uint64_t v7 = *(void **)(v4 + 272);
  }
  uint64_t v8 = (void *)HIBYTE(v40);
  int v9 = SHIBYTE(v40);
  if (v40 < 0) {
    uint64_t v8 = v39[1];
  }
  uint64_t v36 = v4;
  if (v7 != v8)
  {
LABEL_16:
    int v35 = SHIBYTE(v40);
    uint64_t v14 = (os_log_t *)(v4 + 40);
    uint64_t v13 = *(NSObject **)(v4 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_24;
    }
    if (v6 < 0) {
      BOOL v15 = (char *)*v5;
    }
    else {
      BOOL v15 = (char *)(v4 + 264);
    }
    goto LABEL_23;
  }
  if (v40 >= 0) {
    xpc_object_t v10 = v39;
  }
  else {
    xpc_object_t v10 = (void **)v39[0];
  }
  if ((*(unsigned char *)(v4 + 287) & 0x80) == 0)
  {
    if (!*(unsigned char *)(v4 + 287)) {
      goto LABEL_57;
    }
    xpc_object_t v11 = (unsigned __int8 *)(v4 + 264);
    uint64_t v12 = *(unsigned __int8 *)(v4 + 287);
    while (*v11 == *(unsigned __int8 *)v10)
    {
      ++v11;
      xpc_object_t v10 = (void **)((char *)v10 + 1);
      if (!--v12) {
        goto LABEL_57;
      }
    }
    goto LABEL_16;
  }
  BOOL v15 = (char *)*v5;
  if (!memcmp(*v5, v10, *(void *)(v4 + 272))) {
    goto LABEL_57;
  }
  int v35 = v9;
  uint64_t v14 = (os_log_t *)(v4 + 40);
  uint64_t v13 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
LABEL_23:
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v49 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s%slanguage changed to:%s", buf, 0x20u);
  }
LABEL_24:
  uint64_t v16 = 0;
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  unint64_t v47 = 0;
  do
  {
    sub_100058DB0(__p, off_101A48570[v16]);
    uint64_t v17 = v46;
    if ((unint64_t)v46 >= v47)
    {
      unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-v45] >> 3);
      unint64_t v20 = v19 + 1;
      if (v19 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v47 - v45) >> 3) > v20) {
        unint64_t v20 = 0x5555555555555556 * ((uint64_t)(v47 - v45) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v47 - v45) >> 3) >= 0x555555555555555) {
        unint64_t v21 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v21 = v20;
      }
      *(void *)uint64_t v50 = &v47;
      if (v21) {
        uint64_t v22 = (char *)sub_10004812C((uint64_t)&v47, v21);
      }
      else {
        uint64_t v22 = 0;
      }
      xpc_object_t v23 = &v22[24 * v19];
      *(void *)std::string buf = v22;
      *(void *)&uint8_t buf[8] = v23;
      uint64_t v49 = &v22[24 * v21];
      long long v24 = *(_OWORD *)__p;
      *((void *)v23 + 2) = v44;
      *(_OWORD *)xpc_object_t v23 = v24;
      __p[1] = 0;
      uint64_t v44 = 0;
      __p[0] = 0;
      *(void *)&uint8_t buf[16] = v23 + 24;
      sub_100048204(&v45, buf);
      uint64_t v25 = v46;
      sub_100048174((uint64_t)buf);
      uint64_t v46 = v25;
      if (SHIBYTE(v44) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v18 = *(_OWORD *)__p;
      *((void *)v46 + 2) = v44;
      *uint64_t v17 = v18;
      uint64_t v46 = (char *)v17 + 24;
    }
    ++v16;
  }
  while (v16 != 6);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v44 = 0;
  uint64_t v26 = v36;
  (*(void (**)(void **__return_ptr))(**(void **)(v36 + 1096) + 80))(__p);
  uint64_t v27 = *v14;
  uint64_t v28 = *v14;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-v45] >> 3) == ((char *)__p[1] - (char *)__p[0]) >> 3)
  {
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s%srecalculated localized labels:", buf, 0x16u);
    }
    std::mutex::lock((std::mutex *)(v36 + 880));
    sub_10010C0E0(v36 + 1032, *(void **)(v36 + 1040));
    *(void *)(v36 + 1032) = v36 + 1040;
    *(void *)(v36 + 1048) = 0;
    *(void *)(v36 + 1040) = 0;
    if (v46 != (char *)v45)
    {
      uint64_t v29 = 0;
      unint64_t v30 = 0;
      do
      {
        v41[0] = 0;
        v41[1] = 0;
        uint64_t v42 = 0;
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        *(_OWORD *)uint64_t v41 = *(_OWORD *)buf;
        uint64_t v42 = *(void *)&buf[16];
        BOOL v31 = *v14;
        uint64_t v32 = v45;
        if (os_log_type_enabled(*v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = (void *)(v32 + v29);
          if (*(char *)(v32 + v29 + 23) < 0) {
            uint64_t v33 = (void *)*v33;
          }
          std::string::pointer v34 = v41;
          if (v42 < 0) {
            std::string::pointer v34 = (void **)v41[0];
          }
          *(_DWORD *)std::string buf = 136316162;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v49 = (char *)v30;
          *(_WORD *)uint64_t v50 = 2080;
          *(void *)&v50[2] = v33;
          __int16 v51 = 2080;
          uint64_t v52 = v34;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s%s %zu. %s: %s", buf, 0x34u);
          uint64_t v32 = v45;
        }
        sub_10086F3C0((uint64_t **)(v36 + 1032), (void **)(v32 + v29), (long long *)(v32 + v29), (long long *)v41);
        if (SHIBYTE(v42) < 0) {
          operator delete(v41[0]);
        }
        ++v30;
        v29 += 24;
      }
      while (v30 < 0xAAAAAAAAAAAAAAABLL * ((uint64_t)&v46[-v45] >> 3));
    }
    std::mutex::unlock((std::mutex *)(v36 + 880));
    uint64_t v26 = v36;
  }
  else if (os_log_type_enabled(v28, OS_LOG_TYPE_ERROR))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "#E %s%slocalized label's set is of incorrect size! Drop the result, keep localized predefined labels as is", buf, 0x16u);
  }
  *(void *)std::string buf = __p;
  sub_100084178((void ***)buf);
  *(void *)std::string buf = &v45;
  sub_100047F64((void ***)buf);
  sub_100C1E074(v26, "language change", 1);
  int v9 = v35;
LABEL_57:
  if (v9 < 0) {
    operator delete(v39[0]);
  }
  if (SHIBYTE(v38) < 0)
  {
    operator delete(v37[0]);
  }
}

void sub_100C35454(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::mutex *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,void **a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,char *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,char a40)
{
  a27 = (void **)&a34;
  sub_100084178(&a27);
  a34 = &a40;
  sub_100047F64((void ***)&a34);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C35518(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C35558()
{
}

void sub_100C35568()
{
}

__n128 sub_100C3557C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A48B68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100C355C8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48B68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C355F8(uint64_t a1, xpc_object_t *a2)
{
  sub_100314828(*(void *)(a1 + 8), a2);
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    __int16 v29 = 2080;
    unint64_t v30 = "";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%shandleBoundSimsChanged", buf, 0x16u);
  }
  long long v5 = *(void **)(v3 + 184);
  if (v5 != (void *)(v3 + 192))
  {
    char v25 = 0;
    int v24 = 0;
    do
    {
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v27 = 0;
      if (*((char *)v5 + 79) < 0)
      {
        sub_10004FC84(__dst, (void *)v5[7], v5[8]);
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(v5 + 7);
        uint64_t v27 = v5[9];
      }
      (*(void (**)(unsigned char *__return_ptr))(**(void **)(v3 + 120) + 24))(v40);
      if (*(void *)v40) {
        char v6 = sub_100080934;
      }
      else {
        char v6 = 0;
      }
      sub_1000577C4((const void **)v40);
      if (!v6)
      {
        uint64_t v7 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = (void *)HIBYTE(v27);
          if (v27 < 0) {
            uint64_t v8 = __dst[1];
          }
          int v9 = __dst;
          if (v27 < 0) {
            int v9 = (void **)__dst[0];
          }
          BOOL v10 = v8 == 0;
          xpc_object_t v11 = "<invalid>";
          if (!v10) {
            xpc_object_t v11 = (const char *)v9;
          }
          *(_DWORD *)uint64_t v40 = 136315906;
          *(void *)&v40[4] = "";
          *(_WORD *)&v40[12] = 2080;
          *(void *)&v40[14] = "";
          __int16 v41 = 2080;
          uint64_t v42 = v11;
          __int16 v43 = 2080;
          uint64_t v44 = "Other";
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%smarking %s as %s", v40, 0x2Au);
        }
        (*(void (**)(void, void **, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void))(**(void **)(v3 + 120) + 16))(*(void *)(v3 + 120), __dst, @"offloading", kCFBooleanTrue, @"info", 0, 0, 0);
        v38[0] = off_101A48F48;
        uint64_t v39 = v38;
        uint64_t v12 = *(uint64_t **)(v3 + 608);
        uint64_t v14 = *v12;
        uint64_t v13 = v12[1];
        if (*v12 != v13)
        {
          while (!sub_10001D294((unsigned __int8 *)(*(void *)v14 + 24), (unsigned __int8 *)__dst))
          {
            v14 += 16;
            if (v14 == v13)
            {
              uint64_t v14 = v13;
              break;
            }
          }
          if (v14 != *(void *)(*(void *)(v3 + 608) + 8))
          {
            *(void *)uint64_t v40 = 0;
            *(void *)&v40[8] = 0;
            sub_100612480(*(long long **)v14, v40);
            if (!v39) {
              sub_10007B600();
            }
            (*(void (**)(void *, unsigned char *))(*v39 + 48))(v39, v40);
            uint64_t v16 = *(void *)v40;
            uint64_t v15 = *(void *)&v40[8];
            if (*(void *)&v40[8]) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&v40[8] + 8), 1uLL, memory_order_relaxed);
            }
            uint64_t v17 = *(std::__shared_weak_count **)(v14 + 8);
            *(void *)uint64_t v14 = v16;
            *(void *)(v14 + 8) = v15;
            if (v17) {
              sub_10004D2C8(v17);
            }
            if (*(void *)&v40[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&v40[8]);
            }
            int v24 = 1;
          }
        }
        sub_100C36E54(v38);
        if ((void **)(v3 + 840) != sub_100046F68(v3 + 832, __dst))
        {
          long long v18 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            unint64_t v19 = (void *)HIBYTE(v27);
            if (v27 < 0) {
              unint64_t v19 = __dst[1];
            }
            unint64_t v20 = __dst;
            if (v27 < 0) {
              unint64_t v20 = (void **)__dst[0];
            }
            BOOL v10 = v19 == 0;
            unint64_t v21 = "<invalid>";
            if (!v10) {
              unint64_t v21 = (const char *)v20;
            }
            *(_DWORD *)uint64_t v40 = 136315650;
            *(void *)&v40[4] = "";
            *(_WORD *)&v40[12] = 2080;
            *(void *)&v40[14] = "";
            __int16 v41 = 2080;
            uint64_t v42 = v21;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%sfixed label for %s", v40, 0x20u);
          }
          sub_100C36FAC((uint64_t **)(v3 + 832), __dst);
          sub_100C1D258((uint64_t)buf, v3, (uint64_t)__dst, (long long *)"Other", &xmmword_101B102D0);
          if (v37 < 0) {
            operator delete(__p);
          }
          if (v35 < 0) {
            operator delete(v34);
          }
          if (v33 < 0) {
            operator delete(v32);
          }
          if (v31 < 0) {
            operator delete(*(void **)buf);
          }
          (*(void (**)(void, void **, const __CFString *, const __CFString *, void, void))(**(void **)(v3 + 120) + 32))(*(void *)(v3 + 120), __dst, @"label-id", @"info", 0, 0);
          (*(void (**)(void, void **, const __CFString *, const __CFString *, void, void))(**(void **)(v3 + 120) + 32))(*(void *)(v3 + 120), __dst, @"label-id-confirmed", @"info", 0, 0);
          char v25 = 1;
        }
      }
      if (SHIBYTE(v27) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v22 = (void *)v5[1];
      if (v22)
      {
        do
        {
          xpc_object_t v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          xpc_object_t v23 = (void *)v5[2];
          BOOL v10 = *v23 == (void)v5;
          long long v5 = v23;
        }
        while (!v10);
      }
      long long v5 = v23;
    }
    while (v23 != (void *)(v3 + 192));
    if (v24) {
      sub_100C19920(v3, 1);
    }
    if (v25) {
      sub_100C1E074(v3, "bound sim labeling correction", 0);
    }
  }
}

void sub_100C35BAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  uint64_t v26 = *(std::__shared_weak_count **)(v24 - 152);
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_100C36E54((void *)(v24 - 192));
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C35C00(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C35C40()
{
}

void sub_100C35C50()
{
}

__n128 sub_100C35C64(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A48BE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C35CB8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48BE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C35CF0(void *a1)
{
  uint64_t v5 = 0x2800000000;
  long long __p = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  rest::read_rest_value();
  uint64_t v2 = (void (*)(void *, uint64_t *))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    uint64_t v2 = *(void (**)(void *, uint64_t *))(*v4 + v2);
  }
  v2(v4, &v5);
  if (__p)
  {
    uint64_t v7 = __p;
    operator delete(__p);
  }
}

void sub_100C35D88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C35DA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C35DE4()
{
}

void sub_100C35DF4()
{
}

__n128 sub_100C35E08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A48C68;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C35E5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48C68;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C35E94(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = a1[1];
  *(_OWORD *)long long __p = 0u;
  long long v9 = 0u;
  if (*(unsigned char *)(v3 + 24))
  {
    long long v4 = *(_OWORD *)v3;
    *(void *)&long long v9 = *(void *)(v3 + 16);
    *(_OWORD *)long long __p = v4;
    *(void *)(v3 + 8) = 0;
    *(void *)(v3 + 16) = 0;
    *(void *)uint64_t v3 = 0;
    BYTE8(v9) = 1;
  }
  sub_10008BD58(v3, a2);
  uint64_t v5 = (void (*)(void *, void **))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(void (**)(void *, void **))(*v7 + v5);
  }
  v5(v7, __p);
  if (BYTE8(v9))
  {
    if (SBYTE7(v9) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100C35F58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C35F7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C35FBC()
{
}

void sub_100C35FCC()
{
}

__n128 sub_100C35FE0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A48CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C36034(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A48CE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C3606C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100C360B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C360F4()
{
}

void sub_100C36100(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v12 = "";
    __int16 v13 = 2080;
    uint64_t v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sstarted", buf, 0x16u);
    uint64_t v2 = *(NSObject **)(v1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v12 = "";
    __int16 v13 = 2080;
    uint64_t v14 = "";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s%sBootstrap complete, re-pushing labels", buf, 0x16u);
  }
  std::mutex::lock((std::mutex *)(v1 + 880));
  sub_100426E14(v1 + 976, v1 + 976);
  uint64_t v3 = *(void *)(v1 + 968);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v1 + 976);
  }
  std::mutex::unlock((std::mutex *)(v1 + 880));
  long long v4 = *(uint64_t **)(v1 + 592);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((v4[1] - *v4) >> 4);
      *(_DWORD *)std::string buf = 136315650;
      uint64_t v12 = "";
      __int16 v13 = 2080;
      uint64_t v14 = "";
      __int16 v15 = 2048;
      unint64_t v16 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%spersonalities has %zu initial event(s)", buf, 0x20u);
      long long v4 = *(uint64_t **)(v1 + 592);
    }
    uint64_t v7 = *v4;
    if (v4[1] != *v4)
    {
      uint64_t v8 = 0;
      unint64_t v9 = 0;
      do
      {
        sub_100C1AE18((void *)v1, v7 + v8);
        ++v9;
        uint64_t v7 = **(void **)(v1 + 592);
        v8 += 48;
      }
      while (v9 < 0xAAAAAAAAAAAAAAABLL * ((*(void *)(*(void *)(v1 + 592) + 8) - v7) >> 4));
    }
    BOOL v10 = *(std::__shared_weak_count **)(v1 + 600);
    *(_OWORD *)(v1 + 592) = 0u;
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  operator delete();
}

void sub_100C36380()
{
}

uint64_t *sub_100C363C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v42 = a1;
  uint64_t v43 = v1;
  uint64_t v2 = (long long *)(v1 + 16);
  uint64_t v3 = *(void *)v1;
  long long v4 = (uint64_t **)(*(void *)v1 + 752);
  uint64_t v5 = *v4;
  unint64_t v6 = v4;
  uint64_t v7 = v4;
  if (!*v4) {
    goto LABEL_10;
  }
  unint64_t v6 = (uint64_t **)(*(void *)v1 + 752);
  while (1)
  {
    while (1)
    {
      uint64_t v7 = (uint64_t **)v5;
      uint64_t v8 = v5 + 4;
      if ((sub_100046FE8((void *)(v1 + 16), (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v7;
      unint64_t v6 = v7;
      if (!*v7) {
        goto LABEL_10;
      }
    }
    if ((sub_100046FE8(v8, (void **)(v1 + 16)) & 0x80) == 0) {
      break;
    }
    unint64_t v6 = v7 + 1;
    uint64_t v5 = v7[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  unint64_t v9 = *v6;
  if (!*v6)
  {
LABEL_10:
    unint64_t v48 = 0;
    BOOL v10 = (uint64_t *)operator new(0x48uLL);
    *(void *)&long long buf = v10;
    *((void *)&buf + 1) = v4;
    xpc_object_t v11 = v10 + 4;
    if (*(char *)(v1 + 39) < 0)
    {
      sub_10004FC84(v11, *(void **)(v1 + 16), *(void *)(v1 + 24));
    }
    else
    {
      long long v12 = *v2;
      void v10[6] = *(void *)(v1 + 32);
      *(_OWORD *)xpc_object_t v11 = v12;
    }
    v10[7] = 0;
    uint8_t v10[8] = 0;
    LOBYTE(v48) = 1;
    *BOOL v10 = 0;
    v10[1] = 0;
    v10[2] = (uint64_t)v7;
    void *v6 = v10;
    uint64_t v13 = **(void **)(v3 + 744);
    if (v13)
    {
      *(void *)(v3 + 744) = v13;
      BOOL v10 = *v6;
    }
    sub_100046C90(*(uint64_t **)(v3 + 752), v10);
    ++*(void *)(v3 + 760);
    unint64_t v9 = (uint64_t *)buf;
    *(void *)&long long buf = 0;
    sub_100C36920((uint64_t)&buf);
  }
  uint64_t v15 = *(void *)(v1 + 40);
  uint64_t v14 = *(void *)(v1 + 48);
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 16), 1uLL, memory_order_relaxed);
  }
  unint64_t v16 = (std::__shared_weak_count *)v9[8];
  v9[7] = v15;
  v9[8] = v14;
  if (v16) {
    std::__shared_weak_count::__release_weak(v16);
  }
  uint64_t v17 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v2 = *(long long **)v2;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v2;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I added observer: '%s'", (uint8_t *)&buf, 0xCu);
  }
  std::mutex::lock((std::mutex *)(v3 + 632));
  uint64_t v18 = *(void *)(v3 + 728);
  unint64_t v19 = *(std::__shared_weak_count **)(v3 + 736);
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v44 = v18;
  uint64_t v45 = v19;
  std::mutex::unlock((std::mutex *)(v3 + 632));
  if (v18) {
    (*(void (**)(void, uint64_t *))(**(void **)(v1 + 40) + 24))(*(void *)(v1 + 40), &v44);
  }
  long long buf = 0uLL;
  unint64_t v48 = 0;
  unint64_t v20 = *(uint64_t ***)(v3 + 744);
  if (v20 != v4)
  {
    while (1)
    {
      unint64_t v21 = (std::__shared_weak_count *)v20[8];
      if (!v21) {
        break;
      }
      uint64_t v22 = std::__shared_weak_count::lock(v21);
      if (!v22 || !v20[7]) {
        goto LABEL_34;
      }
LABEL_41:
      sub_10004D2C8(v22);
LABEL_42:
      uint64_t v27 = v20[1];
      if (v27)
      {
        do
        {
          uint64_t v28 = (uint64_t **)v27;
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          uint64_t v28 = (uint64_t **)v20[2];
          BOOL v29 = *v28 == (uint64_t *)v20;
          unint64_t v20 = v28;
        }
        while (!v29);
      }
      unint64_t v20 = v28;
      if (v28 == v4)
      {
        char v31 = (char *)*((void *)&buf + 1);
        for (uint64_t i = (char *)buf; i != v31; i += 24)
        {
          uint64_t v32 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
          {
            char v33 = i;
            if (i[23] < 0) {
              char v33 = *(char **)i;
            }
            *(_DWORD *)uint64_t v46 = 136315138;
            *(void *)&v46[4] = v33;
            _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I removed observer: '%s'", v46, 0xCu);
          }
          std::string::pointer v34 = *v4;
          if (*v4)
          {
            char v35 = v4;
            do
            {
              char v36 = sub_100046FE8(v34 + 4, (void **)i);
              if (v36 >= 0) {
                char v37 = (uint64_t **)v34;
              }
              else {
                char v37 = (uint64_t **)(v34 + 1);
              }
              if (v36 >= 0) {
                char v35 = (uint64_t **)v34;
              }
              std::string::pointer v34 = *v37;
            }
            while (*v37);
            if (v35 != v4 && (sub_100046FE8(i, (void **)v35 + 4) & 0x80) == 0)
            {
              uint64_t v38 = v35[1];
              uint64_t v39 = v35;
              if (v38)
              {
                do
                {
                  uint64_t v40 = v38;
                  uint64_t v38 = (uint64_t *)*v38;
                }
                while (v38);
              }
              else
              {
                do
                {
                  uint64_t v40 = v39[2];
                  BOOL v29 = *v40 == (void)v39;
                  uint64_t v39 = (uint64_t **)v40;
                }
                while (!v29);
              }
              if (*(uint64_t ***)(v3 + 744) == v35) {
                *(void *)(v3 + 744) = v40;
              }
              --*(void *)(v3 + 760);
              sub_10005EE6C(*(uint64_t **)(v3 + 752), (uint64_t *)v35);
              sub_1001608F8((uint64_t)(v35 + 4));
              operator delete(v35);
            }
          }
        }
        goto LABEL_72;
      }
    }
    uint64_t v22 = 0;
LABEL_34:
    xpc_object_t v23 = (long long *)(v20 + 4);
    uint64_t v24 = (long long *)*((void *)&buf + 1);
    if (*((void *)&buf + 1) >= v48)
    {
      uint64_t v26 = sub_100048008((uint64_t *)&buf, v23);
    }
    else
    {
      if (*((char *)v20 + 55) < 0)
      {
        sub_10004FC84(*((unsigned char **)&buf + 1), v20[4], (unint64_t)v20[5]);
      }
      else
      {
        long long v25 = *v23;
        *(void *)(*((void *)&buf + 1) + 16) = v20[6];
        *uint64_t v24 = v25;
      }
      uint64_t v26 = (uint64_t)v24 + 24;
    }
    *((void *)&buf + 1) = v26;
    if (!v22) {
      goto LABEL_42;
    }
    goto LABEL_41;
  }
LABEL_72:
  *(void *)uint64_t v46 = &buf;
  sub_100047F64((void ***)v46);
  if (v45) {
    sub_10004D2C8(v45);
  }
  sub_100C368A4(&v43);
  return sub_100046B58((uint64_t *)&v42);
}

void sub_100C36834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  sub_100C36920((uint64_t)va2);
  sub_100C368A4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C368A4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 48);
    if (v2) {
      sub_10004D2C8(v2);
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    uint64_t v3 = *(NSObject **)(v1 + 8);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(NSObject **)(v1 + 8);
      if (v4) {
        dispatch_release(v4);
      }
    }
    operator delete();
  }
  return result;
}

void sub_100C36920(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1001608F8((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *sub_100C36978(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v9 = 0;
  __n128 result = sub_100046ED4((uint64_t)a1, &v9, a2);
  if (!*result)
  {
    uint64_t v6 = (uint64_t **)result;
    uint64_t v7 = (uint64_t *)operator new(0x38uLL);
    uint64_t v8 = v7 + 4;
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(v8, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      *(_OWORD *)uint64_t v8 = *(_OWORD *)a3;
      v7[6] = *(void *)(a3 + 16);
    }
    return sub_100046C38(a1, v9, v6, v7);
  }
  return result;
}

void sub_100C36A30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9)
{
  sub_1000C6EE8(v10, v9);
  _Unwind_Resume(a1);
}

void sub_100C36A4C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A48D68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C36A6C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A48D68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C36AC0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_100C30EFC(&v1);
}

char *sub_100C36AF0(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    uint64_t v7 = (char *)operator new(0x48uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 56) = 0u;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_100046C90(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_100C36BC8(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_100C2E0BC(**a1);
  operator delete();
}

void sub_100C36C1C()
{
}

uint64_t *sub_100C36C48(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_100C36CD4((uint64_t)a1, a3, v7);
    sub_100046C38(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

void *sub_100C36CD4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100C36D64(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100C36D84()
{
}

void *sub_100C36D98()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_101A48DB8;
  return result;
}

void sub_100C36DD0(uint64_t a1, void *a2)
{
  *a2 = off_101A48DB8;
}

void sub_100C36DF8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 61) = 1;
}

uint64_t sub_100C36E08(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C36E48()
{
}

void *sub_100C36E54(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100C36EDC()
{
}

void *sub_100C36EF0()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_101A48E48;
  return result;
}

void sub_100C36F28(uint64_t a1, void *a2)
{
  *a2 = off_101A48E48;
}

void sub_100C36F50(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 62) = 1;
}

uint64_t sub_100C36F60(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C36FA0()
{
}

void sub_100C36FAC(uint64_t **a1, void **a2)
{
  uint64_t v3 = (uint64_t *)sub_100046F68((uint64_t)a1, a2);
  if (a1 + 1 != (uint64_t **)v3)
  {
    uint64_t v4 = v3;
    sub_1000F5B04(a1, v3);
    sub_10023A6CC((uint64_t)(v4 + 4));
    operator delete(v4);
  }
}

void sub_100C37018()
{
}

void *sub_100C3702C()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_101A48EC8;
  return result;
}

void sub_100C37064(uint64_t a1, void *a2)
{
  *a2 = off_101A48EC8;
}

void sub_100C3708C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 64) = 2;
}

uint64_t sub_100C3709C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C370DC()
{
}

void *sub_100C370E8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  uint64_t v7 = (char *)operator new(0x38uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    result[2] = *(void *)(a2 + 16);
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100C37178(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v2, v3);
  _Unwind_Resume(a1);
}

void sub_100C37198()
{
}

void *sub_100C371AC()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_101A48F48;
  return result;
}

void sub_100C371E4(uint64_t a1, void *a2)
{
  *a2 = off_101A48F48;
}

void sub_100C3720C(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)(*(void *)a2 + 63) = 1;
}

uint64_t sub_100C3721C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C3725C()
{
}

void sub_100C37268(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A48FC8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C37288(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A48FC8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C372DC(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_10005CBF0(&v1);
}

uint64_t sub_100C3730C@<X0>(NSObject **a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = (char *)operator new(0x38uLL);
  uint64_t result = sub_100C37368((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100C37354(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C37368(uint64_t a1, NSObject **a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_101A49018;
  sub_100C37444((NSObject **)(a1 + 24), a2);
  return a1;
}

void sub_100C373B0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C373C4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A49018;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C373E4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A49018;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C37438(uint64_t a1)
{
}

NSObject **sub_100C37444(NSObject **a1, NSObject **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  *a1 = v3;
  if (v3)
  {
    dispatch_retain(v3);
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
    dispatch_release(v3);
  }
  else
  {
    a1[1] = 0;
    a1[2] = 0;
    a1[3] = 0;
  }
  return a1;
}

void sub_100C3749C(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 8);
  sub_100C374E0(&v2);
  if (*(void *)a1) {
    dispatch_release(*(dispatch_object_t *)a1);
  }
}

void sub_100C374E0(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100C37534((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100C37534(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 16)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(i - 8);
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
  }
  a1[1] = v2;
}

uint64_t *sub_100C37580(uint64_t *a1)
{
  uint64_t v11 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[1])
      {
        uint64_t v6 = *(void *)(v3 + 768);
        if (v6 && a1[3] == v6)
        {
          uint64_t v8 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            asString();
            uint64_t v9 = v13 >= 0 ? &__p : (void **)__p;
            *(_DWORD *)long long buf = 136315650;
            uint64_t v15 = "";
            __int16 v16 = 2080;
            uint64_t v17 = "";
            __int16 v18 = 2080;
            unint64_t v19 = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sfiring complete: %s", buf, 0x20u);
            if (v13 < 0) {
              operator delete(__p);
            }
          }
          sub_100C206E8(v3);
        }
        else
        {
          uint64_t v7 = *(NSObject **)(v3 + 40);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_DWORD *)long long buf = 136315394;
            uint64_t v15 = "";
            __int16 v16 = 2080;
            uint64_t v17 = "";
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "#E %s%sfiring was canceled before completion", buf, 0x16u);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
  return sub_10028FD6C((uint64_t *)&v11);
}

void sub_100C37748(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10004D2C8(v9);
  sub_10028FD6C(&a9);
  _Unwind_Resume(a1);
}

void sub_100C37768(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A49068;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C37788(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A49068;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

char *sub_100C377E4(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = (char *)a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *(char **)v7;
        uint64_t v6 = (uint64_t **)v7;
        if (!*(void *)v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = (char *)*((void *)v7 + 1);
      if (!v5)
      {
        uint64_t v6 = (uint64_t **)(v7 + 8);
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (char *)(a1 + 1);
LABEL_9:
    uint64_t v9 = v7;
    uint64_t v7 = (char *)operator new(0x80uLL);
    *((_DWORD *)v7 + 8) = *a3;
    *(_OWORD *)(v7 + 56) = 0u;
    *(_OWORD *)(v7 + 40) = 0u;
    *(_OWORD *)(v7 + 72) = 0u;
    *(_OWORD *)(v7 + 88) = 0u;
    *(_OWORD *)(v7 + 104) = 0u;
    *((void *)v7 + 15) = 0;
    v7[64] = -1;
    *(void *)uint64_t v7 = 0;
    *((void *)v7 + 1) = 0;
    *((void *)v7 + 2) = v9;
    void *v6 = (uint64_t *)v7;
    uint64_t v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_100046C90(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t *sub_100C378D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v19 = a1;
  uint64_t v20 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(v2[76] + 8))
    {
      int v6 = *(unsigned __int8 *)(v1 + 32);
      if (*(unsigned __int8 *)(*(void *)v5 + 66) != (v6 ^ 1))
      {
        uint64_t v7 = v2[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(unsigned __int8 *)(v1 + 31);
          BOOL v9 = (v8 & 0x80u) != 0;
          uint64_t v10 = *(const char **)(v1 + 8);
          if ((v8 & 0x80u) != 0) {
            uint64_t v8 = *(void *)(v1 + 16);
          }
          if (!v9) {
            uint64_t v10 = (const char *)(v1 + 8);
          }
          if (v8) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = "<invalid>";
          }
          long long v12 = "";
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          if (!v6) {
            long long v12 = "UN";
          }
          *(_WORD *)&unsigned char buf[22] = 2080;
          unint64_t v30 = v11;
          LOWORD(v31) = 2080;
          *(void *)((char *)&v31 + 2) = v12;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s %sauthorized", buf, 0x2Au);
        }
        long long v28 = 0uLL;
        sub_100612480(*(long long **)v5, &v28);
        long long v13 = v28;
        *(unsigned char *)(v28 + 66) = *(unsigned char *)(v1 + 32) ^ 1;
        if (*((void *)&v13 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(std::__shared_weak_count **)(v5 + 8);
        *(_OWORD *)uint64_t v5 = v13;
        if (v14) {
          sub_10004D2C8(v14);
        }
        uint64_t v15 = v2[15];
        if (*(unsigned char *)(v1 + 32)) {
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const __CFString *, void, void))(*(void *)v15 + 32))(v15, v1 + 8, @"unauthorized_src", @"info", 0, 0);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void, uint64_t *, uint64_t))(*(void *)v15 + 16))(v15, v1 + 8, @"unauthorized_src", kCFBooleanTrue, @"info", 0, 0, 0, v19, v20);
        }
        sub_100C19920((uint64_t)v2, 1);
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v16 = *(_OWORD *)(v1 + 8);
          uint64_t v22 = *(void *)(v1 + 24);
          *(_OWORD *)long long __dst = v16;
        }
        char v23 = 3;
        if (SHIBYTE(v22) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          char v17 = v23;
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)__dst;
          uint64_t v25 = v22;
          char v17 = 3;
        }
        char v26 = v17;
        long long v27 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v25) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v25;
        }
        LOBYTE(v30) = v26;
        long long v31 = v27;
        long long v27 = 0uLL;
        sub_100C1AE18(v2, (uint64_t)buf);
        if (*((void *)&v31 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v31 + 1));
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*((void *)&v27 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v27 + 1));
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
        if (*((void *)&v28 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v28 + 1));
        }
      }
    }
  }
  sub_10023CBF8(&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_100C37C60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28) {
    sub_10004D2C8(a28);
  }
  sub_10023CBF8(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C37CF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v19 = a1;
  uint64_t v20 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(v2[76] + 8))
    {
      int v6 = *(unsigned __int8 *)(v1 + 32);
      if (*(unsigned __int8 *)(*(void *)v5 + 96) != v6)
      {
        uint64_t v7 = v2[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = *(unsigned __int8 *)(v1 + 31);
          BOOL v9 = (v8 & 0x80u) != 0;
          if ((v8 & 0x80u) != 0) {
            uint64_t v8 = *(void *)(v1 + 16);
          }
          if (v9) {
            uint64_t v10 = *(const char **)(v1 + 8);
          }
          else {
            uint64_t v10 = (const char *)(v1 + 8);
          }
          if (v8) {
            uint64_t v11 = v10;
          }
          else {
            uint64_t v11 = "<invalid>";
          }
          long long v12 = "data-only";
          *(void *)&uint8_t buf[4] = "";
          *(void *)&buf[14] = "";
          *(_DWORD *)long long buf = 136315906;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(_WORD *)&unsigned char buf[22] = 2080;
          if (!v6) {
            long long v12 = "voice+data";
          }
          unint64_t v30 = v11;
          LOWORD(v31) = 2080;
          *(void *)((char *)&v31 + 2) = v12;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s marked as %s", buf, 0x2Au);
        }
        long long v28 = 0uLL;
        sub_100612480(*(long long **)v5, &v28);
        long long v13 = v28;
        *(unsigned char *)(v28 + 96) = *(unsigned char *)(v1 + 32);
        if (*((void *)&v13 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v13 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        uint64_t v14 = *(std::__shared_weak_count **)(v5 + 8);
        *(_OWORD *)uint64_t v5 = v13;
        if (v14) {
          sub_10004D2C8(v14);
        }
        uint64_t v15 = v2[15];
        if (*(unsigned char *)(v1 + 32)) {
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, void, void, uint64_t *, uint64_t))(*(void *)v15 + 16))(v15, v1 + 8, @"data-only-plan", kCFBooleanTrue, @"info", 0, 0, 0, v19, v20);
        }
        else {
          (*(void (**)(uint64_t, uint64_t, const __CFString *, const __CFString *, void, void))(*(void *)v15 + 32))(v15, v1 + 8, @"data-only-plan", @"info", 0, 0);
        }
        sub_100C19920((uint64_t)v2, 1);
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v16 = *(_OWORD *)(v1 + 8);
          uint64_t v22 = *(void *)(v1 + 24);
          *(_OWORD *)long long __dst = v16;
        }
        char v23 = 3;
        if (SHIBYTE(v22) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          char v17 = v23;
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)__dst;
          uint64_t v25 = v22;
          char v17 = 3;
        }
        char v26 = v17;
        long long v27 = v28;
        if (*((void *)&v28 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v28 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v25) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v25;
        }
        LOBYTE(v30) = v26;
        long long v31 = v27;
        long long v27 = 0uLL;
        sub_100C1AE18(v2, (uint64_t)buf);
        if (*((void *)&v31 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v31 + 1));
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*((void *)&v27 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v27 + 1));
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
        if (*((void *)&v28 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v28 + 1));
        }
      }
    }
  }
  sub_10023CBF8(&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_100C38080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,std::__shared_weak_count *a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,uint64_t a36,uint64_t a37)
{
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a28) {
    sub_10004D2C8(a28);
  }
  sub_10023CBF8(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100C38114(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A490B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C38134(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A490B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C38188(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 24);
  sub_10008A88C(&v1);
}

uint64_t *sub_100C381B8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v64 = a1;
  uint64_t v65 = v1;
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + 96)) {
    goto LABEL_119;
  }
  uint64_t v3 = (void *)v1[1];
  uint64_t v4 = *(void *)(v2 + 136);
  *(void *)(v2 + 136) = *v3;
  *uint64_t v3 = v4;
  uint64_t v5 = *(void *)(v2 + 144);
  *(void *)(v2 + 144) = v3[1];
  v3[1] = v5;
  uint64_t v6 = *(void *)(v2 + 152);
  *(void *)(v2 + 152) = v3[2];
  v3[2] = v6;
  uint64_t v7 = v1[1];
  uint64_t v8 = *(_DWORD **)v7;
  BOOL v9 = *(_DWORD **)(v7 + 8);
  if (*(_DWORD **)v7 != v9)
  {
    while (v8[1] != 1 || subscriber::isEsimCapable())
    {
      v8 += 42;
      if (v8 == v9)
      {
        uint64_t v8 = v9;
        break;
      }
    }
  }
  uint64_t v11 = *(void *)(v2 + 136);
  uint64_t v10 = *(void *)(v2 + 144);
  if (v11 != v10)
  {
    while (*(_DWORD *)(v11 + 4) != 1 || subscriber::isEsimCapable())
    {
      v11 += 168;
      if (v11 == v10)
      {
        uint64_t v11 = v10;
        break;
      }
    }
    if (v11 != *(void *)(v2 + 144))
    {
      if (v8 == *(_DWORD **)(v7 + 8))
      {
        BOOL v12 = 0;
        BOOL v13 = *(_DWORD *)v11 == 0;
      }
      else
      {
        BOOL v12 = *v8 != 0;
        BOOL v13 = *(_DWORD *)v11 == 0;
        if (!*(_DWORD *)v11 && *v8)
        {
          uint64_t v14 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "";
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%s4FF slot become hidden", buf, 0x16u);
          }
          uint64_t v15 = *(uint64_t ***)(v2 + 608);
          char v17 = *v15;
          long long v16 = v15[1];
          while (v17 != v16)
          {
            if (!*(unsigned char *)(*v17 + 49) && !*(unsigned char *)(*v17 + 61) && isReal())
            {
              uint64_t v57 = *v17;
              if (*(unsigned char *)(*v17 + 64))
              {
                BOOL v58 = *(NSObject **)(v2 + 40);
                if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v61 = *(const char **)(v57 + 24);
                  uint64_t v60 = v57 + 24;
                  uint64_t v59 = v61;
                  uint64_t v62 = *(unsigned __int8 *)(v60 + 23);
                  BOOL v63 = (v62 & 0x80u) != 0;
                  if ((v62 & 0x80u) != 0) {
                    uint64_t v62 = *(void *)(v60 + 8);
                  }
                  if (!v63) {
                    uint64_t v59 = (const char *)v60;
                  }
                  *(_DWORD *)long long buf = 136315650;
                  *(void *)&uint8_t buf[4] = "";
                  if (!v62) {
                    uint64_t v59 = "<invalid>";
                  }
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "";
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  int64_t v69 = (void *)v59;
                  _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I %s%s%s become hidden 4FF", buf, 0x20u);
                  uint64_t v57 = *v17;
                }
                sub_100C36C48((uint64_t **)(v2 + 512), (void **)(v57 + 24), v57 + 24);
                sub_100C14634(v2, (void *)(v2 + 512), @"Detached4FFSims", (uint64_t)"hidden-4FF-sims");
              }
              goto LABEL_64;
            }
            v17 += 2;
          }
          goto LABEL_64;
        }
      }
      if (v13 || v12 || (__int16 v18 = *(NSObject **)(v2 + 40), !os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)))
      {
        if (v13) {
          goto LABEL_64;
        }
      }
      else
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%s4FF slot become unhidden", buf, 0x16u);
      }
      if (*(void *)(v2 + 528))
      {
        int v19 = *(char *)(v11 + 95);
        if (v19 < 0)
        {
          if (!*(void *)(v11 + 80)) {
            goto LABEL_64;
          }
        }
        else if (!*(unsigned char *)(v11 + 95))
        {
          goto LABEL_64;
        }
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v67 = 0;
        uint64_t v20 = *(void *)(v2 + 512);
        if (*(char *)(v20 + 55) < 0)
        {
          sub_10004FC84(__p, *(void **)(v20 + 32), *(void *)(v20 + 40));
          LOBYTE(v19) = *(unsigned char *)(v11 + 95);
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)(v20 + 32);
          uint64_t v67 = *(void *)(v20 + 48);
        }
        if ((v19 & 0x80) != 0)
        {
          sub_10004FC84(buf, *(void **)(v11 + 72), *(void *)(v11 + 80));
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)(v11 + 72);
          *(void *)&uint8_t buf[16] = *(void *)(v11 + 88);
        }
        BOOL v21 = sub_10001D294((unsigned __int8 *)__p, buf);
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (v21)
        {
          uint64_t v22 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            char v23 = (void *)HIBYTE(v67);
            if (v67 < 0) {
              char v23 = __p[1];
            }
            uint64_t v24 = __p;
            if (v67 < 0) {
              uint64_t v24 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            if (!v23) {
              uint64_t v24 = (void **)"<invalid>";
            }
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&unsigned char buf[22] = 2080;
            int64_t v69 = v24;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s%s%s stop being hidden 4FF", buf, 0x20u);
          }
        }
        else if ((void **)(v2 + 496) == sub_100046F68(v2 + 488, __p))
        {
          uint64_t v25 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            char v26 = (void *)HIBYTE(v67);
            if (v67 < 0) {
              char v26 = __p[1];
            }
            long long v27 = __p;
            if (v67 < 0) {
              long long v27 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "";
            if (!v26) {
              long long v27 = (void **)"<invalid>";
            }
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&unsigned char buf[22] = 2080;
            int64_t v69 = v27;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s%sSIM %s replaced in hidden physical slot 1", buf, 0x20u);
          }
          sub_100C36978((uint64_t **)(v2 + 488), __p, (uint64_t)__p);
        }
        sub_10005CD2C(v2 + 512, *(char **)(v2 + 520));
        *(void *)(v2 + 512) = v2 + 520;
        *(void *)(v2 + 528) = 0;
        *(void *)(v2 + 520) = 0;
        sub_100C14634(v2, (void *)(v2 + 512), @"Detached4FFSims", (uint64_t)"hidden-4FF-sims");
        if (SHIBYTE(v67) < 0) {
          operator delete(__p[0]);
        }
      }
LABEL_64:
      if (*(_DWORD *)(v11 + 12) == 3 && *(void *)(v2 + 528))
      {
        long long v28 = *(unsigned __int8 **)(v2 + 512);
        BOOL v29 = (unsigned __int8 *)(v2 + 520);
        if (v28 != (unsigned __int8 *)(v2 + 520))
        {
          do
          {
            (*(void (**)(unsigned char *__return_ptr))(**(void **)(v2 + 120) + 24))(buf);
            unint64_t v30 = *(BOOL **)buf;
            LOBYTE(__p[0]) = 0;
            if (*(void *)buf)
            {
              CFTypeID v31 = CFGetTypeID(*(CFTypeRef *)buf);
              if (v31 == CFBooleanGetTypeID()) {
                ctu::cf::assign((ctu::cf *)__p, v30, v32);
              }
            }
            int v33 = LOBYTE(__p[0]);
            sub_1000577C4((const void **)buf);
            uint64_t v34 = *(void *)(v2 + 608);
            char v36 = *(void **)v34;
            char v35 = *(void **)(v34 + 8);
            if (*(void **)v34 == v35) {
              goto LABEL_78;
            }
            while (!sub_10001D294((unsigned __int8 *)(*v36 + 24), v28 + 32))
            {
              v36 += 2;
              if (v36 == v35)
              {
                char v36 = v35;
                break;
              }
            }
            if (v36 == *(void **)(v34 + 8))
            {
LABEL_78:
              uint64_t v38 = 0;
            }
            else
            {
              uint64_t v38 = *v36;
              char v37 = (std::__shared_weak_count *)v36[1];
              if (v37)
              {
                atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
                sub_10004D2C8(v37);
                if (!v33) {
                  goto LABEL_80;
                }
                goto LABEL_92;
              }
            }
            if (!v33)
            {
LABEL_80:
              if (!v38 && (void **)(v2 + 496) == sub_100046F68(v2 + 488, (void **)v28 + 4))
              {
                uint64_t v39 = *(NSObject **)(v2 + 40);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v40 = v28[55];
                  BOOL v41 = (v40 & 0x80u) != 0;
                  if ((v40 & 0x80u) != 0) {
                    uint64_t v40 = *((void *)v28 + 5);
                  }
                  if (v41) {
                    uint64_t v42 = (const char *)*((void *)v28 + 4);
                  }
                  else {
                    uint64_t v42 = (const char *)(v28 + 32);
                  }
                  BOOL v55 = v40 == 0;
                  uint64_t v43 = "<invalid>";
                  if (!v55) {
                    uint64_t v43 = v42;
                  }
                  *(_DWORD *)long long buf = 136315650;
                  *(void *)&uint8_t buf[4] = "";
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = "";
                  *(_WORD *)&unsigned char buf[22] = 2080;
                  int64_t v69 = (void *)v43;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s%sSIM %s disappeared from hidden physical slot 1", buf, 0x20u);
                }
                sub_100C36C48((uint64_t **)(v2 + 488), (void **)v28 + 4, (uint64_t)(v28 + 32));
              }
            }
LABEL_92:
            uint64_t v44 = (unsigned __int8 *)*((void *)v28 + 1);
            if (v44)
            {
              do
              {
                uint64_t v45 = v44;
                uint64_t v44 = *(unsigned __int8 **)v44;
              }
              while (v44);
            }
            else
            {
              do
              {
                uint64_t v45 = (unsigned __int8 *)*((void *)v28 + 2);
                BOOL v55 = *(void *)v45 == (void)v28;
                long long v28 = v45;
              }
              while (!v55);
            }
            long long v28 = v45;
          }
          while (v45 != v29);
        }
        sub_10005CD2C(v2 + 512, *(char **)(v2 + 520));
        *(void *)(v2 + 512) = v29;
        *(_OWORD *)BOOL v29 = 0u;
        sub_100C14634(v2, (void *)(v2 + 512), @"Detached4FFSims", (uint64_t)"hidden-4FF-sims");
      }
    }
  }
  if (sub_100C0F470())
  {
    unint64_t v47 = 0;
    do
    {
      int v48 = subscriber::instanceAsSimSlot((subscriber *)v47, v46);
      uint64_t v49 = *(_DWORD **)(v2 + 136);
      uint64_t v50 = *(_DWORD **)(v2 + 144);
      if (v49 != v50)
      {
        while (*v49 != v48)
        {
          v49 += 42;
          if (v49 == v50) {
            goto LABEL_117;
          }
        }
      }
      if (v49 != v50)
      {
        int v51 = v49[1];
        if (v51)
        {
          uint64_t v52 = *(_DWORD **)v7;
          uint64_t v53 = *(_DWORD **)(v7 + 8);
          if (*(_DWORD **)v7 != v53)
          {
            while (*v52 != v48)
            {
              v52 += 42;
              if (v52 == v53) {
                goto LABEL_117;
              }
            }
          }
          if (v52 != v53)
          {
            int v54 = v52[1];
            if (v54) {
              BOOL v55 = v51 == v54;
            }
            else {
              BOOL v55 = 1;
            }
            if (!v55) {
              *(_DWORD *)(*(void *)(v2 + 320) + 4 * v47) = 0;
            }
          }
        }
      }
LABEL_117:
      ++v47;
    }
    while (v47 < sub_100C0F470());
  }
  sub_100C152CC(v2);
LABEL_119:
  sub_1000E1A60((uint64_t *)&v65);
  return sub_100046B58((uint64_t *)&v64);
}

void sub_100C38A48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1000E1A60(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C38AA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v83 = a1;
  uint64_t v84 = v1;
  uint64_t v2 = *(void *)v1;
  int64x2_t v99 = 0uLL;
  unint64_t v100 = 0;
  (*(void (**)(void, uint64_t))(**(void **)(v2 + 120) + 88))(*(void *)(v2 + 120), v1 + 8);
  uint64_t v3 = *(uint64_t **)(v2 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 == v4) {
    goto LABEL_82;
  }
  while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
  {
    v5 += 16;
    if (v5 == v4)
    {
      uint64_t v5 = v4;
      break;
    }
  }
  uint64_t v6 = *(uint64_t **)(v2 + 608);
  if (v5 == v6[1])
  {
    uint64_t v8 = *v6;
    if (*v6 != v5)
    {
      uint64_t v9 = -v8;
      while (1)
      {
        uint64_t v10 = *(void *)v8;
        if (*(unsigned char *)(*(void *)v8 + 49) == 1) {
          break;
        }
        v8 += 16;
        v9 -= 16;
        if (v8 == v5) {
          goto LABEL_82;
        }
      }
      if (v8 != v5)
      {
        __int16 v18 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
        {
          BOOL v21 = *(const char **)(v10 + 24);
          uint64_t v20 = v10 + 24;
          int v19 = v21;
          uint64_t v22 = *(unsigned __int8 *)(v20 + 23);
          BOOL v23 = (v22 & 0x80u) != 0;
          if ((v22 & 0x80u) != 0) {
            uint64_t v22 = *(void *)(v20 + 8);
          }
          if (!v23) {
            int v19 = (const char *)v20;
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = "";
          if (!v22) {
            int v19 = "<invalid>";
          }
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2080;
          *(void *)long long v102 = v19;
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality %s is gone", buf, 0x20u);
          uint64_t v10 = *(void *)v8;
        }
        if (*(char *)(v10 + 47) < 0)
        {
          sub_10004FC84(__p, *(void **)(v10 + 24), *(void *)(v10 + 32));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)(v10 + 24);
          uint64_t v93 = *(void *)(v10 + 40);
        }
        char v94 = 7;
        sub_100C2FEDC(buf, (long long *)__p, (void *)v8);
        uint64_t v30 = v99.i64[1];
        if (v99.i64[1] >= v100)
        {
          v99.i64[1] = sub_100C2FC44(&v99, (long long *)buf);
          if (*(void *)&v102[16]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&v102[16]);
          }
        }
        else
        {
          if ((buf[23] & 0x80000000) != 0)
          {
            sub_10004FC84((unsigned char *)v99.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
          }
          else
          {
            long long v31 = *(_OWORD *)buf;
            *(void *)(v99.i64[1] + 16) = *(void *)&buf[16];
            *(_OWORD *)uint64_t v30 = v31;
          }
          *(unsigned char *)(v30 + 24) = v102[0];
          *(_OWORD *)(v30 + 32) = *(_OWORD *)&v102[8];
          *(_OWORD *)&v102[8] = 0uLL;
          v99.i64[1] = v30 + 48;
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v93) < 0) {
          operator delete(__p[0]);
        }
        uint64_t v32 = *(void *)(v2 + 608);
        uint64_t v33 = sub_1009ED218((long long *)(16 - v9), *(long long **)(v32 + 8), -v9);
        for (uint64_t i = *(void *)(v32 + 8); i != v33; i -= 16)
        {
          char v35 = *(std::__shared_weak_count **)(i - 8);
          if (v35) {
            sub_10004D2C8(v35);
          }
        }
        *(void *)(v32 + 8) = v33;
      }
    }
LABEL_82:
    char v36 = (void **)(v1 + 32);
    if (*(char *)(v1 + 55) < 0)
    {
      unint64_t v38 = *(void *)(v1 + 40);
      if (v38)
      {
        uint64_t v37 = *(void *)(v2 + 120);
        sub_10004FC84(__dst, *v36, v38);
        goto LABEL_87;
      }
    }
    else if (*(unsigned char *)(v1 + 55))
    {
      uint64_t v37 = *(void *)(v2 + 120);
      *(_OWORD *)long long __dst = *(_OWORD *)v36;
      uint64_t v97 = *(void *)(v1 + 48);
LABEL_87:
      if (SHIBYTE(v97) < 0)
      {
        sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)__dst;
        uint64_t v93 = v97;
      }
      v85[0] = 0;
      if (SHIBYTE(v93) < 0)
      {
        sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)__p;
        *(void *)&uint8_t buf[16] = v93;
      }
      v87[0] = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v39 = v85[0];
        v85[0] = v87[0];
        v89[0] = v39;
        sub_1000558F4((const void **)v89);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      uint64_t v98 = v85[0];
      v85[0] = 0;
      sub_1000558F4((const void **)v85);
      if (SHIBYTE(v93) < 0) {
        operator delete(__p[0]);
      }
      (*(void (**)(uint64_t, uint64_t, const __CFString *, void *, const __CFString *, void, void, void))(*(void *)v37 + 16))(v37, v1 + 8, @"mdn", v98, @"info", 0, 0, 0);
      sub_1000558F4((const void **)&v98);
      if (SHIBYTE(v97) < 0) {
        operator delete(__dst[0]);
      }
    }
    v87[0] = 0;
    v87[1] = 0;
    sub_100C1387C(v87, v2, (const std::string *)(v1 + 8), 0);
    uint64_t v40 = *(NSObject **)(v2 + 40);
    BOOL v41 = os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT);
    uint64_t v42 = v87[0];
    if (v41)
    {
      int v43 = *((_DWORD *)v87[0] + 14);
      uint64_t v44 = PersonalityInfo::logPrefix(v87[0]);
      uint64_t v45 = *(unsigned __int8 *)(v1 + 31);
      BOOL v46 = (v45 & 0x80u) != 0;
      if ((v45 & 0x80u) != 0) {
        uint64_t v45 = *(void *)(v1 + 16);
      }
      if (v46) {
        unint64_t v47 = *(const char **)(v1 + 8);
      }
      else {
        unint64_t v47 = (const char *)(v1 + 8);
      }
      *(_DWORD *)long long buf = 136316162;
      if (!v45) {
        unint64_t v47 = "<invalid>";
      }
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 1024;
      *(_DWORD *)long long v102 = v43;
      *(_WORD *)&v102[4] = 2080;
      *(void *)&v102[6] = v44;
      *(_WORD *)&v102[14] = 2080;
      *(void *)&v102[16] = v47;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s added from cloud", buf, 0x30u);
    }
    int v48 = *(PersonalityInfo ****)(v2 + 608);
    uint64_t v49 = v87[1];
    if (v87[1]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v87[1] + 1, 1uLL, memory_order_relaxed);
    }
    unint64_t v50 = (unint64_t)v48[2];
    int v51 = v48[1];
    if ((unint64_t)v51 >= v50)
    {
      uint64_t v53 = ((char *)v51 - (char *)*v48) >> 4;
      unint64_t v54 = v53 + 1;
      if ((unint64_t)(v53 + 1) >> 60) {
        sub_10006A748();
      }
      uint64_t v55 = v50 - (void)*v48;
      if (v55 >> 3 > v54) {
        unint64_t v54 = v55 >> 3;
      }
      if ((unint64_t)v55 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v56 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v56 = v54;
      }
      *(void *)&v102[8] = v48 + 2;
      uint64_t v57 = (char *)sub_10006A794((uint64_t)(v48 + 2), v56);
      BOOL v58 = (PersonalityInfo **)&v57[16 * v53];
      *(void *)long long buf = v57;
      *(void *)long long v102 = &v57[16 * v59];
      *BOOL v58 = v42;
      v58[1] = v49;
      *(void *)&uint8_t buf[16] = v58 + 2;
      uint64_t v61 = *v48;
      for (uint64_t j = v48[1]; j != v61; j[1] = 0)
      {
        long long v62 = *((_OWORD *)j - 1);
        j -= 2;
        *((_OWORD *)v58 - 1) = v62;
        v58 -= 2;
        std::string *j = 0;
      }
      *(void *)&uint8_t buf[8] = v58;
      BOOL v63 = *v48;
      const char *v48 = v58;
      *(void *)&uint8_t buf[8] = v63;
      uint64_t v64 = v48[1];
      v48[1] = *(PersonalityInfo ***)&buf[16];
      uint64_t v65 = *(void *)&buf[8];
      *(void *)&uint8_t buf[16] = v64;
      uint64_t v66 = v48[2];
      v48[2] = *(PersonalityInfo ***)v102;
      *(void *)long long v102 = v66;
      *(void *)long long buf = v65;
      uint64_t v52 = v48[1];
      sub_10019E528((uint64_t)buf);
    }
    else
    {
      *int v51 = v42;
      v51[1] = v49;
      uint64_t v52 = v51 + 2;
      v48[1] = v51 + 2;
    }
    v48[1] = v52;
    if (*(char *)(v1 + 31) < 0)
    {
      sub_10004FC84(v89, *(void **)(v1 + 8), *(void *)(v1 + 16));
    }
    else
    {
      long long v67 = *(_OWORD *)(v1 + 8);
      uint64_t v90 = *(void *)(v1 + 24);
      *(_OWORD *)uint64_t v89 = v67;
    }
    char v91 = 0;
    if (SHIBYTE(v90) < 0)
    {
      sub_10004FC84(__p, v89[0], (unint64_t)v89[1]);
      char v68 = v91;
    }
    else
    {
      char v68 = 0;
      *(_OWORD *)long long __p = *(_OWORD *)v89;
      uint64_t v93 = v90;
    }
    char v94 = v68;
    *(void *)&long long v95 = v42;
    *((void *)&v95 + 1) = v49;
    if (v49) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v49 + 1, 1uLL, memory_order_relaxed);
    }
    if (SHIBYTE(v93) < 0)
    {
      sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)__p;
      *(void *)&uint8_t buf[16] = v93;
    }
    v102[0] = v94;
    *(_OWORD *)&v102[8] = v95;
    long long v95 = 0uLL;
    uint64_t v69 = v99.i64[1];
    if (v99.i64[1] >= v100)
    {
      v99.i64[1] = sub_100C2FC44(&v99, (long long *)buf);
      if (*(void *)&v102[16]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v102[16]);
      }
    }
    else
    {
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_10004FC84((unsigned char *)v99.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        long long v70 = *(_OWORD *)buf;
        *(void *)(v99.i64[1] + 16) = *(void *)&buf[16];
        *(_OWORD *)uint64_t v69 = v70;
      }
      *(unsigned char *)(v69 + 24) = v102[0];
      *(_OWORD *)(v69 + 32) = *(_OWORD *)&v102[8];
      *(_OWORD *)&v102[8] = 0uLL;
      v99.i64[1] = v69 + 48;
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (*((void *)&v95 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v95 + 1));
    }
    if (SHIBYTE(v93) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v90) < 0) {
      operator delete(v89[0]);
    }
    if (!v49) {
      goto LABEL_153;
    }
    BOOL v29 = (std::__shared_weak_count *)v49;
LABEL_152:
    sub_10004D2C8(v29);
LABEL_153:
    sub_100C19920(v2, 1);
    goto LABEL_154;
  }
  char v7 = *(unsigned char *)(v1 + 55);
  if (v7 < 0)
  {
    if (!*(void *)(v1 + 40)) {
      goto LABEL_154;
    }
LABEL_15:
    uint64_t v11 = (void **)(v1 + 32);
    uint64_t v12 = *(unsigned __int8 *)(*(void *)v5 + 95);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(*(void *)v5 + 95);
    }
    else {
      uint64_t v13 = *(void *)(*(void *)v5 + 80);
    }
    unint64_t v14 = *(void *)(v1 + 40);
    if (v7 >= 0) {
      uint64_t v15 = *(unsigned __int8 *)(v1 + 55);
    }
    else {
      uint64_t v15 = *(void *)(v1 + 40);
    }
    if (v13 == v15)
    {
      long long v16 = (const void **)(*(void *)v5 + 72);
      if (v7 >= 0) {
        char v17 = (unsigned __int8 *)(v1 + 32);
      }
      else {
        char v17 = (unsigned __int8 *)*v11;
      }
      if ((v12 & 0x80) != 0)
      {
        if (!memcmp(*v16, v17, *(void *)(*(void *)v5 + 80))) {
          goto LABEL_154;
        }
      }
      else
      {
        if (!*(unsigned char *)(*(void *)v5 + 95)) {
          goto LABEL_154;
        }
        while (*(unsigned __int8 *)v16 == *v17)
        {
          long long v16 = (const void **)((char *)v16 + 1);
          ++v17;
          if (!--v12) {
            goto LABEL_154;
          }
        }
      }
    }
    uint64_t v24 = *(void *)(v2 + 120);
    if (v7 < 0)
    {
      sub_10004FC84(__dst, *v11, v14);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)v11;
      uint64_t v97 = *(void *)(v1 + 48);
    }
    if (SHIBYTE(v97) < 0)
    {
      sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)__dst;
      uint64_t v93 = v97;
    }
    v85[0] = 0;
    if (SHIBYTE(v93) < 0)
    {
      sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)__p;
      *(void *)&uint8_t buf[16] = v93;
    }
    v87[0] = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v25 = v85[0];
      v85[0] = v87[0];
      v89[0] = v25;
      sub_1000558F4((const void **)v89);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v98 = v85[0];
    v85[0] = 0;
    sub_1000558F4((const void **)v85);
    if (SHIBYTE(v93) < 0) {
      operator delete(__p[0]);
    }
    (*(void (**)(uint64_t, uint64_t, const __CFString *, void *, const __CFString *, void, void, void))(*(void *)v24 + 16))(v24, v1 + 8, @"mdn", v98, @"info", 0, 0, 0);
    sub_1000558F4((const void **)&v98);
    if (SHIBYTE(v97) < 0) {
      operator delete(__dst[0]);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100612480(*(long long **)v5, buf);
    std::string::operator=((std::string *)(*(void *)buf + 72), (const std::string *)(v1 + 32));
    uint64_t v27 = *(void *)buf;
    uint64_t v26 = *(void *)&buf[8];
    if (*(void *)&buf[8]) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
    }
    long long v28 = *(std::__shared_weak_count **)(v5 + 8);
    *(void *)uint64_t v5 = v27;
    *(void *)(v5 + 8) = v26;
    if (v28) {
      sub_10004D2C8(v28);
    }
    BOOL v29 = *(std::__shared_weak_count **)&buf[8];
    if (!*(void *)&buf[8]) {
      goto LABEL_153;
    }
    goto LABEL_152;
  }
  if (*(unsigned char *)(v1 + 55)) {
    goto LABEL_15;
  }
LABEL_154:
  uint64_t v71 = v99.i64[0];
  if (v99.i64[1] != v99.i64[0])
  {
    uint64_t v72 = 0;
    unint64_t v73 = 0;
    do
    {
      sub_100C1AE18((void *)v2, v71 + v72);
      ++v73;
      uint64_t v71 = v99.i64[0];
      v72 += 48;
    }
    while (v73 < 0xAAAAAAAAAAAAAAABLL * ((v99.i64[1] - v99.i64[0]) >> 4));
  }
  if (*(char *)(v1 + 79) < 0)
  {
    if (!*(void *)(v1 + 64)) {
      goto LABEL_196;
    }
  }
  else if (!*(unsigned char *)(v1 + 79))
  {
    goto LABEL_196;
  }
  uint64_t v74 = sub_100046F68(v2 + 832, (void **)(v1 + 8));
  uint64_t v75 = (unsigned __int8 **)(v1 + 56);
  if ((void **)(v2 + 840) != v74)
  {
    uint64_t v76 = *((unsigned __int8 *)v74 + 127);
    if ((v76 & 0x80u) == 0) {
      uint64_t v77 = (void *)*((unsigned __int8 *)v74 + 127);
    }
    else {
      uint64_t v77 = v74[14];
    }
    uint64_t v78 = (void *)*(unsigned __int8 *)(v1 + 79);
    int v79 = (char)v78;
    if ((char)v78 < 0) {
      uint64_t v78 = *(void **)(v1 + 64);
    }
    if (v77 == v78)
    {
      uint64_t v80 = (const void **)(v74 + 13);
      if (v79 >= 0) {
        uint64_t v81 = (unsigned __int8 *)(v1 + 56);
      }
      else {
        uint64_t v81 = *v75;
      }
      if ((v76 & 0x80) != 0)
      {
        if (!memcmp(*v80, v81, (size_t)v74[14])) {
          goto LABEL_196;
        }
      }
      else
      {
        if (!*((unsigned char *)v74 + 127)) {
          goto LABEL_196;
        }
        while (*(unsigned __int8 *)v80 == *v81)
        {
          uint64_t v80 = (const void **)((char *)v80 + 1);
          ++v81;
          if (!--v76) {
            goto LABEL_196;
          }
        }
      }
    }
  }
  sub_100058DB0(v87, "");
  sub_100058DB0(v85, "");
  if (*(char *)(v1 + 79) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 56), *(void *)(v1 + 64));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v75;
    uint64_t v93 = *(void *)(v1 + 72);
  }
  char v94 = 1;
  LOBYTE(v89[0]) = 0;
  char v91 = 0;
  sub_100C298EC((uint64_t)buf, v2, v1 + 8, (long long *)v87, (long long *)v85, (uint64_t)__p, (uint64_t)v89);
  if (v106 < 0) {
    operator delete(v105);
  }
  if (v104 < 0) {
    operator delete(v103);
  }
  if ((v102[23] & 0x80000000) != 0) {
    operator delete(*(void **)v102);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  if (v94 && SHIBYTE(v93) < 0) {
    operator delete(__p[0]);
  }
  if (v86 < 0) {
    operator delete(v85[0]);
  }
  if (v88 < 0) {
    operator delete(v87[0]);
  }
  sub_100C28CB0(v2, v1 + 8, 1);
  sub_100C1E074(v2, "Thumper label added", 0);
LABEL_196:
  __p[0] = &v99;
  sub_100C30EFC((void ***)__p);
  sub_10023C858(&v84);
  return sub_100046B58((uint64_t *)&v83);
}

void sub_100C396C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,__int16 *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46,int a47,__int16 a48,char a49,char a50,uint64_t a51)
{
  uint64_t v53 = *(std::__shared_weak_count **)(v51 - 152);
  if (v53) {
    sub_10004D2C8(v53);
  }
  if (*(char *)(v51 - 169) < 0) {
    operator delete(*(void **)(v51 - 192));
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  a23 = &a48;
  sub_100C30EFC((void ***)&a23);
  sub_10023C858(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C398C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v21 = a1;
  uint64_t v22 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(v2[76] + 8))
    {
      uint64_t v6 = v2[5];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(*(void *)v5 + 56);
        uint64_t v8 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v5);
        uint64_t v9 = *(unsigned __int8 *)(v1 + 31);
        BOOL v10 = (v9 & 0x80u) != 0;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = *(void *)(v1 + 16);
        }
        if (v10) {
          uint64_t v11 = *(std::__shared_weak_count **)(v1 + 8);
        }
        else {
          uint64_t v11 = (std::__shared_weak_count *)(v1 + 8);
        }
        *(_DWORD *)long long buf = 136316162;
        if (!v9) {
          uint64_t v11 = (std::__shared_weak_count *)"<invalid>";
        }
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v27 = v7;
        __int16 v28 = 2080;
        *(void *)BOOL v29 = v8;
        *(_WORD *)&v29[8] = 2080;
        uint64_t v30 = v11;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s is gone", buf, 0x30u);
      }
      uint64_t v13 = *(PersonalityInfo **)v5;
      uint64_t v12 = *(std::__shared_weak_count **)(v5 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = v2[76];
      uint64_t v15 = sub_1009ED218((long long *)(v5 + 16), *(long long **)(v14 + 8), v5);
      for (uint64_t i = *(void *)(v14 + 8); i != v15; i -= 16)
      {
        char v17 = *(std::__shared_weak_count **)(i - 8);
        if (v17) {
          sub_10004D2C8(v17);
        }
      }
      *(void *)(v14 + 8) = v15;
      sub_100C19920((uint64_t)v2, 1);
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
      }
      else
      {
        long long v18 = *(_OWORD *)(v1 + 8);
        uint64_t v24 = *(void *)(v1 + 24);
        *(_OWORD *)long long __p = v18;
      }
      char v25 = 7;
      if (SHIBYTE(v24) < 0)
      {
        sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        char v19 = v25;
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)__p;
        *(void *)&uint8_t buf[16] = v24;
        char v19 = 7;
      }
      LOBYTE(v27) = v19;
      *(void *)&v29[2] = v13;
      uint64_t v30 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100C1AE18(v2, (uint64_t)buf);
      if (v30) {
        sub_10004D2C8(v30);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v24) < 0) {
        operator delete(__p[0]);
      }
      if (v12) {
        sub_10004D2C8(v12);
      }
    }
  }
  sub_1001102C4(&v22);
  return sub_100046B58((uint64_t *)&v21);
}

void sub_100C39B58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_1001102C4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C39BC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(v2[76] + 8))
    {
      uint64_t v6 = *(PersonalityInfo **)v5;
      if (*(unsigned __int8 *)(*(void *)v5 + 48) != *(unsigned __int8 *)(v1 + 32))
      {
        if (*(unsigned char *)(v1 + 32)) {
          char v7 = 1;
        }
        else {
          char v7 = 2;
        }
        uint64_t v8 = v2[5];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *((_DWORD *)v6 + 14);
          uint64_t v20 = PersonalityInfo::logPrefix(v6);
          uint64_t v9 = *(unsigned __int8 *)(v1 + 31);
          uint64_t v11 = *(const char **)(v1 + 8);
          uint64_t v10 = *(void *)(v1 + 16);
          uint64_t v12 = asString();
          *(_DWORD *)long long buf = 136316418;
          *(void *)&uint8_t buf[4] = "";
          if ((v9 & 0x80u) == 0) {
            uint64_t v13 = v9;
          }
          else {
            uint64_t v13 = v10;
          }
          *(void *)&buf[14] = "";
          uint64_t v14 = "<invalid>";
          *(_WORD *)&unsigned char buf[22] = 1024;
          if ((v9 & 0x80u) == 0) {
            uint64_t v15 = (const char *)(v1 + 8);
          }
          else {
            uint64_t v15 = v11;
          }
          *(_WORD *)&unsigned char buf[12] = 2080;
          if (v13) {
            uint64_t v14 = v15;
          }
          int v33 = v21;
          __int16 v34 = 2080;
          *(void *)char v35 = v20;
          *(_WORD *)&v35[8] = 2080;
          *(void *)&v35[10] = v14;
          __int16 v36 = 2080;
          uint64_t v37 = v12;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s %s", buf, 0x3Au);
        }
        long long v31 = 0uLL;
        sub_100612480(*(long long **)v5, &v31);
        long long v16 = v31;
        *(unsigned char *)(v31 + 48) = *(unsigned char *)(v1 + 32);
        if (*((void *)&v16 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v17 = *(std::__shared_weak_count **)(v5 + 8);
        *(_OWORD *)uint64_t v5 = v16;
        if (v17) {
          sub_10004D2C8(v17);
        }
        sub_100C19920((uint64_t)v2, 1);
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v18 = *(_OWORD *)(v1 + 8);
          uint64_t v25 = *(void *)(v1 + 24);
          *(_OWORD *)long long __dst = v18;
        }
        char v26 = v7;
        if (SHIBYTE(v25) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          char v7 = v26;
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)__dst;
          uint64_t v28 = v25;
        }
        char v29 = v7;
        long long v30 = v31;
        if (*((void *)&v31 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v28) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v28;
        }
        LOBYTE(v33) = v29;
        *(_OWORD *)&v35[2] = v30;
        long long v30 = 0uLL;
        sub_100C1AE18(v2, (uint64_t)buf);
        if (*(void *)&v35[10]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v35[10]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*((void *)&v30 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v30 + 1));
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__dst[0]);
        }
        if (*((void *)&v31 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
    }
  }
  sub_10023CBF8(&v23);
  return sub_100046B58((uint64_t *)&v22);
}

void sub_100C39EEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a28) {
    sub_10004D2C8(a28);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a30) {
    sub_10004D2C8(a30);
  }
  sub_10023CBF8(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C39F80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v15 = a1;
  uint64_t v16 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(PersonalityInfo ****)(*(void *)v1 + 608);
  uint64_t v4 = *v3;
  uint64_t v5 = v3[1];
  if (*v3 != v5)
  {
    while (!sub_10001D294((unsigned __int8 *)*v4 + 24, (unsigned __int8 *)(v1 + 8)))
    {
      v4 += 2;
      if (v4 == v5)
      {
        uint64_t v4 = v5;
        break;
      }
    }
    if (v4 != *(PersonalityInfo ***)(v2[76] + 8))
    {
      uint64_t v6 = *v4;
      if (*((unsigned char *)*v4 + 48))
      {
        char v7 = v2[5];
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = *((_DWORD *)v6 + 14);
          uint64_t v9 = PersonalityInfo::logPrefix(v6);
          uint64_t v10 = *(unsigned __int8 *)(v1 + 31);
          BOOL v11 = (v10 & 0x80u) != 0;
          if ((v10 & 0x80u) != 0) {
            uint64_t v10 = *(void *)(v1 + 16);
          }
          if (v11) {
            uint64_t v12 = *(std::__shared_weak_count **)(v1 + 8);
          }
          else {
            uint64_t v12 = (std::__shared_weak_count *)(v1 + 8);
          }
          *(_DWORD *)long long buf = 136316162;
          if (!v10) {
            uint64_t v12 = (std::__shared_weak_count *)"<invalid>";
          }
          *(void *)&uint8_t buf[4] = "";
          __int16 v21 = 2080;
          uint64_t v22 = "";
          __int16 v23 = 1024;
          int v24 = v8;
          __int16 v25 = 2080;
          uint64_t v26 = v9;
          __int16 v27 = 2080;
          uint64_t v28 = v12;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s is updated", buf, 0x30u);
        }
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v13 = *(_OWORD *)(v1 + 8);
          uint64_t v18 = *(void *)(v1 + 24);
          *(_OWORD *)long long __p = v13;
        }
        char v19 = 4;
        sub_100C2FEDC(buf, (long long *)__p, v4);
        sub_100C1AE18(v2, (uint64_t)buf);
        if (v28) {
          sub_10004D2C8(v28);
        }
        if (SHIBYTE(v23) < 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v18) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_1001102C4(&v16);
  return sub_100046B58((uint64_t *)&v15);
}

void sub_100C3A17C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
}

uint64_t *sub_100C3A1D4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v48 = a1;
  uint64_t v49 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 608);
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void **)(v3 + 8);
  if (*(void **)v3 == v5) {
    goto LABEL_12;
  }
  while (!sub_10001D294((unsigned __int8 *)(*v4 + 24), (unsigned __int8 *)(v1 + 8)))
  {
    v4 += 2;
    if (v4 == v5)
    {
      uint64_t v4 = v5;
      break;
    }
  }
  if (v4 == *(void **)(v3 + 8))
  {
LABEL_12:
    char v7 = 0;
    goto LABEL_13;
  }
  uint64_t v6 = *v4;
  char v7 = (std::__shared_weak_count *)v4[1];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
LABEL_13:
    int64x2_t v58 = 0uLL;
    unint64_t v59 = 0;
    (*(void (**)(void, uint64_t))(**(void **)(v2 + 120) + 88))(*(void *)(v2 + 120), v1 + 8);
    uint64_t v9 = (char *)operator new(0x80uLL);
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = 0;
    *(void *)uint64_t v9 = off_1019C7410;
    *(_OWORD *)(v9 + 24) = 0u;
    uint64_t v10 = (void **)(v9 + 24);
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *((void *)v9 + 14) = 0;
    *((void *)v9 + 15) = 0;
    *(_OWORD *)(v9 + 40) = 0u;
    *(_OWORD *)(v9 + 56) = 0u;
    *((_DWORD *)v9 + 20) = -1;
    v9[88] = 1;
    *((void *)v9 + 12) = 0;
    *((void *)v9 + 13) = 0;
    v9[120] = 0;
    std::string::operator=((std::string *)v9 + 2, (const std::string *)(v1 + 8));
    sub_100C13B78((uint64_t)buf);
    if (v9[47] < 0) {
      operator delete(*v10);
    }
    *(_OWORD *)uint64_t v10 = *(_OWORD *)buf;
    *((void *)v9 + 5) = *(void *)&buf[16];
    v9[72] = 0;
    v9[73] = *(unsigned char *)(v1 + 32);
    *((_DWORD *)v9 + 19) = 0;
    int v11 = *(_DWORD *)(v2 + 624);
    *(_DWORD *)(v2 + 624) = v11 + 1;
    *((_DWORD *)v9 + 20) = v11;
    uint64_t v12 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v47 = v7;
      uint64_t v46 = PersonalityInfo::logPrefix((PersonalityInfo *)v10);
      uint64_t v13 = *(unsigned __int8 *)(v1 + 31);
      uint64_t v14 = *(void *)(v1 + 16);
      uint64_t v45 = *(const char **)(v1 + 8);
      uint64_t v15 = asString();
      *(_DWORD *)long long buf = 136316418;
      *(void *)&uint8_t buf[4] = "";
      if ((v13 & 0x80u) == 0) {
        uint64_t v16 = v13;
      }
      else {
        uint64_t v16 = v14;
      }
      *(_WORD *)&unsigned char buf[12] = 2080;
      char v17 = v45;
      if ((v13 & 0x80u) == 0) {
        char v17 = (const char *)(v1 + 8);
      }
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 1024;
      uint64_t v18 = "<invalid>";
      *(_DWORD *)uint64_t v61 = v11;
      if (v16) {
        uint64_t v18 = v17;
      }
      *(_WORD *)&v61[4] = 2080;
      *(void *)&v61[6] = v46;
      *(_WORD *)&v61[14] = 2080;
      *(void *)&v61[16] = v18;
      __int16 v62 = 2080;
      uint64_t v63 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s added with type %s", buf, 0x3Au);
      char v7 = v47;
    }
    char v19 = *(void *****)(v2 + 608);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    uint64_t v20 = v19[1];
    unint64_t v21 = (unint64_t)v19[2];
    if ((unint64_t)v20 >= v21)
    {
      uint64_t v23 = ((char *)v20 - (char *)*v19) >> 4;
      unint64_t v24 = v23 + 1;
      if ((unint64_t)(v23 + 1) >> 60) {
        sub_10006A748();
      }
      uint64_t v25 = v21 - (void)*v19;
      if (v25 >> 3 > v24) {
        unint64_t v24 = v25 >> 3;
      }
      if ((unint64_t)v25 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v26 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v26 = v24;
      }
      *(void *)&v61[8] = v19 + 2;
      __int16 v27 = (char *)sub_10006A794((uint64_t)(v19 + 2), v26);
      uint64_t v28 = (void ***)&v27[16 * v23];
      *(void *)long long buf = v27;
      *(void *)uint64_t v61 = &v27[16 * v29];
      *uint64_t v28 = v10;
      v28[1] = (void **)v9;
      *(void *)&uint8_t buf[16] = v28 + 2;
      long long v31 = *v19;
      for (uint64_t i = v19[1]; i != v31; i[1] = 0)
      {
        long long v32 = *((_OWORD *)i - 1);
        i -= 2;
        *((_OWORD *)v28 - 1) = v32;
        v28 -= 2;
        char *i = 0;
      }
      *(void *)&uint8_t buf[8] = v28;
      int v33 = *v19;
      const char *v19 = v28;
      *(void *)&uint8_t buf[8] = v33;
      __int16 v34 = v19[1];
      v19[1] = *(void ****)&buf[16];
      uint64_t v35 = *(void *)&buf[8];
      *(void *)&uint8_t buf[16] = v34;
      __int16 v36 = v19[2];
      v19[2] = *(void ****)v61;
      *(void *)uint64_t v61 = v36;
      *(void *)long long buf = v35;
      uint64_t v22 = v19[1];
      sub_10019E528((uint64_t)buf);
    }
    else
    {
      uint64_t *v20 = v10;
      v20[1] = (void **)v9;
      uint64_t v22 = v20 + 2;
      v19[1] = v20 + 2;
    }
    v19[1] = v22;
    if (*(char *)(v1 + 31) < 0)
    {
      sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
    }
    else
    {
      long long v37 = *(_OWORD *)(v1 + 8);
      uint64_t v51 = *(void *)(v1 + 24);
      *(_OWORD *)long long __dst = v37;
    }
    char v52 = 0;
    if (SHIBYTE(v51) < 0)
    {
      sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
      char v38 = v52;
    }
    else
    {
      char v38 = 0;
      *(_OWORD *)long long __p = *(_OWORD *)__dst;
      uint64_t v54 = v51;
    }
    char v55 = v38;
    unint64_t v56 = (void **)(v9 + 24);
    uint64_t v57 = (std::__shared_weak_count *)v9;
    atomic_fetch_add_explicit((atomic_ullong *volatile)v9 + 1, 1uLL, memory_order_relaxed);
    if (SHIBYTE(v54) < 0)
    {
      sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
      char v38 = v55;
      uint64_t v10 = v56;
      uint64_t v39 = v57;
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)__p;
      *(void *)&uint8_t buf[16] = v54;
      uint64_t v39 = (std::__shared_weak_count *)v9;
    }
    v61[0] = v38;
    *(void *)&v61[8] = v10;
    *(void *)&v61[16] = v39;
    unint64_t v56 = 0;
    uint64_t v57 = 0;
    uint64_t v40 = v58.i64[1];
    if (v58.i64[1] >= v59)
    {
      v58.i64[1] = sub_100C2FC44(&v58, (long long *)buf);
      if (*(void *)&v61[16]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v61[16]);
      }
    }
    else
    {
      if ((buf[23] & 0x80000000) != 0)
      {
        sub_10004FC84((unsigned char *)v58.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        long long v41 = *(_OWORD *)buf;
        *(void *)(v58.i64[1] + 16) = *(void *)&buf[16];
        *(_OWORD *)uint64_t v40 = v41;
      }
      *(unsigned char *)(v40 + 24) = v61[0];
      *(_OWORD *)(v40 + 32) = *(_OWORD *)&v61[8];
      *(void *)&v61[8] = 0;
      *(void *)&v61[16] = 0;
      v58.i64[1] = v40 + 48;
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v57) {
      sub_10004D2C8(v57);
    }
    if (SHIBYTE(v54) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v51) < 0) {
      operator delete(__dst[0]);
    }
    sub_100C19920(v2, 1);
    uint64_t v42 = v58.i64[0];
    if (v58.i64[1] != v58.i64[0])
    {
      uint64_t v43 = 0;
      unint64_t v44 = 0;
      do
      {
        sub_100C1AE18((void *)v2, v42 + v43);
        ++v44;
        uint64_t v42 = v58.i64[0];
        v43 += 48;
      }
      while (v44 < 0xAAAAAAAAAAAAAAABLL * ((v58.i64[1] - v58.i64[0]) >> 4));
    }
    sub_10004D2C8((std::__shared_weak_count *)v9);
    *(void *)long long buf = &v58;
    sub_100C30EFC((void ***)buf);
    if (v7) {
      goto LABEL_10;
    }
    goto LABEL_11;
  }
  if (v7) {
LABEL_10:
  }
    sub_10004D2C8(v7);
LABEL_11:
  sub_10023CBF8(&v49);
  return sub_100046B58((uint64_t *)&v48);
}

void sub_100C3A770(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,std::__shared_weak_count *a43)
{
  if (a43) {
    sub_10004D2C8(a43);
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a30) {
    sub_10004D2C8(a30);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  sub_10004D2C8(v43);
  a22 = &a32;
  sub_100C30EFC((void ***)&a22);
  if (v44) {
    sub_10004D2C8(v44);
  }
  sub_10023CBF8(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3A86C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v28 = a1;
  uint64_t v29 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(*(void *)(v2 + 608) + 8))
    {
      uint64_t v6 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        int v7 = *(_DWORD *)(*(void *)v5 + 56);
        uint64_t v8 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v5);
        uint64_t v9 = *(unsigned __int8 *)(v1 + 31);
        BOOL v10 = (v9 & 0x80u) != 0;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = *(void *)(v1 + 16);
        }
        if (v10) {
          int v11 = *(std::__shared_weak_count **)(v1 + 8);
        }
        else {
          int v11 = (std::__shared_weak_count *)(v1 + 8);
        }
        *(_DWORD *)long long buf = 136316162;
        if (!v9) {
          int v11 = (std::__shared_weak_count *)"<invalid>";
        }
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 1024;
        int v34 = v7;
        __int16 v35 = 2080;
        *(void *)__int16 v36 = v8;
        *(_WORD *)&v36[8] = 2080;
        long long v37 = v11;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s is gone", buf, 0x30u);
      }
      uint64_t v13 = *(PersonalityInfo **)v5;
      uint64_t v12 = *(std::__shared_weak_count **)(v5 + 8);
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v14 = *(void *)(v2 + 608);
      uint64_t v15 = sub_1009ED218((long long *)(v5 + 16), *(long long **)(v14 + 8), v5);
      for (uint64_t i = *(void *)(v14 + 8); i != v15; i -= 16)
      {
        char v17 = *(std::__shared_weak_count **)(i - 8);
        if (v17) {
          sub_10004D2C8(v17);
        }
      }
      *(void *)(v14 + 8) = v15;
      uint64_t v18 = (uint64_t **)(v2 + 1192);
      char v19 = (uint64_t *)sub_100046F68(v2 + 1192, (void **)(v1 + 8));
      if ((uint64_t *)(v2 + 1200) != v19)
      {
        uint64_t v20 = v19;
        unint64_t v21 = (uint64_t *)v19[1];
        if (v21)
        {
          do
          {
            uint64_t v22 = v21;
            unint64_t v21 = (uint64_t *)*v21;
          }
          while (v21);
        }
        else
        {
          uint64_t v23 = v19;
          do
          {
            uint64_t v22 = (uint64_t *)v23[2];
            BOOL v24 = *v22 == (void)v23;
            uint64_t v23 = v22;
          }
          while (!v24);
        }
        if (*v18 == v19) {
          *uint64_t v18 = v22;
        }
        --*(void *)(v2 + 1208);
        sub_10005EE6C(*(uint64_t **)(v2 + 1200), v19);
        sub_10008E614((uint64_t)(v20 + 4));
        operator delete(v20);
      }
      (*(void (**)(void, uint64_t))(**(void **)(v2 + 120) + 112))(*(void *)(v2 + 120), v1 + 8);
      sub_100C19920(v2, 1);
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
      }
      else
      {
        long long v25 = *(_OWORD *)(v1 + 8);
        uint64_t v31 = *(void *)(v1 + 24);
        *(_OWORD *)long long __p = v25;
      }
      char v32 = 7;
      if (SHIBYTE(v31) < 0)
      {
        sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        char v26 = v32;
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)__p;
        *(void *)&uint8_t buf[16] = v31;
        char v26 = 7;
      }
      LOBYTE(v34) = v26;
      *(void *)&v36[2] = v13;
      long long v37 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100C1AE18((void *)v2, (uint64_t)buf);
      if (v37) {
        sub_10004D2C8(v37);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      if (v12) {
        sub_10004D2C8(v12);
      }
    }
  }
  sub_1001102C4(&v29);
  return sub_100046B58((uint64_t *)&v28);
}

void sub_100C3ABB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_1001102C4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3AC24(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(uint64_t **)(*(void *)v1 + 608);
  uint64_t v5 = *v3;
  uint64_t v4 = v3[1];
  if (*v3 != v4)
  {
    while (!sub_10001D294((unsigned __int8 *)(*(void *)v5 + 24), (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 16;
      if (v5 == v4)
      {
        uint64_t v5 = v4;
        break;
      }
    }
    if (v5 != *(void *)(v2[76] + 8))
    {
      uint64_t v6 = *(PersonalityInfo **)v5;
      if (*(unsigned __int8 *)(*(void *)v5 + 48) != *(unsigned __int8 *)(v1 + 32))
      {
        if (*(unsigned char *)(v1 + 32)) {
          char v7 = 1;
        }
        else {
          char v7 = 2;
        }
        uint64_t v8 = v2[5];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          int v21 = *((_DWORD *)v6 + 14);
          uint64_t v20 = PersonalityInfo::logPrefix(v6);
          uint64_t v9 = *(unsigned __int8 *)(v1 + 31);
          int v11 = *(const char **)(v1 + 8);
          uint64_t v10 = *(void *)(v1 + 16);
          uint64_t v12 = asString();
          *(_DWORD *)long long buf = 136316418;
          *(void *)&uint8_t buf[4] = "";
          if ((v9 & 0x80u) == 0) {
            uint64_t v13 = v9;
          }
          else {
            uint64_t v13 = v10;
          }
          *(void *)&buf[14] = "";
          uint64_t v14 = "<invalid>";
          *(_WORD *)&unsigned char buf[22] = 1024;
          if ((v9 & 0x80u) == 0) {
            uint64_t v15 = (const char *)(v1 + 8);
          }
          else {
            uint64_t v15 = v11;
          }
          *(_WORD *)&unsigned char buf[12] = 2080;
          if (v13) {
            uint64_t v14 = v15;
          }
          int v33 = v21;
          __int16 v34 = 2080;
          *(void *)__int16 v35 = v20;
          *(_WORD *)&v35[8] = 2080;
          *(void *)&v35[10] = v14;
          __int16 v36 = 2080;
          uint64_t v37 = v12;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s %s", buf, 0x3Au);
        }
        long long v31 = 0uLL;
        sub_100612480(*(long long **)v5, &v31);
        long long v16 = v31;
        *(unsigned char *)(v31 + 48) = *(unsigned char *)(v1 + 32);
        if (*((void *)&v16 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v16 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        char v17 = *(std::__shared_weak_count **)(v5 + 8);
        *(_OWORD *)uint64_t v5 = v16;
        if (v17) {
          sub_10004D2C8(v17);
        }
        sub_100C19920((uint64_t)v2, 1);
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v18 = *(_OWORD *)(v1 + 8);
          uint64_t v25 = *(void *)(v1 + 24);
          *(_OWORD *)long long __dst = v18;
        }
        char v26 = v7;
        if (SHIBYTE(v25) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          char v7 = v26;
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)__dst;
          uint64_t v28 = v25;
        }
        char v29 = v7;
        long long v30 = v31;
        if (*((void *)&v31 + 1)) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v31 + 1) + 8), 1uLL, memory_order_relaxed);
        }
        if (SHIBYTE(v28) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v28;
        }
        LOBYTE(v33) = v29;
        *(_OWORD *)&v35[2] = v30;
        long long v30 = 0uLL;
        sub_100C1AE18(v2, (uint64_t)buf);
        if (*(void *)&v35[10]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v35[10]);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (*((void *)&v30 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v30 + 1));
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v25) < 0) {
          operator delete(__dst[0]);
        }
        if (*((void *)&v31 + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&v31 + 1));
        }
      }
    }
  }
  sub_10023CBF8(&v23);
  return sub_100046B58((uint64_t *)&v22);
}

void sub_100C3AF48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,std::__shared_weak_count *a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,uint64_t a38,uint64_t a39)
{
  if (a28) {
    sub_10004D2C8(a28);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  if (a30) {
    sub_10004D2C8(a30);
  }
  sub_10023CBF8(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3AFDC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v25 = a1;
  uint64_t v26 = v1;
  uint64_t v3 = (long long *)(v1 + 8);
  uint64_t v2 = *(void *)v1;
  uint64_t v4 = *(PersonalityInfo ****)(*(void *)v1 + 608);
  uint64_t v5 = *v4;
  uint64_t v6 = v4[1];
  if (*v4 != v6)
  {
    while (!sub_10001D294((unsigned __int8 *)*v5 + 24, (unsigned __int8 *)(v1 + 8)))
    {
      v5 += 2;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    if (v5 != *(PersonalityInfo ***)(*(void *)(v2 + 608) + 8))
    {
      std::mutex::lock((std::mutex *)(v2 + 1128));
      char v7 = *(uint64_t **)(v2 + 1200);
      uint64_t v8 = (uint64_t **)(v2 + 1200);
      uint64_t v9 = (uint64_t **)(v2 + 1200);
      if (!v7) {
        goto LABEL_15;
      }
      uint64_t v8 = (uint64_t **)(v2 + 1200);
      while (1)
      {
        while (1)
        {
          uint64_t v9 = (uint64_t **)v7;
          uint64_t v10 = v7 + 4;
          if ((sub_100046FE8((void *)(v1 + 8), (void **)v7 + 4) & 0x80) == 0) {
            break;
          }
          char v7 = *v9;
          uint64_t v8 = v9;
          if (!*v9) {
            goto LABEL_15;
          }
        }
        if ((sub_100046FE8(v10, (void **)(v1 + 8)) & 0x80) == 0) {
          break;
        }
        uint64_t v8 = v9 + 1;
        char v7 = v9[1];
        if (!v7) {
          goto LABEL_15;
        }
      }
      int v11 = *v8;
      if (!*v8)
      {
LABEL_15:
        *(void *)&uint8_t buf[16] = 0;
        uint64_t v12 = (uint64_t *)operator new(0x40uLL);
        *(void *)long long buf = v12;
        *(void *)&uint8_t buf[8] = v2 + 1200;
        uint64_t v13 = v12 + 4;
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(v13, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v14 = *v3;
          v12[6] = *(void *)(v1 + 24);
          *(_OWORD *)uint64_t v13 = v14;
        }
        v12[7] = 0;
        uint8_t buf[16] = 1;
        uint64_t *v12 = 0;
        v12[1] = 0;
        v12[2] = (uint64_t)v9;
        NSObject *v8 = v12;
        uint64_t v15 = **(void **)(v2 + 1192);
        if (v15)
        {
          *(void *)(v2 + 1192) = v15;
          uint64_t v12 = *v8;
        }
        sub_100046C90(*(uint64_t **)(v2 + 1200), v12);
        ++*(void *)(v2 + 1208);
        int v11 = *(uint64_t **)buf;
        *(void *)long long buf = 0;
        sub_100C3B370((uint64_t)buf);
      }
      sub_100058140((const void **)v11 + 7, (const void **)(v1 + 32));
      std::mutex::unlock((std::mutex *)(v2 + 1128));
      long long v16 = *v5;
      if (*((unsigned char *)*v5 + 48))
      {
        char v17 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
        {
          int v18 = *((_DWORD *)v16 + 14);
          uint64_t v19 = PersonalityInfo::logPrefix(v16);
          uint64_t v20 = *(unsigned __int8 *)(v1 + 31);
          BOOL v21 = (v20 & 0x80u) != 0;
          if ((v20 & 0x80u) != 0) {
            uint64_t v20 = *(void *)(v1 + 16);
          }
          if (v21) {
            uint64_t v22 = *(std::__shared_weak_count **)(v1 + 8);
          }
          else {
            uint64_t v22 = (std::__shared_weak_count *)(v1 + 8);
          }
          *(_DWORD *)long long buf = 136316162;
          if (!v20) {
            uint64_t v22 = (std::__shared_weak_count *)"<invalid>";
          }
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 1024;
          int v31 = v18;
          __int16 v32 = 2080;
          uint64_t v33 = v19;
          __int16 v34 = 2080;
          __int16 v35 = v22;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sPersonality [%d] %s %s is updated", buf, 0x30u);
        }
        if (*(char *)(v1 + 31) < 0)
        {
          sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
        }
        else
        {
          long long v23 = *v3;
          uint64_t v28 = *(void *)(v1 + 24);
          *(_OWORD *)long long __p = v23;
        }
        char v29 = 4;
        sub_100C2FEDC(buf, (long long *)__p, v5);
        sub_100C1AE18((void *)v2, (uint64_t)buf);
        if (v35) {
          sub_10004D2C8(v35);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        if (SHIBYTE(v28) < 0) {
          operator delete(__p[0]);
        }
      }
    }
  }
  sub_10010DADC(&v26);
  return sub_100046B58((uint64_t *)&v25);
}

void sub_100C3B2F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  sub_100C3B370((uint64_t)&__p);
  std::mutex::unlock(v26);
  sub_10010DADC(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100C3B370(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10008E614((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void sub_100C3B3C8(char *a1)
{
  if (a1)
  {
    sub_100C3B3C8(*(void *)a1);
    sub_100C3B3C8(*((void *)a1 + 1));
    if (a1[111] < 0) {
      operator delete(*((void **)a1 + 11));
    }
    if (a1[79] < 0) {
      operator delete(*((void **)a1 + 7));
    }
    if (a1[55] < 0) {
      operator delete(*((void **)a1 + 4));
    }
    operator delete(a1);
  }
}

uint64_t *sub_100C3B444(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v16 = 0;
  uint64_t v5 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v16, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    char v7 = v5;
    uint64_t v8 = *a3;
    uint64_t v15 = 0;
    uint64_t v9 = (char *)operator new(0xA0uLL);
    v14[0] = v9;
    v14[1] = a1 + 1;
    uint64_t v10 = v9 + 32;
    if (*((char *)v8 + 23) < 0)
    {
      sub_10004FC84(v10, *(void **)v8, *((void *)v8 + 1));
      uint64_t v12 = (uint64_t *)v14[0];
    }
    else
    {
      long long v11 = *v8;
      *((void *)v9 + 6) = *((void *)v8 + 2);
      *(_OWORD *)uint64_t v10 = v11;
      uint64_t v12 = (uint64_t *)v9;
    }
    *((void *)v9 + 17) = 0;
    *((void *)v9 + 18) = 0;
    *((void *)v9 + 19) = 0;
    *(_OWORD *)(v9 + 56) = 0u;
    *(_OWORD *)(v9 + 72) = 0u;
    *(_OWORD *)(v9 + 88) = 0u;
    *(_OWORD *)(v9 + 104) = 0u;
    *(_OWORD *)(v9 + 113) = 0u;
    LOBYTE(v15) = 1;
    sub_100046C38(a1, v16, v7, v12);
    uint64_t v6 = (uint64_t *)v14[0];
    v14[0] = 0;
    sub_10023C164((uint64_t)v14, 0);
  }
  return v6;
}

void sub_100C3B53C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100C3B554(uint64_t **a1, uint64_t a2)
{
  v7[0] = 0;
  v7[1] = 0;
  *(void *)uint64_t v8 = 0;
  sub_100C3B5F4(v7, (uint64_t)a1, a2);
  uint64_t v6 = 0;
  uint64_t v3 = (void **)v7[0];
  uint64_t v4 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v6, (void **)(v7[0] + 32));
  if (*v4)
  {
    if (v3)
    {
      char v5 = v8[0];
      sub_100C3B68C(v5, v3);
    }
  }
  else
  {
    sub_100046C38(a1, v6, v4, (uint64_t *)v3);
  }
}

void *sub_100C3B5F4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 8;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (char *)operator new(0x38uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  uint64_t result = v6 + 32;
  if (*(char *)(a3 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t result = *(_OWORD *)a3;
    result[2] = *(void *)(a3 + 16);
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_100C3B670(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_100C3B68C(0, v2);
  _Unwind_Resume(a1);
}

void sub_100C3B68C(char a1, void **__p)
{
  if (a1)
  {
    if (*((char *)__p + 55) < 0) {
      operator delete(__p[4]);
    }
  }
  else if (!__p)
  {
    return;
  }

  operator delete(__p);
}

uint64_t sub_100C3B6EC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  *uint64_t v3 = 0;
  return a1;
}

uint64_t *sub_100C3B76C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  __int16 v27 = a1;
  uint64_t v28 = v1;
  uint64_t v2 = *v1;
  uint64_t v32 = 0;
  unint64_t v33 = 0;
  unint64_t v34 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  sub_100C27EAC(&v29, v2);
  uint64_t v3 = v29;
  uint64_t v4 = v30;
  if (0xF0F0F0F0F0F0F0F1 * ((v30 - v29) >> 3) > 1) {
    goto LABEL_6;
  }
  if (v30 - v29 != 136) {
    goto LABEL_24;
  }
  uint64_t v5 = *(unsigned __int8 *)(v29 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v29 + 8);
  }
  if (v5)
  {
LABEL_6:
    if (v29 == v30) {
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v26 = *(unsigned __int8 *)(v29 + 47);
    if ((v26 & 0x80u) != 0) {
      uint64_t v26 = *(void *)(v29 + 32);
    }
    if (v29 == v30 || !v26) {
      goto LABEL_24;
    }
  }
  do
  {
    uint64_t v6 = (unsigned __int8 *)v1[1];
    char v7 = (unsigned __int8 *)v1[2];
    if (v6 == v7)
    {
LABEL_10:
      unint64_t v8 = v33;
      if (v33 >= v34)
      {
        unint64_t v10 = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v33 - v32) >> 3);
        unint64_t v11 = v10 + 1;
        if (v10 + 1 > 0x1E1E1E1E1E1E1E1) {
          sub_10006A748();
        }
        if (0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v34 - v32) >> 3) > v11) {
          unint64_t v11 = 0xE1E1E1E1E1E1E1E2 * ((uint64_t)(v34 - v32) >> 3);
        }
        if (0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v34 - v32) >> 3) >= 0xF0F0F0F0F0F0F0) {
          unint64_t v12 = 0x1E1E1E1E1E1E1E1;
        }
        else {
          unint64_t v12 = v11;
        }
        v37.__r_.__value_.__l.__size_ = (std::string::size_type)&v34;
        if (v12) {
          uint64_t v13 = sub_100320E18((uint64_t)&v34, v12);
        }
        else {
          uint64_t v13 = 0;
        }
        __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v13;
        __str.__r_.__value_.__l.__size_ = (std::string::size_type)v13 + 136 * v10;
        __str.__r_.__value_.__r.__words[2] = __str.__r_.__value_.__l.__size_;
        v37.__r_.__value_.__r.__words[0] = (std::string::size_type)v13 + 136 * v12;
        sub_100C319D4(__str.__r_.__value_.__l.__size_, v3);
        __str.__r_.__value_.__r.__words[2] += 136;
        sub_100C31910(&v32, &__str);
        unint64_t v9 = v33;
        sub_100C31A80((uint64_t)&__str);
      }
      else
      {
        sub_100C319D4(v33, v3);
        unint64_t v9 = v8 + 136;
      }
      unint64_t v33 = v9;
    }
    else
    {
      while (!sub_10001D294(v6, (unsigned __int8 *)(v3 + 104)))
      {
        v6 += 24;
        if (v6 == v7) {
          goto LABEL_10;
        }
      }
    }
    v3 += 136;
  }
  while (v3 != v4);
LABEL_24:
  unint64_t v14 = v32;
  unint64_t v15 = v33;
  if (v32 == v33)
  {
    uint64_t v20 = v32;
  }
  else
  {
    do
    {
      CFTypeRef cf = 0;
      (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v2 + 120) + 24))(&cf);
      uint64_t v16 = (uint64_t *)cf;
      if (cf) {
        char v17 = sub_100080934;
      }
      else {
        char v17 = 0;
      }
      if (v17)
      {
        __str.__r_.__value_.__r.__words[0] = 0;
        if (cf)
        {
          CFTypeID v18 = CFGetTypeID(cf);
          if (v18 == CFNumberGetTypeID()) {
            ctu::cf::assign((ctu::cf *)&__str, v16, v19);
          }
        }
        *(void *)(v14 + 128) = __str.__r_.__value_.__r.__words[0];
      }
      (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t))(*(void *)v2 + 152))(&__str, v2, v14);
      std::string::operator=((std::string *)v14, &__str);
      std::string::operator=((std::string *)(v14 + 24), &v37);
      std::string::operator=((std::string *)(v14 + 48), &v38);
      *(unsigned char *)(v14 + 72) = v39;
      std::string::operator=((std::string *)(v14 + 80), &__p);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v38.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v37.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      sub_1000577C4(&cf);
      v14 += 136;
    }
    while (v14 != v15);
    uint64_t v20 = v32;
    unint64_t v14 = v33;
  }
  unint64_t v21 = 126 - 2 * __clz(0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v14 - v20) >> 3));
  if (v14 == v20) {
    uint64_t v22 = 0;
  }
  else {
    uint64_t v22 = v21;
  }
  sub_100C3BD7C(v20, (std::string *)v14, v22, 1);
  long long v23 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__str.__r_.__value_.__l.__data_) = 136315906;
    *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(__str.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&__str.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    HIWORD(__str.__r_.__value_.__r.__words[2]) = 2048;
    v37.__r_.__value_.__r.__words[0] = 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v33 - v32) >> 3);
    LOWORD(v37.__r_.__value_.__r.__words[1]) = 2048;
    *(std::string::size_type *)((char *)&v37.__r_.__value_.__r.__words[1] + 2) = 0xF0F0F0F0F0F0F0F1
                                                                               * ((v30 - v29) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAllEndUserSimLabelsLocalized, reporting %zu labels out of %zu", (uint8_t *)&__str, 0x2Au);
  }
  uint64_t v24 = v1[7];
  if (!v24) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v24 + 48))(v24, &v32);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v29;
  sub_100320504((void ***)&__str);
  __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v32;
  sub_100320504((void ***)&__str);
  sub_100C3BD14((uint64_t *)&v28);
  return sub_100046B58((uint64_t *)&v27);
}

void sub_100C3BC4C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37,void *__p,uint64_t a39,int a40,__int16 a41,char a42,char a43)
{
  a12 = &a15;
  sub_100320504((void ***)&a12);
  sub_100C3BD14(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3BD14(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100320E60((void *)(v1 + 32));
    uint64_t v2 = (void **)(v1 + 8);
    sub_100047F64(&v2);
    operator delete();
  }
  return result;
}

void sub_100C3BD7C(uint64_t a1, std::string *a2, uint64_t a3, char a4)
{
  while (2)
  {
    p_int64_t size = (uint64_t)&a2[-6].__r_.__value_.__l.__size_;
    unint64_t v10 = (std::string *)a1;
    while (1)
    {
      while (1)
      {
        a1 = (uint64_t)v10;
        uint64_t v11 = (char *)a2 - (char *)v10;
        uint64_t v12 = 0xF0F0F0F0F0F0F0F1 * (((char *)a2 - (char *)v10) >> 3);
        if (!(!v5 & v4))
        {
          switch(v12)
          {
            case 0:
            case 1:
              return;
            case 2:
              if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] <= *(void *)(a1 + 128)) {
                return;
              }
              uint64_t v40 = a1;
              uint64_t v41 = (uint64_t)&a2[-6].__r_.__value_.__l.__size_;
              break;
            case 3:
              sub_100C3D090(a1, a1 + 136, p_size);
              return;
            case 4:
              sub_100C3D744(a1, a1 + 136, a1 + 272, p_size);
              return;
            case 5:
              sub_100C3D744(a1, a1 + 136, a1 + 272, a1 + 408);
              if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] <= *(void *)(a1 + 536)) {
                return;
              }
              sub_100C3D544(a1 + 408, p_size);
              if (*(void *)(a1 + 536) <= *(void *)(a1 + 400)) {
                return;
              }
              sub_100C3D544(a1 + 272, a1 + 408);
              if (*(void *)(a1 + 400) <= *(void *)(a1 + 264)) {
                return;
              }
              sub_100C3D544(a1 + 136, a1 + 272);
              if (*(void *)(a1 + 264) <= *(void *)(a1 + 128)) {
                return;
              }
              uint64_t v40 = a1;
              uint64_t v41 = a1 + 136;
              break;
            default:
              JUMPOUT(0);
          }
          sub_100C3D544(v40, v41);
          return;
        }
        if (v11 <= 3263)
        {
          if (a4)
          {
            if ((std::string *)a1 != a2)
            {
              uint64_t v42 = a1 + 136;
              if ((std::string *)(a1 + 136) != a2)
              {
                uint64_t v43 = 0;
                uint64_t v44 = a1;
                do
                {
                  uint64_t v45 = v42;
                  if (*(void *)(v44 + 264) > *(void *)(v44 + 128))
                  {
                    int64_t v104 = 0;
                    memset(v103, 0, sizeof(v103));
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    long long v100 = 0u;
                    memset(__str, 0, sizeof(__str));
                    sub_10023C008((uint64_t)__str, v42);
                    if (*(char *)(v44 + 263) < 0)
                    {
                      sub_10004FC84((unsigned char *)v103 + 8, *(void **)(v44 + 240), *(void *)(v44 + 248));
                    }
                    else
                    {
                      *(_OWORD *)((char *)v103 + 8) = *(_OWORD *)(v44 + 240);
                      *((void *)&v103[1] + 1) = *(void *)(v44 + 256);
                    }
                    int64_t v104 = *(void *)(v44 + 264);
                    uint64_t v46 = v43;
                    while (1)
                    {
                      uint64_t v47 = v46;
                      uint64_t v48 = a1 + v46;
                      std::string::operator=((std::string *)(a1 + v46 + 136), (const std::string *)(a1 + v46));
                      std::string::operator=((std::string *)(v48 + 160), (const std::string *)(v48 + 24));
                      uint64_t v49 = a1 + v47;
                      std::string::operator=((std::string *)(a1 + v47 + 184), (const std::string *)(a1 + v47 + 48));
                      *(unsigned char *)(v49 + 208) = *(unsigned char *)(v49 + 72);
                      std::string::operator=((std::string *)(v49 + 216), (const std::string *)(v49 + 80));
                      std::string::operator=((std::string *)(a1 + v47 + 240), (const std::string *)(a1 + v47 + 104));
                      *(void *)(a1 + v47 + 264) = *(void *)(a1 + v47 + 128);
                      if (!v47) {
                        break;
                      }
                      uint64_t v46 = v47 - 136;
                      if (v104 <= *(void *)(a1 + v47 - 8))
                      {
                        unint64_t v50 = (std::string *)(a1 + v47);
                        goto LABEL_105;
                      }
                    }
                    unint64_t v50 = (std::string *)a1;
LABEL_105:
                    std::string::operator=(v50, (const std::string *)__str);
                    uint64_t v51 = a1 + v47;
                    std::string::operator=((std::string *)(v51 + 24), (const std::string *)&__str[24]);
                    std::string::operator=((std::string *)(v51 + 48), (const std::string *)&v100);
                    v50[3].__r_.__value_.__s.__data_[0] = BYTE8(v101);
                    std::string::operator=((std::string *)(v51 + 80), (const std::string *)&v102);
                    std::string::operator=((std::string *)(v51 + 104), (const std::string *)((char *)v103 + 8));
                    v50[5].__r_.__value_.__l.__size_ = v104;
                    if (SHIBYTE(v103[1]) < 0) {
                      operator delete(*((void **)&v103[0] + 1));
                    }
                    if (SBYTE7(v103[0]) < 0) {
                      operator delete((void *)v102);
                    }
                    if (SBYTE7(v101) < 0) {
                      operator delete((void *)v100);
                    }
                    if (SHIBYTE(v99) < 0) {
                      operator delete(*(void **)&__str[24]);
                    }
                    if ((__str[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__str);
                    }
                  }
                  uint64_t v42 = v45 + 136;
                  v43 += 136;
                  uint64_t v44 = v45;
                }
                while ((std::string *)(v45 + 136) != a2);
              }
            }
          }
          else if ((std::string *)a1 != a2)
          {
            uint64_t v82 = a1 + 136;
            if ((std::string *)(a1 + 136) != a2)
            {
              uint64_t v83 = a1 - 8;
              do
              {
                uint64_t v84 = v82;
                if (*(void *)(a1 + 264) > *(void *)(a1 + 128))
                {
                  int64_t v104 = 0;
                  memset(v103, 0, sizeof(v103));
                  long long v101 = 0u;
                  long long v102 = 0u;
                  long long v99 = 0u;
                  long long v100 = 0u;
                  memset(__str, 0, sizeof(__str));
                  sub_10023C008((uint64_t)__str, v82);
                  if (*(char *)(a1 + 263) < 0)
                  {
                    sub_10004FC84((unsigned char *)v103 + 8, *(void **)(a1 + 240), *(void *)(a1 + 248));
                  }
                  else
                  {
                    *(_OWORD *)((char *)v103 + 8) = *(_OWORD *)(a1 + 240);
                    *((void *)&v103[1] + 1) = *(void *)(a1 + 256);
                  }
                  int64_t v104 = *(void *)(a1 + 264);
                  uint64_t v85 = v83;
                  do
                  {
                    std::string::operator=((std::string *)(v85 + 144), (const std::string *)(v85 + 8));
                    std::string::operator=((std::string *)(v85 + 168), (const std::string *)(v85 + 32));
                    std::string::operator=((std::string *)(v85 + 192), (const std::string *)(v85 + 56));
                    *(unsigned char *)(v85 + 216) = *(unsigned char *)(v85 + 80);
                    std::string::operator=((std::string *)(v85 + 224), (const std::string *)(v85 + 88));
                    std::string::operator=((std::string *)(v85 + 248), (const std::string *)(v85 + 112));
                    *(void *)(v85 + 272) = *(void *)(v85 + 136);
                    int64_t v86 = *(void *)v85;
                    v85 -= 136;
                  }
                  while (v104 > v86);
                  std::string::operator=((std::string *)(v85 + 144), (const std::string *)__str);
                  std::string::operator=((std::string *)(v85 + 168), (const std::string *)&__str[24]);
                  std::string::operator=((std::string *)(v85 + 192), (const std::string *)&v100);
                  *(unsigned char *)(v85 + 216) = BYTE8(v101);
                  std::string::operator=((std::string *)(v85 + 224), (const std::string *)&v102);
                  std::string::operator=((std::string *)(v85 + 248), (const std::string *)((char *)v103 + 8));
                  *(void *)(v85 + 272) = v104;
                  if (SHIBYTE(v103[1]) < 0) {
                    operator delete(*((void **)&v103[0] + 1));
                  }
                  if (SBYTE7(v103[0]) < 0) {
                    operator delete((void *)v102);
                  }
                  if (SBYTE7(v101) < 0) {
                    operator delete((void *)v100);
                  }
                  if (SHIBYTE(v99) < 0) {
                    operator delete(*(void **)&__str[24]);
                  }
                  if ((__str[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__str);
                  }
                }
                uint64_t v82 = v84 + 136;
                v83 += 136;
                a1 = v84;
              }
              while ((std::string *)(v84 + 136) != a2);
            }
          }
          return;
        }
        if (!a3)
        {
          if ((std::string *)a1 != a2)
          {
            unint64_t v87 = v11;
            uint64_t v89 = (std::string *)((unint64_t)(v12 - 2) >> 1);
            char v52 = v89;
            do
            {
              uint64_t v53 = v52;
              if ((uint64_t)v89 >= (uint64_t)v52)
              {
                uint64_t v54 = (2 * (void)v52) | 1;
                uint64_t v55 = a1 + 136 * v54;
                if (2 * (uint64_t)v52 + 2 < v12)
                {
                  uint64_t v56 = *(void *)(a1 + 136 * v54 + 128);
                  uint64_t v57 = *(void *)(v55 + 264);
                  v55 += 136 * (v56 > v57);
                  if (v56 > v57) {
                    uint64_t v54 = 2 * (void)v52 + 2;
                  }
                }
                uint64_t v58 = a1 + 136 * (void)v52;
                uint64_t v60 = *(void *)(v58 + 128);
                unint64_t v59 = (int64_t *)(v58 + 128);
                if (*(void *)(v55 + 128) <= v60)
                {
                  int64_t v104 = 0;
                  uint64_t v61 = a1 + 136 * (void)v52;
                  memset(v103, 0, sizeof(v103));
                  long long v101 = 0u;
                  long long v102 = 0u;
                  long long v99 = 0u;
                  long long v100 = 0u;
                  memset(__str, 0, sizeof(__str));
                  sub_10023C008((uint64_t)__str, v61);
                  __int16 v62 = (void **)(a1 + 136 * (void)v53 + 104);
                  if (*(char *)(v61 + 127) < 0)
                  {
                    sub_10004FC84((unsigned char *)v103 + 8, *v62, *(void *)(a1 + 136 * (void)v53 + 112));
                  }
                  else
                  {
                    long long v63 = *(_OWORD *)v62;
                    *((void *)&v103[1] + 1) = *(void *)(a1 + 136 * (void)v53 + 120);
                    *(_OWORD *)((char *)v103 + 8) = v63;
                  }
                  int64_t v104 = *v59;
                  do
                  {
                    uint64_t v64 = v55;
                    std::string::operator=((std::string *)v61, (const std::string *)v55);
                    std::string::operator=((std::string *)(v61 + 24), (const std::string *)(v55 + 24));
                    std::string::operator=((std::string *)(v61 + 48), (const std::string *)(v55 + 48));
                    *(unsigned char *)(v61 + 72) = *(unsigned char *)(v55 + 72);
                    std::string::operator=((std::string *)(v61 + 80), (const std::string *)(v55 + 80));
                    std::string::operator=((std::string *)(v61 + 104), (const std::string *)(v55 + 104));
                    *(void *)(v61 + 128) = *(void *)(v55 + 128);
                    if ((uint64_t)v89 < v54) {
                      break;
                    }
                    uint64_t v65 = (2 * v54) | 1;
                    uint64_t v55 = a1 + 136 * v65;
                    if (2 * v54 + 2 < v12)
                    {
                      uint64_t v66 = *(void *)(a1 + 136 * v65 + 128);
                      uint64_t v67 = *(void *)(v55 + 264);
                      v55 += 136 * (v66 > v67);
                      if (v66 > v67) {
                        uint64_t v65 = 2 * v54 + 2;
                      }
                    }
                    uint64_t v61 = v64;
                    uint64_t v54 = v65;
                  }
                  while (*(void *)(v55 + 128) <= v104);
                  std::string::operator=((std::string *)v64, (const std::string *)__str);
                  std::string::operator=((std::string *)(v64 + 24), (const std::string *)&__str[24]);
                  std::string::operator=((std::string *)(v64 + 48), (const std::string *)&v100);
                  *(unsigned char *)(v64 + 72) = BYTE8(v101);
                  std::string::operator=((std::string *)(v64 + 80), (const std::string *)&v102);
                  std::string::operator=((std::string *)(v64 + 104), (const std::string *)((char *)v103 + 8));
                  *(void *)(v64 + 128) = v104;
                  if (SHIBYTE(v103[1]) < 0) {
                    operator delete(*((void **)&v103[0] + 1));
                  }
                  if (SBYTE7(v103[0]) < 0) {
                    operator delete((void *)v102);
                  }
                  if (SBYTE7(v101) < 0) {
                    operator delete((void *)v100);
                  }
                  if (SHIBYTE(v99) < 0) {
                    operator delete(*(void **)&__str[24]);
                  }
                  if ((__str[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__str);
                  }
                }
              }
              char v52 = (std::string *)((char *)v53 - 1);
            }
            while (v53);
            int64_t v90 = v87 / 0x88;
            do
            {
              std::string::size_type v97 = 0;
              memset(__p, 0, sizeof(__p));
              long long v94 = 0u;
              *(_OWORD *)long long v95 = 0u;
              long long v92 = 0u;
              *(_OWORD *)uint64_t v93 = 0u;
              memset(v91, 0, sizeof(v91));
              sub_10023C008((uint64_t)v91, a1);
              if (*(char *)(a1 + 127) < 0)
              {
                sub_10004FC84(&__p[1], *(void **)(a1 + 104), *(void *)(a1 + 112));
              }
              else
              {
                long long v68 = *(_OWORD *)(a1 + 104);
                __p[3] = *(void **)(a1 + 120);
                *(_OWORD *)&__p[1] = v68;
              }
              uint64_t v69 = 0;
              std::string::size_type v97 = *(void *)(a1 + 128);
              uint64_t v70 = a1;
              do
              {
                uint64_t v71 = v69 + 1;
                uint64_t v72 = v70 + 136 * (v69 + 1);
                uint64_t v73 = 2 * v69;
                uint64_t v69 = (2 * v69) | 1;
                uint64_t v74 = v73 + 2;
                if (v73 + 2 < v90)
                {
                  uint64_t v75 = *(void *)(v70 + 136 * v71 + 128);
                  uint64_t v76 = *(void *)(v72 + 264);
                  v72 += 136 * (v75 > v76);
                  if (v75 > v76) {
                    uint64_t v69 = v74;
                  }
                }
                std::string::operator=((std::string *)v70, (const std::string *)v72);
                std::string::operator=((std::string *)(v70 + 24), (const std::string *)(v72 + 24));
                std::string::operator=((std::string *)(v70 + 48), (const std::string *)(v72 + 48));
                *(unsigned char *)(v70 + 72) = *(unsigned char *)(v72 + 72);
                std::string::operator=((std::string *)(v70 + 80), (const std::string *)(v72 + 80));
                std::string::operator=((std::string *)(v70 + 104), (const std::string *)(v72 + 104));
                *(void *)(v70 + 128) = *(void *)(v72 + 128);
                uint64_t v70 = v72;
              }
              while (v69 <= (uint64_t)((unint64_t)(v90 - 2) >> 1));
              if ((std::string::size_type *)v72 == &a2[-6].__r_.__value_.__r.__words[1])
              {
                std::string::operator=((std::string *)v72, (const std::string *)v91);
                std::string::operator=((std::string *)(v72 + 24), (const std::string *)&v91[24]);
                std::string::operator=((std::string *)(v72 + 48), (const std::string *)v93);
                *(unsigned char *)(v72 + 72) = BYTE8(v94);
                std::string::operator=((std::string *)(v72 + 80), (const std::string *)v95);
                std::string::operator=((std::string *)(v72 + 104), (const std::string *)&__p[1]);
                *(void *)(v72 + 128) = v97;
              }
              else
              {
                std::string::operator=((std::string *)v72, (std::string *)((char *)a2 - 136));
                std::string::operator=((std::string *)(v72 + 24), (std::string *)((char *)a2 - 112));
                std::string::operator=((std::string *)(v72 + 48), (std::string *)((char *)a2 - 88));
                *(unsigned char *)(v72 + 72) = a2[-3].__r_.__value_.__s.__data_[8];
                std::string::operator=((std::string *)(v72 + 80), (std::string *)((char *)a2 - 56));
                std::string::operator=((std::string *)(v72 + 104), (std::string *)((char *)a2 - 32));
                *(void *)(v72 + 128) = *((void *)&a2[-1].__r_.__value_.__l + 2);
                std::string::operator=((std::string *)((char *)a2 - 136), (const std::string *)v91);
                std::string::operator=((std::string *)((char *)a2 - 112), (const std::string *)&v91[24]);
                std::string::operator=((std::string *)((char *)a2 - 88), (const std::string *)v93);
                a2[-3].__r_.__value_.__s.__data_[8] = BYTE8(v94);
                std::string::operator=((std::string *)((char *)a2 - 56), (const std::string *)v95);
                std::string::operator=((std::string *)((char *)a2 - 32), (const std::string *)&__p[1]);
                a2[-1].__r_.__value_.__r.__words[2] = v97;
                uint64_t v77 = v72 - a1 + 136;
                if (v77 >= 137)
                {
                  unint64_t v78 = (v77 / 0x88uLL - 2) >> 1;
                  if (*(void *)(a1 + 136 * v78 + 128) > *(void *)(v72 + 128))
                  {
                    int64_t v104 = 0;
                    memset(v103, 0, sizeof(v103));
                    long long v101 = 0u;
                    long long v102 = 0u;
                    long long v99 = 0u;
                    long long v100 = 0u;
                    memset(__str, 0, sizeof(__str));
                    sub_10023C008((uint64_t)__str, v72);
                    if (*(char *)(v72 + 127) < 0)
                    {
                      sub_10004FC84((unsigned char *)v103 + 8, *(void **)(v72 + 104), *(void *)(v72 + 112));
                    }
                    else
                    {
                      long long v79 = *(_OWORD *)(v72 + 104);
                      *((void *)&v103[1] + 1) = *(void *)(v72 + 120);
                      *(_OWORD *)((char *)v103 + 8) = v79;
                    }
                    int64_t v104 = *(void *)(v72 + 128);
                    do
                    {
                      uint64_t v80 = a1 + 136 * v78;
                      std::string::operator=((std::string *)v72, (const std::string *)v80);
                      std::string::operator=((std::string *)(v72 + 24), (const std::string *)(v80 + 24));
                      std::string::operator=((std::string *)(v72 + 48), (const std::string *)(v80 + 48));
                      *(unsigned char *)(v72 + 72) = *(unsigned char *)(v80 + 72);
                      std::string::operator=((std::string *)(v72 + 80), (const std::string *)(v80 + 80));
                      std::string::operator=((std::string *)(v72 + 104), (const std::string *)(v80 + 104));
                      *(void *)(v72 + 128) = *(void *)(v80 + 128);
                      if (!v78) {
                        break;
                      }
                      unint64_t v78 = (v78 - 1) >> 1;
                      uint64_t v72 = v80;
                    }
                    while (*(void *)(a1 + 136 * v78 + 128) > v104);
                    std::string::operator=((std::string *)v80, (const std::string *)__str);
                    std::string::operator=((std::string *)(v80 + 24), (const std::string *)&__str[24]);
                    std::string::operator=((std::string *)(v80 + 48), (const std::string *)&v100);
                    *(unsigned char *)(v80 + 72) = BYTE8(v101);
                    std::string::operator=((std::string *)(v80 + 80), (const std::string *)&v102);
                    std::string::operator=((std::string *)(v80 + 104), (const std::string *)((char *)v103 + 8));
                    *(void *)(v80 + 128) = v104;
                    if (SHIBYTE(v103[1]) < 0) {
                      operator delete(*((void **)&v103[0] + 1));
                    }
                    if (SBYTE7(v103[0]) < 0) {
                      operator delete((void *)v102);
                    }
                    if (SBYTE7(v101) < 0) {
                      operator delete((void *)v100);
                    }
                    if (SHIBYTE(v99) < 0) {
                      operator delete(*(void **)&__str[24]);
                    }
                    if ((__str[23] & 0x80000000) != 0) {
                      operator delete(*(void **)__str);
                    }
                  }
                }
              }
              if (SHIBYTE(__p[3]) < 0) {
                operator delete(__p[1]);
              }
              if (SHIBYTE(__p[0]) < 0) {
                operator delete(v95[0]);
              }
              if (SBYTE7(v94) < 0) {
                operator delete(v93[0]);
              }
              if (SHIBYTE(v92) < 0) {
                operator delete(*(void **)&v91[24]);
              }
              if ((v91[23] & 0x80000000) != 0) {
                operator delete(*(void **)v91);
              }
              uint64_t v81 = v90;
              a2 = (std::string *)((char *)a2 - 136);
              --v90;
            }
            while (v81 > 2);
          }
          return;
        }
        unint64_t v13 = (unint64_t)v12 >> 1;
        uint64_t v14 = a1 + 136 * ((unint64_t)v12 >> 1);
        if ((unint64_t)v11 < 0x4401)
        {
          sub_100C3D090(v14, a1, p_size);
        }
        else
        {
          sub_100C3D090(a1, v14, p_size);
          uint64_t v15 = 17 * v13;
          sub_100C3D090(a1 + 136, a1 + 8 * v15 - 136, (uint64_t)&a2[-12].__r_.__value_.__r.__words[2]);
          sub_100C3D090(a1 + 272, a1 + 136 + 8 * v15, (uint64_t)&a2[-17]);
          sub_100C3D090(a1 + 8 * v15 - 136, v14, a1 + 136 + 8 * v15);
          sub_100C3D544(a1, v14);
        }
        --a3;
        if ((a4 & 1) != 0 || *(void *)(a1 - 8) > *(void *)(a1 + 128)) {
          break;
        }
        int64_t v104 = 0;
        memset(v103, 0, sizeof(v103));
        long long v101 = 0u;
        long long v102 = 0u;
        long long v99 = 0u;
        long long v100 = 0u;
        memset(__str, 0, sizeof(__str));
        sub_10023C008((uint64_t)__str, a1);
        if (*(char *)(a1 + 127) < 0)
        {
          sub_10004FC84((unsigned char *)v103 + 8, *(void **)(a1 + 104), *(void *)(a1 + 112));
        }
        else
        {
          long long v30 = *(_OWORD *)(a1 + 104);
          *((void *)&v103[1] + 1) = *(void *)(a1 + 120);
          *(_OWORD *)((char *)v103 + 8) = v30;
        }
        int64_t v31 = *(void *)(a1 + 128);
        int64_t v104 = v31;
        if (v31 <= (int64_t)a2[-1].__r_.__value_.__r.__words[2])
        {
          unint64_t v34 = (std::string *)(a1 + 136);
          do
          {
            unint64_t v10 = v34;
            if (v34 >= a2) {
              break;
            }
            unint64_t v34 = (std::string *)((char *)v34 + 136);
          }
          while (v31 <= (int64_t)v10[5].__r_.__value_.__l.__size_);
        }
        else
        {
          uint64_t v32 = a1;
          do
          {
            unint64_t v10 = (std::string *)(v32 + 136);
            int64_t v33 = *(void *)(v32 + 264);
            v32 += 136;
          }
          while (v31 <= v33);
        }
        unint64_t v35 = (unint64_t)a2;
        if (v10 < a2)
        {
          __int16 v36 = a2;
          do
          {
            unint64_t v35 = (unint64_t)&v36[-6].__r_.__value_.__l.__size_;
            int64_t v37 = v36[-1].__r_.__value_.__r.__words[2];
            __int16 v36 = (std::string *)((char *)v36 - 136);
          }
          while (v31 > v37);
        }
        while ((unint64_t)v10 < v35)
        {
          sub_100C3D544((uint64_t)v10, v35);
          do
          {
            std::string::pointer data = v10[11].__r_.__value_.__l.__data_;
            unint64_t v10 = (std::string *)((char *)v10 + 136);
          }
          while (v104 <= (uint64_t)data);
          do
          {
            int64_t v39 = *(void *)(v35 - 8);
            v35 -= 136;
          }
          while (v104 > v39);
        }
        if (&v10[-6].__r_.__value_.__r.__words[1] != (std::string::size_type *)a1)
        {
          std::string::operator=((std::string *)a1, (std::string *)((char *)v10 - 136));
          std::string::operator=((std::string *)(a1 + 24), (std::string *)((char *)v10 - 112));
          std::string::operator=((std::string *)(a1 + 48), (std::string *)((char *)v10 - 88));
          *(unsigned char *)(a1 + 72) = v10[-3].__r_.__value_.__s.__data_[8];
          std::string::operator=((std::string *)(a1 + 80), (std::string *)((char *)v10 - 56));
          std::string::operator=((std::string *)(a1 + 104), (std::string *)((char *)v10 - 32));
          *(void *)(a1 + 128) = *((void *)&v10[-1].__r_.__value_.__l + 2);
        }
        std::string::operator=((std::string *)((char *)v10 - 136), (const std::string *)__str);
        std::string::operator=((std::string *)((char *)v10 - 112), (const std::string *)&__str[24]);
        std::string::operator=((std::string *)((char *)v10 - 88), (const std::string *)&v100);
        v10[-3].__r_.__value_.__s.__data_[8] = BYTE8(v101);
        std::string::operator=((std::string *)((char *)v10 - 56), (const std::string *)&v102);
        std::string::operator=((std::string *)((char *)v10 - 32), (const std::string *)((char *)v103 + 8));
        v10[-1].__r_.__value_.__r.__words[2] = v104;
        if (SHIBYTE(v103[1]) < 0) {
          operator delete(*((void **)&v103[0] + 1));
        }
        if (SBYTE7(v103[0]) < 0) {
          operator delete((void *)v102);
        }
        if (SBYTE7(v101) < 0) {
          operator delete((void *)v100);
        }
        if (SHIBYTE(v99) < 0) {
          operator delete(*(void **)&__str[24]);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
LABEL_48:
        a4 = 0;
      }
      int64_t v104 = 0;
      memset(v103, 0, sizeof(v103));
      long long v101 = 0u;
      long long v102 = 0u;
      long long v99 = 0u;
      long long v100 = 0u;
      memset(__str, 0, sizeof(__str));
      sub_10023C008((uint64_t)__str, a1);
      if (*(char *)(a1 + 127) < 0)
      {
        sub_10004FC84((unsigned char *)v103 + 8, *(void **)(a1 + 104), *(void *)(a1 + 112));
      }
      else
      {
        long long v16 = *(_OWORD *)(a1 + 104);
        *((void *)&v103[1] + 1) = *(void *)(a1 + 120);
        *(_OWORD *)((char *)v103 + 8) = v16;
      }
      uint64_t v17 = 0;
      int64_t v18 = *(void *)(a1 + 128);
      int64_t v104 = v18;
      do
      {
        int64_t v19 = *(void *)(a1 + v17 + 264);
        v17 += 136;
      }
      while (v19 > v18);
      uint64_t v20 = (std::string *)(a1 + v17);
      unint64_t v21 = a2;
      if (v17 == 136)
      {
        uint64_t v24 = a2;
        while (v20 < v24)
        {
          unint64_t v22 = (unint64_t)&v24[-6].__r_.__value_.__l.__size_;
          int64_t v25 = v24[-1].__r_.__value_.__r.__words[2];
          uint64_t v24 = (std::string *)((char *)v24 - 136);
          if (v25 > v18) {
            goto LABEL_24;
          }
        }
        unint64_t v22 = (unint64_t)v24;
      }
      else
      {
        do
        {
          unint64_t v22 = (unint64_t)&v21[-6].__r_.__value_.__l.__size_;
          int64_t v23 = v21[-1].__r_.__value_.__r.__words[2];
          unint64_t v21 = (std::string *)((char *)v21 - 136);
        }
        while (v23 <= v18);
      }
LABEL_24:
      if ((unint64_t)v20 >= v22)
      {
        unint64_t v10 = v20;
      }
      else
      {
        unint64_t v26 = v22;
        unint64_t v10 = v20;
        do
        {
          sub_100C3D544((uint64_t)v10, v26);
          do
          {
            std::string::pointer v27 = v10[11].__r_.__value_.__l.__data_;
            unint64_t v10 = (std::string *)((char *)v10 + 136);
          }
          while ((uint64_t)v27 > v104);
          do
          {
            int64_t v28 = *(void *)(v26 - 8);
            v26 -= 136;
          }
          while (v28 <= v104);
        }
        while ((unint64_t)v10 < v26);
      }
      if (&v10[-6].__r_.__value_.__r.__words[1] != (std::string::size_type *)a1)
      {
        std::string::operator=((std::string *)a1, (std::string *)((char *)v10 - 136));
        std::string::operator=((std::string *)(a1 + 24), (std::string *)((char *)v10 - 112));
        std::string::operator=((std::string *)(a1 + 48), (std::string *)((char *)v10 - 88));
        *(unsigned char *)(a1 + 72) = v10[-3].__r_.__value_.__s.__data_[8];
        std::string::operator=((std::string *)(a1 + 80), (std::string *)((char *)v10 - 56));
        std::string::operator=((std::string *)(a1 + 104), (std::string *)((char *)v10 - 32));
        *(void *)(a1 + 128) = *((void *)&v10[-1].__r_.__value_.__l + 2);
      }
      std::string::operator=((std::string *)((char *)v10 - 136), (const std::string *)__str);
      std::string::operator=((std::string *)((char *)v10 - 112), (const std::string *)&__str[24]);
      std::string::operator=((std::string *)((char *)v10 - 88), (const std::string *)&v100);
      v10[-3].__r_.__value_.__s.__data_[8] = BYTE8(v101);
      std::string::operator=((std::string *)((char *)v10 - 56), (const std::string *)&v102);
      std::string::operator=((std::string *)((char *)v10 - 32), (const std::string *)((char *)v103 + 8));
      v10[-1].__r_.__value_.__r.__words[2] = v104;
      if (SHIBYTE(v103[1]) < 0) {
        operator delete(*((void **)&v103[0] + 1));
      }
      if (SBYTE7(v103[0]) < 0) {
        operator delete((void *)v102);
      }
      if (SBYTE7(v101) < 0) {
        operator delete((void *)v100);
      }
      if (SHIBYTE(v99) < 0) {
        operator delete(*(void **)&__str[24]);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if ((unint64_t)v20 < v22)
      {
LABEL_47:
        sub_100C3BD7C(a1, &v10[-6].__r_.__value_.__r.__words[1], a3, a4 & 1);
        goto LABEL_48;
      }
      BOOL v29 = sub_100C3D150((std::string *)a1, (std::string *)((char *)v10 - 136));
      if (sub_100C3D150(v10, a2)) {
        break;
      }
      if (!v29) {
        goto LABEL_47;
      }
    }
    a2 = (std::string *)((char *)v10 - 136);
    if (!v29) {
      continue;
    }
    break;
  }
}

void sub_100C3CF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (*(char *)(v51 - 121) < 0) {
    operator delete(*(void **)(v51 - 144));
  }
  if (*(char *)(v51 - 153) < 0) {
    operator delete(*(void **)(v51 - 176));
  }
  if (*(char *)(v51 - 177) < 0) {
    operator delete(*(void **)(v51 - 200));
  }
  if (*(char *)(v51 - 201) < 0) {
    operator delete(*(void **)(v51 - 224));
  }
  _Unwind_Resume(exception_object);
}

void sub_100C3D090(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  uint64_t v6 = *(void *)(a2 + 128);
  uint64_t v7 = *(void *)(a3 + 128);
  if (v6 <= *(void *)(a1 + 128))
  {
    if (v7 <= v6) {
      return;
    }
    sub_100C3D544(a2, a3);
    if (*(void *)(a2 + 128) <= *(void *)(v5 + 128)) {
      return;
    }
    a1 = v5;
    uint64_t v8 = a2;
  }
  else
  {
    if (v7 <= v6)
    {
      sub_100C3D544(a1, a2);
      if (*(void *)(a3 + 128) <= *(void *)(a2 + 128)) {
        return;
      }
      a1 = a2;
    }
    uint64_t v8 = a3;
  }

  sub_100C3D544(a1, v8);
}

BOOL sub_100C3D150(std::string *a1, std::string *a2)
{
  uint64_t v4 = ((char *)a2 - (char *)a1) >> 3;
  BOOL result = 1;
  switch(0xF0F0F0F0F0F0F0F1 * v4)
  {
    case 0uLL:
    case 1uLL:
      return result;
    case 2uLL:
      if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] > (int64_t)a1[5].__r_.__value_.__l.__size_)
      {
        p_int64_t size = (uint64_t)&a2[-6].__r_.__value_.__l.__size_;
        uint64_t v7 = (uint64_t)a1;
        goto LABEL_4;
      }
      return result;
    case 3uLL:
      sub_100C3D090((uint64_t)a1, (uint64_t)&a1[5].__r_.__value_.__r.__words[2], (uint64_t)&a2[-6].__r_.__value_.__l.__size_);
      return 1;
    case 4uLL:
      sub_100C3D744((uint64_t)a1, (uint64_t)&a1[5].__r_.__value_.__r.__words[2], (uint64_t)&a1[11].__r_.__value_.__l.__size_, (uint64_t)&a2[-6].__r_.__value_.__l.__size_);
      return 1;
    case 5uLL:
      sub_100C3D744((uint64_t)a1, (uint64_t)&a1[5].__r_.__value_.__r.__words[2], (uint64_t)&a1[11].__r_.__value_.__l.__size_, (uint64_t)&a1[17]);
      if ((int64_t)a2[-1].__r_.__value_.__r.__words[2] > (int64_t)a1[22].__r_.__value_.__l.__size_)
      {
        sub_100C3D544((uint64_t)&a1[17], (uint64_t)&a2[-6].__r_.__value_.__l.__size_);
        if ((int64_t)a1[22].__r_.__value_.__l.__size_ > (int64_t)a1[16].__r_.__value_.__r.__words[2])
        {
          sub_100C3D544((uint64_t)&a1[11].__r_.__value_.__l.__size_, (uint64_t)&a1[17]);
          if ((int64_t)a1[16].__r_.__value_.__r.__words[2] > (int64_t)a1[11].__r_.__value_.__r.__words[0])
          {
            sub_100C3D544((uint64_t)&a1[5].__r_.__value_.__r.__words[2], (uint64_t)&a1[11].__r_.__value_.__l.__size_);
            if ((int64_t)a1[11].__r_.__value_.__r.__words[0] > (int64_t)a1[5].__r_.__value_.__l.__size_)
            {
              uint64_t v7 = (uint64_t)a1;
              p_int64_t size = (uint64_t)&a1[5].__r_.__value_.__r.__words[2];
LABEL_4:
              sub_100C3D544(v7, p_size);
            }
          }
        }
      }
      return 1;
    default:
      uint64_t v8 = &a1[11].__r_.__value_.__l.__size_;
      sub_100C3D090((uint64_t)a1, (uint64_t)&a1[5].__r_.__value_.__r.__words[2], (uint64_t)&a1[11].__r_.__value_.__l.__size_);
      uint64_t v9 = (uint64_t)&a1[17];
      if (&a1[17] == a2) {
        return 1;
      }
      uint64_t v10 = 0;
      int v11 = 0;
      break;
  }
  while (1)
  {
    if (*(void *)(v9 + 128) > v8[16])
    {
      int64_t v24 = 0;
      memset(__p, 0, sizeof(__p));
      long long v21 = 0u;
      *(_OWORD *)unint64_t v22 = 0u;
      long long v19 = 0u;
      *(_OWORD *)uint64_t v20 = 0u;
      memset(__str, 0, sizeof(__str));
      sub_10023C008((uint64_t)__str, v9);
      if (*(char *)(v9 + 127) < 0)
      {
        sub_10004FC84(&__p[1], *(void **)(v9 + 104), *(void *)(v9 + 112));
      }
      else
      {
        *(_OWORD *)&__p[1] = *(_OWORD *)(v9 + 104);
        __p[3] = *(void **)(v9 + 120);
      }
      int64_t v24 = *(void *)(v9 + 128);
      uint64_t v12 = v10;
      while (1)
      {
        uint64_t v13 = v12;
        uint64_t v14 = (char *)a1 + v12;
        std::string::operator=((std::string *)((char *)a1 + v12 + 408), (std::string *)((char *)a1 + v12 + 272));
        std::string::operator=((std::string *)v14 + 18, (const std::string *)(v14 + 296));
        uint64_t v15 = (char *)a1 + v13;
        std::string::operator=((std::string *)((char *)a1 + v13 + 456), (std::string *)((char *)a1 + v13 + 320));
        v15[480] = v15[344];
        std::string::operator=((std::string *)(v15 + 488), (const std::string *)(v15 + 352));
        std::string::operator=((std::string *)((char *)a1 + v13 + 512), (std::string *)((char *)a1 + v13 + 376));
        *(std::string::size_type *)((char *)&a1[22].__r_.__value_.__l.__size_ + v13) = *(std::string::size_type *)((char *)&a1[16].__r_.__value_.__r.__words[2] + v13);
        if (v13 == -272) {
          break;
        }
        uint64_t v12 = v13 - 136;
        if (v24 <= *(int64_t *)((char *)a1[11].__r_.__value_.__r.__words + v13))
        {
          long long v16 = (std::string *)((char *)a1 + v12 + 408);
          goto LABEL_16;
        }
      }
      long long v16 = a1;
LABEL_16:
      std::string::operator=(v16, (const std::string *)__str);
      uint64_t v17 = (char *)a1 + v13;
      std::string::operator=((std::string *)(v17 + 296), (const std::string *)&__str[24]);
      std::string::operator=((std::string *)(v17 + 320), (const std::string *)v20);
      v16[3].__r_.__value_.__s.__data_[0] = BYTE8(v21);
      std::string::operator=((std::string *)(v17 + 352), (const std::string *)v22);
      std::string::operator=((std::string *)(v17 + 376), (const std::string *)&__p[1]);
      v16[5].__r_.__value_.__l.__size_ = v24;
      if (SHIBYTE(__p[3]) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v22[0]);
      }
      if (SBYTE7(v21) < 0) {
        operator delete(v20[0]);
      }
      if (SHIBYTE(v19) < 0) {
        operator delete(*(void **)&__str[24]);
      }
      if ((__str[23] & 0x80000000) != 0) {
        operator delete(*(void **)__str);
      }
      if (++v11 == 8) {
        return v9 + 136 == (void)a2;
      }
    }
    uint64_t v8 = (void *)v9;
    v10 += 136;
    v9 += 136;
    if ((std::string *)v9 == a2) {
      return 1;
    }
  }
}

void sub_100C3D4CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C3D544(uint64_t a1, uint64_t a2)
{
  uint64_t v11 = 0;
  memset(__p, 0, sizeof(__p));
  long long v8 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v6 = 0u;
  *(_OWORD *)uint64_t v7 = 0u;
  *(_OWORD *)uint64_t v4 = 0u;
  *(_OWORD *)uint64_t v5 = 0u;
  sub_10023C008((uint64_t)v4, a1);
  if (*(char *)(a1 + 127) < 0)
  {
    sub_10004FC84(&__p[1], *(void **)(a1 + 104), *(void *)(a1 + 112));
  }
  else
  {
    *(_OWORD *)&__p[1] = *(_OWORD *)(a1 + 104);
    __p[3] = *(void **)(a1 + 120);
  }
  uint64_t v11 = *(void *)(a1 + 128);
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  *(unsigned char *)(a1 + 72) = *(unsigned char *)(a2 + 72);
  std::string::operator=((std::string *)(a1 + 80), (const std::string *)(a2 + 80));
  std::string::operator=((std::string *)(a1 + 104), (const std::string *)(a2 + 104));
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  std::string::operator=((std::string *)a2, (const std::string *)v4);
  std::string::operator=((std::string *)(a2 + 24), (const std::string *)&v5[1]);
  std::string::operator=((std::string *)(a2 + 48), (const std::string *)v7);
  *(unsigned char *)(a2 + 72) = BYTE8(v8);
  std::string::operator=((std::string *)(a2 + 80), (const std::string *)v9);
  std::string::operator=((std::string *)(a2 + 104), (const std::string *)&__p[1]);
  *(void *)(a2 + 128) = v11;
  if (SHIBYTE(__p[3]) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(__p[0]) < 0) {
    operator delete(v9[0]);
  }
  if (SBYTE7(v8) < 0) {
    operator delete(v7[0]);
  }
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[1]);
  }
  if (SHIBYTE(v5[0]) < 0) {
    operator delete(v4[0]);
  }
}

void sub_100C3D6E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C3D744(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  sub_100C3D090(a1, a2, a3);
  if (*(void *)(a4 + 128) > *(void *)(a3 + 128))
  {
    sub_100C3D544(a3, a4);
    if (*(void *)(a3 + 128) > *(void *)(a2 + 128))
    {
      sub_100C3D544(a2, a3);
      if (*(void *)(a2 + 128) > *(void *)(a1 + 128))
      {
        sub_100C3D544(a1, a2);
      }
    }
  }
}

void sub_100C3D7EC(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = **(void **)(a1 + 40);
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  sub_100C27EAC(a2, v3);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((a2[1] - *a2) >> 3);
    int v6 = 136315650;
    uint64_t v7 = "";
    __int16 v8 = 2080;
    uint64_t v9 = "";
    __int16 v10 = 2048;
    unint64_t v11 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sgetAllEndUserSimLabels, reporting %zu labels", (uint8_t *)&v6, 0x20u);
  }
}

void sub_100C3D8DC(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100541194((void **)v2);
  *(_OWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  unint64_t v5 = (void **)&v3;
  sub_100320504(&v5);
}

void sub_100C3D94C(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v3);
  uint64_t v2 = *(void *)(a1 + 32);
  sub_100541194((void **)v2);
  *(_OWORD *)uint64_t v2 = v3;
  *(void *)(v2 + 16) = v4;
  long long v3 = 0uLL;
  uint64_t v4 = 0;
  unint64_t v5 = (void **)&v3;
  sub_100320504(&v5);
}

void sub_100C3D9BC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)v3;
  unint64_t v5 = *(NSObject **)(*(void *)v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    int v6 = (const char *)(v3 + 8);
    uint64_t v7 = *(unsigned __int8 *)(v3 + 31);
    BOOL v8 = (v7 & 0x80u) != 0;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v3 + 16);
    }
    if (v8) {
      int v6 = *(const char **)(v3 + 8);
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    if (!v7) {
      int v6 = "<invalid>";
    }
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    unint64_t v22 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%saddNewSimLabel, %s", buf, 0x20u);
  }
  uint64_t v9 = sub_100046F68(v4 + 832, (void **)(v3 + 8));
  if ((void **)(v4 + 840) == v9)
  {
    if (*(char *)(v3 + 31) < 0)
    {
      sub_10004FC84(__dst, *(void **)(v3 + 8), *(void *)(v3 + 16));
    }
    else
    {
      long long v16 = *(_OWORD *)(v3 + 8);
      uint64_t v26 = *(void *)(v3 + 24);
      *(_OWORD *)long long __dst = v16;
    }
    long long v19 = 0;
    uint64_t v20 = 0;
    std::string __p = &v19;
    memset(buf, 0, sizeof(buf));
    sub_100C3B5F4(buf, (uint64_t)&__p, (uint64_t)__dst);
    uint64_t v17 = *(void *)buf;
    **(void **)long long buf = 0;
    *(void *)(v17 + 8) = 0;
    *(void *)(v17 + 16) = &v19;
    long long v19 = (char *)v17;
    if (*(void *)__p) {
      std::string __p = *(void **)__p;
    }
    sub_100046C90((uint64_t *)v17, (uint64_t *)v17);
    ++v20;
    if (SHIBYTE(v26) < 0) {
      operator delete(__dst[0]);
    }
    *(void *)(a2 + 96) = 0;
    *(_OWORD *)(a2 + 64) = 0u;
    *(_OWORD *)(a2 + 8sub_10023C164((uint64_t)&a9, 0) = 0u;
    *(_OWORD *)(a2 + 32) = 0u;
    *(_OWORD *)(a2 + 48) = 0u;
    *(_OWORD *)a2 = 0u;
    *(_OWORD *)(a2 + 16) = 0u;
    sub_100C25BAC(a2, v4, &__p);
    sub_100C1E074(v4, "new label added", 0);
    sub_1000DA2E4(v19);
  }
  else
  {
    __int16 v10 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = *(unsigned __int8 *)(v3 + 31);
      BOOL v12 = (v11 & 0x80u) != 0;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v3 + 16);
      }
      if (v12) {
        uint64_t v13 = *(const char **)(v3 + 8);
      }
      else {
        uint64_t v13 = (const char *)(v3 + 8);
      }
      if (v11) {
        uint64_t v14 = v13;
      }
      else {
        uint64_t v14 = "<invalid>";
      }
      asString();
      if (v20 >= 0) {
        uint64_t p_p = &__p;
      }
      else {
        uint64_t p_p = __p;
      }
      *(_DWORD *)long long buf = 136315906;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      unint64_t v22 = v14;
      __int16 v23 = 2080;
      int64_t v24 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%saddNewSimLabel, %s -> label exist: %s", buf, 0x2Au);
      if (SHIBYTE(v20) < 0) {
        operator delete(__p);
      }
    }
    sub_10023C008(a2, (uint64_t)(v9 + 7));
  }
}

void sub_100C3DC84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
}

void sub_100C3DD0C(uint64_t a1)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 40) + 16))(&__str);
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::operator=((std::string *)v2, &__str);
  std::string::operator=((std::string *)(v2 + 24), &v4);
  std::string::operator=((std::string *)(v2 + 48), &v5);
  *(unsigned char *)(v2 + 72) = v6;
  std::string::operator=((std::string *)(v2 + 80), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100C3DDD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001A7138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C3DDE4(uint64_t a1)
{
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 40) + 16))(&__str);
  uint64_t v2 = *(void *)(a1 + 32);
  std::string::operator=((std::string *)v2, &__str);
  std::string::operator=((std::string *)(v2 + 24), &v4);
  std::string::operator=((std::string *)(v2 + 48), &v5);
  *(unsigned char *)(v2 + 72) = v6;
  std::string::operator=((std::string *)(v2 + 80), &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v5.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v5.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
}

void sub_100C3DEA8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001A7138((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C3DEBC(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = *(void *)v3;
  std::string v5 = *(NSObject **)(*(void *)v3 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    char v6 = *(char **)(v3 + 8);
    uint64_t v7 = *(unsigned __int8 *)(v3 + 31);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(v3 + 16);
    }
    if (v8 >= 0) {
      char v6 = (char *)(v3 + 8);
    }
    if (v7) {
      uint64_t v9 = v6;
    }
    else {
      uint64_t v9 = "<invalid>";
    }
    __int16 v10 = (void *)(v3 + 32);
    if (*(char *)(v3 + 55) < 0) {
      __int16 v10 = (void *)*v10;
    }
    uint64_t v11 = (void *)(v3 + 56);
    if (*(char *)(v3 + 79) < 0) {
      uint64_t v11 = (void *)*v11;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136316162;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
    HIWORD(buf.__r_.__value_.__r.__words[2]) = 2080;
    uint64_t v32 = v9;
    __int16 v33 = 2080;
    unint64_t v34 = v10;
    __int16 v35 = 2080;
    v36[0] = v11;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%srenameSimLabel, %s <- text:%s (tag:%s)", (uint8_t *)&buf, 0x34u);
  }
  int64_t v28 = 0;
  BOOL v29 = 0;
  unint64_t v30 = 0;
  BOOL v12 = *(uint64_t ***)(v4 + 608);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == v14)
  {
    memset(&v27, 0, sizeof(v27));
    char v22 = 1;
  }
  else
  {
    do
    {
      if (!*(unsigned char *)(*v13 + 49) && !sub_10001D294((unsigned __int8 *)(*v13 + 24), (unsigned __int8 *)(v3 + 8)))
      {
        uint64_t v15 = *v13;
        long long v16 = (long long *)(*v13 + 24);
        uint64_t v17 = v29;
        if ((unint64_t)v29 >= v30)
        {
          long long v19 = (long long *)sub_100C31B40((uint64_t *)&v28, v16);
        }
        else
        {
          if (*(char *)(v15 + 47) < 0)
          {
            sub_10004FC84(v29, *(void **)(v15 + 24), *(void *)(v15 + 32));
          }
          else
          {
            long long v18 = *v16;
            *((void *)v29 + 2) = *(void *)(*v13 + 40);
            *uint64_t v17 = v18;
          }
          long long v19 = (long long *)((char *)v17 + 24);
        }
        BOOL v29 = v19;
      }
      v13 += 2;
    }
    while (v13 != v14);
    uint64_t v20 = v28;
    long long v21 = (void **)v29;
    memset(&v27, 0, sizeof(v27));
    if (v28 == (void **)v29)
    {
LABEL_29:
      char v22 = 1;
    }
    else
    {
      while ((void **)(v4 + 840) == sub_100046F68(v4 + 832, v20) || (SimLabel::sameLabelContent() & 1) == 0)
      {
        v20 += 3;
        if (v20 == v21) {
          goto LABEL_29;
        }
      }
      char v22 = 0;
    }
  }
  __int16 v23 = sub_100046F68(v4 + 832, (void **)(v3 + 8));
  if ((void **)(v4 + 840) != v23) {
    std::string::operator=(&v27, (const std::string *)(v23 + 13));
  }
  *(_OWORD *)(a2 + 8sub_10023C164((uint64_t)&a9, 0) = 0u;
  *(void *)(a2 + 96) = 0;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (size)
  {
    if ((v22 & 1) == 0)
    {
      int64_t v25 = *(NSObject **)(v4 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
        WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s%srenameSimLabel, duplicate label detected, but who cares", (uint8_t *)&buf, 0x16u);
      }
    }
    sub_100C291D0((uint64_t)&buf, v4, v3 + 8, (const std::string *)(v3 + 32), (const std::string *)(v3 + 56), *(unsigned __int8 *)(v3 + 80));
    std::string::operator=((std::string *)a2, &buf);
    std::string::operator=((std::string *)(a2 + 24), (const std::string *)&v32);
    std::string::operator=((std::string *)(a2 + 48), (const std::string *)((char *)v36 + 4));
    *(unsigned char *)(a2 + 72) = v38;
    std::string::operator=((std::string *)(a2 + 80), &__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v37 < 0) {
      operator delete(*(void **)((char *)v36 + 4));
    }
    if (SBYTE3(v36[0]) < 0) {
      operator delete(v32);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(buf.__r_.__value_.__l.__data_);
    }
    sub_100C1E074(v4, "label text updated", 0);
  }
  else
  {
    uint64_t v26 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)"";
      WORD2(buf.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"";
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#W %s%srenameSimLabel failed, unable to find label", (uint8_t *)&buf, 0x16u);
    }
  }
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v28;
  sub_100047F64((void ***)&buf);
}

void sub_100C3E2F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (*(char *)(v42 + 103) < 0) {
    operator delete(*v43);
  }
  if (*(char *)(v42 + 71) < 0) {
    operator delete(*(void **)(v42 + 48));
  }
  if (*(char *)(v42 + 47) < 0) {
    operator delete(*(void **)(v42 + 24));
  }
  if (*(char *)(v42 + 23) < 0) {
    operator delete(*(void **)v42);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  a18 = &a15;
  sub_100047F64((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3E3C8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v51 = a1;
  uint64_t v52 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(const char **)(v1 + 8);
    uint64_t v5 = *(unsigned __int8 *)(v1 + 31);
    int v6 = (char)v5;
    if ((v5 & 0x80u) != 0) {
      uint64_t v5 = *(void *)(v1 + 16);
    }
    if (v6 >= 0) {
      uint64_t v4 = (const char *)(v1 + 8);
    }
    if (v5) {
      uint64_t v7 = v4;
    }
    else {
      uint64_t v7 = "<invalid>";
    }
    int v8 = (void *)(v1 + 32);
    if (*(char *)(v1 + 55) < 0) {
      int v8 = (void *)*v8;
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v67 = v7;
    LOWORD(v68) = 2080;
    *(void *)((char *)&v68 + 2) = v8;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%ssetSimLabelMdn, persona %s mdn %s", buf, 0x2Au);
  }
  if ((void **)(v2 + 224) == sub_100046F68(v2 + 216, (void **)(v1 + 8)))
  {
    if ((void **)(v2 + 840) == sub_100046F68(v2 + 832, (void **)(v1 + 8)))
    {
      uint64_t v9 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_123;
      }
      uint64_t v27 = *(unsigned __int8 *)(v1 + 31);
      BOOL v28 = (v27 & 0x80u) != 0;
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(v1 + 16);
      }
      if (v28) {
        BOOL v29 = *(const char **)(v1 + 8);
      }
      else {
        BOOL v29 = (const char *)(v1 + 8);
      }
      if (v27) {
        unint64_t v30 = v29;
      }
      else {
        unint64_t v30 = "<invalid>";
      }
      *(_DWORD *)std::string buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v67 = v30;
      uint64_t v14 = "#I %s%ssetSimLabelMdn, persona %s doesn't have label yet - bailing out";
      goto LABEL_23;
    }
    *(void *)std::string buf = v1 + 8;
    uint64_t v17 = sub_100C3B444((uint64_t **)(v2 + 832), (void **)(v1 + 8), (long long **)buf);
    long long v18 = (std::string *)(v17 + 17);
    long long v19 = (const void **)(v1 + 32);
    uint64_t v20 = *((unsigned __int8 *)v17 + 159);
    if ((v20 & 0x80u) == 0) {
      uint64_t v21 = *((unsigned __int8 *)v17 + 159);
    }
    else {
      uint64_t v21 = v17[18];
    }
    uint64_t v22 = *(unsigned __int8 *)(v1 + 55);
    int v23 = (char)v22;
    if ((v22 & 0x80u) != 0) {
      uint64_t v22 = *(void *)(v1 + 40);
    }
    if (v21 != v22) {
      goto LABEL_52;
    }
    if (v23 >= 0) {
      int64_t v24 = (unsigned __int8 *)(v1 + 32);
    }
    else {
      int64_t v24 = (unsigned __int8 *)*v19;
    }
    if ((v20 & 0x80) != 0)
    {
      if (memcmp(v18->__r_.__value_.__l.__data_, v24, v17[18]))
      {
LABEL_52:
        std::string::operator=(v18, (const std::string *)(v1 + 32));
        uint64_t v31 = *(void *)(v2 + 120);
        if (*(char *)(v1 + 55) < 0)
        {
          sub_10004FC84(__dst, *(void **)(v1 + 32), *(void *)(v1 + 40));
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v19;
          uint64_t v64 = *(void *)(v1 + 48);
        }
        if (SHIBYTE(v64) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)std::string __p = *(_OWORD *)__dst;
          uint64_t v57 = v64;
        }
        *(void *)&long long v60 = 0;
        if (SHIBYTE(v57) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)__p;
          *(void *)&uint8_t buf[16] = v57;
        }
        v61.i64[0] = 0;
        if (ctu::cf::convert_copy())
        {
          char v37 = (void *)v60;
          *(void *)&long long v60 = v61.i64[0];
          v53[0] = v37;
          sub_1000558F4((const void **)v53);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v65 = (const void *)v60;
        *(void *)&long long v60 = 0;
        sub_1000558F4((const void **)&v60);
        if (SHIBYTE(v57) < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const void *, const __CFString *, void, void, void, uint64_t *, uint64_t))(*(void *)v31 + 16))(v31, v1 + 8, @"mdn", v65, @"info", 0, 0, 0, v51, v52);
        sub_1000558F4(&v65);
        if (SHIBYTE(v64) < 0) {
          operator delete(__dst[0]);
        }
        int64x2_t v61 = 0uLL;
        unint64_t v62 = 0;
        char v38 = *(uint64_t **)(v2 + 608);
        uint64_t v39 = *v38;
        uint64_t v40 = v38[1];
        if (*v38 == v40) {
          goto LABEL_92;
        }
        while (*(unsigned char *)(*(void *)v39 + 49)
             || !sub_10001D294((unsigned __int8 *)(*(void *)v39 + 24), (unsigned __int8 *)(v1 + 8)))
        {
          v39 += 16;
          if (v39 == v40)
          {
            uint64_t v39 = v40;
            break;
          }
        }
        if (v39 == *(void *)(*(void *)(v2 + 608) + 8))
        {
LABEL_92:
          (*(void (**)(void, uint64_t, const __CFString *, const __CFString *, const __CFString *, void, void, void))(**(void **)(v2 + 120) + 16))(*(void *)(v2 + 120), v1 + 8, @"type", @"sim", @"info", 0, 0, 0);
        }
        else
        {
          long long v60 = 0uLL;
          sub_100612480(*(long long **)v39, &v60);
          std::string::operator=((std::string *)(v60 + 72), (const std::string *)(v1 + 32));
          long long v41 = v60;
          if (*((void *)&v60 + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v60 + 1) + 8), 1uLL, memory_order_relaxed);
          }
          uint64_t v42 = *(std::__shared_weak_count **)(v39 + 8);
          *(_OWORD *)uint64_t v39 = v41;
          if (v42) {
            sub_10004D2C8(v42);
          }
          if (*(unsigned char *)(v60 + 48))
          {
            if (*(char *)(v1 + 31) < 0)
            {
              sub_10004FC84(v53, *(void **)(v1 + 8), *(void *)(v1 + 16));
            }
            else
            {
              long long v43 = *(_OWORD *)(v1 + 8);
              uint64_t v54 = *(void *)(v1 + 24);
              *(_OWORD *)uint64_t v53 = v43;
            }
            char v55 = 3;
            if (SHIBYTE(v54) < 0)
            {
              sub_10004FC84(__p, v53[0], (unint64_t)v53[1]);
              char v44 = v55;
            }
            else
            {
              *(_OWORD *)std::string __p = *(_OWORD *)v53;
              uint64_t v57 = v54;
              char v44 = 3;
            }
            char v58 = v44;
            long long v59 = v60;
            if (*((void *)&v60 + 1)) {
              atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v60 + 1) + 8), 1uLL, memory_order_relaxed);
            }
            if (SHIBYTE(v57) < 0)
            {
              sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)std::string buf = *(_OWORD *)__p;
              *(void *)&uint8_t buf[16] = v57;
            }
            LOBYTE(v67) = v58;
            long long v68 = v59;
            long long v59 = 0uLL;
            uint64_t v45 = v61.i64[1];
            if (v61.i64[1] >= v62)
            {
              v61.i64[1] = sub_100C2FC44(&v61, (long long *)buf);
              if (*((void *)&v68 + 1)) {
                sub_10004D2C8(*((std::__shared_weak_count **)&v68 + 1));
              }
            }
            else
            {
              if ((buf[23] & 0x80000000) != 0)
              {
                sub_10004FC84((unsigned char *)v61.i64[1], *(void **)buf, *(unint64_t *)&buf[8]);
              }
              else
              {
                long long v46 = *(_OWORD *)buf;
                *(void *)(v61.i64[1] + 16) = *(void *)&buf[16];
                *(_OWORD *)uint64_t v45 = v46;
              }
              *(unsigned char *)(v45 + 24) = (_BYTE)v67;
              *(_OWORD *)(v45 + 32) = v68;
              long long v68 = 0uLL;
              v61.i64[1] = v45 + 48;
            }
            if ((buf[23] & 0x80000000) != 0) {
              operator delete(*(void **)buf);
            }
            if (*((void *)&v59 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v59 + 1));
            }
            if (SHIBYTE(v57) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v54) < 0) {
              operator delete(v53[0]);
            }
          }
          sub_100C19920(v2, 1);
          if (*((void *)&v60 + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&v60 + 1));
          }
        }
        uint64_t v47 = v61.i64[0];
        if (v61.i64[1] != v61.i64[0])
        {
          uint64_t v48 = 0;
          unint64_t v49 = 0;
          do
          {
            sub_100C1AE18((void *)v2, v47 + v48);
            ++v49;
            uint64_t v47 = v61.i64[0];
            v48 += 48;
          }
          while (v49 < 0xAAAAAAAAAAAAAAABLL * ((v61.i64[1] - v61.i64[0]) >> 4));
        }
        sub_100C1E074(v2, "mdn manually set", 0);
        *(void *)std::string buf = &v61;
        sub_100C30EFC((void ***)buf);
        goto LABEL_123;
      }
    }
    else if (*((unsigned char *)v17 + 159))
    {
      int64_t v25 = v24;
      uint64_t v26 = (unsigned __int8 *)(v17 + 17);
      while (*v26 == *v25)
      {
        ++v26;
        ++v25;
        if (!--v20) {
          goto LABEL_54;
        }
      }
      goto LABEL_52;
    }
LABEL_54:
    uint64_t v32 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_123;
    }
    uint64_t v33 = *(unsigned __int8 *)(v1 + 31);
    BOOL v34 = (v33 & 0x80u) != 0;
    if ((v33 & 0x80u) != 0) {
      uint64_t v33 = *(void *)(v1 + 16);
    }
    if (v34) {
      __int16 v35 = *(const char **)(v1 + 8);
    }
    else {
      __int16 v35 = (const char *)(v1 + 8);
    }
    if (v33) {
      __int16 v36 = v35;
    }
    else {
      __int16 v36 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v67 = v36;
    LOWORD(v68) = 2080;
    *(void *)((char *)&v68 + 2) = v24;
    uint64_t v14 = "#I %s%ssetSimLabelMdn, persona %s already has mdn = %s - nothing to do";
    uint64_t v15 = v32;
    uint32_t v16 = 42;
    goto LABEL_24;
  }
  uint64_t v9 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *(unsigned __int8 *)(v1 + 31);
    BOOL v11 = (v10 & 0x80u) != 0;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(v1 + 16);
    }
    if (v11) {
      BOOL v12 = *(const char **)(v1 + 8);
    }
    else {
      BOOL v12 = (const char *)(v1 + 8);
    }
    if (v10) {
      uint64_t v13 = v12;
    }
    else {
      uint64_t v13 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v67 = v13;
    uint64_t v14 = "#I %s%ssetSimLabelMdn, persona %s listed on the device - so cannot change mdn - bailing out";
LABEL_23:
    uint64_t v15 = v9;
    uint32_t v16 = 32;
LABEL_24:
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
  }
LABEL_123:
  sub_10032C9A0(&v52);
  return sub_100046B58((uint64_t *)&v51);
}

void sub_100C3EBC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,char a28,std::__shared_weak_count *a29,char a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 88);
  if (v40) {
    sub_10004D2C8(v40);
  }
  if (*(char *)(v38 - 105) < 0) {
    operator delete(*(void **)(v38 - 128));
  }
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  if (a29) {
    sub_10004D2C8(a29);
  }
  *(void *)(v38 - 128) = &a30;
  sub_100C30EFC((void ***)(v38 - 128));
  sub_10032C9A0(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C3ECE4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  BOOL v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(const char **)(v1 + 8);
    uint64_t v5 = *(unsigned __int8 *)(v1 + 31);
    uint64_t v6 = *(void *)(v1 + 16);
    uint64_t v7 = asStringBool(*(unsigned char *)(v1 + 32));
    if ((v5 & 0x80u) == 0) {
      uint64_t v8 = v5;
    }
    else {
      uint64_t v8 = v6;
    }
    if ((v5 & 0x80u) == 0) {
      uint64_t v9 = (const char *)(v1 + 8);
    }
    else {
      uint64_t v9 = v4;
    }
    *(_DWORD *)std::string buf = 136315906;
    uint64_t v15 = "";
    __int16 v16 = 2080;
    uint64_t v17 = "";
    __int16 v18 = 2080;
    if (v8) {
      uint64_t v10 = v9;
    }
    else {
      uint64_t v10 = "<invalid>";
    }
    long long v19 = v10;
    __int16 v20 = 2080;
    uint64_t v21 = v7;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%sconfirmSimLabel, %s -> %s", buf, 0x2Au);
  }
  sub_100C28CB0(v2, v1 + 8, *(unsigned __int8 *)(v1 + 32));
  sub_100C1E074(v2, "didSetup marked", 0);
  sub_10023CBF8(&v13);
  return sub_100046B58((uint64_t *)&v12);
}

void sub_100C3EE30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void *sub_100C3EE4C(void *a1, CFTypeRef cf)
{
  *a1 = cf;
  if (cf) {
    CFRetain(cf);
  }
  return a1;
}

uint64_t sub_100C3EE84(uint64_t *a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = operator new(0xA0uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_101A491E8;
  uint64_t result = sub_100C31AD0((uint64_t)(v6 + 3), a2, a3);
  *a1 = result;
  a1[1] = (uint64_t)v6;
  return result;
}

void sub_100C3EEF0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100C3EF08(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A491E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C3EF28(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A491E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C3EF7C(uint64_t a1)
{
}

uint64_t *sub_100C3EF88(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v56 = a1;
  uint64_t v57 = v1;
  uint64_t v2 = *(void ***)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  uint64_t v4 = "<invalid>";
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (char *)(v1 + 8);
    uint64_t v6 = *(unsigned __int8 *)(v1 + 31);
    int v7 = (char)v6;
    if ((v6 & 0x80u) != 0) {
      uint64_t v6 = *(void *)(v1 + 16);
    }
    if (v7 < 0) {
      uint64_t v5 = *(char **)(v1 + 8);
    }
    if (!v6) {
      uint64_t v5 = "<invalid>";
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    __int16 v70 = 2080;
    uint64_t v71 = "";
    __int16 v72 = 2080;
    uint64_t v73 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%sresolveSimLabel - from Settings, %s", buf, 0x20u);
    uint64_t v3 = v2[5];
  }
  uint64_t v55 = v1;
  int64x2_t v62 = 0uLL;
  v63[0] = 0;
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    __int16 v70 = 2080;
    uint64_t v71 = "";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%s======== available and active", buf, 0x16u);
  }
  uint64_t v8 = (uint64_t **)v2[76];
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  if (*v8 != v10)
  {
    BOOL v11 = v2 + 105;
    do
    {
      uint64_t v12 = *v9;
      if (!*(unsigned char *)(*v9 + 49) && *(unsigned char *)(v12 + 48))
      {
        uint64_t v13 = sub_100046F68((uint64_t)(v2 + 104), (void **)(v12 + 24));
        uint64_t v14 = v2[5];
        if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = *v9 + 24;
          uint64_t v16 = *(unsigned __int8 *)(*v9 + 47);
          int v17 = (char)v16;
          if ((v16 & 0x80u) != 0) {
            uint64_t v16 = *(void *)(*v9 + 32);
          }
          if (v17 < 0) {
            uint64_t v15 = *(void *)(*v9 + 24);
          }
          __int16 v18 = v4;
          if (v16) {
            uint64_t v4 = (char *)v15;
          }
          if (v11 == v13)
          {
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "";
            __int16 v70 = 2080;
            uint64_t v71 = "";
            __int16 v72 = 2080;
            uint64_t v73 = v4;
            __int16 v74 = 2080;
            uint64_t v75 = "";
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", buf, 0x2Au);
          }
          else
          {
            asString();
            uint64_t p_p = (const char *)&__p;
            if (SHIBYTE(v65[1]) < 0) {
              uint64_t p_p = (const char *)__p;
            }
            *(_DWORD *)std::string buf = 136315906;
            *(void *)&uint8_t buf[4] = "";
            __int16 v70 = 2080;
            uint64_t v71 = "";
            __int16 v72 = 2080;
            uint64_t v73 = v4;
            __int16 v74 = 2080;
            uint64_t v75 = p_p;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%s  %s %s", buf, 0x2Au);
            if (SHIBYTE(v65[1]) < 0) {
              operator delete(__p);
            }
          }
          uint64_t v4 = v18;
        }
        if (v11 != v13)
        {
          uint64_t v20 = *v9;
          (*((void (**)(unsigned char *__return_ptr, void **, void **))*v2 + 19))(buf, v2, v13 + 7);
          sub_100C3EE84((uint64_t *)&v58, (long long *)(v20 + 24), (uint64_t)buf);
          uint64_t v21 = v62.i64[1];
          if (v62.i64[1] >= v63[0])
          {
            uint64_t v23 = (v62.i64[1] - v62.i64[0]) >> 4;
            if ((unint64_t)(v23 + 1) >> 60) {
              sub_10006A748();
            }
            unint64_t v24 = (v63[0] - v62.i64[0]) >> 3;
            if (v24 <= v23 + 1) {
              unint64_t v24 = v23 + 1;
            }
            if (v63[0] - v62.i64[0] >= 0x7FFFFFFFFFFFFFF0uLL) {
              unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v25 = v24;
            }
            uint64_t v67 = v63;
            uint64_t v26 = (char *)sub_10006A794((uint64_t)v63, v25);
            uint64_t v27 = &v26[16 * v23];
            uint64_t v66 = &v26[16 * v28];
            *(_OWORD *)uint64_t v27 = v58;
            uint64_t v22 = v27 + 16;
            long long v58 = 0uLL;
            v65[1] = v27 + 16;
            BOOL v29 = (void *)v62.i64[1];
            unint64_t v30 = (void *)v62.i64[0];
            if (v62.i64[1] == v62.i64[0])
            {
              int64x2_t v32 = vdupq_n_s64(v62.u64[1]);
            }
            else
            {
              do
              {
                long long v31 = *((_OWORD *)v29 - 1);
                v29 -= 2;
                *((_OWORD *)v27 - 1) = v31;
                v27 -= 16;
                *BOOL v29 = 0;
                v29[1] = 0;
              }
              while (v29 != v30);
              int64x2_t v32 = v62;
              uint64_t v22 = v65[1];
            }
            v62.i64[0] = (uint64_t)v27;
            v62.i64[1] = (uint64_t)v22;
            *(int64x2_t *)uint64_t v65 = v32;
            uint64_t v33 = (char *)v63[0];
            v63[0] = v66;
            uint64_t v66 = v33;
            std::string __p = (void *)v32.i64[0];
            sub_10019E528((uint64_t)&__p);
          }
          else
          {
            *(_OWORD *)v62.i64[1] = v58;
            uint64_t v22 = (void *)(v21 + 16);
          }
          v62.i64[1] = (uint64_t)v22;
          if (v80 < 0) {
            operator delete(v79);
          }
          if (v78 < 0) {
            operator delete(v77);
          }
          if (v76 < 0) {
            operator delete(v73);
          }
          if (SHIBYTE(v72) < 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      v9 += 2;
    }
    while (v9 != v10);
  }
  BOOL v34 = (long long *)(v55 + 8);
  __int16 v35 = sub_100046F68((uint64_t)(v2 + 104), (void **)(v55 + 8));
  if (v2 + 105 == v35)
  {
    __int16 v36 = 0;
    goto LABEL_64;
  }
  (*((void (**)(unsigned char *__return_ptr, void **, void **))*v2 + 19))(buf, v2, v35 + 7);
  sub_100C3EE84((uint64_t *)&__p, v34, (uint64_t)buf);
  char v37 = __p;
  __int16 v36 = (std::__shared_weak_count *)v65[0];
  if (v80 < 0) {
    operator delete(v79);
  }
  if (v78 < 0) {
    operator delete(v77);
  }
  if (v76 < 0) {
    operator delete(v73);
  }
  if (SHIBYTE(v72) < 0)
  {
    operator delete(*(void **)buf);
    if (v37) {
      goto LABEL_76;
    }
LABEL_64:
    uint64_t v38 = v2[5];
    if (!os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_91;
    }
    uint64_t v39 = *(unsigned __int8 *)(v55 + 31);
    BOOL v40 = (v39 & 0x80u) != 0;
    if ((v39 & 0x80u) != 0) {
      uint64_t v39 = *(void *)(v55 + 16);
    }
    if (v40) {
      long long v41 = *(char **)(v55 + 8);
    }
    else {
      long long v41 = (char *)(v55 + 8);
    }
    if (v39) {
      uint64_t v42 = v41;
    }
    else {
      uint64_t v42 = v4;
    }
    *(_DWORD *)std::string buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    __int16 v70 = 2080;
    uint64_t v71 = "";
    __int16 v72 = 2080;
    uint64_t v73 = v42;
    long long v43 = "#I %s%sFailed to find label for: %s";
    char v44 = v38;
    uint32_t v45 = 32;
    goto LABEL_74;
  }
  if (!v37) {
    goto LABEL_64;
  }
LABEL_76:
  uint64_t v47 = (char *)v62.i64[1];
  long long v46 = (char *)v62.i64[0];
  if (v62.i64[1] == v62.i64[0])
  {
    unint64_t v50 = v2[5];
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      __int16 v70 = 2080;
      uint64_t v71 = "";
      long long v43 = "#I %s%sNo SIMs to resolve to";
      char v44 = v50;
      uint32_t v45 = 22;
LABEL_74:
      _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, v43, buf, v45);
    }
  }
  else
  {
    uint64_t v48 = v2[137];
    long long v60 = v37;
    int64x2_t v61 = v36;
    if (v36)
    {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v47 = (char *)v62.i64[1];
    }
    long long v58 = 0uLL;
    uint64_t v59 = 0;
    sub_1008E9E78(&v58, v46, v47, (v47 - v46) >> 4);
    std::string __p = v2;
    if (*(char *)(v55 + 31) < 0)
    {
      sub_10004FC84(v65, *(void **)(v55 + 8), *(void *)(v55 + 16));
    }
    else
    {
      long long v49 = *v34;
      uint64_t v66 = *(char **)(v55 + 24);
      *(_OWORD *)uint64_t v65 = v49;
    }
    uint64_t v73 = 0;
    uint64_t v51 = operator new(0x28uLL);
    uint64_t v52 = __p;
    *uint64_t v51 = off_101A49238;
    v51[1] = v52;
    uint64_t v53 = v51 + 2;
    if (SHIBYTE(v66) < 0)
    {
      sub_10004FC84(v53, v65[0], (unint64_t)v65[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v53 = *(_OWORD *)v65;
      v51[4] = v66;
    }
    uint64_t v73 = v51;
    (*(void (**)(void *, void **, long long *, unsigned char *))(*(void *)v48 + 40))(v48, &v60, &v58, buf);
    sub_1008E9FC4(buf);
    if (SHIBYTE(v66) < 0) {
      operator delete(v65[0]);
    }
    long long v68 = (int64x2_t *)&v58;
    sub_10005CBF0((void ***)&v68);
    if (v61) {
      sub_10004D2C8(v61);
    }
  }
LABEL_91:
  long long v68 = &v62;
  sub_10005CBF0((void ***)&v68);
  if (v36) {
    sub_10004D2C8(v36);
  }
  sub_1001102C4(&v57);
  return sub_100046B58((uint64_t *)&v56);
}

void sub_100C3F6FC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33)
{
  operator delete(v34);
  if (a31 < 0) {
    operator delete(__p);
  }
  a33 = (uint64_t)&a15;
  sub_10005CBF0((void ***)&a33);
  if (a20) {
    sub_10004D2C8((std::__shared_weak_count *)a20);
  }
  a33 = (uint64_t)&a21;
  sub_10005CBF0((void ***)&a33);
  if (v33) {
    sub_10004D2C8(v33);
  }
  sub_1001102C4(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3F820(uint64_t a1)
{
  *(void *)a1 = off_101A49238;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100C3F870(uint64_t a1)
{
  *(void *)a1 = off_101A49238;
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_100C3F8E0(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_101A49238;
  v2[1] = v3;
  uint64_t v4 = v2 + 2;
  if (*(char *)(a1 + 39) < 0)
  {
    sub_10004FC84(v4, *(void **)(a1 + 16), *(void *)(a1 + 24));
  }
  else
  {
    *(_OWORD *)uint64_t v4 = *(_OWORD *)(a1 + 16);
    v2[4] = *(void *)(a1 + 32);
  }
  return v2;
}

void sub_100C3F958(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_100C3F96C(char *result, void *a2)
{
  uint64_t v2 = *((void *)result + 1);
  *a2 = off_101A49238;
  a2[1] = v2;
  uint64_t v3 = a2 + 2;
  if (result[39] < 0) {
    return (char *)sub_10004FC84(v3, *((void **)result + 2), *((void *)result + 3));
  }
  long long v4 = *((_OWORD *)result + 1);
  a2[4] = *((void *)result + 4);
  *(_OWORD *)uint64_t v3 = v4;
  return result;
}

void sub_100C3F9BC(uint64_t a1)
{
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
}

void sub_100C3F9D0(void **__p)
{
  if (*((char *)__p + 39) < 0) {
    operator delete(__p[2]);
  }

  operator delete(__p);
}

void sub_100C3FA14(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4)
{
  int v5 = *a2;
  uint64_t v7 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v9 = *a4;
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  uint64_t v10 = *(void *)(a1 + 8);
  BOOL v11 = *(NSObject **)(v10 + 40);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v5)
  {
    if (v12)
    {
      uint64_t v13 = (const char *)(v7 + 104);
      int v14 = *(char *)(v7 + 127);
      BOOL v15 = v14 < 0;
      if (v14 >= 0) {
        uint64_t v16 = *(unsigned __int8 *)(v7 + 127);
      }
      else {
        uint64_t v16 = *(void *)(v7 + 112);
      }
      if (v15) {
        uint64_t v13 = *(const char **)(v7 + 104);
      }
      int v17 = "<invalid>";
      if (!v16) {
        uint64_t v13 = "<invalid>";
      }
      if (v9)
      {
        __int16 v18 = (const char *)(v9 + 104);
        uint64_t v19 = *(unsigned __int8 *)(v9 + 127);
        int v20 = (char)v19;
        if ((v19 & 0x80u) != 0) {
          uint64_t v19 = *(void *)(v9 + 112);
        }
        if (v20 < 0) {
          __int16 v18 = *(const char **)(v9 + 104);
        }
        if (v19) {
          int v17 = v18;
        }
      }
      else
      {
        int v17 = "";
      }
      int v26 = 136315906;
      uint64_t v27 = "";
      __int16 v28 = 2080;
      BOOL v29 = "";
      __int16 v30 = 2080;
      long long v31 = v13;
      __int16 v32 = 2080;
      uint64_t v33 = v17;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s%s'%s' resolved to '%s'", (uint8_t *)&v26, 0x2Au);
    }
    sub_100C2B678(v10, v7 + 104, v9 + 104);
  }
  else if (v12)
  {
    uint64_t v23 = *(const char **)(a1 + 16);
    uint64_t v22 = a1 + 16;
    uint64_t v21 = v23;
    uint64_t v24 = *(unsigned __int8 *)(v22 + 23);
    BOOL v25 = (v24 & 0x80u) != 0;
    if ((v24 & 0x80u) != 0) {
      uint64_t v24 = *(void *)(v22 + 8);
    }
    if (!v25) {
      uint64_t v21 = (const char *)v22;
    }
    int v26 = 136315650;
    uint64_t v27 = "";
    if (!v24) {
      uint64_t v21 = "<invalid>";
    }
    __int16 v28 = 2080;
    BOOL v29 = "";
    __int16 v30 = 2080;
    long long v31 = v21;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s%s'%s' resolution canceled", (uint8_t *)&v26, 0x20u);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
}

void sub_100C3FC18(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C3FC3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C3FC7C()
{
}

uint64_t sub_100C3FC88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100C3FD20(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100C3FDA4(void *a1)
{
  *a1 = off_101A492C8;
  sub_100C3FD20(a1 + 2);
  return a1;
}

void sub_100C3FDE8(void *a1)
{
  *a1 = off_101A492C8;
  sub_100C3FD20(a1 + 2);

  operator delete();
}

void *sub_100C3FE4C(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t v2 = off_101A492C8;
  v2[1] = v3;
  sub_100C3FC88((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_100C3FEA4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C3FEB8(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_101A492C8;
  a2[1] = v2;
  return sub_100C3FC88((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_100C3FEE8(uint64_t a1)
{
  return sub_100C3FD20((void *)(a1 + 16));
}

void sub_100C3FEF0(void *a1)
{
  sub_100C3FD20(a1 + 2);

  operator delete(a1);
}

void sub_100C3FF2C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4)
{
  int v5 = *a2;
  uint64_t v7 = *a3;
  uint64_t v6 = (std::__shared_weak_count *)a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v9 = *a4;
  uint64_t v8 = (std::__shared_weak_count *)a4[1];
  *a4 = 0;
  a4[1] = 0;
  if (v5) {
    sub_100C2B678(*(void *)(a1 + 8), v7 + 104, v9 + 104);
  }
  uint64_t v10 = *(void *)(a1 + 40);
  if (v10)
  {
    char v11 = v5;
    (*(void (**)(uint64_t, char *, uint64_t, uint64_t))(*(void *)v10 + 48))(v10, &v11, v7 + 104, v9 + 104);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v6)
  {
    sub_10004D2C8(v6);
  }
}

void sub_100C40004(_Unwind_Exception *exception_object)
{
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C40028(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C40068()
{
}

uint64_t *sub_100C40074(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  long long v4 = v1;
  sub_100C2B678(*v1, (uint64_t)(v1 + 1), (uint64_t)(v1 + 4));
  sub_10032C9A0((uint64_t *)&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100C400BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100C400D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(void **)v1;
  if (sub_100C2D174(*(void *)v1, v1 + 8, v1 + 32, 1))
  {
    uint64_t v3 = v2[76];
    long long v4 = *(void **)v3;
    int v5 = *(void **)(v3 + 8);
    if (*(void **)v3 != v5)
    {
      while (!sub_10001D294((unsigned __int8 *)(*v4 + 24), (unsigned __int8 *)(v1 + 32)))
      {
        v4 += 2;
        if (v4 == v5)
        {
          long long v4 = v5;
          break;
        }
      }
      if (v4 != *(void **)(v3 + 8))
      {
        uint64_t v7 = *v4;
        uint64_t v6 = (std::__shared_weak_count *)v4[1];
        if (v6) {
          atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v7)
        {
          uint64_t v8 = v2[5];
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            int v9 = *(_DWORD *)(v7 + 56);
            uint64_t v10 = PersonalityInfo::logPrefix((PersonalityInfo *)v7);
            char v11 = (std::__shared_weak_count *)(v7 + 24);
            uint64_t v12 = *(unsigned __int8 *)(v7 + 47);
            int v13 = (char)v12;
            if ((v12 & 0x80u) != 0) {
              uint64_t v12 = *(void *)(v7 + 32);
            }
            if (v13 < 0) {
              char v11 = *(std::__shared_weak_count **)(v7 + 24);
            }
            *(_DWORD *)std::string buf = 136316162;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&unsigned char buf[12] = 2080;
            if (!v12) {
              char v11 = (std::__shared_weak_count *)"<invalid>";
            }
            *(void *)&buf[14] = "";
            *(_WORD *)&unsigned char buf[22] = 1024;
            int v22 = v9;
            __int16 v23 = 2080;
            *(void *)uint64_t v24 = v10;
            *(_WORD *)&v24[8] = 2080;
            BOOL v25 = v11;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sInforming PersonalWallet for [%d] %s %s is updated", buf, 0x30u);
          }
          if (*(char *)(v1 + 55) < 0)
          {
            sub_10004FC84(__p, *(void **)(v1 + 32), *(void *)(v1 + 40));
          }
          else
          {
            *(_OWORD *)std::string __p = *(_OWORD *)(v1 + 32);
            uint64_t v19 = *(void *)(v1 + 48);
          }
          char v20 = 5;
          if (SHIBYTE(v19) < 0)
          {
            sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
            char v14 = v20;
          }
          else
          {
            *(_OWORD *)std::string buf = *(_OWORD *)__p;
            *(void *)&uint8_t buf[16] = v19;
            char v14 = 5;
          }
          LOBYTE(v22) = v14;
          *(void *)&v24[2] = v7;
          BOOL v25 = v6;
          if (v6) {
            atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100C1AE18(v2, (uint64_t)buf);
          if (v25) {
            sub_10004D2C8(v25);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v19) < 0) {
            operator delete(__p[0]);
          }
        }
        if (v6) {
          sub_10004D2C8(v6);
        }
      }
    }
  }
  sub_10032C9A0(&v17);
  return sub_100046B58((uint64_t *)&v16);
}

void sub_100C40340(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_10032C9A0(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100C403B4()
{
}

void *sub_100C403C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A49348;
  result[1] = v3;
  return result;
}

uint64_t sub_100C40410(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A49348;
  a2[1] = v2;
  return result;
}

uint64_t sub_100C4043C(uint64_t a1, unsigned __int8 *a2, uint64_t a3, uint64_t a4)
{
  int v6 = *a2;
  uint64_t v7 = *(void **)(a1 + 8);
  uint64_t v8 = v7[5];
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v9)
    {
      uint64_t v10 = *(unsigned __int8 *)(a3 + 23);
      BOOL v11 = (v10 & 0x80u) != 0;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(a3 + 8);
      }
      if (v11) {
        uint64_t v12 = *(const char **)a3;
      }
      else {
        uint64_t v12 = (const char *)a3;
      }
      if (v10) {
        int v13 = v12;
      }
      else {
        int v13 = "<invalid>";
      }
      uint64_t v14 = *(unsigned __int8 *)(a4 + 23);
      BOOL v15 = (v14 & 0x80u) != 0;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(a4 + 8);
      }
      if (v15) {
        uint64_t v16 = *(const char **)a4;
      }
      else {
        uint64_t v16 = (const char *)a4;
      }
      if (v14) {
        uint64_t v17 = v16;
      }
      else {
        uint64_t v17 = "<invalid>";
      }
      int v26 = 136315906;
      uint64_t v27 = "";
      __int16 v28 = 2080;
      BOOL v29 = "";
      __int16 v30 = 2080;
      long long v31 = v13;
      __int16 v32 = 2080;
      uint64_t v33 = v17;
      __int16 v18 = "#I %s%s'%s' resolved to '%s'";
      uint64_t v19 = v8;
      uint32_t v20 = 42;
LABEL_30:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, (uint8_t *)&v26, v20);
    }
  }
  else if (v9)
  {
    uint64_t v21 = *(unsigned __int8 *)(a3 + 23);
    BOOL v22 = (v21 & 0x80u) != 0;
    if ((v21 & 0x80u) != 0) {
      uint64_t v21 = *(void *)(a3 + 8);
    }
    if (v22) {
      __int16 v23 = *(const char **)a3;
    }
    else {
      __int16 v23 = (const char *)a3;
    }
    if (v21) {
      uint64_t v24 = v23;
    }
    else {
      uint64_t v24 = "<invalid>";
    }
    int v26 = 136315650;
    uint64_t v27 = "";
    __int16 v28 = 2080;
    BOOL v29 = "";
    __int16 v30 = 2080;
    long long v31 = v24;
    __int16 v18 = "#I %s%s'%s' resolution canceled";
    uint64_t v19 = v8;
    uint32_t v20 = 32;
    goto LABEL_30;
  }
  return sub_100C1ED64(v7);
}

uint64_t sub_100C405E8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C40628()
{
}

uint64_t sub_100C40634(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  int v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      BOOL v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          BOOL v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_8:
        if (v6) {
          uint64_t v12 = v7;
        }
        else {
          uint64_t v12 = v3;
        }
        if (v6) {
          int v13 = v7 + 1;
        }
        else {
          int v13 = v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        int v13 = v3;
        uint64_t v12 = v3;
        if (v6)
        {
          uint64_t v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              uint64_t v12 = (uint64_t **)v14;
              int v15 = *((_DWORD *)v14 + 8);
              if (v15 <= v11) {
                break;
              }
              uint64_t v14 = *v12;
              int v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v11) {
              goto LABEL_25;
            }
            uint64_t v14 = v12[1];
            if (!v14)
            {
              int v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      v20[2] = 1;
      uint64_t v16 = operator new(0x30uLL);
      v20[1] = v3;
      *((_DWORD *)v16 + 8) = *((_DWORD *)v5 + 8);
      sub_100083DA4((const void **)v16 + 5, (const void **)v5 + 5);
      sub_100046C38((uint64_t **)a1, (uint64_t)v12, v13, (uint64_t *)v16);
      v20[0] = 0;
      sub_1008E94B8((uint64_t)v20, 0);
LABEL_25:
      uint64_t v17 = (void *)v5[1];
      if (v17)
      {
        do
        {
          __int16 v18 = v17;
          uint64_t v17 = (void *)*v17;
        }
        while (v17);
      }
      else
      {
        do
        {
          __int16 v18 = (void *)v5[2];
          BOOL v10 = *v18 == (void)v5;
          int v5 = v18;
        }
        while (!v10);
      }
      int v5 = v18;
    }
    while (v18 != v4);
  }
  return a1;
}

void sub_100C407D4(_Unwind_Exception *a1)
{
  sub_100706DDC(v1, v2);
  _Unwind_Resume(a1);
}

void sub_100C407EC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A493D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C4080C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A493D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C40860(uint64_t a1)
{
}

void sub_100C4086C(void *a1)
{
  if (a1)
  {
    sub_100C4086C(*a1);
    sub_100C4086C(a1[1]);
    sub_10016B57C((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100C408C0(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10016B57C((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *sub_100C40918(void **a1)
{
  uint64_t v1 = *a1;
  long long v4 = a1;
  int v5 = v1;
  (*(void (**)(void *__return_ptr))(**(void **)(*v1 + 1096) + 72))(v6);
  uint64_t v2 = v1[7];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v6);
  uint64_t v7 = (void **)v6;
  sub_100084178(&v7);
  sub_100C40A08((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100C409D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100C40A08(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100C31D80((void *)(v1 + 32));
    uint64_t v2 = (void **)(v1 + 8);
    sub_100155410(&v2);
    operator delete();
  }
  return result;
}

const void **sub_100C40A70@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  *a2 = 0;
  a2[1] = 0;
  uint64_t v4 = *(void *)v3;
  CFStringRef theString1 = 0;
  (*(void (**)(CFTypeRef *__return_ptr))(**(void **)(v4 + 120) + 24))(&cf);
  CFTypeRef v13 = cf;
  if (cf) {
    CFRetain(cf);
  }
  CFStringRef v12 = 0;
  *(void *)&long long v9 = 0;
  sub_100056248(&v9, &v13);
  if ((void)v9) {
    int v5 = sub_1000810B8;
  }
  else {
    int v5 = 0;
  }
  if (v5) {
    sub_100083EB8((const void **)&v12, (const void **)&v9);
  }
  sub_1000558F4((const void **)&v9);
  CFStringRef v6 = v12;
  CFStringRef theString1 = v12;
  CFStringRef v12 = 0;
  sub_1000558F4((const void **)&v12);
  sub_1000577C4(&v13);
  sub_1000577C4(&cf);
  if (v6) {
    uint64_t v7 = sub_1000810B8;
  }
  else {
    uint64_t v7 = 0;
  }
  if (v7)
  {
    if (CFEqual(v6, @"cloud"))
    {
      sub_100C1387C(&v9, v4, *(const std::string **)(v3 + 8), 1);
      goto LABEL_16;
    }
    if (CFEqual(theString1, @"sim"))
    {
      sub_100C13144(&v9, v4, *(void *)(v3 + 8), 0, 1);
LABEL_16:
      *(_OWORD *)a2 = v9;
    }
  }
  return sub_1000558F4((const void **)&theString1);
}

void sub_100C40BF8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100C40C38(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v5 + 1));
  }
}

void sub_100C40CA0(uint64_t a1)
{
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(void *)(a1 + 32);
  long long v3 = v5;
  long long v5 = 0uLL;
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  *(_OWORD *)uint64_t v2 = v3;
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (*((void *)&v5 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v5 + 1));
  }
}

uint64_t *sub_100C40D08(void **a1)
{
  uint64_t v1 = *a1;
  int v11 = a1;
  CFStringRef v12 = v1;
  uint64_t v4 = *v1;
  uint64_t v2 = (void **)(v1 + 1);
  uint64_t v3 = v4;
  long long v5 = (uint64_t **)(v4 + 832);
  CFStringRef v6 = sub_100046F68(v4 + 832, v2);
  if ((void **)(v4 + 840) != v6)
  {
    uint64_t v7 = operator new(8uLL);
    std::string __p = v7;
    *uint64_t v7 = @"unique-sim-label-store";
    uint64_t v14 = v7 + 1;
    int v15 = v7 + 1;
    long long v9 = (const __CFString **)(v6 + 13);
    if (*((char *)v6 + 127) < 0) {
      long long v9 = (const __CFString **)*v9;
    }
    sub_100083980(*(os_unfair_lock_s **)(v3 + 104), v9, (char **)&__p, 0, v8);
    sub_1000F5B04(v5, (uint64_t *)v6);
    sub_10023A6CC((uint64_t)(v6 + 4));
    operator delete(v6);
    sub_100C1E074(v3, "historical personality removed", 0);
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
  }
  (*(void (**)(void, void **))(**(void **)(v3 + 120) + 112))(*(void *)(v3 + 120), v2);
  sub_1001102C4((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_100C40E24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1001102C4(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C40E58(void *a1)
{
  uint64_t v14 = a1;
  uint64_t v1 = *a1;
  __int16 v18 = 0;
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  (*(void (**)(void ***__return_ptr))(**(void **)(v1 + 120) + 80))(&v18);
  uint64_t v2 = v18;
  for (uint64_t i = v19; v2 != i; v2 += 3)
  {
    CFStringRef theString1 = 0;
    (*(void (**)(void ***__return_ptr))(**(void **)(v1 + 120) + 24))(&v21);
    sub_100056248(&theString1, (CFTypeRef *)&v21);
    sub_1000577C4((const void **)&v21);
    if (theString1) {
      uint64_t v4 = sub_1000810B8;
    }
    else {
      uint64_t v4 = 0;
    }
    if (v4 && CFEqual(theString1, @"sim"))
    {
      if ((void **)(v1 + 840) == sub_100046F68(v1 + 832, v2))
      {
        (*(void (**)(void, void **))(**(void **)(v1 + 120) + 112))(*(void *)(v1 + 120), v2);
      }
      else
      {
        CFDictionaryRef theDict = 0;
        CFMutableDictionaryRef v16 = 0;
        (*(void (**)(void ***__return_ptr))(**(void **)(v1 + 120) + 24))(&v21);
        sub_10004EFE4(&theDict, (CFTypeRef *)&v21);
        sub_1000577C4((const void **)&v21);
        if (theDict) {
          long long v5 = sub_100080778;
        }
        else {
          long long v5 = 0;
        }
        if (v5)
        {
          CFMutableArrayRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            uint64_t v7 = (void **)v16;
            CFMutableDictionaryRef v16 = Mutable;
            uint64_t v21 = v7;
            sub_10005717C((const void **)&v21);
          }
          CFStringRef Value = CFDictionaryGetValue(theDict, @"type");
          if (Value) {
            CFDictionarySetValue(v16, @"type", Value);
          }
          long long v9 = CFDictionaryGetValue(theDict, @"label-id");
          if (v9) {
            CFDictionarySetValue(v16, @"label-id", v9);
          }
          BOOL v10 = CFDictionaryGetValue(theDict, @"mdn");
          if (v10) {
            CFDictionarySetValue(v16, @"mdn", v10);
          }
          int v11 = CFDictionaryGetValue(theDict, @"esim");
          if (v11) {
            CFDictionarySetValue(v16, @"esim", v11);
          }
        }
        sub_100057D78((const void **)&theDict);
        (*(void (**)(void, void **))(**(void **)(v1 + 120) + 112))(*(void *)(v1 + 120), v2);
        if (v16) {
          CFStringRef v12 = sub_1000C06D0;
        }
        else {
          CFStringRef v12 = 0;
        }
        if (v12)
        {
          (*(void (**)(void, void **))(**(void **)(v1 + 120) + 88))(*(void *)(v1 + 120), v2);
          (*(void (**)(void, void **, const __CFString *, CFMutableDictionaryRef, void, void, void, void))(**(void **)(v1 + 120) + 16))(*(void *)(v1 + 120), v2, @"info", v16, 0, 0, 0, 0);
        }
        sub_10005717C((const void **)&v16);
      }
    }
    sub_1000558F4((const void **)&theString1);
  }
  sub_1000832B0(*(os_unfair_lock_s **)(v1 + 104), @"AdandonedSims", 0, 0, 0);
  uint64_t v21 = (void **)&v18;
  sub_100047F64(&v21);
  return sub_1003C2130((uint64_t *)&v14);
}

void sub_100C41238(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_100047F64(&a16);
  sub_1003C2130(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C412C4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v11 = *(void *)(v1 + 24);
    *(_OWORD *)std::string __p = v3;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 560));
  if ((void **)(v2 + 576) == sub_100046F68(v2 + 568, __p))
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      long long v5 = (void *)HIBYTE(v11);
      if (v11 < 0) {
        long long v5 = __p[1];
      }
      CFStringRef v6 = __p;
      if (v11 < 0) {
        CFStringRef v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      CFTypeRef v13 = "";
      if (!v5) {
        CFStringRef v6 = (void **)"<invalid>";
      }
      __int16 v14 = 2080;
      int v15 = "";
      __int16 v16 = 2080;
      uint64_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sMarked SIM %s as abandoned", buf, 0x20u);
    }
    sub_100C36978((uint64_t **)(v2 + 568), __p, (uint64_t)__p);
    sub_100C14634(v2, (void *)(v2 + 568), @"AdandonedSims", (uint64_t)"adandoned-sims-list");
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 560));
    sub_100C152CC(v2);
    sub_100C2BC4C(v2, (uint64_t)__p);
  }
  else
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 560));
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  sub_1001102C4(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100C41484(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t *sub_100C414CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFAllocatorRef v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v11 = 0;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v11 = *(void *)(v1 + 24);
    *(_OWORD *)std::string __p = v3;
  }
  os_unfair_lock_lock((os_unfair_lock_t)(v2 + 560));
  if ((void **)(v2 + 576) == sub_100046F68(v2 + 568, __p))
  {
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 560));
  }
  else
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      long long v5 = (void *)HIBYTE(v11);
      if (v11 < 0) {
        long long v5 = __p[1];
      }
      CFStringRef v6 = __p;
      if (v11 < 0) {
        CFStringRef v6 = (void **)__p[0];
      }
      *(_DWORD *)std::string buf = 136315650;
      CFTypeRef v13 = "";
      if (!v5) {
        CFStringRef v6 = (void **)"<invalid>";
      }
      __int16 v14 = 2080;
      int v15 = "";
      __int16 v16 = 2080;
      uint64_t v17 = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sUnMarked SIM %s as abandoned", buf, 0x20u);
    }
    sub_1000E9358((uint64_t **)(v2 + 568), __p);
    sub_100C14634(v2, (void *)(v2 + 568), @"AdandonedSims", (uint64_t)"adandoned-sims-list");
    os_unfair_lock_unlock((os_unfair_lock_t)(v2 + 560));
    sub_100C152CC(v2);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  sub_1001102C4(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100C4167C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_100C416C4(uint64_t a1, uint64_t a2)
{
  long long v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    long long v3 = (void *)(a1 + 24);
  }
  *long long v3 = 0;
  return a1;
}

uint64_t *sub_100C41744(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v73 = a1;
  uint64_t v74 = v1;
  uint64_t v2 = *(void **)v1;
  CFStringRef theString1 = 0;
  long long v3 = (const void **)(v1 + 40);
  if (*(void *)(v1 + 40)) {
    uint64_t v4 = sub_1000810B8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)std::string __p = 0u;
    uint64_t v80 = 0;
    long long v5 = (void *)v2[104];
    CFStringRef v6 = v2 + 105;
    if (v5 != v2 + 105)
    {
      if (v80 >= 0) {
        uint64_t v7 = (void *)HIBYTE(v80);
      }
      else {
        uint64_t v7 = __p[1];
      }
      do
      {
        uint64_t v8 = *((unsigned __int8 *)v5 + 127);
        if ((v8 & 0x80u) == 0) {
          uint64_t v9 = (void *)*((unsigned __int8 *)v5 + 127);
        }
        else {
          uint64_t v9 = (void *)v5[14];
        }
        if (v9 == v7)
        {
          BOOL v10 = (const void **)(v5 + 13);
          if ((v8 & 0x80) != 0)
          {
            if (!memcmp(*v10, __p, v5[14]))
            {
LABEL_48:
              sub_100083EB8((const void **)&theString1, (const void **)(v1 + 40));
              long long v31 = v2[5];
              if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
              {
                CFStringRef v32 = (const __CFString *)*v3;
                *(_DWORD *)std::string buf = 136315650;
                *(void *)&uint8_t buf[4] = "";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = "";
                *(_WORD *)&unsigned char buf[22] = 2114;
                CFStringRef v88 = v32;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s%slabel %{public}@ exists, nothing to resolve", buf, 0x20u);
              }
              goto LABEL_50;
            }
          }
          else
          {
            if (!*((unsigned char *)v5 + 127)) {
              goto LABEL_48;
            }
            uint64_t v11 = __p;
            while (*(unsigned __int8 *)v10 == *(unsigned __int8 *)v11)
            {
              BOOL v10 = (const void **)((char *)v10 + 1);
              uint64_t v11 = (void **)((char *)v11 + 1);
              if (!--v8) {
                goto LABEL_48;
              }
            }
          }
        }
        CFStringRef v12 = (void *)v5[1];
        if (v12)
        {
          do
          {
            CFTypeRef v13 = v12;
            CFStringRef v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          do
          {
            CFTypeRef v13 = (void *)v5[2];
            BOOL v14 = *v13 == (void)v5;
            long long v5 = v13;
          }
          while (!v14);
        }
        long long v5 = v13;
      }
      while (v13 != v6);
    }
    CFDictionaryRef theDict = 0;
    sub_100080780(@"label-remap-history", kDevicePersistentStoreDataArchive, 0, (const void **)buf);
    sub_10004EFE4(&theDict, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (theDict) {
      int v15 = sub_100080778;
    }
    else {
      int v15 = 0;
    }
    if (v15)
    {
      CFDictionaryRef v16 = 0;
      uint64_t v17 = 0;
      do
      {
        CFDictionaryRef v18 = v16;
        if (!v17) {
          uint64_t v17 = *v3;
        }
        CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, v17);
        CFDictionaryRef v16 = Value;
        if (!Value) {
          break;
        }
        CFTypeID v20 = CFGetTypeID(Value);
        if (v20 != CFDictionaryGetTypeID()) {
          break;
        }
        uint64_t v21 = CFDictionaryGetValue(v16, @"to");
        uint64_t v17 = v21;
        if (!v21) {
          break;
        }
        CFTypeID v22 = CFGetTypeID(v21);
      }
      while (v22 == CFStringGetTypeID());
      if (v18)
      {
        CFStringRef v23 = (const __CFString *)CFDictionaryGetValue(v18, @"to");
        CFStringRef v24 = v23;
        if (v23)
        {
          CFTypeID v25 = CFGetTypeID(v23);
          if (v25 != CFStringGetTypeID()) {
            CFStringRef v24 = 0;
          }
        }
        int v26 = CFDictionaryGetValue(v18, @"action");
        uint64_t v27 = (uint64_t)v26;
        if (v26)
        {
          CFTypeID v28 = CFGetTypeID(v26);
          if (v28 == CFStringGetTypeID()) {
            uint64_t v29 = v27;
          }
          else {
            uint64_t v29 = 0;
          }
          uint64_t v72 = v29;
        }
        else
        {
          uint64_t v72 = 0;
        }
        long long v46 = (uint64_t *)CFDictionaryGetValue(v18, @"ts");
        uint64_t v47 = v46;
        if (v46)
        {
          CFTypeID v48 = CFGetTypeID(v46);
          if (v48 == CFNumberGetTypeID()) {
            long long v49 = v47;
          }
          else {
            long long v49 = 0;
          }
          uint64_t v71 = v49;
        }
        else
        {
          uint64_t v71 = 0;
        }
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v84 = *(void *)&buf[16];
        *(_OWORD *)uint64_t v83 = *(_OWORD *)buf;
        unint64_t v50 = (void *)v2[104];
        uint64_t v51 = HIBYTE(*(void *)&buf[16]);
        if (v50 != v6)
        {
          if ((buf[23] & 0x80u) == 0) {
            uint64_t v52 = (void *)HIBYTE(*(void *)&buf[16]);
          }
          else {
            uint64_t v52 = v83[1];
          }
          if ((buf[23] & 0x80u) == 0) {
            uint64_t v53 = v83;
          }
          else {
            uint64_t v53 = (void **)v83[0];
          }
          do
          {
            uint64_t v54 = *((unsigned __int8 *)v50 + 127);
            if ((v54 & 0x80u) == 0) {
              uint64_t v55 = (void *)*((unsigned __int8 *)v50 + 127);
            }
            else {
              uint64_t v55 = (void *)v50[14];
            }
            if (v55 == v52)
            {
              uint64_t v56 = (const void **)(v50 + 13);
              if ((v54 & 0x80) != 0)
              {
                if (!memcmp(*v56, v53, v50[14]))
                {
LABEL_110:
                  int v60 = 1;
                  if ((v51 & 0x80) != 0) {
                    goto LABEL_111;
                  }
                  goto LABEL_112;
                }
              }
              else
              {
                if (!*((unsigned char *)v50 + 127)) {
                  goto LABEL_110;
                }
                uint64_t v57 = v53;
                while (*(unsigned __int8 *)v56 == *(unsigned __int8 *)v57)
                {
                  uint64_t v56 = (const void **)((char *)v56 + 1);
                  uint64_t v57 = (void **)((char *)v57 + 1);
                  if (!--v54) {
                    goto LABEL_110;
                  }
                }
              }
            }
            long long v58 = (void *)v50[1];
            if (v58)
            {
              do
              {
                uint64_t v59 = v58;
                long long v58 = (void *)*v58;
              }
              while (v58);
            }
            else
            {
              do
              {
                uint64_t v59 = (void *)v50[2];
                BOOL v14 = *v59 == (void)v50;
                unint64_t v50 = v59;
              }
              while (!v14);
            }
            unint64_t v50 = v59;
          }
          while (v59 != v6);
        }
        int v60 = 0;
        if ((v51 & 0x80) != 0) {
LABEL_111:
        }
          operator delete(v83[0]);
LABEL_112:
        int64x2_t v61 = v2[5];
        BOOL v62 = os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT);
        if (v60)
        {
          if (v62)
          {
            CFStringRef v64 = (const __CFString *)*v3;
            v83[0] = 0;
            ctu::cf::assign((ctu::cf *)v83, v71, v63);
            *(_DWORD *)std::string buf = 136316418;
            *(void *)&uint8_t buf[4] = "";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = "";
            *(_WORD *)&unsigned char buf[22] = 2114;
            CFStringRef v88 = v64;
            __int16 v89 = 2114;
            CFStringRef v90 = v24;
            __int16 v91 = 2114;
            uint64_t v92 = v72;
            __int16 v93 = 2048;
            long long v94 = v83[0];
            _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#I %s%sfound evolved %{public}@ -> %{public}@ [%{public}@, %ld]", buf, 0x3Eu);
          }
          *(void *)std::string buf = v24;
          sub_100013168((const void **)&theString1, (CFTypeRef *)buf);
LABEL_141:
          sub_100057D78((const void **)&theDict);
          if (v80 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_50;
        }
        if (v62)
        {
          CFStringRef v65 = (const __CFString *)*v3;
          if (v71)
          {
            v83[0] = 0;
            ctu::cf::assign((ctu::cf *)v83, v71, v63);
            uint64_t v66 = v83[0];
          }
          else
          {
            uint64_t v66 = 0;
          }
          *(_DWORD *)std::string buf = 136316418;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2114;
          CFStringRef v88 = v65;
          __int16 v89 = 2114;
          CFStringRef v90 = v24;
          __int16 v91 = 2114;
          uint64_t v92 = v72;
          __int16 v93 = 2048;
          long long v94 = v66;
          _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#W %s%sfound evolved %{public}@ -> but MISSING %{public}@ [%{public}@, %ld] - ignored", buf, 0x3Eu);
        }
      }
    }
    if (v2[106] == 1)
    {
      uint64_t v67 = v2[104];
      if (*(char *)(v67 + 127) < 0)
      {
        sub_10004FC84(__dst, *(void **)(v67 + 104), *(void *)(v67 + 112));
      }
      else
      {
        *(_OWORD *)long long __dst = *(_OWORD *)(v67 + 104);
        uint64_t v76 = *(void *)(v67 + 120);
      }
      if (SHIBYTE(v76) < 0)
      {
        sub_10004FC84(v83, __dst[0], (unint64_t)__dst[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v83 = *(_OWORD *)__dst;
        uint64_t v84 = v76;
      }
      CFStringRef v82 = 0;
      if (SHIBYTE(v84) < 0)
      {
        sub_10004FC84(buf, v83[0], (unint64_t)v83[1]);
      }
      else
      {
        *(_OWORD *)std::string buf = *(_OWORD *)v83;
        *(void *)&uint8_t buf[16] = v84;
      }
      CFStringRef v85 = 0;
      if (ctu::cf::convert_copy())
      {
        CFStringRef v68 = v82;
        CFStringRef v82 = v85;
        CFStringRef v86 = v68;
        sub_1000558F4((const void **)&v86);
      }
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      CFStringRef v77 = v82;
      CFStringRef v82 = 0;
      sub_1000558F4((const void **)&v82);
      if (SHIBYTE(v84) < 0) {
        operator delete(v83[0]);
      }
      *(void *)std::string buf = theString1;
      CFStringRef theString1 = v77;
      CFStringRef v77 = 0;
      sub_1000558F4((const void **)buf);
      sub_1000558F4((const void **)&v77);
      if (SHIBYTE(v76) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v69 = v2[5];
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v70 = (const __CFString *)*v3;
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2114;
        CFStringRef v88 = theString1;
        __int16 v89 = 2114;
        CFStringRef v90 = v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I %s%sgiving out the ONLY existing label %{public}@ as a replacement for unknown %{public}@", buf, 0x2Au);
      }
    }
    goto LABEL_141;
  }
  __int16 v30 = v2[5];
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#W %s%sgetEvolvedLabelID called with empty parameter", buf, 0x16u);
  }
LABEL_50:
  uint64_t v33 = v2[5];
  BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
  CFStringRef v35 = theString1;
  if (v34)
  {
    CFStringRef v36 = (const __CFString *)*v3;
    *(_DWORD *)std::string buf = 136315906;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 2114;
    CFStringRef v88 = v36;
    __int16 v89 = 2114;
    CFStringRef v90 = theString1;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I %s%sgetEvolvedLabelID, %{public}@ -> %{public}@", buf, 0x2Au);
    CFStringRef v35 = theString1;
  }
  sub_100C423A4(v1 + 8, (uint64_t)v35);
  if (theString1) {
    char v37 = sub_1000810B8;
  }
  else {
    char v37 = 0;
  }
  if (v37 && CFStringCompare(theString1, (CFStringRef)*v3, 0))
  {
    if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B102B0, memory_order_acquire) & 1) == 0
      && __cxa_guard_acquire(&qword_101B102B0))
    {
      qword_101B102A8 = 0;
      __cxa_atexit((void (*)(void *))sub_100C2A55C, &qword_101B102A8, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101B102B0);
    }
    if (qword_101B102A8) {
      uint64_t v38 = sub_1000C06D0;
    }
    else {
      uint64_t v38 = 0;
    }
    if (!v38 || !CFDictionaryContainsKey((CFDictionaryRef)qword_101B102A8, *v3))
    {
      uint64_t v39 = v2[5];
      if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
      {
        CFStringRef v40 = (const __CFString *)*v3;
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        *(_WORD *)&unsigned char buf[22] = 2114;
        CFStringRef v88 = v40;
        __int16 v89 = 2114;
        CFStringRef v90 = theString1;
        _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s%sgetEvolvedLabelID, execute ReMap %{public}@ -> %{public}@", buf, 0x2Au);
      }
      uint64_t v41 = v2[137];
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      *(_OWORD *)uint64_t v83 = *(_OWORD *)buf;
      uint64_t v84 = *(void *)&buf[16];
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v80 = *(void *)&buf[16];
      (*(void (**)(uint64_t, void **, void **))(*(void *)v41 + 24))(v41, v83, __p);
      if (SHIBYTE(v80) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v84) < 0) {
        operator delete(v83[0]);
      }
      uint64_t v42 = (__CFDictionary *)qword_101B102A8;
      if (qword_101B102A8) {
        long long v43 = sub_1000C06D0;
      }
      else {
        long long v43 = 0;
      }
      if (!v43)
      {
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        uint64_t v42 = (__CFDictionary *)qword_101B102A8;
        if (Mutable)
        {
          qword_101B102A8 = (uint64_t)Mutable;
          *(void *)std::string buf = v42;
          sub_10005717C((const void **)buf);
          uint64_t v42 = (__CFDictionary *)qword_101B102A8;
        }
      }
      CFDictionarySetValue(v42, *v3, theString1);
    }
  }
  sub_1000558F4((const void **)&theString1);
  sub_100C4234C(&v74);
  return sub_100046B58((uint64_t *)&v73);
}

void sub_100C42218(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,const void *a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,const void *a29,__int16 a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a27 < 0) {
    operator delete(a22);
  }
  sub_1000558F4(&a29);
  sub_100C4234C(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C4234C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_1000558F4((const void **)(v1 + 40));
    sub_1007F0208((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100C423A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100C423F8()
{
  sub_100058DB0(&xmmword_101B102B8, "00000000-0000-0000-0000-000000000000");
  __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101B102B8, (void *)&_mh_execute_header);
  sub_100058DB0(&xmmword_101B102D0, "10101010-1010-1010-1010-101010101010");

  return __cxa_atexit((void (*)(void *))&std::string::~string, &xmmword_101B102D0, (void *)&_mh_execute_header);
}

void sub_100C4248C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100C424F8()
{
}

void *sub_100C4251C(void *a1, void *a2)
{
  uint64_t v4 = (ctu::OsLogLogger *)(a1 + 1);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "reg.fallback");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v8, &v7);
  ctu::OsLogLogger::OsLogLogger(v4, (const ctu::OsLogLogger *)v8);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v8);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  a1[2] = 0;
  a1[3] = 0;
  *a1 = off_101A49488;
  a1[4] = *a2;
  uint64_t v5 = a2[1];
  a1[5] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  a1[6] = 0;
  a1[10] = 0;
  return a1;
}

void sub_100C42600(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  RegistrationTcpFallbackInterface::~RegistrationTcpFallbackInterface(v2);
  _Unwind_Resume(a1);
}

void sub_100C42634(void *a1, uint64_t a2, uint64_t a3)
{
  sub_10033A644(a1 + 7, a3);
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (!v4 || (uint64_t v5 = std::__shared_weak_count::lock(v4)) == 0) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  p_shared_weak_owners = &v5->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v5);
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  a1[6] = tcp_connection_fallback_watcher_create();
  std::__shared_weak_count::__release_weak(v6);
  std::__shared_weak_count::__release_weak(v6);
}

void sub_100C42720(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_100C42740(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        char v6 = tcp_fallback_watcher_fallback_inuse();
        if (*(void *)(v3 + 80))
        {
          sub_1000607A8(v3 + 56, v6);
        }
        else
        {
          OsLogContext v7 = *(NSObject **)(v3 + 8);
          if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)uint64_t v8 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Missing callback!", v8, 2u);
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100C427F8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4280C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C42828(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_100C42838(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 48);
  if (result)
  {
    uint64_t result = tcp_connection_fallback_watcher_destroy();
    *(void *)(a1 + 48) = 0;
  }
  return result;
}

void sub_100C42868(void *a1)
{
  *a1 = off_101A49488;
  sub_100060644(a1 + 7);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));

  RegistrationTcpFallbackInterface::~RegistrationTcpFallbackInterface((RegistrationTcpFallbackInterface *)a1);
}

void sub_100C428DC(void *a1)
{
  *a1 = off_101A49488;
  sub_100060644(a1 + 7);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));
  RegistrationTcpFallbackInterface::~RegistrationTcpFallbackInterface((RegistrationTcpFallbackInterface *)a1);

  operator delete();
}

void sub_100C42964(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100C429E4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C42A20(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C42A58(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100C42A88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100C42ACC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  OsLogContext v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = subscriber::asString();
    __int16 v72 = 2080;
    *(void *)uint64_t v73 = asString();
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: tethering status: context=%s, conn=%s", buf, 0x20u);
    OsLogContext v7 = *(NSObject **)(a1 + 40);
  }
  int v8 = *(unsigned __int8 *)(a4 + 1);
  BOOL v9 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v8)
  {
    if (!v9) {
      goto LABEL_9;
    }
    uint64_t v10 = asStringBool(*(unsigned char *)a4);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = v10;
    uint64_t v11 = "#I %s: tethering status: carrierEnabled=%s";
    CFStringRef v12 = v7;
    uint32_t v13 = 22;
  }
  else
  {
    if (!v9) {
      goto LABEL_9;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    uint64_t v11 = "#I %s: tethering status: carrierEnabled=null";
    CFStringRef v12 = v7;
    uint32_t v13 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
LABEL_9:
  int v14 = *(unsigned __int8 *)(a4 + 3);
  int v15 = *(NSObject **)(a1 + 40);
  BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
  if (v14)
  {
    if (!v16) {
      goto LABEL_15;
    }
    uint64_t v17 = asStringBool(*(unsigned char *)(a4 + 2));
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = v17;
    CFDictionaryRef v18 = "#I %s: tethering status: userAuthenticated=%s";
    uint64_t v19 = v15;
    uint32_t v20 = 22;
  }
  else
  {
    if (!v16) {
      goto LABEL_15;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    CFDictionaryRef v18 = "#I %s: tethering status: userAuthenticated=null";
    uint64_t v19 = v15;
    uint32_t v20 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
LABEL_15:
  int v21 = *(unsigned __int8 *)(a4 + 12);
  CFTypeID v22 = *(NSObject **)(a1 + 40);
  BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  if (v21)
  {
    if (!v23) {
      goto LABEL_21;
    }
    int v24 = *(_DWORD *)(a4 + 8);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v69 = a3;
    __int16 v70 = 1024;
    LODWORD(v71) = v24;
    CFTypeID v25 = "#I %s: tethering status: misPdpMaxHosts=%u";
    int v26 = v22;
    uint32_t v27 = 18;
  }
  else
  {
    if (!v23) {
      goto LABEL_21;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    CFTypeID v25 = "#I %s: tethering status: misPdpMaxHosts=null";
    int v26 = v22;
    uint32_t v27 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, v25, buf, v27);
LABEL_21:
  int v28 = *(unsigned __int8 *)(a4 + 5);
  uint64_t v29 = *(NSObject **)(a1 + 40);
  BOOL v30 = os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT);
  if (v28)
  {
    if (!v30) {
      goto LABEL_27;
    }
    uint64_t v31 = asStringBool(*(unsigned char *)(a4 + 4));
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = v31;
    CFStringRef v32 = "#I %s: tethering status: asserted=%s";
    uint64_t v33 = v29;
    uint32_t v34 = 22;
  }
  else
  {
    if (!v30) {
      goto LABEL_27;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    CFStringRef v32 = "#I %s: tethering status: asserted=null";
    uint64_t v33 = v29;
    uint32_t v34 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, v32, buf, v34);
LABEL_27:
  int v35 = *(unsigned __int8 *)(a4 + 7);
  CFStringRef v36 = *(NSObject **)(a1 + 40);
  BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
  if (v35)
  {
    if (!v37) {
      goto LABEL_33;
    }
    uint64_t v38 = asStringBool(*(unsigned char *)(a4 + 6));
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = v38;
    uint64_t v39 = "#I %s: tethering status: activationFailure=%s";
    CFStringRef v40 = v36;
    uint32_t v41 = 22;
  }
  else
  {
    if (!v37) {
      goto LABEL_33;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    uint64_t v39 = "#I %s: tethering status: activationFailure=null";
    CFStringRef v40 = v36;
    uint32_t v41 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, v39, buf, v41);
LABEL_33:
  int v42 = *(unsigned __int8 *)(a4 + 24);
  long long v43 = *(NSObject **)(a1 + 40);
  BOOL v44 = os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT);
  if (v42)
  {
    if (!v44) {
      goto LABEL_40;
    }
    uint64_t v45 = asStringBool(*(unsigned char *)(a4 + 16));
    if (!*(unsigned char *)(a4 + 24)) {
      sub_10016C840();
    }
    uint64_t v46 = v45;
    uint64_t v47 = asString();
    *(_DWORD *)std::string buf = 136315650;
    uint64_t v69 = a3;
    __int16 v70 = 2080;
    uint64_t v71 = v46;
    __int16 v72 = 2080;
    *(void *)uint64_t v73 = v47;
    CFTypeID v48 = "#I %s: tethering status: connectionAvailabilityStatus=%s, csiError=%s";
    long long v49 = v43;
    uint32_t v50 = 32;
  }
  else
  {
    if (!v44) {
      goto LABEL_40;
    }
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    CFTypeID v48 = "#I %s: tethering status: connectionAvailabilityStatus=null";
    long long v49 = v43;
    uint32_t v50 = 12;
  }
  _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, v48, buf, v50);
LABEL_40:
  int v51 = *(unsigned __int8 *)(a4 + 184);
  uint64_t v52 = *(NSObject **)(a1 + 40);
  BOOL v53 = os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT);
  if (v51)
  {
    if (v53)
    {
      uint64_t v65 = asString();
      if (!*(unsigned char *)(a4 + 184)) {
        sub_10016C840();
      }
      int v54 = *(_DWORD *)(a4 + 32);
      uint64_t v55 = asString();
      if (!*(unsigned char *)(a4 + 184)) {
        sub_10016C840();
      }
      uint64_t v56 = v55;
      uint64_t v57 = asStringBool(*(unsigned char *)(a4 + 44));
      if (!*(unsigned char *)(a4 + 184)) {
        sub_10016C840();
      }
      uint64_t v58 = v57;
      uint64_t v59 = asString();
      if (!*(unsigned char *)(a4 + 184)) {
        sub_10016C840();
      }
      uint64_t v60 = v59;
      if (*(char *)(a4 + 79) >= 0) {
        uint64_t v61 = a4 + 56;
      }
      else {
        uint64_t v61 = *(void *)(a4 + 56);
      }
      if (*(char *)(a4 + 103) >= 0) {
        uint64_t v62 = a4 + 80;
      }
      else {
        uint64_t v62 = *(void *)(a4 + 80);
      }
      CFNumberRef v63 = __p;
      WirelessTechnologyList::asString((uint64_t *)__p, (WirelessTechnologyList *)(a4 + 104));
      if (v67 < 0) {
        CFNumberRef v63 = (void **)__p[0];
      }
      if (!*(unsigned char *)(a4 + 184)) {
        sub_10016C840();
      }
      uint64_t v64 = asStringBool(*(unsigned char *)(a4 + 108));
      *(_DWORD *)std::string buf = 136317442;
      uint64_t v69 = a3;
      __int16 v70 = 2080;
      uint64_t v71 = v65;
      __int16 v72 = 1024;
      *(_DWORD *)uint64_t v73 = v54;
      *(_WORD *)&v73[4] = 2080;
      *(void *)&v73[6] = v56;
      __int16 v74 = 2080;
      uint64_t v75 = v58;
      __int16 v76 = 2080;
      uint64_t v77 = v60;
      __int16 v78 = 2082;
      uint64_t v79 = v61;
      __int16 v80 = 2082;
      uint64_t v81 = v62;
      __int16 v82 = 2082;
      uint64_t v83 = v63;
      __int16 v84 = 2080;
      uint64_t v85 = v64;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s: tethering status: connectionStatus=%s, pdp=%d, ipFamily=%s, suspended=%s, contextType=%s, interfaceName=%{public}s, apnName=%{public}s, wirelessTechnologyMask=%{public}s, publicNetAllowed=%s", buf, 0x62u);
      if (v67 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  else if (v53)
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v69 = a3;
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s: tethering status: connectionStatus=null", buf, 0xCu);
  }
}

void sub_100C4314C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DataServiceController::pingTethering(Registry **this@<X0>, uint64_t *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, this[13]);
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v4;
  int v8 = sub_10004D37C(&v3[1].__m_.__sig, &v12);
  if (v8)
  {
    uint64_t v10 = v8[3];
    BOOL v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  BOOL v9 = 0;
  char v11 = 1;
LABEL_9:
  (*(void (**)(uint64_t))(*(void *)v10 + 24))(v10);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_100C43270(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t DataServiceController::tetheringController(DataServiceController *this)
{
  if (capabilities::ct::getBasebandBootStrategy(this) == 1) {
    return (uint64_t)this + 88;
  }
  else {
    return 0;
  }
}

uint64_t non-virtual thunk to'DataServiceController::tetheringController(DataServiceController *this)
{
  if (capabilities::ct::getBasebandBootStrategy(this) == 1) {
    return (uint64_t)this + 32;
  }
  else {
    return 0;
  }
}

{
  if (capabilities::ct::getBasebandBootStrategy(this) == 1) {
    return (uint64_t)this + 24;
  }
  else {
    return 0;
  }
}

uint64_t DataServiceController::tetheringSimSlot(DataServiceController *this)
{
  return (*(uint64_t (**)(void))(*(void *)this + 1088))();
}

uint64_t non-virtual thunk to'DataServiceController::tetheringSimSlot(DataServiceController *this)
{
  return (*(uint64_t (**)(void))(*((void *)this - 11) + 1088))();
}

void DataServiceController::calculateTetheringStatus_sync(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned int a3@<W2>, uint64_t a4@<X8>)
{
  if (a3 != 4 && a3 != 27)
  {
    *(unsigned char *)(a4 + 12) = 0;
    *(unsigned char *)(a4 + 16) = 0;
    *(unsigned char *)(a4 + 24) = 0;
    *(unsigned char *)(a4 + 32) = 0;
    *(unsigned char *)(a4 + 184) = 0;
    *(_DWORD *)(a4 + 192) = 0;
    *(void *)a4 = 0;
    *(unsigned char *)(a4 + 8) = 0;
    return;
  }
  *(_OWORD *)(a4 + 32) = 0u;
  uint64_t v69 = a4 + 32;
  *(void *)(a4 + 192) = 0;
  *(_OWORD *)(a4 + 16sub_10023C164((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a4 + 176) = 0u;
  *(_OWORD *)(a4 + 128) = 0u;
  *(_OWORD *)(a4 + 144) = 0u;
  *(_OWORD *)(a4 + 96) = 0u;
  *(_OWORD *)(a4 + 112) = 0u;
  *(_OWORD *)(a4 + 64) = 0u;
  *(_OWORD *)(a4 + 8sub_10023C164((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a4 + 48) = 0u;
  *(_OWORD *)a4 = 0u;
  *(_OWORD *)(a4 + 16) = 0u;
  *(_DWORD *)(a4 + 192) = a2;
  int v8 = *(_DWORD **)(a1 + 344);
  BOOL v9 = *(_DWORD **)(a1 + 352);
  while (v8 != v9)
  {
    if (*v8 == a2 && (subscriber::isSimInserted() & 1) == 0) {
      return;
    }
    v8 += 42;
  }
  uint64_t v10 = sub_100AEFE40(*(void *)(a1 + 144), a2);
  char v11 = *(uint64_t **)(v10 + 56);
  unint64_t v12 = *(uint64_t **)(v10 + 64);
  if (v11 != v12)
  {
    char v13 = 0;
    char v14 = 0;
    do
    {
      uint64_t v15 = *v11;
      BOOL v16 = (std::__shared_weak_count *)v11[1];
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15)
      {
        uint64_t v17 = (*(uint64_t (**)(uint64_t, void))(*(void *)v15 + 312))(v15, 0);
        v14 |= (ConnectionTypeToMask() & v17) != 0;
        char v13 = 1;
      }
      if (v16) {
        sub_10004D2C8(v16);
      }
      v11 += 2;
    }
    while (v11 != v12);
    if (v13)
    {
      if ((v14 & 1) == 0)
      {
        *(_WORD *)a4 = 256;
        return;
      }
      uint64_t v18 = 257;
      *(_WORD *)a4 = 257;
      uint64_t v19 = *(void *)(a1 + 4416);
      if (v19)
      {
        uint64_t v18 = a1 + 4416;
        do
        {
          int v20 = *(_DWORD *)(v19 + 32);
          BOOL v21 = v20 < (int)a2;
          if (v20 >= (int)a2) {
            CFTypeID v22 = (uint64_t *)v19;
          }
          else {
            CFTypeID v22 = (uint64_t *)(v19 + 8);
          }
          if (!v21) {
            uint64_t v18 = v19;
          }
          uint64_t v19 = *v22;
        }
        while (*v22);
        if (v18 != a1 + 4416 && *(_DWORD *)(v18 + 32) <= (int)a2)
        {
          uint64_t v18 = *(unsigned __int16 *)(v18 + 40);
          *(_WORD *)(a4 + 2) = v18;
        }
      }
      v90[0] = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v18, *(Registry **)(a1 + 104));
      int v24 = ServiceMap;
      if (v25 < 0)
      {
        int v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v27 = 5381;
        do
        {
          uint64_t v25 = v27;
          unsigned int v28 = *v26++;
          uint64_t v27 = (33 * v27) ^ v28;
        }
        while (v28);
      }
      std::mutex::lock(ServiceMap);
      *(void *)&long long v70 = v25;
      uint64_t v29 = sub_10004D37C(&v24[1].__m_.__sig, (unint64_t *)&v70);
      if (v29)
      {
        uint64_t v31 = v29[3];
        BOOL v30 = (std::__shared_weak_count *)v29[4];
        if (v30)
        {
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v24);
          atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v30);
          char v32 = 0;
          goto LABEL_41;
        }
      }
      else
      {
        uint64_t v31 = 0;
      }
      std::mutex::unlock(v24);
      BOOL v30 = 0;
      char v32 = 1;
LABEL_41:
      (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, void, void, void))(*(void *)v31 + 96))(v90, v31, a2, 1, kMaxBluetoothModemConnections, 0, 0);
      if ((v32 & 1) == 0) {
        sub_10004D2C8(v30);
      }
      uint64_t v33 = v90[0];
      if (v90[0]) {
        uint32_t v34 = sub_100080934;
      }
      else {
        uint32_t v34 = 0;
      }
      if (v34)
      {
        CFTypeID TypeID = CFArrayGetTypeID();
        if (v33 && CFGetTypeID(v33) == TypeID)
        {
          CFStringRef v88 = v90[0];
          CFArrayRef v89 = 0;
          if (v90[0])
          {
            CFRetain(v90[0]);
            v84[0] = v88;
            if (v88) {
              CFRetain(v88);
            }
          }
          else
          {
            v84[0] = 0;
          }
          CFArrayRef v86 = 0;
          *(void *)&long long v70 = 0;
          sub_100044D6C(&v70, v84);
          if ((void)v70) {
            uint32_t v41 = sub_100083F10;
          }
          else {
            uint32_t v41 = 0;
          }
          if (v41) {
            sub_100449580((const void **)&v86, (const void **)&v70);
          }
          sub_100044D00((const void **)&v70);
          CFArrayRef v89 = v86;
          CFArrayRef v86 = 0;
          sub_100044D00((const void **)&v86);
          sub_1000577C4(v84);
          sub_1000577C4(&v88);
          if (CFArrayGetCount(v89) < 1
            || (ValueAtIndex = (unsigned int *)CFArrayGetValueAtIndex(v89, 0), (uint64_t v38 = ValueAtIndex) == 0)
            || (CFTypeID v43 = CFGetTypeID(ValueAtIndex), v43 != CFNumberGetTypeID()))
          {
            sub_100044D00((const void **)&v89);
            goto LABEL_69;
          }
          sub_100044D00((const void **)&v89);
          goto LABEL_67;
        }
        CFStringRef v36 = v90[0];
        CFTypeID v37 = CFNumberGetTypeID();
        if (v36)
        {
          if (CFGetTypeID(v36) == v37)
          {
            uint64_t v38 = (unsigned int *)v90[0];
            if (v90[0])
            {
              CFTypeID v39 = CFGetTypeID(v90[0]);
              if (v39 == CFNumberGetTypeID())
              {
LABEL_67:
                LODWORD(v7sub_10023C164((uint64_t)&a9, 0) = 0;
                ctu::cf::assign((ctu::cf *)&v70, v38, v40);
                *(_DWORD *)(a4 + 8) = v70;
                *(unsigned char *)(a4 + 12) = 1;
              }
            }
          }
        }
      }
LABEL_69:
      sub_1000577C4(v90);
      CFArrayRef v86 = 0;
      unint64_t v87 = 0;
      DataServiceController::getConnection_sync(a1, a2, a3, &v86);
      if (!v86
        || (*(_WORD *)(a4 + 4) = (*(uint64_t (**)(const __CFArray *, void))(*(void *)v86 + 600))(v86, 0) | 0x100, !sub_100030AFC(*(void *)(a1 + 152), a2)))
      {
LABEL_112:
        if (v87) {
          sub_10004D2C8(v87);
        }
        return;
      }
      uint64_t v85 = 0;
      memset(v84, 0, sizeof(v84));
      sub_100AE478C(*(void *)(a1 + 152), a2, a3, (uint64_t)v84);
      unint64_t v44 = (LODWORD(v84[0]) == 0) | ((unint64_t)LODWORD(v84[0]) << 32);
      if (!*(unsigned char *)(a4 + 24)) {
        *(unsigned char *)(a4 + 24) = 1;
      }
      *(void *)(a4 + 16) = v44;
      sub_10000C004(*(void *)(a1 + 152), a2, a3, (uint64_t)&v70);
      int v45 = *(unsigned __int8 *)(a4 + 184);
      *(_OWORD *)uint64_t v69 = v70;
      *(void *)(v69 + 16) = v71;
      uint64_t v46 = (void **)(a4 + 56);
      if (!v45)
      {
        *(_OWORD *)uint64_t v46 = v72;
        *(void *)(a4 + 72) = v73;
        uint64_t v73 = 0;
        long long v72 = 0uLL;
        *(_OWORD *)(a4 + 8sub_10023C164((uint64_t)&a9, 0) = *(_OWORD *)__p;
        *(void *)(a4 + 96) = v75;
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v75 = 0;
        *(_DWORD *)(a4 + 104) = v76;
        *(_WORD *)(a4 + 108) = v77;
        *(_OWORD *)(a4 + 112) = v78;
        uint64_t v56 = *((void *)&v79 + 1);
        *(void *)(a4 + 128) = v79;
        *(void *)(a4 + 136) = v56;
        long long v78 = 0u;
        long long v79 = 0u;
        *(_OWORD *)(a4 + 144) = v80;
        long long v80 = 0uLL;
        uint64_t v57 = v82;
        *(void *)(a4 + 16sub_10023C164((uint64_t)&a9, 0) = v81;
        uint64_t v58 = v83;
        *(void *)(a4 + 168) = v57;
        *(void *)(a4 + 176) = v58;
        uint64_t v59 = a4 + 168;
        if (v58)
        {
          v57[2] = v59;
          uint64_t v81 = &v82;
          __int16 v82 = 0;
          uint64_t v83 = 0;
          uint64_t v57 = 0;
        }
        else
        {
          *(void *)(a4 + 16sub_10023C164((uint64_t)&a9, 0) = v59;
        }
        *(unsigned char *)(a4 + 184) = 1;
LABEL_106:
        sub_10005D9E0((uint64_t)&v81, v57);
        sub_10005DBA4(&v78);
        if (SHIBYTE(v75) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v73) < 0) {
          operator delete((void *)v72);
        }
        if (v85) {
          sub_10004D2C8(v85);
        }
        goto LABEL_112;
      }
      if (*(char *)(a4 + 79) < 0) {
        operator delete(*v46);
      }
      *(_OWORD *)uint64_t v46 = v72;
      *(void *)(a4 + 72) = v73;
      HIBYTE(v73) = 0;
      LOBYTE(v72) = 0;
      uint64_t v47 = (void **)(a4 + 80);
      if (*(char *)(a4 + 103) < 0) {
        operator delete(*v47);
      }
      *(_OWORD *)uint64_t v47 = *(_OWORD *)__p;
      *(void *)(a4 + 96) = v75;
      HIBYTE(v75) = 0;
      LOBYTE(__p[0]) = 0;
      *(_DWORD *)(a4 + 104) = v76;
      *(_WORD *)(a4 + 108) = v77;
      long long v49 = *(void ***)(a4 + 120);
      uint64_t v48 = *(void *)(a4 + 128);
      if ((void **)v48 == v49)
      {
        uint32_t v50 = (void *)(a4 + 152);
        uint64_t v48 = *(void *)(a4 + 120);
      }
      else
      {
        uint32_t v50 = (void *)(a4 + 152);
        unint64_t v51 = *(void *)(a4 + 144);
        uint64_t v52 = &v49[v51 / 0x19];
        uint64_t v53 = (uint64_t)*v52 + 160 * (v51 % 0x19);
        unint64_t v54 = (unint64_t)v49[(*(void *)(a4 + 152) + v51) / 0x19] + 160 * ((*(void *)(a4 + 152) + v51) % 0x19);
        if (v53 != v54)
        {
          do
          {
            sub_100525A70(v53);
            v53 += 160;
            if (v53 - (void)*v52 == 4000)
            {
              uint64_t v55 = (uint64_t)v52[1];
              ++v52;
              uint64_t v53 = v55;
            }
          }
          while (v53 != v54);
          long long v49 = *(void ***)(a4 + 120);
          uint64_t v48 = *(void *)(a4 + 128);
        }
      }
      void *v50 = 0;
      unint64_t v60 = v48 - (void)v49;
      if ((unint64_t)(v48 - (void)v49) >= 0x11)
      {
        do
        {
          operator delete(*v49);
          uint64_t v48 = *(void *)(a4 + 128);
          long long v49 = (void **)(*(void *)(a4 + 120) + 8);
          *(void *)(a4 + 12sub_10023C164((uint64_t)&a9, 0) = v49;
          unint64_t v60 = v48 - (void)v49;
        }
        while ((unint64_t)(v48 - (void)v49) > 0x10);
      }
      unint64_t v61 = v60 >> 3;
      if (v61 == 1)
      {
        uint64_t v62 = 12;
      }
      else
      {
        if (v61 != 2)
        {
LABEL_94:
          if (*(void *)(a4 + 152))
          {
            sub_100C47CD8(a4 + 112, 0);
            sub_100AE97FC((void *)(a4 + 112), 0);
          }
          else
          {
            while ((void **)v48 != v49)
            {
              operator delete(*(void **)(v48 - 8));
              long long v49 = *(void ***)(a4 + 120);
              uint64_t v48 = *(void *)(a4 + 128) - 8;
              *(void *)(a4 + 128) = v48;
            }
            *(void *)(a4 + 144) = 0;
          }
          sub_100C47D38((void **)(a4 + 112));
          uint64_t v64 = *(void *)(a4 + 120);
          uint64_t v63 = *(void *)(a4 + 128);
          if (v63 != v64) {
            *(void *)(a4 + 128) = v63 + ((v64 - v63 + 7) & 0xFFFFFFFFFFFFFFF8);
          }
          sub_100C47D38((void **)(a4 + 112));
          uint64_t v66 = *(void **)(a4 + 168);
          uint64_t v65 = (void *)(a4 + 168);
          long long v67 = v79;
          *(_OWORD *)(v65 - 7) = v78;
          *(_OWORD *)(v65 - 5) = v67;
          long long v78 = 0u;
          long long v79 = 0u;
          *(_OWORD *)(v65 - 3) = v80;
          long long v80 = 0uLL;
          sub_10005D9E0((uint64_t)(v65 - 1), v66);
          uint64_t v57 = v82;
          *(v65 - 1) = v81;
          *uint64_t v65 = v57;
          uint64_t v68 = v83;
          v65[1] = v83;
          if (v68)
          {
            v57[2] = v65;
            uint64_t v81 = &v82;
            __int16 v82 = 0;
            uint64_t v83 = 0;
            uint64_t v57 = 0;
          }
          else
          {
            *(v65 - 1) = v65;
          }
          goto LABEL_106;
        }
        uint64_t v62 = 25;
      }
      *(void *)(a4 + 144) = v62;
      goto LABEL_94;
    }
  }
}

void sub_100C43C14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_1000577C4((const void **)(v9 - 104));
  sub_100AE6DD8(a9);
  _Unwind_Resume(a1);
}

uint64_t DataServiceController::updateTetheringStatus_sync(uint64_t a1, uint64_t a2)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1080))(a1);
  if (result && (a2 == 27 || a2 == 4))
  {
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1896))(a1);
    uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)a1 + 1840);
    return v6(a1, v5, a2, 0);
  }
  return result;
}

uint64_t DataServiceController::updateTetheringStatus_sync(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  uint64_t result = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1896))(a1);
  if (result == a2 && (a3 == 27 || a3 == 4))
  {
    uint64_t v11 = 0;
    memset(v10, 0, sizeof(v10));
    memset(v9, 0, sizeof(v9));
    DataServiceController::calculateTetheringStatus_sync(a1, a2, a3, (uint64_t)v9);
    if (a4) {
      WORD3(v9[0]) = 257;
    }
    DataServiceController::updateTetheringStatus_sync(a1, a3, (unsigned __int8 *)v9);
    return sub_100AE6DD8((uint64_t)v10);
  }
  return result;
}

void sub_100C43E88(_Unwind_Exception *a1)
{
  sub_100AE6DD8(v1 + 32);
  _Unwind_Resume(a1);
}

uint64_t DataServiceController::updateTetheringStatus_sync(uint64_t result, uint64_t a2, unsigned __int8 *a3)
{
  uint64_t v5 = result;
  if (a2 == 27 || a2 == 4)
  {
    uint64_t v26 = 0;
    long long v25 = 0u;
    memset(v24, 0, sizeof(v24));
    memset(v23, 0, sizeof(v23));
    sub_100AE4FBC(*(void *)(result + 152), a2, (uint64_t)v23);
    if (BYTE1(v23[0]) && a3[1])
    {
      if (LOBYTE(v23[0]) != *a3) {
        goto LABEL_39;
      }
    }
    else if ((BYTE1(v23[0]) != 0) != (a3[1] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE3(v23[0]) && a3[3])
    {
      if (BYTE2(v23[0]) != a3[2]) {
        goto LABEL_39;
      }
    }
    else if ((BYTE3(v23[0]) != 0) != (a3[3] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE5(v23[0]) && a3[5])
    {
      if (BYTE4(v23[0]) != a3[4]) {
        goto LABEL_39;
      }
    }
    else if ((BYTE5(v23[0]) != 0) != (a3[5] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE7(v23[0]) && a3[7])
    {
      if (BYTE6(v23[0]) != a3[6]) {
        goto LABEL_39;
      }
    }
    else if ((BYTE7(v23[0]) != 0) != (a3[7] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE12(v23[0]) && a3[12])
    {
      if (DWORD2(v23[0]) != *((_DWORD *)a3 + 2)) {
        goto LABEL_39;
      }
    }
    else if ((BYTE12(v23[0]) != 0) != (a3[12] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE8(v23[1]) && a3[24])
    {
      if (__PAIR64__(DWORD1(v23[1]), LOBYTE(v23[1])) != __PAIR64__(*((_DWORD *)a3 + 5), a3[16])) {
        goto LABEL_39;
      }
    }
    else if ((BYTE8(v23[1]) != 0) != (a3[24] != 0))
    {
      goto LABEL_39;
    }
    if (BYTE8(v25) && a3[184])
    {
      if ((sub_100C47E0C((uint64_t)v24, (uint64_t)(a3 + 32)) & 1) == 0) {
        goto LABEL_39;
      }
    }
    else if ((BYTE8(v25) != 0) != (a3[184] != 0))
    {
      goto LABEL_39;
    }
    if (v26 == *((_DWORD *)a3 + 48)) {
      return sub_100AE6DD8((uint64_t)v24);
    }
LABEL_39:
    uint64_t v6 = (unsigned char *)(v5 + 4525);
    if (*(unsigned char *)(v5 + 4525)) {
      DataServiceController::pingTethering((Registry **)v5, (uint64_t *)*(unsigned __int8 *)(v5 + 4525));
    }
    if (v26 != *((_DWORD *)a3 + 48) && BYTE8(v25) && DWORD1(v24[0]))
    {
      memset((char *)&buf[10] + 9, 0, 31);
      memset((char *)&buf[1] + 9, 0, 144);
      buf[0] = v23[0];
      *(_OWORD *)((char *)buf + 9) = *(_OWORD *)((char *)v23 + 9);
      sub_100AE6D80(&buf[2], (uint64_t)v24);
      LODWORD(buf[12]) = v26;
      DWORD1(buf[2]) = 0;
      sub_100C42ACC(v5, a2, (uint64_t)"forced down", (uint64_t)buf);
      (*(void (**)(void, uint64_t, _OWORD *))(**(void **)(v5 + 4240) + 104))(*(void *)(v5 + 4240), a2, buf);
      sub_100AE6DD8((uint64_t)&buf[2]);
    }
    sub_100C42ACC(v5, a2, (uint64_t)"updated", (uint64_t)a3);
    unsigned int v7 = *(os_unfair_lock_s **)(v5 + 152);
    v19[0] = *(_OWORD *)a3;
    *(_OWORD *)((char *)v19 + 9) = *(_OWORD *)(a3 + 9);
    sub_100AE6D80(v20, (uint64_t)(a3 + 32));
    int v21 = *((_DWORD *)a3 + 48);
    sub_100AE5098(v7, a2, (uint64_t)v19);
    sub_100AE6DD8((uint64_t)v20);
    if (*v6 || !a3[24] || !a3[16] || !a3[1] || !*a3 || !a3[3] || !a3[2]) {
      goto LABEL_46;
    }
    int v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v5 + 48) + 16))(*(void *)(v5 + 48), *((unsigned int *)a3 + 48));
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I tethering: not ready ==> ready", (uint8_t *)buf, 2u);
    }
    unsigned char *v6 = 1;
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)1, *(Registry **)(v5 + 104));
    uint64_t v10 = ServiceMap;
    if (v11 < 0)
    {
      unint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v13 = 5381;
      do
      {
        uint64_t v11 = v13;
        unsigned int v14 = *v12++;
        uint64_t v13 = (33 * v13) ^ v14;
      }
      while (v14);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&buf[0] = v11;
    uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
    if (v15)
    {
      uint64_t v17 = v15[3];
      BOOL v16 = (std::__shared_weak_count *)v15[4];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v10);
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v16);
        char v18 = 0;
        goto LABEL_65;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    std::mutex::unlock(v10);
    BOOL v16 = 0;
    char v18 = 1;
LABEL_65:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, const char *))(*(void *)v17 + 16))(v17, 1, 1, 1, "initial start");
    if ((v18 & 1) == 0) {
      sub_10004D2C8(v16);
    }
LABEL_46:
    (*(void (**)(void, uint64_t, unsigned __int8 *))(**(void **)(v5 + 4240) + 104))(*(void *)(v5 + 4240), a2, a3);
    return sub_100AE6DD8((uint64_t)v24);
  }
  return result;
}

void sub_100C4440C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if ((v65 & 1) == 0) {
    sub_10004D2C8(v66);
  }
  sub_100AE6DD8((uint64_t)&a65);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'DataServiceController::updateTetheringStatus_sync(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return DataServiceController::updateTetheringStatus_sync(a1 - 88, a2, a3, a4);
}

void sub_100C44460(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v5 = v4;
  uint64_t v6 = *(uint64_t **)(a1 + 4416);
  if (v6)
  {
    unsigned int v7 = (uint64_t **)(a1 + 4416);
    uint64_t v8 = a1 + 4416;
    uint64_t v9 = *(void *)(a1 + 4416);
    do
    {
      int v10 = *(_DWORD *)(v9 + 32);
      BOOL v11 = v10 < (int)a2;
      if (v10 >= (int)a2) {
        unint64_t v12 = (uint64_t *)v9;
      }
      else {
        unint64_t v12 = (uint64_t *)(v9 + 8);
      }
      if (!v11) {
        uint64_t v8 = v9;
      }
      uint64_t v9 = *v12;
    }
    while (*v12);
    if ((uint64_t **)v8 != v7 && *(_DWORD *)(v8 + 32) <= (int)a2)
    {
      uint64_t v13 = *v4;
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I tethering: erasing", buf, 2u);
        uint64_t v6 = *v7;
      }
      if (v6)
      {
        uint64_t v14 = a1 + 4416;
        uint64_t v15 = v6;
        do
        {
          int v16 = *((_DWORD *)v15 + 8);
          BOOL v17 = v16 < (int)a2;
          if (v16 >= (int)a2) {
            char v18 = (uint64_t **)v15;
          }
          else {
            char v18 = (uint64_t **)(v15 + 1);
          }
          if (!v17) {
            uint64_t v14 = (uint64_t)v15;
          }
          uint64_t v15 = *v18;
        }
        while (*v18);
        if ((uint64_t **)v14 != v7 && *(_DWORD *)(v14 + 32) <= (int)a2)
        {
          uint64_t v19 = *(void **)(v14 + 8);
          if (v19)
          {
            do
            {
              int v20 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            int v21 = (void *)v14;
            do
            {
              int v20 = (void *)v21[2];
              BOOL v22 = *v20 == (void)v21;
              int v21 = v20;
            }
            while (!v22);
          }
          if (*(void *)(a1 + 4408) == v14) {
            *(void *)(a1 + 4408) = v20;
          }
          --*(void *)(a1 + 4424);
          sub_10005EE6C(v6, (uint64_t *)v14);
          if (*(char *)(v14 + 71) < 0) {
            operator delete(*(void **)(v14 + 48));
          }
          operator delete((void *)v14);
        }
      }
    }
  }
  DataServiceController::tetheringAuthStateReset_sync(a1, a2, 1);
  BOOL v23 = (unsigned char *)(a1 + 4525);
  if (*(unsigned char *)(a1 + 4525))
  {
    int v24 = *v5;
    if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
    {
      v25[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I tethering: ready ==> not ready (1)", (uint8_t *)v25, 2u);
    }
    *BOOL v23 = 0;
  }
}

uint64_t DataServiceController::getTetheringStatus(uint64_t a1, int a2, uint64_t a3)
{
  if (a2 == 4 || a2 == 27)
  {
    sub_100AE4FBC(*(void *)(a1 + 152), a2, (uint64_t)&v6);
    uint64_t v4 = *(void *)(a3 + 24);
    if (!v4) {
      sub_10007B600();
    }
  }
  else
  {
    char v8 = 0;
    char v9 = 0;
    char v10 = 0;
    v11[0] = 0;
    v11[152] = 0;
    int v12 = 0;
    uint64_t v6 = 0;
    char v7 = 0;
    uint64_t v4 = *(void *)(a3 + 24);
    if (!v4) {
      sub_10007B600();
    }
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, &v6);
  return sub_100AE6DD8((uint64_t)v11);
}

void sub_100C4474C(_Unwind_Exception *a1)
{
  sub_100AE6DD8(v1);
  _Unwind_Resume(a1);
}

uint64_t non-virtual thunk to'DataServiceController::getTetheringStatus(uint64_t a1, int a2, uint64_t a3)
{
  return DataServiceController::getTetheringStatus(a1 - 56, a2, a3);
}

void DataServiceController::tetheringAuthSuccess_sync(uint64_t a1, uint64_t a2)
{
  DataServiceController::tetheringAuthStateReset_sync(a1, a2, 1);
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I tethering: on auth success", v5, 2u);
  }
  sub_100C44ADC(a1, a2, 36, 257, 0);
}

void DataServiceController::tetheringAuthStateReset_sync(uint64_t a1, uint64_t a2, int a3)
{
  int v29 = a2;
  uint64_t v5 = (uint64_t **)(a1 + 4432);
  if (a3)
  {
    uint64_t v6 = *(void *)(a1 + 4440);
    if (v6)
    {
      char v7 = (uint64_t **)(a1 + 4440);
      uint64_t v8 = a1 + 4440;
      do
      {
        int v9 = *(_DWORD *)(v6 + 32);
        BOOL v10 = v9 < (int)a2;
        if (v9 >= (int)a2) {
          BOOL v11 = (uint64_t *)v6;
        }
        else {
          BOOL v11 = (uint64_t *)(v6 + 8);
        }
        if (!v10) {
          uint64_t v8 = v6;
        }
        uint64_t v6 = *v11;
      }
      while (*v11);
      if ((uint64_t **)v8 != v7 && *(_DWORD *)(v8 + 32) <= (int)a2 && *(unsigned char *)(v8 + 40))
      {
        int v12 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
        if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I tethering: fTetheringAuthStarted true==>>false (1)", buf, 2u);
        }
        uint64_t v13 = *v7;
        if (*v7)
        {
          uint64_t v14 = (uint64_t *)(a1 + 4440);
          uint64_t v15 = *v7;
          do
          {
            int v16 = *((_DWORD *)v15 + 8);
            BOOL v17 = v16 < (int)a2;
            if (v16 >= (int)a2) {
              char v18 = (uint64_t **)v15;
            }
            else {
              char v18 = (uint64_t **)(v15 + 1);
            }
            if (!v17) {
              uint64_t v14 = v15;
            }
            uint64_t v15 = *v18;
          }
          while (*v18);
          if (v14 != (uint64_t *)v7 && *((_DWORD *)v14 + 8) <= (int)a2)
          {
            uint64_t v19 = (uint64_t *)v14[1];
            if (v19)
            {
              do
              {
                int v20 = v19;
                uint64_t v19 = (uint64_t *)*v19;
              }
              while (v19);
            }
            else
            {
              int v24 = v14;
              do
              {
                int v20 = (uint64_t *)v24[2];
                BOOL v25 = *v20 == (void)v24;
                int v24 = v20;
              }
              while (!v25);
            }
            if (*v5 == v14) {
              os_log_t *v5 = v20;
            }
            --*(void *)(a1 + 4448);
            sub_10005EE6C(v13, v14);
            uint64_t v26 = v14[6];
            v14[6] = 0;
            if (v26) {
              (*(void (**)(uint64_t))(*(void *)v26 + 8))(v26);
            }
            operator delete(v14);
          }
        }
      }
    }
  }
  else
  {
    int v21 = sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v29);
    uint64_t v22 = *((void *)v21 + 6);
    *((void *)v21 + 6) = 0;
    if (v22) {
      (*(void (**)(uint64_t))(*(void *)v22 + 8))(v22);
    }
    if (sub_100C36AF0(v5, a2, &v29)[40])
    {
      BOOL v23 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        v27[0] = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I tethering: fTetheringAuthStarted true==>>false (2)", (uint8_t *)v27, 2u);
      }
      sub_100C36AF0(v5, a2, &v29)[40] = 0;
    }
  }
}

void sub_100C44ADC(uint64_t a1, uint64_t a2, int a3, __int16 a4, BOOL a5)
{
  uint64_t v99 = 0;
  long long v100 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 104));
  BOOL v11 = ServiceMap;
  if (v12 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v12;
  int v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  int v97 = a3;
  if (v16)
  {
    uint64_t v18 = v16[3];
    BOOL v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  BOOL v17 = 0;
  char v19 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v18 + 8))(&v99, v18, a2);
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  if (v99)
  {
    int v20 = sub_100046F68(a1 + 1048, (void **)(v99 + 24));
    if ((void **)(a1 + 1056) != v20)
    {
      int v21 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I tethering: update from upper layers coming", buf, 2u);
      }
      unsigned int v104 = *(_DWORD *)(v99 + 52);
      uint64_t v22 = v104;
      BOOL v23 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v104);
      int v24 = *v23;
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v25 = asString();
        uint64_t v26 = asStringBool();
        uint64_t v27 = asStringBool(a5);
        unsigned int v28 = (const char *)(v99 + 24);
        uint64_t v29 = *(unsigned __int8 *)(v99 + 47);
        int v30 = (char)v29;
        if ((v29 & 0x80u) != 0) {
          uint64_t v29 = *(void *)(v99 + 32);
        }
        if (v30 < 0) {
          unsigned int v28 = *(const char **)(v99 + 24);
        }
        if (!v29) {
          unsigned int v28 = "<invalid>";
        }
        *(_DWORD *)std::string buf = 136315906;
        *(void *)&uint8_t buf[4] = v25;
        *(_WORD *)&uint8_t buf[12] = 2080;
        *(void *)&buf[14] = v26;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v106 = v27;
        __int16 v107 = 2080;
        __int16 v108 = v28;
        _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I tethering: update: conn=%s, authStatus=%s, cleanFailed=%s, accountId=%s", buf, 0x2Au);
      }
      memset(&__p[4], 0, 32);
      uint64_t v31 = sub_100C36AF0((uint64_t **)(a1 + 4408), v22, &v104);
      LOWORD(__p[4]) = *((_WORD *)v31 + 20);
      BYTE2(__p[4]) = v31[42];
      if (v31[71] < 0)
      {
        sub_10004FC84(&__p[5], *((void **)v31 + 6), *((void *)v31 + 7));
      }
      else
      {
        *(_OWORD *)&__p[5] = *((_OWORD *)v31 + 3);
        __p[7] = *((void **)v31 + 8);
      }
      char v32 = *v23;
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v33 = asStringBool();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v33;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I tethering: orig auth status: %s", buf, 0xCu);
      }
      uint64_t v98 = sub_100C36AF0((uint64_t **)(a1 + 4408), v22, &v104);
      uint32_t v34 = v98 + 40;
      if (a5 || HIBYTE(a4) && (_BYTE)a4)
      {
        if (v98[41])
        {
          if (!*v34)
          {
            int v35 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)
              || (*(_WORD *)std::string buf = 0,
                  _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I tethering: resetting auth value", buf, 2u), v98[41]))
            {
              v98[41] = 0;
            }
          }
        }
      }
      memset(__p, 0, 32);
      CFStringRef v36 = sub_100C36AF0((uint64_t **)(a1 + 4408), v22, &v104);
      LOWORD(__p[0]) = *((_WORD *)v36 + 20);
      BYTE2(__p[0]) = v36[42];
      if (v36[71] < 0)
      {
        sub_10004FC84(&__p[1], *((void **)v36 + 6), *((void *)v36 + 7));
      }
      else
      {
        *(_OWORD *)&__p[1] = *((_OWORD *)v36 + 3);
        __p[3] = *((void **)v36 + 8);
      }
      CFTypeID v37 = *v23;
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v38 = asStringBool();
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I tethering: old auth status: %s", buf, 0xCu);
      }
      int v39 = a4;
      *(_WORD *)std::string buf = 0;
      buf[2] = 0;
      uint64_t v106 = 0;
      *(_OWORD *)&uint8_t buf[8] = 0uLL;
      *(_WORD *)uint32_t v34 = 0;
      CFNumberRef v40 = v98;
      uint32_t v41 = (std::string *)(v98 + 48);
      v98[42] = 0;
      std::string::operator=((std::string *)v98 + 2, (const std::string *)&buf[8]);
      if (SHIBYTE(v106) < 0) {
        operator delete(*(void **)&buf[8]);
      }
      std::string::operator=(v41, (const std::string *)(v99 + 24));
      if (((_BYTE)v20[7] & 8) == 0)
      {
        CFTypeRef cf = 0;
        long long v102 = 0;
        DataServiceController::getConnection_sync(a1, v22, 5, (uint64_t *)&cf);
        if (!cf || !(*(unsigned int (**)(CFTypeRef, void))(*(void *)cf + 208))(cf, 0))
        {
          uint64_t v68 = *v23;
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#N tethering: cannot find connection ?", buf, 2u);
          }
          goto LABEL_101;
        }
        int v42 = *v23;
        if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I tethering: nw supported", buf, 2u);
        }
        v98[42] = 2;
        if (!HIBYTE(a4))
        {
          int v74 = BYTE2(__p[0]);
          int v75 = BYTE1(__p[0]);
          int v76 = *v23;
          BOOL v77 = os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT);
          if (v74 != 2 || !v75)
          {
            if (v77)
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I tethering: retrying auth", buf, 2u);
            }
            sub_100C462F4(a1, v22);
            CFNumberRef v40 = v98;
            goto LABEL_101;
          }
          CFNumberRef v40 = v98;
          if (v77)
          {
            uint64_t v78 = asStringBool();
            *(_DWORD *)std::string buf = 136315138;
            *(void *)&uint8_t buf[4] = v78;
            _os_log_impl((void *)&_mh_execute_header, v76, OS_LOG_TYPE_DEFAULT, "#I tethering: using old auth status: %s", buf, 0xCu);
          }
          DataServiceController::tetheringAuthStateReset_sync(a1, v22, 0);
          __int16 v79 = (__int16)__p[0];
LABEL_100:
          *(_WORD *)uint32_t v34 = v79;
LABEL_101:
          if (v102) {
            sub_10004D2C8(v102);
          }
          BOOL v73 = v40[41] != 0;
LABEL_104:
          if (v73 && BYTE1(__p[4]))
          {
            if (LOBYTE(__p[4]) != *v34) {
              goto LABEL_115;
            }
          }
          else if ((v73 ^ (BYTE1(__p[4]) != 0)))
          {
            goto LABEL_115;
          }
          if (BYTE2(__p[4]) == v40[42]
            && sub_10001D294((unsigned __int8 *)&__p[5], (unsigned __int8 *)v41))
          {
            if (v97 == 4 || v97 == 27)
            {
              (*(void (**)(uint64_t, uint64_t))(*(void *)a1 + 1840))(a1, v22);
            }
            else if (v97 == 36)
            {
LABEL_132:
              for (uint64_t i = 0; i != 2; ++i)
                (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 1840))(a1, v22, dword_10155B0D0[i], 0);
            }
            if (SHIBYTE(__p[3]) < 0) {
              operator delete(__p[1]);
            }
            if (SHIBYTE(__p[7]) < 0) {
              operator delete(__p[5]);
            }
            goto LABEL_138;
          }
LABEL_115:
          uint64_t v83 = *v23;
          if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v84 = asString();
            uint64_t v85 = asStringBool();
            uint64_t v86 = asString();
            unint64_t v87 = (void *)HIBYTE(__p[7]);
            if (SHIBYTE(__p[7]) < 0) {
              unint64_t v87 = __p[6];
            }
            CFStringRef v88 = &__p[5];
            if (SHIBYTE(__p[7]) < 0) {
              CFStringRef v88 = (void **)__p[5];
            }
            if (v87) {
              CFArrayRef v89 = (const char *)v88;
            }
            else {
              CFArrayRef v89 = "<invalid>";
            }
            uint64_t v90 = asStringBool();
            uint64_t v91 = asString();
            uint64_t v92 = v98[71];
            BOOL v93 = (v92 & 0x80u) != 0;
            if ((v92 & 0x80u) != 0) {
              uint64_t v92 = *((void *)v98 + 7);
            }
            if (v93) {
              long long v94 = (const char *)*((void *)v98 + 6);
            }
            else {
              long long v94 = v98 + 48;
            }
            if (v92) {
              long long v95 = v94;
            }
            else {
              long long v95 = "<invalid>";
            }
            *(_DWORD *)std::string buf = 136316674;
            *(void *)&uint8_t buf[4] = v84;
            *(_WORD *)&uint8_t buf[12] = 2080;
            *(void *)&buf[14] = v85;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v106 = v86;
            __int16 v107 = 2080;
            __int16 v108 = v89;
            __int16 v109 = 2080;
            uint64_t v110 = v90;
            __int16 v111 = 2080;
            uint64_t v112 = v91;
            __int16 v113 = 2080;
            uint64_t v114 = v95;
            _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I tethering: for conn: %s: update tethering internal state (change states): %s/%s/%s ==>> %s/%s/%s", buf, 0x48u);
          }
          goto LABEL_132;
        }
        DataServiceController::tetheringAuthStateReset_sync(a1, v22, 0);
        if (!BYTE1(__p[0]))
        {
          long long v80 = *v23;
          if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_DEFAULT, "#I tethering: using new auth status", buf, 2u);
          }
          __int16 v79 = a4 | 0x100;
          goto LABEL_100;
        }
        int v43 = LOBYTE(__p[0]);
        os_log_t v44 = *v23;
        BOOL v45 = os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT);
        if (v43 == v39)
        {
          if (v45)
          {
            *(_WORD *)std::string buf = 0;
            uint64_t v46 = "#N tethering: old value the same";
            uint64_t v47 = v44;
            uint32_t v48 = 2;
LABEL_97:
            _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, buf, v48);
          }
        }
        else if (v45)
        {
          uint64_t v81 = asStringBool();
          uint64_t v82 = asStringBool();
          *(_DWORD *)std::string buf = 136315394;
          *(void *)&uint8_t buf[4] = v81;
          *(_WORD *)&uint8_t buf[12] = 2080;
          *(void *)&buf[14] = v82;
          v46 = "#N tethering: old value known, overriding update. Old BOOL value = %s, updated BOOL value = %s";
          uint64_t v47 = v44;
          uint32_t v48 = 22;
          goto LABEL_97;
        }
        if (!BYTE1(__p[0])) {
          sub_10016C840();
        }
        __int16 v79 = LOBYTE(__p[0]) | 0x100;
        goto LABEL_100;
      }
      long long v49 = *v23;
      if (os_log_type_enabled(*v23, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I tethering: ent supported", buf, 2u);
      }
      uint64_t v50 = 1;
      v98[42] = 1;
      uint64_t v53 = v20[9];
      uint64_t v52 = v20 + 9;
      uint64_t v51 = (uint64_t)v53;
      if (v53)
      {
        uint64_t v50 = (uint64_t)v52;
        do
        {
          int v54 = *(_DWORD *)(v51 + 28);
          BOOL v55 = v54 < 3;
          if (v54 >= 3) {
            uint64_t v56 = (uint64_t *)v51;
          }
          else {
            uint64_t v56 = (uint64_t *)(v51 + 8);
          }
          if (!v55) {
            uint64_t v50 = v51;
          }
          uint64_t v51 = *v56;
        }
        while (*v56);
        if ((void **)v50 != v52 && *(int *)(v50 + 28) <= 3)
        {
          unsigned int v57 = *(_DWORD *)(v50 + 32);
          uint64_t v50 = v57 - 5;
          if (v50 < 0xFFFFFFFE)
          {
LABEL_86:
            DataServiceController::tetheringAuthStateReset_sync(a1, v22, 1);
            *(_WORD *)uint32_t v34 = (v57 > 6) | (5u >> v57) & 1 | 0x100;
            BOOL v73 = 1;
            goto LABEL_104;
          }
        }
      }
      uint64_t v58 = (std::mutex *)Registry::getServiceMap((uint64_t *)v50, *(Registry **)(a1 + 104));
      uint64_t v59 = v58;
      if (v60 < 0)
      {
        unint64_t v61 = (unsigned __int8 *)(v60 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v62 = 5381;
        do
        {
          uint64_t v60 = v62;
          unsigned int v63 = *v61++;
          uint64_t v62 = (33 * v62) ^ v63;
        }
        while (v63);
      }
      std::mutex::lock(v58);
      *(void *)std::string buf = v60;
      uint64_t v64 = sub_10004D37C(&v59[1].__m_.__sig, (unint64_t *)buf);
      if (v64)
      {
        uint64_t v66 = v64[3];
        char v65 = (std::__shared_weak_count *)v64[4];
        if (v65)
        {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v59);
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v65);
          char v67 = 0;
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v66 = 0;
      }
      std::mutex::unlock(v59);
      char v65 = 0;
      char v67 = 1;
LABEL_76:
      (*(void (**)(CFTypeRef *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v66 + 96))(&cf, v66, *(unsigned int *)(v99 + 52), 1, @"EnableTetheringWhileEntitlementStatusIsUnknown", 0, 0);
      uint64_t v69 = (BOOL *)cf;
      buf[0] = 0;
      if (cf && (CFTypeID v70 = CFGetTypeID(cf), v70 == CFBooleanGetTypeID()))
      {
        ctu::cf::assign((ctu::cf *)buf, v69, v71);
        int v72 = buf[0];
      }
      else
      {
        int v72 = 0;
      }
      sub_1000577C4(&cf);
      if ((v67 & 1) == 0) {
        sub_10004D2C8(v65);
      }
      if (v72) {
        unsigned int v57 = 2;
      }
      else {
        unsigned int v57 = 6;
      }
      uint64_t v22 = v104;
      CFNumberRef v40 = v98;
      goto LABEL_86;
    }
  }
LABEL_138:
  if (v100) {
    sub_10004D2C8(v100);
  }
}

void sub_100C45720(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, char a15, std::__shared_weak_count *a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataServiceController::tetheringAuthSuccess_sync(uint64_t a1, uint64_t a2)
{
}

void DataServiceController::tetheringAuthFailure_sync(uint64_t a1, int a2, int a3, int a4, __int32 a5)
{
  unsigned int v78 = a2;
  BOOL v10 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  BOOL v11 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = asString();
    *(_WORD *)&uint8_t buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#E tethering: authentication failed: error %s, type %s", buf, 0x16u);
  }
  uint64_t v12 = sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v78);
  if (a3 == 101)
  {
    if (*((_DWORD *)v12 + 17)) {
      a3 = *((_DWORD *)sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v78) + 17);
    }
    else {
      a3 = 101;
    }
  }
  else
  {
    *((_DWORD *)v12 + 17) = a3;
  }
  if (a4 != 1 || !a5) {
    goto LABEL_47;
  }
  BOOL v77 = 0;
  uint64_t v13 = &qword_101B102E8;
  LOBYTE(v13) = atomic_load_explicit((atomic_uchar *volatile)&qword_101B102E8, memory_order_acquire);
  if ((v13 & 1) == 0 && __cxa_guard_acquire(&qword_101B102E8))
  {
    *(void *)std::string buf = @"Fatal3GPPTetheringAuthErrors";
    sub_100367E88(qword_101B102F0, buf, 1uLL);
    __cxa_atexit((void (*)(void *))sub_100367F0C, qword_101B102F0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101B102E8);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v13, *(Registry **)(a1 + 104));
  unsigned int v15 = ServiceMap;
  if (v16 < 0)
  {
    BOOL v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      uint64_t v16 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v16;
  int v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)buf);
  __int32 __c = a5;
  if (v20)
  {
    uint64_t v22 = v20[3];
    int v21 = (std::__shared_weak_count *)v20[4];
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v15);
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      a4 = 1;
      sub_10004D2C8(v21);
      char v23 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  std::mutex::unlock(v15);
  int v21 = 0;
  char v23 = 1;
LABEL_19:
  (*(void (**)(void **__return_ptr, uint64_t, void, uint64_t, void *, void, void))(*(void *)v22
                                                                                                  + 104))(v72, v22, v78, 1, qword_101B102F0, 0, 0);
  sub_100056248(&__p, (CFTypeRef *)v72);
  *(void *)std::string buf = v77;
  BOOL v77 = __p;
  std::string __p = 0;
  sub_1000558F4((const void **)buf);
  sub_1000558F4((const void **)&__p);
  sub_1000577C4((const void **)v72);
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v21);
  }
  if (v77) {
    int v24 = sub_1000810B8;
  }
  else {
    int v24 = 0;
  }
  if (!v24)
  {
    sub_1000558F4((const void **)&v77);
LABEL_47:
    uint64_t v40 = 0;
    uint32_t v41 = (int *)"24NoBBCarrierBundleHandler";
    while (dword_10155B0D8[v40] != a3)
    {
      if (++v40 == 4) {
        goto LABEL_52;
      }
    }
    uint32_t v41 = &dword_10155B0D8[v40];
LABEL_52:
    if ((char *)v41 - (char *)dword_10155B0D8 != 16) {
      goto LABEL_74;
    }
    goto LABEL_53;
  }
  std::string __p = 0;
  int v75 = 0;
  int v76 = 0;
  v72[0] = 0;
  v72[1] = 0;
  uint64_t v73 = 0;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)int v72 = *(_OWORD *)buf;
  uint64_t v73 = *(void *)&buf[16];
  memset(buf, 0, sizeof(buf));
  DataUtils::tokenizeWithBasicDelimiters();
  uint64_t v25 = *(void *)buf;
  uint64_t v26 = *(void *)&buf[8];
  if (*(void *)buf == *(void *)&buf[8])
  {
    uint64_t v31 = v75;
  }
  else
  {
    do
    {
      uint64_t v27 = (const char *)v25;
      if (*(char *)(v25 + 23) < 0) {
        uint64_t v27 = *(const char **)v25;
      }
      int v28 = atoi(v27);
      int v29 = v28;
      int v30 = v75;
      if (v75 >= v76)
      {
        char v32 = (char *)__p;
        uint64_t v33 = (v75 - (unsigned char *)__p) >> 2;
        unint64_t v34 = v33 + 1;
        if ((unint64_t)(v33 + 1) >> 62) {
          sub_10006A748();
        }
        uint64_t v35 = v76 - (unsigned char *)__p;
        if ((v76 - (unsigned char *)__p) >> 1 > v34) {
          unint64_t v34 = v35 >> 1;
        }
        if ((unint64_t)v35 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v36 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v36 = v34;
        }
        if (v36)
        {
          CFTypeID v37 = (char *)sub_10005ECD8((uint64_t)&v76, v36);
          char v32 = (char *)__p;
          int v30 = v75;
        }
        else
        {
          CFTypeID v37 = 0;
        }
        uint64_t v38 = &v37[4 * v33];
        *(_DWORD *)uint64_t v38 = v29;
        uint64_t v31 = v38 + 4;
        while (v30 != v32)
        {
          int v39 = *((_DWORD *)v30 - 1);
          v30 -= 4;
          *((_DWORD *)v38 - 1) = v39;
          v38 -= 4;
        }
        std::string __p = v38;
        int v75 = v31;
        int v76 = &v37[4 * v36];
        if (v32) {
          operator delete(v32);
        }
      }
      else
      {
        *(_DWORD *)int v75 = v28;
        uint64_t v31 = v30 + 4;
      }
      int v75 = v31;
      v25 += 24;
    }
    while (v25 != v26);
  }
  uint64_t v47 = wmemchr((__int32 *)__p, __c, (v31 - (unsigned char *)__p) >> 2);
  if (v47) {
    uint32_t v48 = v47;
  }
  else {
    uint32_t v48 = (__int32 *)v31;
  }
  long long v49 = v75;
  __int16 v79 = buf;
  sub_100047F64((void ***)&v79);
  if (SHIBYTE(v73) < 0) {
    operator delete(v72[0]);
  }
  if (__p)
  {
    int v75 = (char *)__p;
    operator delete(__p);
  }
  sub_1000558F4((const void **)&v77);
  BOOL v42 = v48 == (__int32 *)v49;
  a4 = 1;
  if (!v42)
  {
LABEL_74:
    uint64_t v50 = *v10;
    BOOL v51 = os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT);
    uint64_t v44 = v78;
    if (v51)
    {
      uint64_t v52 = sub_100C36AF0((uint64_t **)(a1 + 4432), v78, &v78);
      uint64_t v53 = asStringBool(v52[65]);
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v53;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#E tethering: fatal authentication failure, final: %s", buf, 0xCu);
    }
    BOOL v54 = sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78)[65] == 0;
    BOOL v55 = sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78);
    if (!v54)
    {
      v55[64] = 1;
      sub_100C44ADC(a1, v44, 36, 256, 0);
      return;
    }
    v55[65] = 1;
    goto LABEL_79;
  }
LABEL_53:
  BOOL v42 = a3 >= 0 || a3 == -9;
  char v43 = !v42;
  if (!a4 && (v43 & 1) == 0)
  {
    uint64_t v44 = v78;
LABEL_79:
    DataServiceController::tetheringAuthStateReset_sync(a1, v44, 0);
    if (sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78)[65])
    {
      uint64_t v56 = 900;
    }
    else if (*((uint64_t *)sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78) + 7) < 1)
    {
      uint64_t v56 = 1;
    }
    else
    {
      unsigned int v57 = sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78);
      if (2 * *((void *)v57 + 7) >= 3600) {
        uint64_t v56 = 3600;
      }
      else {
        uint64_t v56 = 2 * *((void *)v57 + 7);
      }
    }
    *((void *)sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78) + 7) = v56;
    uint64_t v58 = *v10;
    if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string buf = 134217984;
      *(void *)&uint8_t buf[4] = v56;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#N tethering: Re-authentication set to %lu seconds", buf, 0xCu);
    }
    Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 104));
    uint64_t v59 = *(void *)buf;
    sub_100058DB0(v70, "Tethering reauthentication timer");
    uint64_t v60 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v60;
    if (v60) {
      dispatch_retain(v60);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 0x40000000;
    aBlock[2] = sub_100C46200;
    aBlock[3] = &unk_101A495B8;
    int v67 = v44;
    aBlock[4] = a1;
    aBlock[5] = v10;
    uint64_t v68 = _Block_copy(aBlock);
    sub_100118A44(v59, (uint64_t)v70, 2, 1000000 * v56, &object, &v68);
    unint64_t v61 = sub_100C36AF0((uint64_t **)(a1 + 4432), v44, &v78);
    uint64_t v62 = __p;
    std::string __p = 0;
    uint64_t v63 = *((void *)v61 + 6);
    *((void *)v61 + 6) = v62;
    if (v63)
    {
      (*(void (**)(uint64_t))(*(void *)v63 + 8))(v63);
      uint64_t v64 = __p;
      std::string __p = 0;
      if (v64) {
        (*(void (**)(void *))(*(void *)v64 + 8))(v64);
      }
    }
    if (v68) {
      _Block_release(v68);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v71 < 0) {
      operator delete(v70[0]);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    return;
  }
  BOOL v45 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I tethering: not a tmp failure", buf, 2u);
  }
  uint64_t v46 = v78;
  DataServiceController::tetheringAuthStateReset_sync(a1, v78, 0);
  sub_100C44ADC(a1, v46, 36, 256, 0);
}

void sub_100C460B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *aBlock, dispatch_object_t object, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *__p,uint64_t a34)
{
  __cxa_guard_abort(&qword_101B102E8);
  sub_1000558F4((const void **)(v34 - 152));
  _Unwind_Resume(a1);
}

void sub_100C46200(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 48);
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v4 = sub_100C36AF0((uint64_t **)(v3 + 4432), *(_DWORD *)(a1 + 48), (_DWORD *)(a1 + 48));
  uint64_t v5 = *((void *)v4 + 6);
  *((void *)v4 + 6) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  uint64_t v6 = **(NSObject ***)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I tethering: trying re-authentication", v8, 2u);
  }
  DataServiceController::canActivateConnection_sync(v3, *v2, 5, (uint64_t)v8);
  int v7 = *(_DWORD *)v8;
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (!v7) {
    sub_100C462F4(v3, *v2);
  }
}

void sub_100C462F4(uint64_t a1, uint64_t a2)
{
  int v17 = a2;
  uint64_t v4 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v5 = *v4;
  if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I tethering: tryWirelessModemAuthentication", buf, 2u);
  }
  if (!sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17)[64]
    && !sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17)[40]
    && !*((void *)sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17) + 6))
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    DataServiceController::getConnection_sync(a1, a2, 5, &v15);
    uint64_t v6 = v15;
    if (v15)
    {
      int v7 = *v4;
      if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I tethering: authentication start (1)", buf, 2u);
      }
      if (!sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17)[40])
      {
        uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)std::string buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I tethering: fTetheringAuthStarted false==>>true", buf, 2u);
        }
        sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17)[40] = 1;
      }
      int v9 = sub_100C36AF0((uint64_t **)(a1 + 4432), a2, &v17);
      uint64_t v10 = *((void *)v9 + 6);
      *((void *)v9 + 6) = 0;
      if (v10) {
        (*(void (**)(uint64_t))(*(void *)v10 + 8))(v10);
      }
      v13[0] = _NSConcreteStackBlock;
      v13[1] = 1174405120;
      v13[2] = sub_100C470C4;
      v13[3] = &unk_101A495D8;
      void v13[4] = v4;
      v13[5] = v6;
      BOOL v11 = v16;
      uint64_t v14 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = 0;
      uint64_t v26 = 0;
      sub_10003E168(&v25, (void *)(a1 + 8));
      uint64_t v12 = *(NSObject **)(a1 + 24);
      *(void *)std::string buf = _NSConcreteStackBlock;
      uint64_t v19 = 1174405120;
      int v20 = sub_100C48620;
      int v21 = &unk_101A49610;
      uint64_t v23 = v25;
      int v24 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v22 = v13;
      dispatch_async(v12, buf);
      if (v24) {
        sub_10004D2C8(v24);
      }
      if (v26) {
        sub_10004D2C8(v26);
      }
      if (v14) {
        sub_10004D2C8(v14);
      }
    }
    else
    {
      BOOL v11 = v16;
    }
    if (v11) {
      sub_10004D2C8(v11);
    }
  }
}

void sub_100C4663C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataServiceController::tetheringAuthFailure_sync(uint64_t a1, int a2, int a3, int a4, __int32 a5)
{
}

void DataServiceController::tetheringAuthRetry_sync(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I tethering: retrying tethering if necessary", v5, 2u);
  }
  sub_100C44ADC(a1, a2, 36, 0, 1);
}

void non-virtual thunk to'DataServiceController::tetheringAuthRetry_sync(uint64_t a1, uint64_t a2)
{
}

uint64_t DataServiceController::tetheringAuthReset_sync(void **a1, uint64_t a2)
{
  sub_100C44460((uint64_t)a1, a2);
  uint64_t v4 = *(NSObject **)(*(uint64_t (**)(void *, uint64_t))(*a1[6] + 16))(a1[6], a2);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I tethering: on auth reset", v6, 2u);
  }
  return ((uint64_t (*)(void **, uint64_t, uint64_t))(*a1)[231])(a1, a2, 36);
}

uint64_t non-virtual thunk to'DataServiceController::tetheringAuthReset_sync(uint64_t a1, uint64_t a2)
{
  return DataServiceController::tetheringAuthReset_sync((void **)(a1 - 88), a2);
}

void DataServiceController::updateTetheringInternalState_sync(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = a2;
  unsigned int v17 = a2;
  if (a3 != 4)
  {
    uint64_t v6 = *(void *)(a1 + 4464);
    if (!v6) {
      goto LABEL_12;
    }
    uint64_t v7 = a1 + 4464;
    do
    {
      int v8 = *(_DWORD *)(v6 + 28);
      BOOL v9 = v8 < (int)a2;
      if (v8 >= (int)a2) {
        uint64_t v10 = (uint64_t *)v6;
      }
      else {
        uint64_t v10 = (uint64_t *)(v6 + 8);
      }
      if (!v9) {
        uint64_t v7 = v6;
      }
      uint64_t v6 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 4464 && *(_DWORD *)(v7 + 28) <= (int)a2)
    {
      unsigned int v13 = *(unsigned __int16 *)(v7 + 32);
      int v11 = v13;
      unsigned int v12 = v13 >> 8;
    }
    else
    {
LABEL_12:
      int v11 = 0;
      unsigned int v12 = 0;
    }
    unsigned __int16 v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 256))(a1, a2);
    if (v14 >= 0x100u && (!v12 || v11 != v14))
    {
      uint64_t v18 = &v17;
      *((_WORD *)sub_100A949B8((uint64_t **)(a1 + 4456), (int *)&v17, (uint64_t)&unk_10144E20E, &v18) + 16) = v14;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t, void))(*(void *)a1 + 840))(a1, v17, 24, 0xFFFFFFFFLL, 0);
      uint64_t v4 = v17;
    }
  }
  uint64_t v15 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v4);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    v16[0] = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I tethering: top update", (uint8_t *)v16, 2u);
  }
  sub_100C44ADC(a1, v17, a3, 0, 0);
}

void non-virtual thunk to'DataServiceController::updateTetheringInternalState_sync(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t DataServiceController::updateTetheringInternalState_sync(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)a1 + 1848))(a1, a2, 36);
}

uint64_t non-virtual thunk to'DataServiceController::updateTetheringInternalState_sync(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 - 88) + 1848))();
}

void DataServiceController::updateTetheringInternalState_sync(Registry **this)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, this[13]);
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v4;
  int v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)&buf);
  if (v8)
  {
    uint64_t v9 = v8[3];
    uint64_t v10 = (std::__shared_weak_count *)v8[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v11 = 0;
      if (!v9) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v10 = 0;
  char v11 = 1;
  if (v9)
  {
LABEL_11:
    unsigned int v13 = this[14];
    *(void *)BOOL v54 = this[13];
    *(void *)&v54[8] = v13;
    if (v13) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v13 + 1, 1uLL, memory_order_relaxed);
    }
    subscriber::makeSimSlotRange();
    char v48 = v11;
    long long v49 = v10;
    if (*(void *)&v54[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v54[8]);
    }
    uint64_t v15 = (unsigned int *)*((void *)&buf + 1);
    unsigned __int16 v14 = (unsigned int *)buf;
    if ((void)buf == *((void *)&buf + 1)) {
      goto LABEL_68;
    }
    uint64_t v16 = v56;
    while ((v16(*v14) & 1) == 0)
    {
      if (++v14 == v15)
      {
        unsigned __int16 v14 = v15;
        break;
      }
    }
    uint64_t v50 = (unsigned int *)*((void *)&buf + 1);
    if (v14 == *((unsigned int **)&buf + 1))
    {
LABEL_68:
      uint64_t v10 = v49;
      char v11 = v48;
      goto LABEL_69;
    }
    BOOL v51 = (char **)(this + 552);
    while (1)
    {
      uint64_t v17 = *v14;
      uint64_t v18 = (NSObject **)(*(uint64_t (**)(Registry *, uint64_t))(*(void *)this[6] + 16))(this[6], v17);
      uint64_t v52 = 0;
      uint64_t v53 = 0;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 8))(&v52, v9, v17);
      if (!v52) {
        break;
      }
      uint64_t v19 = *v51;
      if (!*v51) {
        goto LABEL_33;
      }
      int v20 = (char **)(this + 552);
      do
      {
        int v21 = *((_DWORD *)v19 + 8);
        BOOL v22 = v21 < (int)v17;
        if (v21 >= (int)v17) {
          uint64_t v23 = (char **)v19;
        }
        else {
          uint64_t v23 = (char **)(v19 + 8);
        }
        if (!v22) {
          int v20 = (char **)v19;
        }
        uint64_t v19 = *v23;
      }
      while (*v23);
      if (v20 == v51 || (int)v17 < *((_DWORD *)v20 + 8))
      {
LABEL_33:
        int v24 = *v18;
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)BOOL v54 = 0;
          uint64_t v25 = v24;
          uint64_t v26 = "#I tethering: No info yet";
          goto LABEL_37;
        }
LABEL_39:
        sub_100C44460((uint64_t)this, v17);
        for (uint64_t i = 0; i != 2; ++i)
          (*((void (**)(Registry **, uint64_t, void, void))*this + 230))(this, v17, dword_10155B0D0[i], 0);
        goto LABEL_41;
      }
      if (!sub_10001D294((unsigned __int8 *)v20 + 48, (unsigned __int8 *)(v52 + 24)))
      {
        uint64_t v31 = *v18;
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_39;
        }
        char v32 = (char *)*((unsigned __int8 *)v20 + 71);
        BOOL v33 = (char)v32 < 0;
        if ((char)v32 < 0) {
          char v32 = v20[7];
        }
        if (v33) {
          uint64_t v34 = v20[6];
        }
        else {
          uint64_t v34 = (const char *)(v20 + 6);
        }
        uint64_t v35 = (const char *)(v52 + 24);
        uint64_t v36 = *(unsigned __int8 *)(v52 + 47);
        int v37 = (char)v36;
        if ((v36 & 0x80u) != 0) {
          uint64_t v36 = *(void *)(v52 + 32);
        }
        if (v37 < 0) {
          uint64_t v35 = *(const char **)(v52 + 24);
        }
        if (v32) {
          uint64_t v38 = v34;
        }
        else {
          uint64_t v38 = "<invalid>";
        }
        if (v36) {
          int v39 = v35;
        }
        else {
          int v39 = "<invalid>";
        }
        *(_DWORD *)BOOL v54 = 136315394;
        *(void *)&v54[4] = v38;
        *(_WORD *)&v54[12] = 2080;
        *(void *)&v54[14] = v39;
        uint64_t v25 = v31;
        uint64_t v26 = "#I tethering: old personality %s, new personality %s";
        uint32_t v28 = 22;
LABEL_38:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, v54, v28);
        goto LABEL_39;
      }
LABEL_41:
      if (v53) {
        sub_10004D2C8(v53);
      }
      int v30 = v14 + 1;
      unsigned __int16 v14 = v15;
      if (v30 != v15)
      {
        unsigned __int16 v14 = v30;
        while ((v16(*v14) & 1) == 0)
        {
          if (++v14 == v15)
          {
            unsigned __int16 v14 = v15;
            break;
          }
        }
      }
      if (v14 == v50) {
        goto LABEL_68;
      }
    }
    uint64_t v27 = *v18;
    if (!os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_39;
    }
    *(_WORD *)BOOL v54 = 0;
    uint64_t v25 = v27;
    uint64_t v26 = "#N tethering: No Personality yet";
LABEL_37:
    uint32_t v28 = 2;
    goto LABEL_38;
  }
LABEL_7:
  unsigned int v12 = this[5];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "adjustTetheringPersonalities";
    _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "%s: tethering: No Personality Shop !", (uint8_t *)&buf, 0xCu);
  }
LABEL_69:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  uint64_t v40 = this[14];
  *(void *)BOOL v54 = this[13];
  *(void *)&v54[8] = v40;
  if (v40) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v40 + 1, 1uLL, memory_order_relaxed);
  }
  subscriber::makeSimSlotRange();
  if (*(void *)&v54[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v54[8]);
  }
  uint32_t v41 = (unsigned int *)*((void *)&buf + 1);
  BOOL v42 = (unsigned int *)buf;
  if ((void)buf != *((void *)&buf + 1))
  {
    char v43 = v56;
    while ((v43(*v42) & 1) == 0)
    {
      if (++v42 == v41)
      {
        BOOL v42 = v41;
        break;
      }
    }
    uint64_t v44 = (unsigned int *)*((void *)&buf + 1);
    while (v42 != v44)
    {
      uint64_t v45 = *v42;
      uint64_t v46 = *(NSObject **)(*(uint64_t (**)(Registry *, uint64_t))(*(void *)this[6] + 16))(this[6], v45);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)BOOL v54 = 0;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I tethering: supreme update", v54, 2u);
      }
      (*((void (**)(Registry **, uint64_t))*this + 232))(this, v45);
      uint64_t v47 = v42 + 1;
      BOOL v42 = v41;
      if (v47 != v41)
      {
        BOOL v42 = v47;
        while ((v43(*v42) & 1) == 0)
        {
          if (++v42 == v41)
          {
            BOOL v42 = v41;
            break;
          }
        }
      }
    }
  }
}

void sub_100C47038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_10004D2C8(a19);
  }
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C470C4(uint64_t a1)
{
  uint64_t v2 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I tethering: authentication start (2)", v6, 2u);
  }
  uint64_t v3 = *(void *)(a1 + 40);
  uint64_t v4 = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 48))(v3);
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, void, void))(*(void *)v3 + 88))(v3, "authenticateWirelessModem", v4, 0, 0);
}

uint64_t sub_100C47194(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C471B0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t DataServiceController::lowLatencyDedicatedTetheringApnAllowed_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v27 = 0;
  uint32_t v28 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a1 + 104));
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v29 = v7;
  char v11 = sub_10004D37C(&v6[1].__m_.__sig, &v29);
  if (v11)
  {
    uint64_t v13 = v11[3];
    unsigned int v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  unsigned int v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 8))(&v27, v13, a2);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v27)
  {
    uint64_t v15 = sub_100046F68(a1 + 1048, (void **)(v27 + 24));
    if ((void **)(a1 + 1056) != v15)
    {
      if ((*((unsigned char *)v15 + 58) & 2) == 0)
      {
        unsigned int v16 = 1;
LABEL_15:
        int v17 = 1;
        goto LABEL_29;
      }
      int v20 = (char *)v15[9];
      uint64_t v18 = v15 + 9;
      char v19 = v20;
      if (v20)
      {
        int v21 = v18;
        do
        {
          int v22 = *((_DWORD *)v19 + 7);
          BOOL v23 = v22 < 17;
          if (v22 >= 17) {
            int v24 = (void **)v19;
          }
          else {
            int v24 = (void **)(v19 + 8);
          }
          if (!v23) {
            int v21 = (void **)v19;
          }
          char v19 = (char *)*v24;
        }
        while (*v24);
        if (v21 != v18 && *((int *)v21 + 7) <= 17)
        {
          unsigned int v25 = *((_DWORD *)v21 + 8);
          if (v25 - 5 <= 0xFFFFFFFD)
          {
            unsigned int v16 = (v25 > 6) | (0x1Du >> v25) & 1;
            goto LABEL_15;
          }
        }
      }
    }
  }
  unsigned int v16 = 0;
  int v17 = 0;
LABEL_29:
  if (v28) {
    sub_10004D2C8(v28);
  }
  return v16 | (v17 << 8);
}

void sub_100C47390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t non-virtual thunk to'DataServiceController::lowLatencyDedicatedTetheringApnAllowed_sync@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  return DataServiceController::lowLatencyDedicatedTetheringApnAllowed_sync(a1 - 56, a2, a3);
}

void DataServiceController::dumpTetheringStatus(DataServiceController *this)
{
  uint64_t v4 = (char *)*((void *)this + 551);
  uint64_t v5 = (char *)this + 4416;
  if (v4 != (char *)this + 4416)
  {
    unint64_t v1 = (unint64_t)dword_10155B0D0;
    do
    {
      for (uint64_t i = 0; i != 2; ++i)
      {
        uint64_t v7 = dword_10155B0D0[i];
        sub_100AE4FBC(*((void *)this + 19), dword_10155B0D0[i], (uint64_t)buf);
        sub_100C42ACC((uint64_t)this, v7, (uint64_t)"DATA:", (uint64_t)buf);
        sub_100AE6DD8((uint64_t)&v49);
      }
      int v8 = *((void *)this + 5);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = subscriber::asString();
        unint64_t v2 = v2 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)v4 + 20);
        uint64_t v10 = asStringBool();
        uint64_t v11 = asString();
        unsigned int v12 = v4 + 48;
        uint64_t v13 = v4[71];
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = *((void *)v4 + 7);
        }
        if (v14 < 0) {
          unsigned int v12 = (const char *)*((void *)v4 + 6);
        }
        *(_DWORD *)long long buf = 136315906;
        if (!v13) {
          unsigned int v12 = "<invalid>";
        }
        *(void *)&uint8_t buf[4] = v9;
        __int16 v45 = 2080;
        uint64_t v46 = v10;
        __int16 v47 = 2080;
        uint64_t v48 = v11;
        __int16 v49 = 2080;
        uint64_t v50 = v12;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I DATA:: fTetheringInternalState[%s] = %s / %s, for %s", buf, 0x2Au);
      }
      uint64_t v15 = (char *)*((void *)v4 + 1);
      if (v15)
      {
        do
        {
          unsigned int v16 = v15;
          uint64_t v15 = *(char **)v15;
        }
        while (v15);
      }
      else
      {
        do
        {
          unsigned int v16 = (char *)*((void *)v4 + 2);
          BOOL v17 = *(void *)v16 == (void)v4;
          uint64_t v4 = v16;
        }
        while (!v17);
      }
      uint64_t v4 = v16;
    }
    while (v16 != v5);
  }
  uint64_t v18 = (DataServiceController *)*((void *)this + 554);
  if (v18 != (DataServiceController *)((char *)this + 4440))
  {
    do
    {
      unint64_t v1 = *((void *)this + 5);
      if (os_log_type_enabled((os_log_t)v1, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v19 = subscriber::asString();
        uint64_t v20 = asStringBool(*((unsigned char *)v18 + 40));
        uint64_t v21 = asStringBool(*((void *)v18 + 6) != 0);
        int v22 = (const char *)*((void *)v18 + 7);
        uint64_t v23 = asStringBool(*((unsigned char *)v18 + 64));
        uint64_t v24 = asStringBool(*((unsigned char *)v18 + 65));
        uint64_t v25 = asString();
        *(_DWORD *)long long buf = 136316674;
        *(void *)&uint8_t buf[4] = v19;
        __int16 v45 = 2080;
        uint64_t v46 = v20;
        __int16 v47 = 2080;
        uint64_t v48 = v21;
        __int16 v49 = 2048;
        uint64_t v50 = v22;
        __int16 v51 = 2080;
        uint64_t v52 = v23;
        __int16 v53 = 2080;
        uint64_t v54 = v24;
        __int16 v55 = 2080;
        uint64_t v56 = v25;
        _os_log_impl((void *)&_mh_execute_header, (os_log_t)v1, OS_LOG_TYPE_DEFAULT, "#I DATA:: fTetheringAuthState[%s] = fTetheringAuthStarted = %s, fAuthBackoffTimer active: %s, period: %lu, stop: %s, final: %s, prevErr: %s", buf, 0x48u);
      }
      uint64_t v26 = (DataServiceController *)*((void *)v18 + 1);
      if (v26)
      {
        do
        {
          uint64_t v27 = v26;
          uint64_t v26 = *(DataServiceController **)v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          uint64_t v27 = (DataServiceController *)*((void *)v18 + 2);
          BOOL v17 = *(void *)v27 == (void)v18;
          uint64_t v18 = v27;
        }
        while (!v17);
      }
      uint64_t v18 = v27;
    }
    while (v27 != (DataServiceController *)((char *)this + 4440));
  }
  uint32_t v28 = (DataServiceController *)*((void *)this + 557);
  unint64_t v29 = (DataServiceController *)4464;
  if (v28 != (DataServiceController *)((char *)this + 4464))
  {
    do
    {
      int v30 = *((void *)this + 5);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v31 = subscriber::asString();
        unint64_t v1 = v1 & 0xFFFFFFFFFFFF0000 | *((unsigned __int16 *)v28 + 16);
        uint64_t v32 = asStringBool();
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = v31;
        __int16 v45 = 2080;
        uint64_t v46 = v32;
        _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I DATA:: fDedicatedLLApnAllowed[%s] = %s", buf, 0x16u);
      }
      BOOL v33 = (DataServiceController *)*((void *)v28 + 1);
      if (v33)
      {
        do
        {
          unint64_t v29 = v33;
          BOOL v33 = *(DataServiceController **)v33;
        }
        while (v33);
      }
      else
      {
        do
        {
          unint64_t v29 = (DataServiceController *)*((void *)v28 + 2);
          BOOL v17 = *(void *)v29 == (void)v28;
          uint32_t v28 = v29;
        }
        while (!v17);
      }
      uint32_t v28 = v29;
    }
    while (v29 != (DataServiceController *)((char *)this + 4464));
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v29, *((Registry **)this + 13));
  uint64_t v35 = ServiceMap;
  if (v36 < 0)
  {
    int v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v38 = 5381;
    do
    {
      uint64_t v36 = v38;
      unsigned int v39 = *v37++;
      uint64_t v38 = (33 * v38) ^ v39;
    }
    while (v39);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v36;
  uint64_t v40 = sub_10004D37C(&v35[1].__m_.__sig, (unint64_t *)buf);
  if (v40)
  {
    uint64_t v42 = v40[3];
    uint32_t v41 = (std::__shared_weak_count *)v40[4];
    if (v41)
    {
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v35);
      atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v41);
      char v43 = 0;
      goto LABEL_45;
    }
  }
  else
  {
    uint64_t v42 = 0;
  }
  std::mutex::unlock(v35);
  uint32_t v41 = 0;
  char v43 = 1;
LABEL_45:
  (*(void (**)(uint64_t))(*(void *)v42 + 56))(v42);
  if ((v43 & 1) == 0) {
    sub_10004D2C8(v41);
  }
}

void sub_100C4786C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void DataServiceController::handlePhsClients_sync(DataServiceController *this, int a2)
{
  uint64_t v4 = *((unsigned int *)this + 269);
  uint64_t v5 = (*(uint64_t (**)(DataServiceController *))(*(void *)this + 1896))(this);
  uint64_t v6 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 16))(*((void *)this + 6), v5);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v18) = 67109376;
    HIDWORD(v18) = a2;
    LOWORD(v19) = 1024;
    *(_DWORD *)((char *)&v19 + 2) = v4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I tethering: PHS clients: %d ==>> %d", (uint8_t *)&v18, 0xEu);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)this + 14);
  uint64_t v18 = *((void *)this + 13);
  uint64_t v19 = v7;
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char isValidSimSlot = subscriber::isValidSimSlot();
  if (v19) {
    sub_10004D2C8(v19);
  }
  if ((isValidSimSlot & 1) == 0)
  {
    int v14 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 16))(*((void *)this + 6), v5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v18) = 0;
    uint64_t v15 = "#E tethering: invalid sim slot for BB PHS update";
LABEL_21:
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, (uint8_t *)&v18, 2u);
    return;
  }
  if (!sub_100AF2240(*((void *)this + 18), v5))
  {
    int v14 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 16))(*((void *)this + 6), v5);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    LOWORD(v18) = 0;
    uint64_t v15 = "#E tethering: no data model for BB PHS update";
    goto LABEL_21;
  }
  uint64_t v9 = sub_100AEFE40(*((void *)this + 18), v5);
  uint64_t v10 = *(void *)(v9 + 24);
  uint64_t v11 = *(std::__shared_weak_count **)(v9 + 32);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v10)
  {
    unsigned int v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**((void **)this + 6) + 16))(*((void *)this + 6), v5);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E tethering: data driver is empty for BB PHS update", (uint8_t *)&v18, 2u);
    }
    goto LABEL_30;
  }
  (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 904))(v10, v4);
  if (a2 || (int)v4 < 1)
  {
    if (a2 < 1 || v4) {
      goto LABEL_30;
    }
    BOOL v17 = *((void *)this + 5);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v18) = 67109376;
      HIDWORD(v18) = a2;
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Enable coalescing when all client are detached from PHS: oldNumClients = %d, newNumClients = %d", (uint8_t *)&v18, 0xEu);
    }
    uint64_t v13 = 1;
  }
  else
  {
    unsigned int v12 = *((void *)this + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = 67109376;
      LOWORD(v19) = 1024;
      *(_DWORD *)((char *)&v19 + 2) = v4;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Disable coalescing when at least one client is connected to PHS: oldNumClients = %d, newNumClients = %d", (uint8_t *)&v18, 0xEu);
    }
    uint64_t v13 = 0;
  }
  (*(void (**)(DataServiceController *, uint64_t))(*(void *)this + 1192))(this, v13);
LABEL_30:
  if (v11) {
    sub_10004D2C8(v11);
  }
}

void sub_100C47CA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C47CD8(uint64_t a1, int a2)
{
  unint64_t v2 = *(void *)(a1 + 32);
  if (v2 < 0x19) {
    a2 = 1;
  }
  if (v2 < 0x32) {
    int v4 = a2;
  }
  else {
    int v4 = 0;
  }
  if ((v4 & 1) == 0)
  {
    operator delete(**(void ***)(a1 + 8));
    *(void *)(a1 + 8) += 8;
    *(void *)(a1 + 32) -= 25;
  }
  return v4 ^ 1u;
}

void sub_100C47D38(void **a1)
{
  uint64_t v3 = a1[3];
  uint64_t v2 = (uint64_t)(a1 + 3);
  int v4 = a1[1];
  uint64_t v5 = a1[2];
  unint64_t v6 = (v5 - v4) >> 3;
  if (v6 >= (v3 - (unsigned char *)*a1) >> 3) {
    return;
  }
  if (v5 == v4)
  {
    uint64_t v10 = 0;
    uint64_t v7 = 0;
    goto LABEL_8;
  }
  uint64_t v7 = (char *)sub_10004EF74(v2, v6);
  int v8 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v10 = &v7[8 * v9];
  uint64_t v11 = v5 - v8;
  if (v5 == v8)
  {
LABEL_8:
    int v14 = v5;
    goto LABEL_9;
  }
  uint64_t v12 = 0;
  uint64_t v13 = 8 * (v11 >> 3);
  do
  {
    *(void *)&v7[v12] = *(void *)&v8[v12];
    v12 += 8;
  }
  while (v13 != v12);
  uint64_t v5 = a1[1];
  int v14 = a1[2];
LABEL_9:
  int64_t v15 = v14 - v5;
  unsigned int v16 = *a1;
  *a1 = v7;
  a1[1] = v7;
  a1[2] = &v7[v15];
  a1[3] = v10;
  if (v16)
  {
    operator delete(v16);
  }
}

uint64_t sub_100C47E0C(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)
    || *(unsigned __int8 *)(a1 + 12) != *(unsigned __int8 *)(a2 + 12)
    || *(_DWORD *)(a1 + 16) != *(_DWORD *)(a2 + 16)
    || *(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || !sub_10001D294((unsigned __int8 *)(a1 + 24), (unsigned __int8 *)(a2 + 24))
    || !sub_10001D294((unsigned __int8 *)(a1 + 48), (unsigned __int8 *)(a2 + 48))
    || *(_DWORD *)(a1 + 72) != *(_DWORD *)(a2 + 72)
    || *(unsigned __int8 *)(a1 + 76) != *(unsigned __int8 *)(a2 + 76)
    || *(unsigned __int8 *)(a1 + 77) != *(unsigned __int8 *)(a2 + 77)
    || !sub_100C47F18((void *)(a1 + 80), (void *)(a2 + 80)))
  {
    return 0;
  }

  return sub_100C48074(a1 + 128, (void *)(a2 + 128));
}

uint64_t sub_100C47F18(void *a1, void *a2)
{
  uint64_t v2 = a1[5];
  if (v2 == a2[5])
  {
    unint64_t v3 = a1[4];
    unint64_t v4 = v3 / 0x19;
    uint64_t v5 = a1[1];
    if (a1[2] == v5)
    {
      unint64_t v6 = 0;
      unint64_t v7 = 0;
    }
    else
    {
      unint64_t v6 = (_DWORD *)(*(void *)(v5 + 8 * v4) + 160 * (v3 % 0x19));
      unint64_t v7 = *(void *)(v5 + 8 * ((v3 + v2) / 0x19)) + 160 * ((v3 + v2) % 0x19);
    }
    unint64_t v8 = a2[4];
    uint64_t v9 = a2[1];
    uint64_t v10 = (void *)(v9 + 8 * (v8 / 0x19));
    if (a2[2] == v9) {
      uint64_t v11 = 0;
    }
    else {
      uint64_t v11 = (_DWORD *)(*v10 + 160 * (v8 % 0x19));
    }
    if (v6 == (_DWORD *)v7) {
      return 1;
    }
    uint64_t v12 = (void *)(v5 + 8 * v4);
    while (*v6 == *v11)
    {
      uint64_t result = sub_100C48144((uint64_t)(v6 + 2), (uint64_t)(v11 + 2));
      if (!result) {
        return result;
      }
      v6 += 40;
      if ((_DWORD *)((char *)v6 - *v12) == (_DWORD *)4000)
      {
        int v14 = (_DWORD *)v12[1];
        ++v12;
        unint64_t v6 = v14;
      }
      v11 += 40;
      if ((_DWORD *)((char *)v11 - *v10) == (_DWORD *)4000)
      {
        int64_t v15 = (_DWORD *)v10[1];
        ++v10;
        uint64_t v11 = v15;
      }
      if (v6 == (_DWORD *)v7) {
        return 1;
      }
    }
  }
  return 0;
}

uint64_t sub_100C48074(uint64_t a1, void *a2)
{
  if (*(void *)(a1 + 16) != a2[2]) {
    return 0;
  }
  uint64_t v2 = (void *)(a1 + 8);
  unint64_t v3 = *(void **)a1;
  if (*(void *)a1 == a1 + 8) {
    return 1;
  }
  unint64_t v4 = (void *)*a2;
  do
  {
    uint64_t result = TrafficDescriptor::operator==();
    if (!result) {
      break;
    }
    unint64_t v6 = (void *)v3[1];
    unint64_t v7 = v3;
    if (v6)
    {
      do
      {
        unint64_t v3 = v6;
        unint64_t v6 = (void *)*v6;
      }
      while (v6);
    }
    else
    {
      do
      {
        unint64_t v3 = (void *)v7[2];
        BOOL v8 = *v3 == (void)v7;
        unint64_t v7 = v3;
      }
      while (!v8);
    }
    uint64_t v9 = (void *)v4[1];
    if (v9)
    {
      do
      {
        uint64_t v10 = v9;
        uint64_t v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        uint64_t v10 = (void *)v4[2];
        BOOL v8 = *v10 == (void)v4;
        unint64_t v4 = v10;
      }
      while (!v8);
    }
    unint64_t v4 = v10;
  }
  while (v3 != v2);
  return result;
}

uint64_t sub_100C48144(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2
    || *(_DWORD *)(a1 + 4) != *(_DWORD *)(a2 + 4)
    || *(void *)(a1 + 8) != *(void *)(a2 + 8))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (!*(unsigned char *)(a2 + 72) || (sub_100C48218(a1 + 16, a2 + 16) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 72))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if (!*(unsigned char *)(a2 + 136) || (sub_100C48218(a1 + 80, a2 + 80) & 1) == 0) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 136))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 145))
  {
    if (*(unsigned char *)(a2 + 145) && *(unsigned __int8 *)(a1 + 144) == *(unsigned __int8 *)(a2 + 144)) {
      return 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 145))
  {
    return 1;
  }
  return 0;
}

uint64_t sub_100C48218(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 4))
  {
    if (!*(unsigned char *)(a2 + 4) || *(_DWORD *)a1 != *(_DWORD *)a2) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 4))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 12))
  {
    if (!*(unsigned char *)(a2 + 12) || *(_DWORD *)(a1 + 8) != *(_DWORD *)(a2 + 8)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 12))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 20))
  {
    if (*(unsigned char *)(a2 + 20) && *(_DWORD *)(a1 + 16) == *(_DWORD *)(a2 + 16)) {
      return sub_100C482A0(a1 + 24, a2 + 24);
    }
  }
  else if (!*(unsigned char *)(a2 + 20))
  {
    return sub_100C482A0(a1 + 24, a2 + 24);
  }
  return 0;
}

uint64_t sub_100C482A0(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(unsigned char *)(a2 + 24))
    {
      uint64_t v2 = *(void *)a1;
      uint64_t v3 = *(void *)(a1 + 8);
      uint64_t v4 = *(void *)a2;
      if (v3 - *(void *)a1 == *(void *)(a2 + 8) - *(void *)a2)
      {
        while (v2 != v3)
        {
          uint64_t result = sub_100C48320(v2, v4);
          if (!result) {
            return result;
          }
          v2 += 160;
          v4 += 160;
        }
        return 1;
      }
    }
    return 0;
  }
  return !*(unsigned char *)(a2 + 24);
}

uint64_t sub_100C48320(uint64_t a1, uint64_t a2)
{
  if (*(_DWORD *)a1 != *(_DWORD *)a2 || *(void *)(a1 + 8) != *(void *)(a2 + 8)) {
    return 0;
  }
  int v4 = *(unsigned __int8 *)(a2 + 17);
  if (*(unsigned char *)(a1 + 17)) {
    BOOL v5 = v4 == 0;
  }
  else {
    BOOL v5 = 1;
  }
  if (v5)
  {
    if ((*(unsigned char *)(a1 + 17) != 0) != (v4 != 0)) {
      return 0;
    }
  }
  else if (*(unsigned __int8 *)(a1 + 16) != *(unsigned __int8 *)(a2 + 16))
  {
    return 0;
  }
  if (*(_DWORD *)(a1 + 20) != *(_DWORD *)(a2 + 20)
    || *(_DWORD *)(a1 + 24) != *(_DWORD *)(a2 + 24)
    || *(_DWORD *)(a1 + 28) != *(_DWORD *)(a2 + 28))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (!*(unsigned char *)(a2 + 80) || !sub_100C484CC(a1 + 32, a2 + 32)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 80))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if (!*(unsigned char *)(a2 + 136) || !sub_100C484CC(a1 + 88, a2 + 88)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 136))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 145))
  {
    if (!*(unsigned char *)(a2 + 145) || *(unsigned __int8 *)(a1 + 144) != *(unsigned __int8 *)(a2 + 144)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 145))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 147))
  {
    if (!*(unsigned char *)(a2 + 147) || *(unsigned __int8 *)(a1 + 146) != *(unsigned __int8 *)(a2 + 146)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 147))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 152))
  {
    if (!*(unsigned char *)(a2 + 152) || *(_DWORD *)(a1 + 148) != *(_DWORD *)(a2 + 148)) {
      return 0;
    }
  }
  else if (*(unsigned char *)(a2 + 152))
  {
    return 0;
  }
  if (*(unsigned char *)(a1 + 157))
  {
    if (*(unsigned char *)(a2 + 157) && *(unsigned __int8 *)(a1 + 156) == *(unsigned __int8 *)(a2 + 156)) {
      return 1;
    }
  }
  else if (!*(unsigned char *)(a2 + 157))
  {
    return 1;
  }
  return 0;
}

BOOL sub_100C484CC(uint64_t a1, uint64_t a2)
{
  BOOL result = sub_100C48578((unsigned __int8 *)a1, (unsigned __int8 *)a2);
  if (result)
  {
    if (*(unsigned char *)(a1 + 33))
    {
      if (!*(unsigned char *)(a2 + 33) || *(unsigned __int8 *)(a1 + 32) != *(unsigned __int8 *)(a2 + 32)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 33))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 36))
    {
      if (!*(unsigned char *)(a2 + 36) || *(unsigned __int16 *)(a1 + 34) != *(unsigned __int16 *)(a2 + 34)) {
        return 0;
      }
    }
    else if (*(unsigned char *)(a2 + 36))
    {
      return 0;
    }
    if (*(unsigned char *)(a1 + 40))
    {
      if (*(unsigned char *)(a2 + 40) && *(unsigned __int16 *)(a1 + 38) == *(unsigned __int16 *)(a2 + 38)) {
        return 1;
      }
    }
    else if (!*(unsigned char *)(a2 + 40))
    {
      return 1;
    }
    return 0;
  }
  return result;
}

BOOL sub_100C48578(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (!a1[24]) {
    return !a2[24];
  }
  if (!a2[24]) {
    return 0;
  }
  uint64_t v2 = a1[23];
  if ((v2 & 0x80u) == 0) {
    uint64_t v3 = a1[23];
  }
  else {
    uint64_t v3 = *((void *)a1 + 1);
  }
  uint64_t v4 = a2[23];
  int v5 = (char)v4;
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  if (v3 != v4) {
    return 0;
  }
  if (v5 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v2 & 0x80) != 0) {
    return !memcmp(*(const void **)a1, a2, *((void *)a1 + 1));
  }
  if (a1[23])
  {
    while (*a1 == *a2)
    {
      ++a1;
      ++a2;
      if (!--v2) {
        return 1;
      }
    }
    return 0;
  }
  return 1;
}

uint64_t sub_100C48620(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100C48630(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v19, 0, sizeof(v19));
  memset(v6, 0, sizeof(v6));
  long long v20 = 0u;
  long long v7 = 0uLL;
  uint64_t v21 = 0;
  uint64_t v23 = 0;
  long long v22 = 0uLL;
  long long v8 = 0uLL;
  long long v9 = 0uLL;
  uint64_t v25 = 0;
  long long v24 = 0u;
  memset(v10, 0, sizeof(v10));
  char v26 = 0;
  uint64_t v27 = 0;
  uint64_t v28 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  uint64_t v15 = 0;
  uint64_t v16 = 0;
  uint64_t v34 = 0;
  long long v33 = 0uLL;
  long long v17 = 0uLL;
  uint64_t v18 = 0;
  char v35 = -1;
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v19);
  sub_10000BDF8((uint64_t)v19);
  return sub_10000BDF8((uint64_t)v6);
}

void sub_100C48758(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
}

double sub_100C48774@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *(_OWORD *)((char *)a1 + 105) = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

double sub_100C48790@<D0>(uint64_t a1@<X8>)
{
  *(void *)(a1 + 144) = 0;
  double result = 0.0;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)a1 = 0u;
  return result;
}

void sub_100C487B0(unsigned char *a1@<X8>)
{
  *a1 = 0;
  a1[24] = 0;
}

void sub_100C487BC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C487C8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C487D4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_100C487E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000607A8(a3, 0);
}

void sub_100C487F4(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48800(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48808(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C48814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v5 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 48))(v3, __p);
  if (SHIBYTE(v5) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C48888(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C488A4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C488B0(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C488BC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_100C488C8()
{
  return 0;
}

uint64_t sub_100C488D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1006948DC(a3, 0);
}

const void **sub_100C488DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v3 + 48))(v3, &v5);
  return sub_1000558F4(&v5);
}

void sub_100C48944(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100C48958(void *a1@<X8>)
{
  *a1 = 0;
}

const void **sub_100C48960@<X0>(uint64_t a1@<X8>)
{
  *(unsigned char *)a1 = 0;
  uint64_t v2 = 0;
  uint64_t v3 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100057D78(&v2);
  return sub_100057D78(&v3);
}

const void **sub_100C48998(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[0] = 0;
  uint64_t v5 = 0;
  unint64_t v6 = 0;
  long long v8 = 0;
  long long v9 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v3 + 48))(v3, v7);
  sub_100057D78(&v9);
  sub_100057D78(&v8);
  sub_100057D78(&v5);
  return sub_100057D78(&v6);
}

void sub_100C48A34(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, const void *);
  sub_100057D78(v3);
  sub_100057D78(v2);
  sub_100057D78((const void **)va);
  sub_100057D78((const void **)va1);
  _Unwind_Resume(a1);
}

void sub_100C48A60(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48A68(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100C48A78()
{
  return 0;
}

const void **sub_100C48A80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v3 + 48))(v3, &v5);
  return sub_1000558F4(&v5);
}

void sub_100C48AE8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_100C48B00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = 0;
  uint64_t v3 = *(void *)(a3 + 24);
  if (!v3) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, const void **))(*(void *)v3 + 48))(v3, &v5);
  return sub_100057D78(&v5);
}

void sub_100C48B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100C48B7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 48))(v4, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C48BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C48C0C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v6 = 0;
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v4 + 48))(v4, __p);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C48C80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C48C9C(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48CA4(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48CAC(void *a1@<X8>)
{
  *a1 = 0;
}

void sub_100C48CB4(void *a1@<X8>)
{
  *a1 = 0;
}

uint64_t sub_100C48CBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000607A8(a4, 0);
}

uint64_t sub_100C48CC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000607A8(a4, 0);
}

uint64_t sub_100C48CD4()
{
  return 0;
}

void sub_100C48CE4(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

void sub_100C48CF4(CarrierBundleInterface *a1)
{
  CarrierBundleInterface::~CarrierBundleInterface(a1);

  operator delete();
}

void sub_100C48D30(uint64_t a1)
{
  sub_100B133E0(a1);

  operator delete();
}

const char *sub_100C48D68()
{
  return "Mav4GW";
}

void sub_100C48D74(uint64_t a1@<X1>, int *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x288uLL);
  sub_100C48DF0(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000B3BC8((uint64_t)a3, v6 + 17, (uint64_t)(v6 + 3));
}

void sub_100C48DDC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100C48DF0(void *a1, uint64_t a2, int *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A49880;
  sub_100B1315C((uint64_t)(a1 + 3), a2, *a3);
  a1[3] = &off_101A497E8;
  return a1;
}

void sub_100C48E58(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C48E6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A49880;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C48E8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A49880;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C48EE0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

double sub_100C48F08@<D0>(void *a1@<X1>, NSObject **a2@<X2>, _OWORD *a3@<X8>)
{
  uint64_t v5 = *a2;
  uint64_t v6 = operator new(0x168uLL);
  v6[1] = 0;
  v6[2] = 0;
  void *v6 = off_101A49910;
  uint64_t v7 = (uint64_t)(v6 + 3);
  *(void *)&long long v9 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_10087D4A0(v7, a1, (dispatch_object_t *)&v9);
  if (v5) {
    dispatch_release(v5);
  }
  *(void *)&long long v9 = v6 + 3;
  *((void *)&v9 + 1) = v6;
  sub_1000B3BC8((uint64_t)&v9, v6 + 4, v7);
  double result = *(double *)&v9;
  *a3 = v9;
  return result;
}

void sub_100C48FC0(_Unwind_Exception *a1)
{
  if (v2) {
    dispatch_release(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v4);
  _Unwind_Resume(a1);
}

void sub_100C48FE8(CellularUsageMetricsFactoryInterface *a1)
{
  CellularUsageMetricsFactoryInterface::~CellularUsageMetricsFactoryInterface(a1);

  operator delete();
}

void sub_100C49020(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A49910;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C49040(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A49910;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C49094(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t DataServiceController::load_APNFallbackKernelEventMonitor(DataServiceController *this)
{
  unint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = "load_APNFallbackKernelEventMonitor";
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I %s: APN Fallback is not supported", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t *sub_100C49160(uint64_t a1)
{
  return sub_100C62700(a1, "kVinylOperationSync", (unint64_t)sub_100C49180, 0xFu);
}

void sub_100C49180(Registry **a1, uint64_t a2, uint64_t a3, std::string::size_type a4, std::string::size_type *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  long long v9 = ServiceMap;
  uint64_t v10 = "18VinylTestXpcServer";
  if (((unint64_t)"18VinylTestXpcServer" & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)((unint64_t)"18VinylTestXpcServer" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = (const char *)v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  long long v296 = 0;
  uint64_t v295 = 0;
  std::mutex::lock(ServiceMap);
  buf.__r_.__value_.__r.__words[0] = (std::string::size_type)v10;
  uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&buf);
  if (v14)
  {
    uint64_t v15 = v14[3];
    uint64_t v16 = (std::__shared_weak_count *)v14[4];
    if (v16) {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v15 = 0;
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  uint64_t v295 = v15;
  long long v296 = v16;
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v16);
  }
  if (v15)
  {
    xpc_object_t object = 0;
    buf.__r_.__value_.__r.__words[0] = a4;
    buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kVinylOperation";
    sub_10000CB28((uint64_t)&buf, &object);
    if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_dictionary)
    {
      long long v17 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
      std::string::size_type size = buf.__r_.__value_.__l.__size_;
      ctu::OsLogContext::~OsLogContext(v17);
      if (os_log_type_enabled(size, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, size, OS_LOG_TYPE_ERROR, "No Vinyl request present; dropping",
          (uint8_t *)&buf,
          2u);
      }
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kGetSlot"))
    {
      (**(void (***)(uint64_t))v15)(v15);
      int v21 = VinylSlotIdToInt();
      xpc_object_t v292 = xpc_int64_create(v21);
      if (!v292) {
        xpc_object_t v292 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = *a5;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"Slot";
      sub_100035E70((uint64_t)&buf, &v292, &v293);
      xpc_release(v293);
      xpc_object_t v293 = 0;
      xpc_release(v292);
      xpc_object_t v292 = 0;
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kSetSlot"))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kSetSlot";
      sub_100048BAC((uint64_t)&buf, &v304);
      int v23 = xpc::dyn_cast_or_default((xpc *)&v304, 0, v22);
      xpc_release(v304.__r_.__value_.__l.__data_);
      uint64_t v24 = VinylSlotIdFromInt(v23);
      (*(void (**)(uint64_t, uint64_t))(*(void *)v15 + 8))(v15, v24);
      uint64_t v25 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
      char v26 = buf.__r_.__value_.__l.__size_;
      ctu::OsLogContext::~OsLogContext(v25);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_INFO))
      {
        LOWORD(buf.__r_.__value_.__l.__data_) = 0;
        uint64_t v27 = "Set Slot";
        uint64_t v28 = v26;
        uint32_t v29 = 2;
LABEL_27:
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_INFO, v27, (uint8_t *)&buf, v29);
      }
LABEL_20:
      xpc_release(object);
      uint64_t v16 = v296;
      goto LABEL_21;
    }
    if (xpc_dictionary_get_value(object, "kGetCsn"))
    {
      memset(&buf, 0, 17);
      (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v15 + 16))(&buf, v15);
      if (buf.__r_.__value_.__s.__data_[0])
      {
        xpc_object_t v290 = xpc_data_create((char *)&buf.__r_.__value_.__l.__data_ + 1, 0x10uLL);
        if (!v290) {
          xpc_object_t v290 = xpc_null_create();
        }
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"CSN";
        sub_100035E70((uint64_t)&v304, &v290, &v291);
        xpc_release(v291);
        xpc_object_t v291 = 0;
        xpc_release(v290);
        xpc_object_t v290 = 0;
      }
      else
      {
        xpc_object_t v288 = xpc_null_create();
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"CSN";
        sub_100035E70((uint64_t)&v304, &v288, &v289);
        xpc_release(v289);
        xpc_object_t v289 = 0;
        xpc_release(v288);
        xpc_object_t v288 = 0;
      }
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kActivateProfile"))
    {
      memset(&buf, 0, sizeof(buf));
      if (sub_100C4D4F0(&object, (uint64_t)"kActivateProfile", (uint64_t)&buf))
      {
        char v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&__dst, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = buf;
        }
        std::string::size_type v34 = *a5;
        std::string::size_type v33 = a5[1];
        if (v33) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
        }
        v303[0] = off_101A49AC0;
        v303[1] = v34;
        v303[2] = v33;
        v303[3] = v303;
        (*(void (**)(uint64_t, std::string *, void *))(*(void *)v15 + 32))(v15, &__dst, v303);
        sub_1000C6B58(v303);
        if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_71;
        }
        char v35 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_70;
      }
      xpc_object_t v285 = xpc_string_create("Invalid iccid format or length");
      if (!v285) {
        xpc_object_t v285 = xpc_null_create();
      }
      v304.__r_.__value_.__r.__words[0] = *a5;
      v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
      sub_100035E70((uint64_t)&v304, &v285, &v286);
      xpc_release(v286);
      xpc_object_t v286 = 0;
      xpc_release(v285);
      xpc_object_t v285 = 0;
LABEL_58:
      char v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
LABEL_71:
      if ((v30 & 0x80) == 0) {
        goto LABEL_20;
      }
      uint64_t v40 = (void *)buf.__r_.__value_.__r.__words[0];
LABEL_73:
      operator delete(v40);
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kDeactivateProfile"))
    {
      memset(&buf, 0, sizeof(buf));
      if (!sub_100C4D4F0(&object, (uint64_t)"kDeactivateProfile", (uint64_t)&buf))
      {
        xpc_object_t v282 = xpc_string_create("Invalid iccid format or length");
        if (!v282) {
          xpc_object_t v282 = xpc_null_create();
        }
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&v304, &v282, &v283);
        xpc_release(v283);
        xpc_object_t v283 = 0;
        xpc_release(v282);
        xpc_object_t v282 = 0;
        goto LABEL_58;
      }
      char v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = buf;
      }
      std::string::size_type v39 = *a5;
      std::string::size_type v38 = a5[1];
      if (v38) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v38 + 8), 1uLL, memory_order_relaxed);
      }
      v302[0] = off_101A49B40;
      v302[1] = v39;
      v302[2] = v38;
      v302[3] = v302;
      (*(void (**)(uint64_t, std::string *, void *))(*(void *)v15 + 40))(v15, &__p, v302);
      sub_1000C6B58(v302);
      if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      char v35 = (void *)__p.__r_.__value_.__r.__words[0];
LABEL_70:
      operator delete(v35);
      goto LABEL_71;
    }
    if (xpc_dictionary_get_value(object, "kDeleteUserProfiles"))
    {
      v280[0] = _NSConcreteStackBlock;
      v280[1] = 3321888768;
      v280[2] = sub_100C4D604;
      v280[3] = &unk_101A49960;
      std::string::size_type v31 = a5[1];
      v280[4] = *a5;
      uint64_t v281 = (std::__shared_weak_count *)v31;
      if (v31) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 56))(v15, v280);
      uint64_t v32 = v281;
      if (!v281) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kDeleteProfile"))
    {
      *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
      if (!sub_100C4D744(&object))
      {
        xpc_object_t v276 = xpc_string_create("Invalid profile id format");
        if (!v276) {
          xpc_object_t v276 = xpc_null_create();
        }
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&v304, &v276, &v277);
        xpc_release(v277);
        xpc_object_t v277 = 0;
        xpc_release(v276);
        xpc_object_t v276 = 0;
        goto LABEL_20;
      }
      long long v36 = *(_OWORD *)&buf.__r_.__value_.__l.__data_;
      v278[0] = _NSConcreteStackBlock;
      v278[1] = 3321888768;
      v278[2] = sub_100C4D850;
      v278[3] = &unk_101A49960;
      std::string::size_type v37 = a5[1];
      v278[4] = *a5;
      int v279 = (std::__shared_weak_count *)v37;
      if (v37) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v37 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void, void, void *))(*(void *)v15 + 48))(v15, v36, *((void *)&v36 + 1), v278);
      uint64_t v32 = v279;
      if (!v279) {
        goto LABEL_20;
      }
LABEL_49:
      sub_10004D2C8(v32);
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kGetProfiles"))
    {
      v274[0] = _NSConcreteStackBlock;
      v274[1] = 3321888768;
      v274[2] = sub_100C4D990;
      v274[3] = &unk_101A49990;
      std::string::size_type v41 = a5[1];
      v274[4] = *a5;
      v275 = (std::__shared_weak_count *)v41;
      if (v41) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v41 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 64))(v15, v274);
      uint64_t v32 = v275;
      if (!v275) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kForceGetProfiles"))
    {
      v272[0] = _NSConcreteStackBlock;
      v272[1] = 3321888768;
      v272[2] = sub_100C4DABC;
      v272[3] = &unk_101A49990;
      std::string::size_type v42 = a5[1];
      v272[4] = *a5;
      int v273 = (std::__shared_weak_count *)v42;
      if (v42) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 72))(v15, v272);
      uint64_t v32 = v273;
      if (!v273) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    char v43 = (std::__shared_weak_count *)a5[1];
    v271[0] = *a5;
    v271[1] = v43;
    if (v43) {
      atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BOOL v44 = sub_100C4DD40(&object, (uint64_t)v271, &v295);
    if (v43) {
      sub_10004D2C8(v43);
    }
    if (v44) {
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kGetTapeEid"))
    {
      v269[0] = _NSConcreteStackBlock;
      v269[1] = 3321888768;
      v269[2] = sub_100C4DF7C;
      v269[3] = &unk_101A499C0;
      std::string::size_type v45 = a5[1];
      v269[4] = *a5;
      uint64_t v270 = (std::__shared_weak_count *)v45;
      if (v45) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v45 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 88))(v15, v269);
      uint64_t v32 = v270;
      if (!v270) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kDeleteTapeProfile"))
    {
      memset(&buf, 0, sizeof(buf));
      if (sub_100C4D4F0(&object, (uint64_t)"kDeleteTapeProfile", (uint64_t)&buf))
      {
        char v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&v268, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        }
        else {
          std::string v268 = buf;
        }
        v266[0] = _NSConcreteStackBlock;
        v266[1] = 3321888768;
        v266[2] = sub_100C4E058;
        v266[3] = &unk_101A49960;
        uint64_t v50 = (std::__shared_weak_count *)a5[1];
        v266[4] = *a5;
        uint64_t v267 = v50;
        if (v50) {
          atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, std::string *, void *))(*(void *)v15 + 104))(v15, &v268, v266);
        if (SHIBYTE(v268.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v268.__r_.__value_.__l.__data_);
        }
        if (v267) {
          sub_10004D2C8(v267);
        }
        goto LABEL_71;
      }
      xpc_object_t v264 = xpc_string_create("Invalid iccid format or length");
      if (!v264) {
        xpc_object_t v264 = xpc_null_create();
      }
      v304.__r_.__value_.__r.__words[0] = *a5;
      v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
      sub_100035E70((uint64_t)&v304, &v264, &v265);
      xpc_release(v265);
      xpc_object_t v265 = 0;
      xpc_release(v264);
      xpc_object_t v264 = 0;
      goto LABEL_58;
    }
    if (xpc_dictionary_get_value(object, "kForceGetTapeProfiles"))
    {
      v262[0] = _NSConcreteStackBlock;
      v262[1] = 3321888768;
      v262[2] = sub_100C4E204;
      v262[3] = &unk_101A49990;
      std::string::size_type v46 = a5[1];
      v262[4] = *a5;
      v263 = (std::__shared_weak_count *)v46;
      if (v46) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v46 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 112))(v15, v262);
      uint64_t v32 = v263;
      if (!v263) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kSetNicknameTapeProfile"))
    {
      *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3) = 0;
      LODWORD(v193.__r_.__value_.__l.__data_) = 0;
      *(_DWORD *)((char *)&v211 + 3) = 0;
      LODWORD(v211) = 0;
      v299.__r_.__value_.__r.__words[0] = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kIccid";
      sub_100048BAC((uint64_t)&buf, &v299);
      if (xpc_get_type(v299.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_null)
      {
        xpc_object_t v260 = xpc_string_create("Invalid iccid format");
        if (!v260) {
          xpc_object_t v260 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v260, &v261);
        xpc_release(v261);
        xpc_object_t v261 = 0;
        xpc_release(v260);
        int v52 = 0;
        __int16 v53 = 0;
        int v48 = 0;
        long long __src = 0;
        xpc_object_t v260 = 0;
        goto LABEL_172;
      }
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      __int16 v47 = (void *)v304.__r_.__value_.__l.__size_;
      long long __src = (void *)v304.__r_.__value_.__r.__words[0];
      LODWORD(v193.__r_.__value_.__l.__data_) = v304.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v304.__r_.__value_.__r.__words[2]
                                                                          + 3);
      int v48 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v49 = v304.__r_.__value_.__l.__size_;
        if (v304.__r_.__value_.__l.__size_ == 19) {
          goto LABEL_133;
        }
      }
      else
      {
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) == 19) {
          goto LABEL_133;
        }
        std::string::size_type v49 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
      }
      if (v49 != 20)
      {
        xpc_object_t v258 = xpc_string_create("Invalid iccid length");
        if (!v258) {
          xpc_object_t v258 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v258, &v259);
        xpc_release(v259);
        xpc_object_t v259 = 0;
        xpc_release(v258);
        int v52 = 0;
        __int16 v53 = 0;
        xpc_object_t v258 = 0;
        goto LABEL_172;
      }
LABEL_133:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kNickname";
      sub_100048BAC((uint64_t)&buf, &v257);
      uint64_t v54 = (void *)v299.__r_.__value_.__r.__words[0];
      v299.__r_.__value_.__r.__words[0] = v257;
      std::string::size_type v257 = (std::string::size_type)v54;
      xpc_release(v54);
      std::string::size_type v257 = 0;
      if (xpc_get_type(v299.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_null)
      {
        xpc_object_t v255 = xpc_string_create("Invalid nickname format");
        if (!v255) {
          xpc_object_t v255 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v255, &v256);
        xpc_release(v256);
        xpc_object_t v256 = 0;
        xpc_release(v255);
        int v52 = 0;
        __int16 v53 = 0;
        xpc_object_t v255 = 0;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        xpc::dyn_cast_or_default();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        __int16 v55 = (void *)v304.__r_.__value_.__l.__size_;
        __int16 v53 = (void *)v304.__r_.__value_.__r.__words[0];
        LODWORD(v211) = v304.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v211 + 3) = *(_DWORD *)((char *)&v304.__r_.__value_.__r.__words[2] + 3);
        std::string::size_type v56 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
        int v52 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v56 = v304.__r_.__value_.__l.__size_;
        }
        if (v56 < 0x41)
        {
          if (v48 < 0)
          {
            sub_10004FC84(v250, __src, (unint64_t)v47);
          }
          else
          {
            v250[0] = __src;
            v250[1] = v47;
            *(_DWORD *)uint64_t v251 = v193.__r_.__value_.__l.__data_;
            *(_DWORD *)&v251[3] = *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3);
            char v252 = v48;
          }
          if (v52 < 0)
          {
            sub_10004FC84(v247, v53, (unint64_t)v55);
          }
          else
          {
            v247[0] = v53;
            v247[1] = v55;
            *(_DWORD *)uint64_t v248 = v211;
            *(_DWORD *)&v248[3] = *(_DWORD *)((char *)&v211 + 3);
            char v249 = v52;
          }
          v245[0] = _NSConcreteStackBlock;
          v245[1] = 3321888768;
          v245[2] = sub_100C4E488;
          v245[3] = &unk_101A49960;
          uint64_t v59 = (std::__shared_weak_count *)a5[1];
          v245[4] = *a5;
          v246 = v59;
          if (v59) {
            atomic_fetch_add_explicit(&v59->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void **, void **, void *))(*(void *)v15 + 96))(v15, v250, v247, v245);
          if (v249 < 0) {
            operator delete(v247[0]);
          }
          if (v252 < 0) {
            operator delete(v250[0]);
          }
          if (v246) {
            sub_10004D2C8(v246);
          }
        }
        else
        {
          xpc_object_t v253 = xpc_string_create("Invalid nickname length");
          if (!v253) {
            xpc_object_t v253 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *a5;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
          sub_100035E70((uint64_t)&buf, &v253, &v254);
          xpc_release(v254);
          xpc_object_t v254 = 0;
          xpc_release(v253);
          xpc_object_t v253 = 0;
        }
      }
LABEL_172:
      xpc_release(v299.__r_.__value_.__l.__data_);
LABEL_173:
      if (v52 < 0) {
        operator delete(v53);
      }
      if ((v48 & 0x80000000) == 0) {
        goto LABEL_20;
      }
      uint64_t v40 = __src;
      goto LABEL_73;
    }
    if (xpc_dictionary_get_value(object, "kGetTapeDeviceCapabilities"))
    {
      v243[0] = _NSConcreteStackBlock;
      v243[1] = 3321888768;
      v243[2] = sub_100C4E634;
      v243[3] = &unk_101A499F0;
      std::string::size_type v51 = a5[1];
      v243[4] = *a5;
      v244 = (std::__shared_weak_count *)v51;
      if (v51) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v51 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 120))(v15, v243);
      uint64_t v32 = v244;
      if (!v244) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kGetTapeEuiccInfo1"))
    {
      v241[0] = _NSConcreteStackBlock;
      v241[1] = 3321888768;
      v241[2] = sub_100C4E958;
      v241[3] = &unk_101A499F0;
      std::string::size_type v57 = a5[1];
      v241[4] = *a5;
      uint64_t v242 = (std::__shared_weak_count *)v57;
      if (v57) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v57 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 128))(v15, v241);
      uint64_t v32 = v242;
      if (!v242) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kGetSessionData"))
    {
      v239[0] = _NSConcreteStackBlock;
      v239[1] = 3321888768;
      v239[2] = sub_100C4EBDC;
      v239[3] = &unk_101A49990;
      std::string::size_type v58 = a5[1];
      v239[4] = *a5;
      int v240 = (std::__shared_weak_count *)v58;
      if (v58) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v58 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 176))(v15, v239);
      uint64_t v32 = v240;
      if (!v240) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kClearSessionData"))
    {
      memset(&v304, 0, sizeof(v304));
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kClearSessionData";
      sub_100048BAC((uint64_t)&v299, &v193);
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_release(v193.__r_.__value_.__l.__data_);
      memset(&buf, 0, sizeof(buf));
      ctu::parse_hex();
      ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v299, kCtLoggingSystemName, "vinyl.test");
      uint64_t v60 = v299.__r_.__value_.__l.__size_;
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v299);
      if (os_log_type_enabled(v60, OS_LOG_TYPE_ERROR))
      {
        LODWORD(v299.__r_.__value_.__l.__data_) = 134217984;
        *(std::string::size_type *)((char *)v299.__r_.__value_.__r.__words + 4) = buf.__r_.__value_.__l.__size_
                                                                                - buf.__r_.__value_.__r.__words[0];
        _os_log_error_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_ERROR, "Clear Session Data txid size: %lu", (uint8_t *)&v299, 0xCu);
      }
      std::string v238 = buf;
      memset(&buf, 0, sizeof(buf));
      v236[0] = _NSConcreteStackBlock;
      v236[1] = 3321888768;
      v236[2] = sub_100C4EE60;
      v236[3] = &unk_101A49960;
      unint64_t v61 = (std::__shared_weak_count *)a5[1];
      v236[4] = *a5;
      v237 = v61;
      if (v61) {
        atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, std::string *, void *))(*(void *)v15 + 184))(v15, &v238, v236);
      if (v238.__r_.__value_.__r.__words[0])
      {
        v238.__r_.__value_.__l.__size_ = v238.__r_.__value_.__r.__words[0];
        operator delete(v238.__r_.__value_.__l.__data_);
      }
      if (v237) {
        sub_10004D2C8(v237);
      }
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      goto LABEL_190;
    }
    if (xpc_dictionary_get_value(object, "kGetTapeEuiccChallenge"))
    {
      v234[0] = _NSConcreteStackBlock;
      v234[1] = 3321888768;
      v234[2] = sub_100C4F0B0;
      v234[3] = &unk_101A499F0;
      std::string::size_type v62 = a5[1];
      v234[4] = *a5;
      std::chrono::steady_clock::time_point v235 = (std::__shared_weak_count *)v62;
      if (v62) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v62 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 136))(v15, v234);
      uint64_t v32 = v235;
      if (!v235) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kTapeGetAssociatedImei"))
    {
      memset(&buf, 0, sizeof(buf));
      if (!sub_100C4D4F0(&object, (uint64_t)"kTapeGetAssociatedImei", (uint64_t)&buf))
      {
        xpc_object_t v231 = xpc_string_create("Invalid iccid format or length");
        if (!v231) {
          xpc_object_t v231 = xpc_null_create();
        }
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&v304, &v231, &v232);
        xpc_release(v232);
        xpc_object_t v232 = 0;
        xpc_release(v231);
        xpc_object_t v231 = 0;
        goto LABEL_58;
      }
      char v30 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&v233, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
      }
      else {
        std::string v233 = buf;
      }
      std::string::size_type v74 = *a5;
      std::string::size_type v73 = a5[1];
      if (v73) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v73 + 8), 1uLL, memory_order_relaxed);
      }
      v301[0] = off_101A49BC0;
      v301[1] = v74;
      v301[2] = v73;
      v301[3] = v301;
      (*(void (**)(uint64_t, std::string *, void *))(*(void *)v15 + 192))(v15, &v233, v301);
      sub_100493E78(v301);
      if ((SHIBYTE(v233.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_71;
      }
      char v35 = (void *)v233.__r_.__value_.__r.__words[0];
      goto LABEL_70;
    }
    if (xpc_dictionary_get_value(object, "kTapeSetAssociatedImei"))
    {
      *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3) = 0;
      LODWORD(v193.__r_.__value_.__l.__data_) = 0;
      *(_DWORD *)((char *)&v211 + 3) = 0;
      LODWORD(v211) = 0;
      v299.__r_.__value_.__r.__words[0] = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kIccid";
      sub_100048BAC((uint64_t)&buf, &v299);
      if (xpc_get_type(v299.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_null)
      {
        xpc_object_t v229 = xpc_string_create("Invalid iccid format");
        if (!v229) {
          xpc_object_t v229 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v229, &v230);
        xpc_release(v230);
        xpc_object_t v230 = 0;
        xpc_release(v229);
        int v52 = 0;
        __int16 v53 = 0;
        int v48 = 0;
        long long __src = 0;
        xpc_object_t v229 = 0;
        goto LABEL_349;
      }
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      uint64_t v63 = (void *)v304.__r_.__value_.__l.__size_;
      long long __src = (void *)v304.__r_.__value_.__r.__words[0];
      LODWORD(v193.__r_.__value_.__l.__data_) = v304.__r_.__value_.__r.__words[2];
      *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3) = *(_DWORD *)((char *)&v304.__r_.__value_.__r.__words[2]
                                                                          + 3);
      int v48 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0)
      {
        std::string::size_type v64 = v304.__r_.__value_.__l.__size_;
        if (v304.__r_.__value_.__l.__size_ == 19) {
          goto LABEL_235;
        }
      }
      else
      {
        if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) == 19) {
          goto LABEL_235;
        }
        std::string::size_type v64 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
      }
      if (v64 != 20)
      {
        xpc_object_t v227 = xpc_string_create("Invalid iccid length");
        if (!v227) {
          xpc_object_t v227 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v227, &v228);
        xpc_release(v228);
        xpc_object_t v228 = 0;
        xpc_release(v227);
        int v52 = 0;
        __int16 v53 = 0;
        xpc_object_t v227 = 0;
        goto LABEL_349;
      }
LABEL_235:
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kIMEI";
      sub_100048BAC((uint64_t)&buf, &v226);
      int v75 = (void *)v299.__r_.__value_.__r.__words[0];
      v299.__r_.__value_.__r.__words[0] = v226;
      std::string::size_type v226 = (std::string::size_type)v75;
      xpc_release(v75);
      std::string::size_type v226 = 0;
      if (xpc_get_type(v299.__r_.__value_.__l.__data_) == (xpc_type_t)&_xpc_type_null)
      {
        xpc_object_t v224 = xpc_string_create("Invalid IMEI");
        if (!v224) {
          xpc_object_t v224 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
        sub_100035E70((uint64_t)&buf, &v224, &v225);
        xpc_release(v225);
        xpc_object_t v225 = 0;
        xpc_release(v224);
        int v52 = 0;
        __int16 v53 = 0;
        xpc_object_t v224 = 0;
      }
      else
      {
        memset(&buf, 0, sizeof(buf));
        xpc::dyn_cast_or_default();
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        int v76 = (void *)v304.__r_.__value_.__l.__size_;
        __int16 v53 = (void *)v304.__r_.__value_.__r.__words[0];
        LODWORD(v211) = v304.__r_.__value_.__r.__words[2];
        *(_DWORD *)((char *)&v211 + 3) = *(_DWORD *)((char *)&v304.__r_.__value_.__r.__words[2] + 3);
        std::string::size_type v77 = HIBYTE(v304.__r_.__value_.__r.__words[2]);
        int v52 = SHIBYTE(v304.__r_.__value_.__r.__words[2]);
        if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v77 = v304.__r_.__value_.__l.__size_;
        }
        if (v77 < 0x41)
        {
          if (v48 < 0)
          {
            sub_10004FC84(v219, __src, (unint64_t)v63);
          }
          else
          {
            v219[0] = __src;
            v219[1] = v63;
            *(_DWORD *)uint64_t v220 = v193.__r_.__value_.__l.__data_;
            *(_DWORD *)&v220[3] = *(_DWORD *)((char *)v193.__r_.__value_.__r.__words + 3);
            char v221 = v48;
          }
          if (v52 < 0)
          {
            sub_10004FC84(v216, v53, (unint64_t)v76);
          }
          else
          {
            v216[0] = v53;
            v216[1] = v76;
            *(_DWORD *)uint64_t v217 = v211;
            *(_DWORD *)&v217[3] = *(_DWORD *)((char *)&v211 + 3);
            char v218 = v52;
          }
          std::string::size_type v108 = *a5;
          std::string::size_type v107 = a5[1];
          if (v107) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v107 + 8), 1uLL, memory_order_relaxed);
          }
          v300[0] = off_101A49C40;
          v300[1] = v108;
          v300[2] = v107;
          v300[3] = v300;
          (*(void (**)(uint64_t, void **, void **, void *))(*(void *)v15 + 200))(v15, v219, v216, v300);
          sub_1000C752C(v300);
          if (v218 < 0) {
            operator delete(v216[0]);
          }
          if (v221 < 0) {
            operator delete(v219[0]);
          }
        }
        else
        {
          xpc_object_t v222 = xpc_string_create("Error: IMEI data length > 64 bytes");
          if (!v222) {
            xpc_object_t v222 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *a5;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
          sub_100035E70((uint64_t)&buf, &v222, &v223);
          xpc_release(v223);
          xpc_object_t v223 = 0;
          xpc_release(v222);
          xpc_object_t v222 = 0;
        }
      }
LABEL_349:
      xpc_release(v299.__r_.__value_.__l.__data_);
      goto LABEL_173;
    }
    if (xpc_dictionary_get_value(object, "kSkipMetadataCheck"))
    {
      v299.__r_.__value_.__s.__data_[0] = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kSkipMetadataCheck";
      sub_100048BAC((uint64_t)&buf, &v304);
      std::string::value_type v66 = xpc::dyn_cast_or_default((xpc *)&v304, 0, v65);
      xpc_release(v304.__r_.__value_.__l.__data_);
      v299.__r_.__value_.__s.__data_[0] = v66;
      int v67 = (uint64_t **)sub_100365D74();
      sub_100058DB0(&buf, "SkipMetadataCheck");
      sub_1002264FC(v67, &buf, (unsigned __int8 *)&v299);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
    }
    if (xpc_dictionary_get_value(object, "kAddCert"))
    {
      memset(&v304, 0, sizeof(v304));
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kAddCert";
      sub_100048BAC((uint64_t)&v299, &v193);
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_release(v193.__r_.__value_.__l.__data_);
      memset(&buf, 0, sizeof(buf));
      uint64_t v68 = sub_100365D74();
      sub_100058DB0(&v299, "ServerPinnedCerts");
      v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      v193.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      BOOL v69 = sub_100C4F334(v68, (void **)&v299.__r_.__value_.__l.__data_, (uint64_t)&v193);
      if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v299.__r_.__value_.__l.__data_);
      }
      if (!v69)
      {
        sub_100C4F5A8((uint64_t *)&buf, (long long *)&v304);
        CFStringRef v88 = (uint64_t **)sub_100365D74();
        sub_100058DB0(&v299, "ServerPinnedCerts");
        if (sub_100C4F5E8(v88, &v299, (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_))
        {
          xpc_object_t v214 = xpc_string_create("Succeeded");
          if (!v214) {
            xpc_object_t v214 = xpc_null_create();
          }
          v193.__r_.__value_.__r.__words[0] = *a5;
          v193.__r_.__value_.__l.__size_ = (std::string::size_type)"kAddCert";
          sub_100035E70((uint64_t)&v193, &v214, &v215);
          xpc_release(v215);
          xpc_object_t v215 = 0;
          xpc_release(v214);
          xpc_object_t v214 = 0;
        }
        else
        {
          xpc_object_t v213 = xpc_string_create("Failed");
          if (!v213) {
            xpc_object_t v213 = xpc_null_create();
          }
          uint64_t v211 = (void *)*a5;
          v212 = "kAddCert";
          sub_100035E70((uint64_t)&v211, &v213, &v215);
          xpc_release(v215);
          xpc_object_t v215 = 0;
          xpc_release(v213);
          xpc_object_t v213 = 0;
        }
        if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v299.__r_.__value_.__l.__data_);
        }
        goto LABEL_335;
      }
      v299.__r_.__value_.__s.__data_[0] = 0;
      uint64_t v70 = sub_1000D8740((uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_, (unsigned __int8 **)&v304);
      if (v70 == buf.__r_.__value_.__l.__size_)
      {
        ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v299, kCtLoggingSystemName, "vinyl.test");
        uint64_t v103 = v299.__r_.__value_.__l.__size_;
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v299);
        if (os_log_type_enabled(v103, OS_LOG_TYPE_INFO))
        {
          unsigned int v104 = &v304;
          if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            unsigned int v104 = (std::string *)v304.__r_.__value_.__r.__words[0];
          }
          LODWORD(v299.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v299.__r_.__value_.__r.__words + 4) = (std::string::size_type)v104;
          _os_log_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_INFO, "add new filepath<%s>", (uint8_t *)&v299, 0xCu);
        }
        sub_100C4F5A8((uint64_t *)&buf, (long long *)&v304);
        uint64_t v105 = (uint64_t **)sub_100365D74();
        sub_100058DB0(&v299, "ServerPinnedCerts");
        char v106 = sub_100C4F5E8(v105, &v299, (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
        if (SHIBYTE(v299.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v299.__r_.__value_.__l.__data_);
        }
        if (v106)
        {
          xpc_object_t v209 = xpc_string_create("Succeeded");
          if (!v209) {
            xpc_object_t v209 = xpc_null_create();
          }
          v299.__r_.__value_.__r.__words[0] = *a5;
          v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kAddCert";
          sub_100035E70((uint64_t)&v299, &v209, &v210);
          xpc_release(v210);
          xpc_object_t v210 = 0;
          xpc_release(v209);
          xpc_object_t v209 = 0;
          goto LABEL_335;
        }
      }
      else
      {
        ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v299, kCtLoggingSystemName, "vinyl.test");
        char v71 = v299.__r_.__value_.__l.__size_;
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v299);
        if (os_log_type_enabled(v71, OS_LOG_TYPE_INFO))
        {
          int v72 = &v304;
          if ((v304.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
            int v72 = (std::string *)v304.__r_.__value_.__r.__words[0];
          }
          LODWORD(v299.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)v299.__r_.__value_.__r.__words + 4) = (std::string::size_type)v72;
          _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_INFO, "%s already stored", (uint8_t *)&v299, 0xCu);
        }
      }
      xpc_object_t v207 = xpc_string_create("Failed");
      if (!v207) {
        xpc_object_t v207 = xpc_null_create();
      }
      v299.__r_.__value_.__r.__words[0] = *a5;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kAddCert";
      sub_100035E70((uint64_t)&v299, &v207, &v208);
      xpc_release(v208);
      xpc_object_t v208 = 0;
      xpc_release(v207);
      xpc_object_t v207 = 0;
LABEL_335:
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      sub_100047F64((void ***)&v299);
LABEL_190:
      if ((SHIBYTE(v304.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
        goto LABEL_20;
      }
      uint64_t v40 = (void *)v304.__r_.__value_.__r.__words[0];
      goto LABEL_73;
    }
    unint64_t v78 = (unint64_t)"kDeleteCert";
    if (xpc_dictionary_get_value(object, "kDeleteCert"))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
      sub_100048BAC((uint64_t)&buf, &v304);
      unsigned int v80 = xpc::dyn_cast_or_default((xpc *)&v304, 0, v79);
      xpc_release(v304.__r_.__value_.__l.__data_);
      memset(&buf, 0, sizeof(buf));
      uint64_t v81 = sub_100365D74();
      sub_100058DB0(&v304, "ServerPinnedCerts");
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      v299.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
      BOOL v82 = sub_100C4F334(v81, (void **)&v304.__r_.__value_.__l.__data_, (uint64_t)&v299);
      if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v304.__r_.__value_.__l.__data_);
      }
      if (v82)
      {
        if ((v80 & 0x80000000) != 0
          || (int)v80 >= (int)(-1431655765 * ((buf.__r_.__value_.__l.__size_ - buf.__r_.__value_.__r.__words[0]) >> 3)))
        {
          __int16 v109 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v304, kCtLoggingSystemName, "vinyl.test");
          uint64_t v110 = v304.__r_.__value_.__l.__size_;
          ctu::OsLogContext::~OsLogContext(v109);
          if (os_log_type_enabled(v110, OS_LOG_TYPE_INFO))
          {
            LODWORD(v304.__r_.__value_.__l.__data_) = 67109120;
            HIDWORD(v304.__r_.__value_.__r.__words[0]) = v80;
            _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_INFO, "index[%d] is out of range.", (uint8_t *)&v304, 8u);
          }
          xpc_object_t v203 = xpc_string_create("Failed");
          if (!v203) {
            xpc_object_t v203 = xpc_null_create();
          }
          v304.__r_.__value_.__r.__words[0] = *a5;
          v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
          sub_100035E70((uint64_t)&v304, &v203, &v204);
          xpc_release(v204);
          xpc_object_t v204 = 0;
          xpc_release(v203);
          xpc_object_t v203 = 0;
        }
        else
        {
          uint64_t v83 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v304, kCtLoggingSystemName, "vinyl.test");
          uint64_t v84 = v304.__r_.__value_.__l.__size_;
          ctu::OsLogContext::~OsLogContext(v83);
          if (os_log_type_enabled(v84, OS_LOG_TYPE_INFO))
          {
            std::string::size_type v85 = buf.__r_.__value_.__r.__words[0] + 24 * v80;
            if (*(char *)(v85 + 23) < 0) {
              std::string::size_type v85 = *(void *)v85;
            }
            LODWORD(v304.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v304.__r_.__value_.__r.__words + 4) = v85;
            _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_INFO, "the cert to be removed: %s", (uint8_t *)&v304, 0xCu);
          }
          sub_100C4F728((uint64_t)&buf, buf.__r_.__value_.__r.__words[0] + 24 * v80);
          xpc_object_t v201 = xpc_string_create("Succeeded");
          if (!v201) {
            xpc_object_t v201 = xpc_null_create();
          }
          v304.__r_.__value_.__r.__words[0] = *a5;
          v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
          sub_100035E70((uint64_t)&v304, &v201, &v202);
          xpc_release(v202);
          xpc_object_t v202 = 0;
          xpc_release(v201);
          xpc_object_t v201 = 0;
          if (buf.__r_.__value_.__l.__size_ == buf.__r_.__value_.__r.__words[0])
          {
            __int16 v113 = (uint64_t **)sub_100365D74();
            sub_100058DB0(&v304, "ServerPinnedCerts");
            char v114 = sub_1003660FC(v113, (void **)&v304.__r_.__value_.__l.__data_);
            if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v304.__r_.__value_.__l.__data_);
            }
            if ((v114 & 1) == 0)
            {
              xpc_object_t v197 = xpc_string_create("Failed");
              if (!v197) {
                xpc_object_t v197 = xpc_null_create();
              }
              v304.__r_.__value_.__r.__words[0] = *a5;
              v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
              sub_100035E70((uint64_t)&v304, &v197, &v198);
              xpc_release(v198);
              xpc_object_t v198 = 0;
              xpc_release(v197);
              xpc_object_t v197 = 0;
            }
          }
          else
          {
            uint64_t v86 = (uint64_t **)sub_100365D74();
            sub_100058DB0(&v304, "ServerPinnedCerts");
            char v87 = sub_100C4F5E8(v86, &v304, (uint64_t)buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
            if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v304.__r_.__value_.__l.__data_);
            }
            if ((v87 & 1) == 0)
            {
              xpc_object_t v199 = xpc_string_create("Failed");
              if (!v199) {
                xpc_object_t v199 = xpc_null_create();
              }
              v304.__r_.__value_.__r.__words[0] = *a5;
              v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
              sub_100035E70((uint64_t)&v304, &v199, &v200);
              xpc_release(v200);
              xpc_object_t v200 = 0;
              xpc_release(v199);
              xpc_object_t v199 = 0;
            }
          }
        }
      }
      else
      {
        xpc_object_t v205 = xpc_string_create("Failed");
        if (!v205) {
          xpc_object_t v205 = xpc_null_create();
        }
        v304.__r_.__value_.__r.__words[0] = *a5;
        v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteCert";
        sub_100035E70((uint64_t)&v304, &v205, &v206);
        xpc_release(v206);
        xpc_object_t v206 = 0;
        xpc_release(v205);
        xpc_object_t v205 = 0;
      }
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf;
      p_std::string buf = &v304;
      goto LABEL_365;
    }
    if (xpc_dictionary_get_value(object, "kListCerts"))
    {
      memset(&v299, 0, sizeof(v299));
      uint64_t v89 = sub_100365D74();
      sub_100058DB0(&buf, "ServerPinnedCerts");
      v304.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
      v304.__r_.__value_.__l.__size_ = v299.__r_.__value_.__r.__words[0];
      if (sub_100C4F334(v89, (void **)&buf.__r_.__value_.__l.__data_, (uint64_t)&v304))
      {
        std::string::size_type v90 = v299.__r_.__value_.__l.__size_;
        std::string::size_type v91 = v299.__r_.__value_.__r.__words[0];
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
        if (v90 != v91)
        {
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          std::string::size_type v93 = v299.__r_.__value_.__l.__size_;
          std::string::size_type v92 = v299.__r_.__value_.__r.__words[0];
          if (v299.__r_.__value_.__r.__words[0] != v299.__r_.__value_.__l.__size_)
          {
            unsigned __int8 v94 = 48;
            do
            {
              memset(&v193, 0, sizeof(v193));
              if (*(char *)(v92 + 23) < 0)
              {
                sub_10004FC84(&v193, *(void **)v92, *(void *)(v92 + 8));
              }
              else
              {
                long long v95 = *(_OWORD *)v92;
                v193.__r_.__value_.__r.__words[2] = *(void *)(v92 + 16);
                *(_OWORD *)&v193.__r_.__value_.__l.__data_ = v95;
              }
              uint64_t v96 = Mutable;
              unint64_t v78 = v78 & 0xFFFFFFFFFFFF0000 | v94;
              v159[0] = 0;
              buf.__r_.__value_.__r.__words[0] = v78;
              *((unsigned char *)&buf.__r_.__value_.__s + 23) = 1;
              uint64_t v211 = 0;
              if (ctu::cf::convert_copy())
              {
                xpc_object_t v97 = v159[0];
                v159[0] = v211;
                v304.__r_.__value_.__r.__words[0] = (std::string::size_type)v97;
                sub_1000558F4((const void **)&v304.__r_.__value_.__l.__data_);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              xpc_object_t v192 = v159[0];
              v159[0] = 0;
              sub_1000558F4((const void **)v159);
              uint64_t v98 = v192;
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                sub_10004FC84(&v190, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_);
              }
              else {
                std::string v190 = v193;
              }
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                sub_10004FC84(&v304, v190.__r_.__value_.__l.__data_, v190.__r_.__value_.__l.__size_);
              }
              else {
                std::string v304 = v190;
              }
              xpc_object_t v297 = 0;
              if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
                sub_10004FC84(&buf, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_);
              }
              else {
                std::string buf = v304;
              }
              v159[0] = 0;
              if (ctu::cf::convert_copy())
              {
                xpc_object_t v99 = v297;
                xpc_object_t v297 = v159[0];
                uint64_t v211 = v99;
                sub_1000558F4((const void **)&v211);
              }
              if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              BOOL value = v297;
              xpc_object_t v297 = 0;
              sub_1000558F4((const void **)&v297);
              if (SHIBYTE(v304.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v304.__r_.__value_.__l.__data_);
              }
              CFDictionaryAddValue(v96, v98, value);
              sub_1000558F4((const void **)&value);
              if (SHIBYTE(v190.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v190.__r_.__value_.__l.__data_);
              }
              sub_1000558F4((const void **)&v192);
              if (SHIBYTE(v193.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              v92 += 24;
              ++v94;
            }
            while (v92 != v93);
          }
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          sub_100057240(&v189, (const void **)&Mutable);
          sub_100057240((const void **)&v211, &v189);
          v159[0] = 0;
          v304.__r_.__value_.__r.__words[0] = 0;
          sub_10004EFE4(&v304, (CFTypeRef *)&v211);
          if (v304.__r_.__value_.__r.__words[0]) {
            long long v100 = sub_100080778;
          }
          else {
            long long v100 = 0;
          }
          if (v100) {
            sub_100058140((const void **)v159, (const void **)&v304.__r_.__value_.__l.__data_);
          }
          sub_100057D78((const void **)&v304.__r_.__value_.__l.__data_);
          v193.__r_.__value_.__l.__data_ = (std::string::pointer)v159[0];
          v159[0] = 0;
          sub_100057D78((const void **)v159);
          sub_10005717C((const void **)&v211);
          sub_100C4F7A4((const void **)&buf.__r_.__value_.__l.__data_, (const void **)&v193.__r_.__value_.__l.__data_);
          sub_100057D78((const void **)&v193.__r_.__value_.__l.__data_);
          sub_10005717C(&v189);
          long long v101 = sub_100C4E8B8((unsigned __int8 *)&buf);
          ctu::cf_to_xpc((uint64_t *)&v187, *(ctu **)v101, v102);
          v304.__r_.__value_.__r.__words[0] = *a5;
          v304.__r_.__value_.__l.__size_ = (std::string::size_type)"kListCerts";
          sub_100035E70((uint64_t)&v304, &v187, &v188);
          xpc_release(v188);
          xpc_object_t v188 = 0;
          xpc_release(v187);
          xpc_object_t v187 = 0;
          if (buf.__r_.__value_.__s.__data_[0] == 1) {
            sub_100057D78((const void **)&buf.__r_.__value_.__l.__size_);
          }
          sub_10005717C((const void **)&Mutable);
LABEL_364:
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&v299;
          p_std::string buf = &buf;
LABEL_365:
          sub_100047F64((void ***)p_buf);
          goto LABEL_20;
        }
      }
      else if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
      {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_object_t v195 = xpc_string_create("Empty");
      if (!v195) {
        xpc_object_t v195 = xpc_null_create();
      }
      buf.__r_.__value_.__r.__words[0] = *a5;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kListCerts";
      sub_100035E70((uint64_t)&buf, &v195, &v196);
      xpc_release(v196);
      xpc_object_t v196 = 0;
      xpc_release(v195);
      xpc_object_t v195 = 0;
      goto LABEL_364;
    }
    if (xpc_dictionary_get_value(object, "kTapeDownload"))
    {
      buf.__r_.__value_.__r.__words[0] = 0;
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)object;
      if (object) {
        xpc_retain(object);
      }
      else {
        v299.__r_.__value_.__r.__words[0] = (std::string::size_type)xpc_null_create();
      }
      xpc::bridge((uint64_t *)&v304, (xpc *)&v299, v112);
      sub_10004EFE4(&buf, (CFTypeRef *)&v304.__r_.__value_.__l.__data_);
      sub_1000577C4((const void **)&v304.__r_.__value_.__l.__data_);
      xpc_release(v299.__r_.__value_.__l.__data_);
      sub_100058198(&v186, (const void **)&buf.__r_.__value_.__l.__data_);
      (*(void (**)(uint64_t, uint64_t, uint64_t, const void **))(*(void *)v15 + 24))(v15, 1, 1, &v186);
      sub_100057D78(&v186);
      sub_100057D78((const void **)&buf.__r_.__value_.__l.__data_);
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kDeleteAllCerts"))
    {
      uint64_t v115 = (uint64_t **)sub_100365D74();
      sub_100058DB0(&buf, "ServerPinnedCerts");
      char v116 = sub_1003660FC(v115, (void **)&buf.__r_.__value_.__l.__data_);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      if (v116)
      {
        uint64_t v117 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
        int v118 = buf.__r_.__value_.__l.__size_;
        ctu::OsLogContext::~OsLogContext(v117);
        if (os_log_type_enabled(v118, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v118, OS_LOG_TYPE_INFO, "all certs are deleted", (uint8_t *)&buf, 2u);
        }
        xpc_object_t v182 = xpc_string_create("Succeeded");
        if (!v182) {
          xpc_object_t v182 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteAllCerts";
        sub_100035E70((uint64_t)&buf, &v182, &v183);
        xpc_release(v183);
        xpc_object_t v183 = 0;
        xpc_release(v182);
        xpc_object_t v182 = 0;
      }
      else
      {
        v120 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
        uint64_t v121 = buf.__r_.__value_.__l.__size_;
        ctu::OsLogContext::~OsLogContext(v120);
        if (os_log_type_enabled(v121, OS_LOG_TYPE_INFO))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v121, OS_LOG_TYPE_INFO, "failed to delete all certs", (uint8_t *)&buf, 2u);
        }
        xpc_object_t v184 = xpc_string_create("Failed");
        if (!v184) {
          xpc_object_t v184 = xpc_null_create();
        }
        buf.__r_.__value_.__r.__words[0] = *a5;
        buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteAllCerts";
        sub_100035E70((uint64_t)&buf, &v184, &v185);
        xpc_release(v185);
        xpc_object_t v185 = 0;
        xpc_release(v184);
        xpc_object_t v184 = 0;
      }
      goto LABEL_20;
    }
    if (xpc_dictionary_get_value(object, "kGetNotifications"))
    {
      v180[0] = _NSConcreteStackBlock;
      v180[1] = 3321888768;
      v180[2] = sub_100C4F7F4;
      v180[3] = &unk_101A49990;
      std::string::size_type v119 = a5[1];
      v180[4] = *a5;
      long long v181 = (std::__shared_weak_count *)v119;
      if (v119) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v119 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void *))(*(void *)v15 + 144))(v15, v180);
      uint64_t v32 = v181;
      if (!v181) {
        goto LABEL_20;
      }
      goto LABEL_49;
    }
    if (xpc_dictionary_get_value(object, "kGetNotification"))
    {
      memset(&v304, 0, sizeof(v304));
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kGetNotification";
      sub_100048BAC((uint64_t)&v299, &v193);
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_release(v193.__r_.__value_.__l.__data_);
      long long v178 = 0;
      uint64_t v179 = 0;
      long long v177 = 0;
      sub_10005C928(&v177, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_, v304.__r_.__value_.__l.__size_ - v304.__r_.__value_.__r.__words[0]);
      v175[0] = _NSConcreteStackBlock;
      v175[1] = 3321888768;
      v175[2] = sub_100C4F920;
      v175[3] = &unk_101A49A20;
      std::string::size_type v122 = a5[1];
      v175[4] = *a5;
      char v176 = (std::__shared_weak_count *)v122;
      if (v122) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v122 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, void *))(*(void *)v15 + 152))(v15, &v177, v175);
      if (v177)
      {
        long long v178 = v177;
        operator delete(v177);
      }
      unint64_t v123 = v176;
      if (!v176) {
        goto LABEL_402;
      }
    }
    else
    {
      if (xpc_dictionary_get_value(object, "kSendNotifications"))
      {
        (*(void (**)(uint64_t))(*(void *)v15 + 160))(v15);
        goto LABEL_20;
      }
      if (!xpc_dictionary_get_value(object, "kDeleteNotification"))
      {
        if (xpc_dictionary_get_value(object, "kGet5GDeviceCapabilities"))
        {
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          sub_100C4FB90(*a1, &buf, v125);
          if (buf.__r_.__value_.__r.__words[0])
          {
            v304.__r_.__value_.__r.__words[0] = 0;
            (*(void (**)(std::string *__return_ptr))(*(void *)buf.__r_.__value_.__l.__data_ + 40))(&v299);
            sub_1000057AC(&v304, (CFTypeRef *)&v299.__r_.__value_.__l.__data_);
            sub_1000577C4((const void **)&v299.__r_.__value_.__l.__data_);
            if (v304.__r_.__value_.__r.__words[0]) {
              unint64_t v127 = sub_100084B4C;
            }
            else {
              unint64_t v127 = 0;
            }
            if (v127)
            {
              v299.__r_.__value_.__s.__data_[0] = 0;
              ctu::cf::assign((ctu::cf *)&v299, (BOOL *)v304.__r_.__value_.__l.__data_, v126);
              BOOL v128 = v299.__r_.__value_.__s.__data_[0] != 0;
            }
            else
            {
              BOOL v128 = 1;
            }
            sub_100062778((const void **)&v304.__r_.__value_.__l.__data_);
          }
          else
          {
            BOOL v128 = 1;
          }
          if (buf.__r_.__value_.__l.__size_) {
            sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          xpc_object_t v168 = xpc_BOOL_create(v128);
          if (!v168) {
            xpc_object_t v168 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *a5;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"k5GDeviceCapabilities";
          sub_100035E70((uint64_t)&buf, &v168, &v169);
          xpc_release(v169);
          xpc_object_t v169 = 0;
          xpc_release(v168);
          xpc_object_t v168 = 0;
          char v135 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
          uint64_t v134 = buf.__r_.__value_.__l.__size_;
          ctu::OsLogContext::~OsLogContext(v135);
          if (!os_log_type_enabled(v134, OS_LOG_TYPE_INFO)) {
            goto LABEL_20;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v128;
          uint64_t v27 = "kGet5GDeviceCapabilities: %d";
        }
        else
        {
          if (!xpc_dictionary_get_value(object, "kSet5GDeviceCapabilities"))
          {
            if (xpc_dictionary_get_value(object, "kGetEuiccToken"))
            {
              uint64_t v136 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
              char v137 = buf.__r_.__value_.__l.__size_;
              ctu::OsLogContext::~OsLogContext(v136);
              if (os_log_type_enabled(v137, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_INFO, "kGetEuiccToken", (uint8_t *)&buf, 2u);
              }
              v164[0] = _NSConcreteStackBlock;
              v164[1] = 3321888768;
              v164[2] = sub_100C4FC5C;
              v164[3] = &unk_101A49A50;
              CFTypeID v138 = (std::__shared_weak_count *)a5[1];
              v164[4] = *a5;
              char v165 = v138;
              if (v138) {
                atomic_fetch_add_explicit(&v138->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, void *))(*(void *)v15 + 208))(v15, v164);
              if (v165) {
                sub_10004D2C8(v165);
              }
            }
            if (xpc_dictionary_get_value(object, "kTestEuiccTokenRNG"))
            {
              char v139 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
              CFDictionaryRef v140 = buf.__r_.__value_.__l.__size_;
              ctu::OsLogContext::~OsLogContext(v139);
              if (os_log_type_enabled(v140, OS_LOG_TYPE_INFO))
              {
                LOWORD(buf.__r_.__value_.__l.__data_) = 0;
                _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_INFO, "kTestEuiccTokenRNG", (uint8_t *)&buf, 2u);
              }
              buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kTestEuiccTokenRNG";
              sub_100048BAC((uint64_t)&buf, &v304);
              uint64_t v142 = xpc::dyn_cast_or_default((xpc *)&v304, 0, v141);
              xpc_release(v304.__r_.__value_.__l.__data_);
              v162[0] = _NSConcreteStackBlock;
              v162[1] = 3321888768;
              v162[2] = sub_100C4FDA8;
              v162[3] = &unk_101A49A80;
              char v143 = (std::__shared_weak_count *)a5[1];
              v162[4] = *a5;
              char v163 = v143;
              if (v143) {
                atomic_fetch_add_explicit(&v143->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v15 + 216))(v15, v142, v162);
              if (v163) {
                sub_10004D2C8(v163);
              }
            }
            if (!xpc_dictionary_get_value(object, "kSecureAuth")) {
              goto LABEL_20;
            }
            CFTypeID v144 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
            char v145 = buf.__r_.__value_.__l.__size_;
            ctu::OsLogContext::~OsLogContext(v144);
            if (os_log_type_enabled(v145, OS_LOG_TYPE_INFO))
            {
              LOWORD(buf.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v145, OS_LOG_TYPE_INFO, "kSecureAuth", (uint8_t *)&buf, 2u);
            }
            v212 = 0;
            uint64_t v211 = 0;
            sub_10022AB60(*a1, &v211);
            if (v211)
            {
              memset(&v304, 0, sizeof(v304));
              v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
              v299.__r_.__value_.__l.__size_ = (std::string::size_type)"sep-signed";
              sub_100048BAC((uint64_t)&v299, &v193);
              memset(&buf, 0, sizeof(buf));
              xpc::dyn_cast_or_default();
              if (buf.__r_.__value_.__r.__words[0])
              {
                buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              xpc_release(v193.__r_.__value_.__l.__data_);
              memset(&v299, 0, sizeof(v299));
              v193.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
              v193.__r_.__value_.__l.__size_ = (std::string::size_type)"sep-signature";
              sub_100048BAC((uint64_t)&v193, v159);
              memset(&buf, 0, sizeof(buf));
              xpc::dyn_cast_or_default();
              if (buf.__r_.__value_.__r.__words[0])
              {
                buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              xpc_release(v159[0]);
              memset(&v193, 0, sizeof(v193));
              v159[0] = &object;
              v159[1] = "sep-attestation";
              sub_100048BAC((uint64_t)v159, &v297);
              memset(&buf, 0, sizeof(buf));
              xpc::dyn_cast_or_default();
              if (buf.__r_.__value_.__r.__words[0])
              {
                buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
                operator delete(buf.__r_.__value_.__l.__data_);
              }
              xpc_release(v297);
              std::string v146 = v211;
              char v157 = 0;
              uint64_t v158 = 0;
              uint64_t v156 = 0;
              sub_10005C928(&v156, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_, v304.__r_.__value_.__l.__size_ - v304.__r_.__value_.__r.__words[0]);
              uint64_t v153 = 0;
              CFTypeID v154 = 0;
              uint64_t v155 = 0;
              sub_10005C928(&v153, v299.__r_.__value_.__l.__data_, v299.__r_.__value_.__l.__size_, v299.__r_.__value_.__l.__size_ - v299.__r_.__value_.__r.__words[0]);
              char v150 = 0;
              CFTypeID v151 = 0;
              uint64_t v152 = 0;
              sub_10005C928(&v150, v193.__r_.__value_.__l.__data_, v193.__r_.__value_.__l.__size_, v193.__r_.__value_.__l.__size_ - v193.__r_.__value_.__r.__words[0]);
              std::string::size_type v148 = *a5;
              std::string::size_type v147 = a5[1];
              if (v147) {
                atomic_fetch_add_explicit((atomic_ullong *volatile)(v147 + 8), 1uLL, memory_order_relaxed);
              }
              v298[0] = off_101A49CC0;
              v298[1] = v148;
              v298[2] = v147;
              v298[3] = v298;
              (*(void (**)(void *, void **, void **, void **, void *))(*(void *)v146 + 56))(v146, &v156, &v153, &v150, v298);
              sub_100491448(v298);
              if (v150)
              {
                CFTypeID v151 = v150;
                operator delete(v150);
              }
              if (v153)
              {
                CFTypeID v154 = v153;
                operator delete(v153);
              }
              if (v156)
              {
                char v157 = v156;
                operator delete(v156);
              }
              if (v193.__r_.__value_.__r.__words[0])
              {
                v193.__r_.__value_.__l.__size_ = v193.__r_.__value_.__r.__words[0];
                operator delete(v193.__r_.__value_.__l.__data_);
              }
              if (v299.__r_.__value_.__r.__words[0])
              {
                v299.__r_.__value_.__l.__size_ = v299.__r_.__value_.__r.__words[0];
                operator delete(v299.__r_.__value_.__l.__data_);
              }
              if (v304.__r_.__value_.__r.__words[0])
              {
                v304.__r_.__value_.__l.__size_ = v304.__r_.__value_.__r.__words[0];
                operator delete(v304.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              xpc_object_t v160 = xpc_string_create("No Vinyl Controller");
              if (!v160) {
                xpc_object_t v160 = xpc_null_create();
              }
              buf.__r_.__value_.__r.__words[0] = *a5;
              buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kError";
              sub_100035E70((uint64_t)&buf, &v160, &v161);
              xpc_release(v161);
              xpc_object_t v161 = 0;
              xpc_release(v160);
              xpc_object_t v160 = 0;
            }
            uint64_t v32 = (std::__shared_weak_count *)v212;
            if (!v212) {
              goto LABEL_20;
            }
            goto LABEL_49;
          }
          buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"kSet5GDeviceCapabilities";
          sub_100048BAC((uint64_t)&buf, &v304);
          int v130 = xpc::dyn_cast_or_default((xpc *)&v304, 0, v129);
          xpc_release(v304.__r_.__value_.__l.__data_);
          *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
          sub_100C4FB90(*a1, &buf, v131);
          if (buf.__r_.__value_.__r.__words[0])
          {
            unint64_t v132 = &kCFBooleanTrue;
            if (!v130) {
              unint64_t v132 = &kCFBooleanFalse;
            }
            (*(void (**)(std::string::size_type, void, const CFBooleanRef, void, const CFStringRef, const CFStringRef))(*(void *)buf.__r_.__value_.__l.__data_ + 16))(buf.__r_.__value_.__r.__words[0], kUseVinyl5GDeviceCapabilities, *v132, kCommCenterPreferencesNoBackupAppID, kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          }
          if (buf.__r_.__value_.__l.__size_) {
            sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
          }
          xpc_object_t v166 = xpc_BOOL_create(v130);
          if (!v166) {
            xpc_object_t v166 = xpc_null_create();
          }
          buf.__r_.__value_.__r.__words[0] = *a5;
          buf.__r_.__value_.__l.__size_ = (std::string::size_type)"k5GDeviceCapabilities";
          sub_100035E70((uint64_t)&buf, &v166, &v167);
          xpc_release(v167);
          xpc_object_t v167 = 0;
          xpc_release(v166);
          xpc_object_t v166 = 0;
          char v133 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
          uint64_t v134 = buf.__r_.__value_.__l.__size_;
          ctu::OsLogContext::~OsLogContext(v133);
          if (!os_log_type_enabled(v134, OS_LOG_TYPE_INFO)) {
            goto LABEL_20;
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 67109120;
          HIDWORD(buf.__r_.__value_.__r.__words[0]) = v130;
          uint64_t v27 = "kSet5GDeviceCapabilities: %d";
        }
        uint64_t v28 = v134;
        uint32_t v29 = 8;
        goto LABEL_27;
      }
      memset(&v304, 0, sizeof(v304));
      v299.__r_.__value_.__r.__words[0] = (std::string::size_type)&object;
      v299.__r_.__value_.__l.__size_ = (std::string::size_type)"kDeleteNotification";
      sub_100048BAC((uint64_t)&v299, &v193);
      memset(&buf, 0, sizeof(buf));
      xpc::dyn_cast_or_default();
      if (buf.__r_.__value_.__r.__words[0])
      {
        buf.__r_.__value_.__l.__size_ = buf.__r_.__value_.__r.__words[0];
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      xpc_release(v193.__r_.__value_.__l.__data_);
      uint64_t v173 = 0;
      uint64_t v174 = 0;
      uint64_t v172 = 0;
      sub_10005C928(&v172, v304.__r_.__value_.__l.__data_, v304.__r_.__value_.__l.__size_, v304.__r_.__value_.__l.__size_ - v304.__r_.__value_.__r.__words[0]);
      v170[0] = _NSConcreteStackBlock;
      v170[1] = 3321888768;
      std::string v170[2] = sub_100C4FA4C;
      v170[3] = &unk_101A49A20;
      std::string::size_type v124 = a5[1];
      v170[4] = *a5;
      uint64_t v171 = (std::__shared_weak_count *)v124;
      if (v124) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(v124 + 8), 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, void *))(*(void *)v15 + 168))(v15, &v172, v170);
      if (v172)
      {
        uint64_t v173 = v172;
        operator delete(v172);
      }
      unint64_t v123 = v171;
      if (!v171)
      {
LABEL_402:
        uint64_t v40 = (void *)v304.__r_.__value_.__r.__words[0];
        if (!v304.__r_.__value_.__r.__words[0]) {
          goto LABEL_20;
        }
        v304.__r_.__value_.__l.__size_ = v304.__r_.__value_.__r.__words[0];
        goto LABEL_73;
      }
    }
    sub_10004D2C8(v123);
    goto LABEL_402;
  }
  uint64_t v19 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "vinyl.test");
  long long v20 = buf.__r_.__value_.__l.__size_;
  ctu::OsLogContext::~OsLogContext(v19);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "No Vinyl test server operational; dropping",
      (uint8_t *)&buf,
      2u);
  }
LABEL_21:
  if (v16) {
    sub_10004D2C8(v16);
  }
}

void sub_100C4C7C0(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C4D4F0(void *a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t object = 0;
  std::string __p = a1;
  uint64_t v11 = a2;
  sub_100048BAC((uint64_t)&__p, &object);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_null) {
    goto LABEL_12;
  }
  std::string __p = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v12) < 0) {
    operator delete(__p);
  }
  if (*(char *)(a3 + 23) < 0) {
    operator delete(*(void **)a3);
  }
  *(_OWORD *)a3 = v7;
  *(void *)(a3 + 16) = v8;
  if ((*(char *)(a3 + 23) & 0x80000000) == 0)
  {
    uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
    if (v4 == 19) {
      goto LABEL_11;
    }
LABEL_10:
    if (v4 == 20) {
      goto LABEL_11;
    }
LABEL_12:
    uint64_t v5 = 0;
    goto LABEL_13;
  }
  uint64_t v4 = *(void *)(a3 + 8);
  if (v4 != 19) {
    goto LABEL_10;
  }
LABEL_11:
  uint64_t v5 = 1;
LABEL_13:
  xpc_release(object);
  return v5;
}

void sub_100C4D5D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_100C4D604(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    xpc_object_t v6 = xpc_BOOL_create(1);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kSuccess";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4D718(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4D744(void *a1)
{
  xpc_object_t object = 0;
  std::string __p = a1;
  uint64_t v4 = "kDeleteProfile";
  sub_100048BAC((uint64_t)&__p, &object);
  if (xpc_get_type(object) != (xpc_type_t)&_xpc_type_null)
  {
    std::string __p = 0;
    uint64_t v4 = 0;
    uint64_t v5 = 0;
    xpc::dyn_cast_or_default();
    if (__p)
    {
      uint64_t v4 = (const char *)__p;
      operator delete(__p);
    }
  }
  xpc_release(object);
  return 0;
}

void sub_100C4D81C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15)
{
  if (__p) {
    operator delete(__p);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_100C4D850(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    xpc_object_t v6 = xpc_BOOL_create(1);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kSuccess";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4D964(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4D990(uint64_t a1, ctu **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 1)
  {
    ctu::cf_to_xpc((uint64_t *)&v6, a2[1], a2);
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kProfiles";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    long long v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4DA94(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4DABC(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    uint64_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "force get profiles OK", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kCardProfiles";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      uint64_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "force get profiles failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      uint64_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    uint64_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4DD0C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C4DD40(xpc_object_t *a1, uint64_t a2, uint64_t *a3)
{
  v20[0] = a1;
  v20[1] = "kSignIdMap";
  xpc_object_t value = xpc_dictionary_get_value(*a1, "kSignIdMap");
  if (value)
  {
    long long v17 = 0;
    uint64_t v18 = 0;
    uint64_t v19 = 0;
    sub_100048BAC((uint64_t)v20, &object);
    int v21 = 0;
    int v22 = 0;
    uint64_t v23 = 0;
    xpc::dyn_cast_or_default();
    if (v21)
    {
      int v22 = v21;
      operator delete(v21);
    }
    xpc_release(object);
    if (v17 == v18)
    {
      xpc_object_t v14 = xpc_string_create("no binary input provided");
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      int v21 = *(char **)a2;
      int v22 = "kError";
      sub_100035E70((uint64_t)&v21, &v14, &v15);
      xpc_release(v15);
      xpc_object_t v15 = 0;
      xpc_release(v14);
      xpc_object_t v14 = 0;
    }
    else
    {
      uint64_t v6 = *a3;
      std::string __p = v17;
      uint64_t v12 = v18;
      uint64_t v13 = v19;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      long long v17 = 0;
      v9[0] = _NSConcreteStackBlock;
      v9[1] = 3321888768;
      _OWORD v9[2] = sub_100C50558;
      void v9[3] = &unk_101A49A20;
      xpc_object_t v7 = *(std::__shared_weak_count **)(a2 + 8);
      v9[4] = *(void *)a2;
      uint64_t v10 = v7;
      if (v7) {
        atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, void **, void *))(*(void *)v6 + 80))(v6, &__p, v9);
      if (__p)
      {
        uint64_t v12 = __p;
        operator delete(__p);
      }
      if (v10) {
        sub_10004D2C8(v10);
      }
    }
    if (v17)
    {
      uint64_t v18 = v17;
      operator delete(v17);
    }
  }
  return value != 0;
}

void sub_100C4DF1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *a21,uint64_t a22)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (__p) {
    operator delete(__p);
  }
  if (a21) {
    operator delete(a21);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C4DF7C(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    xpc_object_t object = xpc_data_create(a2 + 1, 0x10uLL);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = "EID";
    sub_100035E70((uint64_t)&v5, &object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    xpc_release(object);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    uint64_t v5 = *(void *)(a1 + 32);
    uint64_t v6 = "EID";
    sub_100035E70((uint64_t)&v5, &v3, &v4);
    xpc_release(v4);
    xpc_object_t v4 = 0;
    xpc_release(v3);
  }
}

void sub_100C4E058(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    if (a2[1])
    {
      xpc_object_t v8 = xpc_BOOL_create(1);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      uint64_t v10 = *(void *)(a1 + 32);
      xpc_object_t v11 = "kSuccess";
      sub_100035E70((uint64_t)&v10, &v8, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
    else
    {
      xpc_object_t v6 = xpc_string_create("failed");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      uint64_t v10 = *(void *)(a1 + 32);
      xpc_object_t v11 = "kError";
      sub_100035E70((uint64_t)&v10, &v6, &v7);
      xpc_release(v7);
      xpc_object_t v7 = 0;
      xpc_release(v6);
    }
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    xpc_object_t v4 = (const char *)asString();
    xpc_object_t v12 = xpc_string_create(v4);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    uint64_t v10 = *(void *)(a1 + 32);
    xpc_object_t v11 = "kError";
    sub_100035E70((uint64_t)&v10, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
  }
}

void sub_100C4E1D8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4E204(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "force get profiles OK", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kCardProfiles";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      xpc_object_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "force get tape profiles failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      xpc_object_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    xpc_object_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4E454(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4E488(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    if (a2[1])
    {
      xpc_object_t v8 = xpc_BOOL_create(1);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      uint64_t v10 = *(void *)(a1 + 32);
      xpc_object_t v11 = "kSuccess";
      sub_100035E70((uint64_t)&v10, &v8, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v8);
    }
    else
    {
      xpc_object_t v6 = xpc_string_create("failed");
      if (!v6) {
        xpc_object_t v6 = xpc_null_create();
      }
      uint64_t v10 = *(void *)(a1 + 32);
      xpc_object_t v11 = "kError";
      sub_100035E70((uint64_t)&v10, &v6, &v7);
      xpc_release(v7);
      xpc_object_t v7 = 0;
      xpc_release(v6);
    }
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    xpc_object_t v4 = (const char *)asString();
    xpc_object_t v12 = xpc_string_create(v4);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    uint64_t v10 = *(void *)(a1 + 32);
    xpc_object_t v11 = "kError";
    sub_100035E70((uint64_t)&v10, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
  }
}

void sub_100C4E608(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4E634(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "GetTapeDeviceCaps OK", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kGetTapeDeviceCapabilities";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      xpc_object_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "GetTapeDeviceCaps failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      xpc_object_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    xpc_object_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4E884(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100C4E8B8(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (v1 != 1)
  {
    if (v1 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      uint64_t v5 = &ctu::ResultIsError::~ResultIsError;
    }
    else
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
      uint64_t v5 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
    }
    __cxa_throw(exception, v4, (void (*)(void *))v5);
  }
  return a1 + 8;
}

void sub_100C4E940(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4E958(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "get Euicc Info1 OK", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kEuiccInfo1";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      xpc_object_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "get Euicc Info1 failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      xpc_object_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    xpc_object_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4EBA8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4EBDC(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "Get Session Data success", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kGetSessionData";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      xpc_object_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Get Session Data failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      xpc_object_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    xpc_object_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4EE2C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4EE60(uint64_t a1, unsigned __int8 *a2)
{
  if (*a2 == 1)
  {
    if (a2[1])
    {
      xpc_object_t v12 = xpc_BOOL_create(1);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      *(void *)std::string buf = *(void *)(a1 + 32);
      long long v17 = "kSuccess";
      sub_100035E70((uint64_t)buf, &v12, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v12);
    }
    else
    {
      xpc_object_t v10 = xpc_string_create("failed");
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      *(void *)std::string buf = *(void *)(a1 + 32);
      long long v17 = "kError";
      sub_100035E70((uint64_t)buf, &v10, &v11);
      xpc_release(v11);
      xpc_object_t v11 = 0;
      xpc_release(v10);
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v17;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Clear Session Data failed", buf, 2u);
    }
    int v5 = *a2;
    if (v5 != 2)
    {
      if (v5 == 1)
      {
        exception = (ctu::ResultIsNotError *)__cxa_allocate_exception(0x10uLL);
        ctu::ResultIsNotError::ResultIsNotError(exception);
        long long v9 = &ctu::ResultIsNotError::~ResultIsNotError;
      }
      else
      {
        exception = (ctu::ResultIsNotError *)__cxa_allocate_exception(0x10uLL);
        ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
        long long v9 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
      }
      __cxa_throw(exception, v8, (void (*)(void *))v9);
    }
    int v6 = (const char *)asString();
    xpc_object_t v14 = xpc_string_create(v6);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    *(void *)std::string buf = *(void *)(a1 + 32);
    long long v17 = "kError";
    sub_100035E70((uint64_t)buf, &v14, &v15);
    xpc_release(v15);
    xpc_object_t v15 = 0;
    xpc_release(v14);
  }
}

void sub_100C4F080(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4F0B0(uint64_t a1, ctu **a2)
{
  if (*(unsigned char *)a2 == 1)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    xpc_object_t v4 = v18;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "get Euicc Challenge OK", buf, 2u);
    }
    int v6 = *(unsigned __int8 *)a2;
    if (v6 == 1)
    {
      ctu::cf_to_xpc((uint64_t *)&v13, a2[1], v5);
      *(void *)std::string buf = *(void *)(a1 + 32);
      uint64_t v18 = "kEuiccChallenge";
      sub_100035E70((uint64_t)buf, &v13, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v13);
      return;
    }
    if (v6 == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      xpc_object_t v12 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v18;
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "get Euicc Challenge failed", buf, 2u);
  }
  int v8 = *(unsigned __int8 *)a2;
  if (v8 != 2)
  {
    if (v8 == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsNotError::ResultIsNotError(exception);
      xpc_object_t v12 = &ctu::ResultIsNotError::~ResultIsNotError;
      goto LABEL_17;
    }
LABEL_16:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    xpc_object_t v12 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_17:
    __cxa_throw(exception, v11, (void (*)(void *))v12);
  }
  long long v9 = (const char *)asString();
  xpc_object_t v15 = xpc_string_create(v9);
  if (!v15) {
    xpc_object_t v15 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 32);
  uint64_t v18 = "kError";
  sub_100035E70((uint64_t)buf, &v15, &v16);
  xpc_release(v16);
  xpc_object_t v16 = 0;
  xpc_release(v15);
}

void sub_100C4F300(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C4F334(uint64_t a1, void **a2, uint64_t a3)
{
  std::mutex::lock(&stru_101B09FA8);
  memset(&__str, 0, sizeof(__str));
  int v6 = sub_100046F68(a1, a2);
  xpc_object_t v7 = v6;
  uint64_t v8 = a1 + 8;
  if ((void **)(a1 + 8) != v6)
  {
    std::string::operator=(&__str, (const std::string *)(v6 + 7));
    std::string::size_type v9 = 0;
    memset(&__p, 0, sizeof(__p));
    memset(&v18, 0, sizeof(v18));
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
LABEL_7:
    xpc_object_t v12 = (char *)p_str + v9;
    xpc_object_t v13 = (char *)p_str + size;
    while (v13 - v12 >= 1)
    {
      xpc_object_t v14 = memchr(v12, 44, v13 - v12);
      if (!v14) {
        break;
      }
      if (*v14 == 44)
      {
        if (v14 != v13)
        {
          std::string::size_type v15 = v14 - (unsigned char *)p_str;
          if (v14 - (unsigned char *)p_str != -1)
          {
            std::string::basic_string(&v17, &__str, v9, v15 - v9, (std::allocator<char> *)&v21);
            if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__p.__r_.__value_.__l.__data_);
            }
            std::string __p = v17;
            std::string::operator=(&v18, &__p);
            *(void *)(a3 + 8) = (char *)sub_100C50F84(*(long long ***)a3, *(void *)(a3 + 8), (unint64_t)&v18)
                                + 24;
            std::string::size_type v9 = v15 + 1;
            std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
              p_str = &__str;
            }
            else {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
            }
            if (size > v15) {
              goto LABEL_7;
            }
          }
        }
        break;
      }
      xpc_object_t v12 = v14 + 1;
    }
    std::string::basic_string(&v17, &__str, v9, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v21);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    std::string __p = v17;
    std::string::operator=(&v18, &__p);
    *(void *)(a3 + 8) = (char *)sub_100C50F84(*(long long ***)a3, *(void *)(a3 + 8), (unint64_t)&v18) + 24;
    if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v18.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
  }
  std::mutex::unlock(&stru_101B09FA8);
  return v8 != (void)v7;
}

void sub_100C4F54C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  std::mutex::unlock(&stru_101B09FA8);
  _Unwind_Resume(a1);
}

uint64_t sub_100C4F5A8(uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_100048008(a1, a2);
  }
  else
  {
    sub_1000D87F8(a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_100C4F5E8(uint64_t **a1, std::string *this, uint64_t a3, uint64_t a4)
{
  memset(&v15, 0, sizeof(v15));
  if (a3 != a4)
  {
    for (uint64_t i = a3 + 24; ; i += 24)
    {
      if (*(char *)(i - 1) < 0)
      {
        sub_10004FC84(__p, *(void **)(i - 24), *(void *)(i - 16));
      }
      else
      {
        long long v8 = *(_OWORD *)(i - 24);
        uint64_t v14 = *(void *)(i - 8);
        *(_OWORD *)std::string __p = v8;
      }
      if (v14 >= 0) {
        std::string::size_type v9 = __p;
      }
      else {
        std::string::size_type v9 = (void **)__p[0];
      }
      if (v14 >= 0) {
        std::string::size_type v10 = HIBYTE(v14);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(&v15, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v14) < 0) {
        operator delete(__p[0]);
      }
      if (i == a4) {
        break;
      }
      std::string::append(&v15, ",", 1uLL);
    }
  }
  uint64_t v11 = sub_10036627C(a1, this, &v15);
  if (SHIBYTE(v15.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v15.__r_.__value_.__l.__data_);
  }
  return v11;
}

void sub_100C4F6EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C4F728(uint64_t a1, uint64_t a2)
{
  sub_1000D935C((uint64_t)&v8, (long long *)(a2 + 24), *(long long **)(a1 + 8), a2);
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v6 != v4)
  {
    do
    {
      if (*(char *)(v6 - 1) < 0) {
        operator delete(*(void **)(v6 - 24));
      }
      v6 -= 24;
    }
    while (v6 != v5);
  }
  *(void *)(a1 + 8) = v5;
  return a2;
}

const void **sub_100C4F7A4(const void **a1, const void **a2)
{
  *(unsigned char *)a1 = 0;
  sub_1000C7FE8(a1, a2);
  return a1;
}

void sub_100C4F7D0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)v1 == 1) {
    sub_100057D78((const void **)(v1 + 8));
  }
  *(unsigned char *)uint64_t v1 = 0;
  _Unwind_Resume(exception_object);
}

void sub_100C4F7F4(uint64_t a1, ctu **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 1)
  {
    ctu::cf_to_xpc((uint64_t *)&v6, a2[1], a2);
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kNotifications";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4F8F8(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4F920(uint64_t a1, ctu **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 1)
  {
    ctu::cf_to_xpc((uint64_t *)&v6, a2[1], a2);
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kNotification";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4FA24(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4FA4C(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    xpc_object_t v6 = xpc_string_create("Success");
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kDeleteResult";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    std::string::size_type v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C4FB64(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4FB90(Registry *this@<X1>, void *a2@<X0>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, this);
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    xpc_object_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v13 = v6;
  std::string::size_type v10 = sub_10004D37C(&v5[1].__m_.__sig, &v13);
  if (v10)
  {
    uint64_t v12 = v10[3];
    xpc_object_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v12 = 0;
    xpc_object_t v11 = 0;
  }
  std::mutex::unlock(v5);
  *a2 = v12;
  a2[1] = v11;
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v11);
  }
}

void sub_100C4FC5C(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if (v3 == 1)
  {
    uint64_t v5 = (const char *)(a2 + 8);
    if ((char)a2[31] < 0) {
      uint64_t v5 = *(const char **)v5;
    }
    xpc_object_t v7 = xpc_string_create(v5);
    if (!v7) {
      xpc_object_t v7 = xpc_null_create();
    }
    uint64_t v9 = *(void *)(a1 + 32);
    std::string::size_type v10 = "kSuccess";
    sub_100035E70((uint64_t)&v9, &v7, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    xpc_release(v7);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v9 = *(void *)(a1 + 32);
    std::string::size_type v10 = "kError";
    sub_100035E70((uint64_t)&v9, &object, &v12);
    xpc_release(v12);
    xpc_object_t v12 = 0;
    xpc_release(object);
  }
}

void sub_100C4FD7C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C4FDA8(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *a2;
  if (v4 != 1)
  {
    if (v4 == 2)
    {
      uint64_t v5 = (const char *)asString();
      xpc_object_t v16 = xpc_string_create(v5);
      if (!v16) {
        xpc_object_t v16 = xpc_null_create();
      }
      uint64_t v14 = *(void *)(a1 + 32);
      std::string v15 = "kError";
      sub_100035E70((uint64_t)&v14, &v16, &v17);
      xpc_release(v17);
      xpc_object_t v17 = 0;
      xpc_release(v16);
      return;
    }
    exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    goto LABEL_17;
  }
  xpc_object_t v12 = xpc_int64_create(*((void *)a2 + 1));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  uint64_t v14 = *(void *)(a1 + 32);
  std::string v15 = "kUnique";
  sub_100035E70((uint64_t)&v14, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  int v6 = *a2;
  if (v6 != 1)
  {
    if (v6 == 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsError::ResultIsError(exception);
      uint64_t v9 = &ctu::ResultIsError::~ResultIsError;
      goto LABEL_18;
    }
    exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
LABEL_17:
    uint64_t v9 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
LABEL_18:
    __cxa_throw(exception, v8, (void (*)(void *))v9);
  }
  xpc_object_t v10 = xpc_int64_create(*((void *)a2 + 2));
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  uint64_t v14 = *(void *)(a1 + 32);
  std::string v15 = "kDuplicates";
  sub_100035E70((uint64_t)&v14, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
}

void sub_100C4FF60(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_100C4FFA0(void *a1)
{
  *a1 = off_101A49AC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C4FFEC(void *a1)
{
  *a1 = off_101A49AC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C50058(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A49AC0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C500B4(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A49AC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C500EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C500FC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C5013C(uint64_t a1, unsigned __int16 *a2)
{
  if (*a2 > 0xFFu)
  {
    uint64_t v3 = (const char *)asString();
    xpc_object_t v6 = xpc_string_create(v3);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = "kError";
    sub_100035E70((uint64_t)&v4, &v6, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v6);
  }
  else
  {
    xpc_object_t v6 = xpc_BOOL_create(1);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = "kSuccess";
    sub_100035E70((uint64_t)&v4, &v6, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v6);
  }
}

uint64_t sub_100C50230(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C50270()
{
}

void *sub_100C5027C(void *a1)
{
  *a1 = off_101A49B40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C502C8(void *a1)
{
  *a1 = off_101A49B40;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C50334(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A49B40;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C50390(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A49B40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C503C8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C503D8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C50418(uint64_t a1, unsigned __int16 *a2)
{
  if (*a2 > 0xFFu)
  {
    uint64_t v3 = (const char *)asString();
    xpc_object_t v6 = xpc_string_create(v3);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = "kError";
    sub_100035E70((uint64_t)&v4, &v6, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v6);
  }
  else
  {
    xpc_object_t v6 = xpc_BOOL_create(1);
    if (!v6) {
      xpc_object_t v6 = xpc_null_create();
    }
    uint64_t v4 = *(void *)(a1 + 8);
    uint64_t v5 = "kSuccess";
    sub_100035E70((uint64_t)&v4, &v6, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v6);
  }
}

uint64_t sub_100C5050C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C5054C()
{
}

void sub_100C50558(uint64_t a1, ctu **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 1)
  {
    ctu::cf_to_xpc((uint64_t *)&v6, a2[1], a2);
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = "kResult";
    sub_100035E70((uint64_t)&v8, &v6, &v7);
    xpc_release(v7);
    xpc_object_t v7 = 0;
    xpc_release(v6);
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    uint64_t v4 = (const char *)asString();
    xpc_object_t object = xpc_string_create(v4);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v8 = *(void *)(a1 + 32);
    uint64_t v9 = "kError";
    sub_100035E70((uint64_t)&v8, &object, &v11);
    xpc_release(v11);
    xpc_object_t v11 = 0;
    xpc_release(object);
  }
}

void sub_100C5065C(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void *sub_100C50684(void *a1)
{
  *a1 = off_101A49BC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C506D0(void *a1)
{
  *a1 = off_101A49BC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C5073C(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A49BC0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C50798(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A49BC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C507D0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C507E0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C50820(uint64_t a1, unsigned __int8 *a2)
{
  *(_OWORD *)std::string __p = 0u;
  long long v13 = 0u;
  sub_100494454((unsigned __int8 *)__p, a2);
  if (LOBYTE(__p[0]) == 1)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    uint64_t v4 = v17;
    ctu::OsLogContext::~OsLogContext(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "get associated IMEI OK", buf, 2u);
    }
    if (LOBYTE(__p[0]) == 1)
    {
      if (v13 >= 0) {
        uint64_t v5 = (const char *)&__p[1];
      }
      else {
        uint64_t v5 = (const char *)__p[1];
      }
      xpc_object_t v14 = xpc_string_create(v5);
      if (!v14) {
        xpc_object_t v14 = xpc_null_create();
      }
      *(void *)std::string buf = *(void *)(a1 + 8);
      xpc_object_t v17 = "kIMEI";
      sub_100035E70((uint64_t)buf, &v14, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v14);
      goto LABEL_17;
    }
    if (LOBYTE(__p[0]) == 2)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      xpc_object_t v10 = &ctu::ResultIsError::~ResultIsError;
      ctu::ResultIsError::ResultIsError(exception);
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  xpc_object_t v6 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
  xpc_object_t v7 = v17;
  ctu::OsLogContext::~OsLogContext(v6);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "get associated IMEI failed", buf, 2u);
  }
  if (LOBYTE(__p[0]) != 2)
  {
    if (LOBYTE(__p[0]) == 1)
    {
      exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
      xpc_object_t v10 = &ctu::ResultIsNotError::~ResultIsNotError;
      ctu::ResultIsNotError::ResultIsNotError(exception);
      goto LABEL_26;
    }
LABEL_25:
    exception = (ctu::ResultIsError *)__cxa_allocate_exception(0x10uLL);
    xpc_object_t v10 = &ctu::ResultIsEmptyError::~ResultIsEmptyError;
    ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
LABEL_26:
    __cxa_throw(exception, v11, (void (*)(void *))v10);
  }
  uint64_t v8 = (const char *)asString();
  xpc_object_t v14 = xpc_string_create(v8);
  if (!v14) {
    xpc_object_t v14 = xpc_null_create();
  }
  *(void *)std::string buf = *(void *)(a1 + 8);
  xpc_object_t v17 = "kError";
  sub_100035E70((uint64_t)buf, &v14, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v14);
LABEL_17:
  if (LOBYTE(__p[0]) == 1 && SHIBYTE(v13) < 0) {
    operator delete(__p[1]);
  }
}

void sub_100C50ACC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  __cxa_free_exception(v15);
  if (a9 == 1 && a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C50B28(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C50B68()
{
}

void *sub_100C50B74(void *a1)
{
  *a1 = off_101A49C40;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C50BC0(void *a1)
{
  *a1 = off_101A49C40;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C50C2C(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A49C40;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C50C88(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A49C40;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C50CC0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C50CD0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C50D10(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  unsigned int v4 = v3 - 1;
  if ((v3 - 1) < 2 && v3 == 1)
  {
    if (a2[1])
    {
      xpc_object_t v10 = xpc_BOOL_create(1);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      *(void *)std::string buf = *(void *)(a1 + 8);
      std::string v15 = "kSuccess";
      sub_100035E70((uint64_t)buf, &v10, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v10);
    }
    else
    {
      xpc_object_t v8 = xpc_string_create("failed");
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      *(void *)std::string buf = *(void *)(a1 + 8);
      std::string v15 = "kError";
      sub_100035E70((uint64_t)buf, &v8, &v9);
      xpc_release(v9);
      xpc_object_t v9 = 0;
      xpc_release(v8);
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "vinyl.test");
    uint64_t v5 = v15;
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Set associated IMEI failed", buf, 2u);
    }
    if (v4 >= 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    xpc_object_t v6 = (const char *)asString();
    xpc_object_t v12 = xpc_string_create(v6);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    *(void *)std::string buf = *(void *)(a1 + 8);
    std::string v15 = "kError";
    sub_100035E70((uint64_t)buf, &v12, &v13);
    xpc_release(v13);
    xpc_object_t v13 = 0;
    xpc_release(v12);
  }
}

void sub_100C50F18(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C50F38(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C50F78()
{
}

long long *sub_100C50F84(long long **a1, uint64_t a2, unint64_t a3)
{
  unsigned int v4 = (long long *)a2;
  unint64_t v6 = (unint64_t)a1[1];
  uint64_t v8 = (uint64_t)(a1 + 2);
  unint64_t v7 = (unint64_t)a1[2];
  if (v6 >= v7)
  {
    xpc_object_t v9 = *a1;
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v6 - (void)*a1) >> 3) + 1;
    if (v10 > 0xAAAAAAAAAAAAAAALL) {
      sub_1000D8578();
    }
    uint64_t v11 = a2 - (void)v9;
    int64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((a2 - (uint64_t)v9) >> 3);
    unint64_t v13 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)v9) >> 3);
    if (2 * v13 > v10) {
      unint64_t v10 = 2 * v13;
    }
    if (v13 >= 0x555555555555555) {
      unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
    }
    else {
      unint64_t v14 = v10;
    }
    uint64_t v40 = a1 + 2;
    if (v14)
    {
      std::string v15 = (char *)sub_10004812C((uint64_t)(a1 + 2), v14);
      uint64_t v17 = v16;
    }
    else
    {
      std::string v15 = 0;
      uint64_t v17 = 0;
    }
    std::string v18 = (long long *)&v15[24 * v12];
    long long v36 = v15;
    std::string::size_type v37 = (char *)v18;
    uint64_t v38 = (uint64_t)v18;
    std::string::size_type v39 = &v15[24 * v17];
    if (v12 == v17)
    {
      if (v11 < 1)
      {
        if (v9 == v4) {
          unint64_t v20 = 1;
        }
        else {
          unint64_t v20 = 2 * v12;
        }
        v41[4] = v8;
        char v21 = (char *)sub_10004812C(v8, v20);
        uint64_t v23 = v37;
        uint64_t v24 = v38;
        uint64_t v25 = v37;
        uint64_t v26 = (uint64_t)&v21[24 * (v20 >> 2)];
        uint64_t v27 = v38 - (void)v37;
        if ((char *)v38 != v37)
        {
          uint64_t v26 = (uint64_t)&v21[24 * (v20 >> 2) + 24 * (v27 / 24)];
          uint64_t v28 = 24 * (v27 / 24);
          uint32_t v29 = &v21[24 * (v20 >> 2)];
          char v30 = v37;
          do
          {
            long long v31 = *(_OWORD *)v30;
            *((void *)v29 + 2) = *((void *)v30 + 2);
            *(_OWORD *)uint32_t v29 = v31;
            v29 += 24;
            *((void *)v30 + 1) = 0;
            *((void *)v30 + 2) = 0;
            *(void *)char v30 = 0;
            v30 += 24;
            v28 -= 24;
          }
          while (v28);
          uint64_t v25 = (char *)v24;
        }
        uint64_t v32 = v36;
        std::string::size_type v33 = v39;
        long long v36 = v21;
        std::string::size_type v37 = &v21[24 * (v20 >> 2)];
        v41[0] = v32;
        v41[1] = v23;
        uint64_t v38 = v26;
        std::string::size_type v39 = &v21[24 * v22];
        v41[2] = v25;
        v41[3] = v33;
        sub_100048174((uint64_t)v41);
        std::string v18 = (long long *)v38;
      }
      else
      {
        if (v12 >= -1) {
          uint64_t v19 = v12 + 1;
        }
        else {
          uint64_t v19 = v12 + 2;
        }
        sub_1000D935C((uint64_t)v41, v18, v18, (uint64_t)v18 - 24 * (v19 >> 1));
        v37 -= 24 * (v19 >> 1);
        uint64_t v38 = (uint64_t)v18;
      }
    }
    if (*(char *)(a3 + 23) < 0)
    {
      sub_10004FC84(v18, *(void **)a3, *(void *)(a3 + 8));
    }
    else
    {
      long long v34 = *(_OWORD *)a3;
      *((void *)v18 + 2) = *(void *)(a3 + 16);
      *std::string v18 = v34;
    }
    v38 += 24;
    unsigned int v4 = (long long *)sub_100861100((uint64_t)a1, &v36, v4);
    sub_100048174((uint64_t)&v36);
  }
  else if (a2 == v6)
  {
    sub_1000D87F8(a1, (long long *)a3);
  }
  else
  {
    sub_100861090((uint64_t)a1, a2, v6, a2 + 24);
    if ((unint64_t)v4 <= a3) {
      a3 += 24 * ((unint64_t)a1[1] > a3);
    }
    std::string::operator=((std::string *)v4, (const std::string *)a3);
  }
  return v4;
}

void sub_100C5122C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100C51240(void *a1)
{
  *a1 = off_101A49CC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C5128C(void *a1)
{
  *a1 = off_101A49CC0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C512F8(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A49CC0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C51354(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A49CC0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C5138C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C5139C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C513DC(uint64_t a1, uint64_t a2, long long *a3, unsigned __int16 *a4)
{
  LOBYTE(v19) = 0;
  char v22 = 0;
  int v5 = *(unsigned __int8 *)(a2 + 24);
  if (*(unsigned char *)(a2 + 24))
  {
    unint64_t v6 = (void *)(a2 + 8);
    unint64_t v7 = *(void **)(a2 + 8);
    uint64_t v19 = *(void ***)a2;
    unint64_t v20 = v7;
    if (*(void *)(a2 + 16))
    {
      void v7[2] = &v20;
      *(void *)a2 = v6;
      void *v6 = 0;
      *(void *)(a2 + 16) = 0;
    }
    else
    {
      uint64_t v19 = &v20;
    }
    char v22 = 1;
  }
  long long v17 = *a3;
  *(_OWORD *)std::string __p = *a3;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  if (*a4 >= 0x100u)
  {
    uint64_t v16 = (const char *)asString();
    xpc_object_t v30 = xpc_string_create(v16);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    v27[0] = *(void **)(a1 + 8);
    v27[1] = "kError";
    sub_100035E70((uint64_t)v27, &v30, &v25);
    xpc_release(v25);
    xpc_object_t v25 = 0;
    std::string v15 = (void *)v17;
    xpc_release(v30);
  }
  else
  {
    if (v5)
    {
      uint64_t v8 = v19;
      if (v19 != &v20)
      {
        do
        {
          ctu::hex_sp();
          if (v28 >= 0) {
            xpc_object_t v9 = (const char *)v27;
          }
          else {
            xpc_object_t v9 = (const char *)v27[0];
          }
          xpc_object_t v29 = xpc_string_create(v9);
          if (!v29) {
            xpc_object_t v29 = xpc_null_create();
          }
          uint64_t v10 = subscriber::asString();
          xpc_object_t v25 = *(xpc_object_t *)(a1 + 8);
          uint64_t v26 = (const char *)v10;
          sub_100035E70((uint64_t)&v25, &v29, &v30);
          xpc_release(v30);
          xpc_object_t v30 = 0;
          xpc_release(v29);
          xpc_object_t v29 = 0;
          if (v28 < 0) {
            operator delete(v27[0]);
          }
          uint64_t v11 = v8[1];
          if (v11)
          {
            do
            {
              int64_t v12 = (void **)v11;
              uint64_t v11 = (void *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              int64_t v12 = (void **)v8[2];
              BOOL v13 = *v12 == v8;
              uint64_t v8 = v12;
            }
            while (!v13);
          }
          uint64_t v8 = v12;
        }
        while (v12 != &v20);
      }
    }
    ctu::hex_sp();
    if (v28 >= 0) {
      unint64_t v14 = (const char *)v27;
    }
    else {
      unint64_t v14 = (const char *)v27[0];
    }
    xpc_object_t v23 = xpc_string_create(v14);
    if (!v23) {
      xpc_object_t v23 = xpc_null_create();
    }
    xpc_object_t v25 = *(xpc_object_t *)(a1 + 8);
    uint64_t v26 = "kAttestation";
    sub_100035E70((uint64_t)&v25, &v23, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v23);
    xpc_object_t v23 = 0;
    if (v28 < 0) {
      operator delete(v27[0]);
    }
    std::string v15 = __p[0];
  }
  if (v15) {
    operator delete(v15);
  }
  if (v22) {
    sub_10026CF54((uint64_t)&v19, v20);
  }
}

void sub_100C5166C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, char a17)
{
  if (__p) {
    operator delete(__p);
  }
  if (a17) {
    sub_10026CF54((uint64_t)&a14, a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C516D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C51718()
{
}

uint64_t sub_100C51724()
{
  return sub_100C624B8((uint64_t)&unk_101B1030A, (uint64_t)sub_100C49160);
}

uint64_t sub_100C51740(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    int v5 = 0;
    while (1)
    {
      unsigned int v15 = 0;
      unsigned int v13 = 0;
      unsigned int v14 = 0;
      uint64_t v12 = 0;
      int v11 = 0;
      uint64_t v10 = 0;
      int v9 = 0;
      uint64_t result = DERDecoderGetEncodingAt();
      if ((result & 0xFFFFFFFD) != 0) {
        break;
      }
      int v7 = result;
      v8[0] = 0;
      v8[1] = 0;
      DERDecoderInitialize();
      ++v5;
      uint64_t result = (*(uint64_t (**)(uint64_t, void *, void, void, void))(a3 + 16))(a3, v8, v15, v14, v13);
      if (a2 == v5)
      {
        if (v7) {
          return result;
        }
        goto LABEL_6;
      }
    }
  }
  else
  {
LABEL_6:
    LODWORD(v8[0]) = 0;
    return DERDecoderGetCount();
  }
  return result;
}

id sub_100C51B3C(uint64_t a1, uint64_t a2)
{
  id result = [*(id *)(a1 + 32) dictionaryWithDecodingVinylObject:a2];
  if (result)
  {
    id v4 = result;
    int v5 = *(void **)(a1 + 40);
    return [v5 addObject:v4];
  }
  return result;
}

void sub_100C5213C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100463290(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C52164(uint64_t *a1, char a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  if (v8)
  {
    int v9 = v8;
    *((_DWORD *)v8 + 3) = 0;
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t *))(a4 + 16))(a4, v8);
    if (!v10)
    {
      id v15 = 0;
      uint64_t v10 = sub_100C523B0(v9, &v15);
      if (!v10)
      {
        uint64_t v10 = sub_1004632FC(a1, a2, a3, [v15 bytes], objc_msgSend(v15, "length"), 1);
        if (v10)
        {
          ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
          unsigned int v13 = *(NSObject **)&v17[4];
          ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
          if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
          {
            if ((v10 + 1) > 8) {
              unsigned int v14 = "DEREncoderError(No Decoding)";
            }
            else {
              unsigned int v14 = off_101A49EF0[(int)v10 + 1];
            }
            *(_DWORD *)std::string buf = 136315138;
            *(void *)long long v17 = v14;
            _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "failed to add sub-encoder wrapper: %s", buf, 0xCu);
          }
        }
      }
    }
    sub_100463290(v9);
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v11 = *(NSObject **)&v17[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "failed to create sub-encoder for wrapping explicit", buf, 2u);
    }
    return 3;
  }
  return v10;
}

void sub_100C5236C(_Unwind_Exception *a1)
{
  sub_100463290(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C52390(uint64_t a1, uint64_t *a2)
{
  return sub_1004632FC(a2, 0, 0x10u, **(const void ***)(a1 + 32), *(_DWORD *)(*(void *)(a1 + 32) + 8), 1);
}

uint64_t sub_100C523B0(uint64_t *a1, void *a2)
{
  uint64_t v8 = 0;
  unsigned int v7 = 0;
  uint64_t v3 = sub_100463664(a1, &v8, &v7);
  if (v3)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v10[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if ((v3 + 1) > 8) {
        int v5 = "DEREncoderError(No Decoding)";
      }
      else {
        int v5 = off_101A49EF0[(int)v3 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v10 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "failed to encode buffer:%s", buf, 0xCu);
    }
  }
  else
  {
    *a2 = +[NSData dataWithBytesNoCopy:v8 length:v7 freeWhenDone:1];
  }
  return v3;
}

void sub_100C52DB4(uint64_t a1)
{
  v31[0] = 0;
  v31[1] = 0;
  v30[0] = 0;
  v30[1] = 0;
  v29[0] = 0;
  v29[1] = 0;
  v28[0] = 0;
  v28[1] = 0;
  v27[0] = 0;
  v27[1] = 0;
  v26[0] = 0;
  v26[1] = 0;
  v25[0] = 0;
  v25[1] = 0;
  v24[0] = 0;
  v24[1] = 0;
  int v2 = DERDecoderParseSequence();
  if (v2)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v37[8];
    ctu::OsLogContext::~OsLogContext(v3);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    if ((v2 + 1) > 8) {
      int v5 = "DEREncoderError(No Decoding)";
    }
    else {
      int v5 = off_101A49EF0[v2 + 1];
    }
    *(_DWORD *)std::string::size_type v37 = 136315138;
    *(void *)&v37[4] = v5;
    int v11 = "failed to decode vinyl profile list item sequence: %s";
LABEL_29:
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, v11, v37, 0xCu);
    return;
  }
  unint64_t v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 4, 1, 0, 16, 1, v31, 1, 0, 4, 0, v27, 1, 0, 10, 0, v30, 1,
         0,
         16,
         1,
         v29,
         1,
         0,
         4,
         0,
         v26,
         0,
         2,
         0,
         1,
         v25,
         0,
         2,
         1,
         1,
         v28);
  [(NSMutableDictionary *)v6 setValue:sub_100C59D44() forKey:@"ProfileDescriptor"];
  [(NSMutableDictionary *)v6 setValue:sub_100C59AAC() forKey:@"ProfileState"];
  *(_DWORD *)std::string::size_type v37 = 0;
  [(NSData *)sub_100C59920() getBytes:v37 length:4];
  [(NSMutableDictionary *)v6 setValue:+[NSNumber numberWithInt:v37[0]] forKey:@"ProfileType"];
  *(_OWORD *)std::string::size_type v37 = 0uLL;
  v34[0] = 0;
  v34[1] = 0;
  v33[0] = 0;
  v33[1] = 0;
  v32[0] = 0;
  v32[1] = 0;
  xpc_object_t v23 = v37;
  uint64_t v21 = 0;
  uint64_t v22 = 1;
  uint64_t v19 = 0;
  uint64_t v20 = 2;
  int v7 = DERDecoderParseSequence();
  if (v7)
  {
    uint64_t v8 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v9 = *(NSObject **)&v36[4];
    ctu::OsLogContext::~OsLogContext(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      if ((v7 + 1) > 8) {
        uint64_t v10 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v10 = off_101A49EF0[v7 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)long long v36 = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "failed to decode L3Owner sequence: %s", buf, 0xCu);
    }
    uint64_t v12 = 0;
  }
  else
  {
    uint64_t v12 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 4, 0, 2, 0, 1, v37, 0, 2, 1, 1, v34, 0, 2, 2, 1, v33, 1,
            0,
            4,
            0,
            v32);
    [(NSMutableDictionary *)v12 setValue:sub_100C5A1F4(v37, 12, (uint64_t)&stru_101A49E10) forKey:@"Principal"];
    [(NSMutableDictionary *)v12 setValue:sub_100C5A1F4(v34, 12, (uint64_t)&stru_101A49E10) forKey:@"ServiceName"];
    [(NSMutableDictionary *)v12 setValue:sub_100C583C8(v33) forKey:@"ProfileID"];
    [(NSMutableDictionary *)v12 setValue:sub_100C59920() forKey:@"HashBatchDescriptor"];
  }
  [(NSMutableDictionary *)v6 setValue:v12, @"L3Owner", v19, v20, v21, v22, v23 forKey];
  [(NSMutableDictionary *)v6 setValue:sub_100C584EC((uint64_t)v28) forKey:@"MetaData"];
  int v13 = DERDecoderParseSequence();
  if (v13)
  {
    unsigned int v14 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v37[8];
    ctu::OsLogContext::~OsLogContext(v14);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    if ((v13 + 1) > 8) {
      id v15 = "DEREncoderError(No Decoding)";
    }
    else {
      id v15 = off_101A49EF0[v13 + 1];
    }
    *(_DWORD *)std::string::size_type v37 = 136315138;
    *(void *)&v37[4] = v15;
    int v11 = "failed to decode inner meta data in profile list: %s";
    goto LABEL_29;
  }
  LODWORD(v34[0]) = 0;
  int Count = DERDecoderGetCount();
  if (Count)
  {
    long long v17 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)v37, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v37[8];
    ctu::OsLogContext::~OsLogContext(v17);
    if (!os_log_type_enabled(v4, OS_LOG_TYPE_INFO)) {
      return;
    }
    if ((Count + 1) > 8) {
      std::string v18 = "DEREncoderError(No Decoding)";
    }
    else {
      std::string v18 = off_101A49EF0[Count + 1];
    }
    *(_DWORD *)std::string::size_type v37 = 136315138;
    *(void *)&v37[4] = v18;
    int v11 = "failed to get count for object array: %s";
    goto LABEL_29;
  }
  [(NSMutableDictionary *)v6 setValue:sub_100C584EC((uint64_t)v24), @"MetaData", 1, 0, 16, 1, v24 forKey];
  if (v6) {
    [*(id *)(a1 + 32) addObject:v6];
  }
}

void sub_100C533EC(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100463290(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C53408(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) valueForKey:@"L3Curent"];
  if (v4)
  {
    v25[0] = _NSConcreteStackBlock;
    v25[1] = 3221225472;
    void v25[2] = sub_100C53848;
    v25[3] = &unk_101A49DA8;
    v25[4] = v4;
    uint64_t v5 = sub_100C52164(a2, 2, 0, (uint64_t)v25);
    if (v5) {
      return v5;
    }
    id v6 = [*(id *)(a1 + 32) valueForKey:@"L3Next"];
    v24[0] = _NSConcreteStackBlock;
    v24[1] = 3221225472;
    void v24[2] = sub_100C538C4;
    v24[3] = &unk_101A49DA8;
    v24[4] = v6;
    uint64_t v5 = sub_100C52164(a2, 2, 1u, (uint64_t)v24);
    if (v5) {
      return v5;
    }
  }
  else
  {
    int v7 = (const char *)kCtLoggingSystemName;
    uint64_t v8 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v9 = v27;
    ctu::OsLogContext::~OsLogContext(v8);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "missing key kVinylL3TokenCurrentKey", buf, 2u);
    }
    [*(id *)(a1 + 32) valueForKey:@"L3Next"];
    uint64_t v10 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, v7, "der");
    int v11 = v27;
    ctu::OsLogContext::~OsLogContext(v10);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_INFO, "missing key kVinylL3TokenNextKey", buf, 2u);
    }
  }
  id v12 = [*(id *)(a1 + 32) valueForKey:@"ProfileDescriptor"];
  int v13 = v12;
  if (v12)
  {
    v23[0] = _NSConcreteStackBlock;
    v23[1] = 3221225472;
    _OWORD v23[2] = sub_100C53940;
    v23[3] = &unk_101A49DA8;
    _OWORD v23[4] = v12;
    uint64_t v5 = sub_100C52164(a2, 2, 2u, (uint64_t)v23);
    if (v5) {
      return v5;
    }
  }
  else
  {
    unsigned int v14 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v15 = v27;
    ctu::OsLogContext::~OsLogContext(v14);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_INFO, "missing key kVinylProfileDescriptorKey", buf, 2u);
    }
  }
  id v16 = [*(id *)(a1 + 32) valueForKey:@"OperationType"];
  if (v16)
  {
    long long v17 = v16;
    v22[0] = _NSConcreteStackBlock;
    v22[1] = 3221225472;
    v22[2] = sub_100C539BC;
    v22[3] = &unk_101A49DA8;
    v22[4] = v16;
    uint64_t v5 = sub_100C52164(a2, 2, 3u, (uint64_t)v22);
    if (!v5)
    {
      if ([v17 integerValue] == (id)1) {
        objc_msgSend(*(id *)(a1 + 40), "setProfileID:", objc_msgSend(v13, "objectForKey:", @"ProfileID"));
      }
      uint64_t v18 = *(void *)(a1 + 48);
      if (v18)
      {
        *(void *)std::string buf = _NSConcreteStackBlock;
        uint64_t v27 = 3221225472;
        char v28 = sub_100C5AF8C;
        xpc_object_t v29 = &unk_101A49DA8;
        uint64_t v30 = v18;
        return sub_100C52164(a2, 2, 5u, (uint64_t)buf);
      }
      else
      {
        return 0;
      }
    }
  }
  else
  {
    uint64_t v19 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v20 = v27;
    ctu::OsLogContext::~OsLogContext(v19);
    uint64_t v5 = 1;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_INFO, "missing key kVinylOperationTypeKey", buf, 2u);
    }
  }
  return v5;
}

uint64_t sub_100C53848(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100C5A794;
  v4[3] = &unk_101A49DA8;
  void v4[4] = v2;
  return sub_100C52164(a2, 0, 0x10u, (uint64_t)v4);
}

uint64_t sub_100C538C4(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100C5A794;
  v4[3] = &unk_101A49DA8;
  void v4[4] = v2;
  return sub_100C52164(a2, 0, 0x10u, (uint64_t)v4);
}

uint64_t sub_100C53940(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 32);
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 3221225472;
  v4[2] = sub_100C5AAE0;
  v4[3] = &unk_101A49DA8;
  void v4[4] = v2;
  return sub_100C52164(a2, 0, 0x10u, (uint64_t)v4);
}

uint64_t sub_100C539BC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = sub_1004635EC(a2, 0, 0xAu, [*(id *)(a1 + 32) integerValue]);
  if (v2)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "der");
    uint64_t v3 = *(NSObject **)&v7[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if ((v2 + 1) > 8) {
        id v4 = "DEREncoderError(No Decoding)";
      }
      else {
        id v4 = off_101A49EF0[(int)v2 + 1];
      }
      int v6 = 136315138;
      *(void *)int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "failed to encode string 2: %s", (uint8_t *)&v6, 0xCu);
    }
  }
  return v2;
}

void sub_100C53B18(_Unwind_Exception *a1)
{
  objc_sync_exit(v1);
  _Unwind_Resume(a1);
}

void sub_100C53CA8(_Unwind_Exception *exception_object)
{
}

void sub_100C53E0C(_Unwind_Exception *exception_object)
{
}

void sub_100C54064(_Unwind_Exception *exception_object)
{
}

void sub_100C545B8(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_100463290(v1);
  }
  _Unwind_Resume(exception_object);
}

NSString *sub_100C54AD4(void *a1)
{
  if (*a1)
  {
    int DataWithTag = DERDecoderGetDataWithTag();
    if (!DataWithTag)
    {
      id v4 = +[NSMutableData dataWithCapacity:1];
      -[NSMutableData replaceBytesInRange:withBytes:](v4, "replaceBytesInRange:withBytes:", 0, 0, 0);
      -[NSMutableData resetBytesInRange:](v4, "resetBytesInRange:", 0, [(NSMutableData *)v4 length]);
      return +[NSString stringWithUTF8String:[(NSMutableData *)v4 bytes]];
    }
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v2 = *(NSObject **)&v7[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((DataWithTag + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[DataWithTag + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)int v7 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to decode UTF8 string: %s", buf, 0xCu);
    }
  }
  return 0;
}

void sub_100C56658(_Unwind_Exception *a1)
{
  sub_100463290(v1);
  _Unwind_Resume(a1);
}

void sub_100C568A8(_Unwind_Exception *exception_object)
{
}

void sub_100C56A3C(_Unwind_Exception *exception_object)
{
}

void sub_100C56E70(_Unwind_Exception *a1)
{
  sub_100463290(v1);
  _Unwind_Resume(a1);
}

void sub_100C577FC(_Unwind_Exception *a1)
{
  sub_100463290(v1);
  _Unwind_Resume(a1);
}

NSData *sub_100C5786C(void *a1, void *a2)
{
  uint64_t v10 = 0;
  unsigned int v9 = 0;
  id v4 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    *((_DWORD *)v4 + 3) = 0;
    sub_100C5A940(v4, a1);
    sub_100C5A940(v5, a2);
    sub_100463664(v5, &v10, &v9);
    int v6 = +[NSData dataWithBytesNoCopy:v10 length:v9 freeWhenDone:1];
    sub_100463290(v5);
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v7 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_DWORD *)std::string buf = 136315138;
      *(void *)id v12 = "NSData *EncodeKeyValue(NSString *, NSString *)";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_INFO, "%s Failed to create DER encoder", buf, 0xCu);
    }
    return 0;
  }
  return v6;
}

void sub_100C579BC(_Unwind_Exception *exception_object)
{
}

NSMutableDictionary *sub_100C58224()
{
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  int v0 = DERDecoderParseSequence();
  if (v0)
  {
    uint64_t v1 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v2 = *(NSObject **)&v10[4];
    ctu::OsLogContext::~OsLogContext(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((v0 + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[v0 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to parse receipt list item sub-sequence: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    id v4 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 3, 1, 0, 4, 0, v8, 1, 0, 4, 0, v7, 1, 0, 4, 0, v6);
    [(NSMutableDictionary *)v4 setValue:sub_100C59920() forKey:@"l2sourceUniqueId"];
    [(NSMutableDictionary *)v4 setValue:sub_100C59920() forKey:@"l2destinationUniqueId"];
    [(NSMutableDictionary *)v4 setValue:sub_100C59920() forKey:@"challenge"];
  }
  return v4;
}

NSData *sub_100C583C8(void *a1)
{
  if (*a1)
  {
    int v1 = DERDecoderParseSequence();
    if (!v1) {
      return sub_100C59920();
    }
    uint64_t v2 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v3 = *(NSObject **)&v7[4];
    ctu::OsLogContext::~OsLogContext(v2);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if ((v1 + 1) > 8) {
        id v4 = "DEREncoderError(No Decoding)";
      }
      else {
        id v4 = off_101A49EF0[v1 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)int v7 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "failed to parse explicit octet sequence: %s", buf, 0xCu);
    }
  }
  return 0;
}

NSMutableDictionary *sub_100C584EC(uint64_t a1)
{
  unsigned int v8 = 0;
  int Count = DERDecoderGetCount();
  if (Count)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v3 = *(NSObject **)&v10[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_INFO))
    {
      if ((Count + 1) > 8) {
        id v4 = "DEREncoderError(No Decoding)";
      }
      else {
        id v4 = off_101A49EF0[Count + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v10 = v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_INFO, "failed to get count for MetaData: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    uint64_t v5 = +[NSMutableDictionary dictionaryWithCapacity:v8];
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 3221225472;
    void v7[2] = sub_100C5B274;
    void v7[3] = &unk_101A49D80;
    v7[4] = v5;
    sub_100C51740(a1, v8, (uint64_t)v7);
  }
  return v5;
}

void sub_100C589A4(uint64_t a1)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  v8[0] = 0;
  v8[1] = 0;
  int v2 = DERDecoderParseSequence();
  if (v2)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if ((v2 + 1) > 8) {
        uint64_t v5 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v5 = off_101A49EF0[v2 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)id v12 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "failed to decode vinyl receipt list item sequence: %s", buf, 0xCu);
    }
  }
  else
  {
    buf[0] = 48;
    buf[1] = v10;
    int v6 = +[NSMutableData dataWithBytes:length:](NSMutableData, "dataWithBytes:length:", buf, 2, 1, 0, 16, 1, &v9, 1, 0, 12, 0, v8);
    [(NSMutableData *)v6 appendBytes:v9 length:v10];
    int v7 = +[NSMutableDictionary dictionaryWithCapacity:3];
    [(NSMutableDictionary *)v7 setValue:sub_100C58224() forKey:@"batchDescriptorId"];
    [(NSMutableDictionary *)v7 setValue:sub_100C54AD4(v8) forKey:@"ackURL"];
    [(NSMutableDictionary *)v7 setValue:v6 forKey:@"batchDescriptorIdRaw"];
    if (v7) {
      [*(id *)(a1 + 32) addObject:v7];
    }
  }
}

NSMutableDictionary *sub_100C595E0()
{
  v17[0] = 0;
  v17[1] = 0;
  v16[0] = 0;
  v16[1] = 0;
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  v12[0] = 0;
  v12[1] = 0;
  v11[0] = 0;
  v11[1] = 0;
  v10[0] = 0;
  v10[1] = 0;
  v9[0] = 0;
  v9[1] = 0;
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  int v0 = DERDecoderParseSequence();
  if (v0)
  {
    int v1 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v2 = *(NSObject **)&v19[4];
    ctu::OsLogContext::~OsLogContext(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((v0 + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[v0 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v19 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to parse signed profile sequence: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    id v4 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 14, 1, 0, 2, 0, v17, 0, 2, 0, 1, v16, 0, 2, 1, 1, v15, 0,
           2,
           2,
           1,
           v14,
           0,
           2,
           3,
           1,
           v13,
           0,
           2,
           4,
           1,
           v12,
           0,
           2,
           5,
           1,
           v11,
           0,
           2,
           6,
           1,
           v10,
           0,
           2,
           7,
           1,
           v9,
           0,
           2,
           8,
           1,
           v8,
           0,
           2,
           9,
           1,
           v7,
           0,
           2,
           10,
           1,
           v6);
    [(NSMutableDictionary *)v4 setValue:sub_100C59BF8() forKey:@"Version"];
    [(NSMutableDictionary *)v4 setValue:sub_100C5A1F4(v16, 10, (uint64_t)&stru_101A49E90) forKey:@"ProcessingInstruction"];
    [(NSMutableDictionary *)v4 setValue:sub_100C583C8(v15) forKey:@"ProfileID"];
    [(NSMutableDictionary *)v4 setValue:sub_100C5A1F4(v14, 16, (uint64_t)&stru_101A49EB0) forKey:@"Type"];
    [(NSMutableDictionary *)v4 setValue:sub_100C5A1F4(v13, 16, (uint64_t)&stru_101A49ED0) forKey:@"Provider"];
  }
  return v4;
}

NSData *sub_100C59920()
{
  memset(__sz, 0, sizeof(__sz));
  int DataWithTag = DERDecoderGetDataWithTag();
  if (DataWithTag)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v1 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
    {
      if ((DataWithTag + 1) > 8) {
        int v2 = "DEREncoderError(No Decoding)";
      }
      else {
        int v2 = off_101A49EF0[DataWithTag + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)id v12 = v2;
      _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "failed to decode octet string: %s", buf, 0xCu);
    }
    id v4 = 0;
    uint64_t v3 = 0;
    std::string __p = 0;
    unsigned int v8 = 0;
    uint64_t v9 = 0;
  }
  else
  {
    unsigned int v8 = 0;
    uint64_t v9 = 0;
    std::string __p = 0;
    sub_1001E7940(&__p, *(const void **)&__sz[1], *(void *)&__sz[1] + __sz[0], __sz[0]);
    uint64_t v3 = __p;
    id v4 = v8;
  }
  uint64_t v5 = +[NSData dataWithBytes:v3 length:v4 - v3];
  if (__p)
  {
    unsigned int v8 = __p;
    operator delete(__p);
  }
  return v5;
}

void sub_100C59A88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

NSNumber *sub_100C59AAC()
{
  int DataWithTag = DERDecoderGetDataWithTag();
  if (!DataWithTag) {
    return +[NSNumber numberWithInt:0];
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
  int v1 = *(NSObject **)&v5[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    if ((DataWithTag + 1) > 8) {
      int v2 = "DEREncoderError(No Decoding)";
    }
    else {
      int v2 = off_101A49EF0[DataWithTag + 1];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)uint64_t v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "failed to decode integer: %s", buf, 0xCu);
  }
  return 0;
}

NSNumber *sub_100C59BF8()
{
  int DataWithTag = DERDecoderGetDataWithTag();
  if (!DataWithTag) {
    return +[NSNumber numberWithInt:0];
  }
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
  int v1 = *(NSObject **)&v5[4];
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_INFO))
  {
    if ((DataWithTag + 1) > 8) {
      int v2 = "DEREncoderError(No Decoding)";
    }
    else {
      int v2 = off_101A49EF0[DataWithTag + 1];
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)uint64_t v5 = v2;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_INFO, "failed to decode integer: %s", buf, 0xCu);
  }
  return 0;
}

NSMutableDictionary *sub_100C59D44()
{
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  int v0 = DERDecoderParseSequence();
  if (v0)
  {
    int v1 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v2 = *(NSObject **)&v10[4];
    ctu::OsLogContext::~OsLogContext(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((v0 + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[v0 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v10 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to parse profile choice sub-sequence: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    id v4 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 3, 1, 0, 16, 1, v8, 1, 0, 16, 1, v7, 0, 0, 4, 0, v6);
    [(NSMutableDictionary *)v4 setValue:sub_100C59EEC() forKey:@"Type"];
    [(NSMutableDictionary *)v4 setValue:sub_100C5A070() forKey:@"Provider"];
    [(NSMutableDictionary *)v4 setValue:sub_100C583C8(v6) forKey:@"ProfileID"];
  }
  return v4;
}

NSMutableDictionary *sub_100C59EEC()
{
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  int v0 = DERDecoderParseSequence();
  if (v0)
  {
    int v1 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v2 = *(NSObject **)&v9[4];
    ctu::OsLogContext::~OsLogContext(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((v0 + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[v0 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to parse profile type sequence: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    id v4 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 2, 0, 2, 0, 1, v7, 1, 0, 12, 0, v6);
    [(NSMutableDictionary *)v4 setValue:sub_100C5A1F4(v7, 12, (uint64_t)&stru_101A49E10) forKey:@"ID"];
    [(NSMutableDictionary *)v4 setValue:sub_100C54AD4(v6) forKey:@"Name"];
  }
  return v4;
}

NSMutableDictionary *sub_100C5A070()
{
  v7[0] = 0;
  v7[1] = 0;
  v6[0] = 0;
  v6[1] = 0;
  int v0 = DERDecoderParseSequence();
  if (v0)
  {
    int v1 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v2 = *(NSObject **)&v9[4];
    ctu::OsLogContext::~OsLogContext(v1);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_INFO))
    {
      if ((v0 + 1) > 8) {
        uint64_t v3 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v3 = off_101A49EF0[v0 + 1];
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)uint64_t v9 = v3;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_INFO, "failed to parse profile type sequence: %s", buf, 0xCu);
    }
    return 0;
  }
  else
  {
    id v4 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 2, 0, 2, 0, 1, v7, 1, 0, 12, 0, v6);
    [(NSMutableDictionary *)v4 setValue:sub_100C5A1F4(v7, 12, (uint64_t)&stru_101A49E10) forKey:@"ID"];
    [(NSMutableDictionary *)v4 setValue:sub_100C54AD4(v6) forKey:@"Name"];
  }
  return v4;
}

uint64_t sub_100C5A1F4(void *a1, int a2, uint64_t a3)
{
  v9[0] = 0;
  v9[1] = 0;
  if (*a1)
  {
    int v5 = DERDecoderParseSequence();
    if (!v5) {
      return (*(uint64_t (**)(uint64_t, void *))(a3 + 16))(a3, v9);
    }
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    int v6 = v12[0];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_INFO))
    {
      if ((v5 + 1) > 8) {
        int v7 = "DEREncoderError(No Decoding)";
      }
      else {
        int v7 = off_101A49EF0[v5 + 1];
      }
      *(_DWORD *)std::string buf = 67109378;
      int v11 = a2;
      LOWORD(v12[0]) = 2080;
      *(void *)((char *)v12 + 2) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_INFO, "failed to parse wrapping sequence with tag  %d : %s", buf, 0x12u);
    }
  }
  return 0;
}

NSString *__cdecl sub_100C5A348(id a1, DERDecoder *a2)
{
  return sub_100C54AD4(a2);
}

NSDictionary *__cdecl sub_100C5A350(id a1, DERDecoder *a2)
{
  v15[0] = 0;
  v15[1] = 0;
  v14[0] = 0;
  v14[1] = 0;
  v13[0] = 0;
  v13[1] = 0;
  int v2 = DERDecoderParseSequence();
  if (v2)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "der");
    id v4 = *((void *)&buf + 1);
    ctu::OsLogContext::~OsLogContext(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if ((v2 + 1) > 8) {
        int v5 = "DEREncoderError(No Decoding)";
      }
      else {
        int v5 = off_101A49EF0[v2 + 1];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "failed to parse profile choice sub-sequence: %s", (uint8_t *)&buf, 0xCu);
    }
    return 0;
  }
  else
  {
    int v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 3, 1, 0, 4, 0, v15, 1, 0, 16, 1, v14, 1, 0, 4, 0, v13);
    [(NSMutableDictionary *)v6 setValue:sub_100C59920() forKey:@"UniqueID"];
    unsigned int v16 = 0;
    int Count = DERDecoderGetCount();
    if (Count)
    {
      unsigned int v8 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&buf, kCtLoggingSystemName, "der");
      uint64_t v9 = *((void *)&buf + 1);
      ctu::OsLogContext::~OsLogContext(v8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
      {
        if ((Count + 1) > 8) {
          uint64_t v10 = "DEREncoderError(No Decoding)";
        }
        else {
          uint64_t v10 = off_101A49EF0[Count + 1];
        }
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "failed to get count for signed profile array: %s", (uint8_t *)&buf, 0xCu);
      }
      int v11 = 0;
    }
    else
    {
      int v11 = +[NSMutableArray arrayWithCapacity:v16];
      *(void *)&long long buf = _NSConcreteStackBlock;
      *((void *)&buf + 1) = 3221225472;
      uint64_t v18 = sub_100C5A614;
      uint64_t v19 = &unk_101A49D80;
      uint64_t v20 = v11;
      sub_100C51740((uint64_t)v14, v16, (uint64_t)&buf);
    }
    [(NSMutableDictionary *)v6 setValue:v11 forKey:@"SignedProfiles"];
    [(NSMutableDictionary *)v6 setValue:sub_100C59920() forKey:@"Nonce"];
  }
  return &v6->super;
}

void sub_100C5A614(uint64_t a1)
{
  v9[0] = 0;
  v9[1] = 0;
  v8[0] = 0;
  v8[1] = 0;
  v7[0] = 0;
  v7[1] = 0;
  int v2 = DERDecoderParseSequence();
  if (v2)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v11[4];
    ctu::OsLogContext::~OsLogContext(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if ((v2 + 1) > 8) {
        int v5 = "DEREncoderError(No Decoding)";
      }
      else {
        int v5 = off_101A49EF0[v2 + 1];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)int v11 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "failed to parse signed profile sequence: %s", buf, 0xCu);
    }
  }
  else
  {
    int v6 = +[NSMutableDictionary dictionaryWithCapacity:](NSMutableDictionary, "dictionaryWithCapacity:", 2, 1, 0, 16, 1, v9, 0, 2, 0, 1, v8, 0, 2, 1, 0, v7);
    [(NSMutableDictionary *)v6 setValue:sub_100C595E0() forKey:@"Profile"];
    if (v6) {
      [*(id *)(a1 + 32) addObject:v6];
    }
  }
}

uint64_t sub_100C5A794(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) valueForKey:@"ServiceName"];
  if (v4)
  {
    uint64_t v5 = sub_100C5A940(a2, v4);
    if (!v5)
    {
      id v6 = [*(id *)(a1 + 32) valueForKey:@"Principal"];
      if (!v6
        || (v12[0] = _NSConcreteStackBlock,
            v12[1] = 3221225472,
            void v12[2] = sub_100C5AAC0,
            v12[3] = &unk_101A49DA8,
            void v12[4] = v6,
            uint64_t v5 = sub_100C52164(a2, 2, 0, (uint64_t)v12),
            !v5))
      {
        id v7 = [*(id *)(a1 + 32) valueForKey:@"AuthToken"];
        if (v7)
        {
          v11[0] = _NSConcreteStackBlock;
          v11[1] = 3221225472;
          void v11[2] = sub_100C5AAD0;
          v11[3] = &unk_101A49DA8;
          v11[4] = v7;
          sub_100C52164(a2, 2, 1u, (uint64_t)v11);
        }
        return 0;
      }
    }
  }
  else
  {
    unsigned int v8 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v9 = v14;
    ctu::OsLogContext::~OsLogContext(v8);
    uint64_t v5 = 1;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, "No serviceName provided!", buf, 2u);
    }
  }
  return v5;
}

uint64_t sub_100C5A940(uint64_t *a1, void *a2)
{
  unsigned int v4 = [a2 length];
  uint64_t v5 = v4 + 1;
  id v6 = +[NSMutableData dataWithCapacity:v5];
  [(NSMutableData *)v6 setLength:v4];
  objc_msgSend(a2, "getCString:maxLength:encoding:", -[NSMutableData mutableBytes](v6, "mutableBytes"), v5, 4);
  uint64_t v7 = sub_1004632FC(a1, 0, 0xCu, [(NSMutableData *)v6 bytes], [(NSMutableData *)v6 length], 0);
  if (v7)
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, kCtLoggingSystemName, "der");
    unsigned int v8 = *(NSObject **)&v12[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_INFO))
    {
      if ((v7 + 1) > 8) {
        uint64_t v9 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v9 = off_101A49EF0[(int)v7 + 1];
      }
      int v11 = 136315138;
      *(void *)id v12 = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_INFO, "failed to encode string 1: %s", (uint8_t *)&v11, 0xCu);
    }
  }
  return v7;
}

uint64_t sub_100C5AAC0(uint64_t a1, uint64_t *a2)
{
  return sub_100C5A940(a2, *(void **)(a1 + 32));
}

uint64_t sub_100C5AAD0(uint64_t a1, uint64_t *a2)
{
  return sub_100C5A940(a2, *(void **)(a1 + 32));
}

uint64_t sub_100C5AAE0(uint64_t a1, uint64_t *a2)
{
  id v4 = [*(id *)(a1 + 32) valueForKey:@"Type"];
  if (v4)
  {
    v17[0] = _NSConcreteStackBlock;
    v17[1] = 3221225472;
    void v17[2] = sub_100C5ADDC;
    void v17[3] = &unk_101A49DA8;
    v17[4] = v4;
    uint64_t v5 = sub_100C52164(a2, 0, 0x10u, (uint64_t)v17);
    if (!v5)
    {
      id v6 = [*(id *)(a1 + 32) valueForKey:@"Provider"];
      if (v6)
      {
        v16[0] = _NSConcreteStackBlock;
        v16[1] = 3221225472;
        void v16[2] = sub_100C5AEA4;
        v16[3] = &unk_101A49DA8;
        v16[4] = v6;
        uint64_t v5 = sub_100C52164(a2, 0, 0x10u, (uint64_t)v16);
        if (v5) {
          return v5;
        }
      }
      else
      {
        ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
        id v12 = *(NSObject **)&v19[4];
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
        uint64_t v5 = 1;
        if (os_log_type_enabled(v12, OS_LOG_TYPE_INFO))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_INFO, "key kVinylProfileProviderKey is missing", buf, 2u);
        }
      }
      id v13 = [*(id *)(a1 + 32) valueForKey:@"ProfileID"];
      if (v13)
      {
        uint64_t v5 = sub_1004632FC(a2, 0, 4u, [v13 bytes], objc_msgSend(v13, "length"), 0);
        if (v5)
        {
          ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
          unsigned int v14 = *(NSObject **)&v19[4];
          ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_INFO))
          {
            if ((v5 + 1) > 8) {
              id v15 = "DEREncoderError(No Decoding)";
            }
            else {
              id v15 = off_101A49EF0[(int)v5 + 1];
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)uint64_t v19 = v15;
            unsigned int v8 = "failed to encode data: %s";
            uint64_t v9 = v14;
            uint32_t v10 = 12;
            goto LABEL_8;
          }
        }
      }
    }
  }
  else
  {
    ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    uint64_t v7 = *(NSObject **)&v19[4];
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    uint64_t v5 = 1;
    if (os_log_type_enabled(v7, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      unsigned int v8 = "key kVinylProfileTypeKey is missing";
      uint64_t v9 = v7;
      uint32_t v10 = 2;
LABEL_8:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_INFO, v8, buf, v10);
    }
  }
  return v5;
}

uint64_t sub_100C5ADDC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [v3 valueForKey:@"ID"];
  if (!v4
    || (v7[0] = _NSConcreteStackBlock,
        v7[1] = 3221225472,
        void v7[2] = sub_100C5AF6C,
        void v7[3] = &unk_101A49DA8,
        v7[4] = v4,
        uint64_t result = sub_100C52164(a2, 2, 0, (uint64_t)v7),
        !result))
  {
    id v6 = [v3 valueForKey:@"Name"];
    if (!v6) {
      return 0;
    }
    uint64_t result = sub_100C5A940(a2, v6);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100C5AEA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void **)(a1 + 32);
  id v4 = [v3 valueForKey:@"ID"];
  if (!v4
    || (v7[0] = _NSConcreteStackBlock,
        v7[1] = 3221225472,
        void v7[2] = sub_100C5AF7C,
        void v7[3] = &unk_101A49DA8,
        v7[4] = v4,
        uint64_t result = sub_100C52164(a2, 2, 0, (uint64_t)v7),
        !result))
  {
    id v6 = [v3 valueForKey:@"Name"];
    if (!v6) {
      return 0;
    }
    uint64_t result = sub_100C5A940(a2, v6);
    if (!result) {
      return 0;
    }
  }
  return result;
}

uint64_t sub_100C5AF6C(uint64_t a1, uint64_t *a2)
{
  return sub_100C5A940(a2, *(void **)(a1 + 32));
}

uint64_t sub_100C5AF7C(uint64_t a1, uint64_t *a2)
{
  return sub_100C5A940(a2, *(void **)(a1 + 32));
}

uint64_t sub_100C5AF8C(uint64_t a1, uint64_t *a2)
{
  id v4 = (uint64_t *)malloc_type_calloc(0x10uLL, 1uLL, 0xBCCD4226uLL);
  if (v4)
  {
    uint64_t v5 = v4;
    *((_DWORD *)v4 + 3) = 0;
    uint64_t v22 = 0;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    id v6 = *(void **)(a1 + 32);
    id v7 = [v6 countByEnumeratingWithState:&v18 objects:v23 count:16];
    if (v7)
    {
      uint64_t v8 = *(void *)v19;
      do
      {
        for (uint64_t i = 0; i != v7; uint64_t i = (char *)i + 1)
        {
          if (*(void *)v19 != v8) {
            objc_enumerationMutation(v6);
          }
          uint32_t v10 = sub_100C5786C(*(void **)(*((void *)&v18 + 1) + 8 * i), [*(id *)(a1 + 32) objectForKey:*(void *)(*((void *)&v18 + 1) + 8 * i)]);
          sub_1004632FC(v5, 0, 0x10u, [(NSData *)v10 bytes], [(NSData *)v10 length], 1);
        }
        id v7 = [v6 countByEnumeratingWithState:&v18 objects:v23 count:16];
      }
      while (v7);
      uint64_t v22 = v10;
    }
    uint64_t v11 = sub_100C523B0(v5, &v22);
    if (!v11)
    {
      uint64_t v11 = sub_1004632FC(a2, 0, 0x10u, [(NSData *)v22 bytes], [(NSData *)v22 length], 1);
      if (v11)
      {
        id v15 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
        unsigned int v16 = *(NSObject **)&v25[4];
        ctu::OsLogContext::~OsLogContext(v15);
        if (os_log_type_enabled(v16, OS_LOG_TYPE_INFO))
        {
          if ((v11 + 1) > 8) {
            long long v17 = "DEREncoderError(No Decoding)";
          }
          else {
            long long v17 = off_101A49EF0[(int)v11 + 1];
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)xpc_object_t v25 = v17;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_INFO, "failed to add sub-encoder wrapper: %s", buf, 0xCu);
        }
      }
    }
    sub_100463290(v5);
  }
  else
  {
    id v12 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v13 = *(NSObject **)&v25[4];
    ctu::OsLogContext::~OsLogContext(v12);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_INFO))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_INFO, "failed to create sub-encoder for wrapping explicit", buf, 2u);
    }
    return 3;
  }
  return v11;
}

void sub_100C5B244(_Unwind_Exception *a1)
{
  sub_100463290(v1);
  _Unwind_Resume(a1);
}

void sub_100C5B274(uint64_t a1)
{
  int v1 = *(void **)(a1 + 32);
  long long v10 = 0u;
  long long v11 = 0u;
  long long v8 = 0u;
  long long v9 = 0u;
  int v2 = DERDecoderParseSequence();
  if (v2)
  {
    uint64_t v3 = (ctu::OsLogContext *)ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "der");
    id v4 = *(NSObject **)&v13[4];
    ctu::OsLogContext::~OsLogContext(v3);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_INFO))
    {
      if ((v2 + 1) > 8) {
        uint64_t v5 = "DEREncoderError(No Decoding)";
      }
      else {
        uint64_t v5 = off_101A49EF0[v2 + 1];
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)id v13 = v5;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_INFO, "failed to parse key value pair sequence: %s", buf, 0xCu);
    }
  }
  else
  {
    id v6 = sub_100C54AD4(&v11);
    if (v6)
    {
      id v7 = sub_100C54AD4(&v10);
      if (!v7)
      {
        id v7 = sub_100C59920();
        if (!v7) {
          id v7 = sub_100C59BF8();
        }
      }
      objc_msgSend(v1, "setValue:forKey:", v7, v6, 1, 0, 12, 0, &v11, 0, 0, 12, 0, &v10, 0, 0, 4, 0, &v9,
        0,
        0,
        2,
        0,
        &v8);
    }
  }
}

uint64_t sub_100C5B41C(uint64_t a1)
{
  v5[0] = 0;
  v5[1] = 0;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t result = DERDecoderParseSequence();
  if (!result)
  {
    uint64_t result = [(NSString *)sub_100C54AD4(v5) isEqualToString:@"OS Version", 1, 0, 12, 0, v5, 1, 0, 4, 0, v4];
    if (result)
    {
      uint64_t v3 = +[NSMutableDictionary dictionaryWithCapacity:1];
      uint64_t result = (uint64_t)[(NSMutableDictionary *)v3 setValue:sub_100C59920() forKey:@"OSVersion"];
      if (v3) {
        return (uint64_t)[*(id *)(a1 + 32) addObject:v3];
      }
    }
  }
  return result;
}

NSNumber *__cdecl sub_100C5B4DC(id a1, DERDecoder *a2)
{
  return sub_100C59AAC();
}

NSDictionary *__cdecl sub_100C5B4E4(id a1, DERDecoder *a2)
{
  return (NSDictionary *)sub_100C59EEC();
}

NSDictionary *__cdecl sub_100C5B4EC(id a1, DERDecoder *a2)
{
  return (NSDictionary *)sub_100C5A070();
}

void sub_100C5B4F4(void *a1)
{
  if (!*a1) {
    __TUAssertTrigger();
  }
  operator new();
}

void sub_100C5B570()
{
}

uint64_t sub_100C5B594(uint64_t a1, id *a2)
{
  *(void *)a1 = &off_101A49FE0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v5, kCtLoggingSystemName, "cld.ft.mon");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v6, &v5);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), (const ctu::OsLogLogger *)v6);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v5);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)a1 = off_101A49F48;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(void *)(a1 + 64) = *a2;
  return a1;
}

void sub_100C5B658(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_100C5B67C(uint64_t a1, uint64_t *a2, void *a3, __int16 *a4)
{
  long long v8 = a3 + 3;
  if (!a3[3]) {
    __TUAssertTrigger();
  }
  uint64_t v9 = *((unsigned __int8 *)a2 + 23);
  if ((v9 & 0x80u) != 0) {
    uint64_t v9 = a2[1];
  }
  if (!v9) {
    __TUAssertTrigger();
  }
  long long v10 = sub_100200FB4((id *)(a1 + 64));
  dispatch_assert_queue_V2(v10);

  long long v11 = *(id ***)(a1 + 32);
  id v12 = *(id ***)(a1 + 40);
  if (v11 == v12)
  {
    LOBYTE(v15) = *((unsigned char *)a2 + 23);
  }
  else
  {
    while (1)
    {
      id v13 = (const char *)[**v11 UTF8String];
      unsigned int v14 = v13;
      int v15 = *((char *)a2 + 23);
      size_t v16 = v15 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
      if (v16 == strlen(v13))
      {
        long long v17 = v15 >= 0 ? a2 : (uint64_t *)*a2;
        if (!memcmp(v17, v14, v16)) {
          break;
        }
      }
      v11 += 2;
      if (v11 == v12)
      {
        long long v11 = v12;
        break;
      }
    }
    if (v11 != *(id ***)(a1 + 40))
    {
      long long v18 = sub_100200FB4((id *)(a1 + 8));
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        if (*((char *)a2 + 23) >= 0) {
          BOOL v44 = a2;
        }
        else {
          BOOL v44 = (uint64_t *)*a2;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v44;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Already have a handler registered for featureId: %s", buf, 0xCu);
      }

      __TUAssertTrigger();
      return;
    }
  }
  __int16 v19 = *a4;
  long long v20 = (char *)operator new(0x48uLL);
  *((void *)v20 + 1) = 0;
  *((void *)v20 + 2) = 0;
  *(void *)long long v20 = off_101A4A108;
  if ((v15 & 0x80u) == 0) {
    long long v21 = a2;
  }
  else {
    long long v21 = (uint64_t *)*a2;
  }
  *((void *)v20 + 3) = +[NSString stringWithUTF8String:v21];
  uint64_t v22 = v20 + 24;
  xpc_object_t v23 = (void *)*v8;
  if (*v8)
  {
    if (v23 == a3)
    {
      *((void *)v20 + 7) = v20 + 32;
      (*(void (**)(void *))(*a3 + 24))(a3);
      goto LABEL_31;
    }
    *((void *)v20 + 7) = v23;
  }
  else
  {
    long long v8 = v20 + 56;
  }
  void *v8 = 0;
LABEL_31:
  *((_WORD *)v20 + 32) = 1;
  v20[66] = 0;
  *(_WORD *)(v20 + 67) = v19;
  unint64_t v24 = *(void *)(a1 + 48);
  xpc_object_t v25 = *(char **)(a1 + 40);
  if ((unint64_t)v25 >= v24)
  {
    uint64_t v27 = *(char **)(a1 + 32);
    uint64_t v28 = (v25 - v27) >> 4;
    unint64_t v29 = v28 + 1;
    if ((unint64_t)(v28 + 1) >> 60) {
      sub_10006A748();
    }
    if ((uint64_t)(v24 - (void)v27) >> 3 > v29) {
      unint64_t v29 = (uint64_t)(v24 - (void)v27) >> 3;
    }
    if (v24 - (unint64_t)v27 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v30 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v30 = v29;
    }
    uint64_t v49 = a1 + 48;
    if (v30 >> 60) {
      sub_10006A7CC();
    }
    long long v31 = (char *)operator new(16 * v30);
    uint64_t v32 = &v31[16 * v28];
    *(void *)uint64_t v32 = v22;
    *((void *)v32 + 1) = v20;
    uint64_t v26 = (uint64_t **)(v32 + 16);
    if (v25 == v27)
    {
      int64x2_t v34 = vdupq_n_s64((unint64_t)v25);
    }
    else
    {
      do
      {
        long long v33 = *((_OWORD *)v25 - 1);
        v25 -= 16;
        *((_OWORD *)v32 - 1) = v33;
        v32 -= 16;
        *(void *)xpc_object_t v25 = 0;
        *((void *)v25 + 1) = 0;
      }
      while (v25 != v27);
      int64x2_t v34 = *(int64x2_t *)(a1 + 32);
      unint64_t v24 = *(void *)(a1 + 48);
    }
    *(void *)(a1 + 32) = v32;
    *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v26;
    *(int64x2_t *)&uint8_t buf[8] = v34;
    *(void *)(a1 + 48) = &v31[16 * v30];
    unint64_t v48 = v24;
    *(void *)long long buf = v34.i64[0];
    sub_10019E528((uint64_t)buf);
  }
  else
  {
    *(void *)xpc_object_t v25 = v22;
    *((void *)v25 + 1) = v20;
    uint64_t v26 = (uint64_t **)(v25 + 16);
  }
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v26;
  sub_100C5BC04(a1, v26 - 2);
  if (*(void *)(a1 + 56)) {
    goto LABEL_60;
  }
  uint64_t v35 = *(void *)(a1 + 16);
  long long v36 = *(std::__shared_weak_count **)(a1 + 24);
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v45[0] = _NSConcreteStackBlock;
  v45[1] = 3321888768;
  v45[2] = sub_100C5BD64;
  v45[3] = &unk_101A49F70;
  v45[4] = v35;
  std::string::size_type v46 = v36;
  if (v36) {
    atomic_fetch_add_explicit(&v36->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v37 = +[CSFFeatureManager registerForFeatureChangeNotificationsUsingBlock:v45];
  uint64_t v38 = *(void **)(a1 + 56);
  *(void *)(a1 + 56) = v37;

  uint64_t v39 = *(void *)(a1 + 56);
  uint64_t v40 = (id *)(a1 + 8);
  if (v39)
  {
    std::string::size_type v41 = sub_100200FB4(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Registered for feature change notification", buf, 2u);
    }
  }
  else
  {
    std::string::size_type v41 = sub_100200FB4(v40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Failed to register for cloud feature change notification", buf, 2u);
    }
  }

  if (v46) {
    std::__shared_weak_count::__release_weak(v46);
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  if (v39)
  {
LABEL_60:
    std::string::size_type v42 = sub_100200FB4((id *)(a1 + 8));
    if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        char v43 = a2;
      }
      else {
        char v43 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v43;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I Started monitoring for: %s", buf, 0xCu);
    }
  }
}

void sub_100C5BB90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C5BC04(uint64_t a1, uint64_t **a2)
{
  id v4 = sub_100200FB4((id *)(a1 + 64));
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = *a2;
  id v6 = (std::__shared_weak_count *)a2[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = *(void *)(a1 + 16);
  long long v8 = *(std::__shared_weak_count **)(a1 + 24);
  uint64_t v14 = v7;
  int v15 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  size_t v16 = v5;
  long long v17 = v6;
  uint64_t v9 = **a2;
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 3321888768;
  void v10[2] = sub_100C5C384;
  void v10[3] = &unk_101A49FA0;
  void v10[4] = v7;
  long long v11 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  id v12 = v5;
  id v13 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  +[CSFFeatureManager requestFeatureWithId:v9 completion:v10];
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
}

void sub_100C5BD38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_100C5C564(v9);
  sub_100C5C564((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C5BD64(uint64_t a1)
{
  int v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = *(void *)(a1 + 32);
      if (v4)
      {
        uint64_t v5 = *(void *)(a1 + 40);
        if (v5) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 16), 1uLL, memory_order_relaxed);
        }
        sub_100200FB4((id *)(v4 + 64));
        id v6 = (id)objc_claimAutoreleasedReturnValue();
        operator new();
      }
      sub_10004D2C8(v3);
    }
  }
}

uint64_t sub_100C5BE3C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C5BE58(uint64_t a1)
{
  int v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100C5BE68(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100200FB4((id *)(a1 + 64));
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = *(id ***)(a1 + 32);
  id v6 = *(id ***)(a1 + 40);
  if (v5 != v6)
  {
    while (1)
    {
      uint64_t v7 = (const char *)[**v5 UTF8String];
      long long v8 = v7;
      int v9 = *((char *)a2 + 23);
      size_t v10 = v9 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
      if (v10 == strlen(v7))
      {
        long long v11 = v9 >= 0 ? a2 : (uint64_t *)*a2;
        if (!memcmp(v11, v8, v10)) {
          break;
        }
      }
      v5 += 2;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    id v12 = *(id ***)(a1 + 40);
    if (v5 != v12)
    {
      id v13 = v5 + 2;
      if (v5 + 2 != v12)
      {
        do
        {
          long long v14 = *(_OWORD *)v13;
          *id v13 = 0;
          v13[1] = 0;
          int v15 = (std::__shared_weak_count *)*(v13 - 1);
          *((_OWORD *)v13 - 1) = v14;
          if (v15) {
            sub_10004D2C8(v15);
          }
          v13 += 2;
        }
        while (v13 != v12);
        id v12 = *(id ***)(a1 + 40);
        uint64_t v5 = v13 - 2;
      }
      while (v12 != v5)
      {
        size_t v16 = (std::__shared_weak_count *)*(v12 - 1);
        if (v16) {
          sub_10004D2C8(v16);
        }
        v12 -= 2;
      }
      *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v5;
      long long v17 = sub_100200FB4((id *)(a1 + 8));
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)a2 + 23) >= 0) {
          long long v18 = a2;
        }
        else {
          long long v18 = (uint64_t *)*a2;
        }
        int v23 = 136315138;
        unint64_t v24 = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Stopped monitoring for: %s", (uint8_t *)&v23, 0xCu);
      }

      if (*(void *)(a1 + 32) == *(void *)(a1 + 40) && *(void *)(a1 + 56))
      {
        __int16 v19 = sub_100200FB4((id *)(a1 + 8));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v23) = 0;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I No feature left to monitor. Unregister for feature change notification", (uint8_t *)&v23, 2u);
        }

        uint64_t v21 = *(void *)(a1 + 56);
        long long v20 = (void **)(a1 + 56);
        +[CSFFeatureManager unregisterForFeatureChangeNotificationsUsingObserver:v21];
        uint64_t v22 = *v20;
        char *v20 = 0;
      }
    }
  }
}

void sub_100C5C09C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100C5C0B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = sub_100200FB4((id *)(a1 + 64));
  dispatch_assert_queue_V2(v4);

  uint64_t v5 = *(id ***)(a1 + 32);
  id v6 = *(id ***)(a1 + 40);
  if (v5 == v6) {
    goto LABEL_16;
  }
  while (1)
  {
    uint64_t v7 = (const char *)[**v5 UTF8String];
    long long v8 = v7;
    int v9 = *((char *)a2 + 23);
    size_t v10 = v9 >= 0 ? *((unsigned __int8 *)a2 + 23) : a2[1];
    if (v10 == strlen(v7))
    {
      long long v11 = v9 >= 0 ? a2 : (uint64_t *)*a2;
      if (!memcmp(v11, v8, v10)) {
        break;
      }
    }
    v5 += 2;
    if (v5 == v6)
    {
      uint64_t v5 = v6;
      break;
    }
  }
  if (v5 == *(id ***)(a1 + 40))
  {
LABEL_16:
    int v15 = sub_100200FB4((id *)(a1 + 8));
    if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v17 = a2;
      }
      else {
        long long v17 = (uint64_t *)*a2;
      }
      int v18 = 136315138;
      __int16 v19 = v17;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Never started monitoring for featureId: %s", (uint8_t *)&v18, 0xCu);
    }

    __TUAssertTrigger();
    LOBYTE(v13) = 0;
    unsigned int v14 = 0;
  }
  else
  {
    uint64_t v12 = 41;
    if (!*((unsigned char *)*v5 + 42)) {
      uint64_t v12 = 43;
    }
    unsigned int v13 = *(unsigned __int16 *)((char *)*v5 + v12);
    unsigned int v14 = v13 >> 8;
  }
  return v13 | (v14 << 8);
}

void sub_100C5C258(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100C5C270(uint64_t a1)
{
  *(void *)a1 = off_101A49F48;
  if (*(void *)(a1 + 56))
  {
    +[CSFFeatureManager unregisterForFeatureChangeNotificationsUsingObserver:](CSFFeatureManager, "unregisterForFeatureChangeNotificationsUsingObserver:");
    uint64_t v2 = *(void **)(a1 + 56);
    *(void *)(a1 + 56) = 0;
  }
  uint64_t v3 = *(void **)(a1 + 64);
  *(void *)(a1 + 64) = 0;

  uint64_t v4 = *(void *)(a1 + 32);
  if (v4)
  {
    uint64_t v5 = *(void *)(a1 + 40);
    id v6 = *(void **)(a1 + 32);
    if (v5 != v4)
    {
      do
      {
        uint64_t v7 = *(std::__shared_weak_count **)(v5 - 8);
        if (v7) {
          sub_10004D2C8(v7);
        }
        v5 -= 16;
      }
      while (v5 != v4);
      id v6 = *(void **)(a1 + 32);
    }
    *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v4;
    operator delete(v6);
  }
  long long v8 = *(std::__shared_weak_count **)(a1 + 24);
  if (v8) {
    std::__shared_weak_count::__release_weak(v8);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));
  return a1;
}

void sub_100C5C34C(uint64_t a1)
{
  sub_100C5C270(a1);

  operator delete();
}

void sub_100C5C384(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = v5;
  id v8 = v6;
  int v9 = (std::__shared_weak_count *)a1[5];
  if (v9)
  {
    size_t v10 = std::__shared_weak_count::lock(v9);
    if (v10)
    {
      uint64_t v11 = a1[4];
      if (v11)
      {
        uint64_t v12 = a1[5];
        if (v12) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 16), 1uLL, memory_order_relaxed);
        }
        uint64_t v13 = a1[7];
        if (v13) {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(v13 + 16), 1uLL, memory_order_relaxed);
        }
        id v14 = v7;
        id v15 = v8;
        sub_100200FB4((id *)(v11 + 64));
        id v16 = (id)objc_claimAutoreleasedReturnValue();
        operator new();
      }
      sub_10004D2C8(v10);
    }
  }
}

void *sub_100C5C4E0(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C5C514(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

uint64_t sub_100C5C564(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t *sub_100C5C5A8(uint64_t *a1)
{
  uint64_t v11 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[1];
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *a1;
      if (v5)
      {
        id v6 = sub_100200FB4((id *)(v5 + 64));
        dispatch_assert_queue_V2(v6);

        uint64_t v7 = *(void *)(v5 + 32);
        for (uint64_t i = *(void *)(v5 + 40); v7 != i; v7 += 16)
        {
          int v9 = *(std::__shared_weak_count **)(v7 + 8);
          v12[0] = *(uint64_t **)v7;
          v12[1] = (uint64_t *)v9;
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100C5BC04(v5, v12);
          if (v9) {
            sub_10004D2C8(v9);
          }
        }
      }
      sub_10004D2C8(v4);
    }
  }
  return sub_1000E5258((uint64_t *)&v11);
}

void sub_100C5C670(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);

  sub_10004D2C8(v2);
  sub_1000E5258((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C5C6AC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {

    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 24);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100C5C71C(uint64_t a1)
{
  uint64_t v31 = a1;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)a1;
      if (!*(void *)a1)
      {
LABEL_40:
        sub_10004D2C8(v4);
        return sub_100C5C6AC(&v31);
      }
      id v6 = *(void **)(a1 + 40);
      id v7 = *(id *)(a1 + 32);
      id v8 = v6;
      int v9 = sub_100200FB4((id *)(v5 + 64));
      dispatch_assert_queue_V2(v9);

      size_t v10 = *(std::__shared_weak_count **)(a1 + 24);
      if (!v10 || (uint64_t v11 = std::__shared_weak_count::lock(v10)) == 0)
      {
LABEL_39:

        goto LABEL_40;
      }
      unint64_t v30 = v11;
      uint64_t v12 = *(uint64_t **)(a1 + 16);
      if (!v12) {
        goto LABEL_38;
      }
      if (!v7 || v8)
      {
        __int16 v19 = sub_100200FB4((id *)(v5 + 8));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v20 = *v12;
          *(_DWORD *)long long buf = 138412546;
          uint64_t v34 = v20;
          __int16 v35 = 2112;
          long long v36 = (const char *)v8;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Encountered error while fetching feature status for: %@. Error: %@ ", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v13 = [v7 featureID];
        unsigned __int8 v14 = [v13 isEqual:*v12];

        if (v14)
        {
          unint64_t v15 = (unint64_t)[v7 status];
          if (v15 < 4)
          {
            int v16 = 0;
            unsigned int v17 = (0x101u >> (8 * v15)) & 1;
            int v18 = 1;
            goto LABEL_19;
          }
LABEL_17:
          if (!*((unsigned char *)v12 + 44))
          {
            LOWORD(v18) = 0;
            unsigned int v17 = 0;
            int v16 = 0;
            BOOL v21 = 0;
            if (*((unsigned char *)v12 + 42))
            {
LABEL_27:
              uint64_t v22 = sub_100200FB4((id *)(v5 + 8));
              if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
              {
                int v23 = "true";
                if (!v17) {
                  int v23 = "false";
                }
                uint64_t v24 = *v12;
                if (!v21) {
                  int v23 = "unknown";
                }
                *(_DWORD *)long long buf = 138412802;
                uint64_t v34 = v24;
                __int16 v35 = 2080;
                long long v36 = v23;
                if (v16) {
                  xpc_object_t v25 = "[real value unknown, using default]";
                }
                else {
                  xpc_object_t v25 = "";
                }
                __int16 v37 = 2080;
                uint64_t v38 = v25;
                _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Feature subscription status for: %@ changed to: %s %s", buf, 0x20u);
              }

              *(_WORD *)((char *)v12 + 41) = v17 | ((_WORD)v18 << 8);
              *((unsigned char *)v12 + 4sub_10023C164((uint64_t)&a9, 0) = v16;
              uint64_t v26 = v12[4];
              *(_WORD *)long long buf = v17 | ((_WORD)v18 << 8);
              char v32 = v16;
              if (!v26) {
                sub_10007B600();
              }
              (*(void (**)(uint64_t, uint8_t *, char *))(*(void *)v26 + 48))(v26, buf, &v32);
              goto LABEL_38;
            }
            goto LABEL_26;
          }
          unsigned int v17 = *(_WORD *)((char *)v12 + 43);
          int v18 = HIBYTE(*(unsigned __int16 *)((char *)v12 + 43));
          int v16 = 1;
LABEL_19:
          BOOL v21 = v18 != 0;
          if (v18 && *((unsigned char *)v12 + 42))
          {
            BOOL v21 = 1;
            if (v17 != *((unsigned __int8 *)v12 + 41)) {
              goto LABEL_27;
            }
          }
          else if ((v18 != 0) != (*((unsigned char *)v12 + 42) != 0))
          {
            goto LABEL_27;
          }
LABEL_26:
          if (*((unsigned __int8 *)v12 + 40) != v16) {
            goto LABEL_27;
          }
LABEL_38:
          sub_10004D2C8(v30);
          goto LABEL_39;
        }
        __int16 v19 = sub_100200FB4((id *)(v5 + 8));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          uint64_t v28 = *v12;
          unint64_t v29 = [v7 featureID];
          *(_DWORD *)long long buf = 138412546;
          uint64_t v34 = v28;
          __int16 v35 = 2112;
          long long v36 = v29;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Mismatch in feature Id. Requested: %@ vs Received: %@", buf, 0x16u);
        }
      }

      goto LABEL_17;
    }
  }
  return sub_100C5C6AC(&v31);
}

void sub_100C5CACC(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);

  sub_10004D2C8(a3);
  sub_10004D2C8(v3);
  sub_100C5C6AC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C5CB34(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100C5CBB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C5CBF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C5CC28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

uint64_t sub_100C5CC58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100C5CC9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A108;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C5CCBC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A108;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C5CD10(uint64_t a1)
{
  sub_1002702C8((void *)(a1 + 32));
  uint64_t v2 = *(void **)(a1 + 24);
}

uint64_t sub_100C5CD50(uint64_t a1)
{
  *(void *)a1 = off_101A4A158;
  *(void *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 16) = 0;
  uint64_t v2 = nw_activity_create();
  uint64_t v3 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = v2;

  nw_activity_activate();
  return a1;
}

void sub_100C5CDB4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100C5CDC8(uint64_t a1)
{
  *(void *)a1 = off_101A4A158;
  nw_activity_complete_with_reason();

  return a1;
}

void sub_100C5CE30(uint64_t a1)
{
  sub_100C5CDC8(a1);

  operator delete();
}

uint64_t sub_100C5CE68(uint64_t result, char a2)
{
  *(unsigned char *)(result + 16) = a2;
  return result;
}

void *sub_100C5CE70@<X0>(void *a1@<X8>)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t result = sub_100C5CED4(v2);
  *a1 = v2 + 3;
  a1[1] = v2;
  return result;
}

void sub_100C5CEC0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100C5CED4(void *a1)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A4A1A8;
  sub_100C5CD50((uint64_t)(a1 + 3));
  return a1;
}

void sub_100C5CF24(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C5CF38(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A1A8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C5CF58(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A1A8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C5CFAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

void sub_100C5CFD8()
{
}

void sub_100C5CFEC()
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_debug_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEBUG, "Looking for EACellBroadcastMessageListener in EmergencyAlerts", v5, 2u);
  }
  uint64_t v0 = CUTWeakLinkClass();
  if (v0)
  {
    uint64_t v1 = (void *)v0;
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Starting EACellBroadcastMessageListener", buf, 2u);
    }
    uint64_t v2 = [v1 sharedInstance];
    [v2 start];
  }
  else if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Could not find EACellBroadcastMessageListener class in EmergencyAlerts!", v3, 2u);
  }
}

void sub_100C5D110(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100C5D120(void ***a1)
{
  *a1 = (void **)off_101A4A228;
  sub_100110A40(a1 + 1, 0);

  PB::Base::~Base((PB::Base *)a1);
}

void sub_100C5D178(void ***a1)
{
  *a1 = (void **)off_101A4A228;
  sub_100110A40(a1 + 1, 0);
  PB::Base::~Base((PB::Base *)a1);

  operator delete();
}

uint64_t sub_100C5D1E4(uint64_t result, uint64_t a2)
{
  *(void *)uint64_t result = off_101A4A228;
  *(void *)(result + 8) = 0;
  *(_DWORD *)(result + 2sub_10023C164((uint64_t)&a9, 0) = 0;
  if (*(void *)(a2 + 8)) {
    operator new();
  }
  if (*(unsigned char *)(a2 + 20))
  {
    int v2 = *(_DWORD *)(a2 + 16);
    *(unsigned char *)(result + 20) |= 1u;
    *(_DWORD *)(result + 16) = v2;
  }
  return result;
}

uint64_t sub_100C5D2AC(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  uint64_t v5 = *(const PB::Data **)(a1 + 8);
  if (v5) {
    PB::TextFormatter::format(this, "csn", v5);
  }
  if (*(unsigned char *)(a1 + 20)) {
    PB::TextFormatter::format(this, "reason", *(_DWORD *)(a1 + 16));
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100C5D324(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 < v3 && v4 == 0)
  {
    while (1)
    {
      uint64_t v8 = *(void *)this;
      if (v2 > 0xFFFFFFFFFFFFFFF5 || v2 + 10 > v3) {
        break;
      }
      char v9 = 0;
      unsigned int v10 = 0;
      unint64_t v11 = 0;
      while (1)
      {
        unint64_t v12 = v2 + 1;
        *((void *)this + 1) = v2 + 1;
        char v13 = *(unsigned char *)(v8 + v2);
        v11 |= (unint64_t)(v13 & 0x7F) << v9;
        if ((v13 & 0x80) == 0) {
          break;
        }
        v9 += 7;
        unint64_t v2 = v12;
        BOOL v14 = v10++ > 8;
        if (v14) {
          goto LABEL_19;
        }
      }
LABEL_20:
      unsigned __int8 v19 = v11 & 7;
      if ((v11 & 7) == 4)
      {
        int v4 = 0;
        return v4 == 0;
      }
      unint64_t v20 = v11 >> 3;
      if ((v11 >> 3) == 2)
      {
        *(unsigned char *)(a1 + 20) |= 1u;
        unint64_t v22 = *((void *)this + 1);
        unint64_t v23 = *((void *)this + 2);
        uint64_t v24 = *(void *)this;
        if (v22 > 0xFFFFFFFFFFFFFFF5 || v22 + 10 > v23)
        {
          char v30 = 0;
          unsigned int v31 = 0;
          uint64_t v27 = 0;
          if (v23 <= v22) {
            unint64_t v23 = *((void *)this + 1);
          }
          while (1)
          {
            if (v23 == v22)
            {
              LODWORD(v27) = 0;
              *((unsigned char *)this + 24) = 1;
              goto LABEL_43;
            }
            unint64_t v32 = v22 + 1;
            char v33 = *(unsigned char *)(v24 + v22);
            *((void *)this + 1) = v32;
            v27 |= (unint64_t)(v33 & 0x7F) << v30;
            if ((v33 & 0x80) == 0) {
              break;
            }
            v30 += 7;
            unint64_t v22 = v32;
            BOOL v14 = v31++ > 8;
            if (v14)
            {
LABEL_39:
              LODWORD(v27) = 0;
              goto LABEL_43;
            }
          }
          if (*((unsigned char *)this + 24)) {
            LODWORD(v27) = 0;
          }
        }
        else
        {
          char v25 = 0;
          unsigned int v26 = 0;
          uint64_t v27 = 0;
          while (1)
          {
            unint64_t v28 = v22 + 1;
            *((void *)this + 1) = v22 + 1;
            char v29 = *(unsigned char *)(v24 + v22);
            v27 |= (unint64_t)(v29 & 0x7F) << v25;
            if ((v29 & 0x80) == 0) {
              break;
            }
            v25 += 7;
            unint64_t v22 = v28;
            BOOL v14 = v26++ > 8;
            if (v14) {
              goto LABEL_39;
            }
          }
        }
LABEL_43:
        *(_DWORD *)(a1 + 16) = v27;
      }
      else
      {
        if (v20 == 1) {
          operator new();
        }
LABEL_24:
        uint64_t result = PB::Reader::skip(this, v20, v19, 0);
        if (!result) {
          return result;
        }
      }
      unint64_t v2 = *((void *)this + 1);
      unint64_t v3 = *((void *)this + 2);
      int v4 = *((unsigned __int8 *)this + 24);
      if (v2 >= v3 || v4 != 0) {
        return v4 == 0;
      }
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    while (v3 != v2)
    {
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_20;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
      if (v14)
      {
LABEL_19:
        unsigned __int8 v19 = 0;
        LODWORD(v2sub_10023C164((uint64_t)&a9, 0) = 0;
        goto LABEL_24;
      }
    }
    int v4 = 1;
    *((unsigned char *)this + 24) = 1;
  }
  return v4 == 0;
}

uint64_t sub_100C5D5B8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  int v4 = *(const PB::Data **)(result + 8);
  if (v4) {
    uint64_t result = PB::Writer::write(this, v4, 1u);
  }
  if (*(unsigned char *)(v3 + 20))
  {
    unsigned int v5 = *(_DWORD *)(v3 + 16);
    return PB::Writer::writeVarInt(this, v5, 2u);
  }
  return result;
}

void sub_100C5D620(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100C5D910(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t a17)
{
  if (a17) {
    (*((void (**)(dispatch_object_t))a17->isa + 1))(a17);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

void *sub_100C5DA4C(void *a1)
{
  *a1 = off_101A4A278;
  sub_100C5E11C(a1 + 10);
  unint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_100C5DAC0(void *a1)
{
  sub_100C5DA4C(a1);

  operator delete();
}

void sub_100C5DAF8(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C5DBF8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C5DCE8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100C5DDD8(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100C5ED70;
  v5[3] = &unk_101A4A510;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  id v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    char v9 = sub_100C5EDBC;
    unsigned int v10 = &unk_101A4A550;
    unint64_t v11 = &v13;
    unint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    unsigned int v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    char v9 = sub_100C5ED80;
    unsigned int v10 = &unk_101A4A530;
    unint64_t v11 = &v13;
    unint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13;
}

void sub_100C5DF00(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 128);
  if (v2 != a2 && (v2 | 2) == 2)
  {
    *(unsigned char *)(a1 + 132) = v2 == 2;
    sub_100C5DF28(a1);
  }
}

void sub_100C5DF28(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 112);
  int v3 = *(unsigned __int8 *)(a1 + 120);
  int v4 = *(_DWORD *)(a1 + 124);
  char v5 = 1;
  switch(*(unsigned char *)(a1 + 120))
  {
    case 0:
      break;
    case 1:
    case 7:
      char v5 = 0;
      int v3 = 2;
      break;
    case 2:
      char v5 = 0;
      int v3 = 6;
      break;
    case 5:
      char v5 = 0;
      int v3 = 4;
      break;
    case 6:
      char v5 = 0;
      int v3 = 1;
      break;
    default:
      char v5 = 0;
      int v3 = 3;
      break;
  }
  if ((v4 - 1) < 2)
  {
    *(unsigned char *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = 4;
    int v6 = 3;
  }
  else if ((v4 - 3) >= 2)
  {
    if (v4 == 5)
    {
      int v6 = 5;
      *(unsigned char *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = 5;
    }
    else if ((v5 & (*(unsigned char *)(a1 + 132) != 0)) != 0)
    {
      int v6 = 1;
    }
    else
    {
      int v6 = v3;
    }
  }
  else
  {
    *(unsigned char *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = 5;
    int v6 = 4;
  }
  if (v6 != v2)
  {
    *(_DWORD *)(a1 + 112) = v6;
    uint64_t v7 = *(void *)(a1 + 104);
    if (v7) {
      (*(void (**)(uint64_t))(*(void *)v7 + 48))(v7);
    }
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      uint64_t v10 = radioStateAsString();
      __int16 v11 = 2080;
      uint64_t v12 = radioStateAsString();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Radio state changing from %s -> %s", (uint8_t *)&v9, 0x16u);
    }
  }
}

void *sub_100C5E11C(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100C5E1A4(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C5E1DC(uint64_t a1)
{
}

uint64_t sub_100C5E1F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C5E23C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100C5E268(ServiceManager::Service *this)
{
  *(void *)this = off_101A4A390;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100C5E2C4(ServiceManager::Service *this)
{
  *(void *)this = off_101A4A390;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100C5E334@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "RadioState");
}

unsigned char *sub_100C5E344@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = operator new(1uLL);
  *a1 = v2;
  *int v2 = 5;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100C5E384(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  int v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100C5DAF8(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100C5DAF8(v4, 0);
}

uint64_t sub_100C5E408()
{
  return 0;
}

uint64_t sub_100C5E410()
{
  return 1;
}

uint64_t sub_100C5E418()
{
  return 0;
}

void sub_100C5E428(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_100C5E53C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 64));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100C5E584(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100C5E5A0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void **)v1;
  Registry::createRestModuleOneTimeUseConnection(&v10, *(Registry **)(*(void *)v1 + 48));
  ctu::RestModule::connect();
  if (v11) {
    sub_10004D2C8(v11);
  }
  uint64_t v3 = v2 + 10;
  v12[0] = off_101A4A410;
  v12[1] = v2 + 8;
  unsigned int v13 = v12;
  if (v12 != v2 + 10)
  {
    uint64_t v4 = (void *)v2[13];
    if (v4 == v3)
    {
      __p[1] = v2 + 8;
      uint64_t v15 = 0;
      unsigned int v13 = 0;
      __p[0] = off_101A4A410;
      (*(void (**)(void *, void *))(*v3 + 24))(v2 + 10, v12);
      (*(void (**)(void))(*(void *)v2[13] + 32))(v2[13]);
      v2[13] = 0;
      unsigned int v13 = v12;
      (*((void (**)(void **, void *))__p[0] + 3))(__p, v2 + 10);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      v2[10] = off_101A4A410;
      v2[11] = v2 + 8;
      unsigned int v13 = v4;
    }
    v2[13] = v3;
  }
  sub_100C5E11C(v12);
  char v5 = (capabilities::ct *)v2[13];
  if (v5) {
    char v5 = (capabilities::ct *)(*(uint64_t (**)(capabilities::ct *, void *))(*(void *)v5 + 48))(v5, v2 + 14);
  }
  if (capabilities::ct::supportsCMASCampOnlyMode(v5))
  {
    sub_100058DB0(__p, "/cc/props/cmas_camp_only_mode");
    int v6 = operator new(0x28uLL);
    void *v6 = off_101A4A4A0;
    v6[1] = v2 + 16;
    void v6[2] = v2;
    void v6[3] = sub_100C5DF00;
    v6[4] = 0;
    unsigned int v13 = v6;
    ctu::RestModule::observeProperty();
    sub_10003F600(v12);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_100088C88(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100C5E840(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C5E8AC()
{
}

void *sub_100C5E8C0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A4A410;
  result[1] = v3;
  return result;
}

uint64_t sub_100C5E908(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A4A410;
  a2[1] = v2;
  return result;
}

void sub_100C5E934(uint64_t a1, unsigned int *a2)
{
  xpc_object_t v2 = xpc_int64_create(*a2);
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/radio_state");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0) {
    operator delete(__p);
  }
  xpc_release(v2);
}

void sub_100C5E9E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5EA2C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C5EA6C()
{
}

void sub_100C5EA7C()
{
}

__n128 sub_100C5EA90(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4A4A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C5EAE4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4A4A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C5EB1C(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100C5EC14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C5EC54()
{
}

void sub_100C5EC60(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(_DWORD *)(v2 + 124) = *((_DWORD *)v1 + 2);
  sub_100C5DF28(v2);
  operator delete();
}

void sub_100C5ECBC()
{
}

void sub_100C5ECE8(uint64_t **a1)
{
  uint64_t v3 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  *(unsigned char *)(v2 + 12sub_10023C164((uint64_t)&a9, 0) = *((unsigned char *)v1 + 8);
  sub_100C5DF28(v2);
  operator delete();
}

void sub_100C5ED44()
{
}

uint64_t sub_100C5ED70(uint64_t a1)
{
  return *(unsigned int *)(**(void **)(a1 + 40) + 112);
}

uint64_t sub_100C5ED80(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100C5EDBC(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void AQMController::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100C5F184(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, std::__shared_weak_count *a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t a17)
{
  if (a17) {
    (*((void (**)(dispatch_object_t))a17->isa + 1))(a17);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

void sub_100C5F334(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100C5F434(uint64_t a1)
{
  *(void *)a1 = off_101A4A580;
  sub_1000346F8(a1 + 920, *(void **)(a1 + 928));
  sub_10030A970(a1 + 112);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(void *)(a1 + 80);
  *(void *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 0;
  if (v3) {
    operator delete();
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    sub_10004D2C8(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100C5F4E4(uint64_t a1)
{
  sub_100C5F434(a1);

  operator delete();
}

void sub_100C5F51C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I ---current data rates---", (uint8_t *)&v7, 2u);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(*(void *)(a1 + 80) + 8);
    int v7 = 134217984;
    uint64_t v8 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I output rate max       :  %llu bps", (uint8_t *)&v7, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(*(void *)(a1 + 80) + 24);
    int v7 = 134217984;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I output rate effective :  %llu bps", (uint8_t *)&v7, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = *(void *)(*(void *)(a1 + 80) + 16);
    int v7 = 134217984;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I input rate max        :  %llu bps", (uint8_t *)&v7, 0xCu);
    uint64_t v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = *(void *)(*(void *)(a1 + 80) + 32);
    int v7 = 134217984;
    uint64_t v8 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I input rate effective  :  %llu bps", (uint8_t *)&v7, 0xCu);
  }
}

void sub_100C5F6E8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 88))
  {
    *(unsigned char *)(a1 + 88) = 1;
    uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v2 || (uint64_t v3 = *(void *)(a1 + 8), (v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v4);
    Registry::getTimerService(&v14, *(Registry **)(a1 + 48));
    uint64_t v6 = v14;
    sub_100058DB0(__p, "Report AQM");
    int v7 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v7;
    if (v7) {
      dispatch_retain(v7);
    }
    v8[0] = _NSConcreteStackBlock;
    v8[1] = 1174405120;
    void v8[2] = sub_100C5FAC0;
    void v8[3] = &unk_101A4A590;
    v8[4] = a1;
    v8[5] = v3;
    uint64_t v9 = v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    aBlock = _Block_copy(v8);
    sub_10027A2C0(v6, (uint64_t)__p, 1, 5000000, &object, &aBlock);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v13 < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v9) {
      std::__shared_weak_count::__release_weak(v9);
    }
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_100C5F854(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  unsigned int v26 = *(std::__shared_weak_count **)(v24 - 40);
  if (v26) {
    sub_10004D2C8(v26);
  }
  std::__shared_weak_count::__release_weak(v23);
  _Unwind_Resume(a1);
}

void sub_100C5F8C0(uint64_t a1)
{
  int v2 = *(_DWORD *)(a1 + 948);
  if (v2 == 3)
  {
    uint64_t v3 = *(void *)(a1 + 80);
    *(_OWORD *)(v3 + 24) = 0u;
    *(_OWORD *)(v3 + 8) = 0u;
    sub_100C5F6E8(a1);
    *(unsigned char *)(a1 + 89) = 0;
  }
  else if (!v2 && !*(unsigned char *)(a1 + 89))
  {
    *(unsigned char *)(a1 + 89) = 1;
  }
}

void sub_100C5F920(uint64_t a1, void *a2)
{
  if (a2[2] == *(void *)(a1 + 936))
  {
    int v2 = (void *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return;
    }
    uint64_t v3 = *(void **)(a1 + 920);
    while (1)
    {
      BOOL v4 = *((_DWORD *)v2 + 7) == *((_DWORD *)v3 + 7) && *((unsigned __int8 *)v2 + 32) == *((unsigned __int8 *)v3 + 32);
      if (!v4) {
        break;
      }
      uint64_t v5 = (void *)v2[1];
      uint64_t v6 = v2;
      if (v5)
      {
        do
        {
          int v2 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          int v2 = (void *)v6[2];
          BOOL v4 = *v2 == (void)v6;
          uint64_t v6 = v2;
        }
        while (!v4);
      }
      int v7 = (void *)v3[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          int v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v3[2];
          BOOL v4 = *v8 == (void)v3;
          uint64_t v3 = v8;
        }
        while (!v4);
      }
      uint64_t v3 = v8;
      if (v2 == a2 + 1) {
        return;
      }
    }
  }
  uint64_t v9 = *(void *)(a1 + 928);
  if (v9)
  {
    uint64_t v10 = a1 + 928;
    do
    {
      int v11 = *(_DWORD *)(v9 + 28);
      BOOL v12 = v11 < 1;
      if (v11 >= 1) {
        char v13 = (uint64_t *)v9;
      }
      else {
        char v13 = (uint64_t *)(v9 + 8);
      }
      if (!v12) {
        uint64_t v10 = v9;
      }
      uint64_t v9 = *v13;
    }
    while (*v13);
    if (v10 != a1 + 928 && *(int *)(v10 + 28) <= 1)
    {
      uint64_t v16 = a2[1];
      uint64_t v14 = (int *)(a2 + 1);
      uint64_t v15 = v16;
      if (!v16) {
        goto LABEL_48;
      }
      unint64_t v17 = v14;
      do
      {
        int v18 = *(_DWORD *)(v15 + 28);
        BOOL v19 = v18 < 1;
        if (v18 >= 1) {
          unint64_t v20 = (uint64_t *)v15;
        }
        else {
          unint64_t v20 = (uint64_t *)(v15 + 8);
        }
        if (!v19) {
          unint64_t v17 = (int *)v15;
        }
        uint64_t v15 = *v20;
      }
      while (*v20);
      if (v17 == v14 || v17[7] > 1 || *(unsigned __int8 *)(v10 + 32) != *((unsigned __int8 *)v17 + 32))
      {
LABEL_48:
        if (*(unsigned char *)(v10 + 32))
        {
          sub_100C5FA7C(a1);
        }
        else
        {
          uint64_t v21 = *(void *)(a1 + 80);
          *(_OWORD *)(v21 + 24) = 0u;
          *(_OWORD *)(v21 + 8) = 0u;
          sub_100C5F6E8(a1);
        }
      }
    }
  }
}

void sub_100C5FA7C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 80);
  int v2 = *(_DWORD *)(v1 + 4) - 1;
  if (v2 > 0xE)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
  }
  else
  {
    uint64_t v3 = qword_10155CF88[v2];
    uint64_t v4 = qword_10155D000[v2];
  }
  *(void *)(v1 + 8) = v3;
  *(void *)(v1 + 16) = v4;
  *(void *)(v1 + 24) = 0;
  *(void *)(v1 + 32) = 0;
  sub_100C5F6E8(a1);
}

void sub_100C5FAC0(void *a1)
{
  int v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = (ApplePDPHelperInterface *)std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = (std::__shared_weak_count *)v4;
      if (a1[5])
      {
        ApplePDPHelperInterface::getInstance(v4);
        ApplePDPHelperInterface::reportLinkThroughput();
        *(unsigned char *)(v3 + 88) = 0;
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100C5FB40(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100C5FB54(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C5FB70(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100C5FB80(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 944);
  if (v2 != a2)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v6) = 136315138;
      *(void *)((char *)&v6 + 4) = subscriber::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I User data SIM has changed to %s", (uint8_t *)&v6, 0xCu);
      int v2 = *(_DWORD *)(a1 + 944);
    }
    uint64_t v5 = "/cc/props/reg_net_info1";
    if (v2 == 2) {
      uint64_t v5 = "/cc/props/reg_net_info2";
    }
    *(void *)(a1 + 112) = v5;
    *(void *)&long long v6 = sub_100068B08;
    *((void *)&v6 + 1) = 0;
    sub_100C60228((char **)(a1 + 112), a1 + 96, a1, (uint64_t *)&v6);
  }
}

void sub_100C5FC84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C5FCBC(uint64_t a1)
{
}

uint64_t sub_100C5FCD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C5FD1C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100C5FD48(ServiceManager::Service *this)
{
  *(void *)this = off_101A4A6C8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100C5FDA4(ServiceManager::Service *this)
{
  *(void *)this = off_101A4A6C8;
  int v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100C5FE14@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "AQMController");
}

unsigned char *sub_100C5FE24@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  int v2 = operator new(1uLL);
  *a1 = v2;
  *int v2 = 3;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100C5FE64(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100C5F334(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100C5F334(v4, 0);
}

uint64_t sub_100C5FEE8()
{
  return 0;
}

uint64_t sub_100C5FEF0()
{
  return 1;
}

uint64_t sub_100C5FEF8()
{
  return 0;
}

void sub_100C5FF04(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C60020(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_100C60134(void **a1)
{
  uint64_t v1 = *a1;
  long long v6 = a1;
  int v7 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 64);
  if (v3)
  {
    uint64_t v4 = v1[1];
    dispatch_group_t group = v4;
    if (v4)
    {
      dispatch_retain(v4);
      dispatch_group_enter(v4);
    }
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)v3 + 40))(v3, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 96));
  sub_100088C88((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100C601EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  sub_100088C88(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_100C60228(char **a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100058DB0(&__p, *a1);
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v9 = operator new(0x28uLL);
  void *v9 = off_101A4A748;
  v9[1] = a1;
  void v9[2] = a3;
  void v9[3] = v8;
  v9[4] = v7;
  void v12[3] = v9;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (v11 < 0) {
    operator delete(__p);
  }
}

void sub_100C60300(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C60338()
{
}

__n128 sub_100C6034C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A4A748;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C603A0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4A748;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C603D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C60418()
{
}

void sub_100C60424(void *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = a1;
  uint64_t v3 = v1;
  operator new();
}

void sub_100C60884(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, dispatch_group_t group, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100C60954(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A7C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C60974(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4A7C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C609C8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100C609F0(AQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_101A4A870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  AQMCommandDriverDelegateInterface::~AQMCommandDriverDelegateInterface(this);
}

void sub_100C60A4C(AQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_101A4A870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  AQMCommandDriverDelegateInterface::~AQMCommandDriverDelegateInterface(this);

  operator delete();
}

void sub_100C60ABC(uint64_t a1, void *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v3) {
    return;
  }
  uint64_t v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return;
  }
  long long v6 = v5;
  uint64_t v7 = *(void *)(a1 + 8);
  if (!v7) {
    goto LABEL_51;
  }
  char v30 = 0;
  uint64_t v31 = 0;
  char v29 = &v30;
  uint64_t v10 = (void *)*a2;
  uint64_t v8 = a2 + 1;
  uint64_t v9 = v10;
  if (v10 == v8) {
    goto LABEL_50;
  }
  do
  {
    uint64_t v11 = *(void *)((char *)v9 + 28);
    BOOL v12 = (uint64_t ***)&v30;
    if (v29 == &v30) {
      goto LABEL_11;
    }
    char v13 = v30;
    uint64_t v14 = &v30;
    if (v30)
    {
      do
      {
        BOOL v12 = (uint64_t ***)v13;
        char v13 = (uint64_t *)v13[1];
      }
      while (v13);
    }
    else
    {
      do
      {
        BOOL v12 = (uint64_t ***)v14[2];
        BOOL v15 = *v12 == v14;
        uint64_t v14 = (uint64_t **)v12;
      }
      while (v15);
    }
    int v16 = *((_DWORD *)v9 + 7);
    if (*((_DWORD *)v12 + 7) < v16)
    {
LABEL_11:
      if (v30) {
        unint64_t v17 = (uint64_t **)v12;
      }
      else {
        unint64_t v17 = &v30;
      }
      if (v30)
      {
        int v18 = (uint64_t **)(v12 + 1);
      }
      else
      {
        BOOL v12 = &v29;
        int v18 = &v30;
      }
      if (v12[1]) {
        goto LABEL_30;
      }
LABEL_27:
      uint64_t v21 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v21 + 28) = v11;
      uint64_t *v21 = 0;
      v21[1] = 0;
      v21[2] = (uint64_t)v17;
      *int v18 = v21;
      if (*v29)
      {
        char v29 = (uint64_t **)*v29;
        uint64_t v21 = *v18;
      }
      sub_100046C90(v30, v21);
      ++v31;
      goto LABEL_30;
    }
    int v18 = &v30;
    unint64_t v17 = &v30;
    if (!v30) {
      goto LABEL_27;
    }
    BOOL v19 = v30;
    while (1)
    {
      while (1)
      {
        unint64_t v17 = (uint64_t **)v19;
        int v20 = *((_DWORD *)v19 + 7);
        if (v20 <= v16) {
          break;
        }
        BOOL v19 = *v17;
        int v18 = v17;
        if (!*v17) {
          goto LABEL_27;
        }
      }
      if (v20 >= v16) {
        break;
      }
      BOOL v19 = v17[1];
      if (!v19)
      {
        int v18 = v17 + 1;
        goto LABEL_27;
      }
    }
LABEL_30:
    unint64_t v22 = (void *)v9[1];
    if (v22)
    {
      do
      {
        unint64_t v23 = v22;
        unint64_t v22 = (void *)*v22;
      }
      while (v22);
    }
    else
    {
      do
      {
        unint64_t v23 = (void *)v9[2];
        BOOL v15 = *v23 == (void)v9;
        uint64_t v9 = v23;
      }
      while (!v15);
    }
    uint64_t v9 = v23;
  }
  while (v23 != v8);
  uint64_t v24 = v29;
  if (v29 != &v30)
  {
    do
    {
      switch(*((_DWORD *)v24 + 7))
      {
        case 0:
          *(void *)(*(void *)(v7 + 80) + 8) = *((unsigned int *)v24 + 8);
          break;
        case 1:
          *(void *)(*(void *)(v7 + 80) + 24) = *((unsigned int *)v24 + 8);
          break;
        case 2:
          *(void *)(*(void *)(v7 + 80) + 16) = *((unsigned int *)v24 + 8);
          break;
        case 3:
          *(void *)(*(void *)(v7 + 80) + 32) = *((unsigned int *)v24 + 8);
          break;
        default:
          char v25 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v26 = asString();
            *(_DWORD *)long long buf = 136315138;
            uint64_t v33 = v26;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#N unexpected throughput key: %s", buf, 0xCu);
          }
          break;
      }
      uint64_t v27 = v24[1];
      if (v27)
      {
        do
        {
          unint64_t v28 = (uint64_t **)v27;
          uint64_t v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          unint64_t v28 = (uint64_t **)v24[2];
          BOOL v15 = *v28 == (uint64_t *)v24;
          uint64_t v24 = v28;
        }
        while (!v15);
      }
      uint64_t v24 = v28;
    }
    while (v28 != &v30);
  }
LABEL_50:
  sub_100C5F6E8(v7);
  sub_10005D144(v30);
LABEL_51:
  sub_10004D2C8(v6);
}

void sub_100C60DC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13)
{
  sub_10005D144(a13);
  sub_10004D2C8(v13);
  _Unwind_Resume(a1);
}

void sub_100C60E04(AQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_101A4A870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  AQMCommandDriverDelegateInterface::~AQMCommandDriverDelegateInterface(this);
}

void sub_100C60E60(AQMCommandDriverDelegateInterface *this)
{
  *(void *)this = off_101A4A870;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  AQMCommandDriverDelegateInterface::~AQMCommandDriverDelegateInterface(this);

  operator delete();
}

void sub_100C60ED4()
{
}

__n128 sub_100C60EE8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A4A898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C60F3C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4A898;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C60F74(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100C60FBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C60FFC()
{
}

void sub_100C6100C()
{
}

__n128 sub_100C61020(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A4A918;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C61074(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4A918;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C610AC(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  BOOL v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100C611A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C611E4()
{
}

void sub_100C611F4()
{
}

__n128 sub_100C61208(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A4A998;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C6125C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4A998;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C61294(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_10003447C((uint64_t)v3, a2);
  long long v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    long long v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_100C61354(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100C6136C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C613AC()
{
}

void sub_100C613BC()
{
}

__n128 sub_100C613D0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A4AA18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C61424(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4AA18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C6145C(void *a1, xpc *this, uint64_t a3)
{
  uint64_t v4 = (_DWORD *)a1[1];
  *uint64_t v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = (uint64_t (*)(void *))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *))(*v7 + v5);
  }

  return v5(v7);
}

uint64_t sub_100C614E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C61524()
{
}

void sub_100C61530(uint64_t a1)
{
  uint64_t v1 = *(void *)(**(void **)a1 + 64);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 32))(v1);
  }
  operator delete();
}

void sub_100C615AC()
{
}

uint64_t sub_100C615E0(uint64_t a1, void *a2, NSObject **a3, char a4)
{
  *(void *)a1 = off_101A4AAF0;
  uint64_t v8 = (void *)(a1 + 8);
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&valuePtr, kCtLoggingSystemName, "cdp.alert.counter");
  void *v8 = 0;
  v8[1] = 0;
  uint64_t v9 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v9) {
    dispatch_retain(v9);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&BOOLean, &valuePtr);
  uint64_t v10 = (os_log_t *)(a1 + 40);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)&BOOLean);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&BOOLean);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&valuePtr);
  *(void *)a1 = off_101A4AA98;
  *(void *)(a1 + 48) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 56) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 64) = 0;
  *(void *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = a4;
  *(unsigned char *)(a1 + 81) = 0;
  CFBooleanRef BOOLean = 0;
  DevicePersistentCopyValue((uint64_t *)&valuePtr, @"DataPlanAlertsExhausted", 0);
  sub_1000057AC(&BOOLean, (CFTypeRef *)&valuePtr.var0);
  sub_1000577C4((const void **)&valuePtr.var0);
  CFNumberRef number = 0;
  DevicePersistentCopyValue((uint64_t *)&valuePtr, @"DataPlanAlertsShown", 0);
  sub_1000842D0(&number, (CFTypeRef *)&valuePtr.var0);
  sub_1000577C4((const void **)&valuePtr.var0);
  if (BOOLean) {
    BOOL v12 = sub_100084B4C;
  }
  else {
    BOOL v12 = 0;
  }
  if (v12) {
    *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = CFBooleanGetValue(BOOLean) != 0;
  }
  if (number) {
    char v13 = sub_100081E58;
  }
  else {
    char v13 = 0;
  }
  if (v13)
  {
    LODWORD(valuePtr.varsub_10023C164((uint64_t)&a9, 0) = 0;
    CFNumberGetValue(number, kCFNumberIntType, &valuePtr);
    int var0 = (int)valuePtr.var0;
    if (SLODWORD(valuePtr.var0) >= 5)
    {
      *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 1;
      goto LABEL_18;
    }
    if (LODWORD(valuePtr.var0) == 3)
    {
      *(_DWORD *)(a1 + 76) = 1;
    }
    else
    {
      if (LODWORD(valuePtr.var0) == 4)
      {
LABEL_18:
        *(_DWORD *)(a1 + 76) = 2;
        var0 -= 4;
        if (!var0) {
          goto LABEL_21;
        }
        goto LABEL_19;
      }
      if (((uint64_t)valuePtr.var0 & 0x80000000) != 0 || (*(_DWORD *)(a1 + 76) = 0, var0)) {
LABEL_19:
      }
        *(_DWORD *)(a1 + 72) = var0;
    }
  }
LABEL_21:
  BOOL v15 = *v10;
  if (os_log_type_enabled(*v10, OS_LOG_TYPE_DEFAULT))
  {
    int v16 = *(unsigned __int8 *)(a1 + 80);
    int v18 = *(_DWORD *)(a1 + 72);
    int v17 = *(_DWORD *)(a1 + 76);
    LODWORD(valuePtr.varsub_10023C164((uint64_t)&a9, 0) = 67109632;
    HIDWORD(valuePtr.varsub_10023C164((uint64_t)&a9, 0) = v16;
    LOWORD(valuePtr.var1.fRef) = 1024;
    *(_DWORD *)((char *)&valuePtr.var1.fRef + 2) = v17;
    HIWORD(valuePtr.var1.fRef) = 1024;
    int v23 = v18;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I loaded exhausted alerts: %d, day:%d, numShownToday:%d", (uint8_t *)&valuePtr, 0x14u);
  }
  sub_1000570E8((const void **)&number);
  sub_100062778((const void **)&BOOLean);
  return a1;
}

void sub_100C618A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
  sub_1000570E8(&a9);
  sub_100062778(&a10);
  unsigned int v14 = *(std::__shared_weak_count **)(v10 + 56);
  if (v14) {
    sub_10004D2C8(v14);
  }
  ctu::OsLogLogger::~OsLogLogger(v12);
  sub_100087E88(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100C6193C(uint64_t a1, void *a2, NSObject **a3)
{
  uint64_t v5 = *a3;
  uint64_t v7 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100C615E0(a1, a2, &v7, 0);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_100C619A8(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100C619C0(void *a1)
{
  *a1 = off_101A4AA98;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_100C61A24(void *a1)
{
  sub_100C619C0(a1);

  operator delete();
}

void sub_100C61A5C(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 81) != a2)
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      v5[0] = 67109120;
      v5[1] = a2;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I set is active: %d", (uint8_t *)v5, 8u);
    }
    *(unsigned char *)(a1 + 81) = a2;
  }
}

uint64_t sub_100C61B14(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 81)) {
    return 1;
  }
  if (*(unsigned char *)(a1 + 80)) {
    return 0;
  }
  unsigned int v3 = *(_DWORD *)(a1 + 76);
  if (!v3)
  {
    if (*(int *)(a1 + 72) < 3)
    {
      int v12 = 3;
      return *(_DWORD *)(a1 + 72) < v12;
    }
    uint64_t v8 = *(void *)(a1 + 64);
    Registry::getTimerService((uint64_t *)&v13, *(Registry **)(a1 + 48));
    uint64_t v9 = (**v13)(v13);
    uint64_t v10 = v8 + 86400000000000;
    if (v14) {
      sub_10004D2C8(v14);
    }
    if (v10 < v9)
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v13) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I move to day 2", (uint8_t *)&v13, 2u);
      }
      unsigned int v3 = 1;
      goto LABEL_24;
    }
    unsigned int v3 = *(_DWORD *)(a1 + 76);
  }
  if (v3 != 1) {
    goto LABEL_25;
  }
  if (*(int *)(a1 + 72) < 1)
  {
    int v12 = 1;
    return *(_DWORD *)(a1 + 72) < v12;
  }
  uint64_t v4 = *(void *)(a1 + 64);
  Registry::getTimerService((uint64_t *)&v13, *(Registry **)(a1 + 48));
  uint64_t v5 = (**v13)(v13);
  uint64_t v6 = v4 + 86400000000000;
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v6 >= v5)
  {
    unsigned int v3 = *(_DWORD *)(a1 + 76);
    goto LABEL_25;
  }
  uint64_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v13) = 0;
    unsigned int v3 = 2;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I move to day 3", (uint8_t *)&v13, 2u);
  }
  else
  {
    unsigned int v3 = 2;
  }
LABEL_24:
  *(_DWORD *)(a1 + 72) = 0;
  *(_DWORD *)(a1 + 76) = v3;
LABEL_25:
  if (v3 <= 2)
  {
    int v12 = dword_10155D1F0[v3];
    return *(_DWORD *)(a1 + 72) < v12;
  }
  return 1;
}

void sub_100C61D14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100C61D30(const void **result)
{
  if (*((unsigned char *)result + 81))
  {
    uint64_t v1 = (uint64_t)result;
    if ((*((unsigned int (**)(const void **))*result + 4))(result))
    {
      Registry::getTimerService((uint64_t *)&v5, *(Registry **)(v1 + 48));
      *(void *)(v1 + 64) = (**v5)(v5);
      if (v6) {
        sub_10004D2C8(v6);
      }
    }
    int v2 = *(_DWORD *)(v1 + 72) + 1;
    *(_DWORD *)(v1 + 72) = v2;
    unsigned int v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v4 = *(_DWORD *)(v1 + 76);
      LODWORD(v5) = 67109376;
      HIDWORD(v5) = v4;
      LOWORD(v6) = 1024;
      *(_DWORD *)((char *)&v6 + 2) = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I did show alert day: %d, num: %d", (uint8_t *)&v5, 0xEu);
      int v2 = *(_DWORD *)(v1 + 72);
    }
    if (v2 >= 1 && *(_DWORD *)(v1 + 76) == 2) {
      *(unsigned char *)(v1 + 8sub_10023C164((uint64_t)&a9, 0) = 1;
    }
    return sub_100C61EAC(v1);
  }
  return result;
}

void sub_100C61E8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100C61EAC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 80)) {
    int v2 = &kCFBooleanTrue;
  }
  else {
    int v2 = &kCFBooleanFalse;
  }
  CFBooleanRef v3 = *v2;
  CFNumberRef valuePtr = 0;
  sub_100062778((const void **)&valuePtr);
  CFTypeRef cf = v3;
  CFNumberRef valuePtr = 0;
  sub_100062778((const void **)&valuePtr);
  int v4 = *(_DWORD *)(a1 + 72);
  int v5 = *(_DWORD *)(a1 + 76);
  int v6 = v4 + 3;
  if (v5 == 2) {
    v4 += 4;
  }
  if (v5 == 1) {
    int v7 = v6;
  }
  else {
    int v7 = v4;
  }
  CFNumberRef v17 = 0;
  LODWORD(valuePtr) = v7;
  CFNumberRef v8 = CFNumberCreate(kCFAllocatorDefault, kCFNumberIntType, &valuePtr);
  if (v8)
  {
    CFNumberRef v9 = v17;
    CFNumberRef v17 = v8;
    CFNumberRef valuePtr = v9;
    sub_1000570E8((const void **)&valuePtr);
  }
  CFTypeRef v15 = v17;
  CFNumberRef v17 = 0;
  sub_1000570E8((const void **)&v17);
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    int v11 = *(unsigned __int8 *)(a1 + 80);
    LODWORD(valuePtr) = 67109376;
    HIDWORD(valuePtr) = v11;
    __int16 v19 = 1024;
    int v20 = v7;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I persist exhausted:%d, num alerts:%d", (uint8_t *)&valuePtr, 0xEu);
  }
  CFTypeRef v14 = cf;
  if (cf) {
    CFRetain(cf);
  }
  DevicePersistentSaveValue();
  sub_1000577C4(&v14);
  CFTypeRef v13 = v15;
  if (v15) {
    CFRetain(v15);
  }
  DevicePersistentSaveValue();
  sub_1000577C4(&v13);
  sub_1000570E8(&v15);
  return sub_100062778(&cf);
}

void sub_100C62060(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100C620B0(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I reset due to plan selection", v4, 2u);
  }
  *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 72) = 0;
  return sub_100C61EAC(a1);
}

const void **sub_100C62124(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I reset due to plan purchase", v4, 2u);
  }
  *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 72) = 0;
  return sub_100C61EAC(a1);
}

const void **sub_100C62198(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I reset due to sim removal", v4, 2u);
  }
  *(unsigned char *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 72) = 0;
  return sub_100C61EAC(a1);
}

void sub_100C6220C(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(unsigned __int8 *)(a1 + 80);
    int v5 = *(_DWORD *)(a1 + 72);
    int v4 = *(_DWORD *)(a1 + 76);
    v6[0] = 67109632;
    v6[1] = v3;
    __int16 v7 = 1024;
    int v8 = v4;
    __int16 v9 = 1024;
    int v10 = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I exhausted alerts?: %d, day:%d, num alerts today:%d", (uint8_t *)v6, 0x14u);
  }
}

void sub_100C622C4(void *a1@<X1>, NSObject **a2@<X2>, void *a3@<X8>)
{
  int v6 = operator new(0x70uLL);
  sub_100C62340(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000B3BC8((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100C6232C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100C62340(void *a1, void *a2, NSObject **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A4AC00;
  sub_100C62438((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_100C62388(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100C6239C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4AC00;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C623BC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4AC00;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C62410(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100C62438(uint64_t a1, void *a2, NSObject **a3)
{
  int v5 = *a3;
  __int16 v7 = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  sub_100C6193C(a1, a2, &v7);
  if (v5) {
    dispatch_release(v5);
  }
  return a1;
}

void sub_100C624A0(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C624B8(uint64_t a1, uint64_t a2)
{
  sub_100C625B8();
  uint64_t v4 = qword_101B13EE8;
  if (qword_101B13EE8 >= (unint64_t)qword_101B13EF0)
  {
    uint64_t v6 = (qword_101B13EE8 - qword_101B13EE0) >> 3;
    if ((unint64_t)(v6 + 1) >> 61) {
      sub_100C676F8();
    }
    unint64_t v7 = (qword_101B13EF0 - qword_101B13EE0) >> 2;
    if (v7 <= v6 + 1) {
      unint64_t v7 = v6 + 1;
    }
    if ((unint64_t)(qword_101B13EF0 - qword_101B13EE0) >= 0x7FFFFFFFFFFFFFF8) {
      unint64_t v8 = 0x1FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v8 = v7;
    }
    if (v8) {
      __int16 v9 = (char *)sub_10004EF74((uint64_t)&qword_101B13EF0, v8);
    }
    else {
      __int16 v9 = 0;
    }
    int v10 = &v9[8 * v6];
    *(void *)int v10 = a2;
    uint64_t v5 = (uint64_t)(v10 + 8);
    uint64_t v11 = (uint64_t)&v9[8 * v8];
    uint64_t v13 = qword_101B13EE0;
    int v12 = (char *)qword_101B13EE8;
    if (qword_101B13EE8 != qword_101B13EE0)
    {
      do
      {
        uint64_t v14 = *((void *)v12 - 1);
        v12 -= 8;
        *((void *)v10 - 1) = v14;
        v10 -= 8;
      }
      while (v12 != (char *)v13);
      int v12 = (char *)qword_101B13EE0;
    }
    qword_101B13EE0 = (uint64_t)v10;
    qword_101B13EE8 = v5;
    qword_101B13EF0 = v11;
    if (v12) {
      operator delete(v12);
    }
  }
  else
  {
    *(void *)qword_101B13EE8 = a2;
    uint64_t v5 = v4 + 8;
  }
  qword_101B13EE8 = v5;
  return a1;
}

void sub_100C625B8()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B12A40, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B12A40))
  {
    __cxa_atexit((void (*)(void *))sub_100C676C4, &qword_101B13EE0, (void *)&_mh_execute_header);
    __cxa_guard_release(&qword_101B12A40);
  }
}

uint64_t *sub_100C62630(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  int v12 = a2;
  unint64_t v8 = (uint64_t **)(a1 + 120);
  sub_1000493DC(&v11, a2);
  if (sub_100C69024((uint64_t)v8, (long long *)&v11) || (sub_1000493DC(&v10, a2), sub_100C69024(a1 + 144, &v10)))
  {
    syslog(3, "Duplicate registry of CTServer handler '%s'", a2);
    __assert_rtn("registerHandler_sync", "CCXpcServer.cpp", 456, "false && \"Duplicate registry of CTServer handler\"");
  }
  v11.n128_u64[0] = a3;
  v11.n128_u64[1] = a4;
  return sub_100C690AC(v8, &v12, &v11);
}

uint64_t *sub_100C62700(uint64_t a1, char *a2, unint64_t a3, unsigned int a4)
{
  uint64_t v13 = a2;
  uint64_t v8 = a1 + 120;
  sub_1000493DC(&v12, a2);
  if (sub_100C69024(v8, (long long *)&v12)
    || (__int16 v9 = (uint64_t **)(a1 + 144), sub_1000493DC(&v11, a2), sub_100C69024((uint64_t)v9, &v11)))
  {
    syslog(3, "Duplicate registry of CTServer reply handler '%s'", a2);
    __assert_rtn("registerHandler_sync", "CCXpcServer.cpp", 468, "false && \"Duplicate registry of CTServer reply handler\"");
  }
  v12.n128_u64[0] = a3;
  v12.n128_u64[1] = a4;
  return sub_100C69288(v9, &v13, &v12);
}

xpc_object_t *sub_100C627D0(xpc_object_t *a1)
{
  *a1 = 0;
  return a1;
}

uint64_t sub_100C62804(uint64_t a1)
{
  *(void *)a1 = off_101A4AC50;
  int v2 = *(void **)(a1 + 296);
  if (v2)
  {
    *(void *)(a1 + 304) = v2;
    operator delete(v2);
  }
  int v3 = *(void **)(a1 + 272);
  if (v3)
  {
    *(void *)(a1 + 28sub_10023C164((uint64_t)&a9, 0) = v3;
    operator delete(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 264);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 248);
  if (v5) {
    sub_10004D2C8(v5);
  }
  long long v10 = (void **)(a1 + 216);
  sub_100C67710(&v10);
  sub_1001FEC70(*(void **)(a1 + 200));
  sub_100C67944(*(void **)(a1 + 176));
  sub_10005D144(*(void **)(a1 + 152));
  sub_10005D144(*(void **)(a1 + 128));
  xpc_release(*(xpc_object_t *)(a1 + 104));
  *(void *)(a1 + 104) = 0;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 96);
  if (v6) {
    sub_10004D2C8(v6);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 80));
  unint64_t v7 = *(NSObject **)(a1 + 72);
  if (v7) {
    dispatch_release(v7);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 64));
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 56);
  if (v8) {
    sub_10004D2C8(v8);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100C62910(uint64_t a1)
{
  sub_100C62804(a1);

  operator delete();
}

void sub_100C62948(void *a1@<X8>)
{
  v3[0] = off_101A4B130;
  v3[3] = v3;
  inactive = dispatch_workloop_create_inactive("CCXpcServer");
  sub_100136200((uint64_t)v3, (uint64_t)inactive);
  dispatch_activate(inactive);
  sub_1001362D0(v3);
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100C62F90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, ctu::OsLogLogger *a9, ctu::OsLogLogger *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,dispatch_object_t object,dispatch_object_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,dispatch_object_t a36)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C63190(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&a27);
  sub_100087E88(a11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a18);
  if (v27) {
    dispatch_release(v27);
  }
  JUMPOUT(0x100C63170);
}

void sub_100C631CC()
{
  if (v0) {
    dispatch_release(v0);
  }
  JUMPOUT(0x100C63188);
}

void sub_100C631E0()
{
  sub_1001362D0((void *)(v0 - 144));
  JUMPOUT(0x100C63188);
}

void sub_100C631F0(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 24);
  if (v1) {
    dispatch_retain(v1);
  }
  sub_100BCDD00(&v2);
}

void sub_100C63270(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C63288(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C632A4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C632B4(uint64_t a1, char a2)
{
  v5[0] = a2;
  uint64_t v6 = a1;
  if (*(void *)(a1 + 32))
  {
    if (dispatch_workloop_is_current()) {
      sub_100C6809C((uint64_t)v5);
    }
    BOOL v3 = *(void *)(a1 + 32) == 0;
  }
  else
  {
    BOOL v3 = 1;
  }
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_100C68D44;
  block[3] = &unk_101A4B438;
  block[4] = a1 + 8;
  block[5] = v5;
  uint64_t v4 = *(NSObject **)(a1 + 24);
  if (v3) {
    dispatch_sync(v4, block);
  }
  else {
    dispatch_async_and_wait(v4, block);
  }
}

void sub_100C63380(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100C63390(void *a1)
{
  uint64_t v2 = a1[4];
  BOOL v3 = *(NSObject **)(v2 + 72);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 1174405120;
  _DWORD v6[2] = sub_100C63468;
  void v6[3] = &unk_101A4ACC0;
  uint64_t v4 = a1[7];
  v6[4] = v2;
  dispatch_group_t group = v4;
  if (v4)
  {
    dispatch_retain(v4);
    dispatch_group_enter(group);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[6];
  uint64_t v8 = a1[5];
  __int16 v9 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_async(v3, v6);
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_100C63468(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 80);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#N Flush of all incoming requests complete. (could be more, but oh well)", v2, 2u);
  }
}

void sub_100C634CC(void *a1, void *a2)
{
  uint64_t v4 = a2[5];
  a1[5] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[5];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[7];
  a1[6] = a2[6];
  a1[7] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_100C63524(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    sub_10004D2C8(v2);
  }
  BOOL v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_group_leave(v3);
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (v4)
    {
      dispatch_release(v4);
    }
  }
}

void sub_100C63580(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = a2[7];
  a1[7] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    uint64_t v5 = a1[7];
    if (v5)
    {
      dispatch_group_enter(v5);
    }
  }
}

void sub_100C635EC(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 56);
  if (v2)
  {
    dispatch_group_leave(v2);
    uint64_t v3 = *(NSObject **)(a1 + 56);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 48);
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_100C63648(void *a1, NSObject **a2)
{
  uint64_t v4 = a1[4];
  _CTServerConnectionSetInternalManagedState();
  uint64_t v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Closing all CCXpcServer connections", buf, 2u);
  }
  xpc_connection_cancel(*(xpc_connection_t *)(v4 + 104));
  uint64_t v6 = *(void **)(v4 + 168);
  if (v6 != (void *)(v4 + 176))
  {
    do
    {
      xpc_connection_cancel((xpc_connection_t)v6[4]);
      unint64_t v7 = (void *)v6[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void *)v6[2];
          BOOL v9 = *v8 == (void)v6;
          uint64_t v6 = v8;
        }
        while (!v9);
      }
      uint64_t v6 = v8;
    }
    while (v8 != (void *)(v4 + 176));
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  void v13[2] = sub_100C63860;
  v13[3] = &unk_101A4AD20;
  long long v10 = *a2;
  void v13[4] = v4;
  dispatch_group_t group = v10;
  if (v10)
  {
    dispatch_retain(v10);
    dispatch_group_enter(group);
  }
  long long v11 = (std::__shared_weak_count *)a1[6];
  uint64_t v15 = a1[5];
  int v16 = v11;
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = 0;
  char v25 = 0;
  sub_10003E168(&v24, (void *)(v4 + 8));
  __n128 v12 = *(NSObject **)(v4 + 24);
  *(void *)long long buf = _NSConcreteStackBlock;
  uint64_t v18 = 1174405120;
  __int16 v19 = sub_100058EBC;
  int v20 = &unk_101A4B208;
  uint64_t v22 = v24;
  int v23 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v13;
  dispatch_async(v12, buf);
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (v25) {
    sub_10004D2C8(v25);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_100C63860(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 32) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#N CCXpcServer shut down all XPC services", v2, 2u);
  }
}

uint64_t sub_100C638C4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C638E0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C638F0(void *a1)
{
  uint64_t v2 = a1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = a1[17];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Handler count=%zu", buf, 0xCu);
    uint64_t v2 = a1[5];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = a1[20];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Reply handler count=%zu", buf, 0xCu);
    uint64_t v2 = a1[5];
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1[23];
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Connected client count=%zu", buf, 0xCu);
  }
  uint64_t v6 = (void *)a1[21];
  if (v6 != a1 + 22)
  {
    do
    {
      unint64_t v7 = (int *)v6[10];
      uint64_t v8 = (int *)v6[11];
      memset(&v23, 0, sizeof(v23));
      if (v7 != v8)
      {
        std::to_string((std::string *)buf, *v7);
        std::string v23 = *(std::string *)buf;
        while (++v7 != v8)
        {
          buf[23] = 1;
          strcpy(buf, ",");
          std::string::append(&v23, buf, 1uLL);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          std::to_string((std::string *)buf, *v7);
          if (buf[23] >= 0) {
            BOOL v9 = buf;
          }
          else {
            BOOL v9 = *(const std::string::value_type **)buf;
          }
          if (buf[23] >= 0) {
            std::string::size_type v10 = buf[23];
          }
          else {
            std::string::size_type v10 = *(void *)&buf[8];
          }
          std::string::append(&v23, v9, v10);
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
        }
      }
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v22 = 0;
      (*(void (**)(void **__return_ptr))(**(void **)(v6[8] + 32) + 40))(__p);
      long long v11 = a1[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        __n128 v12 = v6 + 5;
        if (*((char *)v6 + 63) < 0) {
          __n128 v12 = (void *)*v12;
        }
        uint64_t v13 = (int *)v6[8];
        uint64_t v14 = v13 + 2;
        if (*((char *)v13 + 31) < 0) {
          uint64_t v14 = (void *)*v14;
        }
        int v15 = *v13;
        int v16 = &v23;
        if ((v23.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          int v16 = (std::string *)v23.__r_.__value_.__r.__words[0];
        }
        CFNumberRef v17 = __p;
        if (v22 < 0) {
          CFNumberRef v17 = (void **)__p[0];
        }
        *(_DWORD *)long long buf = 136447234;
        *(void *)&uint8_t buf[4] = v12;
        *(_WORD *)&unsigned char buf[12] = 1024;
        *(_DWORD *)&buf[14] = v15;
        *(_WORD *)&buf[18] = 2082;
        *(void *)&buf[20] = v14;
        __int16 v25 = 2082;
        uint64_t v26 = v16;
        __int16 v27 = 2082;
        unint64_t v28 = v17;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I  -- client '%{public}s' pid=%d procname=%{public}s events=[%{public}s] %{public}s", buf, 0x30u);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v23.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v23.__r_.__value_.__l.__data_);
      }
      uint64_t v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          __int16 v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          __int16 v19 = (void *)v6[2];
          BOOL v20 = *v19 == (void)v6;
          uint64_t v6 = v19;
        }
        while (!v20);
      }
      uint64_t v6 = v19;
    }
    while (v19 != a1 + 22);
  }
  sub_100BCE4F8(a1[32]);
}

void sub_100C63C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
}

void sub_100C63CAC(uint64_t a1)
{
}

void sub_100C63CBC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_100C63D1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t sub_100C63D38(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = result;
  return result;
}

void sub_100C63D78(uint64_t a1)
{
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = 0;
}

void sub_100C63DA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void **)(a1 + 40);
  xpc_object_t object = v1;
  if (v1) {
    xpc_retain(v1);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  (*(void (**)(uint64_t, xpc_object_t *))(v2 + 16))(v2, &object);
  xpc_release(object);
}

void sub_100C63E08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

xpc_object_t sub_100C63E24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(const void **)(a2 + 32);
  if (v4) {
    uint64_t v5 = _Block_copy(v4);
  }
  else {
    uint64_t v5 = 0;
  }
  uint64_t v6 = *(void **)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = result;
  return result;
}

void sub_100C63E84(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = 0;
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

uint64_t sub_100C63EC4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 80);
  if (v2)
  {
    *(void *)(a1 + 88) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void sub_100C63F30(uint64_t *a1)
{
  uint64_t v11 = 0;
  __n128 v12 = 0;
  sub_100034EDC(&v11);
  uint64_t v2 = v11;
  if (!v11)
  {
    uint64_t v4 = v12;
    if (!v12) {
      return;
    }
    goto LABEL_17;
  }
  uint64_t v3 = (void *)(v11 + 8);
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  void v7[2] = sub_100C640B4;
  void v7[3] = &unk_101A4AE78;
  uint64_t v4 = v12;
  v7[4] = v11;
  uint64_t v8 = v12;
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[1];
  uint64_t v9 = *a1;
  std::string::size_type v10 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = 0;
  int v16 = 0;
  sub_10003E168(&v15, v3);
  uint64_t v6 = *(NSObject **)(v2 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100058EBC;
  block[3] = &unk_101A4B208;
  block[5] = v15;
  uint64_t v14 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  block[4] = v7;
  dispatch_async(v6, block);
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v4) {
LABEL_17:
  }
    sub_10004D2C8(v4);
}

void sub_100C640B4(void *a1)
{
  uint64_t v2 = (uint64_t **)(a1[4] + 192);
  unint64_t v7 = (void **)(a1[6] + 56);
  uint64_t v3 = sub_100C6956C(v2, v7, (long long **)&v7);
  uint64_t v5 = a1[6];
  uint64_t v4 = a1[7];
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (std::__shared_weak_count *)v3[8];
  v3[7] = v5;
  v3[8] = v4;
  if (v6)
  {
    sub_10004D2C8(v6);
  }
}

void *sub_100C6413C(void *result, void *a2)
{
  uint64_t v2 = a2[5];
  result[4] = a2[4];
  result[5] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[7];
  result[6] = a2[6];
  result[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C64170(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_100C641C0(long long *a1, void **a2, long long *a3)
{
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_100034EDC(&v17);
  uint64_t v6 = v17;
  if (v17)
  {
    v10[0] = _NSConcreteStackBlock;
    v10[1] = 1174405120;
    void v10[2] = sub_100C6441C;
    void v10[3] = &unk_101A4AEA8;
    unint64_t v7 = v18;
    void v10[4] = v17;
    uint64_t v11 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a1 + 23) < 0)
    {
      sub_10004FC84(&v12, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long v12 = *a1;
      uint64_t v13 = *((void *)a1 + 2);
    }
    uint64_t v8 = *a2;
    xpc_object_t object = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __p = *a3;
      uint64_t v16 = *((void *)a3 + 2);
    }
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    sub_10003E168(&v21, (void *)(v6 + 8));
    uint64_t v9 = *(NSObject **)(v6 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_100058EBC;
    block[3] = &unk_101A4B208;
    block[5] = v21;
    BOOL v20 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    block[4] = v10;
    dispatch_async(v9, block);
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)__p);
    }
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(v13) < 0) {
      operator delete((void *)v12);
    }
    if (v11) {
      sub_10004D2C8(v11);
    }
  }
  else
  {
    unint64_t v7 = v18;
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_100C643C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object)
{
  xpc_release(object);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v21) {
    sub_10004D2C8(v21);
  }
  _Unwind_Resume(a1);
}

void sub_100C6441C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = a1 + 48;
  *(void *)long long buf = a1 + 48;
  uint64_t v4 = sub_100C6956C((uint64_t **)(v2 + 192), (void **)(a1 + 48), (long long **)buf);
  uint64_t v6 = (os_unfair_lock_s *)v4[7];
  uint64_t v5 = (std::__shared_weak_count *)v4[8];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v6)
  {
    uint64_t v11 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = *(void *)(a1 + 72);
      if (*(char *)(a1 + 71) >= 0) {
        uint64_t v13 = v3;
      }
      else {
        uint64_t v13 = *(void *)(a1 + 48);
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v13;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v12;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v16 = v13;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I CCXpcServer has no assertion named '%s'; dropping addition for client %p/%s",
        buf,
        0x20u);
    }
    goto LABEL_30;
  }
  unint64_t v7 = (_OWORD *)(a1 + 80);
  uint64_t v8 = *(void **)(v2 + 176);
  if (!v8)
  {
LABEL_10:
    xpc_object_t v9 = xpc_null_create();
    uint64_t v14 = v9;
    if (*(char *)(a1 + 103) < 0)
    {
      sub_10004FC84(buf, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)long long buf = *v7;
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 96);
    }
    sub_100DD2AD8(v6, &v14, (long long *)buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_29;
  }
  xpc_object_t v9 = *(xpc_object_t *)(a1 + 72);
  while (1)
  {
    unint64_t v10 = v8[4];
    if ((unint64_t)v9 >= v10) {
      break;
    }
LABEL_9:
    uint64_t v8 = (void *)*v8;
    if (!v8) {
      goto LABEL_10;
    }
  }
  if (v10 < (unint64_t)v9)
  {
    ++v8;
    goto LABEL_9;
  }
  uint64_t v14 = *(void **)(a1 + 72);
  if (v9)
  {
    xpc_retain(v9);
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    uint64_t v14 = v9;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10004FC84(buf, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)long long buf = *v7;
    *(void *)&uint8_t buf[16] = *(void *)(a1 + 96);
  }
  sub_100DD2AD8(v6, &v14, (long long *)buf);
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_29:
  xpc_release(v9);
LABEL_30:
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_100C64638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(v17);
  if (v16) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100C646C4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  uint64_t v6 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)(a1 + 72) = xpc_null_create();
  }
  xpc_object_t result = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  long long v8 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)xpc_object_t result = v8;
  return result;
}

void sub_100C64784(_Unwind_Exception *a1)
{
  sub_100C627D0(v3);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    sub_10004D2C8(v5);
  }
  _Unwind_Resume(a1);
}

void sub_100C647C0(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void sub_100C64834(long long *a1, void **a2, long long *a3, uint64_t *a4)
{
  uint64_t v22 = 0;
  std::string v23 = 0;
  sub_100034EDC(&v22);
  uint64_t v8 = v22;
  if (v22)
  {
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 1174405120;
    void v13[2] = sub_100C64AC0;
    v13[3] = &unk_101A4AED8;
    xpc_object_t v9 = v23;
    void v13[4] = v22;
    uint64_t v14 = v23;
    if (v23) {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a1 + 23) < 0)
    {
      sub_10004FC84(&v15, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long v15 = *a1;
      uint64_t v16 = *((void *)a1 + 2);
    }
    unint64_t v10 = *a2;
    xpc_object_t object = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __p = *a3;
      uint64_t v19 = *((void *)a3 + 2);
    }
    uint64_t v11 = (std::__shared_weak_count *)a4[1];
    uint64_t v20 = *a4;
    uint64_t v21 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v26 = 0;
    __int16 v27 = 0;
    sub_10003E168(&v26, (void *)(v8 + 8));
    uint64_t v12 = *(NSObject **)(v8 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_100058EBC;
    block[3] = &unk_101A4B208;
    block[5] = v26;
    __int16 v25 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    block[4] = v13;
    dispatch_async(v12, block);
    if (v25) {
      sub_10004D2C8(v25);
    }
    if (v27) {
      sub_10004D2C8(v27);
    }
    if (v21) {
      sub_10004D2C8(v21);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__p);
    }
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(v16) < 0) {
      operator delete((void *)v15);
    }
    if (v14) {
      sub_10004D2C8(v14);
    }
  }
  else
  {
    xpc_object_t v9 = v23;
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100C64A68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t object)
{
  xpc_release(object);
  if (a20 < 0) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v21) {
    sub_10004D2C8(v21);
  }
  _Unwind_Resume(a1);
}

void sub_100C64AC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = (void **)(a1 + 48);
  uint64_t v5 = *(void *)(a1 + 104);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 112);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *(void *)long long buf = a1 + 48;
  uint64_t v6 = sub_100C6956C((uint64_t **)(v2 + 192), v3, (long long **)buf);
  uint64_t v8 = (os_unfair_lock_s *)v6[7];
  unint64_t v7 = (std::__shared_weak_count *)v6[8];
  if (v7) {
    atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v8)
  {
    uint64_t v13 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = *(void *)(a1 + 72);
      if (*(char *)(a1 + 71) >= 0) {
        long long v15 = v3;
      }
      else {
        long long v15 = *(void ***)(a1 + 48);
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v15;
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v14;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v20 = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I CCXpcServer has no assertion named '%s'; dropping addition for client %p/%s",
        buf,
        0x20u);
    }
    goto LABEL_40;
  }
  xpc_object_t v9 = (_OWORD *)(a1 + 80);
  unint64_t v10 = *(void **)(v2 + 176);
  if (!v10)
  {
LABEL_12:
    xpc_object_t v11 = xpc_null_create();
    uint64_t v18 = v11;
    if (*(char *)(a1 + 103) < 0)
    {
      sub_10004FC84(buf, *(void **)(a1 + 80), *(void *)(a1 + 88));
    }
    else
    {
      *(_OWORD *)long long buf = *v9;
      *(void *)&uint8_t buf[16] = *(void *)(a1 + 96);
    }
    uint64_t v16 = v5;
    uint64_t v17 = v4;
    if (v4) {
      atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100DD33B8(v8, &v18, (long long *)buf, &v16);
    if (v4) {
      sub_10004D2C8(v4);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_39;
  }
  xpc_object_t v11 = *(xpc_object_t *)(a1 + 72);
  while (1)
  {
    unint64_t v12 = v10[4];
    if ((unint64_t)v11 >= v12) {
      break;
    }
LABEL_11:
    unint64_t v10 = (void *)*v10;
    if (!v10) {
      goto LABEL_12;
    }
  }
  if (v12 < (unint64_t)v11)
  {
    ++v10;
    goto LABEL_11;
  }
  uint64_t v18 = *(void **)(a1 + 72);
  if (v11)
  {
    xpc_retain(v11);
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v18 = v11;
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10004FC84(buf, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)long long buf = *v9;
    *(void *)&uint8_t buf[16] = *(void *)(a1 + 96);
  }
  uint64_t v16 = v5;
  uint64_t v17 = v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100DD33B8(v8, &v18, (long long *)buf, &v16);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
LABEL_39:
  xpc_release(v11);
LABEL_40:
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_100C64D8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  xpc_release(v20);
  if (v19) {
    sub_10004D2C8(v19);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100C64E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
  }
  uint64_t v6 = *(void **)(a2 + 72);
  *(void *)(a1 + 72) = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    *(void *)(a1 + 72) = xpc_null_create();
  }
  xpc_object_t result = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    xpc_object_t result = sub_10004FC84(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)xpc_object_t result = v8;
  }
  uint64_t v9 = *(void *)(a2 + 112);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  *(void *)(a1 + 112) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C64F14(_Unwind_Exception *a1)
{
  sub_100C627D0(v3);
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  long long v5 = *(std::__shared_weak_count **)(v1 + 40);
  if (v5) {
    sub_10004D2C8(v5);
  }
  _Unwind_Resume(a1);
}

void sub_100C64F50(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_100C64FD0(long long *a1, void **a2, long long *a3, char a4)
{
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  sub_100034EDC(&v20);
  uint64_t v8 = v20;
  if (v20)
  {
    v12[0] = _NSConcreteStackBlock;
    v12[1] = 1174405120;
    void v12[2] = sub_100C6523C;
    void v12[3] = &unk_101A4AF08;
    uint64_t v9 = v21;
    void v12[4] = v20;
    uint64_t v13 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a1 + 23) < 0)
    {
      sub_10004FC84(&v14, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long v14 = *a1;
      uint64_t v15 = *((void *)a1 + 2);
    }
    unint64_t v10 = *a2;
    xpc_object_t object = v10;
    if (v10) {
      xpc_retain(v10);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    if (*((char *)a3 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
    }
    else
    {
      long long __p = *a3;
      uint64_t v18 = *((void *)a3 + 2);
    }
    char v19 = a4;
    uint64_t v24 = 0;
    __int16 v25 = 0;
    sub_10003E168(&v24, (void *)(v8 + 8));
    xpc_object_t v11 = *(NSObject **)(v8 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_100058EBC;
    block[3] = &unk_101A4B208;
    block[5] = v24;
    std::string v23 = v25;
    if (v25) {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    block[4] = v12;
    dispatch_async(v11, block);
    if (v23) {
      sub_10004D2C8(v23);
    }
    if (v25) {
      sub_10004D2C8(v25);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete((void *)__p);
    }
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)v14);
    }
    if (v13) {
      sub_10004D2C8(v13);
    }
  }
  else
  {
    uint64_t v9 = v21;
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100C651E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t object)
{
  xpc_release(object);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
  _Unwind_Resume(a1);
}

void sub_100C6523C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 71) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a1 + 48), *(void *)(a1 + 56));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 48);
    uint64_t v12 = *(void *)(a1 + 64);
  }
  xpc_object_t v3 = *(xpc_object_t *)(a1 + 72);
  if (v3) {
    xpc_retain(*(xpc_object_t *)(a1 + 72));
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10004FC84(v9, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)(a1 + 80);
    uint64_t v10 = *(void *)(a1 + 96);
  }
  int v4 = *(unsigned __int8 *)(a1 + 104);
  __p[0] = __dst;
  long long v5 = sub_100C6956C((uint64_t **)(v2 + 192), __dst, (long long **)__p);
  unint64_t v7 = (os_unfair_lock_s *)v5[7];
  uint64_t v6 = (std::__shared_weak_count *)v5[8];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v7)
  {
    uint64_t v15 = v3;
    if (v3)
    {
      xpc_retain(v3);
      xpc_object_t v8 = v3;
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      uint64_t v15 = v8;
    }
    if (SHIBYTE(v10) < 0)
    {
      sub_10004FC84(__p, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v9;
      uint64_t v14 = v10;
    }
    sub_100DD30D8(v7, &v15, (long long *)__p, v4 != 0);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    xpc_release(v8);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
  xpc_release(v3);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100C653D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  xpc_release(v30);
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  xpc_release(v28);
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C65458(long long *a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100034EDC(&v11);
  uint64_t v2 = v11;
  if (v11)
  {
    v6[0] = _NSConcreteStackBlock;
    v6[1] = 1174405120;
    _DWORD v6[2] = sub_100C65708;
    void v6[3] = &unk_101A4AF38;
    xpc_object_t v3 = v12;
    v6[4] = v11;
    unint64_t v7 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*((char *)a1 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a1, *((void *)a1 + 1));
    }
    else
    {
      long long __p = *a1;
      uint64_t v9 = *((void *)a1 + 2);
    }
    uint64_t v10 = v6;
    uint64_t v4 = sub_100C65594(v2 + 8, (uint64_t)&v10);
    if (SHIBYTE(v9) < 0) {
      operator delete((void *)__p);
    }
    if (v7) {
      sub_10004D2C8(v7);
    }
  }
  else
  {
    uint64_t v4 = 0;
    xpc_object_t v3 = v12;
  }
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v4;
}

void sub_100C65570(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C65594(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 24))
  {
    if (dispatch_workloop_is_current()) {
      return (*(uint64_t (**)(void))(*(void *)a2 + 16))();
    }
    BOOL v5 = *(void *)(a1 + 24) == 0;
  }
  else
  {
    BOOL v5 = 1;
  }
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_100C696CC;
  void v7[3] = &unk_101A4B528;
  v7[4] = a1;
  void v7[5] = a2;
  xpc_object_t v8 = v7;
  uint64_t v6 = *(NSObject **)(a1 + 16);
  char v14 = 0;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  if (v5)
  {
    uint64_t v10 = sub_10005A430;
    uint64_t v11 = &unk_101A4B548;
    uint64_t v12 = &v14;
    uint64_t v13 = &v8;
    dispatch_sync(v6, block);
  }
  else
  {
    uint64_t v10 = sub_10005B194;
    uint64_t v11 = &unk_101A4B568;
    uint64_t v12 = &v14;
    uint64_t v13 = &v8;
    dispatch_async_and_wait(v6, block);
  }
  return v14 != 0;
}

uint64_t sub_100C65708(uint64_t a1)
{
  uint64_t v1 = (uint64_t **)(*(void *)(a1 + 32) + 192);
  v7[0] = (long long *)(a1 + 48);
  uint64_t v2 = sub_100C6956C(v1, (void **)(a1 + 48), v7);
  uint64_t v3 = v2[7];
  uint64_t v4 = (std::__shared_weak_count *)v2[8];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v3)
  {
    uint64_t v5 = 0;
    if (!v4) {
      return v5;
    }
    goto LABEL_5;
  }
  v7[0] = (long long *)_NSConcreteStackBlock;
  v7[1] = (long long *)0x40000000;
  void v7[2] = (long long *)sub_100DD3AE4;
  void v7[3] = (long long *)&unk_101A5B540;
  v7[4] = (long long *)v3;
  xpc_object_t v8 = v7;
  uint64_t v5 = sub_100DD3A94((os_unfair_lock_s *)(v3 + 8), (uint64_t)&v8) ^ 1;
  if (v4) {
LABEL_5:
  }
    sub_10004D2C8(v4);
  return v5;
}

unsigned char *sub_100C657D8(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 40);
  a1[4] = *(void *)(a2 + 32);
  a1[5] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t result = a1 + 6;
  if (*(char *)(a2 + 71) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v5 = *(_OWORD *)(a2 + 48);
  a1[8] = *(void *)(a2 + 64);
  *(_OWORD *)xpc_object_t result = v5;
  return result;
}

void sub_100C65840(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 40);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C65858(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void sub_100C658AC(long long *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v19 = 0;
  uint64_t v20 = &v19;
  uint64_t v21 = 0x4002000000;
  uint64_t v22 = sub_100C65B38;
  std::string v23 = sub_100C65B5C;
  memset(v24, 0, sizeof(v24));
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_100034EDC(&v17);
  uint64_t v4 = v17;
  if (!v17) {
    goto LABEL_19;
  }
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  uint64_t v9 = sub_100C65B88;
  uint64_t v10 = &unk_101A4AF70;
  uint64_t v12 = v17;
  uint64_t v13 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (*((char *)a1 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a1, *((void *)a1 + 1));
  }
  else
  {
    long long __p = *a1;
    uint64_t v15 = *((void *)a1 + 2);
  }
  uint64_t v11 = &v19;
  uint64_t v16 = v8;
  if (!*(void *)(v4 + 32))
  {
    BOOL v5 = 1;
    goto LABEL_12;
  }
  if ((dispatch_workloop_is_current() & 1) == 0)
  {
    BOOL v5 = *(void *)(v4 + 32) == 0;
LABEL_12:
    block[0] = _NSConcreteStackBlock;
    block[1] = (void **)0x40000000;
    void block[2] = (void **)sub_100C696E0;
    block[3] = (void **)&unk_101A4B588;
    block[4] = (void **)(v4 + 8);
    block[5] = (void **)&v16;
    uint64_t v6 = *(NSObject **)(v4 + 24);
    if (v5) {
      dispatch_sync(v6, block);
    }
    else {
      dispatch_async_and_wait(v6, block);
    }
    goto LABEL_15;
  }
  v9((uint64_t)v8);
LABEL_15:
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
LABEL_19:
  unint64_t v7 = v20;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  sub_1000302C0((char *)a2, (long long *)v7[5], (long long *)v7[6], 0xAAAAAAAAAAAAAAABLL * ((v7[6] - v7[5]) >> 3));
  if (v18) {
    sub_10004D2C8(v18);
  }
  _Block_object_dispose(&v19, 8);
  block[0] = (void **)v24;
  sub_100047F64(block);
}

void sub_100C65AE8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, ...)
{
  va_start(va, a15);
  if (a9) {
    sub_10004D2C8(a9);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  _Block_object_dispose(va, 8);
  *(void *)(v17 - 112) = v16;
  sub_100047F64((void ***)(v17 - 112));
  _Unwind_Resume(a1);
}

__n128 sub_100C65B38(void *a1, uint64_t a2)
{
  a1[5] = 0;
  a1[6] = 0;
  a1[7] = 0;
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 5) = result;
  a1[7] = *(void *)(a2 + 56);
  *(void *)(a2 + 4sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  return result;
}

void sub_100C65B5C(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 40);
  sub_100047F64(&v1);
}

void sub_100C65B88(uint64_t a1)
{
  uint64_t v2 = (uint64_t **)(*(void *)(a1 + 40) + 192);
  v9[0] = (long long *)(a1 + 56);
  uint64_t v3 = sub_100C6956C(v2, (void **)(a1 + 56), v9);
  uint64_t v4 = v3[7];
  BOOL v5 = (std::__shared_weak_count *)v3[8];
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v4)
  {
    v9[0] = (long long *)_NSConcreteStackBlock;
    v9[1] = (long long *)0x40000000;
    void v9[2] = (long long *)sub_100DD3B5C;
    void v9[3] = (long long *)&unk_101A5B560;
    v9[4] = (long long *)v4;
    uint64_t v10 = v9;
    sub_100DD3AF8((os_unfair_lock_s *)(v4 + 8), (uint64_t)&v10);
    uint64_t v6 = *(void *)(*(void *)(a1 + 32) + 8);
    sub_10005CBB4((uint64_t *)(v6 + 40));
    *(_OWORD *)(v6 + 4sub_10023C164((uint64_t)&a9, 0) = v7;
    *(void *)(v6 + 56) = v8;
    uint64_t v8 = 0;
    long long v7 = 0uLL;
    v9[0] = &v7;
    sub_100047F64((void ***)v9);
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
}

unsigned char *sub_100C65C88(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  __n128 result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)__n128 result = v5;
  return result;
}

void sub_100C65CF0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C65D08(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void sub_100C65D5C(uint64_t *a1@<X0>, NSObject **a2@<X1>, void **a3@<X2>, void *a4@<X8>)
{
  uint64_t v29 = 0;
  char v30 = &v29;
  uint64_t v31 = 0x3802000000;
  unint64_t v32 = sub_100C66080;
  uint64_t v34 = 0;
  __int16 v35 = 0;
  uint64_t v33 = sub_100C66090;
  uint64_t v27 = 0;
  unint64_t v28 = 0;
  sub_100034EDC(&v27);
  uint64_t v8 = v27;
  if (!v27)
  {
    syslog(3, "But XPC Server object is not valid yet to register");
    goto LABEL_28;
  }
  uint64_t v9 = *(NSObject **)(v27 + 40);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = *a3;
    if (*((char *)a1 + 23) >= 0) {
      uint64_t v11 = a1;
    }
    else {
      uint64_t v11 = (uint64_t *)*a1;
    }
    *(_DWORD *)long long buf = 134218242;
    *(void *)&uint8_t buf[4] = v10;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v11;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I XPC Server: Registering assertion callback %p for assertion %s", buf, 0x16u);
  }
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1174405120;
  uint64_t v18 = sub_100C660A0;
  uint64_t v19 = &unk_101A4AFA8;
  uint64_t v21 = v8;
  uint64_t v22 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v20 = &v29;
  uint64_t v12 = *a2;
  std::string v23 = a1;
  dispatch_object_t object = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  uint64_t v13 = *a3;
  if (*a3) {
    uint64_t v13 = _Block_copy(v13);
  }
  aBlock = v13;
  uint64_t v26 = v17;
  if (!*(void *)(v8 + 32))
  {
    BOOL v14 = 1;
    goto LABEL_19;
  }
  if ((dispatch_workloop_is_current() & 1) == 0)
  {
    BOOL v14 = *(void *)(v8 + 32) == 0;
LABEL_19:
    *(void *)long long buf = _NSConcreteStackBlock;
    *(void *)&uint8_t buf[8] = 0x40000000;
    *(void *)&uint8_t buf[16] = sub_100C696E0;
    __int16 v37 = &unk_101A4B588;
    uint64_t v38 = v8 + 8;
    uint64_t v39 = &v26;
    uint64_t v15 = *(NSObject **)(v8 + 24);
    if (v14) {
      dispatch_sync(v15, buf);
    }
    else {
      dispatch_async_and_wait(v15, buf);
    }
    goto LABEL_22;
  }
  v18(v17);
LABEL_22:
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
LABEL_28:
  uint64_t v16 = v30[6];
  *a4 = v30[5];
  a4[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
  if (v28) {
    sub_10004D2C8(v28);
  }
  _Block_object_dispose(&v29, 8);
  if (v35) {
    sub_10004D2C8(v35);
  }
}

void sub_100C66030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100C66080(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)(a2 + 40);
  *(__n128 *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = result;
  *(void *)(a2 + 4sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a2 + 48) = 0;
  return result;
}

void sub_100C66090(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C660A0(void *a1)
{
  uint64_t v2 = (uint64_t **)(a1[5] + 192);
  *(void *)&long long v13 = a1[7];
  uint64_t v3 = sub_100C6956C(v2, (void **)v13, (long long **)&v13);
  long long v5 = (os_unfair_lock_s *)v3[7];
  uint64_t v4 = (std::__shared_weak_count *)v3[8];
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v5)
  {
    uint64_t v6 = a1[8];
    uint64_t v12 = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    long long v7 = (const void *)a1[9];
    if (v7) {
      uint64_t v8 = _Block_copy(v7);
    }
    else {
      uint64_t v8 = 0;
    }
    uint64_t v11 = v8;
    sub_100DD3C40(v5, &v12, &v11, &v13);
    uint64_t v9 = *(void *)(a1[4] + 8);
    uint64_t v10 = *(std::__shared_weak_count **)(v9 + 48);
    *(_OWORD *)(v9 + 4sub_10023C164((uint64_t)&a9, 0) = v13;
    if (v10) {
      sub_10004D2C8(v10);
    }
    if (v8) {
      _Block_release(v8);
    }
    if (v6) {
      dispatch_release(v6);
    }
  }
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void *sub_100C661B8(void *a1, void *a2)
{
  uint64_t v4 = a2[6];
  a1[5] = a2[5];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = a2[8];
  a1[8] = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  __n128 result = (void *)a2[9];
  if (result) {
    __n128 result = _Block_copy(result);
  }
  a1[9] = result;
  return result;
}

void sub_100C66218(void *a1)
{
  uint64_t v2 = (const void *)a1[9];
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = a1[8];
  if (v3) {
    dispatch_release(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_100C66278(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  sub_100034EDC(&v9);
  if (xpc_get_type(*a1) != (xpc_type_t)&_xpc_type_connection)
  {
    *(unsigned char *)(a2 + 23) = 9;
    *(_WORD *)(a2 + 8) = 41;
    uint64_t v4 = "(nullptr)";
LABEL_3:
    *(void *)a2 = *(void *)v4;
    goto LABEL_4;
  }
  uint64_t v5 = v9;
  if (!v9)
  {
    *(unsigned char *)(a2 + 23) = 9;
    *(_WORD *)(a2 + 8) = 41;
    uint64_t v4 = "(unknown)";
    goto LABEL_3;
  }
  v8[0] = &v9;
  v8[1] = a1;
  void v8[2] = a2;
  if (!*(void *)(v9 + 32))
  {
    BOOL v6 = 1;
    goto LABEL_14;
  }
  if ((dispatch_workloop_is_current() & 1) == 0)
  {
    BOOL v6 = *(void *)(v5 + 32) == 0;
LABEL_14:
    block[0] = _NSConcreteStackBlock;
    block[1] = 0x40000000;
    void block[2] = sub_100C69A64;
    block[3] = &unk_101A4B5A8;
    block[4] = v5 + 8;
    block[5] = v8;
    long long v7 = *(NSObject **)(v5 + 24);
    if (v6) {
      dispatch_sync(v7, block);
    }
    else {
      dispatch_async_and_wait(v7, block);
    }
    goto LABEL_4;
  }
  sub_100C696F4();
LABEL_4:
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_100C663D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C663EC(xpc_object_t *a1@<X0>, uint64_t a2@<X8>)
{
  xpc_connection_t remote_connection = xpc_dictionary_get_remote_connection(*a1);
  xpc_object_t object = remote_connection;
  if (remote_connection) {
    xpc_retain(remote_connection);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100C66278(&object, a2);
  xpc_release(object);
}

void sub_100C6644C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

void sub_100C66468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  xpc_object_t v58 = 0;
  xpc_object_t v5 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v6 = v5;
  if (v5)
  {
    xpc_object_t v58 = v5;
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v58 = v6;
    if (!v6)
    {
      xpc_object_t v7 = xpc_null_create();
      xpc_object_t v6 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v6);
    goto LABEL_9;
  }
  xpc_object_t v7 = xpc_null_create();
LABEL_8:
  xpc_object_t v58 = v7;
LABEL_9:
  xpc_release(v6);
  xpc_object_t v56 = xpc_BOOL_create(1);
  if (!v56) {
    xpc_object_t v56 = xpc_null_create();
  }
  *(void *)&long long buf = &v58;
  *((void *)&buf + 1) = "kClientWatchdogPing";
  sub_100035E70((uint64_t)&buf, &v56, &v57);
  xpc_release(v57);
  xpc_object_t v57 = 0;
  xpc_release(v56);
  xpc_object_t v56 = 0;
  uint64_t v8 = (std::__shared_weak_count *)operator new(0x30uLL);
  v8->__shared_owners_ = 0;
  v8->__shared_weak_owners_ = 0;
  v8->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B5D8;
  v8[1].__vftable = *(std::__shared_weak_count_vtbl **)a3;
  __int16 v37 = (xpc_object_t *)&v8[1].__vftable;
  xpc_object_t v9 = xpc_null_create();
  *(_OWORD *)&v8[1].__shared_owners_ = *(_OWORD *)(a3 + 8);
  *(void *)a3 = v9;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  xpc_object_t v10 = xpc_array_create(0, 0);
  if (v10 || (xpc_object_t v10 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v10 = 0;
  }
  xpc_release(v10);
  xpc_object_t v12 = xpc_null_create();
  xpc_object_t v13 = *v37;
  xpc_object_t *v37 = v11;
  xpc_release(v13);
  xpc_release(v12);
  sub_10003E168(&buf, (void *)(a1 + 8));
  BOOL v14 = (std::__shared_weak_count *)*((void *)&buf + 1);
  uint64_t v36 = buf;
  if (*((void *)&buf + 1))
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 16), 1uLL, memory_order_relaxed);
    sub_10004D2C8(v14);
  }
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v54 = 0;
  uint64_t v55 = 0;
  *(void *)&long long buf = dispatch_group_create();
  sub_100C3730C((NSObject **)&buf, &v54);
  if ((void)buf) {
    dispatch_release((dispatch_object_t)buf);
  }
  uint64_t v15 = *(void *)(a1 + 168);
  if (v15 == a1 + 176)
  {
    uint64_t v33 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 134217984;
      *(void *)((char *)&buf + 4) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I CT Client Ping: sent %zd pings", (uint8_t *)&buf, 0xCu);
    }
    Registry::getTimerService((uint64_t *)&buf, *(Registry **)(a1 + 240));
    uint64_t v34 = buf;
    sub_100058DB0(__p, "CCXpcServer Client Ping");
    __int16 v35 = *(NSObject **)(a1 + 24);
    dispatch_object_t v40 = v35;
    if (v35) {
      dispatch_retain(v35);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120;
    aBlock[2] = sub_100C673B4;
    aBlock[3] = &unk_101A4B038;
    aBlock[4] = a1;
    aBlock[5] = v54;
    void aBlock[6] = v55;
    if (v55) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v55 + 8), 1uLL, memory_order_relaxed);
    }
    aBlock[7] = v8 + 1;
    aBlock[8] = v8;
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v39 = _Block_copy(aBlock);
    sub_100118A44(v34, (uint64_t)__p, 0, 15000000, &v40, &v39);
    if (v59) {
      operator new();
    }
    std::string::size_type v59 = 0;
    if (v39) {
      _Block_release(v39);
    }
    if (v40) {
      dispatch_release(v40);
    }
    if (v42 < 0) {
      operator delete(__p[0]);
    }
    if (*((void *)&buf + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
    }
    *(void *)&long long buf = a1;
    *((void *)&buf + 1) = v36;
    *(void *)&long long v63 = v14;
    if (v14) {
      atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    *((void *)&v63 + 1) = v8 + 1;
    *(void *)&long long v64 = v8;
    atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    *((void *)&v64 + 1) = 0;
    uint64_t v65 = 0;
    operator new();
  }
  xpc_object_t value = 0;
  xpc_object_t v16 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v17 = v16;
  if (v16)
  {
    xpc_object_t value = v16;
  }
  else
  {
    xpc_object_t v17 = xpc_null_create();
    xpc_object_t value = v17;
    if (!v17)
    {
      xpc_object_t v18 = xpc_null_create();
      xpc_object_t v17 = 0;
      goto LABEL_29;
    }
  }
  if (xpc_get_type(v17) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v17);
    goto LABEL_30;
  }
  xpc_object_t v18 = xpc_null_create();
LABEL_29:
  xpc_object_t value = v18;
LABEL_30:
  xpc_release(v17);
  if (*(char *)(v15 + 63) < 0) {
    uint64_t v19 = *(const char **)(v15 + 40);
  }
  else {
    uint64_t v19 = (const char *)(v15 + 40);
  }
  xpc_object_t v51 = xpc_string_create(v19);
  if (!v51) {
    xpc_object_t v51 = xpc_null_create();
  }
  *(void *)&long long buf = &value;
  *((void *)&buf + 1) = "name";
  sub_100035E70((uint64_t)&buf, &v51, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v51);
  xpc_object_t v51 = 0;
  xpc_object_t v49 = xpc_int64_create(**(int **)(v15 + 64));
  if (!v49) {
    xpc_object_t v49 = xpc_null_create();
  }
  *(void *)&long long buf = &value;
  *((void *)&buf + 1) = "pid";
  sub_100035E70((uint64_t)&buf, &v49, &v50);
  xpc_release(v50);
  xpc_object_t v50 = 0;
  xpc_release(v49);
  xpc_object_t v49 = 0;
  uint64_t v20 = *(void *)(v15 + 64);
  uint64_t v21 = (const char *)(v20 + 8);
  if (*(char *)(v20 + 31) < 0) {
    uint64_t v21 = *(const char **)v21;
  }
  xpc_object_t v47 = xpc_string_create(v21);
  if (!v47) {
    xpc_object_t v47 = xpc_null_create();
  }
  *(void *)&long long buf = &value;
  *((void *)&buf + 1) = "procname";
  sub_100035E70((uint64_t)&buf, &v47, &v48);
  xpc_release(v48);
  xpc_object_t v48 = 0;
  xpc_release(v47);
  xpc_object_t v47 = 0;
  xpc_object_t v45 = xpc_string_create("timeout");
  if (!v45) {
    xpc_object_t v45 = xpc_null_create();
  }
  *(void *)&long long buf = &value;
  *((void *)&buf + 1) = "context";
  sub_100035E70((uint64_t)&buf, &v45, &v46);
  xpc_release(v46);
  xpc_object_t v46 = 0;
  xpc_release(v45);
  xpc_object_t v45 = 0;
  xpc_array_append_value(*v37, value);
  uint64_t v22 = v54;
  uint64_t v23 = *(void *)(v15 + 64);
  if (*(char *)(v23 + 31) >= 0) {
    size_t v24 = *(unsigned __int8 *)(v23 + 31);
  }
  else {
    size_t v24 = *(void *)(v23 + 16);
  }
  dispatch_object_t v44 = 0;
  memset(&v43, 0, sizeof(v43));
  sub_1000C140C((uint64_t)&v43, v24 + 1);
  if ((v43.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    __int16 v25 = &v43;
  }
  else {
    __int16 v25 = (std::string *)v43.__r_.__value_.__r.__words[0];
  }
  if (v24)
  {
    if (*(char *)(v23 + 31) >= 0) {
      uint64_t v26 = (const void *)(v23 + 8);
    }
    else {
      uint64_t v26 = *(const void **)(v23 + 8);
    }
    memmove(v25, v26, v24);
  }
  *(_WORD *)((char *)&v25->__r_.__value_.__l.__data_ + v24) = 45;
  int v27 = *(char *)(v15 + 63);
  if (v27 >= 0) {
    unint64_t v28 = (const std::string::value_type *)(v15 + 40);
  }
  else {
    unint64_t v28 = *(const std::string::value_type **)(v15 + 40);
  }
  if (v27 >= 0) {
    std::string::size_type v29 = *(unsigned __int8 *)(v15 + 63);
  }
  else {
    std::string::size_type v29 = *(void *)(v15 + 48);
  }
  char v30 = std::string::append(&v43, v28, v29);
  *(void *)((char *)v66 + 7) = *(std::string::size_type *)((char *)&v30->__r_.__value_.__r.__words[1] + 7);
  std::string::size_type v31 = v30->__r_.__value_.__r.__words[0];
  v66[0] = v30->__r_.__value_.__l.__size_;
  char v32 = HIBYTE(v30->__r_.__value_.__r.__words[2]);
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v59 = v31;
  *(void *)uint64_t v60 = v66[0];
  *(void *)&v60[7] = *(void *)((char *)v66 + 7);
  char v61 = v32;
  *(void *)((char *)v66 + 7) = 0;
  v66[0] = 0;
  long long buf = 0u;
  long long v63 = 0u;
  long long v64 = 0u;
  sub_100C30F80(v22, (uint64_t)&v59, (uint64_t *)&buf, &v44);
}

void sub_100C66E48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *aBlock,dispatch_object_t object,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,dispatch_group_t group,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,std::__shared_weak_count *a41,xpc_object_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,dispatch_group_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,xpc_object_t a58)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100C670E0(void *a1, xpc_object_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3)
  {
    xpc_object_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      xpc_object_t v6 = v5;
      if (!a1[5]) {
        goto LABEL_21;
      }
      xpc_object_t v7 = (std::__shared_weak_count *)a1[8];
      if (!v7) {
        goto LABEL_21;
      }
      uint64_t v8 = std::__shared_weak_count::lock(v7);
      if (!v8) {
        goto LABEL_21;
      }
      xpc_object_t v9 = v8;
      if (!a1[7])
      {
LABEL_20:
        sub_10004D2C8(v9);
LABEL_21:
        sub_10004D2C8(v6);
        return;
      }
      if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_error)
      {
        xpc_object_t object = xpc_string_create("(disappeared before reply)");
        if (!object) {
          xpc_object_t object = xpc_null_create();
        }
        BOOL v14 = (xpc_object_t *)(a1 + 9);
        uint64_t v15 = "context";
        sub_100035E70((uint64_t)&v14, &object, &v17);
        xpc_release(v17);
        xpc_object_t v17 = 0;
        xpc_release(object);
        xpc_object_t object = 0;
        goto LABEL_20;
      }
      if (a2)
      {
        xpc_retain(a2);
        xpc_object_t v13 = a2;
      }
      else
      {
        a2 = xpc_null_create();
        xpc_object_t v13 = a2;
        if (!a2)
        {
          xpc_object_t v10 = xpc_null_create();
          a2 = 0;
          goto LABEL_18;
        }
      }
      if (xpc_get_type(a2) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(a2);
LABEL_19:
        xpc_release(a2);
        BOOL v14 = &v13;
        uint64_t v15 = "context";
        v11[0] = a1 + 9;
        v11[1] = "context";
        sub_10022B448((uint64_t)v11, (uint64_t)&v14, &v12);
        xpc_release(v12);
        xpc_object_t v12 = 0;
        xpc_release(v13);
        goto LABEL_20;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_18:
      xpc_object_t v13 = v10;
      goto LABEL_19;
    }
  }
}

void sub_100C6728C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v2);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

xpc_object_t sub_100C672AC(void *a1, void *a2)
{
  uint64_t v4 = a2[4];
  a1[4] = v4;
  if (v4)
  {
    dispatch_retain(v4);
    xpc_object_t v5 = a1[4];
    if (v5) {
      dispatch_group_enter(v5);
    }
  }
  uint64_t v6 = a2[6];
  a1[5] = a2[5];
  a1[6] = v6;
  if (v6) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v6 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v7 = a2[8];
  a1[7] = a2[7];
  a1[8] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v8 = (void *)a2[9];
  a1[9] = v8;
  if (v8) {
    return xpc_retain(v8);
  }
  xpc_object_t result = xpc_null_create();
  a1[9] = result;
  return result;
}

void sub_100C6733C(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 72));
  *(void *)(a1 + 72) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (v4)
  {
    dispatch_group_leave(v4);
    xpc_object_t v5 = *(NSObject **)(a1 + 32);
    if (v5)
    {
      dispatch_release(v5);
    }
  }
}

void sub_100C673B4(uint64_t a1)
{
  xpc_object_t v18 = 0;
  unint64_t v19 = 0;
  xpc_object_t v17 = 0;
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v3 = *(uint64_t **)(v1 + 8);
  uint64_t v4 = *(uint64_t **)(v1 + 16);
  while (v3 != v4)
  {
    xpc_object_t v5 = (std::__shared_weak_count *)v3[1];
    if (v5)
    {
      uint64_t v6 = std::__shared_weak_count::lock(v5);
      if (v6)
      {
        uint64_t v7 = v6;
        uint64_t v8 = *v3;
        if (*v3)
        {
          xpc_object_t v9 = v18;
          if ((unint64_t)v18 >= v19)
          {
            xpc_object_t v11 = (std::string *)sub_10030E9EC((uint64_t *)&v17, (long long *)v8);
          }
          else
          {
            if (*(char *)(v8 + 23) < 0)
            {
              sub_10004FC84(v18, *(void **)v8, *(void *)(v8 + 8));
            }
            else
            {
              long long v10 = *(_OWORD *)v8;
              v18->__r_.__value_.__r.__words[2] = *(void *)(v8 + 16);
              *(_OWORD *)&v9->__r_.__value_.__l.__data_ = v10;
            }
            xpc_object_t v11 = v9 + 1;
          }
          xpc_object_t v18 = v11;
        }
        sub_10004D2C8(v7);
      }
    }
    v3 += 2;
  }
  xpc_object_t v12 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v14 = v17;
    xpc_object_t v13 = v18;
    sub_100062B40(v17, v18, ",", 1uLL, &__p);
    uint64_t v15 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &__p
        : (std::string *)__p.__r_.__value_.__r.__words[0];
    *(_DWORD *)long long buf = 134218242;
    unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v13 - (char *)v14) >> 3);
    __int16 v22 = 2080;
    uint64_t v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I CT Client Ping timed out, %zd clients missing still: %s", buf, 0x16u);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  __p.__r_.__value_.__r.__words[0] = (std::string::size_type)&v17;
  sub_100047F64((void ***)&__p);
}

void sub_100C67560(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, char a12)
{
  a9 = (void **)&a12;
  sub_100047F64(&a9);
  _Unwind_Resume(a1);
}

void *sub_100C67598(void *result, void *a2)
{
  uint64_t v2 = a2[6];
  result[5] = a2[5];
  result[6] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = a2[8];
  result[7] = a2[7];
  result[8] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C675CC(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void *sub_100C6761C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_100C67664(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_100C676C4(uint64_t a1)
{
  uint64_t v2 = *(void **)a1;
  if (v2)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_100C676F8()
{
}

void sub_100C67710(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = (char *)**a1;
  if (v2)
  {
    uint64_t v4 = (char *)v1[1];
    xpc_object_t v5 = **a1;
    if (v4 != v2)
    {
      do
      {
        uint64_t v7 = (const void *)*((void *)v4 - 1);
        v4 -= 8;
        uint64_t v6 = v7;
        if (v7) {
          _Block_release(v6);
        }
      }
      while (v4 != v2);
      xpc_object_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_100C67798(uint64_t a1)
{
  return sub_100C62630(a1, "kWhois", (unint64_t)sub_100034CF4, 0);
}

void sub_100C677B8(void **a1)
{
  uint64_t v1 = (void *)**a1;
  sub_100C625B8();
  uint64_t v2 = v1[5];
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134217984;
    uint64_t v9 = (qword_101B13EE8 - qword_101B13EE0) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Setting up CT server handlers: %zd to run", buf, 0xCu);
  }
  uint64_t v3 = (void (**)(void *))qword_101B13EE0;
  uint64_t v4 = qword_101B13EE8;
  while (v3 != (void (**)(void *))v4)
    (*v3++)(v1);
  xpc_object_t v5 = v1[5];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v1[17];
    uint64_t v7 = v1[20];
    *(_DWORD *)long long buf = 134218240;
    uint64_t v9 = v6;
    __int16 v10 = 2048;
    uint64_t v11 = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I CT server handlers installed: %zu handlers, %zu reply handlers", buf, 0x16u);
  }
  operator delete();
}

void sub_100C67918()
{
}

void sub_100C67944(void *a1)
{
  if (a1)
  {
    sub_100C67944(*a1);
    sub_100C67944(a1[1]);
    sub_100C67998((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100C67998(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 72);
  sub_100C67710(&v4);
  uint64_t v2 = *(void **)(a1 + 48);
  if (v2)
  {
    *(void *)(a1 + 56) = v2;
    operator delete(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
}

void sub_100C67A10()
{
}

void *sub_100C67A24()
{
  xpc_object_t result = operator new(0x10uLL);
  void *result = off_101A4B130;
  return result;
}

void sub_100C67A5C(uint64_t a1, void *a2)
{
  *a2 = off_101A4B130;
}

void sub_100C67A84(uint64_t a1, dispatch_workloop_t *a2)
{
}

uint64_t sub_100C67A90(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C67AD0()
{
}

void sub_100C67AE0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C67B18(uint64_t a1)
{
}

uint64_t sub_100C67B34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C67B78(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100C67BA4(ServiceManager::Service *this)
{
  *(void *)this = off_101A4B248;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100C67C00(ServiceManager::Service *this)
{
  *(void *)this = off_101A4B248;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100C67C70@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CCXpcServer");
}

unsigned char *sub_100C67C80@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  *uint64_t v2 = 2;
  xpc_object_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100C67CC0(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_release(v2);
  }
}

uint64_t sub_100C67D0C()
{
  return 0;
}

uint64_t sub_100C67D14()
{
  return 1;
}

uint64_t sub_100C67D1C()
{
  return 0;
}

void sub_100C67D28(uint64_t a1)
{
  uint64_t v1 = (void *)(*(void *)(a1 + 8) + 8);
  v2[0] = 0;
  v2[1] = 0;
  sub_10003E168(v2, v1);
  operator new();
}

void sub_100C67E04(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  dispatch_object_t object = 0;
  ServiceStage::holdOffStage((uint64_t *)&object, this);
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_10003E168(&v8, (void *)(v3 + 8));
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 1174405120;
  _DWORD v5[2] = sub_100C63390;
  v5[3] = &unk_101A4ACF0;
  v5[4] = v3;
  v5[5] = v8;
  uint64_t v6 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  dispatch_group_t group = object;
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(group);
  }
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  sub_10003E168(&v18, (void *)(v3 + 8));
  uint64_t v4 = *(NSObject **)(v3 + 24);
  block = _NSConcreteStackBlock;
  uint64_t v12 = 1174405120;
  xpc_object_t v13 = sub_100058EBC;
  BOOL v14 = &unk_101A4B208;
  uint64_t v16 = v18;
  xpc_object_t v17 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v15 = v5;
  dispatch_async(v4, &block);
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  block = _NSConcreteStackBlock;
  uint64_t v12 = 1174405120;
  xpc_object_t v13 = sub_100C63648;
  BOOL v14 = &unk_101A4AD50;
  uint64_t v15 = (void *)v3;
  uint64_t v16 = v8;
  xpc_object_t v17 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ServiceStage::scheduleAction();
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
  if (object)
  {
    dispatch_group_leave(object);
    if (object) {
      dispatch_release(object);
    }
  }
}

void sub_100C68030(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_group_t group, uint64_t a17, std::__shared_weak_count *a18, dispatch_group_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,std::__shared_weak_count *a26)
{
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (object)
  {
    dispatch_group_leave(object);
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C6809C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Starting", buf, 2u);
  }
  *(unsigned char *)(v2 + 112) = *(unsigned char *)a1;
  *(void *)long long buf = 0;
  uint64_t v5 = 0;
  sub_10003E168(buf, (void *)(v2 + 8));
  operator new();
}

void sub_100C684E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,std::__shared_weak_count *a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C685B0()
{
}

__n128 sub_100C685C4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A4B2C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C68618(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4B2C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C68650(void *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  uint64_t v4 = (char **)a1[1];
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  v4[1] = *v4;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v26, object, 0);
    xpc_release(object[0]);
    v24[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      v24[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(object, v24, count);
    xpc_release(v24[0]);
    for (uint64_t i = v27; i != object[1] || v26 != object[0]; uint64_t i = ++v27)
    {
      v24[0] = &v26;
      v24[1] = i;
      uint64_t v8 = v4[1];
      unint64_t v7 = (unint64_t)v4[2];
      if ((unint64_t)v8 >= v7)
      {
        __int16 v10 = *v4;
        uint64_t v11 = (v8 - *v4) >> 2;
        unint64_t v12 = v11 + 1;
        if ((unint64_t)(v11 + 1) >> 62) {
          sub_10006A748();
        }
        uint64_t v13 = v7 - (void)v10;
        if (v13 >> 1 > v12) {
          unint64_t v12 = v13 >> 1;
        }
        if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFFCLL) {
          unint64_t v14 = 0x3FFFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v14 = v12;
        }
        if (v14)
        {
          uint64_t v15 = (char *)sub_10005ECD8((uint64_t)(v4 + 2), v14);
          __int16 v10 = *v4;
          uint64_t v8 = v4[1];
        }
        else
        {
          uint64_t v15 = 0;
        }
        uint64_t v16 = &v15[4 * v11];
        *(_DWORD *)uint64_t v16 = 0;
        uint64_t v9 = v16 + 4;
        while (v8 != v10)
        {
          int v17 = *((_DWORD *)v8 - 1);
          v8 -= 4;
          *((_DWORD *)v16 - 1) = v17;
          v16 -= 4;
        }
        *uint64_t v4 = v16;
        v4[1] = v9;
        void v4[2] = &v15[4 * v14];
        if (v10) {
          operator delete(v10);
        }
      }
      else
      {
        *(_DWORD *)uint64_t v8 = 0;
        uint64_t v9 = v8 + 4;
      }
      v4[1] = v9;
      sub_1000492E0((uint64_t)v24, &v23);
      *((_DWORD *)v9 - 1) = xpc::dyn_cast_or_default((xpc *)&v23, 0, v18);
      xpc_release(v23);
    }
    xpc_release(v26);
    xpc_release(v26);
  }
  xpc_release(v3);
  unint64_t v19 = (uint64_t (*)(void *))a1[3];
  uint64_t v20 = a1[4];
  unint64_t v21 = (void *)(a1[2] + (v20 >> 1));
  if (v20) {
    unint64_t v19 = *(uint64_t (**)(void *))(*v21 + v19);
  }

  return v19(v21);
}

void sub_100C688F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15)
{
  xpc_release(object);
  xpc_release(a15);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C68970(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C689B0()
{
}

void sub_100C689C0()
{
}

__n128 sub_100C689D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A4B348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C68A28(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4B348;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C68A60(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  xpc_object_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100C68AA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C68AE8()
{
}

void sub_100C68AF8()
{
}

__n128 sub_100C68B0C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A4B3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C68B60(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4B3C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C68B98(void *a1, xpc *this, uint64_t *a3)
{
  uint64_t v5 = *a3;
  uint64_t v4 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  uint64_t v6 = xpc::dyn_cast_or_default(this, 0, (BOOL)a3);
  unint64_t v7 = (void (*)(void *, uint64_t, void *))a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = (void *)(a1[1] + (v8 >> 1));
  if (v8) {
    unint64_t v7 = *(void (**)(void *, uint64_t, void *))(*v9 + v7);
  }
  v11[0] = xpc_null_create();
  v11[1] = v5;
  void v11[2] = v4;
  v7(v9, v6, v11);
  return sub_100C68CC8((uint64_t)v11);
}

void sub_100C68C50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C68CC8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C68C7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C68CBC()
{
}

uint64_t sub_100C68CC8(uint64_t a1)
{
  if (*(void *)(a1 + 8))
  {
    xpc_object_t v2 = *(xpc_object_t *)a1;
    if (*(void *)a1) {
      xpc_retain(*(xpc_object_t *)a1);
    }
    else {
      xpc_object_t v2 = xpc_null_create();
    }
    xpc_object_t v3 = *(void ***)(a1 + 8);
    uint64_t v4 = *v3;
    *xpc_object_t v3 = v2;
    xpc_release(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5) {
    sub_10004D2C8(v5);
  }
  xpc_release(*(xpc_object_t *)a1);
  *(void *)a1 = 0;
  return a1;
}

void sub_100C68D44(uint64_t a1)
{
}

void sub_100C68D4C(uint64_t **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v2 = **a1;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, *(Registry **)(v2 + 240));
  uint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)__p);
  if (v9)
  {
    uint64_t v11 = v9[3];
    __int16 v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      if (!v11) {
        goto LABEL_16;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  __int16 v10 = 0;
  char v12 = 1;
  if (!v11) {
    goto LABEL_16;
  }
LABEL_10:
  uint64_t v13 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v13;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_100058DB0(__p, "CCXpcServer");
  (*(void (**)(uint64_t, dispatch_object_t *, void **))(*(void *)v11 + 16))(v11, &object, __p);
  if (v15 < 0) {
    operator delete(__p[0]);
  }
  if (object) {
    dispatch_release(object);
  }
LABEL_16:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  operator delete();
}

void sub_100C68ECC(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t object)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (object) {
    dispatch_release(object);
  }
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  operator delete();
}

void sub_100C68F34(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B468;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C68F54(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B468;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C68FA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 55) < 0)
  {
    xpc_object_t v3 = *(void **)(a1 + 32);
    operator delete(v3);
  }
}

uint64_t sub_100C69024(uint64_t a1, long long *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v4 = 1;
    do
    {
      uint64_t v5 = (const void *)v2[4];
      size_t v6 = v2[5];
      long long v10 = *a2;
      if (sub_10004DDCC((uint64_t)&v10, v5, v6) != -1)
      {
        uint64_t v7 = *(const void **)a2;
        size_t v8 = *((void *)a2 + 1);
        long long v10 = *((_OWORD *)v2 + 2);
        if (sub_10004DDCC((uint64_t)&v10, v7, v8) != -1) {
          return v4;
        }
        ++v2;
      }
      uint64_t v2 = (void *)*v2;
    }
    while (v2);
  }
  return 0;
}

uint64_t *sub_100C690AC(uint64_t **a1, char **a2, __n128 *a3)
{
  memset(__p, 0, sizeof(__p));
  sub_100C69154((uint64_t)a1, a2, a3, (__n128 **)__p);
  uint64_t v8 = 0;
  uint64_t v4 = (uint64_t **)sub_100C691E0((uint64_t)a1, &v8, (long long *)__p[0] + 2);
  uint64_t v5 = *v4;
  if (*v4)
  {
    size_t v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    sub_100046C38(a1, v8, v4, (uint64_t *)__p[0]);
    return (uint64_t *)__p[0];
  }
  return v5;
}

void sub_100C69138(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100C69154@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, __n128 *a3@<X2>, __n128 **a4@<X8>)
{
  uint64_t v7 = (__n128 *)(a1 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (__n128 *)operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  sub_1000493DC((__n128 *)v8[2].n128_u64, *a2);
  __n128 result = *a3;
  void v8[3] = *a3;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_100C691C8(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t *sub_100C691E0(uint64_t a1, void *a2, long long *a3)
{
  uint64_t v5 = (uint64_t *)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v7 = v4;
        uint64_t v8 = (const void *)v4[4];
        size_t v9 = v4[5];
        long long v13 = *a3;
        if (sub_10004DDCC((uint64_t)&v13, v8, v9) != -1) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v7;
        uint64_t v5 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      long long v10 = *(const void **)a3;
      size_t v11 = *((void *)a3 + 1);
      long long v13 = *((_OWORD *)v7 + 2);
      if (sub_10004DDCC((uint64_t)&v13, v10, v11) != -1) {
        break;
      }
      uint64_t v5 = v7 + 1;
      uint64_t v4 = (uint64_t *)v7[1];
    }
    while (v4);
  }
  else
  {
    uint64_t v7 = (uint64_t *)(a1 + 8);
  }
LABEL_9:
  *a2 = v7;
  return v5;
}

uint64_t *sub_100C69288(uint64_t **a1, char **a2, __n128 *a3)
{
  memset(__p, 0, sizeof(__p));
  sub_100C69330((uint64_t)a1, a2, a3, (__n128 **)__p);
  uint64_t v8 = 0;
  uint64_t v4 = (uint64_t **)sub_100C691E0((uint64_t)a1, &v8, (long long *)__p[0] + 2);
  uint64_t v5 = *v4;
  if (*v4)
  {
    size_t v6 = __p[0];
    __p[0] = 0;
    if (v6) {
      operator delete(v6);
    }
  }
  else
  {
    sub_100046C38(a1, v8, v4, (uint64_t *)__p[0]);
    return (uint64_t *)__p[0];
  }
  return v5;
}

void sub_100C69314(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_100C69330@<Q0>(uint64_t a1@<X0>, char **a2@<X1>, __n128 *a3@<X2>, __n128 **a4@<X8>)
{
  uint64_t v7 = (__n128 *)(a1 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (__n128 *)operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  sub_1000493DC((__n128 *)v8[2].n128_u64, *a2);
  __n128 result = *a3;
  void v8[3] = *a3;
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_100C693A4(_Unwind_Exception *a1)
{
  void *v1 = 0;
  operator delete(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100C693BC(uint64_t a1)
{
  *(void *)a1 = off_101A4B4B8;
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 16));
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;
  return a1;
}

void sub_100C69444(uint64_t a1)
{
  *(void *)a1 = off_101A4B4B8;
  uint64_t v2 = *(void **)(a1 + 88);
  if (v2)
  {
    *(void *)(a1 + 96) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 16));
  xpc_release(*(xpc_object_t *)(a1 + 8));
  *(void *)(a1 + 8) = 0;

  operator delete();
}

uint64_t sub_100C694EC(uint64_t a1, void *a2)
{
  *a2 = off_101A4B4B8;
  return sub_10004F1F8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100C69518(uint64_t a1)
{
}

uint64_t sub_100C69520(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A4B518)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C69560()
{
  return &off_101A4B518;
}

uint64_t *sub_100C6956C(uint64_t **a1, void **a2, long long **a3)
{
  size_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  uint64_t v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  uint64_t v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      uint64_t v8 = (uint64_t **)v5;
      long long v10 = v5 + 4;
      if ((sub_100046FE8(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      uint64_t v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((sub_100046FE8(v10, a2) & 0x80) == 0) {
      break;
    }
    uint64_t v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  size_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    char v12 = *a3;
    uint64_t v19 = 0;
    long long v13 = (uint64_t *)operator new(0x48uLL);
    v18[0] = v13;
    v18[1] = v6;
    unint64_t v14 = v13 + 4;
    if (*((char *)v12 + 23) < 0)
    {
      sub_10004FC84(v14, *(void **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      void v13[6] = *((void *)v12 + 2);
      *(_OWORD *)unint64_t v14 = v15;
    }
    v13[7] = 0;
    v13[8] = 0;
    LOBYTE(v19) = 1;
    *long long v13 = 0;
    v13[1] = 0;
    void v13[2] = (uint64_t)v8;
    *uint64_t v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      long long v13 = *v7;
    }
    sub_100046C90(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    size_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    sub_1001FEBC4((uint64_t)v18);
  }
  return v11;
}

void sub_100C696B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1001FEBC4((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100C696CC(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void *sub_100C696E0(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

std::string *sub_100C696F4()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v1 = **(void **)v0;
  uint64_t v4 = *(void **)(v1 + 176);
  uint64_t v2 = (void *)(v1 + 176);
  xpc_object_t v3 = v4;
  uint64_t v5 = **(_xpc_connection_s ***)(v0 + 8);
  if (!v4) {
    goto LABEL_12;
  }
  size_t v6 = v2;
  do
  {
    unint64_t v7 = v3[4];
    BOOL v8 = v7 >= (unint64_t)v5;
    if (v7 >= (unint64_t)v5) {
      size_t v9 = v3;
    }
    else {
      size_t v9 = v3 + 1;
    }
    if (v8) {
      size_t v6 = v3;
    }
    xpc_object_t v3 = (void *)*v9;
  }
  while (*v9);
  if (v6 != v2 && (unint64_t)v5 >= v6[4])
  {
    unint64_t v21 = *(std::string **)(v0 + 16);
    return std::string::operator=(v21, (const std::string *)(v6 + 5));
  }
  else
  {
LABEL_12:
    pid_t pid = xpc_connection_get_pid(v5);
    uint64_t v37 = 0;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v28 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    *(_OWORD *)__int16 v25 = 0u;
    memset(v24, 0, sizeof(v24));
    sub_10004DE24((uint64_t)v24);
    sub_10004B96C(v24, (uint64_t)"(dead conn, pid=", 16);
    size_t v11 = (void *)std::ostream::operator<<();
    sub_10004B96C(v11, (uint64_t)"[", 1);
    char v12 = (void *)std::ostream::operator<<();
    long long v13 = sub_10004B96C(v12, (uint64_t)"] proc=[", 8);
    bzero(&buffer, 0x1000uLL);
    if (proc_pidpath(pid, &buffer, 0x1000u) <= 0) {
      p_long long buffer = "unknown";
    }
    else {
      p_long long buffer = (char *)&buffer;
    }
    sub_100058DB0(__p, p_buffer);
    if ((v23 & 0x80u) == 0) {
      long long v15 = __p;
    }
    else {
      long long v15 = (void **)__p[0];
    }
    if ((v23 & 0x80u) == 0) {
      uint64_t v16 = v23;
    }
    else {
      uint64_t v16 = (uint64_t)__p[1];
    }
    int v17 = sub_10004B96C(v13, (uint64_t)v15, v16);
    sub_10004B96C(v17, (uint64_t)"])", 2);
    if ((char)v23 < 0) {
      operator delete(__p[0]);
    }
    sub_10004BC98((uint64_t)v24 + 8, &buffer);
    uint64_t v18 = *(void *)(v0 + 16);
    if (*(char *)(v18 + 23) < 0) {
      operator delete(*(void **)v18);
    }
    long long v19 = buffer;
    *(void *)(v18 + 16) = v39;
    *(_OWORD *)uint64_t v18 = v19;
    if (SHIBYTE(v26) < 0) {
      operator delete(v25[1]);
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    return (std::string *)std::ios::~ios();
  }
}

void sub_100C69A28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

std::string *sub_100C69A64()
{
  return sub_100C696F4();
}

void sub_100C69A6C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B5D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C69A8C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B5D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100C69AE0(uint64_t a1)
{
  return sub_100C68CC8(a1 + 24);
}

void *sub_100C69AEC(void *result)
{
  uint64_t v1 = (void *)*result;
  unsigned char *result = 0;
  if (v1)
  {
    uint64_t v2 = (std::__shared_weak_count *)v1[6];
    if (v2) {
      sub_10004D2C8(v2);
    }
    xpc_object_t v3 = (std::__shared_weak_count *)v1[4];
    if (v3) {
      std::__shared_weak_count::__release_weak(v3);
    }
    uint64_t v4 = (std::__shared_weak_count *)v1[2];
    if (v4) {
      std::__shared_weak_count::__release_weak(v4);
    }
    operator delete();
  }
  return result;
}

void *sub_100C69B58(uint64_t *a1)
{
  char v12 = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2)
  {
    uint64_t v3 = *a1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!a1[1])
      {
LABEL_15:
        sub_10004D2C8(v5);
        return sub_100C69AEC(&v12);
      }
      size_t v6 = (std::__shared_weak_count *)a1[4];
      if (v6)
      {
        unint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7 && a1[3])
        {
          BOOL v8 = *(NSObject **)(v3 + 40);
          if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_13;
          }
          __int16 v14 = 0;
          size_t v9 = "#I CT Client Ping completed successfully";
          long long v10 = (uint8_t *)&v14;
          goto LABEL_12;
        }
      }
      else
      {
        unint64_t v7 = 0;
      }
      BOOL v8 = *(NSObject **)(v3 + 40);
      if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_13;
      }
      *(_WORD *)long long buf = 0;
      size_t v9 = "#I CT Client Ping completed, but the timer has already fired.";
      long long v10 = buf;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v9, v10, 2u);
LABEL_13:
      (*(void (**)(uint64_t))(*(void *)a1[5] + 16))(a1[5]);
      if (v7) {
        sub_10004D2C8(v7);
      }
      goto LABEL_15;
    }
  }
  return sub_100C69AEC(&v12);
}

void sub_100C69C7C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10004D2C8(v2);
  sub_100C69AEC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100C69CA4(uint64_t a1, uint64_t a2)
{
  if (a2) {
    operator delete();
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 8);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)a1)
      {
        size_t v6 = *(NSObject **)(*(void *)a1 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          unint64_t v7 = (void *)(a1 + 72);
          if (*(char *)(a1 + 95) < 0) {
            unint64_t v7 = (void *)*v7;
          }
          BOOL v8 = (void *)(a1 + 24);
          if (*(char *)(a1 + 47) < 0) {
            BOOL v8 = (void *)*v8;
          }
          int v9 = *(_DWORD *)(a1 + 16);
          long long v10 = (void *)(a1 + 48);
          if (*(char *)(a1 + 71) < 0) {
            long long v10 = (void *)*v10;
          }
          int v11 = 136315906;
          char v12 = v7;
          __int16 v13 = 2080;
          __int16 v14 = v8;
          __int16 v15 = 1024;
          int v16 = v9;
          __int16 v17 = 2080;
          uint64_t v18 = v10;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I >>> Launch requested by '%s' from process '%s' [%d : '%s'].", (uint8_t *)&v11, 0x26u);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100C69DDC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B628;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete((void *)this[4].__shared_owners_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete((void *)this[3].__shared_owners_);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete((void *)this[2].__shared_owners_);
  }
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }

  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100C69E68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A4B628;
  if (SHIBYTE(this[5].__vftable) < 0) {
    operator delete((void *)this[4].__shared_owners_);
  }
  if (SHIBYTE(this[4].__vftable) < 0) {
    operator delete((void *)this[3].__shared_owners_);
  }
  if (SHIBYTE(this[3].__vftable) < 0) {
    operator delete((void *)this[2].__shared_owners_);
  }
  shared_weak_owners = (std::__shared_weak_count *)this[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  std::__shared_weak_count::~__shared_weak_count(this);

  operator delete();
}

void sub_100C69F08(uint64_t a1)
{
  sub_100C69CA4(a1 + 32, *(void *)(a1 + 24));
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t sub_100C69F88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 32;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C69FCC()
{
  if ((byte_101B0A6D8 & 1) == 0)
  {
    byte_101B0A6D8 = 1;
    return __cxa_atexit((void (*)(void *))sub_1006C581C, &stru_101B0A688, (void *)&_mh_execute_header);
  }
  return result;
}

uint64_t sub_100C6A008()
{
  return sub_100C624B8((uint64_t)&unk_101B12A38, (uint64_t)sub_100C67798);
}

void sub_100C6A024()
{
}

void sub_100C6A0C0()
{
}

void sub_100C6A0E8(uint64_t a1)
{
  sub_1007F84D0(a1);

  operator delete();
}

void sub_100C6A120(void *a1)
{
  sub_1007F7F5C((uint64_t)a1);
  sub_10003E168(&buf, a1 + 1);
  uint64_t v2 = *(std::__shared_weak_count **)&buf_4[4];
  if (*(void *)&buf_4[4])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf_4[4] + 16), 1uLL, memory_order_relaxed);
    sub_10004D2C8(v2);
  }
  char v3 = sub_1007F89C4((uint64_t)a1);
  int v4 = sub_1007F82A8(1, v3);
  uint64_t v5 = a1[5];
  BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      int buf = 136315394;
      *(void *)buf_4 = "";
      *(_WORD *)&buf_4[8] = 2080;
      *(void *)&buf_4[10] = "";
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%sUsing both iCloud and IDS for Thumper settings sync!", (uint8_t *)&buf, 0x16u);
    }
    sub_100BA49A8();
  }
  if (v6)
  {
    int buf = 136315394;
    *(void *)buf_4 = "";
    *(_WORD *)&buf_4[8] = 2080;
    *(void *)&buf_4[10] = "";
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s%sUsing iCloud for Thumper sync!", (uint8_t *)&buf, 0x16u);
  }
  uint64_t v7 = a1[7];
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100830298();
}

void sub_100C6AE6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23)
{
  if (a14) {
    std::__shared_weak_count::__release_weak(a14);
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  if (a23) {
    std::__shared_weak_count::__release_weak(a23);
  }
  long long v27 = *(std::__shared_weak_count **)(v25 - 104);
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (v23) {
    std::__shared_weak_count::__release_weak(v23);
  }
  _Unwind_Resume(a1);
}

void sub_100C6B320(uint64_t a1, uint64_t **a2)
{
  char v3 = *(void **)(a1 + 32);
  int v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2) {
      int v5 = -1431655765 * ((unint64_t)((*a2)[1] - **a2) >> 3);
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v27) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sList of watches updated: %d device(s)", buf, 0x1Cu);
  }
  BOOL v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      uint64_t v18 = a2;
      do
      {
        int v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          long long v24 = 0uLL;
          uint64_t v25 = 0;
          ctu::cf::assign();
          *(_OWORD *)__int16 v22 = v24;
          uint64_t v23 = v25;
          long long v10 = (void **)v24;
          int v11 = SHIBYTE(v25);
          long long v24 = 0uLL;
          uint64_t v25 = 0;
          ctu::cf::assign();
          char v12 = v22;
          if (v11 < 0) {
            char v12 = v10;
          }
          *(_OWORD *)std::string __p = v24;
          uint64_t v21 = v25;
          __int16 v13 = (void **)v24;
          if (v25 >= 0) {
            __int16 v13 = __p;
          }
          __int16 v14 = "  --connected";
          if (!*(unsigned char *)(v7 + 16)) {
            __int16 v14 = "";
          }
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2080;
          long long v27 = v12;
          *(_WORD *)long long v28 = 2080;
          *(void *)&void v28[2] = v13;
          *(_WORD *)&v28[10] = 2080;
          *(void *)&v28[12] = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s%s   %s: %s%s", buf, 0x34u);
          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(v22[0]);
          }
        }
        v7 += 24;
      }
      while (v7 != v8);
      a2 = v18;
      BOOL v6 = *v18;
    }
  }
  __int16 v15 = a2[1];
  if (v15) {
    atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)v3[15];
  v3[14] = v6;
  v3[15] = v15;
  if (v16) {
    sub_10004D2C8(v16);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 0x40000000;
  _OWORD v19[2] = sub_100C6B6D0;
  v19[3] = &unk_101A4B6F8;
  v19[4] = v3;
  long long v24 = 0uLL;
  sub_10003E168(&v24, v3 + 1);
  __int16 v17 = v3[3];
  *(void *)int buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = sub_100C6DA28;
  long long v27 = (void **)&unk_101A4BA28;
  *(_OWORD *)&v28[8] = v24;
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)long long v28 = v19;
  dispatch_async(v17, buf);
  if (*(void *)&v28[16]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v28[16]);
  }
  if (*((void *)&v24 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_100C6B680(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C6B6D0(uint64_t a1)
{
}

void sub_100C6B6D8(uint64_t a1, uint64_t **a2)
{
  char v3 = *(void **)(a1 + 32);
  int v4 = v3[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if (*a2) {
      int v5 = -1431655765 * ((unint64_t)((*a2)[1] - **a2) >> 3);
    }
    else {
      int v5 = -1;
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = "";
    *(_WORD *)&unsigned char buf[22] = 1024;
    LODWORD(v27) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s%sList of iCloud devices updated: %d device(s)", buf, 0x1Cu);
  }
  BOOL v6 = *a2;
  if (*a2)
  {
    uint64_t v7 = *v6;
    uint64_t v8 = v6[1];
    if (*v6 != v8)
    {
      uint64_t v18 = a2;
      do
      {
        int v9 = v3[5];
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          long long v24 = 0uLL;
          uint64_t v25 = 0;
          ctu::cf::assign();
          *(_OWORD *)__int16 v22 = v24;
          uint64_t v23 = v25;
          long long v10 = (void **)v24;
          int v11 = SHIBYTE(v25);
          long long v24 = 0uLL;
          uint64_t v25 = 0;
          ctu::cf::assign();
          char v12 = v22;
          if (v11 < 0) {
            char v12 = v10;
          }
          *(_OWORD *)std::string __p = v24;
          uint64_t v21 = v25;
          __int16 v13 = (void **)v24;
          if (v25 >= 0) {
            __int16 v13 = __p;
          }
          __int16 v14 = "  --connected";
          if (!*(unsigned char *)(v7 + 16)) {
            __int16 v14 = "";
          }
          *(_DWORD *)int buf = 136316162;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2080;
          long long v27 = v12;
          *(_WORD *)long long v28 = 2080;
          *(void *)&void v28[2] = v13;
          *(_WORD *)&v28[10] = 2080;
          *(void *)&v28[12] = v14;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s%s   %s: %s%s", buf, 0x34u);
          if (SHIBYTE(v21) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v23) < 0) {
            operator delete(v22[0]);
          }
        }
        v7 += 24;
      }
      while (v7 != v8);
      a2 = v18;
      BOOL v6 = *v18;
    }
  }
  __int16 v15 = a2[1];
  if (v15) {
    atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
  }
  int v16 = (std::__shared_weak_count *)v3[17];
  uint8_t v3[16] = v6;
  v3[17] = v15;
  if (v16) {
    sub_10004D2C8(v16);
  }
  v19[0] = _NSConcreteStackBlock;
  v19[1] = 0x40000000;
  _OWORD v19[2] = sub_100C6BA88;
  v19[3] = &unk_101A4B738;
  v19[4] = v3;
  long long v24 = 0uLL;
  sub_10003E168(&v24, v3 + 1);
  __int16 v17 = v3[3];
  *(void *)int buf = _NSConcreteStackBlock;
  *(void *)&uint8_t buf[8] = 1174405120;
  *(void *)&uint8_t buf[16] = sub_100C6DA28;
  long long v27 = (void **)&unk_101A4BA28;
  *(_OWORD *)&v28[8] = v24;
  if (*((void *)&v24 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v24 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)long long v28 = v19;
  dispatch_async(v17, buf);
  if (*(void *)&v28[16]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v28[16]);
  }
  if (*((void *)&v24 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v24 + 1));
  }
}

void sub_100C6BA38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C6BA88(uint64_t a1)
{
}

BOOL sub_100C6BA90(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"secret.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BB0C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BB20(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"secret.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BB9C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BBB0(id a1, __CFString *a2, void *a3)
{
  return 0;
}

BOOL sub_100C6BBB8(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  BOOL v7 = *(void *)(a1 + 32) && !CFStringHasPrefix(a2, @"secret.") && CFStringHasPrefix(a2, @"message.") == 0;
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BC48(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BC5C(void *a1, const __CFString *a2, const void *a3)
{
  int v4 = (std::__shared_weak_count *)a1[6];
  if (!v4) {
    return 0;
  }
  uint64_t v7 = a1[4];
  uint64_t v8 = std::__shared_weak_count::lock(v4);
  if (!v8) {
    return 0;
  }
  int v9 = v8;
  if (a1[5])
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v16 = 0;
    sub_1007FCBD8(a2, __p);
    uint64_t v14 = 0;
    long long v12 = 0u;
    long long v13 = 0u;
    sub_1007FCD94(a2, v7, a3, (uint64_t)&v12);
    BOOL v10 = (_BYTE)v12 != 0;
    sub_100057D78((const void **)&v13 + 1);
    sub_100057D78((const void **)&v13);
    sub_1000577C4((const void **)&v12 + 1);
    if (SHIBYTE(v16) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    BOOL v10 = 0;
  }
  sub_10004D2C8(v9);
  return v10;
}

void sub_100C6BD6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v19);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BD98(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"message.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BE14(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BE28(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"message.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BEA4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BEB8(id a1, __CFString *a2, void *a3)
{
  return 0;
}

BOOL sub_100C6BEC0(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"secret.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BF3C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BF50(uint64_t a1, const __CFString *a2)
{
  char v3 = *(std::__shared_weak_count **)(a1 + 40);
  if (!v3) {
    return 0;
  }
  int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  BOOL v6 = v5;
  if (*(void *)(a1 + 32)) {
    BOOL v7 = CFStringHasPrefix(a2, @"message.") == 1;
  }
  else {
    BOOL v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100C6BFCC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100C6BFE0(uint64_t a1, CFStringRef theString2)
{
  uint64_t v2 = *(void **)(a1 + 112);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2[1];
  if (*v2 == v3) {
    return 0;
  }
  uint64_t v5 = *v2 + 24;
  do
  {
    BOOL v7 = CFEqual(*(CFStringRef *)(v5 - 24), theString2);
    BOOL result = v7;
    BOOL v7 = v7 || v5 == v3;
    v5 += 24;
  }
  while (!v7);
  return result;
}

BOOL sub_100C6C04C(uint64_t a1, CFStringRef theString2)
{
  uint64_t v2 = *(void **)(a1 + 128);
  if (!v2) {
    return 0;
  }
  uint64_t v3 = v2[1];
  if (*v2 == v3) {
    return 0;
  }
  uint64_t v5 = *v2 + 24;
  do
  {
    BOOL v7 = CFEqual(*(CFStringRef *)(v5 - 24), theString2);
    BOOL result = v7;
    BOOL v7 = v7 || v5 == v3;
    v5 += 24;
  }
  while (!v7);
  return result;
}

uint64_t sub_100C6C0B8(uint64_t a1)
{
  uint64_t result = sub_1007FADB8(a1);
  if (result) {
    return *(void *)(a1 + 112) && *(void *)(a1 + 128) != 0;
  }
  return result;
}

const void **sub_100C6C100(void *a1, CFStringRef theString1, uint64_t a3, const void *a4)
{
  if (CFStringCompare(theString1, @"requestIndividualSecret", 0))
  {
    BOOL v7 = a1[5];
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int buf = 136315394;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = "";
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#W %s%sMessage cmd is not recognized:", buf, 0x16u);
    }
    *(void *)int buf = off_101A4BAE8;
    *(void *)&uint8_t buf[8] = a1;
    xpc_object_t v49 = buf;
    logger::CFTypeRefLogger();
    return (const void **)sub_10012C330(buf);
  }
  else
  {
    xpc_object_t v47 = 0;
    if (a4)
    {
      CFTypeID v9 = CFGetTypeID(a4);
      if (v9 == CFDictionaryGetTypeID())
      {
        CFDictionaryRef Value = CFDictionaryGetValue((CFDictionaryRef)a4, @"account");
        int v11 = Value;
        if (Value)
        {
          CFTypeID v12 = CFGetTypeID(Value);
          if (v12 == CFStringGetTypeID()) {
            long long v13 = v11;
          }
          else {
            long long v13 = 0;
          }
        }
        else
        {
          long long v13 = 0;
        }
        *(void *)int buf = v13;
        sub_100013168(&v47, (CFTypeRef *)buf);
      }
    }
    uint64_t v14 = v47;
    if (v47) {
      __int16 v15 = sub_1000810B8;
    }
    else {
      __int16 v15 = 0;
    }
    if (!v15)
    {
      theDict[0] = 0;
      sub_1003A9CA0(buf);
      uint64_t v16 = *(void *)buf;
      sub_1007FD430(a1, a3, (const void **)&key);
      CFTypeRef v46 = sub_1003A9B04(v16, key, 1);
      sub_100084068(theDict, &v46);
      sub_1000558F4((const void **)&key);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (theDict[0]) {
        __int16 v17 = sub_100080778;
      }
      else {
        __int16 v17 = 0;
      }
      if (v17)
      {
        uint64_t v18 = CFDictionaryGetValue(theDict[0], @"account");
        long long v19 = v18;
        if (v18)
        {
          CFTypeID v20 = CFGetTypeID(v18);
          if (v20 == CFStringGetTypeID()) {
            uint64_t v21 = v19;
          }
          else {
            uint64_t v21 = 0;
          }
        }
        else
        {
          uint64_t v21 = 0;
        }
        *(void *)int buf = v21;
        sub_100013168(&v47, (CFTypeRef *)buf);
      }
      sub_100057D78((const void **)theDict);
      uint64_t v14 = v47;
    }
    if (v14) {
      __int16 v22 = sub_1000810B8;
    }
    else {
      __int16 v22 = 0;
    }
    if (v22)
    {
      memset(buf, 0, sizeof(buf));
      ctu::cf::assign();
      uint64_t v44 = *(void *)&buf[16];
      *(_OWORD *)CFDictionaryRef theDict = *(_OWORD *)buf;
      uint64_t v23 = (void *)a1[9];
      v38[0] = _NSConcreteStackBlock;
      v38[1] = 1174405120;
      uint64_t v39 = sub_100C6C710;
      dispatch_object_t v40 = &unk_101A4B978;
      int v24 = (char)buf[23];
      if ((char)buf[23] < 0)
      {
        sub_10004FC84(&__p, theDict[0], (unint64_t)theDict[1]);
      }
      else
      {
        long long __p = *(_OWORD *)theDict;
        uint64_t v42 = v44;
      }
      long long v26 = a1 + 10;
      if (v23 != a1 + 10)
      {
        while (1)
        {
          *(_DWORD *)int buf = *((_DWORD *)v23 + 8);
          uint64_t v27 = v23[6];
          *(void *)&uint8_t buf[8] = v23[5];
          *(void *)&uint8_t buf[16] = v27;
          if (v27) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(v27 + 16), 1uLL, memory_order_relaxed);
          }
          BOOL v28 = v39((uint64_t)v38, (uint64_t)buf);
          if (*(void *)&buf[16]) {
            std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[16]);
          }
          if (v28) {
            break;
          }
          long long v29 = (void *)v23[1];
          if (v29)
          {
            do
            {
              long long v30 = v29;
              long long v29 = (void *)*v29;
            }
            while (v29);
          }
          else
          {
            do
            {
              long long v30 = (void *)v23[2];
              BOOL v31 = *v30 == (void)v23;
              uint64_t v23 = v30;
            }
            while (!v31);
          }
          uint64_t v23 = v30;
          if (v30 == v26) {
            goto LABEL_59;
          }
        }
      }
      if (v23 == v26)
      {
LABEL_59:
        long long v36 = a1[5];
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v37 = (CFDictionaryRef *)theDict[0];
          if (v24 >= 0) {
            uint64_t v37 = theDict;
          }
          *(_DWORD *)int buf = 136315650;
          *(void *)&uint8_t buf[4] = "";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = "";
          *(_WORD *)&unsigned char buf[22] = 2080;
          xpc_object_t v49 = (uint8_t *)v37;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %s%sNo account %s found", buf, 0x20u);
        }
      }
      else
      {
        long long v32 = (std::__shared_weak_count *)v23[6];
        if (v32)
        {
          long long v33 = std::__shared_weak_count::lock(v32);
          if (v33)
          {
            long long v34 = v33;
            uint64_t v35 = v23[5];
            if (v35) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v35 + 96))(v35, a3);
            }
            sub_10004D2C8(v34);
          }
        }
      }
      if (SHIBYTE(v42) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v44) < 0) {
        operator delete(theDict[0]);
      }
    }
    else
    {
      uint64_t v25 = a1[5];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = "";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = "";
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#W %s%sNo account given/found for IDS individual key req:", buf, 0x16u);
      }
      *(void *)int buf = off_101A4BA68;
      *(void *)&uint8_t buf[8] = a1;
      xpc_object_t v49 = buf;
      logger::CFTypeRefLogger();
      sub_10012C330(buf);
    }
    return sub_1000558F4(&v47);
  }
}

void sub_100C6C640(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,uint64_t a22,char a23,uint64_t a24,const void *a25,__int16 a26,char a27,char a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  sub_10004D2C8(v33);
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v34 < 0) {
    operator delete(a20);
  }
  sub_1000558F4(&a25);
  _Unwind_Resume(a1);
}

BOOL sub_100C6C710(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a2 + 16);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      BOOL v6 = v5;
      uint64_t v7 = *(void *)(a2 + 8);
      if (v7)
      {
        (*(void (**)(void **__return_ptr))(*(void *)v7 + 16))(&__s1);
        if ((v28 & 0x80u) == 0) {
          size_t v8 = v28;
        }
        else {
          size_t v8 = __n;
        }
        uint64_t v9 = *(unsigned __int8 *)(a1 + 55);
        int v10 = (char)v9;
        if ((v9 & 0x80u) != 0) {
          uint64_t v9 = *(void *)(a1 + 40);
        }
        if (v8 == v9)
        {
          long long v13 = *(unsigned __int8 **)(a1 + 32);
          CFTypeID v12 = (unsigned __int8 *)(a1 + 32);
          int v11 = v13;
          if (v10 >= 0) {
            uint64_t v14 = v12;
          }
          else {
            uint64_t v14 = v11;
          }
          if ((v28 & 0x80) != 0)
          {
            int v24 = __s1;
            BOOL v23 = memcmp(__s1, v14, __n) == 0;
            goto LABEL_28;
          }
          if (!v28)
          {
            BOOL v23 = 1;
            goto LABEL_30;
          }
          uint64_t v15 = v28 - 1;
          p_s1 = &__s1;
          do
          {
            int v18 = *(unsigned __int8 *)p_s1;
            p_s1 = (void **)((char *)p_s1 + 1);
            int v17 = v18;
            int v20 = *v14++;
            int v19 = v20;
            BOOL v22 = v15-- != 0;
            BOOL v23 = v17 == v19;
          }
          while (v17 == v19 && v22);
        }
        else
        {
          BOOL v23 = 0;
        }
        if ((v28 & 0x80) != 0)
        {
          int v24 = __s1;
LABEL_28:
          operator delete(v24);
        }
      }
      else
      {
        BOOL v23 = 0;
      }
LABEL_30:
      sub_10004D2C8(v6);
      return v23;
    }
  }
  return 0;
}

void sub_100C6C848(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

const void **sub_100C6C85C(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  CFMutableDictionaryRef theDict = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFMutableDictionaryRef v8 = theDict;
    CFMutableDictionaryRef theDict = Mutable;
    CFMutableDictionaryRef v11 = v8;
    sub_10005717C((const void **)&v11);
  }
  CFDictionaryAddValue(theDict, @"cmd", @"individualSecret");
  CFDictionaryAddValue(theDict, @"value", a4);
  (*(void (**)(void, uint64_t, const __CFString *, CFMutableDictionaryRef))(**(void **)(a1 + 168) + 48))(*(void *)(a1 + 168), a2, @"message.", theDict);
  return sub_10005717C((const void **)&theDict);
}

void sub_100C6C93C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_100C6C950(uint64_t a1, uint64_t *a2)
{
  CFStringRef v14 = 0;
  sub_1007FF9DC(a2, &v14);
  CFStringRef key = 0;
  sub_1007FFA40(a2, &key);
  sub_1003A9CA0(v10);
  int v4 = sub_1003A9B04(*(uint64_t *)v10, key, 0);
  CFTypeID v12 = v4;
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (v4) {
    uint64_t v5 = sub_100080934;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5) {
    sub_1007FE5B8(a1, 1u, 0, 0, (long long *)a2, 1, 0);
  }
  sub_1003A9CA0(v10);
  BOOL v6 = sub_1003A9B04(*(uint64_t *)v10, v14, 0);
  uint64_t v7 = v12;
  CFTypeID v12 = v6;
  uint64_t v15 = v7;
  sub_1000577C4(&v15);
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (v12) {
    CFMutableDictionaryRef v8 = sub_100080934;
  }
  else {
    CFMutableDictionaryRef v8 = 0;
  }
  if (v8) {
    sub_1007FE5B8(a1, 0, 0, 0, (long long *)a2, 1, 0);
  }
  sub_1000577C4(&v12);
  sub_1000558F4((const void **)&key);
  return sub_1000558F4((const void **)&v14);
}

void sub_100C6CAA4(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va2, a3);
  va_start(va1, a3);
  va_start(va, a3);
  int v4 = va_arg(va1, const void *);
  va_copy(va2, va1);
  BOOL v6 = va_arg(va2, const void *);
  if (a3) {
    sub_10004D2C8(a3);
  }
  sub_1000577C4((const void **)va);
  sub_1000558F4((const void **)va1);
  sub_1000558F4((const void **)va2);
  _Unwind_Resume(a1);
}

void sub_100C6CB04(uint64_t a1, unsigned __int8 **a2)
{
  uint64_t v5 = *(void *)(a1 + 208);
  int v4 = *(std::__shared_weak_count **)(a1 + 216);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5 || !sub_1007FA824((void *)a1)) {
    goto LABEL_53;
  }
  uint64_t v35 = 0;
  v36[0] = 0;
  v36[1] = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a1 + 48));
  CFMutableDictionaryRef v8 = ServiceMap;
  if (v9 < 0)
  {
    int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v9;
  long long v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)__p);
  if (!v13)
  {
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v15 = v13[3];
  CFStringRef v14 = (std::__shared_weak_count *)v13[4];
  if (!v14)
  {
LABEL_12:
    std::mutex::unlock(v8);
    CFStringRef v14 = 0;
    char v16 = 1;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
LABEL_13:
  (*(void (**)(char ***__return_ptr, uint64_t))(*(void *)v15 + 192))(&v35, v15);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  v34[0] = 0;
  v34[1] = 0;
  long long v33 = v34;
  int v17 = v35;
  if (v35 != v36)
  {
    do
    {
      memset(__p, 0, 24);
      sub_100639AD0((const void **)v17 + 4);
      int v18 = (void *)HIBYTE(__p[2]);
      char v19 = HIBYTE(__p[2]);
      if (SHIBYTE(__p[2]) < 0) {
        int v18 = __p[1];
      }
      if (v18)
      {
        sub_100046BAC((uint64_t **)&v33, __p, (uint64_t)__p);
        char v19 = HIBYTE(__p[2]);
      }
      if (v19 < 0) {
        operator delete(__p[0]);
      }
      int v20 = v17[1];
      if (v20)
      {
        do
        {
          uint64_t v21 = (char **)v20;
          int v20 = *(char **)v20;
        }
        while (v20);
      }
      else
      {
        do
        {
          uint64_t v21 = (char **)v17[2];
          BOOL v22 = *v21 == (char *)v17;
          int v17 = v21;
        }
        while (!v22);
      }
      int v17 = v21;
    }
    while (v21 != v36);
  }
  uint64_t v23 = *(void *)(v5 + 72);
  for (uint64_t i = *(void *)(v5 + 80); v23 != i; v23 += 24)
  {
    if (v34 == (char **)sub_100046F68((uint64_t)&v33, (void **)v23))
    {
      uint64_t v25 = *(unsigned __int8 *)(v23 + 23);
      if ((v25 & 0x80u) == 0) {
        long long v26 = (unsigned __int8 *)*(unsigned __int8 *)(v23 + 23);
      }
      else {
        long long v26 = *(unsigned __int8 **)(v23 + 8);
      }
      uint64_t v27 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
      int v28 = (char)v27;
      if ((char)v27 < 0) {
        uint64_t v27 = a2[1];
      }
      if (v26 != v27) {
        goto LABEL_48;
      }
      if (v28 >= 0) {
        long long v29 = (unsigned __int8 *)a2;
      }
      else {
        long long v29 = *a2;
      }
      if ((v25 & 0x80) != 0)
      {
        if (memcmp(*(const void **)v23, v29, *(void *)(v23 + 8))) {
          goto LABEL_48;
        }
      }
      else if (*(unsigned char *)(v23 + 23))
      {
        uint64_t v30 = 0;
        while (*(unsigned __int8 *)(v23 + v30) == v29[v30])
        {
          if (v25 == ++v30) {
            goto LABEL_30;
          }
        }
LABEL_48:
        sub_100C6C950(a1, (uint64_t *)v23);
        BOOL v31 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
        {
          long long v32 = (void *)v23;
          if (*(char *)(v23 + 23) < 0) {
            long long v32 = *(void **)v23;
          }
          LODWORD(__p[0]) = 136315650;
          *(void **)((char *)__p + 4) = "";
          WORD2(__p[1]) = 2080;
          *(void **)((char *)&__p[1] + 6) = "";
          HIWORD(__p[2]) = 2080;
          __p[3] = v32;
          _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s%sRemainings of account %s removed from cloud", (uint8_t *)__p, 0x20u);
        }
      }
    }
LABEL_30:
    ;
  }
  sub_10005CD2C((uint64_t)&v33, v34[0]);
  sub_10005CD2C((uint64_t)&v35, v36[0]);
LABEL_53:
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_100C6CE78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v24);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_100C6CEF8(const void **result, const void *a2, uint64_t a3)
{
  if (a2 && a3)
  {
    uint64_t v5 = (uint64_t)result;
    CFMutableDictionaryRef theDict = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFMutableDictionaryRef v7 = theDict;
      CFMutableDictionaryRef theDict = Mutable;
      *(void *)int v24 = v7;
      sub_10005717C((const void **)v24);
    }
    CFDictionaryAddValue(theDict, @"account", a2);
    memset(v24, 0, sizeof(v24));
    ctu::cf::assign();
    *(_OWORD *)long long __p = *(_OWORD *)v24;
    *(void *)&__p[15] = *(void *)&v24[15];
    char v21 = v24[23];
    char v22 = 1;
    sub_1007FE31C(theDict, (const void **)v5, (long long *)__p, (__CFDictionary **)v15);
    *(void *)int v24 = theDict;
    CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)v15[0];
    v15[0] = 0;
    sub_10005717C((const void **)v24);
    sub_10005717C((const void **)v15);
    if (v22 && v21 < 0) {
      operator delete(*(void **)__p);
    }
    CFStringRef key = 0;
    sub_1007FD430((void *)v5, a3, (const void **)&key);
    CFDictionaryRef v18 = 0;
    sub_1003A9CA0(v24);
    v15[0] = (void *)sub_1003A9B04(*(uint64_t *)v24, key, 1);
    sub_100084068(&v18, (CFTypeRef *)v15);
    if (*(void *)&v24[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v24[8]);
    }
    if (v18) {
      CFMutableDictionaryRef v8 = sub_100080778;
    }
    else {
      CFMutableDictionaryRef v8 = 0;
    }
    if (v8)
    {
      CFDictionaryRef Value = (unsigned int *)CFDictionaryGetValue(v18, @"ts");
      *(_DWORD *)int v24 = 0;
      ctu::cf::assign((ctu::cf *)v24, Value, v10);
      int v11 = *(_DWORD *)v24 + 1;
    }
    else
    {
      int v11 = 1;
    }
    int v17 = 0;
    uint64_t v12 = *(void *)(v5 + 152);
    CFStringRef v13 = key;
    CFMutableDictionaryRef v14 = theDict;
    memset(v24, 0, sizeof(v24));
    ctu::cf::assign();
    *(_OWORD *)uint64_t v15 = *(_OWORD *)v24;
    uint64_t v16 = *(void *)&v24[16];
    (*(void (**)(const void **__return_ptr, uint64_t, CFStringRef, CFMutableDictionaryRef, void **))(*(void *)v12 + 56))(&v17, v12, v13, v14, v15);
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    sub_1007FF448(v5, key, v11, v17, 1, 1);
    sub_1000577C4(&v17);
    sub_100057D78((const void **)&v18);
    sub_1000558F4((const void **)&key);
    return sub_10005717C((const void **)&theDict);
  }
  return result;
}

void sub_100C6D170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va3, a4);
  va_start(va2, a4);
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, const void *);
  va_copy(va2, va1);
  CFMutableDictionaryRef v7 = va_arg(va2, const void *);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, const void *);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  uint64_t v14 = va_arg(va3, void);
  sub_1000577C4((const void **)va);
  sub_100057D78((const void **)va1);
  sub_1000558F4((const void **)va2);
  sub_10005717C((const void **)va3);
  _Unwind_Resume(a1);
}

const void **sub_100C6D234(void *a1, int a2)
{
  int v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEBUG))
  {
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = "";
    *(_WORD *)&__p[12] = 2080;
    *(void *)&__p[14] = "";
    _os_log_debug_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEBUG, "#D %s%sThumperPrimaryExchange::onCloudContentChanged", __p, 0x16u);
  }
  sub_1008065DC((uint64_t)a1, a2);
  uint64_t result = (const void **)(*(uint64_t (**)(void *))(*a1 + 16))(a1);
  if (result)
  {
    if (*(void *)(a1[16] + 8) != *(void *)a1[16])
    {
      BOOL v6 = (void *)a1[26];
      if (v6)
      {
        if ((byte_101B12A48 & 1) == 0)
        {
          byte_101B12A48 = 1;
          CFMutableDictionaryRef v7 = (void *)v6[3];
          CFMutableDictionaryRef v8 = v6 + 4;
          if (v7 != v6 + 4)
          {
            do
            {
              uint64_t v9 = v7 + 4;
              CFStringRef v27 = 0;
              if (*((char *)v7 + 55) < 0)
              {
                sub_10004FC84(__dst, (void *)v7[4], v7[5]);
              }
              else
              {
                *(_OWORD *)std::string __dst = *v9;
                uint64_t v26 = v7[6];
              }
              if (SHIBYTE(v26) < 0)
              {
                sub_10004FC84(v29, __dst[0], (unint64_t)__dst[1]);
              }
              else
              {
                *(_OWORD *)long long v29 = *(_OWORD *)__dst;
                uint64_t v30 = v26;
              }
              CFStringRef v28 = 0;
              if (SHIBYTE(v30) < 0)
              {
                sub_10004FC84(__p, (void *)v29[0], (unint64_t)v29[1]);
              }
              else
              {
                *(_OWORD *)long long __p = *(_OWORD *)v29;
                *(void *)&__p[16] = v30;
              }
              CFStringRef theString2 = 0;
              if (ctu::cf::convert_copy())
              {
                CFStringRef v10 = v28;
                CFStringRef v28 = theString2;
                CFStringRef v32 = v10;
                sub_1000558F4((const void **)&v32);
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              CFStringRef v27 = v28;
              CFStringRef v28 = 0;
              sub_1000558F4((const void **)&v28);
              if (SHIBYTE(v30) < 0) {
                operator delete((void *)v29[0]);
              }
              if (SHIBYTE(v26) < 0) {
                operator delete(__dst[0]);
              }
              if (!sub_100C6C04C((uint64_t)a1, v27) && !sub_100C6BFE0((uint64_t)a1, v27))
              {
                uint64_t v11 = a1[5];
                if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
                {
                  if (*((char *)v7 + 55) < 0) {
                    uint64_t v9 = *(_OWORD **)v9;
                  }
                  *(_DWORD *)long long __p = 136315650;
                  *(void *)&__p[4] = "";
                  *(_WORD *)&__p[12] = 2080;
                  *(void *)&__p[14] = "";
                  *(_WORD *)&__p[22] = 2080;
                  int v34 = v9;
                  _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s%sremoving orphan device record for %s", __p, 0x20u);
                }
                sub_1007FD308(a1, (uint64_t)v27, (const void **)__p);
                sub_1007FF448((uint64_t)a1, *(const __CFString **)__p, 0, 0, 1, 1);
                sub_1000558F4((const void **)__p);
                sub_1007FD430(a1, (uint64_t)v27, (const void **)__p);
                sub_1007FF448((uint64_t)a1, *(const __CFString **)__p, 0, 0, 1, 1);
                sub_1000558F4((const void **)__p);
              }
              uint64_t result = sub_1000558F4((const void **)&v27);
              uint64_t v12 = (void *)v7[1];
              if (v12)
              {
                do
                {
                  uint64_t v13 = v12;
                  uint64_t v12 = (void *)*v12;
                }
                while (v12);
              }
              else
              {
                do
                {
                  uint64_t v13 = (void *)v7[2];
                  BOOL v14 = *v13 == (void)v7;
                  CFMutableDictionaryRef v7 = v13;
                }
                while (!v14);
              }
              CFMutableDictionaryRef v7 = v13;
            }
            while (v13 != v8);
            BOOL v6 = (void *)a1[26];
          }
          uint64_t v15 = (long long *)v6[18];
          uint64_t v16 = (long long *)(v6 + 19);
          if (v15 != (long long *)(v6 + 19))
          {
            do
            {
              CFStringRef theString2 = 0;
              sub_100083DA4(&cf, *((const void ***)v15 + 7));
              v29[0] = cf;
              if (cf)
              {
                CFRetain(cf);
                CFStringRef v32 = 0;
                *(CFTypeRef *)long long __p = v29[0];
                if (v29[0])
                {
                  CFRetain(v29[0]);
                  uint64_t v17 = *(void *)__p;
                }
                else
                {
                  uint64_t v17 = 0;
                }
              }
              else
              {
                uint64_t v17 = 0;
                CFStringRef v32 = 0;
                *(void *)long long __p = 0;
              }
              if (v17) {
                CFDictionaryRef v18 = sub_1000810B8;
              }
              else {
                CFDictionaryRef v18 = 0;
              }
              if (v18) {
                sub_100083EB8((const void **)&v32, (const void **)__p);
              }
              sub_1000558F4((const void **)__p);
              CFStringRef theString2 = v32;
              CFStringRef v32 = 0;
              sub_1000558F4((const void **)&v32);
              sub_1000558F4(v29);
              sub_1000558F4(&cf);
              CFStringRef v19 = (const __CFString *)sub_1007FA824(a1);
              if (CFStringCompare(v19, theString2, 0) && !sub_100C6C04C((uint64_t)a1, theString2))
              {
                int v20 = a1[5];
                if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
                {
                  char v21 = v15 + 2;
                  if (*((char *)v15 + 55) < 0) {
                    char v21 = (_OWORD *)*((void *)v15 + 4);
                  }
                  *(_DWORD *)long long __p = 136315650;
                  *(void *)&__p[4] = "";
                  *(_WORD *)&__p[12] = 2080;
                  *(void *)&__p[14] = "";
                  *(_WORD *)&__p[22] = 2080;
                  int v34 = v21;
                  _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sremoving abandoned account record for %s", __p, 0x20u);
                }
                sub_1007FE5B8((uint64_t)a1, 1u, 0, 0, v15 + 2, 1, 0);
                sub_1007FE5B8((uint64_t)a1, 0, 0, 0, v15 + 2, 1, 0);
              }
              uint64_t result = sub_1000558F4((const void **)&theString2);
              char v22 = (long long *)*((void *)v15 + 1);
              if (v22)
              {
                do
                {
                  char v23 = v22;
                  char v22 = *(long long **)v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  char v23 = (long long *)*((void *)v15 + 2);
                  BOOL v14 = *(void *)v23 == (void)v15;
                  uint64_t v15 = v23;
                }
                while (!v14);
              }
              uint64_t v15 = v23;
            }
            while (v23 != v16);
          }
        }
      }
    }
  }
  return result;
}

void sub_100C6D7AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
}

void sub_100C6D858(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100C6D924(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100C6D9FC);
  __cxa_rethrow();
}

void sub_100C6D94C(_Unwind_Exception *a1)
{
}

void sub_100C6D964(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C6D99C(uint64_t a1)
{
}

uint64_t sub_100C6D9B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C6D9FC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100C6DA28(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_100C6DA3C()
{
}

void *sub_100C6DA50(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A4BA68;
  result[1] = v3;
  return result;
}

uint64_t sub_100C6DA98(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A4BA68;
  a2[1] = v2;
  return result;
}

void sub_100C6DAC4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v4 = a2;
    }
    else {
      int v4 = (uint64_t *)*a2;
    }
    int v5 = 136315650;
    BOOL v6 = "";
    __int16 v7 = 2080;
    CFMutableDictionaryRef v8 = "";
    __int16 v9 = 2080;
    CFStringRef v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#W %s%s%s", (uint8_t *)&v5, 0x20u);
  }
}

uint64_t sub_100C6DB90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C6DBD0()
{
}

void sub_100C6DBE0()
{
}

void *sub_100C6DBF4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A4BAE8;
  result[1] = v3;
  return result;
}

uint64_t sub_100C6DC3C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A4BAE8;
  a2[1] = v2;
  return result;
}

void sub_100C6DC68(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v4 = a2;
    }
    else {
      int v4 = (uint64_t *)*a2;
    }
    int v5 = 136315650;
    BOOL v6 = "";
    __int16 v7 = 2080;
    CFMutableDictionaryRef v8 = "";
    __int16 v9 = 2080;
    CFStringRef v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#W %s%s%s", (uint8_t *)&v5, 0x20u);
  }
}

uint64_t sub_100C6DD34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C6DD74()
{
}

void sub_100C6DD80(uint64_t a1)
{
  *(void *)a1 = off_101A4BB68;
  int v4 = (void **)(a1 + 24);
  sub_100465E6C(&v4);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)(a1 + 16) = 0;
  if (v2) {
    sub_100206334(a1 + 16, v2);
  }
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = 0;
  if (v3) {
    sub_100206334(a1 + 8, v3);
  }
  PB::Base::~Base((PB::Base *)a1);
}

void sub_100C6DE08(uint64_t a1)
{
  sub_100C6DD80(a1);

  operator delete();
}

uint64_t sub_100C6DE40(uint64_t a1, PB::TextFormatter *this, char *a3)
{
  PB::TextFormatter::beginObject(this, a3);
  char v5 = *(unsigned char *)(a1 + 68);
  if (v5)
  {
    PB::TextFormatter::format(this, "error", *(_DWORD *)(a1 + 48));
    char v5 = *(unsigned char *)(a1 + 68);
  }
  if ((v5 & 2) != 0) {
    PB::TextFormatter::format(this, "gsmaSgp22Version", *(_DWORD *)(a1 + 52));
  }
  if (*(void *)(a1 + 8)) {
    PB::TextFormatter::format();
  }
  if (*(void *)(a1 + 16)) {
    PB::TextFormatter::format();
  }
  char v6 = *(unsigned char *)(a1 + 68);
  if ((v6 & 4) != 0)
  {
    PB::TextFormatter::format(this, "pendingInstallStatus", *(_DWORD *)(a1 + 56));
    char v6 = *(unsigned char *)(a1 + 68);
    if ((v6 & 8) == 0)
    {
LABEL_11:
      if ((v6 & 0x10) == 0) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else if ((*(unsigned char *)(a1 + 68) & 8) == 0)
  {
    goto LABEL_11;
  }
  PB::TextFormatter::format(this, "radio_sku", *(_DWORD *)(a1 + 60));
  if ((*(unsigned char *)(a1 + 68) & 0x10) != 0) {
LABEL_12:
  }
    PB::TextFormatter::format(this, "simAllianceProfileVersion", *(_DWORD *)(a1 + 64));
LABEL_13:
  __int16 v7 = *(uint64_t **)(a1 + 24);
  CFMutableDictionaryRef v8 = *(uint64_t **)(a1 + 32);
  while (v7 != v8)
  {
    uint64_t v9 = *v7++;
    (*(void (**)(uint64_t, PB::TextFormatter *, const char *))(*(void *)v9 + 32))(v9, this, "slotInfo");
  }

  return PB::TextFormatter::endObject(this);
}

uint64_t sub_100C6DFA0(uint64_t a1, PB::Reader *this)
{
  unint64_t v2 = *((void *)this + 1);
  unint64_t v3 = *((void *)this + 2);
  int v4 = *((unsigned __int8 *)this + 24);
  if (v2 >= v3 || v4 != 0) {
    return v4 == 0;
  }
  while (1)
  {
    uint64_t v8 = *(void *)this;
    if (v2 <= 0xFFFFFFFFFFFFFFF5 && v2 + 10 <= v3) {
      break;
    }
    char v15 = 0;
    unsigned int v16 = 0;
    unint64_t v11 = 0;
    if (v2 > v3) {
      unint64_t v3 = v2;
    }
    do
    {
      if (v3 == v2)
      {
        int v4 = 1;
        *((unsigned char *)this + 24) = 1;
        return v4 == 0;
      }
      unint64_t v17 = v2 + 1;
      char v18 = *(unsigned char *)(v8 + v2);
      *((void *)this + 1) = v17;
      v11 |= (unint64_t)(v18 & 0x7F) << v15;
      if ((v18 & 0x80) == 0) {
        goto LABEL_26;
      }
      v15 += 7;
      unint64_t v2 = v17;
      BOOL v14 = v16++ > 8;
    }
    while (!v14);
LABEL_19:
    unsigned __int8 v19 = 0;
    LODWORD(v2sub_10023C164((uint64_t)&a9, 0) = 0;
LABEL_20:
    uint64_t result = PB::Reader::skip(this, v20, v19, 0);
    if (!result) {
      return result;
    }
LABEL_21:
    unint64_t v2 = *((void *)this + 1);
    unint64_t v3 = *((void *)this + 2);
    int v4 = *((unsigned __int8 *)this + 24);
    if (v2 >= v3 || v4 != 0) {
      return v4 == 0;
    }
  }
  char v9 = 0;
  unsigned int v10 = 0;
  unint64_t v11 = 0;
  while (1)
  {
    unint64_t v12 = v2 + 1;
    *((void *)this + 1) = v2 + 1;
    char v13 = *(unsigned char *)(v8 + v2);
    v11 |= (unint64_t)(v13 & 0x7F) << v9;
    if ((v13 & 0x80) == 0) {
      break;
    }
    v9 += 7;
    unint64_t v2 = v12;
    BOOL v14 = v10++ > 8;
    if (v14) {
      goto LABEL_19;
    }
  }
LABEL_26:
  unsigned __int8 v19 = v11 & 7;
  if ((v11 & 7) != 4)
  {
    unint64_t v20 = v11 >> 3;
    switch((v11 >> 3))
    {
      case 2u:
        operator new();
      case 3u:
        sub_100465C64();
      case 4u:
        *(unsigned char *)(a1 + 68) |= 1u;
        unint64_t v23 = *((void *)this + 1);
        unint64_t v24 = *((void *)this + 2);
        uint64_t v25 = *(void *)this;
        if (v23 <= 0xFFFFFFFFFFFFFFF5 && v23 + 10 <= v24)
        {
          char v26 = 0;
          unsigned int v27 = 0;
          uint64_t v28 = 0;
          do
          {
            unint64_t v29 = v23 + 1;
            *((void *)this + 1) = v23 + 1;
            char v30 = *(unsigned char *)(v25 + v23);
            v28 |= (unint64_t)(v30 & 0x7F) << v26;
            if ((v30 & 0x80) == 0) {
              goto LABEL_108;
            }
            v26 += 7;
            unint64_t v23 = v29;
            BOOL v14 = v27++ > 8;
          }
          while (!v14);
LABEL_72:
          LODWORD(v28) = 0;
          goto LABEL_108;
        }
        char v63 = 0;
        unsigned int v64 = 0;
        uint64_t v28 = 0;
        if (v24 <= v23) {
          unint64_t v24 = *((void *)this + 1);
        }
        while (2)
        {
          if (v24 == v23)
          {
            LODWORD(v28) = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v65 = v23 + 1;
            char v66 = *(unsigned char *)(v25 + v23);
            *((void *)this + 1) = v65;
            v28 |= (unint64_t)(v66 & 0x7F) << v63;
            if (v66 < 0)
            {
              v63 += 7;
              unint64_t v23 = v65;
              BOOL v14 = v64++ > 8;
              if (v14) {
                goto LABEL_72;
              }
              continue;
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v28) = 0;
            }
          }
          break;
        }
LABEL_108:
        *(_DWORD *)(a1 + 48) = v28;
        goto LABEL_21;
      case 5u:
        *(unsigned char *)(a1 + 68) |= 4u;
        unint64_t v31 = *((void *)this + 1);
        unint64_t v32 = *((void *)this + 2);
        uint64_t v33 = *(void *)this;
        if (v31 <= 0xFFFFFFFFFFFFFFF5 && v31 + 10 <= v32)
        {
          char v34 = 0;
          unsigned int v35 = 0;
          uint64_t v36 = 0;
          do
          {
            unint64_t v37 = v31 + 1;
            *((void *)this + 1) = v31 + 1;
            char v38 = *(unsigned char *)(v33 + v31);
            v36 |= (unint64_t)(v38 & 0x7F) << v34;
            if ((v38 & 0x80) == 0) {
              goto LABEL_111;
            }
            v34 += 7;
            unint64_t v31 = v37;
            BOOL v14 = v35++ > 8;
          }
          while (!v14);
LABEL_79:
          LODWORD(v36) = 0;
          goto LABEL_111;
        }
        char v67 = 0;
        unsigned int v68 = 0;
        uint64_t v36 = 0;
        if (v32 <= v31) {
          unint64_t v32 = *((void *)this + 1);
        }
        while (2)
        {
          if (v32 == v31)
          {
            LODWORD(v36) = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v69 = v31 + 1;
            char v70 = *(unsigned char *)(v33 + v31);
            *((void *)this + 1) = v69;
            v36 |= (unint64_t)(v70 & 0x7F) << v67;
            if (v70 < 0)
            {
              v67 += 7;
              unint64_t v31 = v69;
              BOOL v14 = v68++ > 8;
              if (v14) {
                goto LABEL_79;
              }
              continue;
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v36) = 0;
            }
          }
          break;
        }
LABEL_111:
        *(_DWORD *)(a1 + 56) = v36;
        goto LABEL_21;
      case 6u:
        operator new();
      case 7u:
        *(unsigned char *)(a1 + 68) |= 8u;
        unint64_t v39 = *((void *)this + 1);
        unint64_t v40 = *((void *)this + 2);
        uint64_t v41 = *(void *)this;
        if (v39 <= 0xFFFFFFFFFFFFFFF5 && v39 + 10 <= v40)
        {
          char v42 = 0;
          unsigned int v43 = 0;
          uint64_t v44 = 0;
          do
          {
            unint64_t v45 = v39 + 1;
            *((void *)this + 1) = v39 + 1;
            char v46 = *(unsigned char *)(v41 + v39);
            v44 |= (unint64_t)(v46 & 0x7F) << v42;
            if ((v46 & 0x80) == 0) {
              goto LABEL_114;
            }
            v42 += 7;
            unint64_t v39 = v45;
            BOOL v14 = v43++ > 8;
          }
          while (!v14);
LABEL_86:
          LODWORD(v44) = 0;
          goto LABEL_114;
        }
        char v71 = 0;
        unsigned int v72 = 0;
        uint64_t v44 = 0;
        if (v40 <= v39) {
          unint64_t v40 = *((void *)this + 1);
        }
        while (2)
        {
          if (v40 == v39)
          {
            LODWORD(v44) = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v73 = v39 + 1;
            char v74 = *(unsigned char *)(v41 + v39);
            *((void *)this + 1) = v73;
            v44 |= (unint64_t)(v74 & 0x7F) << v71;
            if (v74 < 0)
            {
              v71 += 7;
              unint64_t v39 = v73;
              BOOL v14 = v72++ > 8;
              if (v14) {
                goto LABEL_86;
              }
              continue;
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v44) = 0;
            }
          }
          break;
        }
LABEL_114:
        *(_DWORD *)(a1 + 6sub_10023C164((uint64_t)&a9, 0) = v44;
        goto LABEL_21;
      case 8u:
        *(unsigned char *)(a1 + 68) |= 2u;
        unint64_t v47 = *((void *)this + 1);
        unint64_t v48 = *((void *)this + 2);
        uint64_t v49 = *(void *)this;
        if (v47 <= 0xFFFFFFFFFFFFFFF5 && v47 + 10 <= v48)
        {
          char v50 = 0;
          unsigned int v51 = 0;
          uint64_t v52 = 0;
          do
          {
            unint64_t v53 = v47 + 1;
            *((void *)this + 1) = v47 + 1;
            char v54 = *(unsigned char *)(v49 + v47);
            v52 |= (unint64_t)(v54 & 0x7F) << v50;
            if ((v54 & 0x80) == 0) {
              goto LABEL_117;
            }
            v50 += 7;
            unint64_t v47 = v53;
            BOOL v14 = v51++ > 8;
          }
          while (!v14);
LABEL_93:
          LODWORD(v52) = 0;
          goto LABEL_117;
        }
        char v75 = 0;
        unsigned int v76 = 0;
        uint64_t v52 = 0;
        if (v48 <= v47) {
          unint64_t v48 = *((void *)this + 1);
        }
        while (2)
        {
          if (v48 == v47)
          {
            LODWORD(v52) = 0;
            *((unsigned char *)this + 24) = 1;
          }
          else
          {
            unint64_t v77 = v47 + 1;
            char v78 = *(unsigned char *)(v49 + v47);
            *((void *)this + 1) = v77;
            v52 |= (unint64_t)(v78 & 0x7F) << v75;
            if (v78 < 0)
            {
              v75 += 7;
              unint64_t v47 = v77;
              BOOL v14 = v76++ > 8;
              if (v14) {
                goto LABEL_93;
              }
              continue;
            }
            if (*((unsigned char *)this + 24)) {
              LODWORD(v52) = 0;
            }
          }
          break;
        }
LABEL_117:
        *(_DWORD *)(a1 + 52) = v52;
        goto LABEL_21;
      case 9u:
        *(unsigned char *)(a1 + 68) |= 0x10u;
        unint64_t v55 = *((void *)this + 1);
        unint64_t v56 = *((void *)this + 2);
        uint64_t v57 = *(void *)this;
        if (v55 <= 0xFFFFFFFFFFFFFFF5 && v55 + 10 <= v56)
        {
          char v58 = 0;
          unsigned int v59 = 0;
          uint64_t v60 = 0;
          do
          {
            unint64_t v61 = v55 + 1;
            *((void *)this + 1) = v55 + 1;
            char v62 = *(unsigned char *)(v57 + v55);
            v60 |= (unint64_t)(v62 & 0x7F) << v58;
            if ((v62 & 0x80) == 0) {
              goto LABEL_120;
            }
            v58 += 7;
            unint64_t v55 = v61;
            BOOL v14 = v59++ > 8;
          }
          while (!v14);
LABEL_100:
          LODWORD(v6sub_10023C164((uint64_t)&a9, 0) = 0;
          goto LABEL_120;
        }
        char v79 = 0;
        unsigned int v80 = 0;
        uint64_t v60 = 0;
        if (v56 <= v55) {
          unint64_t v56 = *((void *)this + 1);
        }
        break;
      default:
        goto LABEL_20;
    }
    while (1)
    {
      if (v56 == v55)
      {
        LODWORD(v6sub_10023C164((uint64_t)&a9, 0) = 0;
        *((unsigned char *)this + 24) = 1;
        goto LABEL_120;
      }
      unint64_t v81 = v55 + 1;
      char v82 = *(unsigned char *)(v57 + v55);
      *((void *)this + 1) = v81;
      v60 |= (unint64_t)(v82 & 0x7F) << v79;
      if ((v82 & 0x80) == 0) {
        break;
      }
      v79 += 7;
      unint64_t v55 = v81;
      BOOL v14 = v80++ > 8;
      if (v14) {
        goto LABEL_100;
      }
    }
    if (*((unsigned char *)this + 24)) {
      LODWORD(v6sub_10023C164((uint64_t)&a9, 0) = 0;
    }
LABEL_120:
    *(_DWORD *)(a1 + 64) = v60;
    goto LABEL_21;
  }
  int v4 = 0;
  return v4 == 0;
}

uint64_t sub_100C6E6E8(uint64_t result, PB::Writer *this)
{
  uint64_t v3 = result;
  if (*(void *)(result + 8)) {
    uint64_t result = PB::Writer::write();
  }
  int v4 = *(const PB::Base ***)(v3 + 24);
  char v5 = *(const PB::Base ***)(v3 + 32);
  while (v4 != v5)
  {
    char v6 = *v4++;
    uint64_t result = PB::Writer::writeSubmessage(this, v6, 3u);
  }
  char v7 = *(unsigned char *)(v3 + 68);
  if (v7)
  {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 48), 4u);
    char v7 = *(unsigned char *)(v3 + 68);
  }
  if ((v7 & 4) != 0) {
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 56), 5u);
  }
  if (*(void *)(v3 + 16)) {
    uint64_t result = PB::Writer::write();
  }
  char v8 = *(unsigned char *)(v3 + 68);
  if ((v8 & 8) == 0)
  {
    if ((*(unsigned char *)(v3 + 68) & 2) == 0) {
      goto LABEL_14;
    }
LABEL_17:
    uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 52), 8u);
    if ((*(unsigned char *)(v3 + 68) & 0x10) == 0) {
      return result;
    }
    goto LABEL_18;
  }
  uint64_t result = PB::Writer::writeVarInt(this, *(_DWORD *)(v3 + 60), 7u);
  char v8 = *(unsigned char *)(v3 + 68);
  if ((v8 & 2) != 0) {
    goto LABEL_17;
  }
LABEL_14:
  if ((v8 & 0x10) == 0) {
    return result;
  }
LABEL_18:
  unsigned int v9 = *(_DWORD *)(v3 + 64);

  return PB::Writer::writeVarInt(this, v9, 9u);
}

void sub_100C6E7F8(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100C6E8C4(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C6E8F8(uint64_t a1, void *a2, NSObject **a3)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v15, kCtLoggingSystemName, "DATA.odc");
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  char v6 = *a3;
  *(void *)(a1 + 24) = *a3;
  if (v6) {
    dispatch_retain(v6);
  }
  *(void *)(a1 + 32) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v16, &v15);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 40), (const ctu::OsLogLogger *)v16);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v16);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v15);
  *(void *)a1 = off_101A4BBB8;
  *(void *)(a1 + 48) = 0x200000002;
  *(_DWORD *)(a1 + 56) = 2;
  *(void *)(a1 + 64) = *a2;
  uint64_t v7 = a2[1];
  *(void *)(a1 + 72) = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, "TelephonyOndemandController");
  char v8 = *(NSObject **)(a1 + 24);
  unint64_t v12 = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  unsigned int v9 = *(NSObject **)(a1 + 32);
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  ctu::RestModule::RestModule();
  if (object) {
    dispatch_release(object);
  }
  if (v12) {
    dispatch_release(v12);
  }
  if (v14 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = 0;
  *(unsigned char *)(a1 + 128) = 0;
  sub_100C7125C(a1 + 136);
  *(_DWORD *)(a1 + 176) = 0;
  *(void *)(a1 + 20sub_10023C164((uint64_t)&a9, 0) = 0;
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 184) = a1 + 192;
  *(unsigned char *)(a1 + 208) = 0;
  *(void *)(a1 + 328) = 0;
  *(void *)(a1 + 336) = 0;
  *(void *)(a1 + 32sub_10023C164((uint64_t)&a9, 0) = a1 + 328;
  *(_OWORD *)(a1 + 352) = 0u;
  *(_OWORD *)(a1 + 368) = 0u;
  *(unsigned char *)(a1 + 384) = 0;
  *(_DWORD *)(a1 + 404) = 0;
  *(void *)(a1 + 396) = 0;
  *(void *)(a1 + 388) = 0;
  return a1;
}

void sub_100C6EAA8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_object_t object, dispatch_object_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  sub_10030AB98((void *)v17 + 12);
  char v21 = (std::__shared_weak_count *)*((void *)v17 + 11);
  if (v21) {
    sub_10004D2C8(v21);
  }
  char v22 = (std::__shared_weak_count *)*((void *)v17 + 9);
  if (v22) {
    sub_10004D2C8(v22);
  }
  TelephonyOndemandInterface::~TelephonyOndemandInterface(v17);
  ctu::OsLogLogger::~OsLogLogger(v19);
  sub_100087E88(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_100C6EB4C(uint64_t a1)
{
  *(void *)a1 = off_101A4BBB8;
  uint64_t v2 = *(void *)(a1 + 400);
  *(void *)(a1 + 40sub_10023C164((uint64_t)&a9, 0) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 392);
  *(void *)(a1 + 392) = 0;
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
  int v4 = *(std::__shared_weak_count **)(a1 + 376);
  if (v4) {
    sub_10004D2C8(v4);
  }
  char v5 = *(std::__shared_weak_count **)(a1 + 360);
  if (v5) {
    sub_10004D2C8(v5);
  }
  sub_10005CD2C(a1 + 320, *(char **)(a1 + 328));
  sub_1003C8134((unsigned char *)(a1 + 208));
  sub_1007035FC(a1 + 184, *(void **)(a1 + 192));
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  sub_10030AB98((void *)(a1 + 96));
  char v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7) {
    sub_10004D2C8(v7);
  }
  TelephonyOndemandInterface::~TelephonyOndemandInterface((TelephonyOndemandInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100C6EC74(uint64_t a1)
{
  sub_100C6EB4C(a1);

  operator delete();
}

void sub_100C6ECAC(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping TelephonyOndemandController", buf, 2u);
  }
  Registry::createRestModuleOneTimeUseConnection(&v10, *(Registry **)(a1 + 64));
  ctu::RestModule::connect();
  if (v11) {
    sub_10004D2C8(v11);
  }
  *(void *)int buf = off_101A4BD48;
  uint64_t v15 = a1 + 80;
  unsigned int v16 = buf;
  sub_100318874(buf, (void *)(a1 + 96));
  sub_10030AB98(buf);
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, a1 + 128);
  }
  sub_100058DB0(__p, "/cc/props/wrm-enable-telephony");
  int v4 = (uint8_t *)operator new(0x28uLL);
  *(void *)int v4 = off_101A4BDC8;
  *((void *)v4 + 1) = a1 + 136;
  *((void *)v4 + 2) = a1;
  *((void *)v4 + 3) = sub_100C6F11C;
  *((void *)v4 + 4) = 0;
  unsigned int v16 = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/wrm-enable-telephony-override");
  char v5 = (uint8_t *)operator new(0x28uLL);
  *(void *)char v5 = off_101A4BE48;
  *((void *)v5 + 1) = a1 + 176;
  *((void *)v5 + 2) = a1;
  *((void *)v5 + 3) = sub_100C6F11C;
  *((void *)v5 + 4) = 0;
  unsigned int v16 = v5;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/vowifi_provisioning_state");
  char v6 = (uint8_t *)operator new(0x28uLL);
  *(void *)char v6 = off_101A4BEC8;
  *((void *)v6 + 1) = a1 + 184;
  *((void *)v6 + 2) = a1;
  *((void *)v6 + 3) = sub_100C6F23C;
  *((void *)v6 + 4) = 0;
  unsigned int v16 = v6;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/cellular_plan_remotesubscription_info");
  uint64_t v7 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v7 = off_101A4BF48;
  *((void *)v7 + 1) = a1 + 208;
  *((void *)v7 + 2) = a1;
  *((void *)v7 + 3) = sub_100C6F244;
  *((void *)v7 + 4) = 0;
  unsigned int v16 = v7;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/ims_registration_state");
  char v8 = (uint8_t *)operator new(0x28uLL);
  *(void *)char v8 = off_101A4BFC8;
  *((void *)v8 + 1) = a1 + 320;
  *((void *)v8 + 2) = a1;
  *((void *)v8 + 3) = sub_100C6F330;
  *((void *)v8 + 4) = 0;
  unsigned int v16 = v8;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/irat_change");
  unsigned int v9 = (uint8_t *)operator new(0x20uLL);
  *(void *)unsigned int v9 = off_101A4C048;
  *((void *)v9 + 1) = a1;
  *((void *)v9 + 2) = sub_100C6F67C;
  *((void *)v9 + 3) = 0;
  unsigned int v16 = v9;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v13 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C6F0AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100C6F11C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(_DWORD *)(a1 + 136) == 2 || *(_DWORD *)(a1 + 168) != 2) {
      uint64_t v3 = (const char *)asString();
    }
    else {
      uint64_t v3 = "WiFiCalling-only";
    }
    int v5 = 136315394;
    char v6 = v3;
    __int16 v7 = 2080;
    uint64_t v8 = asString();
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I handleWRMTelephonyChange:: WRM Telephony:%s, override:%s", (uint8_t *)&v5, 0x16u);
  }
  int v4 = *(_DWORD *)(a1 + 136);
  if (*(_DWORD *)(a1 + 176)) {
    int v4 = *(_DWORD *)(a1 + 176);
  }
  if (v4 != 2)
  {
    sub_100C708F4(a1);
    *(unsigned char *)(a1 + 384) = 0;
    sub_100C6FA48(a1, 0);
  }
  sub_100C6FA48(a1, 0);
}

void sub_100C6F23C(uint64_t a1)
{
}

void sub_100C6F244(uint64_t a1)
{
  int v2 = *(unsigned __int8 *)(a1 + 208);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
  if (v2)
  {
    if (v4)
    {
      int v8 = 136315138;
      uint64_t v9 = cellplan::asString();
      int v5 = "#I handleESIMInfoChange:: eSIM status: %s";
      char v6 = v3;
      uint32_t v7 = 12;
LABEL_6:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v5, (uint8_t *)&v8, v7);
    }
  }
  else if (v4)
  {
    LOWORD(v8) = 0;
    int v5 = "#N handleESIMInfoChange:: eSIM info empty.";
    char v6 = v3;
    uint32_t v7 = 2;
    goto LABEL_6;
  }
  sub_100C6FA48(a1, 0);
}

void sub_100C6F330(uint64_t a1, uint64_t a2)
{
  void (***v15)(uint64_t *__return_ptr, void, uint64_t);
  char v16;
  void **v17;
  NSObject *v18;
  uint64_t v19;
  BOOL v20;
  const char *v21;
  BOOL v22;
  const char *v23;
  const char *v24;
  const char *v25;
  uint64_t *v26;
  void **v27;
  uint64_t v28;
  std::__shared_weak_count *v29;
  unsigned char buf[12];
  __int16 v31;
  const char *v32;
  __int16 v33;
  const char *v34;

  int v2 = *(uint64_t **)(a1 + 320);
  uint64_t v3 = (uint64_t *)(a1 + 328);
  if (v2 != (uint64_t *)(a1 + 328))
  {
    unsigned int v27 = (void **)(a2 + 8);
    char v6 = (uint64_t *)&byte_10144BF80[128];
    while (1)
    {
      uint64_t v28 = 0;
      unint64_t v29 = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a1 + 64));
      int v8 = ServiceMap;
      if (v9 < 0)
      {
        uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v11 = 5381;
        do
        {
          uint64_t v9 = v11;
          unsigned int v12 = *v10++;
          uint64_t v11 = (33 * v11) ^ v12;
        }
        while (v12);
      }
      std::mutex::lock(ServiceMap);
      *(void *)int buf = v9;
      char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
      if (!v13) {
        break;
      }
      uint64_t v15 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v13[3];
      char v14 = (std::__shared_weak_count *)v13[4];
      if (!v14) {
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      unsigned int v16 = 0;
LABEL_11:
      (**v15)(&v28, v15, (uint64_t)(v2 + 4));
      if ((v16 & 1) == 0) {
        sub_10004D2C8(v14);
      }
      if (v28)
      {
        if (!*(unsigned char *)(v28 + 49) && *(_DWORD *)(v28 + 52) == 1)
        {
          unint64_t v17 = sub_100046F68(a2, (void **)v2 + 4);
          if (v27 == v17 || !sub_10047161C((uint64_t)(v17 + 7), (uint64_t)(v2 + 7)))
          {
            char v18 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              unsigned __int8 v19 = *((unsigned __int8 *)v2 + 55);
              unint64_t v20 = (v19 & 0x80u) != 0;
              if ((v19 & 0x80u) != 0) {
                unsigned __int8 v19 = v2[5];
              }
              if (v20) {
                char v21 = (const char *)v2[4];
              }
              else {
                char v21 = (const char *)(v2 + 4);
              }
              char v22 = v19 == 0;
              unint64_t v23 = "<invalid>";
              if (!v22) {
                unint64_t v23 = v21;
              }
              unint64_t v24 = "NOT ";
              if (*((_DWORD *)v2 + 14) == 1) {
                unint64_t v24 = (const char *)&unk_10164BEAB;
              }
              uint64_t v25 = "WiFi";
              if (!*((unsigned char *)v2 + 64)) {
                uint64_t v25 = "VoLTE";
              }
              *(_DWORD *)int buf = 136315650;
              *(void *)&uint8_t buf[4] = v23;
              unint64_t v31 = 2080;
              unint64_t v32 = v24;
              uint64_t v33 = 2080;
              char v34 = v25;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I handleIMSRegistrationStateChange:: Personality: %s IMS %sregistered over %s", buf, 0x20u);
            }
            if (sub_100C7071C(a1, (void **)v2 + 4))
            {
              sub_100C708F4(a1);
              *(unsigned char *)(a1 + 384) = 0;
              sub_100C6FA48(a1, 0);
            }
            if (*((_DWORD *)v2 + 14) != 1 && sub_100C7083C(a1)) {
              sub_100C6FA48(a1, 0);
            }
          }
        }
      }
      if (v29) {
        sub_10004D2C8(v29);
      }
      char v26 = (uint64_t *)v2[1];
      if (v26)
      {
        do
        {
          char v6 = v26;
          char v26 = (uint64_t *)*v26;
        }
        while (v26);
      }
      else
      {
        do
        {
          char v6 = (uint64_t *)v2[2];
          char v22 = *v6 == (void)v2;
          int v2 = v6;
        }
        while (!v22);
      }
      int v2 = v6;
      if (v6 == v3) {
        return;
      }
    }
    uint64_t v15 = 0;
LABEL_10:
    std::mutex::unlock(v8);
    char v14 = 0;
    unsigned int v16 = 1;
    goto LABEL_11;
  }
}

void sub_100C6F638(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C6F67C(uint64_t a1, uint64_t a2)
{
  BOOL v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = *(_DWORD *)(a2 + 4);
    int v6 = *(_DWORD *)(a2 + 8);
    v7[0] = 67109376;
    v7[1] = v5;
    __int16 v8 = 1024;
    int v9 = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I appType: %d, dataContextType: %d", (uint8_t *)v7, 0xEu);
  }
  if (*(_DWORD *)(a2 + 4) <= 2u)
  {
    if (validContextType())
    {
      *(_DWORD *)(a1 + 4 * *(int *)(a2 + 4) + 48) = *(_DWORD *)(a2 + 8);
      sub_100C6FA48(a1, 0);
    }
  }
}

void sub_100C6F768(uint64_t a1)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  sub_1003E516C((uint64_t *)&v15, 0, 0);
  sub_1003E516C((uint64_t *)&v15, 1, 1);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v2, *(Registry **)(a1 + 64));
  BOOL v4 = ServiceMap;
  if (v5 < 0)
  {
    int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v5;
  int v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)__p);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_14:
    std::mutex::unlock(v4);
    uint64_t v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_7;
    }
LABEL_15:
    sub_100B89508((uint64_t *)__p, (uint64_t)&v15);
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v11 + 488))(v11, 1, __p);
    sub_1000346F8((uint64_t)__p, (void *)__p[1]);
    goto LABEL_16;
  }
  uint64_t v11 = v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
    goto LABEL_15;
  }
LABEL_7:
  char v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    asString();
    char v14 = v18 >= 0 ? __p : (void **)__p[0];
    *(_DWORD *)int buf = 136315138;
    unint64_t v20 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DataServiceInterface not found. Didn't add iRAT subscription info %s", buf, 0xCu);
    if (v18 < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_16:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  sub_1000346F8((uint64_t)&v15, v16[0]);
}

void sub_100C6F97C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  sub_1000346F8((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100C6F9DC(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)BOOL v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Shutting down TelephonyOndemandController", v4, 2u);
  }
  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 80));
}

void sub_100C6FA48(uint64_t a1, char a2)
{
  if (sub_100C70788(a1))
  {
    int v4 = *(_DWORD *)(a1 + 136);
    if (*(_DWORD *)(a1 + 176)) {
      int v4 = *(_DWORD *)(a1 + 176);
    }
    if (v4 != 2 && (a2 & 1) == 0)
    {
      if (sub_100C70788(a1) && !*(void *)(a1 + 400))
      {
        uint64_t v5 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)int buf = 134217984;
          *(void *)&uint8_t buf[4] = 2000;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Scheduling IMS VoLTE deregistration timer for %lld ms", buf, 0xCu);
        }
        ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(a1 + 64));
        unsigned int v8 = ServiceMap;
        if (v9 < 0)
        {
          uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v11 = 5381;
          do
          {
            uint64_t v9 = v11;
            unsigned int v12 = *v10++;
            uint64_t v11 = (33 * v11) ^ v12;
          }
          while (v12);
        }
        std::mutex::lock(ServiceMap);
        *(void *)int buf = v9;
        char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
        if (v13 && (char v14 = (std::__shared_weak_count *)v13[4]) != 0)
        {
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v8);
          atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v14);
          char v15 = 0;
        }
        else
        {
          std::mutex::unlock(v8);
          char v14 = 0;
          char v15 = 1;
        }
        sub_100058DB0(__p, "TelephonyOndemandController");
        char v42 = *(NSObject **)(a1 + 24);
        dispatch_object_t object = v42;
        if (v42) {
          dispatch_retain(v42);
        }
        *(void *)int buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 0x40000000;
        *(void *)&uint8_t buf[16] = sub_100C70A28;
        unint64_t v55 = (const char *)&unk_101A4BC10;
        uint64_t v56 = a1;
        aBlock = _Block_copy(buf);
        CTWakingTimerInterface::createOneShotWakingTimer();
        CFTypeRef v43 = cf;
        CFTypeRef cf = 0;
        uint64_t v44 = *(void *)(a1 + 400);
        *(void *)(a1 + 40sub_10023C164((uint64_t)&a9, 0) = v43;
        if (v44)
        {
          (*(void (**)(uint64_t))(*(void *)v44 + 8))(v44);
          CFTypeRef v45 = cf;
          CFTypeRef cf = 0;
          if (v45) {
            (*(void (**)(CFTypeRef))(*(void *)v45 + 8))(v45);
          }
        }
        if (aBlock) {
          _Block_release(aBlock);
        }
        if (object) {
          dispatch_release(object);
        }
        if (v53 < 0) {
          operator delete(__p[0]);
        }
        if ((v15 & 1) == 0) {
          sub_10004D2C8(v14);
        }
      }
      return;
    }
  }
  sub_100C7083C(a1);
  int v16 = *(_DWORD *)(a1 + 136);
  if (*(_DWORD *)(a1 + 176)) {
    int v16 = *(_DWORD *)(a1 + 176);
  }
  if (v16 != 2)
  {
LABEL_42:
    if (*(void *)(a1 + 352))
    {
      uint64_t v28 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Release Baseband Booted Assertion", buf, 2u);
      }
      unint64_t v29 = *(std::__shared_weak_count **)(a1 + 360);
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 36sub_10023C164((uint64_t)&a9, 0) = 0;
      if (v29) {
        sub_10004D2C8(v29);
      }
    }
    if (!*(void *)(a1 + 368)) {
      goto LABEL_102;
    }
    char v30 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Release Baseband Online Assertion", buf, 2u);
    }
    unint64_t v31 = *(std::__shared_weak_count **)(a1 + 376);
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    if (!v31) {
      goto LABEL_102;
    }
    goto LABEL_51;
  }
  int v18 = *(_DWORD *)(a1 + 48);
  int v17 = *(_DWORD *)(a1 + 52);
  BOOL v19 = v18 == 0;
  if (v17 == 1)
  {
    memset(buf, 0, sizeof(buf));
    PersonalityIdFromSlotIdEx();
  }
  else if (v17)
  {
    unsigned int v20 = 0;
    goto LABEL_24;
  }
  unsigned int v20 = 2;
LABEL_24:
  if (*(unsigned char *)(a1 + 208))
  {
    int isSimReadyToUse = cellplan::RemoteSimSubscriptionInfo::isSimReadyToUse((cellplan::RemoteSimSubscriptionInfo *)(a1 + 216));
    if (2 * v19 <= v20) {
      int v22 = v20;
    }
    else {
      int v22 = 2 * v19;
    }
    if (isSimReadyToUse) {
      unsigned int v23 = v22;
    }
    else {
      unsigned int v23 = 0;
    }
  }
  else
  {
    unsigned int v23 = 0;
  }
  unint64_t v24 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v25 = "kOnline";
    if (v18) {
      uint64_t v25 = "kNone";
    }
    char v26 = off_101A4C0B8[v20];
    if (v23 > 2) {
      unsigned int v27 = "???";
    }
    else {
      unsigned int v27 = off_101A4C0B8[v23];
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = v25;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v26;
    *(_WORD *)&unsigned char buf[22] = 2080;
    unint64_t v55 = v27;
    _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I dataLevel: %s, voiceLevel: %s, desiredLevel: %s", buf, 0x20u);
  }
  if (v23 == 2)
  {
    if (*(void *)(a1 + 352))
    {
      char v38 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Release Baseband Booted Assertion", buf, 2u);
      }
      unint64_t v39 = *(std::__shared_weak_count **)(a1 + 360);
      *(void *)(a1 + 352) = 0;
      *(void *)(a1 + 36sub_10023C164((uint64_t)&a9, 0) = 0;
      if (v39) {
        sub_10004D2C8(v39);
      }
    }
    if (*(void *)(a1 + 368)) {
      goto LABEL_102;
    }
    if (*(unsigned char *)(a1 + 208))
    {
      int v40 = cellplan::RemoteSimSubscriptionInfo::isSimReadyToUse((cellplan::RemoteSimSubscriptionInfo *)(a1 + 216));
      unsigned int v35 = *(NSObject **)(a1 + 40);
      if (v40)
      {
        if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I Acquire Baseband Online Assertion", buf, 2u);
        }
        sub_100058DB0(buf, "/cc/assertions/baseband_online");
        ctu::rest::AssertionHandle::create();
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        long long v41 = *(_OWORD *)__p;
        __p[0] = 0;
        __p[1] = 0;
        unint64_t v37 = *(std::__shared_weak_count **)(a1 + 376);
        *(_OWORD *)(a1 + 368) = v41;
        if (!v37) {
          goto LABEL_102;
        }
        goto LABEL_79;
      }
    }
    else
    {
      unsigned int v35 = *(NSObject **)(a1 + 40);
    }
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_102;
    }
    *(_WORD *)int buf = 0;
    char v46 = "#N Not acquiring Baseband Online Assertion due to iseSIMValid false";
LABEL_101:
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, v46, buf, 2u);
    goto LABEL_102;
  }
  if (v23 != 1)
  {
    if (v23) {
      goto LABEL_102;
    }
    goto LABEL_42;
  }
  if (*(void *)(a1 + 368))
  {
    unint64_t v32 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Release Baseband Online Assertion", buf, 2u);
    }
    uint64_t v33 = *(std::__shared_weak_count **)(a1 + 376);
    *(void *)(a1 + 368) = 0;
    *(void *)(a1 + 376) = 0;
    if (v33) {
      sub_10004D2C8(v33);
    }
  }
  if (*(void *)(a1 + 352)) {
    goto LABEL_102;
  }
  if (!*(unsigned char *)(a1 + 208))
  {
    unsigned int v35 = *(NSObject **)(a1 + 40);
    goto LABEL_96;
  }
  int v34 = cellplan::RemoteSimSubscriptionInfo::isSimReadyToUse((cellplan::RemoteSimSubscriptionInfo *)(a1 + 216));
  unsigned int v35 = *(NSObject **)(a1 + 40);
  if (!v34)
  {
LABEL_96:
    if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_102;
    }
    *(_WORD *)int buf = 0;
    char v46 = "#N Not acquiring Baseband Booted Assertion due to iseSIMValid false";
    goto LABEL_101;
  }
  if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I Acquire Baseband Booted Assertion", buf, 2u);
  }
  sub_100058DB0(buf, "/cc/assertions/baseband_booted");
  ctu::rest::AssertionHandle::create();
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  long long v36 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  unint64_t v37 = *(std::__shared_weak_count **)(a1 + 360);
  *(_OWORD *)(a1 + 352) = v36;
  if (!v37) {
    goto LABEL_102;
  }
LABEL_79:
  sub_10004D2C8(v37);
  unint64_t v31 = (std::__shared_weak_count *)__p[1];
  if (__p[1]) {
LABEL_51:
  }
    sub_10004D2C8(v31);
LABEL_102:
  if (*(void *)(a1 + 368)) {
    int v47 = 1;
  }
  else {
    int v47 = *(void *)(a1 + 352) != 0;
  }
  if (*(unsigned __int8 *)(a1 + 128) != v47)
  {
    *(unsigned char *)(a1 + 128) = v47;
    uint64_t v48 = *(void *)(a1 + 120);
    if (v48) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v48 + 48))(v48, a1 + 128);
    }
  }
}

void sub_100C705EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *aBlock, dispatch_object_t object, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, dispatch_object_t a17, uint64_t a18, void *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,int a29,__int16 a30,char a31,char a32)
{
  if (a28) {
    sub_10004D2C8(a28);
  }
  if ((v33 & 1) == 0) {
    sub_10004D2C8(v32);
  }
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C7071C(uint64_t a1, void **a2)
{
  uint64_t v3 = a1 + 320;
  if ((void **)(a1 + 328) == sub_100046F68(a1 + 320, a2)) {
    return 0;
  }
  uint64_t v4 = sub_10005DDEC(v3, a2);
  return *(_DWORD *)v4 == 1 && *(unsigned char *)(v4 + 8) != 0;
}

BOOL sub_100C70788(uint64_t a1)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  PersonalityIdFromSlotIdEx();
  if ((void **)(a1 + 328) == sub_100046F68(a1 + 320, __p))
  {
    BOOL v4 = 0;
  }
  else
  {
    uint64_t v2 = sub_10005DDEC(a1 + 320, __p);
    BOOL v4 = *(_DWORD *)v2 == 1 && *(unsigned char *)(v2 + 8) == 0;
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
  return v4;
}

void sub_100C70820(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100C7083C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 400);
  if (v1)
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Canceling VoLTE deregistration timer", v6, 2u);
      uint64_t v4 = *(void *)(a1 + 400);
      *(void *)(a1 + 40sub_10023C164((uint64_t)&a9, 0) = 0;
      if (!v4) {
        return v1 != 0;
      }
    }
    else
    {
      *(void *)(a1 + 40sub_10023C164((uint64_t)&a9, 0) = 0;
      uint64_t v4 = v1;
    }
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  return v1 != 0;
}

void sub_100C708F4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 392);
  if (v2)
  {
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Canceling fIMSWifiRegTimer", v4, 2u);
      uint64_t v2 = *(void *)(a1 + 392);
      *(void *)(a1 + 392) = 0;
      if (!v2) {
        goto LABEL_7;
      }
    }
    else
    {
      *(void *)(a1 + 392) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
LABEL_7:
  *(_DWORD *)(a1 + 388) = 0;
}

uint64_t sub_100C709A8(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I fIMSWifiRegTimer fired", v4, 2u);
  }
  sub_100C708F4(v1);
  *(unsigned char *)(v1 + 384) = 1;
  return sub_100C6FA48(v1, 0);
}

uint64_t sub_100C70A28(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I IMS VoLTE deregistration timer fired", v4, 2u);
  }
  sub_100C7083C(v1);
  return sub_100C6FA48(v1, 1);
}

void sub_100C70AA0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 384) || !*(void *)(a1 + 392)) {
    return;
  }
  int v2 = *(_DWORD *)(a1 + 388) + 1;
  *(_DWORD *)(a1 + 388) = v2;
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v2;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I reportIMSConnFailure: wifi registration failure %d times", buf, 8u);
  }
  *(void *)int buf = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  PersonalityIdFromSlotIdEx();
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 64));
  int v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v20 = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, &v20);
  if (!v11)
  {
    uint64_t v13 = 0;
LABEL_14:
    std::mutex::unlock(v6);
    unsigned int v12 = 0;
    char v14 = 1;
    if (!v13) {
      goto LABEL_12;
    }
LABEL_15:
    unint64_t v20 = 0;
    char v21 = 0;
    (*(void (**)(unint64_t *__return_ptr, uint64_t, uint8_t *))(*(void *)v13 + 40))(&v20, v13, buf);
    if (v20)
    {
      CFTypeRef cf = 0;
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v20 + 40))(&cf);
      int v16 = (int *)cf;
      int v15 = 4;
      int v22 = 4;
      if (cf)
      {
        CFTypeID v17 = CFGetTypeID(cf);
        if (v17 == CFNumberGetTypeID())
        {
          ctu::cf::assign((ctu::cf *)&v22, v16, v18);
          int v15 = v22;
        }
        else
        {
          int v15 = 4;
        }
      }
      sub_1000577C4(&cf);
    }
    else
    {
      int v15 = 4;
    }
    if (v21) {
      sub_10004D2C8(v21);
    }
    goto LABEL_24;
  }
  uint64_t v13 = v11[3];
  unsigned int v12 = (std::__shared_weak_count *)v11[4];
  if (!v12) {
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
  if (v13) {
    goto LABEL_15;
  }
LABEL_12:
  int v15 = 4;
LABEL_24:
  if (*(_DWORD *)(a1 + 388) >= v15)
  {
    sub_100C708F4(a1);
    *(unsigned char *)(a1 + 384) = 1;
    sub_100C6FA48(a1, 0);
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100C70D50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v18);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C70DC0(uint64_t a1)
{
  int v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = "TelephonyOndemandController";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: -------------------------- %s --------------------------", buf, 0xCu);
    int v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = asString();
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: fWRMEnableTelephonyOverride: %s", buf, 0xCu);
  }
  uint64_t v42 = 0;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  long long v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  *(_OWORD *)char v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  *(_OWORD *)int buf = 0u;
  sub_10004DE24((uint64_t)buf);
  sub_10004B96C(buf, (uint64_t)"iRat Recommendations: { ", 24);
  for (uint64_t i = 0; i != 3; ++i)
  {
    __p[0] = 40;
    uint64_t v5 = sub_10004B96C(buf, (uint64_t)__p, 1);
    int v6 = (const char *)asString();
    size_t v7 = strlen(v6);
    unsigned int v8 = sub_10004B96C(v5, (uint64_t)v6, v7);
    uint64_t v9 = sub_10004B96C(v8, (uint64_t)": ", 2);
    unsigned int v10 = (const char *)asString();
    size_t v11 = strlen(v10);
    unsigned int v12 = sub_10004B96C(v9, (uint64_t)v10, v11);
    sub_10004B96C(v12, (uint64_t)") ", 2);
  }
  __p[0] = 125;
  sub_10004B96C(buf, (uint64_t)__p, 1);
  uint64_t v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    sub_10004BC98((uint64_t)&buf[8], __p);
    if (v23[9] >= 0) {
      char v14 = __p;
    }
    else {
      char v14 = *(unsigned char **)__p;
    }
    *(_DWORD *)uint64_t v24 = 136315138;
    uint64_t v25 = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DATA:: %s", v24, 0xCu);
    if ((v23[9] & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    uint64_t v13 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = "On";
    if (*(void *)(a1 + 352)) {
      int v16 = "On";
    }
    else {
      int v16 = "Off";
    }
    if (!*(void *)(a1 + 368)) {
      int v15 = "Off";
    }
    *(_DWORD *)long long __p = 136315394;
    *(void *)&__p[4] = v16;
    __int16 v22 = 2080;
    *(void *)unsigned int v23 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DATA:: fBBBootedAssertion: %s, fBBOnlineAssertion: %s", __p, 0x16u);
    uint64_t v13 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asStringBool(*(unsigned char *)(a1 + 384));
    int v18 = *(_DWORD *)(a1 + 388);
    if (*(void *)(a1 + 392)) {
      char v19 = "On";
    }
    else {
      char v19 = "Off";
    }
    *(_DWORD *)long long __p = 136315650;
    *(void *)&__p[4] = v17;
    __int16 v22 = 1024;
    *(_DWORD *)unsigned int v23 = v18;
    *(_WORD *)&_OWORD v23[4] = 2080;
    *(void *)&v23[6] = v19;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I DATA:: fisIMSWifiRegFailed: %s, fIMSConnFailures=%d, fIMSWifiRegTimer is %s", __p, 0x1Cu);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[1]);
  }
  std::streambuf::~streambuf();
  std::ostream::~ostream();
  return std::ios::~ios();
}

void sub_100C71234(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, ...)
{
  va_start(va, a9);
  sub_1000C937C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7125C(uint64_t a1)
{
  sub_100058DB0(__p, (char *)&unk_10164BEAB);
  *(_DWORD *)a1 = 0;
  int v2 = (unsigned char *)(a1 + 8);
  if (SHIBYTE(v6) < 0)
  {
    sub_10004FC84(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v6);
    *(_DWORD *)(a1 + 32) = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)int v2 = *(_OWORD *)__p;
    *(void *)(a1 + 24) = v6;
    *(_DWORD *)(a1 + 32) = 0;
  }
  return a1;
}

void sub_100C712DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C712F8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100C713C4(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100C7149C);
  __cxa_rethrow();
}

void sub_100C713EC(_Unwind_Exception *a1)
{
}

void sub_100C71404(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100C7143C(uint64_t a1)
{
}

uint64_t sub_100C71458(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100C7149C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100C714CC()
{
}

void *sub_100C714E0(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_101A4BD48;
  result[1] = v3;
  return result;
}

uint64_t sub_100C71528(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A4BD48;
  a2[1] = v2;
  return result;
}

void sub_100C71554(uint64_t a1, BOOL *a2)
{
  xpc_object_t v2 = xpc_BOOL_create(*a2);
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/baseband_asserted");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0) {
    operator delete(__p);
  }
  xpc_release(v2);
}

void sub_100C71604(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7164C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C7168C()
{
}

void sub_100C7169C()
{
}

__n128 sub_100C716B0(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4BDC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C71704(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4BDC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C7173C(uint64_t *a1, void **a2)
{
  sub_100992C80(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  char v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100C717B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C717F8()
{
}

void sub_100C71808()
{
}

__n128 sub_100C7181C(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4BE48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C71870(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4BE48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C718A8(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (int *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    int v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)a2, v6);
    *uint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  uint64_t v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  size_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    uint64_t v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_100C71998(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C719D8()
{
}

void sub_100C719E8()
{
}

__n128 sub_100C719FC(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4BEC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C71A50(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4BEC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C71A88(uint64_t *a1, xpc_object_t *a2)
{
  sub_100A5892C(a1[1], a2, "PersonalityID", "State");
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  char v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100C71B14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C71B54()
{
}

void sub_100C71B64()
{
}

__n128 sub_100C71B78(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4BF48;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C71BCC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4BF48;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C71C04(uint64_t a1, cellplan::RemoteSimSubscriptionInfo *a2)
{
  sub_1003C8A7C(*(unsigned char **)(a1 + 8), a2);
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  char v5 = (void *)(*(void *)(a1 + 16) + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100C71C80(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C71CC0()
{
}

void sub_100C71CD0()
{
}

__n128 sub_100C71CE4(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_101A4BFC8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100C71D38(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4BFC8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100C71D70(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_1002430C8((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  unsigned int v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10005CD2C((uint64_t)&v9, v10);
}

void sub_100C71E30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_100C71E48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C71E88()
{
}

void sub_100C71E98()
{
}

__n128 sub_100C71EAC(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x20uLL);
  *(void *)xpc_object_t v2 = off_101A4C048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100C71F00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A4C048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100C71F38(void *a1)
{
  long long v6 = xmmword_1015111A0;
  int v7 = 0;
  read_rest_value();
  xpc_object_t v2 = (uint64_t (*)(void *, long long *))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    xpc_object_t v2 = *(uint64_t (**)(void *, long long *))(*v4 + v2);
  }
  return v2(v4, &v6);
}

uint64_t sub_100C71FC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C72004()
{
}

uint64_t *sub_100C72010(uint64_t a1)
{
  sub_100C62700(a1, "kSubscriberGetSimState", (unint64_t)sub_100C7220C, 3u);
  sub_100C62700(a1, "kSubscriberGetSimTrayStatus", (unint64_t)sub_100C72368, 3u);
  sub_100C62700(a1, "kSubscriberGetMobileEquipmentInfo", (unint64_t)sub_100C724D8, 5u);
  sub_100C62700(a1, "kSubscriberGetFirmwareUpdateData", (unint64_t)sub_100C72684, 5u);
  sub_100C62700(a1, "kSubscriberGetIdentityProperty", (unint64_t)sub_100C72840, 5u);
  sub_100C62630(a1, "kSubscriberEvaluateEncryptedIdentity", (unint64_t)sub_100C7323C, 3u);
  sub_100C62700(a1, "kSubscriberGetPublicProperty", (unint64_t)sub_100C73448, 1u);
  sub_100C62700(a1, "kSubscriberGetProperty", (unint64_t)sub_100C7359C, 3u);
  sub_100C62700(a1, "kSubscriberHomeCountryList", (unint64_t)sub_100C73A84, 3u);
  sub_100C62630(a1, "kSubscriberPinUnlock", (unint64_t)sub_100C73B80, 3u);
  sub_100C62630(a1, "kSubscriberPukUnlock", (unint64_t)sub_100C73D04, 3u);
  sub_100C62700(a1, "kUICCAuthenticationInfo", (unint64_t)sub_100C73F80, 4u);

  return sub_100C62700(a1, "kSubscriberGetDualSimCapability", (unint64_t)sub_100C74850, 3u);
}

void sub_100C7220C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v8[4] = 0;
  uint64_t v9 = 0;
  sGetSubscriberSimInterface();
  xpc_object_t v6 = xpc_int64_create(8);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  v8[0] = *a5;
  v8[1] = "kSubscriberSimState";
  sub_100035E70((uint64_t)v8, &v6, &v7);
  xpc_release(v7);
  xpc_object_t v7 = 0;
  xpc_release(v6);
  xpc_object_t v6 = 0;
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100C72350(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 24);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C72368(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  object[1] = 0;
  uint64_t v9 = 0;
  sGetSubscriberSimInterface();
  xpc_object_t v7 = xpc_int64_create(0);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  v6[0] = *a5;
  v6[1] = "kSubscriberSimTrayStatus";
  sub_100035E70((uint64_t)v6, &v7, object);
  xpc_release(object[0]);
  object[0] = 0;
  xpc_release(v7);
  xpc_object_t v7 = 0;
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100C72494(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C724D8()
{
}

void sub_100C72640(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, std::__shared_weak_count *);
  sub_10010E020((uint64_t *)va1);
  sub_10025B9C0((uint64_t)va);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

void sub_100C72684(capabilities::ct *a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v7 = (capabilities::euicc *)capabilities::ct::supportsVinylFirmwareUpdate(a1);
  if (v7 && (capabilities::euicc::supportsEOS(v7) & 1) == 0)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *(Registry **)a1);
    uint64_t v10 = ServiceMap;
    if ((v11 & 0x8000000000000000) != 0)
    {
      unsigned int v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v13 = 5381;
      do
      {
        unint64_t v11 = v13;
        unsigned int v14 = *v12++;
        uint64_t v13 = (33 * v13) ^ v14;
      }
      while (v14);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v22 = v11;
    int v15 = sub_10004D37C(&v10[1].__m_.__sig, &v22);
    if (v15)
    {
      uint64_t v17 = v15[3];
      int v16 = (std::__shared_weak_count *)v15[4];
      if (v16)
      {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v10);
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v16);
        char v18 = 0;
        if (!v17)
        {
LABEL_16:
          if ((v18 & 1) == 0) {
            sub_10004D2C8(v16);
          }
          return;
        }
LABEL_12:
        v20[0] = _NSConcreteStackBlock;
        v20[1] = 3321888768;
        void v20[2] = sub_100C76374;
        void v20[3] = &unk_101A499F0;
        char v19 = (std::__shared_weak_count *)a5[1];
        v20[4] = *a5;
        char v21 = v19;
        if (v19) {
          atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, void, void *, void))(*(void *)v17 + 136))(v17, 0, v20, 0);
        if (v21) {
          sub_10004D2C8(v21);
        }
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v17 = 0;
    }
    std::mutex::unlock(v10);
    int v16 = 0;
    char v18 = 1;
    if (!v17) {
      goto LABEL_16;
    }
    goto LABEL_12;
  }
}

void sub_100C72818(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  if (a15) {
    sub_10004D2C8(a15);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C72840(Registry **a1@<X0>, xpc_object_t *a2@<X3>, void *a3@<X4>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v70 = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&v70);
  if (!v13)
  {
    uint64_t v15 = 0;
LABEL_9:
    std::mutex::unlock(v8);
    unsigned int v14 = 0;
    char v16 = 1;
    if (!v15) {
      goto LABEL_101;
    }
    goto LABEL_10;
  }
  uint64_t v15 = v13[3];
  unsigned int v14 = (std::__shared_weak_count *)v13[4];
  if (!v14) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
  if (!v15) {
    goto LABEL_101;
  }
LABEL_10:
  if (!xpc_dictionary_get_value(*a2, "kSubscriberImsi")) {
    goto LABEL_35;
  }
  long long v70 = 0uLL;
  uint64_t v71 = 0;
  (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v15 + 200))(v15, 1, 3, &v70);
  uint64_t v17 = HIBYTE(v71);
  if (v71 < 0) {
    uint64_t v17 = *((void *)&v70 + 1);
  }
  if (!v17)
  {
    char v18 = (std::mutex *)Registry::getServiceMap(0, *a1);
    char v19 = v18;
    if (v20 < 0)
    {
      char v21 = (unsigned __int8 *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v22 = 5381;
      do
      {
        uint64_t v20 = v22;
        unsigned int v23 = *v21++;
        uint64_t v22 = (33 * v22) ^ v23;
      }
      while (v23);
    }
    std::mutex::lock(v18);
    *(void *)&long long v68 = v20;
    uint64_t v24 = sub_10004D37C(&v19[1].__m_.__sig, (unint64_t *)&v68);
    unsigned int v51 = a3;
    if (v24)
    {
      uint64_t v26 = v24[3];
      uint64_t v25 = (std::__shared_weak_count *)v24[4];
      if (v25)
      {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v19);
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v25);
        char v27 = 0;
        if (!v26)
        {
LABEL_26:
          a3 = v51;
          if ((v27 & 1) == 0) {
            sub_10004D2C8(v25);
          }
          goto LABEL_28;
        }
LABEL_23:
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v26 + 24))(&v68, v26, 1);
        if (SHIBYTE(v71) < 0) {
          operator delete((void *)v70);
        }
        long long v70 = v68;
        uint64_t v71 = v69;
        goto LABEL_26;
      }
    }
    else
    {
      uint64_t v26 = 0;
    }
    std::mutex::unlock(v19);
    uint64_t v25 = 0;
    char v27 = 1;
    if (!v26) {
      goto LABEL_26;
    }
    goto LABEL_23;
  }
LABEL_28:
  if (v71 >= 0) {
    long long v28 = (const char *)&v70;
  }
  else {
    long long v28 = (const char *)v70;
  }
  xpc_object_t v66 = xpc_string_create(v28);
  if (!v66) {
    xpc_object_t v66 = xpc_null_create();
  }
  *(void *)&long long v68 = *a3;
  *((void *)&v68 + 1) = "kSubscriberImsi";
  sub_100035E70((uint64_t)&v68, &v66, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v66);
  xpc_object_t v66 = 0;
  if (SHIBYTE(v71) < 0) {
    operator delete((void *)v70);
  }
LABEL_35:
  if (xpc_dictionary_get_value(*a2, "kSubscriberIccid"))
  {
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    (*(void (**)(uint64_t, uint64_t, void, long long *))(*(void *)v15 + 200))(v15, 1, 0, &v70);
    if (v71 >= 0) {
      long long v29 = (const char *)&v70;
    }
    else {
      long long v29 = (const char *)v70;
    }
    xpc_object_t v64 = xpc_string_create(v29);
    if (!v64) {
      xpc_object_t v64 = xpc_null_create();
    }
    *(void *)&long long v68 = *a3;
    *((void *)&v68 + 1) = "kSubscriberIccid";
    sub_100035E70((uint64_t)&v68, &v64, &v65);
    xpc_release(v65);
    xpc_object_t v65 = 0;
    xpc_release(v64);
    xpc_object_t v64 = 0;
    if (SHIBYTE(v71) < 0) {
      operator delete((void *)v70);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSubscriberGid1"))
  {
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 176))(&v70, v15, 1, 1);
    char v30 = (void *)v70;
    if ((void)v70 != *((void *)&v70 + 1))
    {
      xpc_object_t v62 = xpc_data_create((const void *)v70, *((void *)&v70 + 1) - v70);
      if (!v62) {
        xpc_object_t v62 = xpc_null_create();
      }
      *(void *)&long long v68 = *a3;
      *((void *)&v68 + 1) = "kSubscriberGid1";
      sub_100035E70((uint64_t)&v68, &v62, &v63);
      xpc_release(v63);
      xpc_object_t v63 = 0;
      xpc_release(v62);
      xpc_object_t v62 = 0;
      char v30 = (void *)v70;
    }
    if (v30)
    {
      *((void *)&v70 + 1) = v30;
      operator delete(v30);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSubscriberGid2"))
  {
    long long v70 = 0uLL;
    uint64_t v71 = 0;
    (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 176))(&v70, v15, 1, 2);
    long long v31 = (void *)v70;
    if ((void)v70 != *((void *)&v70 + 1))
    {
      xpc_object_t v60 = xpc_data_create((const void *)v70, *((void *)&v70 + 1) - v70);
      if (!v60) {
        xpc_object_t v60 = xpc_null_create();
      }
      *(void *)&long long v68 = *a3;
      *((void *)&v68 + 1) = "kSubscriberGid2";
      sub_100035E70((uint64_t)&v68, &v60, &v61);
      xpc_release(v61);
      xpc_object_t v61 = 0;
      xpc_release(v60);
      xpc_object_t v60 = 0;
      long long v31 = (void *)v70;
    }
    if (v31)
    {
      *((void *)&v70 + 1) = v31;
      operator delete(v31);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSubscriberEncryptedIdentity"))
  {
    unsigned int v59 = 0;
    *(void *)&long long v70 = a2;
    *((void *)&v70 + 1) = "kSubscriberEncryptedIdentity";
    sub_100048BAC((uint64_t)&v70, &v58);
    xpc::bridge((uint64_t *)&v68, (xpc *)&v58, v32);
    sub_100056248(&v59, (CFTypeRef *)&v68);
    sub_1000577C4((const void **)&v68);
    xpc_release(v58);
    if (v59) {
      long long v33 = (uint64_t *)sub_1000810B8;
    }
    else {
      long long v33 = 0;
    }
    if (!v33) {
      goto LABEL_100;
    }
    long long v34 = (std::mutex *)Registry::getServiceMap(v33, *a1);
    long long v35 = v34;
    if (v36 < 0)
    {
      long long v37 = (unsigned __int8 *)(v36 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v38 = 5381;
      do
      {
        uint64_t v36 = v38;
        unsigned int v39 = *v37++;
        uint64_t v38 = (33 * v38) ^ v39;
      }
      while (v39);
    }
    std::mutex::lock(v34);
    *(void *)&long long v70 = v36;
    long long v40 = sub_10004D37C(&v35[1].__m_.__sig, (unint64_t *)&v70);
    if (v40)
    {
      uint64_t v42 = v40[3];
      long long v41 = (std::__shared_weak_count *)v40[4];
      if (v41)
      {
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v35);
        atomic_fetch_add_explicit(&v41->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v41);
        if (!v42)
        {
LABEL_99:
          sub_10004D2C8(v41);
          goto LABEL_100;
        }
LABEL_71:
        long long v70 = 0uLL;
        uint64_t v71 = 0;
        PersonalityIdFromSlotId();
        uint64_t v43 = HIBYTE(v71);
        char v44 = HIBYTE(v71);
        if (v71 < 0) {
          uint64_t v43 = *((void *)&v70 + 1);
        }
        if (!v43)
        {
LABEL_96:
          if (v44 < 0) {
            operator delete((void *)v70);
          }
          if (!v41) {
            goto LABEL_100;
          }
          goto LABEL_99;
        }
        xpc_object_t v58 = 0;
        (*(void (**)(xpc_object_t *__return_ptr, uint64_t, long long *, uint64_t, const void *))(*(void *)v42 + 32))(&v58, v42, &v70, 1, v59);
        uint64_t v57 = 0;
        (*(void (**)(ctu **__return_ptr, uint64_t, long long *))(*(void *)v42 + 64))(&v57, v42, &v70);
        xpc_object_t v56 = 0;
        xpc_object_t v45 = xpc_dictionary_create(0, 0, 0);
        xpc_object_t v46 = v45;
        if (v45)
        {
          xpc_object_t v56 = v45;
        }
        else
        {
          xpc_object_t v46 = xpc_null_create();
          xpc_object_t v56 = v46;
          if (!v46)
          {
            xpc_object_t v47 = xpc_null_create();
            xpc_object_t v46 = 0;
            goto LABEL_81;
          }
        }
        if (xpc_get_type(v46) == (xpc_type_t)&_xpc_type_dictionary)
        {
          xpc_retain(v46);
LABEL_82:
          xpc_release(v46);
          if (v58) {
            uint64_t v49 = sub_10008324C;
          }
          else {
            uint64_t v49 = 0;
          }
          if (v49)
          {
            ctu::cf_to_xpc((uint64_t *)&v55, (ctu *)v58, v48);
            sub_100C76294((uint64_t)&v56, @"kCTEncryptedIdentity", &v55);
            xpc_release(v55);
            xpc_object_t v55 = 0;
          }
          if (v57) {
            char v50 = sub_1000810B8;
          }
          else {
            char v50 = 0;
          }
          if (v50)
          {
            ctu::cf_to_xpc((uint64_t *)&v54, v57, v48);
            sub_100C76294((uint64_t)&v56, @"kCTIdentityAnonymousUserName", &v54);
            xpc_release(v54);
            xpc_object_t v54 = 0;
          }
          xpc_object_t v52 = v56;
          if (v56) {
            xpc_retain(v56);
          }
          else {
            xpc_object_t v52 = xpc_null_create();
          }
          *(void *)&long long v68 = *a3;
          *((void *)&v68 + 1) = "kSubscriberEncryptedIdentity";
          sub_10014E03C((uint64_t)&v68, &v52, &v53);
          xpc_release(v53);
          xpc_object_t v53 = 0;
          xpc_release(v52);
          xpc_object_t v52 = 0;
          xpc_release(v56);
          sub_1000558F4((const void **)&v57);
          sub_100030068((const void **)&v58);
          char v44 = HIBYTE(v71);
          goto LABEL_96;
        }
        xpc_object_t v47 = xpc_null_create();
LABEL_81:
        xpc_object_t v56 = v47;
        goto LABEL_82;
      }
      std::mutex::unlock(v35);
      if (v42) {
        goto LABEL_71;
      }
    }
    else
    {
      std::mutex::unlock(v35);
    }
LABEL_100:
    sub_1000558F4(&v59);
  }
LABEL_101:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100C730A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, xpc_object_t a14, const void *a15, xpc_object_t a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  xpc_release(object);
  xpc_release(a14);
  sub_1000558F4(&a15);
  sub_100030068((const void **)&a16);
  if (*(char *)(v29 - 89) < 0) {
    operator delete(*(void **)(v29 - 112));
  }
  if (v27) {
    sub_10004D2C8(v27);
  }
  sub_1000558F4(&a17);
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v26);
  }
  _Unwind_Resume(a1);
}

const void **sub_100C7323C(Registry **a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v24 = 0;
  long long __p = a4;
  uint64_t v20 = "kSubscriberEncryptedIdentity";
  sub_100048BAC((uint64_t)&__p, &object);
  xpc::bridge((uint64_t *)&v23, (xpc *)&object, v5);
  sub_1000C15D8(&v24, &v23);
  sub_1000577C4(&v23);
  xpc_release(object);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  long long __p = (void *)v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&__p);
  if (v13)
  {
    uint64_t v15 = v13[3];
    unsigned int v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      if (!v15)
      {
LABEL_17:
        sub_10004D2C8(v14);
        return sub_100030068(&v24);
      }
    }
    else
    {
      std::mutex::unlock(v8);
      if (!v15) {
        return sub_100030068(&v24);
      }
    }
    long long __p = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    PersonalityIdFromSlotId();
    char v16 = (const char *)HIBYTE(v21);
    char v17 = HIBYTE(v21);
    if (v21 < 0) {
      char v16 = v20;
    }
    if (v16)
    {
      (*(void (**)(uint64_t, void **, uint64_t, const void *))(*(void *)v15 + 48))(v15, &__p, 1, v24);
      char v17 = HIBYTE(v21);
    }
    if (v17 < 0) {
      operator delete(__p);
    }
    if (v14) {
      goto LABEL_17;
    }
  }
  else
  {
    std::mutex::unlock(v8);
  }
  return sub_100030068(&v24);
}

void sub_100C733DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, char a16, int a17, const void *a18)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  sub_100030068(&a18);
  _Unwind_Resume(a1);
}

void sub_100C73448(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t a5)
{
  if (xpc_dictionary_get_value(*a4, "kSubscriberMnc"))
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *a1);
    uint64_t v9 = ServiceMap;
    if ((v10 & 0x8000000000000000) != 0)
    {
      uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        unint64_t v10 = v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v20 = v10;
    unsigned int v14 = sub_10004D37C(&v9[1].__m_.__sig, &v20);
    if (v14)
    {
      uint64_t v16 = v14[3];
      uint64_t v15 = (std::__shared_weak_count *)v14[4];
      if (v15)
      {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v9);
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v15);
        char v17 = 0;
        if (!v16)
        {
LABEL_15:
          if ((v17 & 1) == 0) {
            sub_10004D2C8(v15);
          }
          return;
        }
LABEL_11:
        char v18 = *(std::__shared_weak_count **)(a5 + 8);
        char v19 = v18;
        if (v18) {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        SubscriberUtilityInterface::getSubscriberMnc();
        if (v19) {
          sub_10004D2C8(v19);
        }
        goto LABEL_15;
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    if (!v16) {
      goto LABEL_15;
    }
    goto LABEL_11;
  }
}

void sub_100C73574(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7359C(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v50 = v10;
  unsigned int v14 = sub_10004D37C(&v9[1].__m_.__sig, &v50);
  if (v14)
  {
    uint64_t v16 = v14[3];
    uint64_t v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v18 = 0;
      if (!v16) {
        goto LABEL_18;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  uint64_t v15 = 0;
  char v18 = 1;
  if (!v16) {
    goto LABEL_18;
  }
LABEL_10:
  if (xpc_dictionary_get_value(*a4, "kSubscriberPinRetryCount"))
  {
    uint64_t v20 = *a5;
    uint64_t v19 = a5[1];
    if (v19) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
    }
    v52[0] = off_101A4C2F0;
    v52[1] = v20;
    v52[2] = v19;
    v52[3] = v52;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 128))(v16, 1, v52);
    sub_1000F8E94(v52);
  }
  if (xpc_dictionary_get_value(*a4, "kSubscriberPukRetryCount"))
  {
    uint64_t v22 = *a5;
    uint64_t v21 = a5[1];
    if (v21) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v21 + 8), 1uLL, memory_order_relaxed);
    }
    v51[0] = off_101A4C370;
    v51[1] = v22;
    v51[2] = v21;
    v51[3] = v51;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 136))(v16, 1, v51);
    sub_1000F8E94(v51);
  }
LABEL_18:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  unsigned int v23 = (std::mutex *)Registry::getServiceMap(v17, *a1);
  uint64_t v24 = v23;
  if ((v25 & 0x8000000000000000) != 0)
  {
    uint64_t v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v27 = 5381;
    do
    {
      unint64_t v25 = v27;
      unsigned int v28 = *v26++;
      uint64_t v27 = (33 * v27) ^ v28;
    }
    while (v28);
  }
  std::mutex::lock(v23);
  unint64_t v50 = v25;
  uint64_t v29 = sub_10004D37C(&v24[1].__m_.__sig, &v50);
  if (v29)
  {
    uint64_t v31 = v29[3];
    char v30 = (std::__shared_weak_count *)v29[4];
    if (v30)
    {
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v24);
      atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v30);
      char v32 = 0;
      if (!v31) {
        goto LABEL_39;
      }
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v31 = 0;
  }
  std::mutex::unlock(v24);
  char v30 = 0;
  char v32 = 1;
  if (!v31) {
    goto LABEL_39;
  }
LABEL_29:
  if (xpc_dictionary_get_value(*a4, "kSubscriberMcc"))
  {
    long long v33 = (std::__shared_weak_count *)a5[1];
    uint64_t v49 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SubscriberUtilityInterface::getSubscriberMcc();
    if (v49) {
      sub_10004D2C8(v49);
    }
  }
  if (xpc_dictionary_get_value(*a4, "kSubscriberLastKnownMcc"))
  {
    long long v34 = (std::__shared_weak_count *)a5[1];
    uint64_t v48 = v34;
    if (v34) {
      atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    SubscriberUtilityInterface::getLastKnownSubscriberMcc();
    if (v48) {
      sub_10004D2C8(v48);
    }
  }
LABEL_39:
  if ((v32 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  if (xpc_dictionary_get_value(*a4, "kSubscriberNetworkSelectionMenuAvailable"))
  {
    uint64_t v36 = (std::mutex *)Registry::getServiceMap(v35, *a1);
    long long v37 = v36;
    if ((v38 & 0x8000000000000000) != 0)
    {
      unsigned int v39 = (unsigned __int8 *)(v38 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v40 = 5381;
      do
      {
        unint64_t v38 = v40;
        unsigned int v41 = *v39++;
        uint64_t v40 = (33 * v40) ^ v41;
      }
      while (v41);
    }
    std::mutex::lock(v36);
    unint64_t v50 = v38;
    uint64_t v42 = sub_10004D37C(&v37[1].__m_.__sig, &v50);
    if (v42)
    {
      uint64_t v44 = v42[3];
      uint64_t v43 = (std::__shared_weak_count *)v42[4];
      if (v43)
      {
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v37);
        atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v43);
        char v45 = 0;
        if (!v44)
        {
LABEL_55:
          if ((v45 & 1) == 0) {
            sub_10004D2C8(v43);
          }
          return;
        }
LABEL_51:
        xpc_object_t v46 = (std::__shared_weak_count *)a5[1];
        xpc_object_t v47 = v46;
        if (v46) {
          atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        RegistrationInterface::isNetworkSelectionMenuEnabled();
        if (v47) {
          sub_10004D2C8(v47);
        }
        goto LABEL_55;
      }
    }
    else
    {
      uint64_t v44 = 0;
    }
    std::mutex::unlock(v37);
    uint64_t v43 = 0;
    char v45 = 1;
    if (!v44) {
      goto LABEL_55;
    }
    goto LABEL_51;
  }
}

void sub_100C739E8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C73A84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  sub_100058DB0(&__p, "/cc/prefs-nb/user_default_voice_slot");
  uint64_t v6 = *(std::__shared_weak_count **)(a5 + 8);
  uint64_t v7 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  ctu::RestModule::getPropertyOnce();
  if (v9 < 0) {
    operator delete(__p);
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_100C73B58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C73B80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9[0] = 0;
  v9[1] = 0;
  uint64_t v10 = 0;
  v7[0] = a4;
  v7[1] = "kSubscriberPin";
  sub_100048BAC((uint64_t)v7, &object);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v13) < 0) {
    operator delete(v11);
  }
  xpc_release(object);
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sGetSubscriberSimInterface();
  uint64_t v4 = v11;
  if (v11)
  {
    if (SHIBYTE(v10) < 0)
    {
      sub_10004FC84(__p, v9[0], (unint64_t)v9[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v9;
      uint64_t v6 = v10;
    }
    (*(void (**)(void *, uint64_t, void **))(*(void *)v4 + 104))(v4, 1, __p);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[0]);
  }
}

void sub_100C73C94(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, xpc_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  unint64_t v25 = *(std::__shared_weak_count **)(v23 - 32);
  if (v25) {
    sub_10004D2C8(v25);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C73D04(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  v12[0] = a4;
  v12[1] = "kSubscriberPin";
  sub_100048BAC((uint64_t)v12, object);
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v18) < 0) {
    operator delete(v16);
  }
  xpc_release(object[0]);
  v12[0] = 0;
  v12[1] = 0;
  uint64_t v13 = 0;
  object[0] = a4;
  object[1] = "kSubscriberPuk";
  sub_100048BAC((uint64_t)object, &v11);
  uint64_t v16 = 0;
  char v17 = 0;
  uint64_t v18 = 0;
  xpc::dyn_cast_or_default();
  if (SHIBYTE(v18) < 0) {
    operator delete(v16);
  }
  xpc_release(v11);
  uint64_t v16 = 0;
  char v17 = 0;
  sGetSubscriberSimInterface();
  uint64_t v5 = v16;
  if (v16)
  {
    if (SHIBYTE(v13) < 0)
    {
      sub_10004FC84(__dst, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)v12;
      uint64_t v9 = v13;
    }
    if (SHIBYTE(v15) < 0)
    {
      sub_10004FC84(__p, (void *)v14, *((unint64_t *)&v14 + 1));
    }
    else
    {
      *(_OWORD *)long long __p = v14;
      uint64_t v7 = v15;
    }
    (*(void (**)(void *, uint64_t, void **, void **))(*(void *)v5 + 112))(v5, 1, __dst, __p);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(__dst[0]);
    }
  }
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
}

void sub_100C73EB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,xpc_object_t a23,uint64_t a24,xpc_object_t object,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  long long v33 = *(std::__shared_weak_count **)(v31 - 32);
  if (v33) {
    sub_10004D2C8(v33);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v31 - 41) < 0) {
    operator delete(*(void **)(v31 - 64));
  }
  _Unwind_Resume(exception_object);
}

void sub_100C73F80(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  v9[1] = 0;
  uint64_t v10 = 0;
  sGetSubscriberSimInterface();
  sub_100C7659C();
  uint64_t v6 = qword_101B12A58;
  if (os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)int buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#N Subscriber service is not running", buf, 2u);
  }
  xpc_object_t v8 = xpc_int64_create(19);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  *(void *)int buf = *a5;
  *(void *)&uint8_t buf[8] = "kPosixError";
  sub_100035E70((uint64_t)buf, &v8, v9);
  xpc_release(v9[0]);
  v9[0] = 0;
  xpc_release(v8);
  xpc_object_t v8 = 0;
  if (v10) {
    sub_10004D2C8(v10);
  }
}

void sub_100C746B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, long long a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,xpc_object_t a46,char a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,char a53)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100C74850(capabilities::ct *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  if ((capabilities::ct::supportsGemini(a1) & 1) == 0)
  {
    xpc_object_t v26 = xpc_int64_create(3);
    if (!v26) {
      xpc_object_t v26 = xpc_null_create();
    }
    unint64_t v24 = *a5;
    unint64_t v25 = "kSubscriberDualSimCapabilityKey";
    sub_100035E70((uint64_t)&v24, &v26, &v27);
    xpc_release(v27);
    xpc_object_t v27 = 0;
    xpc_release(v26);
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *(Registry **)a1);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    xpc_object_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v24 = v10;
  long long v14 = sub_10004D37C(&v9[1].__m_.__sig, &v24);
  if (!v14)
  {
    uint64_t v16 = 0;
LABEL_18:
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    if (!v16)
    {
LABEL_8:
      xpc_object_t v22 = xpc_int64_create(45);
      if (!v22) {
        xpc_object_t v22 = xpc_null_create();
      }
      unint64_t v24 = *a5;
      unint64_t v25 = "kPosixError";
      sub_100035E70((uint64_t)&v24, &v22, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_object_t v20 = xpc_int64_create(4);
      if (!v20) {
        xpc_object_t v20 = xpc_null_create();
      }
      unint64_t v24 = *a5;
      unint64_t v25 = "kSubscriberDualSimCapabilityKey";
      sub_100035E70((uint64_t)&v24, &v20, &v21);
      xpc_release(v21);
      xpc_object_t v21 = 0;
      xpc_release(v20);
      xpc_object_t v20 = 0;
      if (v17) {
        return;
      }
LABEL_22:
      sub_10004D2C8(v15);
      return;
    }
    goto LABEL_19;
  }
  uint64_t v16 = v14[3];
  uint64_t v15 = (std::__shared_weak_count *)v14[4];
  if (!v15) {
    goto LABEL_18;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v9);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  char v17 = 0;
  if (!v16) {
    goto LABEL_8;
  }
LABEL_19:
  unint64_t v19 = *a5;
  unint64_t v18 = a5[1];
  if (v18) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
  }
  v28[0] = off_101A4C520;
  v28[1] = v19;
  void v28[2] = v18;
  v28[3] = v28;
  (*(void (**)(uint64_t, void *))(*(void *)v16 + 144))(v16, v28);
  sub_100008E40(v28);
  if ((v17 & 1) == 0) {
    goto LABEL_22;
  }
}

void sub_100C74ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void *sub_100C74B30(void *a1)
{
  *a1 = off_101A4C0E0;
  xpc_object_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C74B7C(void *a1)
{
  *a1 = off_101A4C0E0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C74BE8(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A4C0E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C74C44(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A4C0E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C74C7C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C74C8C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C74CCC(uint64_t a1, _DWORD *a2)
{
  int v3 = *a2 - 1;
  if (v3 > 2) {
    int64_t v4 = 0;
  }
  else {
    int64_t v4 = qword_10155FFB0[v3];
  }
  xpc_object_t v6 = xpc_int64_create(v4);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  v5[0] = *(void *)(a1 + 8);
  v5[1] = "kSubscriberSimTrayStatus";
  sub_100035E70((uint64_t)v5, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

uint64_t sub_100C74D70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C74DB0()
{
}

void *sub_100C74DBC(void *a1)
{
  *a1 = off_101A4C170;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_100C74E14(void *a1)
{
  *a1 = off_101A4C170;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

void *sub_100C74E8C(void *a1)
{
  __n128 result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  void *result = off_101A4C170;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_100C74F00(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_101A4C170;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C74F50(uint64_t a1)
{
}

void sub_100C74F58(void *a1)
{
  sub_10000ACD0((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_100C74F94(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  CFTypeRef v2 = cf;
  *a2 = 0;
  if (v2) {
    uint64_t v3 = (uint64_t *)sub_100080778;
  }
  else {
    uint64_t v3 = 0;
  }
  if (!v3) {
    return sub_100057D78(&cf);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 8));
  xpc_object_t v6 = ServiceMap;
  uint64_t v7 = "22CellularPlanController";
  if (((unint64_t)"22CellularPlanController" & 0x8000000000000000) != 0)
  {
    xpc_object_t v8 = (unsigned __int8 *)((unint64_t)"22CellularPlanController" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = (const char *)v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  v39[0] = v7;
  xpc_object_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)v39);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v15 = 0;
      if (!v13) {
        goto LABEL_11;
      }
LABEL_22:
      uint64_t v27 = *(void *)(a1 + 24);
      xpc_object_t v26 = *(std::__shared_weak_count **)(a1 + 32);
      uint64_t v36 = v27;
      long long v37 = v26;
      if (v26) {
        atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      CFTypeRef v28 = cf;
      CFTypeRef v38 = cf;
      if (cf) {
        CFRetain(cf);
      }
      uint64_t v40 = 0;
      uint64_t v29 = operator new(0x20uLL);
      *uint64_t v29 = off_101A4C1E0;
      v29[1] = v27;
      long long v37 = 0;
      CFTypeRef v38 = 0;
      uint64_t v36 = 0;
      CFTypeRef v29[2] = v26;
      v29[3] = v28;
      uint64_t v40 = v29;
      (*(void (**)(uint64_t, const void **))(*(void *)v13 + 624))(v13, v39);
      sub_10030D8B4(v39);
      sub_100057D78(&v38);
      uint64_t v23 = v37;
      if (!v37) {
        goto LABEL_28;
      }
      goto LABEL_27;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v15 = 1;
  if (v13) {
    goto LABEL_22;
  }
LABEL_11:
  uint64_t v16 = (std::mutex *)Registry::getServiceMap(v14, *(Registry **)(a1 + 8));
  char v17 = v16;
  unint64_t v18 = "N8cellplan36CellularPlanControllerWatchInterfaceE";
  if (((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x8000000000000000) != 0)
  {
    unint64_t v19 = (unsigned __int8 *)((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      unint64_t v18 = (const char *)v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(v16);
  v39[0] = v18;
  xpc_object_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)v39);
  if (!v22)
  {
    uint64_t v24 = 0;
LABEL_32:
    std::mutex::unlock(v17);
    uint64_t v23 = 0;
    char v25 = 1;
    if (!v24) {
      goto LABEL_17;
    }
    goto LABEL_33;
  }
  uint64_t v24 = v22[3];
  uint64_t v23 = (std::__shared_weak_count *)v22[4];
  if (!v23) {
    goto LABEL_32;
  }
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v17);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v23);
  char v25 = 0;
  if (!v24)
  {
LABEL_17:
    v39[0] = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v36 = 0;
    sub_100C75434((xpc_object_t *)(a1 + 24), (ctu *)cf, &v36);
    sub_100057D78(v39);
    goto LABEL_39;
  }
LABEL_33:
  uint64_t v32 = *(void *)(a1 + 24);
  uint64_t v31 = *(std::__shared_weak_count **)(a1 + 32);
  uint64_t v36 = v32;
  long long v37 = v31;
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CFTypeRef v33 = cf;
  CFTypeRef v38 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v40 = 0;
  long long v34 = operator new(0x20uLL);
  *long long v34 = off_101A4C260;
  v34[1] = v32;
  long long v37 = 0;
  CFTypeRef v38 = 0;
  uint64_t v36 = 0;
  void v34[2] = v31;
  v34[3] = v33;
  uint64_t v40 = v34;
  (*(void (**)(uint64_t, const void **))(*(void *)v24 + 64))(v24, v39);
  sub_10030D8B4(v39);
  sub_100057D78(&v38);
  if (v37) {
    sub_10004D2C8(v37);
  }
LABEL_39:
  if ((v25 & 1) == 0) {
LABEL_27:
  }
    sub_10004D2C8(v23);
LABEL_28:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  return sub_100057D78(&cf);
}

void sub_100C75330(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C753E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C75428()
{
}

void sub_100C75434(xpc_object_t *a1, ctu *this, uint64_t *a3)
{
  ctu::cf_to_xpc((uint64_t *)object, this, this);
  xpc_object_t v5 = object[0];
  xpc_object_t v25 = object[0];
  if (object[0] && xpc_get_type(object[0]) == (xpc_type_t)&_xpc_type_dictionary) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  xpc_release(object[0]);
  uint64_t v6 = *a3;
  if (!*a3 || *(_DWORD *)v6 != 1) {
    goto LABEL_47;
  }
  uint64_t v7 = (const char *)(v6 + 8);
  if (*(char *)(v6 + 31) < 0)
  {
    if (!*(void *)(v6 + 16)) {
      goto LABEL_15;
    }
    uint64_t v7 = *(const char **)v7;
  }
  else if (!*(unsigned char *)(v6 + 31))
  {
    goto LABEL_15;
  }
  xpc_object_t v8 = xpc_string_create(v7);
  uint64_t v24 = v8;
  if (!v8)
  {
    xpc_object_t v8 = xpc_null_create();
    uint64_t v24 = v8;
  }
  sub_100C76294((uint64_t)&v25, @"kCTMobileEquipmentInfoDisplayCSN", &v24);
  xpc_release(v8);
  uint64_t v24 = 0;
  uint64_t v6 = *a3;
LABEL_15:
  uint64_t v9 = (const char *)(v6 + 32);
  if (*(char *)(v6 + 55) < 0)
  {
    if (!*(void *)(v6 + 40)) {
      goto LABEL_23;
    }
    uint64_t v9 = *(const char **)v9;
  }
  else if (!*(unsigned char *)(v6 + 55))
  {
    goto LABEL_23;
  }
  xpc_object_t v10 = xpc_string_create(v9);
  uint64_t v23 = v10;
  if (!v10)
  {
    xpc_object_t v10 = xpc_null_create();
    uint64_t v23 = v10;
  }
  sub_100C76294((uint64_t)&v25, @"kCTMobileEquipmentInfoCSN", &v23);
  xpc_release(v10);
  uint64_t v23 = 0;
  uint64_t v6 = *a3;
LABEL_23:
  xpc_object_t v11 = (const char *)(v6 + 56);
  if (*(char *)(v6 + 79) < 0)
  {
    if (!*(void *)(v6 + 64)) {
      goto LABEL_31;
    }
    xpc_object_t v11 = *(const char **)v11;
  }
  else if (!*(unsigned char *)(v6 + 79))
  {
    goto LABEL_31;
  }
  xpc_object_t v12 = xpc_string_create(v11);
  xpc_object_t v22 = v12;
  if (!v12)
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v22 = v12;
  }
  sub_100C76294((uint64_t)&v25, @"kCTMobileEquipmentInfoEffectiveICCID", &v22);
  xpc_release(v12);
  xpc_object_t v22 = 0;
  uint64_t v6 = *a3;
LABEL_31:
  uint64_t v13 = (const char *)(v6 + 104);
  if ((*(char *)(v6 + 127) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v6 + 127)) {
      goto LABEL_39;
    }
LABEL_36:
    xpc_object_t v14 = xpc_string_create(v13);
    unsigned int v21 = v14;
    if (!v14)
    {
      xpc_object_t v14 = xpc_null_create();
      unsigned int v21 = v14;
    }
    sub_100C76294((uint64_t)&v25, @"kCTMobileEquipmentInfoBaseId", &v21);
    xpc_release(v14);
    unsigned int v21 = 0;
    uint64_t v6 = *a3;
    goto LABEL_39;
  }
  if (*(void *)(v6 + 112))
  {
    uint64_t v13 = *(const char **)v13;
    goto LABEL_36;
  }
LABEL_39:
  char v15 = (const char *)(v6 + 128);
  if (*(char *)(v6 + 151) < 0)
  {
    if (!*(void *)(v6 + 136)) {
      goto LABEL_47;
    }
    char v15 = *(const char **)v15;
  }
  else if (!*(unsigned char *)(v6 + 151))
  {
    goto LABEL_47;
  }
  xpc_object_t v16 = xpc_string_create(v15);
  uint64_t v20 = v16;
  if (!v16)
  {
    xpc_object_t v16 = xpc_null_create();
    uint64_t v20 = v16;
  }
  sub_100C76294((uint64_t)&v25, @"kCTMobileEquipmentInfoBaseVersion", &v20);
  xpc_release(v16);
  uint64_t v20 = 0;
LABEL_47:
  xpc_object_t v18 = v25;
  if (v25) {
    xpc_retain(v25);
  }
  else {
    xpc_object_t v18 = xpc_null_create();
  }
  object[0] = *a1;
  object[1] = "kSubscriberInfoDictionary";
  sub_10014E03C((uint64_t)object, &v18, &v19);
  xpc_release(v19);
  xpc_object_t v19 = 0;
  xpc_release(v18);
  xpc_object_t v18 = 0;
  xpc_release(v25);
}

void sub_100C75734(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16)
{
  xpc_release(v16);
  xpc_release(*(xpc_object_t *)(v17 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_100C757F8(uint64_t a1)
{
  *(void *)a1 = off_101A4C1E0;
  sub_100057D78((const void **)(a1 + 24));
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C75848(uint64_t a1)
{
  *(void *)a1 = off_101A4C1E0;
  sub_100057D78((const void **)(a1 + 24));
  CFTypeRef v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

const void **sub_100C758B8(uint64_t a1)
{
  CFTypeRef v2 = (const void **)operator new(0x20uLL);
  uint64_t v3 = v2;
  xpc_object_t v5 = *(const void **)(a1 + 8);
  uint64_t v4 = *(atomic_ullong **)(a1 + 16);
  *CFTypeRef v2 = off_101A4C1E0;
  v2[1] = v5;
  void v2[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  }
  sub_100058198(v2 + 3, (const void **)(a1 + 24));
  return v3;
}

const void **sub_100C75928(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_101A4C1E0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_100058198((const void **)(a2 + 24), (const void **)(a1 + 24));
}

void sub_100C7596C(uint64_t a1)
{
}

void sub_100C75974(void *a1)
{
  sub_100C75BC0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100C759B0(uint64_t a1, int *a2)
{
  int v10 = *a2;
  long long v11 = *(_OWORD *)(a2 + 2);
  uint64_t v12 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  long long v13 = *((_OWORD *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 6);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  long long v15 = *(_OWORD *)(a2 + 14);
  uint64_t v16 = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  long long v2 = *((_OWORD *)a2 + 5);
  uint64_t v18 = *((void *)a2 + 12);
  long long v17 = v2;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  long long v3 = *(_OWORD *)(a2 + 26);
  uint64_t v20 = *((void *)a2 + 15);
  long long v19 = v3;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v4 = *((void *)a2 + 18);
  long long v21 = *((_OWORD *)a2 + 8);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v5 = *(_OWORD *)(a2 + 38);
  uint64_t v6 = *((void *)a2 + 21);
  uint64_t v22 = v4;
  uint64_t v24 = v6;
  long long v23 = v5;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 2sub_10023C164((uint64_t)&a9, 0) = 0;
  uint64_t v7 = *((void *)a2 + 24);
  long long v25 = *((_OWORD *)a2 + 11);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v8 = *(_OWORD *)(a2 + 50);
  uint64_t v9 = *((void *)a2 + 27);
  uint64_t v26 = v7;
  uint64_t v28 = v9;
  long long v27 = v8;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  sub_100058198(&v29, (const void **)(a1 + 24));
  operator new();
}

void sub_100C75B28()
{
  sub_10030E938(v0);
  operator delete();
}

uint64_t sub_100C75B74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C75BB4()
{
}

void sub_100C75BC0(uint64_t a1)
{
  sub_100057D78((const void **)(a1 + 16));
  long long v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t sub_100C75C0C(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = v7;
  }
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 104), *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v8;
  }
  if (*(char *)(a2 + 151) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 128), *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v9;
  }
  if (*(char *)(a2 + 175) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 152), *(void **)(a2 + 152), *(void *)(a2 + 160));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v10;
  }
  if (*(char *)(a2 + 199) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 176), *(void **)(a2 + 176), *(void *)(a2 + 184));
  }
  else
  {
    long long v11 = *(_OWORD *)(a2 + 176);
    *(void *)(a1 + 192) = *(void *)(a2 + 192);
    *(_OWORD *)(a1 + 176) = v11;
  }
  uint64_t v12 = (unsigned char *)(a1 + 200);
  if (*(char *)(a2 + 223) < 0)
  {
    sub_10004FC84(v12, *(void **)(a2 + 200), *(void *)(a2 + 208));
  }
  else
  {
    long long v13 = *(_OWORD *)(a2 + 200);
    *(void *)(a1 + 216) = *(void *)(a2 + 216);
    *(_OWORD *)uint64_t v12 = v13;
  }
  return a1;
}

void sub_100C75E08(_Unwind_Exception *exception_object)
{
  if (v1[199] < 0) {
    operator delete(*v9);
  }
  if (v1[175] < 0) {
    operator delete(*v8);
  }
  if (v1[151] < 0) {
    operator delete(*v7);
  }
  if (v1[127] < 0) {
    operator delete(*v6);
  }
  if (v1[103] < 0) {
    operator delete(*v5);
  }
  if (v1[79] < 0) {
    operator delete(*v4);
  }
  if (v1[55] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C75ECC(uint64_t a1)
{
  *(void *)a1 = off_101A4C260;
  sub_100057D78((const void **)(a1 + 24));
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C75F1C(uint64_t a1)
{
  *(void *)a1 = off_101A4C260;
  sub_100057D78((const void **)(a1 + 24));
  long long v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

const void **sub_100C75F8C(uint64_t a1)
{
  long long v2 = (const void **)operator new(0x20uLL);
  long long v3 = v2;
  long long v5 = *(const void **)(a1 + 8);
  long long v4 = *(atomic_ullong **)(a1 + 16);
  *long long v2 = off_101A4C260;
  v2[1] = v5;
  void v2[2] = v4;
  if (v4) {
    atomic_fetch_add_explicit(v4 + 1, 1uLL, memory_order_relaxed);
  }
  sub_100058198(v2 + 3, (const void **)(a1 + 24));
  return v3;
}

const void **sub_100C75FFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 16);
  *(void *)a2 = off_101A4C260;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_100058198((const void **)(a2 + 24), (const void **)(a1 + 24));
}

void sub_100C76040(uint64_t a1)
{
}

void sub_100C76048(void *a1)
{
  sub_100C75BC0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100C76084(uint64_t a1, int *a2)
{
  int v10 = *a2;
  long long v11 = *(_OWORD *)(a2 + 2);
  uint64_t v12 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  long long v13 = *((_OWORD *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 6);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  long long v15 = *(_OWORD *)(a2 + 14);
  uint64_t v16 = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  long long v2 = *((_OWORD *)a2 + 5);
  uint64_t v18 = *((void *)a2 + 12);
  long long v17 = v2;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  long long v3 = *(_OWORD *)(a2 + 26);
  uint64_t v20 = *((void *)a2 + 15);
  long long v19 = v3;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v4 = *((void *)a2 + 18);
  long long v21 = *((_OWORD *)a2 + 8);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v5 = *(_OWORD *)(a2 + 38);
  uint64_t v6 = *((void *)a2 + 21);
  uint64_t v22 = v4;
  uint64_t v24 = v6;
  long long v23 = v5;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 2sub_10023C164((uint64_t)&a9, 0) = 0;
  uint64_t v7 = *((void *)a2 + 24);
  long long v25 = *((_OWORD *)a2 + 11);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v8 = *(_OWORD *)(a2 + 50);
  uint64_t v9 = *((void *)a2 + 27);
  uint64_t v26 = v7;
  uint64_t v28 = v9;
  long long v27 = v8;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  sub_100058198(&v29, (const void **)(a1 + 24));
  operator new();
}

void sub_100C761FC()
{
  sub_10030E938(v0);
  operator delete();
}

uint64_t sub_100C76248(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C76288()
{
}

void sub_100C76294(uint64_t a1, uint64_t a2, void **a3)
{
  long long v11 = 0uLL;
  uint64_t v12 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long __p = 0uLL;
  uint64_t v10 = 0;
  long long v5 = *a3;
  xpc_object_t v7 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v6 = __p;
  if (v10 < 0) {
    uint64_t v6 = (void **)__p[0];
  }
  *(void *)&long long v11 = a1;
  *((void *)&v11 + 1) = v6;
  sub_100035E70((uint64_t)&v11, &v7, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v7);
  xpc_object_t v7 = 0;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100C76358(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C76374(uint64_t a1, void *a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 1)
  {
    xpc_object_t v7 = (ctu *)a2[1];
    if (v7) {
      long long v8 = sub_100080778;
    }
    else {
      long long v8 = 0;
    }
    if (v8)
    {
      ctu::cf_to_xpc((uint64_t *)&v16, v7, a2);
      *(void *)int buf = *(void *)(a1 + 32);
      long long v15 = "kSubscriberFirmwareUpdateInfoDictionary";
      sub_100035E70((uint64_t)buf, &v16, &v17);
      xpc_release(v17);
      xpc_object_t v17 = 0;
      xpc_release(v16);
    }
  }
  else
  {
    if (v3 != 2)
    {
      exception = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    int v4 = *((unsigned __int8 *)a2 + 8);
    sub_100C7659C();
    long long v5 = qword_101B12A58;
    BOOL v6 = os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_DEFAULT);
    if (v4 == 19)
    {
      if (v6)
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Driver not ready", buf, 2u);
      }
      xpc_object_t v12 = xpc_int64_create(35);
      if (!v12) {
        xpc_object_t v12 = xpc_null_create();
      }
      *(void *)int buf = *(void *)(a1 + 32);
      long long v15 = "kError";
      sub_100035E70((uint64_t)buf, &v12, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v12);
    }
    else
    {
      if (v6)
      {
        *(_WORD *)int buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Get Vinyl FW Update Info error", buf, 2u);
      }
      xpc_object_t v10 = xpc_int64_create(22);
      if (!v10) {
        xpc_object_t v10 = xpc_null_create();
      }
      *(void *)int buf = *(void *)(a1 + 32);
      long long v15 = "kError";
      sub_100035E70((uint64_t)buf, &v10, &v11);
      xpc_release(v11);
      xpc_object_t v11 = 0;
      xpc_release(v10);
    }
  }
}

void sub_100C76568(_Unwind_Exception *a1)
{
  __cxa_free_exception(v1);
  _Unwind_Resume(a1);
}

void sub_100C7659C()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)qword_101B12A60, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(qword_101B12A60))
  {
    LogGroupName = (const char *)sGetLogGroupName();
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&qword_101B12A58, kCtLoggingSystemName, LogGroupName);
    __cxa_guard_release(qword_101B12A60);
  }
}

void sub_100C76620(_Unwind_Exception *a1)
{
}

void *sub_100C76638(void *a1)
{
  *a1 = off_101A4C2F0;
  long long v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C76684(void *a1)
{
  *a1 = off_101A4C2F0;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C766F0(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A4C2F0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C7674C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A4C2F0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C76784(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C76794(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C767D4(uint64_t a1, int *a2)
{
  xpc_object_t v4 = xpc_int64_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kSubscriberPinRetryCount";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_100C76858(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C76898()
{
}

void *sub_100C768A4(void *a1)
{
  *a1 = off_101A4C370;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C768F0(void *a1)
{
  *a1 = off_101A4C370;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C7695C(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A4C370;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C769B8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A4C370;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C769F0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C76A00(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C76A40(uint64_t a1, int *a2)
{
  xpc_object_t v4 = xpc_int64_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kSubscriberPukRetryCount";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_100C76AC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C76B04()
{
}

void sub_100C76B10(uint64_t a1, xpc_object_t *a2)
{
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_null) {
    goto LABEL_14;
  }
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    *(_DWORD *)int buf = 0;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)buf, (int *)a2, v5);
    uint64_t v8 = *(unsigned int *)buf;
    if (*(_DWORD *)buf) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v6 = type == (xpc_type_t)&_xpc_type_BOOL || type == (xpc_type_t)&_xpc_type_int64;
  BOOL v7 = v6 || type == (xpc_type_t)&_xpc_type_uint64;
  if (!v7 || (uint64_t v8 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v5), !v8)) {
LABEL_14:
  }
    uint64_t v8 = 1;
LABEL_15:
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(uint64_t **)(a1 + 32), **(Registry ***)(a1 + 32));
  xpc_object_t v10 = ServiceMap;
  if (v11 < 0)
  {
    xpc_object_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int buf = v11;
  long long v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    xpc_object_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_21;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  xpc_object_t v16 = 0;
  char v18 = 1;
  if (!v17)
  {
LABEL_21:
    sub_100C7659C();
    long long v19 = qword_101B12A58;
    if (os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "SubscriberUtilityInterface not found", buf, 2u);
    }
    goto LABEL_37;
  }
LABEL_25:
  uint64_t v20 = *(uint64_t **)(a1 + 32);
  uint64_t v21 = *v20;
  uint64_t v22 = (std::__shared_weak_count *)v20[1];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v24 = *(void *)(a1 + 40);
  long long v23 = *(std::__shared_weak_count **)(a1 + 48);
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = 0;
  long long v25 = operator new(0x30uLL);
  *(void *)long long v25 = off_101A4C420;
  void v25[2] = v8;
  *((void *)v25 + 2) = v21;
  *((void *)v25 + 3) = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  *((void *)v25 + 4) = v24;
  *((void *)v25 + 5) = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v28 = v25;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v17 + 48))(v17, v8, v27);
  sub_100033230(v27);
  if (v23) {
    sub_10004D2C8(v23);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
LABEL_37:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
}

void sub_100C76DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16)
{
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C76E3C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void *sub_100C76E78(void *a1)
{
  *a1 = off_101A4C420;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_100C76ED0(void *a1)
{
  *a1 = off_101A4C420;
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

_DWORD *sub_100C76F48(uint64_t a1)
{
  __n128 result = operator new(0x30uLL);
  *(void *)__n128 result = off_101A4C420;
  result[2] = *(_DWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 2) = *(void *)(a1 + 16);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a1 + 40);
  *((void *)result + 4) = *(void *)(a1 + 32);
  *((void *)result + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C76FC4(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A4C420;
  *(_DWORD *)(a2 + 8) = *(_DWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 16) = *(void *)(result + 16);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(result + 40);
  *(void *)(a2 + 32) = *(void *)(result + 32);
  *(void *)(a2 + 4sub_10023C164((uint64_t)&a9, 0) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C7701C(uint64_t a1)
{
}

void sub_100C77024(void *a1)
{
  sub_100C772E8((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_100C77060(uint64_t a1, const void **a2)
{
  uint64_t v9 = (ctu *)*a2;
  uint64_t v3 = v9;
  *a2 = 0;
  if (v3) {
    uint64_t v4 = sub_100083F10;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    ctu::cf_to_xpc((uint64_t *)&v14, v3, a2);
    xpc_object_t v5 = v14;
    if (v14 && xpc_get_type(v14) == (xpc_type_t)&_xpc_type_array) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v5 = xpc_null_create();
    }
    xpc_release(v14);
    xpc_object_t v16 = v5;
    if (v5) {
      xpc_retain(v5);
    }
    else {
      xpc_object_t v16 = xpc_null_create();
    }
    xpc_object_t v14 = *(xpc_object_t *)(a1 + 32);
    long long v15 = (std::__shared_weak_count *)"kSubscriberCountries";
    sub_10017AC14((uint64_t)&v14, &v16, &v17);
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_release(v16);
    xpc_object_t v16 = 0;
    xpc_release(v5);
  }
  xpc_object_t v14 = 0;
  long long v15 = 0;
  sGetSubscriberSimInterface();
  if (v14)
  {
    object[1] = (xpc_object_t)(*(uint64_t (**)(xpc_object_t, void))(*(void *)v14 + 24))(v14, *(unsigned int *)(a1 + 8));
    char isEsimCapable = subscriber::isEsimCapable();
    xpc_object_t v12 = xpc_BOOL_create(isEsimCapable);
    if (!v12) {
      xpc_object_t v12 = xpc_null_create();
    }
    *(void *)int buf = *(void *)(a1 + 32);
    uint64_t v11 = "kSubscriberIsEsim";
    sub_100035E70((uint64_t)buf, &v12, object);
    xpc_release(object[0]);
    object[0] = 0;
    xpc_release(v12);
    xpc_object_t v12 = 0;
  }
  else
  {
    sub_100C7659C();
    BOOL v7 = qword_101B12A58;
    if (os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#N SubscriberSimInterface not found", buf, 2u);
    }
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  return sub_100044D00((const void **)&v9);
}

void sub_100C7724C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_10004D2C8(v4);
  }
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7729C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A4C480)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C772DC()
{
  return &off_101A4C480;
}

void sub_100C772E8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

uint64_t sub_100C77338(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

uint64_t **sub_100C77378(uint64_t **result, uint64_t *a2, uint64_t *a3)
{
  xpc_object_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    BOOL v7 = result[1];
    _DWORD *result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    xpc_object_t v14 = result;
    long long v15 = v8;
    xpc_object_t v16 = v8;
    if (v8)
    {
      long long v15 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          *((_DWORD *)v8 + 8) = *((_DWORD *)v9 + 8);
          if (v8 != v9)
          {
            sub_10006E4A8(v8 + 5, (char *)v9[5], (char *)v9[6], v9[6] - v9[5]);
            uint64_t v8 = v16;
          }
          sub_1001A0A9C(v5, (uint64_t)v8);
          uint64_t v8 = v15;
          xpc_object_t v16 = v15;
          if (v15) {
            long long v15 = sub_1000EA590((uint64_t)v15);
          }
          xpc_object_t v10 = (uint64_t *)v9[1];
          if (v10)
          {
            do
            {
              a2 = v10;
              xpc_object_t v10 = (uint64_t *)*v10;
            }
            while (v10);
          }
          else
          {
            do
            {
              a2 = (uint64_t *)v9[2];
              BOOL v11 = *a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v11);
          }
          if (!v8) {
            break;
          }
          uint64_t v9 = a2;
        }
        while (a2 != a3);
      }
    }
    __n128 result = (uint64_t **)sub_100C774F8((uint64_t)&v14);
  }
  if (a2 != a3)
  {
    do
    {
      __n128 result = (uint64_t **)sub_100C77550((uint64_t)v5, (uint64_t)(a2 + 4));
      xpc_object_t v12 = (uint64_t *)a2[1];
      if (v12)
      {
        do
        {
          uint64_t v13 = v12;
          xpc_object_t v12 = (uint64_t *)*v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          uint64_t v13 = (uint64_t *)a2[2];
          BOOL v11 = *v13 == (void)a2;
          a2 = v13;
        }
        while (!v11);
      }
      a2 = v13;
    }
    while (v13 != a3);
  }
  return result;
}

void sub_100C774E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100C774F8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100C774F8(uint64_t a1)
{
  sub_10026CF54(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10026CF54(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100C77550(uint64_t a1, uint64_t a2)
{
  memset(v7, 0, sizeof(v7));
  sub_10026E96C(a1, a2, v7);
  uint64_t v3 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    do
    {
      while (1)
      {
        uint64_t v3 = (uint64_t **)v4;
        if (*((_DWORD *)v7[0] + 8) >= *((_DWORD *)v4 + 8)) {
          break;
        }
        uint64_t v4 = (uint64_t *)*v4;
        xpc_object_t v5 = v3;
        if (!*v3) {
          goto LABEL_8;
        }
      }
      uint64_t v4 = (uint64_t *)v4[1];
    }
    while (v4);
    xpc_object_t v5 = v3 + 1;
  }
  else
  {
    xpc_object_t v5 = (uint64_t **)(a1 + 8);
  }
LABEL_8:
  sub_100046C38((uint64_t **)a1, (uint64_t)v3, v5, v7[0]);
  return v7[0];
}

uint64_t sub_100C775DC(uint64_t a1)
{
  *(void *)a1 = off_101A4C4A0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C77638(uint64_t a1)
{
  *(void *)a1 = off_101A4C4A0;
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100C776B4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x20uLL);
  *uint64_t v2 = off_101A4C4A0;
  sub_100C77A98(v2 + 1, v1);
  return v2;
}

void *sub_100C77708(uint64_t a1, void *a2)
{
  *a2 = off_101A4C4A0;
  return sub_100C77A98(a2 + 1, (void *)(a1 + 8));
}

void sub_100C77734(uint64_t a1)
{
}

void sub_100C7773C(void *a1)
{
  sub_100C77AF4((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100C77778(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  uint64_t v4 = (void *)a2[1];
  xpc_object_t v17 = (void **)*a2;
  char v18 = v4;
  if (a2[2])
  {
    void v4[2] = &v18;
    *a2 = v3;
    *uint64_t v3 = 0;
    a2[2] = 0;
  }
  else
  {
    xpc_object_t v17 = &v18;
  }
  uint64_t v21 = 0;
  ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)&v21);
  id v5 = +[NSMutableDictionary dictionary];
  BOOL v6 = v17;
  if (v17 != &v18)
  {
    do
    {
      uint64_t v7 = subscriber::clientKeyFromAuthInfoType();
      if (v7)
      {
        xpc_object_t v20 = 0;
        xpc_object_t object = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v8 = v20;
          xpc_object_t v20 = object;
          *(void *)int buf = v8;
          sub_100030068((const void **)buf);
          [v5 setObject:v20 forKeyedSubscript:v7];
        }
        else
        {
          sub_100C7659C();
          xpc_object_t v10 = qword_101B12A58;
          if (os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)int buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#N Unable to convert auth info data", buf, 2u);
          }
        }
        sub_100030068((const void **)&v20);
      }
      else
      {
        sub_100C7659C();
        uint64_t v9 = qword_101B12A58;
        if (os_log_type_enabled((os_log_t)qword_101B12A58, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)int buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#N Unable to find client key for auth info", buf, 2u);
        }
      }
      BOOL v11 = v6[1];
      if (v11)
      {
        do
        {
          xpc_object_t v12 = (void **)v11;
          BOOL v11 = (void *)*v11;
        }
        while (v11);
      }
      else
      {
        do
        {
          xpc_object_t v12 = (void **)v6[2];
          BOOL v13 = *v12 == v6;
          BOOL v6 = v12;
        }
        while (!v13);
      }
      BOOL v6 = v12;
    }
    while (v12 != &v18);
  }
  xpc_object_t v14 = *(xpc_object_t *)(a1 + 24);
  *(void *)int buf = v14;
  if (v14)
  {
    xpc_retain(v14);
  }
  else
  {
    xpc_object_t v14 = xpc_null_create();
    *(void *)int buf = v14;
  }
  ctu::cf_to_xpc((uint64_t *)&object, (ctu *)v5, v15);
  xpc_object_t v16 = xpc_null_create();
  xpc_object_t v20 = v16;
  sub_100DD6B08((xpc_object_t *)buf, 136, &object, &v20);
  xpc_release(v16);
  xpc_release(object);
  xpc_release(v14);
  ctu::ns::AutoPool::~AutoPool((ctu::ns::AutoPool *)&v21);
  sub_10026CF54((uint64_t)&v17, v18);
}

void sub_100C779CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, xpc_object_t object)
{
  xpc_release(v18);
  xpc_release(object);
  xpc_release(v17);
  ctu::ns::AutoPool::~AutoPool((ctu::ns::AutoPool *)&a14);
  sub_10026CF54((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100C77A4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100C77A8C()
{
}

void *sub_100C77A98(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (void *)a2[2];
  a1[2] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[2] = xpc_null_create();
  }
  return a1;
}

void sub_100C77AF4(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 16));
  *(void *)(a1 + 16) = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void *sub_100C77B48(void *a1)
{
  *a1 = off_101A4C520;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100C77B94(void *a1)
{
  *a1 = off_101A4C520;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100C77C00(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_101A4C520;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100C77C5C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A4C520;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100C77C94(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100C77CA4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100C77CE4(uint64_t a1, _DWORD *a2)
{
  uint64_t v3 = 4;
  if (*a2 == 1) {
    uint64_t v3 = 1;
  }
  if (*a2 == 2) {
    int64_t v4 = 2;
  }
  else {
    int64_t v4 = v3;
  }
  xpc_object_t v6 = xpc_int64_create(v4);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  v5[0] = *(void *)(a1 + 8);
  v5[1] = "kSubscriberDualSimCapabilityKey";
  sub_100035E70((uint64_t)v5, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
}

uint64_t sub_100C77D80(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A4C580)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100C77DC0()
{
  return &off_101A4C580;
}

uint64_t sub_100C77DCC()
{
  return sub_100C624B8((uint64_t)&unk_101B12A52, (uint64_t)sub_100C72010);
}

void CellularPlanPendingTransferHandler::create(uint64_t a1@<X0>, NSObject **a2@<X1>, uint64_t *a3@<X2>, void *a4@<X8>)
{
  *a4 = 0;
  a4[1] = 0;
  uint64_t v8 = (char *)operator new(0x1C0uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)uint64_t v8 = off_101A4C9A8;
  uint64_t v9 = v8 + 24;
  uint64_t v11 = *a3;
  uint64_t v10 = a3[1];
  *a3 = 0;
  a3[1] = 0;
  *((void *)v8 + 4) = 0;
  uint64_t v31 = a2;
  xpc_object_t v12 = *a2;
  *((void *)v8 + 5) = 0;
  *((void *)v8 + 6) = v12;
  if (v12) {
    dispatch_retain(v12);
  }
  *((void *)v8 + 7) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v8 + 64), kCtLoggingSystemName, "cp.p.tr");
  *((void *)v8 + 3) = off_101A4C5A0;
  *((void *)v8 + 9) = off_101A4C740;
  *((void *)v8 + 1sub_10023C164((uint64_t)&a9, 0) = off_101A4C768;
  *((void *)v8 + 11) = off_101A4C790;
  *((void *)v8 + 12) = off_101A4C7C8;
  (***(void (****)(void **__return_ptr))a1)(__p);
  BOOL v13 = (Registry *)__p[0];
  *(_OWORD *)(v8 + 104) = *(_OWORD *)__p;
  uint64_t v14 = *(void *)(a1 + 8);
  *((void *)v8 + 15) = *(void *)a1;
  *((void *)v8 + 16) = v14;
  if (v14)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
    long long v15 = (Registry *)*((void *)v8 + 13);
  }
  else
  {
    long long v15 = v13;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v15);
  xpc_object_t v17 = ServiceMap;
  if (v18 < 0)
  {
    long long v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      uint64_t v18 = v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v18;
  uint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)__p);
  uint64_t v30 = v11;
  if (v22)
  {
    uint64_t v24 = v22[3];
    long long v23 = (std::__shared_weak_count *)v22[4];
    if (v23)
    {
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v17);
      atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v23);
      int v25 = 0;
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v24 = 0;
  }
  std::mutex::unlock(v17);
  long long v23 = 0;
  int v25 = 1;
LABEL_14:
  uint64_t v26 = operator new(0x30uLL);
  v26[1] = 0;
  void v26[2] = 0;
  *uint64_t v26 = off_101A4CC70;
  uint64_t v27 = ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v26 + 3), (const ctu::OsLogLogger *)(v8 + 64));
  v26[4] = v24;
  v26[5] = v23;
  if (v25)
  {
    *((void *)v8 + 17) = v27;
    *((void *)v8 + 18) = v26;
  }
  else
  {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
    *((void *)v8 + 17) = v27;
    *((void *)v8 + 18) = v26;
    sub_10004D2C8(v23);
  }
  *((void *)v8 + 19) = 0;
  *((void *)v8 + 2sub_10023C164((uint64_t)&a9, 0) = 0;
  sub_100058DB0(__p, "CellularPlanPendingTransferHandler");
  CFTypeRef v33 = *v31;
  if (*v31) {
    dispatch_retain(*v31);
  }
  uint64_t v28 = *((void *)v8 + 7);
  xpc_object_t object = v28;
  if (v28) {
    dispatch_retain(v28);
  }
  ctu::RestModule::RestModule();
  if (object) {
    dispatch_release(object);
  }
  if (v33) {
    dispatch_release(v33);
  }
  if (v35 < 0) {
    operator delete(__p[0]);
  }
  *((void *)v8 + 31) = 0;
  *((void *)v8 + 32) = 0;
  *(_OWORD *)(v8 + 184) = 0u;
  *(_OWORD *)(v8 + 20sub_10023C164((uint64_t)&a9, 0) = 0u;
  *(_OWORD *)(v8 + 216) = 0u;
  *((_DWORD *)v8 + 58) = 0;
  *((void *)v8 + 3sub_10023C164((uint64_t)&a9, 0) = v8 + 248;
  v8[264] = 1;
  *((void *)v8 + 34) = v30;
  *((void *)v8 + 35) = v10;
  *((void *)v8 + 45) = 0;
  *((void *)v8 + 46) = 0;
  *((_OWORD *)v8 + 18) = 0u;
  *((_OWORD *)v8 + 19) = 0u;
  *((_OWORD *)v8 + 2sub_10023C164((uint64_t)&a9, 0) = 0u;
  *((_OWORD *)v8 + 21) = 0u;
  *((void *)v8 + 44) = v8 + 360;
  v8[376] = 0;
  v8[400] = 0;
  *((void *)v8 + 54) = 0;
  *((void *)v8 + 55) = 0;
  *((void *)v8 + 3) = off_101A4C9F8;
  *((void *)v8 + 9) = off_101A4CB98;
  *((void *)v8 + 1sub_10023C164((uint64_t)&a9, 0) = off_101A4CBC0;
  *((void *)v8 + 11) = off_101A4CBE8;
  *((void *)v8 + 12) = off_101A4CC20;
  uint64_t v29 = (std::__shared_weak_count *)*((void *)v8 + 5);
  if (v29)
  {
    if (v29->__shared_owners_ != -1)
    {
      *a4 = v9;
      a4[1] = v8;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
LABEL_33:
      if (std::__shared_weak_count::lock(v29)) {
        operator new();
      }
LABEL_35:
      sub_100088B9C();
    }
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 4) = v9;
    *((void *)v8 + 5) = v8;
    std::__shared_weak_count::__release_weak(v29);
  }
  else
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
    atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
    *((void *)v8 + 4) = v9;
    *((void *)v8 + 5) = v8;
  }
  sub_10004D2C8((std::__shared_weak_count *)v8);
  uint64_t v29 = (std::__shared_weak_count *)*((void *)v8 + 5);
  *a4 = v9;
  a4[1] = v8;
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
  if (!v29) {
    goto LABEL_35;
  }
  goto LABEL_33;
}

void sub_100C78364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, CellularPlanProvisioningMonitorModeDelegate *a12, CellularPlanProvisioningMonitorModeDelegate *a13, ctu::OsLogLogger *a14, dispatch_object_t object, dispatch_object_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (object) {
    dispatch_release(object);
  }
  if (a16) {
    dispatch_release(a16);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  shared_weak_owners = (std::__shared_weak_count *)v22[6].__shared_weak_owners_;
  if (shared_weak_owners) {
    sub_10004D2C8(shared_weak_owners);
  }
  uint64_t v29 = (std::__shared_weak_count *)v22[6].__vftable;
  if (v29) {
    sub_10004D2C8(v29);
  }
  shared_owners = (std::__shared_weak_count *)v22[5].__shared_owners_;
  if (shared_owners) {
    sub_10004D2C8(shared_owners);
  }
  uint64_t v31 = (std::__shared_weak_count *)v22[4].__shared_weak_owners_;
  if (v31) {
    sub_10004D2C8(v31);
  }
  CellularPlanProvisioningMonitorModeDelegate::~CellularPlanProvisioningMonitorModeDelegate(a12);
  CellularPlanProvisioningMonitorModeDelegate::~CellularPlanProvisioningMonitorModeDelegate(a13);
  CoreUtilsMessageSessionDelegateInterface::~CoreUtilsMessageSessionDelegateInterface(v26);
  ctu::OsLogLogger::~OsLogLogger(a14);
  sub_100087E88(v25);
  CellularPlanPendingTransferHandlerInterface::~CellularPlanPendingTransferHandlerInterface(v23);
  if (v24) {
    std::__shared_weak_count::__release_weak(v24);
  }
  std::__shared_weak_count::~__shared_weak_count(v22);
  operator delete(v32);
  _Unwind_Resume(a1);
}

void sub_100C7845C(void *a1)
{
  uint64_t v1 = a1[33];
  uint64_t v2 = a1[34];
  if (v1 != v2)
  {
    int64_t v4 = a1 + 20;
    do
    {
      if (*(char *)(v1 + 479) < 0) {
        uint64_t v5 = *(void *)(v1 + 464);
      }
      else {
        uint64_t v5 = *(unsigned __int8 *)(v1 + 479);
      }
      if (v5) {
        BOOL v6 = 0;
      }
      else {
        BOOL v6 = *(unsigned char *)(v1 + 1225) == 0;
      }
      if (v6) {
        goto LABEL_35;
      }
      uint64_t v7 = *(void *)(v1 + 1176);
      if (v7) {
        (*(void (**)(uint64_t, void *))(*(void *)v7 + 48))(v7, v4);
      }
      if (*(unsigned char *)(v1 + 1) == 12) {
        goto LABEL_35;
      }
      uint64_t v8 = *(void *)(v1 + 1192);
      if (v8) {
        (*(void (**)(uint64_t, void *))(*(void *)v8 + 48))(v8, v4);
      }
      uint64_t v9 = *(void *)(v1 + 1208);
      if (v9) {
        (*(void (**)(uint64_t, void *))(*(void *)v9 + 48))(v9, v4);
      }
      uint64_t v10 = (void *)(v1 + 456);
      memset(__str, 0, sizeof(__str));
      sub_100C81F24(__str, (unsigned __int8 *)(v1 + 456), (unsigned __int8 *)(v1 + 480), a1[20], a1[21]);
      if (!__str[24]) {
        goto LABEL_35;
      }
      if (*(char *)(v1 + 479) < 0)
      {
        if (!*(void *)(v1 + 464)) {
LABEL_22:
        }
          std::string::operator=((std::string *)(v1 + 456), (const std::string *)__str);
      }
      else if (!*(unsigned char *)(v1 + 479))
      {
        goto LABEL_22;
      }
      uint64_t v11 = a1[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        xpc_object_t v12 = (void *)(v1 + 432);
        if (*(char *)(v1 + 455) < 0) {
          xpc_object_t v12 = (void *)*v12;
        }
        if (*(char *)(v1 + 479) < 0) {
          uint64_t v10 = (void *)*v10;
        }
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = v12;
        __int16 v15 = 2080;
        xpc_object_t v16 = v10;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I plan (%s) has got successfully transferred as (%s)", buf, 0x16u);
      }
      *(unsigned char *)(v1 + 1225) = 0;
      buf[0] = 0;
      char v18 = 0;
      (*(void (**)(void *, uint64_t, uint64_t, unsigned char *))(*a1 + 112))(a1, v1 + 432, 12, buf);
      if (v18 && v17 < 0) {
        operator delete(*(void **)buf);
      }
      sub_100C82554((uint64_t)a1, v1);
      if (__str[24])
      {
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
      }
LABEL_35:
      v1 += 1248;
    }
    while (v1 != v2);
  }
}

void sub_100C786F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24)
{
  if (a24 && a23 < 0) {
    operator delete(__p);
  }
  if (a17)
  {
    if (a16 < 0) {
      operator delete(a11);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100C78744(void *a1)
{
  uint64_t v2 = a1[23];
  for (uint64_t i = a1[24]; v2 != i; v2 += 168)
  {
    int isSimReady = subscriber::isSimReady();
    if (*(_DWORD *)(v2 + 64) == 1) {
      int v5 = isSimReady;
    }
    else {
      int v5 = 0;
    }
    if (v5 == 1)
    {
      uint64_t v6 = a1[33];
      uint64_t v7 = a1[34];
      uint64_t v8 = (_OWORD *)(v2 + 72);
      if (*(char *)(v2 + 95) < 0)
      {
        sub_10004FC84(__p, *(void **)(v2 + 72), *(void *)(v2 + 80));
      }
      else
      {
        *(_OWORD *)long long __p = *v8;
        uint64_t v23 = *(void *)(v2 + 88);
      }
      uint64_t v9 = HIBYTE(v23);
      if (v6 != v7)
      {
        uint64_t v11 = __p[0];
        uint64_t v10 = __p[1];
        if (v23 >= 0) {
          xpc_object_t v12 = (void *)HIBYTE(v23);
        }
        else {
          xpc_object_t v12 = __p[1];
        }
        do
        {
          BOOL v13 = (void *)*(unsigned __int8 *)(v6 + 455);
          int v14 = (char)v13;
          if ((char)v13 < 0) {
            BOOL v13 = *(void **)(v6 + 440);
          }
          if (v12 == v13)
          {
            if (v14 >= 0) {
              __int16 v15 = (unsigned __int8 *)(v6 + 432);
            }
            else {
              __int16 v15 = *(unsigned __int8 **)(v6 + 432);
            }
            if ((v9 & 0x80) != 0)
            {
              if (!memcmp(v11, v15, (size_t)v10)) {
                goto LABEL_29;
              }
            }
            else
            {
              if (!v9) {
                goto LABEL_30;
              }
              xpc_object_t v16 = __p;
              uint64_t v17 = v9;
              while (*(unsigned __int8 *)v16 == *v15)
              {
                xpc_object_t v16 = (void **)((char *)v16 + 1);
                ++v15;
                if (!--v17) {
                  goto LABEL_28;
                }
              }
            }
          }
          v6 += 1248;
        }
        while (v6 != v7);
        uint64_t v6 = v7;
      }
LABEL_28:
      if ((v9 & 0x80) != 0) {
LABEL_29:
      }
        operator delete(__p[0]);
LABEL_30:
      char v18 = (long long *)a1[34];
      if ((long long *)v6 != v18 && *(unsigned char *)v6 != 7 && !*(unsigned char *)(v6 + 4))
      {
        long long v19 = a1[5];
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v2 + 95) < 0) {
            uint64_t v8 = *(_OWORD **)v8;
          }
          *(_DWORD *)int buf = 136315138;
          int v25 = v8;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I 4FF plan inserted removed from pending transfer plans (%s)", buf, 0xCu);
          char v18 = (long long *)a1[34];
        }
        uint64_t v20 = sub_100C85CCC((long long *)(v6 + 1248), v18, v6);
        for (uint64_t j = a1[34]; j != v20; uint64_t j = sub_10030D10C(j - 1248))
          ;
        a1[34] = v20;
      }
    }
  }
  sub_100C7AAE8((uint64_t)a1);
}

void sub_100C78980(void *a1)
{
  uint64_t v2 = (os_log_t *)(a1 + 5);
  uint64_t v3 = a1[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = 0x6F96F96F96F96F97 * ((uint64_t)(a1[34] - a1[33]) >> 5);
    int v7 = 134217984;
    uint64_t v8 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I pending transfer plans count: %lu", (uint8_t *)&v7, 0xCu);
  }
  uint64_t v6 = a1[33];
  uint64_t v5 = a1[34];
  while (v6 != v5)
  {
    sub_1008A23CC(v6, v2);
    v6 += 1248;
  }
}

void sub_100C78A68(uint64_t a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = *(void *)(a1 + 96);
  uint64_t v6 = (std::__shared_weak_count *)a2[1];
  uint64_t v19 = *a2;
  uint64_t v20 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7 || (uint64_t v8 = *(void *)(a1 + 8), (v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v10 = v9;
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  uint64_t v11 = std::__shared_weak_count::lock(v10);
  xpc_object_t v12 = v11;
  if (v11)
  {
    if (v8) {
      uint64_t v13 = v8 + 56;
    }
    else {
      uint64_t v13 = 0;
    }
    atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    std::__shared_weak_count::__release_weak(v10);
    sub_10004D2C8(v12);
  }
  else
  {
    std::__shared_weak_count::__release_weak(v10);
    uint64_t v13 = 0;
  }
  uint64_t v17 = v13;
  char v18 = v12;
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t *, uint64_t *))(*(void *)v5 + 448))(&v21, v5, &v19, &v17);
  long long v14 = v21;
  long long v21 = 0uLL;
  __int16 v15 = *(std::__shared_weak_count **)(a1 + 136);
  *(_OWORD *)(a1 + 128) = v14;
  if (v15)
  {
    sub_10004D2C8(v15);
    if (*((void *)&v21 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v21 + 1));
    }
  }
  if (v18) {
    std::__shared_weak_count::__release_weak(v18);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  uint64_t v16 = *(void *)(a1 + 136);
  *a3 = *(void *)(a1 + 128);
  a3[1] = v16;
  if (v16) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v16 + 8), 1uLL, memory_order_relaxed);
  }
}

void sub_100C78BCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C78BF8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  if (*a2 == v4)
  {
LABEL_5:
    uint64_t v6 = *(void *)(a1 + 264);
    uint64_t v7 = *(void *)(a1 + 272);
    while (v6 != v7)
    {
      *(unsigned char *)(v6 + 12) = 0;
      v6 += 1248;
    }
  }
  else
  {
    uint64_t v5 = *a2;
    while (*(unsigned char *)(v5 + 12))
    {
      v5 += 1248;
      if (v5 == v4) {
        goto LABEL_5;
      }
    }
  }
  if (v3 == v4)
  {
LABEL_128:
    sub_100C78980((void *)a1);
    uint64_t v54 = a1;
    if (atomic_load_explicit((atomic_ullong *volatile)(a1 + 304), memory_order_acquire) != -1)
    {
      __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v54;
      *(void *)xpc_object_t v55 = &__str;
      std::__call_once((std::once_flag::_State_type *)(a1 + 304), v55, (void (__cdecl *)(void *))sub_100C86CFC);
    }
    sub_100C7AAE8(a1);
  }
  xpc_object_t v53 = (uint64_t *)(a1 + 264);
  uint64_t v8 = (unint64_t *)(a1 + 280);
  while (1)
  {
    uint64_t v10 = *(void *)(a1 + 264);
    unint64_t v9 = *(void *)(a1 + 272);
    if (v10 != v9)
    {
      uint64_t v11 = *(unsigned __int8 *)(v3 + 455);
      size_t v12 = *(void *)(v3 + 440);
      if ((v11 & 0x80u) == 0) {
        uint64_t v13 = *(unsigned __int8 *)(v3 + 455);
      }
      else {
        uint64_t v13 = *(void *)(v3 + 440);
      }
      unint64_t v14 = *(void *)(a1 + 264);
      do
      {
        uint64_t v15 = *(unsigned __int8 *)(v14 + 455);
        int v16 = (char)v15;
        if ((v15 & 0x80u) != 0) {
          uint64_t v15 = *(void *)(v14 + 440);
        }
        if (v13 == v15)
        {
          if (v16 >= 0) {
            uint64_t v17 = (unsigned __int8 *)(v14 + 432);
          }
          else {
            uint64_t v17 = *(unsigned __int8 **)(v14 + 432);
          }
          if ((v11 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v3 + 432), v17, v12)) {
              goto LABEL_31;
            }
          }
          else
          {
            if (!v11) {
              goto LABEL_31;
            }
            uint64_t v18 = 0;
            while (*(unsigned __int8 *)(v3 + v18 + 432) == v17[v18])
            {
              if (v11 == ++v18) {
                goto LABEL_31;
              }
            }
          }
        }
        v14 += 1248;
      }
      while (v14 != v9);
LABEL_40:
      if (v9 >= *v8)
      {
        uint64_t v20 = 0x6F96F96F96F96F97 * ((uint64_t)(v9 - v10) >> 5);
        unint64_t v21 = v20 + 1;
        if ((unint64_t)(v20 + 1) > 0x34834834834834) {
          sub_10006A748();
        }
        unint64_t v22 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(*v8 - v10) >> 5);
        if (v22 <= v21) {
          unint64_t v22 = v20 + 1;
        }
        if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(*v8 - v10) >> 5)) >= 0x1A41A41A41A41ALL) {
          unint64_t v23 = 0x34834834834834;
        }
        else {
          unint64_t v23 = v22;
        }
        uint64_t v57 = a1 + 280;
        if (v23) {
          uint64_t v24 = (char *)sub_10030B8AC(a1 + 280, v23);
        }
        else {
          uint64_t v24 = 0;
        }
        int v25 = (long long *)&v24[32 * ((uint64_t)(v9 - v10) >> 5)];
        *(void *)xpc_object_t v55 = v24;
        *(void *)&v55[8] = v25;
        *(void *)&v55[16] = v25;
        xpc_object_t v56 = &v24[1248 * v23];
        if (v20 == v23)
        {
          if ((uint64_t)(v9 - v10) < 1)
          {
            if (v10 == v9) {
              unint64_t v26 = 1;
            }
            else {
              unint64_t v26 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(v9 - v10) >> 5);
            }
            uint64_t v60 = a1 + 280;
            uint64_t v27 = (char *)sub_10030B8AC(a1 + 280, v26);
            std::string::size_type size = (std::string::size_type)&v27[1248 * (v26 >> 2)];
            __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v27;
            __str.__r_.__value_.__l.__size_ = size;
            uint64_t v30 = &v27[1248 * v29];
            __str.__r_.__value_.__r.__words[2] = size;
            unsigned int v59 = v30;
            uint64_t v31 = *(long long **)&v55[8];
            if (*(void *)&v55[16] == *(void *)&v55[8])
            {
              int64x2_t v35 = vdupq_n_s64(*(unint64_t *)&v55[8]);
              std::string::size_type v33 = size;
            }
            else
            {
              uint64_t v32 = (*(void *)&v55[16] - *(void *)&v55[8]) / 1248;
              std::string::size_type v33 = size + 1248 * v32;
              uint64_t v34 = 1248 * v32;
              do
              {
                sub_1003115D8(size, v31);
                size += 1248;
                v31 += 78;
                v34 -= 1248;
              }
              while (v34);
              std::string::size_type size = __str.__r_.__value_.__l.__size_;
              uint64_t v27 = (char *)__str.__r_.__value_.__r.__words[0];
              int64x2_t v35 = *(int64x2_t *)&v55[8];
              uint64_t v30 = v59;
            }
            uint64_t v36 = v56;
            __str.__r_.__value_.__r.__words[0] = *(void *)v55;
            *(void *)xpc_object_t v55 = v27;
            *(void *)&v55[8] = size;
            *(int64x2_t *)&__str.__r_.__value_.__r.__words[1] = v35;
            *(void *)&v55[16] = v33;
            xpc_object_t v56 = v30;
            unsigned int v59 = v36;
            sub_1003254E4((uint64_t)&__str);
            int v25 = *(long long **)&v55[16];
          }
          else
          {
            int v25 = (long long *)sub_100C85CCC(v25, v25, (uint64_t)&v25[-78 * (v21 >> 1)]);
            *(void *)&v55[8] -= 1248 * (v21 >> 1);
            *(void *)&v55[16] = v25;
          }
        }
        sub_10030DDAC((uint64_t)v25, (long long *)v3);
        *(void *)&v55[16] += 1248;
        unint64_t v9 = sub_100C85BD0(v53, v55, v9);
        sub_1003254E4((uint64_t)v55);
      }
      else
      {
        sub_10030DDAC(v9, (long long *)v3);
        *(void *)(a1 + 272) = v9 + 1248;
      }
      sub_100C7949C(a1, v9, *(unsigned __int8 *)(v9 + 1));
      if (*(unsigned char *)(v9 + 1) == 5) {
        *(unsigned char *)(v9 + 2) = 1;
      }
      if (*(char *)(v9 + 311) < 0)
      {
        if (!*(void *)(v9 + 296)) {
          goto LABEL_88;
        }
      }
      else if (!*(unsigned char *)(v9 + 311))
      {
LABEL_88:
        (***(void (****)(std::string *__return_ptr))(a1 + 96))(&__str);
        ServiceMap = (std::mutex *)Registry::getServiceMap(v37, (Registry *)__str.__r_.__value_.__l.__data_);
        unsigned int v39 = ServiceMap;
        if (v40 < 0)
        {
          unsigned int v41 = (unsigned __int8 *)(v40 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v42 = 5381;
          do
          {
            uint64_t v40 = v42;
            unsigned int v43 = *v41++;
            uint64_t v42 = (33 * v42) ^ v43;
          }
          while (v43);
        }
        std::mutex::lock(ServiceMap);
        *(void *)xpc_object_t v55 = v40;
        uint64_t v44 = sub_10004D37C(&v39[1].__m_.__sig, (unint64_t *)v55);
        if (v44)
        {
          uint64_t v46 = v44[3];
          char v45 = (std::__shared_weak_count *)v44[4];
          if (v45)
          {
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v39);
            atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v45);
            char v47 = 0;
            goto LABEL_96;
          }
        }
        else
        {
          uint64_t v46 = 0;
        }
        std::mutex::unlock(v39);
        char v45 = 0;
        char v47 = 1;
LABEL_96:
        if (__str.__r_.__value_.__l.__size_) {
          sub_10004D2C8((std::__shared_weak_count *)__str.__r_.__value_.__l.__size_);
        }
        if (!v46) {
          goto LABEL_106;
        }
        memset(&__str, 0, sizeof(__str));
        (*(void (**)(std::string *__return_ptr, uint64_t, unint64_t))(*(void *)v46 + 24))(&__str, v46, v9 + 24);
        std::string::size_type v48 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        char v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type v48 = __str.__r_.__value_.__l.__size_;
        }
        if (v48)
        {
          std::string::operator=((std::string *)(v9 + 288), &__str);
          unint64_t v50 = (void **)(v9 + 264);
          sub_100CD6B88((const void **)(v9 + 264), (uint64_t)&__str, (uint64_t)v55);
          if (*(char *)(v9 + 287) < 0) {
            operator delete(*v50);
          }
          *(_OWORD *)unint64_t v50 = *(_OWORD *)v55;
          *(void *)(v9 + 28sub_10023C164((uint64_t)&a9, 0) = *(void *)&v55[16];
          char v49 = HIBYTE(__str.__r_.__value_.__r.__words[2]);
        }
        if (v49 < 0)
        {
          operator delete(__str.__r_.__value_.__l.__data_);
          if ((v47 & 1) == 0) {
LABEL_107:
          }
            sub_10004D2C8(v45);
        }
        else
        {
LABEL_106:
          if ((v47 & 1) == 0) {
            goto LABEL_107;
          }
        }
      }
      if (*(char *)(v9 + 479) < 0)
      {
        if (*(void *)(v9 + 464)) {
          goto LABEL_112;
        }
      }
      else
      {
        if (!*(unsigned char *)(v9 + 479)) {
          goto LABEL_119;
        }
LABEL_112:
        if (*(char *)(v9 + 503) < 0)
        {
          if (!*(void *)(v9 + 488))
          {
LABEL_116:
            sub_100CD7084(v9 + 456, (uint64_t)&__str);
            unsigned int v51 = (void **)(v9 + 480);
            if (*(char *)(v9 + 503) < 0) {
              operator delete(*v51);
            }
            *(_OWORD *)unsigned int v51 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(v9 + 496) = *((void *)&__str.__r_.__value_.__l + 2);
          }
        }
        else if (!*(unsigned char *)(v9 + 503))
        {
          goto LABEL_116;
        }
      }
LABEL_119:
      if (*(unsigned char *)(v9 + 1224) && *(unsigned char *)(v9 + 2) == 4)
      {
        xpc_object_t v52 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__str.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I monitor mode exhausted, should hide PendingTransferPlan", (uint8_t *)&__str, 2u);
        }
        *(unsigned char *)(v9 + 2) = 1;
      }
      goto LABEL_124;
    }
    unint64_t v14 = *(void *)(a1 + 264);
LABEL_31:
    if (v14 == v9) {
      goto LABEL_40;
    }
    *(unsigned char *)(v14 + 3) = *(unsigned char *)(v3 + 3);
    std::string::operator=((std::string *)(v14 + 288), (const std::string *)(v3 + 288));
    std::string::operator=((std::string *)(v14 + 264), (const std::string *)(v3 + 264));
    std::string::operator=((std::string *)(v14 + 120), (const std::string *)(v3 + 120));
    std::string::operator=((std::string *)(v14 + 144), (const std::string *)(v3 + 144));
    std::string::operator=((std::string *)(v14 + 168), (const std::string *)(v3 + 168));
    std::string::operator=((std::string *)(v14 + 192), (const std::string *)(v3 + 192));
    *(_DWORD *)(v14 + 8) = *(_DWORD *)(v3 + 8);
    *(unsigned char *)(v14 + 12) = *(unsigned char *)(v3 + 12);
    if (*(unsigned char *)(v3 + 913)) {
      *(_WORD *)(v14 + 912) = *(_WORD *)(v3 + 912);
    }
    uint64_t v19 = *(std::__shared_weak_count **)(v14 + 1200);
    *(_OWORD *)(v14 + 1192) = 0u;
    if (v19) {
      sub_10004D2C8(v19);
    }
    *(_WORD *)(v14 + 1224) = *(_WORD *)(v3 + 1224);
    *(unsigned char *)(v14 + 1226) = *(unsigned char *)(v3 + 1226);
    if (!*(unsigned char *)(v3 + 18)) {
      goto LABEL_67;
    }
    *(unsigned char *)(v14 + 18) = 1;
    if (*(char *)(v3 + 407) < 0) {
      break;
    }
    if (*(unsigned char *)(v3 + 407)) {
      goto LABEL_51;
    }
LABEL_52:
    if (*(char *)(v3 + 335) < 0)
    {
      if (!*(void *)(v3 + 320)) {
        goto LABEL_57;
      }
LABEL_56:
      std::string::operator=((std::string *)(v14 + 312), (const std::string *)(v3 + 312));
      goto LABEL_57;
    }
    if (*(unsigned char *)(v3 + 335)) {
      goto LABEL_56;
    }
LABEL_57:
    if ((*(char *)(v3 + 383) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v3 + 383)) {
        goto LABEL_62;
      }
LABEL_61:
      std::string::operator=((std::string *)(v14 + 360), (const std::string *)(v3 + 360));
      goto LABEL_62;
    }
    if (*(void *)(v3 + 368)) {
      goto LABEL_61;
    }
LABEL_62:
    if ((*(char *)(v3 + 359) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(v3 + 359)) {
        goto LABEL_67;
      }
LABEL_66:
      std::string::operator=((std::string *)(v14 + 336), (const std::string *)(v3 + 336));
      goto LABEL_67;
    }
    if (*(void *)(v3 + 344)) {
      goto LABEL_66;
    }
LABEL_67:
    unint64_t v9 = v14;
LABEL_124:
    sub_100C7961C((void *)a1, v9);
    sub_100C79BC0((void *)a1, v9);
    sub_100C7A34C((void *)a1, v9);
    v3 += 1248;
    if (v3 == v4) {
      goto LABEL_128;
    }
  }
  if (!*(void *)(v3 + 392)) {
    goto LABEL_52;
  }
LABEL_51:
  std::string::operator=((std::string *)(v14 + 384), (const std::string *)(v3 + 384));
  goto LABEL_52;
}

void sub_100C79400(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if ((v22 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7949C(uint64_t a1, uint64_t a2, unsigned int a3)
{
  if (a3 <= 0xA && ((1 << a3) & 0x41C) != 0)
  {
    *(unsigned char *)(a2 + 2) = a3;
    goto LABEL_4;
  }
  *(unsigned char *)(a2 + 1) = a3;
  if (a3 <= 9 && ((1 << a3) & 0x320) != 0)
  {
    char v8 = 4;
LABEL_14:
    *(unsigned char *)(a2 + 2) = v8;
    goto LABEL_4;
  }
  if ((a3 & 0xFE) != 0xC)
  {
    char v8 = 1;
    goto LABEL_14;
  }
  *(unsigned char *)(a2 + 2) = 0;
  if (*(void *)(a2 + 1160))
  {
    unint64_t v9 = *(std::__shared_weak_count **)(a2 + 1168);
    *(void *)(a2 + 116sub_10023C164((uint64_t)&a9, 0) = 0;
    *(void *)(a2 + 1168) = 0;
    if (v9) {
      sub_10004D2C8(v9);
    }
  }
LABEL_4:
  unsigned int v5 = *(unsigned __int8 *)(a2 + 1);
  if (v5 <= 0xA && ((1 << v5) & 0x41C) != 0)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_FAULT))
    {
      if (*(char *)(a2 + 455) >= 0) {
        uint64_t v10 = a2 + 432;
      }
      else {
        uint64_t v10 = *(void *)(a2 + 432);
      }
      int v11 = 136315394;
      uint64_t v12 = v10;
      __int16 v13 = 2080;
      unint64_t v14 = sub_1008A2228(v5);
      _os_log_fault_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_FAULT, "plan (%s) has unexpected terminal state (%s)", (uint8_t *)&v11, 0x16u);
    }
    *(unsigned char *)(a2 + 1) = 1;
  }
}

void sub_100C7961C(void *a1, uint64_t a2)
{
  unsigned int v3 = *(unsigned __int8 *)(a2 + 1);
  if (v3 <= 0xC && ((1 << v3) & 0x1801) != 0)
  {
    unsigned int v5 = a1[5];
    if (!os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = sub_1008A2228(v3);
    uint64_t v6 = "#I Not starting monitor mode for plan with state:%s";
    goto LABEL_7;
  }
  uint64_t v10 = *(unsigned __int8 *)(a2 + 479);
  int v11 = (char)v10;
  if ((v10 & 0x80u) != 0) {
    uint64_t v10 = *(void *)(a2 + 464);
  }
  if (v10)
  {
    uint64_t v12 = (void *)(a2 + 456);
    if (*(void *)(a2 + 1176))
    {
      unsigned int v5 = a1[5];
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v13 = (void *)*v12;
        if (v11 >= 0) {
          __int16 v13 = v12;
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        uint64_t v6 = "#I monitor mode already running for plan with targetIccid:%s";
LABEL_7:
        uint64_t v7 = v5;
LABEL_8:
        uint32_t v8 = 12;
LABEL_9:
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, v6, buf, v8);
      }
    }
    else
    {
      if (v3 == 9) {
        goto LABEL_25;
      }
      uint64_t v15 = *(unsigned __int8 *)(a2 + 527);
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *(void *)(a2 + 512);
      }
      if (v15)
      {
LABEL_25:
        int v16 = *(unsigned __int8 *)(a2 + 1224);
        uint64_t v17 = a1[5];
        BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
        if (v16)
        {
          if (v18)
          {
            uint64_t v19 = *v12;
            if (v11 >= 0) {
              uint64_t v19 = a2 + 456;
            }
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v19;
            uint64_t v6 = "#I Monitor mode exhausted for plan with targetIccid: %s";
            uint64_t v7 = v17;
            goto LABEL_8;
          }
        }
        else
        {
          if (v18)
          {
            uint64_t v20 = *v12;
            if (v11 >= 0) {
              uint64_t v20 = a2 + 456;
            }
            *(_DWORD *)int buf = 136315138;
            *(void *)&uint8_t buf[4] = v20;
            _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I starting monitor mode for plan with targetIccid:%s", buf, 0xCu);
          }
          uint64_t v21 = a1[12];
          char v22 = a1[3];
          dispatch_object_t object = v22;
          if (v22) {
            dispatch_retain(v22);
          }
          unint64_t v23 = (std::__shared_weak_count *)a1[2];
          if (!v23 || (uint64_t v24 = a1[1], (v25 = std::__shared_weak_count::lock(v23)) == 0)) {
            sub_100088B9C();
          }
          uint64_t v26 = v24 + 64;
          if (!v24) {
            uint64_t v26 = 0;
          }
          uint64_t v44 = v26;
          char v45 = v25;
          if (*(char *)(a2 + 479) < 0)
          {
            sub_10004FC84(__p, *(void **)(a2 + 456), *(void *)(a2 + 464));
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)v12;
            uint64_t v43 = *(void *)(a2 + 472);
          }
          (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *, void *, uint64_t *, void **))(*(void *)v21 + 944))(buf, v21, &object, a1 + 10, &v44, __p);
          uint64_t v30 = (uint64_t *)(a2 + 1176);
          long long v31 = *(_OWORD *)buf;
          *(void *)int buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          uint64_t v32 = *(std::__shared_weak_count **)(a2 + 1184);
          *(_OWORD *)(a2 + 1176) = v31;
          if (v32)
          {
            sub_10004D2C8(v32);
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (SHIBYTE(v43) < 0) {
            operator delete(__p[0]);
          }
          if (v45) {
            sub_10004D2C8(v45);
          }
          if (object) {
            dispatch_release(object);
          }
          if (*v30)
          {
            memset(buf, 0, sizeof(buf));
            uint64_t v33 = a1[12];
            sub_100058DB0(v40, "");
            (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v33 + 968))(buf, v33, 2, a2 + 24, a2 + 48, a2 + 72, a2 + 96, v40);
            if (v41 < 0) {
              operator delete(v40[0]);
            }
            uint64_t v34 = *v30;
            CFTypeRef v38 = 0;
            uint64_t v39 = 0;
            long long v37 = 0;
            sub_10015C7D4(&v37, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
            (*(void (**)(uint64_t, void **))(*(void *)v34 + 16))(v34, &v37);
            if (v37)
            {
              CFTypeRef v38 = v37;
              operator delete(v37);
            }
            int64x2_t v35 = (CFAbsoluteTime *)(a2 + 1120);
            if (!*(unsigned char *)(a2 + 1152))
            {
              *(_OWORD *)int64x2_t v35 = 0u;
              *(_OWORD *)(a2 + 1136) = 0u;
              *(unsigned char *)(a2 + 1152) = 1;
            }
            *int64x2_t v35 = CFAbsoluteTimeGetCurrent();
            (*(void (**)(void))(*(void *)*v30 + 24))();
            if (*(void *)buf)
            {
              *(void *)&uint8_t buf[8] = *(void *)buf;
              operator delete(*(void **)buf);
            }
          }
          else
          {
            uint64_t v36 = a1[5];
            if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "monitor mode creation failed", buf, 2u);
            }
          }
        }
      }
      else
      {
        uint64_t v27 = a1[5];
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v28 = sub_1008A2228(v3);
          uint64_t v29 = (void *)*v12;
          if (v11 >= 0) {
            uint64_t v29 = v12;
          }
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = v28;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v29;
          uint64_t v6 = "#I Not starting monitor mode for plan with empty smdp url with state%s targetIccid:%s";
          uint64_t v7 = v27;
          uint32_t v8 = 22;
          goto LABEL_9;
        }
      }
    }
  }
  else
  {
    unint64_t v14 = a1[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      uint64_t v6 = "#I Not starting monitor mode for plan with empty targetIccid";
      uint64_t v7 = v14;
      uint32_t v8 = 2;
      goto LABEL_9;
    }
  }
}

void sub_100C79B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,dispatch_object_t object)
{
  if (a25) {
    sub_10004D2C8(a25);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C79BC0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[33];
  uint64_t v5 = a1[34];
  sub_10030DDAC((uint64_t)v74, (long long *)a2);
  if (v4 != v5)
  {
    uint64_t v6 = v77;
    size_t v7 = __n;
    uint32_t v8 = __s1;
    if ((v77 & 0x80u) == 0) {
      size_t v9 = v77;
    }
    else {
      size_t v9 = __n;
    }
    if (v74[19]) {
      BOOL v10 = v74[1] == 12;
    }
    else {
      BOOL v10 = 1;
    }
    char v11 = !v10;
    while (1)
    {
      uint64_t v12 = *(unsigned __int8 *)(v4 + 455);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v4 + 440);
      }
      if (v9 == v12)
      {
        if (v13 >= 0) {
          unint64_t v14 = (unsigned __int8 *)(v4 + 432);
        }
        else {
          unint64_t v14 = *(unsigned __int8 **)(v4 + 432);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(v8, v14, v7)) {
            char v17 = 1;
          }
          else {
            char v17 = v11;
          }
          if (v17) {
            break;
          }
          goto LABEL_29;
        }
        if (!v6) {
          break;
        }
        p_s1 = &__s1;
        uint64_t v16 = v6;
        while (*(unsigned __int8 *)p_s1 == *v14)
        {
          p_s1 = (void **)((char *)p_s1 + 1);
          ++v14;
          if (!--v16) {
            goto LABEL_31;
          }
        }
      }
      if (v11) {
        break;
      }
LABEL_29:
      v4 += 1248;
      if (v4 == v5)
      {
        uint64_t v4 = v5;
        break;
      }
    }
  }
LABEL_31:
  sub_10030D10C((uint64_t)v74);
  if (v4 == a1[34])
  {
    uint64_t v24 = a1[5];
    if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v27 = *(void *)(a2 + 240);
    uint64_t v26 = a2 + 240;
    uint64_t v25 = v27;
    uint64_t v28 = v26 + 192;
    if (*(char *)(v26 + 215) < 0) {
      uint64_t v28 = *(void *)(v26 + 192);
    }
    if (*(char *)(v26 + 23) >= 0) {
      uint64_t v25 = v26;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v28;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v25;
    uint64_t v29 = "pending transfer plan not found for sourceIccid:(%s) carrierName:(%s). Not starting recovery monitor mode";
    uint64_t v30 = v24;
    uint32_t v31 = 22;
    goto LABEL_46;
  }
  if (!*(unsigned char *)(v4 + 1225))
  {
    uint64_t v32 = a1[5];
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v33 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v33 = (void *)*v33;
    }
    uint64_t v34 = (void *)(v4 + 240);
    if (*(char *)(v4 + 263) < 0) {
      uint64_t v34 = (void *)*v34;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v33;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v34;
    uint64_t v21 = "#I not starting recovery monitor mode for plan with source iccid:(%s) carrier name:(%s)";
    goto LABEL_53;
  }
  if (*(unsigned char *)(v4 + 1) == 12)
  {
    BOOL v18 = a1[5];
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v19 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v19 = (void *)*v19;
    }
    uint64_t v20 = (void *)(v4 + 240);
    if (*(char *)(v4 + 263) < 0) {
      uint64_t v20 = (void *)*v20;
    }
    *(_DWORD *)int buf = 136315650;
    *(void *)&uint8_t buf[4] = "kTransferSuccessful";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v19;
    *(_WORD *)&unsigned char buf[22] = 2080;
    unint64_t v73 = v20;
    uint64_t v21 = "#I Not starting recovery monitor mode for plan with state:(%s) sourceIccid:(%s) carrierName:(%s)";
    char v22 = v18;
    uint32_t v23 = 32;
    goto LABEL_54;
  }
  if (*(void *)(v4 + 1192) && !*(unsigned char *)(v4 + 19))
  {
    uint64_t v32 = a1[5];
    if (!os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v54 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v54 = (void *)*v54;
    }
    xpc_object_t v55 = (void *)(v4 + 240);
    if (*(char *)(v4 + 263) < 0) {
      xpc_object_t v55 = (void *)*v55;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v54;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v55;
    uint64_t v21 = "#I recovery monitor mode already running for plan with source iccid:(%s) carrier name:(%s)";
LABEL_53:
    char v22 = v32;
    uint32_t v23 = 22;
LABEL_54:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v21, buf, v23);
    return;
  }
  int64x2_t v35 = a1[5];
  if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v36 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v36 = (void *)*v36;
    }
    long long v37 = (void *)(v4 + 240);
    if (*(char *)(v4 + 263) < 0) {
      long long v37 = (void *)*v37;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = v36;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v37;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I starting recovery monitor mode for plan with source iccid:(%s) carrier name:(%s)", buf, 0x16u);
  }
  uint64_t v38 = a1[12];
  uint64_t v39 = a1[3];
  dispatch_object_t object = v39;
  if (v39) {
    dispatch_retain(v39);
  }
  uint64_t v40 = (std::__shared_weak_count *)a1[2];
  if (!v40 || (v41 = a1[1], (uint64_t v42 = std::__shared_weak_count::lock(v40)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v43 = v41 + 64;
  if (!v41) {
    uint64_t v43 = 0;
  }
  uint64_t v69 = v43;
  long long v70 = v42;
  if (*(char *)(v4 + 263) < 0)
  {
    sub_10004FC84(__p, *(void **)(v4 + 240), *(void *)(v4 + 248));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(v4 + 240);
    uint64_t v68 = *(void *)(v4 + 256);
  }
  uint64_t v44 = (std::__shared_weak_count *)a1[13];
  uint64_t v65 = a1[12];
  xpc_object_t v66 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *, void *, uint64_t *, void **, void *, uint64_t *))(*(void *)v38 + 952))(buf, v38, &object, a1 + 10, &v69, __p, a1 + 20, &v65);
  char v45 = (uint64_t *)(v4 + 1192);
  long long v46 = *(_OWORD *)buf;
  *(void *)int buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  char v47 = *(std::__shared_weak_count **)(v4 + 1200);
  *(_OWORD *)(v4 + 1192) = v46;
  if (v47)
  {
    sub_10004D2C8(v47);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v66) {
    sub_10004D2C8(v66);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete(__p[0]);
  }
  if (v70) {
    sub_10004D2C8(v70);
  }
  if (object) {
    dispatch_release(object);
  }
  if (!*v45)
  {
    xpc_object_t v53 = a1[5];
    if (!os_log_type_enabled(v53, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)int buf = 0;
    uint64_t v29 = "recovery monitor mode creation failed";
    uint64_t v30 = v53;
    uint32_t v31 = 2;
LABEL_46:
    _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, v29, buf, v31);
    return;
  }
  memset(buf, 0, sizeof(buf));
  if (*(unsigned char *)(v4 + 19))
  {
    uint64_t v48 = a1[12];
    sub_100058DB0(v61, "");
    (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v48 + 1008))(&v63, v48, v4 + 24, v4 + 48, v4 + 72, v4 + 96, v61);
    if (*(void *)buf) {
      operator delete(*(void **)buf);
    }
    char v49 = v63;
    *(void *)int buf = v63;
    unint64_t v50 = (const void *)v64;
    *(_OWORD *)&uint8_t buf[8] = v64;
    long long v64 = 0uLL;
    xpc_object_t v63 = 0;
    if (v62 < 0)
    {
      uint64_t v57 = v50;
      operator delete(v61[0]);
      unint64_t v50 = v57;
    }
    uint64_t v51 = (uint64_t)v50;
    if (v49 != v50) {
      goto LABEL_104;
    }
    xpc_object_t v52 = &qword_101B12A88;
  }
  else
  {
    xpc_object_t v52 = &qword_101B12A70;
  }
  sub_10015C6C8((char *)buf, (char *)*v52, v52[1], (v52[1] - *v52) >> 3);
  char v49 = *(const void **)buf;
  uint64_t v51 = *(void *)&buf[8];
LABEL_104:
  uint64_t v56 = *v45;
  unsigned int v59 = 0;
  uint64_t v60 = 0;
  xpc_object_t v58 = 0;
  sub_10015C7D4(&v58, v49, v51, (v51 - (uint64_t)v49) >> 3);
  (*(void (**)(uint64_t, void **))(*(void *)v56 + 16))(v56, &v58);
  if (v58)
  {
    unsigned int v59 = v58;
    operator delete(v58);
  }
  if (!*(unsigned char *)(v4 + 1152))
  {
    *(_OWORD *)(v4 + 1136) = 0u;
    *(_OWORD *)(v4 + 112sub_10023C164((uint64_t)&a9, 0) = 0u;
    *(unsigned char *)(v4 + 1152) = 1;
  }
  *(CFAbsoluteTime *)(v4 + 1128) = CFAbsoluteTimeGetCurrent();
  (*(void (**)(void))(**(void **)(v4 + 1192) + 24))(*(void *)(v4 + 1192));
  if (*(void *)buf)
  {
    *(void *)&uint8_t buf[8] = *(void *)buf;
    operator delete(*(void **)buf);
  }
}

void sub_100C7A2AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,std::__shared_weak_count *a33,dispatch_object_t object,void *a35,uint64_t a36)
{
  if (a33) {
    sub_10004D2C8(a33);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7A34C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[33];
  uint64_t v5 = a1[34];
  sub_10030DDAC((uint64_t)v64, (long long *)a2);
  if (v4 != v5)
  {
    uint64_t v6 = v67;
    size_t v7 = __n;
    uint32_t v8 = __s1;
    if ((v67 & 0x80u) == 0) {
      size_t v9 = v67;
    }
    else {
      size_t v9 = __n;
    }
    do
    {
      uint64_t v10 = *(unsigned __int8 *)(v4 + 455);
      int v11 = (char)v10;
      if ((v10 & 0x80u) != 0) {
        uint64_t v10 = *(void *)(v4 + 440);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)(v4 + 432);
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)(v4 + 432);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(v8, v12, v7)) {
            goto LABEL_20;
          }
        }
        else
        {
          if (!v6) {
            goto LABEL_20;
          }
          p_s1 = &__s1;
          uint64_t v14 = v6;
          while (*(unsigned __int8 *)p_s1 == *v12)
          {
            p_s1 = (void **)((char *)p_s1 + 1);
            ++v12;
            if (!--v14) {
              goto LABEL_20;
            }
          }
        }
      }
      v4 += 1248;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
  }
LABEL_20:
  sub_10030D10C((uint64_t)v64);
  if (v4 == a1[34])
  {
    uint64_t v20 = a1[5];
    if (!os_log_type_enabled(v20, OS_LOG_TYPE_ERROR)) {
      return;
    }
    uint64_t v21 = a2 + 432;
    if (*(char *)(a2 + 455) < 0) {
      uint64_t v21 = *(void *)(a2 + 432);
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v21;
    char v22 = "pending transfer plan not found for sourceIccid:%s. Not starting retry monitor mode";
    uint32_t v23 = v20;
    uint32_t v24 = 12;
    goto LABEL_30;
  }
  if (*(unsigned char *)(v4 + 1) == 12)
  {
    uint64_t v15 = a1[5];
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v16 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v16 = (void *)*v16;
    }
    *(_DWORD *)int buf = 136315394;
    *(void *)&uint8_t buf[4] = "kTransferSuccessful";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v16;
    char v17 = "#I Not starting retry monitor mode for plan with state:%s sourceIccid: %s";
    BOOL v18 = v15;
    uint32_t v19 = 22;
    goto LABEL_43;
  }
  if (!*(unsigned char *)(v4 + 18))
  {
    uint64_t v25 = a1[5];
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v27 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v27 = (void *)*v27;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v27;
    char v17 = "#I Not starting retry monitor mode for plan which is not deleted on source for sourceIccid:%s";
    goto LABEL_41;
  }
  if (*(void *)(v4 + 1208))
  {
    uint64_t v25 = a1[5];
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    uint64_t v26 = (void *)(v4 + 432);
    if (*(char *)(v4 + 455) < 0) {
      uint64_t v26 = (void *)*v26;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v26;
    char v17 = "#I Retry transfer monitor mode already running for plan with sourceIccid:%s";
    goto LABEL_41;
  }
  char v28 = *(unsigned char *)(v4 + 335);
  if (v28 < 0)
  {
    if (!*(void *)(v4 + 320)) {
      goto LABEL_57;
    }
  }
  else if (!*(unsigned char *)(v4 + 335))
  {
LABEL_57:
    uint64_t v30 = a1[5];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      uint32_t v31 = (void *)(v4 + 312);
      if (v28 < 0) {
        uint32_t v31 = (void *)*v31;
      }
      uint64_t v32 = (void *)(v4 + 384);
      if (*(char *)(v4 + 407) < 0) {
        uint64_t v32 = (void *)*v32;
      }
      uint64_t v33 = (void *)(v4 + 432);
      if (*(char *)(v4 + 455) < 0) {
        uint64_t v33 = (void *)*v33;
      }
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = v31;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v32;
      *(_WORD *)&unsigned char buf[22] = 2080;
      xpc_object_t v63 = v33;
      char v17 = "#I Not starting retry monitor mode for plan with transfer token:%s, imsi:%s and sourceIccid:%s";
      BOOL v18 = v30;
      uint32_t v19 = 32;
      goto LABEL_43;
    }
    return;
  }
  if (*(char *)(v4 + 407) < 0)
  {
    if (!*(void *)(v4 + 392)) {
      goto LABEL_57;
    }
  }
  else if (!*(unsigned char *)(v4 + 407))
  {
    goto LABEL_57;
  }
  if (!*(unsigned char *)(v4 + 1226))
  {
    char v34 = *(unsigned char *)(v4 + 479);
    if (v34 < 0) {
      uint64_t v35 = *(void *)(v4 + 464);
    }
    else {
      uint64_t v35 = *(unsigned __int8 *)(v4 + 479);
    }
    uint64_t v36 = a1[5];
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if (v35)
    {
      if (v37)
      {
        uint64_t v38 = (void *)(v4 + 456);
        if (v34 < 0) {
          uint64_t v38 = (void *)*v38;
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v38;
        char v17 = "#I Not starting retry monitor mode for plan with targetIccid:%s";
        BOOL v18 = v36;
        goto LABEL_42;
      }
      return;
    }
    if (v37)
    {
      uint64_t v39 = (void *)(v4 + 432);
      if (*(char *)(v4 + 455) < 0) {
        uint64_t v39 = (void *)*v39;
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v39;
      _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I starting retry transfer monitor mode for plan with sourceIccid:%s", buf, 0xCu);
    }
    *(unsigned char *)(v4 + 1) = 11;
    uint64_t v40 = a1[12];
    uint64_t v41 = a1[3];
    dispatch_object_t object = v41;
    if (v41) {
      dispatch_retain(v41);
    }
    uint64_t v42 = (std::__shared_weak_count *)a1[2];
    if (!v42 || (v43 = a1[1], (uint64_t v44 = std::__shared_weak_count::lock(v42)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v45 = v43 + 72;
    if (!v43) {
      uint64_t v45 = 0;
    }
    uint64_t v59 = v45;
    uint64_t v60 = v44;
    if (*(char *)(v4 + 455) < 0)
    {
      sub_10004FC84(__p, *(void **)(v4 + 432), *(void *)(v4 + 440));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v4 + 432);
      uint64_t v58 = *(void *)(v4 + 448);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, dispatch_object_t *, void *, uint64_t *, void **))(*(void *)v40 + 960))(buf, v40, &object, a1 + 10, &v59, __p);
    long long v46 = (uint64_t *)(v4 + 1208);
    long long v47 = *(_OWORD *)buf;
    *(void *)int buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v48 = *(std::__shared_weak_count **)(v4 + 1216);
    *(_OWORD *)(v4 + 1208) = v47;
    if (v48)
    {
      sub_10004D2C8(v48);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(__p[0]);
    }
    if (v60) {
      sub_10004D2C8(v60);
    }
    if (object) {
      dispatch_release(object);
    }
    if (*v46)
    {
      memset(buf, 0, sizeof(buf));
      uint64_t v49 = a1[12];
      sub_100058DB0(v55, "");
      (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v49 + 968))(buf, v49, 4, v4 + 24, v4 + 48, v4 + 72, v4 + 96, v55);
      if (v56 < 0) {
        operator delete(v55[0]);
      }
      uint64_t v50 = *v46;
      xpc_object_t v53 = 0;
      uint64_t v54 = 0;
      xpc_object_t v52 = 0;
      sub_10015C7D4(&v52, *(const void **)buf, *(uint64_t *)&buf[8], (uint64_t)(*(void *)&buf[8] - *(void *)buf) >> 3);
      (*(void (**)(uint64_t, void **))(*(void *)v50 + 16))(v50, &v52);
      if (v52)
      {
        xpc_object_t v53 = v52;
        operator delete(v52);
      }
      if (!*(unsigned char *)(v4 + 1152))
      {
        *(_OWORD *)(v4 + 1136) = 0u;
        *(_OWORD *)(v4 + 112sub_10023C164((uint64_t)&a9, 0) = 0u;
        *(unsigned char *)(v4 + 1152) = 1;
      }
      *(CFAbsoluteTime *)(v4 + 1136) = CFAbsoluteTimeGetCurrent();
      (*(void (**)(void))(**(void **)(v4 + 1208) + 24))(*(void *)(v4 + 1208));
      if (*(void *)buf)
      {
        *(void *)&uint8_t buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      return;
    }
    uint64_t v51 = a1[5];
    if (!os_log_type_enabled(v51, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)int buf = 0;
    char v22 = "retry transfer monitor mode creation failed";
    uint32_t v23 = v51;
    uint32_t v24 = 2;
LABEL_30:
    _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v22, buf, v24);
    return;
  }
  uint64_t v25 = a1[5];
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = a2 + 432;
    if (*(char *)(a2 + 455) < 0) {
      uint64_t v29 = *(void *)(a2 + 432);
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v29;
    char v17 = "#I Retry Monitor mode exhausted for plan with sourceIccid: %s";
LABEL_41:
    BOOL v18 = v25;
LABEL_42:
    uint32_t v19 = 12;
LABEL_43:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v17, buf, v19);
  }
}

void sub_100C7AA58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,std::__shared_weak_count *a25,dispatch_object_t object,void *a27,uint64_t a28)
{
  if (a25) {
    sub_10004D2C8(a25);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7AAE8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C7ABC8(void *a1, std::string *__str, int a3, const std::string *a4, unsigned __int8 a5)
{
  uint64_t v10 = (unsigned __int8 *)a1[33];
  int v11 = (unsigned __int8 *)a1[34];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = *__str;
  }
  uint64_t v12 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v10 != v11)
  {
    long long v13 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type size = __p.__r_.__value_.__l.__size_;
    }
    do
    {
      uint64_t v15 = v10[479];
      int v16 = (char)v15;
      if ((v15 & 0x80u) != 0) {
        uint64_t v15 = *((void *)v10 + 58);
      }
      if (size == v15)
      {
        if (v16 >= 0) {
          char v17 = v10 + 456;
        }
        else {
          char v17 = (unsigned __int8 *)*((void *)v10 + 57);
        }
        if ((v12 & 0x80) != 0)
        {
          if (!memcmp((const void *)v13, v17, *((size_t *)&v13 + 1))) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v12) {
            goto LABEL_25;
          }
          uint64_t p_p = &__p;
          uint64_t v19 = v12;
          while (p_p->__r_.__value_.__s.__data_[0] == *v17)
          {
            uint64_t p_p = (std::string *)((char *)p_p + 1);
            ++v17;
            if (!--v19) {
              goto LABEL_23;
            }
          }
        }
      }
      v10 += 1248;
    }
    while (v10 != v11);
    uint64_t v10 = v11;
  }
LABEL_23:
  if ((v12 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p.__r_.__value_.__l.__data_);
LABEL_25:
  if (v10 == (unsigned __int8 *)a1[34]) {
    uint64_t v10 = (unsigned __int8 *)sub_100C7ADD8(a1 + 33, (char *)v10);
  }
  std::string::operator=((std::string *)v10 + 19, __str);
  sub_100CD7084((uint64_t)__str, (uint64_t)&v21);
  uint64_t v20 = (void **)(v10 + 480);
  if ((char)v10[503] < 0) {
    operator delete(*v20);
  }
  *(_OWORD *)uint64_t v20 = v21;
  *((void *)v10 + 62) = v22;
  std::string::operator=((std::string *)v10 + 10, a4);
  v10[984] = a5;
  if ((a3 - 4) > 0xFFFFFFFD)
  {
    *(_WORD *)(v10 + 1) = 1033;
    sub_100C7B0E8((uint64_t)a1, (uint64_t)v10, 0x18u, 0);
    sub_100C78980(a1);
    sub_100C7AAE8((uint64_t)a1);
  }
  sub_100C78980(a1);
}

void *sub_100C7ADD8(uint64_t *a1, char *a2)
{
  uint64_t v2 = a2;
  uint64_t v4 = (char *)a1[1];
  uint64_t v6 = (uint64_t)(a1 + 2);
  unint64_t v5 = a1[2];
  if ((unint64_t)v4 >= v5)
  {
    uint64_t v7 = *a1;
    unint64_t v8 = 0x6F96F96F96F96F97 * ((uint64_t)&v4[-*a1] >> 5) + 1;
    if (v8 > 0x34834834834834) {
      sub_10006A748();
    }
    uint64_t v9 = (uint64_t)&a2[-v7];
    uint64_t v10 = 0x6F96F96F96F96F97 * ((uint64_t)&a2[-v7] >> 5);
    unint64_t v11 = 0x6F96F96F96F96F97 * ((uint64_t)(v5 - v7) >> 5);
    if (2 * v11 > v8) {
      unint64_t v8 = 2 * v11;
    }
    if (v11 >= 0x1A41A41A41A41ALL) {
      unint64_t v12 = 0x34834834834834;
    }
    else {
      unint64_t v12 = v8;
    }
    uint32_t v31 = a1 + 2;
    if (v12) {
      long long v13 = (long long *)sub_10030B8AC((uint64_t)(a1 + 2), v12);
    }
    else {
      long long v13 = 0;
    }
    uint64_t v14 = &v13[78 * v10];
    char v28 = v13;
    *(void *)&long long v29 = v14;
    *((void *)&v29 + 1) = v14;
    uint64_t v30 = &v13[78 * v12];
    if (v10 == v12)
    {
      if (v9 < 1)
      {
        if ((void *)v7 == v2) {
          unint64_t v16 = 1;
        }
        else {
          unint64_t v16 = 2 * v10;
        }
        uint64_t v35 = v6;
        char v17 = (char *)sub_10030B8AC(v6, v16);
        uint64_t v18 = (uint64_t)&v17[1248 * (v16 >> 2)];
        uint64_t v32 = (long long *)v17;
        v33.i64[0] = v18;
        uint64_t v20 = &v17[1248 * v19];
        v33.i64[1] = v18;
        char v34 = v20;
        long long v21 = (long long *)v29;
        if (*((void *)&v29 + 1) == (void)v29)
        {
          int64x2_t v25 = vdupq_n_s64(v29);
          uint32_t v23 = (long long *)v18;
        }
        else
        {
          uint64_t v22 = (*((void *)&v29 + 1) - (void)v29) / 1248;
          uint32_t v23 = (long long *)(v18 + 1248 * v22);
          uint64_t v24 = 1248 * v22;
          do
          {
            sub_1003115D8(v18, v21);
            v18 += 1248;
            v21 += 78;
            v24 -= 1248;
          }
          while (v24);
          char v17 = (char *)v32;
          uint64_t v18 = v33.i64[0];
          int64x2_t v25 = (int64x2_t)v29;
          uint64_t v20 = v34;
        }
        uint64_t v26 = v30;
        uint64_t v32 = v28;
        char v28 = (long long *)v17;
        *(void *)&long long v29 = v18;
        int64x2_t v33 = v25;
        uint64_t v30 = (long long *)v20;
        char v34 = (char *)v26;
        sub_1003254E4((uint64_t)&v32);
        uint64_t v14 = v23;
      }
      else
      {
        if (v10 >= -1) {
          uint64_t v15 = v10 + 1;
        }
        else {
          uint64_t v15 = v10 + 2;
        }
        uint64_t v14 = (long long *)sub_100C85CCC(&v13[78 * v10], v14, (uint64_t)&v14[-78 * (v15 >> 1)]);
        *(void *)&long long v29 = v29 - 1248 * (v15 >> 1);
      }
    }
    bzero(v14, 0x4E0uLL);
    *((void *)&v29 + 1) = v14 + 78;
    uint64_t v2 = (void *)sub_100C85BD0(a1, &v28, (uint64_t)v2);
    sub_1003254E4((uint64_t)&v28);
  }
  else if (a2 == v4)
  {
    bzero(a2, 0x4E0uLL);
    a1[1] = (uint64_t)v2 + 1248;
  }
  else
  {
    uint64_t v36 = a1 + 2;
    bzero(&v32, 0x4E0uLL);
    sub_100C85AFC((uint64_t)a1, (uint64_t)v2, (unint64_t)v4, (uint64_t)v2 + 1248);
    sub_100310984((uint64_t)v2, (long long *)&v32);
    sub_10030D10C((uint64_t)&v32);
  }
  return v2;
}

void sub_100C7B0B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, ...)
{
  va_start(va, a7);
  sub_10030D10C((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_100C7B0E8(uint64_t a1, uint64_t a2, unsigned int a3, char a4)
{
  if (*(void *)(a2 + 1160))
  {
    unint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Profile release timer running", buf, 2u);
    }
  }
  else
  {
    uint64_t v33 = 0;
    char v34 = 0;
    (***(void (****)(uint8_t *__return_ptr))(a1 + 96))(buf);
    Registry::getTimerService(&v33, *(Registry **)buf);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v33)
    {
      memset(buf, 0, sizeof(buf));
      uint64_t v32 = 0;
      if (*(char *)(a2 + 503) < 0)
      {
        sub_10004FC84(buf, *(void **)(a2 + 480), *(void *)(a2 + 488));
      }
      else
      {
        *(_OWORD *)int buf = *(_OWORD *)(a2 + 480);
        uint64_t v32 = *(void *)(a2 + 496);
      }
      long long __dst = 0uLL;
      uint64_t v30 = 0;
      if (*(char *)(a2 + 263) < 0)
      {
        sub_10004FC84(&__dst, *(void **)(a2 + 240), *(void *)(a2 + 248));
      }
      else
      {
        long long __dst = *(_OWORD *)(a2 + 240);
        uint64_t v30 = *(void *)(a2 + 256);
      }
      uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v10 || (uint64_t v11 = *(void *)(a1 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
        sub_100088B9C();
      }
      long long v13 = v12;
      atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      uint64_t v14 = v33;
      sub_100058DB0(__p, "Pending profile release wait timer");
      uint64_t v15 = *(NSObject **)(a1 + 24);
      dispatch_object_t object = v15;
      if (v15) {
        dispatch_retain(v15);
      }
      v17[0] = _NSConcreteStackBlock;
      v17[1] = 1174405120;
      void v17[2] = sub_100C83238;
      void v17[3] = &unk_101A4C820;
      v17[4] = a1;
      void v17[5] = v11;
      uint64_t v18 = v13;
      atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      if (SHIBYTE(v32) < 0)
      {
        sub_10004FC84(&v19, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        long long v19 = *(_OWORD *)buf;
        uint64_t v20 = v32;
      }
      if (SHIBYTE(v30) < 0)
      {
        sub_10004FC84(&v21, (void *)__dst, *((unint64_t *)&__dst + 1));
      }
      else
      {
        long long v21 = __dst;
        uint64_t v22 = v30;
      }
      char v23 = a4;
      aBlock = _Block_copy(v17);
      sub_100118A44(v14, (uint64_t)__p, 0, 60000000 * a3, &object, &aBlock);
      sub_1004DC2E0((void *)(a2 + 1160), &v28);
      uint64_t v16 = v28;
      uint64_t v28 = 0;
      if (v16) {
        (*(void (**)(uint64_t))(*(void *)v16 + 8))(v16);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v27 < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete((void *)v21);
      }
      if (SHIBYTE(v20) < 0) {
        operator delete((void *)v19);
      }
      if (v18) {
        std::__shared_weak_count::__release_weak(v18);
      }
      std::__shared_weak_count::__release_weak(v13);
      if (SHIBYTE(v30) < 0) {
        operator delete((void *)__dst);
      }
      if (SHIBYTE(v32) < 0) {
        operator delete(*(void **)buf);
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Timer service is not available", buf, 2u);
      }
    }
    if (v34) {
      sub_10004D2C8(v34);
    }
  }
}

void sub_100C7B470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *aBlock,dispatch_object_t object,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,uint64_t a37)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  std::__shared_weak_count::__release_weak(v37);
  if (*(char *)(v38 - 121) < 0) {
    operator delete(*(void **)(v38 - 144));
  }
  if (*(char *)(v38 - 89) < 0) {
    operator delete(*(void **)(v38 - 112));
  }
  uint64_t v40 = *(std::__shared_weak_count **)(v38 - 72);
  if (v40) {
    sub_10004D2C8(v40);
  }
  _Unwind_Resume(a1);
}

void sub_100C7B588(void *a1, uint64_t a2)
{
  unint64_t v4 = a1[33];
  unint64_t v5 = a1[34];
  sub_10030DDAC((uint64_t)v51, (long long *)a2);
  if (v4 != v5)
  {
    uint64_t v6 = v54;
    size_t v7 = __n;
    if ((v54 & 0x80u) == 0) {
      size_t v8 = v54;
    }
    else {
      size_t v8 = __n;
    }
    uint64_t v9 = v57;
    size_t v10 = v56;
    uint64_t v45 = v55;
    __s1 = v52;
    if ((v57 & 0x80u) == 0) {
      size_t v11 = v57;
    }
    else {
      size_t v11 = v56;
    }
    do
    {
      uint64_t v12 = *(unsigned __int8 *)(v4 + 479);
      int v13 = (char)v12;
      if ((v12 & 0x80u) != 0) {
        uint64_t v12 = *(void *)(v4 + 464);
      }
      if (v8 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = (unsigned __int8 *)(v4 + 456);
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)(v4 + 456);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(__s1, v14, v7)) {
            goto LABEL_36;
          }
        }
        else
        {
          if (!v6) {
            goto LABEL_36;
          }
          uint64_t v15 = &v52;
          uint64_t v16 = v6;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            uint64_t v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v16) {
              goto LABEL_36;
            }
          }
        }
      }
      uint64_t v17 = *(unsigned __int8 *)(v4 + 503);
      int v18 = (char)v17;
      if ((v17 & 0x80u) != 0) {
        uint64_t v17 = *(void *)(v4 + 488);
      }
      if (v11 == v17)
      {
        if (v18 >= 0) {
          long long v19 = (unsigned __int8 *)(v4 + 480);
        }
        else {
          long long v19 = *(unsigned __int8 **)(v4 + 480);
        }
        if ((v9 & 0x80) != 0)
        {
          if (!memcmp(v45, v19, v10)) {
            goto LABEL_36;
          }
        }
        else
        {
          if (!v9) {
            goto LABEL_36;
          }
          uint64_t v20 = &v55;
          uint64_t v21 = v9;
          while (*(unsigned __int8 *)v20 == *v19)
          {
            uint64_t v20 = (void **)((char *)v20 + 1);
            ++v19;
            if (!--v21) {
              goto LABEL_36;
            }
          }
        }
      }
      v4 += 1248;
    }
    while (v4 != v5);
    unint64_t v4 = v5;
  }
LABEL_36:
  sub_10030D10C((uint64_t)v51);
  if (v4 == a1[34])
  {
    unint64_t v22 = a1[35];
    if (v4 >= v22)
    {
      uint64_t v23 = a1[33];
      uint64_t v24 = 0x6F96F96F96F96F97 * ((uint64_t)(v4 - v23) >> 5);
      unint64_t v25 = v24 + 1;
      if ((unint64_t)(v24 + 1) > 0x34834834834834) {
        sub_10006A748();
      }
      unint64_t v26 = 0x6F96F96F96F96F97 * ((uint64_t)(v22 - v23) >> 5);
      uint64_t v27 = 2 * v26;
      if (2 * v26 <= v25) {
        uint64_t v27 = v24 + 1;
      }
      if (v26 >= 0x1A41A41A41A41ALL) {
        unint64_t v28 = 0x34834834834834;
      }
      else {
        unint64_t v28 = v27;
      }
      uint64_t v50 = a1 + 35;
      if (v28) {
        long long v29 = (char *)sub_10030B8AC((uint64_t)(a1 + 35), v28);
      }
      else {
        long long v29 = 0;
      }
      uint64_t v30 = (long long *)&v29[32 * ((uint64_t)(v4 - v23) >> 5)];
      long long v47 = v29;
      *(void *)&long long v48 = v30;
      *((void *)&v48 + 1) = v30;
      uint64_t v49 = &v29[1248 * v28];
      if (v24 == v28)
      {
        if ((uint64_t)(v4 - v23) < 1)
        {
          if (v23 == v4) {
            unint64_t v31 = 1;
          }
          else {
            unint64_t v31 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(v4 - v23) >> 5);
          }
          uint64_t v60 = a1 + 35;
          uint64_t v32 = (char *)sub_10030B8AC((uint64_t)(a1 + 35), v31);
          uint64_t v33 = (uint64_t)&v32[1248 * (v31 >> 2)];
          *(void *)uint64_t v58 = v32;
          *(void *)&v58[8] = v33;
          uint64_t v35 = &v32[1248 * v34];
          *(void *)&v58[16] = v33;
          uint64_t v59 = v35;
          uint64_t v36 = (long long *)v48;
          if (*((void *)&v48 + 1) == (void)v48)
          {
            int64x2_t v40 = vdupq_n_s64(v48);
            uint64_t v38 = (long long *)v33;
          }
          else
          {
            uint64_t v37 = (*((void *)&v48 + 1) - (void)v48) / 1248;
            uint64_t v38 = (long long *)(v33 + 1248 * v37);
            uint64_t v39 = 1248 * v37;
            do
            {
              sub_1003115D8(v33, v36);
              v33 += 1248;
              v36 += 78;
              v39 -= 1248;
            }
            while (v39);
            uint64_t v32 = *(char **)v58;
            uint64_t v33 = *(void *)&v58[8];
            int64x2_t v40 = (int64x2_t)v48;
            uint64_t v35 = v59;
          }
          uint64_t v41 = v47;
          uint64_t v42 = v49;
          long long v47 = v32;
          *(void *)&long long v48 = v33;
          *(int64x2_t *)&v58[8] = v40;
          *((void *)&v48 + 1) = v38;
          uint64_t v49 = v35;
          *(void *)uint64_t v58 = v41;
          uint64_t v59 = v42;
          sub_1003254E4((uint64_t)v58);
          uint64_t v30 = v38;
        }
        else
        {
          uint64_t v30 = (long long *)sub_100C85CCC(v30, v30, (uint64_t)&v30[-78 * (v25 >> 1)]);
          *(void *)&long long v48 = v48 - 1248 * (v25 >> 1);
          *((void *)&v48 + 1) = v30;
        }
      }
      sub_10030DDAC((uint64_t)v30, (long long *)a2);
      *((void *)&v48 + 1) += 1248;
      unint64_t v4 = sub_100C85BD0(a1 + 33, &v47, v4);
      sub_1003254E4((uint64_t)&v47);
    }
    else
    {
      sub_10030DDAC(v4, (long long *)a2);
      a1[34] = v4 + 1248;
    }
  }
  uint64_t v43 = *(unsigned __int8 *)(a2 + 479);
  if ((v43 & 0x80u) != 0) {
    uint64_t v43 = *(void *)(a2 + 464);
  }
  if (v43)
  {
    sub_100CD7084(a2 + 456, (uint64_t)v58);
    uint64_t v44 = (void **)(v4 + 480);
    if (*(char *)(v4 + 503) < 0) {
      operator delete(*v44);
    }
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v58;
    *(void *)(v4 + 496) = *(void *)&v58[16];
    sub_100C7961C(a1, v4);
  }
  sub_100C78980(a1);
  sub_100C7AAE8((uint64_t)a1);
}

void sub_100C7BA28(_Unwind_Exception *a1)
{
  *(void *)(v1 + 272) = v2;
  _Unwind_Resume(a1);
}

void sub_100C7BA74(void *a1, std::string *__str, unsigned int a3)
{
  uint64_t v6 = (char *)a1[33];
  size_t v7 = (char *)a1[34];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = *__str;
  }
  uint64_t v8 = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  if (v6 == v7)
  {
LABEL_29:
    if ((v8 & 0x80) != 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v6 == (char *)a1[34]) {
      uint64_t v6 = (char *)sub_100C7ADD8(a1 + 33, v6);
    }
    std::string::operator=((std::string *)v6 + 10, __str);
    *(_WORD *)(v6 + 1) = 1033;
    sub_100C7B0E8((uint64_t)a1, (uint64_t)v6, a3, 1);
    sub_100C78980(a1);
    sub_100C7AAE8((uint64_t)a1);
  }
  long long v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  while (1)
  {
    uint64_t v11 = v6[263];
    int v12 = (char)v11;
    if ((v11 & 0x80u) != 0) {
      uint64_t v11 = *((void *)v6 + 31);
    }
    if (size == v11)
    {
      if (v12 >= 0) {
        int v13 = (unsigned __int8 *)(v6 + 240);
      }
      else {
        int v13 = (unsigned __int8 *)*((void *)v6 + 30);
      }
      if ((v8 & 0x80) != 0)
      {
        if (!memcmp((const void *)v9, v13, *((size_t *)&v9 + 1)))
        {
LABEL_21:
          uint64_t v16 = v6[455];
          if ((v16 & 0x80u) != 0) {
            uint64_t v16 = *((void *)v6 + 55);
          }
          if (!v16)
          {
            uint64_t v17 = v6[503];
            if ((v17 & 0x80u) != 0) {
              uint64_t v17 = *((void *)v6 + 61);
            }
            if (!v17) {
              goto LABEL_29;
            }
          }
        }
      }
      else
      {
        if (!v8) {
          goto LABEL_21;
        }
        uint64_t p_p = &__p;
        uint64_t v15 = v8;
        while (p_p->__r_.__value_.__s.__data_[0] == *v13)
        {
          uint64_t p_p = (std::string *)((char *)p_p + 1);
          ++v13;
          if (!--v15) {
            goto LABEL_21;
          }
        }
      }
    }
    v6 += 1248;
    if (v6 == v7)
    {
      uint64_t v6 = v7;
      goto LABEL_29;
    }
  }
}

void sub_100C7BC1C(void *a1, std::string *__str, void *a3)
{
  uint64_t v6 = (unsigned __int8 *)a1[33];
  size_t v7 = (unsigned __int8 *)a1[34];
  if (SHIBYTE(__str->__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, __str->__r_.__value_.__l.__data_, __str->__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = *__str;
  }
  if (v6 != v7)
  {
    do
    {
      uint64_t v8 = v6[455];
      if ((v8 & 0x80u) != 0) {
        uint64_t v8 = *((void *)v6 + 55);
      }
      if (v8) {
        BOOL v9 = 1;
      }
      else {
        BOOL v9 = v6[19] == 0;
      }
      if (!v9) {
        goto LABEL_14;
      }
      v6 += 1248;
    }
    while (v6 != v7);
    uint64_t v6 = v7;
  }
LABEL_14:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (v6 == (unsigned __int8 *)a1[34])
  {
    size_t v10 = a1[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      v11[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I pending plan not found for signup plan", (uint8_t *)v11, 2u);
    }
    uint64_t v6 = (unsigned __int8 *)sub_100C7ADD8(a1 + 33, (char *)v6);
  }
  std::string::operator=((std::string *)v6 + 10, __str);
  v6[19] = 1;
  v6[1225] = 1;
  *(_WORD *)(v6 + 1) = 1033;
  if (*a3 != a3[1])
  {
    std::string::operator=((std::string *)v6 + 1, (const std::string *)(*a3 + 32));
    std::string::operator=((std::string *)v6 + 2, (const std::string *)(*a3 + 56));
    std::string::operator=((std::string *)v6 + 3, (const std::string *)(*a3 + 80));
    std::string::operator=((std::string *)v6 + 4, (const std::string *)(*a3 + 104));
  }
  sub_100C79BC0(a1, (uint64_t)v6);
  sub_100C78980(a1);
  sub_100C7AAE8((uint64_t)a1);
}

void sub_100C7BDB4(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v14 = 0;
  unint64_t v15 = 0;
  unint64_t v16 = 0;
  uint64_t v6 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    while (1)
    {
      if (*(unsigned char *)(v6 + 4))
      {
        unsigned int v9 = *(unsigned __int8 *)(v6 + 2);
        BOOL v10 = v9 >= 0xA;
        BOOL v12 = v9 == 10;
        int v11 = (1 << v9) & 0x41C;
        BOOL v12 = !v12 && v10 || v11 == 0;
        if (!v12) {
          break;
        }
      }
      if (*(void *)(v6 + 1160))
      {
        if (v8 < v16) {
          goto LABEL_12;
        }
LABEL_13:
        unint64_t v8 = sub_100C85D24(&v14, (long long *)v6);
LABEL_14:
        unint64_t v15 = v8;
      }
      v6 += 1248;
      if (v6 == v7) {
        goto LABEL_16;
      }
    }
    if (v8 >= v16) {
      goto LABEL_13;
    }
LABEL_12:
    sub_10030DDAC(v8, (long long *)v6);
    v8 += 1248;
    goto LABEL_14;
  }
LABEL_16:
  sub_100CCFBF8((os_log_t *)(a1 + 40), &v14, a2, &v13);
  sub_10031F910(a3, (uint64_t)&v13, 0);
  sub_100044D00(&v13);
  uint64_t v17 = (void **)&v14;
  sub_10030AFC8(&v17);
}

void sub_100C7BEDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_10030AFC8(&a14);
  _Unwind_Resume(a1);
}

void sub_100C7BF1C(uint64_t a1, unsigned __int8 **a2, uint64_t a3)
{
  uint64_t v12 = 0;
  unint64_t v13 = 0;
  unint64_t v14 = 0;
  uint64_t v6 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  if (v6 != v7)
  {
    unint64_t v8 = 0;
    do
    {
      if ((*(_DWORD *)(a1 + 208) == 1 || *(unsigned char *)v6 != 7) && (!*(unsigned char *)(v6 + 14) || *(unsigned char *)(v6 + 2) == 4))
      {
        if (v8 >= v14)
        {
          unint64_t v8 = sub_100C85D24(&v12, (long long *)v6);
        }
        else
        {
          sub_10030DDAC(v8, (long long *)v6);
          v8 += 1248;
        }
        unint64_t v13 = v8;
      }
      v6 += 1248;
    }
    while (v6 != v7);
  }
  sub_100CCFBF8((os_log_t *)(a1 + 40), &v12, a2, &v11);
  sub_10031F910(a3, (uint64_t)&v11, 0);
  sub_100044D00(&v11);
  unint64_t v15 = (void **)&v12;
  sub_10030AFC8(&v15);
}

void sub_100C7C018(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, char a11, uint64_t a12, uint64_t a13, void **a14)
{
  a14 = (void **)&a11;
  sub_10030AFC8(&a14);
  _Unwind_Resume(a1);
}

uint64_t sub_100C7C054(uint64_t a1)
{
  return a1 + 264;
}

uint64_t sub_100C7C05C@<X0>(uint64_t result@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v2 = *(unsigned char **)(result + 264);
  unsigned int v3 = *(unsigned char **)(result + 272);
  if (v2 != v3)
  {
    unint64_t v5 = 0;
    do
    {
      if (*v2 == 7)
      {
        uint64_t v6 = (long long *)(v2 + 432);
        if (v5 >= a2[2])
        {
          __n128 result = sub_100048008(a2, v6);
          unint64_t v5 = result;
        }
        else
        {
          __n128 result = (uint64_t)sub_1000D87F8(a2, v6);
          v5 += 24;
        }
        a2[1] = v5;
      }
      v2 += 1248;
    }
    while (v2 != v3);
  }
  return result;
}

void sub_100C7C0EC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100C7C104(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = *a2;
    uint64_t v50 = *((void *)a2 + 2);
  }
  uint64_t v8 = HIBYTE(v50);
  if (v6 != v7)
  {
    BOOL v10 = __p[0];
    unsigned int v9 = __p[1];
    if (v50 >= 0) {
      int v11 = (void *)HIBYTE(v50);
    }
    else {
      int v11 = __p[1];
    }
    do
    {
      uint64_t v12 = (void *)*(unsigned __int8 *)(v6 + 455);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        uint64_t v12 = *(void **)(v6 + 440);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          unint64_t v14 = (unsigned __int8 *)(v6 + 432);
        }
        else {
          unint64_t v14 = *(unsigned __int8 **)(v6 + 432);
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(v10, v14, (size_t)v9)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_25;
          }
          unint64_t v15 = __p;
          uint64_t v16 = v8;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            unint64_t v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v16) {
              goto LABEL_23;
            }
          }
        }
      }
      v6 += 1248;
    }
    while (v6 != v7);
    uint64_t v6 = v7;
  }
LABEL_23:
  if ((v8 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (v6 == *(void *)(a1 + 272))
  {
    unint64_t v25 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0) {
        uint64_t v34 = a2;
      }
      else {
        uint64_t v34 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)xpc_object_t v52 = v34;
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", buf, 0xCu);
    }
    long long v47 = 0;
    long long v48 = 0;
    sub_1002E1174(a3, 0, (uint64_t)&v48, (uint64_t)&v47, 6);
    sub_100057D78(&v47);
    sub_1000558F4(&v48);
  }
  else
  {
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 256);
    if (v17)
    {
      int v18 = std::__shared_weak_count::lock(v17);
      if (v18)
      {
        uint64_t v19 = *(void *)(a1 + 248);
        if (v19)
        {
          uint64_t v20 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            if (*((char *)a2 + 23) >= 0) {
              uint64_t v21 = a2;
            }
            else {
              uint64_t v21 = *(void **)a2;
            }
            unint64_t v22 = sub_1008A2228(*(unsigned __int8 *)(v6 + 1));
            uint64_t v23 = sub_1008A2228(*(unsigned __int8 *)(v6 + 2));
            *(_DWORD *)int buf = 136315650;
            *(void *)xpc_object_t v52 = v21;
            *(_WORD *)&v52[8] = 2080;
            xpc_object_t v53 = v22;
            __int16 v54 = 2080;
            xpc_object_t v55 = v23;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Activating pending plan with sourceIccid: %s in terminal state: %s and display state: %s", buf, 0x20u);
          }
          if (*(unsigned __int8 *)(v6 + 1) - 7 > 2)
          {
            int v38 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 112))(v19);
            int v27 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 120))(v19);
            int v28 = (*(uint64_t (**)(uint64_t))(*(void *)v19 + 128))(v19);
            long long v29 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)int buf = 67109632;
              *(_DWORD *)xpc_object_t v52 = v38;
              *(_WORD *)&void v52[4] = 1024;
              *(_DWORD *)&v52[6] = v27;
              LOWORD(v53) = 1024;
              *(_DWORD *)((char *)&v53 + 2) = v28;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I iCloud signed in: [%d], boostrap enabled: [%d], Wifi active: [%d]", buf, 0x14u);
            }
            if ((v38 & (v27 ^ 1 | v28)) == 1)
            {
              *(unsigned char *)(v6 + 2) = 4;
              (*(void (**)(uint64_t))(*(void *)v19 + 48))(v19);
              uint64_t v58 = a1;
              if (*((char *)a2 + 23) < 0)
              {
                sub_10004FC84(&v59, *(void **)a2, *((void *)a2 + 1));
              }
              else
              {
                long long v59 = *a2;
                uint64_t v60 = *((void *)a2 + 2);
              }
              sub_1003240C8((uint64_t)v61, a3);
              xpc_object_t v63 = 0;
              uint64_t v35 = operator new(0x48uLL);
              uint64_t v36 = v58;
              *uint64_t v35 = off_101A4CE40;
              v35[1] = v36;
              uint64_t v37 = v35 + 2;
              if (SHIBYTE(v60) < 0)
              {
                sub_10004FC84(v37, (void *)v59, *((unint64_t *)&v59 + 1));
              }
              else
              {
                *(_OWORD *)uint64_t v37 = v59;
                v35[4] = v60;
              }
              sub_10032B190((uint64_t)(v35 + 5), (uint64_t)v61);
              xpc_object_t v63 = v35;
              (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v19 + 16))(v19, v6, v62);
              sub_1003135E4(v62);
              sub_1003135E4(v61);
              if (SHIBYTE(v60) < 0) {
                operator delete((void *)v59);
              }
              goto LABEL_43;
            }
            unsigned int v30 = *(unsigned __int8 *)(v6 + 1) - 5;
            unint64_t v31 = *(NSObject **)(a1 + 40);
            BOOL v32 = os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT);
            if (v30 <= 1)
            {
              if (v32)
              {
                *(_WORD *)int buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I Attempting plan activation", buf, 2u);
              }
              *(unsigned char *)(v6 + 2) = 4;
              (*(void (**)(uint64_t))(*(void *)v19 + 48))(v19);
              bzero(buf, 0x4E0uLL);
              sub_10030DDAC((uint64_t)buf, (long long *)v6);
              (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 96) + 776))(v41);
              if (SHIBYTE(v57) < 0) {
                operator delete((void *)v56);
              }
              long long v56 = *(_OWORD *)v41;
              uint64_t v57 = v42;
              (*(void (**)(uint64_t, uint8_t *, void, BOOL, void))(*(void *)v19 + 40))(v19, buf, 0, *(unsigned char *)(v6 + 1) == 9, 0);
              uint64_t v33 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)uint64_t v41 = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Caching activate pending plan callback to show intro pane if (and after) activation fails", v41, 2u);
              }
              sub_10032B644((void *)(a1 + 384), a3);
              sub_10030D10C((uint64_t)buf);
              goto LABEL_43;
            }
            if (v32)
            {
              *(_WORD *)int buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I Not attempting installation. Showing intro pane to the user", buf, 2u);
            }
            uint64_t v39 = 0;
            uint64_t v40 = 0;
            sub_1002E1174(a3, 0, (uint64_t)&v40, (uint64_t)&v39, 49);
            sub_100057D78(&v39);
            uint64_t v24 = (const void **)&v40;
          }
          else
          {
            *(unsigned char *)(v6 + 2) = 4;
            (*(void (**)(uint64_t))(*(void *)v19 + 48))(v19);
            (*(void (**)(uint64_t, uint64_t, void, BOOL, void))(*(void *)v19 + 40))(v19, v6, 0, *(unsigned char *)(v6 + 1) == 9, 0);
            uint64_t v43 = 0;
            uint64_t v44 = 0;
            sub_1002E1174(a3, 1, (uint64_t)&v44, (uint64_t)&v43, 0);
            sub_100057D78(&v43);
            uint64_t v24 = (const void **)&v44;
          }
          sub_1000558F4(v24);
LABEL_43:
          sub_10004D2C8(v18);
          return;
        }
      }
    }
    else
    {
      int v18 = 0;
    }
    unint64_t v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
    }
    uint64_t v45 = 0;
    long long v46 = 0;
    sub_1002E1174(a3, 0, (uint64_t)&v46, (uint64_t)&v45, 4);
    sub_100057D78(&v45);
    sub_1000558F4(&v46);
    if (v18) {
      goto LABEL_43;
    }
  }
}

void sub_100C7C8D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,int a21,__int16 a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45)
{
  operator delete(v46);
  sub_1002F5090(v47 - 200);
  sub_10004D2C8(v45);
  _Unwind_Resume(a1);
}

void sub_100C7C9BC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[33];
  uint64_t v5 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v22 = *(void *)(a2 + 16);
  }
  uint64_t v6 = HIBYTE(v22);
  if (v4 != v5)
  {
    uint64_t v8 = __p[0];
    uint64_t v7 = __p[1];
    if (v22 >= 0) {
      unsigned int v9 = (void *)HIBYTE(v22);
    }
    else {
      unsigned int v9 = __p[1];
    }
    do
    {
      BOOL v10 = (void *)*(unsigned __int8 *)(v4 + 455);
      int v11 = (char)v10;
      if ((char)v10 < 0) {
        BOOL v10 = *(void **)(v4 + 440);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)(v4 + 432);
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)(v4 + 432);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(v8, v12, (size_t)v7)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v6) {
            goto LABEL_25;
          }
          int v13 = __p;
          uint64_t v14 = v6;
          while (*(unsigned __int8 *)v13 == *v12)
          {
            int v13 = (void **)((char *)v13 + 1);
            ++v12;
            if (!--v14) {
              goto LABEL_23;
            }
          }
        }
      }
      v4 += 1248;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
  }
LABEL_23:
  if ((v6 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (v4 == a1[34])
  {
    int v18 = a1[5];
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v19 = (void *)a2;
      }
      else {
        uint64_t v19 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      uint64_t v24 = v19;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", buf, 0xCu);
    }
  }
  else
  {
    unint64_t v15 = (std::__shared_weak_count *)a1[32];
    if (v15)
    {
      uint64_t v16 = std::__shared_weak_count::lock(v15);
      if (v16)
      {
        uint64_t v17 = a1[31];
        if (v17)
        {
          sub_100C7949C((uint64_t)a1, v4, *(unsigned __int8 *)(v4 + 1));
          (*(void (**)(uint64_t))(*(void *)v17 + 48))(v17);
          (*(void (**)(uint64_t, uint64_t))(*(void *)v17 + 32))(v17, v4);
LABEL_39:
          sub_10004D2C8(v16);
          return;
        }
      }
    }
    else
    {
      uint64_t v16 = 0;
    }
    uint64_t v20 = a1[5];
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
    }
    if (v16) {
      goto LABEL_39;
    }
  }
}

void sub_100C7CC3C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100C7CC58(void *a1, uint64_t a2, unsigned int a3, uint64_t a4)
{
  uint64_t v8 = a1[33];
  uint64_t v9 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v50 = *(void *)(a2 + 16);
  }
  uint64_t v10 = HIBYTE(v50);
  if (v8 != v9)
  {
    uint64_t v12 = __p[0];
    int v11 = __p[1];
    if (v50 >= 0) {
      int v13 = (void *)HIBYTE(v50);
    }
    else {
      int v13 = __p[1];
    }
    do
    {
      uint64_t v14 = (void *)*(unsigned __int8 *)(v8 + 455);
      int v15 = (char)v14;
      if ((char)v14 < 0) {
        uint64_t v14 = *(void **)(v8 + 440);
      }
      if (v13 == v14)
      {
        if (v15 >= 0) {
          uint64_t v16 = (unsigned __int8 *)(v8 + 432);
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)(v8 + 432);
        }
        if ((v10 & 0x80) != 0)
        {
          if (!memcmp(v12, v16, (size_t)v11)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v10) {
            goto LABEL_25;
          }
          uint64_t v17 = __p;
          uint64_t v18 = v10;
          while (*(unsigned __int8 *)v17 == *v16)
          {
            uint64_t v17 = (void **)((char *)v17 + 1);
            ++v16;
            if (!--v18) {
              goto LABEL_23;
            }
          }
        }
      }
      v8 += 1248;
    }
    while (v8 != v9);
    uint64_t v8 = v9;
  }
LABEL_23:
  if ((v10 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (v8 != a1[34])
  {
    sub_100C7949C((uint64_t)a1, v8, a3);
    uint64_t v19 = a1[5];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v20 = (void *)a2;
      }
      else {
        uint64_t v20 = *(void **)a2;
      }
      uint64_t v21 = sub_1008A2228(*(unsigned __int8 *)(v8 + 1));
      uint64_t v22 = sub_1008A2228(*(unsigned __int8 *)(v8 + 2));
      *(_DWORD *)int buf = 136315650;
      *(void *)&uint8_t buf[4] = v20;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v21;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = v22;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I updated state of plan (%s) to %s, display state: %s", buf, 0x20u);
    }
    if (*(unsigned char *)(a4 + 24))
    {
      uint64_t v23 = *(unsigned __int8 *)(a4 + 23);
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(a4 + 8);
      }
      if (v23)
      {
        uint64_t v24 = (void *)(v8 + 456);
        std::string::operator=((std::string *)(v8 + 456), (const std::string *)a4);
        sub_100CD7084(v8 + 456, (uint64_t)buf);
        unint64_t v25 = (void **)(v8 + 480);
        if (*(char *)(v8 + 503) < 0) {
          operator delete(*v25);
        }
        *(_OWORD *)unint64_t v25 = *(_OWORD *)buf;
        *(void *)(v8 + 496) = *(void *)&buf[16];
        unint64_t v26 = a1[5];
        if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(a2 + 23) >= 0) {
            int v27 = (void *)a2;
          }
          else {
            int v27 = *(void **)a2;
          }
          if (*(char *)(v8 + 479) < 0) {
            uint64_t v24 = (void *)*v24;
          }
          *(_DWORD *)int buf = 136315394;
          *(void *)&uint8_t buf[4] = v27;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v24;
          _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I update target ICCID for pending plan (%s) to (%s)", buf, 0x16u);
        }
      }
    }
    if (*(unsigned char *)(v8 + 1112))
    {
      if (a3 == 5)
      {
        if (*(double *)(v8 + 1056) != 0.0)
        {
LABEL_49:
          sub_100C7961C(a1, v8);
          goto LABEL_81;
        }
        int v28 = (CFAbsoluteTime *)(v8 + 1056);
LABEL_48:
        *int v28 = CFAbsoluteTimeGetCurrent();
        goto LABEL_49;
      }
      if ((a3 & 0xFE) == 6)
      {
        if (*(double *)(v8 + 1064) == 0.0) {
          *(CFAbsoluteTime *)(v8 + 1064) = CFAbsoluteTimeGetCurrent();
        }
        if (a3 == 6)
        {
          *(unsigned char *)(v8 + 1019) = 2;
          if (*(double *)(v8 + 1104) != 0.0) {
            goto LABEL_49;
          }
          int v28 = (CFAbsoluteTime *)(v8 + 1104);
          goto LABEL_48;
        }
        goto LABEL_70;
      }
      switch(a3)
      {
        case 0xCu:
          if (*(double *)(v8 + 1088) != 0.0) {
            goto LABEL_49;
          }
          int v28 = (CFAbsoluteTime *)(v8 + 1088);
          goto LABEL_48;
        case 0xAu:
          if (*(double *)(v8 + 1080) != 0.0) {
            goto LABEL_49;
          }
          int v28 = (CFAbsoluteTime *)(v8 + 1080);
          goto LABEL_48;
        case 9u:
          if (*(double *)(v8 + 1056) > 0.0 && *(double *)(v8 + 1064) == 0.0) {
            *(CFAbsoluteTime *)(v8 + 1064) = CFAbsoluteTimeGetCurrent();
          }
          if (*(double *)(v8 + 1072) == 0.0) {
            *(CFAbsoluteTime *)(v8 + 1072) = CFAbsoluteTimeGetCurrent();
          }
          *(unsigned char *)(v8 + 1018) = 1;
LABEL_70:
          sub_100C7961C(a1, v8);
          goto LABEL_72;
      }
    }
    sub_100C7961C(a1, v8);
    if (a3 - 7 > 2)
    {
LABEL_81:
      if (a3 != 11) {
        goto LABEL_159;
      }
      goto LABEL_82;
    }
LABEL_72:
    if (!*(unsigned char *)(a4 + 24)) {
      goto LABEL_159;
    }
    uint64_t v65 = 20;
    if (!a1[16])
    {
      uint64_t v37 = a1[5];
      if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
      {
        uint64_t v48 = v8 + 432;
        if (*(char *)(v8 + 455) < 0) {
          uint64_t v48 = *(void *)(v8 + 432);
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v48;
        _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "cumessage is invalid, skip send transfer confirmation for %s", buf, 0xCu);
      }
LABEL_82:
      sub_100C7D8F0(a1, v8 + 432);
      goto LABEL_159;
    }
    unint64_t v31 = (std::__shared_weak_count *)a1[32];
    if (v31)
    {
      BOOL v32 = std::__shared_weak_count::lock(v31);
      if (v32)
      {
        uint64_t v33 = a1[31];
        if (v33)
        {
          memset(v81, 0, sizeof(v81));
          long long v79 = 0u;
          long long v80 = 0u;
          long long v77 = 0u;
          long long v78 = 0u;
          long long v75 = 0u;
          long long v76 = 0u;
          long long v73 = 0u;
          long long v74 = 0u;
          long long v71 = 0u;
          long long v72 = 0u;
          memset(buf, 0, sizeof(buf));
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v33 + 96))(buf);
          *(void *)long long v64 = 0;
          CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (Mutable)
          {
            uint64_t v35 = *(__CFDictionary **)v64;
            *(void *)long long v64 = Mutable;
            *(void *)uint64_t v68 = v35;
            sub_10005717C((const void **)v68);
          }
          xpc_object_t v63 = 0;
          uint64_t v36 = (_OWORD *)(v8 + 432);
          if (*(char *)(v8 + 455) < 0)
          {
            sub_10004FC84(__dst, *(void **)(v8 + 432), *(void *)(v8 + 440));
          }
          else
          {
            *(_OWORD *)long long __dst = *v36;
            uint64_t v62 = *(void *)(v8 + 448);
          }
          if (SHIBYTE(v62) < 0)
          {
            sub_10004FC84(v51, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            *(_OWORD *)uint64_t v51 = *(_OWORD *)__dst;
            *(void *)&v51[16] = v62;
          }
          v53[0] = 0;
          if ((v51[23] & 0x80000000) != 0)
          {
            sub_10004FC84(v68, *(void **)v51, *(unint64_t *)&v51[8]);
          }
          else
          {
            *(_OWORD *)uint64_t v68 = *(_OWORD *)v51;
            *(void *)&v68[16] = *(void *)&v51[16];
          }
          v55[0] = 0;
          if (ctu::cf::convert_copy())
          {
            uint64_t v39 = v53[0];
            v53[0] = v55[0];
            v58[0] = v39;
            sub_1000558F4((const void **)v58);
          }
          if ((v68[23] & 0x80000000) != 0) {
            operator delete(*(void **)v68);
          }
          xpc_object_t v63 = v53[0];
          v53[0] = 0;
          sub_1000558F4((const void **)v53);
          if ((v51[23] & 0x80000000) != 0) {
            operator delete(*(void **)v51);
          }
          if (SHIBYTE(v62) < 0) {
            operator delete(__dst[0]);
          }
          CFTypeRef v60 = 0;
          if (SBYTE7(v72) < 0)
          {
            sub_10004FC84(v58, (void *)v71, *((unint64_t *)&v71 + 1));
          }
          else
          {
            *(_OWORD *)uint64_t v58 = v71;
            uint64_t v59 = v72;
          }
          if (SHIBYTE(v59) < 0)
          {
            sub_10004FC84(v51, v58[0], (unint64_t)v58[1]);
          }
          else
          {
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v58;
            *(void *)&v51[16] = v59;
          }
          unsigned __int8 v67 = 0;
          if ((v51[23] & 0x80000000) != 0)
          {
            sub_10004FC84(v68, *(void **)v51, *(unint64_t *)&v51[8]);
          }
          else
          {
            *(_OWORD *)uint64_t v68 = *(_OWORD *)v51;
            *(void *)&v68[16] = *(void *)&v51[16];
          }
          v53[0] = 0;
          if (ctu::cf::convert_copy())
          {
            uint64_t v40 = v67;
            unsigned __int8 v67 = v53[0];
            v55[0] = v40;
            sub_1000558F4((const void **)v55);
          }
          if ((v68[23] & 0x80000000) != 0) {
            operator delete(*(void **)v68);
          }
          CFTypeRef v60 = v67;
          unsigned __int8 v67 = 0;
          sub_1000558F4((const void **)&v67);
          if ((v51[23] & 0x80000000) != 0) {
            operator delete(*(void **)v51);
          }
          if (SHIBYTE(v59) < 0) {
            operator delete(v58[0]);
          }
          CFTypeRef v57 = 0;
          if (SHIBYTE(v81[1]) < 0)
          {
            sub_10004FC84(v55, *((void **)&v81[0] + 1), *(unint64_t *)&v81[1]);
          }
          else
          {
            *(_OWORD *)xpc_object_t v55 = *(_OWORD *)((char *)v81 + 8);
            uint64_t v56 = *((void *)&v81[1] + 1);
          }
          if (SHIBYTE(v56) < 0)
          {
            sub_10004FC84(v51, v55[0], (unint64_t)v55[1]);
          }
          else
          {
            *(_OWORD *)uint64_t v51 = *(_OWORD *)v55;
            *(void *)&v51[16] = v56;
          }
          xpc_object_t v66 = 0;
          if ((v51[23] & 0x80000000) != 0)
          {
            sub_10004FC84(v68, *(void **)v51, *(unint64_t *)&v51[8]);
          }
          else
          {
            *(_OWORD *)uint64_t v68 = *(_OWORD *)v51;
            *(void *)&v68[16] = *(void *)&v51[16];
          }
          unsigned __int8 v67 = 0;
          if (ctu::cf::convert_copy())
          {
            uint64_t v41 = v66;
            xpc_object_t v66 = v67;
            v53[0] = v41;
            sub_1000558F4((const void **)v53);
          }
          if ((v68[23] & 0x80000000) != 0) {
            operator delete(*(void **)v68);
          }
          CFTypeRef v57 = v66;
          xpc_object_t v66 = 0;
          sub_1000558F4((const void **)&v66);
          if ((v51[23] & 0x80000000) != 0) {
            operator delete(*(void **)v51);
          }
          if (SHIBYTE(v56) < 0) {
            operator delete(v55[0]);
          }
          sub_10010F3F0(*(__CFDictionary **)v64, @"kSourceIccid", (uint64_t)v63);
          sub_10010F3F0(*(__CFDictionary **)v64, @"kTargetEid", (uint64_t)v60);
          sub_10010F3F0(*(__CFDictionary **)v64, @"kTargetName", (uint64_t)v57);
          uint64_t v42 = a1[5];
          if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v8 + 455) >= 0) {
              uint64_t v43 = v8 + 432;
            }
            else {
              uint64_t v43 = *(void *)(v8 + 432);
            }
            uint64_t v44 = v8 + 456;
            if (*(char *)(v8 + 479) < 0) {
              uint64_t v44 = *(void *)(v8 + 456);
            }
            *(_DWORD *)uint64_t v68 = 136315394;
            *(void *)&v68[4] = v43;
            *(_WORD *)&v68[12] = 2080;
            *(void *)&v68[14] = v44;
            _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I send transfer confirmation %s -> %s", v68, 0x16u);
          }
          uint64_t v45 = a1[16];
          sub_100058DB0(v53, "kTransferConfirmation");
          sub_10004EFE4(&v67, (CFTypeRef *)v64);
          *(void *)uint64_t v51 = a1;
          if (*(char *)(v8 + 455) < 0)
          {
            sub_10004FC84(&v51[8], *(void **)(v8 + 432), *(void *)(v8 + 440));
          }
          else
          {
            *(_OWORD *)&v51[8] = *v36;
            uint64_t v52 = *(void *)(v8 + 448);
          }
          uint64_t v69 = 0;
          long long v46 = operator new(0x28uLL);
          uint64_t v47 = *(void *)v51;
          void *v46 = off_101A4CEC0;
          v46[1] = v47;
          *((_OWORD *)v46 + 1) = *(_OWORD *)&v51[8];
          v46[4] = v52;
          *(void *)&v51[8] = 0;
          *(void *)&v51[16] = 0;
          uint64_t v52 = 0;
          uint64_t v69 = v46;
          (*(void (**)(uint64_t, void **, void **, void *, uint64_t *, unsigned char *))(*(void *)v45 + 16))(v45, v53, &v67, a1 + 3, &v65, v68);
          sub_100B202F4(v68);
          if (SHIBYTE(v52) < 0) {
            operator delete(*(void **)&v51[8]);
          }
          sub_100057D78((const void **)&v67);
          if (v54 < 0) {
            operator delete(v53[0]);
          }
          sub_1000558F4(&v57);
          sub_1000558F4(&v60);
          sub_1000558F4((const void **)&v63);
          sub_10005717C((const void **)v64);
          sub_10030E938((uint64_t)buf);
          goto LABEL_158;
        }
      }
    }
    else
    {
      BOOL v32 = 0;
    }
    int v38 = a1[5];
    if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "invalid delegate", buf, 2u);
    }
    sub_100C7D8F0(a1, v8 + 432);
    if (!v32) {
LABEL_159:
    }
      sub_100C7AAE8((uint64_t)a1);
LABEL_158:
    sub_10004D2C8(v32);
    goto LABEL_159;
  }
  long long v29 = a1[5];
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      unsigned int v30 = (void *)a2;
    }
    else {
      unsigned int v30 = *(void **)a2;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v30;
    _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", buf, 0xCu);
  }
}

void sub_100C7D730(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,uint64_t a26,const void *a27,void *a28,uint64_t a29,uint64_t a30,const void *a31,void *a32,uint64_t a33,uint64_t a34,const void *a35,const void *a36,uint64_t a37,uint64_t a38,const void *a39,void *a40,uint64_t a41,uint64_t a42,uint64_t a43,char a44)
{
  sub_100057D78(&a39);
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a27);
  sub_1000558F4(&a31);
  sub_1000558F4(&a35);
  sub_10005717C(&a36);
  sub_10030E938((uint64_t)&a44);
  sub_10004D2C8(v44);
  _Unwind_Resume(a1);
}

void sub_100C7D8F0(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[33];
  uint64_t v5 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v20 = *(void *)(a2 + 16);
  }
  uint64_t v6 = HIBYTE(v20);
  if (v4 != v5)
  {
    uint64_t v8 = __p[0];
    uint64_t v7 = __p[1];
    if (v20 >= 0) {
      uint64_t v9 = (void *)HIBYTE(v20);
    }
    else {
      uint64_t v9 = __p[1];
    }
    do
    {
      uint64_t v10 = (void *)*(unsigned __int8 *)(v4 + 455);
      int v11 = (char)v10;
      if ((char)v10 < 0) {
        uint64_t v10 = *(void **)(v4 + 440);
      }
      if (v9 == v10)
      {
        if (v11 >= 0) {
          uint64_t v12 = (unsigned __int8 *)(v4 + 432);
        }
        else {
          uint64_t v12 = *(unsigned __int8 **)(v4 + 432);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp(v8, v12, (size_t)v7)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v6) {
            goto LABEL_25;
          }
          int v13 = __p;
          uint64_t v14 = v6;
          while (*(unsigned __int8 *)v13 == *v12)
          {
            int v13 = (void **)((char *)v13 + 1);
            ++v12;
            if (!--v14) {
              goto LABEL_23;
            }
          }
        }
      }
      v4 += 1248;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
  }
LABEL_23:
  if ((v6 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  uint64_t v15 = a1[34];
  if (v4 == v15)
  {
    uint64_t v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v18 = (void *)a2;
      }
      else {
        uint64_t v18 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      uint64_t v22 = v18;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", buf, 0xCu);
    }
  }
  else
  {
    *(unsigned char *)(v4 + 12) = 0;
    for (uint64_t i = a1[33]; ; i += 1248)
    {
      if (i == v15) {
        sub_100C83158((uint64_t)a1);
      }
      if (*(unsigned char *)(i + 12)) {
        break;
      }
    }
  }
}

void sub_100C7DACC(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v18 = 0;
  unint64_t v19 = 0;
  unint64_t v20 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  sub_100058DB0(__p, "");
  uint64_t v4 = (uint64_t *)((uint64_t (*)(void **))(*a1)[8])(a1);
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  sub_10030B7CC(&v13, *v4, v4[1], 0x6F96F96F96F96F97 * ((v4[1] - *v4) >> 5));
  if (v13 != v14)
  {
    uint64_t v5 = v13 + 408;
    while (!*(unsigned char *)(v5 - 391) || *(unsigned char *)(v5 - 407) == 12)
    {
      uint64_t v7 = v5 + 840;
      v5 += 1248;
      if (v7 == v14) {
        goto LABEL_16;
      }
    }
    unint64_t v8 = v19;
    uint64_t v9 = (long long *)(v5 - 408);
    if (v19 >= v20)
    {
      uint64_t v10 = sub_100C85D24(&v18, v9);
    }
    else
    {
      sub_10030DDAC(v19, v9);
      uint64_t v10 = v8 + 1248;
    }
    unint64_t v19 = v10;
    (*(void (**)(long long *__return_ptr))(*a1[12] + 800))(&v11);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
    *(_OWORD *)std::string __p = v11;
    uint64_t v17 = v12;
  }
LABEL_16:
  sub_100CDB9F4(&v18, (uint64_t *)__p, a2);
  *(void *)&long long v11 = &v13;
  sub_10030AFC8((void ***)&v11);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = &v18;
  sub_10030AFC8((void ***)__p);
}

void sub_100C7DC8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char *a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  a9 = &a12;
  sub_10030AFC8((void ***)&a9);
  if (a20 < 0) {
    operator delete(__p);
  }
  std::string __p = (void *)(v20 - 56);
  sub_10030AFC8((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100C7DCEC(void *a1, uint64_t a2, long long **a3)
{
  uint64_t v7 = a1[33];
  uint64_t v6 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v110 = *(void *)(a2 + 16);
  }
  uint64_t v8 = HIBYTE(v110);
  if (v7 != v6)
  {
    uint64_t v10 = __p[0];
    uint64_t v9 = __p[1];
    if (v110 >= 0) {
      long long v11 = (void *)HIBYTE(v110);
    }
    else {
      long long v11 = __p[1];
    }
    do
    {
      uint64_t v12 = (void *)*(unsigned __int8 *)(v7 + 455);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        uint64_t v12 = *(void **)(v7 + 440);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = (unsigned __int8 *)(v7 + 432);
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)(v7 + 432);
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(v10, v14, (size_t)v9)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_25;
          }
          uint64_t v15 = __p;
          uint64_t v16 = v8;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            uint64_t v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v16) {
              goto LABEL_23;
            }
          }
        }
      }
      v7 += 1248;
    }
    while (v7 != v6);
    uint64_t v7 = v6;
  }
LABEL_23:
  if ((v8 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (v7 != a1[34])
  {
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    if (*a3 == v18) {
LABEL_329:
    }
      sub_100C7AAE8((uint64_t)a1);
    uint64_t v105 = v7 + 688;
    unsigned int v104 = (void **)(v7 + 992);
    char v106 = (__n128 *)(v7 + 528);
    while (1)
    {
      uint64_t v126 = 0;
      memset(v125, 0, sizeof(v125));
      sub_100333BBC((char *)v125, v17);
      __dst[0] = 0;
      __dst[1] = 0;
      uint64_t v108 = 0;
      if (SBYTE7(v125[1]) < 0)
      {
        sub_10004FC84(__dst, *(void **)&v125[0], *((unint64_t *)&v125[0] + 1));
      }
      else
      {
        *(_OWORD *)long long __dst = v125[0];
        uint64_t v108 = *(void *)&v125[1];
      }
      memset(v124, 0, sizeof(v124));
      if (*((void *)&v125[1] + 1)) {
        (*((void (**)(uint64_t, char *, _OWORD *, void, void))&v125[1] + 1))(1, (char *)&v125[1] + 8, v124, 0, 0);
      }
      unint64_t v19 = a1[5];
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0) {
          uint64_t v20 = (void *)a2;
        }
        else {
          uint64_t v20 = *(void **)a2;
        }
        if (v108 >= 0) {
          uint64_t v21 = __dst;
        }
        else {
          uint64_t v21 = (void **)__dst[0];
        }
        *(_DWORD *)int buf = 136315394;
        *(void *)&uint8_t buf[4] = v20;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I update info of pending plan (%s) to %s", buf, 0x16u);
      }
      if (v108 >= 0) {
        size_t v22 = HIBYTE(v108);
      }
      else {
        size_t v22 = (size_t)__dst[1];
      }
      switch(v22)
      {
        case 4uLL:
          if (v108 >= 0) {
            uint64_t v23 = __dst;
          }
          else {
            uint64_t v23 = (void **)__dst[0];
          }
          if (*(_DWORD *)v23 != 1769172297) {
            goto LABEL_197;
          }
          uint64_t v24 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v24) {
            sub_10084C988();
          }
          if (*((char *)v24 + 23) < 0)
          {
            sub_10004FC84(buf, *v24, (unint64_t)v24[1]);
          }
          else
          {
            long long v25 = *(_OWORD *)v24;
            *(void *)&uint8_t buf[16] = v24[2];
            *(_OWORD *)int buf = v25;
          }
          if (*(char *)(v7 + 407) < 0) {
            operator delete(*(void **)(v7 + 384));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 384;
          goto LABEL_304;
        case 5uLL:
        case 6uLL:
        case 7uLL:
        case 8uLL:
        case 0xEuLL:
        case 0xFuLL:
        case 0x12uLL:
        case 0x15uLL:
        case 0x16uLL:
        case 0x18uLL:
        case 0x19uLL:
          goto LABEL_197;
        case 9uLL:
          if (v108 >= 0) {
            CFTypeRef v57 = __dst;
          }
          else {
            CFTypeRef v57 = (void **)__dst[0];
          }
          if (memcmp(v57, "SourceCsn", v22)) {
            goto LABEL_197;
          }
          if (!*(void *)&v124[0]
          {
            sub_10084C988();
          }
          *(_OWORD *)(v7 + 914) = *v58;
          goto LABEL_305;
        case 0xAuLL:
          if (v108 >= 0) {
            uint64_t v47 = __dst;
          }
          else {
            uint64_t v47 = (void **)__dst[0];
          }
          if (memcmp(v47, "SourceImei", v22)) {
            goto LABEL_197;
          }
          uint64_t v48 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v48) {
            sub_10084C988();
          }
          if (*((char *)v48 + 23) < 0)
          {
            sub_10004FC84(buf, *v48, (unint64_t)v48[1]);
          }
          else
          {
            long long v49 = *(_OWORD *)v48;
            *(void *)&uint8_t buf[16] = v48[2];
            *(_OWORD *)int buf = v49;
          }
          if (*(char *)(v7 + 215) < 0) {
            operator delete(*(void **)(v7 + 192));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 192;
          goto LABEL_304;
        case 0xBuLL:
          if (v108 >= 0) {
            uint64_t v50 = __dst;
          }
          else {
            uint64_t v50 = (void **)__dst[0];
          }
          if (*v50 == (void *)0x4670646D53746C41 && *(void **)((char *)v50 + 3) == (void *)0x6E64714670646D53)
          {
            uint64_t v83 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
            if (!v83) {
              sub_10084C988();
            }
            if (*((char *)v83 + 23) < 0)
            {
              sub_10004FC84(buf, *v83, (unint64_t)v83[1]);
            }
            else
            {
              long long v84 = *(_OWORD *)v83;
              *(void *)&uint8_t buf[16] = v83[2];
              *(_OWORD *)int buf = v84;
            }
            if (*(char *)(v7 + 527) < 0) {
              operator delete(*(void **)(v7 + 504));
            }
            long long v98 = *(_OWORD *)buf;
            uint64_t v99 = v7 + 504;
          }
          else
          {
            if (memcmp(v50, "PhoneNumber", v22)) {
              goto LABEL_197;
            }
            uint64_t v52 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
            if (!v52) {
              sub_10084C988();
            }
            if (*((char *)v52 + 23) < 0)
            {
              sub_10004FC84(buf, *v52, (unint64_t)v52[1]);
            }
            else
            {
              long long v53 = *(_OWORD *)v52;
              *(void *)&uint8_t buf[16] = v52[2];
              *(_OWORD *)int buf = v53;
            }
            if (*(char *)(v7 + 287) < 0) {
              operator delete(*(void **)(v7 + 264));
            }
            long long v98 = *(_OWORD *)buf;
            uint64_t v99 = v7 + 264;
          }
          goto LABEL_304;
        case 0xCuLL:
          if (v108 >= 0) {
            uint64_t v59 = __dst;
          }
          else {
            uint64_t v59 = (void **)__dst[0];
          }
          if (memcmp(v59, "TransferType", v22)) {
            goto LABEL_197;
          }
          if (!*(void *)&v124[0]) {
            goto LABEL_316;
          }
          if (!v60) {
            goto LABEL_316;
          }
          *(unsigned char *)uint64_t v7 = *v60;
          goto LABEL_305;
        case 0xDuLL:
          if (v108 >= 0) {
            int v38 = __dst;
          }
          else {
            int v38 = (void **)__dst[0];
          }
          uint64_t v39 = *v38;
          uint64_t v40 = *(uint64_t *)((char *)v38 + 5);
          if (v39 != (void *)0x726566736E617254 || v40 != 0x6E656B6F54726566) {
            goto LABEL_197;
          }
          uint64_t v42 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v42) {
            sub_10084C988();
          }
          if (*((char *)v42 + 23) < 0)
          {
            sub_10004FC84(buf, *v42, (unint64_t)v42[1]);
          }
          else
          {
            long long v43 = *(_OWORD *)v42;
            *(void *)&uint8_t buf[16] = v42[2];
            *(_OWORD *)int buf = v43;
          }
          if (*(char *)(v7 + 335) < 0) {
            operator delete(*(void **)(v7 + 312));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 312;
          goto LABEL_304;
        case 0x10uLL:
          if (v108 >= 0) {
            uint64_t v35 = __dst;
          }
          else {
            uint64_t v35 = (void **)__dst[0];
          }
          if (memcmp(v35, "SourceDeviceType", v22)) {
            goto LABEL_197;
          }
          uint64_t v36 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v36) {
            sub_10084C988();
          }
          if (*((char *)v36 + 23) < 0)
          {
            sub_10004FC84(buf, *v36, (unint64_t)v36[1]);
          }
          else
          {
            long long v37 = *(_OWORD *)v36;
            *(void *)&uint8_t buf[16] = v36[2];
            *(_OWORD *)int buf = v37;
          }
          if (*(char *)(v7 + 959) < 0) {
            operator delete(*(void **)(v7 + 936));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 936;
          goto LABEL_304;
        case 0x11uLL:
          if (v108 >= 0) {
            uint64_t v44 = __dst;
          }
          else {
            uint64_t v44 = (void **)__dst[0];
          }
          if (memcmp(v44, "SourceDisplayName", v22)) {
            goto LABEL_197;
          }
          uint64_t v45 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v45) {
            sub_10084C988();
          }
          if (*((char *)v45 + 23) < 0)
          {
            sub_10004FC84(buf, *v45, (unint64_t)v45[1]);
          }
          else
          {
            long long v46 = *(_OWORD *)v45;
            *(void *)&uint8_t buf[16] = v45[2];
            *(_OWORD *)int buf = v46;
          }
          if (*(char *)(v7 + 983) < 0) {
            operator delete(*(void **)(v7 + 960));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 960;
          goto LABEL_304;
        case 0x13uLL:
          if (v108 >= 0) {
            xpc_object_t v61 = __dst;
          }
          else {
            xpc_object_t v61 = (void **)__dst[0];
          }
          if (*v61 == (void *)0x4D726F74696E6F4DLL
            && v61[1] == (void *)0x6C706D6F4365646FLL
            && *(void **)((char *)v61 + 11) == (void *)0x6574656C706D6F43)
          {
            uint64_t v86 = (unsigned __int8 *)sub_100C87288((uint64_t (**)(uint64_t, void, void, void *, void *))v124);
            if (!v86) {
              goto LABEL_316;
            }
            int v87 = *v86;
            *(unsigned char *)(v7 + 15) = v87;
            if (!v87) {
              goto LABEL_305;
            }
            uint64_t v88 = *(unsigned __int8 *)(v7 + 479);
            if ((v88 & 0x80u) != 0) {
              uint64_t v88 = *(void *)(v7 + 464);
            }
            if (!v88)
            {
              uint64_t v89 = *(unsigned __int8 *)(v7 + 503);
              if ((v89 & 0x80u) != 0) {
                uint64_t v89 = *(void *)(v7 + 488);
              }
              if (!v89) {
                goto LABEL_305;
              }
            }
            if (!*(unsigned char *)(v7 + 1112)) {
              goto LABEL_305;
            }
            std::string::size_type v90 = (std::__shared_weak_count *)a1[32];
            if (v90)
            {
              std::string::size_type v91 = std::__shared_weak_count::lock(v90);
              if (v91)
              {
                uint64_t v92 = a1[31];
                if (v92)
                {
                  log = a1[5];
                  if (os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT))
                  {
                    *(_WORD *)int buf = 0;
                    _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "#I submitting commCenterCellularPlanTransferDurations awd metric", buf, 2u);
                  }
                  *(CFAbsoluteTime *)(v7 + 1096) = CFAbsoluteTimeGetCurrent();
                  (*(void (**)(uint64_t, void **))(*(void *)v92 + 72))(v92, v104);
                  uint64_t v93 = a1[37];
                  a1[37] = 0;
                  if (v93) {
                    (*(void (**)(uint64_t))(*(void *)v93 + 8))(v93);
                  }
                  if (*(unsigned char *)(v7 + 1112))
                  {
                    if (*(char *)(v7 + 1015) < 0) {
                      operator delete(*v104);
                    }
                    *(unsigned char *)(v7 + 1112) = 0;
                  }
LABEL_315:
                  sub_10004D2C8(v91);
                  goto LABEL_305;
                }
              }
            }
            else
            {
              std::string::size_type v91 = 0;
            }
            long long v100 = a1[5];
            if (os_log_type_enabled(v100, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)int buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v100, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
            }
            if (!v91) {
              goto LABEL_305;
            }
            goto LABEL_315;
          }
          if (*v61 == (void *)0x656372756F537349
            && v61[1] == (void *)0x656C65446E616C50
            && *(void **)((char *)v61 + 11) == (void *)0x646574656C65446ELL)
          {
            xpc_object_t v97 = sub_100C87288((uint64_t (**)(uint64_t, void, void, void *, void *))v124);
            if (!v97) {
LABEL_316:
            }
              sub_10084C988();
            *(unsigned char *)(v7 + 18) = *v97;
            goto LABEL_305;
          }
          xpc_object_t v66 = *v61;
          unsigned __int8 v67 = v61[1];
          uint64_t v68 = *(uint64_t *)((char *)v61 + 11);
          if (v66 != (void *)0x5472656972726143 || v67 != (void *)0x44726566736E6172 || v68 != 0x6174614472656673) {
            goto LABEL_197;
          }
          long long v71 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v71) {
            sub_10084C988();
          }
          if (*((char *)v71 + 23) < 0)
          {
            sub_10004FC84(buf, *v71, (unint64_t)v71[1]);
          }
          else
          {
            long long v72 = *(_OWORD *)v71;
            *(void *)&uint8_t buf[16] = v71[2];
            *(_OWORD *)int buf = v72;
          }
          if (*(char *)(v7 + 383) < 0) {
            operator delete(*(void **)(v7 + 360));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 360;
LABEL_304:
          *(_OWORD *)uint64_t v99 = v98;
          *(void *)(v99 + 16) = *(void *)&buf[16];
LABEL_305:
          sub_100146540((uint64_t (**)(void, void, void, void, void))v124);
          if (SHIBYTE(v108) < 0) {
            operator delete(__dst[0]);
          }
          sub_100146540((uint64_t (**)(void, void, void, void, void))&v125[1] + 1);
          if (SBYTE7(v125[1]) < 0) {
            operator delete(*(void **)&v125[0]);
          }
          uint64_t v17 = (long long *)((char *)v17 + 56);
          if (v17 == v18) {
            goto LABEL_329;
          }
          break;
        case 0x14uLL:
          if (v108 >= 0) {
            int v28 = __dst;
          }
          else {
            int v28 = (void **)__dst[0];
          }
          long long v29 = *v28;
          unsigned int v30 = v28[1];
          int v31 = *((_DWORD *)v28 + 4);
          if (v29 != (void *)0x4D726F74696E6F4DLL || v30 != (void *)0x747261745365646FLL || v31 != 1701669204) {
            goto LABEL_197;
          }
          if (!*(unsigned char *)(v7 + 1152))
          {
            *(_OWORD *)(v7 + 112sub_10023C164((uint64_t)&a9, 0) = 0u;
            *(_OWORD *)(v7 + 1136) = 0u;
            *(unsigned char *)(v7 + 1152) = 1;
          }
          if (!*(void *)&v124[0]) {
            goto LABEL_316;
          }
          if (!v34) {
            goto LABEL_316;
          }
          *(void *)(v7 + 1144) = *v34;
          goto LABEL_305;
        case 0x17uLL:
          if (v108 >= 0) {
            char v54 = __dst;
          }
          else {
            char v54 = (void **)__dst[0];
          }
          if (*v54 == (void *)0x7465656873626557
            && v54[1] == (void *)0x6465726975716552
            && *(void **)((char *)v54 + 15) == (void *)0x79646475626E4964)
          {
            std::string::size_type v85 = sub_100C87288((uint64_t (**)(uint64_t, void, void, void *, void *))v124);
            if (!v85) {
              goto LABEL_316;
            }
            *(unsigned char *)(v7 + 16) = *v85;
            goto LABEL_305;
          }
          if (memcmp(v54, "TransferTokenExpiration", v22))
          {
            if (!memcmp(v54, "TransferAuthRequestTime", v22))
            {
              if (*(char *)(v7 + 263) < 0)
              {
                sub_10004FC84(buf, *(void **)(v7 + 240), *(void *)(v7 + 248));
              }
              else
              {
                *(_OWORD *)int buf = *(_OWORD *)(v7 + 240);
                *(void *)&uint8_t buf[16] = *(void *)(v7 + 256);
              }
              LOBYTE(v113) = *(unsigned char *)(v7 + 3);
              *(_WORD *)((char *)&v113 + 1) = 0;
              BYTE3(v113) = 3;
              long long v114 = 0u;
              long long v115 = 0u;
              long long v116 = 0u;
              long long v117 = 0u;
              long long v118 = 0u;
              std::string::size_type v119 = 0;
              sub_100C7EEC8((uint64_t)v104, (long long *)buf);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
              *(CFAbsoluteTime *)(v7 + 1024) = CFAbsoluteTimeGetCurrent();
              goto LABEL_305;
            }
LABEL_197:
            if (sub_1002E6B08((const void **)__dst, "TransferAuthResponseTime"))
            {
              *(CFAbsoluteTime *)(v7 + 1032) = CFAbsoluteTimeGetCurrent();
            }
            else if (sub_1002E6B08((const void **)__dst, "TransferAuthWebServRequestTime"))
            {
              *(CFAbsoluteTime *)(v7 + 104sub_10023C164((uint64_t)&a9, 0) = CFAbsoluteTimeGetCurrent();
            }
            else if (sub_1002E6B08((const void **)__dst, "TransferAuthWebServResponseTime"))
            {
              *(CFAbsoluteTime *)(v7 + 1048) = CFAbsoluteTimeGetCurrent();
            }
            goto LABEL_305;
          }
          long long v95 = (void **)sub_100C8723C((uint64_t (**)(uint64_t, void, void, _UNKNOWN **, void *))v124);
          if (!v95) {
            sub_10084C988();
          }
          if (*((char *)v95 + 23) < 0)
          {
            sub_10004FC84(buf, *v95, (unint64_t)v95[1]);
          }
          else
          {
            long long v96 = *(_OWORD *)v95;
            *(void *)&uint8_t buf[16] = v95[2];
            *(_OWORD *)int buf = v96;
          }
          if (*(char *)(v7 + 359) < 0) {
            operator delete(*(void **)(v7 + 336));
          }
          long long v98 = *(_OWORD *)buf;
          uint64_t v99 = v7 + 336;
          goto LABEL_304;
        case 0x1AuLL:
          if (v108 >= 0) {
            long long v73 = __dst;
          }
          else {
            long long v73 = (void **)__dst[0];
          }
          long long v74 = *v73;
          long long v75 = v73[1];
          long long v76 = v73[2];
          int v77 = *((unsigned __int16 *)v73 + 12);
          if (v74 != (void *)0x726566736E617254
            || v75 != (void *)0x69767265536D6953
            || v76 != (void *)0x6E6F707365526563
            || v77 != 25971)
          {
            goto LABEL_197;
          }
          if (!*(void *)&v124[0]
          {
            sub_10084C988();
          }
          sub_10030DBE4((uint64_t)buf, v81);
          if (*(unsigned char *)(v7 + 680))
          {
            sub_100310F88((uint64_t)v106, (uint64_t)buf);
          }
          else
          {
            sub_100311138(v106, (uint64_t)buf);
            *(unsigned char *)(v7 + 68sub_10023C164((uint64_t)&a9, 0) = 1;
          }
          if (v122 < 0) {
            operator delete(v120);
          }
          if ((_BYTE)v119 && SHIBYTE(v118) < 0) {
            operator delete(*((void **)&v117 + 1));
          }
          if ((_BYTE)v117 && SHIBYTE(v116) < 0) {
            operator delete(*((void **)&v115 + 1));
          }
          if ((_BYTE)v115 && SHIBYTE(v114) < 0) {
            operator delete(v113);
          }
          v111.__vftable = (std::bad_cast_vtbl *)buf;
          sub_1001A010C((void ***)&v111);
          goto LABEL_305;
        default:
          if (v22 == 39)
          {
            if (v108 >= 0) {
              char v82 = __dst;
            }
            else {
              char v82 = (void **)__dst[0];
            }
            if (!memcmp(v82, "TransferSimServiceViaWebServiceResponse", 0x27uLL))
            {
              if (!*(void *)&v124[0]
              {
                sub_10084C988();
              }
              sub_10030E704((uint64_t)buf, v94);
              if (*(unsigned char *)(v7 + 848))
              {
                sub_1003112A0(v105, (uint64_t)buf);
              }
              else
              {
                sub_1003113F8(v105, (uint64_t)buf);
                *(unsigned char *)(v7 + 848) = 1;
              }
              if (v123 < 0) {
                operator delete(v121);
              }
              if (SHIBYTE(v120) < 0) {
                operator delete(v119);
              }
              if ((_BYTE)v118 && SHIBYTE(v117) < 0) {
                operator delete(*((void **)&v116 + 1));
              }
              if ((_BYTE)v116 && SHIBYTE(v115) < 0) {
                operator delete(*((void **)&v114 + 1));
              }
              if ((_BYTE)v114 && SHIBYTE(v113) < 0) {
                operator delete(*(void **)&buf[8]);
              }
              goto LABEL_305;
            }
          }
          else if (v22 == 50)
          {
            unint64_t v26 = v108 >= 0 ? __dst : (void **)__dst[0];
            if (!memcmp(v26, "IsTransferUsingRecoveryWithoutExplicitIccidMapping", 0x32uLL))
            {
              int v27 = sub_100C87288((uint64_t (**)(uint64_t, void, void, void *, void *))v124);
              if (!v27) {
                goto LABEL_316;
              }
              *(unsigned char *)(v7 + 1225) = *v27;
              goto LABEL_305;
            }
          }
          goto LABEL_197;
      }
    }
  }
  long long v101 = a1[5];
  if (os_log_type_enabled(v101, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      long long v102 = (void *)a2;
    }
    else {
      long long v102 = *(void **)a2;
    }
    *(_DWORD *)int buf = 136315138;
    *(void *)&uint8_t buf[4] = v102;
    _os_log_error_impl((void *)&_mh_execute_header, v101, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", buf, 0xCu);
  }
}

void sub_100C7EE18(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_100C7EE38()
{
}

uint64_t sub_100C7EEC8(uint64_t a1, long long *a2)
{
  if (*(unsigned char *)(a1 + 120))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    long long v4 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v4;
    *((unsigned char *)a2 + 23) = 0;
    *(unsigned char *)a2 = 0;
    long long v5 = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = v5;
    long long v6 = *(long long *)((char *)a2 + 56);
    long long v7 = *(long long *)((char *)a2 + 72);
    long long v8 = *(long long *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
    *(_OWORD *)(a1 + 88) = v8;
    *(_OWORD *)(a1 + 72) = v7;
    *(_OWORD *)(a1 + 56) = v6;
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v10 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v10;
    long long v11 = *(long long *)((char *)a2 + 56);
    long long v12 = *(long long *)((char *)a2 + 72);
    long long v13 = *(long long *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
    *(_OWORD *)(a1 + 88) = v13;
    *(_OWORD *)(a1 + 72) = v12;
    *(_OWORD *)(a1 + 56) = v11;
    *(unsigned char *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = 1;
  }
  return a1;
}

void sub_100C7EFA4(void *a1, uint64_t a2, long long **a3)
{
  uint64_t v6 = a1[33];
  uint64_t v7 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v37 = *(void *)(a2 + 16);
  }
  uint64_t v8 = HIBYTE(v37);
  if (v6 != v7)
  {
    long long v10 = __p[0];
    long long v9 = __p[1];
    if (v37 >= 0) {
      long long v11 = (void *)HIBYTE(v37);
    }
    else {
      long long v11 = __p[1];
    }
    do
    {
      long long v12 = (void *)*(unsigned __int8 *)(v6 + 455);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        long long v12 = *(void **)(v6 + 440);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = (unsigned __int8 *)(v6 + 432);
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)(v6 + 432);
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(v10, v14, (size_t)v9)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_25;
          }
          uint64_t v15 = __p;
          uint64_t v16 = v8;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            uint64_t v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v16) {
              goto LABEL_23;
            }
          }
        }
      }
      v6 += 1248;
    }
    while (v6 != v7);
    uint64_t v6 = v7;
  }
LABEL_23:
  if ((v8 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  if (v6 == a1[34])
  {
    uint64_t v34 = a1[5];
    if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v35 = (void *)a2;
      }
      else {
        uint64_t v35 = *(void **)a2;
      }
      *(_DWORD *)long long __dst = 136315138;
      *(void *)&__dst[4] = v35;
      _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "can't find pending transfer plan for source iccid (%s)", __dst, 0xCu);
    }
  }
  else
  {
    uint64_t v17 = *a3;
    uint64_t v18 = a3[1];
    if (*a3 != v18)
    {
      while (1)
      {
        memset(__dst, 0, sizeof(__dst));
        uint64_t v43 = 0;
        if (*((char *)v17 + 23) < 0)
        {
          sub_10004FC84(__dst, *(void **)v17, *((void *)v17 + 1));
        }
        else
        {
          long long v19 = *v17;
          uint64_t v43 = *((void *)v17 + 2);
          *(_OWORD *)long long __dst = v19;
        }
        uint64_t v20 = a1[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          if (v43 >= 0) {
            uint64_t v21 = __dst;
          }
          else {
            uint64_t v21 = *(uint8_t **)__dst;
          }
          if (*(char *)(a2 + 23) >= 0) {
            size_t v22 = (void *)a2;
          }
          else {
            size_t v22 = *(void **)a2;
          }
          *(_DWORD *)int buf = 136315394;
          uint64_t v39 = v21;
          __int16 v40 = 2080;
          uint64_t v41 = v22;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I resetting info (%s) of pending plan with source iccid:(%s)", buf, 0x16u);
        }
        uint64_t v23 = HIBYTE(v43);
        char v24 = HIBYTE(v43);
        if (v43 < 0) {
          uint64_t v23 = *(void *)&__dst[8];
        }
        if (v23 == 39) {
          break;
        }
        if (v23 == 26)
        {
          if (v43 >= 0) {
            long long v25 = __dst;
          }
          else {
            long long v25 = *(uint8_t **)__dst;
          }
          uint64_t v26 = *(void *)v25;
          uint64_t v27 = *((void *)v25 + 1);
          uint64_t v28 = *((void *)v25 + 2);
          int v29 = *((unsigned __int16 *)v25 + 12);
          if (v26 == 0x726566736E617254 && v27 == 0x69767265536D6953 && v28 == 0x6E6F707365526563 && v29 == 25971) {
            sub_100311038(v6 + 528);
          }
LABEL_62:
          char v24 = HIBYTE(v43);
        }
        if (v24 < 0) {
          operator delete(*(void **)__dst);
        }
        uint64_t v17 = (long long *)((char *)v17 + 24);
        if (v17 == v18) {
          return;
        }
      }
      if (v43 >= 0) {
        uint64_t v33 = __dst;
      }
      else {
        uint64_t v33 = *(uint8_t **)__dst;
      }
      if (!memcmp(v33, "TransferSimServiceViaWebServiceResponse", 0x27uLL)) {
        sub_100311364(v6 + 688);
      }
      goto LABEL_62;
    }
  }
}

uint64_t sub_100C7F30C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    uint64_t v27 = *(void *)(a2 + 16);
  }
  uint64_t v8 = HIBYTE(v27);
  if (v6 != v7)
  {
    long long v10 = __p[0];
    long long v9 = __p[1];
    if (v27 >= 0) {
      long long v11 = (void *)HIBYTE(v27);
    }
    else {
      long long v11 = __p[1];
    }
    do
    {
      long long v12 = (void *)*(unsigned __int8 *)(v6 + 455);
      int v13 = (char)v12;
      if ((char)v12 < 0) {
        long long v12 = *(void **)(v6 + 440);
      }
      if (v11 == v12)
      {
        if (v13 >= 0) {
          uint64_t v14 = (unsigned __int8 *)(v6 + 432);
        }
        else {
          uint64_t v14 = *(unsigned __int8 **)(v6 + 432);
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(v10, v14, (size_t)v9)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_25;
          }
          uint64_t v15 = __p;
          uint64_t v16 = v8;
          while (*(unsigned __int8 *)v15 == *v14)
          {
            uint64_t v15 = (void **)((char *)v15 + 1);
            ++v14;
            if (!--v16) {
              goto LABEL_23;
            }
          }
        }
      }
      v6 += 1248;
    }
    while (v6 != v7);
    uint64_t v6 = v7;
  }
LABEL_23:
  if ((v8 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
LABEL_25:
  uint64_t v17 = *(long long **)(a1 + 272);
  if ((long long *)v6 == v17)
  {
    size_t v22 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        char v24 = (void *)a2;
      }
      else {
        char v24 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v24;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "failed to find a pending transfer plan for source iccid: %s", buf, 0xCu);
    }
    return sub_10024924C(a3, 6);
  }
  else
  {
    uint64_t v18 = *(NSObject **)(a1 + 40);
    if (((*(unsigned char *)(v6 + 2) - 2) & 0xFD) != 0)
    {
      if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a2 + 23) >= 0) {
          long long v19 = (void *)a2;
        }
        else {
          long long v19 = *(void **)a2;
        }
        *(_DWORD *)int buf = 136315138;
        *(void *)&uint8_t buf[4] = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I deleting pending transfer plan (%s)", buf, 0xCu);
        uint64_t v17 = *(long long **)(a1 + 272);
      }
      uint64_t v20 = sub_100C85CCC((long long *)(v6 + 1248), v17, v6);
      for (uint64_t i = *(void *)(a1 + 272); i != v20; uint64_t i = sub_10030D10C(i - 1248))
        ;
      *(void *)(a1 + 272) = v20;
      sub_10024924C(a3, 0);
      sub_100C7AAE8(a1);
    }
    if (os_log_type_enabled(*(os_log_t *)(a1 + 40), OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        long long v25 = (void *)a2;
      }
      else {
        long long v25 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)&uint8_t buf[4] = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "plan (%s) is already being transferred, can't be deleted", buf, 0xCu);
    }
    return sub_10024924C(a3, 4);
  }
}

void sub_100C7F714(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7F744(void *a1, uint64_t a2)
{
  v32[0] = 0;
  v32[1] = 0;
  uint64_t v33 = 0;
  sub_100CD7084(a2, (uint64_t)v32);
  uint64_t v4 = a1[33];
  uint64_t v5 = a1[34];
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v29 = *(void *)(a2 + 16);
  }
  if (SHIBYTE(v33) < 0)
  {
    sub_10004FC84(&__p, v32[0], (unint64_t)v32[1]);
  }
  else
  {
    long long __p = *(_OWORD *)v32;
    uint64_t v31 = v33;
  }
  uint64_t v6 = HIBYTE(v31);
  if (v4 != v5)
  {
    long long v27 = __p;
    if (v31 >= 0) {
      uint64_t v7 = HIBYTE(v31);
    }
    else {
      uint64_t v7 = *((void *)&__p + 1);
    }
    uint64_t v8 = HIBYTE(v29);
    long long v9 = __dst[1];
    __s1 = __dst[0];
    if (v29 >= 0) {
      long long v10 = (void *)HIBYTE(v29);
    }
    else {
      long long v10 = __dst[1];
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v4 + 503);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(v4 + 488);
      }
      if (v7 == v11)
      {
        if (v12 >= 0) {
          int v13 = (unsigned __int8 *)(v4 + 480);
        }
        else {
          int v13 = *(unsigned __int8 **)(v4 + 480);
        }
        if ((v6 & 0x80) != 0)
        {
          if (!memcmp((const void *)v27, v13, *((size_t *)&v27 + 1))) {
            goto LABEL_42;
          }
        }
        else
        {
          uint64_t p_p = &__p;
          uint64_t v15 = v6;
          if (!v6) {
            goto LABEL_43;
          }
          while (*(unsigned __int8 *)p_p == *v13)
          {
            uint64_t p_p = (long long *)((char *)p_p + 1);
            ++v13;
            if (!--v15) {
              goto LABEL_41;
            }
          }
        }
      }
      uint64_t v16 = (void *)*(unsigned __int8 *)(v4 + 479);
      int v17 = (char)v16;
      if ((char)v16 < 0) {
        uint64_t v16 = *(void **)(v4 + 464);
      }
      if (v10 == v16)
      {
        if (v17 >= 0) {
          uint64_t v18 = (unsigned __int8 *)(v4 + 456);
        }
        else {
          uint64_t v18 = *(unsigned __int8 **)(v4 + 456);
        }
        if ((v8 & 0x80) != 0)
        {
          if (!memcmp(__s1, v18, (size_t)v9)) {
            goto LABEL_41;
          }
        }
        else
        {
          if (!v8) {
            goto LABEL_41;
          }
          long long v19 = __dst;
          uint64_t v20 = v8;
          while (*(unsigned __int8 *)v19 == *v18)
          {
            long long v19 = (void **)((char *)v19 + 1);
            ++v18;
            if (!--v20) {
              goto LABEL_41;
            }
          }
        }
      }
      v4 += 1248;
    }
    while (v4 != v5);
    uint64_t v4 = v5;
  }
LABEL_41:
  if ((v6 & 0x80) != 0) {
LABEL_42:
  }
    operator delete((void *)__p);
LABEL_43:
  if (SHIBYTE(v29) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v21 = (long long *)a1[34];
  if ((long long *)v4 != v21 && !*(unsigned char *)(v4 + 4))
  {
    size_t v22 = a1[5];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        uint64_t v23 = (void *)a2;
      }
      else {
        uint64_t v23 = *(void **)a2;
      }
      *(_DWORD *)int buf = 136315138;
      uint64_t v35 = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I deleting transfer plan (%s)", buf, 0xCu);
      uint64_t v21 = (long long *)a1[34];
    }
    uint64_t v24 = sub_100C85CCC((long long *)(v4 + 1248), v21, v4);
    for (uint64_t i = a1[34]; i != v24; uint64_t i = sub_10030D10C(i - 1248))
      ;
    a1[34] = v24;
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
}

void sub_100C7FA1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C7FA58(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v4 = *(long long **)(a1 + 264);
  unsigned int v3 = *(long long **)(a1 + 272);
  if (v4 != v3)
  {
    uint64_t v7 = 0;
    while (!BYTE1(v4[v7 + 1]))
    {
      v7 += 78;
      if (&v4[v7] == v3) {
        return;
      }
    }
    if (&v4[v7] != v3)
    {
      if (a3)
      {
        uint64_t v8 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I force deleting cross platform transfer plan", (uint8_t *)__p, 2u);
          unsigned int v3 = *(long long **)(a1 + 272);
        }
        uint64_t v9 = sub_100C85CCC(&v4[v7 + 78], v3, (uint64_t)&v4[v7]);
        for (uint64_t i = *(void *)(a1 + 272); i != v9; uint64_t i = sub_10030D10C(i - 1248))
          ;
        *(void *)(a1 + 272) = v9;
        return;
      }
      uint64_t v11 = *(unsigned __int8 *)(a2 + 23);
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(a2 + 8);
      }
      if (v11)
      {
        (***(void (****)(Registry **__return_ptr))(a1 + 96))(&buf);
        int v12 = &v4[v7];
        sub_100CD69E4(&buf, (const void **)a2, (uint64_t)&v4[v7 + 1] + 8, (uint64_t)__p);
        uint64_t v13 = HIBYTE(v4[v7 + 17]);
        if ((v13 & 0x80u) == 0) {
          uint64_t v14 = (void *)*((unsigned __int8 *)v12 + 287);
        }
        else {
          uint64_t v14 = (void *)*((void *)v12 + 34);
        }
        uint64_t v15 = (void *)BYTE7(v35[0]);
        int v16 = SBYTE7(v35[0]);
        if (SBYTE7(v35[0]) < 0) {
          uint64_t v15 = __p[1];
        }
        if (v14 == v15)
        {
          if ((SBYTE7(v35[0]) & 0x80u) == 0) {
            int v17 = __p;
          }
          else {
            int v17 = (void **)__p[0];
          }
          if ((v13 & 0x80) != 0)
          {
            BOOL v22 = memcmp(*((const void **)v12 + 33), v17, *(void *)&v4[v7 + 17]) == 0;
          }
          else if (HIBYTE(v4[v7 + 17]))
          {
            uint64_t v18 = 0;
            uint64_t v19 = v13 - 1;
            do
            {
              int v20 = *((unsigned __int8 *)v17 + v18);
              int v21 = *((unsigned __int8 *)v4 + v18 + v7 * 16 + 264);
              BOOL v22 = v21 == v20;
            }
            while (v21 == v20 && v19 != v18++);
          }
          else
          {
            BOOL v22 = 1;
          }
        }
        else
        {
          BOOL v22 = 0;
        }
        if (v16 < 0) {
          operator delete(__p[0]);
        }
        if (v44) {
          sub_10004D2C8(v44);
        }
        if (v22)
        {
          long long v25 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I deleting cross platform transfer plan", (uint8_t *)__p, 2u);
          }
          *(_OWORD *)uint64_t v41 = 0u;
          long long v42 = 0u;
          *(_OWORD *)uint64_t v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          *(_OWORD *)uint64_t v36 = 0u;
          *(_OWORD *)long long __p = 0u;
          memset(v35, 0, sizeof(v35));
          uint64_t v26 = (void **)&v4[v7 + 15];
          if (SBYTE7(v4[v7 + 16]) < 0)
          {
            sub_10004FC84(__p, *v26, *((void *)&v4[v7 + 15] + 1));
          }
          else
          {
            long long v27 = *(_OWORD *)v26;
            *(void *)&v35[0] = *(void *)&v4[v7 + 16];
            *(_OWORD *)long long __p = v27;
          }
          WORD4(v35[0]) = 512;
          BYTE4(v35[1]) = 0;
          BYTE8(v35[1]) = 0;
          BYTE12(v35[1]) = 0;
          LOBYTE(v36[0]) = 0;
          BYTE8(v37) = 0;
          DWORD2(v38) = 0;
          LOBYTE(v39[0]) = 0;
          BYTE8(v4sub_10023C164((uint64_t)&a9, 0) = 0;
          LOBYTE(v41[0]) = 0;
          BYTE8(v42) = 0;
          *(_DWORD *)((char *)v35 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
          *(_DWORD *)((char *)v35 + 13) = 0;
          LODWORD(v38) = 0;
          WORD2(v38) = 0;
          uint64_t v28 = sub_100C85CCC(&v4[v7 + 78], *(long long **)(a1 + 272), (uint64_t)&v4[v7]);
          for (uint64_t j = *(void *)(a1 + 272); j != v28; uint64_t j = sub_10030D10C(j - 1248))
            ;
          *(void *)(a1 + 272) = v28;
          unsigned int v30 = *(std::__shared_weak_count **)(a1 + 256);
          if (v30)
          {
            uint64_t v31 = std::__shared_weak_count::lock(v30);
            if (v31)
            {
              uint64_t v32 = *(void *)(a1 + 248);
              if (v32)
              {
                (*(void (**)(uint64_t, void **))(*(void *)v32 + 80))(v32, __p);
LABEL_62:
                sub_10004D2C8(v31);
LABEL_63:
                if (BYTE8(v42) && SBYTE7(v42) < 0) {
                  operator delete(v41[0]);
                }
                if (BYTE8(v40) && SBYTE7(v40) < 0) {
                  operator delete(v39[0]);
                }
                if (BYTE8(v37) && SBYTE7(v37) < 0) {
                  operator delete(v36[0]);
                }
                if (SBYTE7(v35[0]) < 0) {
                  operator delete(__p[0]);
                }
                return;
              }
            }
          }
          else
          {
            uint64_t v31 = 0;
          }
          uint64_t v33 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
          {
            LOWORD(buf) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "delegate not available", (uint8_t *)&buf, 2u);
          }
          if (!v31) {
            goto LABEL_63;
          }
          goto LABEL_62;
        }
      }
      else
      {
        uint64_t v24 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I updating state for cross platform transfer plan", (uint8_t *)__p, 2u);
        }
        sub_100C7949C(a1, (uint64_t)&v4[v7], 0xCu);
      }
    }
  }
}

void sub_100C7FE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_10004D2C8(v9);
  sub_100B51C24((uint64_t)&a9);
  _Unwind_Resume(a1);
}

long long *sub_100C7FEC4(uint64_t a1)
{
  char v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(__p[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I deleting all pending transfer items", (uint8_t *)__p, 2u);
  }
  uint64_t v4 = *(unsigned __int8 **)(a1 + 264);
  unsigned int v3 = *(unsigned __int8 **)(a1 + 272);
  if (v4 == v3)
  {
LABEL_23:
    uint64_t v5 = (uint64_t)v4;
    goto LABEL_24;
  }
  uint64_t v5 = *(void *)(a1 + 272);
  while (v4[4])
  {
LABEL_9:
    v4 += 1248;
    if (v4 == v3) {
      goto LABEL_24;
    }
  }
  sub_100C81F24(__p, v4 + 456, v4 + 480, *(void *)(a1 + 160), *(void *)(a1 + 168));
  if (!v11 || (v10 & 0x80000000) == 0)
  {
    if (v11) {
      goto LABEL_12;
    }
    goto LABEL_9;
  }
  operator delete(__p[0]);
LABEL_12:
  if (v4 != v3)
  {
    uint64_t v6 = v4 + 1248;
    if (v4 + 1248 != v3)
    {
      uint64_t v5 = (uint64_t)v4;
      while (1)
      {
        if (!v6[4])
        {
          sub_100C81F24(__p, v6 + 456, v6 + 480, *(void *)(a1 + 160), *(void *)(a1 + 168));
          if (v11 && v10 < 0)
          {
            operator delete(__p[0]);
            goto LABEL_21;
          }
          if (v11) {
            goto LABEL_21;
          }
        }
        sub_100310984(v5, (long long *)v6);
        v5 += 1248;
LABEL_21:
        v6 += 1248;
        if (v6 == v3) {
          goto LABEL_24;
        }
      }
    }
    goto LABEL_23;
  }
LABEL_24:
  __n128 result = *(long long **)(a1 + 272);
  if ((long long *)v5 != result)
  {
    uint64_t v8 = sub_100C85CCC(result, *(long long **)(a1 + 272), v5);
    for (__n128 result = *(long long **)(a1 + 272);
          result != (long long *)v8;
    *(void *)(a1 + 272) = v8;
  }
  return result;
}

uint64_t sub_100C80044@<X0>(uint64_t result@<X0>, long long **a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v4 = *a2;
  long long v74 = a2[1];
  if (*a2 != v74)
  {
    uint64_t v5 = (void *)result;
    unint64_t v6 = 0;
    while (1)
    {
      uint64_t v7 = (const void **)v4 + 9;
      if (*((char *)v4 + 95) < 0)
      {
        uint64_t v10 = *((void *)v4 + 10);
        if (v10)
        {
          uint64_t v9 = *v7;
          uint64_t v8 = (char *)*v7 + v10;
LABEL_9:
          while (v9 != v8)
          {
            unsigned char *v9 = __tolower((char)*v9);
            ++v9;
          }
          uint64_t v11 = v5[33];
          uint64_t v12 = v5[34];
          uint64_t v13 = v11;
          if (v11 != v12)
          {
            uint64_t v14 = *((unsigned __int8 *)v4 + 95);
            size_t v15 = *((void *)v4 + 10);
            if ((v14 & 0x80u) == 0) {
              uint64_t v16 = *((unsigned __int8 *)v4 + 95);
            }
            else {
              uint64_t v16 = *((void *)v4 + 10);
            }
            uint64_t v13 = v5[33];
            do
            {
              uint64_t v17 = *(unsigned __int8 *)(v13 + 503);
              int v18 = (char)v17;
              if ((v17 & 0x80u) != 0) {
                uint64_t v17 = *(void *)(v13 + 488);
              }
              if (v16 == v17)
              {
                if (v18 >= 0) {
                  uint64_t v19 = (unsigned __int8 *)(v13 + 480);
                }
                else {
                  uint64_t v19 = *(unsigned __int8 **)(v13 + 480);
                }
                if ((v14 & 0x80) != 0)
                {
                  if (!memcmp(*v7, v19, v15)) {
                    goto LABEL_30;
                  }
                }
                else
                {
                  if (!v14) {
                    goto LABEL_30;
                  }
                  uint64_t v20 = 0;
                  while (*((unsigned __int8 *)v4 + v20 + 72) == v19[v20])
                  {
                    if (v14 == ++v20) {
                      goto LABEL_30;
                    }
                  }
                }
              }
              v13 += 1248;
            }
            while (v13 != v12);
            goto LABEL_55;
          }
LABEL_30:
          if (v13 == v12)
          {
LABEL_55:
            uint64_t v31 = v11;
            if (v11 != v12)
            {
              uint64_t v32 = *((unsigned __int8 *)v4 + 71);
              size_t v33 = *((void *)v4 + 7);
              if ((v32 & 0x80u) == 0) {
                uint64_t v34 = *((unsigned __int8 *)v4 + 71);
              }
              else {
                uint64_t v34 = *((void *)v4 + 7);
              }
              uint64_t v31 = v11;
              while (1)
              {
                uint64_t v35 = *(unsigned __int8 *)(v31 + 263);
                int v36 = (char)v35;
                if ((v35 & 0x80u) != 0) {
                  uint64_t v35 = *(void *)(v31 + 248);
                }
                if (v34 != v35) {
                  goto LABEL_79;
                }
                if (v36 >= 0) {
                  long long v37 = (unsigned __int8 *)(v31 + 240);
                }
                else {
                  long long v37 = *(unsigned __int8 **)(v31 + 240);
                }
                if ((v32 & 0x80) != 0)
                {
                  if (memcmp(*((const void **)v4 + 6), v37, v33)) {
                    goto LABEL_79;
                  }
                }
                else if (v32)
                {
                  uint64_t v38 = 0;
                  while (*((unsigned __int8 *)v4 + v38 + 48) == v37[v38])
                  {
                    if (v32 == ++v38) {
                      goto LABEL_73;
                    }
                  }
                  goto LABEL_79;
                }
LABEL_73:
                uint64_t v39 = *(unsigned __int8 *)(v31 + 455);
                if ((v39 & 0x80u) != 0) {
                  uint64_t v39 = *(void *)(v31 + 440);
                }
                if (!v39)
                {
                  uint64_t v40 = *(unsigned __int8 *)(v31 + 503);
                  if ((v40 & 0x80u) != 0) {
                    uint64_t v40 = *(void *)(v31 + 488);
                  }
                  if (!v40) {
                    break;
                  }
                }
LABEL_79:
                v31 += 1248;
                if (v31 == v12) {
                  goto LABEL_92;
                }
              }
            }
            if (v31 != v12)
            {
              std::string::operator=((std::string *)(v31 + 480), (const std::string *)v4 + 3);
              sub_100C7949C((uint64_t)v5, v31, 0xCu);
              sub_100C7AAE8((uint64_t)v5);
            }
LABEL_92:
            if (*((unsigned char *)v4 + 121))
            {
              bzero(&v79, 0x4E0uLL);
              uint64_t v75 = 0;
              unint64_t v76 = 0;
              unint64_t v77 = 0;
              std::string::operator=(v92, (const std::string *)v4);
              BYTE3(v79) = 1;
              LOWORD(v79) = 2311;
              int v21 = v4 + 8;
              if (*((unsigned char *)v4 + 304))
              {
                std::string::operator=(&v81, (const std::string *)(v4 + 13));
                std::string::operator=(&v82, (const std::string *)((char *)v4 + 232));
                std::string::operator=(&v83, (const std::string *)(v4 + 16));
                std::string::operator=((std::string *)&v84, (const std::string *)((char *)v4 + 280));
                std::string::operator=(v89, (const std::string *)(v4 + 11));
                std::string::operator=(v91, (const std::string *)(v4 + 8));
                uint64_t v47 = *((unsigned __int8 *)v4 + 175);
                if ((v47 & 0x80u) != 0) {
                  uint64_t v47 = *((void *)v4 + 20);
                }
                if (v47) {
                  uint64_t v48 = (const std::string *)((char *)v4 + 152);
                }
                else {
                  uint64_t v48 = (const std::string *)(v4 + 8);
                }
                std::string::operator=(&v90, v48);
              }
              char v93 = 1;
              unint64_t v49 = v76;
              if (v76 >= v77)
              {
                uint64_t v50 = sub_1003252B8(&v75, &v79);
              }
              else
              {
                sub_10030DDAC(v76, &v79);
                uint64_t v50 = v49 + 1248;
              }
              unint64_t v76 = v50;
              uint64_t v58 = v5[5];
              if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v59 = v91;
                if ((v91[0].__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  uint64_t v59 = (std::string *)v91[0].__r_.__value_.__r.__words[0];
                }
                *(_DWORD *)int buf = 136315138;
                *(void *)&uint8_t buf[4] = v59;
                _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I append pending ODA plan with iccid: %s", buf, 0xCu);
              }
              (*(void (**)(void *, uint64_t *))(*v5 + 32))(v5, &v75);
              *(void *)int buf = &v75;
              sub_10030AFC8((void ***)buf);
              sub_10030D10C((uint64_t)&v79);
              LOBYTE(v79) = 1;
              unint64_t v60 = a3[1];
              if (v60 >= a3[2]) {
                goto LABEL_187;
              }
              goto LABEL_184;
            }
            if (v11 == v12)
            {
LABEL_158:
              if (v11 != v12)
              {
                std::string::operator=((std::string *)(v11 + 480), (const std::string *)v4 + 3);
                sub_100C7AAE8((uint64_t)v5);
              }
LABEL_160:
              LOBYTE(v79) = 0;
              unint64_t v60 = a3[1];
              if (v60 >= a3[2]) {
                goto LABEL_187;
              }
              *(unsigned char *)unint64_t v60 = 0;
              long long v61 = *v4;
              *(void *)(v60 + 24) = *((void *)v4 + 2);
              *(_OWORD *)(v60 + 8) = v61;
              *((void *)v4 + 1) = 0;
              *((void *)v4 + 2) = 0;
              *(void *)uint64_t v4 = 0;
              long long v62 = *(long long *)((char *)v4 + 24);
              *(void *)(v60 + 48) = *((void *)v4 + 5);
              *(_OWORD *)(v60 + 32) = v62;
              *((void *)v4 + 4) = 0;
              *((void *)v4 + 5) = 0;
              *((void *)v4 + 3) = 0;
              long long v63 = v4[3];
              *(void *)(v60 + 72) = *((void *)v4 + 8);
              *(_OWORD *)(v60 + 56) = v63;
              *((void *)v4 + 7) = 0;
              *((void *)v4 + 8) = 0;
              *((void *)v4 + 6) = 0;
              long long v64 = *(_OWORD *)v7;
              *(void *)(v60 + 96) = *((void *)v4 + 11);
              *(_OWORD *)(v60 + 8sub_10023C164((uint64_t)&a9, 0) = v64;
              *uint64_t v7 = 0;
              *((void *)v4 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
              *((void *)v4 + 11) = 0;
              long long v65 = v4[6];
              *(void *)(v60 + 12sub_10023C164((uint64_t)&a9, 0) = *((void *)v4 + 14);
              *(_OWORD *)(v60 + 104) = v65;
              *((void *)v4 + 12) = 0;
              *((void *)v4 + 13) = 0;
              *((void *)v4 + 14) = 0;
              *(_WORD *)(v60 + 128) = *((_WORD *)v4 + 60);
              xpc_object_t v66 = (unsigned char *)(v60 + 136);
              unsigned __int8 v67 = v4 + 8;
              goto LABEL_185;
            }
            uint64_t v51 = *((unsigned __int8 *)v4 + 71);
            size_t v52 = *((void *)v4 + 7);
            if ((v51 & 0x80u) == 0) {
              uint64_t v53 = *((unsigned __int8 *)v4 + 71);
            }
            else {
              uint64_t v53 = *((void *)v4 + 7);
            }
            while (1)
            {
              uint64_t v54 = *(unsigned __int8 *)(v11 + 263);
              int v55 = (char)v54;
              if ((v54 & 0x80u) != 0) {
                uint64_t v54 = *(void *)(v11 + 248);
              }
              if (v53 == v54)
              {
                if (v55 >= 0) {
                  uint64_t v56 = (unsigned __int8 *)(v11 + 240);
                }
                else {
                  uint64_t v56 = *(unsigned __int8 **)(v11 + 240);
                }
                if ((v51 & 0x80) != 0)
                {
                  if (!memcmp(*((const void **)v4 + 6), v56, v52))
                  {
LABEL_119:
                    if (*(unsigned char *)(v11 + 1225)) {
                      goto LABEL_158;
                    }
                  }
                }
                else
                {
                  if (!v51) {
                    goto LABEL_119;
                  }
                  uint64_t v57 = 0;
                  while (*((unsigned __int8 *)v4 + v57 + 48) == v56[v57])
                  {
                    if (v51 == ++v57) {
                      goto LABEL_119;
                    }
                  }
                }
              }
              v11 += 1248;
              if (v11 == v12) {
                goto LABEL_160;
              }
            }
          }
          if (*((unsigned char *)v4 + 121)) {
            *(unsigned char *)(v13 + 984) = 1;
          }
          int v21 = v4 + 8;
          if (*((unsigned char *)v4 + 304))
          {
            std::string::operator=((std::string *)((char *)v4 + 152), (const std::string *)(v13 + 432));
          }
          else
          {
            long long v79 = 0uLL;
            uint64_t v80 = 0;
            if (*(char *)(v13 + 455) < 0) {
              sub_10004FC84(&v81, *(void **)(v13 + 432), *(void *)(v13 + 440));
            }
            else {
              std::string v81 = *(std::string *)(v13 + 432);
            }
            memset(&v82, 0, sizeof(v82));
            LODWORD(v83.__r_.__value_.__l.__data_) = 0;
            *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0u;
            long long v84 = 0u;
            long long v85 = 0u;
            long long v86 = 0u;
            long long v87 = 0u;
            long long v88 = 0u;
            sub_100C80C6C((uint64_t)(v4 + 8), (uint64_t)&v79);
            if (SHIBYTE(v88) < 0) {
              operator delete(*((void **)&v87 + 1));
            }
            if (SBYTE7(v87) < 0) {
              operator delete((void *)v86);
            }
            if (SHIBYTE(v85) < 0) {
              operator delete(*((void **)&v84 + 1));
            }
            if (SBYTE7(v84) < 0) {
              operator delete((void *)v83.__r_.__value_.__l.__size_);
            }
            if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v82.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v81.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(v80) < 0) {
              operator delete((void *)v79);
            }
          }
          if (*(char *)(v13 + 479) < 0)
          {
            if (!*(void *)(v13 + 464)) {
              goto LABEL_149;
            }
          }
          else if (!*(unsigned char *)(v13 + 479))
          {
LABEL_149:
            if (*(char *)(v13 + 455) < 0)
            {
              if (!*(void *)(v13 + 440))
              {
LABEL_151:
                sub_100C7949C((uint64_t)v5, v13, 0xCu);
                sub_100C7AAE8((uint64_t)v5);
              }
            }
            else if (!*(unsigned char *)(v13 + 455))
            {
              goto LABEL_151;
            }
            LOBYTE(v79) = 1;
            unint64_t v60 = a3[1];
            if (v60 >= a3[2])
            {
LABEL_187:
              __n128 result = sub_10030F098(a3, (char *)&v79, v4);
              unint64_t v6 = result;
              goto LABEL_188;
            }
            goto LABEL_184;
          }
          std::string::operator=((std::string *)(v4 + 8), (const std::string *)(v13 + 456));
          goto LABEL_149;
        }
      }
      else if (*((unsigned char *)v4 + 95))
      {
        uint64_t v8 = (char *)v7 + *((unsigned __int8 *)v4 + 95);
        uint64_t v9 = (char *)v4 + 72;
        goto LABEL_9;
      }
      uint64_t v22 = v5[33];
      uint64_t v23 = v5[34];
      if (v22 != v23) {
        break;
      }
LABEL_81:
      if (v22 != v23)
      {
        int v21 = v4 + 8;
        if (*((unsigned char *)v4 + 304))
        {
          std::string::operator=((std::string *)((char *)v4 + 152), (const std::string *)(v22 + 432));
        }
        else
        {
          long long v79 = 0uLL;
          uint64_t v80 = 0;
          if (*(char *)(v22 + 455) < 0) {
            sub_10004FC84(&v81, *(void **)(v22 + 432), *(void *)(v22 + 440));
          }
          else {
            std::string v81 = *(std::string *)(v22 + 432);
          }
          memset(&v82, 0, sizeof(v82));
          LODWORD(v83.__r_.__value_.__l.__data_) = 0;
          *(_OWORD *)&v83.__r_.__value_.__r.__words[1] = 0u;
          long long v84 = 0u;
          long long v85 = 0u;
          long long v86 = 0u;
          long long v87 = 0u;
          long long v88 = 0u;
          sub_100C80C6C((uint64_t)(v4 + 8), (uint64_t)&v79);
          if (SHIBYTE(v88) < 0) {
            operator delete(*((void **)&v87 + 1));
          }
          if (SBYTE7(v87) < 0) {
            operator delete((void *)v86);
          }
          if (SHIBYTE(v85) < 0) {
            operator delete(*((void **)&v84 + 1));
          }
          if (SBYTE7(v84) < 0) {
            operator delete((void *)v83.__r_.__value_.__l.__size_);
          }
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v81.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v80) < 0) {
            operator delete((void *)v79);
          }
        }
        if (*(char *)(v22 + 479) < 0)
        {
          if (*(void *)(v22 + 464)) {
            goto LABEL_182;
          }
        }
        else
        {
          if (!*(unsigned char *)(v22 + 479)) {
            goto LABEL_183;
          }
LABEL_182:
          std::string::operator=((std::string *)(v4 + 8), (const std::string *)(v22 + 456));
        }
LABEL_183:
        LOBYTE(v79) = 1;
        unint64_t v60 = a3[1];
        if (v60 >= a3[2]) {
          goto LABEL_187;
        }
LABEL_184:
        *(unsigned char *)unint64_t v60 = 1;
        long long v68 = *v4;
        *(void *)(v60 + 24) = *((void *)v4 + 2);
        *(_OWORD *)(v60 + 8) = v68;
        *((void *)v4 + 1) = 0;
        *((void *)v4 + 2) = 0;
        *(void *)uint64_t v4 = 0;
        long long v69 = *(long long *)((char *)v4 + 24);
        *(void *)(v60 + 48) = *((void *)v4 + 5);
        *(_OWORD *)(v60 + 32) = v69;
        *((void *)v4 + 4) = 0;
        *((void *)v4 + 5) = 0;
        *((void *)v4 + 3) = 0;
        long long v70 = v4[3];
        *(void *)(v60 + 72) = *((void *)v4 + 8);
        *(_OWORD *)(v60 + 56) = v70;
        *((void *)v4 + 7) = 0;
        *((void *)v4 + 8) = 0;
        *((void *)v4 + 6) = 0;
        long long v71 = *(_OWORD *)v7;
        *(void *)(v60 + 96) = *((void *)v4 + 11);
        *(_OWORD *)(v60 + 8sub_10023C164((uint64_t)&a9, 0) = v71;
        *uint64_t v7 = 0;
        *((void *)v4 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
        *((void *)v4 + 11) = 0;
        long long v72 = v4[6];
        *(void *)(v60 + 12sub_10023C164((uint64_t)&a9, 0) = *((void *)v4 + 14);
        *(_OWORD *)(v60 + 104) = v72;
        *((void *)v4 + 12) = 0;
        *((void *)v4 + 13) = 0;
        *((void *)v4 + 14) = 0;
        *(_WORD *)(v60 + 128) = *((_WORD *)v4 + 60);
        xpc_object_t v66 = (unsigned char *)(v60 + 136);
        unsigned __int8 v67 = v21;
LABEL_185:
        __n128 result = (uint64_t)sub_10030F228(v66, v67);
        unint64_t v6 = v60 + 320;
        goto LABEL_186;
      }
LABEL_84:
      uint64_t v41 = v5[5];
      if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
      {
        long long v73 = v4 + 3;
        if (*((char *)v4 + 71) < 0) {
          long long v73 = (void *)*v73;
        }
        LODWORD(v79) = 136315138;
        *(void *)((char *)&v79 + 4) = v73;
        _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "Empty iccidHash from ALS for carrier: %s", (uint8_t *)&v79, 0xCu);
        unint64_t v6 = a3[1];
      }
      LOBYTE(v79) = 0;
      if (v6 >= a3[2]) {
        goto LABEL_187;
      }
      *(unsigned char *)unint64_t v6 = 0;
      long long v42 = *v4;
      *(void *)(v6 + 24) = *((void *)v4 + 2);
      *(_OWORD *)(v6 + 8) = v42;
      *((void *)v4 + 1) = 0;
      *((void *)v4 + 2) = 0;
      *(void *)uint64_t v4 = 0;
      long long v43 = *(long long *)((char *)v4 + 24);
      *(void *)(v6 + 48) = *((void *)v4 + 5);
      *(_OWORD *)(v6 + 32) = v43;
      *((void *)v4 + 4) = 0;
      *((void *)v4 + 5) = 0;
      *((void *)v4 + 3) = 0;
      long long v44 = v4[3];
      *(void *)(v6 + 72) = *((void *)v4 + 8);
      *(_OWORD *)(v6 + 56) = v44;
      *((void *)v4 + 7) = 0;
      *((void *)v4 + 8) = 0;
      *((void *)v4 + 6) = 0;
      long long v45 = *(_OWORD *)v7;
      *(void *)(v6 + 96) = *((void *)v4 + 11);
      *(_OWORD *)(v6 + 8sub_10023C164((uint64_t)&a9, 0) = v45;
      *uint64_t v7 = 0;
      *((void *)v4 + 1sub_10023C164((uint64_t)&a9, 0) = 0;
      *((void *)v4 + 11) = 0;
      long long v46 = v4[6];
      *(void *)(v6 + 12sub_10023C164((uint64_t)&a9, 0) = *((void *)v4 + 14);
      *(_OWORD *)(v6 + 104) = v46;
      *((void *)v4 + 12) = 0;
      *((void *)v4 + 13) = 0;
      *((void *)v4 + 14) = 0;
      *(_WORD *)(v6 + 128) = *((_WORD *)v4 + 60);
      __n128 result = (uint64_t)sub_10030F228((unsigned char *)(v6 + 136), v4 + 8);
      v6 += 320;
LABEL_186:
      a3[1] = v6;
LABEL_188:
      a3[1] = v6;
      uint64_t v4 = (long long *)((char *)v4 + 312);
      if (v4 == v74) {
        return result;
      }
    }
    uint64_t v24 = *((unsigned __int8 *)v4 + 71);
    size_t v25 = *((void *)v4 + 7);
    if ((v24 & 0x80u) == 0) {
      uint64_t v26 = *((unsigned __int8 *)v4 + 71);
    }
    else {
      uint64_t v26 = *((void *)v4 + 7);
    }
    while (1)
    {
      uint64_t v27 = *(unsigned __int8 *)(v22 + 263);
      int v28 = (char)v27;
      if ((v27 & 0x80u) != 0) {
        uint64_t v27 = *(void *)(v22 + 248);
      }
      if (v26 == v27)
      {
        if (v28 >= 0) {
          uint64_t v29 = (unsigned __int8 *)(v22 + 240);
        }
        else {
          uint64_t v29 = *(unsigned __int8 **)(v22 + 240);
        }
        if ((v24 & 0x80) != 0)
        {
          if (!memcmp(*((const void **)v4 + 6), v29, v25))
          {
LABEL_52:
            if (*(unsigned char *)(v22 + 1) == 9) {
              goto LABEL_81;
            }
          }
        }
        else
        {
          if (!v24) {
            goto LABEL_52;
          }
          uint64_t v30 = 0;
          while (*((unsigned __int8 *)v4 + v30 + 48) == v29[v30])
          {
            if (v24 == ++v30) {
              goto LABEL_52;
            }
          }
        }
      }
      v22 += 1248;
      if (v22 == v23) {
        goto LABEL_84;
      }
    }
  }
  return result;
}

void sub_100C80BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
}

uint64_t sub_100C80C6C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 176))
  {
    sub_1003103A4(a1, (long long *)a2);
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)a1 = v3;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 4sub_10023C164((uint64_t)&a9, 0) = 0;
    *(void *)(a2 + 24) = 0;
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 8sub_10023C164((uint64_t)&a9, 0) = v6;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 8sub_10023C164((uint64_t)&a9, 0) = 0;
    long long v7 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 12sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 12sub_10023C164((uint64_t)&a9, 0) = 0;
    *(void *)(a2 + 104) = 0;
    long long v8 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v8;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    long long v9 = *(_OWORD *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(_OWORD *)(a1 + 152) = v9;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 16sub_10023C164((uint64_t)&a9, 0) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return a1;
}

void sub_100C80D5C(uint64_t a1, void **a2)
{
  long long v4 = (uint64_t **)(a1 + 328);
  if (!sub_10010E128(a1 + 328, a2))
  {
    long long v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v6 = a2;
      }
      else {
        long long v6 = *a2;
      }
      *(_DWORD *)int buf = 136315138;
      *(void *)uint64_t v14 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I add expired plan: %s", buf, 0xCu);
    }
    uint64_t v12 = 0;
    long long v7 = (uint64_t **)sub_100046ED4((uint64_t)v4, &v12, a2);
    if (!*v7)
    {
      long long v8 = v7;
      *(void *)&void v14[3] = 0;
      long long v9 = (uint64_t *)operator new(0x38uLL);
      *(void *)&v14[1] = a1 + 336;
      uint64_t v10 = v9 + 4;
      if (*((char *)a2 + 23) < 0)
      {
        sub_10004FC84(v10, *a2, (unint64_t)a2[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v10 = *(_OWORD *)a2;
        v9[6] = (uint64_t)a2[2];
      }
      sub_100046C38(v4, v12, v8, v9);
    }
    if (!sub_100C83888(*(void *)(a1 + 112), v4))
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "save expired plans failure", buf, 2u);
      }
    }
  }
}

void sub_100C80EF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  sub_1000C6EE8(v12, v11);
  _Unwind_Resume(a1);
}

void sub_100C80F1C(uint64_t a1, char *a2)
{
  long long v4 = (uint64_t **)(a1 + 328);
  if (sub_10010E128(a1 + 328, (void **)a2))
  {
    long long v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0) {
        long long v6 = a2;
      }
      else {
        long long v6 = *(char **)a2;
      }
      int v8 = 136315138;
      long long v9 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I remove expired plan: %s", (uint8_t *)&v8, 0xCu);
    }
    sub_1000E9358(v4, (void **)a2);
    if (!sub_100C83888(*(void *)(a1 + 112), v4))
    {
      long long v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v8) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "save expired plans failure", (uint8_t *)&v8, 2u);
      }
    }
  }
}

uint64_t *sub_100C81040@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1000C6BDC(a2, a1 + 328);
}

uint64_t *sub_100C8104C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  __n128 result = sub_1000C6BDC(a2, a1 + 328);
  long long v5 = *(void ***)(a1 + 216);
  long long v6 = (void **)(a1 + 224);
  if (v5 != v6)
  {
    do
    {
      __n128 result = sub_100046BAC((uint64_t **)a2, v5 + 7, (uint64_t)(v5 + 7));
      long long v7 = (void **)v5[1];
      if (v7)
      {
        do
        {
          int v8 = v7;
          long long v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          int v8 = (void **)v5[2];
          BOOL v9 = *v8 == v5;
          long long v5 = v8;
        }
        while (!v9);
      }
      long long v5 = v8;
    }
    while (v8 != v6);
  }
  return result;
}

void sub_100C810E4(_Unwind_Exception *a1)
{
  sub_10005CD2C(v1, *(char **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100C810FC(void *a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    uint64_t v34 = a1[5];
    if (!os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
    {
LABEL_83:
      char v38 = 0;
      *a3 = 0;
      goto LABEL_84;
    }
    LOWORD(__p) = 0;
    uint64_t v35 = "empty matching or hashed iccid";
    int v36 = v34;
    uint32_t v37 = 2;
LABEL_89:
    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v35, (uint8_t *)&__p, v37);
    goto LABEL_83;
  }
  uint64_t v7 = a1[33];
  uint64_t v8 = a1[34];
  if (v7 == v8) {
    goto LABEL_80;
  }
  do
  {
    uint64_t v9 = *(unsigned __int8 *)(v7 + 455);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *(unsigned __int8 *)(v7 + 455);
    }
    else {
      uint64_t v10 = *(void *)(v7 + 440);
    }
    int v11 = *(char *)(a2 + 23);
    if (v11 >= 0) {
      uint64_t v12 = *(unsigned __int8 *)(a2 + 23);
    }
    else {
      uint64_t v12 = *(void *)(a2 + 8);
    }
    if (v10 == v12)
    {
      if (v11 >= 0) {
        uint64_t v13 = (unsigned __int8 *)a2;
      }
      else {
        uint64_t v13 = *(unsigned __int8 **)a2;
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v7 + 432), v13, *(void *)(v7 + 440))) {
          goto LABEL_80;
        }
      }
      else
      {
        if (!*(unsigned char *)(v7 + 455)) {
          goto LABEL_80;
        }
        uint64_t v14 = 0;
        while (*(unsigned __int8 *)(v7 + v14 + 432) == v13[v14])
        {
          if (v9 == ++v14) {
            goto LABEL_80;
          }
        }
      }
    }
    uint64_t v15 = *(unsigned __int8 *)(v7 + 479);
    if ((v15 & 0x80u) == 0) {
      uint64_t v16 = *(unsigned __int8 *)(v7 + 479);
    }
    else {
      uint64_t v16 = *(void *)(v7 + 464);
    }
    if (v16 == v12)
    {
      if (v11 >= 0) {
        uint64_t v17 = (unsigned __int8 *)a2;
      }
      else {
        uint64_t v17 = *(unsigned __int8 **)a2;
      }
      if ((v15 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v7 + 456), v17, *(void *)(v7 + 464))) {
          goto LABEL_80;
        }
      }
      else
      {
        if (!*(unsigned char *)(v7 + 479)) {
          goto LABEL_80;
        }
        uint64_t v18 = 0;
        while (*(unsigned __int8 *)(v7 + v18 + 456) == v17[v18])
        {
          if (v15 == ++v18) {
            goto LABEL_80;
          }
        }
      }
    }
    uint64_t v19 = *(unsigned __int8 *)(v7 + 503);
    if ((v19 & 0x80u) == 0) {
      uint64_t v20 = *(unsigned __int8 *)(v7 + 503);
    }
    else {
      uint64_t v20 = *(void *)(v7 + 488);
    }
    if (v20 == v12)
    {
      if (v11 >= 0) {
        int v21 = (unsigned __int8 *)a2;
      }
      else {
        int v21 = *(unsigned __int8 **)a2;
      }
      if ((v19 & 0x80) != 0)
      {
        if (!memcmp(*(const void **)(v7 + 480), v21, *(void *)(v7 + 488))) {
          goto LABEL_80;
        }
      }
      else
      {
        if (!*(unsigned char *)(v7 + 503)) {
          goto LABEL_80;
        }
        uint64_t v22 = 0;
        while (*(unsigned __int8 *)(v7 + v22 + 480) == v21[v22])
        {
          if (v19 == ++v22) {
            goto LABEL_80;
          }
        }
      }
    }
    sub_100CD7084(a2, (uint64_t)&__p);
    uint64_t v23 = *(unsigned __int8 *)(v7 + 503);
    if ((v23 & 0x80u) == 0) {
      uint64_t v24 = *(unsigned __int8 *)(v7 + 503);
    }
    else {
      uint64_t v24 = *(void *)(v7 + 488);
    }
    uint64_t v25 = v42;
    int v26 = (char)v42;
    if ((v42 & 0x80u) != 0) {
      uint64_t v25 = *((void *)&__p + 1);
    }
    if (v24 != v25)
    {
      BOOL v32 = 0;
      if (((char)v42 & 0x80000000) == 0) {
        goto LABEL_73;
      }
LABEL_72:
      operator delete((void *)__p);
      goto LABEL_73;
    }
    if ((v42 & 0x80u) == 0) {
      uint64_t p_p = &__p;
    }
    else {
      uint64_t p_p = (long long *)__p;
    }
    if ((v23 & 0x80) != 0)
    {
      BOOL v32 = memcmp(*(const void **)(v7 + 480), p_p, *(void *)(v7 + 488)) == 0;
      goto LABEL_71;
    }
    if (*(unsigned char *)(v7 + 503))
    {
      uint64_t v28 = 0;
      uint64_t v29 = v23 - 1;
      do
      {
        int v30 = *((unsigned __int8 *)p_p + v28);
        int v31 = *(unsigned __int8 *)(v7 + v28 + 480);
        BOOL v32 = v31 == v30;
      }
      while (v31 == v30 && v29 != v28++);
LABEL_71:
      if ((v26 & 0x80000000) == 0) {
        goto LABEL_73;
      }
      goto LABEL_72;
    }
    BOOL v32 = 1;
    if ((char)v42 < 0) {
      goto LABEL_72;
    }
LABEL_73:
    if (v32) {
      goto LABEL_80;
    }
    v7 += 1248;
  }
  while (v7 != v8);
  uint64_t v7 = v8;
LABEL_80:
  if (v7 == a1[34])
  {
    uint64_t v39 = a1[5];
    if (!os_log_type_enabled(v39, OS_LOG_TYPE_ERROR)) {
      goto LABEL_83;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint64_t v40 = (unsigned __int8 *)a2;
    }
    else {
      uint64_t v40 = *(unsigned __int8 **)a2;
    }
    LODWORD(__p) = 136315138;
    *(void *)((char *)&__p + 4) = v40;
    uint64_t v35 = "pending transfer plan with matching or hashed iccid (%s) not found";
    int v36 = v39;
    uint32_t v37 = 12;
    goto LABEL_89;
  }
  sub_10030DDAC((uint64_t)a3, (long long *)v7);
  char v38 = 1;
LABEL_84:
  a3[1248] = v38;
}

uint64_t sub_100C81468@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v4 = *(long long **)(result + 264);
  uint64_t v5 = *(long long **)(result + 272);
  if (v4 != v5)
  {
    while (1)
    {
      bzero(v15, 0x4E0uLL);
      sub_10030DDAC((uint64_t)v15, v4);
      uint64_t v7 = v18;
      if ((v18 & 0x80u) == 0) {
        size_t v8 = v18;
      }
      else {
        size_t v8 = __n;
      }
      uint64_t v9 = *(unsigned __int8 *)(a2 + 23);
      int v10 = (char)v9;
      if ((v9 & 0x80u) != 0) {
        uint64_t v9 = *(void *)(a2 + 8);
      }
      if (v8 != v9) {
        goto LABEL_22;
      }
      int v11 = v10 >= 0 ? (unsigned __int8 *)a2 : *(unsigned __int8 **)a2;
      if ((v18 & 0x80) == 0) {
        break;
      }
      if (!memcmp(__s1, v11, __n)) {
        goto LABEL_18;
      }
LABEL_22:
      __n128 result = sub_10030D10C((uint64_t)v15);
      v4 += 78;
      if (v4 == v5) {
        return result;
      }
    }
    if (v18)
    {
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *v11)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_18;
        }
      }
      goto LABEL_22;
    }
LABEL_18:
    unint64_t v13 = a3[1];
    if (v13 >= a3[2])
    {
      uint64_t v14 = sub_1003252B8(a3, v15);
    }
    else
    {
      sub_10030DDAC(a3[1], v15);
      uint64_t v14 = v13 + 1248;
      a3[1] = v13 + 1248;
    }
    a3[1] = v14;
    goto LABEL_22;
  }
  return result;
}

void sub_100C815CC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030D10C((uint64_t)va);
  sub_10030AFC8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100C81600(void *a1)
{
  uint64_t v1 = a1[33];
  uint64_t v2 = a1[34];
  if (v1 != v2)
  {
    long long v4 = a1 + 39;
    uint64_t v5 = a1 + 3;
    while (*(unsigned char *)(v1 + 1) != 8)
    {
LABEL_27:
      v1 += 1248;
      if (v1 == v2) {
        return;
      }
    }
    uint64_t v6 = *v4;
    if (!*v4)
    {
      uint64_t v7 = (std::__shared_weak_count *)a1[2];
      if (!v7 || (v8 = a1[12], v9 = a1[1], (int v10 = std::__shared_weak_count::lock(v7)) == 0)) {
        sub_100088B9C();
      }
      int v11 = v10;
      atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      uint64_t v12 = std::__shared_weak_count::lock(v11);
      unint64_t v13 = v12;
      if (v12)
      {
        if (v9) {
          uint64_t v14 = v9 + 48;
        }
        else {
          uint64_t v14 = 0;
        }
        atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        std::__shared_weak_count::__release_weak(v11);
        sub_10004D2C8(v13);
      }
      else
      {
        std::__shared_weak_count::__release_weak(v11);
        uint64_t v14 = 0;
      }
      uint64_t v19 = v14;
      uint64_t v20 = v13;
      (*(void (**)(uint8_t *__return_ptr, uint64_t, void *, uint64_t *))(*(void *)v8 + 464))(buf, v8, v5, &v19);
      long long v15 = *(_OWORD *)buf;
      memset(buf, 0, sizeof(buf));
      uint64_t v16 = (std::__shared_weak_count *)a1[40];
      *(_OWORD *)long long v4 = v15;
      if (v16)
      {
        sub_10004D2C8(v16);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      if (v20) {
        std::__shared_weak_count::__release_weak(v20);
      }
      uint64_t v6 = *v4;
    }
    uint64_t v17 = (std::__shared_weak_count *)a1[40];
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v6)
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 16))(v6, v1 + 432, v1 + 24, v1 + 48, v1 + 72, v1 + 96);
    }
    else
    {
      unsigned __int8 v18 = a1[5];
      if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)int buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "invalid PushPendingPlanController", buf, 2u);
        if (!v17)
        {
LABEL_26:
          if (!v6) {
            return;
          }
          goto LABEL_27;
        }
LABEL_25:
        sub_10004D2C8(v17);
        goto LABEL_26;
      }
    }
    if (!v17) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
}

void sub_100C81810(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    std::__shared_weak_count::__release_weak(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C8183C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = a6;
  uint64_t v7 = a5;
  if (!(*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 96)
                                                                                            + 336))(*(void *)(a1 + 96), a3, a4, a5, a6, a2))return 0;
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 96) + 112))(*(void *)(a1 + 96))) {
    uint64_t v12 = 1;
  }
  else {
    uint64_t v12 = (*(uint64_t (**)(void))(**(void **)(a1 + 96) + 40))(*(void *)(a1 + 96));
  }
  uint64_t v13 = *(void *)(a1 + 264);
  uint64_t v14 = *(void *)(a1 + 272);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v28 = *(void *)(a2 + 16);
  }
  uint64_t v15 = HIBYTE(v28);
  if (v13 != v14)
  {
    uint64_t v25 = v7;
    uint64_t v26 = v6;
    uint64_t v16 = __p[0];
    uint64_t v17 = __p[1];
    if (v28 >= 0) {
      unsigned __int8 v18 = (void *)HIBYTE(v28);
    }
    else {
      unsigned __int8 v18 = __p[1];
    }
    do
    {
      uint64_t v19 = (void *)*(unsigned __int8 *)(v13 + 479);
      int v20 = (char)v19;
      if ((char)v19 < 0) {
        uint64_t v19 = *(void **)(v13 + 464);
      }
      if (v18 == v19)
      {
        if (v20 >= 0) {
          int v21 = (unsigned __int8 *)(v13 + 456);
        }
        else {
          int v21 = *(unsigned __int8 **)(v13 + 456);
        }
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(v16, v21, (size_t)v17))
          {
            uint64_t v7 = v25;
            uint64_t v6 = v26;
            goto LABEL_30;
          }
        }
        else
        {
          if (!v15)
          {
            uint64_t v7 = v25;
            uint64_t v6 = v26;
            goto LABEL_31;
          }
          uint64_t v22 = __p;
          uint64_t v23 = v15;
          while (*(unsigned __int8 *)v22 == *v21)
          {
            uint64_t v22 = (void **)((char *)v22 + 1);
            ++v21;
            if (!--v23) {
              goto LABEL_28;
            }
          }
        }
      }
      v13 += 1248;
    }
    while (v13 != v14);
    uint64_t v13 = v14;
LABEL_28:
    uint64_t v7 = v25;
    uint64_t v6 = v26;
  }
  if ((v15 & 0x80) != 0) {
LABEL_30:
  }
    operator delete(__p[0]);
LABEL_31:
  if (v13 != *(void *)(a1 + 272))
  {
    if (*(unsigned char *)(v13 + 984) == 2
      && ((*(uint64_t (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 96) + 320))(*(void *)(a1 + 96), a3, a4, v7, v6) & 1) != 0)
    {
      return 1;
    }
    else if (*(unsigned char *)(v13 + 3))
    {
      return v12;
    }
    else
    {
      return 0;
    }
  }
  return v12;
}

BOOL sub_100C81AA8(uint64_t a1, uint64_t a2)
{
  long long v3 = *(unsigned __int8 **)(a1 + 264);
  long long v4 = *(unsigned __int8 **)(a1 + 272);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v16 = *(void *)(a2 + 16);
  }
  uint64_t v5 = HIBYTE(v16);
  if (v3 != v4)
  {
    uint64_t v7 = __p[0];
    uint64_t v6 = __p[1];
    if (v16 >= 0) {
      uint64_t v8 = (void *)HIBYTE(v16);
    }
    else {
      uint64_t v8 = __p[1];
    }
    do
    {
      uint64_t v9 = (void *)v3[479];
      int v10 = (char)v9;
      if ((char)v9 < 0) {
        uint64_t v9 = (void *)*((void *)v3 + 58);
      }
      if (v8 == v9)
      {
        if (v10 >= 0) {
          int v11 = v3 + 456;
        }
        else {
          int v11 = (unsigned __int8 *)*((void *)v3 + 57);
        }
        if ((v5 & 0x80) != 0)
        {
          if (!memcmp(v7, v11, (size_t)v6)) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!v5) {
            return v3 != *(unsigned __int8 **)(a1 + 272) && *v3 == 7;
          }
          uint64_t v12 = __p;
          uint64_t v13 = v5;
          while (*(unsigned __int8 *)v12 == *v11)
          {
            uint64_t v12 = (void **)((char *)v12 + 1);
            ++v11;
            if (!--v13) {
              goto LABEL_23;
            }
          }
        }
      }
      v3 += 1248;
    }
    while (v3 != v4);
    long long v3 = v4;
  }
LABEL_23:
  if ((v5 & 0x80) != 0) {
LABEL_24:
  }
    operator delete(__p[0]);
  return v3 != *(unsigned __int8 **)(a1 + 272) && *v3 == 7;
}

void sub_100C81BE0(uint64_t a1, long long **a2)
{
  uint64_t v2 = *a2;
  long long v3 = a2[1];
  if (*a2 != v3)
  {
    uint64_t v5 = *(void *)(a1 + 272);
    do
    {
      uint64_t v6 = *(void *)(a1 + 264);
      if (*((char *)v2 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)v2, *((void *)v2 + 1));
      }
      else
      {
        long long v7 = *v2;
        uint64_t v18 = *((void *)v2 + 2);
        *(_OWORD *)long long __p = v7;
      }
      uint64_t v8 = HIBYTE(v18);
      if (v6 != v5)
      {
        int v10 = __p[0];
        uint64_t v9 = __p[1];
        if (v18 >= 0) {
          int v11 = (void *)HIBYTE(v18);
        }
        else {
          int v11 = __p[1];
        }
        do
        {
          uint64_t v12 = (void *)*(unsigned __int8 *)(v6 + 479);
          int v13 = (char)v12;
          if ((char)v12 < 0) {
            uint64_t v12 = *(void **)(v6 + 464);
          }
          if (v11 == v12)
          {
            if (v13 >= 0) {
              uint64_t v14 = (unsigned __int8 *)(v6 + 456);
            }
            else {
              uint64_t v14 = *(unsigned __int8 **)(v6 + 456);
            }
            if ((v8 & 0x80) != 0)
            {
              if (!memcmp(v10, v14, (size_t)v9)) {
                goto LABEL_25;
              }
            }
            else
            {
              if (!v8) {
                goto LABEL_26;
              }
              uint64_t v15 = __p;
              uint64_t v16 = v8;
              while (*(unsigned __int8 *)v15 == *v14)
              {
                uint64_t v15 = (void **)((char *)v15 + 1);
                ++v14;
                if (!--v16)
                {
                  uint64_t v5 = v6;
                  goto LABEL_24;
                }
              }
            }
          }
          v6 += 1248;
        }
        while (v6 != v5);
      }
LABEL_24:
      uint64_t v6 = v5;
      if ((v8 & 0x80) != 0) {
LABEL_25:
      }
        operator delete(__p[0]);
LABEL_26:
      uint64_t v5 = *(void *)(a1 + 272);
      if (v6 != v5 && !*(unsigned char *)(v6 + 13)) {
        *(unsigned char *)(v6 + 13) = 1;
      }
      uint64_t v2 = (long long *)((char *)v2 + 24);
    }
    while (v2 != v3);
  }
}

void sub_100C81D3C(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = a1[33];
  uint64_t v4 = a1[34];
  if (v3 != v4)
  {
    uint64_t v6 = (os_log_t *)(a1 + 5);
    uint64_t v7 = v3 + 456;
    do
    {
      sub_100C81F24(__p, (unsigned __int8 *)v7, (unsigned __int8 *)(v7 + 24), a1[20], a1[21]);
      if (v19)
      {
        if (v18 < 0) {
          operator delete(*(void **)__p);
        }
        if (sub_1008A2280(v7 - 456, v6))
        {
          unint64_t v8 = a2[1];
          if (v8 >= a2[2])
          {
            uint64_t v9 = sub_10030E9EC(a2, (long long *)v7);
          }
          else
          {
            sub_1000D87F8(a2, (long long *)v7);
            uint64_t v9 = v8 + 24;
          }
          a2[1] = v9;
          goto LABEL_20;
        }
        os_log_t v14 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v15 = v7;
          if (*(char *)(v7 + 23) < 0) {
            uint64_t v15 = *(void *)v7;
          }
          *(_DWORD *)long long __p = 136315138;
          *(void *)&__p[4] = v15;
          uint64_t v12 = v14;
          int v13 = "#I Plan (%s) does not need status report";
LABEL_17:
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v13, __p, 0xCu);
        }
      }
      else
      {
        os_log_t v10 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v11 = v7;
          if (*(char *)(v7 + 23) < 0) {
            uint64_t v11 = *(void *)v7;
          }
          *(_DWORD *)long long __p = 136315138;
          *(void *)&__p[4] = v11;
          uint64_t v12 = v10;
          int v13 = "#I Plan (%s) is not available yet";
          goto LABEL_17;
        }
      }
LABEL_20:
      uint64_t v16 = v7 + 792;
      v7 += 1248;
    }
    while (v16 != v4);
  }
}

void sub_100C81F08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100C81F24(void *__dst, unsigned __int8 *a2, unsigned __int8 *a3, uint64_t a4, uint64_t a5)
{
  if (a4 == a5)
  {
LABEL_52:
    char v32 = 0;
    *(unsigned char *)long long __dst = 0;
    goto LABEL_53;
  }
  uint64_t v7 = a4;
  while (2)
  {
    if (*(_DWORD *)(v7 + 12) != 3) {
      goto LABEL_51;
    }
    if (!*(unsigned char *)(v7 + 80)) {
      goto LABEL_51;
    }
    uint64_t v10 = *(void *)(v7 + 56);
    uint64_t v11 = *(void *)(v7 + 64);
    if (v10 == v11) {
      goto LABEL_51;
    }
    do
    {
      uint64_t v12 = a2[23];
      if ((v12 & 0x80u) == 0) {
        uint64_t v13 = a2[23];
      }
      else {
        uint64_t v13 = *((void *)a2 + 1);
      }
      uint64_t v14 = *(unsigned __int8 *)(v10 + 39);
      int v15 = (char)v14;
      if ((v14 & 0x80u) != 0) {
        uint64_t v14 = *(void *)(v10 + 24);
      }
      if (v13 == v14)
      {
        if (v15 >= 0) {
          uint64_t v16 = (unsigned __int8 *)(v10 + 16);
        }
        else {
          uint64_t v16 = *(unsigned __int8 **)(v10 + 16);
        }
        if ((v12 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)a2, v16, *((void *)a2 + 1))) {
            goto LABEL_50;
          }
        }
        else
        {
          if (!a2[23]) {
            goto LABEL_50;
          }
          uint64_t v17 = a2;
          while (*v17 == *v16)
          {
            ++v17;
            ++v16;
            if (!--v12) {
              goto LABEL_50;
            }
          }
        }
      }
      sub_100CD7084(v10 + 16, (uint64_t)__p);
      uint64_t v18 = a3[23];
      if ((v18 & 0x80u) == 0) {
        char v19 = (void *)a3[23];
      }
      else {
        char v19 = (void *)*((void *)a3 + 1);
      }
      unint64_t v20 = v35;
      int v21 = (char)v35;
      if ((v35 & 0x80u) != 0) {
        unint64_t v20 = (unint64_t)__p[1];
      }
      if (v19 == (void *)v20)
      {
        if ((v35 & 0x80u) == 0) {
          uint64_t v22 = __p;
        }
        else {
          uint64_t v22 = (void **)__p[0];
        }
        if ((v18 & 0x80) != 0)
        {
          BOOL v31 = memcmp(*(const void **)a3, v22, *((void *)a3 + 1)) == 0;
          if ((v21 & 0x80000000) == 0) {
            goto LABEL_40;
          }
        }
        else if (a3[23])
        {
          uint64_t v23 = v18 - 1;
          uint64_t v24 = a3;
          do
          {
            int v26 = *v24++;
            int v25 = v26;
            int v28 = *(unsigned __int8 *)v22;
            uint64_t v22 = (void **)((char *)v22 + 1);
            int v27 = v28;
            BOOL v30 = v23-- != 0;
            BOOL v31 = v25 == v27;
          }
          while (v25 == v27 && v30);
          if (((char)v35 & 0x80000000) == 0)
          {
LABEL_40:
            if (v31) {
              goto LABEL_50;
            }
            goto LABEL_44;
          }
        }
        else
        {
          BOOL v31 = 1;
          if (((char)v35 & 0x80000000) == 0) {
            goto LABEL_40;
          }
        }
      }
      else
      {
        BOOL v31 = 0;
        if (((char)v35 & 0x80000000) == 0) {
          goto LABEL_40;
        }
      }
      operator delete(__p[0]);
      if (v31) {
        goto LABEL_50;
      }
LABEL_44:
      v10 += 216;
    }
    while (v10 != v11);
    uint64_t v10 = v11;
LABEL_50:
    if (v10 == *(void *)(v7 + 64))
    {
LABEL_51:
      v7 += 88;
      if (v7 == a5) {
        goto LABEL_52;
      }
      continue;
    }
    break;
  }
  if (*(char *)(v10 + 39) < 0)
  {
    sub_10004FC84(__dst, *(void **)(v10 + 16), *(void *)(v10 + 24));
  }
  else
  {
    long long v33 = *(_OWORD *)(v10 + 16);
    __dst[2] = *(void *)(v10 + 32);
    *(_OWORD *)long long __dst = v33;
  }
  char v32 = 1;
LABEL_53:
  *((unsigned char *)__dst + 24) = v32;
}

void sub_100C8214C(uint64_t *a1@<X0>, std::string *a2@<X8>)
{
  uint64_t v2 = a2;
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v3 = a1[33];
  uint64_t v4 = a1[34];
  if (v3 != v4)
  {
    uint64_t v6 = (os_log_t *)(a1 + 5);
    do
    {
      uint64_t v7 = (void **)(v3 + 456);
      sub_100C81F24(__p, (unsigned __int8 *)(v3 + 456), (unsigned __int8 *)(v3 + 480), a1[20], a1[21]);
      if (BYTE8(v30))
      {
        if (SBYTE7(v30) < 0) {
          operator delete(__p[0]);
        }
        if (sub_1008A2280(v3, v6))
        {
          unint64_t v8 = *v6;
          if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v3 + 479) < 0) {
              uint64_t v9 = *v7;
            }
            else {
              uint64_t v9 = (void *)(v3 + 456);
            }
            LODWORD(__p[0]) = 136315138;
            *(void **)((char *)__p + 4) = v9;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Plan (%s) needs status report", (uint8_t *)__p, 0xCu);
          }
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)long long v33 = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          *(_OWORD *)long long __p = 0u;
          long long v30 = 0u;
          sub_10004DE24((uint64_t)__p);
          uint64_t v11 = sub_10004B96C(__p, (uint64_t)"{kIccid=", 8);
          int v12 = *(char *)(v3 + 479);
          if (v12 >= 0) {
            uint64_t v13 = v3 + 456;
          }
          else {
            uint64_t v13 = *(void *)(v3 + 456);
          }
          if (v12 >= 0) {
            uint64_t v14 = *(unsigned __int8 *)(v3 + 479);
          }
          else {
            uint64_t v14 = *(void *)(v3 + 464);
          }
          int v15 = sub_10004B96C(v11, v13, v14);
          uint64_t v16 = sub_10004B96C(v15, (uint64_t)";kPhoneNumber=", 14);
          int v17 = *(char *)(v3 + 287);
          if (v17 >= 0) {
            uint64_t v18 = v3 + 264;
          }
          else {
            uint64_t v18 = *(void *)(v3 + 264);
          }
          if (v17 >= 0) {
            uint64_t v19 = *(unsigned __int8 *)(v3 + 287);
          }
          else {
            uint64_t v19 = *(void *)(v3 + 272);
          }
          unint64_t v20 = sub_10004B96C(v16, v18, v19);
          sub_10004B96C(v20, (uint64_t)"},", 2);
          sub_10004BC98((uint64_t)&__p[1], v27);
          if ((v28 & 0x80u) == 0) {
            int v21 = v27;
          }
          else {
            int v21 = (void **)v27[0];
          }
          if ((v28 & 0x80u) == 0) {
            std::string::size_type v22 = v28;
          }
          else {
            std::string::size_type v22 = (std::string::size_type)v27[1];
          }
          std::string::append(v2, (const std::string::value_type *)v21, v22);
          if ((char)v28 < 0) {
            operator delete(v27[0]);
          }
          __p[0] = v26;
          *(void **)((char *)__p + *((void *)v26 - 3)) = v25;
          if (SHIBYTE(v34) < 0) {
            operator delete(v33[1]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
        }
      }
      else
      {
        uint64_t v10 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(v3 + 479) < 0) {
            uint64_t v7 = (void **)*v7;
          }
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v7;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Plan (%s) is not available yet", (uint8_t *)__p, 0xCu);
        }
      }
      v3 += 1248;
    }
    while (v3 != v4);
    if (SHIBYTE(v2->__r_.__value_.__r.__words[2]) < 0)
    {
      std::string::size_type size = v2->__r_.__value_.__l.__size_;
      if (!size) {
        return;
      }
      uint64_t v23 = size - 1;
      v2->__r_.__value_.__l.__size_ = v23;
      uint64_t v2 = (std::string *)v2->__r_.__value_.__r.__words[0];
    }
    else
    {
      if (!*((unsigned char *)&v2->__r_.__value_.__s + 23)) {
        return;
      }
      uint64_t v23 = HIBYTE(v2->__r_.__value_.__r.__words[2]) - 1;
      *((unsigned char *)&v2->__r_.__value_.__s + 23) = v23;
    }
    v2->__r_.__value_.__s.__data_[v23] = 0;
  }
}

void sub_100C824F0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_1000C937C((uint64_t)&a22);
  if (*(char *)(v22 + 23) < 0) {
    operator delete(*(void **)v22);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C82540(uint64_t a1, uint64_t a2)
{
  return sub_100634518(a1 + 352, a2);
}

uint64_t sub_100C82548@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100C85E44(a2, a1 + 352);
}

void sub_100C82554(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 1112)) {
    BOOL v2 = *(unsigned char *)(a2 + 1017) == 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (!v2) {
    return;
  }
  uint64_t v5 = (long long *)(a2 + 456);
  sub_100C81F24(&buf, (unsigned __int8 *)(a2 + 456), (unsigned __int8 *)(a2 + 480), *(void *)(a1 + 160), *(void *)(a1 + 168));
  if (v35 && SHIBYTE(v34) < 0)
  {
    operator delete((void *)buf);
  }
  else if (!v35)
  {
    return;
  }
  if (!*(unsigned char *)(a2 + 1016))
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 256);
    if (v6)
    {
      uint64_t v7 = std::__shared_weak_count::lock(v6);
      if (v7)
      {
        uint64_t v8 = *(void *)(a1 + 248);
        if (v8)
        {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 72))(v8, a2 + 992);
          if (*(unsigned char *)(a2 + 1112))
          {
            if (*(char *)(a2 + 1015) < 0) {
              operator delete(*(void **)(a2 + 992));
            }
            *(unsigned char *)(a2 + 1112) = 0;
          }
LABEL_51:
          uint64_t v19 = v7;
LABEL_52:
          sub_10004D2C8(v19);
          return;
        }
      }
    }
    else
    {
      uint64_t v7 = 0;
    }
    unint64_t v20 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "delegate not available", (uint8_t *)&buf, 2u);
      if (!v7) {
        return;
      }
    }
    else if (!v7)
    {
      return;
    }
    goto LABEL_51;
  }
  uint64_t v31 = 0;
  long long v32 = 0;
  Registry::getTimerService(&v31, *(Registry **)(a1 + 80));
  if (v31)
  {
    long long buf = 0uLL;
    uint64_t v34 = 0;
    if (*(char *)(a2 + 479) < 0)
    {
      sub_10004FC84(&buf, *(void **)(a2 + 456), *(void *)(a2 + 464));
    }
    else
    {
      long long buf = *v5;
      uint64_t v34 = *((void *)v5 + 2);
    }
    uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v10 || (uint64_t v11 = *(void *)(a1 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v13 = v12;
    atomic_fetch_add_explicit(&v12->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v12);
    uint64_t v14 = v31;
    sub_100058DB0(__p, "Delay Transfer Sim Timestamps Metric Submission");
    int v15 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1174405120;
    aBlock[2] = sub_100C829B8;
    aBlock[3] = &unk_101A4C7F0;
    aBlock[4] = a1;
    aBlock[5] = v11;
    uint64_t v22 = v13;
    atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    if (SHIBYTE(v34) < 0)
    {
      sub_10004FC84(&v23, (void *)buf, *((unint64_t *)&buf + 1));
    }
    else
    {
      long long v23 = buf;
      uint64_t v24 = v34;
    }
    uint64_t v25 = a2;
    int v26 = _Block_copy(aBlock);
    sub_100118A44(v14, (uint64_t)__p, 1, 180000000, &object, &v26);
    uint64_t v16 = v30;
    uint64_t v30 = 0;
    uint64_t v17 = *(void *)(a1 + 296);
    *(void *)(a1 + 296) = v16;
    if (v17)
    {
      (*(void (**)(uint64_t))(*(void *)v17 + 8))(v17);
      uint64_t v18 = v30;
      uint64_t v30 = 0;
      if (v18) {
        (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
      }
    }
    if (v26) {
      _Block_release(v26);
    }
    if (object) {
      dispatch_release(object);
    }
    if (v29 < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete((void *)v23);
    }
    if (v22) {
      std::__shared_weak_count::__release_weak(v22);
    }
    std::__shared_weak_count::__release_weak(v13);
    if (SHIBYTE(v34) < 0) {
      operator delete((void *)buf);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "timer service not available", (uint8_t *)&buf, 2u);
    }
  }
  uint64_t v19 = v32;
  if (v32) {
    goto LABEL_52;
  }
}

void sub_100C8290C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,void *aBlock,dispatch_object_t object,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_10004D2C8(v31);
  _Unwind_Resume(a1);
}

void sub_100C829B8(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!*(void *)(a1 + 40))
      {
LABEL_101:
        sub_10004D2C8(v5);
        return;
      }
      uint64_t v6 = *(std::__shared_weak_count **)(v3 + 256);
      if (v6)
      {
        uint64_t v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          uint64_t v8 = *(void *)(v3 + 248);
          if (v8)
          {
            uint64_t v9 = *(void *)(v3 + 296);
            *(void *)(v3 + 296) = 0;
            if (v9) {
              (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
            }
            long long v42 = v7;
            uint64_t v10 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I 3min expiry, submit TransferTimestamps", buf, 2u);
            }
            uint64_t v11 = *(void *)(v3 + 264);
            uint64_t v12 = *(void *)(v3 + 272);
            if (*(char *)(a1 + 79) < 0)
            {
              sub_10004FC84(__p, *(void **)(a1 + 56), *(void *)(a1 + 64));
            }
            else
            {
              *(_OWORD *)long long __p = *(_OWORD *)(a1 + 56);
              uint64_t v44 = *(void *)(a1 + 72);
            }
            uint64_t v14 = HIBYTE(v44);
            if (v11 != v12)
            {
              int v15 = __p[0];
              uint64_t v16 = __p[1];
              if (v44 >= 0) {
                uint64_t v17 = (void *)HIBYTE(v44);
              }
              else {
                uint64_t v17 = __p[1];
              }
              do
              {
                uint64_t v18 = (void *)*(unsigned __int8 *)(v11 + 479);
                int v19 = (char)v18;
                if ((char)v18 < 0) {
                  uint64_t v18 = *(void **)(v11 + 464);
                }
                if (v17 == v18)
                {
                  if (v19 >= 0) {
                    unint64_t v20 = (unsigned __int8 *)(v11 + 456);
                  }
                  else {
                    unint64_t v20 = *(unsigned __int8 **)(v11 + 456);
                  }
                  if ((v14 & 0x80) != 0)
                  {
                    if (!memcmp(v15, v20, (size_t)v16)) {
                      goto LABEL_37;
                    }
                  }
                  else
                  {
                    if (!v14) {
                      goto LABEL_38;
                    }
                    int v21 = __p;
                    uint64_t v22 = v14;
                    while (*(unsigned __int8 *)v21 == *v20)
                    {
                      int v21 = (void **)((char *)v21 + 1);
                      ++v20;
                      if (!--v22) {
                        goto LABEL_36;
                      }
                    }
                  }
                }
                v11 += 1248;
              }
              while (v11 != v12);
              uint64_t v11 = v12;
            }
LABEL_36:
            if ((v14 & 0x80) != 0) {
LABEL_37:
            }
              operator delete(__p[0]);
LABEL_38:
            if (v11 == *(void *)(v3 + 272) || !*(unsigned char *)(v11 + 1112)) {
              goto LABEL_98;
            }
            *(unsigned char *)(v11 + 1017) = 1;
            (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 72))(v8, *(void *)(a1 + 80) + 992);
            long long v57 = 0u;
            long long v59 = 0u;
            long long v58 = 0u;
            long long v64 = 0u;
            long long v63 = 0u;
            memset(v61, 0, sizeof(v61));
            long long v60 = 0u;
            uint64_t v62 = 23;
            HIBYTE(v57) = 8;
            *(void *)long long buf = 0x72616C756C6C6543;
            BYTE7(v59) = 13;
            qmemcpy(&v58, "eSIM Transfer", 13);
            sub_10003ECB8((std::string *)((char *)&v59 + 8), "No service after 3 min timeout", 0x1EuLL);
            if (*(char *)(v11 + 263) >= 0) {
              size_t v23 = *(unsigned __int8 *)(v11 + 263);
            }
            else {
              size_t v23 = *(void *)(v11 + 248);
            }
            memset(&__dst, 0, sizeof(__dst));
            p_dst = &__dst;
            sub_1000C140C((uint64_t)&__dst, v23 + 1);
            if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
            }
            if (v23)
            {
              if (*(char *)(v11 + 263) >= 0) {
                uint64_t v25 = (const void *)(v11 + 240);
              }
              else {
                uint64_t v25 = *(const void **)(v11 + 240);
              }
              memmove(p_dst, v25, v23);
            }
            *(_WORD *)((char *)&p_dst->__r_.__value_.__l.__data_ + v23) = 32;
            if (v60 >= 0) {
              int v26 = (char *)&v59 + 8;
            }
            else {
              int v26 = (const std::string::value_type *)*((void *)&v59 + 1);
            }
            if (v60 >= 0) {
              std::string::size_type v27 = HIBYTE(v60);
            }
            else {
              std::string::size_type v27 = v60;
            }
            unsigned __int8 v28 = std::string::append(&__dst, v26, v27);
            char v29 = (void *)v28->__r_.__value_.__r.__words[0];
            *(void *)long long v65 = v28->__r_.__value_.__l.__size_;
            *(void *)&v65[7] = *(std::string::size_type *)((char *)&v28->__r_.__value_.__r.__words[1] + 7);
            char v30 = HIBYTE(v28->__r_.__value_.__r.__words[2]);
            v28->__r_.__value_.__l.__size_ = 0;
            v28->__r_.__value_.__r.__words[2] = 0;
            v28->__r_.__value_.__r.__words[0] = 0;
            if (SHIBYTE(v61[2]) < 0) {
              operator delete(v61[0]);
            }
            v61[0] = v29;
            v61[1] = *(void **)v65;
            *(void **)((char *)&v61[1] + 7) = *(void **)&v65[7];
            HIBYTE(v61[2]) = v30;
            if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__dst.__r_.__value_.__l.__data_);
            }
            v62 |= 3uLL;
            uint64_t v31 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I report Transfer Sim Service On Timeout.", (uint8_t *)&__dst, 2u);
            }
            (***(void (****)(Registry **__return_ptr))(v3 + 96))(&v54);
            ServiceMap = (std::mutex *)Registry::getServiceMap(v54);
            long long v33 = ServiceMap;
            if ((v34 & 0x8000000000000000) != 0)
            {
              char v35 = (unsigned __int8 *)(v34 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v36 = 5381;
              do
              {
                std::string::size_type v34 = v36;
                unsigned int v37 = *v35++;
                uint64_t v36 = (33 * v36) ^ v37;
              }
              while (v37);
            }
            std::mutex::lock(ServiceMap);
            __dst.__r_.__value_.__r.__words[0] = v34;
            long long v38 = sub_10004D37C(&v33[1].__m_.__sig, (unint64_t *)&__dst);
            if (v38)
            {
              uint64_t v40 = v38[3];
              long long v39 = (std::__shared_weak_count *)v38[4];
              if (v39)
              {
                atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
                std::mutex::unlock(v33);
                atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
                sub_10004D2C8(v39);
                char v41 = 0;
LABEL_70:
                sub_1000DB86C((char *)&__dst, (long long *)buf);
                uint64_t v66 = 0;
                (*(void (**)(uint64_t, std::string *, unsigned char *))(*(void *)v40 + 16))(v40, &__dst, v65);
                sub_1000DBADC(v65);
                if (v53 < 0) {
                  operator delete(v52);
                }
                if (v51 < 0) {
                  operator delete(v50);
                }
                if (v49 < 0) {
                  operator delete(v48);
                }
                if (v47 < 0) {
                  operator delete(v46);
                }
                if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(__dst.__r_.__value_.__l.__data_);
                }
                if ((v41 & 1) == 0) {
                  sub_10004D2C8(v39);
                }
                if (v55) {
                  sub_10004D2C8(v55);
                }
                if (SBYTE7(v64) < 0) {
                  operator delete((void *)v63);
                }
                if (SHIBYTE(v61[2]) < 0) {
                  operator delete(v61[0]);
                }
                if (SHIBYTE(v60) < 0) {
                  operator delete(*((void **)&v59 + 1));
                }
                if (SBYTE7(v59) < 0) {
                  operator delete((void *)v58);
                }
                if (SHIBYTE(v57) < 0) {
                  operator delete(*(void **)buf);
                }
                if (*(unsigned char *)(v11 + 1112))
                {
                  if (*(char *)(v11 + 1015) < 0) {
                    operator delete(*(void **)(v11 + 992));
                  }
                  *(unsigned char *)(v11 + 1112) = 0;
                }
LABEL_98:
                uint64_t v7 = v42;
LABEL_99:
                if (v7) {
                  sub_10004D2C8(v7);
                }
                goto LABEL_101;
              }
            }
            else
            {
              uint64_t v40 = 0;
            }
            std::mutex::unlock(v33);
            long long v39 = 0;
            char v41 = 1;
            goto LABEL_70;
          }
        }
      }
      else
      {
        uint64_t v7 = 0;
      }
      uint64_t v13 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
      }
      goto LABEL_99;
    }
  }
}

void sub_100C82FE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,std::__shared_weak_count *a37,char a38)
{
  sub_1000DBADC((void *)(v41 - 136));
  sub_1001278A0((uint64_t)&__p);
  if ((v40 & 1) == 0) {
    sub_10004D2C8(v39);
  }
  if (a37) {
    sub_10004D2C8(a37);
  }
  sub_1001278A0((uint64_t)&a38);
  sub_10004D2C8(a10);
  sub_10004D2C8(v38);
  _Unwind_Resume(a1);
}

unsigned char *sub_100C83084(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)__n128 result = v5;
  return result;
}

void sub_100C830EC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C83104(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100C83158(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C83238(uint64_t a1)
{
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (!v2) {
    return;
  }
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v4 = std::__shared_weak_count::lock(v2);
  if (!v4) {
    return;
  }
  long long v5 = v4;
  if (!*(void *)(a1 + 40)) {
    goto LABEL_71;
  }
  uint64_t v6 = v3[33];
  uint64_t v7 = v3[34];
  if (*(char *)(a1 + 79) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a1 + 56), *(void *)(a1 + 64));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 56);
    uint64_t v39 = *(void *)(a1 + 72);
  }
  uint64_t v8 = (_OWORD *)(a1 + 80);
  if (*(char *)(a1 + 103) < 0)
  {
    sub_10004FC84(&__p, *(void **)(a1 + 80), *(void *)(a1 + 88));
  }
  else
  {
    long long __p = *v8;
    uint64_t v41 = *(void *)(a1 + 96);
  }
  if (v6 == v7)
  {
    if (v41 < 0) {
      goto LABEL_50;
    }
    goto LABEL_51;
  }
  unsigned int v37 = v5;
  uint64_t v9 = HIBYTE(v39);
  char v35 = __dst[0];
  uint64_t v36 = __dst[1];
  if (v39 >= 0) {
    uint64_t v10 = (void *)HIBYTE(v39);
  }
  else {
    uint64_t v10 = __dst[1];
  }
  int v11 = SHIBYTE(v41);
  long long v33 = __p;
  uint64_t v34 = HIBYTE(v41);
  if (v41 >= 0) {
    uint64_t v12 = HIBYTE(v41);
  }
  else {
    uint64_t v12 = *((void *)&__p + 1);
  }
  do
  {
    int v13 = *(char *)(v6 + 503);
    if (v13 >= 0) {
      unint64_t v14 = *(unsigned __int8 *)(v6 + 503);
    }
    else {
      unint64_t v14 = *(void *)(v6 + 488);
    }
    if (v10 == (void *)v14)
    {
      if (v13 >= 0) {
        int v15 = (unsigned __int8 *)(v6 + 480);
      }
      else {
        int v15 = *(unsigned __int8 **)(v6 + 480);
      }
      if ((v9 & 0x80) != 0)
      {
        if (!memcmp(v35, v15, (size_t)v36)) {
          goto LABEL_49;
        }
      }
      else
      {
        if (!v9) {
          goto LABEL_49;
        }
        uint64_t v16 = __dst;
        uint64_t v17 = v9;
        while (*(unsigned __int8 *)v16 == *v15)
        {
          uint64_t v16 = (void **)((char *)v16 + 1);
          ++v15;
          if (!--v17) {
            goto LABEL_49;
          }
        }
      }
    }
    uint64_t v18 = *(unsigned __int8 *)(v6 + 263);
    int v19 = (char)v18;
    if ((v18 & 0x80u) != 0) {
      uint64_t v18 = *(void *)(v6 + 248);
    }
    if (v12 == v18)
    {
      if (v19 >= 0) {
        unint64_t v20 = (unsigned __int8 *)(v6 + 240);
      }
      else {
        unint64_t v20 = *(unsigned __int8 **)(v6 + 240);
      }
      if (v11 < 0)
      {
        if (memcmp((const void *)v33, v20, *((size_t *)&v33 + 1))) {
          goto LABEL_47;
        }
      }
      else if (v11)
      {
        uint64_t p_p = &__p;
        uint64_t v22 = v34;
        while (*(unsigned __int8 *)p_p == *v20)
        {
          uint64_t p_p = (long long *)((char *)p_p + 1);
          ++v20;
          if (!--v22) {
            goto LABEL_44;
          }
        }
        goto LABEL_47;
      }
LABEL_44:
      uint64_t v23 = *(unsigned __int8 *)(v6 + 455);
      if ((v23 & 0x80u) != 0) {
        uint64_t v23 = *(void *)(v6 + 440);
      }
      if (!(v23 | v14)) {
        goto LABEL_49;
      }
    }
LABEL_47:
    v6 += 1248;
  }
  while (v6 != v7);
  uint64_t v6 = v7;
LABEL_49:
  uint64_t v8 = (_OWORD *)(a1 + 80);
  long long v5 = v37;
  if ((v11 & 0x80) != 0) {
LABEL_50:
  }
    operator delete((void *)__p);
LABEL_51:
  if (SHIBYTE(v39) < 0) {
    operator delete(__dst[0]);
  }
  uint64_t v24 = (long long *)v3[34];
  if ((long long *)v6 != v24)
  {
    if (*(unsigned char *)(a1 + 104))
    {
      uint64_t v25 = v3[5];
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        int v26 = v8;
        if (*(char *)(a1 + 103) < 0) {
          int v26 = *(_OWORD **)v8;
        }
        *(_DWORD *)long long buf = 136315138;
        long long v43 = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I deleting pending plan carrier (%s) after timeout", buf, 0xCu);
        uint64_t v24 = (long long *)v3[34];
      }
      uint64_t v27 = sub_100C85CCC((long long *)(v6 + 1248), v24, v6);
      for (uint64_t i = v3[34]; i != v27; uint64_t i = sub_10030D10C(i - 1248))
        ;
      v3[34] = v27;
      char v29 = (std::__shared_weak_count *)v3[32];
      if (v29)
      {
        char v30 = std::__shared_weak_count::lock(v29);
        if (v30)
        {
          uint64_t v31 = v30;
          uint64_t v32 = v3[31];
          if (v32) {
            (*(void (**)(uint64_t, _OWORD *))(*(void *)v32 + 64))(v32, v8);
          }
          sub_10004D2C8(v31);
        }
      }
    }
    else
    {
      sub_100C7949C((uint64_t)v3, v6, 0xDu);
    }
    sub_100C7AAE8((uint64_t)v3);
  }
LABEL_71:
  sub_10004D2C8(v5);
}

void sub_100C835B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_10004D2C8(v23);
  sub_10004D2C8(v22);
  _Unwind_Resume(a1);
}

unsigned char *sub_100C835EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 4sub_10023C164((uint64_t)&a9, 0) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v5;
  }
  __n128 result = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  long long v7 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)__n128 result = v7;
  return result;
}

void sub_100C8368C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_100C836BC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100C83720(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100C83878(uint64_t a1, uint64_t a2)
{
}

void sub_100C83880(uint64_t a1)
{
}

BOOL sub_100C83888(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  if (v3)
  {
    unint64_t v20 = 0;
    CFIndex v5 = a2[2];
    if (v5)
    {
      CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, v5, &kCFTypeArrayCallBacks);
      if (Mutable)
      {
        long long v7 = v20;
        unint64_t v20 = Mutable;
        __p[0] = v7;
        sub_1000440D4((const void **)__p);
      }
      uint64_t v10 = (void *)*a2;
      uint64_t v8 = a2 + 1;
      uint64_t v9 = v10;
      if (v10 != v8)
      {
        do
        {
          int v19 = 0;
          if (*((char *)v9 + 55) < 0)
          {
            sub_10004FC84(v17, (void *)v9[4], v9[5]);
          }
          else
          {
            *(_OWORD *)uint64_t v17 = *((_OWORD *)v9 + 2);
            uint64_t v18 = v9[6];
          }
          if (SHIBYTE(v18) < 0)
          {
            sub_10004FC84(__dst, v17[0], (unint64_t)v17[1]);
          }
          else
          {
            *(_OWORD *)std::string __dst = *(_OWORD *)v17;
            uint64_t v23 = v18;
          }
          int v21 = 0;
          if (SHIBYTE(v23) < 0)
          {
            sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
          }
          else
          {
            *(_OWORD *)long long __p = *(_OWORD *)__dst;
            uint64_t v25 = v23;
          }
          int v26 = 0;
          if (ctu::cf::convert_copy())
          {
            int v11 = v21;
            int v21 = v26;
            uint64_t v27 = v11;
            sub_1000558F4(&v27);
          }
          if (SHIBYTE(v25) < 0) {
            operator delete(__p[0]);
          }
          int v19 = v21;
          int v21 = 0;
          sub_1000558F4(&v21);
          if (SHIBYTE(v23) < 0) {
            operator delete(__dst[0]);
          }
          if (SHIBYTE(v18) < 0) {
            operator delete(v17[0]);
          }
          CFArrayAppendValue(v20, v19);
          sub_1000558F4(&v19);
          uint64_t v12 = (void *)v9[1];
          if (v12)
          {
            do
            {
              int v13 = v12;
              uint64_t v12 = (void *)*v12;
            }
            while (v12);
          }
          else
          {
            do
            {
              int v13 = (void *)v9[2];
              BOOL v14 = *v13 == (void)v9;
              uint64_t v9 = v13;
            }
            while (!v14);
          }
          uint64_t v9 = v13;
        }
        while (v13 != v8);
      }
    }
    (*(void (**)(void, const __CFString *, __CFArray *, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 8) + 16))(*(void *)(a1 + 8), @"kExpiredPlans", v20, @"com.apple.commcenter.cellular_plan", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    (*(void (**)(void, const __CFString *, const CFStringRef, const CFStringRef))(**(void **)(a1 + 8)
                                                                                             + 48))(*(void *)(a1 + 8), @"com.apple.commcenter.cellular_plan", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
    sub_1000440D4((const void **)&v20);
  }
  else
  {
    int v15 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "invalid preferences", (uint8_t *)__p, 2u);
    }
  }
  return v3 != 0;
}

void sub_100C83B48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, int a16, const void *a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

void sub_100C83BC0(uint64_t a1, __int16 a2, const void **a3, uint64_t a4)
{
  uint64_t v4 = a3;
  if ((_BYTE)a2) {
    BOOL v6 = (a2 & 0xFF00) != 0;
  }
  else {
    BOOL v6 = 0;
  }
  uint64_t v8 = *(void *)(a1 + 264);
  uint64_t v7 = *(void *)(a1 + 272);
  if (v8 != v7)
  {
    while (1)
    {
      uint64_t v9 = *(void *)(v8 + 1192);
      if (v9 && v9 == a4) {
        break;
      }
      uint64_t v11 = *(void *)(v8 + 1176);
      if (v11 && v11 == a4) {
        break;
      }
      uint64_t v13 = *(void *)(v8 + 1208);
      if (v13 && v13 == a4) {
        break;
      }
      v8 += 1248;
      if (v8 == v7) {
        goto LABEL_38;
      }
    }
  }
  if (v8 == v7)
  {
LABEL_38:
    uint64_t v23 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I No pending plan found for any monitor mode", buf, 2u);
    }
    return;
  }
  int v15 = (void *)(v8 + 1176);
  if (*(void *)(v8 + 1192) == a4)
  {
    uint64_t v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v25 = "False";
      uint64_t v26 = *(void *)(v8 + 240);
      if (v6) {
        uint64_t v25 = "True";
      }
      uint64_t v27 = *(void *)(v8 + 432);
      int v28 = *(char *)(v8 + 263);
      if (*(char *)(v8 + 455) >= 0) {
        uint64_t v27 = v8 + 432;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v25;
      if (v28 >= 0) {
        uint64_t v29 = v8 + 240;
      }
      else {
        uint64_t v29 = v26;
      }
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v27;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&long long __p = v29;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I recovery monitor mode completed with status: %s for sourceIccid: %s carrierName: %s", buf, 0x20u);
    }
    if (!v6) {
      goto LABEL_90;
    }
    (***(void (****)(unsigned char *__return_ptr))(a1 + 96))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap(v30, *(Registry **)buf);
    uint64_t v32 = ServiceMap;
    if (v33 < 0)
    {
      uint64_t v34 = (unsigned __int8 *)(v33 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v35 = 5381;
      do
      {
        uint64_t v33 = v35;
        unsigned int v36 = *v34++;
        uint64_t v35 = (33 * v35) ^ v36;
      }
      while (v36);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long v87 = v33;
    unsigned int v37 = sub_10004D37C(&v32[1].__m_.__sig, (unint64_t *)&v87);
    if (v37)
    {
      uint64_t v39 = v37[3];
      long long v38 = (std::__shared_weak_count *)v37[4];
      if (v38)
      {
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v32);
        atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v38);
        char v40 = 0;
LABEL_80:
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v39) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v39 + 24))(v39, 3);
        }
        if ((v40 & 1) == 0) {
          sub_10004D2C8(v38);
        }
        buf[0] = 0;
        LOBYTE(__p) = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 112))(a1, v8 + 432, 12, buf);
        if ((_BYTE)__p && (buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        sub_100C82554(a1, v8);
LABEL_90:
        uint64_t v50 = *(std::__shared_weak_count **)(v8 + 1200);
        *(void *)(v8 + 1192) = 0;
        *(void *)(v8 + 120sub_10023C164((uint64_t)&a9, 0) = 0;
        if (v50) {
          sub_10004D2C8(v50);
        }
        *(unsigned char *)(v8 + 1225) = 0;
        if (*(unsigned char *)(v8 + 1152) && *(double *)(v8 + 1128) > 0.0)
        {
          char v51 = *(std::__shared_weak_count **)(a1 + 256);
          if (v51)
          {
            size_t v52 = std::__shared_weak_count::lock(v51);
            if (v52)
            {
              char v53 = v52;
              uint64_t v54 = *(void *)(a1 + 248);
              if (v54)
              {
                CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
                (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, unint64_t, uint64_t))(*(void *)v54 + 136))(v54, 5, v8 + 240, v6, (unint64_t)(Current - *(double *)(v8 + 1128)), v8 + 456);
              }
              sub_10004D2C8(v53);
            }
          }
          *(void *)(v8 + 1128) = 0;
        }
LABEL_100:
        sub_100C7AAE8(a1);
      }
    }
    else
    {
      uint64_t v39 = 0;
    }
    std::mutex::unlock(v32);
    long long v38 = 0;
    char v40 = 1;
    goto LABEL_80;
  }
  if (*v15 != a4)
  {
    if (*(void *)(v8 + 1208) != a4) {
      return;
    }
    uint64_t v16 = *(unsigned __int8 *)(v8 + 455);
    if ((v16 & 0x80u) == 0) {
      uint64_t v17 = (const void *)*(unsigned __int8 *)(v8 + 455);
    }
    else {
      uint64_t v17 = *(const void **)(v8 + 440);
    }
    uint64_t v18 = (const void *)*((unsigned __int8 *)a3 + 23);
    int v19 = (char)v18;
    if ((char)v18 < 0) {
      uint64_t v18 = a3[1];
    }
    if (v17 != v18) {
      return;
    }
    unint64_t v20 = (const void **)(v8 + 432);
    if (v19 >= 0) {
      int v21 = (unsigned __int8 *)a3;
    }
    else {
      int v21 = (unsigned __int8 *)*a3;
    }
    if ((v16 & 0x80) != 0)
    {
      if (memcmp(*v20, v21, *(void *)(v8 + 440))) {
        return;
      }
    }
    else if (*(unsigned char *)(v8 + 455))
    {
      uint64_t v22 = v21;
      while (*(unsigned __int8 *)v20 == *v22)
      {
        unint64_t v20 = (const void **)((char *)v20 + 1);
        ++v22;
        if (!--v16) {
          goto LABEL_126;
        }
      }
      return;
    }
LABEL_126:
    if (v6)
    {
      long long v68 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "True";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v21;
        _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#I retry transfer monitor mode completed with status: %s for sourceIccid: %s", buf, 0x16u);
      }
      long long v69 = *(std::__shared_weak_count **)(v8 + 1216);
      *(void *)(v8 + 1208) = 0;
      *(void *)(v8 + 1216) = 0;
      if (v69) {
        sub_10004D2C8(v69);
      }
      *(unsigned char *)(v8 + 1226) = 1;
      *(unsigned char *)(v8 + 18) = 0;
      long long v70 = *(std::__shared_weak_count **)(v8 + 1240);
      *(_OWORD *)(v8 + 1232) = 0u;
      if (v70) {
        sub_10004D2C8(v70);
      }
      if (*(unsigned char *)(v8 + 1152) && *(double *)(v8 + 1136) > 0.0)
      {
        long long v71 = *(std::__shared_weak_count **)(a1 + 256);
        if (v71)
        {
          long long v72 = std::__shared_weak_count::lock(v71);
          if (v72)
          {
            long long v73 = v72;
            uint64_t v74 = *(void *)(a1 + 248);
            if (v74)
            {
              CFAbsoluteTime v75 = CFAbsoluteTimeGetCurrent();
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, unint64_t, uint64_t))(*(void *)v74 + 136))(v74, 5, v8 + 240, 1, (unint64_t)(v75 - *(double *)(v8 + 1136)), v8 + 456);
            }
            sub_10004D2C8(v73);
          }
        }
        *(void *)(v8 + 1136) = 0;
      }
      goto LABEL_100;
    }
    uint64_t v95 = 0;
    long long v96 = 0;
    Registry::getTimerService(&v95, *(Registry **)(a1 + 80));
    uint64_t v76 = v95;
    if (v95)
    {
      sub_100058DB0(v92, "cp.mm.ret.tr unsuccessful timer");
      *(void *)&long long v87 = a1;
      unint64_t v77 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v77 || (uint64_t v78 = *(void *)(a1 + 8), (v79 = std::__shared_weak_count::lock(v77)) == 0)) {
        sub_100088B9C();
      }
      *((void *)&v87 + 1) = v78;
      long long v88 = v79;
      atomic_fetch_add_explicit(&v79->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v79);
      if (*((char *)v4 + 23) < 0)
      {
        sub_10004FC84(&v89, (void *)*v4, (unint64_t)v4[1]);
      }
      else
      {
        long long v89 = *(_OWORD *)v4;
        std::string v90 = v4[2];
      }
      BOOL v91 = v6;
      *(_OWORD *)xpc_object_t v97 = *(_OWORD *)v92;
      uint64_t v98 = v93;
      v92[0] = 0;
      v92[1] = 0;
      uint64_t v93 = 0;
      *(_OWORD *)long long buf = v87;
      *(void *)&uint8_t buf[16] = v88;
      *((void *)&v87 + 1) = 0;
      long long v88 = 0;
      if (SHIBYTE(v90) < 0)
      {
        sub_10004FC84(&__p, (void *)v89, *((unint64_t *)&v89 + 1));
        BOOL v83 = v91;
      }
      else
      {
        BOOL v83 = 0;
        long long __p = v89;
        long long v101 = v90;
      }
      BOOL v102 = v83;
      unsigned int v104 = 0;
      long long v84 = (char *)operator new(0x40uLL);
      *(void *)long long v84 = off_101A4CF40;
      *(_OWORD *)(v84 + 8) = *(_OWORD *)buf;
      *((void *)v84 + 3) = *(void *)&buf[16];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      long long v85 = v84 + 32;
      if (SHIBYTE(v101) < 0)
      {
        sub_10004FC84(v85, (void *)__p, *((unint64_t *)&__p + 1));
        BOOL v83 = v102;
      }
      else
      {
        *(_OWORD *)long long v85 = __p;
        *((void *)v84 + 6) = v101;
      }
      v84[56] = v83;
      unsigned int v104 = v84;
      (*(void (**)(uint64_t *__return_ptr, uint64_t, void **, void, uint64_t, void, void *))(*(void *)v76 + 40))(&v94, v76, v97, 0, 120000000, 0, v103);
      sub_10003B34C(v103);
      if (SHIBYTE(v101) < 0) {
        operator delete((void *)__p);
      }
      if (*(void *)&buf[16]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[16]);
      }
      if (SHIBYTE(v98) < 0) {
        operator delete(v97[0]);
      }
      sub_1004DC2E0((void *)(v8 + 1232), &v94);
      uint64_t v86 = v94;
      uint64_t v94 = 0;
      if (v86) {
        (*(void (**)(uint64_t))(*(void *)v86 + 8))(v86);
      }
      if (SHIBYTE(v90) < 0) {
        operator delete((void *)v89);
      }
      if (v88) {
        std::__shared_weak_count::__release_weak(v88);
      }
      if (SHIBYTE(v93) < 0) {
        operator delete(v92[0]);
      }
    }
    else
    {
      std::string v82 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v82, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_ERROR, "timer service not available", buf, 2u);
      }
    }
    std::string v81 = v96;
    if (!v96) {
      return;
    }
LABEL_174:
    sub_10004D2C8(v81);
    return;
  }
  uint64_t v41 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    long long v42 = "False";
    if (v6) {
      long long v42 = "True";
    }
    if (*((char *)v4 + 23) >= 0) {
      long long v43 = v4;
    }
    else {
      long long v43 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v42;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v43;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I delay provisioning monitor mode completed with status: %s for targetIccid: %s", buf, 0x16u);
  }
  uint64_t v44 = *(unsigned __int8 *)(v8 + 479);
  if ((v44 & 0x80u) == 0) {
    uint64_t v45 = (const void *)*(unsigned __int8 *)(v8 + 479);
  }
  else {
    uint64_t v45 = *(const void **)(v8 + 464);
  }
  long long v46 = (const void *)*((unsigned __int8 *)v4 + 23);
  int v47 = (char)v46;
  if ((char)v46 < 0) {
    long long v46 = v4[1];
  }
  if (v45 != v46) {
    return;
  }
  if (v47 >= 0) {
    uint64_t v48 = (unsigned __int8 *)v4;
  }
  else {
    uint64_t v48 = (unsigned __int8 *)*v4;
  }
  if ((v44 & 0x80) != 0)
  {
    if (memcmp(*(const void **)(v8 + 456), v48, *(void *)(v8 + 464))) {
      return;
    }
LABEL_103:
    uint64_t v56 = *(std::__shared_weak_count **)(v8 + 1184);
    void *v15 = 0;
    *(void *)(v8 + 1184) = 0;
    if (v56) {
      sub_10004D2C8(v56);
    }
    *(unsigned char *)(v8 + 1224) = 1;
    if (v6) {
      goto LABEL_106;
    }
    uint64_t v62 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v62, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)v4 + 23) < 0) {
        uint64_t v4 = (const void **)*v4;
      }
      long long v63 = sub_1008A2228(*(unsigned __int8 *)(v8 + 1));
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = v4;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v63;
      _os_log_impl((void *)&_mh_execute_header, v62, OS_LOG_TYPE_DEFAULT, "#I Setting display state of plan with target iccid: %s to %s", buf, 0x16u);
    }
    uint64_t v64 = *(unsigned __int8 *)(v8 + 1);
    buf[0] = 0;
    LOBYTE(__p) = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)a1 + 112))(a1, v8 + 432, v64, buf);
    if ((_BYTE)__p && (buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    *(unsigned char *)(v8 + 2) = 1;
    long long v65 = *(std::__shared_weak_count **)(a1 + 256);
    if (v65)
    {
      uint64_t v66 = std::__shared_weak_count::lock(v65);
      if (v66)
      {
        uint64_t v67 = *(void *)(a1 + 248);
        if (v67)
        {
          (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)v67 + 104))(v67, 0, v8 + 240, v8 + 264);
          sub_10004D2C8(v66);
LABEL_106:
          if (*(unsigned char *)(v8 + 1152) && *(double *)(v8 + 1120) > 0.0)
          {
            long long v57 = *(std::__shared_weak_count **)(a1 + 256);
            if (v57)
            {
              long long v58 = std::__shared_weak_count::lock(v57);
              if (v58)
              {
                long long v59 = v58;
                uint64_t v60 = *(void *)(a1 + 248);
                if (v60)
                {
                  CFAbsoluteTime v61 = CFAbsoluteTimeGetCurrent();
                  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, unint64_t, uint64_t))(*(void *)v60 + 136))(v60, 2, v8 + 240, v6, (unint64_t)(v61 - *(double *)(v8 + 1120)), v8 + 456);
                }
                sub_10004D2C8(v59);
              }
            }
            *(void *)(v8 + 112sub_10023C164((uint64_t)&a9, 0) = 0;
          }
          goto LABEL_100;
        }
      }
    }
    else
    {
      uint64_t v66 = 0;
    }
    uint64_t v80 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v80, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v80, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
      if (!v66) {
        return;
      }
    }
    else if (!v66)
    {
      return;
    }
    std::string v81 = v66;
    goto LABEL_174;
  }
  if (!*(unsigned char *)(v8 + 479)) {
    goto LABEL_103;
  }
  char v49 = (unsigned __int8 *)(v8 + 456);
  while (*v49 == *v48)
  {
    ++v49;
    ++v48;
    if (!--v44) {
      goto LABEL_103;
    }
  }
}

void sub_100C84704(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,std::__shared_weak_count *a35,char a36)
{
  sub_10004D2C8(v36);
  _Unwind_Resume(a1);
}

void sub_100C84864(uint64_t a1, __int16 a2, const void **a3, uint64_t a4)
{
}

void sub_100C84870(uint64_t a1, __int16 a2, const void **a3, uint64_t a4)
{
}

void sub_100C8487C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 256);
  if (!v3)
  {
    CFIndex v5 = 0;
LABEL_16:
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    LOWORD(v18) = 0;
    BOOL v14 = "delegate not available";
LABEL_31:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&v18, 2u);
    goto LABEL_17;
  }
  CFIndex v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_16;
  }
  uint64_t v6 = *(void *)(a1 + 248);
  if (!v6) {
    goto LABEL_16;
  }
  uint64_t v7 = *(void *)(a1 + 264);
  uint64_t v8 = *(void *)(a1 + 272);
  if (v7 == v8) {
    goto LABEL_20;
  }
  do
  {
    sub_10030DDAC((uint64_t)&v18, (long long *)v7);
    uint64_t v9 = v22;
    if (v22)
    {
      sub_10030D10C((uint64_t)&v18);
      if (v9 == a2) {
        goto LABEL_11;
      }
    }
    else
    {
      sub_10030D10C((uint64_t)&v18);
    }
    v7 += 1248;
  }
  while (v7 != v8);
  uint64_t v7 = v8;
LABEL_11:
  if (v7 == *(void *)(a1 + 272))
  {
LABEL_20:
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_17;
    }
    LOWORD(v18) = 0;
    BOOL v14 = "pending transfer plan not found";
    goto LABEL_31;
  }
  int v10 = *(unsigned __int8 *)(v7 + 2);
  uint64_t v11 = *(NSObject **)(a1 + 40);
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10 == 10)
  {
    if (v12)
    {
      LOWORD(v18) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Pending plan already undergoing installation. Skipping recovery monitor mode attempt", (uint8_t *)&v18, 2u);
    }
  }
  else
  {
    if (v12)
    {
      int v15 = (void *)(v7 + 432);
      if (*(char *)(v7 + 455) < 0) {
        int v15 = (void *)*v15;
      }
      uint64_t v16 = (void *)(v7 + 240);
      if (*(char *)(v7 + 263) < 0) {
        uint64_t v16 = (void *)*v16;
      }
      int v18 = 136315394;
      int v19 = v15;
      __int16 v20 = 2080;
      int v21 = v16;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Attempting recovery installation of plan with sourceIccid:(%s) carrierName:(%s) using recovery monitor mode", (uint8_t *)&v18, 0x16u);
    }
    if (*(unsigned char *)(v7 + 19)) {
      uint64_t v17 = 1;
    }
    else {
      uint64_t v17 = (*(unsigned int (**)(void, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(a1 + 96)
    }
                                                                                                + 976))(*(void *)(a1 + 96), v7 + 24, v7 + 48, v7 + 72, v7 + 96, v7 + 432) ^ 1;
    (*(void (**)(uint64_t, uint64_t, void, uint64_t, uint64_t))(*(void *)v6 + 40))(v6, v7, 0, v17, 1);
  }
LABEL_17:
  if (v5) {
    sub_10004D2C8(v5);
  }
}

void sub_100C84B1C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100C84B34(uint64_t a1, uint64_t a2)
{
}

void sub_100C84B3C(void *a1, char *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[32];
  if (v3)
  {
    CFIndex v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = a1[31];
      if (v6)
      {
        bzero(buf, 0x4E8uLL);
        (*(void (**)(uint8_t *__return_ptr, void *, char *))(*a1 + 168))(buf, a1, a2);
        if (v25)
        {
          int v7 = buf[1];
          int v8 = buf[2];
          uint64_t v9 = a1[5];
          BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
          if (v7 == 12 || v8 == 10)
          {
            if (v10)
            {
              int v15 = sub_1008A2228(v7);
              uint64_t v16 = sub_1008A2228(v8);
              if (a2[23] >= 0) {
                uint64_t v17 = a2;
              }
              else {
                uint64_t v17 = *(char **)a2;
              }
              int v18 = 136315650;
              int v19 = v15;
              __int16 v20 = 2080;
              int v21 = v16;
              __int16 v22 = 2080;
              uint64_t v23 = v17;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Not attempting installation of plan with terminal state:%s, display state:%s using provisioning monitor mode for target iccid: %s", (uint8_t *)&v18, 0x20u);
            }
          }
          else
          {
            if (v10)
            {
              if (a2[23] >= 0) {
                uint64_t v11 = a2;
              }
              else {
                uint64_t v11 = *(const char **)a2;
              }
              int v18 = 136315138;
              int v19 = v11;
              _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Attempting installation of plan with targetIccid:%s using monitor mode", (uint8_t *)&v18, 0xCu);
              if (!v25) {
                sub_10016C840();
              }
              int v7 = buf[1];
            }
            (*(void (**)(uint64_t, uint8_t *, void, BOOL, uint64_t))(*(void *)v6 + 40))(v6, buf, 0, v7 == 9, 1);
          }
        }
        else
        {
          uint64_t v13 = a1[5];
          if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
          {
            if (a2[23] >= 0) {
              BOOL v14 = a2;
            }
            else {
              BOOL v14 = *(const char **)a2;
            }
            int v18 = 136315138;
            int v19 = v14;
            _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No pending plan with targetIccid: %s", (uint8_t *)&v18, 0xCu);
          }
        }
        if (v25) {
          sub_10030D10C((uint64_t)buf);
        }
        goto LABEL_30;
      }
    }
  }
  else
  {
    CFIndex v5 = 0;
  }
  BOOL v12 = a1[5];
  if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
  {
    if (!v5) {
      return;
    }
LABEL_30:
    sub_10004D2C8(v5);
    return;
  }
  *(_WORD *)long long buf = 0;
  _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
  if (v5) {
    goto LABEL_30;
  }
}

void sub_100C84E04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x500])) {
    sub_10030D10C((uint64_t)va);
  }
  sub_10004D2C8(v5);
  _Unwind_Resume(a1);
}

void sub_100C84E30(uint64_t a1, char *a2)
{
}

void sub_100C84E38(void *a1, char *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[32];
  if (v3)
  {
    CFIndex v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      uint64_t v6 = a1[31];
      if (v6)
      {
        bzero(buf, 0x4E8uLL);
        (*(void (**)(uint8_t *__return_ptr, void *, char *))(*a1 + 168))(buf, a1, a2);
        if (v34)
        {
          int v7 = buf[1];
          int v8 = buf[2];
          if (buf[1] == 11 && buf[2] != 10)
          {
            uint64_t v9 = v33;
            BOOL v10 = a1[5];
            BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
            if (v9)
            {
              if (v11)
              {
                BOOL v12 = (const char *)&v31;
                if (v32 < 0) {
                  BOOL v12 = v31;
                }
                int v24 = 136315138;
                char v25 = v12;
                _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Not starting retry monitor mode for plan with recovery delay provisioning monitor mode ongoing. sourceIccid: %s", (uint8_t *)&v24, 0xCu);
              }
            }
            else
            {
              if (v11)
              {
                uint64_t v23 = a2[23] >= 0 ? a2 : *(const char **)a2;
                int v24 = 136315138;
                char v25 = v23;
                _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Attempting installation of plan with sourceIccid:%s using retry transfer monitor mode", (uint8_t *)&v24, 0xCu);
                if (!v34) {
                  sub_10016C840();
                }
              }
              (*(void (**)(uint64_t, uint8_t *, Block_layout *))(*(void *)v6 + 24))(v6, buf, &stru_101A4C870);
            }
            goto LABEL_34;
          }
          int v19 = a1[5];
          if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
LABEL_34:
            if (v34) {
              sub_10030D10C((uint64_t)buf);
            }
LABEL_36:
            sub_10004D2C8(v5);
            return;
          }
          __int16 v20 = sub_1008A2228(v7);
          int v21 = sub_1008A2228(v8);
          if (a2[23] >= 0) {
            __int16 v22 = a2;
          }
          else {
            __int16 v22 = *(char **)a2;
          }
          int v24 = 136315650;
          char v25 = v20;
          __int16 v26 = 2080;
          uint64_t v27 = v21;
          __int16 v28 = 2080;
          uint64_t v29 = v22;
          uint64_t v16 = "Not attempting installation of plan with terminal state:%s, display state:%s using retry monitor mode fo"
                "r source iccid: %s";
          uint64_t v17 = v19;
          uint32_t v18 = 32;
        }
        else
        {
          BOOL v14 = a1[5];
          if (!os_log_type_enabled(v14, OS_LOG_TYPE_ERROR)) {
            goto LABEL_34;
          }
          if (a2[23] >= 0) {
            int v15 = a2;
          }
          else {
            int v15 = *(const char **)a2;
          }
          int v24 = 136315138;
          char v25 = v15;
          uint64_t v16 = "No pending plan with sourceIccid: %s";
          uint64_t v17 = v14;
          uint32_t v18 = 12;
        }
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, (uint8_t *)&v24, v18);
        goto LABEL_34;
      }
    }
  }
  else
  {
    CFIndex v5 = 0;
  }
  uint64_t v13 = a1[5];
  if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "delegate not available", buf, 2u);
  }
  if (v5) {
    goto LABEL_36;
  }
}

void sub_100C85158(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  if (LOBYTE(STACK[0x500])) {
    sub_10030D10C((uint64_t)va);
  }
  sub_10004D2C8(v5);
  _Unwind_Resume(a1);
}

void sub_100C85188(uint64_t a1, char *a2)
{
}

uint64_t sub_100C85190(void *a1, uint64_t *a2)
{
  bzero(v10, 0x4E8uLL);
  (*(void (**)(void *__return_ptr, void *, uint64_t *))(*a1 + 168))(v10, a1, a2);
  if (v11)
  {
    uint64_t IsProfileInstalled = sIsProfileInstalled();
  }
  else
  {
    CFIndex v5 = a1[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a2 + 23) >= 0) {
        int v7 = a2;
      }
      else {
        int v7 = (uint64_t *)*a2;
      }
      int v8 = 136315138;
      uint64_t v9 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No pending plan with sourceIccid: %s", (uint8_t *)&v8, 0xCu);
    }
    uint64_t IsProfileInstalled = 0;
  }
  if (v11) {
    sub_10030D10C((uint64_t)v10);
  }
  return IsProfileInstalled;
}

void sub_100C852C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  if (LOBYTE(STACK[0x4F0])) {
    sub_10030D10C((uint64_t)va);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100C852E4(uint64_t a1, uint64_t *a2)
{
  return sub_100C85190((void *)(a1 - 72), a2);
}

void sub_100C852EC(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  switch(a3)
  {
    case 1:
      int v8 = a1[5];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = "kActive";
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Transfer status: %s", (uint8_t *)__p, 0xCu);
      }
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a4;
        uint64_t v11 = *(void *)(a4 + 16);
      }
      char v12 = 1;
      (*(void (**)(void *, uint64_t, uint64_t, void **))(*a1 + 112))(a1, a2, 7, __p);
      break;
    case 3:
      uint64_t v9 = a1[5];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = "kPendingProfileRelease";
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Waiting for ES push to install: %s", (uint8_t *)__p, 0xCu);
      }
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a4;
        uint64_t v11 = *(void *)(a4 + 16);
      }
      char v12 = 1;
      (*(void (**)(void *, uint64_t, uint64_t, void **))(*a1 + 112))(a1, a2, 8, __p);
      break;
    case 4:
      int v7 = a1[5];
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = "kUseDS";
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Waiting DS trigger to install: %s", (uint8_t *)__p, 0xCu);
      }
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a4;
        uint64_t v11 = *(void *)(a4 + 16);
      }
      char v12 = 1;
      (*(void (**)(void *, uint64_t, uint64_t, void **))(*a1 + 112))(a1, a2, 9, __p);
      break;
    default:
      return;
  }
  if (v12)
  {
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100C855A4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_100C855D8(void *a1, unsigned __int8 *a2)
{
  uint64_t v4 = a1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    if ((a2[23] & 0x80u) == 0) {
      CFIndex v5 = a2;
    }
    else {
      CFIndex v5 = *(unsigned __int8 **)a2;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Handling failed installation of plan with sourceIccid: %s", buf, 0xCu);
  }
  uint64_t v6 = a1[33];
  uint64_t v7 = a1[34];
  if (v6 == v7)
  {
LABEL_37:
    if (v6 != v7)
    {
      uint64_t v17 = a1[5];
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        uint32_t v18 = sub_1008A2228(*(unsigned __int8 *)(v6 + 1));
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v18;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Pending plan terminal state: %s", buf, 0xCu);
      }
      uint64_t v19 = *(unsigned __int8 *)(v6 + 1);
      buf[0] = 0;
      char v27 = 0;
      if (v19 == 5) {
        (*(void (**)(void *, unsigned __int8 *, uint64_t, unsigned char *))(*a1 + 112))(a1, a2, 11, buf);
      }
      else {
        (*(void (**)(void *, unsigned __int8 *, uint64_t, unsigned char *))(*a1 + 112))(a1, a2, v19, buf);
      }
      if (v27 && v26 < 0) {
        operator delete(*(void **)buf);
      }
      if (!*(void *)(v6 + 1176))
      {
        __int16 v20 = a1[5];
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Provisioning monitor mode exhausted. Setting display state of plan to kTransferable", buf, 2u);
        }
        *(unsigned char *)(v6 + 2) = 1;
      }
    }
  }
  else
  {
    unsigned __int8 v8 = a2[23];
    if ((v8 & 0x80u) == 0) {
      uint64_t v9 = a2[23];
    }
    else {
      uint64_t v9 = *((void *)a2 + 1);
    }
    if ((v8 & 0x80u) == 0) {
      BOOL v10 = a2;
    }
    else {
      BOOL v10 = *(unsigned __int8 **)a2;
    }
    do
    {
      uint64_t v11 = *(unsigned __int8 *)(v6 + 455);
      if ((v11 & 0x80u) == 0) {
        uint64_t v12 = *(unsigned __int8 *)(v6 + 455);
      }
      else {
        uint64_t v12 = *(void *)(v6 + 440);
      }
      if (v12 == v9)
      {
        if ((v11 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v6 + 432), v10, *(void *)(v6 + 440))) {
            goto LABEL_37;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 455)) {
            goto LABEL_37;
          }
          uint64_t v13 = 0;
          while (*(unsigned __int8 *)(v6 + v13 + 432) == v10[v13])
          {
            if (v11 == ++v13) {
              goto LABEL_37;
            }
          }
        }
      }
      uint64_t v14 = *(unsigned __int8 *)(v6 + 479);
      if ((v14 & 0x80u) == 0) {
        uint64_t v15 = *(unsigned __int8 *)(v6 + 479);
      }
      else {
        uint64_t v15 = *(void *)(v6 + 464);
      }
      if (v15 == v9)
      {
        if ((v14 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)(v6 + 456), v10, *(void *)(v6 + 464))) {
            goto LABEL_37;
          }
        }
        else
        {
          if (!*(unsigned char *)(v6 + 479)) {
            goto LABEL_37;
          }
          uint64_t v16 = 0;
          while (*(unsigned __int8 *)(v6 + v16 + 456) == v10[v16])
          {
            if (v14 == ++v16) {
              goto LABEL_37;
            }
          }
        }
      }
      v6 += 1248;
    }
    while (v6 != v7);
  }
  if (a1[51])
  {
    int v21 = a1 + 48;
    __int16 v22 = a1[5];
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Invoking callback for activating pending plan", buf, 2u);
    }
    uint64_t v23 = 0;
    int v24 = 0;
    sub_1002E1174((uint64_t)v21, 0, (uint64_t)&v24, (uint64_t)&v23, 49);
    sub_100057D78(&v23);
    sub_1000558F4(&v24);
    sub_100324040(v21);
  }
}

void sub_100C85944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (a17)
  {
    if (a16 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C85984(uint64_t result, int a2, int a3)
{
  if (a3) {
    *(_DWORD *)(result + 42sub_10023C164((uint64_t)&a9, 0) = a2;
  }
  else {
    *(_DWORD *)(result + 416) = a2;
  }
  return result;
}

uint64_t sub_100C85998(uint64_t a1, int a2)
{
  uint64_t v2 = 416;
  if (a2) {
    uint64_t v2 = 420;
  }
  return *(unsigned int *)(a1 + v2);
}

void sub_100C859B4(uint64_t a1)
{
  sub_100C85EA8(a1);

  operator delete();
}

void sub_100C859EC(uint64_t a1)
{
}

void sub_100C859F4(uint64_t a1)
{
  sub_100C85EA8(a1 - 48);

  operator delete();
}

void sub_100C85A30(uint64_t a1)
{
}

void sub_100C85A38(uint64_t a1)
{
  sub_100C85EA8(a1 - 56);

  operator delete();
}

void sub_100C85A74(uint64_t a1)
{
}

void sub_100C85A7C(uint64_t a1)
{
  sub_100C85EA8(a1 - 64);

  operator delete();
}

void sub_100C85AB8(uint64_t a1)
{
}

void sub_100C85AC0(uint64_t a1)
{
  sub_100C85EA8(a1 - 72);

  operator delete();
}

uint64_t sub_100C85AFC(uint64_t result, uint64_t a2, unint64_t a3, uint64_t a4)
{
  uint64_t v6 = result;
  uint64_t v7 = *(void *)(result + 8);
  uint64_t v8 = v7 - a4;
  uint64_t v9 = (long long *)(a2 + v7 - a4);
  if ((unint64_t)v9 >= a3)
  {
    uint64_t v11 = *(void *)(result + 8);
  }
  else
  {
    uint64_t v11 = *(void *)(result + 8);
    do
    {
      __n128 result = sub_1003115D8(v11, v9);
      v9 += 78;
      v11 += 1248;
    }
    while ((unint64_t)v9 < a3);
  }
  *(void *)(v6 + 8) = v11;
  if (v7 != a4)
  {
    uint64_t v12 = v7 - 1248;
    uint64_t v13 = 32 * (v8 >> 5);
    uint64_t v14 = a2 - 1248;
    do
    {
      __n128 result = sub_100310984(v12, (long long *)(v14 + v13));
      v12 -= 1248;
      v13 -= 1248;
    }
    while (v13);
  }
  return result;
}

void sub_100C85BC8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

uint64_t sub_100C85BD0(uint64_t *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  sub_100325450((uint64_t)(a1 + 2), a3, a3, *a1, *a1, v6, v6);
  a2[1] = v7;
  uint64_t v8 = a1[1];
  uint64_t v9 = a2[2];
  if (v8 != a3)
  {
    uint64_t v10 = 0;
    do
    {
      sub_10030DDAC(v9 + v10, (long long *)(a3 + v10));
      v10 += 1248;
    }
    while (a3 + v10 != v8);
    uint64_t v7 = a2[1];
    v9 += v10;
  }
  a2[2] = v9;
  uint64_t v11 = *a1;
  *a1 = v7;
  a2[1] = v11;
  uint64_t v12 = a1[1];
  a1[1] = a2[2];
  a2[2] = v12;
  uint64_t v13 = a1[2];
  a1[2] = a2[3];
  a2[3] = v13;
  *a2 = a2[1];
  return v6;
}

void sub_100C85CA8(_Unwind_Exception *exception_object)
{
  for (; v2; v2 -= 1248)
    sub_10030D10C(v1 - 1248 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100C85CCC(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    CFIndex v5 = a1;
    do
    {
      sub_100310984(a3, v5);
      v5 += 78;
      a3 += 1248;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_100C85D24(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x34834834834834) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1A41A41A41A41ALL) {
    unint64_t v9 = 0x34834834834834;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10030B8AC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[1248 * v4];
  uint64_t v16 = &v10[1248 * v9];
  sub_10030DDAC((uint64_t)v14, a2);
  uint64_t v15 = v14 + 1248;
  sub_1003253D8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003254E4((uint64_t)&v13);
  return v11;
}

void sub_100C85E30(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003254E4((uint64_t)va);
  _Unwind_Resume(a1);
}