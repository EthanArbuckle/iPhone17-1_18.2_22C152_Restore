void sub_1002B9100(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  std::__shared_weak_count *v23;
  char v24;

  if ((v24 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B9218(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, unint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  v18[0] = v9;
  v13 = sub_10004D37C(&v8[1].__m_.__sig, v18);
  if (!v13)
  {
    uint64_t v15 = 0;
LABEL_11:
    std::mutex::unlock(v8);
    v14 = 0;
    char v16 = 1;
    if (!v15) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  uint64_t v15 = v13[3];
  v14 = (std::__shared_weak_count *)v13[4];
  if (!v14) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
  if (!v15)
  {
LABEL_7:
    xpc_object_t v19 = xpc_int64_create(45);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    v18[0] = *a5;
    v18[1] = (unint64_t)"kPosixError";
    sub_100035E70((uint64_t)v18, &v19, object);
    xpc_release(object[0]);
    object[0] = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
    goto LABEL_17;
  }
LABEL_12:
  if (xpc_dictionary_get_value(*a4, "kRegistrationBands"))
  {
    v17 = (std::__shared_weak_count *)a5[1];
    object[1] = (xpc_object_t)*a5;
    v21 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    BasebandSettingsInterface::copySupportedAndActiveBands();
    if (v21) {
      sub_10004D2C8(v21);
    }
  }
LABEL_17:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_1002B93AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002B93DC(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  v18[0] = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, v18);
  if (v11)
  {
    uint64_t v13 = v11[3];
    unsigned int v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_19;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  unsigned int v12 = 0;
  char v14 = 1;
  if (!v13) {
    goto LABEL_19;
  }
LABEL_10:
  if (xpc_dictionary_get_value(*a4, "kRegistrationBands"))
  {
    CFTypeRef cf = 0;
    v18[0] = (unint64_t)a4;
    v18[1] = (unint64_t)"kRegistrationBands";
    sub_100048BAC((uint64_t)v18, &object);
    xpc::bridge((uint64_t *)&v20, (xpc *)&object, v15);
    sub_10004EFE4(&cf, &v20);
    sub_1000577C4(&v20);
    xpc_release(object);
    if (cf) {
      char v16 = sub_100080778;
    }
    else {
      char v16 = 0;
    }
    if (v16)
    {
      CFTypeRef v17 = cf;
      if (cf) {
        CFRetain(cf);
      }
      v22[0] = off_1019B4350;
      v22[3] = v22;
      (*(void (**)(uint64_t, uint64_t, CFTypeRef *, void *))(*(void *)v13 + 144))(v13, 1, &v17, v22);
      sub_10001C9D4(v22);
      sub_100057D78(&v17);
    }
    sub_100057D78(&cf);
  }
LABEL_19:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_1002B95DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, xpc_object_t object, char a14, int a15, __int16 a16, char a17, char a18, int a19, __int16 a20,char a21,char a22)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002B9658(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  unint64_t v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  v17[0] = v8;
  unsigned int v12 = sub_10004D37C(&v7[1].__m_.__sig, v17);
  if (!v12)
  {
    uint64_t v14 = 0;
LABEL_11:
    std::mutex::unlock(v7);
    uint64_t v13 = 0;
    char v15 = 1;
    if (!v14) {
      goto LABEL_7;
    }
    goto LABEL_12;
  }
  uint64_t v14 = v12[3];
  uint64_t v13 = (std::__shared_weak_count *)v12[4];
  if (!v13) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  char v15 = 0;
  if (!v14)
  {
LABEL_7:
    xpc_object_t v18 = xpc_int64_create(2);
    if (!v18) {
      xpc_object_t v18 = xpc_null_create();
    }
    v17[0] = *a5;
    v17[1] = (unint64_t)"kLTEWithCDRXState";
    sub_100035E70((uint64_t)v17, &v18, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v18);
    xpc_object_t v18 = 0;
    goto LABEL_16;
  }
LABEL_12:
  char v16 = (std::__shared_weak_count *)a5[1];
  unint64_t v20 = *a5;
  v21 = v16;
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v14 + 160))(v14, &v20);
  if (v21) {
    sub_10004D2C8(v21);
  }
LABEL_16:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
}

void sub_1002B97EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1002B9814(Registry **a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  v55 = 0;
  v56 = (void *)a4;
  v57 = "kCountryCodeBasedOnCurrentLocation";
  sub_100048BAC((uint64_t)&v56, &v53);
  xpc::bridge((uint64_t *)&v54, (xpc *)&v53, v6);
  sub_100056248(&v55, &v54);
  sub_1000577C4(&v54);
  xpc_release(v53);
  v54 = 0;
  v56 = (void *)a4;
  v57 = "kStateBasedOnCurrentLocation";
  sub_100048BAC((uint64_t)&v56, &v52);
  xpc::bridge((uint64_t *)&v53, (xpc *)&v52, v7);
  sub_100056248(&v54, (CFTypeRef *)&v53);
  sub_1000577C4((const void **)&v53);
  xpc_release(v52);
  v53 = 0;
  v56 = (void *)a4;
  v57 = "kCityBasedOnCurrentLocation";
  sub_100048BAC((uint64_t)&v56, &v51);
  xpc::bridge((uint64_t *)&v52, (xpc *)&v51, v8);
  sub_100056248(&v53, (CFTypeRef *)&v52);
  sub_1000577C4((const void **)&v52);
  xpc_release(v51);
  v52 = 0;
  v56 = (void *)a4;
  v57 = "kPostalCodeBasedOnCurrentLocation";
  sub_100048BAC((uint64_t)&v56, &v50);
  xpc::bridge((uint64_t *)&v51, (xpc *)&v50, v9);
  sub_100056248(&v52, (CFTypeRef *)&v51);
  sub_1000577C4((const void **)&v51);
  xpc_release(v50);
  v56 = 0;
  v57 = 0;
  uint64_t v58 = 0;
  ctu::cf::assign();
  uint64_t v10 = v57;
  v35 = v56;
  LODWORD(v51) = v58;
  *(_DWORD *)((char *)&v51 + 3) = *(_DWORD *)((char *)&v58 + 3);
  int v11 = SHIBYTE(v58);
  v56 = 0;
  v57 = 0;
  uint64_t v58 = 0;
  ctu::cf::assign();
  uint64_t v13 = v56;
  unsigned int v12 = v57;
  LODWORD(v50) = v58;
  *(_DWORD *)((char *)&v50 + 3) = *(_DWORD *)((char *)&v58 + 3);
  int v14 = SHIBYTE(v58);
  v56 = 0;
  v57 = 0;
  uint64_t v58 = 0;
  ctu::cf::assign();
  v33 = v12;
  v34 = v10;
  char v15 = v56;
  v32 = v57;
  v49[0] = v58;
  *(_DWORD *)((char *)v49 + 3) = *(_DWORD *)((char *)&v58 + 3);
  int v16 = SHIBYTE(v58);
  v56 = 0;
  v57 = 0;
  uint64_t v58 = 0;
  ctu::cf::assign();
  CFTypeRef v17 = v56;
  v31 = v57;
  v48[0] = v58;
  *(_DWORD *)((char *)v48 + 3) = *(_DWORD *)((char *)&v58 + 3);
  int v18 = SHIBYTE(v58);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  unint64_t v20 = ServiceMap;
  if ((v21 & 0x8000000000000000) != 0)
  {
    v22 = (unsigned __int8 *)(v21 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v23 = 5381;
    do
    {
      unint64_t v21 = v23;
      unsigned int v24 = *v22++;
      uint64_t v23 = (33 * v23) ^ v24;
    }
    while (v24);
  }
  std::mutex::lock(ServiceMap);
  v56 = (void *)v21;
  v25 = sub_10004D37C(&v20[1].__m_.__sig, (unint64_t *)&v56);
  if (v25)
  {
    uint64_t v27 = v25[3];
    v26 = (std::__shared_weak_count *)v25[4];
    if (v26)
    {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v20);
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
      v30 = v26;
      sub_10004D2C8(v26);
      char v28 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v27 = 0;
  }
  std::mutex::unlock(v20);
  v30 = 0;
  char v28 = 1;
  if (!v55 || !v27) {
    goto LABEL_30;
  }
LABEL_9:
  if (v11 < 0)
  {
    sub_10004FC84(__dst, v35, (unint64_t)v34);
  }
  else
  {
    __dst[0] = v35;
    __dst[1] = (void *)v34;
    *(_DWORD *)v46 = v51;
    *(_DWORD *)&v46[3] = *(_DWORD *)((char *)&v51 + 3);
    char v47 = v11;
  }
  if (v14 < 0)
  {
    sub_10004FC84(v42, v13, (unint64_t)v33);
  }
  else
  {
    v42[0] = v13;
    v42[1] = (void *)v33;
    *(_DWORD *)v43 = v50;
    *(_DWORD *)&v43[3] = *(_DWORD *)((char *)&v50 + 3);
    char v44 = v14;
  }
  if (v16 < 0)
  {
    sub_10004FC84(v39, v15, (unint64_t)v32);
  }
  else
  {
    v39[0] = v15;
    v39[1] = (void *)v32;
    *(_DWORD *)v40 = v49[0];
    *(_DWORD *)&v40[3] = *(_DWORD *)((char *)v49 + 3);
    char v41 = v16;
  }
  if (v18 < 0)
  {
    sub_10004FC84(__p, v17, (unint64_t)v31);
  }
  else
  {
    __p[0] = v17;
    __p[1] = (void *)v31;
    *(_DWORD *)v37 = v48[0];
    *(_DWORD *)&v37[3] = *(_DWORD *)((char *)v48 + 3);
    char v38 = v18;
  }
  (*(void (**)(uint64_t, void **, void **, void **, void **))(*(void *)v27 + 40))(v27, __dst, v42, v39, __p);
  if (v38 < 0) {
    operator delete(__p[0]);
  }
  if (v41 < 0) {
    operator delete(v39[0]);
  }
  if (v44 < 0) {
    operator delete(v42[0]);
  }
  if (v47 < 0)
  {
    operator delete(__dst[0]);
    if (v28)
    {
LABEL_31:
      if ((v18 & 0x80000000) == 0) {
        goto LABEL_32;
      }
      goto LABEL_38;
    }
  }
  else
  {
LABEL_30:
    if (v28) {
      goto LABEL_31;
    }
  }
  sub_10004D2C8(v30);
  if ((v18 & 0x80000000) == 0)
  {
LABEL_32:
    if ((v16 & 0x80000000) == 0) {
      goto LABEL_33;
    }
    goto LABEL_39;
  }
LABEL_38:
  operator delete(v17);
  if ((v16 & 0x80000000) == 0)
  {
LABEL_33:
    if ((v14 & 0x80000000) == 0) {
      goto LABEL_34;
    }
LABEL_40:
    operator delete(v13);
    if ((v11 & 0x80000000) == 0) {
      goto LABEL_35;
    }
LABEL_41:
    operator delete(v35);
    goto LABEL_35;
  }
LABEL_39:
  operator delete(v15);
  if (v14 < 0) {
    goto LABEL_40;
  }
LABEL_34:
  if (v11 < 0) {
    goto LABEL_41;
  }
LABEL_35:
  sub_1000558F4((const void **)&v52);
  sub_1000558F4((const void **)&v53);
  sub_1000558F4(&v54);
  return sub_1000558F4(&v55);
}

void sub_1002B9CB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  if (a40 < 0)
  {
    operator delete(a35);
    if (v40)
    {
LABEL_7:
      if ((v47 & 0x80000000) == 0)
      {
LABEL_12:
        if (v41 < 0) {
          operator delete(v46);
        }
        if (v45 < 0) {
          operator delete(v44);
        }
        if (v43 < 0) {
          operator delete(a16);
        }
        sub_1000558F4((const void **)(v48 - 144));
        sub_1000558F4((const void **)(v48 - 136));
        sub_1000558F4((const void **)(v48 - 128));
        sub_1000558F4((const void **)(v48 - 120));
        _Unwind_Resume(a1);
      }
LABEL_11:
      operator delete(v42);
      goto LABEL_12;
    }
  }
  else if (v40)
  {
    goto LABEL_7;
  }
  sub_10004D2C8(a11);
  if ((v47 & 0x80000000) == 0) {
    goto LABEL_12;
  }
  goto LABEL_11;
}

void sub_1002B9EE4(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  v6 = ServiceMap;
  if (v7 < 0)
  {
    unint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v20 = v7;
  int v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v20);
  if (v11)
  {
    uint64_t v13 = v11[3];
    unsigned int v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  unsigned int v12 = 0;
  char v14 = 1;
  if (!v13) {
    goto LABEL_13;
  }
LABEL_10:
  xpc_object_t v19 = 0;
  *(void *)&long long v20 = a4;
  *((void *)&v20 + 1) = "kLocalRoutableAddress";
  sub_100048BAC((uint64_t)&v20, &object);
  xpc::bridge((uint64_t *)__p, (xpc *)&object, v15);
  sub_100056248(&v19, (CFTypeRef *)__p);
  sub_1000577C4((const void **)__p);
  xpc_release(object);
  long long v20 = 0uLL;
  uint64_t v21 = 0;
  ctu::cf::assign();
  *(_OWORD *)__p = v20;
  uint64_t v17 = v21;
  (*(void (**)(uint64_t, void **))(*(void *)v13 + 552))(v13, __p);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_1000558F4(&v19);
LABEL_13:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_1002BA07C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, xpc_object_t object, const void *a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a16);
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  _Unwind_Resume(a1);
}

void sub_1002BA0F4(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_100224000(*a1, &v12);
  char v6 = v12;
  if (v12)
  {
    BOOL v7 = CallController::isEmergencyCallActiveForCallType(v12, 4);
    BOOL v8 = CallController::isEmergencyCallActiveForCallType(v12, 8);
    char v6 = v7 | CallController::isEmergencyModeActiveForCallType(v12, 3) | v8;
  }
  xpc_object_t v10 = xpc_BOOL_create(v6);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  v9[0] = *a5;
  v9[1] = "kE911State";
  sub_100035E70((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  if (v13) {
    sub_10004D2C8(v13);
  }
}

void sub_1002BA1C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002BA1F4(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_100224000(*a1, &v26);
  if (!v26) {
    goto LABEL_12;
  }
  if (CallController::isEmergencyCallActiveForCallType(v26, 2))
  {
    LOBYTE(v7) = 1;
    goto LABEL_13;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    int v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long __p = v10;
  char v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)&__p);
  if (!v14)
  {
    std::mutex::unlock(v9);
    goto LABEL_12;
  }
  uint64_t v16 = v14[3];
  char v15 = (std::__shared_weak_count *)v14[4];
  if (!v15)
  {
    std::mutex::unlock(v9);
    if (v16) {
      goto LABEL_19;
    }
LABEL_12:
    LOBYTE(v7) = 0;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v9);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  if (!v16)
  {
    LOBYTE(v7) = 0;
LABEL_36:
    sub_10004D2C8(v15);
    goto LABEL_13;
  }
LABEL_19:
  uint64_t v24 = 0;
  v25 = 0;
  PersonalityIdFromSlotIdEx();
  (*(void (**)(uint64_t *__return_ptr, uint64_t, long long *))(*(void *)v16 + 40))(&v24, v16, &__p);
  if (v29 < 0) {
    operator delete((void *)__p);
  }
  if (v24)
  {
    CFTypeRef cf = 0;
    (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v24 + 40))(&cf);
    BOOL v7 = (BOOL *)cf;
    LOBYTE(__p) = 0;
    if (cf)
    {
      CFTypeID v17 = CFGetTypeID(cf);
      if (v17 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)&__p, v7, v18);
      }
      if ((_BYTE)__p)
      {
        LODWORD(v7) = CallController::isEmergencyCallActiveForCallType(v26, 4);
        sub_1002BBBAC();
        xpc_object_t v19 = qword_101B0CAF0;
        if (os_log_type_enabled((os_log_t)qword_101B0CAF0, OS_LOG_TYPE_DEFAULT))
        {
          long long v20 = "False";
          if (v7) {
            long long v20 = "True";
          }
          LODWORD(__p) = 136315138;
          *(void *)((char *)&__p + 4) = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Wifi E911 call does not exist but carrier supports pseudo VoLTE. VoLTE E911 call state: %s", (uint8_t *)&__p, 0xCu);
        }
      }
      else
      {
        LOBYTE(v7) = 0;
      }
    }
    sub_1000577C4(&cf);
  }
  else
  {
    LOBYTE(v7) = 0;
  }
  if (v25) {
    sub_10004D2C8(v25);
  }
  if (v15) {
    goto LABEL_36;
  }
LABEL_13:
  xpc_object_t v21 = xpc_BOOL_create((BOOL)v7);
  if (!v21) {
    xpc_object_t v21 = xpc_null_create();
  }
  *(void *)&long long __p = *a5;
  *((void *)&__p + 1) = "kWifiE911State";
  sub_100035E70((uint64_t)&__p, &v21, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v21);
  xpc_object_t v21 = 0;
  if (v27) {
    sub_10004D2C8(v27);
  }
}

void sub_1002BA51C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  sub_1000577C4(&a12);
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(a1);
}

const void **sub_1002BA5B4(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t *a5)
{
  result = (const void **)xpc_dictionary_get_value(*a4, "kTelephonyCapability");
  if (result)
  {
    CFTypeRef cf1 = 0;
    v24[0] = (unint64_t)a4;
    v24[1] = (unint64_t)"kTelephonyCapability";
    sub_100048BAC((uint64_t)v24, &object);
    xpc::bridge((uint64_t *)&v26, (xpc *)&object, v9);
    sub_100056248(&cf1, &v26);
    sub_1000577C4(&v26);
    xpc_release(object);
    if (cf1) {
      uint64_t v10 = sub_1000810B8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!v10 || !CFEqual(cf1, kCTCapabilityPhoneServices)) {
      return sub_1000558F4(&cf1);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
    uint64_t v12 = ServiceMap;
    if ((v13 & 0x8000000000000000) != 0)
    {
      char v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        unint64_t v13 = v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    std::mutex::lock(ServiceMap);
    v24[0] = v13;
    CFTypeID v17 = sub_10004D37C(&v12[1].__m_.__sig, v24);
    if (v17)
    {
      uint64_t v19 = v17[3];
      CFBooleanRef v18 = (std::__shared_weak_count *)v17[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v12);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v18);
        char v20 = 0;
        if (!v19) {
          goto LABEL_13;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    std::mutex::unlock(v12);
    CFBooleanRef v18 = 0;
    char v20 = 1;
    if (!v19)
    {
LABEL_13:
      sub_1002BBBAC();
      xpc_object_t v21 = qword_101B0CAF0;
      if (os_log_type_enabled((os_log_t)qword_101B0CAF0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I PhoneServices device list IS NOT READY", (uint8_t *)v24, 2u);
      }
LABEL_20:
      if ((v20 & 1) == 0) {
        sub_10004D2C8(v18);
      }
      return sub_1000558F4(&cf1);
    }
LABEL_17:
    uint64_t v23 = *a5;
    uint64_t v22 = a5[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    v28[0] = off_1019B43E0;
    v28[1] = v23;
    v28[2] = v22;
    v28[3] = v28;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 72))(v19, v28);
    sub_1002BD56C(v28);
    goto LABEL_20;
  }
  return result;
}

void sub_1002BA80C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, int a13, const void *a14, __int16 a15, char a16, char a17)
{
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  sub_1000558F4(&a14);
  _Unwind_Resume(a1);
}

const void **sub_1002BA88C(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t *a5)
{
  result = (const void **)xpc_dictionary_get_value(*a4, "kTelephonyCapability");
  if (result)
  {
    CFTypeRef cf1 = 0;
    v24[0] = (unint64_t)a4;
    v24[1] = (unint64_t)"kTelephonyCapability";
    sub_100048BAC((uint64_t)v24, &object);
    xpc::bridge((uint64_t *)&v26, (xpc *)&object, v9);
    sub_100056248(&cf1, &v26);
    sub_1000577C4(&v26);
    xpc_release(object);
    if (cf1) {
      uint64_t v10 = sub_1000810B8;
    }
    else {
      uint64_t v10 = 0;
    }
    if (!v10 || !CFEqual(cf1, kCTCapabilityPhoneServices)) {
      return sub_1000558F4(&cf1);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
    uint64_t v12 = ServiceMap;
    if ((v13 & 0x8000000000000000) != 0)
    {
      char v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        unint64_t v13 = v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    std::mutex::lock(ServiceMap);
    v24[0] = v13;
    CFTypeID v17 = sub_10004D37C(&v12[1].__m_.__sig, v24);
    if (v17)
    {
      uint64_t v19 = v17[3];
      char v18 = (std::__shared_weak_count *)v17[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v12);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v18);
        char v20 = 0;
        if (!v19) {
          goto LABEL_13;
        }
        goto LABEL_17;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    std::mutex::unlock(v12);
    char v18 = 0;
    char v20 = 1;
    if (!v19)
    {
LABEL_13:
      sub_1002BBBAC();
      xpc_object_t v21 = qword_101B0CAF0;
      if (os_log_type_enabled((os_log_t)qword_101B0CAF0, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v24[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I PhoneServices device info IS NOT READY", (uint8_t *)v24, 2u);
      }
LABEL_20:
      if ((v20 & 1) == 0) {
        sub_10004D2C8(v18);
      }
      return sub_1000558F4(&cf1);
    }
LABEL_17:
    uint64_t v23 = *a5;
    uint64_t v22 = a5[1];
    if (v22) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v22 + 8), 1uLL, memory_order_relaxed);
    }
    v28[0] = off_1019B4470;
    v28[1] = v23;
    v28[2] = v22;
    v28[3] = v28;
    (*(void (**)(uint64_t, void *))(*(void *)v19 + 64))(v19, v28);
    sub_1002BD56C(v28);
    goto LABEL_20;
  }
  return result;
}

void sub_1002BAAE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, char a12, int a13, const void *a14, __int16 a15, char a16, char a17)
{
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  sub_1000558F4(&a14);
  _Unwind_Resume(a1);
}

void sub_1002BAB64(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  uint64_t v24 = 0;
  v25 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  char v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    BOOL v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v7;
  int v11 = sub_10004D37C(&v6[1].__m_.__sig, &v19);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 8))(&v24, v13, 1);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v24 && xpc_dictionary_get_value(*a4, "kTelephonyCapability"))
  {
    CFTypeRef cf1 = 0;
    unint64_t v19 = (unint64_t)a4;
    char v20 = "kTelephonyCapability";
    sub_100048BAC((uint64_t)&v19, &object);
    xpc::bridge((uint64_t *)&v22, (xpc *)&object, v15);
    sub_100056248(&cf1, &v22);
    sub_1000577C4(&v22);
    xpc_release(object);
    if (cf1) {
      unsigned int v16 = sub_1000810B8;
    }
    else {
      unsigned int v16 = 0;
    }
    if (v16 && CFEqual(cf1, kCTCapabilityPhoneServices) && xpc_dictionary_get_value(*a4, "kPhoneServicesDeviceId"))
    {
      uint64_t v22 = 0;
      unint64_t v19 = (unint64_t)a4;
      char v20 = "kPhoneServicesDeviceId";
      sub_100048BAC((uint64_t)&v19, &v18);
      xpc::bridge((uint64_t *)&object, (xpc *)&v18, v17);
      sub_100056248(&v22, (CFTypeRef *)&object);
      sub_1000577C4((const void **)&object);
      xpc_release(v18);
      (*(void (**)(uint64_t, const void *))(*(void *)v24 + 136))(v24, v22);
      sub_1000558F4(&v22);
    }
    sub_1000558F4(&cf1);
  }
  if (v25) {
    sub_10004D2C8(v25);
  }
}

void sub_1002BADA0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, xpc_object_t a12, const void *a13, const void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1002BAE38()
{
  if (v0) {
    JUMPOUT(0x1002BAE30);
  }
  JUMPOUT(0x1002BAE28);
}

void sub_1002BAE48(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  uint64_t v24 = 0;
  v25 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  char v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    BOOL v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v7;
  int v11 = sub_10004D37C(&v6[1].__m_.__sig, &v19);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v13 + 8))(&v24, v13, 1);
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v24 && xpc_dictionary_get_value(*a4, "kTelephonyCapability"))
  {
    CFTypeRef cf1 = 0;
    unint64_t v19 = (unint64_t)a4;
    char v20 = "kTelephonyCapability";
    sub_100048BAC((uint64_t)&v19, &object);
    xpc::bridge((uint64_t *)&v22, (xpc *)&object, v15);
    sub_100056248(&cf1, &v22);
    sub_1000577C4(&v22);
    xpc_release(object);
    if (cf1) {
      unsigned int v16 = sub_1000810B8;
    }
    else {
      unsigned int v16 = 0;
    }
    if (v16 && CFEqual(cf1, kCTCapabilityPhoneServices) && xpc_dictionary_get_value(*a4, "kPhoneServicesDeviceId"))
    {
      uint64_t v22 = 0;
      unint64_t v19 = (unint64_t)a4;
      char v20 = "kPhoneServicesDeviceId";
      sub_100048BAC((uint64_t)&v19, &v18);
      xpc::bridge((uint64_t *)&object, (xpc *)&v18, v17);
      sub_100056248(&v22, (CFTypeRef *)&object);
      sub_1000577C4((const void **)&object);
      xpc_release(v18);
      (*(void (**)(uint64_t, const void *))(*(void *)v24 + 144))(v24, v22);
      sub_1000558F4(&v22);
    }
    sub_1000558F4(&cf1);
  }
  if (v25) {
    sub_10004D2C8(v25);
  }
}

void sub_1002BB084(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, xpc_object_t a12, const void *a13, const void *a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1002BB11C()
{
  if (v0) {
    JUMPOUT(0x1002BB114);
  }
  JUMPOUT(0x1002BB10CLL);
}

void sub_1002BB134(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, unint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    int v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v33 = v10;
  char v14 = sub_10004D37C(&v9[1].__m_.__sig, &v33);
  if (!v14)
  {
    uint64_t v16 = 0;
LABEL_9:
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    if (!v16) {
      goto LABEL_33;
    }
LABEL_10:
    if (!xpc_dictionary_get_value(*a4, "kIdentityProtectionType"))
    {
      LOBYTE(v16) = 0;
      goto LABEL_33;
    }
    CFTypeRef cf1 = 0;
    unint64_t v33 = (unint64_t)a4;
    v34 = (std::__shared_weak_count *)"kIdentityProtectionType";
    sub_100048BAC((uint64_t)&v33, &object);
    xpc::bridge(&v37, (xpc *)&object, v18);
    sub_100056248(&cf1, (CFTypeRef *)&v37);
    sub_1000577C4((const void **)&v37);
    xpc_release(object);
    if (cf1) {
      unint64_t v19 = sub_1000810B8;
    }
    else {
      unint64_t v19 = 0;
    }
    if (!v19)
    {
      LOBYTE(v16) = 0;
LABEL_32:
      sub_1000558F4(&cf1);
      goto LABEL_33;
    }
    BOOL v20 = CFEqual(cf1, kCTEncryptedIdentityWiFiCalling) == 0;
    unint64_t v33 = 0;
    v34 = 0;
    xpc_object_t v21 = (std::mutex *)Registry::getServiceMap(*a1);
    uint64_t v22 = v21;
    if (v23 < 0)
    {
      uint64_t v24 = (unsigned __int8 *)(v23 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v25 = 5381;
      do
      {
        uint64_t v23 = v25;
        unsigned int v26 = *v24++;
        uint64_t v25 = (33 * v25) ^ v26;
      }
      while (v26);
    }
    std::mutex::lock(v21);
    uint64_t v37 = v23;
    uint64_t v27 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)&v37);
    if (v27)
    {
      uint64_t v29 = v27[3];
      char v28 = (std::__shared_weak_count *)v27[4];
      if (v28)
      {
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v22);
        atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v28);
        char v30 = 0;
LABEL_25:
        (*(void (**)(unint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v29 + 8))(&v33, v29, 1);
        if ((v30 & 1) == 0) {
          sub_10004D2C8(v28);
        }
        if (v33) {
          LOBYTE(v16) = (*(unsigned int (**)(uint64_t, unint64_t, BOOL))(*(void *)v16 + 16))(v16, v33 + 24, v20) != 0;
        }
        else {
          LOBYTE(v16) = 0;
        }
        if (v34) {
          sub_10004D2C8(v34);
        }
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v29 = 0;
    }
    std::mutex::unlock(v22);
    char v28 = 0;
    char v30 = 1;
    goto LABEL_25;
  }
  uint64_t v16 = v14[3];
  uint64_t v15 = (std::__shared_weak_count *)v14[4];
  if (!v15) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v9);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  char v17 = 0;
  if (v16) {
    goto LABEL_10;
  }
LABEL_33:
  xpc_object_t v31 = xpc_BOOL_create(v16);
  if (!v31) {
    xpc_object_t v31 = xpc_null_create();
  }
  unint64_t v33 = *a5;
  v34 = (std::__shared_weak_count *)"kIdentityProtectionSupport";
  sub_100035E70((uint64_t)&v33, &v31, &v32);
  xpc_release(v32);
  xpc_object_t v32 = 0;
  xpc_release(v31);
  xpc_object_t v31 = 0;
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
}

void sub_1002BB450(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, xpc_object_t object, const void *a15, __int16 a16, char a17, char a18)
{
  if (a13) {
    sub_10004D2C8(a13);
  }
  sub_1000558F4(&a15);
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v18);
  }
  _Unwind_Resume(a1);
}

void sub_1002BB4E4()
{
}

uint64_t sub_1002BB5AC(uint64_t a1, uint64_t a2)
{
  v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_1002BB62C(uint64_t **a1, uint64_t *a2)
{
  result = *a1;
  *a1 = a2;
  if (result)
  {
    sub_1002BB67C(result);
    operator delete();
  }
  return result;
}

uint64_t *sub_1002BB67C(uint64_t *a1)
{
  if (a1[2] && a1[6])
  {
    sub_1002BB5AC((uint64_t)v4, (uint64_t)(a1 + 3));
    uint64_t v5 = *a1;
    int v6 = *((_DWORD *)a1 + 2);
    operator new();
  }
  sub_1002BBB28(a1 + 3);
  v2 = a1[2];
  if (v2) {
    dispatch_release(v2);
  }
  return a1;
}

void sub_1002BB77C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002BB788(uint64_t a1)
{
  sub_1002BB804(a1, *(void *)(a1 + 32), *(_DWORD *)(a1 + 40));
  sub_1002BBB28((void *)a1);

  operator delete();
}

void sub_1002BB7DC()
{
  sub_1002BBB28(v0);
  operator delete();
}

uint64_t sub_1002BB804(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v5 = a2;
  int v6 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v3 + 48))(v3, &v5);
}

void *sub_1002BB85C(void *a1)
{
  *a1 = off_1019B3ED0;
  v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BB8A8(void *a1)
{
  *a1 = off_1019B3ED0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BB914(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B3ED0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BB970(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B3ED0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BB9A8(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BB9B8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BB9F8(uint64_t a1, uint64_t a2)
{
  int64_t v3 = *(unsigned int *)(a2 + 8);
  xpc_object_t object = xpc_int64_create(*(unsigned int *)(a2 + 4));
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = "kRegistrationSignalStrengthDisplayValue";
  sub_100035E70((uint64_t)&v6, &object, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v4 = xpc_int64_create(v3);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = "kRegistrationSignalStrengthMaxDisplayValue";
  sub_100035E70((uint64_t)&v6, &v4, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(v4);
}

uint64_t sub_1002BBADC(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B3F40)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002BBB1C()
{
  return &off_1019B3F40;
}

void *sub_1002BBB28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1002BBBAC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B0CAF8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B0CAF8))
  {
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&qword_101B0CAF0, kCtLoggingSystemName, "reg.xpc");
    __cxa_guard_release(&qword_101B0CAF8);
  }
}

void sub_1002BBC2C(_Unwind_Exception *a1)
{
}

void sub_1002BBC44(uint64_t a1, BOOL value)
{
  xpc_object_t v4 = xpc_BOOL_create(value);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 32);
  v3[1] = "kRegistrationDiscourageDisableLteDataRate";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002BBCC8(uint64_t a1, int a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(**(Registry ***)(a1 + 32));
  xpc_object_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v31 = v6;
  unint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v31);
  if (v10)
  {
    uint64_t v12 = (MaxDataRateInterface *)v10[3];
    int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
LABEL_11:
      BOOL v14 = MaxDataRateInterface::getUserPreferenceEnableLTE(v12) != 2;
      if (v13) {
        goto LABEL_13;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  int v11 = 0;
  char v13 = 1;
  if (v12) {
    goto LABEL_11;
  }
LABEL_7:
  BOOL v14 = 1;
  if ((v13 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v11);
LABEL_13:
  uint64_t v15 = (std::mutex *)Registry::getServiceMap(**(Registry ***)(a1 + 32));
  uint64_t v16 = v15;
  if ((v17 & 0x8000000000000000) != 0)
  {
    xpc_object_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v19 = 5381;
    do
    {
      unint64_t v17 = v19;
      unsigned int v20 = *v18++;
      uint64_t v19 = (33 * v19) ^ v20;
    }
    while (v20);
  }
  std::mutex::lock(v15);
  unint64_t v31 = v17;
  xpc_object_t v21 = sub_10004D37C(&v16[1].__m_.__sig, &v31);
  if (v21)
  {
    uint64_t v23 = v21[3];
    uint64_t v22 = (std::__shared_weak_count *)v21[4];
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v16);
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v22);
      char v24 = 0;
      if (!v23) {
        goto LABEL_24;
      }
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  std::mutex::unlock(v16);
  uint64_t v22 = 0;
  char v24 = 1;
  if (!v23) {
    goto LABEL_24;
  }
LABEL_22:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v23 + 8))(&v29, v23, 1);
  (*(void (**)(unint64_t *__return_ptr))(*(void *)v29 + 40))(&v31);
  LODWORD(v23) = v31;
  sub_100057D78((const void **)&v32);
  if (v30) {
    sub_10004D2C8(v30);
  }
LABEL_24:
  if ((v24 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  if (v23) {
    char v25 = v14;
  }
  else {
    char v25 = 1;
  }
  if (a2) {
    BOOL v26 = v25;
  }
  else {
    BOOL v26 = 0;
  }
  xpc_object_t v27 = xpc_BOOL_create(v26);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  unint64_t v31 = *(void *)(a1 + 40);
  xpc_object_t v32 = "kRegistrationShouldWarnLteDisabled";
  sub_100035E70((uint64_t)&v31, &v27, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v27);
}

void sub_1002BBF5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    sub_10004D2C8(a13);
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002BBFA0(void *a1)
{
  *a1 = off_1019B3FC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  int64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_1002BBFF8(void *a1)
{
  *a1 = off_1019B3FC0;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  int64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

uint64_t sub_1002BC070(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1019B3FC0;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 40);
  return result;
}

void sub_1002BC0C8(uint64_t a1)
{
}

uint64_t sub_1002BC0D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BC110()
{
}

void *sub_1002BC11C(void *a1)
{
  *a1 = off_1019B4040;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_1002BC174(void *a1)
{
  *a1 = off_1019B4040;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

void *sub_1002BC1EC(uint64_t a1)
{
  result = operator new(0x30uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B4040;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a1 + 32);
  result[3] = *(void *)(a1 + 24);
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  *((_DWORD *)result + 10) = *(_DWORD *)(a1 + 40);
  return result;
}

uint64_t sub_1002BC268(uint64_t result, uint64_t a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)a2 = off_1019B4040;
  *(void *)(a2 + 8) = v3;
  *(void *)(a2 + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(a2 + 40) = *(_DWORD *)(result + 40);
  return result;
}

void sub_1002BC2C0(uint64_t a1)
{
}

void sub_1002BC2C8(void *a1)
{
  sub_10000ACD0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1002BC304(uint64_t a1, xpc_object_t *a2)
{
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v15 = v16;
  sub_10003447C((uint64_t)&v15, a2);
  uint64_t v3 = v16[0];
  if (!v16[0]) {
    goto LABEL_11;
  }
  int v4 = *(_DWORD *)(a1 + 40);
  uint64_t v5 = v16;
  do
  {
    unint64_t v6 = v3;
    unint64_t v7 = v5;
    int v8 = *((_DWORD *)v3 + 7);
    unsigned int v9 = v3 + 1;
    if (v8 >= v4)
    {
      unsigned int v9 = v6;
      uint64_t v5 = (void **)v6;
    }
    uint64_t v3 = (void *)*v9;
  }
  while (v3);
  if (v5 != v16 && (v8 >= v4 ? (unint64_t v10 = v6) : (unint64_t v10 = v7), v4 >= *((_DWORD *)v10 + 7)))
  {
    if (v8 >= v4) {
      int v11 = v6;
    }
    else {
      int v11 = v7;
    }
    xpc_object_t v13 = xpc_BOOL_create(*((unsigned char *)v11 + 32));
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  else
  {
LABEL_11:
    xpc_object_t v13 = xpc_BOOL_create(0);
    if (!v13) {
      xpc_object_t v13 = xpc_null_create();
    }
  }
  v12[0] = *(void *)(a1 + 8);
  v12[1] = "kRegistrationIsInHomeCountry";
  sub_100035E70((uint64_t)v12, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v13);
  xpc_object_t v13 = 0;
  sub_1000346F8((uint64_t)&v15, v16[0]);
}

void sub_1002BC468(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t sub_1002BC480(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BC4C0()
{
}

void *sub_1002BC4CC(void *a1)
{
  *a1 = off_1019B40C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BC518(void *a1)
{
  *a1 = off_1019B40C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BC584(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B40C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BC5E0(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B40C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BC618(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BC628(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BC668(uint64_t a1, BOOL *a2)
{
  xpc_object_t v4 = xpc_BOOL_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kRegistrationIsDataAttached";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_1002BC6EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BC72C()
{
}

void *sub_1002BC738(void *a1)
{
  *a1 = off_1019B4140;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BC784(void *a1)
{
  *a1 = off_1019B4140;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BC7F0(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B4140;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BC84C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B4140;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BC884(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BC894(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BC8D4(uint64_t a1, unsigned int *a2)
{
  xpc_object_t v4 = xpc_int64_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kRegistrationSignalStrength";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_1002BC958(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B41A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002BC998()
{
  return &off_1019B41A0;
}

void *sub_1002BC9A4(void *a1)
{
  *a1 = off_1019B41C0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BC9F0(void *a1)
{
  *a1 = off_1019B41C0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BCA5C(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B41C0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BCAB8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B41C0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BCAF0(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BCB00(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BCB40(uint64_t a1, int **a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  xpc_object_t v5 = xpc_array_create(0, 0);
  if (v5 || (xpc_object_t v5 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v5);
      xpc_object_t v6 = v5;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v6 = xpc_null_create();
    xpc_object_t v5 = 0;
  }
  xpc_release(v5);
  if (v3 != v4)
  {
    unint64_t v7 = v3;
    do
    {
      xpc_object_t v8 = xpc_int64_create(*v7);
      if (!v8) {
        xpc_object_t v8 = xpc_null_create();
      }
      xpc_array_append_value(v6, v8);
      xpc_release(v8);
      ++v7;
    }
    while (v7 != v4);
  }
  xpc_object_t v10 = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v10 = xpc_null_create();
  }
  v9[0] = *(void *)(a1 + 8);
  v9[1] = "kRegistrationSupportedDataRates";
  sub_10017AC14((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(v6);
  if (v3) {
    operator delete(v3);
  }
}

void sub_1002BCCC0(_Unwind_Exception *a1)
{
  xpc_release(v3);
  xpc_release(v2);
  if (v1) {
    operator delete(v1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002BCCF4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4230)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002BCD34()
{
  return &off_1019B4230;
}

void *sub_1002BCD40(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1002BCDC4(void *a1)
{
  *a1 = off_1019B4250;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BCE10(void *a1)
{
  *a1 = off_1019B4250;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BCE7C(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B4250;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BCED8(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B4250;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BCF10(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BCF20(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BCF60(uint64_t a1, unsigned int *a2)
{
  xpc_object_t v4 = xpc_int64_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kRegistrationSignalStrength";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_1002BCFE4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B42B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002BD024()
{
  return &off_1019B42B0;
}

void sub_1002BD030(Registry *a1@<X0>, void *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a1);
  xpc_object_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    xpc_object_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v5;
  unsigned int v9 = sub_10004D37C(&v4[1].__m_.__sig, &v12);
  if (v9)
  {
    uint64_t v11 = v9[3];
    xpc_object_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    uint64_t v11 = 0;
    xpc_object_t v10 = 0;
  }
  std::mutex::unlock(v4);
  *a2 = v11;
  a2[1] = v10;
  if (v10)
  {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v10);
  }
}

void sub_1002BD0FC()
{
}

unsigned char *sub_1002BD110(uint64_t a1)
{
  result = operator new(0x10uLL);
  *(void *)result = off_1019B42D0;
  result[8] = *(unsigned char *)(a1 + 8);
  return result;
}

uint64_t sub_1002BD15C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B42D0;
  *(unsigned char *)(a2 + 8) = *(unsigned char *)(result + 8);
  return result;
}

void sub_1002BD18C(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  xpc::dyn_cast_or_default((xpc *)&object, 0, v2);
  xpc_release(object);
}

void sub_1002BD1DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_1002BD1F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BD238()
{
}

void sub_1002BD248()
{
}

void *sub_1002BD25C()
{
  result = operator new(0x10uLL);
  void *result = off_1019B4350;
  return result;
}

void sub_1002BD294(uint64_t a1, void *a2)
{
  *a2 = off_1019B4350;
}

uint64_t sub_1002BD2C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BD300()
{
}

void *sub_1002BD30C(void *a1)
{
  *a1 = off_1019B43E0;
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BD358(void *a1)
{
  *a1 = off_1019B43E0;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BD3C4(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B43E0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BD420(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B43E0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BD458(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BD468(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BD4A8(uint64_t a1, unsigned char *a2, ctu **a3)
{
  if (*a2)
  {
    ctu::cf_to_xpc((uint64_t *)&v5, *a3, a2);
    v4[0] = *(void *)(a1 + 8);
    v4[1] = "kPhoneServicesGetDeviceList";
    sub_100035E70((uint64_t)v4, &v5, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
  }
}

uint64_t sub_1002BD520(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BD560()
{
}

void *sub_1002BD56C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_1002BD5F0(void *a1)
{
  *a1 = off_1019B4470;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002BD63C(void *a1)
{
  *a1 = off_1019B4470;
  v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_1002BD6A8(uint64_t a1)
{
  result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B4470;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_1002BD704(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B4470;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002BD73C(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002BD74C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_1002BD78C(uint64_t a1, unsigned char *a2, ctu **a3)
{
  if (*a2)
  {
    ctu::cf_to_xpc((uint64_t *)&v5, *a3, a2);
    v4[0] = *(void *)(a1 + 8);
    v4[1] = "kPhoneServicesGetDeviceInfo";
    sub_100035E70((uint64_t)v4, &v5, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v5);
  }
}

uint64_t sub_1002BD804(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002BD844()
{
}

uint64_t sub_1002BD850()
{
  return sub_100C624B8((uint64_t)&unk_101B0CAEA, (uint64_t)sub_1002B4C68);
}

void *sub_1002BD86C(void *a1, void *a2, NSObject **a3)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v9, kCtLoggingSystemName, "stw.comp.mgr");
  a1[1] = 0;
  a1[2] = 0;
  xpc_object_t v6 = *a3;
  a1[3] = *a3;
  if (v6) {
    dispatch_retain(v6);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v10, &v9);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v10);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v9);
  *a1 = off_1019B44F0;
  a1[6] = *a2;
  uint64_t v7 = a2[1];
  a1[7] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  a1[11] = 0;
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = a1 + 11;
  a1[14] = 0;
  a1[15] = 0;
  a1[16] = 0;
  a1[12] = 0;
  a1[13] = a1 + 14;
  a1[17] = 0;
  a1[18] = 0;
  return a1;
}

void sub_1002BD968(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  sub_100087E88(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_1002BD994(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1 + 24;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if (*(void *)(v5 + 40)) {
    __assert_rtn("initialize", "StewieCompressionManager_ios.cpp", 82, "!fConfig");
  }
  uint64_t v6 = sub_100058DB0(v40, "/System/Library/Frameworks/CoreTelephony.framework/Support/CompressionConfig.plist");
  uint64_t v7 = (os_log_t *)(a1 + 40);
  sub_10135BC84(v6, (const ctu::OsLogLogger *)(a1 + 40), (uint64_t)buf);
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)buf;
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(*(void **)v40);
  }
  uint64_t v9 = *(void *)(a1 + 64);
  if (!v9)
  {
    char v25 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)char v40 = 136315138;
      *(void *)&v40[4] = "/System/Library/Frameworks/CoreTelephony.framework/Support/CompressionConfig.plist";
      _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "[Init]Failed to load config from path: %s", v40, 0xCu);
    }
    sub_100023950((uint64_t)v40, a3);
    sub_1002BE0E4(v5 - 16);
  }
  (*(void (**)(uint8_t *__return_ptr))(*(void *)v9 + 24))(v40);
  int v10 = v42;
  uint64_t v11 = *v7;
  BOOL v12 = os_log_type_enabled(*v7, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_WORD *)buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I [Init][Using: Override] To fetch lang -> path map", buf, 2u);
      if (!(_BYTE)v42) {
        sub_10016C840();
      }
    }
  }
  else if (v12)
  {
    *(_WORD *)buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I [Init][Using: Trial] To fetch lang -> path map", buf, 2u);
  }
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 64) + 16))(buf);
  uint64_t v13 = a1 + 112;
  sub_10010C0E0(a1 + 104, *(void **)(a1 + 112));
  char v14 = *(void **)&buf[8];
  *(void *)(a1 + 104) = *(void *)buf;
  *(void *)(a1 + 112) = v14;
  uint64_t v15 = v37;
  *(void *)(a1 + 120) = v37;
  if (v15)
  {
    v14[2] = v13;
    *(void *)buf = &buf[8];
    *(void *)&buf[8] = 0;
    uint64_t v37 = 0;
    char v14 = 0;
  }
  else
  {
    *(void *)(a1 + 104) = v13;
  }
  sub_10010C0E0((uint64_t)buf, v14);
  if ((_BYTE)v42) {
    sub_10010C0E0((uint64_t)v40, *(void **)&v40[8]);
  }
  if (!*(void *)(a1 + 120))
  {
    BOOL v26 = *v7;
    if (os_log_type_enabled(*v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v40 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "[Init]Couldn't construct language to path map", v40, 2u);
    }
    sub_100023950((uint64_t)v40, a3);
    sub_1002BE1D4(v5 - 16);
  }
  memset(v31, 0, sizeof(v31));
  *(void *)&v40[8] = 0;
  int v41 = 0;
  *(void *)char v40 = &v40[8];
  uint64_t v16 = *(void ***)(a1 + 104);
  unint64_t v17 = (uint64_t **)&v40[8];
  if (v16 != (void **)(a1 + 112))
  {
    do
    {
      sub_100046BAC((uint64_t **)v40, v16 + 7, (uint64_t)(v16 + 7));
      xpc_object_t v18 = (void **)v16[1];
      if (v18)
      {
        do
        {
          uint64_t v19 = v18;
          xpc_object_t v18 = (void **)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          uint64_t v19 = (void **)v16[2];
          BOOL v20 = *v19 == v16;
          uint64_t v16 = v19;
        }
        while (!v20);
      }
      uint64_t v16 = v19;
    }
    while (v19 != (void **)(a1 + 112));
    unint64_t v17 = *(uint64_t ***)v40;
  }
  sub_1002BF8D4(v17, (uint64_t **)&v40[8], v31);
  sub_10005CD2C((uint64_t)v40, *(char **)&v40[8]);
  long long v30 = 0uLL;
  *(void *)char v40 = "StewieCompressionManagerImpl";
  sub_1002BFAE4((char **)v40, (dispatch_object_t *)v5, &v30);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v28, *(Registry **)(a1 + 48));
  ctu::RestModule::connect();
  if (v29) {
    sub_10004D2C8(v29);
  }
  rest::GetCompressionCodecIdsArgs::GetCompressionCodecIdsArgs();
  *(void *)buf = a1;
  xpc_object_t v21 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v21 || (v22 = *(void *)(a1 + 8), (uint64_t v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    sub_100088B9C();
  }
  *(void *)&buf[8] = v22;
  uint64_t v37 = v23;
  atomic_fetch_add_explicit(&v23->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v23);
  long long v38 = v30;
  if (*((void *)&v30 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v30 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_100023950((uint64_t)v39, a3);
  xpc_object_t v35 = 0;
  rest::write_rest_value();
  sub_100058DB0(&__p, "/helper/requests/get_compression_codec_ids");
  xpc_object_t object = v35;
  xpc_object_t v35 = xpc_null_create();
  *(_OWORD *)char v40 = *(_OWORD *)buf;
  int v41 = v37;
  *(void *)&buf[8] = 0;
  uint64_t v37 = 0;
  long long v42 = v38;
  long long v38 = 0uLL;
  sub_100023950((uint64_t)v43, (uint64_t)v39);
  int v45 = 0;
  char v24 = (char *)operator new(0x50uLL);
  *(void *)char v24 = off_1019B4638;
  *(_OWORD *)(v24 + 8) = *(_OWORD *)v40;
  *((void *)v24 + 3) = v41;
  *(void *)&v40[8] = 0;
  int v41 = 0;
  *((_OWORD *)v24 + 2) = v42;
  long long v42 = 0uLL;
  sub_100023950((uint64_t)(v24 + 48), (uint64_t)v43);
  int v45 = v24;
  ctu::RestModule::sendRequest();
  sub_10003F600(v44);
  sub_100060644(v43);
  if (*((void *)&v42 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v42 + 1));
  }
  if (v41) {
    std::__shared_weak_count::__release_weak(v41);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v34 < 0) {
    operator delete(__p);
  }
  xpc_release(v35);
  sub_100060644(v39);
  if (*((void *)&v38 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v38 + 1));
  }
  if (v37) {
    std::__shared_weak_count::__release_weak(v37);
  }
  *(void *)char v40 = &v27;
  sub_100047F64((void ***)v40);
  if (*((void *)&v30 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v30 + 1));
  }
  *(void *)char v40 = v31;
  sub_100047F64((void ***)v40);
}

void sub_1002BDFB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,xpc_object_t a27,uint64_t a28)
{
  if (*(unsigned char *)(v28 - 168)) {
    sub_10010C0E0(v28 - 192, *(void **)(v28 - 184));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002BE0E4(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002BE1D4(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void *sub_1002BE2C4(void *a1)
{
  sub_100060644(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_1002BE308(uint64_t a1, long long **a2)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));

  return sub_10135BD34(a2, a1 + 104, (void *)(a1 + 80), (id *)(a1 + 40));
}

void sub_1002BE354(uint64_t a1, unsigned int a2, void *a3, uint64_t a4)
{
  uint64_t v8 = a1 + 24;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if (!*(void *)(v8 + 72))
  {
    BOOL v20 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Unexpected invocation for decompress. Init either failed or is in progress", buf, 2u);
    }
    sub_1002C08B8((uint64_t)buf, a4);
    sub_1002BE8D8(v8 - 16);
  }
  uint64_t v9 = *(void *)(a1 + 88);
  if (!v9) {
    goto LABEL_13;
  }
  uint64_t v10 = a1 + 88;
  do
  {
    unsigned int v11 = *(_DWORD *)(v9 + 32);
    BOOL v12 = v11 >= a2;
    if (v11 >= a2) {
      uint64_t v13 = (uint64_t *)v9;
    }
    else {
      uint64_t v13 = (uint64_t *)(v9 + 8);
    }
    if (v12) {
      uint64_t v10 = v9;
    }
    uint64_t v9 = *v13;
  }
  while (*v13);
  if (v10 == a1 + 88 || *(_DWORD *)(v10 + 32) > a2)
  {
LABEL_13:
    char v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)buf = 67109120;
      *(_DWORD *)&buf[4] = a2;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "No codec with id: %u exists", buf, 8u);
    }
    sub_1002C08B8((uint64_t)buf, a4);
    uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
    if (v15)
    {
      if (std::__shared_weak_count::lock(v15)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  if (*a3 == a3[1])
  {
    sub_1002C08B8((uint64_t)buf, a4);
    sub_1002BE9C8(v8 - 16);
  }
  long long v26 = 0uLL;
  *(void *)buf = "StewieCompressionManagerImpl";
  sub_1002BFAE4((char **)buf, (dispatch_object_t *)v8, &v26);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v24, *(Registry **)(a1 + 48));
  ctu::RestModule::connect();
  if (v25) {
    sub_10004D2C8(v25);
  }
  rest::DecompressTextArg::DecompressTextArg();
  *(void *)&long long v31 = a1;
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v16 || (uint64_t v17 = *(void *)(a1 + 8), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
    sub_100088B9C();
  }
  *((void *)&v31 + 1) = v17;
  xpc_object_t v32 = v18;
  atomic_fetch_add_explicit(&v18->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  long long v33 = v26;
  if (*((void *)&v26 + 1)) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v26 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  sub_1002C08B8((uint64_t)v34, a4);
  xpc_object_t v30 = 0;
  rest::write_rest_value();
  sub_100058DB0(&__p, "/helper/requests/decompress_text");
  xpc_object_t object = v30;
  xpc_object_t v30 = xpc_null_create();
  *(_OWORD *)buf = v31;
  v36 = v32;
  *((void *)&v31 + 1) = 0;
  xpc_object_t v32 = 0;
  long long v37 = v33;
  long long v33 = 0uLL;
  sub_1002C08B8((uint64_t)v38, (uint64_t)v34);
  char v40 = 0;
  uint64_t v19 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v19 = off_1019B46B8;
  *(_OWORD *)(v19 + 8) = *(_OWORD *)buf;
  *((void *)v19 + 3) = v36;
  *(void *)&buf[8] = 0;
  v36 = 0;
  *((_OWORD *)v19 + 2) = v37;
  long long v37 = 0uLL;
  sub_1002C08B8((uint64_t)(v19 + 48), (uint64_t)v38);
  char v40 = v19;
  ctu::RestModule::sendRequest();
  sub_10003F600(v39);
  sub_1002BF950(v38);
  if (*((void *)&v37 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v37 + 1));
  }
  if (v36) {
    std::__shared_weak_count::__release_weak(v36);
  }
  xpc_release(object);
  xpc_object_t object = 0;
  if (v29 < 0) {
    operator delete(__p);
  }
  xpc_release(v30);
  sub_1002BF950(v34);
  if (*((void *)&v33 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v33 + 1));
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v23) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (*((void *)&v26 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v26 + 1));
  }
}

void sub_1002BE808(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,xpc_object_t a27,char a28)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002BE8D8(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002BE9C8(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void *sub_1002BEAB8(void *a1)
{
  sub_1002BF950(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

uint64_t sub_1002BEAFC(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1002BEB40(uint64_t a1, int a2, uint64_t *a3, uint64_t **a4, void *a5, uint64_t *a6)
{
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if (*a5 == a5[1]) {
    __assert_rtn("compressInternal", "StewieCompressionManager_ios.cpp", 238, "!codecPathsToAttempt.empty()");
  }
  BOOL v12 = *a4;
  if (!*a4) {
    __assert_rtn("compressInternal", "StewieCompressionManager_ios.cpp", 239, "!!inputPtr");
  }
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  if (*v12 == v14) {
    __assert_rtn("compressInternal", "StewieCompressionManager_ios.cpp", 240, "!((*inputPtr).empty())");
  }
  rest::CompressTextArg::CompressTextArg();
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v15 || (uint64_t v16 = *(void *)(a1 + 8), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    sub_100088B9C();
  }
  xpc_object_t v18 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v17);
  uint64_t v20 = *a3;
  uint64_t v19 = (std::__shared_weak_count *)a3[1];
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v21 = v14 - v13;
  uint64_t v23 = *a6;
  char v22 = (std::__shared_weak_count *)a6[1];
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v25 = v21;
  xpc_object_t v40 = 0;
  rest::write_rest_value();
  sub_100058DB0(&v38, "/helper/requests/compress_text");
  xpc_object_t v37 = v40;
  xpc_object_t v40 = xpc_null_create();
  uint64_t v28 = (void **)a1;
  uint64_t v29 = v16;
  xpc_object_t v30 = v18;
  uint64_t v31 = v20;
  xpc_object_t v32 = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v33 = v23;
  char v34 = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v35 = v25;
  int v36 = a2;
  long long v42 = 0;
  uint64_t v24 = operator new(0x50uLL);
  *uint64_t v24 = off_1019B4738;
  v24[1] = a1;
  unint64_t v24[2] = v16;
  v24[3] = v18;
  uint64_t v29 = 0;
  xpc_object_t v30 = 0;
  v24[4] = v20;
  v24[5] = v19;
  if (v19) {
    atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v24[6] = v23;
  v24[7] = v22;
  if (v22) {
    atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v24[8] = v35;
  *((_DWORD *)v24 + 18) = v36;
  long long v42 = v24;
  ctu::RestModule::sendRequest();
  sub_10003F600(v41);
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if (v39 < 0) {
    operator delete(v38);
  }
  xpc_release(v40);
  if (v22) {
    sub_10004D2C8(v22);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  uint64_t v28 = (void **)&v27;
  sub_100047F64(&v28);
  if (__p) {
    operator delete(__p);
  }
}

void sub_1002BEE68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,char a25)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002BEF00(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

uint64_t sub_1002BEF48(uint64_t a1)
{
  uint64_t v4 = (void **)(a1 + 24);
  sub_100047F64(&v4);
  uint64_t v2 = *(void **)a1;
  if (*(void *)a1)
  {
    *(void *)(a1 + 8) = v2;
    operator delete(v2);
  }
  return a1;
}

void sub_1002BEF94(uint64_t a1, int a2, char **a3, uint64_t a4)
{
  uint64_t v8 = a1 + 24;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 24));
  if (!*(void *)(v8 + 72) || *(void *)(a1 + 128) == *(void *)(a1 + 136))
  {
    long long v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Unexpected invocation for decompress. Init either failed or is in progress", buf, 2u);
    }
    sub_1002C1BE0((uint64_t)buf, a4);
    sub_1002BF57C(v8 - 16);
  }
  if (*a3 == a3[1])
  {
    sub_1002C1BE0((uint64_t)buf, a4);
    sub_1002BF66C(v8 - 16);
  }
  uint64_t v48 = 0;
  v49 = 0;
  *(void *)buf = "StewieCompressionManagerImpl";
  sub_1002BFAE4((char **)buf, (dispatch_object_t *)v8, &v48);
  Registry::createRestModuleOneTimeUseMobileHelperConnection(&v46, *(Registry **)(a1 + 48));
  ctu::RestModule::connect();
  if (v47) {
    sub_10004D2C8(v47);
  }
  char v44 = 0;
  int v45 = 0;
  sub_1002C1DC8((uint64_t)a3, &v44);
  uint64_t v9 = (std::__shared_weak_count *)operator new(0x38uLL);
  v9->__shared_owners_ = 0;
  v9->__shared_weak_owners_ = 0;
  v9->__vftable = (std::__shared_weak_count_vtbl *)off_1019B4808;
  sub_1002C1BE0((uint64_t)&v9[1], a4);
  long long v42 = v9 + 1;
  int v43 = v9;
  if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 136) - *(void *)(a1 + 128)) >> 3) > 2)
  {
    sub_10012CD04(&v40, *a3, a3[1], a3[1] - *a3);
    rest::RecognizeLanguageArg::RecognizeLanguageArg();
    uint64_t v27 = (uint8_t *)a1;
    uint64_t v17 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v17 || (v18 = *(void *)(a1 + 8), (uint64_t v19 = std::__shared_weak_count::lock(v17)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v20 = v19;
    unint64_t v28 = v18;
    uint64_t v29 = v19;
    atomic_fetch_add_explicit(&v19->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v19);
    uint64_t v21 = v48;
    char v22 = v49;
    uint64_t v30 = v48;
    uint64_t v31 = v49;
    if (v49) {
      atomic_fetch_add_explicit(&v49->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    long long v42 = 0;
    int v43 = 0;
    int v34 = a2;
    uint64_t v24 = v44;
    uint64_t v23 = v45;
    char v44 = 0;
    int v45 = 0;
    xpc_object_t v53 = 0;
    rest::write_rest_value();
    sub_100058DB0(&__p, "/helper/requests/recognize_language_for_text");
    xpc_object_t object = v53;
    xpc_object_t v53 = xpc_null_create();
    *(void *)buf = a1;
    unint64_t v55 = v18;
    unint64_t v56 = (unint64_t)v20;
    unint64_t v28 = 0;
    uint64_t v29 = 0;
    uint64_t v57 = v21;
    uint64_t v58 = v22;
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    v59 = v9 + 1;
    v60 = v9;
    uint64_t v32 = 0;
    uint64_t v33 = 0;
    int v61 = a2;
    v62 = v24;
    v63 = v23;
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    v65 = 0;
    uint64_t v25 = operator new(0x58uLL);
    void *v25 = off_1019B4858;
    v25[1] = a1;
    v25[2] = v18;
    v25[3] = v20;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    v25[4] = v21;
    v25[5] = v22;
    uint64_t v57 = 0;
    uint64_t v58 = 0;
    v25[6] = v9 + 1;
    v25[7] = v9;
    v59 = 0;
    v60 = 0;
    *((_DWORD *)v25 + 16) = a2;
    v25[9] = v24;
    v25[10] = v23;
    v62 = 0;
    v63 = 0;
    v65 = v25;
    ctu::RestModule::sendRequest();
    sub_10003F600(v64);
    xpc_release(object);
    xpc_object_t object = 0;
    if (v52 < 0) {
      operator delete(__p);
    }
    xpc_release(v53);
    *(void *)buf = &v39;
    sub_100047F64((void ***)buf);
    if (v38 < 0) {
      operator delete(v37);
    }
    if (v41 < 0) {
      operator delete(v40);
    }
  }
  else
  {
    *(void *)buf = 0;
    unint64_t v55 = 0;
    unint64_t v56 = 0;
    uint64_t v10 = *(void **)(a1 + 80);
    if (v10 != (void *)(a1 + 88))
    {
      unint64_t v11 = 0;
      do
      {
        BOOL v12 = (long long *)(v10 + 5);
        if (v11 >= v56)
        {
          unint64_t v11 = sub_100048008((uint64_t *)buf, v12);
        }
        else
        {
          if (*((char *)v10 + 63) < 0)
          {
            sub_10004FC84((unsigned char *)v11, (void *)v10[5], v10[6]);
          }
          else
          {
            long long v13 = *v12;
            *(void *)(v11 + 16) = v10[7];
            *(_OWORD *)unint64_t v11 = v13;
          }
          v11 += 24;
        }
        unint64_t v55 = v11;
        uint64_t v14 = (void *)v10[1];
        if (v14)
        {
          do
          {
            uint64_t v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            uint64_t v15 = (void *)v10[2];
            BOOL v16 = *v15 == (void)v10;
            uint64_t v10 = v15;
          }
          while (!v16);
        }
        uint64_t v10 = v15;
      }
      while (v15 != (void *)(a1 + 88));
    }
    sub_1002BEB40(a1, a2, &v48, &v44, buf, (uint64_t *)&v42);
    uint64_t v27 = buf;
    sub_100047F64((void ***)&v27);
    if (v43) {
      sub_10004D2C8(v43);
    }
  }
  if (v45) {
    sub_10004D2C8(v45);
  }
  if (v49) {
    sub_10004D2C8(v49);
  }
}

void sub_1002BF44C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,std::__shared_weak_count *a34,uint64_t a35,std::__shared_weak_count *a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,xpc_object_t object,void *__p,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  a10 = v47 - 208;
  sub_100047F64((void ***)&a10);
  if (a34) {
    sub_10004D2C8(a34);
  }
  if (a36) {
    sub_10004D2C8(a36);
  }
  if (a40) {
    sub_10004D2C8(a40);
  }
  _Unwind_Resume(a1);
}

void sub_1002BF57C(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002BF66C(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 8);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void *sub_1002BF75C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

uint64_t sub_1002BF7B0(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 32);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1002BF7FC(uint64_t a1)
{
  *(void *)a1 = off_1019B44F0;
  uint64_t v5 = (void **)(a1 + 128);
  sub_100047F64(&v5);
  sub_10010C0E0(a1 + 104, *(void **)(a1 + 112));
  sub_1000886C0(a1 + 80, *(char **)(a1 + 88));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 72);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1002BF89C(uint64_t a1)
{
  sub_1002BF7FC(a1);

  operator delete();
}

uint64_t **sub_1002BF8D4(uint64_t **result, uint64_t **a2, uint64_t *a3)
{
  uint64_t v8 = a3;
  if (result != a2)
  {
    uint64_t v4 = result;
    do
    {
      result = sub_1000D8C94(&v8, (long long *)v4 + 2);
      uint64_t v5 = v4[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = (uint64_t **)v5;
          uint64_t v5 = (uint64_t *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (uint64_t **)v4[2];
          BOOL v7 = *v6 == (uint64_t *)v4;
          uint64_t v4 = v6;
        }
        while (!v7);
      }
      uint64_t v4 = v6;
    }
    while (v6 != a2);
  }
  return result;
}

void *sub_1002BF950(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1002BF9D4(void **a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *a1;
  sub_1000607A8((uint64_t)v3, 0);
  sub_1002BFA38(&v3);
  return sub_100046B58((uint64_t *)&v2);
}

void sub_1002BFA1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void **sub_1002BFA38(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_100060644(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_1002BFA80(void **a1)
{
  uint64_t v2 = a1;
  uint64_t v3 = *a1;
  sub_1000607A8((uint64_t)v3, 0);
  sub_1002BFA38(&v3);
  return sub_100046B58((uint64_t *)&v2);
}

void sub_1002BFAC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

void *sub_1002BFAE4@<X0>(char **a1@<X1>, dispatch_object_t *a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0x28uLL);
  result = sub_1002BFB48(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;
  return result;
}

void sub_1002BFB34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002BFB48(void *a1, char **a2, dispatch_object_t *a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1019B45E8;
  sub_1002BFC2C((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_1002BFB90(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002BFBA4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B45E8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002BFBC4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B45E8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002BFC18(uint64_t a1)
{
  v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t sub_1002BFC2C(uint64_t a1, char **a2, dispatch_object_t *a3)
{
  sub_100058DB0(&__p, *a2);
  uint64_t v6 = *a3;
  if (*a3) {
    dispatch_retain(*a3);
  }
  ctu::RestModule::RestModule();
  if (v6) {
    dispatch_release(v6);
  }
  if (v8 < 0) {
    operator delete(__p);
  }
  return a1;
}

void sub_1002BFCB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (object) {
    dispatch_release(object);
  }
  if (a11) {
    dispatch_release(a11);
  }
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002BFCEC(void *a1)
{
  *a1 = off_1019B4638;
  sub_100060644(a1 + 6);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1002BFD48(void *a1)
{
  *a1 = off_1019B4638;
  sub_100060644(a1 + 6);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_1002BFDC4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = off_1019B4638;
  sub_1002C0730((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1002BFE18(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002BFE2C(uint64_t a1, void *a2)
{
  *a2 = off_1019B4638;
  return sub_1002C0730((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1002BFE58(uint64_t a1)
{
}

void sub_1002BFE60(void *a1)
{
  sub_1002C07BC(a1 + 1);

  operator delete(a1);
}

void sub_1002BFE9C(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int64x2_t v55 = 0uLL;
  unint64_t v56 = 0;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v3);
    xpc_object_t v4 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
  }
  for (uint64_t i = v55.i64[1]; i != v55.i64[0]; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  v55.i64[1] = v55.i64[0];
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    sub_100048BF4((void **)buf, &object, 0);
    xpc_release(object);
    xpc_object_t object = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v4);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v58, &object, count);
    xpc_release(object);
    for (j = *(void **)&buf[8]; j != v58[1] || *(void **)buf != v58[0]; j = (void *)++*(void *)&buf[8])
    {
      v57[0] = buf;
      v57[1] = j;
      if (v55.i64[1] >= (unint64_t)v56)
      {
        uint64_t v9 = (v55.i64[1] - v55.i64[0]) >> 5;
        if ((unint64_t)(v9 + 1) >> 59) {
          sub_10006A748();
        }
        unint64_t v10 = (uint64_t)&v56[-v55.i64[0]] >> 4;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)&v56[-v55.i64[0]] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        v62 = &v56;
        if (v11)
        {
          if (v11 >> 59) {
            sub_10006A7CC();
          }
          BOOL v12 = (char *)operator new(32 * v11);
        }
        else
        {
          BOOL v12 = 0;
        }
        xpc_object_t object = v12;
        v60.i64[0] = (uint64_t)&v12[32 * v9];
        v60.i64[1] = v60.i64[0];
        int v61 = &v12[32 * v11];
        rest::CompressionCodecInfo::CompressionCodecInfo((rest::CompressionCodecInfo *)v60.i64[0]);
        uint64_t v13 = v60.i64[0];
        uint64_t v8 = v60.i64[1] + 32;
        v60.i64[1] += 32;
        uint64_t v14 = v55.i64[1];
        uint64_t v15 = v55.i64[0];
        if (v55.i64[1] == v55.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v55.u64[1]);
        }
        else
        {
          do
          {
            int v16 = *(_DWORD *)(v14 - 32);
            v14 -= 32;
            *(_DWORD *)(v13 - 32) = v16;
            v13 -= 32;
            long long v17 = *(_OWORD *)(v14 + 8);
            *(void *)(v13 + 24) = *(void *)(v14 + 24);
            *(_OWORD *)(v13 + 8) = v17;
            *(void *)(v14 + 16) = 0;
            *(void *)(v14 + 24) = 0;
            *(void *)(v14 + 8) = 0;
          }
          while (v14 != v15);
          int64x2_t v18 = v55;
          uint64_t v8 = v60.i64[1];
        }
        v55.i64[0] = v13;
        v55.i64[1] = v8;
        int64x2_t v60 = v18;
        uint64_t v19 = v56;
        unint64_t v56 = v61;
        int v61 = v19;
        xpc_object_t object = (xpc_object_t)v18.i64[0];
        sub_100255B70((uint64_t)&object);
      }
      else
      {
        rest::CompressionCodecInfo::CompressionCodecInfo((rest::CompressionCodecInfo *)v55.i64[1]);
        uint64_t v8 = v55.i64[1] + 32;
      }
      v55.i64[1] = v8;
      sub_1000492E0((uint64_t)v57, &object);
      rest::read_rest_value((rest *)(v8 - 32), (rest::CompressionCodecInfo *)&object, v20);
      xpc_release(object);
    }
    xpc_release(*(xpc_object_t *)buf);
    xpc_release(*(xpc_object_t *)buf);
  }
  xpc_release(v4);
  uint64_t v21 = (std::__shared_weak_count *)a1[3];
  if (v21)
  {
    uint64_t v22 = a1[1];
    uint64_t v23 = std::__shared_weak_count::lock(v21);
    if (v23)
    {
      uint64_t v24 = v23;
      if (a1[2])
      {
        uint64_t v25 = v55.i64[1];
        uint64_t v26 = v55.i64[0];
        if (v55.i64[0] == v55.i64[1])
        {
          uint64_t v48 = *(NSObject **)(v22 + 40);
          if (os_log_type_enabled(v48, OS_LOG_TYPE_ERROR))
          {
            LOWORD(object) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_ERROR, "No codecs found on disk", (uint8_t *)&object, 2u);
          }
          sub_1000607A8((uint64_t)(a1 + 6), 0);
        }
        else
        {
          char v52 = a1;
          xpc_object_t v53 = v23;
          v54 = v3;
          int64x2_t v60 = 0uLL;
          xpc_object_t object = &v60;
          uint64_t v27 = (uint64_t **)(v22 + 88);
          while ((rest::CompressionCodecInfo::isValid((rest::CompressionCodecInfo *)v26) & 1) != 0)
          {
            unint64_t v28 = (uint64_t *)(v26 + 8);
            sub_100046BAC((uint64_t **)&object, (void **)(v26 + 8), v26 + 8);
            uint64_t v29 = *(NSObject **)(v22 + 40);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v30 = v26 + 8;
              if (*(char *)(v26 + 31) < 0) {
                uint64_t v30 = *v28;
              }
              unsigned int v31 = *(_DWORD *)v26;
              *(_DWORD *)buf = 136315394;
              *(void *)&buf[4] = v30;
              *(_WORD *)&buf[12] = 1024;
              *(_DWORD *)&buf[14] = v31;
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I Found codec (path: %s, id: %u)", buf, 0x12u);
            }
            unsigned int v32 = *(_DWORD *)v26;
            uint64_t v33 = *v27;
            int v34 = (uint64_t **)(v22 + 88);
            uint64_t v35 = (uint64_t **)(v22 + 88);
            if (*v27)
            {
              while (1)
              {
                while (1)
                {
                  uint64_t v35 = (uint64_t **)v33;
                  unsigned int v36 = *((_DWORD *)v33 + 8);
                  if (v36 <= v32) {
                    break;
                  }
                  uint64_t v33 = *v35;
                  int v34 = v35;
                  if (!*v35) {
                    goto LABEL_59;
                  }
                }
                if (v36 >= v32) {
                  break;
                }
                uint64_t v33 = v35[1];
                if (!v33)
                {
                  int v34 = v35 + 1;
                  goto LABEL_59;
                }
              }
            }
            else
            {
LABEL_59:
              xpc_object_t v37 = (char *)operator new(0x40uLL);
              *((_DWORD *)v37 + 8) = v32;
              long long v38 = *(_OWORD *)v28;
              *((void *)v37 + 7) = *(void *)(v26 + 24);
              *(_OWORD *)(v37 + 40) = v38;
              *(void *)(v26 + 16) = 0;
              *(void *)(v26 + 24) = 0;
              *unint64_t v28 = 0;
              sub_100046C38((uint64_t **)(v22 + 80), (uint64_t)v35, v34, (uint64_t *)v37);
            }
            v26 += 32;
            if (v26 == v25)
            {
              uint64_t v39 = *(uint64_t **)(v22 + 104);
              if (v39 != (uint64_t *)(v22 + 112))
              {
                do
                {
                  if (&v60 == (int64x2_t *)sub_100046F68((uint64_t)&object, (void **)v39 + 7))
                  {
                    long long v42 = sub_10006C514((uint64_t **)(v22 + 104), v39);
                    sub_1000FECD4((uint64_t)(v39 + 4));
                    operator delete(v39);
                  }
                  else
                  {
                    unint64_t v40 = *(void *)(v22 + 136);
                    if (v40 >= *(void *)(v22 + 144))
                    {
                      uint64_t v41 = sub_100048008((uint64_t *)(v22 + 128), (long long *)v39 + 2);
                    }
                    else
                    {
                      sub_1000D87F8((void *)(v22 + 128), (long long *)v39 + 2);
                      uint64_t v41 = v40 + 24;
                    }
                    *(void *)(v22 + 136) = v41;
                    int v43 = (uint64_t *)v39[1];
                    if (v43)
                    {
                      do
                      {
                        long long v42 = v43;
                        int v43 = (uint64_t *)*v43;
                      }
                      while (v43);
                    }
                    else
                    {
                      do
                      {
                        long long v42 = (uint64_t *)v39[2];
                        BOOL v44 = *v42 == (void)v39;
                        uint64_t v39 = v42;
                      }
                      while (!v44);
                    }
                  }
                  uint64_t v39 = v42;
                }
                while (v42 != (uint64_t *)(v22 + 112));
              }
              uint64_t v46 = *(void *)(v22 + 128);
              uint64_t v45 = *(void *)(v22 + 136);
              if (0xAAAAAAAAAAAAAAABLL * ((v45 - v46) >> 3) != *(void *)(v22 + 120)) {
                __assert_rtn("operator()", "StewieCompressionManager_ios.cpp", 165, "fAvailableLanguages.size() == fLanguageToPathMap.size()");
              }
              uint64_t v47 = *(NSObject **)(v22 + 40);
              if (v46 == v45)
              {
                if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
                {
                  *(_WORD *)buf = 0;
                  _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "No available languages", buf, 2u);
                }
              }
              else if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I Initialization complete", buf, 2u);
              }
              sub_1000607A8((uint64_t)(v52 + 6), v46 != v45);
              goto LABEL_83;
            }
          }
          v49 = *(NSObject **)(v22 + 40);
          if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v50 = (void *)(v26 + 8);
            if (*(char *)(v26 + 31) < 0) {
              xpc_object_t v50 = (void *)*v50;
            }
            unsigned int v51 = *(_DWORD *)v26;
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = v50;
            *(_WORD *)&buf[12] = 1024;
            *(_DWORD *)&buf[14] = v51;
            _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "Unexpected: All codec infos must be valid. Received invalid value: (path: %s, id: %u)", buf, 0x12u);
          }
          uint64_t v3 = v54;
          sub_1000607A8((uint64_t)(v52 + 6), 0);
LABEL_83:
          sub_10005CD2C((uint64_t)&object, (char *)v60.i64[0]);
          uint64_t v24 = v53;
        }
      }
      sub_10004D2C8(v24);
    }
  }
  xpc_object_t object = &v55;
  sub_1002C0864((void ***)&object);
  xpc_release(v3);
}

void sub_1002C05B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t a21,uint64_t a22,xpc_object_t object,char *a24)
{
  sub_10005CD2C((uint64_t)&object, a24);
  sub_10004D2C8(a11);
  *(void *)(v25 - 128) = &a15;
  sub_1002C0864((void ***)(v25 - 128));
  xpc_release(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C06E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002C0724()
{
}

uint64_t sub_1002C0730(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DFC90(a1 + 40, a2 + 40);
  return a1;
}

void sub_1002C0798(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C07BC(void *a1)
{
  sub_100060644(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_1002C0814(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 32)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_1002C0864(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_1002C0814((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

uint64_t sub_1002C08B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_1002C0938(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  long long __p = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  uint64_t v2 = v1[3];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, &__p);
  if (__p)
  {
    BOOL v7 = __p;
    operator delete(__p);
  }
  sub_1002C09F0(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1002C09C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1002C09F0(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void **sub_1002C09F0(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1002BF950(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_1002C0A38(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  long long __p = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  uint64_t v2 = v1[3];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, &__p);
  if (__p)
  {
    BOOL v7 = __p;
    operator delete(__p);
  }
  sub_1002C09F0(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1002C0AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1002C09F0(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002C0AF0(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  long long __p = 0;
  BOOL v7 = 0;
  uint64_t v8 = 0;
  uint64_t v2 = v1[3];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 48))(v2, &__p);
  if (__p)
  {
    BOOL v7 = __p;
    operator delete(__p);
  }
  sub_1002C09F0(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1002C0B7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1002C09F0(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void *sub_1002C0BA8(void *a1)
{
  *a1 = off_1019B46B8;
  sub_1002BF950(a1 + 6);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_1002C0C04(void *a1)
{
  *a1 = off_1019B46B8;
  sub_1002BF950(a1 + 6);
  uint64_t v2 = (std::__shared_weak_count *)a1[5];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_1002C0C80(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = off_1019B46B8;
  sub_1002C102C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1002C0CD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C0CE8(uint64_t a1, void *a2)
{
  *a2 = off_1019B46B8;
  return sub_1002C102C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1002C0D14(uint64_t a1)
{
}

void sub_1002C0D1C(void *a1)
{
  sub_1002C1120(a1 + 1);

  operator delete(a1);
}

void sub_1002C0D58(void *a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  uint64_t v16 = 0;
  long long v14 = 0u;
  *(_OWORD *)long long __p = 0u;
  *(_OWORD *)uint64_t v13 = 0u;
  rest::DecompressTextResult::DecompressTextResult((rest::DecompressTextResult *)v13);
  rest::read_rest_value((rest *)v13, (rest::DecompressTextResult *)&object, v3);
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4)
  {
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      BOOL v7 = v6;
      if (a1[2])
      {
        if (rest::DecompressTextResult::isValid((rest::DecompressTextResult *)v13))
        {
          uint64_t v8 = a1[9];
          if (!v8) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, void **))(*(void *)v8 + 48))(v8, __p);
        }
        else
        {
          uint64_t v9 = *(NSObject **)(v5 + 40);
          if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
          {
            unint64_t v11 = &v13[1];
            if (v14 < 0) {
              unint64_t v11 = (void **)v13[1];
            }
            *(_DWORD *)buf = 67109634;
            *(_DWORD *)&buf[4] = v13[0];
            *(_WORD *)int64x2_t v18 = 2080;
            *(void *)&unint64_t v18[2] = v11;
            *(_WORD *)&v18[10] = 2048;
            *(void *)&v18[12] = (char *)__p[1] - (char *)__p[0];
            _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Decompression returned invalid result: (id: %u, path: %s, decompressed size: %zu)", buf, 0x1Cu);
          }
          *(void *)buf = 0;
          *(void *)int64x2_t v18 = 0;
          *(void *)&v18[8] = 0;
          uint64_t v10 = a1[9];
          if (!v10) {
            sub_10007B600();
          }
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v10 + 48))(v10, buf);
          if (*(void *)buf)
          {
            *(void *)int64x2_t v18 = *(void *)buf;
            operator delete(*(void **)buf);
          }
        }
      }
      sub_10004D2C8(v7);
    }
  }
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
  xpc_release(object);
}

void sub_1002C0F60(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10004D2C8(v23);
  if (a18) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C0FE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002C1020()
{
}

uint64_t sub_1002C102C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 64);
  if (v5)
  {
    if (v5 == a2 + 40)
    {
      *(void *)(a1 + 64) = a1 + 40;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 64) + 24))(*(void *)(a2 + 64), a1 + 40);
      return a1;
    }
    uint64_t v5 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 16))(v5);
  }
  *(void *)(a1 + 64) = v5;
  return a1;
}

void sub_1002C10FC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 32);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C1120(void *a1)
{
  sub_1002BF950(a1 + 5);
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_1002C1178(void *a1)
{
  *a1 = off_1019B4738;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  return a1;
}

void sub_1002C11DC(void *a1)
{
  *a1 = off_1019B4738;
  uint64_t v2 = (std::__shared_weak_count *)a1[7];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  operator delete();
}

void *sub_1002C1260(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x50uLL);
  void *v2 = off_1019B4738;
  sub_1002C19FC((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1002C12B4(uint64_t a1, void *a2)
{
  *a2 = off_1019B4738;
  return sub_1002C19FC((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1002C12E0(uint64_t a1)
{
}

void sub_1002C12E8(void *a1)
{
  sub_1002C1A60(a1 + 1);

  operator delete(a1);
}

void sub_1002C1324(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int64x2_t v44 = 0uLL;
  xpc_object_t v45 = 0;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v3);
    xpc_object_t v4 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
  }
  for (uint64_t i = v44.i64[1]; i != v44.i64[0]; sub_10005F1F0(i))
    i -= 56;
  v44.i64[1] = v44.i64[0];
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v48, object, 0);
    xpc_release(object[0]);
    object[0] = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v4);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v47, object, count);
    xpc_release(object[0]);
    for (j = v49; j != v47[1] || v48 != v47[0]; j = ++v49)
    {
      v46[0] = &v48;
      v46[1] = j;
      if (v44.i64[1] >= (unint64_t)v45)
      {
        unint64_t v9 = 0x6DB6DB6DB6DB6DB7 * ((v44.i64[1] - v44.i64[0]) >> 3) + 1;
        if (v9 > 0x492492492492492) {
          sub_10006A748();
        }
        if (0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v45 - v44.i64[0]) >> 3) > v9) {
          unint64_t v9 = 0xDB6DB6DB6DB6DB6ELL * (((uint64_t)v45 - v44.i64[0]) >> 3);
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * (((uint64_t)v45 - v44.i64[0]) >> 3)) >= 0x249249249249249) {
          unint64_t v10 = 0x492492492492492;
        }
        else {
          unint64_t v10 = v9;
        }
        object[4] = &v45;
        if (v10)
        {
          if (v10 > 0x492492492492492) {
            sub_10006A7CC();
          }
          unint64_t v11 = (char *)operator new(56 * v10);
        }
        else
        {
          unint64_t v11 = 0;
        }
        object[0] = v11;
        object[1] = &v11[8 * ((v44.i64[1] - v44.i64[0]) >> 3)];
        xpc_object_t object[2] = object[1];
        object[3] = &v11[56 * v10];
        rest::CompressTextResult::CompressTextResult((rest::CompressTextResult *)object[1]);
        BOOL v12 = (char *)object[1];
        uint64_t v8 = (char *)object[2] + 56;
        xpc_object_t object[2] = (char *)object[2] + 56;
        int64x2_t v13 = v44;
        if (v44.i64[1] == v44.i64[0])
        {
          int64x2_t v18 = vdupq_n_s64(v44.u64[1]);
        }
        else
        {
          uint64_t v14 = 0;
          do
          {
            uint64_t v15 = &v12[v14];
            uint64_t v16 = v13.i64[1] + v14;
            *((_DWORD *)v15 - 14) = *(_DWORD *)(v13.i64[1] + v14 - 56);
            long long v17 = *(_OWORD *)(v13.i64[1] + v14 - 48);
            *((void *)v15 - 4) = *(void *)(v13.i64[1] + v14 - 32);
            *((_OWORD *)v15 - 3) = v17;
            *(void *)(v16 - 40) = 0;
            *(void *)(v16 - 32) = 0;
            *(void *)(v16 - 48) = 0;
            *((void *)v15 - 3) = 0;
            *((void *)v15 - 2) = 0;
            *((void *)v15 - 1) = 0;
            *(_OWORD *)(v15 - 24) = *(_OWORD *)(v13.i64[1] + v14 - 24);
            *((void *)v15 - 1) = *(void *)(v13.i64[1] + v14 - 8);
            *(void *)(v16 - 24) = 0;
            *(void *)(v16 - 16) = 0;
            *(void *)(v16 - 8) = 0;
            v14 -= 56;
          }
          while (v13.i64[1] + v14 != v13.i64[0]);
          int64x2_t v18 = v44;
          uint64_t v8 = (char *)object[2];
          v12 += v14;
        }
        v44.i64[0] = (uint64_t)v12;
        v44.i64[1] = (uint64_t)v8;
        *(int64x2_t *)&object[1] = v18;
        uint64_t v19 = v45;
        xpc_object_t v45 = object[3];
        object[3] = v19;
        object[0] = (xpc_object_t)v18.i64[0];
        sub_1002C1ABC((uint64_t)object);
      }
      else
      {
        rest::CompressTextResult::CompressTextResult((rest::CompressTextResult *)v44.i64[1]);
        uint64_t v8 = (char *)(v44.i64[1] + 56);
      }
      v44.i64[1] = (uint64_t)v8;
      sub_1000492E0((uint64_t)v46, object);
      rest::read_rest_value((rest *)(v8 - 56), (rest::CompressTextResult *)object, v20);
      xpc_release(object[0]);
    }
    xpc_release(v48);
    xpc_release(v48);
  }
  xpc_release(v4);
  uint64_t v21 = *(std::__shared_weak_count **)(a1 + 24);
  if (v21)
  {
    uint64_t v22 = *(void *)(a1 + 8);
    uint64_t v23 = std::__shared_weak_count::lock(v21);
    if (v23)
    {
      uint64_t v24 = v23;
      if (*(void *)(a1 + 16))
      {
        uint64_t v25 = v44.i64[0];
        if (v44.i64[1] == v44.i64[0])
        {
LABEL_56:
          uint64_t v33 = *(void *)(a1 + 48);
          memset(object, 0, 24);
          sub_1002C1B0C(*(void *)(v33 + 24), 0);
          xpc_object_t v34 = object[0];
          if (object[0])
          {
LABEL_57:
            object[1] = v34;
            operator delete(v34);
          }
        }
        else
        {
          uint64_t v41 = v22;
          long long v42 = v23;
          int v43 = v3;
          uint64_t v26 = 0;
          unint64_t v27 = 0;
          unsigned __int8 v28 = 0;
          unint64_t v29 = 0;
          int v30 = 0;
          unint64_t v31 = *(void *)(a1 + 64);
          while ((rest::CompressTextResult::isValid((rest::CompressTextResult *)(v25 + v26)) & 1) != 0)
          {
            if (*(_DWORD *)(a1 + 72) == *(_DWORD *)(v25 + v26)) {
              unint64_t v32 = *(void *)(v25 + v26 + 40) - *(void *)(v25 + v26 + 32);
            }
            else {
              unint64_t v32 = *(void *)(v25 + v26 + 40) - *(void *)(v25 + v26 + 32) + 1;
            }
            if (v32 < v31)
            {
              int v30 = 1;
              unint64_t v29 = v27 >> 8;
              unsigned __int8 v28 = v27;
              unint64_t v31 = v32;
            }
            ++v27;
            uint64_t v25 = v44.i64[0];
            v26 += 56;
            if (v27 >= 0x6DB6DB6DB6DB6DB7 * ((v44.i64[1] - v44.i64[0]) >> 3))
            {
              uint64_t v24 = v42;
              uint64_t v3 = v43;
              if (v30 && v31 < *(void *)(a1 + 64))
              {
                sub_1002C1B0C(*(void *)(*(void *)(a1 + 48) + 24), *(unsigned int *)(v44.i64[0] + 56 * (v28 | (v29 << 8))) | (unint64_t)&_mh_execute_header);
                goto LABEL_58;
              }
              goto LABEL_56;
            }
          }
          uint64_t v35 = *(NSObject **)(v41 + 40);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
          {
            xpc_object_t v37 = (int *)(v25 + v26);
            long long v38 = (void *)(v25 + v26 + 8);
            if (*(char *)(v25 + v26 + 31) < 0) {
              long long v38 = (void *)*v38;
            }
            int v39 = *v37;
            unint64_t v40 = (void *)(*((void *)v37 + 5) - *((void *)v37 + 4));
            LODWORD(object[0]) = 136315650;
            *(xpc_object_t *)((char *)object + 4) = v38;
            WORD2(object[1]) = 1024;
            *(_DWORD *)((char *)&object[1] + 6) = v39;
            WORD1(object[2]) = 2048;
            *(xpc_object_t *)((char *)&object[2] + 4) = v40;
            _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Unexpected: All compression results must be valid. Received invalid value: (path: %s, id: %u) [Compressed size: %zu])", (uint8_t *)object, 0x1Cu);
          }
          uint64_t v36 = *(void *)(a1 + 48);
          memset(object, 0, 24);
          sub_1002C1B0C(*(void *)(v36 + 24), 0);
          xpc_object_t v34 = object[0];
          uint64_t v24 = v42;
          uint64_t v3 = v43;
          if (object[0]) {
            goto LABEL_57;
          }
        }
      }
LABEL_58:
      sub_10004D2C8(v24);
    }
  }
  object[0] = &v44;
  sub_1002C1B5C((void ***)object);
  xpc_release(v3);
}

void sub_1002C1898(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t object, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t a19, uint64_t a20,char *a21,uint64_t a22,void *__p,uint64_t a24)
{
  if (__p)
  {
    a24 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10004D2C8(a11);
  a21 = &a13;
  sub_1002C1B5C((void ***)&a21);
  xpc_release(object);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C19B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002C19F0()
{
}

uint64_t sub_1002C19FC(uint64_t result, uint64_t a2)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(_DWORD *)(result + 64) = *(_DWORD *)(a2 + 64);
  *(void *)(result + 56) = v5;
  return result;
}

void sub_1002C1A60(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[4];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_1002C1ABC(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 56;
    sub_10005F1F0(i - 56);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1002C1B0C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)a1 + 48))(a1, &v3);
}

void sub_1002C1B5C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_10005F1F0(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_1002C1BE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_1002C1C60(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  v4[0] = v1;
  memset(&v4[1], 0, 24);
  sub_1002C1B0C(v1[3], 0);
  sub_1002C1CF0(v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1002C1CC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1002C1CF0(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void **sub_1002C1CF0(void **a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1002726E4(v2);
    operator delete();
  }
  return a1;
}

uint64_t *sub_1002C1D38(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  v4[0] = v1;
  memset(&v4[1], 0, 24);
  sub_1002C1B0C(v1[3], 0);
  sub_1002C1CF0(v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_1002C1D9C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, void *__p, uint64_t a13)
{
  if (__p)
  {
    a13 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_1002C1CF0(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void *sub_1002C1DC8@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  uint64_t v4 = operator new(0x30uLL);
  result = sub_1002C1E24(v4, a1);
  *a2 = v4 + 3;
  a2[1] = v4;
  return result;
}

void sub_1002C1E10(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002C1E24(void *a1, uint64_t a2)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1019B47B8;
  a1[4] = 0;
  a1[5] = 0;
  a1[3] = 0;
  sub_10005C928(a1 + 3, *(const void **)a2, *(void *)(a2 + 8), *(void *)(a2 + 8) - *(void *)a2);
  return a1;
}

void sub_1002C1E80(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002C1E94(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B47B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C1EB4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B47B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_1002C1F08(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
}

void sub_1002C1F24(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B4808;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C1F44(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B4808;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_1002C1F98(uint64_t a1)
{
  return sub_1002726E4((void *)(a1 + 24));
}

void *sub_1002C1FA4(void *a1)
{
  *a1 = off_1019B4858;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }
  return a1;
}

void sub_1002C2014(void *a1)
{
  *a1 = off_1019B4858;
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[5];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[3];
  if (v5) {
    std::__shared_weak_count::__release_weak(v5);
  }

  operator delete();
}

void *sub_1002C20A4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_1019B4858;
  sub_1002C2A6C((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_1002C20F8(uint64_t a1, void *a2)
{
  *a2 = off_1019B4858;
  return sub_1002C2A6C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1002C2124(uint64_t a1)
{
}

void sub_1002C212C(void *a1)
{
  sub_1002C2AE0(a1 + 1);

  operator delete(a1);
}

void sub_1002C2168(uint64_t a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  int64x2_t v48 = 0uLL;
  v49 = 0;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    xpc_retain(v3);
    xpc_object_t v4 = v3;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
  }
  for (uint64_t i = v48.i64[1]; i != v48.i64[0]; i -= 32)
  {
    if (*(char *)(i - 9) < 0) {
      operator delete(*(void **)(i - 32));
    }
  }
  v48.i64[1] = v48.i64[0];
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v50, object, 0);
    xpc_release(object[0]);
    object[0] = v4;
    if (v4) {
      xpc_retain(v4);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v4);
    }
    else {
      count = 0;
    }
    sub_100048BF4(__p, object, count);
    xpc_release(object[0]);
    BOOL v7 = v51;
    while (v7 != __p[1] || v50 != __p[0])
    {
      v53[0] = &v50;
      v53[1] = v7;
      if (v48.i64[1] >= (unint64_t)v49)
      {
        uint64_t v9 = (v48.i64[1] - v48.i64[0]) >> 5;
        if ((unint64_t)(v9 + 1) >> 59) {
          sub_10006A748();
        }
        unint64_t v10 = (uint64_t)&v49[-v48.i64[0]] >> 4;
        if (v10 <= v9 + 1) {
          unint64_t v10 = v9 + 1;
        }
        if ((unint64_t)&v49[-v48.i64[0]] >= 0x7FFFFFFFFFFFFFE0) {
          unint64_t v11 = 0x7FFFFFFFFFFFFFFLL;
        }
        else {
          unint64_t v11 = v10;
        }
        object[4] = &v49;
        if (v11)
        {
          if (v11 >> 59) {
            sub_10006A7CC();
          }
          BOOL v12 = (char *)operator new(32 * v11);
        }
        else
        {
          BOOL v12 = 0;
        }
        object[0] = v12;
        object[1] = &v12[32 * v9];
        xpc_object_t object[2] = object[1];
        object[3] = &v12[32 * v11];
        rest::RecognizeLanguageResult::RecognizeLanguageResult((rest::RecognizeLanguageResult *)object[1]);
        int64x2_t v13 = (char *)object[1];
        uint64_t v8 = (char *)object[2] + 32;
        xpc_object_t object[2] = (char *)object[2] + 32;
        uint64_t v14 = v48.i64[1];
        uint64_t v15 = v48.i64[0];
        if (v48.i64[1] == v48.i64[0])
        {
          int64x2_t v17 = vdupq_n_s64(v48.u64[1]);
        }
        else
        {
          do
          {
            long long v16 = *(_OWORD *)(v14 - 32);
            *((void *)v13 - 2) = *(void *)(v14 - 16);
            *((_OWORD *)v13 - 2) = v16;
            *(void *)(v14 - 24) = 0;
            *(void *)(v14 - 16) = 0;
            *(void *)(v14 - 32) = 0;
            *((void *)v13 - 1) = *(void *)(v14 - 8);
            v13 -= 32;
            v14 -= 32;
          }
          while (v14 != v15);
          int64x2_t v17 = v48;
          uint64_t v8 = (char *)object[2];
        }
        v48.i64[0] = (uint64_t)v13;
        v48.i64[1] = (uint64_t)v8;
        *(int64x2_t *)&object[1] = v17;
        int64x2_t v18 = v49;
        v49 = (char *)object[3];
        object[3] = v18;
        object[0] = (xpc_object_t)v17.i64[0];
        sub_1000F5AA0((uint64_t)object);
      }
      else
      {
        rest::RecognizeLanguageResult::RecognizeLanguageResult((rest::RecognizeLanguageResult *)v48.i64[1]);
        uint64_t v8 = (char *)(v48.i64[1] + 32);
      }
      v48.i64[1] = (uint64_t)v8;
      sub_1000492E0((uint64_t)v53, object);
      rest::read_rest_value((rest *)(v8 - 32), (rest::RecognizeLanguageResult *)object, v19);
      xpc_release(object[0]);
      BOOL v7 = (uint64_t *)((char *)v51 + 1);
      unsigned int v51 = (uint64_t *)((char *)v51 + 1);
    }
    xpc_release(v50);
    xpc_release(v50);
  }
  xpc_release(v4);
  uint64_t v20 = *(std::__shared_weak_count **)(a1 + 24);
  if (!v20) {
    goto LABEL_106;
  }
  uint64_t v21 = *(void *)(a1 + 8);
  uint64_t v22 = std::__shared_weak_count::lock(v20);
  if (!v22) {
    goto LABEL_106;
  }
  uint64_t v23 = v22;
  if (!*(void *)(a1 + 16)) {
    goto LABEL_105;
  }
  uint64_t v24 = v48.i64[1];
  uint64_t v25 = v48.i64[0];
  if (v48.i64[0] == v48.i64[1])
  {
    uint64_t v26 = *(NSObject **)(v21 + 40);
    if (!os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v51 = 0;
      uint64_t v52 = 0;
      xpc_object_t v50 = &v51;
      goto LABEL_77;
    }
    LOWORD(object[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I [Prediction]Could not determine language for input for compression", (uint8_t *)object, 2u);
    uint64_t v24 = v48.i64[1];
    uint64_t v25 = v48.i64[0];
  }
  unsigned int v51 = 0;
  uint64_t v52 = 0;
  xpc_object_t v50 = &v51;
  if (v25 == v24)
  {
LABEL_77:
    memset(object, 0, 24);
    goto LABEL_78;
  }
  do
  {
    memset(object, 0, 32);
    if (*(char *)(v25 + 23) < 0)
    {
      sub_10004FC84(object, *(void **)v25, *(void *)(v25 + 8));
    }
    else
    {
      long long v27 = *(_OWORD *)v25;
      xpc_object_t object[2] = *(xpc_object_t *)(v25 + 16);
      *(_OWORD *)xpc_object_t object = v27;
    }
    object[3] = *(xpc_object_t *)(v25 + 24);
    if (rest::RecognizeLanguageResult::isValid((rest::RecognizeLanguageResult *)object))
    {
      if (*(double *)&object[3] > 0.2)
      {
        unsigned __int8 v28 = sub_100046F68(v21 + 104, object);
        if ((void **)(v21 + 112) != v28)
        {
          sub_100046BAC((uint64_t **)&v50, v28 + 7, (uint64_t)(v28 + 7));
          int v29 = 0;
          goto LABEL_62;
        }
        unint64_t v32 = *(NSObject **)(v21 + 40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
        {
          xpc_object_t v34 = object;
          if (SHIBYTE(object[2]) < 0) {
            xpc_object_t v34 = (xpc_object_t *)object[0];
          }
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = v34;
          _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "[Prediction]Unexpected: No path found for language: %s", (uint8_t *)__p, 0xCu);
        }
      }
      int v29 = 5;
    }
    else
    {
      int v30 = *(NSObject **)(v21 + 40);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        uint64_t v33 = object;
        if (SHIBYTE(object[2]) < 0) {
          uint64_t v33 = (xpc_object_t *)object[0];
        }
        LODWORD(__p[0]) = 136315394;
        *(void **)((char *)__p + 4) = v33;
        WORD2(__p[1]) = 2048;
        *(void **)((char *)&__p[1] + 6) = object[3];
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "[Prediction]Invalid result: %s, %f", (uint8_t *)__p, 0x16u);
      }
      uint64_t v31 = *(void *)(a1 + 48);
      memset(__p, 0, 24);
      sub_1002C1B0C(*(void *)(v31 + 24), 0);
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
      int v29 = 1;
    }
LABEL_62:
    if (SHIBYTE(object[2]) < 0) {
      operator delete(object[0]);
    }
    if (v29 != 5 && v29) {
      goto LABEL_104;
    }
    v25 += 32;
  }
  while (v25 != v24);
  memset(object, 0, 24);
  if (v52)
  {
    sub_1002BF8D4((uint64_t **)v50, &v51, (uint64_t *)object);
    goto LABEL_102;
  }
LABEL_78:
  uint64_t v35 = *(void *)(v21 + 88);
  if (!v35) {
    goto LABEL_89;
  }
  unsigned int v36 = *(_DWORD *)(a1 + 64);
  uint64_t v37 = v21 + 88;
  do
  {
    unsigned int v38 = *(_DWORD *)(v35 + 32);
    BOOL v39 = v38 >= v36;
    if (v38 >= v36) {
      unint64_t v40 = (uint64_t *)v35;
    }
    else {
      unint64_t v40 = (uint64_t *)(v35 + 8);
    }
    if (v39) {
      uint64_t v37 = v35;
    }
    uint64_t v35 = *v40;
  }
  while (*v40);
  if (v37 == v21 + 88 || v36 < *(_DWORD *)(v37 + 32))
  {
LABEL_89:
    uint64_t v41 = *(NSObject **)(v21 + 40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_ERROR, "[Prediction]Cannot resolve preferred codec path", (uint8_t *)__p, 2u);
    }
    uint64_t v42 = *(void *)(a1 + 48);
    memset(__p, 0, 24);
    sub_1002C1B0C(*(void *)(v42 + 24), 0);
    if (__p[0])
    {
      __p[1] = __p[0];
      operator delete(__p[0]);
    }
    goto LABEL_103;
  }
  int v43 = *(NSObject **)(v21 + 40);
  if (!os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v45 = (long long *)(v37 + 40);
    goto LABEL_98;
  }
  LOWORD(__p[0]) = 0;
  _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I [Prediction]Falling back to preferred codecId.", (uint8_t *)__p, 2u);
  int64x2_t v44 = (long long *)object[1];
  xpc_object_t v45 = (long long *)(v37 + 40);
  if (object[1] >= object[2])
  {
LABEL_98:
    uint64_t v47 = (void *)sub_100048008((uint64_t *)object, v45);
    goto LABEL_101;
  }
  if (*(char *)(v37 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)object[1], *(void **)(v37 + 40), *(void *)(v37 + 48));
  }
  else
  {
    long long v46 = *v45;
    *((void *)object[1] + 2) = *(void *)(v37 + 56);
    *int64x2_t v44 = v46;
  }
  uint64_t v47 = (char *)v44 + 24;
  object[1] = (char *)v44 + 24;
LABEL_101:
  object[1] = v47;
LABEL_102:
  sub_1002BEB40(v21, *(_DWORD *)(a1 + 64), (uint64_t *)(a1 + 32), (uint64_t **)(a1 + 72), object, (uint64_t *)(a1 + 48));
LABEL_103:
  __p[0] = object;
  sub_100047F64((void ***)__p);
LABEL_104:
  sub_10005CD2C((uint64_t)&v50, (char *)v51);
LABEL_105:
  sub_10004D2C8(v23);
LABEL_106:
  object[0] = &v48;
  sub_1000D82FC((void ***)object);
  xpc_release(v3);
}

void sub_1002C28B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char *a16, char *a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31)
{
  if (__p)
  {
    a31 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a26 < 0) {
    operator delete(object);
  }
  sub_10005CD2C((uint64_t)&a16, a17);
  sub_10004D2C8(v32);
  a16 = &a13;
  sub_1000D82FC((void ***)&a16);
  xpc_release(v31);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C2A20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002C2A60()
{
}

uint64_t sub_1002C2A6C(uint64_t result, uint64_t a2)
{
  *(_OWORD *)result = *(_OWORD *)a2;
  uint64_t v2 = *(void *)(a2 + 16);
  *(void *)(result + 16) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v3 = *(void *)(a2 + 32);
  *(void *)(result + 24) = *(void *)(a2 + 24);
  *(void *)(result + 32) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  *(_DWORD *)(result + 56) = *(_DWORD *)(a2 + 56);
  uint64_t v5 = *(void *)(a2 + 72);
  *(void *)(result + 64) = *(void *)(a2 + 64);
  *(void *)(result + 72) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002C2AE0(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (v5)
  {
    std::__shared_weak_count::__release_weak(v5);
  }
}

void sub_1002C2B48(void *a1@<X1>, NSObject **a2@<X2>, void *a3@<X8>)
{
  uint64_t v6 = operator new(0xB0uLL);
  sub_1002C2BC4(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000B3BC8((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_1002C2BB0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_1002C2BC4(void *a1, void *a2, NSObject **a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_1019B48D8;
  sub_1002BD86C(a1 + 3, a2, a3);
  return a1;
}

void sub_1002C2C0C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_1002C2C20(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B48D8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C2C40(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B48D8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C2C94(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 32))();
}

void sub_1002C2CBC(void *a1)
{
  *a1 = off_1019B4928;
  operator new();
}

void sub_1002C2D94(_Unwind_Exception *exception_object)
{
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
  if (v2) {
    operator delete();
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002C2DC8(void *a1)
{
  *a1 = off_1019B4928;
  int v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002C2E14(void *a1)
{
  *a1 = off_1019B4928;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

const void **sub_1002C2E80(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t *a5, uint64_t *a6)
{
  uint64_t v11 = *(void *)(a1 + 8);
  CFDictionaryRef v31 = 0;
  unint64_t v32 = 0;
  (*(void (**)(const __CFDictionary **__return_ptr))(**(void **)(v11 + 48) + 224))(&v31);
  CFTypeRef cf = 0;
  CFDictionaryRef v12 = v31;
  if (v31) {
    int64x2_t v13 = sub_100080778;
  }
  else {
    int64x2_t v13 = 0;
  }
  if (v13)
  {
    if (v32 ? sub_100080778 : 0)
    {
      uint64_t v29 = 0;
      int v30 = 0;
      (***(void (****)(const void **__return_ptr))(v11 + 48))(&v26);
      uint64_t v15 = v27;
      v28[0] = v26;
      v28[1] = v27;
      uint64_t v26 = 0;
      long long v27 = 0;
      memset(buf, 0, sizeof(buf));
      sub_100CE946C(v12, 8u, &v29);
      if (v15) {
        sub_10004D2C8(v15);
      }
      if (v27) {
        sub_10004D2C8(v27);
      }
      if (v29)
      {
        sub_100CEBD88(v29, 7, v28);
        *(void *)buf = 0;
        CFTypeRef cf = v28[0];
        v28[0] = 0;
        sub_1000558F4((const void **)buf);
        sub_1000558F4(v28);
      }
      if (v30) {
        sub_10004D2C8(v30);
      }
    }
  }
  sub_100057D78(&v32);
  sub_100057D78((const void **)&v31);
  CFTypeRef v16 = cf;
  if (cf)
  {
    *(void *)buf = v11;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(&buf[8], *(void **)a2, *(void *)(a2 + 8));
      CFTypeRef v16 = cf;
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)a2;
      xpc_object_t v34 = *(uint64_t **)(a2 + 16);
    }
    *(void *)uint64_t v35 = cf;
    CFRetain(v16);
    uint64_t v23 = *(std::__shared_weak_count **)(v11 + 16);
    if (v23)
    {
      if (std::__shared_weak_count::lock(v23)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  int64x2_t v17 = *(NSObject **)(v11 + 40);
  if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(a2 + 23) >= 0) {
      int64x2_t v18 = (void *)a2;
    }
    else {
      int64x2_t v18 = *(void **)a2;
    }
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v19 = a3;
    }
    else {
      uint64_t v19 = (uint64_t *)*a3;
    }
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v20 = a4;
    }
    else {
      uint64_t v20 = (uint64_t *)*a4;
    }
    if (*((char *)a5 + 23) >= 0) {
      uint64_t v21 = a5;
    }
    else {
      uint64_t v21 = (uint64_t *)*a5;
    }
    if (*((char *)a6 + 23) >= 0) {
      uint64_t v22 = a6;
    }
    else {
      uint64_t v22 = (uint64_t *)*a6;
    }
    *(_DWORD *)buf = 136316162;
    *(void *)&buf[4] = v18;
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v19;
    *(_WORD *)&buf[22] = 2080;
    xpc_object_t v34 = v20;
    *(_WORD *)uint64_t v35 = 2080;
    *(void *)&v35[2] = v21;
    __int16 v36 = 2080;
    uint64_t v37 = v22;
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "invalid push topic for iccid : %s, mcc: %s, mnc: %s, gid1: %s, gid2: %s", buf, 0x34u);
  }
  return sub_1000558F4(&cf);
}

void sub_1002C328C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_1002C3314(void *a1, NSObject **a2, void *a3, void *a4)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "cp.tr.push");
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v8 = *a2;
  a1[3] = *a2;
  if (v8) {
    dispatch_retain(v8);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v13, (const OsLogContext *)buf);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)v13);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v13);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *a1 = off_1019B4950;
  a1[6] = *a3;
  uint64_t v9 = a3[1];
  a1[7] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a1[8] = *a4;
  uint64_t v10 = a4[1];
  a1[9] = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 16), 1uLL, memory_order_relaxed);
  }
  a1[16] = 0;
  a1[13] = 0;
  a1[10] = 0;
  a1[11] = 0;
  a1[12] = a1 + 13;
  a1[17] = 0;
  a1[14] = 0;
  a1[15] = a1 + 16;
  uint64_t v11 = a1[5];
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    unint64_t v15 = (unint64_t)"N8cellplan25PushPendingPlanController4implE" & 0x7FFFFFFFFFFFFFFFLL;
    __int16 v16 = 2048;
    int64x2_t v17 = a1;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I ctor %s : %p", buf, 0x16u);
  }
  return a1;
}

void sub_1002C34C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v2);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002C34F8(uint64_t a1)
{
  *(void *)a1 = off_1019B4950;
  int v2 = (ctu::OsLogLogger *)(a1 + 40);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)__int16 v16 = 136315394;
    *(void *)&v16[4] = (unint64_t)"N8cellplan25PushPendingPlanController4implE" & 0x7FFFFFFFFFFFFFFFLL;
    *(_WORD *)&v16[12] = 2048;
    *(void *)&v16[14] = a1;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I dtor %s : %p", v16, 0x16u);
  }
  if (*(void *)(a1 + 80))
  {
    uint64_t v4 = *(void **)(a1 + 120);
    if (v4 != (void *)(a1 + 128))
    {
      do
      {
        uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
        if (!v5
          || (v6 = *(void *)(a1 + 80), uint64_t v7 = *(void *)(a1 + 8), (v8 = std::__shared_weak_count::lock(v5)) == 0))
        {
          sub_100088B9C();
        }
        *(void *)__int16 v16 = v7;
        *(void *)&v16[8] = v8;
        (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v6 + 24))(v6, v4 + 4, v16);
        if (*(void *)&v16[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&v16[8]);
        }
        uint64_t v9 = (void *)v4[1];
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = (void *)*v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (void *)v4[2];
            BOOL v11 = *v10 == (void)v4;
            uint64_t v4 = v10;
          }
          while (!v11);
        }
        uint64_t v4 = v10;
      }
      while (v10 != (void *)(a1 + 128));
    }
  }
  sub_1002C3E38(a1 + 120, *(void **)(a1 + 128));
  *(void *)(a1 + 120) = a1 + 128;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 136) = 0;
  sub_10010C0E0(a1 + 96, *(void **)(a1 + 104));
  CFDictionaryRef v12 = *(std::__shared_weak_count **)(a1 + 88);
  if (v12) {
    sub_10004D2C8(v12);
  }
  int64x2_t v13 = *(std::__shared_weak_count **)(a1 + 72);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 56);
  if (v14) {
    sub_10004D2C8(v14);
  }
  push::PushMessageListenerInterface::~PushMessageListenerInterface((push::PushMessageListenerInterface *)a1);
  ctu::OsLogLogger::~OsLogLogger(v2);
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_1002C36F4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002C3708(uint64_t a1)
{
  sub_1002C34F8(a1);

  operator delete();
}

void sub_1002C3740(uint64_t a1, void *a2)
{
  if (*a2)
  {
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)long long __p = 0u;
    uint64_t v8 = 0;
    uint64_t v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v4 = __p;
      if (SHIBYTE(v8) < 0) {
        uint64_t v4 = (void **)__p[0];
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = "";
      *(_WORD *)&buf[22] = 2080;
      uint64_t v10 = (uint8_t *)v4;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%srecv notification for topic: %s", buf, 0x20u);
    }
    *(void *)buf = off_1019B4AF0;
    *(void *)&uint8_t buf[8] = a1;
    uint64_t v10 = buf;
    logger::CFTypeRefLogger();
    sub_10012C330(buf);
    *(void *)buf = a1;
    if (SHIBYTE(v8) < 0)
    {
      sub_10004FC84(&buf[8], __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)&uint8_t buf[8] = *(_OWORD *)__p;
      uint64_t v10 = v8;
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      if (std::__shared_weak_count::lock(v6)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "invalid topic for incoming push notification", buf, 2u);
  }
}

void sub_1002C39D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C3A30(uint64_t a1, void *a2, void *a3)
{
  if (!*a2)
  {
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)CFDictionaryRef v12 = 0u;
    uint64_t v13 = 0;
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v9 = v12;
      if (v13 < 0) {
        uint64_t v9 = (void **)v12[0];
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "invalid token for token update. topic: %s", buf, 0xCu);
    }
    goto LABEL_12;
  }
  if (*a3)
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 0;
    ctu::cf::assign();
    ctu::base64::encode();
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    *(_OWORD *)long long __p = 0u;
    uint64_t v11 = 0;
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = __p;
      if (v11 < 0) {
        uint64_t v5 = (void **)__p[0];
      }
      uint64_t v6 = v12;
      if (v13 < 0) {
        uint64_t v6 = (void **)v12[0];
      }
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = v5;
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v6;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I token update for topic: %s, token: %s", buf, 0x16u);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(__p[0]);
    }
LABEL_12:
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
    return;
  }
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "invalid topic for token update", buf, 2u);
  }
}

void sub_1002C3C68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (*(char *)(v18 - 25) < 0) {
    operator delete(*(void **)(v18 - 48));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C3CD0(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_1002C3D50(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C3D8C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C3DC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_1002C3DF4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_1002C3E38(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_1002C3E38(a1, *a2);
    sub_1002C3E38(a1, a2[1]);
    sub_10020F878((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

char *sub_1002C3E94(uint64_t **a1, void **a2, long long *a3, long long *a4)
{
  uint64_t v12 = 0;
  uint64_t v7 = (char **)sub_100046ED4((uint64_t)a1, &v12, a2);
  uint64_t v8 = *v7;
  if (!*v7)
  {
    uint64_t v9 = (uint64_t **)v7;
    memset(v11, 0, sizeof(v11));
    sub_1002C3F44((uint64_t)a1, a3, a4, v11);
    sub_100046C38(a1, v12, v9, (uint64_t *)v11[0]);
    uint64_t v8 = v11[0];
    v11[0] = 0;
    sub_10010E764((uint64_t)v11, 0);
  }
  return v8;
}

char *sub_1002C3F44@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, long long *a3@<X2>, char **a4@<X8>)
{
  uint64_t v7 = (char *)(a1 + 8);
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  uint64_t v8 = (char *)operator new(0x50uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  uint64_t result = sub_1002C3FC0(v8 + 32, a2, a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_1002C3FA8(_Unwind_Exception *a1)
{
  sub_10010E764(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_1002C3FC0(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)__dst = v5;
  }
  uint64_t v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return __dst;
}

void sub_1002C403C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_1002C4058(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  long long v7 = *v6;
  if (!*v6)
  {
    uint64_t v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_1002C4110((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    long long v7 = v10[0];
    v10[0] = 0;
    sub_1002C41B0((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1002C4110@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = v6 + 4;
  uint64_t v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    uint64_t result = sub_10004FC84(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    v6[6] = *((void *)v8 + 2);
    *(_OWORD *)uint64_t result = v9;
  }
  v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1002C4198(_Unwind_Exception *a1)
{
  sub_1002C41B0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_1002C41B0(uint64_t a1, uint64_t a2)
{
  int v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10020F878((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t **sub_1002C4208(uint64_t **result, std::string *a2, std::string *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    long long v7 = result[1];
    unsigned char *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v10 = result;
    uint64_t v11 = v8;
    uint64_t v12 = v8;
    if (v8)
    {
      uint64_t v11 = sub_1000EA590((uint64_t)v8);
      while (a2 != a3)
      {
        sub_1002C4310(v5, a2, (uint64_t)v8);
        if (v9)
        {
          uint64_t v8 = v11;
          uint64_t v12 = v11;
          if (!v11)
          {
            ++a2;
            break;
          }
          uint64_t v11 = sub_1000EA590((uint64_t)v11);
        }
        else
        {
          uint64_t v8 = v12;
        }
        ++a2;
        if (!v8) {
          break;
        }
      }
    }
    uint64_t result = (uint64_t **)sub_1000EA5E4((uint64_t)&v10);
  }
  while (a2 != a3)
  {
    uint64_t result = (uint64_t **)sub_100046BAC(v5, (void **)&a2->__r_.__value_.__l.__data_, (uint64_t)a2);
    ++a2;
  }
  return result;
}

void sub_1002C42FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000EA5E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002C4310(uint64_t **a1, std::string *a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v9, (void **)&a2->__r_.__value_.__l.__data_);
  if (*v6) {
    return *v6;
  }
  long long v7 = v6;
  std::string::operator=((std::string *)(a3 + 32), a2);
  sub_100046C38(a1, v9, v7, (uint64_t *)a3);
  return (uint64_t *)a3;
}

uint64_t *sub_1002C4398(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  uint64_t v20 = v1;
  uint64_t v2 = *(void *)v1;
  sub_100083DA4(&v21, (const void **)(v1 + 32));
  if (!v21) {
    goto LABEL_40;
  }
  std::string::size_type v3 = *(void *)(v2 + 80);
  if (v3)
  {
    size = *(std::__shared_weak_count **)(v2 + 88);
    if (!size) {
      goto LABEL_12;
    }
    goto LABEL_10;
  }
  (*(void (**)(std::string *__return_ptr))(**(void **)(v2 + 48) + 472))(&buf);
  size = (std::__shared_weak_count *)buf.__r_.__value_.__l.__size_;
  std::string::size_type v3 = buf.__r_.__value_.__r.__words[0];
  *(_OWORD *)&buf.__r_.__value_.__l.__data_ = 0uLL;
  uint64_t v5 = *(std::__shared_weak_count **)(v2 + 88);
  *(_OWORD *)(v2 + 80) = __PAIR128__((unint64_t)size, v3);
  if (v5)
  {
    sub_10004D2C8(v5);
    if (buf.__r_.__value_.__l.__size_) {
      sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
    }
    std::string::size_type v3 = *(void *)(v2 + 80);
    size = *(std::__shared_weak_count **)(v2 + 88);
  }
  if (size) {
LABEL_10:
  }
    atomic_fetch_add_explicit(&size->__shared_owners_, 1uLL, memory_order_relaxed);
  if (!v3)
  {
    uint64_t v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "invalid TransferPushPendingPlanDelegate", (uint8_t *)&buf, 2u);
    }
    goto LABEL_38;
  }
LABEL_12:
  uint64_t v6 = sub_10010E128(v2 + 96, (void **)(v1 + 8));
  long long v7 = *(NSObject **)(v2 + 40);
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (v6)
  {
    if (v8)
    {
      if (*(char *)(v1 + 31) >= 0) {
        std::string::size_type v9 = v1 + 8;
      }
      else {
        std::string::size_type v9 = *(void *)(v1 + 8);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I already registered for iccid : %s", (uint8_t *)&buf, 0xCu);
    }
  }
  else
  {
    if (v8)
    {
      if (*(char *)(v1 + 31) >= 0) {
        std::string::size_type v11 = v1 + 8;
      }
      else {
        std::string::size_type v11 = *(void *)(v1 + 8);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I registering push notification for iccid : %s", (uint8_t *)&buf, 0xCu);
    }
    memset(&__p, 0, sizeof(__p));
    memset(&buf, 0, sizeof(buf));
    ctu::cf::assign();
    std::string __p = buf;
    sub_1002C3E94((uint64_t **)(v2 + 96), (void **)(v1 + 8), (long long *)(v1 + 8), (long long *)&__p);
    if (sub_10010E128(v2 + 120, (void **)&__p.__r_.__value_.__l.__data_))
    {
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)&__p;
      uint64_t v12 = sub_1002C4058((uint64_t **)(v2 + 120), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_10144E20E, (long long **)&buf);
      sub_100046BAC((uint64_t **)v12 + 7, (void **)(v1 + 8), v1 + 8);
    }
    else
    {
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(&buf, *(void **)(v1 + 8), *(void *)(v1 + 16));
      }
      else
      {
        long long v13 = *(_OWORD *)(v1 + 8);
        buf.__r_.__value_.__r.__words[2] = *(void *)(v1 + 24);
        *(_OWORD *)&buf.__r_.__value_.__l.__data_ = v13;
      }
      p_p = &__p;
      uint64_t v14 = sub_1002C4058((uint64_t **)(v2 + 120), (void **)&__p.__r_.__value_.__l.__data_, (uint64_t)&unk_10144E20E, (long long **)&p_p);
      sub_1002C4208((uint64_t **)v14 + 7, &buf, &v25);
      if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(buf.__r_.__value_.__l.__data_);
      }
      unint64_t v15 = *(std::__shared_weak_count **)(v2 + 16);
      if (!v15 || (std::string::size_type v16 = *(void *)(v2 + 8), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
        sub_100088B9C();
      }
      buf.__r_.__value_.__r.__words[0] = v16;
      buf.__r_.__value_.__l.__size_ = (std::string::size_type)v17;
      (*(void (**)(std::string::size_type, std::string *, std::string *))(*(void *)v3 + 16))(v3, &__p, &buf);
      if (buf.__r_.__value_.__l.__size_) {
        sub_10004D2C8((std::__shared_weak_count *)buf.__r_.__value_.__l.__size_);
      }
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
LABEL_38:
  if (size) {
    sub_10004D2C8(size);
  }
LABEL_40:
  sub_1000558F4(&v21);
  sub_1001B621C(&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_1002C4730(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a18 < 0) {
    operator delete(a13);
  }
  if (v27) {
    sub_10004D2C8(v27);
  }
  sub_1000558F4(&a12);
  sub_1001B621C(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_1002C47D0()
{
}

void *sub_1002C47E4(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B4AF0;
  result[1] = v3;
  return result;
}

uint64_t sub_1002C482C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B4AF0;
  a2[1] = v2;
  return result;
}

void sub_1002C4858(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      uint64_t v4 = a2;
    }
    else {
      uint64_t v4 = (uint64_t *)*a2;
    }
    int v5 = 136315650;
    uint64_t v6 = "";
    __int16 v7 = 2080;
    BOOL v8 = "";
    __int16 v9 = 2080;
    uint64_t v10 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s%s%s", (uint8_t *)&v5, 0x20u);
  }
}

uint64_t sub_1002C4924(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1002C4964()
{
}

uint64_t *sub_1002C4970(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v18 = a1;
  uint64_t v19 = v1;
  uint64_t v2 = (void **)(v1 + 8);
  uint64_t v3 = *(void **)v1;
  uint64_t v4 = (uint64_t **)(*(void *)v1 + 120);
  if (!sub_10010E128((uint64_t)v4, (void **)(v1 + 8)))
  {
    uint64_t v14 = v3[5];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v1 + 31) >= 0) {
        uint64_t v15 = v1 + 8;
      }
      else {
        uint64_t v15 = *(void *)(v1 + 8);
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "unexpect topic for push notification. %s", buf, 0xCu);
    }
    goto LABEL_22;
  }
  int v5 = (std::__shared_weak_count *)v3[9];
  if (v5)
  {
    uint64_t v6 = std::__shared_weak_count::lock(v5);
    if (v6)
    {
      uint64_t v7 = v3[8];
      if (v7)
      {
        *(void *)std::string buf = v2;
        BOOL v8 = sub_1002C4058(v4, v2, (uint64_t)&unk_10144E20E, (long long **)buf);
        __int16 v9 = (uint64_t *)v8[7];
        uint64_t v10 = v8 + 8;
        if (v9 == v8 + 8)
        {
LABEL_21:
          sub_10004D2C8(v6);
          goto LABEL_22;
        }
        do
        {
          (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 16))(v7, v9 + 4);
          std::string::size_type v11 = (uint64_t *)v9[1];
          if (v11)
          {
            do
            {
              uint64_t v12 = v11;
              std::string::size_type v11 = (uint64_t *)*v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              uint64_t v12 = (uint64_t *)v9[2];
              BOOL v13 = *v12 == (void)v9;
              __int16 v9 = v12;
            }
            while (!v13);
          }
          __int16 v9 = v12;
        }
        while (v12 != v10);
        goto LABEL_20;
      }
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  std::string::size_type v16 = v3[5];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "invalid delegate for push notification", buf, 2u);
    if (!v6) {
      goto LABEL_22;
    }
    goto LABEL_21;
  }
LABEL_20:
  if (v6) {
    goto LABEL_21;
  }
LABEL_22:
  sub_1001102C4(&v19);
  return sub_100046B58((uint64_t *)&v18);
}

void sub_1002C4B68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  sub_10004D2C8(v2);
  sub_1001102C4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1002C4B98(void *a1, void *a2, int a3, BOOL a4)
{
  sub_100058DB0(__p, "RCSMessageSendReceive");
  AnalyticsEvent::AnalyticsEvent(a1, (long long *)__p, a2);
  if (v17 < 0) {
    operator delete(__p[0]);
  }
  *a1 = &off_1019B4B70;
  if (a3 && a3 != 3)
  {
    unsigned int v8 = analytics::simSlotAsSubsId();
    xpc_object_t v14 = xpc_int64_create(v8);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    uint64_t v12 = a1 + 4;
    BOOL v13 = "subs_id";
    sub_100035E70((uint64_t)&v12, &v14, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v14);
    xpc_object_t v14 = 0;
  }
  xpc_object_t v10 = xpc_BOOL_create(a4);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  uint64_t v12 = a1 + 4;
  BOOL v13 = "is_success";
  sub_100035E70((uint64_t)&v12, &v10, &v11);
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_release(v10);
  return a1;
}

void sub_1002C4CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  AnalyticsEvent::~AnalyticsEvent(v21);
  _Unwind_Resume(a1);
}

void sub_1002C4D24(void **a1)
{
  AnalyticsEvent::~AnalyticsEvent(a1);

  operator delete();
}

void sub_1002C4D5C(uint64_t a1, char *string)
{
  if (string[23] < 0) {
    string = *(char **)string;
  }
  xpc_object_t v4 = xpc_string_create(string);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "error_string";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C4DEC(uint64_t a1, unsigned int a2)
{
  if (a2 <= 5)
  {
    if (((1 << a2) & 0x26) != 0)
    {
      xpc_object_t object = xpc_string_create("MO");
      if (!object) {
        xpc_object_t object = xpc_null_create();
      }
      uint64_t v5 = a1 + 32;
      uint64_t v6 = "direction";
      sub_100035E70((uint64_t)&v5, &object, &v8);
      xpc_release(v8);
      xpc_object_t v8 = 0;
      xpc_release(object);
    }
    else if (((1 << a2) & 0x18) != 0)
    {
      xpc_object_t v3 = xpc_string_create("MT");
      if (!v3) {
        xpc_object_t v3 = xpc_null_create();
      }
      uint64_t v5 = a1 + 32;
      uint64_t v6 = "direction";
      sub_100035E70((uint64_t)&v5, &v3, &v4);
      xpc_release(v4);
      xpc_object_t v4 = 0;
      xpc_release(v3);
    }
  }
}

void sub_1002C4EFC(uint64_t a1, int a2)
{
  if (a2 == 1)
  {
    xpc_object_t v3 = xpc_string_create("MT");
    if (!v3) {
      xpc_object_t v3 = xpc_null_create();
    }
    uint64_t v5 = a1 + 32;
    uint64_t v6 = "direction";
    sub_100035E70((uint64_t)&v5, &v3, &v4);
    xpc_release(v4);
    xpc_object_t v4 = 0;
    xpc_release(v3);
  }
  else if (!a2)
  {
    xpc_object_t object = xpc_string_create("MO");
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v5 = a1 + 32;
    uint64_t v6 = "direction";
    sub_100035E70((uint64_t)&v5, &object, &v8);
    xpc_release(v8);
    xpc_object_t v8 = 0;
    xpc_release(object);
  }
}

void sub_1002C4FF4(uint64_t a1, BOOL value)
{
  xpc_object_t v4 = xpc_BOOL_create(value);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "is_chatbot";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C5078(uint64_t a1, char *string)
{
  if (string[23] < 0) {
    string = *(char **)string;
  }
  xpc_object_t v4 = xpc_string_create(string);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "chatbotname";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C5108(uint64_t a1, char *string)
{
  if (string[23] < 0) {
    string = *(char **)string;
  }
  xpc_object_t v4 = xpc_string_create(string);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "message_type";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C5198(uint64_t a1, BOOL value)
{
  xpc_object_t v4 = xpc_BOOL_create(value);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "is_multipart";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C521C(uint64_t a1, BOOL value)
{
  xpc_object_t v4 = xpc_BOOL_create(value);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = a1 + 32;
  v3[1] = "is_group";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

void sub_1002C52A0(uint64_t a1, id *a2, uint64_t a3)
{
  uint64_t v3 = a3;
  sub_100D72038((uint64_t)&v4, a2, &v3);
}

void *sub_1002C52E4@<X0>(void *a1@<X8>)
{
  uint64_t result = operator new(0x20uLL);
  result[1] = 0;
  result[2] = 0;
  void *result = off_1019B4BF0;
  result[3] = &off_1019A4D30;
  *a1 = result + 3;
  a1[1] = result;
  return result;
}

void sub_1002C5354(SubscriberUserAlertFactoryInterface *a1)
{
  SubscriberUserAlertFactoryInterface::~SubscriberUserAlertFactoryInterface(a1);

  operator delete();
}

void sub_1002C538C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B4BF0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1002C53AC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B4BF0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1002C5400(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 8))();
}

uint64_t sub_1002C5428(uint64_t a1, void *a2, int a3)
{
  *(void *)a1 = off_1019B4C40;
  uint64_t v5 = (capabilities::ct *)sub_10058A330((void *)a1, a2, "TechKeepAlive");
  v16[0] = off_101999E18;
  v16[1] = sub_1002C5760;
  v16[3] = v16;
  *((void *)v5 + 8) = 0;
  if ((capabilities::ct::supportsGemini(v5) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 64)) {
    operator new();
  }
  sub_10008863C(v16);
  *(void *)a1 = off_1019B4C40;
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 72) = a1 + 80;
  *(void *)(a1 + 104) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = a1 + 104;
  uint64_t v6 = a3;
  *(void *)(a1 + 112) = 0;
  *(_OWORD *)(a1 + 120) = 0u;
  if ((a3 & 0x3FLL) != 0) {
    unint64_t v7 = ((unint64_t)a3 >> 6) + 1;
  }
  else {
    unint64_t v7 = (unint64_t)a3 >> 6;
  }
  *(_OWORD *)(a1 + 136) = 0uLL;
  if (v7)
  {
    xpc_object_t v8 = (char *)sub_10004EF74(a1 + 136, v7);
    __int16 v9 = *(char **)(a1 + 120);
    xpc_object_t v10 = *(char **)(a1 + 128);
    uint64_t v12 = &v8[8 * v11];
    bzero(v8, 8 * v7);
    BOOL v13 = &v8[8 * v7];
    while (v10 != v9)
    {
      uint64_t v14 = *((void *)v10 - 1);
      v10 -= 8;
      *((void *)v8 - 1) = v14;
      v8 -= 8;
    }
    *(void *)(a1 + 120) = v8;
    *(void *)(a1 + 128) = v13;
    *(void *)(a1 + 136) = v12;
    if (v9) {
      operator delete(v9);
    }
  }
  *(void *)(a1 + 144) = v6;
  return a1;
}

void sub_1002C568C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008863C((uint64_t *)va);
  operator delete();
}

const char *sub_1002C5760(int a1)
{
  if ((a1 - 1) > 2) {
    return "TechKeepAlive.?";
  }
  else {
    return off_1019B4D48[a1 - 1];
  }
}

void sub_1002C5788(uint64_t a1)
{
  uint64_t v1 = a1;
  xpc_object_t v50 = (Registry **)(a1 + 48);
  subscriber::makeSimSlotRange();
  uint64_t v2 = v54;
  uint64_t v3 = v55;
  if (v54 != v55)
  {
    char v4 = v56;
    while ((v56(*v2) & 1) == 0)
    {
      if (++v2 == v55)
      {
        uint64_t v2 = v55;
        break;
      }
    }
    v49 = v55;
    if (v2 != v55)
    {
      int64x2_t v48 = (uint64_t **)(v1 + 72);
      xpc_object_t v45 = (uint64_t **)(v1 + 96);
      uint64_t v47 = v1;
      do
      {
        unsigned int v53 = 0;
        unsigned int v53 = *v2;
        uint64_t v5 = v53;
        uint64_t v6 = sub_1002C73FC(v48, v53, &v53);
        unint64_t v7 = v6;
        unint64_t v8 = *(void *)(v1 + 144);
        __int16 v9 = v6[5];
        xpc_object_t v10 = v6[6];
        unint64_t v11 = v10 - v9;
        if (v8 <= v11)
        {
          if (v8 < v11)
          {
            long long v27 = &v9[v8];
            while (v10 != v27)
            {
              unsigned __int8 v28 = (void *)*--v10;
            }
            v7[6] = v27;
          }
        }
        else
        {
          uint64_t v12 = v6[7];
          if (v8 - v11 <= v12 - v10)
          {
            uint64_t v29 = &v10[v8 - v11];
            uint64_t v30 = 8 * v8 - 8 * v11;
            do
            {
              *v10++ = 0;
              v30 -= 8;
            }
            while (v30);
            v6[6] = v29;
            uint64_t v1 = v47;
          }
          else
          {
            if (v8 >> 61) {
              sub_10006A748();
            }
            uint64_t v13 = (char *)v12 - (char *)v9;
            uint64_t v14 = v13 >> 2;
            if (v13 >> 2 <= v8) {
              uint64_t v14 = *(void *)(v1 + 144);
            }
            if ((unint64_t)v13 >= 0x7FFFFFFFFFFFFFF8) {
              unint64_t v15 = 0x1FFFFFFFFFFFFFFFLL;
            }
            else {
              unint64_t v15 = v14;
            }
            if (v15 >> 61) {
              sub_10006A7CC();
            }
            std::string::size_type v16 = (char *)operator new(8 * v15);
            char v17 = &v16[8 * v11];
            long long v46 = (uint64_t *)&v16[8 * v8];
            uint64_t v18 = 8 * v8;
            uint64_t v19 = v17;
            unint64_t v20 = v18 - 8 * v11;
            do
            {
              *(void *)uint64_t v19 = 0;
              v19 += 8;
              v20 -= 8;
            }
            while (v20);
            uint64_t v21 = (uint64_t *)&v16[8 * v15];
            uint64_t v22 = v7[5];
            uint64_t v23 = v7[6];
            if (v23 == v22)
            {
              v7[5] = (uint64_t *)v17;
              v7[6] = v46;
              v7[7] = v21;
LABEL_35:
              uint64_t v1 = v47;
              if (!v23) {
                goto LABEL_37;
              }
LABEL_36:
              operator delete(v23);
              goto LABEL_37;
            }
            do
            {
              uint64_t v24 = *--v23;
              *uint64_t v23 = 0;
              *((void *)v17 - 1) = v24;
              v17 -= 8;
            }
            while (v23 != v22);
            uint64_t v23 = v7[5];
            std::string v25 = v7[6];
            v7[5] = (uint64_t *)v17;
            v7[6] = v46;
            v7[7] = v21;
            if (v25 == v23) {
              goto LABEL_35;
            }
            uint64_t v1 = v47;
            do
            {
              uint64_t v26 = (void *)*--v25;
            }
            while (v25 != v23);
            if (v23) {
              goto LABEL_36;
            }
          }
        }
LABEL_37:
        ServiceMap = (std::mutex *)Registry::getServiceMap(*v50);
        unint64_t v32 = ServiceMap;
        if (v33 < 0)
        {
          xpc_object_t v34 = (unsigned __int8 *)(v33 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v35 = 5381;
          do
          {
            uint64_t v33 = v35;
            unsigned int v36 = *v34++;
            uint64_t v35 = (33 * v35) ^ v36;
          }
          while (v36);
        }
        std::mutex::lock(ServiceMap);
        *(void *)std::string buf = v33;
        uint64_t v37 = sub_10004D37C(&v32[1].__m_.__sig, (unint64_t *)buf);
        if (v37)
        {
          uint64_t v39 = v37[3];
          unsigned int v38 = (std::__shared_weak_count *)v37[4];
          if (v38)
          {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v32);
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v38);
            if (v39)
            {
LABEL_46:
              uint64_t v51 = 0;
              uint64_t v52 = 0;
              (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v39 + 32))(&v51, v39, v5);
              if (v51)
              {
                unint64_t v40 = COERCE__INT64_((*(double (**)(uint64_t))(*(void *)v51 + 176))(v51));
                sub_1002C74D0(v45, v5, &v53)[5] = v40;
                uint64_t v41 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v1 + 64) + 16))(*(void *)(v1 + 64), v5);
                if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v42 = *(void *)(v1 + 144);
                  int v43 = sub_1002C74D0(v45, v5, &v53)[5];
                  *(_DWORD *)std::string buf = 134218240;
                  *(void *)&uint8_t buf[4] = v42;
                  __int16 v58 = 2048;
                  v59 = v43;
                  _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I created with %lu contexts and with MaxKeepAliveInterval: %f", buf, 0x16u);
                }
              }
              if (v52) {
                sub_10004D2C8(v52);
              }
              if (!v38) {
                goto LABEL_53;
              }
            }
            sub_10004D2C8(v38);
            goto LABEL_53;
          }
          std::mutex::unlock(v32);
          if (v39) {
            goto LABEL_46;
          }
        }
        else
        {
          std::mutex::unlock(v32);
        }
LABEL_53:
        int64x2_t v44 = v2 + 1;
        uint64_t v2 = v3;
        if (v44 != v3)
        {
          uint64_t v2 = v44;
          while ((v4(*v2) & 1) == 0)
          {
            if (++v2 == v3)
            {
              uint64_t v2 = v3;
              break;
            }
          }
        }
      }
      while (v2 != v49);
    }
  }
}

void sub_1002C5BF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10004D2C8(a18);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002C5C48(uint64_t a1)
{
  *(void *)a1 = off_1019B4C40;
  uint64_t v2 = *(void **)(a1 + 72);
  uint64_t v3 = (void *)(a1 + 80);
  if (v2 != (void *)(a1 + 80))
  {
    do
    {
      char v4 = (void **)v2[5];
      uint64_t v5 = (void **)v2[6];
      while (v4 != v5)
      {
        uint64_t v6 = *v4;
        if (*v4)
        {
          *char v4 = 0;
        }
        ++v4;
      }
      unint64_t v7 = (void *)v2[1];
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          unint64_t v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (void *)v2[2];
          BOOL v9 = *v8 == (void)v2;
          uint64_t v2 = v8;
        }
        while (!v9);
      }
      uint64_t v2 = v8;
    }
    while (v8 != v3);
  }
  xpc_object_t v10 = (void **)(a1 + 120);
  if (!sub_1002C7370((uint64_t *)(a1 + 120))) {
    __assert_rtn("~dynamic_bitset", "dynamic_bitset.hpp", 702, "m_check_invariants()");
  }
  unint64_t v11 = *v10;
  if (*v10)
  {
    *(void *)(a1 + 128) = v11;
    operator delete(v11);
  }
  sub_10005D144(*(void **)(a1 + 104));
  sub_1002C72E8(*(void **)(a1 + 80));
  uint64_t v12 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = 0;
  if (v12) {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
  }

  return sub_10058A498((void *)a1);
}

void sub_1002C5DA0(uint64_t a1)
{
  sub_1002C5C48(a1);

  operator delete();
}

void sub_1002C5DD8(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C5E4C;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C5E4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (!sub_1002C6274(v2)) {
    goto LABEL_13;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 48));
  int v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v5;
  BOOL v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)buf);
  if (!v9)
  {
    uint64_t v11 = 0;
    goto LABEL_9;
  }
  uint64_t v11 = v9[3];
  xpc_object_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10)
  {
LABEL_9:
    std::mutex::unlock(v4);
    xpc_object_t v10 = 0;
    char v12 = 1;
    goto LABEL_10;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
LABEL_10:
  sub_100058DB0(buf, "TechKeepAliveController");
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v11 + 16))(v11, buf);
  if ((v43 & 0x80000000) == 0)
  {
    if (v12) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  operator delete(*(void **)buf);
  if ((v12 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v10);
LABEL_13:
  uint64_t v14 = *(unsigned int *)(a1 + 40);
  uint64_t v13 = *(unsigned int *)(a1 + 44);
  int v39 = v14;
  unint64_t v15 = sub_1002C73FC((uint64_t **)(v2 + 72), v14, &v39);
  std::string::size_type v16 = v15[5];
  if ((int)v13 >= (unint64_t)(v15[6] - v16))
  {
    char v17 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 64) + 16))(*(void *)(v2 + 64), v14);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    uint64_t v18 = "#I context ID %d is too large, not exist";
    goto LABEL_19;
  }
  if (v16[(int)v13])
  {
    char v17 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 64) + 16))(*(void *)(v2 + 64), v14);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_DWORD *)std::string buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v13;
    uint64_t v18 = "#I scheduler on context %d has already been created";
LABEL_19:
    uint64_t v19 = v17;
    uint32_t v20 = 8;
LABEL_20:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
    return;
  }
  uint64_t v21 = [TechKeepAliveScheduler alloc];
  uint64_t v23 = (void *)(v2 + 104);
  uint64_t v22 = *(void *)(v2 + 104);
  double v24 = 0.0;
  if (v22)
  {
    uint64_t v25 = v2 + 104;
    do
    {
      int v26 = *(_DWORD *)(v22 + 32);
      BOOL v27 = v26 < (int)v14;
      if (v26 >= (int)v14) {
        unsigned __int8 v28 = (uint64_t *)v22;
      }
      else {
        unsigned __int8 v28 = (uint64_t *)(v22 + 8);
      }
      if (!v27) {
        uint64_t v25 = v22;
      }
      uint64_t v22 = *v28;
    }
    while (*v28);
    if ((void *)v25 != v23 && *(_DWORD *)(v25 + 32) <= (int)v14) {
      double v24 = *(double *)(v25 + 40);
    }
  }
  uint64_t v29 = [(TechKeepAliveScheduler *)v21 initWithContextID:v13 delegateQueue:*(void *)(v2 + 24) maxInterval:subscriber::simSlotAsInstance() instance:v24];
  uint64_t v30 = v15[5];
  CFDictionaryRef v31 = (void *)v30[(int)v13];
  v30[(int)v13] = (uint64_t)v29;

  unint64_t v32 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 64) + 16))(*(void *)(v2 + 64), v14);
  if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v33 = *v23;
    if (!*v23) {
      goto LABEL_44;
    }
    xpc_object_t v34 = v23;
    do
    {
      int v35 = *(_DWORD *)(v33 + 32);
      BOOL v36 = v35 < (int)v14;
      if (v35 >= (int)v14) {
        uint64_t v37 = (uint64_t *)v33;
      }
      else {
        uint64_t v37 = (uint64_t *)(v33 + 8);
      }
      if (!v36) {
        xpc_object_t v34 = (void *)v33;
      }
      uint64_t v33 = *v37;
    }
    while (*v37);
    if (v34 != v23 && *((_DWORD *)v34 + 8) <= (int)v14) {
      uint64_t v38 = v34[5];
    }
    else {
LABEL_44:
    }
      uint64_t v38 = 0;
    *(_DWORD *)std::string buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = v13;
    __int16 v41 = 2048;
    uint64_t v42 = v38;
    uint64_t v18 = "#I TechKeepAlive-%d: Scheduler created with MaxKeepAliveInterval: %f";
    uint64_t v19 = v32;
    uint32_t v20 = 18;
    goto LABEL_20;
  }
}

void sub_1002C622C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002C6274(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 72);
  if (v1 != (void *)(a1 + 80))
  {
    do
    {
      for (uint64_t i = (void *)v1[5]; i != (void *)v1[6]; ++i)
      {
        if (*i) {
          return 0;
        }
      }
      uint64_t v3 = (void *)v1[1];
      if (v3)
      {
        do
        {
          int v4 = v3;
          uint64_t v3 = (void *)*v3;
        }
        while (v3);
      }
      else
      {
        do
        {
          int v4 = (void *)v1[2];
          BOOL v5 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v5);
      }
      uint64_t v1 = v4;
    }
    while (v4 != (void *)(a1 + 80));
  }
  return 1;
}

void sub_1002C62E8(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C635C;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C635C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C65E8;
  v6[3] = &unk_10199E470;
  v6[4] = v2;
  int v7 = v4;
  int v8 = v5;
  sub_1002C63FC(v2, v4, v5, v6);
}

void sub_1002C63FC(uint64_t a1, uint64_t a2, int a3, void *a4)
{
  int v17 = a2;
  int v7 = a4;
  uint64_t v8 = *(void *)(a1 + 80);
  if (v8)
  {
    uint64_t v9 = a1 + 80;
    do
    {
      int v10 = *(_DWORD *)(v8 + 32);
      BOOL v11 = v10 < (int)a2;
      if (v10 >= (int)a2) {
        char v12 = (uint64_t *)v8;
      }
      else {
        char v12 = (uint64_t *)(v8 + 8);
      }
      if (!v11) {
        uint64_t v9 = v8;
      }
      uint64_t v8 = *v12;
    }
    while (*v12);
    if (v9 != a1 + 80 && *(_DWORD *)(v9 + 32) <= (int)a2)
    {
      uint64_t v13 = sub_1002C73FC((uint64_t **)(a1 + 72), a2, &v17);
      uint64_t v14 = v13[5];
      if (a3 >= (unint64_t)(v13[6] - v14))
      {
        unint64_t v15 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), a2);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_DWORD *)std::string buf = 67109120;
        int v19 = a3;
        std::string::size_type v16 = "#I context ID %d is too large, not exist";
      }
      else
      {
        if (v14[a3])
        {
          v7[2](v7);
          goto LABEL_19;
        }
        unint64_t v15 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 64) + 16))(*(void *)(a1 + 64), a2);
        if (!os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_19;
        }
        *(_DWORD *)std::string buf = 67109120;
        int v19 = a3;
        std::string::size_type v16 = "#I there is no scheduler on context %d";
      }
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v16, buf, 8u);
    }
  }
LABEL_19:
}

void sub_1002C65C8(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C65E8(uint64_t a1)
{
  uint64_t v2 = (int *)(a1 + 40);
  uint64_t v3 = *(void *)(a1 + 32);
  sub_1002C688C((uint64_t **)v3, *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
  uint64_t v4 = *(void *)(v3 + 80);
  if (v4)
  {
    int v5 = *v2;
    uint64_t v6 = v3 + 80;
    do
    {
      int v7 = *(_DWORD *)(v4 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        uint64_t v9 = (uint64_t *)v4;
      }
      else {
        uint64_t v9 = (uint64_t *)(v4 + 8);
      }
      if (!v8) {
        uint64_t v6 = v4;
      }
      uint64_t v4 = *v9;
    }
    while (*v9);
    if (v6 != v3 + 80 && v5 >= *(_DWORD *)(v6 + 32))
    {
      int v10 = sub_1002C73FC((uint64_t **)(v3 + 72), v5, v2);
      uint64_t v11 = *(int *)(a1 + 44);
      char v12 = v10[5];
      uint64_t v13 = (void *)v12[v11];
      v12[v11] = 0;
    }
  }
  uint64_t v14 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v3 + 64) + 16))(*(void *)(v3 + 64), *v2);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    int v15 = *(_DWORD *)(a1 + 44);
    LODWORD(__p[0]) = 67109120;
    HIDWORD(__p[0]) = v15;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I TechKeepAlive-%d: Scheduler released", (uint8_t *)__p, 8u);
  }
  if (!sub_1002C6274(v3)) {
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v3 + 48));
  int v17 = ServiceMap;
  if (v18 < 0)
  {
    int v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v20 = 5381;
    do
    {
      uint64_t v18 = v20;
      unsigned int v21 = *v19++;
      uint64_t v20 = (33 * v20) ^ v21;
    }
    while (v21);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v18;
  uint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)__p);
  if (!v22)
  {
    uint64_t v24 = 0;
    goto LABEL_22;
  }
  uint64_t v24 = v22[3];
  uint64_t v23 = (std::__shared_weak_count *)v22[4];
  if (!v23)
  {
LABEL_22:
    std::mutex::unlock(v17);
    uint64_t v23 = 0;
    char v25 = 1;
    goto LABEL_23;
  }
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v17);
  atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v23);
  char v25 = 0;
LABEL_23:
  sub_100058DB0(__p, "TechKeepAliveController");
  (*(void (**)(uint64_t, void **))(*(void *)v24 + 24))(v24, __p);
  if (v27 < 0)
  {
    operator delete(__p[0]);
    if (v25) {
      return;
    }
  }
  else if (v25)
  {
    return;
  }
  sub_10004D2C8(v23);
}

void sub_1002C6844(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t **sub_1002C688C(uint64_t **result, int a2, int a3)
{
  int v32 = a2;
  uint64_t v3 = result + 10;
  uint64_t v4 = result[10];
  if (v4)
  {
    uint64_t v6 = result;
    result += 9;
    int v7 = v3;
    do
    {
      int v8 = *((_DWORD *)v4 + 8);
      BOOL v9 = v8 < a2;
      if (v8 >= a2) {
        int v10 = (uint64_t **)v4;
      }
      else {
        int v10 = (uint64_t **)(v4 + 1);
      }
      if (!v9) {
        int v7 = (uint64_t **)v4;
      }
      uint64_t v4 = *v10;
    }
    while (*v10);
    if (v7 != v3 && *((_DWORD *)v7 + 8) <= a2)
    {
      uint64_t result = sub_1002C73FC(result, a2, &v32);
      if (a3 < (unint64_t)(result[6] - result[5]))
      {
        uint64_t v11 = result;
        sub_1002C6F8C(v6 + 15, a3);
        char v12 = v6[15];
        uint64_t v13 = (char *)v6[16] - (char *)v12;
        if (v13)
        {
          unint64_t v14 = v13 >> 3;
          if (v14 <= 1) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = v14;
          }
          unint64_t v16 = *v12;
          if (*v12) {
            return (uint64_t **)[(id)v11[5][a3] stopKeepAlive];
          }
          int v17 = v12 + 1;
          uint64_t v18 = v15 - 1;
          while (v18 != v16)
          {
            if (v17[v16++])
            {
              if (v16 < v14) {
                return (uint64_t **)[(id)v11[5][a3] stopKeepAlive];
              }
              break;
            }
          }
        }
        ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)v6[6]);
        unsigned int v21 = ServiceMap;
        if (v22 < 0)
        {
          uint64_t v23 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
          uint64_t v24 = 5381;
          do
          {
            uint64_t v22 = v24;
            unsigned int v25 = *v23++;
            uint64_t v24 = (33 * v24) ^ v25;
          }
          while (v25);
        }
        std::mutex::lock(ServiceMap);
        __p[0] = (void *)v22;
        int v26 = sub_10004D37C(&v21[1].__m_.__sig, (unint64_t *)__p);
        if (v26)
        {
          uint64_t v28 = v26[3];
          char v27 = (std::__shared_weak_count *)v26[4];
          if (v27)
          {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v21);
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v27);
            char v29 = 0;
LABEL_29:
            sub_100058DB0(__p, "iWLAN-KeepAlive");
            (*(void (**)(uint64_t, void **))(*(void *)v28 + 40))(v28, __p);
            if (v31 < 0) {
              operator delete(__p[0]);
            }
            if ((v29 & 1) == 0) {
              sub_10004D2C8(v27);
            }
            return (uint64_t **)[(id)v11[5][a3] stopKeepAlive];
          }
        }
        else
        {
          uint64_t v28 = 0;
        }
        std::mutex::unlock(v21);
        char v27 = 0;
        char v29 = 1;
        goto LABEL_29;
      }
    }
  }
  return result;
}

void sub_1002C6A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002C6AB8(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C6B2C;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C6B2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C6BCC;
  v6[3] = &unk_10199E470;
  v6[4] = v2;
  int v7 = v5;
  int v8 = v4;
  sub_1002C63FC(v2, v4, v5, v6);
}

void *sub_1002C6BCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(unint64_t **)(v2 + 120);
  uint64_t v4 = *(void *)(v2 + 128) - (void)v3;
  if (v4)
  {
    unint64_t v5 = v4 >> 3;
    if (v5 <= 1) {
      uint64_t v6 = 1;
    }
    else {
      uint64_t v6 = v5;
    }
    unint64_t v7 = *v3;
    if (*v3) {
      goto LABEL_21;
    }
    int v8 = v3 + 1;
    uint64_t v9 = v6 - 1;
    while (v9 != v7)
    {
      if (v8[v7++])
      {
        if (v7 < v5) {
          goto LABEL_21;
        }
        break;
      }
    }
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(v2 + 48));
  char v12 = ServiceMap;
  if (v13 < 0)
  {
    unint64_t v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v13;
  int v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)__p);
  if (!v17)
  {
    uint64_t v19 = 0;
    goto LABEL_17;
  }
  uint64_t v19 = v17[3];
  uint64_t v18 = (std::__shared_weak_count *)v17[4];
  if (!v18)
  {
LABEL_17:
    std::mutex::unlock(v12);
    uint64_t v18 = 0;
    char v20 = 1;
    goto LABEL_18;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v12);
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  char v20 = 0;
LABEL_18:
  sub_100058DB0(__p, "iWLAN-KeepAlive");
  (*(void (**)(uint64_t, void **))(*(void *)v19 + 32))(v19, __p);
  if ((v31 & 0x80000000) == 0)
  {
    if (v20) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  operator delete(__p[0]);
  if ((v20 & 1) == 0) {
LABEL_20:
  }
    sub_10004D2C8(v18);
LABEL_21:
  uint64_t result = sub_1002C6DE8((void *)(v2 + 120), *(int *)(a1 + 40), 1);
  uint64_t v24 = *(void *)(v2 + 80);
  uint64_t v23 = v2 + 80;
  uint64_t v22 = v24;
  if (v24)
  {
    int v25 = *(_DWORD *)(a1 + 44);
    uint64_t v26 = v23;
    do
    {
      int v27 = *(_DWORD *)(v22 + 32);
      BOOL v28 = v27 < v25;
      if (v27 >= v25) {
        char v29 = (uint64_t *)v22;
      }
      else {
        char v29 = (uint64_t *)(v22 + 8);
      }
      if (!v28) {
        uint64_t v26 = v22;
      }
      uint64_t v22 = *v29;
    }
    while (*v29);
    if (v26 != v23 && v25 >= *(_DWORD *)(v26 + 32)) {
      return [*(id *)(*(void *)(v26 + 40) + 8 * *(int *)(a1 + 40)) startKeepAlive];
    }
  }
  return result;
}

void sub_1002C6DB4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1002C6DE8(void *a1, unint64_t a2, int a3)
{
  if (a1[3] <= a2) {
    __assert_rtn("set", "dynamic_bitset.hpp", 1035, "pos < m_num_bits");
  }
  if (a3) {
    *(void *)(*a1 + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) |= 1 << a2;
  }
  else {
    sub_1002C6F8C(a1, a2);
  }
  return a1;
}

void sub_1002C6E68(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C6EDC;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C6EDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C6F7C;
  v6[3] = &unk_10199E470;
  v6[4] = v2;
  int v7 = v4;
  int v8 = v5;
  sub_1002C63FC(v2, v4, v5, v6);
}

uint64_t **sub_1002C6F7C(uint64_t a1)
{
  return sub_1002C688C(*(uint64_t ***)(a1 + 32), *(_DWORD *)(a1 + 40), *(_DWORD *)(a1 + 44));
}

void *sub_1002C6F8C(void *result, unint64_t a2)
{
  if (result[3] <= a2) {
    __assert_rtn("reset", "dynamic_bitset.hpp", 1065, "pos < m_num_bits");
  }
  *(void *)(*result + ((a2 >> 3) & 0x1FFFFFFFFFFFFFF8)) &= ~(1 << a2);
  return result;
}

void sub_1002C6FEC(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C7060;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C7060(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C7100;
  v6[3] = &unk_10199E470;
  v6[4] = v2;
  int v7 = v4;
  int v8 = v5;
  sub_1002C63FC(v2, v4, v5, v6);
}

int *sub_1002C7100(int *result)
{
  uint64_t v1 = *((void *)result + 4);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v2 = v1 + 80;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = result[10];
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        uint64_t v9 = (uint64_t *)v3;
      }
      else {
        uint64_t v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32)) {
      return (int *)[*(id *)(*(void *)(v6 + 40) + 8 * result[11]) growKeepAliveInterval];
    }
  }
  return result;
}

void sub_1002C7158(uint64_t a1, int a2, int a3)
{
  v3[0] = _NSConcreteStackBlock;
  v3[1] = 3221225472;
  void v3[2] = sub_1002C71CC;
  v3[3] = &unk_10199E470;
  v3[4] = a1;
  int v4 = a2;
  int v5 = a3;
  sub_1002C75A0((uint64_t *)(a1 + 8), v3);
}

void sub_1002C71CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v4 = *(unsigned int *)(a1 + 40);
  int v5 = *(_DWORD *)(a1 + 44);
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 3221225472;
  v6[2] = sub_1002C726C;
  v6[3] = &unk_10199E470;
  v6[4] = v2;
  int v7 = v4;
  int v8 = v5;
  sub_1002C63FC(v2, v4, v5, v6);
}

int *sub_1002C726C(int *result)
{
  uint64_t v1 = *((void *)result + 4);
  uint64_t v4 = *(void *)(v1 + 80);
  uint64_t v2 = v1 + 80;
  uint64_t v3 = v4;
  if (v4)
  {
    int v5 = result[10];
    uint64_t v6 = v2;
    do
    {
      int v7 = *(_DWORD *)(v3 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        uint64_t v9 = (uint64_t *)v3;
      }
      else {
        uint64_t v9 = (uint64_t *)(v3 + 8);
      }
      if (!v8) {
        uint64_t v6 = v3;
      }
      uint64_t v3 = *v9;
    }
    while (*v9);
    if (v6 != v2 && v5 >= *(_DWORD *)(v6 + 32)) {
      return (int *)[*(id *)(*(void *)(v6 + 40) + 8 * result[11]) shrinkKeepAliveInterval];
    }
  }
  return result;
}

void sub_1002C72C8()
{
}

uint64_t sub_1002C72DC(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void sub_1002C72E8(void *a1)
{
  if (a1)
  {
    sub_1002C72E8(*a1);
    sub_1002C72E8(a1[1]);
    uint64_t v2 = a1[5];
    if (v2)
    {
      uint64_t v3 = a1[6];
      uint64_t v4 = (void *)a1[5];
      if (v3 != v2)
      {
        do
        {
          int v5 = *(void **)(v3 - 8);
          v3 -= 8;
        }
        while (v3 != v2);
        uint64_t v4 = (void *)a1[5];
      }
      a1[6] = v2;
      operator delete(v4);
    }
    operator delete(a1);
  }
}

BOOL sub_1002C7370(uint64_t *a1)
{
  unint64_t v1 = a1[3];
  uint64_t v2 = *a1;
  uint64_t v3 = a1[1];
  uint64_t v4 = v1 & 0x3F;
  if ((v1 & 0x3F) != 0)
  {
    if (v3 == v2) {
      __assert_rtn("m_highest_block", "dynamic_bitset.hpp", 2025, "size() > 0 && num_blocks() > 0");
    }
    if (*(void *)(v3 - 8) >> v4) {
      return 0;
    }
  }
  unint64_t v5 = (v3 - v2) >> 3;
  if (v5 > (a1[2] - v2) >> 3) {
    return 0;
  }
  unint64_t v7 = v1 >> 6;
  if (v4) {
    ++v7;
  }
  return v5 == v7;
}

uint64_t **sub_1002C73FC(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x40uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[6] = 0;
    v7[7] = 0;
    v7[5] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    unsigned __int8 *v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_100046C90(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

uint64_t **sub_1002C74D0(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  unint64_t v5 = a1[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        unint64_t v7 = (uint64_t **)v5;
        int v8 = *((_DWORD *)v5 + 8);
        if (v8 <= a2) {
          break;
        }
        unint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      unint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    unint64_t v7 = a1 + 1;
LABEL_9:
    uint64_t v9 = (uint64_t *)v7;
    unint64_t v7 = (uint64_t **)operator new(0x30uLL);
    *((_DWORD *)v7 + 8) = *a3;
    v7[5] = 0;
    *unint64_t v7 = 0;
    v7[1] = 0;
    v7[2] = v9;
    unsigned __int8 *v6 = (uint64_t *)v7;
    int v10 = (uint64_t *)**a1;
    uint64_t v11 = (uint64_t *)v7;
    if (v10)
    {
      *a1 = v10;
      uint64_t v11 = *v6;
    }
    sub_100046C90(a1[1], v11);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
  }
  return v7;
}

void sub_1002C75A0(uint64_t *a1, void *a2)
{
  id v3 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[1];
  if (!v4 || (v5 = *a1, (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unint64_t v7 = v6;
  int v8 = a1[2];
  block[0] = _NSConcreteStackBlock;
  block[1] = 3321888768;
  block[2] = sub_1002C768C;
  block[3] = &unk_1019B4D18;
  uint64_t v12 = v5;
  uint64_t v13 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  id v9 = v3;
  id v11 = v9;
  dispatch_async(v8, block);

  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
}

uint64_t sub_1002C768C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_1002C769C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002C76B8(uint64_t a1)
{
  unint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_1002C76C8()
{
}

void sub_1002C7B58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v18);
  }

  _Unwind_Resume(a1);
}

void sub_1002C7DD0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C8424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  sub_1000577C4(&a14);
  if (a20) {
    sub_10004D2C8(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1002C8AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, const void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  sub_1000577C4(&a14);
  if (a20) {
    sub_10004D2C8(a20);
  }

  _Unwind_Resume(a1);
}

void sub_1002C8D54(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002C94C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, uint64_t a16, void *a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18) {
    sub_10004D2C8(a18);
  }
  sub_1000577C4(&a10);
  if (__p)
  {
    a12 = (uint64_t)__p;
    operator delete(__p);
  }

  if (a15) {
    sub_10004D2C8(a15);
  }

  _Unwind_Resume(a1);
}

void sub_1002C9E90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, char a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, char a20,void *a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,const void *a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a22);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (v55 < 0) {
    operator delete(v54);
  }
  sub_10005717C(&a40);
  if ((a11 & 1) == 0) {
    sub_10004D2C8(v53);
  }

  _Unwind_Resume(a1);
}

void sub_1002CA41C(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1002CA80C(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1002CAC00(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1002CAFE8(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_1002CB3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }

  _Unwind_Resume(a1);
}

void sub_1002CB868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_1002CB918(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002CBC8C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_1002CBCF0(void *a1)
{
  id v1 = a1;
  v12[0] = @"PCSCFAddress";
  v12[1] = @"EPDGAddress";
  void v12[2] = @"WiFiCallingInCallHandover";
  +[NSArray arrayWithObjects:v12 count:3];
  long long v9 = 0u;
  long long v10 = 0u;
  long long v7 = 0u;
  long long v8 = 0u;
  id v2 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v3 = (uint64_t)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
  if (v3)
  {
    uint64_t v4 = *(void *)v8;
    while (2)
    {
      for (uint64_t i = 0; i != v3; ++i)
      {
        if (*(void *)v8 != v4) {
          objc_enumerationMutation(v2);
        }
        if (objc_msgSend(*(id *)(*((void *)&v7 + 1) + 8 * i), "isEqualToString:", v1, (void)v7))
        {
          uint64_t v3 = 1;
          goto LABEL_11;
        }
      }
      uint64_t v3 = (uint64_t)[v2 countByEnumeratingWithState:&v7 objects:v11 count:16];
      if (v3) {
        continue;
      }
      break;
    }
  }
LABEL_11:

  return v3;
}

void sub_1002CBE34(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002CC3DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  uint64_t v12 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_1000577C4((const void **)va1);
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v9);
  }

  _Unwind_Resume(a1);
}

const void **sub_1002CC4B4(const void **a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2) {
    CFRetain(*a2);
  }
  uint64_t v4 = *a1;
  *a1 = v3;
  uint64_t v6 = v4;
  sub_1000577C4(&v6);
  return a1;
}

void sub_1002CC994(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1002CCE84(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1002CD16C(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1002CD560(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v8 = va_arg(va1, const void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);

  sub_1000558F4((const void **)va);
  sub_10005717C((const void **)va1);
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1002CD948(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  long long v8 = va_arg(va1, const void *);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);

  sub_1000558F4((const void **)va);
  sub_1000558F4((const void **)va1);
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_1002CDB80(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002CE038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }

  _Unwind_Resume(a1);
}

void sub_1002CE2D4(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_1002CEA64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,void *a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,const void *a40,__int16 a41,char a42,char a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a30 < 0) {
    operator delete(a22);
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  if (v52 < 0) {
    operator delete(v51);
  }
  sub_10005717C(&a40);

  _Unwind_Resume(a1);
}

void ***sub_1002CED68(const void *a1, void ***a2)
{
  char v6 = 0;
  if (a1)
  {
    CFTypeID v4 = CFGetTypeID(a1);
    if (v4 == CFStringGetTypeID()) {
      char v6 = a1;
    }
  }
  return sub_100076D8C(a2, &v6);
}

uint64_t sub_1002CEDC8(uint64_t a1)
{
  return a1;
}

void sub_1002CEDF4(uint64_t a1)
{
  operator delete();
}

void *sub_1002CEE40(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = off_1019B4D98;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CEE98(uint64_t a1, void *a2)
{
  *a2 = off_1019B4D98;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CEEE0(uint64_t a1)
{
}

void sub_1002CEEE8(id *a1)
{
  operator delete(a1);
}

void sub_1002CEF24(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (v6 >= 0) {
    CFTypeRef v3 = __p;
  }
  else {
    CFTypeRef v3 = (void **)__p[0];
  }
  CFTypeID v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3, __p[0], __p[1], v6);
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();

  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002CEFB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002CEFE0(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4DF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF020()
{
  return &off_1019B4DF8;
}

uint64_t sub_1002CF02C(uint64_t a1)
{
  return a1;
}

void sub_1002CF058(uint64_t a1)
{
  operator delete();
}

void *sub_1002CF0A4(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = off_1019B4E18;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CF0FC(uint64_t a1, void *a2)
{
  *a2 = off_1019B4E18;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CF144(uint64_t a1)
{
}

void sub_1002CF14C(id *a1)
{
  operator delete(a1);
}

const void **sub_1002CF188(uint64_t a1, const void **a2)
{
  CFTypeRef v3 = *a2;
  *a2 = 0;
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  return sub_100057D78(&v3);
}

void sub_1002CF1F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CF208(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4E78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF248()
{
  return &off_1019B4E78;
}

uint64_t sub_1002CF254(uint64_t a1)
{
  return a1;
}

void sub_1002CF280(uint64_t a1)
{
  operator delete();
}

void *sub_1002CF2CC(uint64_t a1)
{
  id v2 = operator new(0x10uLL);
  void *v2 = off_1019B4E98;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CF324(uint64_t a1, void *a2)
{
  *a2 = off_1019B4E98;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CF36C(uint64_t a1)
{
}

void sub_1002CF374(id *a1)
{
  operator delete(a1);
}

void sub_1002CF3B0(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v2 = HIBYTE(v7);
  if (SHIBYTE(v7) < 0)
  {
    if (__p[1])
    {
      CFTypeRef v3 = (void **)__p[0];
      goto LABEL_6;
    }
  }
  else if (HIBYTE(v7))
  {
    CFTypeRef v3 = __p;
LABEL_6:
    uint64_t v4 = *(void *)(a1 + 8);
    char v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3, __p[0]);
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);

    char v2 = HIBYTE(v7);
    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
LABEL_8:
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002CF46C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002CF494(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4EF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF4D4()
{
  return &off_1019B4EF8;
}

uint64_t sub_1002CF4E0(uint64_t a1)
{
  return a1;
}

void sub_1002CF50C(uint64_t a1)
{
  operator delete();
}

void *sub_1002CF558(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  void *v2 = off_1019B4F18;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CF5B0(uint64_t a1, void *a2)
{
  *a2 = off_1019B4F18;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CF5F8(uint64_t a1)
{
}

void sub_1002CF600(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1002CF63C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_1002CF654(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4F78)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF694()
{
  return &off_1019B4F78;
}

uint64_t sub_1002CF6A0(uint64_t a1)
{
  return a1;
}

void sub_1002CF6CC(uint64_t a1)
{
  operator delete();
}

void *sub_1002CF718(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  void *v2 = off_1019B4F98;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CF770(uint64_t a1, void *a2)
{
  *a2 = off_1019B4F98;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CF7B8(uint64_t a1)
{
}

void sub_1002CF7C0(id *a1)
{
  operator delete(a1);
}

uint64_t sub_1002CF7FC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_1002CF810(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B4FF8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF850()
{
  return &off_1019B4FF8;
}

uint64_t sub_1002CF85C(uint64_t a1)
{
  return a1;
}

void sub_1002CF888(uint64_t a1)
{
  operator delete();
}

uint64_t sub_1002CF8D4()
{
  return 0;
}

id sub_1002CF8DC(uint64_t a1, void *a2)
{
  *a2 = off_1019B5018;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CF924(uint64_t a1)
{
  id v1 = *(void **)(a1 + 8);
  *(void *)(a1 + 8) = 0;
}

const void **sub_1002CF934(uint64_t a1, const void **a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *a2;
  *a2 = 0;
  (*(void (**)(void))(v2 + 16))();
  return sub_100057D78(&v4);
}

void sub_1002CF980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002CF994(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B5078)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CF9D4()
{
  return &off_1019B5078;
}

uint64_t sub_1002CF9E0(uint64_t a1)
{
  return a1;
}

void sub_1002CFA0C(uint64_t a1)
{
  operator delete();
}

void *sub_1002CFA58(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_1019B5098;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CFAB0(uint64_t a1, void *a2)
{
  *a2 = off_1019B5098;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CFAF8(uint64_t a1)
{
}

void sub_1002CFB00(id *a1)
{
  operator delete(a1);
}

void sub_1002CFB3C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  char v2 = HIBYTE(v7);
  if (SHIBYTE(v7) < 0)
  {
    if (__p[1])
    {
      CFTypeRef v3 = (void **)__p[0];
      goto LABEL_6;
    }
  }
  else if (HIBYTE(v7))
  {
    CFTypeRef v3 = __p;
LABEL_6:
    uint64_t v4 = *(void *)(a1 + 8);
    char v5 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3, __p[0]);
    (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);

    char v2 = HIBYTE(v7);
    goto LABEL_8;
  }
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
LABEL_8:
  if (v2 < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002CFBF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002CFC20(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B50F8)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CFC60()
{
  return &off_1019B50F8;
}

uint64_t sub_1002CFC6C(uint64_t a1)
{
  return a1;
}

void sub_1002CFC98(uint64_t a1)
{
  operator delete();
}

void *sub_1002CFCE4(uint64_t a1)
{
  char v2 = operator new(0x10uLL);
  void *v2 = off_1019B5118;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_1002CFD3C(uint64_t a1, void *a2)
{
  *a2 = off_1019B5118;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_1002CFD84(uint64_t a1)
{
}

void sub_1002CFD8C(id *a1)
{
  operator delete(a1);
}

void sub_1002CFDC8(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  if (SHIBYTE(v7) < 0)
  {
    if (__p[1])
    {
      char v2 = (void **)__p[0];
      goto LABEL_6;
    }
  }
  else if (HIBYTE(v7))
  {
    char v2 = __p;
LABEL_6:
    uint64_t v3 = *(void *)(a1 + 8);
    uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v2, __p[0]);
    (*(void (**)(uint64_t, void *, void))(v3 + 16))(v3, v4, 0);
    goto LABEL_8;
  }
  uint64_t v5 = *(void *)(a1 + 8);
  uint64_t v4 = +[NSError errorWithDomain:code:userInfo:](NSError, "errorWithDomain:code:userInfo:", NSPOSIXErrorDomain, 22, 0, __p[0]);
  (*(void (**)(uint64_t, void, void *))(v5 + 16))(v5, 0, v4);
LABEL_8:

  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002CFEB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002CFEDC(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B5178)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1002CFF1C()
{
  return &off_1019B5178;
}

uint64_t sub_1002CFF28(uint64_t a1)
{
  int v17 = 0;
  uint64_t v18 = 0;
  char v16 = &v17;
  char v2 = +[NSDate date];
  if (a1)
  {
    uint64_t v3 = 0;
    uint64_t v4 = 0;
    do
    {
      sub_1002D00C8(v2);
      CFDateRef v5 = (const __CFDate *)objc_claimAutoreleasedReturnValue();
      double AbsoluteTime = CFDateGetAbsoluteTime(v5);
      uint64_t v7 = v17;
      long long v8 = &v17;
      long long v9 = &v17;
      if (v17)
      {
        uint64_t v10 = v17;
        do
        {
          double v11 = *((double *)v10 + 4);
          if (AbsoluteTime >= v11)
          {
            if (v11 >= AbsoluteTime)
            {
              ++v4;
              goto LABEL_20;
            }
            ++v10;
          }
          uint64_t v10 = (uint64_t *)*v10;
        }
        while (v10);
        do
        {
          while (1)
          {
            long long v9 = (uint64_t **)v7;
            double v12 = *((double *)v7 + 4);
            if (v12 <= AbsoluteTime) {
              break;
            }
            uint64_t v7 = (uint64_t *)*v7;
            long long v8 = v9;
            if (!*v9) {
              goto LABEL_17;
            }
          }
          if (v12 >= AbsoluteTime) {
            goto LABEL_20;
          }
          uint64_t v7 = (uint64_t *)v7[1];
        }
        while (v7);
        long long v8 = v9 + 1;
      }
LABEL_17:
      uint64_t v13 = (double *)operator new(0x28uLL);
      v13[4] = AbsoluteTime;
      double *v13 = 0.0;
      v13[1] = 0.0;
      *((void *)v13 + 2) = v9;
      const void *v8 = (uint64_t *)v13;
      if (*v16)
      {
        char v16 = (uint64_t **)*v16;
        uint64_t v13 = (double *)*v8;
      }
      sub_100046C90(v17, (uint64_t *)v13);
      ++v18;
LABEL_20:

      ++v3;
    }
    while (v3 != a1);
  }
  uint64_t v14 = v18;

  sub_10005D144(v17);
  return v14;
}

void sub_1002D009C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11)
{
}

id sub_1002D00C8(void *a1)
{
  id v1 = a1;
  if (byte_101B0CB04) {
    std::random_device::result_type v2 = 15552000;
  }
  else {
    std::random_device::result_type v2 = 0;
  }
  if (byte_101B0CB04 == 1)
  {
    unsigned int v3 = v2 | 1;
    uint64_t v4 = __clz(v2 | 1);
    uint64_t v5 = 31;
    if (((v3 << v4) & 0x7FFFFFFF) != 0) {
      uint64_t v5 = 32;
    }
    unint64_t v6 = v5 - v4;
    unint64_t v7 = v6 >> 5;
    if ((v6 & 0x1F) != 0) {
      ++v7;
    }
    if (v7 <= v6) {
      unsigned int v8 = 0xFFFFFFFF >> -(v6 / v7);
    }
    else {
      unsigned int v8 = 0;
    }
    do
      std::random_device::result_type v2 = std::random_device::operator()((std::random_device *)&unk_101B0CB08) & v8;
    while (v2 >= v3);
  }
  long long v9 = +[NSDate dateWithTimeInterval:v1 sinceDate:(double)(int)v2];

  return v9;
}

void sub_1002D01AC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

_UNKNOWN **sub_1002D01C0()
{
  return &off_101AE8010;
}

void sub_1002D01CC(uint64_t *a1@<X0>, id *a2@<X1>, unsigned char *a3@<X8>)
{
  uint64_t v4 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_8:
      *a3 = 0;
      a3[24] = 0;
      return;
    }
    uint64_t v4 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_8;
  }
  unint64_t v6 = +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v4);
  id v7 = objc_alloc((Class)NSString);
  id v16 = v6;
  id v8 = objc_msgSend(v7, "initWithBytes:length:encoding:", objc_msgSend(v16, "bytes"), objc_msgSend(v16, "length"), 4);
  id v9 = *a2;
  id v10 = objc_alloc((Class)NSString);
  id v11 = v9;
  id v12 = objc_msgSend(v10, "initWithBytes:length:encoding:", objc_msgSend(v11, "bytes"), objc_msgSend(v11, "length"), 4);
  id v13 = v8;
  id v14 = v12;
  if ([v14 length])
  {
    v17[0] = @"eid";
    v17[1] = @"baaCertification";
    v18[0] = v13;
    v18[1] = v14;
    char v15 = +[NSDictionary dictionaryWithObjects:v18 forKeys:v17 count:2];
    sub_1002D0420((uint64_t)a3, v15);
  }
  else
  {
    *a3 = 0;
    a3[24] = 0;
  }
}

void sub_1002D03D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_1002D0420(uint64_t a1, void *a2)
{
  id v3 = a2;
  if (+[NSJSONSerialization isValidJSONObject:v3])
  {
    id v11 = 0;
    uint64_t v4 = +[NSJSONSerialization dataWithJSONObject:v3 options:8 error:&v11];
    id v5 = v11;
    if (v5)
    {
      *(unsigned char *)a1 = 0;
      *(unsigned char *)(a1 + 24) = 0;
    }
    else
    {
      long long v9 = 0uLL;
      uint64_t v10 = 0;
      id v6 = v4;
      id v7 = (char *)[v6 bytes];
      id v8 = (char *)[v6 length];
      sub_10016A4CC((uint64_t)&v9, 0, v7, &v8[(void)v7], (int64_t)v8);
      *(_OWORD *)a1 = v9;
      *(void *)(a1 + 16) = v10;
      *(unsigned char *)(a1 + 24) = 1;
    }
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 24) = 0;
  }
}

void sub_1002D051C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
  _Unwind_Resume(a1);
}

void sub_1002D0554(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::random_device::result_type v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_12:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 72) = 0;
      return;
    }
    std::random_device::result_type v2 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_12;
  }
  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2);
  id v11 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:");
  id v5 = 0;
  if (v5 || !v4)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 72) = 0;
  }
  else
  {
    id v6 = [v4 objectForKeyedSubscript:@"attestationData"];
    id v7 = [v4 objectForKeyedSubscript:@"certification"];
    uint64_t v8 = [v4 objectForKeyedSubscript:@"signature"];
    long long v9 = (void *)v8;
    if (v6 && v7 && v8)
    {
      [v6 dataUsingEncoding:4];
      ctu::cf::assign();
      [v7 dataUsingEncoding:4];
      ctu::cf::assign();
      [v9 dataUsingEncoding:4];
      ctu::cf::assign();
      *(_OWORD *)a2 = 0uLL;
      *(void *)(a2 + 16) = 0;
      *(_OWORD *)(a2 + 24) = 0uLL;
      *(void *)(a2 + 40) = 0;
      *(_OWORD *)(a2 + 48) = 0uLL;
      *(void *)(a2 + 64) = 0;
      char v10 = 1;
    }
    else
    {
      char v10 = 0;
      *(unsigned char *)a2 = 0;
    }
    *(unsigned char *)(a2 + 72) = v10;
  }
}

void sub_1002D0760(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, long long a9, long long a10, id a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  if ((void)a9) {
    operator delete((void *)a9);
  }
  if ((void)a10) {
    operator delete((void *)a10);
  }

  _Unwind_Resume(a1);
}

void sub_1002D0814(void *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X3>, uint64_t a5@<X8>)
{
  id v13 = a1;
  id v9 = a2;
  id v10 = a3;
  id v11 = a4;
  id v12 = +[NSMutableDictionary dictionary];
  if ([v13 length]) {
    [v12 setObject:v13 forKeyedSubscript:@"productType"];
  }
  if ([v9 length]) {
    [v12 setObject:v9 forKeyedSubscript:@"productVersion"];
  }
  if ([v10 length]) {
    [v12 setObject:v10 forKeyedSubscript:@"buildVersion"];
  }
  if ([v11 length]) {
    [v12 setObject:v11 forKeyedSubscript:@"releaseType"];
  }
  [v12 setObject:@"sepattest" forKeyedSubscript:@"context"];
  sub_1002D0420(a5, v12);
}

void sub_1002D0954(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_1002D0980(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  std::random_device::result_type v2 = a1;
  if (*((char *)a1 + 23) < 0)
  {
    if (!a1[1])
    {
LABEL_11:
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
      return;
    }
    std::random_device::result_type v2 = (uint64_t *)*a1;
  }
  else if (!*((unsigned char *)a1 + 23))
  {
    goto LABEL_11;
  }
  +[NSData dataWithBytes:length:](NSData, "dataWithBytes:length:", v2);
  uint64_t v12 = 0;
  id v10 = (id)objc_claimAutoreleasedReturnValue();
  uint64_t v4 = +[NSJSONSerialization JSONObjectWithData:options:error:](NSJSONSerialization, "JSONObjectWithData:options:error:");
  id v5 = 0;
  if (v5 || !v4)
  {
    *(unsigned char *)a2 = 0;
    *(unsigned char *)(a2 + 48) = 0;
  }
  else
  {
    id v6 = [v4 objectForKeyedSubscript:@"token"];
    uint64_t v7 = [v4 objectForKeyedSubscript:@"service"];
    uint64_t v8 = (void *)v7;
    if (v6 && v7)
    {
      memset(v11, 0, sizeof(v11));
      sub_100058DB0(v11, (char *)[v6 UTF8String]);
      id v9 = sub_100058DB0((void *)&v11[1] + 1, (char *)[v8 UTF8String]);
      *(_OWORD *)a2 = v11[0];
      *(void *)(a2 + 16) = *(void *)&v11[1];
      *(_OWORD *)(a2 + 24) = *(_OWORD *)v9;
      *(void *)(a2 + 40) = v9[2];
      *(unsigned char *)(a2 + 48) = 1;
    }
    else
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 48) = 0;
    }
  }
}

void sub_1002D0B24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_1002D0B74(uint64_t *a1@<X8>)
{
  if (SecKeyCopyPublicBytes())
  {
    sub_100058DB0(a1, (char *)&unk_101612807);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    BytePtr = (ctu *)CFDataGetBytePtr(0);
    Length = (const void *)CFDataGetLength(0);
    ctu::hex(a1, BytePtr, Length, v4);
    CFRelease(0);
  }
}

void sub_1002D0BF8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D0C14(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    *a2 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    *a2 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  *a2 = v6;
LABEL_9:
  xpc_release(v5);
  if (a1) {
    uint64_t v7 = "transfer";
  }
  else {
    uint64_t v7 = "prefetch";
  }
  xpc_object_t v10 = xpc_string_create(v7);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  v12.tv_sec = (__darwin_time_t)a2;
  *(void *)&v12.tv_usec = "requestType";
  sub_100035E70((uint64_t)&v12, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  v12.tv_sec = 0;
  *(void *)&v12.tv_usec = 0;
  gettimeofday(&v12, 0);
  xpc_object_t v8 = xpc_uint64_create(1000 * v12.tv_sec + v12.tv_usec / 0x3E8uLL);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v12.tv_sec = (__darwin_time_t)a2;
  *(void *)&v12.tv_usec = "latency";
  sub_100035E70((uint64_t)&v12, &v8, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(v8);
}

void sub_1002D0DCC(uint64_t a1, int a2)
{
  xpc_object_t object = xpc_BOOL_create(1);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  uint64_t v7 = a1;
  xpc_object_t v8 = "baaSuccess";
  sub_100035E70((uint64_t)&v7, &object, &v10);
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  if (a2) {
    xpc_object_t v4 = "expired";
  }
  else {
    xpc_object_t v4 = "notFetched";
  }
  xpc_object_t v5 = xpc_string_create(v4);
  if (!v5) {
    xpc_object_t v5 = xpc_null_create();
  }
  uint64_t v7 = a1;
  xpc_object_t v8 = "prefetchStatus";
  sub_100035E70((uint64_t)&v7, &v5, &v6);
  xpc_release(v6);
  xpc_object_t v6 = 0;
  xpc_release(v5);
}

void sub_1002D0EC0(uint64_t a1, const char *a2)
{
  std::random_device::result_type v2 = a2;
  if (a2[23] < 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  xpc_object_t v9 = xpc_BOOL_create(v4 == 0);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  uint64_t v7 = a1;
  xpc_object_t v8 = "discoverySuccess";
  sub_100035E70((uint64_t)&v7, &v9, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  if (v4)
  {
    if (v2[23] < 0) {
      std::random_device::result_type v2 = *(const char **)v2;
    }
    xpc_object_t v5 = xpc_string_create(v2);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    uint64_t v7 = a1;
    xpc_object_t v8 = "discoveryErrorReason";
    sub_100035E70((uint64_t)&v7, &v5, &v6);
    xpc_release(v6);
    xpc_object_t v6 = 0;
    xpc_release(v5);
  }
}

void sub_1002D0FD0(uint64_t a1, const char *a2)
{
  std::random_device::result_type v2 = a2;
  if (a2[23] < 0) {
    uint64_t v4 = *((void *)a2 + 1);
  }
  else {
    uint64_t v4 = *((unsigned __int8 *)a2 + 23);
  }
  xpc_object_t v9 = xpc_BOOL_create(v4 == 0);
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  uint64_t v7 = a1;
  xpc_object_t v8 = "attestationSuccess";
  sub_100035E70((uint64_t)&v7, &v9, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  if (v4)
  {
    if (v2[23] < 0) {
      std::random_device::result_type v2 = *(const char **)v2;
    }
    xpc_object_t v5 = xpc_string_create(v2);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    uint64_t v7 = a1;
    xpc_object_t v8 = "attestationErrorReason";
    sub_100035E70((uint64_t)&v7, &v5, &v6);
    xpc_release(v6);
    xpc_object_t v6 = 0;
    xpc_release(v5);
  }
}

void sub_1002D10E0(Registry **a1, xpc_object_t *a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*a1);
  uint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    xpc_object_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      __darwin_time_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  v19.tv_sec = v5;
  xpc_object_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&v19);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v4);
    xpc_object_t v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_21;
    }
LABEL_10:
    uint64_t uint64 = xpc_dictionary_get_uint64(*a2, "latency");
    v19.tv_sec = 0;
    *(void *)&v19.tv_usec = 0;
    gettimeofday(&v19, 0);
    xpc_object_t v17 = xpc_uint64_create(1000 * v19.tv_sec - uint64 + v19.tv_usec / 0x3E8uLL);
    if (!v17) {
      xpc_object_t v17 = xpc_null_create();
    }
    v19.tv_sec = (__darwin_time_t)a2;
    *(void *)&v19.tv_usec = "latency";
    sub_100035E70((uint64_t)&v19, &v17, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v17);
    xpc_object_t v17 = 0;
    xpc_object_t v14 = *a2;
    if (v14)
    {
      xpc_retain(v14);
      xpc_object_t v16 = v14;
    }
    else
    {
      xpc_object_t v14 = xpc_null_create();
      xpc_object_t v16 = v14;
      if (!v14)
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v14 = 0;
        goto LABEL_19;
      }
    }
    if (xpc_get_type(v14) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v14);
LABEL_20:
      (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v11 + 16))(v11, "commCenterSepAttestationMetric", &v16);
      xpc_release(v16);
      xpc_object_t v16 = 0;
      xpc_release(v14);
      goto LABEL_21;
    }
    xpc_object_t v15 = xpc_null_create();
LABEL_19:
    xpc_object_t v16 = v15;
    goto LABEL_20;
  }
  uint64_t v11 = v9[3];
  xpc_object_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
    goto LABEL_10;
  }
LABEL_21:
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_1002D1310(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v11);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1002D1364(Registry **a1, xpc_object_t *a2)
{
  xpc_object_t object = xpc_BOOL_create(1);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  xpc_object_t v6 = a2;
  uint64_t v7 = "baaSuccess";
  sub_100035E70((uint64_t)&v6, &object, &v9);
  xpc_release(v9);
  xpc_object_t v9 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_object_t v4 = xpc_string_create("prefetched");
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  xpc_object_t v6 = a2;
  uint64_t v7 = "prefetchStatus";
  sub_100035E70((uint64_t)&v6, &v4, &v5);
  xpc_release(v5);
  xpc_object_t v5 = 0;
  xpc_release(v4);
  xpc_object_t v4 = 0;
  sub_1002D10E0(a1, a2);
}

void sub_1002D1458(Registry **a1, xpc_object_t *a2, char a3)
{
  xpc_object_t v6 = xpc_BOOL_create(a3 != 1);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  v5[0] = a2;
  v5[1] = "keychainWriteFailure";
  sub_100035E70((uint64_t)v5, &v6, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v6);
  xpc_object_t v6 = 0;
  sub_1002D10E0(a1, a2);
}

void sub_1002D14EC(Registry **a1, xpc_object_t *a2, const char *a3)
{
  xpc_object_t v10 = xpc_BOOL_create(0);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  unsigned int v8 = a2;
  xpc_object_t v9 = "baaSuccess";
  sub_100035E70((uint64_t)&v8, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  if (a3[23] < 0) {
    a3 = *(const char **)a3;
  }
  xpc_object_t v6 = xpc_string_create(a3);
  if (!v6) {
    xpc_object_t v6 = xpc_null_create();
  }
  unsigned int v8 = a2;
  xpc_object_t v9 = "baaErrorReason";
  sub_100035E70((uint64_t)&v8, &v6, &v7);
  xpc_release(v7);
  xpc_object_t v7 = 0;
  xpc_release(v6);
  xpc_object_t v6 = 0;
  sub_1002D10E0(a1, a2);
}

void sub_1002D15F4()
{
  sub_10016AA28((std::random_device *)&unk_101B0CB08);
  __cxa_atexit((void (*)(void *))&std::random_device::~random_device, &unk_101B0CB08, (void *)&_mh_execute_header);
  byte_101B0CB04 = 1;
}

uint64_t CellularPlanControllerImpl::create@<X0>(uint64_t a1@<X1>, void *a2@<X8>)
{
  if (((*(uint64_t (**)(void))(**(void **)a1 + 64))() & 1) != 0
    || (uint64_t result = (*(uint64_t (**)(void))(**(void **)a1 + 40))(), (result & 1) != 0))
  {
    *a2 = 0;
    a2[1] = 0;
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_1002D2C64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(std::__shared_weak_count **)(v27 - 216);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = *(NSObject **)(v27 - 200);
  if (v30) {
    dispatch_release(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a27 + 8);
  if (v31) {
    sub_10004D2C8(v31);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D2C88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,std::__shared_weak_count *a47,uint64_t a48,std::__shared_weak_count *a49)
{
  if (a47) {
    sub_10004D2C8(a47);
  }
  if (a49) {
    sub_10004D2C8(a49);
  }
  xpc_object_t v50 = *(std::__shared_weak_count **)(a27 + 8);
  if (v50) {
    sub_10004D2C8(v50);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CA4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,std::__shared_weak_count *a51)
{
  if (a51) {
    sub_10004D2C8(a51);
  }
  unsigned int v53 = *(NSObject **)(v51 - 248);
  if (v53) {
    dispatch_release(v53);
  }
  v54 = *(std::__shared_weak_count **)(a27 + 8);
  if (v54) {
    sub_10004D2C8(v54);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,NSObject *a38)
{
  if (a38) {
    dispatch_release(a38);
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CC8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,std::__shared_weak_count *a40,uint64_t a41,std::__shared_weak_count *a42,NSObject *a43)
{
  if (a40) {
    sub_10004D2C8(a40);
  }
  if (a42) {
    sub_10004D2C8(a42);
  }
  if (a43) {
    dispatch_release(a43);
  }
  int64x2_t v44 = *(std::__shared_weak_count **)(a27 + 8);
  if (v44) {
    sub_10004D2C8(v44);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45)
{
  if (a45) {
    sub_10004D2C8();
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

void sub_1002D2CEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(std::__shared_weak_count **)(v27 - 232);
  if (v29) {
    std::__shared_weak_count::__release_weak(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a27 + 8);
  if (v30) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D04(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(std::__shared_weak_count **)(v27 - 184);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *(NSObject **)(v27 - 176);
  if (v30) {
    dispatch_release(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a27 + 8);
  if (v31) {
    sub_10004D2C8(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D20(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(std::__shared_weak_count **)(v27 - 160);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *(NSObject **)(v27 - 152);
  if (v30) {
    dispatch_release(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a27 + 8);
  if (v31) {
    sub_10004D2C8(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(NSObject **)(v27 - 144);
  if (v29) {
    dispatch_release(v29);
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(NSObject **)(v27 - 136);
  if (v29) {
    dispatch_release(v29);
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a36) {
    sub_10004D2C8();
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  char v29 = *(std::__shared_weak_count **)(v27 - 120);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *(NSObject **)(v27 - 112);
  if (v30) {
    dispatch_release(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a27 + 8);
  if (v31) {
    sub_10004D2C8(v31);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D78(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33)
{
  if (a33) {
    sub_10004D2C8(a33);
  }
  if (*(void *)(v33 - 104)) {
    JUMPOUT(0x1002D33F0);
  }
  int v35 = *(std::__shared_weak_count **)(a27 + 8);
  if (v35) {
    sub_10004D2C8(v35);
  }
  _Unwind_Resume(a1);
}

void sub_1002D2D8C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_1003133DC);
  __cxa_rethrow();
}

void sub_1002D2DB4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, PersonalitiesTracker *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, EmergencyMode *a17, CellularPlanPrivateNetworksDelegate *a18, CellularPlanCloudMonitorDelegate *a19, CellularPlanMultiplexerDelegate *a20,CellularPlanUploadTriggersModelInterfaceDelegate *a21,CellularPlanPendingTransferHandlerDelegateInterface *a22,CellularPlanSubscriptionControllerDelegate *a23,uint64_t a24,ctu::OsLogLogger *a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,std::__shared_weak_count *a29,dispatch_object_t object,std::__shared_weak_count *a31,uint64_t a32)
{
  if (a28) {
    sub_10004D2C8(a28);
  }
  if (a29) {
    sub_10004D2C8(a29);
  }
  if (a31) {
    sub_10004D2C8(a31);
  }
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x1002D340CLL);
}

void sub_1002D327C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(v37 - 184);
  if (v38) {
    sub_10004D2C8(v38);
  }
  int v39 = *(std::__shared_weak_count **)(v37 - 216);
  if (v39) {
    sub_10004D2C8(v39);
  }
  JUMPOUT(0x1002D2E84);
}

void sub_1002D32B4()
{
}

void sub_1002D32BC()
{
}

void sub_1002D32C4()
{
}

void sub_1002D32CC()
{
}

void sub_1002D32D4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,dispatch_object_t object,uint64_t a50,dispatch_object_t a51)
{
  if (object) {
    dispatch_release(object);
  }
  if (a51) {
    dispatch_release(a51);
  }
  if (a40 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x1002D2FA4);
}

void sub_1002D3304()
{
}

void sub_1002D330C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,dispatch_object_t object)
{
  uint64_t v51 = *(std::__shared_weak_count **)(v50 - 160);
  if (v51) {
    sub_10004D2C8(v51);
  }
  int v52 = *(std::__shared_weak_count **)(v50 - 120);
  if (v52) {
    sub_10004D2C8(v52);
  }
  if (object) {
    dispatch_release(object);
  }
  JUMPOUT(0x1002D316CLL);
}

void sub_1002D3338()
{
}

void sub_1002D3340()
{
  uint64_t v1 = *(NSObject **)(v0 - 240);
  if (v1) {
    dispatch_release(v1);
  }
  JUMPOUT(0x1002D3184);
}

void sub_1002D3354(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,char a35)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&a32);
  sub_100087E88(v35);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a35);
  JUMPOUT(0x1002D3218);
}

void sub_1002D337C()
{
}

void sub_1002D33B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  if (*(void *)(v27 - 120)) {
    JUMPOUT(0x1002D33BCLL);
  }
  if (*(void *)(a27 + 8)) {
    sub_10004D2C8();
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002D3414(uint64_t a1)
{
  *(void *)a1 = off_1019B5198;
  *(void *)(a1 + 48) = off_1019B59E8;
  *(void *)(a1 + 56) = off_1019B5DE8;
  *(void *)(a1 + 64) = off_1019B5E28;
  std::random_device::result_type v2 = (CellularPlanSubscriptionControllerDelegate *)(a1 + 72);
  *(void *)(a1 + 72) = off_1019B5F08;
  *(void *)(a1 + 80) = off_1019B5F88;
  *(void *)(a1 + 88) = off_1019B6048;
  *(void *)(a1 + 96) = off_1019B60E8;
  id v3 = (CellularPlanPendingTransferHandlerDelegateInterface *)(a1 + 104);
  *(void *)(a1 + 104) = off_1019B61D0;
  xpc_object_t v4 = (CellularPlanUploadTriggersModelInterfaceDelegate *)(a1 + 112);
  *(void *)(a1 + 112) = off_1019B6270;
  xpc_object_t v5 = (CellularPlanMultiplexerDelegate *)(a1 + 120);
  *(void *)(a1 + 120) = off_1019B62B8;
  xpc_object_t v6 = (CellularPlanCloudMonitorDelegate *)(a1 + 128);
  *(void *)(a1 + 128) = off_1019B6318;
  *(void *)(a1 + 136) = off_1019B6348;
  xpc_object_t v7 = (CellularPlanPrivateNetworksDelegate *)(a1 + 144);
  *(void *)(a1 + 144) = off_1019B6390;
  *(void *)(a1 + 152) = off_1019B63E8;
  unsigned int v8 = *(std::__shared_weak_count **)(a1 + 5584);
  if (v8) {
    sub_10004D2C8(v8);
  }
  uint64_t v9 = *(void *)(a1 + 5568);
  *(void *)(a1 + 5568) = 0;
  if (v9) {
    (*(void (**)(uint64_t))(*(void *)v9 + 8))(v9);
  }
  sub_1000DA2E4(*(char **)(a1 + 5544));
  xpc_object_t v45 = (void **)(a1 + 5504);
  sub_10030A698(&v45);
  sub_10003B34C((void *)(a1 + 5472));
  xpc_object_t v10 = *(std::__shared_weak_count **)(a1 + 5464);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (*(unsigned char *)(a1 + 5448))
  {
    xpc_object_t v45 = (void **)(a1 + 5424);
    sub_10030A774(&v45);
  }
  if (*(char *)(a1 + 5415) < 0) {
    operator delete(*(void **)(a1 + 5392));
  }
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 5376);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_100313814((void *)(a1 + 5336));
  std::mutex::~mutex((std::mutex *)(a1 + 5272));
  sub_100313790((void *)(a1 + 5232));
  sub_100313790((void *)(a1 + 5200));
  sub_10030AEBC(a1 + 5016);
  if (*(char *)(a1 + 5007) < 0) {
    operator delete(*(void **)(a1 + 4984));
  }
  char v12 = *(const void **)(a1 + 4976);
  if (v12) {
    _Block_release(v12);
  }
  sub_10030A89C(a1 + 4712);
  sub_1003136EC(*(void **)(a1 + 4696));
  sub_10005CD2C(a1 + 4664, *(char **)(a1 + 4672));
  sub_1000346F8(a1 + 4632, *(void **)(a1 + 4640));
  sub_1000346F8(a1 + 4608, *(void **)(a1 + 4616));
  sub_1000346F8(a1 + 4576, *(void **)(a1 + 4584));
  sub_10010C0E0(a1 + 4552, *(void **)(a1 + 4560));
  sub_10030A970(a1 + 3744);
  sub_10030A970(a1 + 2936);
  sub_10005CD2C(a1 + 2904, *(char **)(a1 + 2912));
  sub_10030A9DC(a1 + 2872, *(void **)(a1 + 2880));
  sub_10030AAD0(a1 + 2840, *(void **)(a1 + 2848));
  PersonalitiesTracker::~PersonalitiesTracker((PersonalitiesTracker *)(a1 + 2672));
  if (*(unsigned char *)(a1 + 2664)) {
    sub_10023A670(a1 + 2640, *(void **)(a1 + 2648));
  }
  if (*(char *)(a1 + 2623) < 0) {
    operator delete(*(void **)(a1 + 2600));
  }
  xpc_object_t v45 = (void **)(a1 + 2568);
  sub_1000C56F4(&v45);
  if (*(unsigned char *)(a1 + 2560)) {
    sub_100313460(a1 + 2536, *(void **)(a1 + 2544));
  }
  sub_1000346F8(a1 + 2512, *(void **)(a1 + 2520));
  if (*(char *)(a1 + 2511) < 0) {
    operator delete(*(void **)(a1 + 2488));
  }
  xpc_object_t v45 = (void **)(a1 + 2464);
  sub_10008A88C(&v45);
  sub_100087ED0(a1 + 2440, *(void **)(a1 + 2448));
  sub_10013C44C(a1 + 2376);
  if (*(unsigned char *)(a1 + 2368) && *(char *)(a1 + 2367) < 0) {
    operator delete(*(void **)(a1 + 2344));
  }
  sub_1000886C0(a1 + 2320, *(char **)(a1 + 2328));
  sub_10024D10C(a1 + 2296, *(void **)(a1 + 2304));
  EmergencyMode::~EmergencyMode((EmergencyMode *)(a1 + 2268));
  sub_10030AB98((void *)(a1 + 2216));
  sub_10030AC1C((void *)(a1 + 2168));
  sub_10030ACA0(a1 + 2104);
  sub_10030AD68(a1 + 2040);
  sub_10030AE38((void *)(a1 + 1992));
  id v13 = *(std::__shared_weak_count **)(a1 + 1984);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10030AEBC(a1 + 1792);
  sub_1000C636C(a1 + 1720);
  sub_100313668((void *)(a1 + 1672));
  sub_1003135E4((void *)(a1 + 1640));
  sub_100313534(a1 + 1616, *(void **)(a1 + 1624));
  uint64_t v14 = *(void *)(a1 + 1608);
  *(void *)(a1 + 1608) = 0;
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 8))(v14);
  }
  if (*(unsigned char *)(a1 + 1568))
  {
    if (*(char *)(a1 + 1607) < 0) {
      operator delete(*(void **)(a1 + 1584));
    }
    *(unsigned char *)(a1 + 1568) = 0;
  }
  if (*(char *)(a1 + 1559) < 0) {
    operator delete(*(void **)(a1 + 1536));
  }
  sub_10030AF48(a1 + 712);
  xpc_object_t v15 = *(std::__shared_weak_count **)(a1 + 704);
  if (v15) {
    sub_10004D2C8(v15);
  }
  xpc_object_t v16 = *(std::__shared_weak_count **)(a1 + 688);
  if (v16) {
    sub_10004D2C8(v16);
  }
  xpc_object_t v17 = *(std::__shared_weak_count **)(a1 + 672);
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (*(char *)(a1 + 663) < 0) {
    operator delete(*(void **)(a1 + 640));
  }
  if (*(char *)(a1 + 639) < 0) {
    operator delete(*(void **)(a1 + 616));
  }
  if (*(char *)(a1 + 615) < 0) {
    operator delete(*(void **)(a1 + 592));
  }
  uint64_t v18 = *(std::__shared_weak_count **)(a1 + 568);
  if (v18) {
    sub_10004D2C8(v18);
  }
  timeval v19 = *(std::__shared_weak_count **)(a1 + 552);
  if (v19) {
    sub_10004D2C8(v19);
  }
  char v20 = *(std::__shared_weak_count **)(a1 + 536);
  if (v20) {
    sub_10004D2C8(v20);
  }
  unsigned int v21 = *(std::__shared_weak_count **)(a1 + 520);
  if (v21) {
    sub_10004D2C8(v21);
  }
  uint64_t v22 = *(std::__shared_weak_count **)(a1 + 504);
  if (v22) {
    sub_10004D2C8(v22);
  }
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 488);
  if (v23) {
    sub_10004D2C8(v23);
  }
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 472);
  if (v24) {
    sub_10004D2C8(v24);
  }
  int v25 = *(std::__shared_weak_count **)(a1 + 456);
  if (v25) {
    sub_10004D2C8(v25);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(a1 + 440);
  if (v26) {
    sub_10004D2C8(v26);
  }
  uint64_t v27 = *(std::__shared_weak_count **)(a1 + 424);
  if (v27) {
    sub_10004D2C8(v27);
  }
  BOOL v28 = *(std::__shared_weak_count **)(a1 + 408);
  if (v28) {
    sub_10004D2C8(v28);
  }
  char v29 = *(std::__shared_weak_count **)(a1 + 392);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 376);
  if (v30) {
    sub_10004D2C8(v30);
  }
  char v31 = *(std::__shared_weak_count **)(a1 + 360);
  if (v31) {
    sub_10004D2C8(v31);
  }
  int v32 = *(std::__shared_weak_count **)(a1 + 344);
  if (v32) {
    sub_10004D2C8(v32);
  }
  uint64_t v33 = *(std::__shared_weak_count **)(a1 + 328);
  if (v33) {
    sub_10004D2C8(v33);
  }
  xpc_object_t v34 = *(std::__shared_weak_count **)(a1 + 312);
  if (v34) {
    sub_10004D2C8(v34);
  }
  int v35 = *(std::__shared_weak_count **)(a1 + 296);
  if (v35) {
    sub_10004D2C8(v35);
  }
  BOOL v36 = *(std::__shared_weak_count **)(a1 + 280);
  if (v36) {
    sub_10004D2C8(v36);
  }
  uint64_t v37 = *(std::__shared_weak_count **)(a1 + 264);
  if (v37) {
    sub_10004D2C8(v37);
  }
  uint64_t v38 = *(std::__shared_weak_count **)(a1 + 248);
  if (v38) {
    sub_10004D2C8(v38);
  }
  int v39 = *(std::__shared_weak_count **)(a1 + 232);
  if (v39) {
    sub_10004D2C8(v39);
  }
  unint64_t v40 = *(std::__shared_weak_count **)(a1 + 216);
  if (v40) {
    sub_10004D2C8(v40);
  }
  __int16 v41 = *(std::__shared_weak_count **)(a1 + 200);
  if (v41) {
    sub_10004D2C8(v41);
  }
  uint64_t v42 = *(std::__shared_weak_count **)(a1 + 184);
  if (v42) {
    std::__shared_weak_count::__release_weak(v42);
  }
  char v43 = *(std::__shared_weak_count **)(a1 + 168);
  if (v43) {
    sub_10004D2C8(v43);
  }
  CellularPlanPrivateNetworksDelegate::~CellularPlanPrivateNetworksDelegate(v7);
  CellularPlanCloudMonitorDelegate::~CellularPlanCloudMonitorDelegate(v6);
  CellularPlanMultiplexerDelegate::~CellularPlanMultiplexerDelegate(v5);
  CellularPlanUploadTriggersModelInterfaceDelegate::~CellularPlanUploadTriggersModelInterfaceDelegate(v4);
  CellularPlanPendingTransferHandlerDelegateInterface::~CellularPlanPendingTransferHandlerDelegateInterface(v3);
  CellularPlanSubscriptionControllerDelegate::~CellularPlanSubscriptionControllerDelegate(v2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

uint64_t sub_1002D3B54(uint64_t a1)
{
  return sub_1002D3414(a1 - 48);
}

uint64_t sub_1002D3B5C(uint64_t a1)
{
  return sub_1002D3414(a1 - 56);
}

uint64_t sub_1002D3B64(uint64_t a1)
{
  return sub_1002D3414(a1 - 64);
}

uint64_t sub_1002D3B6C(uint64_t a1)
{
  return sub_1002D3414(a1 - 72);
}

uint64_t sub_1002D3B74(uint64_t a1)
{
  return sub_1002D3414(a1 - 80);
}

uint64_t sub_1002D3B7C(uint64_t a1)
{
  return sub_1002D3414(a1 - 88);
}

uint64_t sub_1002D3B84(uint64_t a1)
{
  return sub_1002D3414(a1 - 96);
}

uint64_t sub_1002D3B8C(uint64_t a1)
{
  return sub_1002D3414(a1 - 104);
}

uint64_t sub_1002D3B94(uint64_t a1)
{
  return sub_1002D3414(a1 - 112);
}

uint64_t sub_1002D3B9C(uint64_t a1)
{
  return sub_1002D3414(a1 - 120);
}

uint64_t sub_1002D3BA4(uint64_t a1)
{
  return sub_1002D3414(a1 - 128);
}

uint64_t sub_1002D3BAC(uint64_t a1)
{
  return sub_1002D3414(a1 - 136);
}

uint64_t sub_1002D3BB4(uint64_t a1)
{
  return sub_1002D3414(a1 - 144);
}

uint64_t sub_1002D3BBC(uint64_t a1)
{
  return sub_1002D3414(a1 - 152);
}

void sub_1002D3BC4(uint64_t a1)
{
  sub_1002D3414(a1);

  operator delete();
}

void sub_1002D3BFC(uint64_t a1)
{
  sub_1002D3414(a1 - 48);

  operator delete();
}

void sub_1002D3C38(uint64_t a1)
{
  sub_1002D3414(a1 - 56);

  operator delete();
}

void sub_1002D3C74(uint64_t a1)
{
  sub_1002D3414(a1 - 64);

  operator delete();
}

void sub_1002D3CB0(uint64_t a1)
{
  sub_1002D3414(a1 - 72);

  operator delete();
}

void sub_1002D3CEC(uint64_t a1)
{
  sub_1002D3414(a1 - 80);

  operator delete();
}

void sub_1002D3D28(uint64_t a1)
{
  sub_1002D3414(a1 - 88);

  operator delete();
}

void sub_1002D3D64(uint64_t a1)
{
  sub_1002D3414(a1 - 96);

  operator delete();
}

void sub_1002D3DA0(uint64_t a1)
{
  sub_1002D3414(a1 - 104);

  operator delete();
}

void sub_1002D3DDC(uint64_t a1)
{
  sub_1002D3414(a1 - 112);

  operator delete();
}

void sub_1002D3E18(uint64_t a1)
{
  sub_1002D3414(a1 - 120);

  operator delete();
}

void sub_1002D3E54(uint64_t a1)
{
  sub_1002D3414(a1 - 128);

  operator delete();
}

void sub_1002D3E90(uint64_t a1)
{
  sub_1002D3414(a1 - 136);

  operator delete();
}

void sub_1002D3ECC(uint64_t a1)
{
  sub_1002D3414(a1 - 144);

  operator delete();
}

void sub_1002D3F08(uint64_t a1)
{
  sub_1002D3414(a1 - 152);

  operator delete();
}

const void **sub_1002D3F44(uint64_t a1)
{
  if (!*(void *)(a1 + 5368))
  {
    std::random_device::result_type v2 = (char *)operator new(0xD8uLL);
    *((void *)v2 + 1) = 0;
    *((void *)v2 + 2) = 0;
    *(void *)std::random_device::result_type v2 = off_1019B8958;
    *(_OWORD *)(v2 + 40) = 0u;
    *(_OWORD *)(v2 + 56) = 0u;
    *(_OWORD *)(v2 + 72) = 0u;
    *(_OWORD *)(v2 + 88) = 0u;
    *(_OWORD *)(v2 + 104) = 0u;
    *(_OWORD *)(v2 + 120) = 0u;
    *(_OWORD *)(v2 + 136) = 0u;
    *(_OWORD *)(v2 + 152) = 0u;
    *(_OWORD *)(v2 + 168) = 0u;
    *(_OWORD *)(v2 + 184) = 0u;
    *(_OWORD *)(v2 + 200) = 0u;
    id v3 = *(std::__shared_weak_count **)(a1 + 5376);
    *(void *)(a1 + 5376) = v2;
    *(_OWORD *)(v2 + 24) = 0u;
    *(void *)(a1 + 5368) = v2 + 24;
    if (v3) {
      sub_10004D2C8(v3);
    }
  }
  *(_OWORD *)values = *(_OWORD *)off_1019B6410;
  long long v63 = *(_OWORD *)off_1019B6420;
  long long v64 = *(_OWORD *)off_1019B6430;
  CFStringRef v65 = @"oPeik/9e8lQWMszEjbPzng";
  CFArrayRef v4 = CFArrayCreate(kCFAllocatorDefault, (const void **)values, 7, &kCFTypeArrayCallBacks);
  CFArrayRef v59 = v4;
  if (v4) {
    xpc_object_t v5 = sub_100083F10;
  }
  else {
    xpc_object_t v5 = 0;
  }
  if (v5)
  {
    CFArrayRef v57 = v4;
    CFDictionaryRef theDict = 0;
    uint64_t v6 = *(void *)(a1 + 496);
    if (v4) {
      CFRetain(v4);
    }
    (*(void (**)(unsigned char *__return_ptr, uint64_t, CFArrayRef *))(*(void *)v6 + 224))(v61, v6, &v57);
    *(void *)std::string buf = theDict;
    CFDictionaryRef theDict = *(CFDictionaryRef *)v61;
    *(void *)int v61 = 0;
    sub_100057D78((const void **)buf);
    sub_100057D78((const void **)v61);
    sub_100044D00((const void **)&v57);
    if (theDict) {
      xpc_object_t v7 = sub_100080778;
    }
    else {
      xpc_object_t v7 = 0;
    }
    if (v7)
    {
      Value = CFDictionaryGetValue(theDict, @"UserAssignedDeviceName");
      if (Value)
      {
        CFTypeID v9 = CFGetTypeID(Value);
        if (v9 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v10 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v11 = buf[23];
          uint64_t v12 = *(void *)(a1 + 5368);
          if (*(char *)(v12 + 23) < 0) {
            operator delete(*(void **)v12);
          }
          *(void *)uint64_t v12 = v10;
          *(void *)(v12 + 8) = *(void *)v61;
          *(void *)(v12 + 15) = *(void *)&v61[7];
          *(unsigned char *)(v12 + 23) = v11;
        }
      }
      id v13 = CFDictionaryGetValue(theDict, @"ProductVersion");
      if (v13)
      {
        CFTypeID v14 = CFGetTypeID(v13);
        if (v14 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v15 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v16 = buf[23];
          uint64_t v17 = *(void *)(a1 + 5368);
          if (*(char *)(v17 + 47) < 0) {
            operator delete(*(void **)(v17 + 24));
          }
          uint64_t v18 = *(void *)v61;
          *(void *)(v17 + 24) = v15;
          *(void *)(v17 + 32) = v18;
          *(void *)(v17 + 39) = *(void *)&v61[7];
          *(unsigned char *)(v17 + 47) = v16;
        }
      }
      timeval v19 = CFDictionaryGetValue(theDict, @"HWModelStr");
      if (v19)
      {
        CFTypeID v20 = CFGetTypeID(v19);
        if (v20 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v21 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v22 = buf[23];
          uint64_t v23 = *(void *)(a1 + 5368);
          if (*(char *)(v23 + 71) < 0) {
            operator delete(*(void **)(v23 + 48));
          }
          uint64_t v24 = *(void *)v61;
          *(void *)(v23 + 48) = v21;
          *(void *)(v23 + 56) = v24;
          *(void *)(v23 + 63) = *(void *)&v61[7];
          *(unsigned char *)(v23 + 71) = v22;
        }
      }
      int v25 = CFDictionaryGetValue(theDict, @"BuildVersion");
      if (v25)
      {
        CFTypeID v26 = CFGetTypeID(v25);
        if (v26 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v27 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v28 = buf[23];
          uint64_t v29 = *(void *)(a1 + 5368);
          if (*(char *)(v29 + 95) < 0) {
            operator delete(*(void **)(v29 + 72));
          }
          uint64_t v30 = *(void *)v61;
          *(void *)(v29 + 72) = v27;
          *(void *)(v29 + 80) = v30;
          *(void *)(v29 + 87) = *(void *)&v61[7];
          *(unsigned char *)(v29 + 95) = v28;
        }
      }
      char v31 = CFDictionaryGetValue(theDict, @"SerialNumber");
      if (v31)
      {
        CFTypeID v32 = CFGetTypeID(v31);
        if (v32 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v33 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v34 = buf[23];
          uint64_t v35 = *(void *)(a1 + 5368);
          if (*(char *)(v35 + 119) < 0) {
            operator delete(*(void **)(v35 + 96));
          }
          uint64_t v36 = *(void *)v61;
          *(void *)(v35 + 96) = v33;
          *(void *)(v35 + 104) = v36;
          *(void *)(v35 + 111) = *(void *)&v61[7];
          *(unsigned char *)(v35 + 119) = v34;
        }
      }
      uint64_t v37 = CFDictionaryGetValue(theDict, @"UniqueDeviceID");
      if (v37)
      {
        CFTypeID v38 = CFGetTypeID(v37);
        if (v38 == CFStringGetTypeID())
        {
          memset(buf, 0, 24);
          ctu::cf::assign();
          uint64_t v39 = *(void *)buf;
          *(void *)int v61 = *(void *)&buf[8];
          *(void *)&v61[7] = *(void *)&buf[15];
          uint8_t v40 = buf[23];
          uint64_t v41 = *(void *)(a1 + 5368);
          if (*(char *)(v41 + 143) < 0) {
            operator delete(*(void **)(v41 + 120));
          }
          uint64_t v42 = *(void *)v61;
          *(void *)(v41 + 120) = v39;
          *(void *)(v41 + 128) = v42;
          *(void *)(v41 + 135) = *(void *)&v61[7];
          *(unsigned char *)(v41 + 143) = v40;
        }
      }
      CFDictionaryRef v43 = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"oPeik/9e8lQWMszEjbPzng");
      CFDictionaryRef v44 = v43;
      if (v43)
      {
        CFTypeID v45 = CFGetTypeID(v43);
        if (v45 == CFDictionaryGetTypeID())
        {
          long long v46 = CFDictionaryGetValue(v44, @"ArtworkDeviceProductDescription");
          uint64_t v47 = (uint64_t)v46;
          if (v46)
          {
            CFTypeID v48 = CFGetTypeID(v46);
            if (v48 == CFStringGetTypeID()) {
              uint64_t v49 = v47;
            }
            else {
              uint64_t v49 = 0;
            }
          }
          else
          {
            uint64_t v49 = 0;
          }
          sub_100CD99CC((os_log_t *)(a1 + 40), v49, buf);
          uint64_t v52 = *(void *)(a1 + 5368);
          uint64_t v53 = v52 + 168;
          if (*(char *)(v52 + 191) < 0) {
            operator delete(*(void **)v53);
          }
          *(_OWORD *)uint64_t v53 = *(_OWORD *)buf;
          *(void *)(v53 + 16) = *(void *)&buf[16];
        }
      }
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 496) + 248))(buf);
      uint64_t v54 = *(void *)(a1 + 5368);
      uint64_t v55 = v54 + 144;
      if (*(char *)(v54 + 167) < 0) {
        operator delete(*(void **)v55);
      }
      *(_OWORD *)uint64_t v55 = *(_OWORD *)buf;
      *(void *)(v55 + 16) = *(void *)&buf[16];
    }
    else
    {
      uint64_t v51 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "gestalt query failed to get answers", buf, 2u);
      }
    }
    sub_100057D78((const void **)&theDict);
  }
  else
  {
    uint64_t v50 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "gestalt query failed to create questions", buf, 2u);
    }
  }
  return sub_100044D00((const void **)&v59);
}

void sub_1002D458C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, const void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
}

void sub_1002D4618()
{
}

uint64_t sub_1002D4620(uint64_t a1, os_log_t *a2, int a3)
{
  switch(a3)
  {
    case 0:
    case 1:
      xpc_object_t v5 = *a2;
      if (os_log_type_enabled(*a2, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v10) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Should never happen", (uint8_t *)&v10, 2u);
      }
      goto LABEL_5;
    case 2:
    case 4:
    case 5:
    case 6:
      uint64_t v4 = 18;
      break;
    case 3:
      uint64_t v4 = 13;
      break;
    case 7:
      uint64_t v4 = 25;
      break;
    case 8:
      uint64_t v4 = 26;
      break;
    case 9:
      uint64_t v4 = 34;
      break;
    case 10:
      uint64_t v4 = 35;
      break;
    case 11:
      if (*(unsigned char *)(a1 + 4601) && *(unsigned char *)(a1 + 4600)) {
        uint64_t v4 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 848))(*(void *)(a1 + 320));
      }
      else {
        uint64_t v4 = 58;
      }
      break;
    case 12:
      uint64_t v4 = 45;
      break;
    default:
LABEL_5:
      uint64_t v4 = 0;
      break;
  }
  uint64_t v6 = *a2;
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asString();
    uint64_t v8 = asString();
    int v10 = 136315394;
    uint64_t v11 = v7;
    __int16 v12 = 2080;
    uint64_t v13 = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I in: %s out: %s", (uint8_t *)&v10, 0x16u);
  }
  return v4;
}

void sub_1002D4820(uint64_t a1)
{
  std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I CellularPlanController initialized", buf, 2u);
  }
  (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
  Registry::createRestModuleOneTimeUseConnection(&v129, *(Registry **)buf);
  uint64_t v3 = a1 + 1976;
  ctu::RestModule::connect();
  if (v130) {
    sub_10004D2C8(v130);
  }
  uint64_t v4 = *(capabilities::ct **)&buf[8];
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (capabilities::ct::getProvisioningProfileSupport(v4) == 1)
  {
    sub_100058DB0(buf, "/cc/assertions/disable_bootstrap_assertion");
    long long v143 = *(_OWORD *)buf;
    uint64_t v144 = *(void *)&buf[16];
    memset(buf, 0, sizeof(buf));
    ctu::path_join_impl();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    xpc_object_t v5 = (uint8_t *)operator new(0x28uLL);
    *(void *)xpc_object_t v5 = off_1019B6D28;
    *((void *)v5 + 1) = a1 + 2032;
    *((void *)v5 + 2) = a1;
    *((void *)v5 + 3) = sub_1002D6DC4;
    *((void *)v5 + 4) = 0;
    v147 = v5;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  uint64_t v6 = a1 + 1992;
  *(void *)std::string buf = off_1019B6DA8;
  *(void *)&uint8_t buf[8] = a1 + 1976;
  v147 = buf;
  if (buf != (uint8_t *)(a1 + 1992))
  {
    uint64_t v7 = *(uint8_t **)(a1 + 2016);
    if (v7 == (uint8_t *)v6)
    {
      *((void *)&v143 + 1) = a1 + 1976;
      uint64_t v144 = 0;
      *(void *)&long long v143 = off_1019B6DA8;
      v147 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v6 + 24))(a1 + 1992, buf);
      (*(void (**)(void))(**(void **)(a1 + 2016) + 32))(*(void *)(a1 + 2016));
      *(void *)(a1 + 2016) = 0;
      v147 = buf;
      (*(void (**)(long long *, uint64_t))(v143 + 24))(&v143, a1 + 1992);
      (*(void (**)(long long *))(v143 + 32))(&v143);
    }
    else
    {
      *(void *)(a1 + 1992) = off_1019B6DA8;
      *(void *)(a1 + 2000) = v3;
      v147 = v7;
    }
    *(void *)(a1 + 2016) = v6;
  }
  sub_10030AE38(buf);
  uint64_t v8 = *(void *)(a1 + 2016);
  if (v8) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a1 + 2024);
  }
  sub_100058DB0(&v143, "/cc/props/dataplan_suppressing_indicator");
  CFTypeID v9 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFTypeID v9 = off_1019B6E38;
  *((void *)v9 + 1) = a1 + 2896;
  *((void *)v9 + 2) = a1;
  *((void *)v9 + 3) = sub_1002D7094;
  *((void *)v9 + 4) = 0;
  v147 = v9;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/events/carrier_bundle_event");
  int v10 = (uint8_t *)operator new(0x20uLL);
  *(void *)int v10 = off_1019B6EB8;
  *((void *)v10 + 1) = a1;
  *((void *)v10 + 2) = sub_1002D70E4;
  *((void *)v10 + 3) = 0;
  v147 = v10;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/events/dump_state");
  uint64_t v11 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v11 = off_1019B6F38;
  *((void *)v11 + 1) = a1;
  *((void *)v11 + 2) = sub_1002D7120;
  *((void *)v11 + 3) = 0;
  v147 = v11;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/prefs-nb/imeis");
  __int16 v12 = (uint8_t *)operator new(0x28uLL);
  *(void *)__int16 v12 = off_1019B6FB8;
  *((void *)v12 + 1) = a1 + 2320;
  *((void *)v12 + 2) = a1;
  *((void *)v12 + 3) = sub_1002D75E4;
  *((void *)v12 + 4) = 0;
  v147 = v12;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/prefs-nb/meid");
  uint64_t v13 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v13 = off_1019B7038;
  *((void *)v13 + 1) = a1 + 2344;
  *((void *)v13 + 2) = a1;
  *((void *)v13 + 3) = sub_1002D761C;
  *((void *)v13 + 4) = 0;
  v147 = v13;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/phone_numbers");
  CFTypeID v14 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFTypeID v14 = off_1019B70B8;
  *((void *)v14 + 1) = a1 + 2440;
  *((void *)v14 + 2) = a1;
  *((void *)v14 + 3) = sub_1002D7674;
  *((void *)v14 + 4) = 0;
  v147 = v14;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/sims_on_device");
  uint64_t v15 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v15 = off_1019B7138;
  *((void *)v15 + 1) = a1 + 2464;
  *((void *)v15 + 2) = a1;
  *((void *)v15 + 3) = sub_1002D7760;
  *((void *)v15 + 4) = 0;
  v147 = v15;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/bound_sims");
  uint8_t v16 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint8_t v16 = off_1019B71B8;
  *((void *)v16 + 1) = a1 + 4552;
  *((void *)v16 + 2) = a1;
  *((void *)v16 + 3) = sub_1002D78B0;
  *((void *)v16 + 4) = 0;
  v147 = v16;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/private_network_sims_active");
  uint64_t v17 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v17 = off_1019B7238;
  *((void *)v17 + 1) = a1 + 4576;
  *((void *)v17 + 2) = a1;
  *((void *)v17 + 3) = sub_1002D78E4;
  *((void *)v17 + 4) = 0;
  v147 = v17;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/wifi_status");
  uint64_t v18 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v18 = off_1019B72B8;
  *((void *)v18 + 1) = a1 + 2592;
  *((void *)v18 + 2) = a1;
  *((void *)v18 + 3) = sub_1002D7918;
  *((void *)v18 + 4) = 0;
  v147 = v18;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_1002D795C(a1 + 2264);
  sub_1002D7A3C(a1 + 4608);
  sub_1002D7B1C(a1 + 2268);
  sub_100058DB0(&v143, "/cc/props/vinyl_info");
  timeval v19 = (uint8_t *)operator new(0x28uLL);
  *(void *)timeval v19 = off_1019B74B8;
  *((void *)v19 + 1) = a1 + 2568;
  *((void *)v19 + 2) = a1;
  *((void *)v19 + 3) = sub_1002D7BFC;
  *((void *)v19 + 4) = 0;
  v147 = v19;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/events/activation_esim_flagset_changed");
  CFTypeID v20 = (uint8_t *)operator new(0x20uLL);
  *(void *)CFTypeID v20 = off_1019B7538;
  *((void *)v20 + 1) = a1;
  *((void *)v20 + 2) = sub_1002D7DBC;
  *((void *)v20 + 3) = 0;
  v147 = v20;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/imei_to_ak_remote_device_info");
  uint64_t v21 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v21 = off_1019B75B8;
  *((void *)v21 + 1) = a1 + 2536;
  *((void *)v21 + 2) = a1;
  *((void *)v21 + 3) = sub_1002D7E48;
  *((void *)v21 + 4) = 0;
  v147 = v21;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  uint8_t v22 = *(std::__shared_weak_count **)(a1 + 184);
  if (v22)
  {
    uint64_t v23 = std::__shared_weak_count::lock(v22);
    if (v23)
    {
      uint64_t v24 = *(void *)(a1 + 176);
      if (v24)
      {
        if ((*(unsigned int (**)(uint64_t))(*(void *)v24 + 104))(v24)) {
          sub_1002D7FE0((void *)(a1 + 2168), a1 + 1976);
        }
      }
    }
  }
  else
  {
    uint64_t v23 = 0;
  }
  sub_100058DB0(&v143, "/cc/props/local_ids_device_id");
  int v25 = (uint8_t *)operator new(0x28uLL);
  *(void *)int v25 = off_1019B76C8;
  *((void *)v25 + 1) = a1 + 2488;
  *((void *)v25 + 2) = a1;
  *((void *)v25 + 3) = sub_1002D80A0;
  *((void *)v25 + 4) = 0;
  v147 = v25;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  dispatch_group_t group = 0;
  CFTypeID v26 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v26 || (uint64_t v27 = *(void *)(a1 + 8), (v28 = std::__shared_weak_count::lock(v26)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v29 = v28;
  atomic_fetch_add_explicit(&v28->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v28);
  v147 = 0;
  uint64_t v30 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v30 = off_1019B7748;
  *((void *)v30 + 1) = a1;
  *((void *)v30 + 2) = v27;
  *((void *)v30 + 3) = v29;
  v147 = v30;
  char v31 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v31 || (uint64_t v32 = *(void *)(a1 + 8), (v33 = std::__shared_weak_count::lock(v31)) == 0)) {
    sub_100088B9C();
  }
  uint8_t v34 = v33;
  atomic_fetch_add_explicit(&v33->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v33);
  v145 = 0;
  uint64_t v35 = operator new(0x20uLL);
  void *v35 = off_1019B77C8;
  v35[1] = a1;
  uint64_t v36 = (NSObject **)(a1 + 24);
  v35[2] = v32;
  v35[3] = v34;
  v145 = v35;
  v142[3] = 0;
  PersonalitiesTracker::bind();
  sub_100100490(v142);
  sub_10010040C(&v143);
  sub_100100388(buf);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  uint64_t v37 = (const void **)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320));
  if (v37)
  {
    uint64_t v38 = a1 + 2040;
    *(void *)std::string buf = off_1019B7858;
    *(void *)&uint8_t buf[8] = a1 + 1976;
    v147 = buf;
    if (buf != (uint8_t *)(a1 + 2040))
    {
      uint64_t v39 = *(uint8_t **)(a1 + 2064);
      if (v39 == (uint8_t *)v38)
      {
        *((void *)&v143 + 1) = a1 + 1976;
        uint64_t v144 = 0;
        *(void *)&long long v143 = off_1019B7858;
        v147 = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v38 + 24))(a1 + 2040, buf);
        (*(void (**)(void))(**(void **)(a1 + 2064) + 32))(*(void *)(a1 + 2064));
        *(void *)(a1 + 2064) = 0;
        v147 = buf;
        (*(void (**)(long long *, uint64_t))(v143 + 24))(&v143, a1 + 2040);
        (*(void (**)(long long *))(v143 + 32))(&v143);
      }
      else
      {
        *(void *)(a1 + 2040) = off_1019B7858;
        *(void *)(a1 + 2048) = v3;
        v147 = v39;
      }
      *(void *)(a1 + 2064) = v38;
    }
    sub_10030ADB4(buf);
    uint64_t v40 = *(void *)(a1 + 2064);
    if (v40) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v40 + 48))(v40, a1 + 2072);
    }
    uint64_t v41 = a1 + 2104;
    *(void *)std::string buf = off_1019B78E8;
    *(void *)&uint8_t buf[8] = a1 + 1976;
    v147 = buf;
    if (buf != (uint8_t *)(a1 + 2104))
    {
      uint64_t v42 = *(uint8_t **)(a1 + 2128);
      if (v42 == (uint8_t *)v41)
      {
        *((void *)&v143 + 1) = a1 + 1976;
        uint64_t v144 = 0;
        *(void *)&long long v143 = off_1019B78E8;
        v147 = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v41 + 24))(a1 + 2104, buf);
        (*(void (**)(void))(**(void **)(a1 + 2128) + 32))(*(void *)(a1 + 2128));
        *(void *)(a1 + 2128) = 0;
        v147 = buf;
        (*(void (**)(long long *, uint64_t))(v143 + 24))(&v143, a1 + 2104);
        (*(void (**)(long long *))(v143 + 32))(&v143);
      }
      else
      {
        *(void *)(a1 + 2104) = off_1019B78E8;
        *(void *)(a1 + 2112) = v3;
        v147 = v42;
      }
      *(void *)(a1 + 2128) = v41;
    }
    sub_10030ACE4(buf);
    uint64_t v43 = *(void *)(a1 + 2128);
    if (v43) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v43 + 48))(v43, a1 + 2136);
    }
    sub_1002D80F0(a1 + 2256);
    *(void *)std::string buf = sub_1002D81D0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100317AF8(a1 + 2260, a1 + 1976, a1, (uint64_t *)buf);
    sub_100058DB0(&v143, "/cc/props/last_visible_plmns");
    CFDictionaryRef v44 = (uint8_t *)operator new(0x28uLL);
    *(void *)CFDictionaryRef v44 = off_1019B7A78;
    *((void *)v44 + 1) = a1 + 2376;
    *((void *)v44 + 2) = a1;
    *((void *)v44 + 3) = sub_1002D8450;
    *((void *)v44 + 4) = 0;
    v147 = v44;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
    uint64_t v45 = *(void *)(a1 + 288);
    v141[0] = off_1019B7AF8;
    v141[1] = a1;
    v141[3] = v141;
    (*(void (**)(uint64_t, void *))(*(void *)v45 + 48))(v45, v141);
    sub_100318460(v141);
    (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
    uint64_t v47 = ServiceMap;
    if (v48 < 0)
    {
      uint64_t v49 = (unsigned __int8 *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v50 = 5381;
      do
      {
        uint64_t v48 = v50;
        unsigned int v51 = *v49++;
        uint64_t v50 = (33 * v50) ^ v51;
      }
      while (v51);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long v143 = v48;
    uint64_t v52 = sub_10004D37C(&v47[1].__m_.__sig, (unint64_t *)&v143);
    if (v52)
    {
      uint64_t v54 = v52[3];
      uint64_t v53 = (std::__shared_weak_count *)v52[4];
      if (v53)
      {
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v47);
        atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v53);
        char v55 = 0;
LABEL_85:
        uint64_t v37 = *(const void ***)&buf[8];
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v54)
        {
          (*(void (**)(const void **__return_ptr, uint64_t, const __CFString *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v54 + 40))(v142, v54, @"LastCampedCountryCode", @"no_backup/com.apple.CommCenter.CarrierList.plist", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
          memset(buf, 0, sizeof(buf));
          ctu::cf::assign();
          uint64_t v56 = *(void *)buf;
          *(void *)&long long v143 = *(void *)&buf[8];
          *(void *)((char *)&v143 + 7) = *(void *)&buf[15];
          uint8_t v57 = buf[23];
          if (*(char *)(a1 + 1559) < 0) {
            operator delete(*(void **)(a1 + 1536));
          }
          *(void *)(a1 + 1536) = v56;
          *(void *)(a1 + 1544) = v143;
          *(void *)(a1 + 1551) = *(void *)((char *)&v143 + 7);
          *(unsigned char *)(a1 + 1559) = v57;
          uint64_t v37 = sub_1000577C4(v142);
        }
        if ((v55 & 1) == 0) {
          sub_10004D2C8(v53);
        }
        goto LABEL_93;
      }
    }
    else
    {
      uint64_t v54 = 0;
    }
    std::mutex::unlock(v47);
    uint64_t v53 = 0;
    char v55 = 1;
    goto LABEL_85;
  }
LABEL_93:
  __int16 v58 = (capabilities::ct *)capabilities::ct::supportsRegulatoryRestriction((capabilities::ct *)v37);
  if (v58)
  {
    sub_100058DB0(&v143, "/cc/props/regulatory_restriction_active");
    CFArrayRef v59 = (uint8_t *)operator new(0x28uLL);
    *(void *)CFArrayRef v59 = off_1019B7B88;
    *((void *)v59 + 1) = a1 + 4600;
    *((void *)v59 + 2) = a1;
    *((void *)v59 + 3) = sub_1002D8A90;
    *((void *)v59 + 4) = 0;
    v147 = v59;
    ctu::RestModule::observeProperty();
    __int16 v58 = (capabilities::ct *)sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  if (capabilities::ct::getProvisioningProfileSupport(v58)
    || (int64x2_t v60 = (capabilities::ct *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)),
        v60))
  {
    *(void *)std::string buf = off_1019B7C08;
    *(void *)&uint8_t buf[8] = a1 + 1976;
    v147 = buf;
    sub_100318874(buf, (void *)(a1 + 2216));
    sub_10030AB98(buf);
    uint64_t v61 = *(void *)(a1 + 2240);
    if (v61) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v61 + 48))(v61, a1 + 2248);
    }
    sub_100058DB0(&v143, "/cc/props/buddy_state");
    v62 = (uint8_t *)operator new(0x28uLL);
    *(void *)v62 = off_1019B7C98;
    *((void *)v62 + 1) = a1 + 2632;
    *((void *)v62 + 2) = a1;
    *((void *)v62 + 3) = sub_1002D8B60;
    *((void *)v62 + 4) = 0;
    v147 = v62;
    ctu::RestModule::observeProperty();
    int64x2_t v60 = (capabilities::ct *)sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  if (capabilities::ct::getProvisioningProfileSupport(v60) == 1)
  {
    sub_100058DB0(&v143, "/cc/props/connection_state");
    long long v63 = (uint8_t *)operator new(0x28uLL);
    *(void *)long long v63 = off_1019B7D18;
    *((void *)v63 + 1) = a1 + 2296;
    *((void *)v63 + 2) = a1;
    *((void *)v63 + 3) = sub_1002D8DE8;
    *((void *)v63 + 4) = 0;
    v147 = v63;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
    sub_100058DB0(&v143, "/cc/events/ota_activation_assertion_changed");
    long long v64 = (uint8_t *)operator new(0x20uLL);
    *(void *)long long v64 = off_1019B7D98;
    *((void *)v64 + 1) = a1;
    *((void *)v64 + 2) = sub_1002D8FA8;
    *((void *)v64 + 3) = 0;
    v147 = v64;
    ctu::RestModule::observeEvent();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
    sub_100058DB0(&v143, "/cc/props/post_buddy_ticket_refresh");
    *(void *)std::string buf = off_1019B7E18;
    *(void *)&uint8_t buf[8] = a1 + 2928;
    v147 = buf;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  sub_100058DB0(&v143, "/cc/props/internet_status");
  CFStringRef v65 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFStringRef v65 = off_1019B7E98;
  *((void *)v65 + 1) = a1 + 2289;
  *((void *)v65 + 2) = a1;
  *((void *)v65 + 3) = sub_1002D9034;
  *((void *)v65 + 4) = 0;
  v147 = v65;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)) & 1) != 0
    || (v66 = (capabilities::ct *)(*(uint64_t (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320)),
        (v66 & 1) != 0)
    || (v67 = (capabilities::ct *)capabilities::ct::dataOnlySingleSIMDevice(v66), v67))
  {
    sub_100058DB0(&v143, "/cc/props/activation_rejected_iccid");
    v68 = (uint8_t *)operator new(0x28uLL);
    *(void *)v68 = off_1019B7F18;
    *((void *)v68 + 1) = a1 + 2600;
    *((void *)v68 + 2) = a1;
    *((void *)v68 + 3) = sub_1002D9674;
    *((void *)v68 + 4) = 0;
    v147 = v68;
    ctu::RestModule::observeProperty();
    v67 = (capabilities::ct *)sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  v69 = (capabilities::ct *)capabilities::ct::dataOnlySingleSIMDevice(v67);
  if (v69)
  {
    if (capabilities::ct::supportsSequoia(v69))
    {
      sub_100058DB0(&v143, "/cc/props/is_activation_ticket_updated");
      v70 = (uint8_t *)operator new(0x28uLL);
      *(void *)v70 = off_1019B7F98;
      *((void *)v70 + 1) = a1 + 5563;
      *((void *)v70 + 2) = a1;
      *((void *)v70 + 3) = sub_1002D9B00;
      *((void *)v70 + 4) = 0;
      v147 = v70;
      ctu::RestModule::observeProperty();
      sub_10003F600(buf);
      if (SHIBYTE(v144) < 0) {
        operator delete((void *)v143);
      }
    }
  }
  sub_100058DB0(&v143, "/cc/props/display_status");
  v71 = (uint8_t *)operator new(0x28uLL);
  *(void *)v71 = off_1019B8018;
  *((void *)v71 + 1) = a1 + 2625;
  *((void *)v71 + 2) = a1;
  *((void *)v71 + 3) = sub_1002D9BC8;
  *((void *)v71 + 4) = 0;
  v147 = v71;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/springboard_finished_startup");
  v72 = (uint8_t *)operator new(0x28uLL);
  *(void *)v72 = off_1019B8098;
  *((void *)v72 + 1) = a1 + 2624;
  *((void *)v72 + 2) = a1;
  *((void *)v72 + 3) = sub_1002D9C6C;
  *((void *)v72 + 4) = 0;
  v147 = v72;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
  {
    *(void *)std::string buf = sub_1002D81D0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100317AF8(a1 + 2260, a1 + 1976, a1, (uint64_t *)buf);
  }
  sub_100058DB0(&v143, "/cc/props/assigned_sim_labels");
  *(void *)std::string buf = off_1019B8118;
  *(void *)&uint8_t buf[8] = a1 + 2640;
  *(void *)&uint8_t buf[16] = a1;
  v147 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/carrier_entitlements_info");
  v73 = (uint8_t *)operator new(0x28uLL);
  *(void *)v73 = off_1019B8198;
  *((void *)v73 + 1) = a1 + 2840;
  *((void *)v73 + 2) = a1;
  *((void *)v73 + 3) = sub_1002D9CB4;
  *((void *)v73 + 4) = 0;
  v147 = v73;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/first_unlock_since_boot");
  v74 = (uint8_t *)operator new(0x28uLL);
  *(void *)v74 = off_1019B8218;
  *((void *)v74 + 1) = a1 + 2864;
  *((void *)v74 + 2) = a1;
  *((void *)v74 + 3) = sub_1002DA070;
  *((void *)v74 + 4) = 0;
  v147 = v74;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_100058DB0(&v143, "/cc/props/subscription_info");
  *(void *)std::string buf = off_1019B8298;
  *(void *)&uint8_t buf[8] = a1 + 2872;
  v147 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  sub_1002DA10C(a1 + 2512);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
  {
    sub_100058DB0(&v143, "/cc/props/carrier_entitlements_auth_state");
    v75 = (uint8_t *)operator new(0x28uLL);
    *(void *)v75 = off_1019B8398;
    *((void *)v75 + 1) = a1 + 2904;
    *((void *)v75 + 2) = a1;
    *((void *)v75 + 3) = sub_1002DA1EC;
    *((void *)v75 + 4) = 0;
    v147 = v75;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v144) < 0) {
      operator delete((void *)v143);
    }
  }
  *(void *)(a1 + 2936) = "/cc/props/reg_net_info1";
  sub_1002DA21C((char **)(a1 + 2936));
  *(void *)(a1 + 3744) = "/cc/props/reg_net_info2";
  sub_1002DA21C((char **)(a1 + 3744));
  sub_1000DDC20(a1 + 4656);
  sub_100058DB0(&v143, "/cc/props/data_only_plans");
  v76 = (uint8_t *)operator new(0x28uLL);
  *(void *)v76 = off_1019B8498;
  *((void *)v76 + 1) = a1 + 4664;
  *((void *)v76 + 2) = a1;
  *((void *)v76 + 3) = sub_1002DA2F8;
  *((void *)v76 + 4) = 0;
  v147 = v76;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v144) < 0) {
    operator delete((void *)v143);
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)) & 1) == 0)
  {
    *(void *)std::string buf = @"UserAssignedDeviceName";
    *(void *)&long long v143 = 0;
    CFArrayRef v77 = CFArrayCreate(kCFAllocatorDefault, (const void **)buf, 1, &kCFTypeArrayCallBacks);
    *(void *)&long long v143 = v77;
    uint64_t v78 = *(void *)(a1 + 496);
    CFArrayRef v127 = v77;
    if (v77) {
      CFRetain(v77);
    }
    v79 = *v36;
    dispatch_object_t object = v79;
    if (v79) {
      dispatch_retain(v79);
    }
    v80 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v80 || (uint64_t v81 = *(void *)(a1 + 8), (v82 = std::__shared_weak_count::lock(v80)) == 0)) {
      sub_100088B9C();
    }
    v83 = v82;
    atomic_fetch_add_explicit(&v82->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v82);
    v140[0] = off_1019B8518;
    v140[1] = v81;
    v140[2] = v83;
    v140[3] = v140;
    *(void *)(a1 + 5384) = (*(uint64_t (**)(uint64_t, CFArrayRef *, void, dispatch_object_t *, void *))(*(void *)v78 + 232))(v78, &v127, 0, &object, v140);
    sub_10003B34C(v140);
    if (object) {
      dispatch_release(object);
    }
    sub_100044D00((const void **)&v127);
    sub_100044D00((const void **)&v143);
  }
  (*(void (**)(void))(**(void **)(a1 + 432) + 296))(*(void *)(a1 + 432));
  (*(void (**)(void))(**(void **)(a1 + 240) + 24))(*(void *)(a1 + 240));
  uint64_t v84 = *(void *)(a1 + 256);
  if (v84) {
    (*(void (**)(uint64_t))(*(void *)v84 + 16))(v84);
  }
  uint64_t v85 = *(void *)(a1 + 288);
  v139[0] = off_1019B8598;
  v139[1] = a1;
  v139[3] = v139;
  (*(void (**)(uint64_t, void *))(*(void *)v85 + 80))(v85, v139);
  sub_10001E914(v139);
  uint64_t v86 = *(void *)(a1 + 288);
  v138[0] = off_1019B8618;
  v138[1] = a1;
  v138[3] = v138;
  (*(void (**)(uint64_t, void *))(*(void *)v86 + 144))(v86, v138);
  sub_10031C92C(v138);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
  {
    uint64_t v87 = *(void *)(a1 + 288);
    v137[0] = off_1019B86A8;
    v137[1] = a1;
    v137[3] = v137;
    (*(void (**)(uint64_t, void *))(*(void *)v87 + 232))(v87, v137);
    sub_10031CBC4(v137);
    uint64_t v88 = *(void *)(a1 + 288);
    v136[0] = off_1019B8738;
    v136[1] = a1;
    v136[3] = v136;
    (*(void (**)(uint64_t, void *))(*(void *)v88 + 248))(v88, v136);
    sub_10031CE54(v136);
  }
  uint64_t v90 = *(void *)(a1 + 320);
  v89 = *(std::__shared_weak_count **)(a1 + 328);
  uint64_t v124 = v90;
  v125 = v89;
  if (v89) {
    atomic_fetch_add_explicit(&v89->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v91 = *v36;
  dispatch_object_t v123 = v91;
  if (v91) {
    dispatch_retain(v91);
  }
  v92 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v92 || (uint64_t v93 = *(void *)(a1 + 8), (v94 = std::__shared_weak_count::lock(v92)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v95 = v93 + 128;
  if (!v93) {
    uint64_t v95 = 0;
  }
  uint64_t v121 = v95;
  v122 = v94;
  v96 = *(std::__shared_weak_count **)(a1 + 440);
  uint64_t v119 = *(void *)(a1 + 432);
  v120 = v96;
  if (v96) {
    atomic_fetch_add_explicit(&v96->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v97 = *(std::__shared_weak_count **)(a1 + 296);
  uint64_t v117 = *(void *)(a1 + 288);
  v118 = v97;
  if (v97) {
    atomic_fetch_add_explicit(&v97->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v90 + 616))(buf, v90, &v124, &v123, &v121, &v119, &v117);
  long long v98 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  v99 = *(std::__shared_weak_count **)(a1 + 456);
  *(_OWORD *)(a1 + 448) = v98;
  if (v99)
  {
    sub_10004D2C8(v99);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v118) {
    sub_10004D2C8(v118);
  }
  if (v120) {
    sub_10004D2C8(v120);
  }
  if (v122) {
    sub_10004D2C8(v122);
  }
  if (v123) {
    dispatch_release(v123);
  }
  if (v125) {
    sub_10004D2C8(v125);
  }
  if (*(void *)(a1 + 480))
  {
    *(void *)std::string buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    *(void *)&long long v143 = "CellularPlanControllerImpl";
    sub_1002BFAE4((char **)&v143, (dispatch_object_t *)(a1 + 24), buf);
    (***(void (****)(long long *__return_ptr))(a1 + 320))(&v143);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v115, (Registry *)v143);
    ctu::RestModule::connect();
    if (v116) {
      sub_10004D2C8(v116);
    }
    if (*((void *)&v143 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v143 + 1));
    }
    v100 = *(void (****)(void, void, void *))(a1 + 480);
    v135[0] = off_1019B87C8;
    v135[1] = a1;
    v135[3] = v135;
    (**v100)(v100, *(void *)buf, v135);
    sub_100060644(v135);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  uint64_t v101 = *(void *)(a1 + 528);
  if (v101) {
    (*(void (**)(uint64_t))(*(void *)v101 + 16))(v101);
  }
  uint64_t v102 = *(void *)(a1 + 560);
  if (v102)
  {
    (*(void (**)(uint64_t))(*(void *)v102 + 16))(v102);
    v103 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v103) {
      goto LABEL_198;
    }
    uint64_t v104 = *(void *)(a1 + 560);
    uint64_t v105 = *(void *)(a1 + 8);
    v106 = std::__shared_weak_count::lock(v103);
    if (!v106) {
      goto LABEL_198;
    }
    v107 = v106;
    atomic_fetch_add_explicit(&v106->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v106);
    v134 = 0;
    v108 = operator new(0x20uLL);
    void *v108 = off_1019B8848;
    v108[1] = a1;
    v108[2] = v105;
    v108[3] = v107;
    v134 = v108;
    (*(void (**)(uint64_t, void *))(*(void *)v104 + 32))(v104, v133);
    sub_10031D650(v133);
  }
  v109 = *(uint64_t **)(a1 + 544);
  if (!v109) {
    goto LABEL_195;
  }
  v110 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v110 || (uint64_t v111 = *(void *)(a1 + 8), (v112 = std::__shared_weak_count::lock(v110)) == 0)) {
LABEL_198:
  }
    sub_100088B9C();
  v113 = v112;
  atomic_fetch_add_explicit(&v112->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v112);
  v132 = 0;
  v114 = operator new(0x20uLL);
  void *v114 = off_1019B88D8;
  v114[1] = a1;
  v114[2] = v111;
  v114[3] = v113;
  v132 = v114;
  sub_100F017C8(v109, @"com.apple.datamigrator.migrationDidFinish", (uint64_t)v131);
  sub_1001472DC(v131);
LABEL_195:
  if (v23) {
    sub_10004D2C8(v23);
  }
}

void sub_1002D69C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, dispatch_object_t a17, uint64_t a18, uint64_t a19, dispatch_object_t object,char a21,dispatch_group_t group,uint64_t a23,uint64_t a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,uint64_t a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,char a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002D6DC4(uint64_t a1)
{
  std::random_device::result_type v2 = (unsigned int *)(a1 + 2032);
  int v3 = *(_DWORD *)(a1 + 2036);
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = ctu::rest::asString();
    unsigned int v6 = *v2;
    int v11 = 136315394;
    *(void *)__int16 v12 = v5;
    *(_WORD *)&v12[8] = 1024;
    *(_DWORD *)&v12[10] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Disable Bootstrap Changed: %s (%d)", (uint8_t *)&v11, 0x12u);
  }
  if (!v3)
  {
    (*(void (**)(int *__return_ptr))(**(void **)(a1 + 304) + 552))(&v11);
    if (*(void *)&v12[12])
    {
      int v7 = *(unsigned __int8 *)(a1 + 1512);
      sub_10005CD2C((uint64_t)&v11, *(char **)&v12[4]);
      if (!v7)
      {
        if (!*(_DWORD *)(a1 + 2024)) {
          return;
        }
        *(_DWORD *)(a1 + 2024) = 0;
        goto LABEL_22;
      }
    }
    else
    {
      sub_10005CD2C((uint64_t)&v11, *(char **)&v12[4]);
    }
    sub_1002DA714(a1, 1, 0);
    return;
  }
  if (v3 != 1) {
    return;
  }
  if ((*(uint64_t (**)(void))(**(void **)(a1 + 304) + 264))(*(void *)(a1 + 304)))
  {
    if ((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 272))(*(void *)(a1 + 304), 1))
    {
      (*(void (**)(void, void))(**(void **)(a1 + 304) + 280))(*(void *)(a1 + 304), 0);
      return;
    }
    CFTypeID v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Granted disable_bootstrap - Bootstrap inactive", (uint8_t *)&v11, 2u);
    }
    sub_1002DA600(v2);
    if (*(_DWORD *)(a1 + 2024) != 3)
    {
      *(_DWORD *)(a1 + 2024) = 3;
LABEL_22:
      uint64_t v10 = *(void *)(a1 + 2016);
      if (v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, a1 + 2024);
      }
    }
  }
  else
  {
    uint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v11) = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Granted disable_bootstrap - Bootstrap unavailable", (uint8_t *)&v11, 2u);
    }
    sub_1002DA600(v2);
  }
}

CFAbsoluteTime sub_1002D7094(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2896) != a2)
  {
    sub_1002DCB1C(a1);
    if (a2 == 2)
    {
      CFAbsoluteTime result = CFAbsoluteTimeGetCurrent() + 120.0;
      *(CFAbsoluteTime *)(a1 + 1528) = result;
    }
  }
  return result;
}

uint64_t sub_1002D70E4(uint64_t a1, char *a2)
{
  return (*(uint64_t (**)(void, void, void))(**(void **)(a1 + 304) + 480))(*(void *)(a1 + 304), *((unsigned int *)a2 + 14), *a2);
}

uint64_t sub_1002D7120(uint64_t a1)
{
  std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = *(_DWORD *)(a1 + 576);
    *(_DWORD *)std::string buf = 67109120;
    LODWORD(v29) = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Granted bootstrap assertions: %d", buf, 8u);
    std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(a1 + 1528);
    *(_DWORD *)std::string buf = 134217984;
    uint64_t v29 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Activation Failure Delay: %f", buf, 0xCu);
    std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = printers::asString((printers *)(a1 + 585), v5);
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v29 = v6;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Internet Active: [%s]", buf, 0xCu);
    std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = subscriber::asString();
    uint64_t v9 = printers::asString((printers *)(a1 + 5265), v8);
    *(_DWORD *)std::string buf = 136315394;
    uint64_t v29 = v7;
    __int16 v30 = 2080;
    uint64_t v31 = v9;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Purchase Slot: [%s] ShouldFetchNextInternetAvailable [%s]", buf, 0x16u);
    std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = printers::asString((printers *)(a1 + 1784), v10);
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v29 = v11;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I iCloud Signed in with encryption: %s", buf, 0xCu);
    std::random_device::result_type v2 = *(NSObject **)(a1 + 40);
  }
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = printers::asString((printers *)(a1 + 5560), v12);
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v29 = v13;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I No SIMs on buddy exit: %s", buf, 0xCu);
  }
  uint64_t v14 = *(void *)(a1 + 240);
  if (v14) {
    (*(void (**)(uint64_t))(*(void *)v14 + 192))(v14);
  }
  uint64_t v15 = *(void *)(a1 + 304);
  if (v15) {
    (*(void (**)(uint64_t))(*(void *)v15 + 496))(v15);
  }
  if (*(void *)(a1 + 680))
  {
    uint8_t v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Provisioning Operation in-flight", buf, 2u);
    }
  }
  if (*(unsigned char *)(a1 + 1512))
  {
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v18 = *(int *)(a1 + 1516);
      if (v18 > 6) {
        timeval v19 = "Data Plan Expiry Reason Undefined";
      }
      else {
        timeval v19 = off_1019BB200[v18];
      }
      *(_DWORD *)std::string buf = 136315138;
      uint64_t v29 = (uint64_t)v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Plan Expired: [%s]", buf, 0xCu);
    }
  }
  if (*(unsigned char *)(a1 + 5448))
  {
    uint64_t v20 = *(void *)(a1 + 5424);
    for (uint64_t i = *(void *)(a1 + 5432); v20 != i; v20 += 192)
    {
      uint8_t v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = v20;
        if (*(char *)(v20 + 23) < 0) {
          uint64_t v23 = *(void *)v20;
        }
        *(_DWORD *)std::string buf = 136315138;
        uint64_t v29 = v23;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Carrier [%s] has a carrier setup item tethered", buf, 0xCu);
      }
    }
  }
  uint64_t v24 = *(void *)(a1 + 512);
  if (v24) {
    (*(void (**)(uint64_t))(*(void *)v24 + 88))(v24);
  }
  uint64_t v25 = *(void *)(a1 + 528);
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 144))(v25);
  }
  uint64_t v26 = *(void *)(a1 + 384);
  if (v26) {
    (*(void (**)(uint64_t))(*(void *)v26 + 336))(v26);
  }
  uint64_t result = *(void *)(a1 + 400);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 336))(result);
  }
  return result;
}

uint64_t sub_1002D75E4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 72))(result, a1 + 2320);
  }
  return result;
}

uint64_t sub_1002D761C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result && *(unsigned char *)(a1 + 2368))
  {
    if ((*(char *)(a1 + 2367) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a1 + 2367)) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 80))(result, a1 + 2344);
    }
    if (*(void *)(a1 + 2352)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 80))(result, a1 + 2344);
    }
  }
  return result;
}

uint64_t sub_1002D7674(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 88))(*(void *)(a1 + 304), a1 + 2440);
  int v3 = *(void **)(a1 + 2440);
  if (v3 != (void *)(a1 + 2448))
  {
    do
    {
      if (*((char *)v3 + 87) < 0)
      {
        if (v3[9])
        {
LABEL_6:
          uint64_t result = *(void *)(a1 + 416);
          if (result) {
            uint64_t result = (*(uint64_t (**)(uint64_t, void *, void))(*(void *)result + 152))(result, v3 + 8, 0);
          }
        }
      }
      else if (*((unsigned char *)v3 + 87))
      {
        goto LABEL_6;
      }
      uint64_t v4 = (void *)v3[1];
      if (v4)
      {
        do
        {
          uint64_t v5 = v4;
          uint64_t v4 = (void *)*v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v3[2];
          BOOL v6 = *v5 == (void)v3;
          int v3 = v5;
        }
        while (!v6);
      }
      int v3 = v5;
    }
    while (v5 != (void *)(a1 + 2448));
  }
  return result;
}

void sub_1002D7760(uint64_t a1)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 304) + 32))(*(void *)(a1 + 304), a1 + 2464);
  uint64_t v2 = *(void *)(a1 + 384);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 72))(v2, a1 + 2464);
  }
  uint64_t v3 = *(void *)(a1 + 400);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 72))(v3, a1 + 2464);
  }
  uint64_t v4 = *(void *)(a1 + 464);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 16))(v4, a1 + 2464);
  }
  uint64_t v5 = *(void *)(a1 + 2464);
  uint64_t v6 = *(void *)(a1 + 2472);
  if (v5 != v6)
  {
    while (*(_DWORD *)(v5 + 4) != 1 || (subscriber::isSimAbsent() & 1) == 0)
    {
      v5 += 168;
      if (v5 == v6)
      {
        uint64_t v5 = v6;
        break;
      }
    }
    if (v5 != *(void *)(a1 + 2472))
    {
      sub_1002DA408(a1);
    }
  }
}

uint64_t sub_1002D78B0(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 112))(*(void *)(a1 + 304), a1 + 4552);
}

uint64_t sub_1002D78E4(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 120))(*(void *)(a1 + 304), a1 + 4576);
}

uint64_t sub_1002D7918(uint64_t a1)
{
  return (*(uint64_t (**)(void, BOOL, BOOL))(**(void **)(a1 + 336) + 160))(*(void *)(a1 + 336), *(unsigned char *)(a1 + 2289) == 1, *(unsigned char *)(a1 + 2592) == 1);
}

void sub_1002D795C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/call_state");
  v4[0] = off_1019B7338;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002D7A10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002D7A3C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/effective_data_roaming_setting");
  v4[0] = off_1019B73B8;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002D7AF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002D7B1C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/emergency_mode");
  v4[0] = off_1019B7438;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002D7BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002D7BFC(uint64_t a1)
{
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 304) + 56))(*(void *)(a1 + 304), a1 + 2568);
  uint64_t v2 = *(void *)(a1 + 384);
  if (v2) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 80))(v2, a1 + 2568);
  }
  uint64_t v3 = *(void *)(a1 + 400);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 80))(v3, a1 + 2568);
  }
  uint64_t v4 = *(void *)(a1 + 464);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 24))(v4, a1 + 2568);
  }
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 304) + 328))(*(void *)(a1 + 304), 3))
  {
    (*(void (**)(void))(**(void **)(a1 + 336) + 24))(*(void *)(a1 + 336));
    sub_1002DCC0C(a1, 0);
  }
  if (*(unsigned char *)(a1 + 5562)
    && (*(unsigned char *)(a1 + 2289) == 1
     || (*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304))))
  {
    *(unsigned char *)(a1 + 5562) = 0;
    sub_1002DB61C(a1);
  }
}

uint64_t sub_1002D7DBC(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Esim activation flagset changed", v4, 2u);
  }
  return (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 40))(*(void *)(a1 + 304));
}

void sub_1002D7E48(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2560))
  {
    if (!*(unsigned char *)(a2 + 24))
    {
      __int16 v12 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_22;
      }
      goto LABEL_21;
    }
    if (*(void *)(a2 + 16) != *(void *)(a1 + 2552))
    {
LABEL_20:
      __int16 v12 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
LABEL_22:
        sub_1002DCC0C(a1, 1);
        return;
      }
LABEL_21:
      v13[0] = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I AK device list changed", (uint8_t *)v13, 2u);
      goto LABEL_22;
    }
    uint64_t v3 = (unsigned __int8 *)(a2 + 8);
    uint64_t v4 = *(unsigned __int8 **)a2;
    if (*(void *)a2 != a2 + 8)
    {
      uint64_t v5 = *(unsigned __int8 **)(a1 + 2536);
      while (sub_10030EE14((uint64_t)&v15, v4 + 32, v5 + 32))
      {
        uint64_t v6 = (unsigned __int8 *)*((void *)v4 + 1);
        uint64_t v7 = v4;
        if (v6)
        {
          do
          {
            uint64_t v4 = v6;
            uint64_t v6 = *(unsigned __int8 **)v6;
          }
          while (v6);
        }
        else
        {
          do
          {
            uint64_t v4 = (unsigned __int8 *)*((void *)v7 + 2);
            BOOL v8 = *(void *)v4 == (void)v7;
            uint64_t v7 = v4;
          }
          while (!v8);
        }
        uint64_t v9 = (unsigned __int8 *)*((void *)v5 + 1);
        if (v9)
        {
          do
          {
            uint64_t v10 = v9;
            uint64_t v9 = *(unsigned __int8 **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            uint64_t v10 = (unsigned __int8 *)*((void *)v5 + 2);
            BOOL v8 = *(void *)v10 == (void)v5;
            uint64_t v5 = v10;
          }
          while (!v8);
        }
        uint64_t v5 = v10;
        if (v4 == v3)
        {
          uint64_t v11 = *(NSObject **)(a1 + 40);
          if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
            return;
          }
          goto LABEL_27;
        }
      }
      goto LABEL_20;
    }
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
LABEL_27:
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I AK device list no change", buf, 2u);
    }
  }
}

uint64_t sub_1002D7FE0(void *a1, uint64_t a2)
{
  v4[0] = off_1019B7638;
  v4[1] = a2;
  v4[3] = v4;
  sub_100316BD4(v4, a1);
  sub_10030AC1C(v4);
  uint64_t result = a1[3];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, a1 + 4);
  }
  return result;
}

uint64_t sub_1002D80A0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result)
  {
    if ((*(char *)(a1 + 2511) & 0x80000000) == 0)
    {
      if (!*(unsigned char *)(a1 + 2511)) {
        return result;
      }
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88))(result, a1 + 2488);
    }
    if (*(void *)(a1 + 2496)) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 88))(result, a1 + 2488);
    }
  }
  return result;
}

void sub_1002D80F0(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/airplane_mode");
  v4[0] = off_1019B7978;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002D81A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_1002D81D0(uint64_t a1, int a2)
{
  int v2 = *(_DWORD *)(a1 + 2260);
  if (v2 != a2)
  {
    if (v2 == 2)
    {
      if (*(unsigned char *)(a1 + 1512)) {
        *(unsigned char *)(a1 + 1512) = 0;
      }
      sub_1002DA714(a1, 0, 0);
      uint64_t v4 = *(void *)(a1 + 680);
      if (v4) {
        (*(void (**)(uint64_t))(*(void *)v4 + 184))(v4);
      }
    }
    v17[0] = 0;
    v17[1] = 0;
    char v18 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v17);
    if (v18)
    {
      unsigned int v5 = LOBYTE(v17[0]) - 89;
      BOOL v6 = v5 > 8;
      int v7 = (1 << v5) & 0x181;
      BOOL v8 = v6 || v7 == 0;
      if (!v8 && *(_DWORD *)(a1 + 2260) == 1)
      {
        if (*(unsigned char *)(a1 + 2289) == 1)
        {
          long long v12 = 0u;
          long long v13 = 0u;
          memset(v14, 0, sizeof(v14));
          long long __p = 0u;
          long long v16 = 0u;
          BOOL v10 = *(_DWORD *)(a1 + 2632) == 1;
          LODWORD(v12) = *(_DWORD *)(a1 + 580);
          uint64_t v9 = v12;
          BYTE4(v12) = 14;
          long long v13 = 0uLL;
          *((void *)&v12 + 1) = 0;
          LOBYTE(v14[0]) = 4;
          memset(&v14[1], 0, 100);
          long long __p = 0uLL;
          BYTE8(v16) = 0;
          *(void *)&long long v16 = 0;
          BYTE9(v16) = v10;
          sub_100311AFC((uint64_t)v11, (int *)&v12);
          v11[176] = 1;
          sub_1002DAEB8(a1, v9, (uint64_t)v11, 0);
          sub_10030AEBC((uint64_t)v11);
          if (SBYTE7(v16) < 0) {
            operator delete((void *)__p);
          }
          if (SHIBYTE(v14[12]) < 0) {
            operator delete(v14[10]);
          }
          if (SHIBYTE(v14[9]) < 0) {
            operator delete(v14[7]);
          }
          if (SHIBYTE(v14[6]) < 0) {
            operator delete(v14[4]);
          }
          if (SHIBYTE(v14[3]) < 0) {
            operator delete(v14[1]);
          }
          if (SHIBYTE(v13) < 0) {
            operator delete(*((void **)&v12 + 1));
          }
        }
        else
        {
          *(unsigned char *)(a1 + 5265) = 1;
        }
      }
    }
  }
}

void sub_1002D8424(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1002D8450(uint64_t a1)
{
  int v2 = (MCCAndMNC *)(a1 + 2376);
  MCCAndMNC::getMcc((uint64_t *)buf, (MCCAndMNC *)(a1 + 2376));
  if (MCC::valid((MCC *)buf))
  {
    MCCAndMNC::getMnc((uint64_t *)__p, v2);
    int v3 = MCC::valid((MCC *)__p) ^ 1;
    if (v37 < 0) {
      operator delete(__p[1]);
    }
  }
  else
  {
    int v3 = 1;
  }
  if (v43 < 0)
  {
    operator delete(*(void **)&buf[8]);
    if (v3)
    {
LABEL_7:
      uint64_t v4 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E LastVisiblePlmns updated, but mcc/mnc invalid", buf, 2u);
      }
      return;
    }
  }
  else if (v3)
  {
    goto LABEL_7;
  }
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  MCCAndMNC::getMcc((uint64_t *)buf, v2);
  MCC::getStringValue((uint64_t *)v33, (MCC *)buf);
  if (v43 < 0) {
    operator delete(*(void **)&buf[8]);
  }
  memset(&__str, 0, sizeof(__str));
  uint64_t v5 = *(void *)(a1 + 160);
  if (SHIBYTE(v34) < 0)
  {
    sub_10004FC84(__dst, v33[0], (unint64_t)v33[1]);
  }
  else
  {
    *(_OWORD *)__dst = *(_OWORD *)v33;
    uint64_t v31 = v34;
  }
  (*(void (**)(std::string *__return_ptr, uint64_t, void **))(*(void *)v5 + 56))(&__str, v5, __dst);
  if (SHIBYTE(v31) < 0) {
    operator delete(__dst[0]);
  }
  int v6 = SHIBYTE(__str.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __str.__r_.__value_.__l.__size_;
  if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
  }
  if (size)
  {
    BOOL v8 = (const void **)(a1 + 1536);
    uint64_t v9 = *(unsigned __int8 *)(a1 + 1559);
    if ((v9 & 0x80u) == 0) {
      uint64_t v10 = *(unsigned __int8 *)(a1 + 1559);
    }
    else {
      uint64_t v10 = *(void *)(a1 + 1544);
    }
    if (v10 != size) {
      goto LABEL_34;
    }
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_str = &__str;
    }
    else {
      p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
    }
    if ((v9 & 0x80) != 0)
    {
      if (memcmp(*v8, p_str, *(void *)(a1 + 1544))) {
        goto LABEL_34;
      }
    }
    else if (*(unsigned char *)(a1 + 1559))
    {
      long long v12 = (unsigned __int8 *)(a1 + 1536);
      while (*v12 == p_str->__r_.__value_.__s.__data_[0])
      {
        ++v12;
        p_str = (std::string *)((char *)p_str + 1);
        if (!--v9) {
          goto LABEL_70;
        }
      }
LABEL_34:
      long long v13 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v14 = (std::string *)__str.__r_.__value_.__r.__words[0];
        if (v6 >= 0) {
          uint64_t v14 = &__str;
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)&uint8_t buf[4] = v14;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I changing camped country iso to %s", buf, 0xCu);
      }
      std::string::operator=((std::string *)(a1 + 1536), &__str);
      (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
      long long v16 = ServiceMap;
      if (v17 < 0)
      {
        char v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v19 = 5381;
        do
        {
          uint64_t v17 = v19;
          unsigned int v20 = *v18++;
          uint64_t v19 = (33 * v19) ^ v20;
        }
        while (v20);
      }
      std::mutex::lock(ServiceMap);
      __p[0] = (void *)v17;
      uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)__p);
      if (v21)
      {
        uint64_t v23 = v21[3];
        uint8_t v22 = (std::__shared_weak_count *)v21[4];
        if (v22)
        {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v16);
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v22);
          char v24 = 0;
LABEL_46:
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
          if (v23)
          {
            if (*(char *)(a1 + 1559) < 0)
            {
              sub_10004FC84(v27, *(void **)(a1 + 1536), *(void *)(a1 + 1544));
            }
            else
            {
              *(_OWORD *)uint64_t v27 = *(_OWORD *)v8;
              uint64_t v28 = *(void *)(a1 + 1552);
            }
            if (SHIBYTE(v28) < 0)
            {
              sub_10004FC84(__p, v27[0], (unint64_t)v27[1]);
            }
            else
            {
              *(_OWORD *)long long __p = *(_OWORD *)v27;
              uint64_t v36 = v28;
            }
            uint64_t v38 = 0;
            if (SHIBYTE(v36) < 0)
            {
              sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
            }
            else
            {
              *(_OWORD *)std::string buf = *(_OWORD *)__p;
              uint64_t v42 = v36;
            }
            uint64_t v39 = 0;
            if (ctu::cf::convert_copy())
            {
              uint64_t v25 = v38;
              uint64_t v38 = v39;
              uint64_t v40 = v25;
              sub_1000558F4(&v40);
            }
            if (SHIBYTE(v42) < 0) {
              operator delete(*(void **)buf);
            }
            uint64_t v26 = v38;
            uint64_t v29 = v38;
            uint64_t v38 = 0;
            sub_1000558F4(&v38);
            if (SHIBYTE(v36) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v28) < 0) {
              operator delete(v27[0]);
            }
            (*(void (**)(uint64_t, const __CFString *, const void *, const __CFString *, const CFStringRef, const CFStringRef))(*(void *)v23 + 16))(v23, @"LastCampedCountryCode", v26, @"no_backup/com.apple.CommCenter.CarrierList.plist", kCFPreferencesCurrentUser, kCFPreferencesAnyHost);
            sub_1000558F4(&v29);
          }
          if ((v24 & 1) == 0) {
            sub_10004D2C8(v22);
          }
          (*(void (**)(void))(**(void **)(a1 + 336) + 136))(*(void *)(a1 + 336));
          LOBYTE(v6) = *((unsigned char *)&__str.__r_.__value_.__s + 23);
          goto LABEL_70;
        }
      }
      else
      {
        uint64_t v23 = 0;
      }
      std::mutex::unlock(v16);
      uint8_t v22 = 0;
      char v24 = 1;
      goto LABEL_46;
    }
  }
LABEL_70:
  if ((v6 & 0x80) != 0) {
    operator delete(__str.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(v33[0]);
  }
}

void sub_1002D8974(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,void *__p,void *a36,int a37,__int16 a38,char a39,char a40,int a41,__int16 a42,char a43,char a44)
{
  sub_1000558F4((const void **)(v46 - 136));
  if (a40 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if ((v45 & 1) == 0) {
    sub_10004D2C8(v44);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (a34 < 0) {
    operator delete(a29);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002D8A90(uint64_t result, unsigned __int8 *a2)
{
  uint64_t v2 = result;
  int v3 = *(unsigned __int8 *)(result + 4601);
  if (a2[1]) {
    BOOL v4 = v3 == 0;
  }
  else {
    BOOL v4 = 1;
  }
  if (v4)
  {
    int v6 = v3 != 0;
    int v5 = a2[1] != 0;
  }
  else
  {
    int v5 = *a2;
    int v6 = *(unsigned __int8 *)(result + 4600);
  }
  if (v5 != v6)
  {
    (*(void (**)(void, void))(**(void **)(result + 336) + 168))(*(void *)(result + 336), *(unsigned __int16 *)(result + 4600));
    int v7 = *(uint64_t (**)(void))(**(void **)(v2 + 160) + 24);
    return v7();
  }
  return result;
}

void sub_1002D8B60(uint64_t a1)
{
  (*(void (**)(void, void))(**(void **)(a1 + 304) + 64))(*(void *)(a1 + 304), *(unsigned int *)(a1 + 2632));
  uint64_t v2 = *(capabilities::ct **)(a1 + 384);
  if (v2) {
    uint64_t v2 = (capabilities::ct *)(*(uint64_t (**)(capabilities::ct *, BOOL))(*(void *)v2 + 48))(v2, *(_DWORD *)(a1 + 2632) == 1);
  }
  if (capabilities::ct::getProvisioningProfileSupport(v2) == 1
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)) & 1) == 0)
  {
    sub_1002DA714(a1, 1, 0);
  }
  if (*(_DWORD *)(a1 + 2632) != 2) {
    goto LABEL_23;
  }
  sub_1002DBAF4(a1);
  sub_1002DC324(a1);
  sub_1002DC408(a1);
  sub_1002DC774(a1);
  uint64_t v3 = *(void *)(a1 + 1608);
  if (v3)
  {
    if (*(char *)(a1 + 2623) < 0)
    {
      if (*(void *)(a1 + 2608)) {
        goto LABEL_17;
      }
    }
    else if (*(unsigned char *)(a1 + 2623))
    {
      goto LABEL_17;
    }
    BOOL v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v5[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Disarming disable profile timer", (uint8_t *)v5, 2u);
      uint64_t v3 = *(void *)(a1 + 1608);
      *(void *)(a1 + 1608) = 0;
      if (!v3) {
        goto LABEL_17;
      }
    }
    else
    {
      *(void *)(a1 + 1608) = 0;
    }
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
  }
LABEL_17:
  if (*(unsigned char *)(a1 + 2289) == 1
    || (*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)))
  {
    v5[0] = 0;
    v5[1] = 0;
    char v6 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v5);
    if (!v6)
    {
      *(unsigned char *)(a1 + 5562) = 1;
      return;
    }
    sub_1002DB61C(a1);
  }
  else
  {
    *(unsigned char *)(a1 + 5265) = 1;
  }
LABEL_23:
  sub_1002DCB1C(a1);
}

void sub_1002D8DE8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 2304);
  if (!v2) {
    goto LABEL_11;
  }
  uint64_t v3 = a1 + 2304;
  do
  {
    int v4 = *(_DWORD *)(v2 + 32);
    BOOL v5 = v4 < 1;
    if (v4 >= 1) {
      char v6 = (uint64_t *)v2;
    }
    else {
      char v6 = (uint64_t *)(v2 + 8);
    }
    if (!v5) {
      uint64_t v3 = v2;
    }
    uint64_t v2 = *v6;
  }
  while (*v6);
  if (v3 == a1 + 2304 || *(int *)(v3 + 32) >= 2)
  {
LABEL_11:
    int v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v23) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid slot", (uint8_t *)&v23, 2u);
    }
    return;
  }
  uint64_t v10 = *(void *)(v3 + 48);
  uint64_t v8 = v3 + 48;
  uint64_t v9 = v10;
  if (!v10) {
    return;
  }
  uint64_t v11 = v8;
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  do
  {
    int v14 = *(_DWORD *)(v13 + 32);
    BOOL v15 = v14 < 0;
    if (v14 >= 0) {
      long long v16 = (uint64_t *)v13;
    }
    else {
      long long v16 = (uint64_t *)(v13 + 8);
    }
    if (!v15) {
      uint64_t v12 = v13;
    }
    uint64_t v13 = *v16;
  }
  while (*v16);
  if (v12 != v8 && *(int *)(v12 + 32) <= 0)
  {
    int v17 = *(_DWORD *)(v12 + 44);
    if (!v17)
    {
LABEL_27:
      *(unsigned char *)(a1 + 585) = v17;
      goto LABEL_28;
    }
    if (v17 == 2)
    {
      LOBYTE(v17) = 1;
      goto LABEL_27;
    }
  }
  do
  {
LABEL_28:
    int v18 = *(_DWORD *)(v9 + 32);
    BOOL v19 = v18 < 19;
    if (v18 >= 19) {
      unsigned int v20 = (uint64_t *)v9;
    }
    else {
      unsigned int v20 = (uint64_t *)(v9 + 8);
    }
    if (!v19) {
      uint64_t v11 = v9;
    }
    uint64_t v9 = *v20;
  }
  while (*v20);
  if (v11 != v8
    && *(int *)(v11 + 32) <= 19
    && *(_DWORD *)(v11 + 44) == 2
    && *(int *)(a1 + 576) >= 1
    && !*(void *)(a1 + 664))
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 320) + 824))(&v23);
    long long v21 = v23;
    long long v23 = 0uLL;
    uint8_t v22 = *(std::__shared_weak_count **)(a1 + 672);
    *(_OWORD *)(a1 + 664) = v21;
    if (v22)
    {
      sub_10004D2C8(v22);
      if (*((void *)&v23 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v23 + 1));
      }
    }
  }
}

void sub_1002D8FA8(uint64_t a1, int a2)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 552))(v5);
  uint64_t v4 = v5[2];
  sub_10005CD2C((uint64_t)v5, (char *)v5[1]);
  if (!v4) {
    sub_1002DA714(a1, a2, 1);
  }
}

uint64_t sub_1002D9034(uint64_t a1, unsigned char *a2)
{
  if (*a2 != 1 && *(unsigned char *)(a1 + 2289) == 1)
  {
    if (*(void *)(a1 + 680)) {
      goto LABEL_4;
    }
    if (*(char *)(a1 + 615) < 0)
    {
      if (*(void *)(a1 + 600)) {
        goto LABEL_31;
      }
    }
    else if (*(unsigned char *)(a1 + 615))
    {
      goto LABEL_31;
    }
    if (!*(unsigned char *)(a1 + 5265))
    {
LABEL_4:
      if (*(int *)(a1 + 5268) >= 1)
      {
        uint64_t v3 = *(void *)(a1 + 2520);
        if (!v3) {
          goto LABEL_18;
        }
        uint64_t v4 = a1 + 2520;
        do
        {
          int v5 = *(_DWORD *)(v3 + 28);
          BOOL v6 = v5 < 1;
          if (v5 >= 1) {
            int v7 = (uint64_t *)v3;
          }
          else {
            int v7 = (uint64_t *)(v3 + 8);
          }
          if (!v6) {
            uint64_t v4 = v3;
          }
          uint64_t v3 = *v7;
        }
        while (*v7);
        if (v4 != a1 + 2520 && *(int *)(v4 + 28) <= 1 && *(unsigned char *)(v4 + 32) == 2)
        {
          uint64_t v8 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Baseband is service provisioned. abort ODA", buf, 2u);
          }
        }
        else
        {
LABEL_18:
          uint64_t v9 = *(void *)(a1 + 416);
          if (v9)
          {
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            (*(void (**)(uint64_t *__return_ptr))(*(void *)v9 + 72))(&v26);
            uint64_t v10 = v26;
            uint64_t v11 = v27;
            if (v26 == v27)
            {
              BOOL v15 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I No pending ODA plan. abort ODA", buf, 2u);
              }
              *(_DWORD *)(a1 + 5268) = 0;
            }
            else
            {
              while (1)
              {
                bzero(buf, 0x4E8uLL);
                (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 416) + 168))(buf);
                if (v40) {
                  break;
                }
                v10 += 24;
                if (v10 == v11) {
                  goto LABEL_57;
                }
              }
              int v16 = buf[1];
              int v17 = *(NSObject **)(a1 + 40);
              BOOL v18 = os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT);
              if (v16 == 9)
              {
                if (v18)
                {
                  int v19 = *(_DWORD *)(a1 + 5268);
                  unsigned int v20 = &v38;
                  if (v39 < 0) {
                    unsigned int v20 = v38;
                  }
                  *(_DWORD *)uint64_t v29 = 67109378;
                  *(_DWORD *)&v29[4] = v19;
                  *(_WORD *)&v29[8] = 2080;
                  *(void *)&v29[10] = v20;
                  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %d ODA request retries left for (%s)", v29, 0x12u);
                }
              }
              else
              {
                if (v18)
                {
                  *(_WORD *)uint64_t v29 = 0;
                  _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Pending ODA plan is not in DS state. abort ODA", v29, 2u);
                }
                *(_DWORD *)(a1 + 5268) = 0;
              }
              if (v40) {
                sub_10030D10C((uint64_t)buf);
              }
              if (v16 == 9)
              {
LABEL_57:
                --*(_DWORD *)(a1 + 5268);
                memset(v29, 0, sizeof(v29));
                *(_OWORD *)__int16 v30 = 0u;
                long long v31 = 0u;
                BOOL v22 = *(_DWORD *)(a1 + 2632) == 1;
                *(_DWORD *)uint64_t v29 = *(_DWORD *)(a1 + 580);
                uint64_t v21 = *(unsigned int *)v29;
                *(_WORD *)&v29[4] = 783;
                memset(&v29[8], 0, 24);
                v29[32] = 4;
                memset(&v29[40], 0, 100);
                v30[0] = 0;
                v30[1] = 0;
                BYTE8(v31) = 0;
                *(void *)&long long v31 = 0;
                BYTE9(v31) = v22;
                sub_100311AFC((uint64_t)buf, (int *)v29);
                char v37 = 1;
                sub_1002DAEB8(a1, v21, (uint64_t)buf, 0);
                sub_10030AEBC((uint64_t)buf);
                if (SBYTE7(v31) < 0) {
                  operator delete(v30[0]);
                }
                if ((char)v29[135] < 0) {
                  operator delete(*(void **)&v29[112]);
                }
                if ((char)v29[111] < 0) {
                  operator delete(*(void **)&v29[88]);
                }
                if ((char)v29[87] < 0) {
                  operator delete(*(void **)&v29[64]);
                }
                if ((char)v29[63] < 0) {
                  operator delete(*(void **)&v29[40]);
                }
                if ((char)v29[31] < 0) {
                  operator delete(*(void **)&v29[8]);
                }
              }
            }
            *(void *)uint64_t v29 = &v26;
            sub_100047F64((void ***)v29);
          }
          else
          {
            uint64_t v12 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I No pending transfer handler. abort ODA", buf, 2u);
            }
            *(_DWORD *)(a1 + 5268) = 0;
          }
        }
      }
      goto LABEL_70;
    }
LABEL_31:
    *(_OWORD *)std::string buf = 0u;
    long long v33 = 0u;
    memset(v34, 0, sizeof(v34));
    *(_OWORD *)long long __p = 0u;
    long long v36 = 0u;
    BOOL v14 = *(_DWORD *)(a1 + 2632) == 1;
    *(_DWORD *)std::string buf = *(_DWORD *)(a1 + 580);
    uint64_t v13 = *(unsigned int *)buf;
    uint8_t buf[4] = 14;
    long long v33 = 0uLL;
    *(void *)&uint8_t buf[8] = 0;
    LOBYTE(v34[0]) = 4;
    memset(&v34[1], 0, 100);
    __p[1] = 0;
    __p[0] = 0;
    BYTE8(v36) = 0;
    *(void *)&long long v36 = 0;
    BYTE9(v36) = v14;
    sub_100311AFC((uint64_t)v25, (int *)buf);
    v25[176] = 1;
    sub_1002DAEB8(a1, v13, (uint64_t)v25, 0);
    sub_10030AEBC((uint64_t)v25);
    if (SBYTE7(v36) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v34[12]) < 0) {
      operator delete(v34[10]);
    }
    if (SHIBYTE(v34[9]) < 0) {
      operator delete(v34[7]);
    }
    if (SHIBYTE(v34[6]) < 0) {
      operator delete(v34[4]);
    }
    if (SHIBYTE(v34[3]) < 0) {
      operator delete(v34[1]);
    }
    if (SHIBYTE(v33) < 0) {
      operator delete(*(void **)&buf[8]);
    }
LABEL_70:
    sub_1002DCC0C(a1, 0);
  }
  uint64_t v23 = *(void *)(a1 + 464);
  if (v23) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v23 + 48))(v23, a1 + 2289);
  }
  return (*(uint64_t (**)(void, BOOL, BOOL))(**(void **)(a1 + 336) + 160))(*(void *)(a1 + 336), *(unsigned char *)(a1 + 2289) == 1, *(unsigned char *)(a1 + 2592) == 1);
}

void sub_1002D9610(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,char a32,uint64_t a33,uint64_t a34,void **a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  a35 = (void **)&a32;
  sub_100047F64(&a35);
  _Unwind_Resume(a1);
}

void sub_1002D9674(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = (unsigned __int8 **)(a1 + 2600);
  uint64_t v4 = a2[23];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a2[23];
  }
  else {
    uint64_t v5 = *((void *)a2 + 1);
  }
  int v6 = *(char *)(a1 + 2623);
  if (v6 >= 0) {
    uint64_t v7 = *(unsigned __int8 *)(a1 + 2623);
  }
  else {
    uint64_t v7 = *(void *)(a1 + 2608);
  }
  if (v5 == v7)
  {
    uint64_t v8 = *v3;
    if (v6 >= 0) {
      uint64_t v8 = (unsigned __int8 *)(a1 + 2600);
    }
    if ((v4 & 0x80) != 0)
    {
      if (!memcmp(*(const void **)a2, v8, *((void *)a2 + 1))) {
        return;
      }
    }
    else
    {
      if (!a2[23]) {
        return;
      }
      while (*a2 == *v8)
      {
        ++a2;
        ++v8;
        if (!--v4) {
          return;
        }
      }
    }
  }
  if (v7)
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v10 = v3;
      if (v6 < 0) {
        uint64_t v10 = (unsigned __int8 **)*v3;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Activation Rejected Iccid: %s", buf, 0xCu);
    }
    if (sIsProfileActive())
    {
      if (!*(void *)(a1 + 1608))
      {
        *(_OWORD *)std::string buf = 0uLL;
        (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v29);
        Registry::getTimerService((uint64_t *)buf, v29);
        if (v30) {
          sub_10004D2C8(v30);
        }
        if (*(void *)buf)
        {
          uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
          if (!v11 || (uint64_t v12 = *(void *)(a1 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
            sub_100088B9C();
          }
          BOOL v14 = v13;
          atomic_fetch_add_explicit(&v13->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v13);
          uint64_t v15 = *(void *)buf;
          sub_100058DB0(__p, "Delay Disable Operation");
          int v16 = *(NSObject **)(a1 + 24);
          dispatch_object_t object = v16;
          if (v16) {
            dispatch_retain(v16);
          }
          v23[0] = _NSConcreteStackBlock;
          v23[1] = 1174405120;
          v23[2] = sub_1002DCF1C;
          v23[3] = &unk_1019B6448;
          v23[4] = a1;
          v23[5] = v12;
          char v24 = v14;
          atomic_fetch_add_explicit(&v14->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          aBlock = _Block_copy(v23);
          sub_100118A44(v15, (uint64_t)__p, 1, 360000000, &object, &aBlock);
          int v17 = v29;
          uint64_t v29 = 0;
          uint64_t v18 = *(void *)(a1 + 1608);
          *(void *)(a1 + 1608) = v17;
          if (v18)
          {
            (*(void (**)(uint64_t))(*(void *)v18 + 8))(v18);
            int v19 = v29;
            uint64_t v29 = 0;
            if (v19) {
              (*(void (**)(Registry *))(*(void *)v19 + 8))(v19);
            }
          }
          if (aBlock) {
            _Block_release(aBlock);
          }
          if (object) {
            dispatch_release(object);
          }
          if (v28 < 0) {
            operator delete(__p[0]);
          }
          if (v24) {
            std::__shared_weak_count::__release_weak(v24);
          }
          std::__shared_weak_count::__release_weak(v14);
        }
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
      }
    }
    else
    {
      BOOL v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Profile already disabled?", buf, 2u);
      }
    }
  }
  else
  {
    uint64_t v20 = *(void *)(a1 + 1608);
    *(void *)(a1 + 1608) = 0;
    if (v20) {
      (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
    }
    uint64_t v21 = *(void (**)(void))(**(void **)(a1 + 160) + 24);
    v21();
  }
}

void sub_1002D9A6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002D9B00(uint64_t result, int a2)
{
  int v2 = *(unsigned __int8 *)(result + 5563);
  if (v2 != a2 && v2 != 0)
  {
    uint64_t v4 = result;
    uint64_t v5 = *(NSObject **)(result + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)int v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Resetting carrier list", v6, 2u);
    }
    (*(void (**)(void))(**(void **)(v4 + 336) + 136))(*(void *)(v4 + 336));
    return (*(uint64_t (**)(void))(**(void **)(v4 + 160) + 40))(*(void *)(v4 + 160));
  }
  return result;
}

uint64_t sub_1002D9BC8(uint64_t a1)
{
  sub_1002DBAF4(a1);
  sub_1002DC324(a1);
  sub_1002DC408(a1);
  sub_1002DC774(a1);
  uint64_t v2 = *(void *)(a1 + 464);
  if (v2) {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 120))(v2, *(unsigned __int8 *)(a1 + 2628));
  }
  uint64_t v3 = *(uint64_t (**)(void))(**(void **)(a1 + 304) + 72);

  return v3();
}

uint64_t sub_1002D9C6C(uint64_t a1)
{
  sub_1002DBAF4(a1);
  sub_1002DC324(a1);
  sub_1002DC408(a1);

  return sub_1002DC774(a1);
}

void sub_1002D9CB4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 2840);
  uint64_t v3 = (void *)(a1 + 2848);
  if (v2 != (void *)(a1 + 2848))
  {
    while (1)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v31 = 0;
      uint64_t v4 = v2 + 4;
      if (*((char *)v2 + 55) < 0)
      {
        sub_10004FC84(__p, (void *)v2[4], v2[5]);
      }
      else
      {
        *(_OWORD *)long long __p = *v4;
        uint64_t v31 = v2[6];
      }
      uint64_t v5 = (int *)(v2 + 9);
      uint64_t v6 = v2[9];
      if (!v6) {
        goto LABEL_37;
      }
      uint64_t v7 = (uint64_t **)(v2 + 8);
      uint64_t v8 = (int *)(v2 + 9);
      uint64_t v9 = v2[9];
      do
      {
        int v10 = *(_DWORD *)(v9 + 28);
        BOOL v11 = v10 < 13;
        if (v10 >= 13) {
          uint64_t v12 = (uint64_t *)v9;
        }
        else {
          uint64_t v12 = (uint64_t *)(v9 + 8);
        }
        if (!v11) {
          uint64_t v8 = (int *)v9;
        }
        uint64_t v9 = *v12;
      }
      while (*v12);
      if (v8 == v5 || v8[7] > 13) {
        break;
      }
      BOOL v14 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v2 + 4;
        if (*((char *)v2 + 55) < 0) {
          uint64_t v15 = *(void **)v4;
        }
        int v16 = v8[8];
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v15;
        __int16 v33 = 1024;
        int v34 = v16;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I transfer entitlement for [%s]: [%d]", buf, 0x12u);
        uint64_t v6 = *(void *)v5;
      }
      int v13 = 1;
      if (v6) {
        goto LABEL_21;
      }
LABEL_34:
      if (v13) {
        goto LABEL_35;
      }
LABEL_37:
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      char v24 = (void *)v2[1];
      if (v24)
      {
        do
        {
          uint64_t v25 = v24;
          char v24 = (void *)*v24;
        }
        while (v24);
      }
      else
      {
        do
        {
          uint64_t v25 = (void *)v2[2];
          BOOL v26 = *v25 == (void)v2;
          uint64_t v2 = v25;
        }
        while (!v26);
      }
      uint64_t v2 = v25;
      if (v25 == v3) {
        goto LABEL_45;
      }
    }
    int v13 = 0;
LABEL_21:
    int v17 = (int *)(v2 + 9);
    do
    {
      int v18 = *(_DWORD *)(v6 + 28);
      BOOL v19 = v18 < 16;
      if (v18 >= 16) {
        uint64_t v20 = (uint64_t *)v6;
      }
      else {
        uint64_t v20 = (uint64_t *)(v6 + 8);
      }
      if (!v19) {
        int v17 = (int *)v6;
      }
      uint64_t v6 = *v20;
    }
    while (*v20);
    if (v17 != v5 && v17[7] <= 16)
    {
      uint64_t v21 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        if (*((char *)v2 + 55) < 0) {
          uint64_t v4 = *(_OWORD **)v4;
        }
        int v22 = v17[8];
        *(_DWORD *)std::string buf = 136315394;
        *(void *)&uint8_t buf[4] = v4;
        __int16 v33 = 1024;
        int v34 = v22;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I add on entitlement for [%s]: [%d]", buf, 0x12u);
      }
LABEL_35:
      *(void *)std::string buf = __p;
      uint64_t v23 = (uint64_t **)(sub_10031E45C((uint64_t **)(a1 + 1616), __p, (uint64_t)&unk_10144E20E, (long long **)buf) + 7);
      if (v23 != v7) {
        sub_10005D87C(v23, *v7, v2 + 9);
      }
      goto LABEL_37;
    }
    goto LABEL_34;
  }
LABEL_45:
  uint64_t v27 = *(void *)(a1 + 400);
  if (v27)
  {
    sub_1002DD40C((uint64_t)__p, (void *)(a1 + 1616));
    (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v27 + 40))(v27, a1 + 2840, __p);
    sub_10005CD2C((uint64_t)__p, (char *)__p[1]);
  }
  uint64_t v28 = *(void *)(a1 + 464);
  if (v28) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 32))(v28, a1 + 2840, a1 + 1616);
  }
  uint64_t v29 = *(void *)(a1 + 304);
  sub_1002DD40C((uint64_t)__p, (void *)(a1 + 1616));
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v29 + 24))(v29, a1 + 2840, __p);
  sub_10005CD2C((uint64_t)__p, (char *)__p[1]);
}

void sub_1002DA034(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, char *a12, int a13, __int16 a14, char a15, char a16)
{
}

uint64_t sub_1002DA070(uint64_t result)
{
  if (*(unsigned char *)(result + 2864))
  {
    uint64_t v1 = result;
    uint64_t v2 = *(NSObject **)(result + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v3 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Handle first time unlock after boot", v3, 2u);
    }
    uint64_t result = *(void *)(v1 + 464);
    if (result) {
      return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)result + 96))(result, 1);
    }
  }
  return result;
}

void sub_1002DA10C(uint64_t a1)
{
  sub_100058DB0(&__p, "/cc/props/baseband_service_provisioned_states");
  v4[0] = off_1019B8318;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002DA1C0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002DA1EC(uint64_t a1)
{
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 80))(*(void *)(a1 + 304), a1 + 2904);
}

void sub_1002DA21C(char **a1)
{
  sub_100058DB0(&__p, *a1);
  v4[0] = off_1019B8418;
  v4[1] = a1;
  v4[3] = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v4);
  if (v3 < 0) {
    operator delete(__p);
  }
}

void sub_1002DA2CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002DA2F8(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  char v3 = (unsigned __int8 **)(result + 4664);
  if (a2[2] == *(void *)(result + 4680))
  {
    uint64_t v4 = (unsigned __int8 *)(a2 + 1);
    uint64_t v5 = (unsigned __int8 *)*a2;
    if ((void *)*a2 == a2 + 1) {
      return result;
    }
    uint64_t v6 = *v3;
    while (1)
    {
      uint64_t result = sub_1000609C0((uint64_t)&v12, v5 + 32, v6 + 32);
      if ((result & 1) == 0) {
        break;
      }
      uint64_t v7 = (unsigned __int8 *)*((void *)v5 + 1);
      uint64_t v8 = v5;
      if (v7)
      {
        do
        {
          uint64_t v5 = v7;
          uint64_t v7 = *(unsigned __int8 **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v5 = (unsigned __int8 *)*((void *)v8 + 2);
          BOOL v9 = *(void *)v5 == (void)v8;
          uint64_t v8 = v5;
        }
        while (!v9);
      }
      int v10 = (unsigned __int8 *)*((void *)v6 + 1);
      if (v10)
      {
        do
        {
          BOOL v11 = v10;
          int v10 = *(unsigned __int8 **)v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          BOOL v11 = (unsigned __int8 *)*((void *)v6 + 2);
          BOOL v9 = *(void *)v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v9);
      }
      uint64_t v6 = v11;
      if (v5 == v4) {
        return result;
      }
    }
  }
  return (*(uint64_t (**)(void, unsigned __int8 **))(**(void **)(v2 + 304) + 48))(*(void *)(v2 + 304), v3);
}

void sub_1002DA408(uint64_t a1)
{
  *(unsigned char *)(a1 + 5266) = 0;
  if (*(char *)(a1 + 5415) < 0)
  {
    **(unsigned char **)(a1 + 5392) = 0;
    *(void *)(a1 + 5400) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 5392) = 0;
    *(unsigned char *)(a1 + 5415) = 0;
  }
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v11);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v11);
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v14 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v14);
  if (v7)
  {
    uint64_t v9 = v7[3];
    uint64_t v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  uint64_t v8 = 0;
  char v10 = 1;
LABEL_12:
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v9)
  {
    BOOL v11 = 0;
    char v12 = 0;
    uint64_t v13 = 0;
    (*(void (**)(Registry **__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 48))(&v11, v9, 6);
    if (v13) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 24))(v9, 6);
    }
    sub_10008E5B8((uint64_t)&v11, v12);
  }
  if ((v10 & 1) == 0) {
    sub_10004D2C8(v8);
  }
}

void sub_1002DA5C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
  sub_10008E5B8((uint64_t)&a9, a10);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(a1);
}

void sub_1002DA600(unsigned int *a1)
{
  if (a1[1] == 1)
  {
    sub_100058DB0(v3, "/cc/assertions/disable_bootstrap_assertion");
    *(_OWORD *)long long __p = *(_OWORD *)v3;
    uint64_t v6 = v4;
    v3[1] = 0;
    uint64_t v4 = 0;
    v3[0] = 0;
    ctu::path_join_impl();
    xpc_object_t object = xpc_int64_create(*a1);
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
    ctu::RestModule::setProperty();
    xpc_release(object);
    if (SHIBYTE(v6) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v4) < 0) {
      operator delete(v3[0]);
    }
  }
}

void sub_1002DA6CC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002DA714(uint64_t a1, int a2, int a3)
{
  char v46 = a3;
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 304) + 264))(*(void *)(a1 + 304)) & 1) == 0)
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Bootstrap unavailable", buf, 2u);
    }
    char v10 = *(std::__shared_weak_count **)(a1 + 184);
    if (v10) {
      char v11 = std::__shared_weak_count::lock(v10);
    }
    else {
      char v11 = 0;
    }
    if (*(int *)(a1 + 576) >= 1)
    {
      *(_DWORD *)(a1 + 576) = 0;
      uint64_t v21 = *(std::__shared_weak_count **)(a1 + 672);
      *(_OWORD *)(a1 + 664) = 0u;
      if (v21) {
        sub_10004D2C8(v21);
      }
    }
    (*(void (**)(void, void))(**(void **)(a1 + 304) + 280))(*(void *)(a1 + 304), 0);
    *(void *)(a1 + 1528) = 0;
    if (v11) {
      sub_10004D2C8(v11);
    }
    return 0;
  }
  if (!a2)
  {
    int v12 = *(_DWORD *)(a1 + 576);
    if (v12 >= 1)
    {
      if (!a3)
      {
        if (*(_DWORD *)(a1 + 2036)) {
          return 1;
        }
        goto LABEL_55;
      }
      *(_DWORD *)(a1 + 576) = v12 - 1;
      if (*(_DWORD *)(a1 + 2036)) {
        return 1;
      }
      if (v12 != 1) {
        goto LABEL_55;
      }
      if (*(_DWORD *)(a1 + 2024) == 1 || (*(_DWORD *)(a1 + 2024) = 1, (uint64_t v13 = *(void *)(a1 + 2016)) == 0))
      {
LABEL_30:
        if (!*(unsigned char *)(a1 + 1512)
          && (*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)))
        {
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 304) + 312))(buf);
          if (buf[23] >= 0) {
            uint64_t v14 = buf[23];
          }
          else {
            uint64_t v14 = *(void *)&buf[8];
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (v14)
          {
            uint64_t v15 = *(NSObject **)(a1 + 40);
            int v16 = (std::__shared_weak_count *)os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
            if (v16)
            {
              *(_WORD *)std::string buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Has plan, Deactivating bootstrap", buf, 2u);
            }
            if (!*(_DWORD *)(a1 + 576))
            {
              int v16 = *(std::__shared_weak_count **)(a1 + 672);
              *(_OWORD *)(a1 + 664) = 0u;
              if (v16) {
                sub_10004D2C8(v16);
              }
            }
            if (*(void *)(a1 + 5568))
            {
              int v17 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                int v18 = "#I Bootstrap delay timer is active";
                BOOL v19 = v17;
                uint32_t v20 = 2;
LABEL_60:
                _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, buf, v20);
              }
              return 1;
            }
            if (capabilities::ct::dataOnlySingleSIMDevice((capabilities::ct *)v16)
              && !*(unsigned char *)(a1 + 1520)
              && a3)
            {
              __int16 v33 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Bootstrap disabling delayed", buf, 2u);
              }
              (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v41);
              Registry::getTimerService(&v43, v41);
              uint64_t v34 = v43;
              sub_100058DB0(__p, "Bootstrap Timer");
              *(void *)std::string buf = a1;
              sub_1002598D0(&buf[8], *(void *)(a1 + 8), *(std::__shared_weak_count **)(a1 + 16));
              sub_1003073B0((uint64_t)&v45, v34, (long long *)__p, (long long *)buf);
              uint64_t v35 = v45;
              uint64_t v45 = 0;
              uint64_t v36 = *(void *)(a1 + 5568);
              *(void *)(a1 + 5568) = v35;
              if (v36)
              {
                (*(void (**)(uint64_t))(*(void *)v36 + 8))(v36);
                uint64_t v37 = v45;
                uint64_t v45 = 0;
                if (v37) {
                  (*(void (**)(uint64_t))(*(void *)v37 + 8))(v37);
                }
              }
              if (*(void *)&buf[16]) {
                std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&buf[16]);
              }
              if (v40 < 0) {
                operator delete(__p[0]);
              }
              if (v44) {
                sub_10004D2C8(v44);
              }
              if (v42) {
                sub_10004D2C8(v42);
              }
            }
            else
            {
              uint64_t v38 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
              {
                *(_WORD *)std::string buf = 0;
                _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Disabling bootstrap", buf, 2u);
              }
              (*(void (**)(void, void))(**(void **)(a1 + 304) + 280))(*(void *)(a1 + 304), 0);
            }
            *(unsigned char *)(a1 + 1520) = 0;
            *(void *)(a1 + 1528) = 0;
          }
        }
LABEL_55:
        uint64_t v27 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
        {
          if (a2) {
            uint64_t v29 = "";
          }
          else {
            uint64_t v29 = "de";
          }
          int v30 = *(_DWORD *)(a1 + 576);
          uint64_t v31 = printers::asString((printers *)&v46, v28);
          *(_DWORD *)std::string buf = 136315650;
          *(void *)&uint8_t buf[4] = v29;
          *(_WORD *)&unsigned char buf[12] = 1024;
          *(_DWORD *)&buf[14] = v30;
          *(_WORD *)&unsigned char buf[18] = 2080;
          *(void *)&buf[20] = v31;
          int v18 = "#I Attempted to %sactivate bootstrap, assert[%d] [%s]";
          BOOL v19 = v27;
          uint32_t v20 = 28;
          goto LABEL_60;
        }
        return 1;
      }
      (*(void (**)(uint64_t, uint64_t))(*(void *)v13 + 48))(v13, a1 + 2024);
      int v12 = *(_DWORD *)(a1 + 576);
    }
    if (v12) {
      goto LABEL_55;
    }
    goto LABEL_30;
  }
  if (*(unsigned char *)(a1 + 2592) != 1 || a3 == 0)
  {
    *(CFAbsoluteTime *)(a1 + 1528) = CFAbsoluteTimeGetCurrent() + 120.0;
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)) & 1) == 0)
    {
      if (*(void *)(a1 + 680))
      {
        int v22 = *(NSObject **)(a1 + 40);
        BOOL v32 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
        uint64_t result = 0;
        if (!v32) {
          return result;
        }
        *(_WORD *)std::string buf = 0;
        BOOL v26 = "#I Provisioning operation ongoing";
        goto LABEL_65;
      }
      if (!*(_DWORD *)(a1 + 2036)) {
        (*(void (**)(void, uint64_t))(**(void **)(a1 + 304) + 280))(*(void *)(a1 + 304), 1);
      }
    }
    if (a3)
    {
      if (!*(_DWORD *)(a1 + 576))
      {
        uint64_t v7 = *(void *)(a1 + 5568);
        *(void *)(a1 + 5568) = 0;
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 8))(v7);
        }
        if (!*(_DWORD *)(a1 + 2036))
        {
          sub_100306D98(a1);
          if (*(_DWORD *)(a1 + 2024) != 2)
          {
            *(_DWORD *)(a1 + 2024) = 2;
            uint64_t v8 = *(void *)(a1 + 2016);
            if (v8) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v8 + 48))(v8, a1 + 2024);
            }
          }
        }
      }
      ++*(_DWORD *)(a1 + 576);
    }
    goto LABEL_55;
  }
  int v22 = *(NSObject **)(a1 + 40);
  BOOL v23 = os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT);
  BOOL v24 = v23;
  uint64_t result = 0;
  if (v24)
  {
    *(_WORD *)std::string buf = 0;
    BOOL v26 = "#I Wifi active";
LABEL_65:
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v26, buf, 2u);
    return 0;
  }
  return result;
}

void sub_1002DAE48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17, uint64_t a18, std::__shared_weak_count *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    std::__shared_weak_count::__release_weak(a24);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a19) {
    sub_10004D2C8(a19);
  }
  if (a17) {
    sub_10004D2C8(a17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DAEB8(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  char v4 = a4;
  uint64_t v7 = (unsigned char *)(a1 + 5264);
  if (a4) {
    *(unsigned char *)(a1 + 5560) = 1;
  }
  uint64_t v55 = 0;
  uint64_t v56 = 0;
  char v57 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 352))(&v55);
  if (v57)
  {
    v7[1] = 0;
    unsigned int v8 = v55 - 89;
    BOOL v9 = v8 > 8;
    int v10 = (1 << v8) & 0x181;
    BOOL v11 = v9 || v10 == 0;
    if (!v11 && (*(unsigned int (**)(void))(**(void **)(a1 + 320) + 64))(*(void *)(a1 + 320)))
    {
      long long buf = 0uLL;
      sub_100324590(&buf);
      if (*(char *)(a1 + 615) < 0)
      {
        if (!*(void *)(a1 + 600))
        {
LABEL_25:
          *uint64_t v7 = 1;
          uint64_t v26 = *(void *)(a1 + 240);
          uint64_t v27 = v55;
          uint64_t v28 = v56;
          long long v51 = buf;
          if (*((void *)&buf + 1)) {
            atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&buf + 1) + 8), 1uLL, memory_order_relaxed);
          }
          v50[0] = _NSConcreteStackBlock;
          v50[1] = 0x40000000;
          v50[2] = sub_100307504;
          v50[3] = &unk_1019B6B10;
          v50[4] = a1;
          (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, Block_layout *, void *))(*(void *)v26 + 40))(v26, v27, v28, &v51, &stru_1019B6AC0, v50);
          if (*((void *)&v51 + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&v51 + 1));
          }
          if (*((void *)&buf + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
          }
          return;
        }
      }
      else if (!*(unsigned char *)(a1 + 615))
      {
        goto LABEL_25;
      }
      uint64_t v21 = (long long *)(a1 + 592);
      uint64_t v22 = buf;
      BOOL v23 = (uint64_t *)(buf + 96);
      unint64_t v24 = *(void *)(buf + 104);
      if (v24 >= *(void *)(buf + 112))
      {
        uint64_t v25 = sub_1000D8CE8(v23, v21);
      }
      else
      {
        sub_10030BFC4(v23, v21);
        uint64_t v25 = v24 + 24;
      }
      *(void *)(v22 + 104) = v25;
      goto LABEL_25;
    }
    uint64_t v12 = *(void *)(a1 + 336);
    sub_10030BBA0(&v30, a3);
    char v49 = v4;
    uint64_t v53 = 0;
    uint64_t v13 = (char *)operator new(0xD0uLL);
    *(void *)uint64_t v13 = off_1019BA9E0;
    *((void *)v13 + 1) = a1;
    v13[16] = 0;
    v13[192] = 0;
    if (v48)
    {
      *((_DWORD *)v13 + 4) = v30;
      *((_WORD *)v13 + 10) = v31;
      *(_OWORD *)(v13 + 24) = v32;
      *((void *)v13 + 5) = v33;
      long long v32 = 0uLL;
      v13[48] = v34;
      *(_OWORD *)(v13 + 56) = v35;
      *((void *)v13 + 9) = v36;
      uint64_t v33 = 0;
      long long v35 = 0uLL;
      long long v14 = v37;
      *((void *)v13 + 12) = v38;
      *((_OWORD *)v13 + 5) = v14;
      uint64_t v38 = 0;
      uint64_t v36 = 0;
      long long v37 = 0uLL;
      long long v15 = v39;
      *((void *)v13 + 15) = v40;
      *(_OWORD *)(v13 + 104) = v15;
      long long v39 = 0uLL;
      long long v16 = v41;
      *((void *)v13 + 18) = v42;
      *((_OWORD *)v13 + 8) = v16;
      uint64_t v42 = 0;
      uint64_t v40 = 0;
      long long v41 = 0uLL;
      *((_DWORD *)v13 + 38) = v43;
      long long v17 = v44;
      *((void *)v13 + 22) = v45;
      *((_OWORD *)v13 + 10) = v17;
      long long v44 = 0uLL;
      uint64_t v45 = 0;
      __int16 v18 = v46;
      v13[186] = v47;
      *((_WORD *)v13 + 92) = v18;
      v13[192] = 1;
    }
    v13[200] = v4;
    uint64_t v53 = v13;
    (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v12 + 72))(v12, 1, 0, v52);
    sub_10032493C(v52);
    sub_10030AEBC((uint64_t)&v30);
  }
  else
  {
    BOOL v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      uint64_t v29 = (void *)(a1 + 592);
      if (*(char *)(a1 + 615) < 0) {
        uint64_t v29 = (void *)*v29;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v29;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "No CSN for purchase slot [%s]", (uint8_t *)&buf, 0xCu);
    }
    if (*(char *)(a1 + 615) < 0)
    {
      uint32_t v20 = *(unsigned char **)(a1 + 592);
      *(void *)(a1 + 600) = 0;
    }
    else
    {
      uint32_t v20 = (unsigned char *)(a1 + 592);
      *(unsigned char *)(a1 + 615) = 0;
    }
    unsigned char *v20 = 0;
  }
}

void sub_1002DB2D4(_Unwind_Exception *exception_object)
{
  unint64_t v3 = *(std::__shared_weak_count **)(v1 - 88);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DB328(uint64_t a1)
{
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void *sub_1002DB3AC(void *a1, uint64_t a2)
{
  sub_10031DD30((uint64_t)v6, a2);
  unsigned int v8 = 0;
  unint64_t v3 = operator new(0x30uLL);
  void *v3 = off_1019B89A8;
  v3[1] = a1;
  sub_10031DD30((uint64_t)(v3 + 2), (uint64_t)v6);
  unsigned int v8 = v3;
  sub_1002DB4A0(a1, 2, 0, (uint64_t)v7);
  sub_100313668(v7);
  return sub_10023D374(v6);
}

void sub_1002DB47C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100313668((uint64_t *)va);
  sub_10023D374(v6);
  _Unwind_Resume(a1);
}

void *sub_1002DB4A0(void *a1, char a2, char a3, uint64_t a4)
{
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1174405120;
  v15[2] = sub_1002E9CFC;
  v15[3] = &unk_1019B6680;
  v15[4] = a1;
  sub_10031ECD8((uint64_t)v16, a4);
  char v17 = a2;
  char v18 = a3;
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (!v7 || (v8 = a1[1], (BOOL v9 = std::__shared_weak_count::lock(v7)) == 0)) {
    sub_100088B9C();
  }
  int v10 = v9;
  BOOL v11 = a1[3];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  v13[2] = sub_10031EAD8;
  v13[3] = &unk_1019B8B90;
  v13[5] = v8;
  long long v14 = v10;
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  v13[4] = v15;
  dispatch_async(v11, v13);
  if (v14) {
    sub_10004D2C8(v14);
  }
  sub_10004D2C8(v10);
  return sub_100313668(v16);
}

void sub_1002DB610(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002DB61C(uint64_t a1)
{
  long long v43 = 0u;
  long long v44 = 0u;
  memset(v45, 0, sizeof(v45));
  long long v46 = 0u;
  long long v47 = 0u;
  BOOL v2 = *(_DWORD *)(a1 + 2632) == 1;
  LODWORD(v43) = *(_DWORD *)(a1 + 580);
  BYTE4(v43) = 14;
  long long v44 = 0uLL;
  *((void *)&v43 + 1) = 0;
  LOBYTE(v45[0]) = 4;
  memset(&v45[1], 0, 100);
  long long v46 = 0uLL;
  BYTE8(v47) = 0;
  *(void *)&long long v47 = 0;
  BYTE9(v47) = v2;
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v41);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v41);
  char v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v48 = v5;
  BOOL v9 = sub_10004D37C(&v4[1].__m_.__sig, &v48);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_9:
  if (v42) {
    sub_10004D2C8(v42);
  }
  if (!v11 || (unsigned __int16 v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 40))(v11), v13 < 0x100u))
  {
    BOOL v14 = 1;
    if (v12) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  BOOL v14 = v13 != 0;
  if ((v12 & 1) == 0) {
LABEL_14:
  }
    sub_10004D2C8(v10);
LABEL_15:
  uint64_t v15 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 576))(*(void *)(a1 + 304));
  sub_100311AFC((uint64_t)&v23, (int *)&v43);
  uint64_t v50 = 0;
  long long v16 = (char *)operator new(0xC0uLL);
  *(void *)long long v16 = off_1019BABE0;
  *((void *)v16 + 1) = a1;
  *((_DWORD *)v16 + 4) = v23;
  *((_WORD *)v16 + 10) = v24;
  *(_OWORD *)(v16 + 24) = *(_OWORD *)v25;
  *((void *)v16 + 5) = v26;
  v25[0] = 0;
  v25[1] = 0;
  v16[48] = v27;
  long long v17 = *(_OWORD *)v28;
  *((void *)v16 + 9) = v29;
  *(_OWORD *)(v16 + 56) = v17;
  uint64_t v26 = 0;
  v28[0] = 0;
  v28[1] = 0;
  long long v18 = *(_OWORD *)v30;
  *((void *)v16 + 12) = v31;
  *((_OWORD *)v16 + 5) = v18;
  v30[1] = 0;
  uint64_t v31 = 0;
  uint64_t v29 = 0;
  v30[0] = 0;
  long long v19 = *(_OWORD *)v32;
  *((void *)v16 + 15) = v33;
  *(_OWORD *)(v16 + 104) = v19;
  v32[0] = 0;
  v32[1] = 0;
  long long v20 = *(_OWORD *)v34;
  *((void *)v16 + 18) = v35;
  *((_OWORD *)v16 + 8) = v20;
  v34[1] = 0;
  uint64_t v35 = 0;
  uint64_t v33 = 0;
  v34[0] = 0;
  *((_DWORD *)v16 + 38) = v36;
  long long v21 = __p;
  *((void *)v16 + 22) = v38;
  *((_OWORD *)v16 + 10) = v21;
  long long __p = 0uLL;
  uint64_t v38 = 0;
  __int16 v22 = v39;
  v16[186] = v40;
  *((_WORD *)v16 + 92) = v22;
  uint64_t v50 = v16;
  (*(void (**)(uint64_t, BOOL, uint64_t, void *))(*(void *)a1 + 448))(a1, v14, v15, v49);
  sub_100060644(v49);
  if (SHIBYTE(v38) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(v32[0]);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SBYTE7(v47) < 0) {
    operator delete((void *)v46);
  }
  if (SHIBYTE(v45[12]) < 0) {
    operator delete(v45[10]);
  }
  if (SHIBYTE(v45[9]) < 0) {
    operator delete(v45[7]);
  }
  if (SHIBYTE(v45[6]) < 0) {
    operator delete(v45[4]);
  }
  if (SHIBYTE(v45[3]) < 0) {
    operator delete(v45[1]);
  }
  if (SHIBYTE(v44) < 0) {
    operator delete(*((void **)&v43 + 1));
  }
}

void sub_1002DBA88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if ((v36 & 1) == 0) {
    sub_10004D2C8(v35);
  }
  sub_1002DB328((uint64_t)&a35);
  _Unwind_Resume(a1);
}

void sub_1002DBAF4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 1705))
  {
    BOOL v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#E User is in purchase flow - cant launch", buf, 2u);
    }
    return;
  }
  (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  char v4 = ServiceMap;
  unint64_t v5 = "24MobileStoreDemoInterface";
  if (((unint64_t)"24MobileStoreDemoInterface" & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)((unint64_t)"24MobileStoreDemoInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = (const char *)v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v5;
  BOOL v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&v64);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_12:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v11 && ((*(uint64_t (**)(uint64_t))(*(void *)v11 + 16))(v11) & 1) != 0)
  {
    int v13 = 0;
    if (v12) {
      goto LABEL_20;
    }
    goto LABEL_19;
  }
  int v13 = 1;
  if ((v12 & 1) == 0) {
LABEL_19:
  }
    sub_10004D2C8(v10);
LABEL_20:
  if (v13 && sub_1002FE04C(a1))
  {
    *(_OWORD *)long long buf = 0u;
    long long v60 = 0u;
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 232))(buf);
    BOOL v14 = (unsigned char *)(a1 + 5266);
    uint64_t v15 = v60;
    if ((void)v60)
    {
      long long v16 = &v60;
      do
      {
        long long v17 = (uint64_t *)v15;
        long long v18 = v16;
        int v19 = *(_DWORD *)(v15 + 32);
        long long v20 = (uint64_t *)(v15 + 8);
        if (v19 >= 2)
        {
          long long v20 = v17;
          long long v16 = (long long *)v17;
        }
        uint64_t v15 = *v20;
      }
      while (v15);
      if (v16 != &v60)
      {
        if (v19 < 2) {
          long long v17 = (uint64_t *)v18;
        }
        if (*((int *)v17 + 8) <= 2)
        {
          *(_DWORD *)uint64_t v61 = 2;
          v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
          long long v21 = sub_10008CC40((uint64_t **)&buf[8], (int *)v61, (uint64_t)&unk_10144E20E, &v64);
          uint64_t v22 = *((unsigned __int8 *)v21 + 63);
          if ((v22 & 0x80u) == 0) {
            int v23 = (uint64_t *)*((unsigned __int8 *)v21 + 63);
          }
          else {
            int v23 = v21[6];
          }
          __int16 v24 = (uint64_t *)*(unsigned __int8 *)(a1 + 5415);
          int v25 = (char)v24;
          if ((char)v24 < 0) {
            __int16 v24 = *(uint64_t **)(a1 + 5400);
          }
          if (v23 == v24)
          {
            uint64_t v26 = (const void **)(v21 + 5);
            if (v25 >= 0) {
              char v27 = (unsigned __int8 *)(a1 + 5392);
            }
            else {
              char v27 = *(unsigned __int8 **)(a1 + 5392);
            }
            if ((v22 & 0x80) != 0)
            {
              if (!memcmp(*v26, v27, (size_t)v21[6])) {
                goto LABEL_104;
              }
            }
            else
            {
              if (!*((unsigned char *)v21 + 63)) {
                goto LABEL_104;
              }
              while (*(unsigned __int8 *)v26 == *v27)
              {
                uint64_t v26 = (const void **)((char *)v26 + 1);
                ++v27;
                if (!--v22) {
                  goto LABEL_104;
                }
              }
            }
          }
        }
      }
    }
    uint64_t v28 = v60;
    if (*v14) {
      BOOL v29 = (void)v60 == 0;
    }
    else {
      BOOL v29 = 1;
    }
    if (!v29)
    {
      int v30 = &v60;
      do
      {
        uint64_t v31 = (uint64_t *)v28;
        long long v32 = v30;
        int v33 = *(_DWORD *)(v28 + 32);
        char v34 = (uint64_t *)(v28 + 8);
        if (v33 >= 2)
        {
          char v34 = v31;
          int v30 = (long long *)v31;
        }
        uint64_t v28 = *v34;
      }
      while (v28);
      if (v30 != &v60)
      {
        if (v33 < 2) {
          uint64_t v31 = (uint64_t *)v32;
        }
        if (*((int *)v31 + 8) <= 2)
        {
          unsigned char *v14 = 0;
          uint64_t v35 = (void *)(a1 + 5392);
          if (*(char *)(a1 + 5415) < 0) {
            uint64_t v36 = *(void *)(a1 + 5400);
          }
          else {
            uint64_t v36 = *(unsigned __int8 *)(a1 + 5415);
          }
          if (v36)
          {
            *(_DWORD *)uint64_t v61 = 2;
            v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
            long long v41 = sub_10008CC40((uint64_t **)&buf[8], (int *)v61, (uint64_t)&unk_10144E20E, &v64);
            if (!sub_10001D294((unsigned __int8 *)v41 + 40, (unsigned __int8 *)(a1 + 5392))) {
              sub_1002DA408(a1);
            }
          }
          *(_DWORD *)uint64_t v61 = 2;
          v64.__r_.__value_.__r.__words[0] = (std::string::size_type)v61;
          uint64_t v42 = sub_10008CC40((uint64_t **)&buf[8], (int *)v61, (uint64_t)&unk_10144E20E, &v64);
          std::string::operator=((std::string *)(a1 + 5392), (const std::string *)(v42 + 5));
          (***(void (****)(std::string *__return_ptr))(a1 + 320))(&v64);
          long long v43 = (std::mutex *)Registry::getServiceMap((Registry *)v64.__r_.__value_.__l.__data_);
          long long v44 = v43;
          if (v45 < 0)
          {
            long long v46 = (unsigned __int8 *)(v45 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v47 = 5381;
            do
            {
              uint64_t v45 = v47;
              unsigned int v48 = *v46++;
              uint64_t v47 = (33 * v47) ^ v48;
            }
            while (v48);
          }
          std::mutex::lock(v43);
          *(void *)uint64_t v61 = v45;
          char v49 = sub_10004D37C(&v44[1].__m_.__sig, (unint64_t *)v61);
          if (v49)
          {
            uint64_t v51 = v49[3];
            uint64_t v50 = (std::__shared_weak_count *)v49[4];
            if (v50)
            {
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v44);
              atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v50);
              char v52 = 0;
LABEL_87:
              if (v64.__r_.__value_.__l.__size_) {
                sub_10004D2C8((std::__shared_weak_count *)v64.__r_.__value_.__l.__size_);
              }
              if (v51)
              {
                *(void *)uint64_t v61 = 0;
                CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
                if (Mutable)
                {
                  std::string::size_type v54 = *(void *)v61;
                  *(void *)uint64_t v61 = Mutable;
                  v64.__r_.__value_.__r.__words[0] = v54;
                  sub_10005717C((const void **)&v64.__r_.__value_.__l.__data_);
                }
                if (buf[0] == 8 || buf[0] == 1)
                {
                  uint64_t v55 = *(NSObject **)(a1 + 40);
                  if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
                  {
                    if (*(char *)(a1 + 5415) < 0) {
                      uint64_t v35 = (void *)*v35;
                    }
                    LODWORD(v64.__r_.__value_.__l.__data_) = 136315138;
                    *(std::string::size_type *)((char *)v64.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
                    _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I Create followup for not user intiated plan iccid[%s]", (uint8_t *)&v64, 0xCu);
                  }
                  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v51 + 16))(v51, 6, *(void *)v61, 0);
                }
                (*(void (**)(void))(**(void **)(a1 + 304) + 224))(*(void *)(a1 + 304));
                sub_10005717C((const void **)v61);
              }
              else
              {
                uint64_t v56 = *(NSObject **)(a1 + 40);
                if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
                {
                  LOWORD(v64.__r_.__value_.__l.__data_) = 0;
                  _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#E No followupController", (uint8_t *)&v64, 2u);
                }
              }
              if ((v52 & 1) == 0) {
                sub_10004D2C8(v50);
              }
              goto LABEL_104;
            }
          }
          else
          {
            uint64_t v51 = 0;
          }
          std::mutex::unlock(v44);
          uint64_t v50 = 0;
          char v52 = 1;
          goto LABEL_87;
        }
      }
    }
    int v37 = sub_1002E695C(a1);
    if (buf[0]) {
      int v38 = v37;
    }
    else {
      int v38 = 0;
    }
    if (v38 == 1)
    {
      sub_1002DA408(a1);
      memset(&v64, 0, sizeof(v64));
      uint64_t v39 = buf[0];
      if (buf[0] == 8)
      {
        std::string::operator=(&v64, (const std::string *)(*(void *)&buf[8] + 40));
        uint64_t v39 = buf[0];
        v62[0] = 0;
        char v63 = 0;
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(&__p, v64.__r_.__value_.__l.__data_, v64.__r_.__value_.__l.__size_);
LABEL_69:
          memset(v57, 0, sizeof(v57));
          sub_1002E2134(a1, (uint64_t)v62, v39, 1, (uint64_t)&__p, (uint64_t)v57);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          char v40 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)uint64_t v61 = 0;
            _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I Pre-warming the purchaseFlow BOOL for flaky assigned label map", v61, 2u);
          }
          *(unsigned char *)(a1 + 1705) = 1;
          if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v64.__r_.__value_.__l.__data_);
          }
          goto LABEL_104;
        }
      }
      else
      {
        v62[0] = 0;
        char v63 = 0;
      }
      std::string __p = v64;
      goto LABEL_69;
    }
LABEL_104:
    sub_1000886C0((uint64_t)&buf[8], (char *)v60);
  }
}

void sub_1002DC25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char *a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26)
{
  if (*(char *)(v27 - 105) < 0) {
    operator delete(*(void **)(v27 - 128));
  }
  sub_1000886C0(v26, a22);
  _Unwind_Resume(a1);
}

void sub_1002DC324(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
  {
    if (*(unsigned char *)(a1 + 1560))
    {
      if (sub_1002E695C(a1))
      {
        BOOL v2 = *(std::__shared_weak_count **)(a1 + 184);
        if (v2)
        {
          unint64_t v3 = std::__shared_weak_count::lock(v2);
          if (v3)
          {
            char v4 = v3;
            uint64_t v5 = *(void *)(a1 + 176);
            if (v5)
            {
              (*(void (**)(uint64_t, void, void))(*(void *)v5 + 16))(v5, *(unsigned __int8 *)(a1 + 1561), *(unsigned __int8 *)(a1 + 1562));
              *(_WORD *)(a1 + 1560) = 0;
              *(unsigned char *)(a1 + 1562) = 0;
            }
            sub_10004D2C8(v4);
          }
        }
      }
    }
  }
}

void sub_1002DC3F4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1002DC408(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2625) && !*(unsigned char *)(a1 + 2626))
  {
    if (sub_1002FE04C(a1))
    {
      if (*(unsigned char *)(a1 + 1568))
      {
        int v2 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 104))(*(void *)(a1 + 304));
        unint64_t v3 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
        {
          char v4 = "False";
          if (v2) {
            char v4 = "True";
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Pop up install failed error , offloadProvisioningOnGoing = %s", buf, 0xCu);
        }
        uint64_t v5 = *(std::__shared_weak_count **)(a1 + 184);
        if (v5)
        {
          uint64_t v6 = std::__shared_weak_count::lock(v5);
          if (v6)
          {
            uint64_t v7 = *(void *)(a1 + 176);
            char v8 = v7 ? v2 : 1;
            if ((v8 & 1) == 0)
            {
              if (!*(unsigned char *)(a1 + 1568)) {
                __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
              }
              uint64_t v9 = *(unsigned __int8 *)(a1 + 1576);
              if (*(char *)(a1 + 1607) < 0)
              {
                sub_10004FC84(v11, *(void **)(a1 + 1584), *(void *)(a1 + 1592));
              }
              else
              {
                *(_OWORD *)uint64_t v11 = *(_OWORD *)(a1 + 1584);
                uint64_t v12 = *(void *)(a1 + 1600);
              }
              if (SHIBYTE(v12) < 0)
              {
                sub_10004FC84(__p, v11[0], (unint64_t)v11[1]);
              }
              else
              {
                *(_OWORD *)std::string __p = *(_OWORD *)v11;
                uint64_t v16 = v12;
              }
              BOOL v14 = 0;
              if (SHIBYTE(v16) < 0)
              {
                sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
              }
              else
              {
                *(_OWORD *)long long buf = *(_OWORD *)__p;
                uint64_t v20 = v16;
              }
              long long v17 = 0;
              if (ctu::cf::convert_copy())
              {
                int v10 = v14;
                BOOL v14 = v17;
                long long v18 = v10;
                sub_1000558F4(&v18);
              }
              if (SHIBYTE(v20) < 0) {
                operator delete(*(void **)buf);
              }
              int v13 = v14;
              BOOL v14 = 0;
              sub_1000558F4(&v14);
              if (SHIBYTE(v16) < 0) {
                operator delete(__p[0]);
              }
              (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v7 + 24))(v7, v9, &v13);
              sub_1000558F4(&v13);
              if (SHIBYTE(v12) < 0) {
                operator delete(v11[0]);
              }
            }
          }
        }
        else
        {
          uint64_t v6 = 0;
        }
        if (*(unsigned char *)(a1 + 1568))
        {
          if (*(char *)(a1 + 1607) < 0) {
            operator delete(*(void **)(a1 + 1584));
          }
          *(unsigned char *)(a1 + 1568) = 0;
        }
        if (v6) {
          sub_10004D2C8(v6);
        }
      }
    }
    else if (*(unsigned char *)(a1 + 1705) && *(unsigned char *)(a1 + 1568))
    {
      if (*(char *)(a1 + 1607) < 0) {
        operator delete(*(void **)(a1 + 1584));
      }
      *(unsigned char *)(a1 + 1568) = 0;
    }
  }
}

void sub_1002DC700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  sub_1000558F4(&a18);
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10004D2C8(v24);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DC774(uint64_t result)
{
  if (*(unsigned char *)(result + 1776))
  {
    uint64_t v1 = result;
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(result + 304) + 104))(*(void *)(result + 304));
    if ((result & 1) == 0)
    {
      uint64_t v2 = *(unsigned __int8 *)(v1 + 1720);
      sub_1002FAFFC(v1, v2, v1 + 1728, v1 + 1752);
    }
  }
  return result;
}

void sub_1002DC7F4(uint64_t *a1, int a2, char a3, uint64_t a4)
{
  if ((a3 & 1) == 0)
  {
    uint64_t v5 = a4;
    char v6 = 0;
    goto LABEL_5;
  }
  if (a2)
  {
    uint64_t v5 = a4;
    char v6 = 1;
LABEL_5:
    sub_1000607A8(v5, v6);
    return;
  }
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  sub_1002DCA80(&v11, a1[52]);
  for (uint64_t i = v11; i != v12; i += 1248)
  {
    if (*(unsigned char *)(i + 16))
    {
      sub_1000607A8(a4, 1);
      goto LABEL_17;
    }
  }
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1[52] + 336))(a1[52], 1);
  if (v9 == 2 || (*(unsigned int (**)(uint64_t, void))(*(void *)a1[52] + 336))(a1[52], 0) == 2)
  {
    sub_1000607A8(a4, v9 != 2);
  }
  else
  {
    sub_100023950((uint64_t)v15, a4);
    long long v17 = 0;
    int v10 = operator new(0x28uLL);
    void *v10 = off_1019B8A58;
    sub_100023950((uint64_t)(v10 + 1), (uint64_t)v15);
    long long v17 = v10;
    (*(void (**)(uint64_t *, void *))(*a1 + 440))(a1, v16);
    sub_10023D374(v16);
    sub_100060644(v15);
  }
LABEL_17:
  BOOL v14 = (void **)&v11;
  sub_10030AFC8(&v14);
}

void sub_1002DCA38(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v7 = va_arg(va2, void **);
  va_copy(va3, va2);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  uint64_t v12 = va_arg(va3, void);
  uint64_t v13 = va_arg(va3, void);
  sub_10023D374((uint64_t *)va3);
  sub_100060644((uint64_t *)va2);
  va_copy((va_list)v7, va);
  sub_10030AFC8((void ***)va1);
  _Unwind_Resume(a1);
}

void *sub_1002DCA80(void *result, uint64_t a2)
{
  uint64_t v2 = result;
  if (a2)
  {
    uint64_t v3 = (uint64_t *)(*(uint64_t (**)(uint64_t))(*(void *)a2 + 64))(a2);
    v2[1] = 0;
    v2[2] = 0;
    void *v2 = 0;
    uint64_t v4 = *v3;
    uint64_t v5 = v3[1];
    unint64_t v6 = 0x6F96F96F96F96F97 * ((v5 - *v3) >> 5);
    return sub_10030B7CC(v2, v4, v5, v6);
  }
  else
  {
    void *result = 0;
    result[1] = 0;
    result[2] = 0;
  }
  return result;
}

void sub_1002DCB1C(uint64_t a1)
{
  ProvisioningProfileSupport = (capabilities::ct *)capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)a1);
  if (ProvisioningProfileSupport == 1
    || (capabilities::ct::supportsVoiceCall(ProvisioningProfileSupport) & 1) == 0)
  {
    if (*(_DWORD *)(a1 + 2896)) {
      uint64_t v3 = 1;
    }
    else {
      uint64_t v3 = *(_DWORD *)(a1 + 2632) == 1
    }
         ? (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 528))(*(void *)(a1 + 304))
         : 0;
    if (*(unsigned __int8 *)(a1 + 2248) != v3)
    {
      *(unsigned char *)(a1 + 2248) = v3;
      uint64_t v4 = *(void *)(a1 + 2240);
      if (v4) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a1 + 2248);
      }
      uint64_t v5 = *(void *)(a1 + 160);
      sub_1002DD574(v5, v3);
    }
  }
}

void sub_1002DCC0C(uint64_t a1, int a2)
{
  if (!capabilities::ct::supportsCellularPlanInfoInCloud((capabilities::ct *)a1)) {
    return;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304))
    && *(unsigned char *)(a1 + 2592) != 1)
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    int v10 = "#I skip manatee fetch over bootstrap";
    goto LABEL_23;
  }
  if (!*(unsigned char *)(a1 + 1784))
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    int v10 = "#I skip manatee fetch - cloud not signed in";
LABEL_23:
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
    return;
  }
  if (*(void *)(a1 + 480))
  {
    double v4 = (*(double (**)(void))(**(void **)(a1 + 288) + 304))(*(void *)(a1 + 288));
    if ((a2 & 1) != 0 || CFAbsoluteTimeGetCurrent() > v4)
    {
      uint64_t v5 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        if (a2) {
          unint64_t v6 = "true";
        }
        else {
          unint64_t v6 = "false";
        }
        if (CFAbsoluteTimeGetCurrent() <= v4) {
          uint64_t v7 = "false";
        }
        else {
          uint64_t v7 = "true";
        }
        *(_DWORD *)long long buf = 136315394;
        BOOL v14 = v6;
        __int16 v15 = 2080;
        uint64_t v16 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I resync cloud record. forceFetch: %s, expiry: %s", buf, 0x16u);
      }
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)))
      {
        int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 328))(*(void *)(a1 + 304), 3);
        *(_DWORD *)long long buf = 0;
        if (v8)
        {
          *(_WORD *)&buf[2] = 257;
          buf[0] = 1;
        }
      }
      else
      {
        *(_DWORD *)long long buf = 0;
      }
      buf[1] = 1;
      v12[0] = off_1019BA550;
      v12[1] = a1;
      void v12[3] = v12;
      sub_1002FD2D0(a1, (int *)buf, (uint64_t)v12);
      sub_10034398C(v12);
    }
  }
  else
  {
    uint64_t v11 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Invalid cloud sender", buf, 2u);
    }
  }
}

void sub_1002DCF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002DCF1C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    double v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = *(void *)(v3 + 1608);
        *(void *)(v3 + 1608) = 0;
        if (v6) {
          (*(void (**)(uint64_t))(*(void *)v6 + 8))(v6);
        }
        uint64_t v7 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v8 = (void *)(v3 + 2600);
          if (*(char *)(v3 + 2623) < 0) {
            int v8 = (void *)*v8;
          }
          int v9 = 136315138;
          int v10 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I 6min expiry - User selected plan [%s] caused activation rejection. Deactivate it.", (uint8_t *)&v9, 0xCu);
        }
        (*(void (**)(void, void, uint64_t, void))(**(void **)(v3 + 304) + 128))(*(void *)(v3 + 304), 0, v3 + 2600, 0);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1002DD05C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DD070(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_1002DD08C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

uint64_t sub_1002DD09C(capabilities::ct *a1)
{
  if (capabilities::ct::getProvisioningProfileSupport(a1) != 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 38) + 296);

  return v2();
}

uint64_t sub_1002DD114(capabilities::ct *a1)
{
  if (capabilities::ct::getProvisioningProfileSupport(a1) != 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 38) + 296);

  return v2();
}

uint64_t sub_1002DD18C(capabilities::ct *a1)
{
  if (capabilities::ct::getProvisioningProfileSupport(a1) != 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 32) + 296);

  return v2();
}

uint64_t sub_1002DD204(capabilities::ct *a1)
{
  if (capabilities::ct::getProvisioningProfileSupport(a1) != 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 19) + 296);

  return v2();
}

uint64_t sub_1002DD27C(uint64_t a1)
{
  return sub_1002DA714(a1, 1, 1);
}

uint64_t sub_1002DD288(uint64_t a1)
{
  return sub_1002DA714(a1 - 48, 1, 1);
}

uint64_t sub_1002DD298(uint64_t a1)
{
  return sub_1002DA714(a1 - 152, 1, 1);
}

uint64_t sub_1002DD2A8(uint64_t a1)
{
  return sub_1002DA714(a1, 0, 1);
}

uint64_t sub_1002DD2B4(uint64_t a1)
{
  return sub_1002DA714(a1 - 48, 0, 1);
}

uint64_t sub_1002DD2C4(uint64_t a1)
{
  return sub_1002DA714(a1 - 152, 0, 1);
}

BOOL sub_1002DD2D4(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10031E444;
  void v5[3] = &unk_1019B8AC8;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_10005ABF4;
    int v10 = &unk_1019B8B08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    int v9 = sub_100059E90;
    int v10 = &unk_1019B8AE8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL sub_1002DD404(uint64_t a1)
{
  return sub_1002DD2D4(a1 - 48);
}

void sub_1002DD40C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)a1 = a1 + 8;
  uint64_t v2 = a2 + 1;
  uint64_t v3 = (void *)*a2;
  if ((void *)*a2 == a2 + 1) {
    return;
  }
  do
  {
    char v13 = 0;
    BOOL v14 = 0;
    uint64_t v15 = 0;
    sub_1001A0DB0((uint64_t *)&v13, (uint64_t)(v3 + 7));
    uint64_t v5 = v14;
    if (!v14) {
      goto LABEL_10;
    }
    uint64_t v6 = v14;
    while (1)
    {
      int v7 = *((_DWORD *)v6 + 7);
      if (v7 <= 13) {
        break;
      }
LABEL_7:
      uint64_t v6 = (void *)*v6;
      if (!v6) {
        goto LABEL_10;
      }
    }
    if (v7 != 13)
    {
      ++v6;
      goto LABEL_7;
    }
    int v12 = 13;
    uint64_t v16 = (long long *)&v12;
    int v8 = *((_DWORD *)sub_10030B04C(&v13, &v12, (uint64_t)&unk_10144E20E, (unsigned int **)&v16) + 8);
    uint64_t v16 = (long long *)(v3 + 4);
    *((_DWORD *)sub_10030B10C((uint64_t **)a1, (void **)v3 + 4, (uint64_t)&unk_10144E20E, &v16) + 14) = v8;
    uint64_t v5 = v14;
LABEL_10:
    sub_1000346F8((uint64_t)&v13, v5);
    int v9 = (void *)v3[1];
    if (v9)
    {
      do
      {
        int v10 = v9;
        int v9 = (void *)*v9;
      }
      while (v9);
    }
    else
    {
      do
      {
        int v10 = (void *)v3[2];
        BOOL v11 = *v10 == (void)v3;
        uint64_t v3 = v10;
      }
      while (!v11);
    }
    uint64_t v3 = v10;
  }
  while (v10 != v2);
}

void sub_1002DD548(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  sub_1000346F8((uint64_t)&a10, a11);
  sub_10005CD2C(v11, *(char **)(v11 + 8));
  _Unwind_Resume(a1);
}

void sub_1002DD574(uint64_t a1, uint64_t a2)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 64))(&v3);
  if (v3) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 144))(v3, a2);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
}

void sub_1002DD600(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DD618(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  v5[0] = a1;
  v5[1] = a2;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  v6[2] = sub_10031E60C;
  v6[3] = &unk_1019B8B28;
  void v6[4] = a1 + 8;
  void v6[5] = v5;
  int v7 = v6;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    int v10 = sub_10031E92C;
    uint64_t v11 = &unk_1019B8B68;
    int v12 = a3;
    char v13 = &v7;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    *a3 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    int v10 = sub_10031E8B4;
    uint64_t v11 = &unk_1019B8B48;
    int v12 = a3;
    char v13 = &v7;
    dispatch_sync(v3, &block);
  }
}

void sub_1002DD738(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

void sub_1002DD740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000DFC90((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DD878(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002DD890(uint64_t a1, uint64_t a2)
{
}

void sub_1002DD898(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1002DD9B0;
  v8[3] = &unk_1019B6480;
  v8[4] = a2;
  v8[5] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  int v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v4;
  int v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1002DD9B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (*(uint64_t (**)(void, uint64_t))(**(void **)(*(void *)(a1 + 40) + 304) + 328))(*(void *)(*(void *)(a1 + 40) + 304), 3);
  uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t))(v1 + 16);

  return v3(v1, v2);
}

void sub_1002DDA24(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1002DDA2C(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_10031EB14;
  void v5[3] = &unk_1019B8BC0;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_10005ABF4;
    int v10 = &unk_1019B8B08;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100059E90;
    int v10 = &unk_1019B8AE8;
    uint64_t v11 = &v13;
    int v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL sub_1002DDB5C(uint64_t a1)
{
  return sub_1002DDA2C(a1 - 48);
}

uint64_t sub_1002DDB64(capabilities::ct *a1)
{
  if (capabilities::ct::getProvisioningProfileSupport(a1) != 1) {
    return 0;
  }
  uint64_t v2 = *(uint64_t (**)(void))(**((void **)a1 + 32) + 296);

  return v2();
}

uint64_t sub_1002DDBDC(uint64_t a1)
{
  unsigned int v2 = sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(a1 + 320));
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v15);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v15);
  uint64_t v4 = ServiceMap;
  uint64_t v5 = "24MobileStoreDemoInterface";
  if (((unint64_t)"24MobileStoreDemoInterface" & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)((unint64_t)"24MobileStoreDemoInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = (const char *)v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  long long v17 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&v17);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_9:
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v11) {
    uint64_t v13 = 0;
  }
  else {
    uint64_t v13 = v2;
  }
  if (v11 && ((v2 ^ 1) & 1) == 0) {
    uint64_t v13 = (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11) ^ 1;
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  return v13;
}

void sub_1002DDD40(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DDD6C(void (***a1)(Registry **__return_ptr))
{
  (**a1)(&v14);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v14);
  unsigned int v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v16);
  if (v7)
  {
    uint64_t v9 = v7[3];
    unsigned int v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  unsigned int v8 = 0;
  char v10 = 1;
LABEL_9:
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9) & 1) == 0)
  {
    int v11 = 1;
    int v12 = 1;
    if (v10) {
      return v12 ^ 1u;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = 0;
  if ((v10 & 1) == 0)
  {
LABEL_14:
    sub_10004D2C8(v8);
    int v12 = v11;
  }
  return v12 ^ 1u;
}

void sub_1002DDEC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v13 = v12;
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DDEF8(uint64_t a1)
{
  return sub_1002DDBDC(a1 - 64);
}

uint64_t sub_1002DDF00(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 128))
  {
    sub_10030B264((uint64_t)v21, a2);
    uint64_t v3 = *(void *)(a1 + 320);
    if (v23)
    {
      if (SHIBYTE(v22) < 0)
      {
        sub_10004FC84(buf, v21[0], (unint64_t)v21[1]);
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)v21;
        uint64_t v33 = v22;
      }
    }
    else
    {
      sub_100058DB0(buf, "");
    }
    int v4 = (*(uint64_t (**)(uint64_t, void **, void **, void **, void **, uint8_t *))(*(void *)v3 + 360))(v3, &v24, &v26, &v28, &__p, buf);
    if (SHIBYTE(v33) < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      unsigned int v6 = "no";
      if (v4) {
        unsigned int v6 = "yes";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I requiresChinaCertOnEuiccCheck: %s", buf, 0xCu);
    }
    if (v4) {
      char v7 = (*(uint64_t (**)(void))(**(void **)(a1 + 496) + 72))(*(void *)(a1 + 496));
    }
    else {
      char v7 = 1;
    }
    if (v31 < 0) {
      operator delete(__p);
    }
    if (v29 < 0) {
      operator delete(v28);
    }
    if (v27 < 0) {
      operator delete(v26);
    }
    if (v25 < 0) {
      operator delete(v24);
    }
    if (v23 && SHIBYTE(v22) < 0) {
      operator delete(v21[0]);
    }
    if ((v7 & 1) == 0)
    {
      char v13 = *(NSObject **)(a1 + 40);
      uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_WORD *)long long buf = 0;
      BOOL v14 = "Euicc cert supports but not Green Tea device";
      goto LABEL_40;
    }
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 64))(*(void *)(a1 + 320)) & 1) == 0)
  {
    unsigned int v8 = *(NSObject **)(a1 + 40);
    BOOL v12 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "#E No local cellular plan signup support, mark as not supported";
    goto LABEL_45;
  }
  if ((sub_1002DDBDC(a1) & 1) == 0)
  {
    unsigned int v8 = *(NSObject **)(a1 + 40);
    BOOL v15 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v15) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "#E eSIM modification not allowed, mark as not supported";
    goto LABEL_45;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 328))(*(void *)(a1 + 304), 3) & 1) == 0)
  {
    unsigned int v8 = *(NSObject **)(a1 + 40);
    BOOL v16 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v16) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "#E vinyl not available, mark as not supported";
    goto LABEL_45;
  }
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320))
    && (*(unsigned int (**)(void))(**(void **)(a1 + 496) + 72))(*(void *)(a1 + 496))
    && *(_DWORD *)(a1 + 2632) == 1)
  {
    unsigned int v8 = *(NSObject **)(a1 + 40);
    BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v9) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    int v11 = "#E esim provisioning not supported in buddy";
LABEL_45:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v11, buf, 2u);
    return 0;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 320) + 120))(*(void *)(a1 + 320), 2) & 1) == 0)
  {
    char v13 = *(NSObject **)(a1 + 40);
    uint64_t result = os_log_type_enabled(v13, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    BOOL v14 = "Activation forbids cellular UI for vinyl";
LABEL_40:
    _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, buf, 2u);
    return 0;
  }
  if (*(unsigned char *)(a1 + 4601)) {
    int v17 = 32 * (*(unsigned char *)(a1 + 4600) == 0);
  }
  else {
    int v17 = 32;
  }
  int v18 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320));
  uint64_t v19 = a1 + 320;
  if (v18) {
    unsigned int v20 = v17;
  }
  else {
    unsigned int v20 = 0;
  }
  if ((*(unsigned int (**)(void))(**(void **)v19 + 48))()) {
    return v20 | 2;
  }
  else {
    return v20;
  }
}

void sub_1002DE3EC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(v9 - 41) < 0) {
    operator delete(*(void **)(v9 - 64));
  }
  sub_1002DE420((uint64_t)&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DE420(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_1002DE49C(uint64_t a1, uint64_t a2)
{
  return sub_1002DDF00(a1 - 144, a2);
}

uint64_t sub_1002DE4A4(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  v23[0] = a4;
  v23[1] = a5;
  uint64_t v8 = *a3;
  if (!*(unsigned char *)(*a3 + 120)) {
    goto LABEL_5;
  }
  if ((*(char *)(v8 + 95) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v8 + 95)) {
      goto LABEL_5;
    }
    goto LABEL_4;
  }
  if (!*(void *)(v8 + 80)) {
LABEL_4:
  }
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 19);
LABEL_5:
  if (*(unsigned char *)(a2 + 90)
    || *(unsigned char *)(a2 + 91)
    || (uint64_t v9 = *a3, *(unsigned char *)(*a3 + 122))
    || *(unsigned char *)(v9 + 120)
    && (*(char *)(v9 + 95) < 0 ? (uint64_t v20 = *(void *)(v9 + 80)) : (uint64_t v20 = *(unsigned __int8 *)(v9 + 95)), !v20))
  {
    if (!*(unsigned char *)(a1 + 1705))
    {
      BOOL v14 = *(std::__shared_weak_count **)(a1 + 184);
      if (v14)
      {
        BOOL v15 = std::__shared_weak_count::lock(v14);
        if (v15)
        {
          BOOL v16 = v15;
          uint64_t v17 = *(void *)(a1 + 176);
          if (v17)
          {
            uint64_t v18 = *a3;
            if (*(unsigned char *)(*a3 + 120))
            {
              if (*(char *)(v18 + 95) < 0) {
                uint64_t v19 = *(void *)(v18 + 80);
              }
              else {
                uint64_t v19 = *(unsigned __int8 *)(v18 + 95);
              }
              BOOL v21 = v19 == 0;
            }
            else
            {
              BOOL v21 = 0;
            }
            (*(void (**)(uint64_t, BOOL))(*(void *)v17 + 96))(v17, v21);
          }
          sub_10004D2C8(v16);
        }
      }
    }
    uint64_t v10 = 1;
  }
  else
  {
    uint64_t v10 = 0;
  }
  uint64_t v11 = *(void *)(a1 + 680);
  if (v11)
  {
    (*(void (**)(uint64_t, void *, uint64_t))(*(void *)v11 + 80))(v11, v23, a2);
  }
  else
  {
    BOOL v12 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v22 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No provisioning operation?", v22, 2u);
    }
  }
  return v10;
}

void sub_1002DE6A8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_1002DE6C4(uint64_t a1, uint64_t a2)
{
  BOOL v28 = 0;
  if (sub_10004D710())
  {
    uint64_t v4 = sub_100365D74();
    sub_100058DB0(buf, "CellularPlanSkipEligibilityCheck");
    BOOL v5 = sub_1002260B0(v4, (void **)buf, &v28);
    BOOL v6 = v5;
    if (v32 < 0)
    {
      operator delete(*(void **)buf);
      if (v6) {
        goto LABEL_4;
      }
    }
    else if (v5)
    {
LABEL_4:
      char v7 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I WARNING: Debug option set SkipEligibilityCheck: %d", buf, 8u);
      }
      return !v28;
    }
  }
  if (!*(unsigned char *)a2)
  {
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v20 = "#I no data value.";
LABEL_20:
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v20, buf, 2u);
    }
    return 1;
  }
  if (*(void *)(a2 + 224) == *(void *)(a2 + 232))
  {
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      uint64_t v20 = "#I no raw metadata value.";
      goto LABEL_20;
    }
    return 1;
  }
  (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  uint64_t v10 = ServiceMap;
  if ((v11 & 0x8000000000000000) != 0)
  {
    BOOL v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v29 = v11;
  BOOL v15 = sub_10004D37C(&v10[1].__m_.__sig, &v29);
  if (v15)
  {
    uint64_t v17 = v15[3];
    BOOL v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      goto LABEL_24;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  BOOL v16 = 0;
  char v18 = 1;
LABEL_24:
  if (v31) {
    sub_10004D2C8(v31);
  }
  if (!v17)
  {
    uint64_t v22 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "no activation controller", buf, 2u);
    }
LABEL_32:
    uint64_t v8 = 1;
    if (v18) {
      return v8;
    }
    goto LABEL_33;
  }
  if ((*(unsigned int (**)(uint64_t))(*(void *)v17 + 152))(v17) == 2)
  {
    BOOL v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Cannot skip as policy mismatch", buf, 2u);
    }
    goto LABEL_32;
  }
  if (!*(unsigned char *)a2) {
    __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
  }
  unsigned __int16 v24 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 320) + 352))(*(void *)(a1 + 320), a2 + 8);
  if (v24 < 0x100u)
  {
    if (*(unsigned char *)(a1 + 4601)) {
      BOOL v25 = *(unsigned __int8 *)(a1 + 4600) != 0;
    }
    else {
      BOOL v25 = 0;
    }
    BOOL v28 = v25;
    uint64_t v8 = !v25;
    if (v18) {
      return v8;
    }
LABEL_33:
    sub_10004D2C8(v16);
    return v8;
  }
  int v26 = v24;
  BOOL v28 = v24;
  char v27 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I eligibility check from carrier bundle : %{BOOL}d", buf, 8u);
    int v26 = v28;
  }
  uint64_t v8 = v26 == 0;
  if ((v18 & 1) == 0) {
    goto LABEL_33;
  }
  return v8;
}

void sub_1002DEB00(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DEB5C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_1002D4620(a1, (os_log_t *)(a1 + 40), 9);
  if (!*(unsigned char *)(a1 + 1705))
  {
    LOBYTE(__p[0]) = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    __p[1] = 0;
    __n128 v7 = sub_10031EB44((unsigned __int8 *)(a1 + 1568), (uint64_t)__p);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[1]);
    }
    if (!*(unsigned char *)(a1 + 1568)) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    *(unsigned char *)(a1 + 1576) = v6;
    (*(void (**)(void **__return_ptr, __n128))(**(void **)(a1 + 304) + 448))(__p, v7);
    if (!*(unsigned char *)(a1 + 1568)) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    uint64_t v8 = (void **)(a1 + 1584);
    if (*(char *)(a1 + 1607) < 0) {
      operator delete(*v8);
    }
    *(_OWORD *)uint64_t v8 = *(_OWORD *)__p;
    *(void *)(a1 + 1600) = v13;
  }
  uint64_t v9 = *(void *)(a1 + 680);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v9 + 80))(v9, a3, a2);
    uint64_t v10 = *(void *)(a1 + 680);
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v13 = 0;
    (*(void (**)(uint64_t, void, void **))(*(void *)v10 + 88))(v10, 0, __p);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
  return (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), v6);
}

void sub_1002DED38(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002DED58(void *a1, uint64_t a2, uint64_t a3)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  v10[2] = sub_1002DEE8C;
  v10[3] = &unk_1019B64A8;
  v10[4] = a3;
  v10[5] = a1;
  sub_10030B3C8(v11, a2);
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  __n128 v7 = v6;
  uint64_t v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  uint64_t v13 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v10;
  dispatch_async(v8, block);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v7);
  return sub_10010B788((uint64_t)v11);
}

uint64_t sub_1002DEE8C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 40);
  sub_10030B3C8(v5, a1 + 48);
  uint64_t v3 = sub_1002DDF00(v2, (uint64_t)v5);
  (*(void (**)(uint64_t, uint64_t, void))(v1 + 16))(v1, v3, 0);
  return sub_10010B788((uint64_t)v5);
}

void sub_1002DEEEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010B788((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_1002DEF00(uint64_t a1, uint64_t a2)
{
  return sub_10030B3C8((unsigned char *)(a1 + 48), a2 + 48);
}

uint64_t sub_1002DEF0C(uint64_t a1)
{
  return sub_10010B788(a1 + 48);
}

uint64_t sub_1002DEF14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002DED58((void *)(a1 - 48), a2, a3);
}

void sub_1002DEF1C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      uint64_t v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      uint64_t v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    uint64_t v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DF110(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002DF12C(uint64_t a1, void *a2)
{
}

void *sub_1002DF134(void *a1, uint64_t a2, int a3, uint64_t a4)
{
  v14[0] = _NSConcreteStackBlock;
  v14[1] = 1174405120;
  v14[2] = sub_1002DF2A8;
  v14[3] = &unk_1019B64D8;
  v14[4] = a1;
  sub_10031ECD8((uint64_t)v15, a4);
  int v16 = a3;
  uint64_t v6 = (std::__shared_weak_count *)a1[2];
  if (!v6 || (uint64_t v7 = a1[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v9 = v8;
  uint64_t v10 = a1[3];
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  void v12[2] = sub_10031EAD8;
  void v12[3] = &unk_1019B8B90;
  v12[5] = v7;
  uint64_t v13 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  void v12[4] = v14;
  dispatch_async(v10, v12);
  if (v13) {
    sub_10004D2C8(v13);
  }
  sub_10004D2C8(v9);
  return sub_100313668(v15);
}

void sub_1002DF29C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_1002DF2A8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (sub_1002DF3BC(v2, 0))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E Cannot run", buf, 2u);
    }
    char v4 = 13;
  }
  else
  {
    v8[0] = 0;
    v8[128] = 0;
    int v5 = *(_DWORD *)(a1 + 72) & sub_1002DDF00(v2, (uint64_t)v8);
    sub_10010B788((uint64_t)v8);
    if (v5)
    {
      char v4 = 0;
    }
    else
    {
      uint64_t v6 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#E QR code scan unsupported device", buf, 2u);
      }
      char v4 = 17;
    }
  }
  return sub_10024924C(a1 + 40, v4);
}

void sub_1002DF3A8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10010B788((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DF3BC(uint64_t a1, char a2)
{
  if ((a2 & 1) == 0 && *(void *)(a1 + 680))
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
    {
      __int16 v13 = 0;
      uint64_t v3 = "Provisioning operation exists";
      char v4 = (uint8_t *)&v13;
LABEL_17:
      _os_log_error_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_ERROR, v3, v4, 2u);
      return 13;
    }
    return 13;
  }
  if (*(unsigned char *)(a1 + 2264))
  {
    int v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Abort provisioning request - Call ongoing", buf, 2u);
    }
    return 33;
  }
  else
  {
    unsigned int v7 = *(_DWORD *)(a1 + 2276);
    BOOL v8 = v7 > 4;
    int v9 = (1 << v7) & 0x19;
    if (!v8 && v9 != 0)
    {
      uint64_t v2 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v2, OS_LOG_TYPE_ERROR))
      {
        __int16 v11 = 0;
        uint64_t v3 = "Abort selection - In emergency mode";
        char v4 = (uint8_t *)&v11;
        goto LABEL_17;
      }
      return 13;
    }
    return 0;
  }
}

uint64_t sub_1002DF4D8(uint64_t a1, uint64_t a2)
{
  return sub_10031ECD8(a1 + 40, a2 + 40);
}

void *sub_1002DF4E4(uint64_t a1)
{
  return sub_100313668((void *)(a1 + 40));
}

void *sub_1002DF4EC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  return sub_1002DF134((void *)(a1 - 48), a2, a3, a4);
}

void sub_1002DF4F4(unint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v10[0] = a1;
  v10[1] = 0uLL;
  sub_10030B4A4((void *)v10 + 1, *a2, a2[1], (a2[1] - *a2) >> 7);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)__int16 v11 = *(_OWORD *)a3;
    v11[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a4;
    __p[2] = *(void **)(a4 + 16);
  }
  sub_1000DFC90((uint64_t)&v13, a5);
  int v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DF754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a2)
  {
    if (*(char *)(v26 + 55) < 0) {
      operator delete(*v27);
    }
    a10 = v26 + 8;
    sub_10030B640((void ***)&a10);
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002DF7F4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1002DF7FC(uint64_t a1, void *aBlock)
{
  if (aBlock) {
    _Block_copy(aBlock);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DF900(uint64_t a1, void *a2)
{
}

void sub_1002DF908(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1;
  char v6 = a2;
  sub_10031F4D0((uint64_t)&v7, a3);
  char v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DFA54(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002DFA6C(uint64_t a1, char a2, uint64_t a3)
{
}

void sub_1002DFA74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10031FE24((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002DFBA8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002DFBB8(uint64_t a1, uint64_t a2)
{
}

void sub_1002DFBC0(void *a1, char a2, uint64_t a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1002DFCDC;
  v9[3] = &unk_1019B6510;
  v9[4] = a3;
  v9[5] = a1;
  char v10 = a2;
  uint64_t v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (char v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  BOOL v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  BOOL v12 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v8, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v7);
}

void sub_1002DFCDC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if ((sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(v2 + 320)) & 1) == 0)
  {
    char v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(cf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I No transfer plans available, eSIM modification not allowed.", (uint8_t *)&cf, 2u);
    }
    uint64_t v7 = *(void *)(a1 + 32);
    uint64_t v18 = 0;
    (*(void (**)(void))(v7 + 16))();
    p_CFTypeRef cf = (const void **)&v18;
    goto LABEL_10;
  }
  if (*(unsigned char *)(a1 + 48) == 1)
  {
    uint64_t v3 = *(void *)(v2 + 416);
    if (v3)
    {
      CFTypeRef cf = 0;
      (*(void (**)(CFTypeRef *__return_ptr))(*(void *)v3 + 312))(&cf);
      uint64_t v4 = *(void *)(a1 + 32);
      CFTypeRef v15 = cf;
      if (cf) {
        CFRetain(cf);
      }
      (*(void (**)(uint64_t, CFTypeRef *, void))(v4 + 16))(v4, &v15, 0);
      sub_100044D00(&v15);
      p_CFTypeRef cf = &cf;
LABEL_10:
      sub_100044D00(p_cf);
      return;
    }
    uint64_t v10 = *(void *)(a1 + 32);
    char v17 = 0;
    (*(void (**)(void))(v10 + 16))();
    sub_100044D00(&v17);
    __int16 v11 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(cf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", (uint8_t *)&cf, 2u);
    }
  }
  else
  {
    uint64_t v8 = *(void *)(v2 + 384);
    if (!v8)
    {
      BOOL v12 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        LOWORD(cf) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "No Transfer Controller available. Bootstrap needed", (uint8_t *)&cf, 2u);
      }
      uint64_t v13 = *(void *)(a1 + 32);
      uint64_t v14 = 0;
      (*(void (**)(void))(v13 + 16))();
      p_CFTypeRef cf = (const void **)&v14;
      goto LABEL_10;
    }
    int v9 = *(void **)(a1 + 32);
    if (v9) {
      int v9 = _Block_copy(v9);
    }
    v19[0] = off_1019B8D90;
    v19[1] = v2;
    v19[2] = v9;
    v19[3] = v19;
    (*(void (**)(uint64_t, void *))(*(void *)v8 + 144))(v8, v19);
    sub_100313790(v19);
  }
}

void sub_1002DFF6C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002DFFE0(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 8);
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_1002E0014(uint64_t a1, char a2, uint64_t a3)
{
}

void sub_1002E001C(uint64_t a1, void *a2)
{
  uint64_t v3 = (void *)a2[3];
  if (v3)
  {
    if (v3 == a2)
    {
      char v6 = v5;
      (*(void (**)(void *, void *))(*a2 + 24))(a2, v5);
    }
    else
    {
      char v6 = (void *)(*(uint64_t (**)(void *))(*v3 + 16))(v3);
    }
  }
  else
  {
    char v6 = 0;
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0210(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002E022C(uint64_t a1, void *a2)
{
}

void sub_1002E023C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10031F4D0((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0374(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002E038C(uint64_t a1, uint64_t a2)
{
}

void sub_1002E0394(uint64_t a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  uint64_t v10 = a1;
  sub_100083DA4(&v11, a2);
  sub_100083DA4((const void **)&v12, a3);
  sub_100083DA4((const void **)&v12 + 1, a4);
  sub_1000DFC90((uint64_t)&v13, a5);
  int v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E052C(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002E0568(uint64_t a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
}

void sub_1002E0570(uint64_t a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
  uint64_t v10 = a1;
  sub_100083DA4(&v11, a2);
  sub_100083DA4((const void **)&v12, a3);
  sub_100083DA4((const void **)&v12 + 1, a4);
  sub_1000DFC90((uint64_t)&v13, a5);
  int v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0708(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002E0744(uint64_t a1, const void **a2, const void **a3, const void **a4, uint64_t a5)
{
}

void sub_1002E074C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000332B4((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0884(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002E089C(uint64_t a1, uint64_t a2)
{
}

void sub_1002E08A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  uint64_t v7 = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_100323910((uint64_t)&v8, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0A24(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002E0A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002E0A44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10031F4D0((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0B7C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002E0B94(uint64_t a1, uint64_t a2)
{
}

void sub_1002E0B9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10031F4D0((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E0CD4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002E0CEC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002E0CF4(uint64_t a1, uint64_t a2)
{
  if (a2 == 1) {
    uint64_t v3 = 400;
  }
  else {
    uint64_t v3 = 384;
  }
  if (a2 == 1) {
    uint64_t v4 = a1 + 400;
  }
  else {
    uint64_t v4 = a1 + 384;
  }
  uint64_t result = *(void *)(a1 + v3);
  if (result)
  {
    if (a2 == 2)
    {
      uint64_t v7 = *(void *)(a1 + 416);
      if (v7)
      {
        (*(void (**)(void))(*(void *)v7 + 184))(*(void *)(a1 + 416));
        uint64_t result = *(void *)(a1 + v3);
      }
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)result + 128))(result, a2);
    uint64_t v8 = *(std::__shared_weak_count **)(v4 + 8);
    int v9 = (void *)(a1 + v3);
    *int v9 = 0;
    v9[1] = 0;
    if (v8) {
      sub_10004D2C8(v8);
    }
    uint64_t result = *(void *)(a1 + 464);
    if (result)
    {
      uint64_t v10 = *(uint64_t (**)(void))(*(void *)result + 128);
      return v10();
    }
  }
  return result;
}

uint64_t sub_1002E0E0C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 464);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

void *sub_1002E0E3C(void *result, char a2, int a3)
{
  if (result[208])
  {
    uint64_t v5 = result;
    if (a3)
    {
      uint64_t v24 = 0;
      BOOL v25 = 0;
      (**(void (***)(void **__return_ptr))result[40])(&__p);
      Registry::getNotificationSenderFactory((uint64_t *)buf, (Registry *)__p);
      char v6 = *(void **)buf;
      (**(void (***)(CFTypeRef *__return_ptr))v5[40])(&cf);
      Registry::getTimerService(&v22, (Registry *)cf);
      (*(void (**)(uint64_t *__return_ptr, void *, uint64_t *, void *))(*(void *)v6 + 160))(&v24, v6, &v22, v5 + 3);
      if (v23) {
        sub_10004D2C8(v23);
      }
      if (v21) {
        sub_10004D2C8(v21);
      }
      if (v17) {
        sub_10004D2C8(v17);
      }
      if (v14) {
        sub_10004D2C8(v14);
      }
      if (v24)
      {
        uint64_t v19 = 0;
        CFTypeRef cf = 0;
        sub_100058DB0(buf, "");
        sub_100058DB0(&__p, "");
        sub_100CD9BDC(4, a3, &v19, (uint64_t *)buf, (char *)&__p, &cf);
        if (v15 < 0) {
          operator delete(__p);
        }
        if (v18 < 0) {
          operator delete(*(void **)buf);
        }
        sub_100057D78(&v19);
        uint64_t v7 = v24;
        CFTypeRef v12 = cf;
        if (cf) {
          CFRetain(cf);
        }
        (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v7 + 40))(v7, &v12);
        sub_100057D78(&v12);
        sub_100057D78(&cf);
      }
      else
      {
        uint64_t v8 = v5[5];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "invalid CellularPlanManagementSender", buf, 2u);
        }
      }
      if (v25) {
        sub_10004D2C8(v25);
      }
    }
    int v9 = v5 + 205;
    uint64_t v10 = 0;
    __int16 v11 = 0;
    sub_1002E1174((uint64_t)v9, a2, (uint64_t)&v11, (uint64_t)&v10, a3);
    sub_100057D78(&v10);
    sub_1000558F4(&v11);
    return sub_100324040(v9);
  }
  return result;
}

void sub_1002E10AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,const void *a27,uint64_t a28)
{
  sub_100057D78(&a12);
  sub_100057D78(&a27);
  int v30 = *(std::__shared_weak_count **)(v28 - 40);
  if (v30) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E1174(uint64_t a1, char a2, uint64_t a3, uint64_t a4, char a5)
{
  char v8 = a2;
  char v7 = a5;
  uint64_t v5 = *(void *)(a1 + 24);
  if (!v5) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *, uint64_t, uint64_t, char *))(*(void *)v5 + 48))(v5, &v8, a3, a4, &v7);
}

void sub_1002E11D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_1003240C8((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E1378(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1002E13B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002E13BC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E1514(uint64_t a1, uint64_t a2)
{
}

void sub_1002E151C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_10031ECD8((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E16C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1002E1700(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002E1708(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1002E1820;
  v8[3] = &unk_1019B6538;
  v8[4] = a2;
  v8[5] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  char v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v4;
  uint64_t v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1002E1820(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  sub_1002E19C0(v2);
  if (*(char *)(v2 + 615) < 0)
  {
    if (!*(void *)(v2 + 600)) {
      return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else if (!*(unsigned char *)(v2 + 615))
  {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if (!*(void *)(v2 + 680))
  {
    long long v7 = 0u;
    long long v8 = 0u;
    memset(v9, 0, sizeof(v9));
    long long __p = 0u;
    long long v11 = 0u;
    BOOL v4 = *(_DWORD *)(v2 + 2632) == 1;
    LODWORD(v7) = *(_DWORD *)(v2 + 580);
    uint64_t v3 = v7;
    WORD2(v7) = 781;
    long long v8 = 0uLL;
    *((void *)&v7 + 1) = 0;
    LOBYTE(v9[0]) = 4;
    memset(&v9[1], 0, 100);
    long long __p = 0uLL;
    BYTE8(v11) = 0;
    *(void *)&long long v11 = 0;
    BYTE9(v11) = v4;
    sub_100311AFC((uint64_t)v6, (int *)&v7);
    v6[176] = 1;
    sub_1002DAEB8(v2, v3, (uint64_t)v6, 0);
    sub_10030AEBC((uint64_t)v6);
    if (SBYTE7(v11) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v9[12]) < 0) {
      operator delete(v9[10]);
    }
    if (SHIBYTE(v9[9]) < 0) {
      operator delete(v9[7]);
    }
    if (SHIBYTE(v9[6]) < 0) {
      operator delete(v9[4]);
    }
    if (SHIBYTE(v9[3]) < 0) {
      operator delete(v9[1]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(*((void **)&v7 + 1));
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002E199C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1002E19C0(uint64_t a1)
{
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)))
  {
    int v9 = 0;
    v10[0] = 0;
    v10[1] = 0;
    (*(void (**)(char ***__return_ptr))(**(void **)(a1 + 304) + 472))(&v9);
    uint64_t v2 = v9;
    if (v9 != v10)
    {
      do
      {
        uint64_t v3 = *(void *)(a1 + 336);
        int v4 = *((unsigned __int8 *)v2 + 32);
        memset(v8, 0, sizeof(v8));
        sub_1000302C0((char *)v8, (long long *)v2[6], (long long *)v2[7], 0xAAAAAAAAAAAAAAABLL * ((v2[7] - v2[6]) >> 3));
        (*(void (**)(uint64_t, void, void *))(*(void *)v3 + 120))(v3, ((v4 - 89) < 9) & (0x181u >> (v4 - 89)), v8);
        long long v11 = (void **)v8;
        sub_100047F64(&v11);
        uint64_t v5 = v2[1];
        if (v5)
        {
          do
          {
            uint64_t v6 = (char **)v5;
            uint64_t v5 = *(char **)v5;
          }
          while (v5);
        }
        else
        {
          do
          {
            uint64_t v6 = (char **)v2[2];
            BOOL v7 = *v6 == (char *)v2;
            uint64_t v2 = v6;
          }
          while (!v7);
        }
        uint64_t v2 = v6;
      }
      while (v6 != v10);
    }
    (*(void (**)(void))(**(void **)(a1 + 304) + 208))(*(void *)(a1 + 304));
    sub_100347268((uint64_t)&v9, v10[0]);
  }
}

void sub_1002E1B74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, char *a14)
{
}

void sub_1002E1BA8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1002E1BB0(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

uint64_t sub_1002E1BC4(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1);
}

void sub_1002E1BD8(void *a1, int a2, uint64_t a3)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_1002E1CF4;
  v9[3] = &unk_1019B6560;
  v9[4] = a3;
  v9[5] = a1;
  int v10 = a2;
  int v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  BOOL v7 = v6;
  long long v8 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  CFTypeRef v12 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v9;
  dispatch_async(v8, block);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v7);
}

uint64_t sub_1002E1CF4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(unsigned char *)(v2 + 1705))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E User is in websheet - disallow launch", buf, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  int v4 = sub_1002DF3BC(*(void *)(a1 + 40), 0);
  long long v33 = 0uLL;
  char v34 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&v33);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#E Cannot run", buf, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if (!v34)
  {
    int v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E CSN unavailable", buf, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  int v7 = *(_DWORD *)(a1 + 48);
  v24[0] = 0;
  v24[128] = 0;
  int v8 = sub_1002DDF00(v2, (uint64_t)v24) & v7;
  sub_10010B788((uint64_t)v24);
  if (!v8)
  {
    long long v11 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#E Invalid flow type", buf, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  int v9 = *(_DWORD *)(a1 + 48);
  if (v9 == 32)
  {
    long long v25 = v33;
    char v26 = v34;
    memset(v14, 0, sizeof(v14));
    memset(v13, 0, sizeof(v13));
    sub_1002E2134(v2, (uint64_t)&v25, 7, 0, (uint64_t)v14, (uint64_t)v13);
LABEL_28:
    CFTypeRef v12 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Pre-warming the purchaseFlow BOOL for a impatient user", buf, 2u);
    }
    *(unsigned char *)(v2 + 1705) = 1;
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if (v9 == 2)
  {
    if ((*(unsigned int (**)(void))(**(void **)(v2 + 320) + 104))(*(void *)(v2 + 320)))
    {
      long long v31 = v33;
      char v32 = v34;
      memset(v23, 0, sizeof(v23));
      memset(v22, 0, sizeof(v22));
      sub_1002E2134(v2, (uint64_t)&v31, 6, 0, (uint64_t)v23, (uint64_t)v22);
    }
    else
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 304) + 400))(buf);
      if (v21)
      {
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
        long long v29 = v33;
        char v30 = v34;
        memset(v18, 0, sizeof(v18));
        memset(v17, 0, sizeof(v17));
        sub_1002E2134(v2, (uint64_t)&v29, 2, 0, (uint64_t)v18, (uint64_t)v17);
      }
      else
      {
        long long v27 = v33;
        char v28 = v34;
        memset(v16, 0, sizeof(v16));
        memset(v15, 0, sizeof(v15));
        sub_1002E2134(v2, (uint64_t)&v27, 6, 0, (uint64_t)v16, (uint64_t)v15);
      }
    }
    goto LABEL_28;
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002E2118(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
}

void sub_1002E2134(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  CFTypeRef v12 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = asString();
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Launching SIMSetup with [%s]", buf, 0xCu);
  }
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 184);
  if (v13)
  {
    uint64_t v14 = std::__shared_weak_count::lock(v13);
    if (v14)
    {
      char v15 = v14;
      uint64_t v16 = *(void *)(a1 + 176);
      if (v16)
      {
        CFTypeRef cf = 0;
        if (*(unsigned char *)(a2 + 16))
        {
          *(_OWORD *)long long buf = *(_OWORD *)a2;
          CFDataRef v17 = CFDataCreate(kCFAllocatorDefault, buf, 16);
          CFTypeRef v18 = cf;
          CFTypeRef cf = v17;
          *(void *)long long buf = v18;
          uint64_t v24 = 0;
          sub_100030068((const void **)buf);
          sub_100030068(&v24);
          CFTypeRef v23 = cf;
          if (cf) {
            CFRetain(cf);
          }
        }
        else
        {
          CFTypeRef v23 = 0;
        }
        if (*(char *)(a5 + 23) < 0)
        {
          sub_10004FC84(__dst, *(void **)a5, *(void *)(a5 + 8));
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)a5;
          uint64_t v22 = *(void *)(a5 + 16);
        }
        if (*(char *)(a6 + 23) < 0)
        {
          sub_10004FC84(__p, *(void **)a6, *(void *)(a6 + 8));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)a6;
          uint64_t v20 = *(void *)(a6 + 16);
        }
        (*(void (**)(uint64_t, CFTypeRef *, uint64_t, uint64_t, void **, void **))(*(void *)v16 + 88))(v16, &v23, a3, a4, __dst, __p);
        if (SHIBYTE(v20) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v22) < 0) {
          operator delete(__dst[0]);
        }
        sub_100030068(&v23);
        (*(void (**)(void))(**(void **)(a1 + 304) + 224))(*(void *)(a1 + 304));
        sub_100030068(&cf);
      }
      sub_10004D2C8(v15);
    }
  }
}

void sub_1002E236C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,uint64_t a23,const void *a24)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  sub_100030068(&a22);
  sub_100030068(&a24);
  sub_10004D2C8(v24);
  _Unwind_Resume(a1);
}

void sub_1002E23DC(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1002E23E4(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v14 = 0;
  char v15 = 0;
  sub_100324590(&v14);
  sub_100058DB0(__p, "");
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long buf = v16;
  uint64_t v19 = v17;
  uint64_t v10 = v14;
  long long v11 = v15;
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v4 = sub_100CD0B54((uint64_t)__p, (char *)buf, &v10);
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v13) < 0)
  {
    operator delete(__p[0]);
    if (v4) {
      goto LABEL_9;
    }
  }
  else if (v4)
  {
LABEL_9:
    uint64_t v5 = (const char *)v14;
    if (*(char *)(v14 + 23) < 0) {
      uint64_t v5 = *(const char **)v14;
    }
    *a2 = CFStringCreateWithCString(kCFAllocatorDefault, v5, 0x8000100u);
    *(void *)&long long v16 = 0;
    sub_1000558F4((const void **)&v16);
    uint64_t v6 = (const char *)(v14 + 48);
    if (*(char *)(v14 + 71) < 0) {
      uint64_t v6 = *(const char **)v6;
    }
    a2[1] = CFStringCreateWithCString(kCFAllocatorDefault, v6, 0x8000100u);
    *(void *)&long long v16 = 0;
    sub_1000558F4((const void **)&v16);
    int v7 = (const char *)(v14 + 24);
    if (*(char *)(v14 + 47) < 0) {
      int v7 = *(const char **)v7;
    }
    a2[2] = CFStringCreateWithCString(kCFAllocatorDefault, v7, 0x8000100u);
    *(void *)&long long v16 = 0;
    sub_1000558F4((const void **)&v16);
    goto LABEL_22;
  }
  int v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    long long v16 = 0uLL;
    uint64_t v17 = 0;
    ctu::cf::assign();
    *(_OWORD *)long long __p = v16;
    uint64_t v13 = v17;
    int v9 = __p;
    if (v17 < 0) {
      int v9 = (void **)v16;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#E Decoding failure [%s]", buf, 0xCu);
    if (SHIBYTE(v13) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_22:
  if (v15) {
    sub_10004D2C8(v15);
  }
}

void sub_1002E2638(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, std::__shared_weak_count *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a18) {
    sub_10004D2C8(a18);
  }
  sub_1002E26CC(v24);
  _Unwind_Resume(a1);
}

const void **sub_1002E26CC(const void **a1)
{
  sub_1000558F4(a1 + 2);
  sub_1000558F4(a1 + 1);

  return sub_1000558F4(a1);
}

void sub_1002E2710(uint64_t a1@<X0>, CFStringRef *a2@<X8>)
{
}

const void **sub_1002E2718(void *a1, uint64_t a2, char a3, const void **a4, const void **a5, char a6, uint64_t a7)
{
  v18[0] = _NSConcreteStackBlock;
  v18[1] = 1174405120;
  void v18[2] = sub_1002E288C;
  void v18[3] = &unk_1019B6588;
  v18[5] = a1;
  sub_100083DA4(&v19, a4);
  v18[4] = a7;
  sub_100083DA4(&v20, a5);
  char v21 = a6;
  char v22 = a3;
  CFTypeRef v12 = (std::__shared_weak_count *)a1[2];
  if (!v12 || (uint64_t v13 = a1[1], (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
    sub_100088B9C();
  }
  char v15 = v14;
  long long v16 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v13;
  uint64_t v24 = v15;
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v18;
  dispatch_async(v16, block);
  if (v24) {
    sub_10004D2C8(v24);
  }
  sub_10004D2C8(v15);
  sub_1000558F4(&v20);
  return sub_1000558F4(&v19);
}

void sub_1002E288C(uint64_t a1)
{
  long long __p = 0uLL;
  uint64_t v44 = 0;
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(a1 + 48)) {
    uint64_t v3 = sub_1000810B8;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    memset(buf, 0, 24);
    ctu::cf::assign();
    long long __p = 0u;
    uint64_t v44 = 0;
  }
  else
  {
    sub_100058DB0(&__p, "");
  }
  unint64_t v4 = HIBYTE(v44);
  p_p = &__p;
  if (v44 < 0)
  {
    unint64_t v4 = *((void *)&__p + 1);
    p_p = (long long *)__p;
  }
  if (v4 >= 9) {
    unint64_t v4 = 9;
  }
  if (v4)
  {
    uint64_t v6 = (long long *)((char *)p_p + v4);
    int v7 = p_p;
    int v8 = v6;
    do
    {
      if (*(unsigned char *)v7 == 76)
      {
        uint64_t v9 = &_mh_execute_header.magic + 1;
        while (v9 != 9)
        {
          if ((long long *)((char *)v7 + v9) == v6) {
            goto LABEL_22;
          }
          int v10 = *((unsigned __int8 *)v7 + v9);
          int v11 = aLpa1Tr[v9++];
          if (v10 != v11) {
            goto LABEL_14;
          }
        }
        int v8 = v7;
      }
LABEL_14:
      int v7 = (long long *)((char *)v7 + 1);
    }
    while (v7 != v6);
LABEL_22:
    if (v8 != v6 && v8 == p_p)
    {
      char v12 = _os_feature_enabled_impl();
      uint64_t v13 = *(void (***)(void, void))(a1 + 32);
      if (v12) {
        sub_1002E3084(v2, (uint64_t)&__p, 0, v13);
      }
      else {
        v13[2](*(void *)(a1 + 32), 17);
      }
      goto LABEL_46;
    }
  }
  int v14 = sub_1002DF3BC(v2, 0);
  uint64_t v41 = 0;
  uint64_t v42 = 0;
  sub_100324590(&v41);
  if (v14)
  {
    char v15 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#E Cannot run", buf, 2u);
    }
LABEL_43:
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_44;
  }
  if (((*(uint64_t (**)(void))(**(void **)(v2 + 320) + 48))(*(void *)(v2 + 320)) & 1) == 0)
  {
    uint64_t v19 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#E Does not support flow type", buf, 2u);
    }
    goto LABEL_43;
  }
  v50[0] = 0;
  v50[1] = 0;
  char v51 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v50);
  if (v51)
  {
    ctu::hex((uint64_t *)buf, (ctu *)v50, (const void *)0x10, v16);
    uint64_t v39 = v41;
    char v40 = v42;
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v17 = sub_100CD0B54((uint64_t)buf, (char *)&__p, &v39);
    if (v40) {
      sub_10004D2C8(v40);
    }
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (v17) {
        goto LABEL_37;
      }
    }
    else if (v17)
    {
LABEL_37:
      if (!*(unsigned char *)(v41 + 120)
        || (*(char *)(v41 + 95) < 0 ? (uint64_t v18 = *(void *)(v41 + 80)) : (uint64_t v18 = *(unsigned __int8 *)(v41 + 95)),
            v18 || (*(void *)buf = 0, uint64_t v23 = *(void *)(a1 + 56), sub_1000558F4((const void **)buf), v23)))
      {
        if (sub_1002E3B1C(v2, *(unsigned __int8 *)(a1 + 64)))
        {
          if (*(void *)(a1 + 56)) {
            uint64_t v24 = sub_1000810B8;
          }
          else {
            uint64_t v24 = 0;
          }
          if (v24)
          {
            memset(buf, 0, 24);
            ctu::cf::assign();
            uint64_t v25 = *(void *)buf;
            v49[0] = *(void *)&buf[8];
            *(void *)((char *)v49 + 7) = *(void *)&buf[15];
            uint8_t v26 = buf[23];
            uint64_t v27 = v41;
            if (*(char *)(v41 + 95) < 0) {
              operator delete(*(void **)(v41 + 72));
            }
            uint64_t v28 = v49[0];
            *(void *)(v27 + 72) = v25;
            *(void *)(v27 + 80) = v28;
            *(void *)(v27 + 87) = *(void *)((char *)v49 + 7);
            *(unsigned char *)(v27 + 95) = v26;
          }
          *(unsigned char *)(v2 + 1706) = 1;
          if (*(char *)(v2 + 615) < 0)
          {
            **(unsigned char **)(v2 + 592) = 0;
            *(void *)(v2 + 600) = 0;
          }
          else
          {
            *(unsigned char *)(v2 + 592) = 0;
            *(unsigned char *)(v2 + 615) = 0;
          }
          (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
          *(unsigned char *)(v41 + 122) = *(unsigned char *)(a1 + 65);
          v48[0] = 0;
          BOOL v30 = sub_1002DE6C4(v2, (uint64_t)v48);
          *(unsigned char *)(v41 + 123) = v30;
          sub_1000C5D34(v48);
          if (*(char *)(v41 + 71) < 0) {
            uint64_t v31 = *(void *)(v41 + 56);
          }
          else {
            uint64_t v31 = *(unsigned __int8 *)(v41 + 71);
          }
          if (!v31) {
            sub_1002E4054((uint64_t *)(v41 + 96));
          }
          char v32 = (char *)encodeProfileEligibilityCheckAction();
          sub_10003ED78((std::string *)(v41 + 160), v32);
          memset(buf, 0, sizeof(buf));
          long long v46 = 0u;
          long long v47 = 0u;
          BOOL v33 = *(_DWORD *)(v2 + 2632) == 1;
          *(_DWORD *)long long buf = *(_DWORD *)(v2 + 580);
          *(_WORD *)&uint8_t buf[4] = 769;
          memset(&buf[8], 0, 24);
          uint8_t buf[32] = 4;
          memset(&buf[40], 0, 100);
          long long v46 = 0uLL;
          BYTE8(v47) = 0;
          *(void *)&long long v47 = 0;
          BYTE9(v47) = v33;
          uint64_t v34 = *(void *)(v2 + 680);
          uint64_t v37 = v41;
          int v38 = v42;
          if (v42) {
            atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100311AFC((uint64_t)v36, (int *)buf);
          v36[176] = 1;
          (*(void (**)(uint64_t, void *, uint64_t *, void, unsigned char *))(*(void *)v34 + 32))(v34, v50, &v37, 0, v36);
          sub_10030AEBC((uint64_t)v36);
          if (v38) {
            sub_10004D2C8(v38);
          }
          sub_1002DA408(v2);
          (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
          sub_1002DB328((uint64_t)buf);
          goto LABEL_44;
        }
        long long v29 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#E Cannot create operation", buf, 2u);
        }
      }
      else
      {
        uint64_t v35 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#E Missing confirmation code", buf, 2u);
        }
      }
      goto LABEL_73;
    }
    char v21 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      char v22 = &__p;
      if (v44 < 0) {
        char v22 = (long long *)__p;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v22;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E Decoding failure [%s]", buf, 0xCu);
    }
  }
  else
  {
    uint64_t v20 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#E Vinyl info unavailable", buf, 2u);
    }
  }
LABEL_73:
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
LABEL_44:
  if (v42) {
    sub_10004D2C8(v42);
  }
LABEL_46:
  if (SHIBYTE(v44) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1002E2FB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,std::__shared_weak_count *a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,void *__p,uint64_t a47,int a48,__int16 a49,char a50,char a51)
{
  if (a51 < 0) {
    operator delete(__p);
  }
  if (a38) {
    sub_10004D2C8(a38);
  }
  if (a44 < 0) {
    operator delete(a39);
  }
  _Unwind_Resume(a1);
}

void sub_1002E3084(uint64_t a1, uint64_t a2, int a3, void (**a4)(void, void))
{
  if (*(unsigned char *)(a1 + 4601) && *(unsigned char *)(a1 + 4600))
  {
    int v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#E transfer plan is blocked : regulatory restriction active", (uint8_t *)buf, 2u);
    }
    uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 848))(*(void *)(a1 + 320));
    a4[2](a4, v8);
  }
  else if (*(unsigned char *)(a1 + 2289) == 1 {
         || ((*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)) & 1) != 0)
  }
  {
    v68[0] = 0;
    v68[1] = 0;
    char v69 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v68);
    if (v69)
    {
      uint64_t v9 = *(void *)(a1 + 384);
      if (v9 && (*(unsigned int (**)(uint64_t))(*(void *)v9 + 168))(v9))
      {
        a4[2](a4, 13);
      }
      else
      {
        uint64_t v67 = 0;
        memset(buf, 0, sizeof(buf));
        sub_100990B54(buf);
        if ((_BYTE)v67)
        {
          uint64_t v10 = *(void *)(a1 + 320);
          int v11 = *(NSObject **)(a1 + 24);
          dispatch_object_t object = v11;
          if (v11) {
            dispatch_retain(v11);
          }
          char v12 = *(std::__shared_weak_count **)(a1 + 16);
          if (!v12 || (uint64_t v13 = *(void *)(a1 + 8), (v14 = std::__shared_weak_count::lock(v12)) == 0)) {
            sub_100088B9C();
          }
          uint64_t v15 = v13 + 96;
          if (!v13) {
            uint64_t v15 = 0;
          }
          uint64_t v50 = v15;
          char v51 = v14;
          unint64_t v16 = *(std::__shared_weak_count **)(a1 + 424);
          uint64_t v48 = *(void *)(a1 + 416);
          char v49 = v16;
          if (v16) {
            atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          char v17 = *(std::__shared_weak_count **)(a1 + 520);
          uint64_t v46 = *(void *)(a1 + 512);
          long long v47 = v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v10 + 424))(&__p, v10, 2, &object, &v50, &v48, &v46);
          long long v18 = __p;
          long long __p = 0uLL;
          uint64_t v19 = *(std::__shared_weak_count **)(a1 + 392);
          *(_OWORD *)(a1 + 384) = v18;
          if (v19)
          {
            sub_10004D2C8(v19);
            if (*((void *)&__p + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&__p + 1));
            }
          }
          if (v47) {
            sub_10004D2C8(v47);
          }
          if (v49) {
            sub_10004D2C8(v49);
          }
          if (v51) {
            sub_10004D2C8(v51);
          }
          if (object) {
            dispatch_release(object);
          }
          long long v43 = 0;
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          if (*(unsigned char *)(a1 + 2664))
          {
            sub_100319F54((uint64_t *)&v43, a1 + 2640);
          }
          else
          {
            uint64_t v44 = 0;
            uint64_t v45 = 0;
            long long v43 = &v44;
          }
          sub_1002D3F44(a1);
          uint64_t v23 = *(void *)(a1 + 384);
          int v24 = *(_DWORD *)(a1 + 2632);
          sub_1002DD40C((uint64_t)&__p, (void *)(a1 + 1616));
          sub_1002DCA80(v42, *(void *)(a1 + 416));
          uint64_t v25 = *(std::__shared_weak_count **)(a1 + 5376);
          uint64_t v40 = *(void *)(a1 + 5368);
          uint64_t v41 = v25;
          if (v25) {
            atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, void ***, uint64_t, long long *, void *, uint64_t *))(*(void *)v23 + 16))(v23, a1 + 2568, a1 + 2464, v24 == 1, a1 + 2320, a1 + 2344, &v43, a1 + 2488, &__p, v42, &v40);
          if (v41) {
            sub_10004D2C8(v41);
          }
          v65[0] = v42;
          sub_10030AFC8((void ***)v65);
          sub_10005CD2C((uint64_t)&__p, *((char **)&__p + 1));
          sub_100058DB0(v38, "Target_TransferCardData_");
          sub_100990A14(&__p);
          uint8_t v26 = (os_log_t *)(a1 + 40);
          sub_100CD5D78((os_log_t *)(a1 + 40), (const char *)v38, (uint64_t)buf, (uint64_t)&__p);
          if (SBYTE7(v61) < 0) {
            operator delete((void *)__p);
          }
          if (v39 < 0) {
            operator delete(v38[0]);
          }
          if (a3) {
            uint64_t v27 = 4;
          }
          else {
            uint64_t v27 = 3;
          }
          (*(void (**)(void, _OWORD *, uint64_t))(**(void **)(a1 + 384) + 96))(*(void *)(a1 + 384), buf, v27);
          memset(v65, 0, sizeof(v65));
          uint64_t v35 = 0;
          uint64_t v36 = 0;
          uint64_t v37 = 0;
          sub_10098FAB8((uint64_t *)buf, (uint64_t)&v35);
          if (v37 == 1)
          {
            std::string::operator=((std::string *)&v65[5], (const std::string *)(v35 + 32));
            uint64_t v64 = 0;
            memset(v63, 0, sizeof(v63));
            long long v61 = 0u;
            long long v62 = 0u;
            long long __p = 0u;
            if (sub_10098E940((uint64_t)buf, (unsigned __int8 **)&v65[5], &__p))
            {
              *(_OWORD *)&v65[3] = v61;
              sub_10098FCF4((char *)buf, (uint64_t)&__dst);
              if (SHIBYTE(v65[2]) < 0) {
                operator delete(v65[0]);
              }
              *(_OWORD *)CFStringRef v65 = __dst;
              v65[2] = v56;
              if (a4) {
                uint64_t v28 = _Block_copy(a4);
              }
              else {
                uint64_t v28 = 0;
              }
              uint64_t v31 = *(void *)(a1 + 384);
              if (SHIBYTE(v65[2]) < 0)
              {
                sub_10004FC84(&__dst, v65[0], (unint64_t)v65[1]);
              }
              else
              {
                long long __dst = *(_OWORD *)v65;
                uint64_t v56 = v65[2];
              }
              long long v57 = *(_OWORD *)&v65[3];
              if (SHIBYTE(v65[7]) < 0)
              {
                sub_10004FC84(&v58, v65[5], (unint64_t)v65[6]);
              }
              else
              {
                long long v58 = *(_OWORD *)&v65[5];
                CFArrayRef v59 = v65[7];
              }
              char v32 = 0;
              uint64_t v33 = 0;
              uint64_t v34 = 0;
              v53[0] = (void **)&v32;
              v53[1] = 0;
              char v32 = (char *)operator new(0x40uLL);
              uint64_t v33 = (uint64_t)v32;
              uint64_t v34 = v32 + 64;
              uint64_t v33 = sub_10030BA7C((uint64_t)&v34, (uint64_t)&__dst, (uint64_t)&__p, (uint64_t)v32);
              v54[0] = off_1019B8F90;
              v54[1] = v28;
              v54[3] = v54;
              (*(void (**)(uint64_t, char **, void *, void, void *))(*(void *)v31 + 232))(v31, &v32, v68, 0, v54);
              sub_10023D374(v54);
              v53[0] = (void **)&v32;
              sub_10030A698(v53);
              if (SHIBYTE(v59) < 0) {
                operator delete((void *)v58);
              }
              if (SHIBYTE(v56) < 0) {
                operator delete((void *)__dst);
              }
            }
            else
            {
              BOOL v30 = *v26;
              if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
              {
                LOWORD(__dst) = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "invalid vinyl info", (uint8_t *)&__dst, 2u);
              }
              a4[2](a4, 6);
            }
            if ((_BYTE)v64)
            {
              *(void *)&long long __dst = &v63[8];
              sub_1000C57C8((void ***)&__dst);
            }
            if ((v63[7] & 0x80000000) != 0) {
              operator delete((void *)v62);
            }
          }
          else
          {
            long long v29 = *v26;
            if (os_log_type_enabled(*v26, OS_LOG_TYPE_ERROR))
            {
              LOWORD(__p) = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "invalid iccid size", (uint8_t *)&__p, 2u);
            }
            a4[2](a4, 6);
          }
          sub_10005CD2C((uint64_t)&v35, v36);
          if (SHIBYTE(v65[7]) < 0) {
            operator delete(v65[5]);
          }
          if (SHIBYTE(v65[2]) < 0) {
            operator delete(v65[0]);
          }
          sub_10023A670((uint64_t)&v43, v44);
        }
        else
        {
          char v22 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
          {
            LOWORD(__p) = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "decode CellularPlanTransferDeviceInfo failed", (uint8_t *)&__p, 2u);
          }
          a4[2](a4, 6);
        }
        if ((_BYTE)v67) {
          sub_1000C52BC((uint64_t)buf);
        }
      }
    }
    else
    {
      uint64_t v20 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#E Vinyl info unavailable", (uint8_t *)buf, 2u);
      }
      a4[2](a4, 16);
    }
  }
  else
  {
    char v21 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E No data path", (uint8_t *)buf, 2u);
    }
    a4[2](a4, 44);
  }
}

void sub_1002E396C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,dispatch_object_t object,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,uint64_t a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a48 < 0) {
    operator delete(__p);
  }
  if (v72) {
    _Block_release(v72);
  }
  sub_10015A318((uint64_t)&a54);
  sub_10005CD2C((uint64_t)&a16, (char *)a17);
  sub_1002E4140((uint64_t)&a66);
  sub_10023A670((uint64_t)&a27, (void *)a28);
  if (LOBYTE(STACK[0x380])) {
    sub_1000C52BC((uint64_t)&a72);
  }
  _Unwind_Resume(a1);
}

BOOL sub_1002E3B1C(uint64_t a1, int a2)
{
  void (***v8)(uint8_t *__return_ptr, void, dispatch_object_t *, uint64_t *, uint64_t);
  NSObject *v9;
  std::__shared_weak_count *v10;
  uint64_t v11;
  std::__shared_weak_count *v12;
  uint64_t v13;
  long long v14;
  std::__shared_weak_count *v15;
  NSObject *v16;
  NSObject *v17;
  os_signpost_id_t v18;
  NSObject *v19;
  long long v20;
  std::__shared_weak_count *v21;
  void *__p;
  char v23;
  uint64_t v24;
  std::__shared_weak_count *v25;
  uint64_t v26;
  std::__shared_weak_count *v27;
  dispatch_object_t object;
  uint64_t v29[2];
  uint64_t v30;
  uint8_t buf[16];
  _OWORD v32[2];
  void v33[2];
  char v34;
  uint8_t v35[16];
  uint8_t *v36;

  LODWORD(v2) = a2;
  v33[0] = 0;
  v33[1] = 0;
  uint64_t v34 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v33);
  if (!v34)
  {
    unint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v6 = "Cannot find CSN";
    goto LABEL_43;
  }
  if (!(*(unsigned int (**)(void, void))(**(void **)(a1 + 304) + 384))(*(void *)(a1 + 304), *(unsigned int *)(a1 + 580)))
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 472))(buf);
    uint64_t v7 = *(void *)&v32[0];
    sub_100347268((uint64_t)buf, *(char **)&buf[8]);
    if (v7) {
      uint64_t v2 = v2;
    }
    else {
      uint64_t v2 = 0;
    }
    goto LABEL_10;
  }
  if ((v2 & 1) == 0)
  {
    unint64_t v4 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v4, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v6 = "Cannot create, delete is required";
LABEL_43:
    _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, v6, buf, 2u);
    return 0;
  }
  uint64_t v2 = 1;
LABEL_10:
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 320) + 640))(v35);
  uint64_t v8 = *(void (****)(uint8_t *__return_ptr, void, dispatch_object_t *, uint64_t *, uint64_t))v35;
  uint64_t v9 = *(NSObject **)(a1 + 24);
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  uint64_t v10 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v10 || (int v11 = *(void *)(a1 + 8), (v12 = std::__shared_weak_count::lock(v10)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v13 = v11 + 80;
  if (!v11) {
    uint64_t v13 = 0;
  }
  uint8_t v26 = v13;
  uint64_t v27 = v12;
  (**v8)(buf, v8, &object, &v26, v2);
  int v14 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 688);
  *(_OWORD *)(a1 + 680) = v14;
  if (v15)
  {
    sub_10004D2C8(v15);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v27) {
    sub_10004D2C8(v27);
  }
  if (object) {
    dispatch_release(object);
  }
  if (*(void *)&v35[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&v35[8]);
  }
  if (*(void *)(a1 + 696))
  {
    unint64_t v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "Leaked jetsam assertion", buf, 2u);
    }
  }
  else
  {
    memset(v32, 0, sizeof(v32));
    char v17 = *(NSObject **)(a1 + 40);
    long long v18 = os_signpost_id_generate(v17);
    if (v18 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
    {
      uint64_t v19 = *(NSObject **)(a1 + 40);
      if (os_signpost_enabled(v19))
      {
        *(_WORD *)uint64_t v35 = 0;
        _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v19, OS_SIGNPOST_INTERVAL_BEGIN, v18, "CellularPlanProvisioningOngoing", (const char *)&unk_1017DEDA7, v35, 2u);
      }
    }
    *(void *)uint64_t v35 = off_1019BA8E0;
    uint64_t v36 = v35;
    *(void *)long long buf = v18;
    *(void *)&uint8_t buf[8] = os_retain(v17);
    sub_1000336E8((uint64_t)v32, (uint64_t)v35);
    sub_100033A10(v35);
    (***(void (****)(uint64_t *__return_ptr))(a1 + 320))(&v24);
    sub_100058DB0(&__p, "Provisioning_Operation_Ongoing");
    v29[0] = *(void *)buf;
    v29[1] = *(void *)&buf[8];
    sub_1000336E8((uint64_t)&v30, (uint64_t)v32);
    memset(buf, 0, sizeof(buf));
    sub_100033AF4(v32);
    Registry::createXpcJetsamAssertion();
    uint64_t v20 = *(_OWORD *)v35;
    memset(v35, 0, sizeof(v35));
    char v21 = *(std::__shared_weak_count **)(a1 + 704);
    *(_OWORD *)(a1 + 696) = v20;
    if (v21)
    {
      sub_10004D2C8(v21);
      if (*(void *)&v35[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v35[8]);
      }
    }
    sub_1000339DC(v29);
    if (v23 < 0) {
      operator delete(__p);
    }
    if (v25) {
      sub_10004D2C8(v25);
    }
    sub_1000339DC((uint64_t *)buf);
  }
  return 1;
}

void sub_1002E3FC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, dispatch_object_t object, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  sub_1000339DC(&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_1002E4054(uint64_t *a1)
{
  unint64_t v2 = a1[1];
  if (v2 >= a1[2])
  {
    uint64_t result = sub_10030B97C(a1);
  }
  else
  {
    sub_100058DB0((void *)a1[1], "89");
    uint64_t result = v2 + 24;
    a1[1] = v2 + 24;
  }
  a1[1] = result;
  return result;
}

void sub_1002E40A8(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

const void **sub_1002E40B0(uint64_t a1, uint64_t a2)
{
  sub_100083DA4((const void **)(a1 + 48), (const void **)(a2 + 48));

  return sub_100083DA4((const void **)(a1 + 56), (const void **)(a2 + 56));
}

const void **sub_1002E40F8(uint64_t a1)
{
  uint64_t v1 = (const void **)(a1 + 48);
  sub_1000558F4((const void **)(a1 + 56));

  return sub_1000558F4(v1);
}

const void **sub_1002E4134(uint64_t a1, uint64_t a2, char a3, const void **a4, const void **a5, char a6, uint64_t a7)
{
  return sub_1002E2718((void *)(a1 - 48), 0, a3, a4, a5, a6, a7);
}

uint64_t sub_1002E4140(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

const void **sub_1002E4184(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

const void **sub_1002E41B8(void *a1, char a2, char a3, char a4, char a5, const void **a6, const void **a7, const void **a8, const void **a9, char a10, const void **a11, uint64_t a12, uint64_t a13)
{
  v25[0] = _NSConcreteStackBlock;
  v25[1] = 1174405120;
  v25[2] = sub_1002E4398;
  v25[3] = &unk_1019B65C0;
  char v31 = a4;
  v25[4] = a13;
  v25[5] = a1;
  sub_100083DA4(&v26, a6);
  char v32 = a3;
  sub_100083DA4(&v27, a7);
  sub_100083DA4(&v28, a8);
  sub_100083DA4(&v29, a9);
  sub_100083DA4(&v30, a11);
  char v33 = a2;
  char v34 = a10;
  char v35 = a5;
  uint64_t v19 = (std::__shared_weak_count *)a1[2];
  if (!v19 || (uint64_t v20 = a1[1], (v21 = std::__shared_weak_count::lock(v19)) == 0)) {
    sub_100088B9C();
  }
  char v22 = v21;
  uint64_t v23 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v20;
  uint64_t v37 = v22;
  atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v25;
  dispatch_async(v23, block);
  if (v37) {
    sub_10004D2C8(v37);
  }
  sub_10004D2C8(v22);
  sub_1000558F4(&v30);
  sub_1000558F4(&v29);
  sub_1000558F4(&v28);
  sub_1000558F4(&v27);
  return sub_1000558F4(&v26);
}

void sub_1002E4398(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  char v63 = 0;
  uint64_t v62 = 0;
  sub_100324590(&v62);
  uint64_t v3 = sub_1002DF3BC(v2, *(unsigned char *)(a1 + 88));
  if (v3
    || !*(unsigned char *)(a1 + 88)
    && !(*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 320) + 48))(*(void *)(v2 + 320), v3)
    || (*(void *)&v51[0] = 0, uint64_t v4 = *(void *)(a1 + 48), sub_1000558F4((const void **)v51), !v4)
    || *(_DWORD *)(v2 + 2632) == 1 && !*(unsigned char *)(a1 + 89)
    || (v82[0] = 0,
        v82[1] = 0,
        char v83 = 0,
        (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v82),
        !v83))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    goto LABEL_3;
  }
  memset(v51, 0, 24);
  ctu::cf::assign();
  *(void *)&long long v64 = *((void *)&v51[0] + 1);
  uint64_t v5 = *(void *)&v51[0];
  *(void *)((char *)&v64 + 7) = *(void *)((char *)v51 + 15);
  char v6 = BYTE7(v51[1]);
  uint64_t v7 = v62;
  if (*(char *)(v62 + 23) < 0) {
    operator delete(*(void **)v62);
  }
  *(void *)uint64_t v7 = v5;
  *(void *)(v7 + 8) = v64;
  *(void *)(v7 + 15) = *(void *)((char *)&v64 + 7);
  *(unsigned char *)(v7 + 23) = v6;
  if (*(void *)(a1 + 56)) {
    uint64_t v8 = sub_1000810B8;
  }
  else {
    uint64_t v8 = 0;
  }
  if (v8)
  {
    memset(v51, 0, 24);
    ctu::cf::assign();
    *(void *)&long long v64 = *((void *)&v51[0] + 1);
    uint64_t v9 = *(void *)&v51[0];
    *(void *)((char *)&v64 + 7) = *(void *)((char *)v51 + 15);
    char v10 = BYTE7(v51[1]);
    uint64_t v11 = v62;
    if (*(char *)(v62 + 71) < 0) {
      operator delete(*(void **)(v62 + 48));
    }
    uint64_t v12 = v64;
    *(void *)(v11 + 48) = v9;
    *(void *)(v11 + 56) = v12;
    *(void *)(v11 + 63) = *(void *)((char *)&v64 + 7);
    *(unsigned char *)(v11 + 71) = v10;
  }
  if (*(void *)(a1 + 64)) {
    uint64_t v13 = sub_1000810B8;
  }
  else {
    uint64_t v13 = 0;
  }
  if (v13)
  {
    memset(v51, 0, 24);
    ctu::cf::assign();
    *(void *)&long long v64 = *((void *)&v51[0] + 1);
    uint64_t v14 = *(void *)&v51[0];
    *(void *)((char *)&v64 + 7) = *(void *)((char *)v51 + 15);
    char v15 = BYTE7(v51[1]);
    uint64_t v16 = v62;
    if (*(char *)(v62 + 47) < 0) {
      operator delete(*(void **)(v62 + 24));
    }
    uint64_t v17 = v64;
    *(void *)(v16 + 24) = v14;
    *(void *)(v16 + 32) = v17;
    *(void *)(v16 + 39) = *(void *)((char *)&v64 + 7);
    *(unsigned char *)(v16 + 47) = v15;
  }
  if (*(void *)(a1 + 72)) {
    long long v18 = sub_1000810B8;
  }
  else {
    long long v18 = 0;
  }
  if (v18)
  {
    memset(v51, 0, 24);
    ctu::cf::assign();
    *(void *)&long long v64 = *((void *)&v51[0] + 1);
    uint64_t v19 = *(void *)&v51[0];
    *(void *)((char *)&v64 + 7) = *(void *)((char *)v51 + 15);
    char v20 = BYTE7(v51[1]);
    uint64_t v21 = v62;
    if (*(char *)(v62 + 95) < 0) {
      operator delete(*(void **)(v62 + 72));
    }
    uint64_t v22 = v64;
    *(void *)(v21 + 72) = v19;
    *(void *)(v21 + 80) = v22;
    *(void *)(v21 + 87) = *(void *)((char *)&v64 + 7);
    *(unsigned char *)(v21 + 95) = v20;
  }
  if (*(void *)(a1 + 80)) {
    uint64_t v23 = sub_1000810B8;
  }
  else {
    uint64_t v23 = 0;
  }
  if (v23)
  {
    int v24 = (uint64_t *)v62;
    memset(v51, 0, 24);
    ctu::cf::assign();
    *(void *)&long long v64 = *((void *)&v51[0] + 1);
    uint64_t v25 = *(void *)&v51[0];
    *(void *)((char *)&v64 + 7) = *(void *)((char *)v51 + 15);
    char v26 = BYTE7(v51[1]);
    unint64_t v27 = v24[14];
    unint64_t v28 = v24[13];
    if (v28 >= v27)
    {
      uint64_t v30 = v24[12];
      unint64_t v31 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v28 - v30) >> 3);
      unint64_t v32 = v31 + 1;
      if (v31 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      unint64_t v33 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v27 - v30) >> 3);
      if (2 * v33 > v32) {
        unint64_t v32 = 2 * v33;
      }
      if (v33 >= 0x555555555555555) {
        unint64_t v34 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v34 = v32;
      }
      *(void *)&long long v52 = v24 + 14;
      if (v34) {
        char v35 = (char *)sub_10004812C((uint64_t)(v24 + 14), v34);
      }
      else {
        char v35 = 0;
      }
      uint64_t v36 = &v35[24 * v31];
      *(void *)&v51[0] = v35;
      *((void *)&v51[0] + 1) = v36;
      *((void *)&v51[1] + 1) = &v35[24 * v34];
      *(void *)uint64_t v36 = v25;
      *((void *)v36 + 1) = v64;
      *(void *)(v36 + 15) = *(void *)((char *)&v64 + 7);
      v36[23] = v26;
      *(void *)&v51[1] = v36 + 24;
      sub_100048204(v24 + 12, v51);
      uint64_t v29 = v24[13];
      sub_100048174((uint64_t)v51);
    }
    else
    {
      *(void *)unint64_t v28 = *(void *)&v51[0];
      *(void *)(v28 + 8) = v64;
      *(void *)(v28 + 15) = *(void *)((char *)&v64 + 7);
      *(unsigned char *)(v28 + 23) = v26;
      uint64_t v29 = v28 + 24;
      v24[13] = v28 + 24;
    }
    v24[13] = v29;
  }
  v81[0] = 0;
  BOOL v37 = sub_1002DE6C4(v2, (uint64_t)v81);
  *(unsigned char *)(v62 + 123) = v37;
  sub_1000C5D34(v81);
  uint64_t v38 = v62;
  if (*(char *)(v62 + 71) < 0)
  {
    if (!*(void *)(v62 + 56))
    {
LABEL_59:
      unint64_t v39 = *(void *)(v62 + 104);
      if (v39 >= *(void *)(v62 + 112))
      {
        uint64_t v40 = sub_10030B97C((uint64_t *)(v62 + 96));
      }
      else
      {
        sub_100058DB0(*(void **)(v62 + 104), "89");
        uint64_t v40 = v39 + 24;
        *(void *)(v38 + 104) = v39 + 24;
      }
      *(void *)(v38 + 104) = v40;
    }
  }
  else if (!*(unsigned char *)(v62 + 71))
  {
    goto LABEL_59;
  }
  uint64_t v41 = (char *)encodeProfileEligibilityCheckAction();
  sub_10003ED78((std::string *)(v62 + 160), v41);
  uint64_t v61 = 0;
  long long v59 = 0u;
  long long v60 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v52 = 0u;
  memset(v51, 0, sizeof(v51));
  BOOL v42 = *(_DWORD *)(v2 + 2632) == 1;
  if (*(unsigned char *)(a1 + 90) == 10)
  {
    LODWORD(v64) = *(_DWORD *)(v2 + 580);
    WORD2(v64) = 1802;
  }
  else
  {
    LODWORD(v64) = *(_DWORD *)(v2 + 580);
    WORD2(v64) = 770;
  }
  uint64_t v66 = 0;
  *((void *)&v64 + 1) = 0;
  uint64_t v65 = 0;
  char v67 = 4;
  long long v68 = 0uLL;
  long long v69 = 0uLL;
  long long v70 = 0uLL;
  long long v71 = 0uLL;
  long long v72 = 0uLL;
  long long v73 = 0uLL;
  int v74 = 0;
  uint64_t v77 = 0;
  long long __p = 0;
  uint64_t v76 = 0;
  char v78 = 0;
  BOOL v79 = v42;
  char v80 = 0;
  sub_1002E4C70((uint64_t)v51, (uint64_t)&v64);
  if (SHIBYTE(v77) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v73) < 0) {
    operator delete(*((void **)&v72 + 1));
  }
  if (SBYTE7(v72) < 0) {
    operator delete((void *)v71);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete(*((void **)&v69 + 1));
  }
  if (SBYTE7(v69) < 0) {
    operator delete((void *)v68);
  }
  if (SHIBYTE(v66) < 0) {
    operator delete(*((void **)&v64 + 1));
  }
  if (*(void *)(v2 + 680))
  {
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    uint64_t v43 = *(void *)(v2 + 680);
    uint64_t v49 = v62;
    uint64_t v50 = v63;
    if (v63) {
      atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10030BBA0(v48, (uint64_t)v51);
    (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v43 + 192))(v43, &v49, v48);
    sub_10030AEBC((uint64_t)v48);
    if (v50) {
      sub_10004D2C8(v50);
    }
  }
  else
  {
    if (sub_1002E3B1C(v2, *(unsigned __int8 *)(a1 + 91)))
    {
      *(unsigned char *)(v62 + 122) = *(unsigned char *)(a1 + 92);
      (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
      if (*(char *)(v2 + 615) < 0)
      {
        **(unsigned char **)(v2 + 592) = 0;
        *(void *)(v2 + 600) = 0;
      }
      else
      {
        *(unsigned char *)(v2 + 592) = 0;
        *(unsigned char *)(v2 + 615) = 0;
      }
      if (*(unsigned char *)(a1 + 90) == 10)
      {
        *(unsigned char *)(v2 + 5266) = 1;
      }
      else
      {
        *(unsigned char *)(v2 + 1706) = 1;
        sub_1002DA408(v2);
      }
      uint64_t v44 = *(void *)(v2 + 680);
      uint64_t v46 = v62;
      long long v47 = v63;
      if (v63) {
        atomic_fetch_add_explicit(&v63->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_10030BBA0(v45, (uint64_t)v51);
      (*(void (**)(uint64_t, void *, uint64_t *, void, unsigned char *))(*(void *)v44 + 32))(v44, v82, &v46, 0, v45);
      sub_10030AEBC((uint64_t)v45);
      if (v47) {
        sub_10004D2C8(v47);
      }
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  sub_10030AEBC((uint64_t)v51);
LABEL_3:
  if (v63) {
    sub_10004D2C8(v63);
  }
}

void sub_1002E4B8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,std::__shared_weak_count *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59)
{
  if (a33) {
    sub_10004D2C8(a33);
  }
  sub_10030AEBC((uint64_t)&a59);
  if (STACK[0x250]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E4C70(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a1 + 176);
  __int16 v5 = *(_WORD *)(a2 + 4);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  *(_WORD *)(a1 + 4) = v5;
  uint64_t v6 = a1 + 8;
  uint64_t v7 = (long long *)(a2 + 8);
  if (v4)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)v6);
    }
    long long v8 = *v7;
    *(void *)(v6 + 16) = *((void *)v7 + 2);
    *(_OWORD *)uint64_t v6 = v8;
    *(unsigned char *)(a2 + 31) = 0;
    *(unsigned char *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    uint64_t v9 = (void **)(a1 + 40);
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*v9);
    }
    long long v10 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)uint64_t v9 = v10;
    *(unsigned char *)(a2 + 63) = 0;
    *(unsigned char *)(a2 + 40) = 0;
    uint64_t v11 = (void **)(a1 + 64);
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*v11);
    }
    long long v12 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)uint64_t v11 = v12;
    *(unsigned char *)(a2 + 87) = 0;
    *(unsigned char *)(a2 + 64) = 0;
    uint64_t v13 = (void **)(a1 + 88);
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*v13);
    }
    long long v14 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)uint64_t v13 = v14;
    *(unsigned char *)(a2 + 111) = 0;
    *(unsigned char *)(a2 + 88) = 0;
    char v15 = (void **)(a1 + 112);
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*v15);
    }
    long long v16 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)char v15 = v16;
    *(unsigned char *)(a2 + 135) = 0;
    *(unsigned char *)(a2 + 112) = 0;
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    uint64_t v17 = (void **)(a1 + 144);
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*v17);
    }
    long long v18 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)uint64_t v17 = v18;
    *(unsigned char *)(a2 + 167) = 0;
    *(unsigned char *)(a2 + 144) = 0;
    __int16 v19 = *(_WORD *)(a2 + 168);
    *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
    *(_WORD *)(a1 + 168) = v19;
  }
  else
  {
    long long v20 = *v7;
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)uint64_t v6 = v20;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)uint64_t v7 = 0;
    *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
    long long v21 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v21;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    long long v22 = *(_OWORD *)(a2 + 64);
    *(void *)(a1 + 80) = *(void *)(a2 + 80);
    *(_OWORD *)(a1 + 64) = v22;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 64) = 0;
    long long v23 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v23;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 88) = 0;
    long long v24 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v24;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 128) = 0;
    *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
    long long v25 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)(a1 + 144) = v25;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 144) = 0;
    __int16 v26 = *(_WORD *)(a2 + 168);
    *(unsigned char *)(a1 + 170) = *(unsigned char *)(a2 + 170);
    *(_WORD *)(a1 + 168) = v26;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return a1;
}

const void **sub_1002E4EB0(const void **a1, const void **a2)
{
  sub_100083DA4(a1 + 6, a2 + 6);
  sub_100083DA4(a1 + 7, a2 + 7);
  sub_100083DA4(a1 + 8, a2 + 8);
  sub_100083DA4(a1 + 9, a2 + 9);

  return sub_100083DA4(a1 + 10, a2 + 10);
}

const void **sub_1002E4F1C(const void **a1)
{
  uint64_t v1 = a1 + 6;
  uint64_t v2 = a1 + 7;
  uint64_t v3 = a1 + 8;
  int v4 = a1 + 9;
  sub_1000558F4(a1 + 10);
  sub_1000558F4(v4);
  sub_1000558F4(v3);
  sub_1000558F4(v2);

  return sub_1000558F4(v1);
}

const void **sub_1002E4F84(uint64_t a1, char a2, char a3, char a4, char a5, const void **a6, const void **a7, const void **a8, const void **a9, char a10, const void **a11, uint64_t a12, uint64_t a13)
{
  return sub_1002E41B8((void *)(a1 - 48), a2, a3, a4, a5, a6, a7, a8, a9, a10, a11, a12, a13);
}

void sub_1002E4FAC(uint64_t a1, long long *a2, uint64_t a3)
{
  uint64_t v6 = a1;
  sub_10030BBF8(v7, a2);
  sub_10031ECD8((uint64_t)&v8, a3);
  __int16 v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E51F8(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002E522C(uint64_t a1, long long *a2, uint64_t a3)
{
}

const void **sub_1002E5234(void *a1, const void **a2, const void **a3, const void **a4, const void **a5, const void **a6, const void **a7, const void **a8, char a9, uint64_t a10)
{
  v23[0] = _NSConcreteStackBlock;
  v23[1] = 1174405120;
  void v23[2] = sub_1002E5434;
  void v23[3] = &unk_1019B6628;
  v23[5] = a1;
  sub_100083DA4(&v24, a8);
  v23[4] = a10;
  sub_100083DA4(&v25, a6);
  sub_100083DA4(&v26, a2);
  sub_100083DA4(&v27, a7);
  sub_100083DA4(&v28, a3);
  sub_100083DA4(&v29, a4);
  sub_100083DA4(&v30, a5);
  char v31 = a9;
  uint64_t v17 = (std::__shared_weak_count *)a1[2];
  if (!v17 || (v18 = a1[1], (__int16 v19 = std::__shared_weak_count::lock(v17)) == 0)) {
    sub_100088B9C();
  }
  long long v20 = v19;
  long long v21 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v18;
  unint64_t v33 = v20;
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v23;
  dispatch_async(v21, block);
  if (v33) {
    sub_10004D2C8(v33);
  }
  sub_10004D2C8(v20);
  sub_1000558F4(&v30);
  sub_1000558F4(&v29);
  sub_1000558F4(&v28);
  sub_1000558F4(&v27);
  sub_1000558F4(&v26);
  sub_1000558F4(&v25);
  return sub_1000558F4(&v24);
}

void sub_1002E5434(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    HIDWORD(buf[1]) = 0;
    buf[2] = 0;
    ctu::cf::assign();
    *(_OWORD *)long long __p = 0u;
    *(void *)&long long v139 = 0;
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = __p;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I App Name: %s", (uint8_t *)buf, 0xCu);
    if (SBYTE7(v139) < 0) {
      operator delete(__p[0]);
    }
  }
  if (sub_1002E695C(v2))
  {
    uint64_t v126 = 0;
    CFArrayRef v127 = 0;
    sub_100324590(&v126);
    if (*(void *)(a1 + 56)) {
      int v4 = sub_1000810B8;
    }
    else {
      int v4 = 0;
    }
    if (!v4)
    {
      __int16 v16 = 0;
      __int16 v17 = 0;
      int v18 = 0;
      goto LABEL_91;
    }
    __p[1] = 0;
    __p[0] = 0;
    *(void *)&long long v139 = 0;
    memset(buf, 0, 24);
    ctu::cf::assign();
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    *(void *)&long long v139 = buf[2];
    (***(void (****)(void *__return_ptr))(v2 + 320))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)buf[0]);
    uint64_t v6 = ServiceMap;
    if (v7 < 0)
    {
      uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long v128 = v7;
    uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v128);
    if (v11)
    {
      uint64_t v13 = v11[3];
      long long v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v6);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v12);
        char v14 = 0;
        goto LABEL_21;
      }
    }
    else
    {
      uint64_t v13 = 0;
    }
    std::mutex::unlock(v6);
    long long v12 = 0;
    char v14 = 1;
LABEL_21:
    if (buf[1]) {
      sub_10004D2C8((std::__shared_weak_count *)buf[1]);
    }
    if (v13)
    {
      (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, void))(*(void *)v13 + 96))(&v125, v13, 8, *(void *)(a1 + 56));
      if ((*(unsigned int (**)(uint64_t, uint64_t, const void *))(*(void *)v13 + 56))(v13, 8, v125))
      {
        if (*(unsigned char *)(v2 + 2289) != 1)
        {
          (*(void (**)(void *__return_ptr))(**(void **)(v2 + 160) + 64))(buf);
          if (buf[0]) {
            (*(void (**)(void))(*(void *)buf[0] + 112))(buf[0]);
          }
          if (buf[1]) {
            sub_10004D2C8((std::__shared_weak_count *)buf[1]);
          }
LABEL_53:
          sub_1000558F4(&v125);
          int v18 = 0;
          char v25 = 0;
          __int16 v17 = 0;
          __int16 v16 = 0;
          if (v14)
          {
LABEL_87:
            if (SBYTE7(v139) < 0)
            {
              operator delete(__p[0]);
              if ((v25 & 1) == 0) {
                goto LABEL_102;
              }
            }
            else if ((v25 & 1) == 0)
            {
LABEL_102:
              if (v127) {
                sub_10004D2C8(v127);
              }
              return;
            }
LABEL_91:
            uint64_t v50 = sub_1002DF3BC(v2, 0);
            if (v50
              || !(*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 320) + 48))(*(void *)(v2 + 320), v50)|| (buf[0] = 0, uint64_t v51 = *(void *)(a1 + 64), sub_1000558F4((const void **)buf), !v51)|| (v166 = 0uLL, v167 = 0, (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&v166), !v167))
            {
LABEL_101:
              (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
              goto LABEL_102;
            }
            *(void *)&long long v128 = 0;
            if (*(void *)(a1 + 72))
            {
              memset(buf, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)long long __p = *(_OWORD *)buf;
              *(void *)&long long v139 = buf[2];
              ctu::hex(buf, (ctu *)&v166, (const void *)0x10, v52);
              BOOL v53 = sub_10001D294((unsigned __int8 *)__p, (unsigned __int8 *)buf);
              if (SHIBYTE(buf[2]) < 0) {
                operator delete((void *)buf[0]);
              }
              if (SBYTE7(v139) < 0) {
                operator delete(__p[0]);
              }
              sub_1000558F4((const void **)&v128);
              if (!v53) {
                goto LABEL_101;
              }
            }
            else
            {
              sub_1000558F4((const void **)&v128);
            }
            memset(buf, 0, 24);
            ctu::cf::assign();
            uint64_t v54 = buf[0];
            __p[0] = (void *)buf[1];
            *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
            char v55 = HIBYTE(buf[2]);
            uint64_t v56 = v126;
            if (*(char *)(v126 + 23) < 0) {
              operator delete(*(void **)v126);
            }
            *(void *)uint64_t v56 = v54;
            *(void **)(v56 + 8) = __p[0];
            *(void **)(v56 + 15) = *(void **)((char *)__p + 7);
            *(unsigned char *)(v56 + 23) = v55;
            if (*(void *)(a1 + 80)) {
              long long v57 = sub_1000810B8;
            }
            else {
              long long v57 = 0;
            }
            if (v57)
            {
              memset(buf, 0, 24);
              ctu::cf::assign();
              uint64_t v58 = buf[0];
              __p[0] = (void *)buf[1];
              *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
              char v59 = HIBYTE(buf[2]);
              uint64_t v60 = v126;
              if (*(char *)(v126 + 71) < 0) {
                operator delete(*(void **)(v126 + 48));
              }
              uint64_t v61 = __p[0];
              *(void *)(v60 + 48) = v58;
              *(void *)(v60 + 56) = v61;
              *(void **)(v60 + 63) = *(void **)((char *)__p + 7);
              *(unsigned char *)(v60 + 71) = v59;
            }
            if (*(void *)(a1 + 88)) {
              uint64_t v62 = sub_1000810B8;
            }
            else {
              uint64_t v62 = 0;
            }
            if (v62)
            {
              memset(buf, 0, 24);
              ctu::cf::assign();
              uint64_t v63 = buf[0];
              __p[0] = (void *)buf[1];
              *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
              char v64 = HIBYTE(buf[2]);
              uint64_t v65 = v126;
              if (*(char *)(v126 + 47) < 0) {
                operator delete(*(void **)(v126 + 24));
              }
              uint64_t v66 = __p[0];
              *(void *)(v65 + 24) = v63;
              *(void *)(v65 + 32) = v66;
              *(void **)(v65 + 39) = *(void **)((char *)__p + 7);
              *(unsigned char *)(v65 + 47) = v64;
            }
            if (*(void *)(a1 + 96)) {
              char v67 = sub_1000810B8;
            }
            else {
              char v67 = 0;
            }
            if (v67)
            {
              memset(buf, 0, 24);
              ctu::cf::assign();
              uint64_t v68 = buf[0];
              __p[0] = (void *)buf[1];
              *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
              char v69 = HIBYTE(buf[2]);
              uint64_t v70 = v126;
              if (*(char *)(v126 + 95) < 0) {
                operator delete(*(void **)(v126 + 72));
              }
              long long v71 = __p[0];
              *(void *)(v70 + 72) = v68;
              *(void *)(v70 + 80) = v71;
              *(void **)(v70 + 87) = *(void **)((char *)__p + 7);
              *(unsigned char *)(v70 + 95) = v69;
            }
            v165[0] = 0;
            BOOL v72 = sub_1002DE6C4(v2, (uint64_t)v165);
            *(unsigned char *)(v126 + 123) = v72;
            sub_1000C5D34(v165);
            if (*(char *)(v2 + 615) < 0)
            {
              **(unsigned char **)(v2 + 592) = 0;
              *(void *)(v2 + 600) = 0;
            }
            else
            {
              *(unsigned char *)(v2 + 592) = 0;
              *(unsigned char *)(v2 + 615) = 0;
            }
            if (sub_1002E6B08((const void **)(v126 + 192), "5001"))
            {
              sub_1002E4054((uint64_t *)(v126 + 96));
              *(unsigned char *)(v126 + 123) = 0;
            }
            else
            {
              if (*(void *)(a1 + 56)) {
                long long v73 = sub_1000810B8;
              }
              else {
                long long v73 = 0;
              }
              if (v73)
              {
                memset(buf, 0, 24);
                ctu::cf::assign();
                uint64_t v74 = buf[0];
                __p[0] = (void *)buf[1];
                *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
                char v75 = HIBYTE(buf[2]);
                if (*(char *)(v2 + 615) < 0) {
                  operator delete(*(void **)(v2 + 592));
                }
                *(void *)(v2 + 592) = v74;
                *(void **)(v2 + 600) = __p[0];
                *(void **)(v2 + 607) = *(void **)((char *)__p + 7);
                *(unsigned char *)(v2 + 615) = v75;
                sub_1002E6B80((uint64_t *)(v126 + 96), (long long *)(v2 + 592));
              }
            }
            uint64_t v76 = v126;
            *(unsigned char *)(v126 + 122) = *(unsigned char *)(a1 + 104) != 2;
            if (*(char *)(v76 + 71) < 0) {
              uint64_t v77 = *(void *)(v76 + 56);
            }
            else {
              uint64_t v77 = *(unsigned __int8 *)(v76 + 71);
            }
            if (!v77) {
              sub_1002E4054((uint64_t *)(v76 + 96));
            }
            char v78 = (char *)encodeProfileEligibilityCheckAction();
            sub_10003ED78((std::string *)(v126 + 160), v78);
            BOOL v79 = (unsigned char *)(v2 + 5007);
            uint64_t v81 = (const void **)(a1 + 48);
            uint64_t v80 = *(void *)(a1 + 48);
            *(unsigned char *)(v2 + 5008) = *(unsigned char *)(a1 + 104);
            if (v80) {
              v82 = sub_1000810B8;
            }
            else {
              v82 = 0;
            }
            if (v82)
            {
              memset(buf, 0, 24);
              ctu::cf::assign();
              uint64_t v83 = buf[0];
              __p[0] = (void *)buf[1];
              *(void **)((char *)__p + 7) = *(void **)((char *)&buf[1] + 7);
              char v84 = HIBYTE(buf[2]);
              if ((char)*v79 < 0) {
                operator delete(*(void **)(v2 + 4984));
              }
              *(void *)(v2 + 4984) = v83;
              *(void **)(v2 + 4992) = __p[0];
              *(void **)(v2 + 4999) = *(void **)((char *)__p + 7);
              unsigned char *v79 = v84;
              uint64_t v81 = (const void **)(a1 + 48);
            }
            uint64_t v164 = 0;
            long long v162 = 0u;
            long long v163 = 0u;
            long long v160 = 0u;
            long long v161 = 0u;
            long long v158 = 0u;
            long long v159 = 0u;
            long long v156 = 0u;
            long long v157 = 0u;
            long long v155 = 0u;
            memset(buf, 0, sizeof(buf));
            int v85 = *(unsigned __int8 *)(a1 + 104);
            if (v85 == 2)
            {
              BOOL v87 = *(_DWORD *)(v2 + 2632) == 1;
              LODWORD(__p[0]) = *(_DWORD *)(v2 + 580);
              __int16 v88 = 1030;
            }
            else
            {
              if (v85 != 1)
              {
                if (!*(unsigned char *)(a1 + 104))
                {
                  BOOL v86 = *(_DWORD *)(v2 + 2632) == 1;
                  LODWORD(__p[0]) = *(_DWORD *)(v2 + 580);
                  WORD2(__p[0]) = 263;
                  __p[1] = 0;
                  long long v139 = 0uLL;
                  char v140 = 4;
                  long long v141 = 0uLL;
                  long long v142 = 0uLL;
                  long long v143 = 0uLL;
                  long long v144 = 0uLL;
                  long long v145 = 0uLL;
                  long long v146 = 0uLL;
                  int v147 = 0;
                  uint64_t v150 = 0;
                  uint64_t v148 = 0;
                  uint64_t v149 = 0;
                  char v151 = 0;
                  BOOL v152 = v86;
                  char v153 = 0;
                  sub_1002E4C70((uint64_t)buf, (uint64_t)__p);
                  sub_1002DB328((uint64_t)__p);
                  std::string::operator=((std::string *)&buf[1], (const std::string *)(v2 + 4984));
                }
LABEL_161:
                v89 = *(void **)(a1 + 32);
                if (v89) {
                  v89 = _Block_copy(v89);
                }
                uint64_t v90 = *(const void **)(v2 + 4976);
                *(void *)(v2 + 4976) = v89;
                if (v90) {
                  _Block_release(v90);
                }
                sub_1002E6BC0(v2 + 4712, v126);
                sub_10030C024(v2 + 5016, (uint64_t)buf);
                if (sub_1002E6B08((const void **)(v126 + 192), "5001"))
                {
                  uint64_t v91 = v126;
                  v92 = v127;
                  v117[0] = v126;
                  v117[1] = (uint64_t)v127;
                  if (v127)
                  {
                    atomic_fetch_add_explicit(&v127->__shared_owners_, 1uLL, memory_order_relaxed);
                    uint64_t v93 = v127;
                  }
                  else
                  {
                    uint64_t v93 = 0;
                  }
                  aBlock[0] = _NSConcreteStackBlock;
                  aBlock[1] = 1174405120;
                  aBlock[2] = sub_1002E6EC4;
                  aBlock[3] = &unk_1019B65F0;
                  aBlock[4] = v2;
                  aBlock[5] = v91;
                  v112 = v93;
                  if (v93) {
                    atomic_fetch_add_explicit(&v93->__shared_owners_, 1uLL, memory_order_relaxed);
                  }
                  sub_100083DA4(&v113, v81);
                  __int16 v115 = v17 | (v16 << 8);
                  int v114 = v18;
                  long long v98 = _Block_copy(aBlock);
                  v116 = v98;
                  sub_1002E6C98(v2, &v166, v117, &v116);
                  if (v98) {
                    _Block_release(v98);
                  }
                  if (v92) {
                    sub_10004D2C8(v92);
                  }
                  sub_1000558F4(&v113);
                  if (v112) {
                    sub_10004D2C8(v112);
                  }
LABEL_198:
                  sub_10030AEBC((uint64_t)buf);
                  goto LABEL_102;
                }
                *(_OWORD *)long long __p = 0u;
                long long v139 = 0u;
                (*(void (**)(void **__return_ptr))(**(void **)(v2 + 304) + 400))(__p);
                char v94 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 104))(*(void *)(v2 + 320));
                if (BYTE8(v139)) {
                  char v95 = v94;
                }
                else {
                  char v95 = 1;
                }
                if (v95) {
                  goto LABEL_178;
                }
                v96 = (void *)BYTE7(v139);
                if (SBYTE7(v139) < 0) {
                  v96 = __p[1];
                }
                if (!v96)
                {
LABEL_178:
                  if (*(unsigned char *)(a1 + 104) == 2)
                  {
                    long long v136 = v166;
                    char v137 = v167;
                    memset(v110, 0, sizeof(v110));
                    long long v128 = 0uLL;
                    uint64_t v129 = 0;
                    ctu::cf::assign();
                    long long v108 = v128;
                    uint64_t v109 = v129;
                    sub_1002E2134(v2, (uint64_t)&v136, 11, 0, (uint64_t)v110, (uint64_t)&v108);
                    if (SHIBYTE(v109) < 0)
                    {
                      v97 = (void **)&v108;
                      goto LABEL_194;
                    }
                  }
                  else
                  {
                    long long v134 = v166;
                    char v135 = v167;
                    memset(v107, 0, sizeof(v107));
                    long long v128 = 0uLL;
                    uint64_t v129 = 0;
                    ctu::cf::assign();
                    long long v105 = v128;
                    uint64_t v106 = v129;
                    sub_1002E2134(v2, (uint64_t)&v134, 4, 0, (uint64_t)v107, (uint64_t)&v105);
                    if (SHIBYTE(v106) < 0)
                    {
                      v97 = (void **)&v105;
                      goto LABEL_194;
                    }
                  }
                }
                else if (*(unsigned char *)(a1 + 104) == 2)
                {
                  long long v132 = v166;
                  char v133 = v167;
                  memset(v104, 0, sizeof(v104));
                  long long v128 = 0uLL;
                  uint64_t v129 = 0;
                  ctu::cf::assign();
                  long long v102 = v128;
                  uint64_t v103 = v129;
                  sub_1002E2134(v2, (uint64_t)&v132, 10, 0, (uint64_t)v104, (uint64_t)&v102);
                  if (SHIBYTE(v103) < 0)
                  {
                    v97 = (void **)&v102;
LABEL_194:
                    operator delete(*v97);
                  }
                }
                else
                {
                  long long v130 = v166;
                  char v131 = v167;
                  memset(v101, 0, sizeof(v101));
                  long long v128 = 0uLL;
                  uint64_t v129 = 0;
                  ctu::cf::assign();
                  long long v99 = v128;
                  uint64_t v100 = v129;
                  sub_1002E2134(v2, (uint64_t)&v130, 3, 0, (uint64_t)v101, (uint64_t)&v99);
                  if (SHIBYTE(v100) < 0)
                  {
                    v97 = (void **)&v99;
                    goto LABEL_194;
                  }
                }
                sub_1002DA408(v2);
                if (BYTE8(v139) && SBYTE7(v139) < 0) {
                  operator delete(__p[0]);
                }
                goto LABEL_198;
              }
              BOOL v87 = *(_DWORD *)(v2 + 2632) == 1;
              LODWORD(__p[0]) = *(_DWORD *)(v2 + 580);
              __int16 v88 = 513;
            }
            WORD2(__p[0]) = v88;
            __p[1] = 0;
            long long v139 = 0uLL;
            char v140 = 4;
            long long v141 = 0uLL;
            long long v142 = 0uLL;
            long long v143 = 0uLL;
            long long v144 = 0uLL;
            long long v145 = 0uLL;
            long long v146 = 0uLL;
            int v147 = 0;
            uint64_t v150 = 0;
            uint64_t v148 = 0;
            uint64_t v149 = 0;
            char v151 = 0;
            BOOL v152 = v87;
            char v153 = 0;
            sub_1002E4C70((uint64_t)buf, (uint64_t)__p);
            sub_1002DB328((uint64_t)__p);
            goto LABEL_161;
          }
LABEL_86:
          sub_10004D2C8(v12);
          goto LABEL_87;
        }
        CFDictionaryRef theDict = 0;
        (*(void (**)(CFDictionaryRef *__return_ptr, uint64_t, uint64_t, const void *))(*(void *)v13 + 64))(&theDict, v13, 8, v125);
        Value = (BOOL *)CFDictionaryGetValue(theDict, @"Cancel");
        long long v20 = Value;
        LOBYTE(buf[0]) = 0;
        if (Value)
        {
          CFTypeID v21 = CFGetTypeID(Value);
          if (v21 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v20, v22);
          }
          if (LOBYTE(buf[0]))
          {
            uint64_t v23 = *(void *)(v2 + 432);
            if (v23)
            {
              sub_100058DB0(&v128, "Cancel");
              memset(buf, 0, 24);
              ctu::cf::assign();
              *(_OWORD *)v122 = *(_OWORD *)buf;
              uint64_t v123 = buf[2];
              if (buf[2] >= 0) {
                long long v24 = (char *)v122;
              }
              else {
                long long v24 = (char *)buf[0];
              }
              sub_100058DB0(&v166, v24);
              sub_100058DB0(buf, "");
              sub_100058DB0(v120, "5001");
              sub_100058DB0(v118, "");
              (*(void (**)(uint64_t, long long *, long long *, uint64_t, void *, void **, void **))(*(void *)v23 + 216))(v23, &v128, &v166, 7, buf, v120, v118);
              if (v119 < 0) {
                operator delete(v118[0]);
              }
              if (v121 < 0) {
                operator delete(v120[0]);
              }
              if (SHIBYTE(buf[2]) < 0) {
                operator delete((void *)buf[0]);
              }
              if (v168 < 0) {
                operator delete((void *)v166);
              }
              if (SHIBYTE(v123) < 0) {
                operator delete(v122[0]);
              }
              if (SHIBYTE(v129) < 0) {
                operator delete((void *)v128);
              }
            }
            sub_100057D78((const void **)&theDict);
            goto LABEL_53;
          }
        }
        __int16 v26 = (BOOL *)CFDictionaryGetValue(theDict, @"isFromFollow");
        unint64_t v27 = v26;
        LOBYTE(buf[0]) = 0;
        if (v26)
        {
          CFTypeID v28 = CFGetTypeID(v26);
          if (v28 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v27, v29);
          }
        }
        __int16 v17 = LOBYTE(buf[0]);
        uint64_t v30 = (BOOL *)CFDictionaryGetValue(theDict, @"isFirstDay");
        char v31 = v30;
        LOBYTE(buf[0]) = 0;
        if (v30)
        {
          CFTypeID v32 = CFGetTypeID(v30);
          if (v32 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v31, v33);
          }
          if (LOBYTE(buf[0])) {
            goto LABEL_66;
          }
        }
        unint64_t v34 = (BOOL *)CFDictionaryGetValue(theDict, @"isLastDay");
        char v35 = v34;
        LOBYTE(buf[0]) = 0;
        if (!v34) {
          goto LABEL_77;
        }
        CFTypeID v36 = CFGetTypeID(v34);
        if (v36 == CFBooleanGetTypeID()) {
          ctu::cf::assign((ctu::cf *)buf, v35, v37);
        }
        if (LOBYTE(buf[0]))
        {
LABEL_66:
          uint64_t v38 = (BOOL *)CFDictionaryGetValue(theDict, @"isLastDay");
          unint64_t v39 = v38;
          LOBYTE(buf[0]) = 0;
          if (!v38) {
            goto LABEL_71;
          }
          CFTypeID v40 = CFGetTypeID(v38);
          if (v40 == CFBooleanGetTypeID()) {
            ctu::cf::assign((ctu::cf *)buf, v39, v41);
          }
          if (LOBYTE(buf[0]))
          {
            int v18 = 2;
          }
          else
          {
LABEL_71:
            BOOL v42 = (BOOL *)CFDictionaryGetValue(theDict, @"isAlertStop");
            uint64_t v43 = v42;
            LOBYTE(buf[0]) = 0;
            if (v42)
            {
              CFTypeID v44 = CFGetTypeID(v42);
              if (v44 == CFBooleanGetTypeID()) {
                ctu::cf::assign((ctu::cf *)buf, v43, v45);
              }
            }
            if (LOBYTE(buf[0])) {
              int v18 = 7;
            }
            else {
              int v18 = 0;
            }
          }
        }
        else
        {
LABEL_77:
          int v18 = 1;
        }
        uint64_t v46 = v126;
        if (*(char *)(v126 + 215) < 0)
        {
          *(void *)(v126 + 200) = 4;
          long long v47 = *(char **)(v46 + 192);
        }
        else
        {
          long long v47 = (char *)(v126 + 192);
          *(unsigned char *)(v126 + 215) = 4;
        }
        strcpy(v47, "5001");
        (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 512))(buf);
        uint64_t v48 = (std::string *)v126;
        uint64_t v49 = v126 + 216;
        if (*(char *)(v126 + 239) < 0)
        {
          operator delete(*(void **)v49);
          uint64_t v48 = (std::string *)v126;
        }
        *(_OWORD *)uint64_t v49 = *(_OWORD *)buf;
        *(void *)(v49 + 16) = buf[2];
        std::string::operator=(v48 + 10, (const std::string *)__p);
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)v13 + 40))(v13, 8, *(void *)(a1 + 56));
        sub_100057D78((const void **)&theDict);
        __int16 v16 = 1;
      }
      else
      {
        __int16 v16 = 0;
        __int16 v17 = 0;
        int v18 = 0;
      }
      sub_1000558F4(&v125);
    }
    else
    {
      int v18 = 0;
      __int16 v17 = 0;
      __int16 v16 = 0;
    }
    char v25 = 1;
    if (v14) {
      goto LABEL_87;
    }
    goto LABEL_86;
  }
  char v15 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "cannot launch simsetup. abort public app SIM installation.", (uint8_t *)buf, 2u);
  }
  (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002E6670(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,std::__shared_weak_count *a62)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (LOBYTE(STACK[0x248]) && SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  sub_10030AEBC((uint64_t)&STACK[0x2E0]);
  if (a62) {
    sub_10004D2C8(a62);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E695C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 2625))
  {
    if (*(unsigned char *)(a1 + 2626))
    {
      uint64_t v2 = *(NSObject **)(a1 + 40);
      BOOL v3 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v3) {
        return result;
      }
      __int16 v15 = 0;
      __int16 v5 = "#E display is locked";
      uint64_t v6 = (uint8_t *)&v15;
    }
    else if (*(_DWORD *)(a1 + 2632) == 1)
    {
      uint64_t v2 = *(NSObject **)(a1 + 40);
      BOOL v8 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v8) {
        return result;
      }
      __int16 v14 = 0;
      __int16 v5 = "#E still in buddy";
      uint64_t v6 = (uint8_t *)&v14;
    }
    else if (*(unsigned char *)(a1 + 2624))
    {
      uint64_t v9 = *(void *)(a1 + 400);
      if (!v9 || !(*(unsigned int (**)(uint64_t))(*(void *)v9 + 160))(v9)) {
        return 1;
      }
      uint64_t v2 = *(NSObject **)(a1 + 40);
      BOOL v10 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v10) {
        return result;
      }
      __int16 v12 = 0;
      __int16 v5 = "#E Supress pop up on source when transfer ongoing";
      uint64_t v6 = (uint8_t *)&v12;
    }
    else
    {
      uint64_t v2 = *(NSObject **)(a1 + 40);
      BOOL v11 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v11) {
        return result;
      }
      *(_WORD *)long long buf = 0;
      __int16 v5 = "#E springboard has not finished startup";
      uint64_t v6 = buf;
    }
  }
  else
  {
    uint64_t v2 = *(NSObject **)(a1 + 40);
    BOOL v7 = os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v7) {
      return result;
    }
    __int16 v16 = 0;
    __int16 v5 = "#E display is not on";
    uint64_t v6 = (uint8_t *)&v16;
  }
  _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, v5, v6, 2u);
  return 0;
}

BOOL sub_1002E6B08(const void **a1, char *__s)
{
  int v4 = *((char *)a1 + 23);
  if (v4 >= 0) {
    size_t v5 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    size_t v5 = (size_t)a1[1];
  }
  if (v5 != strlen(__s)) {
    return 0;
  }
  if (v4 >= 0) {
    uint64_t v6 = a1;
  }
  else {
    uint64_t v6 = *a1;
  }
  return memcmp(v6, __s, v5) == 0;
}

uint64_t sub_1002E6B80(uint64_t *a1, long long *a2)
{
  unint64_t v3 = a1[1];
  if (v3 >= a1[2])
  {
    uint64_t result = sub_1000D8CE8(a1, a2);
  }
  else
  {
    sub_10030BFC4(a1, a2);
    uint64_t result = v3 + 24;
  }
  a1[1] = result;
  return result;
}

uint64_t sub_1002E6BC0(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  if (a1 != a2) {
    sub_10005CA3C(a1 + 96, *(std::string **)(a2 + 96), *(long long **)(a2 + 104), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 104) - *(void *)(a2 + 96)) >> 3));
  }
  int v4 = *(_DWORD *)(a2 + 120);
  *(unsigned char *)(a1 + 124) = *(unsigned char *)(a2 + 124);
  *(_DWORD *)(a1 + 120) = v4;
  sub_100058140((const void **)(a1 + 128), (const void **)(a2 + 128));
  std::string::operator=((std::string *)(a1 + 136), (const std::string *)(a2 + 136));
  std::string::operator=((std::string *)(a1 + 160), (const std::string *)(a2 + 160));
  *(_DWORD *)(a1 + 184) = *(_DWORD *)(a2 + 184);
  std::string::operator=((std::string *)(a1 + 192), (const std::string *)(a2 + 192));
  std::string::operator=((std::string *)(a1 + 216), (const std::string *)(a2 + 216));
  std::string::operator=((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  return a1;
}

void sub_1002E6C98(uint64_t a1, void *a2, uint64_t *a3, const void **a4)
{
  if (*(unsigned char *)(a1 + 4601))
  {
    uint64_t v6 = *(void *)(a1 + 560);
    *(void *)__int16 v16 = a1;
    *(_OWORD *)&v16[8] = *(_OWORD *)a2;
    uint64_t v8 = *a3;
    uint64_t v7 = a3[1];
    uint64_t v17 = *a3;
    uint64_t v18 = v7;
    if (v7) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
    }
    if (*a4) {
      uint64_t v9 = _Block_copy(*a4);
    }
    else {
      uint64_t v9 = 0;
    }
    __int16 v12 = (char *)operator new(0x38uLL);
    *(void *)__int16 v12 = off_1019BA5E0;
    uint64_t v13 = *(void *)&v16[16];
    *(_OWORD *)(v12 + 8) = *(_OWORD *)v16;
    *((void *)v12 + 3) = v13;
    *((void *)v12 + 4) = v8;
    uint64_t v17 = 0;
    uint64_t v18 = 0;
    *((void *)v12 + 5) = v7;
    *((void *)v12 + 6) = v9;
    uint64_t v19 = 0;
    v20[3] = v12;
    (*(void (**)(uint64_t, void *))(*(void *)v6 + 32))(v6, v20);
    sub_10031D650(v20);
  }
  else
  {
    BOOL v10 = (std::__shared_weak_count *)a3[1];
    v15[0] = *a3;
    v15[1] = v10;
    if (v10) {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*a4) {
      BOOL v11 = _Block_copy(*a4);
    }
    else {
      BOOL v11 = 0;
    }
    __int16 v14 = v11;
    sub_100302690(a1, a2, v15, (uint64_t *)&v14);
    if (v11) {
      _Block_release(v11);
    }
    if (v10)
    {
      sub_10004D2C8(v10);
    }
  }
}

void sub_1002E6E60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E6EC4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 32);
  size_t v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf[0]) = 136315138;
    *(void *)((char *)buf + 4) = asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I received fetch result : %s", (uint8_t *)buf, 0xCu);
  }
  uint64_t v6 = *(void *)(v4 + 336);
  uint64_t v7 = asClosestCellularPlanInstallReplaceEventResult();
  uint64_t v8 = *(void *)(a1 + 40);
  if ((*(char *)(v8 + 263) & 0x80000000) == 0)
  {
    long long v10 = *(_OWORD *)(v8 + 240);
    uint64_t v9 = v8 + 240;
    *(_OWORD *)long long __dst = v10;
    uint64_t v25 = *(void *)(v9 + 16);
LABEL_7:
    *(_OWORD *)long long __p = *(_OWORD *)v9;
    uint64_t v23 = *(void *)(v9 + 16);
    goto LABEL_8;
  }
  sub_10004FC84(__dst, *(void **)(v8 + 240), *(void *)(v8 + 248));
  uint64_t v11 = *(void *)(a1 + 40);
  if ((*(char *)(v11 + 263) & 0x80000000) == 0)
  {
    uint64_t v9 = v11 + 240;
    goto LABEL_7;
  }
  sub_10004FC84(__p, *(void **)(v11 + 240), *(void *)(v11 + 248));
LABEL_8:
  (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void **))(*(void *)v6 + 208))(v6, 5001, v7, __dst, __p);
  if (SHIBYTE(v23) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v25) < 0) {
    operator delete(__dst[0]);
  }
  v18[1] = (const void *)v4;
  __int16 v12 = (const void **)(a1 + 56);
  sub_100083DA4(&v19, (const void **)(a1 + 56));
  LODWORD(v20) = a2;
  WORD2(v20) = *(_WORD *)(a1 + 68);
  int v21 = *(_DWORD *)(a1 + 64);
  unint64_t v27 = 0;
  uint64_t v13 = operator new(0x28uLL);
  *(void *)uint64_t v13 = off_1019B90A0;
  *((void *)v13 + 1) = v4;
  sub_100083DA4((const void **)v13 + 2, &v19);
  *((void *)v13 + 3) = v20;
  *((_DWORD *)v13 + 8) = v21;
  unint64_t v27 = v13;
  *(void *)&buf[0] = v4;
  uint64_t v14 = *(void *)(v4 + 336);
  sub_1000DFC90((uint64_t)buf + 8, (uint64_t)v26);
  uint64_t v30 = 0;
  __int16 v15 = operator new(0x30uLL);
  uint64_t v16 = *(void *)&buf[0];
  *__int16 v15 = off_1019BAB60;
  v15[1] = v16;
  sub_100023950((uint64_t)(v15 + 2), (uint64_t)buf + 8);
  uint64_t v30 = v15;
  (*(void (**)(uint64_t, void *))(*(void *)v14 + 192))(v14, v29);
  sub_100060644(v29);
  sub_100060644((void *)buf + 1);
  sub_100060644(v26);
  sub_1000558F4(&v19);
  (*(void (**)(_OWORD *__return_ptr))(**(void **)(v4 + 160) + 64))(buf);
  uint64_t v17 = *(void *)&buf[0];
  if (*(void *)&buf[0])
  {
    sub_100083DA4(v18, v12);
    (*(void (**)(uint64_t, uint64_t, const void **))(*(void *)v17 + 104))(v17, a2, v18);
    sub_1000558F4(v18);
  }
  if (*((void *)&buf[0] + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf[0] + 1));
  }
}

void sub_1002E71EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1002E7284(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return sub_100083DA4((const void **)(a1 + 56), (const void **)(a2 + 56));
}

void sub_1002E72A8(uint64_t a1)
{
  sub_1000558F4((const void **)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

const void **sub_1002E72F4(const void **a1, const void **a2)
{
  sub_100083DA4(a1 + 6, a2 + 6);
  sub_100083DA4(a1 + 7, a2 + 7);
  sub_100083DA4(a1 + 8, a2 + 8);
  sub_100083DA4(a1 + 9, a2 + 9);
  sub_100083DA4(a1 + 10, a2 + 10);
  sub_100083DA4(a1 + 11, a2 + 11);

  return sub_100083DA4(a1 + 12, a2 + 12);
}

const void **sub_1002E7378(const void **a1)
{
  uint64_t v1 = a1 + 6;
  uint64_t v2 = a1 + 7;
  unint64_t v3 = a1 + 8;
  uint64_t v4 = a1 + 9;
  size_t v5 = a1 + 10;
  uint64_t v6 = a1 + 11;
  sub_1000558F4(a1 + 12);
  sub_1000558F4(v6);
  sub_1000558F4(v5);
  sub_1000558F4(v4);
  sub_1000558F4(v3);
  sub_1000558F4(v2);

  return sub_1000558F4(v1);
}

const void **sub_1002E7400(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5, const void **a6, const void **a7, const void **a8, char a9, uint64_t a10)
{
  return sub_1002E5234((void *)(a1 - 48), a2, a3, a4, a5, a6, a7, a8, a9, a10);
}

void sub_1002E7418(void *a1, char a2, char a3, uint64_t a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 0x40000000;
  _OWORD v10[2] = sub_1002E7538;
  v10[3] = &unk_1019B6660;
  v10[4] = a4;
  v10[5] = a1;
  char v11 = a2;
  char v12 = a3;
  size_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (uint64_t v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v6;
  uint64_t v14 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v10;
  dispatch_async(v9, block);
  if (v14) {
    sub_10004D2C8(v14);
  }
  sub_10004D2C8(v8);
}

uint64_t sub_1002E7538(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 4976))
  {
    uint64_t v3 = v2 + 4712;
    if (*(unsigned char *)(a1 + 48))
    {
      uint64_t v4 = *(void *)(v2 + 680);
      if (v4)
      {
        *(unsigned char *)(v2 + 1706) = 1;
        sub_100326828((long long *)(v2 + 4712), &v16);
        sub_10030BBA0(v15, v2 + 5016);
        (*(void (**)(uint64_t, uint64_t *, unsigned char *))(*(void *)v4 + 192))(v4, &v16, v15);
        sub_10030AEBC((uint64_t)v15);
        if (v17) {
          sub_10004D2C8(v17);
        }
        return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
      }
      else
      {
        BOOL v8 = sub_1002E3B1C(*(void *)(a1 + 40), *(unsigned __int8 *)(a1 + 49));
        uint64_t v9 = *(NSObject **)(v2 + 40);
        BOOL v10 = os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT);
        if (v8)
        {
          if (v10)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Consent accepted, start provisioning operation", buf, 2u);
          }
          *(unsigned char *)(v2 + 1706) = 1;
          (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
          uint64_t v11 = *(void *)(v2 + 680);
          (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 304) + 352))(buf);
          sub_100326828((long long *)(v2 + 4712), &v13);
          sub_10030BBA0(v12, v2 + 5016);
          (*(void (**)(uint64_t, uint8_t *, uint64_t *, void, unsigned char *))(*(void *)v11 + 32))(v11, buf, &v13, 0, v12);
          sub_10030AEBC((uint64_t)v12);
          if (v14) {
            sub_10004D2C8(v14);
          }
          return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
        }
        else
        {
          if (v10)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E No provisioning operation, clear cache", buf, 2u);
          }
          sub_1002E78DC(v2 + 4712, 5);
          return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
        }
      }
    }
    else
    {
      uint64_t v7 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Consent rejected, clear cache", buf, 2u);
      }
      sub_1002E78DC(v3, 45);
      return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
    }
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "no public consent pending", buf, 2u);
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1002E788C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,std::__shared_weak_count *a34)
{
  if (a34) {
    sub_10004D2C8(a34);
  }
  _Unwind_Resume(a1);
}

void sub_1002E78DC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a1 + 23) < 0)
  {
    **(unsigned char **)a1 = 0;
    *(void *)(a1 + 8) = 0;
  }
  else
  {
    *(unsigned char *)a1 = 0;
    *(unsigned char *)(a1 + 23) = 0;
  }
  if (*(char *)(a1 + 47) < 0)
  {
    **(unsigned char **)(a1 + 24) = 0;
    *(void *)(a1 + 32) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 24) = 0;
    *(unsigned char *)(a1 + 47) = 0;
  }
  if (*(char *)(a1 + 71) < 0)
  {
    **(unsigned char **)(a1 + 48) = 0;
    *(void *)(a1 + 56) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 48) = 0;
    *(unsigned char *)(a1 + 71) = 0;
  }
  if (*(char *)(a1 + 95) < 0)
  {
    **(unsigned char **)(a1 + 72) = 0;
    *(void *)(a1 + 80) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 72) = 0;
    *(unsigned char *)(a1 + 95) = 0;
  }
  sub_100047FB8((uint64_t *)(a1 + 96));
  *(_DWORD *)(a1 + 120) = 0;
  uint64_t v4 = *(const void **)(a1 + 128);
  *(void *)(a1 + 128) = 0;
  uint64_t v7 = v4;
  sub_100057D78(&v7);
  if (*(char *)(a1 + 159) < 0)
  {
    **(unsigned char **)(a1 + 136) = 0;
    *(void *)(a1 + 144) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 136) = 0;
    *(unsigned char *)(a1 + 159) = 0;
  }
  if (*(unsigned char *)(a1 + 185)) {
    *(unsigned char *)(a1 + 185) = 0;
  }
  if (*(char *)(a1 + 215) < 0)
  {
    **(unsigned char **)(a1 + 192) = 0;
    *(void *)(a1 + 200) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 192) = 0;
    *(unsigned char *)(a1 + 215) = 0;
  }
  if (*(char *)(a1 + 239) < 0)
  {
    **(unsigned char **)(a1 + 216) = 0;
    *(void *)(a1 + 224) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 216) = 0;
    *(unsigned char *)(a1 + 239) = 0;
  }
  if (*(char *)(a1 + 263) < 0)
  {
    **(unsigned char **)(a1 + 240) = 0;
    *(void *)(a1 + 248) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 240) = 0;
    *(unsigned char *)(a1 + 263) = 0;
  }
  uint64_t v5 = *(void *)(a1 + 264);
  if (v5)
  {
    (*(void (**)(uint64_t, uint64_t))(v5 + 16))(v5, a2);
    uint64_t v6 = *(const void **)(a1 + 264);
    *(void *)(a1 + 264) = 0;
    if (v6) {
      _Block_release(v6);
    }
  }
  if (*(char *)(a1 + 295) < 0)
  {
    **(unsigned char **)(a1 + 272) = 0;
    *(void *)(a1 + 280) = 0;
  }
  else
  {
    *(unsigned char *)(a1 + 272) = 0;
    *(unsigned char *)(a1 + 295) = 0;
  }
}

void sub_1002E7A80(uint64_t a1, char a2, char a3, uint64_t a4)
{
}

void sub_1002E7A88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v9, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    void v9[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  sub_10031ECD8((uint64_t)&v11, a4);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E7CAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a2)
  {
    if (*(char *)(v23 + 31) < 0) {
      operator delete(*v24);
    }
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E7D1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002E7D24(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
  uint64_t v8 = a1;
  memset(v9, 0, sizeof(v9));
  sub_10030C19C(v9, *a2, a2[1], 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 3));
  char v10 = a3;
  sub_10031ECD8((uint64_t)&v11, a4);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E7EE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002E7F18(uint64_t a1, uint64_t *a2, char a3, uint64_t a4)
{
}

void sub_1002E7F20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_100327A58((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E80C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1002E8104(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

const void **sub_1002E810C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v5 = *(void *)(a2 + 8);
    if (v5)
    {
      uint64_t v10 = a1;
      sub_10004FC84(__p, *(void **)a2, v5);
LABEL_6:
      sub_100328018((uint64_t)&v13, a3);
      uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
      if (v6)
      {
        if (std::__shared_weak_count::lock(v6)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    uint64_t v10 = a1;
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_1002E8348(a3, (uint64_t)&v9, (uint64_t)&v8, 262);
  sub_100057D78(&v8);
  return sub_1000558F4(&v9);
}

void sub_1002E82F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
}

uint64_t sub_1002E8348(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __int16 v6 = a4;
  uint64_t v4 = *(void *)(a1 + 24);
  if (!v4) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)v4 + 48))(v4, a2, a3, &v6);
}

const void **sub_1002E839C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002E810C(a1 - 48, a2, a3);
}

void sub_1002E83A4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
  sub_10030C884(v8, a2);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  sub_100328DE4((uint64_t)&v10, a4);
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8584(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,void *__p,uint64_t a50,int a51,__int16 a52,char a53,char a54)
{
  if (a2)
  {
    sub_10030CBA4(v54);
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E85E4(uint64_t a1, long long *a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002E85EC(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = 0uLL;
  sub_10030CD0C((void *)v6 + 1, *a2, a2[1], (a2[1] - *a2) >> 6);
  sub_10032B190((uint64_t)&v7, a3);
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8760(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002E8778(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1002E8780(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = a1;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  sub_10031ECD8((uint64_t)v11, a5);
  v11[2] = *a2;
  uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
  if (v8)
  {
    if (std::__shared_weak_count::lock(v8)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1002E8980(uint64_t a1, _OWORD *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_1002E898C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8AD8(uint64_t a1, uint64_t a2)
{
}

void sub_1002E8AE0(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8C3C(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1002E8C44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__int16 v6 = *(_OWORD *)a2;
    _OWORD v6[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  unint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8DE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E8E0C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002E8E14(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10032CA08((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E8F48(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002E8F58(uint64_t a1, uint64_t a2)
{
}

void sub_1002E8F60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_10032E000((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E910C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002E911C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002E9124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v9, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v9 = *(_OWORD *)a2;
    void v9[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  sub_1003302B0((uint64_t)&v11, a4);
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E9348(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a2)
  {
    if (*(char *)(v17 + 31) < 0) {
      operator delete(*v18);
    }
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002E93A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002E93A8(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
  if (a2)
  {
    uint64_t v8 = a1;
    char v9 = a2;
    uint64_t v10 = *a3;
    *a3 = 0;
    sub_100330D8C((uint64_t)&v11, a4);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      if (std::__shared_weak_count::lock(v5)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v6 = 0;
  char v7 = 0;
  sub_1002E956C(*(void *)(a4 + 24), (uint64_t)&v6, 6);
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1002E953C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002E956C(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, &v4);
}

void sub_1002E95BC(uint64_t a1, int a2, uint64_t *a3, uint64_t a4)
{
}

uint64_t sub_1002E95C4(uint64_t a1, int a2, uint64_t a3)
{
  if (a2)
  {
    sub_10032CA08((uint64_t)&v6, a3);
    char v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }

  return sub_10024924C(a3, 6);
}

void sub_1002E9758(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9768(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1002E95C4(a1 - 48, a2, a3);
}

uint64_t sub_1002E9770(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    sub_10032CA08((uint64_t)&v7, a4);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      if (std::__shared_weak_count::lock(v5)) {
        operator new();
      }
    }
    sub_100088B9C();
  }

  return sub_10024924C(a4, 6);
}

void sub_1002E9908(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9918(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  return sub_1002E9770(a1 - 48, a2, a3, a4);
}

uint64_t sub_1002E9920(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  if (a2)
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
    sub_10032CA08((uint64_t)&v7, a4);
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      if (std::__shared_weak_count::lock(v5)) {
        operator new();
      }
    }
    sub_100088B9C();
  }

  return sub_10024924C(a4, 6);
}

void sub_1002E9AF8(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002E9B08(uint64_t a1, int a2, void *a3, uint64_t a4)
{
  return sub_1002E9920(a1 - 48, a2, a3, a4);
}

void sub_1002E9B10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002E9BF0(uint64_t a1)
{
}

uint64_t sub_1002E9BF8(uint64_t result, int a2)
{
  if (a2)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(result + 16);
    if (v2)
    {
      if (std::__shared_weak_count::lock(v2)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  return result;
}

uint64_t sub_1002E9CF4(uint64_t a1, int a2)
{
  return sub_1002E9BF8(a1 - 48, a2);
}

void sub_1002E9CFC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(void))(**(void **)(v2 + 304) + 296))(*(void *)(v2 + 304))
    && *(unsigned char *)(v2 + 2592) != 1)
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Bootstrap plan transfer not allowed over Bootstrap", buf, 2u);
    }
    sub_10024924C(a1 + 40, 41);
  }
  else if (*(unsigned char *)(a1 + 72) == 2)
  {
    v48[0] = 0;
    v48[128] = 0;
    char v3 = sub_1002DDF00(v2, (uint64_t)v48);
    sub_10010B788((uint64_t)v48);
    if ((v3 & 2) == 0)
    {
      char v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E QR code install unsupported device", buf, 2u);
      }
      sub_10024924C(a1 + 40, 17);
      return;
    }
    if (*(_DWORD *)(v2 + 2632) == 1 || *(unsigned char *)(v2 + 1784))
    {
      if (*(unsigned char *)(v2 + 4601) && *(unsigned char *)(v2 + 4600))
      {
        uint64_t v7 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#E Transfer over bootstrap is blocked : regulatory restriction active", buf, 2u);
        }
        char v8 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
        sub_10024924C(a1 + 40, v8);
        return;
      }
      uint64_t v9 = *(void *)(v2 + 384);
      if (!v9)
      {
LABEL_27:
        if (*(void *)(v2 + 464))
        {
          uint64_t v11 = *(void *)(v2 + 320);
          uint64_t v12 = *(unsigned __int8 *)(a1 + 72);
          uint64_t v13 = *(NSObject **)(v2 + 24);
          dispatch_object_t object = v13;
          if (v13) {
            dispatch_retain(v13);
          }
          uint64_t v14 = *(std::__shared_weak_count **)(v2 + 16);
          if (!v14 || (uint64_t v15 = *(void *)(v2 + 8), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
            sub_100088B9C();
          }
          uint64_t v17 = v15 + 96;
          if (!v15) {
            uint64_t v17 = 0;
          }
          uint64_t v45 = v17;
          uint64_t v46 = v16;
          uint64_t v18 = *(std::__shared_weak_count **)(v2 + 424);
          uint64_t v43 = *(void *)(v2 + 416);
          CFTypeID v44 = v18;
          if (v18) {
            atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v19 = *(std::__shared_weak_count **)(v2 + 520);
          uint64_t v41 = *(void *)(v2 + 512);
          BOOL v42 = v19;
          if (v19) {
            atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v11 + 424))(buf, v11, v12, &object, &v45, &v43, &v41);
          long long v20 = *(_OWORD *)buf;
          memset(buf, 0, sizeof(buf));
          int v21 = *(std::__shared_weak_count **)(v2 + 392);
          *(_OWORD *)(v2 + 384) = v20;
          if (v21)
          {
            sub_10004D2C8(v21);
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (v42) {
            sub_10004D2C8(v42);
          }
          if (v44) {
            sub_10004D2C8(v44);
          }
          if (v46) {
            sub_10004D2C8(v46);
          }
          if (object) {
            dispatch_release(object);
          }
          if (*(void *)(v2 + 384))
          {
            *(void *)&uint8_t buf[8] = 0;
            uint64_t v40 = 0;
            *(void *)long long buf = &buf[8];
            if (*(unsigned char *)(v2 + 2664)) {
              CFBooleanRef v22 = (uint8_t *)(v2 + 2640);
            }
            else {
              CFBooleanRef v22 = buf;
            }
            sub_1002D3F44(v2);
            uint64_t v23 = *(void *)(v2 + 384);
            int v24 = *(_DWORD *)(v2 + 2632);
            sub_1002DD40C((uint64_t)v37, (void *)(v2 + 1616));
            sub_1002DCA80(v36, *(void *)(v2 + 416));
            uint64_t v25 = *(std::__shared_weak_count **)(v2 + 5376);
            uint64_t v34 = *(void *)(v2 + 5368);
            char v35 = v25;
            if (v25) {
              atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint8_t *, uint64_t, unsigned char *, void *, uint64_t *))(*(void *)v23 + 16))(v23, v2 + 2568, v2 + 2464, v24 == 1, v2 + 2320, v2 + 2344, v22, v2 + 2488, v37, v36, &v34);
            if (v35) {
              sub_10004D2C8(v35);
            }
            uint64_t v49 = (void **)v36;
            sub_10030AFC8(&v49);
            sub_10005CD2C((uint64_t)v37, v38);
            uint64_t v26 = *(void *)(v2 + 464);
            v53[0] = off_1019B95A0;
            v53[1] = v2;
            v53[3] = v53;
            (*(void (**)(uint64_t, void *))(*(void *)v26 + 160))(v26, v53);
            sub_10003B34C(v53);
            (*(void (**)(void, void))(**(void **)(v2 + 384) + 56))(*(void *)(v2 + 384), *(unsigned __int8 *)(v2 + 1784));
            uint64_t v27 = *(void *)(v2 + 384);
            int v28 = *(unsigned __int8 *)(a1 + 73);
            sub_10031ECD8((uint64_t)v50, a1 + 40);
            unint64_t v52 = 0;
            CFBooleanRef v29 = operator new(0x28uLL);
            *CFBooleanRef v29 = off_1019B9620;
            sub_10031ECD8((uint64_t)(v29 + 1), (uint64_t)v50);
            unint64_t v52 = v29;
            (*(void (**)(uint64_t, BOOL, void *))(*(void *)v27 + 104))(v27, v28 != 0, v51);
            sub_100313668(v51);
            sub_100313668(v50);
            sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
            return;
          }
          CFTypeID v32 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "No Transfer Controller available", buf, 2u);
          }
        }
        else
        {
          char v31 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "NO upload triggers model", buf, 2u);
          }
        }
        sub_10024924C(a1 + 40, 4);
        return;
      }
      if (!(*(unsigned int (**)(uint64_t))(*(void *)v9 + 168))(v9)) {
        goto LABEL_26;
      }
      uint64_t v10 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Trying to cancel ongoing transfer", buf, 2u);
      }
      if ((*(uint64_t (**)(void))(**(void **)(v2 + 384) + 240))(*(void *)(v2 + 384)))
      {
LABEL_26:
        sub_1002E0CF4(v2, *(unsigned __int8 *)(a1 + 72));
        goto LABEL_27;
      }
      CFBooleanRef v33 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#E Transfer entitlements ongoing", buf, 2u);
      }
      sub_10024924C(a1 + 40, 13);
    }
    else
    {
      uint64_t v30 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "No iCloud signed-in in postbuddy", buf, 2u);
      }
      sub_10024924C(a1 + 40, 5);
    }
  }
  else
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid end point", buf, 2u);
    }
    sub_10024924C(a1 + 40, 6);
  }
}

void sub_1002EA474(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,char a21,void *a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,dispatch_object_t object,char a32)
{
  sub_100313668((void *)(v32 - 120));
  sub_100313668((void *)(v32 - 152));
  sub_10023A670((uint64_t)&a21, a22);
  _Unwind_Resume(a1);
}

void *sub_1002EA560(uint64_t a1, char a2, char a3, uint64_t a4)
{
  return sub_1002DB4A0((void *)(a1 - 48), a2, a3, a4);
}

void *sub_1002EA568(void *a1, char a2, void *a3, char a4, uint64_t a5)
{
  v17[0] = _NSConcreteStackBlock;
  v17[1] = 1174405120;
  void v17[2] = sub_1002EA704;
  void v17[3] = &unk_1019B66B0;
  v17[4] = a1;
  char v20 = a2;
  sub_10031ECD8((uint64_t)v18, a5);
  char v8 = (std::__shared_weak_count *)a3[1];
  v18[4] = *a3;
  uint64_t v19 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v21 = a4;
  uint64_t v9 = (std::__shared_weak_count *)a1[2];
  if (!v9 || (v10 = a1[1], (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v12 = v11;
  uint64_t v13 = a1[3];
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1174405120;
  void v15[2] = sub_10031EAD8;
  void v15[3] = &unk_1019B8B90;
  void v15[5] = v10;
  uint64_t v16 = v12;
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  void v15[4] = v17;
  dispatch_async(v13, v15);
  if (v16) {
    sub_10004D2C8(v16);
  }
  sub_10004D2C8(v12);
  if (v19) {
    sub_10004D2C8(v19);
  }
  return sub_100313668(v18);
}

void sub_1002EA6F8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002EA704(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  int v3 = *(unsigned __int8 *)(a1 + 88);
  if ((v3 - 1) >= 2)
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid end point", buf, 2u);
    }
    sub_10024924C(a1 + 40, 6);
  }
  else
  {
    if (v3 == 2)
    {
      v62[0] = 0;
      v62[128] = 0;
      char v4 = sub_1002DDF00(v2, (uint64_t)v62);
      sub_10010B788((uint64_t)v62);
      if ((v4 & 2) == 0)
      {
        uint64_t v5 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#E QR code install unsupported device", buf, 2u);
        }
        sub_10024924C(a1 + 40, 17);
        return;
      }
    }
    if (*(unsigned char *)(v2 + 4601) && *(unsigned char *)(v2 + 4600))
    {
      uint64_t v7 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#E cu transfer over bootstrap is blocked : regulatory restriction active", buf, 2u);
      }
      char v8 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
      sub_10024924C(a1 + 40, v8);
      return;
    }
    uint64_t v9 = *(unsigned __int8 *)(a1 + 88);
    if (v9 == 1) {
      uint64_t v10 = 400;
    }
    else {
      uint64_t v10 = 384;
    }
    if (v9 == 1) {
      uint64_t v11 = v2 + 400;
    }
    else {
      uint64_t v11 = v2 + 384;
    }
    uint64_t v12 = *(void *)(v2 + v10);
    if (v12)
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v12 + 168))(v12))
      {
        uint64_t v13 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Trying to cancel ongoing transfer", buf, 2u);
        }
        if (((*(uint64_t (**)(void))(**(void **)(v2 + v10) + 240))(*(void *)(v2 + v10)) & 1) == 0)
        {
          uint64_t v41 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#E Transfer entitlements ongoing", buf, 2u);
          }
          sub_10024924C(a1 + 40, 13);
          return;
        }
      }
      sub_1002E0CF4(v2, *(unsigned __int8 *)(a1 + 88));
      uint64_t v9 = *(unsigned __int8 *)(a1 + 88);
    }
    uint64_t v14 = *(void *)(v2 + 320);
    uint64_t v15 = *(NSObject **)(v2 + 24);
    dispatch_object_t object = v15;
    if (v15) {
      dispatch_retain(v15);
    }
    uint64_t v16 = *(std::__shared_weak_count **)(v2 + 16);
    if (!v16 || (uint64_t v17 = *(void *)(v2 + 8), (v18 = std::__shared_weak_count::lock(v16)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v19 = v17 + 96;
    if (!v17) {
      uint64_t v19 = 0;
    }
    uint64_t v59 = v19;
    uint64_t v60 = v18;
    char v20 = *(std::__shared_weak_count **)(v2 + 424);
    uint64_t v57 = *(void *)(v2 + 416);
    uint64_t v58 = v20;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    char v21 = *(std::__shared_weak_count **)(v2 + 520);
    uint64_t v55 = *(void *)(v2 + 512);
    uint64_t v56 = v21;
    if (v21) {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v14 + 424))(buf, v14, v9, &object, &v59, &v57, &v55);
    long long v22 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v23 = *(std::__shared_weak_count **)(v11 + 8);
    *(_OWORD *)(v2 + v10) = v22;
    if (v23)
    {
      sub_10004D2C8(v23);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (v56) {
      sub_10004D2C8(v56);
    }
    if (v58) {
      sub_10004D2C8(v58);
    }
    if (v60) {
      sub_10004D2C8(v60);
    }
    if (object) {
      dispatch_release(object);
    }
    if (*(void *)(v2 + v10))
    {
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v54 = 0;
      *(void *)long long buf = &buf[8];
      if (*(unsigned char *)(v2 + 2664)) {
        int v24 = (uint8_t *)(v2 + 2640);
      }
      else {
        int v24 = buf;
      }
      sub_1002D3F44(v2);
      int v25 = *(unsigned __int8 *)(a1 + 88);
      if (v25 == 2)
      {
        uint64_t v38 = *(void *)(v2 + 416);
        if (v38)
        {
          unint64_t v39 = *(std::__shared_weak_count **)(a1 + 80);
          uint64_t v49 = *(void *)(a1 + 72);
          uint64_t v50 = v39;
          if (v39) {
            atomic_fetch_add_explicit(&v39->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v38 + 16))(v47);
          uint64_t v29 = *(void *)v47;
          int v28 = v48;
          *(void *)long long v47 = 0;
          uint64_t v48 = 0;
          uint64_t v30 = v50;
          if (v50) {
            goto LABEL_58;
          }
          goto LABEL_59;
        }
      }
      else if (v25 == 1)
      {
        uint64_t v26 = *(void *)(v2 + 512);
        if (v26)
        {
          uint64_t v27 = *(std::__shared_weak_count **)(a1 + 80);
          uint64_t v51 = *(void *)(a1 + 72);
          unint64_t v52 = v27;
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint8_t *__return_ptr))(*(void *)v26 + 16))(v47);
          uint64_t v29 = *(void *)v47;
          int v28 = v48;
          *(void *)long long v47 = 0;
          uint64_t v48 = 0;
          uint64_t v30 = v52;
          if (v52) {
LABEL_58:
          }
            sub_10004D2C8(v30);
LABEL_59:
          if (v29)
          {
            uint64_t v31 = *(void *)(v2 + v10);
            int v32 = *(_DWORD *)(v2 + 2632);
            sub_1002DD40C((uint64_t)v47, (void *)(v2 + 1616));
            sub_1002DCA80(v46, *(void *)(v2 + 416));
            CFBooleanRef v33 = *(std::__shared_weak_count **)(v2 + 5376);
            uint64_t v44 = *(void *)(v2 + 5368);
            uint64_t v45 = v33;
            if (v33) {
              atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint8_t *, uint64_t, uint8_t *, void *, uint64_t *))(*(void *)v31 + 16))(v31, v2 + 2568, v2 + 2464, v32 == 1, v2 + 2320, v2 + 2344, v24, v2 + 2488, v47, v46, &v44);
            if (v45) {
              sub_10004D2C8(v45);
            }
            uint64_t v63 = (void **)v46;
            sub_10030AFC8(&v63);
            sub_10005CD2C((uint64_t)v47, (char *)v48);
            uint64_t v34 = *(void *)(v2 + v10);
            sub_1002DD40C((uint64_t)v47, (void *)(v2 + 1616));
            (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v34 + 40))(v34, v2 + 2840, v47);
            sub_10005CD2C((uint64_t)v47, (char *)v48);
            uint64_t v35 = *(void *)(v2 + v10);
            uint64_t v42 = v29;
            uint64_t v43 = v28;
            if (v28) {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            int v36 = *(unsigned __int8 *)(a1 + 89);
            sub_10031ECD8((uint64_t)v64, a1 + 40);
            (*(void (**)(uint64_t, uint64_t *, BOOL, void *))(*(void *)v35 + 112))(v35, &v42, v36 != 0, v64);
            sub_100313668(v64);
            if (v43) {
              sub_10004D2C8(v43);
            }
LABEL_80:
            if (v28) {
              sub_10004D2C8(v28);
            }
            sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
            return;
          }
LABEL_77:
          uint64_t v40 = *(NSObject **)(v2 + 40);
          if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long v47 = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "No message session handler", v47, 2u);
          }
          sub_10024924C(a1 + 40, 4);
          goto LABEL_80;
        }
      }
      int v28 = 0;
      goto LABEL_77;
    }
    CFBooleanRef v37 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "No Transfer Controller available", buf, 2u);
    }
    sub_10024924C(a1 + 40, 4);
  }
}

void sub_1002EAE58(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,char a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,dispatch_object_t object,char a38)
{
  if (a24) {
    sub_10004D2C8(a24);
  }
  sub_10023A670((uint64_t)&a27, a28);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EAF68(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_10031ECD8(a1 + 40, a2 + 40);
  uint64_t v5 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_1002EAFB0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }

  return sub_100313668((void *)(a1 + 40));
}

void *sub_1002EAFF0(uint64_t a1, char a2, void *a3, char a4, uint64_t a5)
{
  return sub_1002EA568((void *)(a1 - 48), a2, a3, a4, a5);
}

void *sub_1002EAFF8(void *a1, char a2, uint64_t a3)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  void v12[2] = sub_1002EB168;
  void v12[3] = &unk_1019B66E0;
  void v12[4] = a1;
  char v14 = a2;
  sub_10031DDB0((uint64_t)v13, a3);
  char v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  char v8 = a1[3];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _OWORD v10[2] = sub_10031EAD8;
  v10[3] = &unk_1019B8B90;
  v10[5] = v5;
  uint64_t v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v10[4] = v12;
  dispatch_async(v8, v10);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v7);
  return sub_10023D374(v13);
}

void sub_1002EB15C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void *sub_1002EB168(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  uint64_t v3 = *(void *)(v2 + 384);
  if (v3)
  {
    uint64_t v4 = *(unsigned __int8 *)(a1 + 72);
    uint64_t v10 = *(void *)(a1 + 32);
    sub_10031DDB0((uint64_t)v11, a1 + 40);
    uint64_t v13 = 0;
    uint64_t v5 = operator new(0x30uLL);
    uint64_t v6 = v10;
    *uint64_t v5 = off_1019B96A0;
    v5[1] = v6;
    sub_10031DDB0((uint64_t)(v5 + 2), (uint64_t)v11);
    uint64_t v13 = v5;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 136))(v3, v4, v12);
    sub_100060644(v12);
    return sub_10023D374(v11);
  }
  else
  {
    char v8 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "No Transfer Controller", v9, 2u);
    }
    return (void *)sub_1002EB2F8(a1 + 40, 0, 4);
  }
}

void sub_1002EB2BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100060644((uint64_t *)va);
  sub_10023D374(v8);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EB2F8(uint64_t a1, char a2, char a3)
{
  char v6 = a2;
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *, char *))(*(void *)v3 + 48))(v3, &v6, &v5);
}

uint64_t sub_1002EB354(uint64_t a1, uint64_t a2)
{
  return sub_10031DDB0(a1 + 40, a2 + 40);
}

void *sub_1002EB360(uint64_t a1)
{
  return sub_10023D374((void *)(a1 + 40));
}

void *sub_1002EB368(uint64_t a1, char a2, uint64_t a3)
{
  return sub_1002EAFF8((void *)(a1 - 48), a2, a3);
}

BOOL sub_1002EB370(uint64_t a1)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  void v4[2] = sub_1002EB4E0;
  v4[3] = &unk_1019B6710;
  void v4[4] = a1;
  char v5 = v4;
  v6[0] = _NSConcreteStackBlock;
  v6[1] = 0x40000000;
  _OWORD v6[2] = sub_100331CBC;
  v6[3] = &unk_1019B9710;
  void v6[4] = a1 + 8;
  void v6[5] = &v5;
  uint64_t v7 = v6;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v14 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_10005ABF4;
    uint64_t v11 = &unk_1019B8B08;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v14 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v9 = 0x40000000;
    uint64_t v10 = sub_100059E90;
    uint64_t v11 = &unk_1019B8AE8;
    uint64_t v12 = &v14;
    uint64_t v13 = &v7;
    dispatch_sync(v1, &block);
  }
  return v14 != 0;
}

uint64_t sub_1002EB4E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = (capabilities::ct *)(*(uint64_t (**)(void))(**(void **)(v1 + 320) + 40))(*(void *)(v1 + 320));
  if (!v2 || (uint64_t result = capabilities::ct::defaultVinylCardTypeToGSMA(v2), result))
  {
    if ((sub_1002EB758(v1) & 1) == 0)
    {
      char v5 = *(NSObject **)(v1 + 40);
      BOOL v9 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v9) {
        return result;
      }
      __int16 v18 = 0;
      uint64_t v7 = "#E Outgoing eSIM transfers not allowed, so no plans available for transfer";
      char v8 = (uint8_t *)&v18;
      goto LABEL_14;
    }
    uint64_t result = *(void *)(v1 + 464);
    if (!result) {
      return result;
    }
    if (((*(uint64_t (**)(uint64_t))(*(void *)result + 152))(result) & 1) == 0)
    {
      char v5 = *(NSObject **)(v1 + 40);
      BOOL v10 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v10) {
        return result;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v7 = "#I Upload controller forbids transfer listing";
      char v8 = buf;
      goto LABEL_14;
    }
    uint64_t v4 = *(void *)(v1 + 368);
    if (v4 && (*(unsigned int (**)(uint64_t))(*(void *)v4 + 64))(v4))
    {
      char v5 = *(NSObject **)(v1 + 40);
      BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (!v6) {
        return result;
      }
      __int16 v16 = 0;
      uint64_t v7 = "#I prox transfer attempt ongoing";
      char v8 = (uint8_t *)&v16;
      goto LABEL_14;
    }
    if (*(unsigned char *)(v1 + 1705)
      && (uint64_t v11 = *(void *)(v1 + 384)) != 0
      && (*(unsigned int (**)(uint64_t))(*(void *)v11 + 168))(v11))
    {
      char v5 = *(NSObject **)(v1 + 40);
      BOOL v12 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v12)
      {
        __int16 v15 = 0;
        uint64_t v7 = "#I target transfer attempt ongoing";
        char v8 = (uint8_t *)&v15;
LABEL_14:
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, v7, v8, 2u);
        return 0;
      }
    }
    else
    {
      for (uint64_t i = *(void *)(v1 + 2464); ; i += 168)
      {
        if (i == *(void *)(v1 + 2472)) {
          return (*(int (**)(void, uint64_t, void))(**(void **)(v1 + 304) + 464))(*(void *)(v1 + 304), 2, 0) > 0;
        }
        if (*(_DWORD *)(i + 64) == 1)
        {
          uint64_t v14 = *(unsigned __int8 *)(i + 95);
          if ((v14 & 0x80u) != 0) {
            uint64_t v14 = *(void *)(i + 80);
          }
          if (v14) {
            break;
          }
        }
      }
      return 1;
    }
  }
  return result;
}

uint64_t sub_1002EB758(uint64_t a1)
{
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v14);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v14);
  uint64_t v2 = ServiceMap;
  if ((v3 & 0x8000000000000000) != 0)
  {
    uint64_t v4 = (unsigned __int8 *)(v3 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v5 = 5381;
    do
    {
      unint64_t v3 = v5;
      unsigned int v6 = *v4++;
      uint64_t v5 = (33 * v5) ^ v6;
    }
    while (v6);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v16 = v3;
  uint64_t v7 = sub_10004D37C(&v2[1].__m_.__sig, &v16);
  if (v7)
  {
    uint64_t v9 = v7[3];
    char v8 = (std::__shared_weak_count *)v7[4];
    if (v8)
    {
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v2);
      atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v8);
      char v10 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v2);
  char v8 = 0;
  char v10 = 1;
LABEL_9:
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v9 && ((*(uint64_t (**)(uint64_t))(*(void *)v9 + 24))(v9) & 1) == 0)
  {
    int v11 = 1;
    int v12 = 1;
    if (v10) {
      return v12 ^ 1u;
    }
    goto LABEL_14;
  }
  int v11 = 0;
  int v12 = 0;
  if ((v10 & 1) == 0)
  {
LABEL_14:
    sub_10004D2C8(v8);
    int v12 = v11;
  }
  return v12 ^ 1u;
}

void sub_1002EB8B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  char v13 = v12;
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002EB8E8(uint64_t a1)
{
  return sub_1002EB370(a1 - 48);
}

void sub_1002EB8F0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EB9E0(uint64_t a1)
{
}

void sub_1002EB9E8(uint64_t a1, const void **a2)
{
  sub_10002FD9C((const void **)&v4 + 1, a2);
  unint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EBAF4(uint64_t a1, const void **a2)
{
}

void sub_1002EBAFC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    unint64_t v7 = *(void *)(a2 + 8);
    if (v7)
    {
      uint64_t v10 = a1;
      sub_10004FC84(v11, *(void **)a2, v7);
LABEL_6:
      long long v13 = 0uLL;
      uint64_t v14 = 0;
      sub_10030B4A4(&v13, *a3, a3[1], (a3[1] - *a3) >> 7);
      if (*(char *)(a4 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
      }
      else
      {
        *(_OWORD *)long long __p = *(_OWORD *)a4;
        __p[2] = *(void **)(a4 + 16);
      }
      uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
      if (v9)
      {
        if (std::__shared_weak_count::lock(v9)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  else if (*(unsigned char *)(a2 + 23))
  {
    uint64_t v10 = a1;
    *(_OWORD *)int v11 = *(_OWORD *)a2;
    uint64_t v12 = *(void *)(a2 + 16);
    goto LABEL_6;
  }
  char v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    LOWORD(v10) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Carrier name is empty", (uint8_t *)&v10, 2u);
  }
}

void sub_1002EBD5C(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  *(void *)(v18 - 72) = v15;
  sub_10030B640((void ***)(v18 - 72));
  if (*(char *)(v16 + 31) < 0) {
    operator delete(*v17);
  }
  sub_10006A6AC(a1);
}

void sub_1002EBDC0(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
}

void sub_1002EBDC8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EBEA8(uint64_t a1)
{
}

void sub_1002EBEB0(void *a1, char a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1002EBFCC;
  void v8[3] = &unk_1019B6730;
  v8[4] = a1;
  char v9 = a2;
  unint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  unsigned int v6 = v5;
  unint64_t v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v4;
  int v11 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v6);
}

void sub_1002EBFCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  *(unsigned char *)(v2 + 1705) = *(unsigned char *)(a1 + 40);
  (***(void (****)(Registry **__return_ptr))(v2 + 320))(&v16);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v16);
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    unsigned int v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v18 = v5;
  char v9 = sub_10004D37C(&v4[1].__m_.__sig, &v18);
  if (v9)
  {
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  uint64_t v10 = 0;
  char v12 = 1;
LABEL_9:
  if (v17) {
    sub_10004D2C8(v17);
  }
  if (v11 && (*(unsigned int (**)(uint64_t))(*(void *)v11 + 16))(v11)) {
    sub_1002DA714(v2, *(unsigned __int8 *)(v2 + 1705), 1);
  }
  (*(void (**)(void))(**(void **)(v2 + 336) + 144))(*(void *)(v2 + 336));
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v13 = *(void *)(v2 + 680);
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 184))(v13);
    }
  }
  uint64_t v14 = *(void *)(v2 + 384);
  if (v14) {
    (*(void (**)(uint64_t, void))(*(void *)v14 + 200))(v14, *(unsigned __int8 *)(a1 + 40));
  }
  uint64_t v15 = *(void *)(v2 + 528);
  if (v15) {
    (*(void (**)(uint64_t, void))(*(void *)v15 + 96))(v15, *(unsigned __int8 *)(v2 + 1705));
  }
  if (*(void *)(v2 + 5576) && !*(unsigned char *)(a1 + 40)) {
    sub_1002EBDC8(v2);
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_1002EC214(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EC23C(uint64_t a1, char a2)
{
}

void sub_1002EC244(void *a1, long long *a2, __int16 a3, const void **a4, uint64_t a5)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  v13[2] = sub_1002EC3C0;
  void v13[3] = &unk_1019B6758;
  void v13[4] = a5;
  v13[5] = a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __p = *a2;
    uint64_t v15 = *((void *)a2 + 2);
  }
  __int16 v17 = a3;
  sub_100083DA4(&v16, a4);
  unsigned int v8 = (std::__shared_weak_count *)a1[2];
  if (!v8 || (uint64_t v9 = a1[1], (v10 = std::__shared_weak_count::lock(v8)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v11 = v10;
  char v12 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v9;
  uint64_t v19 = v11;
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v13;
  dispatch_async(v12, block);
  if (v19) {
    sub_10004D2C8(v19);
  }
  sub_10004D2C8(v11);
  sub_1000558F4(&v16);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
}

void sub_1002EC3C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  if (*(void *)(v2 + 680))
  {
    if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v2 + 304) + 424))(*(void *)(v2 + 304), a1 + 48))
    {
      if (*(unsigned char *)(a1 + 80)) {
        uint64_t v3 = *(unsigned __int8 *)(a1 + 81);
      }
      else {
        uint64_t v3 = 2;
      }
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
    }
    else
    {
      (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
      uint64_t v3 = 2;
    }
    long long __p = 0;
    long long v7 = 0uLL;
    *(void *)long long buf = 0;
    uint64_t v5 = *(void *)(a1 + 72);
    sub_1000558F4((const void **)buf);
    if (v5)
    {
      *(void *)long long buf = 0;
      long long v9 = 0uLL;
      ctu::cf::assign();
      long long __p = *(void **)buf;
      *(void *)&long long v7 = v9;
      *(void *)((char *)&v7 + 7) = *(void *)((char *)&v9 + 7);
      HIBYTE(v7) = HIBYTE(v9);
    }
    (*(void (**)(void, uint64_t, void **))(**(void **)(v2 + 680) + 88))(*(void *)(v2 + 680), v3, &__p);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p);
    }
  }
  else
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "no provisioning operation present to consent to", buf, 2u);
    }
    (*(void (**)(void))(*(void *)(a1 + 32) + 16))();
  }
}

void sub_1002EC560(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

const void **sub_1002EC594(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 48;
  if (*(char *)(a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(v4 + 16) = *(void *)(a2 + 64);
    *(_OWORD *)uint64_t v4 = v5;
  }

  return sub_100083DA4((const void **)(a1 + 72), (const void **)(a2 + 72));
}

void sub_1002EC5FC(uint64_t a1)
{
  sub_1000558F4((const void **)(a1 + 72));
  if (*(char *)(a1 + 71) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 48);
    operator delete(v2);
  }
}

void sub_1002EC64C(uint64_t a1, long long *a2, __int16 a3, const void **a4, uint64_t a5)
{
}

void sub_1002EC658(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5)
{
  sub_10002FD9C((const void **)&v10 + 1, a2);
  sub_100083DA4((const void **)&v11, a3);
  sub_100083DA4((const void **)&v11 + 1, a4);
  sub_100083DA4(&v12, a5);
  long long v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EC7D0(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5)
{
}

void sub_1002EC7D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v12, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)char v12 = *(_OWORD *)a2;
    void v12[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v13, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v13 = *(_OWORD *)a3;
    v13[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(v14, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v14 = *(_OWORD *)a4;
    v14[2] = *(void **)(a4 + 16);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(v15, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a5;
    void v15[2] = *(void **)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a6;
    __p[2] = *(void **)(a6 + 16);
  }
  long long v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    if (std::__shared_weak_count::lock(v11)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002ECAFC(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (v33[103] < 0) {
    operator delete(*v36);
  }
  if (v33[79] < 0) {
    operator delete(*v35);
  }
  if (v33[55] < 0) {
    operator delete(*v37);
  }
  if (v33[31] < 0) {
    operator delete(*v34);
  }
  sub_10006A6AC(a1);
}

void sub_1002ECBD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
}

void sub_1002ECBD8(uint64_t a1, CFDataRef *a2, void *a3, void *a4, void *a5, int a6, uint64_t a7)
{
  void (***v42)(unsigned char *__return_ptr, void, dispatch_object_t *, uint64_t *, void);
  NSObject *v43;
  std::__shared_weak_count *v44;
  uint64_t v45;
  std::__shared_weak_count *v46;
  uint64_t v47;
  long long v48;
  std::__shared_weak_count *v49;
  NSObject *v50;
  NSObject *v51;
  os_signpost_id_t v52;
  NSObject *v53;
  long long v54;
  std::__shared_weak_count *v55;
  std::string *v56;
  std::string *v57;
  std::string::size_type size;
  uint64_t v59;
  char *v60;
  std::string::size_type v61;
  std::string::size_type v62;
  std::string::size_type v63;
  std::string::size_type v64;
  uint64_t v65;
  NSObject *v66;
  uint64_t v67;
  std::__shared_weak_count *v68;
  std::__shared_weak_count *v69;
  std::__shared_weak_count *v70;
  uint64_t v71;
  unsigned char v72[184];
  std::string *v73;
  std::__shared_weak_count *v74;
  void *v75;
  char v76;
  std::string *v77;
  std::__shared_weak_count *v78;
  uint64_t v79;
  std::__shared_weak_count *v80;
  dispatch_object_t object;
  long long v82;
  uint64_t v83;
  std::string v84;
  long long __p;
  uint64_t v86;
  std::string __str;
  const void *v88;
  unsigned char buf[32];
  long long v90;
  std::string v91[34];
  char v92;
  uint64_t v93[2];
  uint64_t v94;
  unsigned char v95[248];
  char v96[8];
  std::string v97;
  long long v98;
  void v99[2];
  std::string v100;
  std::string *v101;

  *(void *)((char *)v99 + 7) = 0;
  v99[0] = 0;
  if (*a2) {
    uint64_t v14 = sub_10008324C;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14 && CFDataGetLength(*a2))
  {
    int v15 = 0;
    char v16 = 0;
  }
  else
  {
    __int16 v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I No CSN from UI", buf, 2u);
    }
    (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 304) + 352))(buf);
    char v16 = buf[0];
    v99[0] = *(void *)&buf[1];
    *(void *)((char *)v99 + 7) = *(void *)&buf[8];
    int v15 = buf[16];
  }
  if (*a2) {
    unint64_t v18 = sub_10008324C;
  }
  else {
    unint64_t v18 = 0;
  }
  if (v18) {
    BOOL v19 = 0;
  }
  else {
    BOOL v19 = v15 == 0;
  }
  if (!v19)
  {
    if (*a3 ? sub_1000810B8 : 0)
    {
      long long v98 = 0uLL;
      if (v15)
      {
        LOBYTE(v98) = v16;
        *(void *)((char *)&v98 + 1) = v99[0];
        *((void *)&v98 + 1) = *(void *)((char *)v99 + 7);
      }
      else
      {
        sub_10002FD9C(&v88, (const void **)a2);
        *(void *)&long long v98 = sub_100CCD240((CFDataRef *)&v88);
        *((void *)&v98 + 1) = v23;
        sub_100030068(&v88);
      }
      memset(buf, 0, 24);
      ctu::cf::assign();
      std::string __str = *(std::string *)buf;
      int v24 = (long long *)(a1 + 592);
      std::string::operator=((std::string *)(a1 + 592), &__str);
      *(unsigned char *)(a1 + 586) = a6 ^ 1;
      *(unsigned char *)(a1 + 1512) = 0;
      (*(void (**)(void))(**(void **)(a1 + 336) + 152))(*(void *)(a1 + 336));
      uint64_t v25 = *(void *)(a1 + 288);
      if (*(char *)(a1 + 615) < 0)
      {
        sub_10004FC84(&__p, *(void **)(a1 + 592), *(void *)(a1 + 600));
      }
      else
      {
        long long __p = *v24;
        BOOL v86 = *(void *)(a1 + 608);
      }
      (*(void (**)(uint64_t, long long *))(*(void *)v25 + 72))(v25, &__p);
      if (SHIBYTE(v86) < 0) {
        operator delete((void *)__p);
      }
      memset(&v84, 0, sizeof(v84));
      if (*a4) {
        uint64_t v26 = sub_1000810B8;
      }
      else {
        uint64_t v26 = 0;
      }
      if (v26)
      {
        memset(buf, 0, 24);
        ctu::cf::assign();
        std::string::size_type v27 = *(void *)buf;
        v100.__r_.__value_.__r.__words[0] = *(void *)&buf[8];
        *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7) = *(void *)&buf[15];
        char v28 = buf[23];
        if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v84.__r_.__value_.__l.__data_);
        }
        v84.__r_.__value_.__r.__words[0] = v27;
        v84.__r_.__value_.__l.__size_ = v100.__r_.__value_.__r.__words[0];
        *(std::string::size_type *)((char *)&v84.__r_.__value_.__r.__words[1] + 7) = *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 7);
        *((unsigned char *)&v84.__r_.__value_.__s + 23) = v28;
      }
      if (*a5) {
        uint64_t v29 = sub_1000810B8;
      }
      else {
        uint64_t v29 = 0;
      }
      if (v29)
      {
        memset(buf, 0, 24);
        ctu::cf::assign();
        v82 = *(_OWORD *)buf;
        uint64_t v83 = *(void *)&buf[16];
        uint64_t v30 = sub_1008A2050((uint64_t *)&v82);
        if (SHIBYTE(v83) < 0) {
          operator delete((void *)v82);
        }
        if (a6)
        {
LABEL_53:
          if ((v30 & 0xFE) == 2)
          {
            CFBooleanRef v33 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
            {
              if (*(char *)(a1 + 615) < 0) {
                int v24 = *(long long **)v24;
              }
              uint64_t v34 = "kUnknown";
              if (v30 == 2) {
                uint64_t v34 = "kInProgress";
              }
              if (v30 == 3) {
                uint64_t v34 = "kPendingProfileRelease";
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)&void buf[4] = v24;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v34;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Purchase plan iccid: %s with status: %s", buf, 0x16u);
            }
LABEL_137:
            uint64_t v68 = *(std::__shared_weak_count **)(a1 + 184);
            if (v68)
            {
              char v69 = std::__shared_weak_count::lock(v68);
              if (v69)
              {
                uint64_t v70 = v69;
                long long v71 = *(void *)(a1 + 176);
                if (v71) {
                  (*(void (**)(uint64_t, std::string *))(*(void *)v71 + 64))(v71, &__str);
                }
                sub_10004D2C8(v70);
              }
            }
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(v84.__r_.__value_.__l.__data_);
            }
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
            return;
          }
          uint64_t v35 = (_OWORD *)(a1 + 680);
          uint64_t v36 = *(void *)(a1 + 680);
          if (v36)
          {
            v96[0] = 0;
            if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
              sub_10004FC84(&v97, v84.__r_.__value_.__l.__data_, v84.__r_.__value_.__l.__size_);
            }
            else {
              v97 = v84;
            }
            v96[0] = 1;
            (*(void (**)(uint64_t, long long *, uint64_t, char *))(*(void *)v36 + 128))(v36, &v98, a1 + 592, v96);
            if (v96[0])
            {
              if (SHIBYTE(v97.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v97.__r_.__value_.__l.__data_);
              }
              v96[0] = 0;
            }
            goto LABEL_137;
          }
          CFBooleanRef v37 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I No provisioning operation, creating operation for fetch", buf, 2u);
            CFBooleanRef v37 = *(NSObject **)(a1 + 40);
          }
          *(unsigned char *)(a1 + 1706) = 1;
          BOOL v38 = os_log_type_enabled(v37, OS_LOG_TYPE_DEFAULT);
          int v39 = *(char *)(a1 + 615);
          if (v38)
          {
            uint64_t v40 = (long long *)(a1 + 592);
            if (v39 < 0) {
              uint64_t v40 = *(long long **)v24;
            }
            *(_DWORD *)long long buf = 136315138;
            *(void *)&void buf[4] = v40;
            _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I purchased iccid: %s", buf, 0xCu);
            LOBYTE(v39) = *(unsigned char *)(a1 + 615);
          }
          if ((v39 & 0x80) != 0)
          {
            if (!*(void *)(a1 + 600))
            {
LABEL_80:
              uint64_t v41 = *(void *)(a1 + 304);
              v95[0] = 0;
              v95[240] = 0;
              (*(void (**)(uint64_t, unsigned char *))(*(void *)v41 + 256))(v41, v95);
              sub_10030D044((uint64_t)v95);
            }
          }
          else if (!(_BYTE)v39)
          {
            goto LABEL_80;
          }
          (*(void (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
          (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 320) + 640))(&v100);
          uint64_t v42 = (void (***)(unsigned char *__return_ptr, void, dispatch_object_t *, uint64_t *, void))v100.__r_.__value_.__r.__words[0];
          uint64_t v43 = *(NSObject **)(a1 + 24);
          dispatch_object_t object = v43;
          if (v43) {
            dispatch_retain(v43);
          }
          uint64_t v44 = *(std::__shared_weak_count **)(a1 + 16);
          if (!v44 || (uint64_t v45 = *(void *)(a1 + 8), (v46 = std::__shared_weak_count::lock(v44)) == 0)) {
            sub_100088B9C();
          }
          long long v47 = v45 + 80;
          if (!v45) {
            long long v47 = 0;
          }
          BOOL v79 = v47;
          uint64_t v80 = v46;
          (**v42)(buf, v42, &object, &v79, 0);
          uint64_t v48 = *(_OWORD *)buf;
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          uint64_t v49 = *(std::__shared_weak_count **)(a1 + 688);
          _OWORD *v35 = v48;
          if (v49)
          {
            sub_10004D2C8(v49);
            if (*(void *)&buf[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
            }
          }
          if (v80) {
            sub_10004D2C8(v80);
          }
          if (object) {
            dispatch_release(object);
          }
          if (v100.__r_.__value_.__l.__size_) {
            sub_10004D2C8((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
          }
          if (*(void *)(a1 + 696))
          {
            uint64_t v50 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v50, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Leaked jetsam assertion", buf, 2u);
            }
          }
          else
          {
            uint64_t v90 = 0u;
            memset(buf, 0, sizeof(buf));
            uint64_t v51 = *(NSObject **)(a1 + 40);
            unint64_t v52 = os_signpost_id_generate(v51);
            if (v52 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
            {
              BOOL v53 = *(NSObject **)(a1 + 40);
              if (os_signpost_enabled(v53))
              {
                LOWORD(v100.__r_.__value_.__l.__data_) = 0;
                _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v53, OS_SIGNPOST_INTERVAL_BEGIN, v52, "CellularPlanProvisioningOngoing", (const char *)&unk_1017DEDA7, (uint8_t *)&v100, 2u);
              }
            }
            v100.__r_.__value_.__r.__words[0] = (std::string::size_type)off_1019B97C0;
            uint64_t v101 = &v100;
            *(void *)long long buf = v52;
            *(void *)&uint8_t buf[8] = os_retain(v51);
            sub_1000336E8((uint64_t)&buf[16], (uint64_t)&v100);
            sub_100033A10(&v100);
            (***(void (****)(std::string **__return_ptr))(a1 + 320))(&v77);
            sub_100058DB0(&v75, "Provisioning_Operation_Ongoing");
            v93[0] = *(void *)buf;
            v93[1] = *(void *)&buf[8];
            sub_1000336E8((uint64_t)&v94, (uint64_t)&buf[16]);
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            sub_100033AF4(&buf[16]);
            Registry::createXpcJetsamAssertion();
            uint64_t v54 = *(_OWORD *)&v100.__r_.__value_.__l.__data_;
            *(_OWORD *)&v100.__r_.__value_.__l.__data_ = 0uLL;
            uint64_t v55 = *(std::__shared_weak_count **)(a1 + 704);
            *(_OWORD *)(a1 + 696) = v54;
            if (v55)
            {
              sub_10004D2C8(v55);
              if (v100.__r_.__value_.__l.__size_) {
                sub_10004D2C8((std::__shared_weak_count *)v100.__r_.__value_.__l.__size_);
              }
            }
            sub_1000339DC(v93);
            if (v76 < 0) {
              operator delete(v75);
            }
            if (v78) {
              sub_10004D2C8(v78);
            }
            sub_1000339DC((uint64_t *)buf);
          }
          uint64_t v77 = 0;
          char v78 = 0;
          sub_100324590(&v77);
          uint64_t v56 = v77;
          uint64_t v57 = v77 + 4;
          std::string::size_type size = v77[4].__r_.__value_.__l.__size_;
          if (size >= v77[4].__r_.__value_.__r.__words[2])
          {
            uint64_t v59 = sub_1000D8CE8((uint64_t *)v57, (long long *)(a1 + 592));
          }
          else
          {
            sub_10030BFC4(v57, (long long *)(a1 + 592));
            uint64_t v59 = size + 24;
          }
          v56[4].__r_.__value_.__l.__size_ = v59;
          bzero(buf, 0x4E8uLL);
          (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 416) + 168))(buf);
          if (v92 && a6) {
            std::string::operator=((std::string *)((char *)v77 + 136), v91);
          }
          uint64_t v60 = (char *)encodeProfileEligibilityCheckAction();
          sub_10003ED78((std::string *)((char *)v77 + 160), v60);
          uint64_t v61 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          LOBYTE(v62) = *((unsigned char *)&v84.__r_.__value_.__s + 23);
          uint64_t v63 = v84.__r_.__value_.__l.__size_;
          if ((v84.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            char v64 = HIBYTE(v84.__r_.__value_.__r.__words[2]);
          }
          else {
            char v64 = v84.__r_.__value_.__l.__size_;
          }
          if (!v64)
          {
            uint64_t v65 = *(void *)(a1 + 384);
            if (v65)
            {
              (*(void (**)(std::string *__return_ptr))(*(void *)v65 + 280))(&v100);
              if (SHIBYTE(v84.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v84.__r_.__value_.__l.__data_);
              }
              char v84 = v100;
              uint64_t v61 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
              uint64_t v63 = v100.__r_.__value_.__l.__size_;
              uint64_t v62 = HIBYTE(v100.__r_.__value_.__r.__words[2]);
            }
          }
          if ((v62 & 0x80u) != 0) {
            uint64_t v61 = v63;
          }
          if (!v61)
          {
            uint64_t v66 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v66, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(v100.__r_.__value_.__l.__data_) = 0;
              _os_log_impl((void *)&_mh_execute_header, v66, OS_LOG_TYPE_DEFAULT, "#E No SMDP Url available", (uint8_t *)&v100, 2u);
            }
          }
          std::string::operator=(v77, &v84);
          char v67 = *(void *)v35;
          long long v73 = v77;
          uint64_t v74 = v78;
          if (v78) {
            atomic_fetch_add_explicit(&v78->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_10030BBA0(v72, a7);
          (*(void (**)(uint64_t, long long *, std::string **, void, unsigned char *))(*(void *)v67 + 32))(v67, &v98, &v73, 0, v72);
          sub_10030AEBC((uint64_t)v72);
          if (v74) {
            sub_10004D2C8(v74);
          }
          if (v92) {
            sub_10030D10C((uint64_t)buf);
          }
          if (v78) {
            sub_10004D2C8(v78);
          }
          goto LABEL_137;
        }
      }
      else
      {
        uint64_t v30 = 0;
        if (a6) {
          goto LABEL_53;
        }
      }
      uint64_t v31 = *(void *)(a1 + 416);
      if (v31)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v31 + 24))(v31, a1 + 592, v30, a1 + 640, 2);
      }
      else
      {
        int v32 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#E cannot append without PendingTransferHandler", buf, 2u);
        }
      }
      goto LABEL_53;
    }
  }
  char v21 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#E No CSN or ICCID", buf, 2u);
  }
  uint64_t v22 = *(void *)(a1 + 680);
  if (v22) {
    (*(void (**)(uint64_t))(*(void *)v22 + 160))(v22);
  }
}

void sub_1002ED81C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,uint64_t a41,dispatch_object_t object,void *a43,uint64_t a44,uint64_t a45,uint64_t a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (LOBYTE(STACK[0x670])) {
    sub_10030D10C((uint64_t)&a65);
  }
  if (a39) {
    sub_10004D2C8(a39);
  }
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  _Unwind_Resume(a1);
}

void sub_1002ED9E4(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5, const void **a6)
{
  sub_10002FD9C((const void **)&v12 + 1, a2);
  sub_100083DA4((const void **)&v13, a3);
  sub_100083DA4((const void **)&v13 + 1, a4);
  sub_100083DA4((const void **)&v14, a5);
  sub_100083DA4((const void **)&v14 + 1, a6);
  long long v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    if (std::__shared_weak_count::lock(v11)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EDB84(uint64_t a1, const void **a2, const void **a3, const void **a4, const void **a5, const void **a6)
{
}

void sub_1002EDB8C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100333D20((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EDCC4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002EDCDC(uint64_t a1, uint64_t a2)
{
}

void sub_1002EDCE4(uint64_t a1, long long *a2)
{
  if (*(void *)(a1 + 416))
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 304) + 96))(*(void *)(a1 + 304), 1);
    bzero(buf, 0x4E0uLL);
    buf[1] = 9;
    uint64_t v8 = 0;
    int v9 = 0;
    long long v25 = 0u;
    long long v26 = 0u;
    long long v27 = 0u;
    long long v28 = 0u;
    long long v29 = 0u;
    long long v30 = 0u;
    long long v31 = 0u;
    long long v32 = 0u;
    long long v33 = 0u;
    long long v34 = 0u;
    long long v35 = 0u;
    long long v36 = 0u;
    long long v10 = 0u;
    long long v11 = 0u;
    long long v12 = 0u;
    long long v13 = 0u;
    long long v14 = 0u;
    long long v15 = 0u;
    long long v16 = 0u;
    long long v17 = 0u;
    long long v18 = 0u;
    long long v19 = 0u;
    long long v20 = 0u;
    long long v21 = 0u;
    long long v22 = 0u;
    long long v23 = 0u;
    long long v24 = 0u;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(&v37, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v37 = *a2;
      uint64_t v38 = *((void *)a2 + 2);
    }
    char v43 = 0;
    char v44 = 0;
    char v45 = 0;
    char v49 = 0;
    char v56 = 0;
    char v57 = 0;
    char v58 = 0;
    char v59 = 0;
    long long v64 = 0u;
    long long v39 = 0u;
    long long v40 = 0u;
    long long v41 = 0u;
    char v42 = 0;
    uint64_t v46 = 0;
    long long v47 = 0u;
    char v48 = 0;
    __int16 v51 = 0;
    long long v50 = 0u;
    long long v53 = 0u;
    long long v54 = 0u;
    long long v52 = 0u;
    char v55 = 0;
    long long v60 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    memset(v63, 0, sizeof(v63));
    (*(void (**)(void, uint8_t *))(**(void **)(a1 + 416) + 56))(*(void *)(a1 + 416), buf);
    uint64_t v5 = *(void *)(a1 + 336);
    v6[3] = 0;
    (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v5 + 72))(v5, 1, 0, v6);
    sub_10032493C(v6);
    sub_10030D10C((uint64_t)buf);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to create pending plans transfer handler for offload sim", buf, 2u);
    }
  }
}

void sub_1002EDF40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57,void *a58,uint64_t a59,int a60,__int16 a61,char a62,char a63)
{
  if (a86 < 0) {
    operator delete(__p);
  }
  if (a84 < 0) {
    operator delete(a83);
  }
  if (a82 < 0) {
    operator delete(a81);
  }
  if (a80 < 0) {
    operator delete(a79);
  }
  if (a78 < 0) {
    operator delete(a77);
  }
  if (a76 < 0) {
    operator delete(a75);
  }
  if (a74 < 0) {
    operator delete(a73);
  }
  if (a72 < 0) {
    operator delete(a70);
  }
  if (a69 < 0) {
    operator delete(a64);
  }
  if (a63 < 0) {
    operator delete(a58);
  }
  if (a57 < 0) {
    operator delete(a52);
  }
  sub_1001085D8(v86);
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(a1);
}

void sub_1002EE074(uint64_t a1, long long *a2)
{
}

void sub_1002EE07C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v10 = a3;
  sub_10031DDB0((uint64_t)&v11, a4);
  long long v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EE228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1002EE264(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

uint64_t sub_1002EE26C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002EE274(a1, a2, a3);
}

uint64_t sub_1002EE274(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(unsigned char *)(a1 + 2264))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)char v10 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Abort selection - Call ongoing", v10, 2u);
    }
    LOBYTE(result) = 33;
  }
  else
  {
    *(unsigned char *)(a1 + 586) = 0;
    LOWORD(result) = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 304) + 128))(*(void *)(a1 + 304), a3, a2);
    if ((unsigned __int16)result <= 0xFFu)
    {
      *(unsigned char *)(a1 + 1512) = 0;
      sub_1002DA714(a1, 0, 0);
      sub_1002DA408(a1);
      unsigned int v6 = *(std::__shared_weak_count **)(a1 + 184);
      if (v6)
      {
        long long v7 = std::__shared_weak_count::lock(v6);
        if (v7)
        {
          uint64_t v8 = v7;
          uint64_t v9 = *(void *)(a1 + 176);
          if (v9) {
            (*(void (**)(uint64_t))(*(void *)v9 + 48))(v9);
          }
          sub_10004D2C8(v8);
        }
      }
      (*(void (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
      LOBYTE(result) = 0;
    }
  }
  return result;
}

void sub_1002EE3C8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002EE3DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1002EE274(a1 - 144, a2, a3);
}

void sub_1002EE3E8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v10 = a3;
  sub_10031DDB0((uint64_t)&v11, a4);
  long long v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EE594(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
}

void sub_1002EE5D0(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1002EE5D8(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1002EE5E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  sub_1000C6BDC(&v7, a2);
  sub_100327A58((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EE768(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002EE7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002EE7A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  sub_10031DDB0((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EE944(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
}

void sub_1002EE980(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002EE988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1;
  sub_1000C6BDC(&v7, a2);
  sub_10031DDB0((uint64_t)&v8, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EEAE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002EEB20(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002EEB28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 304);
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v4 = *(void *)(a2 + 16);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v2 + 176))(v2, __p);
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002EEBB8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EEBD4(uint64_t a1, uint64_t a2)
{
}

void sub_1002EEBDC(uint64_t a1, uint64_t a2, void *aBlock)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    if (aBlock) {
      goto LABEL_3;
    }
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
    if (aBlock)
    {
LABEL_3:
      uint64_t v5 = _Block_copy(aBlock);
      goto LABEL_6;
    }
  }
  uint64_t v5 = 0;
LABEL_6:
  __p[3] = v5;
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002EED60(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1002EED68(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1002EED70(uint64_t a1, uint64_t a2, void *a3)
{
}

void sub_1002EED78(uint64_t a1, void **a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = a2;
    if (*((char *)a2 + 23) < 0) {
      uint64_t v7 = *a2;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&void buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I iccid: %s", buf, 0xCu);
  }
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  char v33 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 360))(&v31);
  if (v33
    && !(*(unsigned int (**)(void, void **))(**(void **)(a1 + 304) + 424))(*(void *)(a1 + 304), a2))
  {
    long long v29 = 0u;
    long long v30 = 0u;
    *(_OWORD *)long long buf = 0u;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(&v29, *a2, (unint64_t)a2[1]);
    }
    else
    {
      long long v29 = *(_OWORD *)a2;
      *(void *)&long long v30 = a2[2];
    }
    BYTE8(v30) = 1;
    uint64_t v8 = *(void *)(a1 + 304);
    long long v23 = *(_OWORD *)buf;
    if (SBYTE7(v30) < 0)
    {
      sub_10004FC84(&__p, (void *)v29, *((unint64_t *)&v29 + 1));
      char v9 = BYTE8(v30);
    }
    else
    {
      long long __p = v29;
      uint64_t v25 = v30;
      char v9 = 1;
    }
    char v26 = v9;
    char v27 = 1;
    char v10 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v8 + 248))(v8, &v23);
    if (v27 && SHIBYTE(v25) < 0) {
      operator delete((void *)__p);
    }
    if (v10)
    {
      uint64_t v11 = *(void *)(a1 + 240);
      uint64_t v12 = v31;
      uint64_t v13 = v32;
      long long v19 = *(_OWORD *)buf;
      if (SBYTE7(v30) < 0)
      {
        sub_10004FC84(&v20, (void *)v29, *((unint64_t *)&v29 + 1));
      }
      else
      {
        long long v20 = v29;
        uint64_t v21 = v30;
      }
      char v22 = BYTE8(v30);
      v15[0] = _NSConcreteStackBlock;
      v15[1] = 1174405120;
      void v15[2] = sub_1002EF214;
      void v15[3] = &unk_1019B6788;
      void v15[4] = a1;
      if (*((char *)a2 + 23) < 0)
      {
        sub_10004FC84(&v16, *a2, (unint64_t)a2[1]);
      }
      else
      {
        long long v16 = *(_OWORD *)a2;
        long long v17 = a2[2];
      }
      sub_10031DDB0((uint64_t)v18, a3);
      (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, void *))(*(void *)v11 + 72))(v11, v12, v13, &v19, v15);
      if (SHIBYTE(v21) < 0) {
        operator delete((void *)v20);
      }
      (*(void (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
      sub_1002DA408(a1);
      uint64_t v14 = *(void *)(a1 + 416);
      if (v14) {
        (*(void (**)(uint64_t, void **))(*(void *)v14 + 144))(v14, a2);
      }
      sub_10023D374(v18);
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)v16);
      }
    }
    else
    {
      sub_1002EB2F8(a3, 0, 13);
    }
    if (SBYTE7(v30) < 0) {
      operator delete((void *)v29);
    }
  }
  else
  {
    sub_1002EB2F8(a3, 0, 4);
  }
}

void sub_1002EF178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v42 - 105) < 0) {
    operator delete(*(void **)(v42 - 128));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EF214(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v4 = *(void **)(a1 + 32);
  uint64_t v5 = v4[38];
  v16[0] = 0;
  char v19 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 248))(v5, v16);
  if (v19 && v18 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = v4[66];
  if (v6)
  {
    if (*(char *)(a1 + 63) < 0)
    {
      sub_10004FC84(v12, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      *(_OWORD *)uint64_t v12 = *(_OWORD *)(a1 + 40);
      uint64_t v13 = *(void *)(a1 + 56);
    }
    (*(void (**)(uint64_t, void **))(*(void *)v6 + 128))(v6, v12);
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }
  uint64_t v7 = v4[64];
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, a1 + 40);
  }
  int v8 = *a2;
  if (v8 == 2)
  {
    char v10 = v4[5];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = asString();
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Error: %s", buf, 0xCu);
    }
  }
  else if (v8 == 1 && a2[1])
  {
    return sub_1002EB2F8(a1 + 64, 1, 0);
  }
  return sub_1002EB2F8(a1 + 64, 0, 5);
}

void sub_1002EF3F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EF434(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v4;
  }
  return sub_10031DDB0(a1 + 64, a2 + 64);
}

void sub_1002EF49C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 63) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EF4B8(uint64_t a1)
{
  sub_10023D374((void *)(a1 + 64));
  if (*(char *)(a1 + 63) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 40);
    operator delete(v2);
  }
}

void sub_1002EF508(void *a1, uint64_t a2)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 0x40000000;
  v8[2] = sub_1002EF620;
  void v8[3] = &unk_1019B67E8;
  v8[4] = a2;
  void v8[5] = a1;
  uint64_t v3 = (std::__shared_weak_count *)a1[2];
  if (!v3 || (uint64_t v4 = a1[1], (v5 = std::__shared_weak_count::lock(v3)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v6 = v5;
  uint64_t v7 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v4;
  char v10 = v6;
  atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v8;
  dispatch_async(v7, block);
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10004D2C8(v6);
}

uint64_t sub_1002EF620(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 40);
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I removing all user profiles", buf, 2u);
  }
  int v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 80))(*(void *)(v2 + 320));
  VinylSlotIdFromInt(v4);
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  char v26 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 304) + 352))(&v24);
  if (!v26) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  uint64_t v5 = *(void *)(v2 + 304);
  sub_1002EF958((uint64_t)buf);
  long long v19 = *(_OWORD *)buf;
  *(_OWORD *)long long __p = *(_OWORD *)v16;
  uint64_t v21 = v17;
  v16[0] = 0;
  v16[1] = 0;
  uint64_t v17 = 0;
  char v22 = v18;
  char v23 = 1;
  char v6 = (*(uint64_t (**)(uint64_t, long long *))(*(void *)v5 + 248))(v5, &v19);
  if (v23 && SHIBYTE(v21) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v17) < 0)
  {
    operator delete(v16[0]);
    if (v6) {
      goto LABEL_9;
    }
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  if ((v6 & 1) == 0) {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
LABEL_9:
  uint64_t v7 = *(void *)(v2 + 240);
  uint64_t v8 = v24;
  uint64_t v9 = v25;
  sub_1002EF958((uint64_t)v12);
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 0x40000000;
  v11[2] = sub_1002EF9F4;
  _OWORD v11[3] = &unk_1019B67C0;
  void v11[4] = *(void *)(a1 + 32);
  v11[5] = v2;
  (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void *))(*(void *)v7 + 72))(v7, v8, v9, v12, v11);
  if (v14 < 0) {
    operator delete(v13);
  }
  (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
  sub_1002DA408(v2);
  uint64_t result = *(void *)(v2 + 416);
  if (result) {
    return (*(uint64_t (**)(uint64_t))(*(void *)result + 160))(result);
  }
  return result;
}

void sub_1002EF908(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41,char a42)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EF958(uint64_t a1@<X8>)
{
  sub_100058DB0(__p, "All_Profiles");
  uint64_t v2 = (unsigned char *)(a1 + 16);
  if (SHIBYTE(v5) < 0)
  {
    sub_10004FC84(v2, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v5);
    *(unsigned char *)(a1 + 40) = 1;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_OWORD *)uint64_t v2 = *(_OWORD *)__p;
    *(void *)(a1 + 32) = v5;
    *(unsigned char *)(a1 + 40) = 1;
  }
}

void sub_1002EF9D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002EF9F4(uint64_t a1, unsigned __int8 *a2)
{
  int v4 = *(void **)(a1 + 40);
  uint64_t v5 = v4[38];
  v12[0] = 0;
  char v15 = 0;
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 248))(v5, v12);
  if (v15 && v14 < 0) {
    operator delete(__p);
  }
  uint64_t v6 = v4[64];
  if (v6) {
    (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  }
  int v7 = *a2;
  if (v7 == 2)
  {
    uint64_t v9 = v4[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Error: %s", (uint8_t *)&v10, 0xCu);
    }
  }
  else if (v7 == 1 && a2[1])
  {
    return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002EFB70(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  if (a20)
  {
    if (a18 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002EFB9C(uint64_t a1, uint64_t a2)
{
}

void *sub_1002EFBA4(void *a1, int a2, uint64_t a3)
{
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  void v12[2] = sub_1002EFD14;
  void v12[3] = &unk_1019B6808;
  void v12[4] = a1;
  int v14 = a2;
  sub_1000DFC90((uint64_t)v13, a3);
  int v4 = (std::__shared_weak_count *)a1[2];
  if (!v4 || (v5 = a1[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  int v7 = v6;
  uint64_t v8 = a1[3];
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _OWORD v10[2] = sub_10031EAD8;
  v10[3] = &unk_1019B8B90;
  v10[5] = v5;
  uint64_t v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  v10[4] = v12;
  dispatch_async(v8, v10);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v7);
  return sub_100060644(v13);
}

void sub_1002EFD08(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_1002EFD14(uint64_t a1)
{
  (*(void (**)(void, void, uint64_t))(**(void **)(*(void *)(a1 + 32) + 304) + 160))(*(void *)(*(void *)(a1 + 32) + 304), *(unsigned int *)(a1 + 72), 1);

  return sub_1000607A8(a1 + 40, 1);
}

uint64_t sub_1002EFD80(uint64_t a1, uint64_t a2)
{
  return sub_1000DFC90(a1 + 40, a2 + 40);
}

void *sub_1002EFD8C(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 40));
}

void *sub_1002EFD94(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1002EFBA4((void *)(a1 - 48), a2, a3);
}

void *sub_1002EFD9C(void *a1, int a2, uint64_t a3)
{
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  v13[2] = sub_1002EFF10;
  void v13[3] = &unk_1019B6838;
  void v13[4] = a1;
  sub_1000DFC90((uint64_t)v14, a3);
  int v15 = a2;
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v6 = a1[1], (int v7 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v8 = v7;
  uint64_t v9 = a1[3];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120;
  v11[2] = sub_10031EAD8;
  _OWORD v11[3] = &unk_1019B8B90;
  v11[5] = v6;
  uint64_t v12 = v8;
  atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  void v11[4] = v13;
  dispatch_async(v9, v11);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v8);
  return sub_100060644(v14);
}

void sub_1002EFF04(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_1002EFF10(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v2 + 2264))
  {
    int v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Abort request - Call ongoing", v5, 2u);
    }
    return sub_1000607A8(a1 + 40, 0);
  }
  else
  {
    (*(void (**)(void, void, uint64_t))(**(void **)(v2 + 304) + 144))(*(void *)(v2 + 304), *(unsigned int *)(a1 + 72), 1);
    return sub_1000607A8(a1 + 40, 1);
  }
}

void *sub_1002EFFE8(uint64_t a1, int a2, uint64_t a3)
{
  return sub_1002EFD9C((void *)(a1 - 48), a2, a3);
}

uint64_t sub_1002EFFF0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 184))();
}

uint64_t sub_1002F0018(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 384) + 184))();
}

BOOL sub_1002F0040(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100335068;
  void v5[3] = &unk_1019B9940;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_10005ABF4;
    int v10 = &unk_1019B8B08;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100059E90;
    int v10 = &unk_1019B8AE8;
    uint64_t v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL sub_1002F0170(uint64_t a1)
{
  return sub_1002F0040(a1 - 48);
}

void sub_1002F0178(uint64_t a1)
{
  uint64_t v3 = a1;
  block[0] = _NSConcreteStackBlock;
  block[1] = 0x40000000;
  block[2] = sub_1003350E0;
  block[3] = &unk_1019B9960;
  void block[4] = a1 + 8;
  block[5] = &v3;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8)) {
    dispatch_async_and_wait(v1, block);
  }
  else {
    dispatch_sync(v1, block);
  }
}

void sub_1002F01FC(uint64_t a1)
{
}

void sub_1002F0204(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000DA470((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F0338(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002F0348(uint64_t a1, uint64_t a2)
{
}

void sub_1002F0350(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F0430(uint64_t a1)
{
}

void sub_1002F0438(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84(__p, *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 8);
    __p[2] = *(void **)(a2 + 24);
  }
  __p[3] = *(void **)(a2 + 32);
  int v6 = *(_DWORD *)(a2 + 40);
  uint64_t v7 = a1;
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F05BC(uint64_t a1, uint64_t a2)
{
}

void sub_1002F05C4(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)long long buf = a2;
    sub_10033571C((uint64_t)v7, a3);
    v7[4] = a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F0758(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F0770(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1002F0778(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)long long buf = a2;
    sub_1003359CC((uint64_t)v7, a3);
    v7[4] = a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F095C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F097C(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1002F0984(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)long long buf = a2;
    sub_100335C04((uint64_t)v7, a3);
    v7[4] = a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F0B68(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F0B88(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1002F0B90(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)long long buf = a2;
    sub_1000DFC90((uint64_t)v7, a3);
    v7[4] = a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F0D24(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F0D3C(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_1002F0D44(uint64_t a1, int a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(_DWORD *)long long buf = a2;
    sub_1000DFC90((uint64_t)v7, a3);
    v7[4] = a1;
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F0ED8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F0EF0(uint64_t a1, int a2, uint64_t a3)
{
}

uint64_t sub_1002F0EF8(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 528);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

uint64_t sub_1002F0F28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 480);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 80))();
  }
  return result;
}

void sub_1002F0F58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    sub_10006891C((uint64_t)buf, a2);
    sub_1000DFC90((uint64_t)v8, a3);
    v8[4] = a1;
    uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
    if (v5)
    {
      if (std::__shared_weak_count::lock(v5)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  int v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F11D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_1002F1208(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1002F1278(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002F1280(uint64_t a1, uint64_t a2, char a3)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  char v7 = a3;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F13E8(uint64_t a1, uint64_t a2, char a3)
{
}

void sub_1002F13F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10032CA08((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F1524(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void sub_1002F1534(uint64_t a1, uint64_t a2)
{
}

void sub_1002F153C(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(void *)(a4 + 24))
  {
    sub_10006891C((uint64_t)buf, a2);
    sub_100336AB8((uint64_t)v10, a4);
    v10[32] = a3;
    uint64_t v11 = a1;
    char v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      if (std::__shared_weak_count::lock(v7)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F17C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002F17FC(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1002F1804(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  if (*(void *)(a4 + 24))
  {
    sub_10006891C((uint64_t)buf, a2);
    sub_100336AB8((uint64_t)v10, a4);
    v10[32] = a3;
    uint64_t v11 = a1;
    char v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (v7)
    {
      if (std::__shared_weak_count::lock(v7)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v8 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F1A90(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, char a11)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002F1AC4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
}

void sub_1002F1ACC(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    uint64_t v5 = *(void *)(a2 + 16);
  }
  uint64_t v6 = a1;
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F1C18(uint64_t a1, uint64_t a2)
{
}

void sub_1002F1C20(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (*(void *)(a3 + 24))
  {
    *(void *)long long buf = a1;
    sub_100323990((uint64_t)&v8, a3);
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a2;
      __p[2] = *(void **)(a2 + 16);
    }
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
    if (v6)
    {
      if (std::__shared_weak_count::lock(v6)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Invalid callback", buf, 2u);
  }
}

void sub_1002F1DF8(_Unwind_Exception *a1)
{
  sub_1000605C0(v1);
  _Unwind_Resume(a1);
}

void sub_1002F1E2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002F1E34(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v8, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v8 = *a3;
    uint64_t v9 = *((void *)a3 + 2);
  }
  if (*((char *)a3 + 47) < 0)
  {
    sub_10004FC84(&v10, *((void **)a3 + 3), *((void *)a3 + 4));
  }
  else
  {
    long long v10 = *(long long *)((char *)a3 + 24);
    uint64_t v11 = *((void *)a3 + 5);
  }
  if (*((char *)a3 + 71) < 0)
  {
    sub_10004FC84(&v12, *((void **)a3 + 6), *((void *)a3 + 7));
  }
  else
  {
    long long v12 = a3[3];
    uint64_t v13 = *((void *)a3 + 8);
  }
  if (*((char *)a3 + 95) < 0)
  {
    sub_10004FC84(&v14, *((void **)a3 + 9), *((void *)a3 + 10));
  }
  else
  {
    long long v14 = *(long long *)((char *)a3 + 72);
    uint64_t v15 = *((void *)a3 + 11);
  }
  if (*((char *)a3 + 119) < 0)
  {
    sub_10004FC84(&v16, *((void **)a3 + 12), *((void *)a3 + 13));
  }
  else
  {
    long long v16 = a3[6];
    uint64_t v17 = *((void *)a3 + 14);
  }
  if (*((char *)a3 + 143) < 0)
  {
    sub_10004FC84(&v18, *((void **)a3 + 15), *((void *)a3 + 16));
  }
  else
  {
    long long v18 = *(long long *)((char *)a3 + 120);
    uint64_t v19 = *((void *)a3 + 17);
  }
  sub_10032CA08((uint64_t)&v20, a4);
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F2160(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F21FC(uint64_t a1)
{
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1002F2288(uint64_t a1, uint64_t a2, long long *a3, uint64_t a4)
{
}

void sub_1002F2290(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  void v5[2] = sub_100337A44;
  void v5[3] = &unk_1019B9B00;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  uint64_t v6 = v5;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    a2[12] = 0u;
    a2[13] = 0u;
    a2[10] = 0u;
    a2[11] = 0u;
    a2[8] = 0u;
    a2[9] = 0u;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100337C88;
    long long v10 = &unk_1019B9B40;
    uint64_t v11 = a2;
    long long v12 = &v6;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    a2[12] = 0u;
    a2[13] = 0u;
    a2[10] = 0u;
    a2[11] = 0u;
    a2[8] = 0u;
    a2[9] = 0u;
    a2[6] = 0u;
    a2[7] = 0u;
    a2[4] = 0u;
    a2[5] = 0u;
    a2[2] = 0u;
    a2[3] = 0u;
    *a2 = 0u;
    a2[1] = 0u;
    block = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_100337A50;
    long long v10 = &unk_1019B9B20;
    uint64_t v11 = a2;
    long long v12 = &v6;
    dispatch_sync(v2, &block);
  }
}

void sub_1002F23E4(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
}

void sub_1002F23EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100337CDC((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F2524(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F253C(uint64_t a1, uint64_t a2)
{
}

void sub_1002F2544(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_1000332B4((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F267C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F2694(uint64_t a1, uint64_t a2)
{
}

void sub_1002F269C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v15, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v15 = *(_OWORD *)a2;
    void v15[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long v16 = *(_OWORD *)a3;
    v16[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(v17, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a4;
    void v17[2] = *(void **)(a4 + 16);
  }
  if (*(char *)(a5 + 23) < 0)
  {
    sub_10004FC84(v18, *(void **)a5, *(void *)(a5 + 8));
  }
  else
  {
    *(_OWORD *)long long v18 = *(_OWORD *)a5;
    void v18[2] = *(void **)(a5 + 16);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a6;
    __p[2] = *(void **)(a6 + 16);
  }
  sub_100338B68((uint64_t)&v20, a7);
  uint64_t v13 = *(std::__shared_weak_count **)(a1 + 16);
  if (v13)
  {
    if (std::__shared_weak_count::lock(v13)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F29B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F2A54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

void sub_1002F2A5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
  uint64_t v12 = a1;
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v15 = a6;
  uint64_t v16 = a7;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v17, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)a2;
    void v17[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a3;
    __p[2] = *(void **)(a3 + 16);
  }
  char v19 = a8;
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 16);
  if (v11)
  {
    if (std::__shared_weak_count::lock(v11)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F2C4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F2C88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, char a8)
{
}

void sub_1002F2C90(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_10030D9BC(v15, a8);
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v16, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v16 = *(_OWORD *)a3;
    v16[2] = *(void **)(a3 + 16);
  }
  char v17 = a9;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  __p[3] = a4;
  __p[4] = a5;
  uint64_t v14 = *(std::__shared_weak_count **)(a1 + 16);
  if (v14)
  {
    if (std::__shared_weak_count::lock(v14)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F2EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,char a46,void *__p,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a52 < 0) {
    operator delete(__p);
  }
  if (a46) {
    sub_1000C5578(v52);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F2F3C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, void *a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
}

void sub_1002F2F4C(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v8, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)a2;
    v8[2] = *(void **)(a2 + 16);
  }
  sub_10030DBE4((uint64_t)&v9, a3);
  char v10 = a4;
  char v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F3148(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 31) < 0) {
    operator delete(*v16);
  }
  sub_10006A6AC(a1);
}

void sub_1002F3188(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
}

void sub_1002F3190(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
  uint64_t v10 = a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v11 = *(_OWORD *)a2;
    v11[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v12, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
    void v12[2] = *(void **)(a3 + 16);
  }
  sub_1000593FC((uint64_t)&__p, a4);
  sub_1000DFC90((uint64_t)&v14, a5);
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F33F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,char a30)
{
  if (a2)
  {
    if (*(char *)(v30 + 31) < 0) {
      operator delete(*v31);
    }
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F34A4(uint64_t a1, uint64_t a2, uint64_t a3, long long *a4, uint64_t a5)
{
}

void sub_1002F34AC(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(v17, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)char v17 = *(_OWORD *)a4;
    void v17[2] = *(void **)(a4 + 16);
  }
  if (*(char *)(a8 + 23) < 0)
  {
    sub_10004FC84(v18, *(void **)a8, *(void *)(a8 + 8));
  }
  else
  {
    *(_OWORD *)long long v18 = *(_OWORD *)a8;
    void v18[2] = *(void **)(a8 + 16);
  }
  void v18[3] = a5;
  void v18[4] = a6;
  void v18[5] = a2;
  void v18[6] = a3;
  if (*(char *)(a9 + 23) < 0)
  {
    sub_10004FC84(v19, *(void **)a9, *(void *)(a9 + 8));
  }
  else
  {
    *(_OWORD *)char v19 = *(_OWORD *)a9;
    v19[2] = *(void **)(a9 + 16);
  }
  if (*(char *)(a7 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a7, *(void *)(a7 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a7;
    __p[2] = *(void **)(a7 + 16);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a1 + 16);
  if (v16)
  {
    if (std::__shared_weak_count::lock(v16)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F3764(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F37D0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002F37E0(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
  uint64_t v16 = a1;
  if (*(char *)(a7 + 23) < 0)
  {
    sub_10004FC84(v17, *(void **)a7, *(void *)(a7 + 8));
  }
  else
  {
    *(_OWORD *)char v17 = *(_OWORD *)a7;
    void v17[2] = *(void **)(a7 + 16);
  }
  void v17[3] = a2;
  v17[4] = a3;
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a4;
    __p[2] = *(void **)(a4 + 16);
  }
  __p[3] = a5;
  __p[4] = a6;
  char v19 = a8;
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (v15)
  {
    if (std::__shared_weak_count::lock(v15)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F39F4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F3A30(uint64_t a1, void *a2, void *a3, uint64_t a4, void *a5, void *a6, uint64_t a7, char a8)
{
}

void sub_1002F3A38(uint64_t a1, long long *a2, void **a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
  if (!*(void *)(a1 + 240))
  {
    char v23 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v24 = "invalid multiplexer";
    goto LABEL_23;
  }
  uint64_t v14 = (os_log_t *)(a1 + 40);
  sub_1002F410C((uint64_t)buf, (NSObject **)(a1 + 40), a1 + 2464);
  if ((v65 & 0x80u) == 0) {
    uint64_t v15 = (unsigned __int8 *)v65;
  }
  else {
    uint64_t v15 = *(unsigned __int8 **)&buf[8];
  }
  uint64_t v16 = (unsigned __int8 *)*((unsigned __int8 *)a3 + 23);
  int v17 = (char)v16;
  if ((char)v16 < 0) {
    uint64_t v16 = (unsigned __int8 *)a3[1];
  }
  if (v15 == v16)
  {
    if (v17 >= 0) {
      long long v18 = (unsigned __int8 *)a3;
    }
    else {
      long long v18 = (unsigned __int8 *)*a3;
    }
    if ((v65 & 0x80) != 0)
    {
      uint64_t v25 = a4;
      uint64_t v26 = a5;
      char v27 = *(void **)buf;
      int v28 = memcmp(*(const void **)buf, v18, *(size_t *)&buf[8]);
      long long v29 = v27;
      a5 = v26;
      a4 = v25;
      operator delete(v29);
      if (!v28)
      {
LABEL_35:
        uint64_t v34 = *(void *)(a1 + 512);
        if (v34)
        {
          if (*((char *)a2 + 23) < 0)
          {
            sub_10004FC84(&v60, *(void **)a2, *((void *)a2 + 1));
          }
          else
          {
            long long v60 = *a2;
            uint64_t v61 = *((void *)a2 + 2);
          }
          if (*((char *)a3 + 23) < 0)
          {
            sub_10004FC84(&v58, *a3, (unint64_t)a3[1]);
          }
          else
          {
            long long v58 = *(_OWORD *)a3;
            char v59 = (unsigned __int8 *)a3[2];
          }
          if (*((char *)a6 + 23) < 0)
          {
            sub_10004FC84(&v56, *(void **)a6, *((void *)a6 + 1));
          }
          else
          {
            long long v56 = *a6;
            uint64_t v57 = *((void *)a6 + 2);
          }
          long long v53 = 0;
          long long v54 = 0;
          uint64_t v55 = 0;
          sub_10005C928(&v53, *(const void **)a7, *(void *)(a7 + 8), *(void *)(a7 + 8) - *(void *)a7);
          (*(void (**)(uint64_t, long long *, long long *, uint64_t, uint64_t, long long *, void **))(*(void *)v34 + 80))(v34, &v60, &v58, a4, a5, &v56, &v53);
          if (v53)
          {
            long long v54 = v53;
            operator delete(v53);
          }
          if (SHIBYTE(v57) < 0) {
            operator delete((void *)v56);
          }
          if (SHIBYTE(v59) < 0) {
            operator delete((void *)v58);
          }
          if ((SHIBYTE(v61) & 0x80000000) == 0) {
            return;
          }
          long long v37 = (void *)v60;
LABEL_68:
          operator delete(v37);
          return;
        }
        char v23 = *v14;
        if (!os_log_type_enabled(*v14, OS_LOG_TYPE_ERROR)) {
          return;
        }
        *(_WORD *)long long buf = 0;
        uint64_t v24 = "invalid source transfer model";
LABEL_23:
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, buf, 2u);
        return;
      }
    }
    else
    {
      if (!v65) {
        goto LABEL_35;
      }
      uint64_t v19 = 0;
      do
      {
        int v20 = buf[v19];
        int v21 = v18[v19];
      }
      while (v20 == v21 && v65 - 1 != v19++);
      if (v20 == v21) {
        goto LABEL_35;
      }
    }
  }
  else if ((v65 & 0x80) != 0)
  {
    operator delete(*(void **)buf);
  }
  uint64_t v30 = *v14;
  if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v31 = a6;
    if (*((char *)a6 + 23) < 0) {
      uint64_t v31 = *(void **)a6;
    }
    uint64_t v32 = (unsigned __int8 *)a3;
    if (*((char *)a3 + 23) < 0) {
      uint64_t v32 = (unsigned __int8 *)*a3;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v31;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v32;
    _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I send generic transfer request [%s] to source for plan [%s]", buf, 0x16u);
  }
  uint64_t v33 = *(void *)(a1 + 240);
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v52 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v49, *a3, (unint64_t)a3[1]);
  }
  else
  {
    long long v49 = *(_OWORD *)a3;
    long long v50 = (unsigned __int8 *)a3[2];
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_10004FC84(v47, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    *(_OWORD *)long long v47 = *a6;
    uint64_t v48 = *((void *)a6 + 2);
  }
  char v44 = 0;
  char v45 = 0;
  uint64_t v46 = 0;
  sub_10005C928(&v44, *(const void **)a7, *(void *)(a7 + 8), *(void *)(a7 + 8) - *(void *)a7);
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&v38, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v38 = *a2;
    uint64_t v39 = *((void *)a2 + 2);
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v40, *a3, (unint64_t)a3[1]);
  }
  else
  {
    long long v40 = *(_OWORD *)a3;
    long long v41 = (unsigned __int8 *)a3[2];
  }
  if (*((char *)a6 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a6, *((void *)a6 + 1));
  }
  else
  {
    long long __p = *a6;
    uint64_t v43 = *((void *)a6 + 2);
  }
  uint64_t v63 = 0;
  long long v35 = (char *)operator new(0x58uLL);
  *(void *)long long v35 = off_1019B9DA0;
  *((void *)v35 + 1) = a1;
  *((_OWORD *)v35 + 1) = v38;
  *((void *)v35 + 4) = v39;
  long long v38 = 0uLL;
  uint64_t v39 = 0;
  *(_OWORD *)(v35 + 40) = v40;
  *((void *)v35 + 7) = v41;
  long long v40 = 0uLL;
  long long v41 = 0;
  long long v36 = __p;
  *((void *)v35 + 10) = v43;
  *((_OWORD *)v35 + 4) = v36;
  long long __p = 0uLL;
  uint64_t v43 = 0;
  uint64_t v63 = v35;
  (*(void (**)(uint64_t, long long *, long long *, uint64_t, uint64_t, void **, void **, void *))(*(void *)v33 + 112))(v33, &__dst, &v49, a4, a5, v47, &v44, v62);
  sub_1000C752C(v62);
  if (SHIBYTE(v43) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete((void *)v40);
  }
  if (SHIBYTE(v39) < 0) {
    operator delete((void *)v38);
  }
  if (v44)
  {
    char v45 = v44;
    operator delete(v44);
  }
  if (SHIBYTE(v48) < 0) {
    operator delete(v47[0]);
  }
  if (SHIBYTE(v50) < 0) {
    operator delete((void *)v49);
  }
  if (SHIBYTE(v52) < 0)
  {
    long long v37 = (void *)__dst;
    goto LABEL_68;
  }
}

void sub_1002F3FF0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,char a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *__p,uint64_t a50,uint64_t a51,void *a52,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  if (*(char *)(v57 - 201) < 0) {
    operator delete(*(void **)(v57 - 224));
  }
  if (*(char *)(v57 - 169) < 0) {
    operator delete(*(void **)(v57 - 192));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F410C(uint64_t a1, NSObject **a2, uint64_t a3)
{
  uint64_t v9 = 0;
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  sub_100CD7BD8(a3, &v9);
  if (v11 != 1)
  {
    if (v11)
    {
      uint64_t v5 = *a2;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v6 = "dual physical sim device doesnot support physical SIM -> eSIM conversion";
        goto LABEL_12;
      }
    }
    else
    {
      uint64_t v5 = *a2;
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v8 = 0;
        uint64_t v6 = "cannot find physical SIM iccid";
LABEL_12:
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, v6, v8, 2u);
      }
    }
    *(void *)a1 = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)(a1 + 16) = 0;
    goto LABEL_9;
  }
  if (*(char *)(v9 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)a1, *(void **)(v9 + 40), *(void *)(v9 + 48));
  }
  else
  {
    long long v7 = *(_OWORD *)(v9 + 40);
    *(void *)(a1 + 16) = *(void *)(v9 + 56);
    *(_OWORD *)a1 = v7;
  }
LABEL_9:
  sub_1000886C0((uint64_t)&v9, v10);
}

void sub_1002F420C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_1002F4224(uint64_t a1, long long *a2, void **a3, uint64_t a4, uint64_t a5, long long *a6, uint64_t a7)
{
}

void sub_1002F422C(uint64_t a1, uint64_t a2)
{
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a2;
    __p[2] = *(void **)(a2 + 16);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F4384(uint64_t a1, uint64_t a2)
{
}

void sub_1002F438C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6)
{
  if (*(unsigned char *)(a1 + 587))
  {
    uint64_t v12 = *(void *)(a1 + 384);
    if (!v12 || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 176))(v12) & 1) == 0)
    {
      uint64_t v13 = *(void *)(a1 + 336);
      v35[3] = 0;
      (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v13 + 72))(v13, 1, 1, v35);
      sub_10032493C(v35);
    }
  }
  uint64_t v14 = *(void *)(a1 + 416);
  if (!v14)
  {
    int v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v18 = "pending plans transfer handler not available";
    goto LABEL_17;
  }
  (*(void (**)(uint64_t, unsigned __int8 **, uint64_t, uint64_t))(*(void *)v14 + 112))(v14, a4, a5, a6);
  if (a5 <= 0xC && ((1 << a5) & 0x1380) != 0)
  {
    v36[0] = 0;
    v36[1] = 0;
    char v37 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v36);
    if (v37)
    {
      *(void *)long long buf = 0;
      uint64_t v33 = 0;
      uint64_t v34 = 0;
      ctu::hex((uint64_t *)buf, (ctu *)v36, (const void *)0x10, v15);
      uint64_t v16 = *(void *)(a1 + 464);
      if (v16)
      {
        if (*(unsigned char *)(a6 + 24))
        {
          if (*(char *)(a6 + 23) < 0) {
            sub_10004FC84(&__p, *(void **)a6, *(void *)(a6 + 8));
          }
          else {
            std::string __p = *(std::string *)a6;
          }
        }
        else
        {
          sub_100058DB0(&__p, "");
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned __int8 **, uint8_t *, std::string *))(*(void *)v16 + 144))(v16, a2, a3, a4, buf, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
      }
      sub_1002F410C((uint64_t)&__p, (NSObject **)(a1 + 40), a1 + 2464);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __p.__r_.__value_.__l.__size_;
      }
      int v20 = (unsigned __int8 *)*((unsigned __int8 *)a4 + 23);
      int v21 = (char)v20;
      if ((char)v20 < 0) {
        int v20 = a4[1];
      }
      if ((unsigned __int8 *)size == v20)
      {
        if (v21 >= 0) {
          char v22 = (unsigned __int8 *)a4;
        }
        else {
          char v22 = *a4;
        }
        if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) != 0)
        {
          char v27 = (void *)__p.__r_.__value_.__r.__words[0];
          int v28 = memcmp(__p.__r_.__value_.__l.__data_, v22, __p.__r_.__value_.__l.__size_);
          operator delete(v27);
          if (v28) {
            goto LABEL_49;
          }
        }
        else if (*((unsigned char *)&__p.__r_.__value_.__s + 23))
        {
          uint64_t v23 = 0;
          do
          {
            int v24 = __p.__r_.__value_.__s.__data_[v23];
            int v25 = v22[v23];
          }
          while (v24 == v25 && HIBYTE(__p.__r_.__value_.__r.__words[2]) - 1 != v23++);
          if (v24 != v25) {
            goto LABEL_49;
          }
        }
        uint64_t v29 = *(void *)(a1 + 512);
        if (!v29) {
          goto LABEL_49;
        }
        memset(&__p, 0, sizeof(__p));
        uint64_t v30 = *(const std::string **)(a1 + 5368);
        if (v30)
        {
          std::string::operator=(&__p, v30);
          uint64_t v29 = *(void *)(a1 + 512);
        }
        (*(void (**)(uint64_t, unsigned __int8 **, uint8_t *, std::string *, uint64_t))(*(void *)v29 + 64))(v29, a4, buf, &__p, 4);
        if ((SHIBYTE(__p.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
          goto LABEL_49;
        }
      }
      else if ((*((unsigned char *)&__p.__r_.__value_.__s + 23) & 0x80) == 0)
      {
        goto LABEL_49;
      }
      operator delete(__p.__r_.__value_.__l.__data_);
LABEL_49:
      if (SHIBYTE(v34) < 0) {
        operator delete(*(void **)buf);
      }
      return;
    }
    int v17 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    long long v18 = "pending plans transfer target CSN not available";
LABEL_17:
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v18, buf, 2u);
  }
}

void sub_1002F4754(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F47A8(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 **a4, uint64_t a5, uint64_t a6)
{
}

void sub_1002F47B0(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v5 = a1;
  char v6 = a2;
  sub_10031ECD8((uint64_t)&v7, a3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F48FC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F4914(uint64_t a1, char a2, uint64_t a3)
{
}

void sub_1002F491C(unint64_t a1, uint64_t *a2, uint64_t a3)
{
  v6[0] = a1;
  v6[1] = 0uLL;
  sub_10030B4A4((void *)v6 + 1, *a2, a2[1], (a2[1] - *a2) >> 7);
  sub_10033D1E4((uint64_t)&v7, a3);
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F4A8C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_1002F4AC4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1002F4ACC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F4BAC(uint64_t a1)
{
}

void sub_1002F4BB4(void (*a1)(void, void), uint64_t a2, void (*a3)(void, void))
{
  v6[0] = 0;
  v6[1] = 0;
  uint64_t v7 = 0;
  sub_100CDC91C(a2, v6);
  v5[0] = (void (*)(void, void))_NSConcreteStackBlock;
  v5[1] = (void (*)(void, void))0x40000000;
  void v5[2] = (void (*)(void, void))sub_1002F4C7C;
  void v5[3] = (void (*)(void, void))&unk_1019B6870;
  v5[4] = a3;
  v5[5] = a1;
  sub_1002E3084((uint64_t)a1, (uint64_t)v6, 1, v5);
  if (SHIBYTE(v7) < 0) {
    operator delete(v6[0]);
  }
}

void sub_1002F4C60(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 - 17) < 0) {
    operator delete(*(void **)(v1 - 40));
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F4C7C(uint64_t a1, int a2)
{
  if (a2)
  {
    uint64_t v3 = *(NSObject **)(*(void *)(a1 + 40) + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = 136315138;
      uint64_t v6 = asString();
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Transfer plan using pending transfer plan failed with error: %s", (uint8_t *)&v5, 0xCu);
    }
  }
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

void sub_1002F4D4C(uint64_t a1, uint64_t a2, void (*a3)(void, void))
{
}

void sub_1002F4D54(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = (long long *)(a2 + 432);
  if (*(unsigned char *)(a2 + 4))
  {
    int v21 = a1;
    if (*(char *)(a2 + 455) < 0)
    {
      sub_10004FC84(&v22, *(void **)(a2 + 432), *(void *)(a2 + 440));
    }
    else
    {
      long long v22 = *v6;
      uint64_t v23 = *(void *)(a2 + 448);
    }
    sub_10032B190((uint64_t)v24, a3);
    uint64_t v7 = operator new(0x48uLL);
    uint64_t v8 = v21;
    *uint64_t v7 = off_1019B9EA0;
    v7[1] = v8;
    *((_OWORD *)v7 + 1) = v22;
    v7[4] = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    sub_10032B190((uint64_t)(v7 + 5), (uint64_t)v24);
    uint64_t v26 = v7;
    sub_1002E8E14((uint64_t)a1, (uint64_t)v25);
  }
  if (*(char *)(a2 + 455) < 0)
  {
    sub_10004FC84(&v12, *(void **)(a2 + 432), *(void *)(a2 + 440));
  }
  else
  {
    long long v12 = *v6;
    uint64_t v13 = *(void *)(a2 + 448);
  }
  if (*(char *)(a2 + 215) < 0)
  {
    sub_10004FC84(&v14, *(void **)(a2 + 192), *(void *)(a2 + 200));
  }
  else
  {
    long long v14 = *(_OWORD *)(a2 + 192);
    uint64_t v15 = *(void *)(a2 + 208);
  }
  if (*(char *)(a2 + 239) < 0)
  {
    sub_10004FC84(&__p, *(void **)(a2 + 216), *(void *)(a2 + 224));
  }
  else
  {
    long long __p = *(_OWORD *)(a2 + 216);
    uint64_t v17 = *(void *)(a2 + 232);
  }
  sub_10032B190((uint64_t)v18, a3);
  int v20 = 0;
  uint64_t v9 = (char *)operator new(0x78uLL);
  *(void *)uint64_t v9 = off_1019B9F20;
  *((void *)v9 + 1) = a1;
  *((_OWORD *)v9 + 1) = v12;
  *((void *)v9 + 4) = v13;
  long long v12 = 0uLL;
  uint64_t v13 = 0;
  *(_OWORD *)(v9 + 40) = v14;
  *((void *)v9 + 7) = v15;
  long long v14 = 0uLL;
  uint64_t v15 = 0;
  long long v10 = __p;
  *((void *)v9 + 10) = v17;
  *((_OWORD *)v9 + 4) = v10;
  long long __p = 0uLL;
  uint64_t v17 = 0;
  sub_10032B190((uint64_t)(v9 + 88), (uint64_t)v18);
  int v20 = v9;
  sub_1002DB4A0(a1, 2, 0, (uint64_t)v19);
  sub_100313668(v19);
  sub_1003135E4(v18);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)v14);
  }
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)v12);
  }
}

void sub_1002F5024(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F5090(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_1002F50CC(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1002F5128(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_1002F5130(uint64_t a1, long long *a2)
{
  uint64_t v4 = a1;
  sub_10030DDAC((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F5268(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F5280(uint64_t a1, long long *a2)
{
}

void sub_1002F5288(uint64_t a1, long long *a2, char a3, char a4, char a5)
{
  uint64_t v10 = a1;
  sub_10030DDAC((uint64_t)v11, a2);
  v11[1248] = a3;
  v11[1249] = a4;
  v11[1250] = a5;
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F53F4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1002F540C(uint64_t a1, long long *a2, char a3, char a4, char a5)
{
}

uint64_t sub_1002F5414(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 32))();
}

uint64_t sub_1002F543C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 56) + 32))();
}

uint64_t sub_1002F5464(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 288) + 136))(*(void *)(a1 + 288));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 160) + 32);

  return v2();
}

uint64_t sub_1002F54E0(uint64_t a1)
{
  (*(void (**)(void))(**(void **)(a1 + 184) + 136))(*(void *)(a1 + 184));
  uint64_t v2 = *(uint64_t (**)(void))(**(void **)(a1 + 56) + 32);

  return v2();
}

void sub_1002F555C(uint64_t a1, const std::string *a2)
{
  v5[0] = 0;
  uint64_t v7 = 0;
  uint64_t v8 = 0;
  long long __p = 0;
  uint64_t v4 = (unsigned char *)(a1 + 1568);
  sub_10031EB44((unsigned __int8 *)(a1 + 1568), (uint64_t)v5);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p);
  }
  if (!*v4) {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  *(unsigned char *)(a1 + 1576) = 42;
  std::string::operator=((std::string *)(a1 + 1584), a2);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 42);

  sub_1002DC408(a1);
}

void sub_1002F5638(uint64_t a1, const std::string *a2)
{
}

uint64_t sub_1002F5640(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 40))();
}

uint64_t sub_1002F5668(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 88) + 40))();
}

uint64_t sub_1002F5690(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 232))();
}

uint64_t sub_1002F56B8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 328) + 232))();
}

uint64_t sub_1002F56E4(uint64_t a1, unsigned __int8 *a2)
{
  if (a2[81]) {
    BOOL v4 = a2[80] == 3;
  }
  else {
    BOOL v4 = 0;
  }
  if (!v4 || a2[24] < 3u) {
    return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(a1 + 432) + 160))(*(void *)(a1 + 432), a2);
  }
  long long v30 = 0u;
  uint64_t v32 = 0x400000000000000;
  long long v31 = 0u;
  *(_OWORD *)&v33[8] = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  memset(&v34, 0, sizeof(v34));
  uint64_t v35 = 23;
  HIBYTE(v30) = 8;
  uint64_t v29 = (void *)0x72616C756C6C6543;
  LODWORD(v31) = 1296651109;
  v33[23] = 13;
  qmemcpy(v33, "Transfer plan", 13);
  sub_10003ECB8(&v34, "src(websheet) - tgt(oneclick)", 0x1DuLL);
  v35 |= 1uLL;
  uint64_t v5 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    unsigned int v6 = a2[24] - 1;
    if (v6 > 6) {
      uint64_t v7 = "kCPMetricsTransferStatusUnknown";
    }
    else {
      uint64_t v7 = off_1019BB238[(char)v6];
    }
    LODWORD(buf) = 136446210;
    *(void *)((char *)&buf + 4) = v7;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Reporting unmatched <%{public}s> transfer flow", (uint8_t *)&buf, 0xCu);
  }
  (***(void (****)(long long *__return_ptr))(a1 + 320))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)buf);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v38 = v10;
  long long v14 = sub_10004D37C(&v9[1].__m_.__sig, &v38);
  if (!v14)
  {
    uint64_t v16 = 0;
    goto LABEL_19;
  }
  uint64_t v16 = v14[3];
  uint64_t v15 = (std::__shared_weak_count *)v14[4];
  if (!v15)
  {
LABEL_19:
    std::mutex::unlock(v9);
    uint64_t v15 = 0;
    char v17 = 1;
    goto LABEL_20;
  }
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v9);
  atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  char v17 = 0;
LABEL_20:
  sub_1000DB86C((char *)__dst, (long long *)&v29);
  void v39[3] = 0;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v16 + 16))(v16, __dst, v39);
  sub_1000DBADC(v39);
  if (v28 < 0) {
    operator delete(__p);
  }
  if (v26 < 0) {
    operator delete(v25);
  }
  if (v24 < 0) {
    operator delete(v23);
  }
  if (v22 < 0) {
    operator delete(v21);
  }
  if (v20 < 0) {
    operator delete(__dst[0]);
  }
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (SBYTE7(v37) < 0) {
    operator delete((void *)v36);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if ((v33[23] & 0x80000000) != 0) {
    operator delete(*(void **)v33);
  }
  if (SHIBYTE(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29);
  }
  return (*(uint64_t (**)(void, unsigned __int8 *))(**(void **)(a1 + 432) + 160))(*(void *)(a1 + 432), a2);
}

void sub_1002F5A7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1000DBADC((void *)(v29 - 128));
  sub_1001278A0((uint64_t)&a10);
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v27);
  }
  long long v31 = *(std::__shared_weak_count **)(v29 - 88);
  if (v31) {
    sub_10004D2C8(v31);
  }
  sub_1001278A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F5AEC(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1002F56E4(a1 - 104, a2);
}

uint64_t sub_1002F5AF4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 384);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_1002F5B24(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 280);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

void sub_1002F5B54(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  *(_OWORD *)(a2 + 32) = 0u;
  BOOL v4 = (void **)(a2 + 32);
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 128) = 0u;
  uint64_t v5 = (void **)(a2 + 128);
  *(_OWORD *)(a2 + 176) = 0u;
  *(_OWORD *)(a2 + 192) = 0u;
  *(_OWORD *)(a2 + 208) = 0u;
  *(_OWORD *)(a2 + 144) = 0u;
  *(_OWORD *)(a2 + 160) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 112) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)a2 = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  int v6 = capabilities::ct::defaultMobileEquipmentInfoCSNSlotID((capabilities::ct *)a1);
  int v7 = VinylSlotIdFromInt(v6);
  long long v20 = 0uLL;
  char v21 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 352))(&v20);
  if (v21)
  {
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320)))
    {
      *(_DWORD *)a2 = 1;
LABEL_4:
      ctu::hex((uint64_t *)&v18, (ctu *)&v20, (const void *)0x10, v8);
      uint64_t v9 = (void **)(a2 + 8);
      if (*(char *)(a2 + 31) < 0) {
        operator delete(*v9);
      }
      *(_OWORD *)uint64_t v9 = v18;
      *(void *)(a2 + 24) = v19;
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 376))(&v18);
      if (*(char *)(a2 + 151) < 0) {
        operator delete(*v5);
      }
      *(_OWORD *)uint64_t v5 = v18;
      *(void *)(a2 + 144) = v19;
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 288))(&v18);
      unint64_t v10 = (void **)(a2 + 104);
      if (*(char *)(a2 + 127) < 0) {
        operator delete(*v10);
      }
      *(_OWORD *)unint64_t v10 = v18;
      *(void *)(a2 + 120) = v19;
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 312))(&v18);
      uint64_t v11 = (void **)(a2 + 56);
      if (*(char *)(a2 + 79) < 0) {
        operator delete(*v11);
      }
      *(_OWORD *)uint64_t v11 = v18;
      *(void *)(a2 + 72) = v19;
      (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 360))(&v18);
      char v21 = v19;
      long long v20 = v18;
      if ((_BYTE)v19)
      {
        ctu::hex((uint64_t *)&v18, (ctu *)&v20, (const void *)0x10, v12);
        if (*(char *)(a2 + 55) < 0) {
          operator delete(*v4);
        }
        *(_OWORD *)BOOL v4 = v18;
        *(void *)(a2 + 48) = v19;
      }
      else
      {
        std::string::operator=((std::string *)(a2 + 32), (const std::string *)(a2 + 8));
      }
      if (*(char *)(a1 + 1559) < 0)
      {
        if (!*(void *)(a1 + 1544)) {
          goto LABEL_35;
        }
      }
      else if (!*(unsigned char *)(a1 + 1559))
      {
LABEL_35:
        char v17 = *(const std::string **)(a1 + 5368);
        if (v17)
        {
          std::string::operator=((std::string *)(a2 + 152), v17 + 6);
          std::string::operator=((std::string *)(a2 + 176), *(const std::string **)(a1 + 5368));
          std::string::operator=((std::string *)(a2 + 200), (const std::string *)(*(void *)(a1 + 5368) + 168));
        }
        return;
      }
      std::string::operator=((std::string *)(a2 + 80), (const std::string *)(a1 + 1536));
      goto LABEL_35;
    }
    *(_DWORD *)a2 = v7;
    unsigned int v13 = *(_DWORD **)(a1 + 2464);
    long long v14 = *(_DWORD **)(a1 + 2472);
    while (1)
    {
      if (v13 == v14) {
        goto LABEL_4;
      }
      int v15 = v13[1];
      if (v15 == 2)
      {
        if (v7 != 2) {
          goto LABEL_28;
        }
      }
      else if (v15 != 1 || v7 != 1)
      {
        goto LABEL_28;
      }
      if (*v13) {
        *(_DWORD *)a2 = *v13;
      }
LABEL_28:
      v13 += 42;
    }
  }
}

void sub_1002F5EF4(_Unwind_Exception *a1)
{
  sub_10030E938(v1);
  _Unwind_Resume(a1);
}

void sub_1002F5F24(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_1002F5F2C(uint64_t a1, const std::string *a2, uint64_t a3, long long *a4, char a5, char a6)
{
  uint64_t v7 = *(unsigned __int8 *)(a3 + 23);
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *(void *)(a3 + 8);
  }
  if (!v7)
  {
    long long v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      int v15 = "No SMDP URL available";
      goto LABEL_18;
    }
    return 0;
  }
  uint64_t v13 = *(void *)(a1 + 680);
  if (sub_1002DF3BC(a1, 1))
  {
    long long v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      int v15 = "Cannot Run Prov Operation";
LABEL_18:
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, v15, buf, 2u);
      return 0;
    }
    return 0;
  }
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 48))(*(void *)(a1 + 320)) & 1) == 0)
  {
    long long v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      int v15 = "No Support Activation Code";
      goto LABEL_18;
    }
    return 0;
  }
  v64[0] = 0;
  v64[1] = 0;
  char v65 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v64);
  if (!v65)
  {
    long long v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      int v15 = "No CSN Available";
      goto LABEL_18;
    }
    return 0;
  }
  uint64_t v46 = 0;
  char v45 = 0;
  sub_100324590(&v45);
  std::string::operator=((std::string *)((char *)v45 + 136), a2);
  std::string::operator=(v45, (const std::string *)a3);
  v63[0] = 0;
  BOOL v16 = sub_1002DE6C4(a1, (uint64_t)v63);
  v45[5].__r_.__value_.__s.__data_[3] = v16;
  sub_1000C5D34(v63);
  char v17 = v45;
  v45[5].__r_.__value_.__s.__data_[2] = 0;
  *(_OWORD *)long long v40 = 0u;
  long long v41 = 0u;
  *(_OWORD *)uint64_t v43 = 0u;
  long long v44 = 0u;
  memset(v42, 0, sizeof(v42));
  BOOL v18 = *(_DWORD *)(a1 + 2632) == 1;
  LODWORD(v40[0]) = *(_DWORD *)(a1 + 580);
  BYTE4(v40[0]) = a6;
  BYTE5(v40[0]) = 3;
  long long v41 = 0uLL;
  v40[1] = 0;
  LOBYTE(v42[0]) = 4;
  *(void *)&long long v44 = 0;
  v43[0] = 0;
  v43[1] = 0;
  BYTE8(v44) = 0;
  BYTE9(v44) = v18;
  if (*((unsigned char *)a4 + 24))
  {
    uint64_t v19 = (uint64_t *)&v17[4];
    std::string::size_type size = v17[4].__r_.__value_.__l.__size_;
    if (size >= v17[4].__r_.__value_.__r.__words[2])
    {
      uint64_t v21 = sub_10030E9EC(v19, a4);
    }
    else
    {
      sub_1000D87F8(v19, a4);
      uint64_t v21 = size + 24;
    }
    v17[4].__r_.__value_.__l.__size_ = v21;
    std::string::operator=((std::string *)(a1 + 592), (const std::string *)a4);
    char v27 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
    {
      if (*((char *)a4 + 23) >= 0) {
        char v28 = a4;
      }
      else {
        char v28 = *(long long **)a4;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v28;
      _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Recieved ICCID: [%s]", buf, 0xCu);
    }
  }
  else
  {
    char v24 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "No ICCID in the transfer response.", buf, 2u);
      char v17 = v45;
    }
    std::string::size_type v25 = v17[4].__r_.__value_.__l.__size_;
    if (v25 >= v17[4].__r_.__value_.__r.__words[2])
    {
      uint64_t v26 = sub_10030B97C((uint64_t *)&v17[4]);
    }
    else
    {
      sub_100058DB0((void *)v17[4].__r_.__value_.__l.__size_, "89");
      uint64_t v26 = v25 + 24;
      v17[4].__r_.__value_.__l.__size_ = v25 + 24;
    }
    v17[4].__r_.__value_.__l.__size_ = v26;
    if (*(char *)(a1 + 615) < 0)
    {
      **(unsigned char **)(a1 + 592) = 0;
      *(void *)(a1 + 600) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 592) = 0;
      *(unsigned char *)(a1 + 615) = 0;
    }
  }
  uint64_t v29 = (char *)encodeProfileEligibilityCheckAction();
  sub_10003ED78((std::string *)((char *)v45 + 160), v29);
  if (!*(void *)(a1 + 680) && !sub_1002E3B1C(a1, 0))
  {
    uint64_t v33 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, "Couldnt create provisioning operation", buf, 2u);
    }
    uint64_t v22 = 0;
    goto LABEL_45;
  }
  *(unsigned char *)(a1 + 1706) = a5;
  long long v62 = 0u;
  *(_OWORD *)long long __p = 0u;
  long long v60 = 0u;
  long long v58 = 0u;
  long long v59 = 0u;
  long long v56 = 0u;
  long long v57 = 0u;
  long long v54 = 0u;
  long long v55 = 0u;
  long long v52 = 0u;
  long long v53 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  *(_OWORD *)long long buf = 0u;
  long long v49 = 0u;
  std::string::operator=((std::string *)&__p[1], a2);
  uint64_t v30 = *(void *)(a1 + 304);
  sub_10030EB10((uint64_t)v47, (uint64_t)buf);
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v30 + 256))(v30, v47);
  sub_10030D044((uint64_t)v47);
  (*(void (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
  uint64_t v31 = *(void *)(a1 + 680);
  if (v13)
  {
    unint64_t v38 = v45;
    uint64_t v39 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100311AFC((uint64_t)v37, (int *)v40);
    v37[176] = 1;
    (*(void (**)(uint64_t, std::string **, unsigned char *))(*(void *)v31 + 192))(v31, &v38, v37);
    sub_10030AEBC((uint64_t)v37);
    uint64_t v32 = v39;
    if (!v39) {
      goto LABEL_42;
    }
  }
  else
  {
    uint64_t v35 = v45;
    long long v36 = v46;
    if (v46) {
      atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100311AFC((uint64_t)v34, (int *)v40);
    v34[176] = 1;
    (*(void (**)(uint64_t, void *, std::string **, void, unsigned char *))(*(void *)v31 + 32))(v31, v64, &v35, 0, v34);
    sub_10030AEBC((uint64_t)v34);
    uint64_t v32 = v36;
    if (!v36) {
      goto LABEL_42;
    }
  }
  sub_10004D2C8(v32);
LABEL_42:
  if (SHIBYTE(v62) < 0) {
    operator delete(__p[1]);
  }
  sub_1000C584C((uint64_t)buf);
  uint64_t v22 = 1;
LABEL_45:
  if (SBYTE7(v44) < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v42[12]) < 0) {
    operator delete(v42[10]);
  }
  if (SHIBYTE(v42[9]) < 0) {
    operator delete(v42[7]);
  }
  if (SHIBYTE(v42[6]) < 0) {
    operator delete(v42[4]);
  }
  if (SHIBYTE(v42[3]) < 0) {
    operator delete(v42[1]);
  }
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[1]);
  }
  if (v46) {
    sub_10004D2C8(v46);
  }
  return v22;
}

void sub_1002F65D8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,char a59)
{
  *(void *)(v60 + 104) = v59;
  sub_1002DB328((uint64_t)&a59);
  if (STACK[0x250]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x250]);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6684(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }

  return sub_1000C584C(a1);
}

uint64_t sub_1002F66C8(uint64_t a1, const std::string *a2, uint64_t a3, long long *a4, char a5, char a6)
{
  return sub_1002F5F2C(a1 - 96, a2, a3, a4, a5, a6);
}

void sub_1002F66D0(void *a1, long long *a2, char a3)
{
  if (sub_10010E194((void **)a1[587], (void **)a2))
  {
    int v6 = a1 + 586;
    BOOL v16 = a2;
    uint64_t v7 = sub_10033A2B4((uint64_t **)a1 + 586, (void **)a2, &v16);
    sub_1000607A8((uint64_t)(v7 + 7), a3);
    unint64_t v8 = (void *)a1[587];
    if (v8)
    {
      uint64_t v9 = a1 + 587;
      do
      {
        char v10 = sub_100046FE8(v8 + 4, (void **)a2);
        if (v10 >= 0) {
          uint64_t v11 = v8;
        }
        else {
          uint64_t v11 = v8 + 1;
        }
        if (v10 >= 0) {
          uint64_t v9 = v8;
        }
        unint64_t v8 = (void *)*v11;
      }
      while (*v11);
      if (v9 != a1 + 587 && (sub_100046FE8(a2, (void **)v9 + 4) & 0x80) == 0)
      {
        unint64_t v12 = (void *)v9[1];
        if (v12)
        {
          do
          {
            uint64_t v13 = v12;
            unint64_t v12 = (void *)*v12;
          }
          while (v12);
        }
        else
        {
          long long v14 = v9;
          do
          {
            uint64_t v13 = (void *)v14[2];
            BOOL v15 = *v13 == (void)v14;
            long long v14 = v13;
          }
          while (!v15);
        }
        if ((void *)*v6 == v9) {
          void *v6 = v13;
        }
        --a1[588];
        sub_10005EE6C((uint64_t *)a1[587], v9);
        sub_100313740((uint64_t)(v9 + 4));
        operator delete(v9);
      }
    }
  }
}

uint64_t sub_1002F6828(uint64_t a1, unsigned __int8 *a2)
{
  return sub_1002F56E4(a1 - 96, a2);
}

uint64_t sub_1002F6830(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 168))();
}

uint64_t sub_1002F6858(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 336) + 168))();
}

void sub_1002F6880(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5, int a6, const std::string *a7, uint64_t a8)
{
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  long long v44 = 0u;
  long long v45 = 0u;
  uint64_t v52 = 0;
  *(void *)&long long v50 = 23;
  std::string::operator=((std::string *)&v44, a2);
  std::string::operator=((std::string *)((char *)&v45 + 8), a3);
  std::string::operator=((std::string *)&v47, a4);
  std::string::operator=((std::string *)((char *)&v48 + 8), a5);
  std::string::operator=((std::string *)((char *)&v50 + 8), a7);
  LOBYTE(v52) = a6;
  *(void *)&long long v50 = v50 | 0x13;
  BOOL v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if ((a4->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v16 = a4;
    }
    else {
      BOOL v16 = (const std::string *)a4->__r_.__value_.__r.__words[0];
    }
    if ((a5->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v17 = a5;
    }
    else {
      char v17 = (const std::string *)a5->__r_.__value_.__r.__words[0];
    }
    if ((a7->__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      BOOL v18 = a7;
    }
    else {
      BOOL v18 = (const std::string *)a7->__r_.__value_.__r.__words[0];
    }
    uint64_t v19 = "no";
    if (a6) {
      uint64_t v19 = "yes";
    }
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v16;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v17;
    __int16 v60 = 2080;
    uint64_t v61 = v18;
    __int16 v62 = 2080;
    uint64_t v63 = v19;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Reporting eSIM transfer failure on Phone, subType: %s, subTypeContext: %s, groupID: %s, remote:%s", buf, 0x2Au);
  }
  (***(void (****)(unsigned char *__return_ptr))(a1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  uint64_t v21 = ServiceMap;
  if ((v22 & 0x8000000000000000) != 0)
  {
    uint64_t v23 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v24 = 5381;
    do
    {
      unint64_t v22 = v24;
      unsigned int v25 = *v23++;
      uint64_t v24 = (33 * v24) ^ v25;
    }
    while (v25);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v53 = v22;
  uint64_t v26 = sub_10004D37C(&v21[1].__m_.__sig, &v53);
  if (!v26)
  {
    uint64_t v28 = 0;
    goto LABEL_21;
  }
  uint64_t v28 = v26[3];
  char v27 = (std::__shared_weak_count *)v26[4];
  if (!v27)
  {
LABEL_21:
    std::mutex::unlock(v21);
    char v27 = 0;
    char v29 = 1;
    goto LABEL_22;
  }
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v21);
  atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v27);
  char v29 = 0;
LABEL_22:
  sub_1000DB86C((char *)__dst, &v44);
  *(void *)&long long v54 = a1;
  uint64_t v30 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v30 || (uint64_t v31 = *(void *)(a1 + 8), (v32 = std::__shared_weak_count::lock(v30)) == 0)) {
    sub_100088B9C();
  }
  *((void *)&v54 + 1) = v31;
  long long v55 = v32;
  atomic_fetch_add_explicit(&v32->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v32);
  sub_10033ECA0((uint64_t)v56, a8);
  long long v58 = 0;
  uint64_t v33 = (char *)operator new(0x40uLL);
  *(void *)uint64_t v33 = off_1019BA150;
  *(_OWORD *)(v33 + 8) = v54;
  *((void *)v33 + 3) = v55;
  *((void *)&v54 + 1) = 0;
  long long v55 = 0;
  sub_10033F0E0((uint64_t)(v33 + 32), (uint64_t)v56);
  long long v58 = v33;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v28 + 16))(v28, __dst, v57);
  sub_1000DBADC(v57);
  sub_1000DBADC(v56);
  if (v55) {
    std::__shared_weak_count::__release_weak(v55);
  }
  if (v43 < 0) {
    operator delete(__p);
  }
  if (v41 < 0) {
    operator delete(v40);
  }
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if ((v35 & 0x80000000) == 0)
  {
    if (v29) {
      goto LABEL_37;
    }
    goto LABEL_36;
  }
  operator delete(__dst[0]);
  if ((v29 & 1) == 0) {
LABEL_36:
  }
    sub_10004D2C8(v27);
LABEL_37:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (SHIBYTE(v51) < 0) {
    operator delete(*((void **)&v50 + 1));
  }
  if (SHIBYTE(v49) < 0) {
    operator delete(*((void **)&v48 + 1));
  }
  if (SBYTE7(v48) < 0) {
    operator delete((void *)v47);
  }
  if (SHIBYTE(v46) < 0) {
    operator delete(*((void **)&v45 + 1));
  }
  if (SBYTE7(v45) < 0) {
    operator delete((void *)v44);
  }
}

void sub_1002F6CB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
  sub_1000DBADC((void *)(v29 - 176));
  sub_1002F6D48(v29 - 240);
  sub_1001278A0((uint64_t)&a10);
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v27);
  }
  uint64_t v31 = *(std::__shared_weak_count **)(v29 - 136);
  if (v31) {
    sub_10004D2C8(v31);
  }
  sub_1001278A0((uint64_t)&a27);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F6D48(uint64_t a1)
{
  sub_1000DBADC((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_1002F6D80(uint64_t a1, const std::string *a2, const std::string *a3, const std::string *a4, const std::string *a5, int a6, const std::string *a7, uint64_t a8)
{
}

void sub_1002F6D88(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1002F6EA0;
  void v7[3] = &unk_1019B6890;
  v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (BOOL v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  int v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_1002F6EA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if (*(unsigned char *)(v1 + 2627))
  {
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(v1 + 160) + 64))(&v2);
    if (v2) {
      (*(void (**)(uint64_t))(*(void *)v2 + 96))(v2);
    }
    if (v3) {
      sub_10004D2C8(v3);
    }
  }
}

void sub_1002F6F34(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F6F4C(uint64_t a1)
{
}

void sub_1002F6F54(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1002F706C;
  void v7[3] = &unk_1019B68B0;
  v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (BOOL v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  int v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_1002F706C(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(*(void *)(a1 + 32) + 160) + 64))(&v1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 88))(v1);
  }
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_1002F70F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F7110(uint64_t a1)
{
}

void sub_1002F7118(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002F720C(uint64_t a1)
{
}

void sub_1002F7214(uint64_t a1, unsigned __int8 *a2)
{
  (*(void (**)(void))(**(void **)(a1 + 432) + 240))(*(void *)(a1 + 432));
  if (!sub_1008A2C34((uint64_t)a2)) {
    return;
  }
  long long v31 = 0u;
  memset(v33, 0, sizeof(v33));
  long long v32 = 0u;
  long long v37 = 0u;
  long long v36 = 0u;
  memset(&v34, 0, sizeof(v34));
  uint64_t v35 = 23;
  HIBYTE(v31) = 8;
  uint64_t v30 = (void *)0x72616C756C6C6543;
  HIBYTE(v33[0]) = 4;
  LODWORD(v32) = 1296651109;
  BOOL v4 = "TransferFlowUnknown";
  HIBYTE(v33[3]) = 21;
  int v5 = *a2;
  if (v5 == 2) {
    BOOL v4 = "TransferFlowPostBuddy";
  }
  *(_OWORD *)&v33[1] = *(_OWORD *)"Transfer plan listing";
  if (v5 == 1) {
    int v6 = "TransferFlowBuddy";
  }
  else {
    int v6 = (char *)v4;
  }
  *(void **)((char *)&v33[2] + 5) = *(void **)" listing";
  sub_10003ED78(&v34, v6);
  v35 |= 0x13uLL;
  uint64_t v7 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Reporting eSIM transfer planlisting failure", buf, 2u);
  }
  (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v38 = v10;
  long long v14 = sub_10004D37C(&v9[1].__m_.__sig, &v38);
  if (v14)
  {
    uint64_t v16 = v14[3];
    BOOL v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  BOOL v15 = 0;
  char v17 = 1;
LABEL_17:
  sub_1000DB86C((char *)__dst, (long long *)&v30);
  void v39[3] = 0;
  (*(void (**)(uint64_t, void **, void *))(*(void *)v16 + 16))(v16, __dst, v39);
  sub_1000DBADC(v39);
  if (v27 < 0) {
    operator delete(__p);
  }
  if (v25 < 0) {
    operator delete(v24);
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  if (v21 < 0) {
    operator delete(v20);
  }
  if (v19 < 0)
  {
    operator delete(__dst[0]);
    if (v17) {
      goto LABEL_28;
    }
    goto LABEL_27;
  }
  if ((v17 & 1) == 0) {
LABEL_27:
  }
    sub_10004D2C8(v15);
LABEL_28:
  if (v29) {
    sub_10004D2C8(v29);
  }
  if (SBYTE7(v37) < 0) {
    operator delete((void *)v36);
  }
  if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v34.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v33[3]) < 0) {
    operator delete(v33[1]);
  }
  if (SHIBYTE(v33[0]) < 0) {
    operator delete((void *)v32);
  }
  if (SHIBYTE(v31) < 0) {
    operator delete(v30);
  }
}

void sub_1002F757C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,std::__shared_weak_count *a28,uint64_t a29,char a30)
{
  sub_1000DBADC((void *)(v32 - 88));
  sub_1001278A0((uint64_t)&a10);
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  if (a28) {
    sub_10004D2C8(a28);
  }
  sub_1001278A0((uint64_t)&a30);
  _Unwind_Resume(a1);
}

void sub_1002F75E4(uint64_t a1, unsigned __int8 *a2)
{
}

uint64_t sub_1002F75EC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 304);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 560))();
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

uint64_t sub_1002F7634@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 208);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 560))();
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

uint64_t sub_1002F767C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 168);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 560))();
  }
  a2[2] = 0;
  a2[1] = 0;
  *a2 = a2 + 1;
  return result;
}

void *sub_1002F76C4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 5448))
  {
    if (*(void *)(a1 + 5424) == *(void *)(a1 + 5432))
    {
      uint64_t v2 = a2;
      char v3 = 0;
    }
    else
    {
      uint64_t v2 = a2;
      char v3 = 1;
    }
    return (void *)sub_1000607A8(v2, v3);
  }
  else
  {
    int v4 = *(_DWORD *)(a1 + 2632);
    uint64_t v5 = *(void *)(a1 + 336);
    sub_100023950((uint64_t)v9, a2);
    uint64_t v11 = 0;
    int v6 = operator new(0x30uLL);
    void *v6 = off_1019BA250;
    v6[1] = a1;
    sub_100023950((uint64_t)(v6 + 2), (uint64_t)v9);
    uint64_t v11 = v6;
    (*(void (**)(uint64_t, BOOL, void *))(*(void *)v5 + 128))(v5, v4 != 1, v10);
    sub_100337EF8(v10);
    return sub_100060644(v9);
  }
}

void sub_1002F783C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100337EF8((uint64_t *)va);
  sub_100060644(v6);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F7860(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 368);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 128))();
  }
  return result;
}

uint64_t sub_1002F7890(uint64_t a1)
{
  return sub_1002EB758(a1 - 112);
}

void sub_1002F7898(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1002F79B0;
  void v7[3] = &unk_1019B68D0;
  v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (int v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  int v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v3;
  uint64_t v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_1002F79B0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  if ((*(unsigned int (**)(void, uint64_t))(**(void **)(v1 + 304) + 328))(*(void *)(v1 + 304), 3))
  {
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    (*(void (**)(long long *__return_ptr))(**(void **)(v1 + 304) + 288))(&v9);
    v7[0] = 0;
    v7[1] = 0;
    uint64_t v8 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(v1 + 304) + 288))(v7);
    uint64_t v2 = *(void *)(v1 + 432);
    if (SHIBYTE(v10) < 0)
    {
      sub_10004FC84(__dst, (void *)v9, *((unint64_t *)&v9 + 1));
    }
    else
    {
      *(_OWORD *)long long __dst = v9;
      uint64_t v6 = v10;
    }
    if (SHIBYTE(v8) < 0)
    {
      sub_10004FC84(__p, v7[0], (unint64_t)v7[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v7;
      uint64_t v4 = v8;
    }
    (*(void (**)(uint64_t, void **, void **))(*(void *)v2 + 16))(v2, __dst, __p);
    if (SHIBYTE(v4) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v6) < 0) {
      operator delete(__dst[0]);
    }
    if (SHIBYTE(v8) < 0) {
      operator delete(v7[0]);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete((void *)v9);
    }
  }
}

void sub_1002F7B60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (*(char *)(v28 - 17) < 0) {
    operator delete(*(void **)(v28 - 40));
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F7BC4(uint64_t a1)
{
}

void sub_1002F7BCC(void *a1)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  v7[2] = sub_1002F7CE4;
  void v7[3] = &unk_1019B68F0;
  v7[4] = a1;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (!v2 || (v3 = a1[1], (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  uint64_t v6 = a1[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v3;
  long long v9 = v5;
  atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v7;
  dispatch_async(v6, block);
  if (v9) {
    sub_10004D2C8(v9);
  }
  sub_10004D2C8(v5);
}

void sub_1002F7CE4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = sub_1002DDBDC(v1);
  *(_OWORD *)uint64_t v6 = 0u;
  long long v7 = 0u;
  (*(void (**)(void **__return_ptr))(**(void **)(v1 + 304) + 408))(v6);
  uint64_t v3 = *(void *)(v1 + 432);
  if (BYTE8(v7))
  {
    (*(void (**)(uint64_t, uint64_t, void **, uint64_t, void))(*(void *)v3 + 120))(v3, 2, v6, v2, 0);
  }
  else
  {
    sub_100058DB0(__p, "");
    (*(void (**)(uint64_t, void, void **, uint64_t, void))(*(void *)v3 + 120))(v3, 0, __p, v2, 0);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
  }
  if (BYTE8(v7))
  {
    if (SBYTE7(v7) < 0) {
      operator delete(v6[0]);
    }
  }
}

void sub_1002F7E18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,char a22)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a22)
  {
    if (a21 < 0) {
      operator delete(a16);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F7E58(uint64_t a1)
{
}

void sub_1002F7E60(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  *a2 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
}

void sub_1002F7E74(uint64_t a1@<X0>, NSObject **a2@<X8>)
{
  uint64_t v2 = *(NSObject **)(a1 - 32);
  *a2 = v2;
  if (v2) {
    dispatch_retain(v2);
  }
}

void sub_1002F7E88(uint64_t a1)
{
  *(_DWORD *)(a1 + 580) = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 96))(*(void *)(a1 + 320));
  uint64_t v2 = *(void *)(a1 + 192);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
  }
  (*(void (**)(void))(**(void **)(a1 + 288) + 16))(*(void *)(a1 + 288));
  (*(void (**)(void))(**(void **)(a1 + 304) + 216))(*(void *)(a1 + 304));
  (*(void (**)(void))(**(void **)(a1 + 336) + 16))(*(void *)(a1 + 336));
  sub_1002D4820(a1);
  if (capabilities::ct::getProvisioningProfileSupport(v3))
  {
    uint64_t v4 = *(void *)(a1 + 160);
    sub_1002DD574(v4, 0);
  }
}

void sub_1002F7FAC(uint64_t a1)
{
}

uint64_t sub_1002F7FB4(uint64_t a1)
{
  if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)) & 1) == 0
    && *(void *)(a1 + 5384) != -1)
  {
    (*(void (**)(void))(**(void **)(a1 + 496) + 240))(*(void *)(a1 + 496));
  }
  (*(void (**)(void))(**(void **)(a1 + 240) + 32))(*(void *)(a1 + 240));
  uint64_t v2 = *(void *)(a1 + 528);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 24))(v2);
  }
  uint64_t v3 = *(void *)(a1 + 560);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 24))(v3);
  }

  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 1976));
}

uint64_t sub_1002F80C8(uint64_t a1)
{
  return sub_1002F7FB4(a1 - 48);
}

uint64_t sub_1002F80D0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a1 + 586)) {
      uint64_t v3 = "";
    }
    else {
      uint64_t v3 = "n't";
    }
    int v5 = 136315138;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Should%s enter monitor mode", (uint8_t *)&v5, 0xCu);
  }
  return *(unsigned __int8 *)(a1 + 586);
}

uint64_t sub_1002F818C(uint64_t a1)
{
  return sub_1002F80D0(a1 - 48);
}

void sub_1002F8194(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = "fail";
    if (a2) {
      int v5 = "success";
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v8 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Monitor mode exit with %s", buf, 0xCu);
  }
  if (a2 && *(unsigned char *)(a1 + 586))
  {
    sub_1002E19C0(a1);
    v6[0] = off_1019BA2D0;
    v6[3] = v6;
    sub_1002DF908(a1, 1, (uint64_t)v6);
  }
  *(unsigned char *)(a1 + 586) = 0;
}

void sub_1002F82A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_1002F82C4(uint64_t a1, int a2)
{
}

void sub_1002F82CC(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Plan expired reason: %d", buf, 8u);
  }
  memset(buf, 0, sizeof(buf));
  uint64_t v31 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 312))(buf);
  uint64_t v5 = *(void *)(a1 + 2464);
  uint64_t v6 = *(void *)(a1 + 2472);
  while (1)
  {
    if (v5 == v6)
    {
      long long v14 = *(NSObject **)(a1 + 40);
      if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_34;
      }
      BOOL v15 = buf;
      if (v31 < 0) {
        BOOL v15 = *(uint8_t **)buf;
      }
      *(_DWORD *)uint64_t v28 = 136315138;
      *(void *)&void v28[4] = v15;
      uint64_t v16 = "#I expired plan is not user selected iccid: %s. ignore";
      char v17 = v28;
      BOOL v18 = v14;
      uint32_t v19 = 12;
      goto LABEL_33;
    }
    (***(void (****)(long long *__return_ptr))(a1 + 320))(&v27);
    *(_OWORD *)uint64_t v28 = v27;
    long long v27 = 0uLL;
    char isValidSimSlot = subscriber::isValidSimSlot();
    if (*(void *)&v28[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v28[8]);
    }
    if (*((void *)&v27 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v27 + 1));
    }
    if ((isValidSimSlot & 1) == 0
      || !subscriber::isEsimCapable()
      || !subscriber::isSimReady())
    {
      goto LABEL_28;
    }
    uint64_t v8 = HIBYTE(v31);
    if (v31 >= 0) {
      uint64_t v9 = HIBYTE(v31);
    }
    else {
      uint64_t v9 = *(void *)&buf[8];
    }
    uint64_t v10 = *(unsigned __int8 *)(v5 + 95);
    int v11 = (char)v10;
    if ((v10 & 0x80u) != 0) {
      uint64_t v10 = *(void *)(v5 + 80);
    }
    if (v9 != v10) {
      goto LABEL_28;
    }
    uint64_t v12 = v11 >= 0 ? (unsigned __int8 *)(v5 + 72) : *(unsigned __int8 **)(v5 + 72);
    if (v31 < 0) {
      break;
    }
    if (!HIBYTE(v31)) {
      goto LABEL_37;
    }
    unsigned int v13 = buf;
    while (*v13 == *v12)
    {
      ++v13;
      ++v12;
      if (!--v8) {
        goto LABEL_37;
      }
    }
LABEL_28:
    v5 += 168;
  }
  if (memcmp(*(const void **)buf, v12, *(size_t *)&buf[8])) {
    goto LABEL_28;
  }
LABEL_37:
  if (v9)
  {
    uint64_t v20 = *(void *)(a1 + 464);
    if (v20) {
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v20 + 176))(v20, buf);
    }
  }
  memset(v28, 0, sizeof(v28));
  char v29 = 0;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 360))(v28);
  if (!v29)
  {
    char v23 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    LOWORD(v27) = 0;
    uint64_t v16 = "#I User selection is not set or not a vinyl plan";
LABEL_50:
    char v17 = (uint8_t *)&v27;
    BOOL v18 = v23;
    uint32_t v19 = 2;
LABEL_33:
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v16, v17, v19);
    goto LABEL_34;
  }
  *(_DWORD *)(a1 + 1516) = a2;
  *(unsigned char *)(a1 + 1512) = 1;
  uint64_t v21 = (*(uint64_t (**)(void, uint8_t *))(**(void **)(a1 + 304) + 336))(*(void *)(a1 + 304), v28);
  if ((v21 & 0xFF00000000) == 0)
  {
    char v23 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    LOWORD(v27) = 0;
    uint64_t v16 = "#I Cannot find slot?";
    goto LABEL_50;
  }
  if (a2) {
    (*(void (**)(void, uint8_t *))(**(void **)(a1 + 304) + 520))(*(void *)(a1 + 304), buf);
  }
  uint64_t v22 = *(void *)(a1 + 432);
  if (SHIBYTE(v31) < 0)
  {
    sub_10004FC84(__p, *(void **)buf, *(unint64_t *)&buf[8]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)buf;
    uint64_t v26 = v31;
  }
  int v24 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304));
  (*(void (**)(uint64_t, uint64_t, void **, void))(*(void *)v22 + 24))(v22, v21, __p, v24 ^ 1u);
  if (SHIBYTE(v26) < 0) {
    operator delete(__p[0]);
  }
  sub_1002DA714(a1, 1, 0);
  (*(void (**)(void))(**(void **)(a1 + 336) + 152))(*(void *)(a1 + 336));
LABEL_34:
  if (SHIBYTE(v31) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_1002F8778(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F87E0(uint64_t a1, int a2)
{
}

uint64_t sub_1002F87E8(uint64_t a1, int *a2)
{
  if (!(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 304) + 328))(*(void *)(a1 + 304), 3)) {
    return 1;
  }
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)))
  {
    v12[0] = 0;
    v12[1] = 0;
    char v13 = 0;
    uint64_t v5 = *(void *)(a1 + 304);
    (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v5 + 312))(&__p, v5);
    (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v5 + 360))(v12, v5, &__p);
    if (v11 < 0) {
      operator delete(__p);
    }
    if (v13)
    {
      (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 312))(&__p);
      if (v11 < 0)
      {
        BOOL v6 = v10 == 0;
        operator delete(__p);
      }
      else
      {
        BOOL v6 = v11 == 0;
      }
      return !v6;
    }
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320));
  if (result)
  {
    if (*(void *)(a1 + 680)) {
      return 0;
    }
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 312))(&__p);
    if (v11 < 0)
    {
      uint64_t v8 = v10;
      operator delete(__p);
      if (v8) {
        goto LABEL_17;
      }
    }
    else if (v11)
    {
LABEL_17:
      if (!*(unsigned char *)(a1 + 1512)) {
        return 0;
      }
      uint64_t result = 0;
      int v7 = 3;
      goto LABEL_23;
    }
    uint64_t result = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 304) + 464))(*(void *)(a1 + 304), 3, 0);
    if (result)
    {
      uint64_t result = 0;
      int v7 = 4;
    }
    else
    {
      int v7 = 5;
    }
LABEL_23:
    *a2 = v7;
  }
  return result;
}

void sub_1002F8AA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002F8AC8(uint64_t a1, int *a2)
{
  return sub_1002F87E8(a1 - 48, a2);
}

BOOL sub_1002F8AD0(uint64_t a1)
{
  if (!(*(unsigned int (**)(void))(**(void **)(a1 + 304) + 264))(*(void *)(a1 + 304))
    || !*(void *)(a1 + 680) && *(unsigned char *)(a1 + 585)
    || !*(_DWORD *)(a1 + 576)
    || *(unsigned char *)(a1 + 2256))
  {
    return 0;
  }

  return sub_1002F8B68(a1);
}

BOOL sub_1002F8B68(uint64_t a1)
{
  return (*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304))
      && *(double *)(a1 + 1528) > CFAbsoluteTimeGetCurrent();
}

BOOL sub_1002F8BD8(uint64_t a1)
{
  return sub_1002F8AD0(a1 - 48);
}

uint64_t sub_1002F8BE4(uint64_t result)
{
  *(unsigned char *)(result + 585) = 0;
  return result;
}

uint64_t sub_1002F8BEC(uint64_t result)
{
  *(unsigned char *)(result + 537) = 0;
  return result;
}

uint64_t sub_1002F8BF4(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))();
}

uint64_t sub_1002F8C24(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 256) + 296))();
}

void sub_1002F8C54(uint64_t a1@<X0>, const void **a2@<X8>)
{
  *a2 = 0;
  __src[0] = 0;
  __src[1] = 0;
  uint64_t v9 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 312))(__src);
  if (SHIBYTE(v9) < 0)
  {
    if (!__src[1])
    {
LABEL_23:
      operator delete(__src[0]);
      return;
    }
    sub_10004FC84(v5, __src[0], (unint64_t)__src[1]);
  }
  else
  {
    if (!HIBYTE(v9)) {
      return;
    }
    *(_OWORD *)uint64_t v5 = *(_OWORD *)__src;
    uint64_t v6 = v9;
  }
  if (SHIBYTE(v6) < 0)
  {
    sub_10004FC84(__p, v5[0], (unint64_t)v5[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v5;
    uint64_t v12 = v6;
  }
  uint64_t v10 = 0;
  if (SHIBYTE(v12) < 0)
  {
    sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long __dst = *(_OWORD *)__p;
    uint64_t v14 = v12;
  }
  BOOL v15 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v3 = v10;
    uint64_t v10 = v15;
    uint64_t v16 = v3;
    sub_1000558F4(&v16);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__dst);
  }
  uint64_t v4 = v10;
  int v7 = v10;
  uint64_t v10 = 0;
  sub_1000558F4(&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (&v7 != a2)
  {
    *(void *)&long long __dst = *a2;
    *a2 = v4;
    int v7 = 0;
    sub_1000558F4((const void **)&__dst);
  }
  sub_1000558F4(&v7);
  if (SHIBYTE(v6) < 0) {
    operator delete(v5[0]);
  }
  if (SHIBYTE(v9) < 0) {
    goto LABEL_23;
  }
}

void sub_1002F8E10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,const void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  sub_1000558F4(&a22);
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  sub_1000558F4(v28);
  _Unwind_Resume(a1);
}

void sub_1002F8E8C(uint64_t a1@<X0>, const void **a2@<X8>)
{
}

void sub_1002F8E94(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 392))(__p);
  int v3 = v9;
  *(unsigned char *)a2 = 0;
  if (v3)
  {
    uint64_t v4 = (unsigned char *)(a2 + 8);
    if (SHIBYTE(v8) < 0)
    {
      sub_10004FC84(v4, __p[0], (unint64_t)__p[1]);
      int v5 = v9;
      int v6 = SHIBYTE(v8);
      *(unsigned char *)a2 = 1;
      if (v5)
      {
        if (v6 < 0) {
          operator delete(__p[0]);
        }
      }
    }
    else
    {
      *(_OWORD *)uint64_t v4 = *(_OWORD *)__p;
      *(void *)(a2 + 24) = v8;
      *(unsigned char *)a2 = 1;
    }
  }
}

void sub_1002F8F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a15)
  {
    if (a14 < 0) {
      operator delete(__p);
    }
  }
  _Unwind_Resume(exception_object);
}

void sub_1002F8F70(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

void sub_1002F8F78(uint64_t a1@<X0>, const void **a2@<X8>)
{
  *a2 = 0;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v7 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 312))(__p);
  long long v8 = 0uLL;
  char v9 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 360))(&v8);
  if (v9)
  {
    *(_OWORD *)bytes = v8;
    CFDataRef v4 = CFDataCreate(kCFAllocatorDefault, bytes, 16);
    CFDataRef v5 = v4;
    if (&v5 != (CFDataRef *)a2)
    {
      *(void *)bytes = *a2;
      *a2 = v4;
      CFDataRef v5 = 0;
      sub_100030068((const void **)bytes);
    }
    sub_100030068((const void **)&v5);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1002F90C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_100030068(v15);
  _Unwind_Resume(a1);
}

void sub_1002F90F4(uint64_t a1@<X0>, const void **a2@<X8>)
{
}

BOOL sub_1002F90FC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 304);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v1 + 312))(__p, v1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v1 + 360))(&v6, v1, __p);
  int v2 = v7;
  if (v5 < 0) {
    operator delete(__p[0]);
  }
  return v2 != 0;
}

void sub_1002F91D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1002F91FC(uint64_t a1)
{
  return sub_1002F90FC(a1 - 48);
}

uint64_t sub_1002F9204@<X0>(uint64_t a1@<X0>, const void **a2@<X8>)
{
  *a2 = 0;
  bzero(v18, 0x318uLL);
  uint64_t v4 = *(void *)(a1 + 304);
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)v4 + 312))(__p, v4);
  (*(void (**)(void *__return_ptr, uint64_t, void **))(*(void *)v4 + 416))(v18, v4, __p);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  if (v21)
  {
    if (SHIBYTE(v20) < 0)
    {
      if (!*((void *)&__src + 1)) {
        return sub_10030AF48((uint64_t)v18);
      }
      sub_10004FC84(v8, (void *)__src, *((unint64_t *)&__src + 1));
    }
    else
    {
      if (!HIBYTE(v20)) {
        return sub_10030AF48((uint64_t)v18);
      }
      *(_OWORD *)long long v8 = __src;
      uint64_t v9 = v20;
    }
    if (SHIBYTE(v9) < 0)
    {
      sub_10004FC84(__dst, v8[0], (unint64_t)v8[1]);
    }
    else
    {
      *(_OWORD *)long long __dst = *(_OWORD *)v8;
      uint64_t v13 = v9;
    }
    char v11 = 0;
    if (SHIBYTE(v13) < 0)
    {
      sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)__dst;
      uint64_t v15 = v13;
    }
    uint64_t v16 = 0;
    if (ctu::cf::convert_copy())
    {
      char v5 = v11;
      char v11 = v16;
      char v17 = v5;
      sub_1000558F4(&v17);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
    uint64_t v6 = v11;
    uint64_t v10 = v11;
    char v11 = 0;
    sub_1000558F4(&v11);
    if (SHIBYTE(v13) < 0) {
      operator delete(__dst[0]);
    }
    if (&v10 != a2)
    {
      __p[0] = (void *)*a2;
      *a2 = v6;
      uint64_t v10 = 0;
      sub_1000558F4((const void **)__p);
    }
    sub_1000558F4(&v10);
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  return sub_10030AF48((uint64_t)v18);
}

void sub_1002F9448(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  sub_1000558F4(&a17);
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10030AF48((uint64_t)&a34);
  sub_1000558F4(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_1002F94D4@<X0>(uint64_t a1@<X0>, const void **a2@<X8>)
{
  return sub_1002F9204(a1 - 48, a2);
}

BOOL sub_1002F94DC(uint64_t a1)
{
  return sub_1002F8B68(a1 - 48);
}

void sub_1002F94E4(uint64_t a1)
{
  (*(void (**)(char ***__return_ptr))(**(void **)(a1 + 304) + 552))(&v8);
  uint64_t v7 = 0;
  SubscriptionSlotConfiguration::SubscriptionSlotConfiguration((SubscriptionSlotConfiguration *)&v7);
  int v2 = v8;
  if (v8 != v9)
  {
    do
    {
      int v3 = (*(uint64_t (**)(void, char **))(**(void **)(a1 + 304) + 568))(*(void *)(a1 + 304), v2 + 4);
      if (v3 == 2)
      {
        HIDWORD(v7) = 2;
      }
      else if (v3 == 1)
      {
        LODWORD(v7) = 1;
      }
      uint64_t v4 = v2[1];
      if (v4)
      {
        do
        {
          char v5 = (char **)v4;
          uint64_t v4 = *(char **)v4;
        }
        while (v4);
      }
      else
      {
        do
        {
          char v5 = (char **)v2[2];
          BOOL v6 = *v5 == (char *)v2;
          int v2 = v5;
        }
        while (!v6);
      }
      int v2 = v5;
    }
    while (v5 != v9);
  }
  sub_1002F965C(a1 + 2168, &v7);
  if (!*(unsigned char *)(a1 + 2208)) {
    sub_10016C840();
  }
  SubscriptionSlotConfiguration::log((SubscriptionSlotConfiguration *)(a1 + 2200), (const ctu::OsLogLogger *)(a1 + 40), "Slot selection completed, updated sub-config");
  sub_10005CD2C((uint64_t)&v8, v9[0]);
}

void sub_1002F9640(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_1002F965C(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = a1 + 32;
  if (!*(unsigned char *)(a1 + 40))
  {
    uint64_t v6 = *a2;
LABEL_6:
    *(unsigned char *)(a1 + 40) = 1;
    goto LABEL_7;
  }
  uint64_t result = SubscriptionSlotConfiguration::operator!=();
  if (!result) {
    return result;
  }
  uint64_t v6 = *a2;
  if (!*(unsigned char *)(a1 + 40)) {
    goto LABEL_6;
  }
LABEL_7:
  *(void *)(a1 + 32) = v6;
  uint64_t v7 = *(void *)(a1 + 24);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v4);
  }
  return 1;
}

void sub_1002F96F8(uint64_t a1)
{
}

void sub_1002F9700(uint64_t a1, uint64_t a2)
{
  long long v6 = 0u;
  long long v7 = 0u;
  memset(v8, 0, sizeof(v8));
  long long __p = 0u;
  long long v10 = 0u;
  BOOL v4 = *(_DWORD *)(a1 + 2632) == 1;
  LODWORD(v6) = *(_DWORD *)(a1 + 580);
  WORD2(v6) = 2054;
  long long v7 = 0uLL;
  *((void *)&v6 + 1) = 0;
  LOBYTE(v8[0]) = 4;
  memset(&v8[1], 0, 100);
  long long __p = 0uLL;
  BYTE8(v10) = 0;
  *(void *)&long long v10 = 0;
  BYTE9(v10) = v4;
  sub_100311AFC((uint64_t)v5, (int *)&v6);
  v5[176] = 1;
  sub_1002DAEB8(a1, a2, (uint64_t)v5, 0);
  sub_10030AEBC((uint64_t)v5);
  if (SBYTE7(v10) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v8[12]) < 0) {
    operator delete(v8[10]);
  }
  if (SHIBYTE(v8[9]) < 0) {
    operator delete(v8[7]);
  }
  if (SHIBYTE(v8[6]) < 0) {
    operator delete(v8[4]);
  }
  if (SHIBYTE(v8[3]) < 0) {
    operator delete(v8[1]);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(*((void **)&v6 + 1));
  }
}

void sub_1002F983C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33)
{
}

void sub_1002F9860(uint64_t a1, int a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if ((a3 & 1) == 0)
    {
      uint64_t v7 = *(void *)(a1 + 432);
      uint64_t v8 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304));
      (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL))(*(void *)v7 + 72))(v7, v8, 1, *(unsigned char *)(a1 + 2289) == 1);
    }
    (*(void (**)(void, uint64_t, uint64_t))(**(void **)(a1 + 432) + 80))(*(void *)(a1 + 432), a3, a4);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(a1 + 200);
  *(void *)(a1 + 192) = 0;
  *(void *)(a1 + 200) = 0;
  if (v9)
  {
    sub_10004D2C8(v9);
  }
}

void sub_1002F9964(uint64_t a1, int a2)
{
  if (*(void *)(a1 + 680))
  {
    int v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v44) = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Provisioning operation in flight", (uint8_t *)&v44, 2u);
    }
    return;
  }
  sub_1002FA1F8(a1);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 576))(*(void *)(a1 + 304));
  if ((v5 & 1) == 0)
  {
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v44);
    ServiceMap = (std::mutex *)Registry::getServiceMap(v44);
    uint64_t v7 = ServiceMap;
    if ((v8 & 0x8000000000000000) != 0)
    {
      uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v10 = 5381;
      do
      {
        unint64_t v8 = v10;
        unsigned int v11 = *v9++;
        uint64_t v10 = (33 * v10) ^ v11;
      }
      while (v11);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v47 = v8;
    uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, &v47);
    if (v12)
    {
      uint64_t v14 = v12[3];
      uint64_t v13 = (std::__shared_weak_count *)v12[4];
      if (v13)
      {
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v7);
        atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v13);
        char v15 = 0;
LABEL_13:
        uint64_t v5 = (uint64_t)v45;
        if (v45) {
          sub_10004D2C8(v45);
        }
        if (v14) {
          uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v14 + 24))(v14, 7);
        }
        if ((v15 & 1) == 0) {
          sub_10004D2C8(v13);
        }
        goto LABEL_19;
      }
    }
    else
    {
      uint64_t v14 = 0;
    }
    std::mutex::unlock(v7);
    uint64_t v13 = 0;
    char v15 = 1;
    goto LABEL_13;
  }
LABEL_19:
  if (capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)v5))
  {
    if (a2) {
      *(unsigned char *)(a1 + 1512) = 0;
    }
    uint64_t v16 = *(std::__shared_weak_count **)(a1 + 184);
    if (v16)
    {
      char v17 = std::__shared_weak_count::lock(v16);
      if (v17)
      {
        uint64_t v18 = *(void *)(a1 + 176);
        goto LABEL_27;
      }
    }
    else
    {
      char v17 = 0;
    }
    uint64_t v18 = 0;
LABEL_27:
    uint64_t v19 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 272))(*(void *)(a1 + 304), 1);
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v44);
    uint64_t v20 = (std::mutex *)Registry::getServiceMap(v44);
    char v21 = v20;
    if ((v22 & 0x8000000000000000) != 0)
    {
      char v23 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = 5381;
      do
      {
        unint64_t v22 = v24;
        unsigned int v25 = *v23++;
        uint64_t v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    std::mutex::lock(v20);
    unint64_t v47 = v22;
    uint64_t v26 = sub_10004D37C(&v21[1].__m_.__sig, &v47);
    if (v26)
    {
      uint64_t v28 = v26[3];
      long long v27 = (std::__shared_weak_count *)v26[4];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v21);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v27);
        char v29 = 0;
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    std::mutex::unlock(v21);
    long long v27 = 0;
    char v29 = 1;
LABEL_35:
    if (v45) {
      sub_10004D2C8(v45);
    }
    if (v28) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v28 + 464))(v28, v19, 9);
    }
    if ((v29 & 1) == 0) {
      sub_10004D2C8(v27);
    }
    if ((v19 & 1) == 0)
    {
      int v30 = *(_DWORD *)(a1 + 2036);
      if (v30)
      {
        if (v30 == 1)
        {
          uint64_t v31 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v44) = 0;
            _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I Grant emergency disable - Bootstrap disabled", (uint8_t *)&v44, 2u);
          }
          sub_1002DA600((unsigned int *)(a1 + 2032));
          if (*(_DWORD *)(a1 + 2024) != 3)
          {
            *(_DWORD *)(a1 + 2024) = 3;
            uint64_t v32 = *(void *)(a1 + 2016);
            if (v32) {
              (*(void (**)(uint64_t, uint64_t))(*(void *)v32 + 48))(v32, a1 + 2024);
            }
          }
        }
        char v33 = 0;
        if (!v17)
        {
LABEL_80:
          if ((v33 & 1) == 0) {
            return;
          }
          goto LABEL_81;
        }
LABEL_79:
        sub_10004D2C8(v17);
        goto LABEL_80;
      }
    }
    if (*(int *)(a1 + 576) < 1)
    {
      int v35 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304));
      int v36 = *(_DWORD *)(a1 + 2024);
      if (v35)
      {
        if (v36 != 1)
        {
          *(_DWORD *)(a1 + 2024) = 1;
          uint64_t v34 = *(void *)(a1 + 2016);
          if (v34) {
            goto LABEL_61;
          }
        }
      }
      else if (v36)
      {
        *(_DWORD *)(a1 + 2024) = 0;
        uint64_t v34 = *(void *)(a1 + 2016);
        if (v34) {
          goto LABEL_61;
        }
      }
    }
    else if (*(_DWORD *)(a1 + 2024) != 2)
    {
      *(_DWORD *)(a1 + 2024) = 2;
      uint64_t v34 = *(void *)(a1 + 2016);
      if (v34) {
LABEL_61:
      }
        (*(void (**)(uint64_t, uint64_t))(*(void *)v34 + 48))(v34, a1 + 2024);
    }
    uint64_t v37 = (*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 328))(*(void *)(a1 + 304), 3);
    if (v18) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v18 + 40))(v18, v37);
    }
    if ((v37 & 1) == 0
      && ((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320)) & 1) == 0
      && (*(unsigned int (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)))
    {
      unint64_t v38 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v44) = 0;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Vinyl no longer available, clearing carrier list", (uint8_t *)&v44, 2u);
      }
      (*(void (**)(void))(**(void **)(a1 + 336) + 136))(*(void *)(a1 + 336));
    }
    int v39 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304));
    if (v39)
    {
      if (*(unsigned char *)(a1 + 1512)) {
        goto LABEL_78;
      }
    }
    else
    {
      (*(void (**)(Registry **__return_ptr))(**(void **)(a1 + 304) + 552))(&v44);
      if (v46)
      {
        int v40 = *(unsigned __int8 *)(a1 + 1512);
        sub_10005CD2C((uint64_t)&v44, (char *)v45);
        if (!v40)
        {
LABEL_78:
          char v33 = 1;
          if (!v17) {
            goto LABEL_80;
          }
          goto LABEL_79;
        }
      }
      else
      {
        sub_10005CD2C((uint64_t)&v44, (char *)v45);
      }
    }
    sub_1002DA714(a1, v39 ^ 1, 0);
    goto LABEL_78;
  }
LABEL_81:
  int v41 = (*(uint64_t (**)(void, uint64_t, void))(**(void **)(a1 + 304) + 464))(*(void *)(a1 + 304), 2, 0);
  uint64_t v42 = **(void **)(a1 + 272);
  if (v41 < 1) {
    (*(void (**)(void))(v42 + 40))();
  }
  else {
    (*(void (**)(void))(v42 + 32))();
  }
  sub_1002FA500(a1);
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 24))(*(void *)(a1 + 320)))
  {
    uint64_t v43 = *(void *)(a1 + 528);
    if (v43) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v43 + 48))(v43, a1 + 2464, a1 + 2568);
    }
  }
}

void sub_1002FA178(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FA1F8(uint64_t a1)
{
  if (*(char *)(a1 + 615) < 0)
  {
    if (!*(void *)(a1 + 600)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 615))
  {
    return;
  }
  int v2 = (unsigned char *)(a1 + 592);
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 360))(buf);
  if (v12)
  {
    if (*(void *)(a1 + 4976)) {
      sub_1002E78DC(a1 + 4712, 0);
    }
    if (*(unsigned char *)(a1 + 5528))
    {
      *(unsigned char *)(a1 + 5528) = 0;
      v9[0] = off_1019BAA60;
      v9[1] = a1;
      void v9[3] = v9;
      sub_100304928(a1, (uint64_t)v9);
      sub_100060644(v9);
    }
    else
    {
      uint64_t v4 = *(void *)(a1 + 304);
      v8[0] = 0;
      v8[240] = 0;
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 256))(v4, v8);
      sub_10030D044((uint64_t)v8);
      uint64_t v5 = *(void *)(a1 + 288);
      sub_100058DB0(__p, "");
      (*(void (**)(uint64_t, void **))(*(void *)v5 + 72))(v5, __p);
      if (v7 < 0) {
        operator delete(__p[0]);
      }
      if (*(char *)(a1 + 615) < 0)
      {
        int v2 = *(unsigned char **)(a1 + 592);
        *(void *)(a1 + 600) = 0;
      }
      else
      {
        *(unsigned char *)(a1 + 615) = 0;
      }
      unsigned char *v2 = 0;
      *(unsigned char *)(a1 + 1512) = 0;
      *(_DWORD *)(a1 + 576) = 0;
      sub_1002DA714(a1, 0, 0);
      if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)))
      {
        (*(void (**)(void))(**(void **)(a1 + 336) + 136))(*(void *)(a1 + 336));
        (*(void (**)(void))(**(void **)(a1 + 336) + 184))(*(void *)(a1 + 336));
      }
    }
  }
  else
  {
    int v3 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a1 + 615) < 0) {
        int v2 = *(unsigned char **)v2;
      }
      *(_DWORD *)long long buf = 136315138;
      unsigned int v11 = v2;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Could not find csn for [%s]", buf, 0xCu);
    }
  }
}

void sub_1002FA4BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FA500(uint64_t a1)
{
  if (*(char *)(a1 + 2623) < 0)
  {
    if (*(void *)(a1 + 2608)) {
      goto LABEL_3;
    }
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
  }
  if (!*(unsigned char *)(a1 + 2623)) {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
  }
LABEL_3:
  unsigned __int8 v1 = 46;
  if (*(unsigned char *)(a1 + 2929))
  {
    if (*(unsigned char *)(a1 + 2928)) {
      unsigned __int8 v1 = 47;
    }
    else {
      unsigned __int8 v1 = 46;
    }
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), v1);
}

void sub_1002FA588(uint64_t a1, int a2)
{
}

uint64_t sub_1002FA590(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 680);
  if (result)
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result);
    if (v2 == 2) {
      return 2;
    }
    else {
      return v2 == 1;
    }
  }
  return result;
}

uint64_t sub_1002FA5E0(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 616);
  if (result)
  {
    int v2 = (*(uint64_t (**)(uint64_t))(*(void *)result + 96))(result);
    if (v2 == 2) {
      return 2;
    }
    else {
      return v2 == 1;
    }
  }
  return result;
}

uint64_t sub_1002FA630(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      char v7 = a3;
    }
    else {
      char v7 = (uint64_t *)*a3;
    }
    int v15 = 136315394;
    uint64_t v16 = v7;
    __int16 v17 = 1024;
    int v18 = a2;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Setting active data slot : %s (%d)", (uint8_t *)&v15, 0x12u);
  }
  unint64_t v8 = *(std::__shared_weak_count **)(a1 + 184);
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      uint64_t v10 = v9;
      uint64_t v11 = *(void *)(a1 + 176);
      if (v11)
      {
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 120))(v11, a2, a3);
        uint64_t v12 = *((unsigned __int8 *)a3 + 23);
        if ((v12 & 0x80u) != 0) {
          uint64_t v12 = a3[1];
        }
        if (!v12) {
          sub_1002F94E4(a1);
        }
      }
      sub_10004D2C8(v10);
    }
  }
  uint64_t v13 = *(void *)(a1 + 464);
  if (v13) {
    (*(void (**)(uint64_t))(*(void *)v13 + 104))(v13);
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
}

void sub_1002FA7C0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FA7DC(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  return sub_1002FA630(a1 - 64, a2, a3);
}

uint64_t sub_1002FA7E4(uint64_t a1)
{
  return sub_1002FA500(a1 - 64);
}

uint64_t sub_1002FA7EC(uint64_t a1)
{
  return sub_1002FA500(a1 - 144);
}

void sub_1002FA7F4(uint64_t a1, void **a2, uint64_t a3)
{
  void (***v17)(unint64_t *__return_ptr, void, unsigned char *);
  char v18;
  unint64_t v19;
  std::__shared_weak_count *v20;
  unsigned char buf[24];

  long long v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    char v7 = *a2;
    unint64_t v8 = "Inactive";
    if (*((char *)a2 + 23) >= 0) {
      char v7 = a2;
    }
    if (a3) {
      unint64_t v8 = "Active";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I updateMonitorModeStatus %s - %s", buf, 0x16u);
  }
  sub_1002DCB1C(a1);
  (***(void (****)(unsigned char *__return_ptr))(a1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  uint64_t v10 = ServiceMap;
  if ((v11 & 0x8000000000000000) != 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      unint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v19 = v11;
  int v15 = sub_10004D37C(&v10[1].__m_.__sig, &v19);
  if (v15)
  {
    __int16 v17 = (void (***)(unint64_t *__return_ptr, void, unsigned char *))v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      int v18 = 0;
      goto LABEL_15;
    }
  }
  else
  {
    __int16 v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  int v18 = 1;
LABEL_15:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v17)
  {
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(buf, *a2, (unint64_t)a2[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)a2;
      *(void *)&uint8_t buf[16] = a2[2];
    }
    (**v17)(&v19, v17, buf);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v19) {
      (*(void (**)(unint64_t, uint64_t, void))(*(void *)v19 + 560))(v19, a3, *(unsigned __int8 *)(a1 + 5561));
    }
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
}

void sub_1002FAA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FAAF0(uint64_t a1, void **a2, uint64_t a3)
{
}

uint64_t sub_1002FAAF8(uint64_t a1, unsigned int *a2)
{
  int v3 = *(std::__shared_weak_count **)(a1 + 184);
  if (v3)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      long long v6 = v5;
      uint64_t v7 = *(void *)(a1 + 176);
      if (v7) {
        (*(void (**)(uint64_t, void))(*(void *)v7 + 128))(v7, *a2);
      }
      sub_10004D2C8(v6);
    }
  }
  unint64_t v8 = *(uint64_t (**)(void))(**(void **)(a1 + 160) + 24);

  return v8();
}

void sub_1002FABA8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FABBC(uint64_t a1, unsigned int *a2)
{
  return sub_1002FAAF8(a1 - 64, a2);
}

void sub_1002FABC4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = 0;
  uint64_t v7 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 320) + 576))(&v6);
  if (v6)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v6 + 24))(v6, a2);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "failed to create IDSPhoneSubscriptionSelector", v5, 2u);
    }
  }
  if (v7) {
    sub_10004D2C8(v7);
  }
}

void sub_1002FACA8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FACC0(uint64_t a1, uint64_t a2)
{
}

void sub_1002FACCC(uint64_t a1)
{
}

void sub_1002FACD4(uint64_t a1, int a2, int a3)
{
  int v6 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320));
  if ((a2 | a3) == 1 && v6 != 0)
  {
    unint64_t v8 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Selection Changes Pop-Up", v9, 2u);
    }
    *(unsigned char *)(a1 + 1560) = 1;
    *(unsigned char *)(a1 + 1561) = a2;
    *(unsigned char *)(a1 + 1562) = a3;
    sub_1002DC324(a1);
  }
}

void sub_1002FAD98(uint64_t a1, int a2, int a3)
{
}

uint64_t sub_1002FADA0(std::string *a1, uint64_t a2, const std::string *a3)
{
  int v5 = *(unsigned __int8 *)(a2 + 24);
  char v13 = 0;
  if (v5)
  {
    long long v14 = 0uLL;
    std::string::size_type v15 = 0;
    sub_1000302C0((char *)&v14, *(long long **)a2, *(long long **)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 3));
    char v13 = 1;
    int v6 = &a1[86].__r_.__value_.__s.__data_[8];
    if (a1[86].__r_.__value_.__s.__data_[8])
    {
      data = (unsigned __int8 *)a1[87].__r_.__value_.__l.__data_;
      unint64_t v8 = (unsigned __int8 *)a1[86].__r_.__value_.__r.__words[2];
      uint64_t v9 = (unsigned __int8 *)v14;
      if (data - v8 == *((void *)&v14 + 1) - (void)v14)
      {
        while (v8 != data)
        {
          if (!sub_1000609C0((uint64_t)&v12, v8, v9))
          {
            if (*v6)
            {
              if (!v13) {
                goto LABEL_9;
              }
              goto LABEL_12;
            }
            if (!v13) {
              goto LABEL_15;
            }
            goto LABEL_14;
          }
          v8 += 24;
          v9 += 24;
        }
        goto LABEL_17;
      }
LABEL_12:
      sub_10005CBB4((uint64_t *)&a1[86].__r_.__value_.__r.__words[2]);
      *(_OWORD *)&a1[86].__r_.__value_.__r.__words[2] = v14;
      a1[87].__r_.__value_.__l.__size_ = v15;
      std::string::size_type v15 = 0;
      long long v14 = 0uLL;
    }
    else
    {
LABEL_14:
      *(_OWORD *)&a1[86].__r_.__value_.__r.__words[2] = v14;
      a1[87].__r_.__value_.__l.__size_ = v15;
      std::string::size_type v15 = 0;
      long long v14 = 0uLL;
      a1[86].__r_.__value_.__s.__data_[8] = 1;
    }
  }
  else
  {
    if (!a1[86].__r_.__value_.__s.__data_[8]) {
      goto LABEL_19;
    }
    int v6 = &a1[86].__r_.__value_.__s.__data_[8];
LABEL_9:
    uint64_t v12 = &a1[86].__r_.__value_.__r.__words[2];
    sub_100047F64((void ***)&v12);
    a1[86].__r_.__value_.__s.__data_[8] = 0;
  }
LABEL_15:
  std::string::pointer v10 = a1[86].__r_.__value_.__l.__data_;
  if (v10) {
    (*(void (**)(std::string::pointer, std::string::value_type *))(*(void *)v10 + 48))(v10, v6);
  }
LABEL_17:
  if (v13)
  {
    uint64_t v12 = (std::string::size_type *)&v14;
    sub_100047F64((void ***)&v12);
  }
LABEL_19:
  uint64_t result = operator!=();
  if (result)
  {
    std::string::operator=(a1 + 89, a3);
    a1[90].__r_.__value_.__r.__words[0] = a3[1].__r_.__value_.__r.__words[0];
    uint64_t result = a1[88].__r_.__value_.__r.__words[2];
    if (result) {
      return (*(uint64_t (**)(uint64_t, std::string *))(*(void *)result + 48))(result, a1 + 89);
    }
  }
  return result;
}

void sub_1002FAFC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t *a9, char a10, uint64_t a11)
{
  if (a10)
  {
    a9 = &a11;
    sub_100047F64((void ***)&a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FAFF4(uint64_t a1, uint64_t a2, const std::string *a3)
{
  return sub_1002FADA0((std::string *)(a1 - 64), a2, a3);
}

void sub_1002FAFFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a3;
    v7[2] = *(void **)(a3 + 16);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    sub_10004FC84(__p, *(void **)a4, *(void *)(a4 + 8));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)a4;
    __p[2] = *(void **)(a4 + 16);
  }
  int v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002FB1D0(void *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (*(char *)(v16 + 39) < 0) {
    operator delete(*v17);
  }
  sub_10006A6AC(a1);
}

void sub_1002FB214(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002FB21C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_1002FB224(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
  if (a3) {
    sub_1002E19C0(a1);
  }
  sub_1002FB2B4(a1, 1, a2, a3, a4, a5);
  if (sub_10010E194(*(void ***)(a1 + 5544), (void **)a5)) {
    sub_100340C0C((void *)(a1 + 5536), (void **)a5);
  }
  *(unsigned char *)(a1 + 5561) = 0;
}

uint64_t sub_1002FB2B4(uint64_t result, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  uint64_t v6 = *(void *)(result + 432);
  if (v6)
  {
    uint64_t v12 = result;
    if (sub_10010E194(*(void ***)(result + 5544), (void **)a6))
    {
      std::string::size_type v15 = a6;
      char v13 = *((unsigned char *)sub_100340D20((uint64_t **)(v12 + 5536), (void **)a6, &v15) + 56);
    }
    else
    {
      char v13 = 0;
    }
    char v14 = v13;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, void, uint64_t, uint64_t, char *))(*(void *)v6 + 208))(v6, a2, a3, 0, a4, a5, &v14);
  }
  return result;
}

void sub_1002FB388(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, long long *a5)
{
}

uint64_t sub_1002FB390(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, long long *a6)
{
  return sub_1002FB2B4(a1 - 104, a2, a3, a4, a5, a6);
}

void sub_1002FB398(void *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = a1[30];
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  sub_1000C6BDC(v12, a3);
  v13[0] = off_1019BA350;
  void v13[3] = v13;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void *))(*(void *)v5 + 64))(v5, v6, v7, v12, v13);
  sub_1000C6B58(v13);
  sub_10005CD2C((uint64_t)v12, (char *)v12[1]);
  unint64_t v8 = (std::__shared_weak_count *)a1[23];
  if (v8)
  {
    uint64_t v9 = std::__shared_weak_count::lock(v8);
    if (v9)
    {
      std::string::pointer v10 = v9;
      uint64_t v11 = a1[22];
      if (v11) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 56))(v11, a3);
      }
      sub_10004D2C8(v10);
    }
  }
}

void sub_1002FB4D0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_1002FB508(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1002FB510(uint64_t a1, void *a2, unsigned __int8 *a3)
{
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 184);
  if (v4)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      unint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 176);
      if (v9
        && (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)) & 1) != 0
         || ((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320)) & 1) != 0)
        && ((*(uint64_t (**)(uint64_t, void *, unsigned __int8 *))(*(void *)v9 + 136))(v9, a2, a3) & 1) == 0)
      {
        char v10 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320));
        if (a2[2]) {
          char v11 = 1;
        }
        else {
          char v11 = v10;
        }
        if (v11)
        {
          long long __p = 0;
          long long v45 = 0;
          uint64_t v46 = 0;
          uint64_t v43 = 0;
          SubscriptionSlotConfiguration::SubscriptionSlotConfiguration((SubscriptionSlotConfiguration *)&v43);
          char v14 = (void *)*a2;
          uint64_t v12 = a2 + 1;
          char v13 = v14;
          if (v14 != v12)
          {
            uint64_t v15 = 0;
            while (1)
            {
              uint64_t v16 = (const void **)(v13 + 4);
              int v17 = (*(uint64_t (**)(void, void *))(**(void **)(a1 + 304) + 568))(*(void *)(a1 + 304), v13 + 4);
              int v18 = v17;
              if (v17 != 2) {
                break;
              }
              int v20 = (*(uint64_t (**)(void))(**(void **)(a1 + 320) + 104))(*(void *)(a1 + 320));
              int v19 = 2;
              if (v20) {
                goto LABEL_17;
              }
              HIDWORD(v43) = 2;
LABEL_19:
              char v21 = v45;
              if (v45 >= v46)
              {
                char v23 = (char *)__p;
                uint64_t v24 = (v45 - (unsigned char *)__p) >> 2;
                unint64_t v25 = v24 + 1;
                if ((unint64_t)(v24 + 1) >> 62) {
                  sub_10006A748();
                }
                uint64_t v26 = v46 - (unsigned char *)__p;
                if ((v46 - (unsigned char *)__p) >> 1 > v25) {
                  unint64_t v25 = v26 >> 1;
                }
                if ((unint64_t)v26 >= 0x7FFFFFFFFFFFFFFCLL) {
                  unint64_t v27 = 0x3FFFFFFFFFFFFFFFLL;
                }
                else {
                  unint64_t v27 = v25;
                }
                if (v27)
                {
                  uint64_t v28 = (char *)sub_10005ECD8((uint64_t)&v46, v27);
                  char v23 = (char *)__p;
                  char v21 = v45;
                }
                else
                {
                  uint64_t v28 = 0;
                }
                char v29 = &v28[4 * v24];
                *(_DWORD *)char v29 = v18;
                unint64_t v22 = v29 + 4;
                while (v21 != v23)
                {
                  int v30 = *((_DWORD *)v21 - 1);
                  v21 -= 4;
                  *((_DWORD *)v29 - 1) = v30;
                  v29 -= 4;
                }
                long long __p = v29;
                long long v45 = v22;
                uint64_t v46 = &v28[4 * v27];
                if (v23) {
                  operator delete(v23);
                }
              }
              else
              {
                *(_DWORD *)long long v45 = v18;
                unint64_t v22 = v21 + 4;
              }
              long long v45 = v22;
              uint64_t v31 = *((unsigned __int8 *)v13 + 55);
              if ((v31 & 0x80u) == 0) {
                uint64_t v32 = *((unsigned __int8 *)v13 + 55);
              }
              else {
                uint64_t v32 = v13[5];
              }
              uint64_t v33 = a3[23];
              int v34 = (char)v33;
              if ((v33 & 0x80u) != 0) {
                uint64_t v33 = *((void *)a3 + 1);
              }
              if (v32 != v33) {
                goto LABEL_51;
              }
              if (v34 >= 0) {
                int v35 = a3;
              }
              else {
                int v35 = *(unsigned __int8 **)a3;
              }
              if ((v31 & 0x80) == 0)
              {
                if (*((unsigned char *)v13 + 55))
                {
                  while (*(unsigned __int8 *)v16 == *v35)
                  {
                    uint64_t v16 = (const void **)((char *)v16 + 1);
                    ++v35;
                    if (!--v31) {
                      goto LABEL_50;
                    }
                  }
                  goto LABEL_51;
                }
LABEL_50:
                uint64_t v15 = *((unsigned int *)v22 - 1);
                goto LABEL_51;
              }
              if (!memcmp(*v16, v35, v13[5])) {
                goto LABEL_50;
              }
LABEL_51:
              int v36 = (void *)v13[1];
              if (v36)
              {
                do
                {
                  uint64_t v37 = v36;
                  int v36 = (void *)*v36;
                }
                while (v36);
              }
              else
              {
                do
                {
                  uint64_t v37 = (void *)v13[2];
                  BOOL v38 = *v37 == (void)v13;
                  char v13 = v37;
                }
                while (!v38);
              }
              char v13 = v37;
              if (v37 == v12) {
                goto LABEL_61;
              }
            }
            if (v17 != 1) {
              goto LABEL_19;
            }
            int v19 = 1;
LABEL_17:
            LODWORD(v43) = v19;
            goto LABEL_19;
          }
          uint64_t v15 = 0;
LABEL_61:
          if ((*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
          {
            if (__p == v45)
            {
              int v40 = *(unsigned int **)(a1 + 2464);
              int v41 = *(unsigned int **)(a1 + 2472);
              if (v40 != v41)
              {
                while ((subscriber::isEsimCapable() & 1) == 0)
                {
                  v40 += 42;
                  if (v40 == v41)
                  {
                    int v40 = v41;
                    break;
                  }
                }
                if (*(unsigned int **)(a1 + 2472) != v40)
                {
                  unsigned int v42 = 0;
                  uint64_t v15 = *v40;
                  unsigned int v42 = *v40;
                  sub_1002FB9E8((uint64_t)&__p, &v42);
                }
              }
            }
          }
          (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v9 + 112))(v9, &__p, v15);
          sub_1002F965C(a1 + 2168, &v43);
          if (!*(unsigned char *)(a1 + 2208)) {
            sub_10016C840();
          }
          SubscriptionSlotConfiguration::log((SubscriptionSlotConfiguration *)(a1 + 2200), (const ctu::OsLogLogger *)(a1 + 40), "Setting slot selection, updated sub-config");
          if (__p)
          {
            long long v45 = (char *)__p;
            operator delete(__p);
          }
        }
        else
        {
          int v39 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p) = 0;
            _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I We cannot disable all slots", (uint8_t *)&__p, 2u);
          }
        }
      }
      sub_10004D2C8(v8);
    }
  }
}

void sub_1002FB9AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (__p) {
    operator delete(__p);
  }
  sub_10004D2C8(v14);
  _Unwind_Resume(a1);
}

void sub_1002FB9E8(uint64_t a1, _DWORD *a2)
{
  uint64_t v4 = a1 + 16;
  unint64_t v5 = *(void *)(a1 + 16);
  uint64_t v6 = *(_DWORD **)(a1 + 8);
  if ((unint64_t)v6 >= v5)
  {
    unint64_t v8 = *(_DWORD **)a1;
    uint64_t v9 = ((uint64_t)v6 - *(void *)a1) >> 2;
    unint64_t v10 = v9 + 1;
    if ((unint64_t)(v9 + 1) >> 62) {
      sub_10006A748();
    }
    uint64_t v11 = v5 - (void)v8;
    if (v11 >> 1 > v10) {
      unint64_t v10 = v11 >> 1;
    }
    if ((unint64_t)v11 >= 0x7FFFFFFFFFFFFFFCLL) {
      unint64_t v12 = 0x3FFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v12 = v10;
    }
    if (v12)
    {
      char v13 = (char *)sub_10005ECD8(v4, v12);
      unint64_t v8 = *(_DWORD **)a1;
      uint64_t v6 = *(_DWORD **)(a1 + 8);
    }
    else
    {
      char v13 = 0;
    }
    char v14 = &v13[4 * v9];
    uint64_t v15 = &v13[4 * v12];
    *(_DWORD *)char v14 = *a2;
    uint64_t v7 = v14 + 4;
    while (v6 != v8)
    {
      int v16 = *--v6;
      *((_DWORD *)v14 - 1) = v16;
      v14 -= 4;
    }
    *(void *)a1 = v14;
    *(void *)(a1 + 8) = v7;
    *(void *)(a1 + 16) = v15;
    if (v8) {
      operator delete(v8);
    }
  }
  else
  {
    _DWORD *v6 = *a2;
    uint64_t v7 = v6 + 1;
  }
  *(void *)(a1 + 8) = v7;
}

void sub_1002FBAD0(uint64_t a1, void *a2, unsigned __int8 *a3)
{
}

void sub_1002FBAD8(uint64_t a1, uint64_t a2)
{
  void (***v11)(unint64_t *__return_ptr, void, void **);
  char v12;
  void *__p[2];
  uint64_t v14;
  unint64_t v15;
  std::__shared_weak_count *v16;

  (***(void (****)(void **__return_ptr))(a1 + 320))(__p);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)__p[0]);
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v15 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v15);
  if (v9)
  {
    uint64_t v11 = (void (***)(unint64_t *__return_ptr, void, void **))v9[3];
    unint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      unint64_t v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  unint64_t v10 = 0;
  unint64_t v12 = 1;
LABEL_9:
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  if (v11)
  {
    uint64_t v15 = 0;
    int v16 = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)a2;
      char v14 = *(void *)(a2 + 16);
    }
    (**v11)(&v15, v11, __p);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
    if (v15) {
      (*(void (**)(unint64_t))(*(void *)v15 + 568))(v15);
    }
    if (v16) {
      sub_10004D2C8(v16);
    }
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
}

void sub_1002FBC9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_1002FBCF4(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1002FBCFC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 512);
  if (!v3) {
    return 0;
  }
  uint64_t v10 = 0;
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)v3 + 40))(&v10);
  buf[0] = 0;
  uint64_t v5 = sub_1000D8740(v10, v11, (unsigned __int8 **)a2);
  BOOL v6 = v5 != v11;
  if (v5 != v11)
  {
    uint64_t v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        unsigned int v8 = (unsigned __int8 *)a2;
      }
      else {
        unsigned int v8 = *(unsigned __int8 **)a2;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v8;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Plan (%s) is in transferred plan list", buf, 0xCu);
    }
  }
  *(void *)long long buf = &v10;
  sub_100047F64((void ***)buf);
  return v6;
}

BOOL sub_1002FBE30(uint64_t a1, uint64_t a2)
{
  return sub_1002FBCFC(a1 - 64, a2);
}

void sub_1002FBE38(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 512);
  if (v4)
  {
    uint64_t v5 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        BOOL v6 = a2;
      }
      else {
        BOOL v6 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Removing transferred plan (%s)", buf, 0xCu);
      uint64_t v4 = *(void *)(a1 + 512);
    }
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v4 + 48))(v4, a2);
  }
  memset(v14, 0, sizeof(v14));
  v20[0] = 0;
  v20[1] = 0;
  char v21 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v20);
  if (v21 && ((unsigned int v8 = LOBYTE(v20[0]) - 89, v8 > 8) || ((1 << v8) & 0x181) == 0))
  {
    v12[0] = 0;
    v12[1] = 0;
    uint64_t v13 = 0;
    ctu::hex((uint64_t *)v12, (ctu *)v20, (const void *)0x10, v7);
    sub_1002FC384((uint64_t *)buf, (unsigned __int8 *)a2, *(void *)(a1 + 2464), *(void *)(a1 + 2472), a1 + 2320);
    if (SHIBYTE(v13) < 0)
    {
      sub_10004FC84(&v16, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      long long v16 = *(_OWORD *)v12;
      uint64_t v17 = v13;
    }
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(&__p, (void *)*a2, a2[1]);
    }
    else
    {
      long long __p = *(_OWORD *)a2;
      uint64_t v19 = a2[2];
    }
    sub_1002FC1CC(v14, (long long *)buf);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16);
    }
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v10 = *(void *)(a1 + 464);
    if (v10)
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Update deny list to unblock source iccid and block target iccid", buf, 2u);
        uint64_t v10 = *(void *)(a1 + 464);
      }
      (*(void (**)(uint64_t, uint64_t *, uint64_t *))(*(void *)v10 + 192))(v10, v14, a2);
    }
    if (SHIBYTE(v13) < 0) {
      operator delete(v12[0]);
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Invalid CSN, Aborting..", buf, 2u);
    }
  }
  *(void *)long long buf = v14;
  sub_10030EC88((void ***)buf);
}

void sub_1002FC148(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, uint64_t a16, uint64_t a17, char *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *__p,uint64_t a25,int a26,__int16 a27,char a28,char a29)
{
  if (a29 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  a18 = &a15;
  sub_10030EC88((void ***)&a18);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FC1CC(uint64_t *a1, long long *a2)
{
  unint64_t v6 = a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v12 = 0x8E38E38E38E38E39 * ((uint64_t)(v7 - *a1) >> 3);
    unint64_t v13 = v12 + 1;
    if (v12 + 1 > 0x38E38E38E38E38ELL) {
      sub_10006A748();
    }
    unint64_t v14 = 0x8E38E38E38E38E39 * ((uint64_t)(v5 - *a1) >> 3);
    if (2 * v14 > v13) {
      unint64_t v13 = 2 * v14;
    }
    if (v14 >= 0x1C71C71C71C71C7) {
      unint64_t v15 = 0x38E38E38E38E38ELL;
    }
    else {
      unint64_t v15 = v13;
    }
    void v22[4] = v4;
    if (v15) {
      long long v16 = (char *)sub_10016ACDC(v4, v15);
    }
    else {
      long long v16 = 0;
    }
    uint64_t v17 = &v16[72 * v12];
    v22[0] = v16;
    v22[1] = v17;
    void v22[3] = &v16[72 * v15];
    long long v18 = *a2;
    *((void *)v17 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v17 = v18;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v19 = *(long long *)((char *)a2 + 24);
    *((void *)v17 + 5) = *((void *)a2 + 5);
    *(_OWORD *)(v17 + 24) = v19;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v20 = a2[3];
    *((void *)v17 + 8) = *((void *)a2 + 8);
    *((_OWORD *)v17 + 3) = v20;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    v22[2] = v17 + 72;
    sub_10030EB84(a1, v22);
    uint64_t v11 = a1[1];
    sub_10030EC38((uint64_t)v22);
  }
  else
  {
    long long v8 = *a2;
    *(void *)(v7 + 16) = *((void *)a2 + 2);
    *(_OWORD *)unint64_t v7 = v8;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v9 = *(long long *)((char *)a2 + 24);
    *(void *)(v7 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(v7 + 24) = v9;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v10 = a2[3];
    *(void *)(v7 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(v7 + 48) = v10;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    uint64_t v11 = v7 + 72;
    a1[1] = v7 + 72;
  }
  a1[1] = v11;
  return v11 - 72;
}

void sub_1002FC370(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030EC38((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1002FC384(uint64_t *result, unsigned __int8 *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v5 = result;
  if (a3 == a4) {
    goto LABEL_26;
  }
  uint64_t v8 = a3;
  uint64_t v10 = a2[23];
  unint64_t v12 = *(const void **)a2;
  size_t v11 = *((void *)a2 + 1);
  uint64_t v13 = (v10 & 0x80u) == 0 ? a2[23] : *((void *)a2 + 1);
  while (1)
  {
    uint64_t v14 = *(unsigned __int8 *)(v8 + 95);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v8 + 80);
    }
    if (v13 == v14)
    {
      if (v15 >= 0) {
        long long v16 = (unsigned __int8 *)(v8 + 72);
      }
      else {
        long long v16 = *(unsigned __int8 **)(v8 + 72);
      }
      if ((v10 & 0x80) == 0)
      {
        if (!v10) {
          break;
        }
        uint64_t v17 = a2;
        uint64_t v18 = v10;
        while (*v17 == *v16)
        {
          ++v17;
          ++v16;
          if (!--v18) {
            goto LABEL_20;
          }
        }
        goto LABEL_18;
      }
      uint64_t result = (uint64_t *)memcmp(v12, v16, v11);
      if (!result) {
        break;
      }
    }
LABEL_18:
    v8 += 168;
    if (v8 == a4) {
      goto LABEL_26;
    }
  }
LABEL_20:
  long long v19 = *(uint64_t **)(a5 + 8);
  if (!v19)
  {
LABEL_26:
    *unint64_t v5 = 0;
    v5[1] = 0;
    void v5[2] = 0;
    return result;
  }
  int v20 = *(_DWORD *)v8;
  while (1)
  {
    int v21 = *((_DWORD *)v19 + 8);
    if (v20 >= v21) {
      break;
    }
LABEL_25:
    long long v19 = (uint64_t *)*v19;
    if (!v19) {
      goto LABEL_26;
    }
  }
  if (v21 < v20)
  {
    ++v19;
    goto LABEL_25;
  }
  uint64_t result = sub_1000FD774(a5, (int *)v8);
  if (*((char *)result + 23) < 0)
  {
    char v23 = (void *)*result;
    unint64_t v24 = result[1];
    return (uint64_t *)sub_10004FC84(v5, v23, v24);
  }
  else
  {
    long long v22 = *(_OWORD *)result;
    void v5[2] = result[2];
    *(_OWORD *)unint64_t v5 = v22;
  }
  return result;
}

void sub_1002FC500(uint64_t a1, uint64_t *a2)
{
}

BOOL sub_1002FC508(uint64_t a1, int a2)
{
  uint64_t v2 = 3760;
  if (a2 == 1) {
    uint64_t v2 = 2952;
  }
  return (*(_DWORD *)(a1 + v2) & 0xFFFFFFFE) == 4;
}

BOOL sub_1002FC52C(uint64_t a1, int a2)
{
  uint64_t v2 = 3696;
  if (a2 == 1) {
    uint64_t v2 = 2888;
  }
  return (*(_DWORD *)(a1 + v2) & 0xFFFFFFFE) == 4;
}

uint64_t sub_1002FC550(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 528);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 56))();
  }
  else {
    return 2;
  }
}

uint64_t sub_1002FC584(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 464);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 56))();
  }
  else {
    return 2;
  }
}

void *sub_1002FC5B8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 288);
  sub_100340F10((uint64_t)v6, a2);
  uint64_t v8 = 0;
  uint64_t v3 = operator new(0x30uLL);
  void *v3 = off_1019BA3D0;
  v3[1] = a1;
  sub_100341390((uint64_t)(v3 + 2), (uint64_t)v6);
  uint64_t v8 = v3;
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 160))(v2, v7);
  sub_1003425A0(v7);
  return sub_10030ED0C(v6);
}

void sub_1002FC6A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1003425A0((uint64_t *)va);
  sub_10030ED0C(v6);
  _Unwind_Resume(a1);
}

void *sub_1002FC6CC(uint64_t a1, uint64_t a2)
{
  return sub_1002FC5B8(a1 - 112, a2);
}

void sub_1002FC6D4(uint64_t a1, uint64_t a2)
{
  if (*(void *)(a1 + 480))
  {
    *(void *)long long buf = 0;
    uint64_t v17 = 0;
    unint64_t v12 = (Registry *)"CellularPlanControllerImpl";
    sub_1002BFAE4((char **)&v12, (dispatch_object_t *)(a1 + 24), buf);
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v12);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v14, v12);
    ctu::RestModule::connect();
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v13) {
      sub_10004D2C8(v13);
    }
    uint64_t v4 = *(void *)(a1 + 480);
    uint64_t v5 = *(void *)buf;
    *(void *)&long long v19 = a1;
    *((void *)&v19 + 1) = *(void *)buf;
    int v20 = v17;
    if (v17) {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100342624((uint64_t)v21, a2);
    unint64_t v24 = 0;
    unint64_t v6 = (char *)operator new(0x40uLL);
    unint64_t v7 = v6;
    *(void *)unint64_t v6 = off_1019BA450;
    *(_OWORD *)(v6 + 8) = v19;
    uint64_t v8 = v22;
    *((void *)v6 + 3) = v20;
    *((void *)&v19 + 1) = 0;
    int v20 = 0;
    if (v8)
    {
      if (v8 == v21)
      {
        *((void *)v6 + 7) = v6 + 32;
        (*(void (**)(void *))(v21[0] + 24))(v21);
        goto LABEL_18;
      }
      long long v9 = &v22;
      *((void *)v6 + 7) = v8;
    }
    else
    {
      long long v9 = v6 + 56;
    }
    *long long v9 = 0;
LABEL_18:
    unint64_t v24 = v7;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 56))(v4, v5, v23);
    sub_1003216C8(v23);
    sub_10030ED90(v21);
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v17) {
      sub_10004D2C8(v17);
    }
    return;
  }
  uint64_t v10 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "No Cloud Sender available, abort blacklist fetching", buf, 2u);
  }
  memset(v18, 0, sizeof(v18));
  uint64_t v11 = *(void *)(a2 + 24);
  if (!v11) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v11 + 48))(v11, v18);
  *(void *)long long buf = v18;
  sub_10010DF1C((void ***)buf);
}

void sub_1002FC98C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FCA2C(uint64_t a1)
{
  sub_10030ED90((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_1002FCA64(uint64_t a1, uint64_t a2)
{
}

void sub_1002FCA6C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002FCB5C(uint64_t a1)
{
}

void sub_1002FCB64(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1002FCC44(uint64_t a1)
{
}

uint64_t sub_1002FCC4C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 512);
  if (!v2) {
    return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
  }
  char v23 = 0;
  unint64_t v24 = 0;
  uint64_t v25 = 0;
  (*(void (**)(unsigned __int8 **__return_ptr))(*(void *)v2 + 40))(&v23);
  uint64_t v20 = 0;
  int v21 = 0;
  uint64_t v22 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 552))(&v20);
  __s1 = 0;
  size_t __n = 0;
  uint64_t v19 = 0;
  sub_1002F410C((uint64_t)&__s1, (NSObject **)(a1 + 40), a1 + 2464);
  uint64_t v3 = v23;
  uint64_t v4 = v24;
  if (v23 == v24) {
    goto LABEL_36;
  }
  int v5 = 0;
  int v6 = 0;
  do
  {
    if (!sub_10010E128((uint64_t)&v20, (void **)v3)) {
      goto LABEL_22;
    }
    uint64_t v7 = HIBYTE(v19);
    if (v19 >= 0) {
      size_t v8 = HIBYTE(v19);
    }
    else {
      size_t v8 = __n;
    }
    uint64_t v9 = v3[23];
    int v10 = (char)v9;
    if ((v9 & 0x80u) != 0) {
      uint64_t v9 = *((void *)v3 + 1);
    }
    if (v8 != v9) {
      goto LABEL_21;
    }
    if (v10 >= 0) {
      uint64_t v11 = v3;
    }
    else {
      uint64_t v11 = *(unsigned __int8 **)v3;
    }
    if (v19 < 0)
    {
      if (memcmp(__s1, v11, __n)) {
        goto LABEL_21;
      }
    }
    else if (HIBYTE(v19))
    {
      p_s1 = &__s1;
      while (*(unsigned __int8 *)p_s1 == *v11)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v11;
        if (!--v7) {
          goto LABEL_24;
        }
      }
LABEL_21:
      __int16 v13 = (*(uint64_t (**)(void, void, unsigned __int8 *, void))(**(void **)(a1 + 304) + 128))(*(void *)(a1 + 304), 0, v3, 0);
      int v6 = v13;
      int v5 = HIBYTE(v13);
      goto LABEL_22;
    }
LABEL_24:
    bzero(v26, 0x4E8uLL);
    (*(void (**)(void ***__return_ptr))(**(void **)(a1 + 416) + 168))(v26);
    if (v27 && BYTE4(v26[0]))
    {
      if (BYTE1(v26[0]) - 7 < 4
        || BYTE1(v26[0]) == 12
        || (__int16 v14 = (*(uint64_t (**)(void, void, unsigned __int8 *, void))(**(void **)(a1 + 304) + 128))(*(void *)(a1 + 304), 0, v3, 0), v6 = v14, v5 = HIBYTE(v14), v27))
      {
        sub_10030D10C((uint64_t)v26);
      }
    }
    else
    {
      __int16 v15 = (*(uint64_t (**)(void, void, unsigned __int8 *, void))(**(void **)(a1 + 304) + 128))(*(void *)(a1 + 304), 0, v3, 0);
      if (v27) {
        sub_10030D10C((uint64_t)v26);
      }
      int v6 = v15;
      int v5 = HIBYTE(v15);
    }
LABEL_22:
    v3 += 24;
  }
  while (v3 != v4);
  if (v5 && v6 == 43) {
    sub_1002F82CC(a1, 6);
  }
LABEL_36:
  if (SHIBYTE(v19) < 0) {
    operator delete(__s1);
  }
  sub_10005CD2C((uint64_t)&v20, v21);
  v26[0] = (void **)&v23;
  sub_100047F64(v26);
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
}

void sub_1002FCFD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (LOBYTE(STACK[0x530])) {
    sub_10030D10C((uint64_t)&a22);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  sub_10005CD2C((uint64_t)&a16, (char *)a17);
  a22 = (uint64_t)&a19;
  sub_100047F64((void ***)&a22);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FD050(uint64_t a1)
{
  return sub_1002FCC4C(a1 - 136);
}

uint64_t sub_1002FD058(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 400);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_1002FD088(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 264);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

void sub_1002FD0B8(uint64_t a1, long long *a2, uint64_t a3)
{
  if ((*((char *)a2 + 23) & 0x80000000) == 0)
  {
    *(_OWORD *)uint64_t v11 = *a2;
    uint64_t v12 = *((void *)a2 + 2);
    uint64_t v13 = a1;
LABEL_4:
    long long __p = *a2;
    uint64_t v15 = *((void *)a2 + 2);
    goto LABEL_5;
  }
  sub_10004FC84(v11, *(void **)a2, *((void *)a2 + 1));
  int v6 = *((char *)a2 + 23);
  uint64_t v13 = a1;
  if ((v6 & 0x80000000) == 0) {
    goto LABEL_4;
  }
  sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
LABEL_5:
  sub_100023950((uint64_t)v16, a3);
  uint64_t v18 = 0;
  uint64_t v7 = operator new(0x48uLL);
  uint64_t v8 = v13;
  *uint64_t v7 = off_1019BA4D0;
  v7[1] = v8;
  uint64_t v9 = v7 + 2;
  if (SHIBYTE(v15) < 0)
  {
    sub_10004FC84(v9, (void *)__p, *((unint64_t *)&__p + 1));
  }
  else
  {
    long long v10 = __p;
    v7[4] = v15;
    *(_OWORD *)uint64_t v9 = v10;
  }
  sub_100023950((uint64_t)(v7 + 5), (uint64_t)v16);
  uint64_t v18 = v7;
  sub_1002EED78(a1, v11, (uint64_t)v17);
  sub_10023D374(v17);
  sub_100060644(v16);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(v11[0]);
  }
}

void sub_1002FD238(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1002FD28C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1002FD2C8(uint64_t a1, long long *a2, uint64_t a3)
{
}

void sub_1002FD2D0(uint64_t a1, int *a2, uint64_t a3)
{
  if (*(void *)(a1 + 480))
  {
    *(unsigned char *)(a1 + 1707) = 1;
    sub_1002D3F44(a1);
    int v6 = dispatch_group_create();
    uint64_t v7 = (std::__shared_weak_count *)operator new(0x20uLL);
    v7->__shared_owners_ = 0;
    v7->__shared_weak_owners_ = 0;
    v7->__vftable = (std::__shared_weak_count_vtbl *)off_1019B9120;
    LOBYTE(v7[1].__vftable) = 0;
    uint64_t v46 = v7 + 1;
    uint64_t v8 = operator new(0x30uLL);
    v8[1] = 0;
    v8[2] = 0;
    void *v8 = off_1019BACE0;
    void v8[3] = 0;
    v8[4] = 0;
    void v8[5] = 0;
    uint64_t v9 = operator new(0x30uLL);
    long long v10 = v9;
    v9[1] = 0;
    void v9[2] = 0;
    void v9[4] = 0;
    *uint64_t v9 = off_1019BAD30;
    void v9[3] = v9 + 4;
    long long v45 = v9 + 3;
    v9[5] = 0;
    uint64_t v43 = v9;
    if (*(unsigned char *)a2)
    {
      uint64_t v11 = *(void *)(a1 + 240);
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 5376);
      uint64_t v58 = *(void *)(a1 + 5368);
      uint64_t v59 = v12;
      if (v12) {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v49 = a1;
      int v50 = *a2;
      long long v51 = v7 + 1;
      uint64_t v52 = v7;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      unint64_t v53 = v8 + 3;
      long long v54 = v8;
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
      long long v55 = v9 + 3;
      long long v56 = v9;
      atomic_fetch_add_explicit(v9 + 1, 1uLL, memory_order_relaxed);
      long long v57 = v6;
      if (v6)
      {
        dispatch_retain(v6);
        dispatch_group_enter(v6);
      }
      uint64_t v13 = operator new(0x50uLL);
      void v13[4] = v50;
      uint64_t v14 = v49;
      *(void *)uint64_t v13 = off_1019BAD80;
      *((void *)v13 + 1) = v14;
      *((void *)v13 + 3) = v46;
      *((void *)v13 + 4) = v7;
      long long v51 = 0;
      uint64_t v52 = 0;
      *((void *)v13 + 5) = v8 + 3;
      *((void *)v13 + 6) = v8;
      unint64_t v53 = 0;
      long long v54 = 0;
      *((void *)v13 + 7) = v45;
      *((void *)v13 + 8) = v10;
      long long v55 = 0;
      long long v56 = 0;
      *((void *)v13 + 9) = v6;
      long long v57 = 0;
      v72[3] = v13;
      (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v11 + 184))(v11, &v58, v72);
      sub_10034ABC0(v72);
      if (v59) {
        sub_10004D2C8(v59);
      }
    }
    uint64_t v15 = operator new(0x30uLL);
    v15[1] = 0;
    void v15[2] = 0;
    *uint64_t v15 = off_1019BAEA0;
    void v15[3] = 0;
    long long v44 = v15 + 3;
    void v15[4] = 0;
    void v15[5] = 0;
    if (*((unsigned char *)a2 + 1))
    {
      memset(buf, 0, sizeof(buf));
      long long v73 = (uint8_t *)"CellularPlanControllerImpl";
      sub_1002BFAE4((char **)&v73, (dispatch_object_t *)(a1 + 24), buf);
      (***(void (****)(uint8_t **__return_ptr))(a1 + 320))(&v73);
      Registry::createRestModuleOneTimeUseMobileHelperConnection(&v47, (Registry *)v73);
      ctu::RestModule::connect();
      if (v48) {
        sub_10004D2C8(v48);
      }
      if (v74[0]) {
        sub_10004D2C8((std::__shared_weak_count *)v74[0]);
      }
      uint64_t v16 = *(void *)(a1 + 480);
      uint64_t v17 = *(void *)buf;
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
      if (v6)
      {
        dispatch_retain(v6);
        dispatch_group_enter(v6);
      }
      long long v71 = 0;
      uint64_t v18 = operator new(0x28uLL);
      *uint64_t v18 = off_1019BAEF0;
      v18[1] = a1;
      void v18[2] = v44;
      void v18[3] = v15;
      void v18[4] = v6;
      long long v71 = v18;
      (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v16 + 56))(v16, v17, v70);
      sub_1003216C8(v70);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    uint64_t v19 = operator new(0x30uLL);
    uint64_t v20 = v19;
    uint64_t v42 = a3;
    v19[1] = 0;
    v19[2] = 0;
    void v19[4] = 0;
    *uint64_t v19 = off_1019BB170;
    void v19[3] = v19 + 4;
    int v21 = v19 + 3;
    v19[5] = 0;
    if (!*((unsigned char *)a2 + 3))
    {
LABEL_43:
      *(void *)long long buf = a1;
      *(void *)&uint8_t buf[8] = v46;
      atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
      char v65 = v7;
      v66[0] = v8 + 3;
      atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
      v66[1] = v8;
      v66[2] = v45;
      v66[3] = v43;
      atomic_fetch_add_explicit(v43 + 1, 1uLL, memory_order_relaxed);
      v66[4] = v44;
      v66[5] = v15;
      atomic_fetch_add_explicit(v15 + 1, 1uLL, memory_order_relaxed);
      v66[6] = v21;
      v66[7] = v20;
      atomic_fetch_add_explicit(v20 + 1, 1uLL, memory_order_relaxed);
      sub_10034B8C0((uint64_t)&v67, v42);
      operator new();
    }
    atomic_fetch_add_explicit(v19 + 1, 1uLL, memory_order_relaxed);
    if (v6)
    {
      dispatch_retain(v6);
      dispatch_group_enter(v6);
    }
    char v69 = 0;
    uint64_t v22 = operator new(0x20uLL);
    void *v22 = off_1019BAF70;
    v22[1] = v21;
    v22[2] = v20;
    void v22[3] = v6;
    char v69 = v22;
    (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
    unint64_t v24 = ServiceMap;
    uint64_t v25 = "30AKRemoteDeviceServiceInterface";
    if (((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x8000000000000000) != 0)
    {
      uint64_t v26 = (unsigned __int8 *)((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v27 = 5381;
      do
      {
        uint64_t v25 = (char *)v27;
        unsigned int v28 = *v26++;
        uint64_t v27 = (33 * v27) ^ v28;
      }
      while (v28);
    }
    std::mutex::lock(ServiceMap);
    long long v73 = (uint8_t *)v25;
    char v29 = sub_10004D37C(&v24[1].__m_.__sig, (unint64_t *)&v73);
    int v41 = v7;
    if (v29)
    {
      int v30 = v21;
      uint64_t v31 = v15;
      uint64_t v32 = v29[3];
      uint64_t v33 = (std::__shared_weak_count *)v29[4];
      if (v33)
      {
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v24);
        atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
        int v40 = v33;
        sub_10004D2C8(v33);
        uint64_t v15 = v31;
        int v21 = v30;
        char v34 = 0;
        goto LABEL_33;
      }
      uint64_t v15 = v31;
      int v21 = v30;
    }
    else
    {
      uint64_t v32 = 0;
    }
    std::mutex::unlock(v24);
    int v40 = 0;
    char v34 = 1;
LABEL_33:
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v32)
    {
      *(void *)long long buf = a1;
      int v36 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v36 || (v37 = *(void *)(a1 + 8), (BOOL v38 = std::__shared_weak_count::lock(v36)) == 0)) {
        sub_100088B9C();
      }
      *(void *)&uint8_t buf[8] = v37;
      char v65 = v38;
      atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v38);
      sub_10034CAE4((uint64_t)v66, (uint64_t)v68);
      char v75 = 0;
      int v39 = (char *)operator new(0x40uLL);
      *(void *)int v39 = off_1019BB080;
      *(_OWORD *)(v39 + 8) = *(_OWORD *)buf;
      *((void *)v39 + 3) = v65;
      *(void *)&uint8_t buf[8] = 0;
      char v65 = 0;
      sub_10034CAE4((uint64_t)(v39 + 32), (uint64_t)v66);
      char v75 = v39;
      (*(void (**)(uint64_t, uint8_t **))(*(void *)v32 + 24))(v32, &v73);
      sub_10034D594(&v73);
      sub_10034B83C(v66);
      uint64_t v7 = v41;
      if (v65) {
        std::__shared_weak_count::__release_weak(v65);
      }
      if (v34) {
        goto LABEL_42;
      }
    }
    else
    {
      *(void *)&uint8_t buf[8] = 0;
      char v65 = 0;
      *(void *)long long buf = &buf[8];
      if (!v69) {
        sub_10007B600();
      }
      uint64_t v7 = v41;
      (*(void (**)(void *, uint8_t *))(*v69 + 48))(v69, buf);
      sub_100313460((uint64_t)buf, *(void **)&buf[8]);
      if (v34) {
        goto LABEL_42;
      }
    }
    sub_10004D2C8(v40);
LABEL_42:
    sub_10034B83C(v68);
    goto LABEL_43;
  }
  int v35 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "invalid cloud sender", buf, 2u);
  }
  memset(buf, 0, sizeof(buf));
  char v65 = 0;
  uint64_t v62 = 0;
  uint64_t v63 = 0;
  uint64_t v60 = 0;
  uint64_t v61 = 0;
  v74[0] = 0;
  v74[1] = 0;
  long long v73 = (uint8_t *)v74;
  sub_1003080C8(*(void *)(a3 + 24), 4);
  sub_100313460((uint64_t)&v73, v74[0]);
  long long v73 = buf;
  sub_1000C5238((void ***)&v73);
}

void sub_1002FDC58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  sub_10034D594((void *)(v48 - 136));
  sub_10030A2EC((uint64_t)&a43);
  if ((v47 & 1) == 0) {
    sub_10004D2C8(a11);
  }
  sub_10034B83C((void *)(v48 - 232));
  sub_1003081C0((uint64_t)&a19);
  sub_10004D2C8(v46);
  sub_10004D2C8(v45);
  sub_10004D2C8(a14);
  sub_10004D2C8(v44);
  sub_10004D2C8(a12);
  if (v43) {
    dispatch_release(v43);
  }
  _Unwind_Resume(a1);
}

void sub_1002FDE24(uint64_t a1)
{
}

uint64_t sub_1002FDE2C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 320))();
}

uint64_t sub_1002FDE5C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 192) + 320))();
}

uint64_t sub_1002FDE8C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 160) + 320))();
}

uint64_t sub_1002FDEBC@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 416);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 168))();
  }
  *a2 = 0;
  a2[1248] = 0;
  return result;
}

uint64_t sub_1002FDEF4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 352);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 168))();
  }
  *a2 = 0;
  a2[1248] = 0;
  return result;
}

uint64_t sub_1002FDF2C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 416);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_1002FDF5C(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 352);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 120))();
  }
  return result;
}

uint64_t sub_1002FDF8C@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 512);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  *a2 = 0;
  a2[56] = 0;
  return result;
}

uint64_t sub_1002FDFC4@<X0>(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  uint64_t result = *(void *)(a1 + 448);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  *a2 = 0;
  a2[56] = 0;
  return result;
}

uint64_t sub_1002FDFFC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 432) + 32))();
}

uint64_t sub_1002FE024(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 368) + 32))();
}

uint64_t sub_1002FE04C(uint64_t a1)
{
  if (*(_DWORD *)(a1 + 2632) == 1)
  {
    uint64_t v1 = *(NSObject **)(a1 + 40);
    BOOL v2 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v2) {
      return result;
    }
    __int16 v8 = 0;
    uint64_t v4 = "#E still in buddy";
    int v5 = (uint8_t *)&v8;
    goto LABEL_8;
  }
  if (*(unsigned char *)(a1 + 2624)) {
    return 1;
  }
  uint64_t v1 = *(NSObject **)(a1 + 40);
  BOOL v6 = os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT);
  uint64_t result = 0;
  if (v6)
  {
    __int16 v7 = 0;
    uint64_t v4 = "#E springboard has not finished startup";
    int v5 = (uint8_t *)&v7;
LABEL_8:
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, v4, v5, 2u);
    return 0;
  }
  return result;
}

void sub_1002FE10C(uint64_t a1, uint64_t a2, const std::string *a3)
{
  BOOL v6 = (unsigned char *)(a1 + 1568);
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  sub_10031EB44((unsigned __int8 *)(a1 + 1568), (uint64_t)__p);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[1]);
  }
  if (!*v6) {
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  }
  *(unsigned char *)(a1 + 1576) = a2;
  std::string::operator=((std::string *)(a1 + 1584), a3);
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), a2);

  sub_1002DC408(a1);
}

void sub_1002FE1E4(uint64_t a1, uint64_t a2, const std::string *a3)
{
}

void sub_1002FE1EC(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, char a5)
{
  if ((sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(a1 + 320)) & 1) == 0)
  {
    uint64_t v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Abort new profile handling, eSIM modification not allowed.", buf, 2u);
    }
    return;
  }
  long long __dst = 0;
  __int16 v115 = 0;
  unint64_t v117 = 0;
  v113 = 0;
  v112 = 0;
  uint64_t v114 = 0;
  uint64_t v10 = *(void *)(a1 + 416);
  uint64_t v11 = *(std::__shared_weak_count **)(a1 + 424);
  if (v11) {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v110 = 0;
  uint64_t v109 = 0;
  uint64_t v111 = 0;
  sub_10030C19C(&v109, *a3, a3[1], 0x6F96F96F96F96F97 * ((a3[1] - *a3) >> 3));
  sub_1002FF3B0((uint64_t *)&v112, v10, v109, v110);
  *(void *)long long buf = &v109;
  sub_1000C63B8((void ***)buf);
  if (v11) {
    sub_10004D2C8(v11);
  }
  if (*(_DWORD *)(a1 + 2632) == 1)
  {
    for (uint64_t i = v112; ; i += 320)
    {
      if (i == v113)
      {
        uint64_t v15 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I In buddy, skipping new profile handling", buf, 2u);
        }
        goto LABEL_205;
      }
      if (*i) {
        break;
      }
    }
  }
  if (a2) {
    int v14 = sub_1002DDBDC(a1);
  }
  else {
    int v14 = 0;
  }
  v137[0] = 0;
  v137[1] = 0;
  char v138 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 304) + 352))(v137);
  if (v14 && *a3 != a3[1])
  {
    (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
    uint64_t v17 = ServiceMap;
    if (v18 < 0)
    {
      uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        uint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&long long v118 = v18;
    uint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)&v118);
    if (v22)
    {
      uint64_t v24 = v22[3];
      char v23 = (std::__shared_weak_count *)v22[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v23);
        char v25 = 0;
LABEL_28:
        if (v133) {
          sub_10004D2C8(v133);
        }
        if (v24) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v24 + 24))(v24, 3);
        }
        if ((v25 & 1) == 0) {
          sub_10004D2C8(v23);
        }
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    std::mutex::unlock(v17);
    char v23 = 0;
    char v25 = 1;
    goto LABEL_28;
  }
LABEL_34:
  char v90 = a5;
  uint64_t v26 = (uint64_t)v112;
  uint64_t v93 = v113;
  if (v112 != v113)
  {
    uint64_t v92 = a1 + 1792;
    char v91 = v14 | a5;
    while (1)
    {
      std::locale::locale((std::locale *)buf);
      std::locale::locale((std::locale *)&v118, (const std::locale *)buf);
      int v27 = *(char *)(v26 + 127);
      uint64_t v28 = v27 >= 0 ? v26 + 104 : *(void *)(v26 + 104);
      uint64_t v29 = v27 >= 0 ? *(unsigned __int8 *)(v26 + 127) : *(void *)(v26 + 112);
      if (v29)
      {
        uint64_t v30 = v29 - 1;
        if ((unint64_t)(v29 - 1) >= 3) {
          uint64_t v30 = 3;
        }
        uint64_t v31 = v30 + 1;
        uint64_t v32 = "5001";
        uint64_t v33 = (char *)v28;
        while (sub_100326220((const std::locale *)&v118, v33, v32))
        {
          ++v33;
          ++v32;
          if (!--v31) {
            goto LABEL_50;
          }
        }
        std::locale::~locale((std::locale *)&v118);
        std::locale::~locale((std::locale *)buf);
      }
      else
      {
        uint64_t v33 = (char *)v28;
        uint64_t v32 = "5001";
LABEL_50:
        std::locale::~locale((std::locale *)&v118);
        std::locale::~locale((std::locale *)buf);
        if (v33 == (char *)(v28 + v29) && v32 == "")
        {
          (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
          int v35 = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
          int v36 = v35;
          if (v37 < 0)
          {
            BOOL v38 = (unsigned __int8 *)(v37 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v39 = 5381;
            do
            {
              uint64_t v37 = v39;
              unsigned int v40 = *v38++;
              uint64_t v39 = (33 * v39) ^ v40;
            }
            while (v40);
          }
          std::mutex::lock(v35);
          *(void *)&long long v118 = v37;
          int v41 = sub_10004D37C(&v36[1].__m_.__sig, (unint64_t *)&v118);
          if (v41)
          {
            uint64_t v42 = v41[3];
            uint64_t v43 = (std::__shared_weak_count *)v41[4];
            if (v43)
            {
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v36);
              atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v43);
              char v44 = 0;
LABEL_78:
              if (v133) {
                sub_10004D2C8(v133);
              }
              if (v42)
              {
                *(void *)long long buf = 0;
                (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v42 + 72))(buf, v42, v26 + 8);
                long long v108 = *(Registry **)buf;
                if (*(void *)buf) {
                  CFRetain(*(CFTypeRef *)buf);
                }
                sub_1002FF580(a1, (CFDictionaryRef *)&v108, 1, 0);
                sub_100057D78((const void **)&v108);
                sub_100057D78((const void **)buf);
              }
              if ((v44 & 1) == 0) {
                sub_10004D2C8(v43);
              }
              goto LABEL_151;
            }
          }
          else
          {
            uint64_t v42 = 0;
          }
          std::mutex::unlock(v36);
          uint64_t v43 = 0;
          char v44 = 1;
          goto LABEL_78;
        }
      }
      bzero(buf, 0x4E8uLL);
      uint64_t v45 = *(void *)(a1 + 416);
      uint64_t v46 = *(std::__shared_weak_count **)(a1 + 424);
      if (v46) {
        atomic_fetch_add_explicit(&v46->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v45) {
        break;
      }
      buf[0] = 0;
      char v136 = 0;
      if (v46) {
        goto LABEL_66;
      }
LABEL_67:
      if (!v136) {
        goto LABEL_107;
      }
      if (buf[0] != 7)
      {
        if (!v134) {
          goto LABEL_105;
        }
        LODWORD(v118) = *(_DWORD *)(a1 + 580);
        WORD2(v118) = 787;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        *((void *)&v118 + 1) = 0;
        char v121 = 4;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        int v128 = 0;
        uint64_t v130 = 0;
        memset(v131, 0, 11);
        long long __p = 0;
        goto LABEL_90;
      }
      if (!*(unsigned char *)(a1 + 1968))
      {
        BOOL v48 = *(_DWORD *)(a1 + 2632) == 1;
        if (*(_DWORD *)(a1 + 2632) == 1) {
          char v49 = 17;
        }
        else {
          char v49 = 18;
        }
        LODWORD(v118) = *(_DWORD *)(a1 + 580);
        BYTE4(v118) = v49;
        BYTE5(v118) = 3;
        uint64_t v119 = 0;
        uint64_t v120 = 0;
        *((void *)&v118 + 1) = 0;
        char v121 = 4;
        long long v122 = 0u;
        long long v123 = 0u;
        long long v124 = 0u;
        long long v125 = 0u;
        long long v126 = 0u;
        long long v127 = 0u;
        int v128 = 0;
        uint64_t v130 = 0;
        v131[0] = 0;
        long long __p = 0;
        LOBYTE(v131[1]) = 0;
        *(_WORD *)((char *)&v131[1] + 1) = v48;
LABEL_90:
        sub_1002E4C70(a4, (uint64_t)&v118);
        if (SHIBYTE(v131[0]) < 0) {
          operator delete(__p);
        }
        if (SHIBYTE(v127) < 0) {
          operator delete(*((void **)&v126 + 1));
        }
        if (SBYTE7(v126) < 0) {
          operator delete((void *)v125);
        }
        if (SHIBYTE(v124) < 0) {
          operator delete(*((void **)&v123 + 1));
        }
        if (SBYTE7(v123) < 0) {
          operator delete((void *)v122);
        }
        if (SHIBYTE(v120) < 0) {
          operator delete(*((void **)&v118 + 1));
        }
LABEL_104:
        std::string::operator=((std::string *)(a4 + 144), v135);
        goto LABEL_105;
      }
      sub_10030C024(a4, v92);
      sub_10030C110(v92);
      if (*(char *)(a4 + 167) < 0) {
        uint64_t v47 = *(void *)(a4 + 152);
      }
      else {
        uint64_t v47 = *(unsigned __int8 *)(a4 + 167);
      }
      if (!v47) {
        goto LABEL_104;
      }
LABEL_105:
      if (v136) {
        sub_10030D10C((uint64_t)buf);
      }
LABEL_107:
      int v50 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
      {
        int v51 = *(unsigned __int8 *)(a4 + 176);
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = v51;
        _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I Have updated AWD info: %{BOOL}d", buf, 8u);
      }
      if (*(unsigned char *)(v26 + 128)) {
        goto LABEL_115;
      }
      char v52 = v91;
      if (*(unsigned char *)v26) {
        char v52 = 0;
      }
      if ((v52 & 1) == 0)
      {
LABEL_115:
        char v133 = 0;
        *(void *)long long buf = 0;
        sub_100324590(buf);
        std::string::operator=(*(std::string **)buf, (const std::string *)(v26 + 8));
        unint64_t v53 = std::string::operator=((std::string *)(*(void *)buf + 48), (const std::string *)(v26 + 32));
        if (!*(unsigned char *)(v26 + 128)) {
          goto LABEL_120;
        }
        int ProvisioningProfileSupport = capabilities::ct::getProvisioningProfileSupport((capabilities::ct *)v53);
        *(unsigned char *)(*(void *)buf + 124) = ProvisioningProfileSupport == 1;
        if (ProvisioningProfileSupport == 1
          && (*(unsigned int (**)(void))(**(void **)(a1 + 496) + 72))(*(void *)(a1 + 496)))
        {
          long long v55 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(v118) = 0;
            _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#E blocking provisioning profiles", (uint8_t *)&v118, 2u);
          }
LABEL_120:
          *(unsigned char *)(*(void *)buf + 124) = 0;
        }
        if (!*(unsigned char *)(v26 + 312)) {
          goto LABEL_131;
        }
        char v56 = *(unsigned char *)(v26 + 159);
        if (v56 < 0)
        {
          if (!*(void *)(v26 + 144)) {
            goto LABEL_131;
          }
LABEL_124:
          long long v57 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v58 = v26 + 136;
            if (v56 < 0) {
              uint64_t v58 = *(void *)(v26 + 136);
            }
            LODWORD(v118) = 136315138;
            *(void *)((char *)&v118 + 4) = v58;
            _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#I Recieved ICCID (%s) for ALS plan", (uint8_t *)&v118, 0xCu);
          }
          uint64_t v59 = *(Registry **)buf;
          uint64_t v60 = (uint64_t *)(*(void *)buf + 96);
          unint64_t v61 = *(void *)(*(void *)buf + 104);
          if (v61 >= *(void *)(*(void *)buf + 112))
          {
            uint64_t v62 = sub_10030E9EC(v60, (long long *)(v26 + 136));
          }
          else
          {
            sub_1000D87F8(v60, (long long *)(v26 + 136));
            uint64_t v62 = v61 + 24;
          }
          *((void *)v59 + 13) = v62;
        }
        else
        {
          if (*(unsigned char *)(v26 + 159)) {
            goto LABEL_124;
          }
LABEL_131:
          uint64_t v63 = *(Registry **)buf;
          unint64_t v64 = *(void *)(*(void *)buf + 104);
          if (v64 >= *(void *)(*(void *)buf + 112))
          {
            uint64_t v65 = sub_10030B97C((uint64_t *)(*(void *)buf + 96));
          }
          else
          {
            sub_100058DB0(*(void **)(*(void *)buf + 104), "89");
            uint64_t v65 = v64 + 24;
            *((void *)v63 + 13) = v64 + 24;
          }
          *((void *)v63 + 13) = v65;
        }
        if (*(unsigned char *)(v26 + 312)) {
          std::string::operator=((std::string *)(*(void *)buf + 136), (const std::string *)(v26 + 160));
        }
        *(unsigned char *)(a1 + 584) = *(unsigned char *)(v26 + 128);
        uint64_t v66 = *(void *)(a1 + 680);
        if (v66)
        {
          uint64_t v106 = *(Registry **)buf;
          v107 = v133;
          if (v133) {
            atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_10030BBA0(v105, a4);
          (*(void (**)(uint64_t, Registry **, unsigned char *))(*(void *)v66 + 192))(v66, &v106, v105);
          sub_10030AEBC((uint64_t)v105);
          uint64_t v67 = v107;
          if (v107) {
            goto LABEL_143;
          }
        }
        else
        {
          if (*(char *)(a1 + 615) < 0)
          {
            **(unsigned char **)(a1 + 592) = 0;
            *(void *)(a1 + 600) = 0;
          }
          else
          {
            *(unsigned char *)(a1 + 592) = 0;
            *(unsigned char *)(a1 + 615) = 0;
          }
          if (sub_1002DF3BC(a1, 1))
          {
            __int16 v88 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            LOWORD(v118) = 0;
            v89 = "#E Cannot enqueue install params";
            goto LABEL_202;
          }
          if (!v138)
          {
            __int16 v88 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            LOWORD(v118) = 0;
            v89 = "#E CSN unavailable";
            goto LABEL_202;
          }
          if (!sub_1002E3B1C(a1, 0))
          {
            __int16 v88 = *(NSObject **)(a1 + 40);
            if (!os_log_type_enabled(v88, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_203;
            }
            LOWORD(v118) = 0;
            v89 = "#E Cannot create provisioning operation";
LABEL_202:
            _os_log_impl((void *)&_mh_execute_header, v88, OS_LOG_TYPE_DEFAULT, v89, (uint8_t *)&v118, 2u);
LABEL_203:
            if (v133) {
              sub_10004D2C8(v133);
            }
            goto LABEL_205;
          }
          uint64_t v71 = *(void *)(a1 + 680);
          uint64_t v103 = *(Registry **)buf;
          uint64_t v104 = v133;
          if (v133) {
            atomic_fetch_add_explicit(&v133->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_10030BBA0(v102, a4);
          (*(void (**)(uint64_t, void *, Registry **, void, unsigned char *))(*(void *)v71 + 32))(v71, v137, &v103, 0, v102);
          sub_10030AEBC((uint64_t)v102);
          uint64_t v67 = v104;
          if (v104) {
LABEL_143:
          }
            sub_10004D2C8(v67);
        }
        uint64_t v68 = v133;
        if (v133) {
          goto LABEL_145;
        }
        goto LABEL_146;
      }
      if (!*(void *)(a1 + 680))
      {
        uint64_t v72 = *(void *)(a1 + 384);
        if (!v72 || ((*(uint64_t (**)(uint64_t))(*(void *)v72 + 176))(v72) & 1) == 0)
        {
          uint64_t v73 = *(void *)(a1 + 528);
          if (!v73 || !(*(unsigned int (**)(uint64_t))(*(void *)v73 + 112))(v73))
          {
            (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
            uint64_t v74 = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
            char v75 = v74;
            if (v76 < 0)
            {
              uint64_t v77 = (unsigned __int8 *)(v76 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v78 = 5381;
              do
              {
                uint64_t v76 = v78;
                unsigned int v79 = *v77++;
                uint64_t v78 = (33 * v78) ^ v79;
              }
              while (v79);
            }
            std::mutex::lock(v74);
            *(void *)&long long v118 = v76;
            uint64_t v80 = sub_10004D37C(&v75[1].__m_.__sig, (unint64_t *)&v118);
            if (v80)
            {
              uint64_t v81 = v80[3];
              v82 = (std::__shared_weak_count *)v80[4];
              if (v82)
              {
                atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
                std::mutex::unlock(v75);
                atomic_fetch_add_explicit(&v82->__shared_owners_, 1uLL, memory_order_relaxed);
                sub_10004D2C8(v82);
                char v83 = 0;
LABEL_175:
                if (v133) {
                  sub_10004D2C8(v133);
                }
                if (v81 && (v90 & 1) == 0)
                {
                  *(void *)long long buf = 0;
                  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v81 + 72))(buf, v81, v26 + 8);
                  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)v81 + 16))(v81, 3, *(void *)buf, 0);
                  char v84 = (char *)__dst;
                  if ((unint64_t)__dst >= v117)
                  {
                    int v85 = (void *)sub_10030F5E8((uint64_t *)&v115, (long long *)(v26 + 8));
                  }
                  else
                  {
                    sub_10030C34C((char *)__dst, (long long *)(v26 + 8));
                    int v85 = v84 + 312;
                  }
                  long long __dst = v85;
                  sub_100057D78((const void **)buf);
                }
                if (v83) {
                  goto LABEL_146;
                }
                uint64_t v68 = v82;
LABEL_145:
                sub_10004D2C8(v68);
                goto LABEL_146;
              }
            }
            else
            {
              uint64_t v81 = 0;
            }
            std::mutex::unlock(v75);
            v82 = 0;
            char v83 = 1;
            goto LABEL_175;
          }
        }
      }
      *(unsigned char *)(a1 + 587) = 1;
LABEL_146:
      uint64_t v69 = *(void *)(a1 + 680);
      if (v69)
      {
        if (v138)
        {
          unsigned int v70 = LOBYTE(v137[0]) - 89;
          if (v70 > 8 || ((1 << v70) & 0x181) == 0)
          {
            sub_10030BBA0(v101, a4);
            (*(void (**)(uint64_t, void *, unsigned char *))(*(void *)v69 + 144))(v69, v137, v101);
            sub_10030AEBC((uint64_t)v101);
          }
        }
      }
LABEL_151:
      v26 += 320;
      if ((unsigned char *)v26 == v93) {
        goto LABEL_185;
      }
    }
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v45 + 168))(buf);
    if (!v46) {
      goto LABEL_67;
    }
LABEL_66:
    sub_10004D2C8(v46);
    goto LABEL_67;
  }
LABEL_185:
  if (v115 != __dst)
  {
    char v133 = 0;
    *(void *)long long buf = 0;
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v99);
    Registry::getNotificationSenderFactory((uint64_t *)&v118, v99);
    uint64_t v86 = v118;
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v95);
    Registry::getTimerService(&v97, v95);
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(void *)v86 + 160))(buf, v86, &v97, a1 + 24);
    if (v98) {
      sub_10004D2C8(v98);
    }
    if (v96) {
      sub_10004D2C8(v96);
    }
    if (*((void *)&v118 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v118 + 1));
    }
    if (v100) {
      sub_10004D2C8(v100);
    }
    BOOL v87 = *(Registry **)buf;
    if (*(void *)buf)
    {
      sub_100A9F534(&v115, &v94);
      (*(void (**)(Registry *, const void **))(*(void *)v87 + 48))(v87, &v94);
      sub_100044D00(&v94);
    }
    goto LABEL_203;
  }
LABEL_205:
  *(void *)long long buf = &v112;
  sub_10030F8E0((void ***)buf);
  *(void *)long long buf = &v115;
  sub_1000C63B8((void ***)buf);
}

void sub_1002FF19C(_Unwind_Exception *a1)
{
  STACK[0x330] = v1;
  sub_100057D78((const void **)&STACK[0x3F0]);
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  STACK[0x3F0] = (unint64_t)&STACK[0x310];
  sub_10030F8E0((void ***)&STACK[0x3F0]);
  STACK[0x3F0] = (unint64_t)&STACK[0x328];
  sub_1000C63B8((void ***)&STACK[0x3F0]);
  _Unwind_Resume(a1);
}

void sub_1002FF3B0(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  if (a2)
  {
    memset(v14, 0, sizeof(v14));
    sub_10030C19C(v14, a3, a4, 0x6F96F96F96F96F97 * ((a4 - a3) >> 3));
    (*(void (**)(uint64_t, void *))(*(void *)a2 + 192))(a2, v14);
    uint64_t v15 = (void **)v14;
    sub_1000C63B8(&v15);
  }
  else
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    if (a3 != a4)
    {
      unint64_t v8 = 0;
      do
      {
        LOBYTE(v15) = 0;
        if (v8 >= a1[2])
        {
          unint64_t v8 = sub_10030F098(a1, (char *)&v15, (long long *)v5);
        }
        else
        {
          *(unsigned char *)unint64_t v8 = 0;
          long long v9 = *(_OWORD *)v5;
          *(void *)(v8 + 24) = *(void *)(v5 + 16);
          *(_OWORD *)(v8 + 8) = v9;
          *(void *)(v5 + 8) = 0;
          *(void *)(v5 + 16) = 0;
          *(void *)uint64_t v5 = 0;
          long long v10 = *(_OWORD *)(v5 + 24);
          *(void *)(v8 + 48) = *(void *)(v5 + 40);
          *(_OWORD *)(v8 + 32) = v10;
          *(void *)(v5 + 32) = 0;
          *(void *)(v5 + 40) = 0;
          *(void *)(v5 + 24) = 0;
          long long v11 = *(_OWORD *)(v5 + 48);
          *(void *)(v8 + 72) = *(void *)(v5 + 64);
          *(_OWORD *)(v8 + 56) = v11;
          *(void *)(v5 + 56) = 0;
          *(void *)(v5 + 64) = 0;
          *(void *)(v5 + 48) = 0;
          long long v12 = *(_OWORD *)(v5 + 72);
          *(void *)(v8 + 96) = *(void *)(v5 + 88);
          *(_OWORD *)(v8 + 80) = v12;
          *(void *)(v5 + 72) = 0;
          *(void *)(v5 + 80) = 0;
          *(void *)(v5 + 88) = 0;
          long long v13 = *(_OWORD *)(v5 + 96);
          *(void *)(v8 + 120) = *(void *)(v5 + 112);
          *(_OWORD *)(v8 + 104) = v13;
          *(void *)(v5 + 96) = 0;
          *(void *)(v5 + 104) = 0;
          *(void *)(v5 + 112) = 0;
          *(_WORD *)(v8 + 128) = *(_WORD *)(v5 + 120);
          sub_10030F228((unsigned char *)(v8 + 136), (long long *)(v5 + 128));
          v8 += 320;
          a1[1] = v8;
        }
        a1[1] = v8;
        v5 += 312;
      }
      while (v5 != a4);
    }
  }
}

void sub_1002FF554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_1000C63B8((void ***)va);
  _Unwind_Resume(a1);
}

void sub_1002FF580(uint64_t a1, CFDictionaryRef *a2, int a3, int a4)
{
  if (*a2) {
    uint64_t v5 = sub_100080778;
  }
  else {
    uint64_t v5 = 0;
  }
  if (v5)
  {
    Value = CFDictionaryGetValue(*a2, @"IccidHash");
    if (Value && (v10 = Value, CFTypeID v11 = CFGetTypeID(Value), v11 == CFStringGetTypeID()))
    {
      uint64_t v29 = v10;
      CFRetain(v10);
      long long v12 = v10;
    }
    else
    {
      long long v12 = 0;
      uint64_t v29 = 0;
    }
    if (v12) {
      long long v13 = sub_1000810B8;
    }
    else {
      long long v13 = 0;
    }
    if (!v13)
    {
      char v25 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, "No Iccid Hash for update esim", buf, 2u);
      }
      goto LABEL_39;
    }
    *(void *)long long buf = 0;
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    ctu::cf::assign();
    (***(void (****)(uint8_t *__return_ptr))(a1 + 320))(buf);
    ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
    uint64_t v15 = ServiceMap;
    if (v16 < 0)
    {
      uint64_t v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v18 = 5381;
      do
      {
        uint64_t v16 = v18;
        unsigned int v19 = *v17++;
        uint64_t v18 = (33 * v18) ^ v19;
      }
      while (v19);
    }
    std::mutex::lock(ServiceMap);
    CFMutableDictionaryRef theDict = (CFMutableDictionaryRef)v16;
    uint64_t v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)&theDict);
    if (v20)
    {
      uint64_t v22 = v20[3];
      unsigned int v21 = (std::__shared_weak_count *)v20[4];
      if (v21)
      {
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v15);
        atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v21);
        char v23 = 0;
LABEL_25:
        if (v31) {
          sub_10004D2C8(v31);
        }
        if (v22)
        {
          (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, const void *))(*(void *)v22 + 96))(buf, v22, 8, v29);
          if (((*(uint64_t (**)(uint64_t, uint64_t, void))(*(void *)v22 + 56))(v22, 8, *(void *)buf) & 1) == 0)
          {
            MutableCopy = CFDictionaryCreateMutableCopy(0, 0, *a2);
            CFMutableDictionaryRef theDict = MutableCopy;
            if (a4) {
              CFBooleanRef v27 = kCFBooleanTrue;
            }
            else {
              CFBooleanRef v27 = kCFBooleanFalse;
            }
            CFDictionarySetValue(MutableCopy, @"isLastDay", v27);
            if (a3) {
              CFBooleanRef v28 = kCFBooleanTrue;
            }
            else {
              CFBooleanRef v28 = kCFBooleanFalse;
            }
            CFDictionarySetValue(theDict, @"isFirstDay", v28);
            CFDictionarySetValue(theDict, @"Cancel", kCFBooleanFalse);
            (*(void (**)(uint64_t, uint64_t, CFMutableDictionaryRef, void))(*(void *)v22 + 16))(v22, 8, theDict, *(void *)buf);
            sub_10005717C((const void **)&theDict);
          }
          sub_1000558F4((const void **)buf);
        }
        if ((v23 & 1) == 0) {
          sub_10004D2C8(v21);
        }
LABEL_39:
        sub_1000558F4(&v29);
        return;
      }
    }
    else
    {
      uint64_t v22 = 0;
    }
    std::mutex::unlock(v15);
    unsigned int v21 = 0;
    char v23 = 1;
    goto LABEL_25;
  }
  uint64_t v24 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v24, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "No userInfo for update esim", buf, 2u);
  }
}

void sub_1002FF8F8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  __int16 v7 = va_arg(va1, const void *);
  sub_1000558F4((const void **)va1);
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  if (v5 < 0) {
    operator delete(v2);
  }
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

void sub_1002FF97C(uint64_t a1, int a2, uint64_t *a3, uint64_t a4, char a5)
{
}

uint64_t sub_1002FF98C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 304);
  memset(v5, 0, sizeof(v5));
  sub_10030F964(v5, *a2, a2[1], 0x8F5C28F5C28F5C29 * ((a2[1] - *a2) >> 3));
  (*(void (**)(uint64_t, void *))(*(void *)v3 + 200))(v3, v5);
  BOOL v6 = (void **)v5;
  sub_100310018(&v6);
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
}

void sub_1002FFA5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100310018((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1002FFA74(uint64_t a1, uint64_t *a2)
{
  return sub_1002FF98C(a1 - 72, a2);
}

void sub_1002FFA7C(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
  uint64_t v87 = 0;
  uint64_t v88 = 0;
  char v89 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 352))(&v87);
  if (!v89)
  {
    int v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E Cannot find CSN", buf, 2u);
    }
    v76[0] = 2;
    LOBYTE(v77) = 12;
    uint64_t v15 = *(void *)(a6 + 24);
    if (!v15) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v15 + 48))(v15, v76);
    if (v76[0] != 1) {
      return;
    }
    uint64_t v16 = v77;
    if (!v77) {
      return;
    }
    uint64_t v78 = v77;
LABEL_169:
    operator delete(v16);
    return;
  }
  uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a3 + 8);
  }
  if (!v12)
  {
    uint64_t v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#E Missing session id", buf, 2u);
    }
    v73[0] = 2;
    LOBYTE(v74) = 1;
    uint64_t v18 = *(void *)(a6 + 24);
    if (!v18) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v18 + 48))(v18, v73);
    if (v73[0] != 1) {
      return;
    }
    uint64_t v16 = v74;
    if (!v74) {
      return;
    }
    char v75 = v74;
    goto LABEL_169;
  }
  unsigned int v70 = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v69 = 0;
  memset(v68, 0, sizeof(v68));
  sub_10031009C(buf, "kSessionId", (long long *)a3);
  sub_100343A10((uint64_t)v68, buf, 1);
  if (v86 < 0) {
    operator delete((void *)v85.__r_.__value_.__r.__words[2]);
  }
  if (v85.__r_.__value_.__s.__data_[15] < 0) {
    operator delete(*(void **)buf);
  }
  if (*(char *)(a4 + 23) < 0)
  {
    unint64_t v19 = *(void *)(a4 + 8);
    if (!v19) {
      goto LABEL_28;
    }
    *(void *)long long buf = "kTokenID";
    sub_10004FC84(&v85, *(void **)a4, v19);
  }
  else
  {
    if (!*(unsigned char *)(a4 + 23)) {
      goto LABEL_28;
    }
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *(_OWORD *)a4;
    std::string::size_type v13 = *(void *)(a4 + 16);
    *(void *)long long buf = "kTokenID";
    v85.__r_.__value_.__r.__words[2] = v13;
  }
  sub_100343E74(v68, (uint64_t)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
LABEL_28:
  uint64_t v20 = *(void *)(a1 + 2328);
  if (v20)
  {
    unsigned int v21 = (uint64_t *)(a1 + 2328);
    uint64_t v22 = a1 + 2328;
    uint64_t v23 = *(void *)(a1 + 2328);
    do
    {
      int v24 = *(_DWORD *)(v23 + 32);
      BOOL v25 = v24 < 1;
      if (v24 >= 1) {
        uint64_t v26 = (uint64_t *)v23;
      }
      else {
        uint64_t v26 = (uint64_t *)(v23 + 8);
      }
      if (!v25) {
        uint64_t v22 = v23;
      }
      uint64_t v23 = *v26;
    }
    while (*v26);
    if ((uint64_t *)v22 != v21 && *(int *)(v22 + 32) <= 1)
    {
      *(void *)long long buf = "kIMEI";
      if (*(char *)(v22 + 63) < 0) {
        sub_10004FC84(&v85, *(void **)(v22 + 40), *(void *)(v22 + 48));
      }
      else {
        std::string v85 = *(std::string *)(v22 + 40);
      }
      sub_100343E74(v68, (uint64_t)buf);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      uint64_t v20 = *v21;
    }
    if (v20)
    {
      uint64_t v27 = a1 + 2328;
      do
      {
        int v28 = *(_DWORD *)(v20 + 32);
        BOOL v29 = v28 < 2;
        if (v28 >= 2) {
          uint64_t v30 = (uint64_t *)v20;
        }
        else {
          uint64_t v30 = (uint64_t *)(v20 + 8);
        }
        if (!v29) {
          uint64_t v27 = v20;
        }
        uint64_t v20 = *v30;
      }
      while (*v30);
      if ((uint64_t *)v27 != v21
        && *(int *)(v27 + 32) <= 2
        && (*(unsigned int (**)(void))(**(void **)(a1 + 320) + 112))(*(void *)(a1 + 320)))
      {
        *(void *)long long buf = "kIMEI2";
        if (*(char *)(v27 + 63) < 0) {
          sub_10004FC84(&v85, *(void **)(v27 + 40), *(void *)(v27 + 48));
        }
        else {
          std::string v85 = *(std::string *)(v27 + 40);
        }
        sub_100343E74(v68, (uint64_t)buf);
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
      }
    }
  }
  if (*(unsigned char *)(a1 + 2368))
  {
    uint64_t v31 = (void **)(a1 + 2344);
    if (*(char *)(a1 + 2367) < 0)
    {
      unint64_t v33 = *(void *)(a1 + 2352);
      if (!v33) {
        goto LABEL_67;
      }
      *(void *)long long buf = "kMEID";
      sub_10004FC84(&v85, *v31, v33);
    }
    else
    {
      if (!*(unsigned char *)(a1 + 2367)) {
        goto LABEL_67;
      }
      *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *(_OWORD *)v31;
      std::string::size_type v32 = *(void *)(a1 + 2360);
      *(void *)long long buf = "kMEID";
      v85.__r_.__value_.__r.__words[2] = v32;
    }
    sub_100343E74(v68, (uint64_t)buf);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(v85.__r_.__value_.__l.__data_);
      if (!a2) {
        goto LABEL_81;
      }
      goto LABEL_68;
    }
  }
LABEL_67:
  if (!a2) {
    goto LABEL_81;
  }
LABEL_68:
  memset(&v82, 0, sizeof(v82));
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 320) + 856))(&v82);
  if (v82.__r_.__value_.__s.__data_[0])
  {
    std::to_string(&v67, *(double *)&v82.__r_.__value_.__l.__size_);
    std::string v85 = v67;
    *(void *)long long buf = "kLatitude";
    memset(&v67, 0, sizeof(v67));
    sub_100343E74(v68, (uint64_t)buf);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
    if (!v82.__r_.__value_.__s.__data_[0]) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    std::to_string(&v67, *(double *)&v82.__r_.__value_.__r.__words[2]);
    std::string v85 = v67;
    *(void *)long long buf = "kLongitude";
    memset(&v67, 0, sizeof(v67));
    sub_100343E74(v68, (uint64_t)buf);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v67.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    char v34 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#E Latitude/Longitude not valid, skipping", buf, 2u);
    }
  }
LABEL_81:
  memset(&v67, 0, sizeof(v67));
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 416) + 264))(&v67);
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v67.__r_.__value_.__l.__size_) {
      goto LABEL_88;
    }
    *(void *)long long buf = "kTransferPlanList";
    sub_10004FC84(&v85, v67.__r_.__value_.__l.__data_, v67.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&v67.__r_.__value_.__s + 23)) {
      goto LABEL_88;
    }
    std::string v85 = v67;
    *(void *)long long buf = "kTransferPlanList";
  }
  sub_100343E74(v68, (uint64_t)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
LABEL_88:
  sub_1002D3F44(a1);
  uint64_t v35 = *(void *)(a1 + 5368);
  *(void *)long long buf = "kProductType";
  if (*(char *)(v35 + 71) < 0) {
    sub_10004FC84(&v85, *(void **)(v35 + 48), *(void *)(v35 + 56));
  }
  else {
    std::string v85 = *(std::string *)(v35 + 48);
  }
  sub_100343E74(v68, (uint64_t)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  uint64_t v36 = *(void *)(a1 + 5368);
  *(void *)long long buf = "kOSVersion";
  if (*(char *)(v36 + 95) < 0) {
    sub_10004FC84(&v85, *(void **)(v36 + 72), *(void *)(v36 + 80));
  }
  else {
    std::string v85 = *(std::string *)(v36 + 72);
  }
  sub_100343E74(v68, (uint64_t)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  uint64_t v37 = *(void *)(a1 + 5368);
  BOOL v38 = (void **)(v37 + 96);
  if (*(char *)(v37 + 119) < 0)
  {
    unint64_t v40 = *(void *)(v37 + 104);
    if (v40)
    {
      *(void *)long long buf = "kSerialNumber";
      sub_10004FC84(&v85, *v38, v40);
LABEL_103:
      sub_100343E74(v68, (uint64_t)buf);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      goto LABEL_107;
    }
  }
  else if (*(unsigned char *)(v37 + 119))
  {
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *(_OWORD *)v38;
    std::string::size_type v39 = *(void *)(v37 + 112);
    *(void *)long long buf = "kSerialNumber";
    v85.__r_.__value_.__r.__words[2] = v39;
    goto LABEL_103;
  }
  int v41 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#E Serial Number not valid, skipping", buf, 2u);
  }
LABEL_107:
  uint64_t v42 = *(void *)(a1 + 5368);
  uint64_t v43 = (void **)(v42 + 120);
  if (*(char *)(v42 + 143) < 0)
  {
    unint64_t v45 = *(void *)(v42 + 128);
    if (v45)
    {
      *(void *)long long buf = "kUDID";
      sub_10004FC84(&v85, *v43, v45);
LABEL_112:
      sub_100343E74(v68, (uint64_t)buf);
      if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v85.__r_.__value_.__l.__data_);
      }
      goto LABEL_116;
    }
  }
  else if (*(unsigned char *)(v42 + 143))
  {
    *(_OWORD *)&v85.__r_.__value_.__l.__data_ = *(_OWORD *)v43;
    std::string::size_type v44 = *(void *)(v42 + 136);
    *(void *)long long buf = "kUDID";
    v85.__r_.__value_.__r.__words[2] = v44;
    goto LABEL_112;
  }
  uint64_t v46 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#E UDID not valid, skipping", buf, 2u);
  }
LABEL_116:
  MCCAndMNC::getMcc((uint64_t *)buf, (MCCAndMNC *)(a1 + 2376));
  if (MCC::valid((MCC *)buf))
  {
    MCCAndMNC::getMnc((uint64_t *)&v82, (MCCAndMNC *)(a1 + 2376));
    int v47 = MCC::valid((MCC *)&v82);
    if (v83 < 0) {
      operator delete((void *)v82.__r_.__value_.__l.__size_);
    }
  }
  else
  {
    int v47 = 0;
  }
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v85.__r_.__value_.__l.__data_);
    if (v47) {
      goto LABEL_122;
    }
  }
  else if (v47)
  {
LABEL_122:
    MCCAndMNC::getMcc((uint64_t *)&v82, (MCCAndMNC *)(a1 + 2376));
    MCC::getStringValue((uint64_t *)&__p, (MCC *)&v82);
    std::string v85 = __p;
    *(void *)long long buf = "kMCC";
    memset(&__p, 0, sizeof(__p));
    sub_100343E74(v68, (uint64_t)buf);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v83 < 0) {
      operator delete((void *)v82.__r_.__value_.__l.__size_);
    }
    MCCAndMNC::getMnc((uint64_t *)&v82, (MCCAndMNC *)(a1 + 2376));
    MCC::getStringValue((uint64_t *)&__p, (MCC *)&v82);
    std::string v85 = __p;
    *(void *)long long buf = "kMNC";
    memset(&__p, 0, sizeof(__p));
    sub_100343E74(v68, (uint64_t)buf);
    if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v85.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v83 < 0) {
      operator delete((void *)v82.__r_.__value_.__l.__size_);
    }
    goto LABEL_137;
  }
  BOOL v48 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#E MCC/MNC not valid, skipping", buf, 2u);
  }
LABEL_137:
  if (!a5) {
    goto LABEL_147;
  }
  memset(&v82, 0, sizeof(v82));
  (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 336) + 216))(&v82);
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0)
  {
    if (!v82.__r_.__value_.__l.__size_)
    {
LABEL_146:
      operator delete(v82.__r_.__value_.__l.__data_);
      goto LABEL_147;
    }
    *(void *)long long buf = "kEventStatusList";
    sub_10004FC84(&v85, v82.__r_.__value_.__l.__data_, v82.__r_.__value_.__l.__size_);
  }
  else
  {
    if (!*((unsigned char *)&v82.__r_.__value_.__s + 23)) {
      goto LABEL_147;
    }
    std::string v85 = v82;
    *(void *)long long buf = "kEventStatusList";
  }
  sub_100343E74(v68, (uint64_t)buf);
  if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v85.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_146;
  }
LABEL_147:
  if ((*(uint64_t (**)(void, _OWORD *, void **))(**(void **)(a1 + 224) + 16))(*(void *)(a1 + 224), v68, &v70))
  {
    unsigned int v49 = v87 - 89;
    if (v49 <= 8 && ((1 << v49) & 0x181) != 0) {
      sub_1003EFCCC(&v70, (uint64_t)&v70);
    }
    int v50 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v50 || (v51 = *(void *)(a1 + 8), (char v52 = std::__shared_weak_count::lock(v50)) == 0)) {
      sub_100088B9C();
    }
    unint64_t v53 = v52;
    p_shared_weak_owners = &v52->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v52->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v52);
    uint64_t v55 = *(void *)(a1 + 240);
    uint64_t v56 = v87;
    uint64_t v57 = v88;
    unint64_t v61 = 0;
    uint64_t v62 = 0;
    uint64_t v60 = 0;
    sub_10005C928(&v60, v70, (uint64_t)v71, v71 - (unsigned char *)v70);
    v79[0] = _NSConcreteStackBlock;
    v79[1] = 1174405120;
    v79[2] = sub_100300A4C;
    v79[3] = &unk_1019B6940;
    v79[4] = a1;
    v79[5] = v51;
    uint64_t v80 = v53;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    sub_1000C67C8((uint64_t)v81, a6);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void **, void *))(*(void *)v55 + 56))(v55, v56, v57, &v60, v79);
    if (v60)
    {
      unint64_t v61 = v60;
      operator delete(v60);
    }
    sub_1000C6860(v81);
    if (v80) {
      std::__shared_weak_count::__release_weak(v80);
    }
    std::__shared_weak_count::__release_weak(v53);
  }
  else
  {
    uint64_t v58 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#E Failed to encode device metadata", buf, 2u);
    }
    v63[0] = 2;
    LOBYTE(v64) = 3;
    uint64_t v59 = *(void *)(a6 + 24);
    if (!v59) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char *))(*(void *)v59 + 48))(v59, v63);
    if (v63[0] == 1 && v64)
    {
      uint64_t v65 = v64;
      operator delete(v64);
    }
    v63[0] = 0;
  }
  if (SHIBYTE(v67.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v67.__r_.__value_.__l.__data_);
  }
  sub_100343DF4((uint64_t)v68);
  uint64_t v16 = v70;
  if (v70)
  {
    uint64_t v71 = v70;
    goto LABEL_169;
  }
}

void sub_10030081C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, char a13, void *a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *__p,uint64_t a36,uint64_t a37,char a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,std::__shared_weak_count *a52)
{
  if (__p)
  {
    a36 = (uint64_t)__p;
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100300A4C(void *a1, unsigned __int8 *a2)
{
  char v4 = (void *)a1[4];
  uint64_t v3 = a1[5];
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 1174405120;
  v13[2] = sub_100300C34;
  void v13[3] = &unk_1019B6910;
  int v5 = (std::__shared_weak_count *)a1[6];
  void v13[4] = v3;
  int v14 = v5;
  if (v5) {
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_1000C67C8((uint64_t)v15, (uint64_t)(a1 + 7));
  sub_1000C58F0((uint64_t)v16, a2);
  BOOL v6 = (std::__shared_weak_count *)v4[2];
  if (!v6 || (uint64_t v7 = v4[1], (v8 = std::__shared_weak_count::lock(v6)) == 0)) {
    sub_100088B9C();
  }
  long long v9 = v8;
  long long v10 = v4[3];
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1174405120;
  v11[2] = sub_10031EAD8;
  _OWORD v11[3] = &unk_1019B8B90;
  v11[5] = v7;
  uint64_t v12 = v9;
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  void v11[4] = v13;
  dispatch_async(v10, v11);
  if (v12) {
    sub_10004D2C8(v12);
  }
  sub_10004D2C8(v9);
  if (v16[0] == 1 && __p)
  {
    uint64_t v18 = __p;
    operator delete(__p);
  }
  v16[0] = 0;
  sub_1000C6860(v15);
  if (v14) {
    std::__shared_weak_count::__release_weak(v14);
  }
}

void sub_100300BF8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,std::__shared_weak_count *a21)
{
  sub_1000C6860(v21);
  if (a21) {
    std::__shared_weak_count::__release_weak(a21);
  }
  _Unwind_Resume(a1);
}

void sub_100300C34(uint64_t a1)
{
  char v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = v3;
      if (*(void *)(a1 + 32))
      {
        sub_1000C58F0((uint64_t)v6, (unsigned __int8 *)(a1 + 80));
        uint64_t v5 = *(void *)(a1 + 72);
        if (!v5) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v5 + 48))(v5, v6);
        if (v6[0] == 1)
        {
          if (__p)
          {
            unint64_t v8 = __p;
            operator delete(__p);
          }
        }
        v6[0] = 0;
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_100300CE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char a9, void *__p, uint64_t a11)
{
  sub_10004D2C8(v11);
  _Unwind_Resume(a1);
}

uint64_t sub_100300D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  sub_1000C67C8(a1 + 48, a2 + 48);
  return sub_1000C58F0(a1 + 80, (unsigned __int8 *)(a2 + 80));
}

void sub_100300D80(_Unwind_Exception *a1)
{
  sub_1000C6860(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 40);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void sub_100300DA8(uint64_t a1)
{
  char v2 = (void *)(a1 + 48);
  if (*(unsigned char *)(a1 + 80) == 1)
  {
    uint64_t v3 = *(void **)(a1 + 88);
    if (v3)
    {
      *(void *)(a1 + 96) = v3;
      operator delete(v3);
    }
  }
  *(unsigned char *)(a1 + 80) = 0;
  sub_1000C6860(v2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    std::__shared_weak_count::__release_weak(v4);
  }
}

uint64_t sub_100300E18(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return sub_1000C67C8(a1 + 56, a2 + 56);
}

void sub_100300E5C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100300E74(uint64_t a1)
{
  sub_1000C6860((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100300EC0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, int a5, uint64_t a6)
{
}

uint64_t sub_100300EC8(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 2036)) {
    BOOL v3 = a2 == 0;
  }
  else {
    BOOL v3 = 1;
  }
  if (!v3)
  {
    uint64_t v15 = *(NSObject **)(a1 + 40);
    BOOL v16 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    uint64_t v17 = 0;
    if (v16)
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Bootstrap has been disabled - do not allow", (uint8_t *)&buf, 2u);
      return 0;
    }
    return v17;
  }
  (***(void (****)(long long *__return_ptr))(a1 + 320))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)buf);
  BOOL v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    unint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v22 = v7;
  CFTypeID v11 = sub_10004D37C(&v6[1].__m_.__sig, &v22);
  if (!v11)
  {
    uint64_t v13 = 0;
    goto LABEL_15;
  }
  uint64_t v13 = v11[3];
  uint64_t v12 = (std::__shared_weak_count *)v11[4];
  if (!v12)
  {
LABEL_15:
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v14 = 1;
    goto LABEL_16;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
LABEL_16:
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (v13 && (*(unsigned int (**)(uint64_t))(*(void *)v13 + 16))(v13))
  {
    uint64_t v18 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      unint64_t v19 = "Deasserting";
      if (a2) {
        unint64_t v19 = "Asserting";
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s bootstrap", (uint8_t *)&buf, 0xCu);
    }
    uint64_t v17 = sub_1002DA714(a1, a2, 1);
  }
  else
  {
    uint64_t v20 = *(NSObject **)(a1 + 40);
    uint64_t v17 = 0;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Bootstrap not active or not recommended", (uint8_t *)&buf, 2u);
      uint64_t v17 = 0;
    }
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  return v17;
}

void sub_10030115C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030119C(uint64_t a1, int a2)
{
  return sub_100300EC8(a1 - 72, a2);
}

uint64_t sub_1003011A4(uint64_t a1, int a2)
{
  return sub_100300EC8(a1 - 96, a2);
}

void sub_1003011AC(uint64_t a1, uint64_t *a2)
{
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(__dst);
  ServiceMap = (std::mutex *)Registry::getServiceMap(__dst[0]);
  BOOL v3 = ServiceMap;
  if (v4 < 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v42 = v4;
  unint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)&v42);
  if (v8)
  {
    uint64_t v9 = v8[3];
    unsigned int v10 = (std::__shared_weak_count *)v8[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v9 = 0;
  }
  std::mutex::unlock(v3);
  unsigned int v10 = 0;
  char v11 = 1;
LABEL_9:
  if (__dst[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__dst[1]);
  }
  if (!v9)
  {
LABEL_60:
    if (v11) {
      return;
    }
    goto LABEL_61;
  }
  uint64_t v37 = 0;
  BOOL v38 = 0;
  uint64_t v39 = 0;
  (*(void (**)(long long **__return_ptr, uint64_t, uint64_t))(*(void *)v9 + 48))(&v37, v9, 8);
  if (v39)
  {
    char v33 = v11;
    std::string::size_type v32 = v10;
    uint64_t v12 = v37;
    if (v37 == (long long *)&v38) {
      goto LABEL_59;
    }
    while (1)
    {
      *(_OWORD *)long long __dst = 0u;
      *(_OWORD *)CFMutableDictionaryRef theDict = 0u;
      sub_10008E55C(__dst, v12 + 2);
      Value = CFDictionaryGetValue(theDict[1], @"IccidHash");
      char v14 = Value;
      if (!Value) {
        goto LABEL_51;
      }
      CFTypeID v15 = CFGetTypeID(Value);
      if (v15 != CFStringGetTypeID()) {
        goto LABEL_51;
      }
      uint64_t v16 = *a2;
      uint64_t v17 = a2[1];
      if (*a2 == v17) {
        goto LABEL_50;
      }
      do
      {
        long long v42 = 0uLL;
        uint64_t v43 = 0;
        ctu::cf::assign();
        uint64_t v41 = v43;
        *(_OWORD *)std::string __p = v42;
        uint64_t v18 = *(unsigned __int8 *)(v16 + 95);
        uint64_t v19 = *(void *)(v16 + 80);
        if ((v18 & 0x80u) == 0) {
          uint64_t v20 = (void *)*(unsigned __int8 *)(v16 + 95);
        }
        else {
          uint64_t v20 = *(void **)(v16 + 80);
        }
        unsigned int v21 = (void *)HIBYTE(v41);
        int v22 = SHIBYTE(v41);
        if (v41 < 0) {
          unsigned int v21 = __p[1];
        }
        if (v20 != v21) {
          goto LABEL_44;
        }
        if (v41 >= 0) {
          uint64_t v23 = __p;
        }
        else {
          uint64_t v23 = (void **)__p[0];
        }
        if ((v18 & 0x80) == 0)
        {
          if (*(unsigned char *)(v16 + 95))
          {
            uint64_t v24 = 0;
            while (*(unsigned __int8 *)(v16 + v24 + 72) == *((unsigned __int8 *)v23 + v24))
            {
              if (v18 == ++v24) {
                goto LABEL_36;
              }
            }
          }
LABEL_44:
          BOOL v29 = 0;
          if ((v22 & 0x80000000) == 0) {
            goto LABEL_46;
          }
LABEL_45:
          operator delete(__p[0]);
          goto LABEL_46;
        }
        BOOL v25 = memcmp(*(const void **)(v16 + 72), v23, *(void *)(v16 + 80)) || v19 == 0;
        if (v25) {
          goto LABEL_44;
        }
LABEL_36:
        uint64_t v26 = *(unsigned __int8 *)(v16 + 119);
        int v27 = (char)v26;
        if ((v26 & 0x80u) != 0) {
          uint64_t v26 = *(void *)(v16 + 104);
        }
        if (v26 != 4) {
          goto LABEL_44;
        }
        if (v27 >= 0) {
          int v28 = (_DWORD *)(v16 + 96);
        }
        else {
          int v28 = *(_DWORD **)(v16 + 96);
        }
        BOOL v29 = *v28 == 825241653;
        if (v22 < 0) {
          goto LABEL_45;
        }
LABEL_46:
        if (v29) {
          goto LABEL_49;
        }
        v16 += 312;
      }
      while (v16 != v17);
      uint64_t v16 = v17;
LABEL_49:
      if (v16 == a2[1]) {
LABEL_50:
      }
        (*(void (**)(uint64_t, uint64_t, const void *))(*(void *)v9 + 40))(v9, 8, v14);
LABEL_51:
      sub_100057D78((const void **)&theDict[1]);
      if (SHIBYTE(theDict[0]) < 0) {
        operator delete(__dst[0]);
      }
      uint64_t v30 = (long long *)*((void *)v12 + 1);
      if (v30)
      {
        do
        {
          uint64_t v31 = v30;
          uint64_t v30 = *(long long **)v30;
        }
        while (v30);
      }
      else
      {
        do
        {
          uint64_t v31 = (long long *)*((void *)v12 + 2);
          BOOL v25 = *(void *)v31 == (void)v12;
          uint64_t v12 = v31;
        }
        while (!v25);
      }
      uint64_t v12 = v31;
      if (v31 == (long long *)&v38)
      {
LABEL_59:
        sub_10008E5B8((uint64_t)&v37, v38);
        unsigned int v10 = v32;
        char v11 = v33;
        goto LABEL_60;
      }
    }
  }
  sub_10008E5B8((uint64_t)&v37, v38);
  if ((v11 & 1) == 0) {
LABEL_61:
  }
    sub_10004D2C8(v10);
}

void sub_10030155C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, int a11, int a12, uint64_t a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20)
{
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v21);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003015D4(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100301610(uint64_t a1, uint64_t *a2)
{
}

uint64_t sub_100301618(uint64_t a1, uint64_t a2)
{
  sub_1003011AC(a1, (uint64_t *)a2);
  uint64_t v4 = *(void *)a2;
  uint64_t v5 = *(void *)(a2 + 8);
  if (*(void *)a2 == v5) {
    goto LABEL_50;
  }
  uint64_t v6 = *(void *)(a2 + 8);
  for (uint64_t i = v4 + 312; ; i += 312)
  {
    uint64_t v8 = *(unsigned __int8 *)(i - 217);
    if ((v8 & 0x80u) != 0) {
      uint64_t v8 = *(void *)(i - 232);
    }
    if (v8
      && (*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 304) + 504))(*(void *)(a1 + 304), i - 240))
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(i - 217) >= 0) {
          uint64_t v10 = i - 240;
        }
        else {
          uint64_t v10 = *(void *)(i - 240);
        }
        *(_DWORD *)long long buf = 136315138;
        uint64_t v30 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I ICCID hash %s matches with ICCID in vinyl info", buf, 0xCu);
      }
      uint64_t v11 = *(unsigned __int8 *)(i - 193);
      int v12 = (char)v11;
      if ((v11 & 0x80u) != 0) {
        uint64_t v11 = *(void *)(i - 208);
      }
      if (v11 != 4) {
        break;
      }
      char v13 = v12 >= 0 ? (unsigned int *)(i - 216) : *(unsigned int **)(i - 216);
      unsigned int v14 = bswap32(*v13);
      BOOL v15 = v14 >= 0x35303031;
      int v16 = v14 > 0x35303031;
      int v17 = !v15;
      if (v16 != v17) {
        break;
      }
    }
    if (i == v5) {
      return sub_100301910(a2, v6, *(long long **)(a2 + 8));
    }
  }
  uint64_t v4 = i - 312;
  if (i - 312 != v5)
  {
    if (i != v5)
    {
      uint64_t v6 = i - 312;
      do
      {
        uint64_t v19 = *(unsigned __int8 *)(i + 95);
        if ((v19 & 0x80u) != 0) {
          uint64_t v19 = *(void *)(i + 80);
        }
        if (!v19
          || !(*(unsigned int (**)(void, uint64_t))(**(void **)(a1 + 304) + 504))(*(void *)(a1 + 304), i + 72))
        {
          goto LABEL_47;
        }
        char v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          if (*(char *)(i + 95) >= 0) {
            uint64_t v21 = i + 72;
          }
          else {
            uint64_t v21 = *(void *)(i + 72);
          }
          *(_DWORD *)long long buf = 136315138;
          uint64_t v30 = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I ICCID hash %s matches with ICCID in vinyl info", buf, 0xCu);
        }
        uint64_t v22 = *(unsigned __int8 *)(i + 119);
        int v23 = (char)v22;
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(i + 104);
        }
        if (v22 == 4)
        {
          uint64_t v24 = v23 >= 0 ? (unsigned int *)(i + 96) : *(unsigned int **)(i + 96);
          unsigned int v25 = bswap32(*v24);
          BOOL v15 = v25 >= 0x35303031;
          int v26 = v25 > 0x35303031;
          int v27 = !v15;
          if (v26 == v27)
          {
LABEL_47:
            sub_10031016C(v6, (long long *)i);
            v6 += 312;
          }
        }
        i += 312;
      }
      while (i != v5);
      return sub_100301910(a2, v6, *(long long **)(a2 + 8));
    }
LABEL_50:
    uint64_t v6 = v4;
  }
  return sub_100301910(a2, v6, *(long long **)(a2 + 8));
}

uint64_t sub_100301910(uint64_t a1, uint64_t a2, long long *a3)
{
  if ((long long *)a2 != a3)
  {
    sub_10031010C(a3, *(long long **)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 312;
        sub_1000C643C(v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_100301984(uint64_t a1, uint64_t a2)
{
  return sub_100301618(a1 - 72, a2);
}

void sub_10030198C(void *a1, uint64_t a2)
{
  if (!a1[571]) {
    return;
  }
  uint64_t v3 = *(void *)a2;
  if (*(void *)a2 == *(void *)(a2 + 8)) {
    return;
  }
  uint64_t v5 = a1 + 570;
  do
  {
    uint64_t v6 = (void *)a1[569];
    if (*(char *)(v3 + 95) < 0)
    {
      sub_10004FC84(v20, *(void **)(v3 + 72), *(void *)(v3 + 80));
    }
    else
    {
      *(_OWORD *)char v20 = *(_OWORD *)(v3 + 72);
      uint64_t v21 = *(void *)(v3 + 88);
    }
    if (v6 == v5)
    {
LABEL_32:
      int v16 = 0;
      goto LABEL_34;
    }
    while (1)
    {
      sub_100CD7084((uint64_t)(v6 + 7), (uint64_t)&__p);
      if ((v24 & 0x80u) == 0) {
        size_t v7 = v24;
      }
      else {
        size_t v7 = __n;
      }
      uint64_t v8 = (void *)HIBYTE(v21);
      if (v21 < 0) {
        uint64_t v8 = v20[1];
      }
      if ((void *)v7 != v8) {
        goto LABEL_23;
      }
      if (v21 >= 0) {
        uint64_t v9 = v20;
      }
      else {
        uint64_t v9 = (void **)v20[0];
      }
      if ((v24 & 0x80) == 0)
      {
        if (!v24) {
          break;
        }
        uint64_t v10 = 0;
        while (*((unsigned __int8 *)&__p + v10) == *((unsigned __int8 *)v9 + v10))
        {
          if (v24 == ++v10) {
            goto LABEL_33;
          }
        }
LABEL_23:
        if ((v24 & 0x80) != 0) {
          operator delete(__p);
        }
        goto LABEL_26;
      }
      uint64_t v11 = __p;
      int v12 = memcmp(__p, v9, __n);
      operator delete(v11);
      if (!v12) {
        break;
      }
LABEL_26:
      char v13 = (void *)v6[1];
      if (v13)
      {
        do
        {
          unsigned int v14 = v13;
          char v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          unsigned int v14 = (void *)v6[2];
          BOOL v15 = *v14 == (void)v6;
          uint64_t v6 = v14;
        }
        while (!v15);
      }
      uint64_t v6 = v14;
      if (v14 == v5) {
        goto LABEL_32;
      }
    }
LABEL_33:
    int v16 = 1;
LABEL_34:
    if (SHIBYTE(v21) < 0)
    {
      operator delete(v20[0]);
      if (!v16) {
        goto LABEL_40;
      }
LABEL_36:
      sub_10031010C((long long *)(v3 + 312), *(long long **)(a2 + 8), v3);
      uint64_t v18 = v17;
      uint64_t v19 = *(void *)(a2 + 8);
      if (v19 != v17)
      {
        do
        {
          v19 -= 312;
          sub_1000C643C(v19);
        }
        while (v19 != v18);
      }
      *(void *)(a2 + 8) = v18;
    }
    else
    {
      if (v16) {
        goto LABEL_36;
      }
LABEL_40:
      v3 += 312;
      uint64_t v18 = *(void *)(a2 + 8);
    }
  }
  while (v3 != v18);
}

void sub_100301B7C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100301B98(uint64_t a1, uint64_t a2)
{
}

BOOL sub_100301BA0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 2632) == 1;
}

BOOL sub_100301BB0(uint64_t a1)
{
  return *(_DWORD *)(a1 + 2560) == 1;
}

uint64_t sub_100301BC0(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1705);
}

uint64_t sub_100301BC8(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1633);
}

void sub_100301BD0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 432);
  if (v2)
  {
    sub_100058DB0(v10, "");
    sub_100058DB0(v8, "");
    sub_100058DB0(v6, "");
    sub_100058DB0(__p, "");
    (*(void (**)(uint64_t, void **, void **, void, void **, void **, uint64_t))(*(void *)v2 + 216))(v2, v10, v8, 0, v6, __p, a2);
    if (v5 < 0) {
      operator delete(__p[0]);
    }
    if (v7 < 0) {
      operator delete(v6[0]);
    }
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (v11 < 0) {
      operator delete(v10[0]);
    }
  }
}

void sub_100301CC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (*(char *)(v26 - 33) < 0) {
    operator delete(*(void **)(v26 - 56));
  }
  _Unwind_Resume(exception_object);
}

void sub_100301D2C(uint64_t a1, uint64_t a2)
{
}

void sub_100301D34(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E Does not support entitlement subscription", (uint8_t *)buf, 2u);
  }
  v7[0] = 0;
  v7[1] = 0;
  uint64_t v6 = v7;
  uint64_t v5 = *a3;
  sub_100344308(buf, (uint64_t)&v6);
  (*(void (**)(uint64_t, uint64_t *))(v5 + 16))(v5, buf);
  sub_10034422C((uint64_t)buf, (void *)buf[1]);
  sub_10034422C((uint64_t)&v6, v7[0]);
}

void sub_100301DE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11, uint64_t a12, char a13, void *a14)
{
}

void sub_100301E10(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

void sub_100301E1C(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = 0;
  uint64_t v30 = 0;
  char v31 = 0;
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 352))(&v29);
  if (v31)
  {
    uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v4 || (v5 = *(void *)(a1 + 8), (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
      sub_100088B9C();
    }
    char v7 = v6;
    p_shared_weak_owners = &v6->__shared_weak_owners_;
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v6);
    uint64_t v9 = *(void *)(a1 + 240);
    uint64_t v10 = v29;
    uint64_t v11 = v30;
    sub_1002EF958((uint64_t)v26);
    v14[0] = _NSConcreteStackBlock;
    v14[1] = 1174405120;
    v14[2] = sub_10030217C;
    void v14[3] = &unk_1019B69A0;
    void v14[4] = a1;
    void v14[5] = v5;
    BOOL v15 = v7;
    atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
    int v12 = *(void **)a2;
    if (*(void *)a2) {
      int v12 = _Block_copy(v12);
    }
    aBlock = v12;
    (*(void (**)(uint64_t, uint64_t, uint64_t, unsigned char *, void *))(*(void *)v9 + 72))(v9, v10, v11, v26, v14);
    if (v28 < 0) {
      operator delete(v27);
    }
    uint64_t v13 = *(void *)(a1 + 304);
    sub_1002EF958((uint64_t)&v17);
    long long v21 = v17;
    *(_OWORD *)std::string __p = *(_OWORD *)v18;
    uint64_t v23 = v19;
    v18[0] = 0;
    v18[1] = 0;
    uint64_t v19 = 0;
    char v24 = v20;
    char v25 = 1;
    (*(void (**)(uint64_t, long long *))(*(void *)v13 + 248))(v13, &v21);
    if (v25 && SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v19) < 0) {
      operator delete(v18[0]);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      std::__shared_weak_count::__release_weak(v15);
    }
    std::__shared_weak_count::__release_weak(v7);
  }
  else
  {
    (*(void (**)(void))(*(void *)a2 + 16))();
  }
}

void sub_1003020C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,char a35)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030217C(uint64_t a1, unsigned __int8 *a2)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _OWORD v10[2] = sub_10030230C;
  void v10[3] = &unk_1019B6970;
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v11 = v9;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  int v12 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v14 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v14 = *(_WORD *)a2;
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  uint64_t v4 = *(std::__shared_weak_count **)(v9 + 16);
  if (!v4 || (v5 = *(void *)(v9 + 8), (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  char v7 = v6;
  uint64_t v8 = *(NSObject **)(v9 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  int v16 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v10;
  dispatch_async(v8, block);
  if (v16) {
    sub_10004D2C8(v16);
  }
  sub_10004D2C8(v7);
  if (aBlock) {
    _Block_release(aBlock);
  }
  LOBYTE(v14) = 0;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_10030230C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void **)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        uint64_t v6 = v3[38];
        v12[0] = 0;
        char v15 = 0;
        (*(void (**)(uint64_t, unsigned char *))(*(void *)v6 + 248))(v6, v12);
        if (v15 && v14 < 0) {
          operator delete(__p);
        }
        uint64_t v7 = v3[64];
        if (v7) {
          (*(void (**)(uint64_t))(*(void *)v7 + 56))(v7);
        }
        int v8 = *(unsigned __int8 *)(a1 + 64);
        if (v8 == 2)
        {
          long long v9 = v3[5];
          if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
          {
            int v10 = 136315138;
            uint64_t v11 = asString();
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Error: %s", (uint8_t *)&v10, 0xCu);
          }
        }
        else if (v8 == 1 && *(unsigned char *)(a1 + 65))
        {
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
          goto LABEL_16;
        }
        (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
      }
LABEL_16:
      sub_10004D2C8(v5);
    }
  }
}

void sub_1003024A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, char a20)
{
  sub_10004D2C8(v20);
  _Unwind_Resume(a1);
}

void *sub_1003024E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = *(void **)(a2 + 56);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 56) = result;
  *(_WORD *)(a1 + 64) = 0;
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if ((v6 - 1) <= 1)
  {
    *(unsigned char *)(a1 + 64) = v6;
    *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  }
  return result;
}

void sub_100302550(uint64_t a1)
{
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_1003025A8(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_1003025F4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100302648(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100302650(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_100302690(uint64_t a1, void *a2, void *a3, uint64_t *a4)
{
  uint64_t v8 = *(void *)(*a3 + 96);
  uint64_t v9 = *(void *)(*a3 + 104);
  while (v8 != v9)
  {
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 304) + 360))(&buf);
    if (v55[0].__r_.__value_.__s.__data_[0])
    {
      sub_100302DBC(*a4, 0);
      return;
    }
    v8 += 24;
  }
  if (*(_DWORD *)(a1 + 2036))
  {
    int v10 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Bootstrap has been disabled", (uint8_t *)&buf, 2u);
    }
    goto LABEL_25;
  }
  uint64_t v11 = *a3;
  if (*(char *)(*a3 + 23) < 0) {
    uint64_t v12 = *(void *)(v11 + 8);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(*a3 + 23);
  }
  uint64_t v13 = *a2;
  uint64_t v14 = a2[1];
  if (v12)
  {
LABEL_14:
    *(unsigned char *)(a1 + 5265) = 0;
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)))
    {
      char v15 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Asserting bootstrap", (uint8_t *)&buf, 2u);
      }
      sub_1002DA714(a1, 1, 1);
    }
    v43[0] = 0;
    v43[1] = v43;
    v43[2] = 0x2000000000;
    char v44 = 0;
    *(unsigned char *)(a1 + 5264) = 1;
    if (*(char *)(a1 + 639) < 0)
    {
      **(unsigned char **)(a1 + 616) = 0;
      *(void *)(a1 + 624) = 0;
    }
    else
    {
      *(unsigned char *)(a1 + 616) = 0;
      *(unsigned char *)(a1 + 639) = 0;
    }
    if (*(char *)(a1 + 615) < 0)
    {
      if (!*(void *)(a1 + 600)) {
        goto LABEL_35;
      }
    }
    else if (!*(unsigned char *)(a1 + 615))
    {
      goto LABEL_35;
    }
    uint64_t v17 = *a3;
    uint64_t v18 = (uint64_t *)(*a3 + 96);
    unint64_t v19 = *(void *)(*a3 + 104);
    if (v19 >= *(void *)(*a3 + 112))
    {
      uint64_t v20 = sub_1000D8CE8(v18, (long long *)(a1 + 592));
    }
    else
    {
      sub_10030BFC4(v18, (long long *)(a1 + 592));
      uint64_t v20 = v19 + 24;
    }
    *(void *)(v17 + 104) = v20;
LABEL_35:
    if (*(unsigned char *)(a1 + 584))
    {
LABEL_42:
      uint64_t v22 = *(void *)(a1 + 240);
      uint64_t v23 = *a3;
      char v24 = (std::__shared_weak_count *)a3[1];
      uint64_t v38 = *a3;
      uint64_t v39 = v24;
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v23 = *a3;
        char v24 = (std::__shared_weak_count *)a3[1];
      }
      v49[0] = _NSConcreteStackBlock;
      v49[1] = 1174405120;
      void v49[2] = sub_100302E7C;
      void v49[3] = &unk_1019B69D8;
      v49[5] = a1;
      v49[6] = v23;
      int v50 = v24;
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        uint64_t v23 = *a3;
        char v24 = (std::__shared_weak_count *)a3[1];
      }
      v49[4] = v43;
      uint64_t v51 = v13;
      uint64_t v52 = v14;
      v34[0] = _NSConcreteStackBlock;
      v34[1] = 1174405120;
      v34[2] = sub_100303A8C;
      v34[3] = &unk_1019B6A10;
      void v34[5] = a1;
      v34[6] = v23;
      uint64_t v35 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      v34[4] = v43;
      uint64_t v36 = a2;
      char v25 = (void *)*a4;
      if (*a4) {
        char v25 = _Block_copy(v25);
      }
      aBlock = v25;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t *, void *, void *))(*(void *)v22 + 40))(v22, v13, v14, &v38, v49, v34);
      if (v39) {
        sub_10004D2C8(v39);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (v35) {
        sub_10004D2C8(v35);
      }
      if (v50) {
        sub_10004D2C8(v50);
      }
      _Block_object_dispose(v43, 8);
      return;
    }
    long long v56 = 0u;
    long long v57 = 0u;
    memset(v55, 0, sizeof(v55));
    long long buf = 0u;
    if (*(char *)(a1 + 615) < 0)
    {
      if (*(void *)(a1 + 600)) {
        goto LABEL_38;
      }
    }
    else if (*(unsigned char *)(a1 + 615))
    {
LABEL_38:
      std::string::operator=(v55, (const std::string *)(a1 + 592));
LABEL_39:
      uint64_t v21 = *(void *)(a1 + 304);
      sub_10030EB10((uint64_t)v53, (uint64_t)&buf);
      (*(void (**)(uint64_t, unsigned char *))(*(void *)v21 + 256))(v21, v53);
      sub_10030D044((uint64_t)v53);
      if (SHIBYTE(v57) < 0) {
        operator delete(*((void **)&v56 + 1));
      }
      sub_1000C584C((uint64_t)&buf);
      goto LABEL_42;
    }
    uint64_t v26 = *a3;
    if (*a3)
    {
      if (*(char *)(v26 + 159) < 0 ? *(void *)(v26 + 144) : *(unsigned __int8 *)(v26 + 159))
      {
        std::string::operator=((std::string *)((char *)&v56 + 8), (const std::string *)(v26 + 136));
        uint64_t v32 = *(void *)(a1 + 416);
        if (v32)
        {
          uint64_t v33 = *a3 + 136;
          LOBYTE(v40) = 0;
          char v42 = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t, void **))(*(void *)v32 + 112))(v32, v33, 10, &v40);
          if (v42)
          {
            if (v41 < 0) {
              operator delete(v40);
            }
          }
        }
      }
    }
    goto LABEL_39;
  }
  if (*a2 - 89 <= 8 && ((1 << (v13 - 89)) & 0x181) != 0)
  {
    if (((*(uint64_t (**)(void))(**(void **)(a1 + 320) + 40))(*(void *)(a1 + 320)) & 1) == 0)
    {
LABEL_25:
      sub_100302DBC(*a4, 2);
      return;
    }
    goto LABEL_14;
  }
  uint64_t v28 = *(void *)(a1 + 336);
  uint64_t v45 = a1;
  uint64_t v46 = v11;
  uint64_t v29 = a3[1];
  uint64_t v47 = v29;
  if (v29) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v29 + 8), 1uLL, memory_order_relaxed);
  }
  if (*a4) {
    uint64_t v30 = _Block_copy((const void *)*a4);
  }
  else {
    uint64_t v30 = 0;
  }
  uint64_t v59 = 0;
  char v31 = operator new(0x28uLL);
  void *v31 = off_1019BA660;
  v31[1] = a1;
  v31[2] = v11;
  uint64_t v31[3] = v29;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  v31[4] = v30;
  uint64_t v48 = 0;
  uint64_t v59 = v31;
  (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v28 + 72))(v28, 1, 0, v58);
  sub_10032493C(v58);
}

void sub_100302CE0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *aBlock, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,char a28,int a29,__int16 a30)
{
  if (a28)
  {
    if (a27 < 0) {
      operator delete(__p);
    }
  }
  sub_1002F6684((uint64_t)&STACK[0x210]);
  _Block_object_dispose(&a30, 8);
  _Unwind_Resume(a1);
}

void sub_100302DB4(uint64_t a1, void *a2, uint64_t *a3, const void **a4)
{
}

unsigned char *sub_100302DBC(uint64_t a1, uint64_t a2)
{
  v3[0] = 0;
  (*(void (**)(uint64_t, uint64_t, unsigned char *))(a1 + 16))(a1, a2, v3);
  return sub_1000C60A0(v3);
}

void sub_100302E28(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C60A0(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100302E3C(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_100302E7C(void *a1, uint64_t a2)
{
  uint64_t v3 = a1;
  uint64_t v5 = a1 + 6;
  uint64_t v4 = a1[6];
  uint64_t v6 = a1[5];
  if ((*(char *)(v4 + 159) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v4 + 159)) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  if (*(void *)(v4 + 144)) {
LABEL_3:
  }
    sub_1002F66D0((void *)a1[5], (long long *)(v4 + 136), *(unsigned char *)a2);
LABEL_4:
  if (!*(unsigned char *)a2) {
    return;
  }
  v76[0] = 0;
  v76[1] = 0;
  uint64_t v77 = 0;
  uint64_t v7 = (const std::string *)(a2 + 176);
  uint64_t v8 = (const std::string *)(a2 + 24);
  (*(void (**)(void **__return_ptr))(**(void **)(v6 + 320) + 160))(v76);
  uint64_t v9 = *(void *)(v6 + 680);
  if (v9)
  {
    if (!*(unsigned char *)a2) {
      goto LABEL_133;
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **))(*(void *)v9 + 120))(v9, a2 + 104, a2 + 128, a2 + 152, a2 + 176, v76);
  }
  if (!*(unsigned char *)a2) {
LABEL_133:
  }
    __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
  int v10 = (uint64_t *)(v6 + 616);
  std::string::operator=((std::string *)(v6 + 616), (const std::string *)(a2 + 24));
  char v11 = *(unsigned char *)(v6 + 639);
  if (v11 < 0) {
    uint64_t v12 = *(void *)(v6 + 624);
  }
  else {
    uint64_t v12 = *(unsigned __int8 *)(v6 + 639);
  }
  if (v12)
  {
    if (*(char *)(*v5 + 159) < 0)
    {
      if (!*(void *)(*v5 + 144)) {
        goto LABEL_63;
      }
    }
    else if (!*(unsigned char *)(*v5 + 159))
    {
      goto LABEL_63;
    }
    uint64_t v13 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v14 = v6 + 616;
      if (v11 < 0) {
        uint64_t v14 = *v10;
      }
      char v15 = (void *)(v6 + 592);
      if (*(char *)(v6 + 615) < 0) {
        char v15 = (void *)*v15;
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v14;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v15;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I get target iccid during fetch new profiles. fetching iccid: %s, purchase iccid: %s", (uint8_t *)buf, 0x16u);
    }
    memset(&v75, 0, sizeof(v75));
    memset(&v74, 0, sizeof(v74));
    uint64_t v16 = *(void *)(v6 + 416);
    if (v16)
    {
      uint64_t v17 = (void *)(*(uint64_t (**)(uint64_t))(*(void *)v16 + 64))(v16);
      uint64_t v18 = *v17;
      uint64_t v19 = v17[1];
      uint64_t v20 = *v5;
      if (*(char *)(*v5 + 159) < 0)
      {
        sub_10004FC84(__p, *(void **)(v20 + 136), *(void *)(v20 + 144));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v20 + 136);
        uint64_t v73 = *(void *)(v20 + 152);
      }
      uint64_t v21 = HIBYTE(v73);
      if (v18 != v19)
      {
        uint64_t v68 = v17;
        uint64_t v22 = __p[0];
        uint64_t v23 = __p[1];
        if (v73 >= 0) {
          char v24 = (void *)HIBYTE(v73);
        }
        else {
          char v24 = __p[1];
        }
        do
        {
          char v25 = (void *)*(unsigned __int8 *)(v18 + 455);
          int v26 = (char)v25;
          if ((char)v25 < 0) {
            char v25 = *(void **)(v18 + 440);
          }
          if (v24 == v25)
          {
            if (v26 >= 0) {
              int v27 = (unsigned __int8 *)(v18 + 432);
            }
            else {
              int v27 = *(unsigned __int8 **)(v18 + 432);
            }
            if ((v21 & 0x80) != 0)
            {
              std::string v67 = v5;
              uint64_t v30 = v19;
              char v31 = v10;
              uint64_t v32 = v3;
              uint64_t v33 = v22;
              int v34 = memcmp(v22, v27, (size_t)v23);
              uint64_t v22 = v33;
              uint64_t v3 = v32;
              int v10 = v31;
              uint64_t v19 = v30;
              uint64_t v5 = v67;
              if (!v34)
              {
                uint64_t v17 = v68;
                goto LABEL_50;
              }
            }
            else
            {
              if (!v21)
              {
                uint64_t v17 = v68;
                goto LABEL_51;
              }
              uint64_t v28 = __p;
              uint64_t v29 = v21;
              while (*(unsigned __int8 *)v28 == *v27)
              {
                uint64_t v28 = (void **)((char *)v28 + 1);
                ++v27;
                if (!--v29) {
                  goto LABEL_48;
                }
              }
            }
          }
          v18 += 1248;
        }
        while (v18 != v19);
        uint64_t v18 = v19;
LABEL_48:
        uint64_t v17 = v68;
      }
      if ((v21 & 0x80) != 0) {
LABEL_50:
      }
        operator delete(__p[0]);
LABEL_51:
      uint64_t v8 = (const std::string *)(a2 + 24);
      if (v18 != v17[1])
      {
        std::string::operator=(&v75, (const std::string *)(v18 + 192));
        std::string::operator=(&v74, (const std::string *)(v18 + 216));
      }
    }
    uint64_t v35 = *v5;
    if (*(char *)(v6 + 639) < 0)
    {
      sub_10004FC84(buf, *(void **)(v6 + 616), *(void *)(v6 + 624));
    }
    else
    {
      buf[0] = *(_OWORD *)v10;
      *(void *)&buf[1] = v10[2];
    }
    BYTE8(buf[1]) = 1;
    sub_1002F438C(v6, (uint64_t)&v75, (uint64_t)&v74, (unsigned __int8 **)(v35 + 136), 10, (uint64_t)buf);
    uint64_t v7 = (const std::string *)(a2 + 176);
    if (BYTE8(buf[1]) && SBYTE7(buf[1]) < 0) {
      operator delete(*(void **)&buf[0]);
    }
    if (SHIBYTE(v74.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v74.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
  }
LABEL_63:
  uint64_t v36 = (_OWORD *)(a2 + 8);
  if (!*(unsigned char *)(v6 + 584))
  {
    long long v95 = 0u;
    long long v96 = 0u;
    long long v94 = 0u;
    memset(v93, 0, sizeof(v93));
    long long v91 = 0u;
    memset(v92, 0, sizeof(v92));
    long long v90 = 0u;
    memset(buf, 0, sizeof(buf));
    if (!*(unsigned char *)a2) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    buf[0] = *v36;
    std::string::operator=((std::string *)&buf[1], v8);
    std::string::operator=((std::string *)((char *)&buf[2] + 8), (const std::string *)(a2 + 48));
    std::string::operator=((std::string *)&v90, (const std::string *)(a2 + 72));
    DWORD2(v91) = *(_DWORD *)(a2 + 96);
    std::string::operator=(v92, (const std::string *)(a2 + 104));
    std::string::operator=(&v92[1], (const std::string *)(a2 + 128));
    std::string::operator=(v93, (const std::string *)(a2 + 152));
    std::string::operator=(&v93[1], v7);
    std::string::operator=((std::string *)&v94, (const std::string *)(a2 + 200));
    std::string::operator=((std::string *)((char *)&v95 + 8), (const std::string *)(*v5 + 136));
    uint64_t v37 = *(void *)(v6 + 304);
    sub_10030EB10((uint64_t)v88, (uint64_t)buf);
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v37 + 256))(v37, v88);
    sub_10030D044((uint64_t)v88);
    if (SHIBYTE(v96) < 0) {
      operator delete(*((void **)&v95 + 1));
    }
    sub_1000C584C((uint64_t)buf);
  }
  if (!*(unsigned char *)a2) {
    goto LABEL_133;
  }
  *(unsigned char *)(*(void *)(v3[4] + 8) + 24) = *(unsigned char *)(a2 + 96);
  if (!*(unsigned char *)(*(void *)(v3[4] + 8) + 24))
  {
    uint64_t v38 = v8;
    char v39 = *(unsigned char *)(v6 + 615);
    if (v39 < 0) {
      uint64_t v40 = *(void *)(v6 + 600);
    }
    else {
      uint64_t v40 = *(unsigned __int8 *)(v6 + 615);
    }
    char v41 = *(NSObject **)(v6 + 40);
    BOOL v42 = os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT);
    if (v40)
    {
      uint64_t v43 = v38;
      if (!v42) {
        goto LABEL_87;
      }
      uint64_t v44 = v6 + 592;
      if (v39 < 0) {
        uint64_t v44 = *(void *)(v6 + 592);
      }
      if (!*(unsigned char *)a2) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      uint64_t v45 = v38;
      if (*(char *)(a2 + 47) < 0) {
        uint64_t v45 = (const std::string *)v38->__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0]) = 136315394;
      *(void *)((char *)buf + 4) = v44;
      WORD6(buf[0]) = 2080;
      *(void *)((char *)buf + 14) = v45;
      uint64_t v46 = "#I update purchase ICCID: %s -> %s";
      uint64_t v47 = v41;
      uint32_t v48 = 22;
    }
    else
    {
      uint64_t v43 = v38;
      if (!v42) {
        goto LABEL_87;
      }
      if (!*(unsigned char *)a2) {
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
      }
      unsigned int v49 = v38;
      if (*(char *)(a2 + 47) < 0) {
        unsigned int v49 = (const std::string *)v38->__r_.__value_.__r.__words[0];
      }
      LODWORD(buf[0]) = 136315138;
      *(void *)((char *)buf + 4) = v49;
      uint64_t v46 = "#I Setting purchase ICCID: %s";
      uint64_t v47 = v41;
      uint32_t v48 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, v46, (uint8_t *)buf, v48);
LABEL_87:
    uint64_t v36 = (_OWORD *)(a2 + 8);
    if (*(unsigned char *)a2)
    {
      std::string::operator=((std::string *)(v6 + 592), v43);
      goto LABEL_89;
    }
    goto LABEL_133;
  }
LABEL_89:
  uint64_t v50 = *(void *)(v6 + 680);
  if (v50 && (*(unsigned int (**)(uint64_t))(*(void *)v50 + 112))(v50))
  {
    v87[0] = 0;
    if (*(unsigned char *)a2) {
      sub_1000C5A48((uint64_t)v87, (uint64_t)v36);
    }
    BOOL v51 = sub_1002DE6C4(v6, (uint64_t)v87);
    if (*(unsigned char *)(*v5 + 123)) {
      BOOL v52 = v51;
    }
    else {
      BOOL v52 = 0;
    }
    *(unsigned char *)(*v5 + 123) = v52;
    sub_1000C5D34(v87);
  }
  uint64_t v53 = *v5;
  if (*(unsigned char *)(*v5 + 123))
  {
    if (!*(unsigned char *)a2) {
      goto LABEL_130;
    }
    if (*(void *)(a2 + 224) != *(void *)(a2 + 232))
    {
      memset(buf, 0, 24);
      long long v54 = (void **)(v53 + 160);
      if (*(char *)(v53 + 183) < 0)
      {
        unint64_t v57 = *(void *)(v53 + 168);
        if (v57)
        {
          sub_10004FC84(buf, *v54, v57);
          goto LABEL_111;
        }
      }
      else if (*(unsigned char *)(v53 + 183))
      {
        buf[0] = *(_OWORD *)v54;
        *(void *)&buf[1] = *(void *)(v53 + 176);
LABEL_111:
        if (!*(unsigned char *)a2) {
          __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
        }
        uint64_t v59 = *(void *)(v6 + 336);
        uint64_t v60 = *v5;
        uint64_t v69 = 0;
        unsigned int v70 = 0;
        uint64_t v71 = 0;
        sub_10005C928(&v69, *(const void **)(a2 + 224), *(void *)(a2 + 232), *(void *)(a2 + 232) - *(void *)(a2 + 224));
        *(void *)unsigned int v79 = v6;
        *(_OWORD *)&v79[8] = *((_OWORD *)v3 + 4);
        unint64_t v61 = (std::__shared_weak_count *)v3[7];
        uint64_t v80 = v3[6];
        uint64_t v81 = v61;
        if (v61) {
          atomic_fetch_add_explicit(&v61->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v82[0] = 0;
        if (*(unsigned char *)a2) {
          sub_1000C5A48((uint64_t)v82, (uint64_t)v36);
        }
        std::string v85 = 0;
        uint64_t v62 = (char *)operator new(0x128uLL);
        uint64_t v63 = v62;
        *(void *)uint64_t v62 = off_1019BA6E0;
        *(_OWORD *)(v62 + 8) = *(_OWORD *)v79;
        uint64_t v64 = v80;
        *((void *)v62 + 3) = *(void *)&v79[16];
        *((void *)v62 + 4) = v64;
        uint64_t v65 = v81;
        *((void *)v62 + 5) = v81;
        if (v65) {
          atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        v62[48] = 0;
        uint64_t v66 = (uint64_t)(v62 + 48);
        if (v82[0]) {
          sub_1000C77C8(v66, (uint64_t)&v83);
        }
        std::string v85 = v63;
        (*(void (**)(uint64_t, uint64_t, void **, _OWORD *, void *))(*(void *)v59 + 104))(v59, v60, &v69, buf, v84);
        sub_100060644(v84);
        sub_1000C5D34(v82);
        if (v81) {
          sub_10004D2C8(v81);
        }
        if (v69)
        {
          unsigned int v70 = v69;
          operator delete(v69);
        }
        if (SBYTE7(buf[1]) < 0) {
          operator delete(*(void **)&buf[0]);
        }
        goto LABEL_126;
      }
      uint64_t v58 = (char *)encodeProfileEligibilityCheckAction();
      sub_100058DB0(buf, v58);
      goto LABEL_111;
    }
    long long v56 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v56, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_ERROR, "fetchProfilesForRemoteProvisioning_sync (New Profile): No meta data recieved. Cant run eligibility check.", (uint8_t *)buf, 2u);
      if (!*(unsigned char *)a2) {
LABEL_130:
      }
        __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    sub_1000C5AB4((uint64_t)v86, (uint64_t)v36);
    sub_1002DEB5C(v6, (uint64_t)v86, (uint64_t)(v3 + 8));
    uint64_t v55 = v86;
  }
  else
  {
    if (!*(unsigned char *)a2) {
      goto LABEL_130;
    }
    sub_1000C5AB4((uint64_t)v78, (uint64_t)v36);
    sub_1002DE4A4(v6, (uint64_t)v78, v5, v3[8], v3[9]);
    uint64_t v55 = v78;
  }
  sub_1000C584C((uint64_t)v55);
LABEL_126:
  if (SHIBYTE(v77) < 0) {
    operator delete(v76[0]);
  }
}

void sub_100303900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100303A28(uint64_t a1)
{
  sub_1000C5D34((unsigned char *)(a1 + 40));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

uint64_t sub_100303A60(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(result + 48) = *(void *)(a2 + 48);
  *(void *)(result + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100303A7C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 56);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t sub_100303A8C(void *a1, unsigned __int8 *a2, char *a3)
{
  uint64_t v6 = a1[5];
  sub_1002F66D0((void *)v6, (long long *)(a1[6] + 136), 0);
  int v7 = *a2;
  if (v7 != 2)
  {
    if (v7 == 1)
    {
      int v8 = a2[1];
      if (a2[1]) {
        uint64_t v9 = 0;
      }
      else {
        uint64_t v9 = 2;
      }
      BOOL v10 = v8 == 0;
      BOOL v11 = v8 != 0;
    }
    else
    {
      uint64_t v9 = 0;
      BOOL v10 = 0;
      BOOL v11 = 1;
    }
    goto LABEL_12;
  }
  uint64_t v9 = a2[1];
  if ((int)v9 > 8)
  {
    if (v9 == 9)
    {
      BOOL v11 = 0;
      BOOL v10 = 1;
      uint64_t v9 = 7;
      goto LABEL_12;
    }
    if (v9 == 25)
    {
      BOOL v11 = 0;
      BOOL v10 = 1;
      uint64_t v9 = 11;
      goto LABEL_12;
    }
LABEL_36:
    BOOL v11 = 0;
    BOOL v10 = 1;
    uint64_t v9 = 2;
    goto LABEL_12;
  }
  if (v9 != 6 && v9 != 8) {
    goto LABEL_36;
  }
  BOOL v11 = 0;
  BOOL v10 = 1;
LABEL_12:
  uint64_t v12 = (unsigned char *)(v6 + 5264);
  uint64_t v13 = a1[6];
  uint64_t v14 = *(unsigned __int8 *)(v13 + 215);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(v13 + 200);
  }
  if (v14 == 4)
  {
    if (v15 >= 0) {
      uint64_t v16 = (_DWORD *)(v13 + 192);
    }
    else {
      uint64_t v16 = *(_DWORD **)(v13 + 192);
    }
    BOOL v17 = *v16 == 825241653;
  }
  else
  {
    BOOL v17 = 0;
  }
  if (!v10 && !v17)
  {
    if (*(char *)(v6 + 615) < 0)
    {
      if (*(void *)(v6 + 600)) {
        goto LABEL_26;
      }
    }
    else if (*(unsigned char *)(v6 + 615))
    {
      goto LABEL_26;
    }
    if (!*(unsigned char *)(*(void *)(a1[4] + 8) + 24))
    {
      if (*(char *)(v13 + 159) < 0)
      {
        if (!*(void *)(v13 + 144))
        {
LABEL_40:
          uint64_t v19 = *(NSObject **)(v6 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "fetchProfilesForRemoteProvisioning_sync (fetchResult): No user ICCID", buf, 2u);
          }
          uint64_t v9 = 10;
          goto LABEL_43;
        }
      }
      else if (!*(unsigned char *)(v13 + 159))
      {
        goto LABEL_40;
      }
      if (sub_10010E194(*(void ***)(v6 + 4696), (void **)(v13 + 136)))
      {
        uint64_t v9 = 2;
        goto LABEL_43;
      }
      goto LABEL_40;
    }
  }
LABEL_26:
  if (v11)
  {
    uint64_t v18 = *(void *)(v6 + 208);
    if (v18) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v18 + 16))(v18, v13, v13 + 48, v6 + 592);
    }
    goto LABEL_70;
  }
LABEL_43:
  uint64_t v20 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v21 = asString();
    *(_DWORD *)long long buf = 136315138;
    uint64_t v84 = v21;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I fetchProfilesForRemoteProvisioning_sync (fetchResult): Fetch failed: %s", buf, 0xCu);
  }
  (*(void (**)(void, uint64_t))(**(void **)(v6 + 416) + 288))(*(void *)(v6 + 416), a1[6] + 136);
  if (!*(unsigned char *)(v6 + 584))
  {
    uint64_t v22 = *(void *)(v6 + 304);
    v86[0] = 0;
    v86[240] = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v22 + 256))(v22, v86);
    sub_10030D044((uint64_t)v86);
  }
  uint64_t v23 = *(unsigned __int8 *)(v6 + 639);
  if ((v23 & 0x80u) == 0) {
    uint64_t v24 = *(unsigned __int8 *)(v6 + 639);
  }
  else {
    uint64_t v24 = *(void *)(v6 + 624);
  }
  uint64_t v25 = *(unsigned __int8 *)(v6 + 615);
  int v26 = (char)v25;
  if ((v25 & 0x80u) != 0) {
    uint64_t v25 = *(void *)(v6 + 600);
  }
  if (v24 != v25) {
    goto LABEL_69;
  }
  int v27 = (const void **)(v6 + 616);
  uint64_t v28 = *(unsigned char **)(v6 + 592);
  if (v26 >= 0) {
    uint64_t v29 = (unsigned __int8 *)(v6 + 592);
  }
  else {
    uint64_t v29 = *(unsigned __int8 **)(v6 + 592);
  }
  if ((v23 & 0x80) != 0)
  {
    if (memcmp(*v27, v29, *(void *)(v6 + 624))) {
      goto LABEL_69;
    }
  }
  else if (*(unsigned char *)(v6 + 639))
  {
    while (*(unsigned __int8 *)v27 == *v29)
    {
      int v27 = (const void **)((char *)v27 + 1);
      ++v29;
      if (!--v23) {
        goto LABEL_62;
      }
    }
LABEL_69:
    if (v9) {
      goto LABEL_167;
    }
    goto LABEL_70;
  }
LABEL_62:
  if (v26 < 0)
  {
    *(void *)(v6 + 600) = 0;
  }
  else
  {
    *(unsigned char *)(v6 + 615) = 0;
    uint64_t v28 = (unsigned char *)(v6 + 592);
  }
  *uint64_t v28 = 0;
  uint64_t v30 = *(void *)(v6 + 288);
  if (*(char *)(v6 + 615) < 0)
  {
    sub_10004FC84(__p, *(void **)(v6 + 592), *(void *)(v6 + 600));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v6 + 592);
    uint64_t v73 = *(void *)(v6 + 608);
  }
  (*(void (**)(uint64_t, void **))(*(void *)v30 + 72))(v30, __p);
  if ((SHIBYTE(v73) & 0x80000000) == 0) {
    goto LABEL_69;
  }
  operator delete(__p[0]);
  if (v9) {
    goto LABEL_167;
  }
LABEL_70:
  char v31 = (_OWORD *)(v6 + 592);
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v6 + 416) + 168))(buf);
  if (v85
    && buf[0] == 7
    && (*(unsigned int (**)(void))(**(void **)(v6 + 304) + 296))(*(void *)(v6 + 304)))
  {
    uint64_t v32 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v87 = 0;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Install notification needs to be sent over bootstrap", v87, 2u);
    }
    *(unsigned char *)(v6 + 5528) = 1;
    sub_1002DA714(v6, 1, 1);
  }
  else
  {
    v82[0] = off_1019BA760;
    v82[3] = v82;
    sub_100304928(v6, (uint64_t)v82);
    sub_100060644(v82);
  }
  uint64_t v33 = a1[8];
  v80[0] = 0;
  int v34 = *a3;
  if (*a3)
  {
    sub_1000C5DA8((uint64_t)&v81, (uint64_t)(a3 + 8));
    v80[0] = 1;
  }
  uint64_t v35 = *(void *)(v6 + 416);
  if (!v35)
  {
    uint64_t v36 = *(NSObject **)(v6 + 40);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_119;
    }
    *(_WORD *)uint64_t v87 = 0;
    uint64_t v37 = "#E No PendingTransferHandler";
    goto LABEL_99;
  }
  if (*(char *)(v6 + 615) < 0)
  {
    if (*(void *)(v6 + 600)) {
      goto LABEL_82;
    }
LABEL_97:
    uint64_t v36 = *(NSObject **)(v6 + 40);
    if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_119;
    }
    *(_WORD *)uint64_t v87 = 0;
    uint64_t v37 = "#E No PurchaseIccid";
    goto LABEL_99;
  }
  if (!*(unsigned char *)(v6 + 615)) {
    goto LABEL_97;
  }
LABEL_82:
  if (!*(unsigned char *)(v6 + 2929) || !*(unsigned char *)(v6 + 2928))
  {
    memset(&v77, 0, sizeof(v77));
    memset(&v100, 0, sizeof(v100));
    memset(&v76, 0, sizeof(v76));
    memset(&v75, 0, sizeof(v75));
    if (v34)
    {
      long long v99 = 0u;
      long long v98 = 0u;
      long long v97 = 0u;
      long long v96 = 0u;
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      long long v90 = 0u;
      long long v89 = 0u;
      long long v88 = 0u;
      memset(v87, 0, sizeof(v87));
      VinylInfo::findProfile();
      if (BYTE8(v99))
      {
        std::string::operator=(&v77, (const std::string *)&v92);
        std::string::operator=(&v100, (const std::string *)((char *)&v93 + 8));
        std::string::operator=(&v76, (const std::string *)&v95);
        std::string::operator=(&v75, (const std::string *)((char *)&v96 + 8));
        if (BYTE8(v99)) {
          sub_1000C584C((uint64_t)v87);
        }
      }
      uint64_t v35 = *(void *)(v6 + 416);
    }
    int v38 = (*(uint64_t (**)(uint64_t, uint64_t, std::string *, std::string *, std::string *, std::string *))(*(void *)v35 + 232))(v35, v6 + 592, &v77, &v100, &v76, &v75);
    char v74 = v38;
    if (v38)
    {
      uint64_t v39 = (*(uint64_t (**)(void, std::string *, std::string *, std::string *, std::string *, uint64_t))(**(void **)(v6 + 320) + 344))(*(void *)(v6 + 320), &v77, &v100, &v76, &v75, v6 + 592);
      *(unsigned char *)(v6 + 5561) = v39;
      uint64_t v40 = *(void *)(v6 + 304);
      if (*(char *)(v6 + 615) < 0)
      {
        sub_10004FC84(&v87[16], *(void **)(v6 + 592), *(void *)(v6 + 600));
        uint64_t v39 = *(unsigned char *)(v6 + 5561) != 0;
      }
      else
      {
        *(_OWORD *)&v87[16] = *v31;
        *(void *)&long long v88 = *(void *)(v6 + 608);
      }
      BYTE8(v88) = 1;
      (*(void (**)(uint64_t, uint64_t, uint8_t *, char *, uint64_t))(*(void *)v40 + 488))(v40, v33, v87, &v74, v39);
      if (SBYTE7(v88) < 0) {
        operator delete(*(void **)&v87[16]);
      }
    }
    else
    {
      char v41 = *(NSObject **)(v6 + 40);
      if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v42 = v6 + 592;
        if (*(char *)(v6 + 615) < 0) {
          uint64_t v42 = *(void *)v31;
        }
        uint64_t v43 = asString();
        *(_DWORD *)uint64_t v87 = 136315394;
        *(void *)&v87[4] = v42;
        *(_WORD *)&v87[12] = 2080;
        *(void *)&v87[14] = v43;
        _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Need to skip monitor mode for iccid [%s] with type [%s]", v87, 0x16u);
      }
      if (sub_10010E194(*(void ***)(v6 + 5544), (void **)(v6 + 592))) {
        sub_100340C0C((void *)(v6 + 5536), (void **)(v6 + 592));
      }
    }
    if (SHIBYTE(v75.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v75.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v76.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v76.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v100.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v100.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v77.__r_.__value_.__l.__data_);
    }
    goto LABEL_119;
  }
  uint64_t v36 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v87 = 0;
    uint64_t v37 = "#I Not ready to start monitor mode";
LABEL_99:
    _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, v87, 2u);
  }
LABEL_119:
  sub_1000C60A0(v80);
  if (*a3)
  {
    if (*(unsigned char *)(v6 + 5448))
    {
      long long v99 = 0u;
      long long v98 = 0u;
      long long v97 = 0u;
      long long v96 = 0u;
      long long v95 = 0u;
      long long v94 = 0u;
      long long v93 = 0u;
      long long v92 = 0u;
      long long v91 = 0u;
      long long v90 = 0u;
      long long v89 = 0u;
      long long v88 = 0u;
      memset(v87, 0, sizeof(v87));
      VinylInfo::findProfile();
      if (BYTE8(v99))
      {
        memset(&v77, 0, sizeof(v77));
        (*(void (**)(std::string *__return_ptr))(**(void **)(v6 + 320) + 160))(&v77);
        std::string::size_type v44 = *(void *)(v6 + 5424);
        std::string::size_type v45 = *(void *)(v6 + 5432);
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&__dst, v77.__r_.__value_.__l.__data_, v77.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = v77;
        }
        uint64_t v46 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (v44 != v45)
        {
          unsigned int v70 = v9;
          size_t size = __dst.__r_.__value_.__l.__size_;
          uint64_t v47 = (const void *)__dst.__r_.__value_.__r.__words[0];
          if ((__dst.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v49 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v49 = __dst.__r_.__value_.__l.__size_;
          }
          do
          {
            uint64_t v50 = *(unsigned __int8 *)(v44 + 23);
            int v51 = (char)v50;
            if ((v50 & 0x80u) != 0) {
              uint64_t v50 = *(void *)(v44 + 8);
            }
            if (v49 == v50)
            {
              if (v51 >= 0) {
                BOOL v52 = (unsigned __int8 *)v44;
              }
              else {
                BOOL v52 = *(unsigned __int8 **)v44;
              }
              if ((v46 & 0x80) != 0)
              {
                uint64_t v55 = v31;
                long long v56 = v47;
                int v57 = memcmp(v47, v52, size);
                uint64_t v47 = v56;
                char v31 = v55;
                if (!v57)
                {
                  uint64_t v9 = v70;
                  goto LABEL_146;
                }
              }
              else
              {
                if (!v46)
                {
                  uint64_t v9 = v70;
                  goto LABEL_147;
                }
                p_dst = &__dst;
                uint64_t v54 = v46;
                while (p_dst->__r_.__value_.__s.__data_[0] == *v52)
                {
                  p_dst = (std::string *)((char *)p_dst + 1);
                  ++v52;
                  if (!--v54) {
                    goto LABEL_144;
                  }
                }
              }
            }
            v44 += 192;
          }
          while (v44 != v45);
          std::string::size_type v44 = v45;
LABEL_144:
          uint64_t v9 = v70;
        }
        if ((v46 & 0x80) != 0) {
LABEL_146:
        }
          operator delete(__dst.__r_.__value_.__l.__data_);
LABEL_147:
        uint64_t v58 = *(void *)(v6 + 5432);
        uint64_t v12 = (unsigned char *)(v6 + 5264);
        if (v44 != v58)
        {
          uint64_t v59 = *(NSObject **)(v6 + 40);
          if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
          {
            if (*(char *)(v44 + 23) < 0) {
              std::string::size_type v44 = *(void *)v44;
            }
            LODWORD(v100.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)v100.__r_.__value_.__r.__words + 4) = v44;
            _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I Profile matches carrier setup item from [%s] is installed", (uint8_t *)&v100, 0xCu);
            uint64_t v58 = *(void *)(v6 + 5432);
          }
          uint64_t v60 = *(void *)(v6 + 5424);
          while (v58 != v60)
          {
            v58 -= 192;
            sub_10030A7F8(v58);
          }
          *(void *)(v6 + 5432) = v60;
        }
        if (SHIBYTE(v77.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v77.__r_.__value_.__l.__data_);
        }
        if (BYTE8(v99)) {
          sub_1000C584C((uint64_t)v87);
        }
      }
    }
  }
  unint64_t v61 = *(std::__shared_weak_count **)(v6 + 184);
  if (v61)
  {
    uint64_t v62 = std::__shared_weak_count::lock(v61);
    if (v62)
    {
      uint64_t v63 = v62;
      uint64_t v64 = *(void *)(v6 + 176);
      if (v64) {
        (*(void (**)(uint64_t, _OWORD *))(*(void *)v64 + 64))(v64, v31);
      }
      sub_10004D2C8(v63);
    }
  }
  *(unsigned char *)(v6 + 1520) = 1;
  if (v85) {
    sub_10030D10C((uint64_t)buf);
  }
LABEL_167:
  if ((*(unsigned int (**)(void))(**(void **)(v6 + 304) + 296))(*(void *)(v6 + 304)))
  {
    uint64_t v65 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v65, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I fetchProfilesForRemoteProvisioning_sync (fetchResult): Deasserting bootstrap", buf, 2u);
    }
    sub_1002DA714(v6, 0, 1);
  }
  uint64_t v66 = a1[9];
  buf[0] = 0;
  if (*a3)
  {
    sub_1000C5DA8((uint64_t)&v84 + 4, (uint64_t)(a3 + 8));
    buf[0] = 1;
  }
  (*(void (**)(uint64_t, uint64_t, uint8_t *))(v66 + 16))(v66, v9, buf);
  uint64_t result = (uint64_t)sub_1000C60A0(buf);
  uint64_t v68 = *(void *)(v6 + 192);
  if (v68)
  {
    char v69 = *a3;
    if (*a3)
    {
      sub_1000C5DA8((uint64_t)v79, (uint64_t)(a3 + 8));
      char v69 = 1;
    }
    else
    {
      v79[0] = 0;
    }
    v79[88] = v69;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v68 + 24))(v68, v79);
    uint64_t result = sub_1000C612C((uint64_t)v79);
  }
  *uint64_t v12 = 0;
  *(unsigned char *)(v6 + 584) = 0;
  if (*(void *)(v6 + 5224))
  {
    sub_10031F4D0((uint64_t)v78, v6 + 5200);
    sub_1002DF908(v6, 0, (uint64_t)v78);
  }
  return result;
}

void sub_1003047CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,char a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (*(char *)(v70 - 105) < 0) {
    operator delete(*(void **)(v70 - 128));
  }
  if (a37 < 0) {
    operator delete(a32);
  }
  sub_1000C60A0(&a54);
  if (LOBYTE(STACK[0x680])) {
    sub_10030D10C((uint64_t)&a70);
  }
  _Unwind_Resume(a1);
}

void sub_100304928(uint64_t a1, uint64_t a2)
{
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v11 = 0;
  if (*(char *)(a1 + 615) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a1 + 592), *(void *)(a1 + 600));
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)(a1 + 592);
    uint64_t v11 = *(void *)(a1 + 608);
  }
  long long v8 = 0uLL;
  uint64_t v9 = 0;
  bzero(v25, 0x4E8uLL);
  uint64_t v4 = *(void *)(a1 + 416);
  if (v4)
  {
    (*(void (**)(long long *__return_ptr))(*(void *)v4 + 256))(&v22);
    sub_10005CBB4((uint64_t *)&v8);
    long long v8 = v22;
    uint64_t v9 = v23;
    uint64_t v23 = 0;
    long long v22 = 0uLL;
    uint64_t v12 = (void **)&v22;
    sub_100047F64(&v12);
    (*(void (**)(long long *__return_ptr))(**(void **)(a1 + 416) + 168))(&v22);
    sub_100310928((uint64_t)v25, (uint64_t)&v22);
    if (v24) {
      sub_10030D10C((uint64_t)&v22);
    }
  }
  uint64_t v5 = *(void *)(a1 + 336);
  uint64_t v13 = a1;
  if (SHIBYTE(v11) < 0)
  {
    sub_10004FC84(&__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    long long __p = *(_OWORD *)__dst;
    uint64_t v15 = v11;
  }
  long long v16 = 0uLL;
  uint64_t v17 = 0;
  sub_1000302C0((char *)&v16, (long long *)v8, *((long long **)&v8 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v8 + 1) - v8) >> 3));
  sub_100311A9C(v18, (uint64_t)v25);
  sub_1000DFC90((uint64_t)v19, a2);
  uint64_t v21 = 0;
  uint64_t v6 = (char *)operator new(0x548uLL);
  uint64_t v7 = v13;
  *(void *)uint64_t v6 = off_1019BAAE0;
  *((void *)v6 + 1) = v7;
  *((_OWORD *)v6 + 1) = __p;
  *((void *)v6 + 4) = v15;
  long long __p = 0uLL;
  uint64_t v15 = 0;
  *(_OWORD *)(v6 + 40) = v16;
  *((void *)v6 + 7) = v17;
  uint64_t v17 = 0;
  long long v16 = 0uLL;
  sub_1003489A0(v6 + 64, (uint64_t)v18);
  sub_100023950((uint64_t)(v6 + 1320), (uint64_t)v19);
  uint64_t v21 = v6;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v5 + 64))(v5, 1, v20);
  sub_100060644(v20);
  sub_100060644(v19);
  if (v18[1248]) {
    sub_10030D10C((uint64_t)v18);
  }
  *(void *)&long long v22 = &v16;
  sub_100047F64((void ***)&v22);
  if (SHIBYTE(v15) < 0) {
    operator delete((void *)__p);
  }
  if (v26) {
    sub_10030D10C((uint64_t)v25);
  }
  v25[0] = (void **)&v8;
  sub_100047F64(v25);
  if (SHIBYTE(v11) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100304C48(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (LOBYTE(STACK[0xF70])) {
    sub_10030D10C((uint64_t)&STACK[0xA90]);
  }
  STACK[0xA90] = (unint64_t)&a9;
  sub_100047F64((void ***)&STACK[0xA90]);
  if (a18 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void *sub_100304D44(void *a1, void *a2)
{
  uint64_t v3 = a2[7];
  a1[6] = a2[6];
  a1[7] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[9];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[9] = result;
  return result;
}

void sub_100304D90(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 72);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 56);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

void sub_100304DE4(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 1496))
  {
    if (*(unsigned char *)(a1 + 738) == 2)
    {
      sub_100305208(a2, 1);
      sub_1003052D4(a1 + 712);
      return;
    }
    if (*(unsigned char *)(a1 + 1104))
    {
      sub_100058DB0(buf, "CSN");
      uint64_t v5 = sub_100046F68(a1 + 1080, (void **)buf);
      if (SHIBYTE(v20[0]) < 0) {
        operator delete(*(void **)buf);
      }
      if ((void **)(a1 + 1088) != v5)
      {
        *(void *)long long buf = 0;
        uint64_t v19 = 0;
        v20[0] = 0;
        sub_100058DB0(__p, "CSN");
        BOOL v10 = __p;
        sub_100327F4C((uint64_t **)(a1 + 1080), __p, (uint64_t)&unk_10144E20E, (_OWORD **)&v10);
        ctu::parse_hex();
        if (v17 < 0) {
          operator delete(__p[0]);
        }
        int v6 = **(unsigned char **)buf;
        uint64_t v19 = *(void **)buf;
        operator delete(*(void **)buf);
        goto LABEL_27;
      }
    }
    __p[0] = 0;
    __p[1] = 0;
    char v16 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(a1 + 304) + 352))(__p);
    if (v16)
    {
      int v6 = LOBYTE(__p[0]);
LABEL_27:
      uint64_t v7 = *(void *)(a1 + 336);
      uint64_t v11 = a1;
      sub_100345B34((uint64_t)v12, a2);
      uint64_t v14 = 0;
      long long v8 = operator new(0x30uLL);
      uint64_t v9 = v11;
      void *v8 = off_1019BA7E0;
      v8[1] = v9;
      sub_10034618C((uint64_t)(v8 + 2), (uint64_t)v12);
      uint64_t v14 = v8;
      (*(void (**)(uint64_t, void, void *))(*(void *)v7 + 96))(v7, ((v6 - 89) < 9) & (0x181u >> (v6 - 89)), v13);
      sub_100333DB8(v13);
      sub_100345BCC(v12);
      return;
    }
    sub_1003052D4(a1 + 712);
    char v25 = 0;
    v26[0] = 0;
    char v27 = 0;
    LOBYTE(v28) = 0;
    char v30 = 0;
    uint64_t v19 = 0;
    v20[0] = 0;
    *(void *)long long buf = 0;
    *(_DWORD *)((char *)v20 + 7) = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    v24[0] = 0;
    sub_100305208(a2, 0);
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Failure: No websheet launch info", buf, 2u);
    }
    char v25 = 0;
    v26[0] = 0;
    char v27 = 0;
    LOBYTE(v28) = 0;
    char v30 = 0;
    uint64_t v19 = 0;
    v20[0] = 0;
    *(void *)long long buf = 0;
    *(_DWORD *)((char *)v20 + 7) = 0;
    uint64_t v22 = 0;
    uint64_t v23 = 0;
    uint64_t v21 = 0;
    v24[0] = 0;
    sub_100305208(a2, 0);
  }
  if (v30 && v29 < 0) {
    operator delete(v28);
  }
  if (v27) {
    sub_100310520((uint64_t)v26);
  }
  sub_1003107E0((uint64_t)v24);
  if (SHIBYTE(v23) < 0) {
    operator delete(v21);
  }
  if (SHIBYTE(v20[0]) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_10030519C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
}

uint64_t sub_100305208(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_10030525C(uint64_t a1)
{
  uint64_t v2 = a1 + 56;
  if (*(unsigned char *)(a1 + 776) && *(char *)(a1 + 775) < 0) {
    operator delete(*(void **)(a1 + 752));
  }
  if (*(unsigned char *)(a1 + 744)) {
    sub_100310520(a1 + 400);
  }
  sub_1003107E0(v2);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003052D4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 784))
  {
    uint64_t v2 = a1 + 56;
    if (*(unsigned char *)(a1 + 776) && *(char *)(a1 + 775) < 0) {
      operator delete(*(void **)(a1 + 752));
    }
    if (*(unsigned char *)(a1 + 744)) {
      sub_100310520(a1 + 400);
    }
    sub_1003107E0(v2);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 784) = 0;
  }
}

void sub_100305354(uint64_t a1, uint64_t a2)
{
}

void *sub_10030535C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_100345B34((uint64_t)v5, a3);
  sub_100304DE4(a1, (uint64_t)v5);
  return sub_100345BCC(v5);
}

void sub_1003053D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100345BCC((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_1003053EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_10030535C(a1 - 80, a2, a3);
}

void sub_1003053F4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 184);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      char v4 = v3;
      uint64_t v5 = *(void *)(a1 + 176);
      if (!v5)
      {
LABEL_21:
        sub_10004D2C8(v4);
        return;
      }
      CFMutableDictionaryRef theDict = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
      *(void *)bytes = (*(uint64_t (**)(void))(**(void **)(a1 + 680) + 104))(*(void *)(a1 + 680));
      uint64_t v15 = v6;
      uint64_t v7 = CFDataCreate(kCFAllocatorDefault, bytes, 16);
      CFTypeRef cf = v7;
      if (!*(unsigned char *)(a1 + 1496))
      {
        BOOL v9 = 0;
LABEL_18:
        uint64_t v11 = v7;
        if (v7) {
          CFRetain(v7);
        }
        sub_10004EFE4(&v10, (CFTypeRef *)&theDict);
        (*(void (**)(uint64_t, const void **, void, BOOL, const void **))(*(void *)v5 + 80))(v5, &v11, 0, v9, &v10);
        sub_100057D78(&v10);
        sub_100030068(&v11);
        sub_100030068(&cf);
        sub_10005717C((const void **)&theDict);
        goto LABEL_21;
      }
      if (*(char *)(a1 + 767) < 0)
      {
        if (*(void *)(a1 + 752))
        {
LABEL_7:
          if (*(unsigned char *)(a1 + 737))
          {
            CFStringRef v8 = @"CTCellularPlanLaunchOptionsResponseTypeIsBuddyMLKey";
          }
          else
          {
            if (*(unsigned char *)(a1 + 738) != 2) {
              goto LABEL_15;
            }
            CFStringRef v8 = @"CTCellularPlanLaunchOptionsIsJsonWebsheetRequestKey";
          }
LABEL_14:
          CFDictionarySetValue(theDict, v8, kCFBooleanTrue);
          if (!*(unsigned char *)(a1 + 1496))
          {
            BOOL v9 = 0;
            goto LABEL_17;
          }
LABEL_15:
          BOOL v9 = *(unsigned __int8 *)(a1 + 738) == 1;
LABEL_17:
          uint64_t v7 = cf;
          goto LABEL_18;
        }
      }
      else if (*(unsigned char *)(a1 + 767))
      {
        goto LABEL_7;
      }
      CFStringRef v8 = @"CTCellularPlanLaunchOptionsFlowTypeIsLegacyKey";
      goto LABEL_14;
    }
  }
}

void sub_1003055E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v6 = va_arg(va1, const void *);
  sub_100030068((const void **)va);
  sub_10005717C((const void **)va1);
  sub_10004D2C8(v4);
  _Unwind_Resume(a1);
}

void sub_100305644(uint64_t a1)
{
}

void sub_10030564C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_100305664(uint64_t a1, char a2, long long *a3, uint64_t a4)
{
  v8[0] = 0;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&v9, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v9 = *a3;
    uint64_t v10 = *((void *)a3 + 2);
  }
  v8[0] = 1;
  v7[0] = 0;
  sub_100346768(v7, a4);
  (*(void (**)(uint64_t, BOOL, char *, unsigned char *))(a1 + 16))(a1, a2 != 0, v8, v7);
  sub_100347114(v7);
  if (v8[0])
  {
    if (SHIBYTE(v10) < 0) {
      operator delete((void *)v9);
    }
  }
}

void sub_100305750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

void sub_10030578C(uint64_t a1, uint64_t *a2, uint64_t a3)
{
}

void sub_1003057A4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E a pending websheet did launch callback is being failed", v5, 2u);
  }
  uint64_t v4 = *a2;
  char v6 = 0;
  v5[0] = 0;
  (*(void (**)(uint64_t))(v4 + 16))(v4);
  sub_100347114(v5);
  if (v6)
  {
    if (v8 < 0) {
      operator delete(v7);
    }
  }
}

void sub_100305880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, char a9)
{
  sub_100347114(&a9);
  if (*(unsigned char *)(v9 - 72))
  {
    if (*(char *)(v9 - 41) < 0) {
      operator delete(*(void **)(v9 - 64));
    }
  }
  _Unwind_Resume(a1);
}

void sub_1003058AC(uint64_t a1, uint64_t *a2)
{
}

const void **sub_1003058B4(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I a pending get plan callback is present, get plans", buf, 2u);
  }
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 304) + 240))(&v8);
  uint64_t v5 = *a2;
  char v6 = v8;
  char v8 = 0;
  *(void *)long long buf = v6;
  (*(void (**)(void))(v5 + 16))();
  sub_100044D00((const void **)buf);
  return sub_100044D00(&v8);
}

void sub_100305980(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  sub_100044D00((const void **)va1);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

const void **sub_10030599C(uint64_t a1, uint64_t *a2)
{
  return sub_1003058B4(a1 - 80, a2);
}

uint64_t sub_1003059A4(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 680;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 688);
  *(_OWORD *)uint64_t v4 = 0u;
  if (v5) {
    sub_10004D2C8(v5);
  }
  char v6 = *(std::__shared_weak_count **)(a1 + 704);
  *(void *)(v4 + 16) = 0;
  *(void *)(v4 + 24) = 0;
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (*(unsigned char *)(a1 + 587))
  {
    *(unsigned char *)(a1 + 587) = 0;
    uint64_t v7 = *(void *)(a1 + 336);
    v34[3] = 0;
    (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v7 + 72))(v7, 1, 1, v34);
    char v6 = (std::__shared_weak_count *)sub_10032493C(v34);
  }
  if (!*(void *)(a1 + 4976))
  {
LABEL_13:
    *(unsigned char *)(a1 + 584) = 0;
    if (!a2) {
      goto LABEL_15;
    }
LABEL_14:
    uint64_t v9 = *(void *)(a1 + 304);
    v33[0] = 0;
    v33[240] = 0;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v9 + 256))(v9, v33);
    sub_10030D044((uint64_t)v33);
    char v10 = 0;
    goto LABEL_28;
  }
  uint64_t v8 = a1 + 4712;
  if (a2 == 3)
  {
    sub_1002E78DC(v8, 45);
    *(unsigned char *)(a1 + 584) = 0;
    goto LABEL_14;
  }
  if (a2)
  {
    sub_1002E78DC(v8, 18);
    goto LABEL_13;
  }
  sub_1002E78DC(v8, 0);
  *(unsigned char *)(a1 + 584) = 0;
LABEL_15:
  if ((capabilities::ct::defaultVinylCardTypeToGSMA((capabilities::ct *)v6) & 1) == 0)
  {
    uint64_t v30 = 0;
    uint64_t v31 = 0;
    char v32 = 0;
    uint64_t v11 = (uint64_t *)(a1 + 592);
    (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 304) + 360))(&v30);
    if (v32)
    {
      uint64_t v12 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v13 = a1 + 592;
        if (*(char *)(a1 + 615) < 0) {
          uint64_t v13 = *v11;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v13;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Disable purchase ICCID (%s)", buf, 0xCu);
      }
      uint64_t v14 = *(void *)(a1 + 240);
      v24[0] = 0;
      v24[1] = 0;
      uint64_t v23 = v24;
      *(void *)&long long v28 = off_1019BA860;
      char v29 = &v28;
      (*(void (**)(uint64_t, uint64_t, uint64_t, char ***, long long *))(*(void *)v14 + 64))(v14, v30, v31, &v23, &v28);
      sub_1000C6B58(&v28);
      sub_10005CD2C((uint64_t)&v23, v24[0]);
    }
    uint64_t v15 = *(void *)(a1 + 336);
    if (*(char *)(a1 + 615) < 0)
    {
      sub_10004FC84(buf, *(void **)(a1 + 592), *(void *)(a1 + 600));
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)v11;
      uint64_t v27 = *(void *)(a1 + 608);
    }
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    v25[0] = (void **)&v20;
    v25[1] = 0;
    uint64_t v20 = (char *)operator new(0x18uLL);
    uint64_t v21 = v20;
    uint64_t v22 = v20 + 24;
    uint64_t v21 = sub_1000D8A18((uint64_t)&v22, (long long *)buf, &v28, v20);
    (*(void (**)(uint64_t, uint64_t, char **))(*(void *)v15 + 120))(v15, 1, &v20);
    v25[0] = (void **)&v20;
    sub_100047F64(v25);
    if (SHIBYTE(v27) < 0) {
      operator delete(*(void **)buf);
    }
  }
  char v10 = 1;
LABEL_28:
  sub_1002FA1F8(a1);
  if (capabilities::ct::getProvisioningProfileSupport(v16) == 1
    && ((*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304)) & 1) == 0)
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 312))(buf);
    uint64_t v17 = HIBYTE(v27);
    if (v27 < 0) {
      uint64_t v17 = *(void *)&buf[8];
    }
    if (v17)
    {
      BOOL v18 = *(unsigned char *)(a1 + 1512) != 0;
      if ((SHIBYTE(v27) & 0x80000000) == 0) {
        goto LABEL_34;
      }
    }
    else
    {
      BOOL v18 = 1;
      if ((SHIBYTE(v27) & 0x80000000) == 0)
      {
LABEL_34:
        if (!v18) {
          goto LABEL_39;
        }
LABEL_38:
        sub_1002DA714(a1, 1, 0);
        goto LABEL_39;
      }
    }
    operator delete(*(void **)buf);
    if (!v18) {
      goto LABEL_39;
    }
    goto LABEL_38;
  }
LABEL_39:
  if (*(unsigned char *)(a1 + 1706))
  {
    sub_1002DC408(a1);
    *(unsigned char *)(a1 + 1706) = 0;
  }
  else if (*(unsigned char *)(a1 + 1568))
  {
    if (*(char *)(a1 + 1607) < 0) {
      operator delete(*(void **)(a1 + 1584));
    }
    *(unsigned char *)(a1 + 1568) = 0;
  }
  if ((v10 & 1) == 0) {
    (*(void (**)(void, void))(**(void **)(a1 + 304) + 96))(*(void *)(a1 + 304), 0);
  }
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
}

void sub_100305E68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_100305EEC(uint64_t a1, int a2)
{
  return sub_1003059A4(a1 - 80, a2);
}

void sub_100305EF4(void *a1, uint64_t *a2, uint64_t a3, void **a4)
{
  uint64_t v5 = (std::__shared_weak_count *)a1[2];
  if (!v5 || (v8 = *a2, uint64_t v9 = a2[1], v10 = a1[1], (v11 = std::__shared_weak_count::lock(v5)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  uint64_t v14 = a1[30];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 1174405120;
  v16[2] = sub_100306068;
  void v16[3] = &unk_1019B6A70;
  void v16[4] = a1;
  v16[5] = v10;
  uint64_t v17 = v12;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  uint64_t v15 = *a4;
  if (*a4) {
    uint64_t v15 = _Block_copy(v15);
  }
  aBlock = v15;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v14 + 48))(v14, v8, v9, a3, v16);
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v17) {
    std::__shared_weak_count::__release_weak(v17);
  }
  std::__shared_weak_count::__release_weak(v12);
}

void sub_100306038(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (a15) {
    std::__shared_weak_count::__release_weak(a15);
  }
  std::__shared_weak_count::__release_weak(v16);
  _Unwind_Resume(a1);
}

void sub_100306068(uint64_t a1, unsigned __int8 *a2)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  _OWORD v10[2] = sub_1003061F8;
  void v10[3] = &unk_1019B6A40;
  long long v9 = *(_OWORD *)(a1 + 32);
  long long v11 = v9;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  uint64_t v12 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  __int16 v14 = 0;
  if (*a2 - 1 <= 1) {
    __int16 v14 = *(_WORD *)a2;
  }
  uint64_t v3 = *(void **)(a1 + 56);
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  aBlock = v3;
  uint64_t v4 = *(std::__shared_weak_count **)(v9 + 16);
  if (!v4 || (v5 = *(void *)(v9 + 8), (char v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v7 = v6;
  uint64_t v8 = *(NSObject **)(v9 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  char v16 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v10;
  dispatch_async(v8, block);
  if (v16) {
    sub_10004D2C8(v16);
  }
  sub_10004D2C8(v7);
  if (aBlock) {
    _Block_release(aBlock);
  }
  LOBYTE(v14) = 0;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
}

void sub_1003061F8(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    uint64_t v3 = *(void *)(a1 + 32);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(a1 + 40))
      {
        int v6 = *(unsigned __int8 *)(a1 + 64);
        uint64_t v7 = *(NSObject **)(v3 + 40);
        BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
        if (v6 == 1)
        {
          if (v8)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I User Consent successfully sent", buf, 2u);
          }
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        }
        else
        {
          if (v8)
          {
            *(_WORD *)long long v9 = 0;
            _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I User consent send failure", v9, 2u);
          }
          (*(void (**)(void))(*(void *)(a1 + 56) + 16))();
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_1003062F4(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void *sub_10030630C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = *(void **)(a2 + 56);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 56) = result;
  *(_WORD *)(a1 + 64) = 0;
  int v6 = *(unsigned __int8 *)(a2 + 64);
  if ((v6 - 1) <= 1)
  {
    *(unsigned char *)(a1 + 64) = v6;
    *(unsigned char *)(a1 + 65) = *(unsigned char *)(a2 + 65);
  }
  return result;
}

void sub_10030637C(uint64_t a1)
{
  *(unsigned char *)(a1 + 64) = 0;
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void *sub_1003063D4(void *a1, void *a2)
{
  uint64_t v3 = a2[6];
  a1[5] = a2[5];
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t result = (void *)a2[7];
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  a1[7] = result;
  return result;
}

void sub_100306420(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 56);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3)
  {
    std::__shared_weak_count::__release_weak(v3);
  }
}

void sub_100306474(uint64_t a1, uint64_t *a2, uint64_t a3, void **a4)
{
}

void sub_100306484(uint64_t a1, int a2)
{
  if (*(unsigned char *)(a1 + 1508))
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = (void *)asString();
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Overwriting fetch failure error: %s", (uint8_t *)__p, 0xCu);
    }
  }
  *(_DWORD *)(a1 + 1504) = a2;
  *(unsigned char *)(a1 + 1508) = 1;
  uint64_t v5 = sub_1002D4620(a1, (os_log_t *)(a1 + 40), a2);
  if (!*(unsigned char *)(a1 + 1705))
  {
    LOBYTE(__p[0]) = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    __p[1] = 0;
    __n128 v6 = sub_10031EB44((unsigned __int8 *)(a1 + 1568), (uint64_t)__p);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[1]);
    }
    if (!*(unsigned char *)(a1 + 1568)) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    *(unsigned char *)(a1 + 1576) = v5;
    (*(void (**)(void **__return_ptr, __n128))(**(void **)(a1 + 304) + 448))(__p, v6);
    if (!*(unsigned char *)(a1 + 1568)) {
      __assert_rtn("operator->", "optional.hpp", 1222, "this->is_initialized()");
    }
    uint64_t v7 = (void **)(a1 + 1584);
    if (*(char *)(a1 + 1607) < 0) {
      operator delete(*v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
    *(void *)(a1 + 1600) = v9;
  }
  (*(void (**)(void, uint64_t))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), v5);
  if (*(void *)(a1 + 4976)) {
    sub_1002E78DC(a1 + 4712, 18);
  }
}

void sub_10030668C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003066B0(uint64_t a1, int a2)
{
}

void sub_1003066B8(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#E Does not support entitlement subscription", v2, 2u);
  }
}

void sub_100306718(uint64_t a1)
{
}

uint64_t sub_100306724(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 160) + 24))(*(void *)(a1 + 160), 0);
}

uint64_t sub_100306750(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(**(void **)(a1 + 80) + 24))(*(void *)(a1 + 80), 0);
}

BOOL sub_10030677C(uint64_t a1, uint64_t *a2)
{
  if (*(char *)(a1 + 615) < 0)
  {
    if (!*(void *)(a1 + 600)) {
      goto LABEL_5;
    }
LABEL_15:
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 360))(v9);
    return v10 != 0;
  }
  if (*(unsigned char *)(a1 + 615)) {
    goto LABEL_15;
  }
LABEL_5:
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  if (v5 == *a2) {
    goto LABEL_15;
  }
  __n128 v6 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Purchase iccid empty, checking prefixes", v9, 2u);
    uint64_t v4 = *a2;
    uint64_t v5 = a2[1];
  }
  if (v4 == v5) {
    return 0;
  }
  do
  {
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(a1 + 304) + 360))(v9);
    BOOL result = v10 != 0;
    v4 += 24;
    if (v10) {
      BOOL v8 = 1;
    }
    else {
      BOOL v8 = v4 == v5;
    }
  }
  while (!v8);
  return result;
}

BOOL sub_1003068F8(uint64_t a1, uint64_t *a2)
{
  return sub_10030677C(a1 - 80, a2);
}

uint64_t sub_100306900(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#E Does not support entitlement subscription", v3, 2u);
  }
  return 1;
}

uint64_t sub_100306964(uint64_t a1)
{
  return 1;
}

uint64_t sub_100306984(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#E Does not support entitlement subscription", v3, 2u);
  }
  return 0;
}

uint64_t sub_1003069E8(uint64_t a1)
{
  return 0;
}

uint64_t sub_100306A08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 432);
  uint64_t v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304));
  BOOL v6 = *(unsigned __int8 *)(a1 + 2592) == 1;
  BOOL v7 = *(unsigned __int8 *)(a1 + 2289) == 1;
  BOOL v8 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, BOOL, BOOL))(*(void *)v4 + 48);

  return v8(v4, a2, v5, v6, v7);
}

uint64_t sub_100306ABC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 304) + 296))();
}

BOOL sub_100306AEC(uint64_t a1)
{
  return *(unsigned char *)(a1 + 2592) == 1;
}

uint64_t sub_100306AFC(uint64_t a1, uint64_t a2)
{
  return sub_100306A08(a1 - 80, a2);
}

uint64_t *sub_100306B04(uint64_t a1, uint64_t a2)
{
  int v4 = *(unsigned __int8 *)(a2 + 168);
  if (*(unsigned char *)(a2 + 4) == 15)
  {
    if (v4 == 2)
    {
      int v5 = *(_DWORD *)(a1 + 5268);
      if (v5) {
        goto LABEL_22;
      }
    }
    else
    {
      if (v4 != 1) {
        goto LABEL_22;
      }
      int v5 = *(_DWORD *)(a1 + 5268);
    }
    *(_DWORD *)(a2 + 136) = 3 - v5;
  }
  if (v4 != 1) {
    goto LABEL_22;
  }
  (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v19);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v19);
  BOOL v7 = ServiceMap;
  BOOL v8 = "22TravelHandlerInterface";
  if (((unint64_t)"22TravelHandlerInterface" & 0x8000000000000000) != 0)
  {
    uint64_t v9 = (unsigned __int8 *)((unint64_t)"22TravelHandlerInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      BOOL v8 = (const char *)v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v21 = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)&v21);
  if (!v12)
  {
    uint64_t v14 = 0;
    goto LABEL_15;
  }
  uint64_t v14 = v12[3];
  uint64_t v13 = (std::__shared_weak_count *)v12[4];
  if (!v13)
  {
LABEL_15:
    std::mutex::unlock(v7);
    uint64_t v13 = 0;
    char v15 = 1;
    goto LABEL_16;
  }
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v7);
  atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v13);
  char v15 = 0;
LABEL_16:
  if (v20) {
    sub_10004D2C8(v20);
  }
  if (v14) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 8))(v14, a2 + 40);
  }
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
LABEL_22:
  if ((*(unsigned int (**)(void))(**(void **)(a1 + 304) + 296))(*(void *)(a1 + 304))
    && *(unsigned char *)(a1 + 2592) != 1)
  {
    LOBYTE(v16) = 3;
LABEL_28:
    *(unsigned char *)(a2 + 170) = v16;
    goto LABEL_29;
  }
  int v16 = *(unsigned __int8 *)(a1 + 4656);
  if (v16 == 1 || v16 == 2) {
    goto LABEL_28;
  }
LABEL_29:
  BOOL result = (uint64_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 432) + 152))(*(void *)(a1 + 432), a2);
  if (*(char *)(a1 + 615) < 0)
  {
    if (!*(void *)(a1 + 600)) {
      return result;
    }
  }
  else if (!*(unsigned char *)(a1 + 615))
  {
    return result;
  }
  char v18 = *(unsigned char *)(a2 + 4);
  uint64_t v19 = (Registry *)(a1 + 592);
  BOOL result = sub_100340D20((uint64_t **)(a1 + 5536), (void **)(a1 + 592), (long long **)&v19);
  *((unsigned char *)result + 56) = v18;
  return result;
}

void sub_100306D64(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100306D90(uint64_t a1, uint64_t a2)
{
  return sub_100306B04(a1 - 80, a2);
}

void sub_100306D98(uint64_t a1)
{
  (***(void (****)(std::string *__return_ptr))(a1 + 320))(&v66);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)v66.__r_.__value_.__l.__data_);
  uint64_t v3 = ServiceMap;
  if (v4 < 0)
  {
    int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v63 = (std::string::value_type *)v4;
  BOOL v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)&v63);
  if (v8)
  {
    uint64_t v10 = v8[3];
    uint64_t v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  uint64_t v9 = 0;
  char v11 = 1;
LABEL_9:
  if (v66.__r_.__value_.__l.__size_) {
    sub_10004D2C8((std::__shared_weak_count *)v66.__r_.__value_.__l.__size_);
  }
  if (v10) {
    BOOL v12 = (*(unsigned int (**)(uint64_t))(*(void *)v10 + 16))(v10) == 2;
  }
  else {
    BOOL v12 = 0;
  }
  memset(&v66, 0, sizeof(v66));
  uint64_t v13 = (char *)asString();
  sub_100058DB0(&v66, v13);
  uint64_t v63 = 0;
  std::string::size_type v64 = 0;
  uint64_t v65 = 0;
  uint64_t v14 = (char *)asString();
  sub_100058DB0(&v63, v14);
  long long __dst = 0uLL;
  std::string::size_type v62 = 0;
  char v15 = std::string::append(&v66, ":", 1uLL);
  if (v65 >= 0) {
    int v16 = (const std::string::value_type *)&v63;
  }
  else {
    int v16 = v63;
  }
  if (v65 >= 0) {
    std::string::size_type v17 = HIBYTE(v65);
  }
  else {
    std::string::size_type v17 = v64;
  }
  char v18 = std::string::append(v15, v16, v17);
  if (SHIBYTE(v18->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(&__dst, v18->__r_.__value_.__l.__data_, v18->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    std::string::size_type v62 = v18->__r_.__value_.__r.__words[2];
    long long __dst = v19;
  }
  uint64_t v20 = *(void *)(a1 + 4616);
  if (v20)
  {
    uint64_t v21 = a1 + 4616;
    uint64_t v22 = a1 + 4616;
    uint64_t v23 = *(void *)(a1 + 4616);
    do
    {
      int v24 = *(_DWORD *)(v23 + 28);
      BOOL v25 = v24 < 1;
      if (v24 >= 1) {
        char v26 = (uint64_t *)v23;
      }
      else {
        char v26 = (uint64_t *)(v23 + 8);
      }
      if (!v25) {
        uint64_t v22 = v23;
      }
      uint64_t v23 = *v26;
    }
    while (*v26);
    if (v22 == v21 || *(int *)(v22 + 28) > 1)
    {
      char v32 = "kUnknown";
    }
    else
    {
      uint64_t v27 = a1 + 4616;
      uint64_t v28 = *(void *)(a1 + 4616);
      do
      {
        int v29 = *(_DWORD *)(v28 + 28);
        BOOL v30 = v29 < 1;
        if (v29 >= 1) {
          uint64_t v31 = (uint64_t *)v28;
        }
        else {
          uint64_t v31 = (uint64_t *)(v28 + 8);
        }
        if (!v30) {
          uint64_t v27 = v28;
        }
        uint64_t v28 = *v31;
      }
      while (*v31);
      if (v27 == v21 || *(int *)(v27 + 28) >= 2) {
        uint64_t v27 = a1 + 4616;
      }
      if (*(unsigned char *)(v27 + 32)) {
        char v32 = "True";
      }
      else {
        char v32 = "False";
      }
    }
    uint64_t v33 = a1 + 4616;
    uint64_t v34 = *(void *)(a1 + 4616);
    do
    {
      int v35 = *(_DWORD *)(v34 + 28);
      BOOL v36 = v35 < 2;
      if (v35 >= 2) {
        uint64_t v37 = (uint64_t *)v34;
      }
      else {
        uint64_t v37 = (uint64_t *)(v34 + 8);
      }
      if (!v36) {
        uint64_t v33 = v34;
      }
      uint64_t v34 = *v37;
    }
    while (*v37);
    if (v33 == v21 || *(int *)(v33 + 28) > 2)
    {
      uint64_t v42 = "kUnknown";
    }
    else
    {
      uint64_t v38 = a1 + 4616;
      do
      {
        int v39 = *(_DWORD *)(v20 + 28);
        BOOL v40 = v39 < 2;
        if (v39 >= 2) {
          char v41 = (uint64_t *)v20;
        }
        else {
          char v41 = (uint64_t *)(v20 + 8);
        }
        if (!v40) {
          uint64_t v38 = v20;
        }
        uint64_t v20 = *v41;
      }
      while (*v41);
      if (v38 == v21 || *(int *)(v38 + 28) >= 3) {
        uint64_t v38 = a1 + 4616;
      }
      if (*(unsigned char *)(v38 + 32)) {
        uint64_t v42 = "True";
      }
      else {
        uint64_t v42 = "False";
      }
    }
  }
  else
  {
    char v32 = "kUnknown";
    uint64_t v42 = "kUnknown";
  }
  v59[0] = 0;
  v59[1] = 0;
  std::string::size_type v60 = 0;
  sub_100058DB0(&v58, v32);
  uint64_t v43 = std::string::append(&v58, ":", 1uLL);
  size_t v44 = strlen(v42);
  std::string::size_type v45 = std::string::append(v43, v42, v44);
  if (SHIBYTE(v45->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(v59, v45->__r_.__value_.__l.__data_, v45->__r_.__value_.__l.__size_);
  }
  else
  {
    long long v46 = *(_OWORD *)&v45->__r_.__value_.__l.__data_;
    std::string::size_type v60 = v45->__r_.__value_.__r.__words[2];
    *(_OWORD *)uint64_t v59 = v46;
  }
  if (SHIBYTE(v58.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v58.__r_.__value_.__l.__data_);
  }
  uint64_t v47 = (char *)asString();
  uint32_t v48 = (char *)asString();
  uint64_t v49 = *(void *)(a1 + 432);
  if (SHIBYTE(v62) < 0)
  {
    sub_10004FC84(v56, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    *(_OWORD *)long long v56 = __dst;
    std::string::size_type v57 = v62;
  }
  if (SHIBYTE(v60) < 0)
  {
    sub_10004FC84(v54, v59[0], (unint64_t)v59[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v54 = *(_OWORD *)v59;
    std::string::size_type v55 = v60;
  }
  sub_100058DB0(v52, v47);
  sub_100058DB0(__p, v48);
  (*(void (**)(uint64_t, BOOL, void **, void **, void **, void **))(*(void *)v49 + 280))(v49, v12, v56, v54, v52, __p);
  if (v51 < 0) {
    operator delete(__p[0]);
  }
  if (v53 < 0) {
    operator delete(v52[0]);
  }
  if (SHIBYTE(v55) < 0) {
    operator delete(v54[0]);
  }
  if (SHIBYTE(v57) < 0) {
    operator delete(v56[0]);
  }
  if (SHIBYTE(v60) < 0) {
    operator delete(v59[0]);
  }
  if (SHIBYTE(v62) < 0) {
    operator delete((void *)__dst);
  }
  if (SHIBYTE(v65) < 0) {
    operator delete(v63);
  }
  if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(v66.__r_.__value_.__l.__data_);
    if (v11) {
      return;
    }
  }
  else if (v11)
  {
    return;
  }
  sub_10004D2C8(v9);
}

void sub_1003072A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (*(char *)(v47 - 121) < 0) {
    operator delete(*(void **)(v47 - 144));
  }
  if (*(char *)(v47 - 89) < 0) {
    operator delete(*(void **)(v47 - 112));
  }
  if (*(char *)(v47 - 65) < 0) {
    operator delete(*(void **)(v47 - 88));
  }
  if ((v46 & 1) == 0) {
    sub_10004D2C8(v45);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003073B0(uint64_t a1, uint64_t a2, long long *a3, long long *a4)
{
  long long v5 = *a3;
  uint64_t v10 = *((void *)a3 + 2);
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v8 = *a4;
  *(_OWORD *)long long __p = v5;
  uint64_t v6 = *((void *)a4 + 2);
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  unsigned int v7 = (char *)operator new(0x20uLL);
  *(void *)unsigned int v7 = off_1019BA960;
  *(_OWORD *)(v7 + 8) = v8;
  *((void *)v7 + 3) = v6;
  _OWORD v11[3] = v7;
  (*(void (**)(uint64_t, void **, uint64_t, uint64_t, void, void *))(*(void *)a2 + 40))(a2, __p, 2, 10000000, 0, v11);
  sub_10003B34C(v11);
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
}

void sub_1003074C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100307504(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  uint64_t v3 = *(void **)(a1 + 32);
  v12[0] = _NSConcreteStackBlock;
  v12[1] = 1174405120;
  void v12[2] = sub_100307688;
  uint64_t v12[3] = &unk_1019B6AE0;
  void v12[4] = v3;
  v13[0] = 0;
  if (*a3)
  {
    sub_1000C5DA8((uint64_t)&v14, (uint64_t)(a3 + 8));
    v13[0] = 1;
  }
  uint64_t v4 = (std::__shared_weak_count *)v3[2];
  if (!v4 || (v5 = v3[1], (uint64_t v6 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  unsigned int v7 = v6;
  long long v8 = v3[3];
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_10031EAD8;
  block[3] = &unk_1019B8B90;
  block[5] = v5;
  char v11 = v7;
  atomic_fetch_add_explicit(&v7->__shared_owners_, 1uLL, memory_order_relaxed);
  void block[4] = v12;
  dispatch_async(v8, block);
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10004D2C8(v7);
  return sub_1000C60A0(v13);
}

void sub_10030767C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_100307688(uint64_t result)
{
  uint64_t v1 = *(void *)(result + 32);
  uint64_t v2 = *(void *)(v1 + 192);
  if (v2)
  {
    char v3 = *(unsigned char *)(result + 40);
    if (v3)
    {
      sub_1000C5DA8((uint64_t)v6, result + 48);
      char v3 = 1;
    }
    else
    {
      v6[0] = 0;
    }
    v6[88] = v3;
    (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 24))(v2, v6);
    BOOL result = sub_1000C612C((uint64_t)v6);
  }
  if (*(char *)(v1 + 615) < 0)
  {
    uint64_t v4 = *(unsigned char **)(v1 + 592);
    *(void *)(v1 + 600) = 0;
  }
  else
  {
    uint64_t v4 = (unsigned char *)(v1 + 592);
    *(unsigned char *)(v1 + 615) = 0;
  }
  *uint64_t v4 = 0;
  *(unsigned char *)(v1 + 5264) = 0;
  if (*(void *)(v1 + 5224))
  {
    sub_10031F4D0((uint64_t)v5, v1 + 5200);
    sub_1002DF908(v1, 0, (uint64_t)v5);
  }
  return result;
}

void sub_100307794(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100313790(va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003077C0(uint64_t result, uint64_t a2)
{
  *(unsigned char *)(result + 40) = 0;
  if (*(unsigned char *)(a2 + 40))
  {
    uint64_t v2 = result;
    BOOL result = sub_1000C5DA8(result + 48, a2 + 48);
    *(unsigned char *)(v2 + 40) = 1;
  }
  return result;
}

unsigned char *sub_100307800(uint64_t a1)
{
  return sub_1000C60A0((unsigned char *)(a1 + 40));
}

uint64_t sub_100307808(uint64_t a1)
{
  sub_100060644((void *)(a1 + 1312));
  if (*(unsigned char *)(a1 + 1304)) {
    sub_10030D10C(a1 + 56);
  }
  char v3 = (void **)(a1 + 32);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10030786C(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1003078F0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = *(NSObject **)(a1 + 40);
  BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
  if (v4 == v5)
  {
    if (v7)
    {
      LOWORD(v10) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I no pending transfer plans", (uint8_t *)&v10, 2u);
    }
  }
  else
  {
    if (v7)
    {
      int v10 = 134217984;
      uint64_t v11 = 0x6F96F96F96F96F97 * ((v5 - v4) >> 5);
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I initialize (%lu) pending transfer plans", (uint8_t *)&v10, 0xCu);
    }
    uint64_t v8 = *(void *)(a1 + 416);
    if (v8)
    {
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v8 + 32))(v8, a2);
    }
    else
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v10) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "failed to create pending plans transfer handler", (uint8_t *)&v10, 2u);
      }
    }
  }
}

void *sub_100307A6C(uint64_t a1, uint64_t a2)
{
  int v6 = 16843009;
  uint64_t v7 = a1;
  sub_100349184((uint64_t)v8, a2);
  int v10 = 0;
  char v3 = operator new(0x30uLL);
  uint64_t v4 = v7;
  void *v3 = off_1019BAC60;
  v3[1] = v4;
  sub_100349184((uint64_t)(v3 + 2), (uint64_t)v8);
  int v10 = v3;
  sub_1002FD2D0(a1, &v6, (uint64_t)v9);
  sub_10034398C(v9);
  return sub_100313790(v8);
}

void sub_100307B40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10034398C((uint64_t *)va);
  sub_100313790(v8);
  _Unwind_Resume(a1);
}

void sub_100307B64(void **a1, uint64_t a2, uint64_t *a3, uint64_t *a4, uint64_t a5, NSObject **a6)
{
  if (*a3 == a3[1])
  {
    *a1 = 0;
  }
  else
  {
    memset(v40, 0, sizeof(v40));
    (*(void (**)(void *__return_ptr))(**(void **)(a2 + 416) + 72))(v40);
    long long v38 = 0u;
    long long v39 = 0u;
    long long v37 = 0u;
    uint64_t v12 = *(void *)(a2 + 328);
    v36[0] = *(NSObject ***)(a2 + 320);
    v36[1] = (NSObject **)v12;
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    sub_101199D7C((NSObject ***)&v37, (NSObject **)(a2 + 40), v36, a6, (NSObject **)(*(void *)(a2 + 5368) + 96));
    if (v12) {
      sub_10004D2C8((std::__shared_weak_count *)v12);
    }
    uint64_t v33 = 0;
    unint64_t v34 = 0;
    unint64_t v35 = 0;
    uint64_t v13 = *a3;
    uint64_t v14 = a3[1];
    if (*a3 != v14)
    {
      do
      {
        long long v82 = 0u;
        memset(v81, 0, sizeof(v81));
        long long v79 = 0u;
        long long v80 = 0u;
        long long v77 = 0u;
        long long v78 = 0u;
        long long v75 = 0u;
        long long v76 = 0u;
        long long v73 = 0u;
        long long v74 = 0u;
        long long v71 = 0u;
        long long v72 = 0u;
        long long v69 = 0u;
        long long v70 = 0u;
        long long v67 = 0u;
        long long v68 = 0u;
        long long v66 = 0u;
        sub_100311D04(&v66, v13);
        sub_10031203C((char *)v81 + 8, (long long *)(v13 + 248));
        *((void *)&v82 + 1) = *(void *)(v13 + 392);
        char v15 = (std::__shared_weak_count *)a4[1];
        uint64_t v31 = *a4;
        char v32 = v15;
        if (v15) {
          atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        int v16 = *(std::__shared_weak_count **)(a5 + 8);
        int v29 = *(uint64_t **)a5;
        BOOL v30 = v16;
        if (v16) {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        char v17 = sub_10119A86C((NSObject ***)&v37, (uint64_t)&v66, &v31, &v29);
        if (v30) {
          sub_10004D2C8(v30);
        }
        if (v32) {
          sub_10004D2C8(v32);
        }
        if (v17)
        {
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          long long v48 = 0u;
          long long v49 = 0u;
          long long v46 = 0u;
          long long v47 = 0u;
          long long v44 = 0u;
          long long v45 = 0u;
          long long v42 = 0u;
          long long v43 = 0u;
          *(_OWORD *)long long buf = 0u;
          sub_10098E0F8((uint64_t)buf, (os_log_t *)(a2 + 40), (uint64_t)&v66, (const std::string *)((char *)v81 + 8), *(uint64_t **)a5, v40);
          unint64_t v18 = v34;
          if (v34 >= v35)
          {
            uint64_t v19 = sub_100312884((uint64_t *)&v33, (uint64_t)buf);
          }
          else
          {
            sub_1003129A4(v34, (uint64_t)buf);
            uint64_t v19 = v18 + 400;
          }
          unint64_t v34 = v19;
          sub_1000C52BC((uint64_t)buf);
        }
        sub_1000C52BC((uint64_t)&v66);
        v13 += 400;
      }
      while (v13 != v14);
    }
    uint64_t v20 = (std::__shared_weak_count *)a4[1];
    uint64_t v26 = *a4;
    uint64_t v27 = v20;
    CFTypeRef cf = 0;
    if (v20) {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    *(void *)&long long v67 = 0;
    *((void *)&v66 + 1) = 0;
    *(void *)&long long v66 = (char *)&v66 + 8;
    sub_100CCEE00(&v33, &v26, (uint64_t)&v66, &cf);
    sub_10005CD2C((uint64_t)&v66, *((char **)&v66 + 1));
    if (v27) {
      sub_10004D2C8(v27);
    }
    uint64_t v21 = *(void *)(a2 + 288);
    CFTypeRef v25 = cf;
    if (cf) {
      CFRetain(cf);
    }
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v21 + 264))(v21, &v25);
    sub_100044D00(&v25);
    long long v66 = 0uLL;
    *(void *)&long long v67 = 0;
    (*(void (**)(long long *__return_ptr))(**(void **)(a2 + 304) + 456))(&v66);
    *a1 = 0;
    CFTypeRef v24 = cf;
    if (cf) {
      CFRetain(cf);
    }
    sub_10119B0D4((NSObject ***)&v37, (void **)&v24, &v66, a1);
    sub_100044D00(&v24);
    uint64_t v22 = *(NSObject **)(a2 + 40);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v23 = *a1;
      *(_DWORD *)long long buf = 138412290;
      *(void *)&uint8_t buf[4] = v23;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Add on remote plans prepared: %@", buf, 0xCu);
    }
    sub_10010E37C((uint64_t)&v66, *((void **)&v66 + 1));
    sub_100044D00(&cf);
    *(void *)&long long v66 = &v33;
    sub_1000C5238((void ***)&v66);
    if ((void)v38) {
      sub_10004D2C8((std::__shared_weak_count *)v38);
    }
    *(void *)&long long v66 = v40;
    sub_100047F64((void ***)&v66);
  }
}

void sub_100307FAC(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003080C8(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

void *sub_100308118(void *a1)
{
  uint64_t v2 = a1[8];
  if (v2)
  {
    dispatch_group_leave(v2);
    char v3 = a1[8];
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[5];
  if (v5) {
    sub_10004D2C8(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[3];
  if (v6) {
    sub_10004D2C8(v6);
  }
  return a1;
}

uint64_t sub_100308178(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (v2)
  {
    dispatch_group_leave(v2);
    char v3 = *(NSObject **)(a1 + 24);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4) {
    sub_10004D2C8(v4);
  }
  return a1;
}

uint64_t sub_1003081C0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 16);
  if (v2)
  {
    dispatch_group_leave(v2);
    char v3 = *(NSObject **)(a1 + 16);
    if (v3) {
      dispatch_release(v3);
    }
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 8);
  if (v4) {
    sub_10004D2C8(v4);
  }
  return a1;
}

void *sub_100308208(void *a1)
{
  sub_10034398C(a1 + 11);
  uint64_t v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    sub_10004D2C8(v2);
  }
  char v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)a1[6];
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5) {
    sub_10004D2C8(v5);
  }
  int v6 = (std::__shared_weak_count *)a1[2];
  if (v6) {
    sub_10004D2C8(v6);
  }
  return a1;
}

void sub_100308270(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_10031F4D0((uint64_t)&v5, a2);
  char v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003083A8(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_1003083C0(uint64_t a1, uint64_t a2)
{
}

uint64_t **sub_1003083C8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (const std::string *)(a2 + 32);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = (std::string *)(a1 + 32);
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  BOOL result = (uint64_t **)std::string::operator=(v5, v4);
  if (a1 != a2)
  {
    uint64_t v7 = *(long long **)(a2 + 56);
    return sub_100312D38((uint64_t **)(a1 + 56), v7, (long long *)(a2 + 64));
  }
  return result;
}

uint64_t sub_100308450(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_1003084A0(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 64))(&v1);
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 136))(v1);
  }
  if (v2) {
    sub_10004D2C8(v2);
  }
}

void sub_100308524(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030853C(uint64_t a1, CFDictionaryRef *a2, int a3, int a4)
{
}

uint64_t sub_100308544(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_10030857C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_1003085B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_1003085EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_100308624(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, void))(a7 + 16))(a7, 0);
}

uint64_t sub_100308638(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  return (*(uint64_t (**)(uint64_t, void))(a7 + 16))(a7, 0);
}

uint64_t sub_10030864C(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  if (a4 == 2)
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v17);
    Registry::getNotificationSenderFactory((uint64_t *)buf, v17);
    uint64_t v5 = *(void *)buf;
    (***(void (****)(Registry **__return_ptr))(a1 + 320))(&v13);
    Registry::getTimerService(&v15, v13);
    (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t *, uint64_t))(*(void *)v5 + 160))(&v21, v5, &v15, a1 + 24);
    if (v16) {
      sub_10004D2C8(v16);
    }
    if (v14) {
      sub_10004D2C8(v14);
    }
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v18) {
      sub_10004D2C8(v18);
    }
    uint64_t v6 = v21;
    BOOL v7 = v21 != 0;
    if (v21)
    {
      sub_100CD8CA8(0, &v12);
      (*(void (**)(uint64_t, const void **))(*(void *)v6 + 40))(v6, &v12);
      sub_100057D78(&v12);
    }
    else
    {
      uint64_t v11 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "invalid CellularPlanManagementSender", buf, 2u);
      }
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
    return v7;
  }
  uint64_t v8 = *(void *)(a1 + 400);
  if (!v8) {
    return 1;
  }
  uint64_t v9 = *(uint64_t (**)(void))(*(void *)v8 + 312);

  return v9();
}

void sub_100308860(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 - 40);
  if (v4) {
    sub_10004D2C8(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_1003088D4(uint64_t a1, uint64_t a2, uint64_t a3, int a4)
{
  return sub_10030864C(a1 - 88, a2, a3, a4);
}

void sub_1003088DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  __dst[0] = 0;
  __dst[1] = 0;
  uint64_t v14 = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a3;
    uint64_t v14 = *(void *)(a3 + 16);
  }
  if (*(unsigned char *)(a2 + 2664) && sub_10010E128(a2 + 2640, __dst))
  {
    __p[0] = 0;
    uint64_t v6 = *sub_100046ED4(a2 + 2640, __p, __dst);
    if (!v6) {
      sub_1000C14F0("map::at:  key not found");
    }
    std::string::operator=((std::string *)a1, (const std::string *)(v6 + 136));
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v12 = 0;
  sub_100CD7214((void **)a3, (uint64_t *)(a2 + 2464), (uint64_t *)(a2 + 2568), (uint64_t)__p);
  (***(void (****)(Registry **__return_ptr))(a2 + 320))(&v7);
  sub_100CD69E4(&v7, (const void **)a1, (uint64_t)__p, (uint64_t)&v9);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  *(_OWORD *)a1 = v9;
  *(void *)(a1 + 16) = v10;
  HIBYTE(v10) = 0;
  LOBYTE(v9) = 0;
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100308A50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  if (*(char *)(v25 + 23) < 0) {
    operator delete(*(void **)v25);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100308AB4(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  uint64_t v16 = a4 + 16;
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 304) + 368))(*(void *)(a1 + 304), a4 + 16) & 1) == 0)
  {
    uint64_t v33 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    if (*(char *)(a4 + 39) >= 0) {
      uint64_t v34 = v16;
    }
    else {
      uint64_t v34 = *(void *)(a4 + 16);
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v34;
    char v32 = "transfer plan (source). Iccid: [%s] is not present";
LABEL_49:
    BOOL v36 = v33;
    uint32_t v37 = 12;
LABEL_50:
    _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, v32, buf, v37);
    return 0;
  }
  if (*(unsigned char *)(a1 + 2289) != 1)
  {
    uint64_t v33 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v33, OS_LOG_TYPE_ERROR)) {
      return 0;
    }
    if (*(char *)(a4 + 39) >= 0) {
      uint64_t v35 = v16;
    }
    else {
      uint64_t v35 = *(void *)(a4 + 16);
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v35;
    char v32 = "no internet connection. abort transfer. iccid : [%s]";
    goto LABEL_49;
  }
  if (sub_1002EB758(a1))
  {
    uint64_t v55 = a7;
    uint64_t v17 = *(void *)(a1 + 400);
    if (!v17 || ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 160))(v17) & 1) == 0)
    {
      uint64_t v18 = *(void *)(a1 + 320);
      uint64_t v19 = *(NSObject **)(a1 + 24);
      dispatch_object_t v69 = v19;
      if (v19) {
        dispatch_retain(v19);
      }
      uint64_t v20 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v20 || (uint64_t v21 = *(void *)(a1 + 8), (v22 = std::__shared_weak_count::lock(v20)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v23 = v21 + 96;
      if (!v21) {
        uint64_t v23 = 0;
      }
      uint64_t v67 = v23;
      long long v68 = v22;
      CFTypeRef v24 = *(std::__shared_weak_count **)(a1 + 424);
      uint64_t v65 = *(void *)(a1 + 416);
      long long v66 = v24;
      if (v24) {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      uint64_t v25 = *(std::__shared_weak_count **)(a1 + 520);
      uint64_t v63 = *(void *)(a1 + 512);
      long long v64 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v18 + 424))(buf, v18, 1, &v69, &v67, &v65, &v63);
      long long v26 = *(_OWORD *)buf;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
      uint64_t v27 = *(std::__shared_weak_count **)(a1 + 408);
      *(_OWORD *)(a1 + 400) = v26;
      if (v27)
      {
        sub_10004D2C8(v27);
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
      }
      if (v64) {
        sub_10004D2C8(v64);
      }
      if (v66) {
        sub_10004D2C8(v66);
      }
      if (v68) {
        sub_10004D2C8(v68);
      }
      if (v69) {
        dispatch_release(v69);
      }
      if (!*(void *)(a1 + 400))
      {
        uint64_t v31 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v31, OS_LOG_TYPE_ERROR)) {
          return 0;
        }
        *(_WORD *)long long buf = 0;
        char v32 = "cannot create source transfer auth controller";
        goto LABEL_77;
      }
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&uint8_t buf[16] = 0;
      *(void *)long long buf = &buf[8];
      if (*(unsigned char *)(a1 + 2664)) {
        uint64_t v28 = (unsigned char *)(a1 + 2640);
      }
      else {
        uint64_t v28 = buf;
      }
      sub_1002D3F44(a1);
      uint64_t v29 = *(void *)(a1 + 400);
      int v53 = *(_DWORD *)(a1 + 2632);
      sub_1002DD40C((uint64_t)v61, (void *)(a1 + 1616));
      memset(v60, 0, sizeof(v60));
      BOOL v30 = *(std::__shared_weak_count **)(a1 + 5376);
      uint64_t v58 = *(void *)(a1 + 5368);
      long long v59 = v30;
      if (v30) {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, unsigned char *, uint64_t, void **, void **, uint64_t *))(*(void *)v29 + 16))(v29, a1 + 2568, a1 + 2464, v53 == 1, a1 + 2320, a1 + 2344, v28, a1 + 2488, v61, v60, &v58);
      if (v59) {
        sub_10004D2C8(v59);
      }
      __p[0] = v60;
      sub_10030AFC8((void ***)__p);
      sub_10005CD2C((uint64_t)v61, (char *)v61[1]);
      sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
    }
    if ((*(unsigned int (**)(void))(**(void **)(a1 + 400) + 160))(*(void *)(a1 + 400)))
    {
      uint64_t v31 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        char v32 = "transfer attempt ongoing on source";
LABEL_77:
        BOOL v36 = v31;
        uint32_t v37 = 2;
        goto LABEL_50;
      }
      return 0;
    }
    uint64_t v40 = *(void *)(a1 + 464);
    if (v40) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v40 + 128))(v40, 1, 1);
    }
    char v41 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      sCardSerialNumberAsString();
      int v54 = v62;
      int v42 = *(char *)(a4 + 39);
      uint64_t v51 = *(void *)(a4 + 16);
      long long v52 = (void **)v61[0];
      sCardSerialNumberAsString();
      uint64_t v43 = v51;
      if (v42 >= 0) {
        uint64_t v43 = v16;
      }
      long long v44 = v61;
      if (v54 < 0) {
        long long v44 = v52;
      }
      long long v45 = __p;
      if (v57 < 0) {
        long long v45 = (void **)__p[0];
      }
      long long v46 = (uint64_t *)*a6;
      if (*((char *)a6 + 23) >= 0) {
        long long v46 = a6;
      }
      if (*((char *)a2 + 23) >= 0) {
        long long v47 = a2;
      }
      else {
        long long v47 = (uint64_t *)*a2;
      }
      *(_DWORD *)long long buf = 136316162;
      *(void *)&uint8_t buf[4] = v44;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v43;
      *(_WORD *)&unsigned char buf[22] = 2080;
      long long v71 = v45;
      __int16 v72 = 2080;
      long long v73 = v46;
      __int16 v74 = 2080;
      long long v75 = v47;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Transfer handler source device - csn: [%s] iccid: [%s], target eid: [%s], target imei: [%s], request uuid: [%s]", buf, 0x34u);
      if (v57 < 0) {
        operator delete(__p[0]);
      }
      if (v62 < 0) {
        operator delete(v61[0]);
      }
    }
    uint64_t v48 = *(void *)(a1 + 400);
    sub_1003088DC((uint64_t)buf, a1, v16);
    LOBYTE(v50) = 0;
    uint64_t v39 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t, uint64_t, unsigned char *, uint64_t, uint64_t *, uint64_t, uint64_t, int))(*(void *)v48 + 288))(v48, a2, a3, a4, buf, a5, a6, v55, a8, v50);
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    long long v38 = *(NSObject **)(a1 + 40);
    uint64_t v39 = 0;
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#E Outgoing eSIM transfers not allowed, so no plans available for transfer", buf, 2u);
      return 0;
    }
  }
  return v39;
}

void sub_100309128(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003091E8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, uint64_t a7, uint64_t a8)
{
  return sub_100308AB4(a1 - 88, a2, a3, a4, a5, a6, a7, a8);
}

void sub_1003091F0(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v11 = a3;
  if (((*(uint64_t (**)(void, char *))(**(void **)(a1 + 304) + 368))(*(void *)(a1 + 304), a3) & 1) == 0)
  {
    uint64_t v15 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (v11[23] < 0) {
      uint64_t v11 = *(char **)v11;
    }
    *(_DWORD *)long long buf = 136315138;
    BOOL v30 = v11;
    uint64_t v16 = "transfer plan (source). Iccid: [%s] is not present";
    uint64_t v17 = v15;
    uint32_t v18 = 12;
LABEL_11:
    _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v16, buf, v18);
    return;
  }
  uint64_t v14 = *(void *)(a1 + 512);
  if (!v14)
  {
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v19, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v16 = "No source transfer model";
    uint64_t v17 = v19;
    uint32_t v18 = 2;
    goto LABEL_11;
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v28 = *(void *)(a2 + 16);
  }
  if (v11[23] < 0)
  {
    sub_10004FC84(v25, *(void **)v11, *((void *)v11 + 1));
  }
  else
  {
    *(_OWORD *)uint64_t v25 = *(_OWORD *)v11;
    uint64_t v26 = *((void *)v11 + 2);
  }
  if (*(char *)(a6 + 23) < 0)
  {
    sub_10004FC84(v23, *(void **)a6, *(void *)(a6 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a6;
    uint64_t v24 = *(void *)(a6 + 16);
  }
  long long __p = 0;
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  sub_10005C928(&__p, *(const void **)a7, *(void *)(a7 + 8), *(void *)(a7 + 8) - *(void *)a7);
  (*(void (**)(uint64_t, void **, void **, uint64_t, uint64_t, void **, void **))(*(void *)v14 + 80))(v14, __dst, v25, a4, a5, v23, &__p);
  if (__p)
  {
    uint64_t v21 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__dst[0]);
  }
}

void sub_100309458(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003094C4(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
}

BOOL sub_1003094CC(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a1 + 2289) != 1)
  {
    uint64_t v21 = *(NSObject **)(a1 + 40);
    BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
    if (!result) {
      return result;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v22 = "no internet connection. abort purchase";
    goto LABEL_33;
  }
  uint64_t v4 = *(void *)(a1 + 400);
  if (!v4)
  {
    uint64_t v5 = *(void *)(a1 + 320);
    uint64_t v6 = *(NSObject **)(a1 + 24);
    dispatch_object_t object = v6;
    if (v6) {
      dispatch_retain(v6);
    }
    BOOL v7 = *(std::__shared_weak_count **)(a1 + 16);
    if (!v7 || (v8 = *(void *)(a1 + 8), (long long v9 = std::__shared_weak_count::lock(v7)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v10 = v8 + 96;
    if (!v8) {
      uint64_t v10 = 0;
    }
    uint64_t v27 = v10;
    uint64_t v28 = v9;
    uint64_t v11 = *(std::__shared_weak_count **)(a1 + 424);
    uint64_t v25 = *(void *)(a1 + 416);
    uint64_t v26 = v11;
    if (v11) {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v12 = *(std::__shared_weak_count **)(a1 + 520);
    uint64_t v23 = *(void *)(a1 + 512);
    uint64_t v24 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v5 + 424))(buf, v5, 1, &object, &v27, &v25, &v23);
    long long v13 = *(_OWORD *)buf;
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = *(std::__shared_weak_count **)(a1 + 408);
    *(_OWORD *)(a1 + 400) = v13;
    if (v14)
    {
      sub_10004D2C8(v14);
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    if (v24) {
      sub_10004D2C8(v24);
    }
    if (v26) {
      sub_10004D2C8(v26);
    }
    if (v28) {
      sub_10004D2C8(v28);
    }
    if (object) {
      dispatch_release(object);
    }
    uint64_t v4 = *(void *)(a1 + 400);
    if (!v4)
    {
      uint64_t v21 = *(NSObject **)(a1 + 40);
      BOOL result = os_log_type_enabled(v21, OS_LOG_TYPE_ERROR);
      if (!result) {
        return result;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v22 = "cannot create source auth controller";
LABEL_33:
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, v22, buf, 2u);
      return 0;
    }
  }
  long long v31 = *(_OWORD *)(a2 + 48);
  uint64_t v15 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v15 || (uint64_t v16 = *(void *)(a1 + 8), (v17 = std::__shared_weak_count::lock(v15)) == 0)) {
    sub_100088B9C();
  }
  uint32_t v18 = v17;
  atomic_fetch_add_explicit(&v17->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v17);
  uint64_t v19 = operator new(0x30uLL);
  *uint64_t v19 = off_1019BAFF0;
  v19[1] = a1;
  *((_OWORD *)v19 + 1) = v31;
  void v19[4] = v16;
  v19[5] = v18;
  v32[3] = v19;
  (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v4 + 320))(v4, a2, v32);
  sub_10034CA60(v32);
  return 1;
}

void sub_100309790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, std::__shared_weak_count *a15, dispatch_object_t object)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (a15) {
    sub_10004D2C8(a15);
  }
  if (object) {
    dispatch_release(object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_1003097FC(uint64_t a1, uint64_t a2)
{
  return sub_1003094CC(a1 - 88, a2);
}

unsigned char *sub_100309804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  __int16 v7 = 2818;
  v8[0] = 0;
  (*(void (**)(uint64_t, __int16 *, unsigned char *))(a6 + 16))(a6, &v7, v8);
  return sub_1000C60A0(v8);
}

void sub_100309880(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000C60A0(va);
  _Unwind_Resume(a1);
}

uint64_t sub_100309898(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_1003098D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  __int16 v6 = 2818;
  return (*(uint64_t (**)(uint64_t, __int16 *))(a5 + 16))(a5, &v6);
}

uint64_t sub_100309908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0);
}

uint64_t sub_10030991C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0);
}

uint64_t sub_100309930(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0);
}

uint64_t sub_100309944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return (*(uint64_t (**)(uint64_t, void))(a5 + 16))(a5, 0);
}

void sub_100309960(uint64_t a1, uint64_t a2)
{
  uint64_t v21 = 0;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v15 = 0u;
  long long v16 = 0u;
  long long v13 = 0u;
  long long v14 = 0u;
  sub_100313228((char *)__dst, &v13);
  (*(void (**)(uint64_t, void **))(a2 + 16))(a2, __dst);
  if (v12 < 0) {
    operator delete(__p);
  }
  if (v8)
  {
    if (v10 < 0) {
      operator delete(v9);
    }
    char v8 = 0;
  }
  if (v5)
  {
    if (v7 < 0) {
      operator delete(v6);
    }
    char v5 = 0;
  }
  if (v4 < 0) {
    operator delete(__dst[0]);
  }
  if (SBYTE7(v20) < 0) {
    operator delete((void *)v19);
  }
  if (BYTE8(v16))
  {
    if (SBYTE7(v18) < 0) {
      operator delete((void *)v17);
    }
    BYTE8(v16) = 0;
  }
  if (BYTE8(v14))
  {
    if (SBYTE7(v16) < 0) {
      operator delete((void *)v15);
    }
    BYTE8(v14) = 0;
  }
  if (SBYTE7(v14) < 0) {
    operator delete((void *)v13);
  }
}

void sub_100309AA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,char a27)
{
}

uint64_t sub_100309AC4(uint64_t a1)
{
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100309B44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  memset(v5, 0, sizeof(v5));
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v5);
  __int16 v6 = (void **)v5;
  sub_10023FDC8(&v6);
}

void sub_100309BB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10023FDC8(&a12);
  _Unwind_Resume(a1);
}

void sub_100309BD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100309BDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[0] = 2;
  unsigned char v5[8] = 11;
  uint64_t v4 = *(void *)(a4 + 24);
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v4 + 48))(v4, v5);
  if (v5[0] == 1)
  {
    if (v19 < 0) {
      operator delete(__p);
    }
    if (v17 < 0) {
      operator delete(v16);
    }
    if (v15 < 0) {
      operator delete(v14);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
    if (v7 < 0) {
      operator delete(v6);
    }
  }
}

void sub_100309CCC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a10 == 1) {
    sub_1000C62D8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100309CF0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 24);
  if (v2)
  {
    memset(v3, 0, sizeof(v3));
    (*(void (**)(uint64_t, void *))(*(void *)v2 + 48))(v2, v3);
    uint64_t v4 = (void **)v3;
    sub_1000C63B8(&v4);
  }
}

void sub_100309D5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000C63B8(&a12);
  _Unwind_Resume(a1);
}

void sub_100309D7C(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
  char v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v4 = 136315138;
    uint64_t v5 = asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v4, 0xCu);
  }
  *a2 = 0;
  a2[224] = 0;
}

void sub_100309E28(uint64_t a1@<X0>, unsigned char *a2@<X8>)
{
}

uint64_t sub_100309E30(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    int v3 = 136315138;
    uint64_t v4 = asString();
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I %s", (uint8_t *)&v3, 0xCu);
  }
  return 0;
}

uint64_t sub_100309ED4(uint64_t a1)
{
  return 0;
}

uint64_t sub_100309EF4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 384);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2, a3, a5, a6);
  }
  return 1;
}

uint64_t sub_100309F48(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v6 = *(void *)(a1 + 264);
  if (v6) {
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v6 + 264))(v6, a2, a3, a5, a6);
  }
  return 1;
}

BOOL sub_100309F9C(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  char v13 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a6 + 256)) {
      long long v14 = "true";
    }
    else {
      long long v14 = "false";
    }
    if (*((char *)a2 + 23) >= 0) {
      char v15 = a2;
    }
    else {
      char v15 = (uint64_t *)*a2;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v14;
    __int16 v25 = 2080;
    uint64_t v26 = v15;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I receive transfer auth from source ? %s, uuid : %s", buf, 0x16u);
  }
  uint64_t v16 = *(void *)(a1 + 384);
  if (v16)
  {
    __int16 v23 = 0;
    if (*a7 - 1 <= 1) {
      __int16 v23 = *(_WORD *)a7;
    }
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)v16 + 256))(v16, a2, a4, a5 + 16, a6, &v23);
  }
  else
  {
    char v17 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      sCardSerialNumberAsString();
      if (v27 >= 0) {
        char v19 = buf;
      }
      else {
        char v19 = *(unsigned char **)buf;
      }
      uint64_t v22 = *(void *)(a5 + 16);
      uint64_t v21 = a5 + 16;
      uint64_t v20 = v22;
      if (*(char *)(v21 + 23) >= 0) {
        uint64_t v20 = v21;
      }
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v29 = v19;
      __int16 v30 = 2080;
      uint64_t v31 = v20;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "invalid TransferAuthWithConsentController to receive TransferResponseData from: %s, iccid: %s", v28, 0x16u);
      if (v27 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  return v16 != 0;
}

BOOL sub_10030A1B0(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, unsigned __int8 *a7)
{
  return sub_100309F9C(a1 - 120, a2, a3, a4, a5, a6, a7);
}

uint64_t sub_10030A1B8()
{
  return 0;
}

uint64_t sub_10030A1C0()
{
  return 0;
}

uint64_t sub_10030A1C8()
{
  return 0;
}

uint64_t sub_10030A1D0()
{
  return 0;
}

uint64_t sub_10030A1D8()
{
  return 0;
}

uint64_t sub_10030A1E0()
{
  return 0;
}

void sub_10030A1E8(uint64_t a1, uint64_t a2, int a3)
{
  if (a3 != 1 || *(void *)(a2 + 16))
  {
    (*(void (**)(void, uint64_t))(**(void **)(a1 + 416) + 280))(*(void *)(a1 + 416), a2);
    uint64_t v5 = *(void *)(a1 + 384);
    if (v5)
    {
      uint64_t v6 = *(void (**)(void))(*(void *)v5 + 64);
      v6();
    }
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)char v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ignore initial manually query for IDS devices", v7, 2u);
    }
  }
}

void sub_10030A2E4(uint64_t a1, uint64_t a2, int a3)
{
}

uint64_t sub_10030A2EC(uint64_t a1)
{
  sub_10034B83C((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_10030A324(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 208) + 296))();
}

uint64_t sub_10030A354(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(a1 + 200) + 296))();
}

uint64_t sub_10030A384(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1784);
}

uint64_t sub_10030A38C(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 1680);
}

BOOL sub_10030A394(uint64_t a1)
{
  return *(unsigned char *)(a1 + 2488) == 1;
}

void InitializeCellularPlan(NSObject **a1@<X0>, uint64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t *a6@<X8>)
{
  *a6 = 0;
  a6[1] = 0;
  char v11 = *a1;
  v19[2] = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  uint64_t v12 = *a2;
  char v13 = (std::__shared_weak_count *)a2[1];
  v19[0] = v12;
  v19[1] = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v14 = *(std::__shared_weak_count **)(a3 + 8);
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  char v15 = *(std::__shared_weak_count **)(a4 + 8);
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = *(std::__shared_weak_count **)(a5 + 8);
  if (v16) {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  CellularPlanControllerImpl::create((uint64_t)v19, v20);
  uint64_t v17 = v20[1];
  if (v20[0]) {
    uint64_t v18 = v20[0] + 48;
  }
  else {
    uint64_t v18 = 0;
  }
  *a6 = v18;
  a6[1] = v17;
  if (v16) {
    sub_10004D2C8(v16);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v11)
  {
    dispatch_release(v11);
  }
}

void sub_10030A4EC(_Unwind_Exception *exception_object)
{
  if (v5)
  {
    sub_10004D2C8(v5);
    if (!v4)
    {
LABEL_3:
      if (!v3) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }
  else if (!v4)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v4);
  if (!v3)
  {
LABEL_4:
    if (!v2) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }
LABEL_10:
  sub_10004D2C8(v3);
  if (!v2)
  {
LABEL_5:
    if (!v1) {
      goto LABEL_7;
    }
    goto LABEL_6;
  }
LABEL_11:
  sub_10004D2C8(v2);
  if (!v1) {
LABEL_7:
  }
    _Unwind_Resume(exception_object);
LABEL_6:
  dispatch_release(v1);
  goto LABEL_7;
}

uint64_t sub_10030A548(uint64_t a1)
{
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 109) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 172) = 0u;
  sub_100058DB0((void *)(a1 + 192), "");
  sub_100058DB0((void *)(a1 + 216), "");
  sub_100058DB0((void *)(a1 + 240), "");
  return a1;
}

void sub_10030A5E8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 239) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 215) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*(void **)(v2 + 160));
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*(void **)(v2 + 136));
  }
  sub_100057D78(v3);
  sub_100047F64((void ***)va);
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*(void **)(v2 + 72));
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*(void **)(v2 + 48));
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*(void **)(v2 + 24));
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

void sub_10030A698(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 64;
        sub_10030A71C(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_10030A71C(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_10030A774(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10030A7F8(v4 - 192);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_10030A7F8(uint64_t a1)
{
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10030A89C(uint64_t a1)
{
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  sub_100057D78((const void **)(a1 + 128));
  int v3 = (void **)(a1 + 96);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10030A970(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 792) && *(char *)(a1 + 759) < 0) {
    operator delete(*(void **)(a1 + 736));
  }
  sub_10002B2D8(a1 + 608);
  sub_10002B28C(a1 + 464);
  sub_10002B1F4(a1 + 328);
  sub_10002B1A8(a1 + 224);
  sub_10002B1A8(a1 + 120);
  sub_10002B240(a1 + 24);
  return a1;
}

void sub_10030A9DC(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10030A9DC(a1, *a2);
    sub_10030A9DC(a1, a2[1]);
    sub_10030AA38((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10030AA38(uint64_t a1)
{
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 16);
    operator delete(v2);
  }
}

void sub_10030AAD0(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10030AAD0(a1, *a2);
    sub_10030AAD0(a1, a2[1]);
    sub_10030AB2C((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_10030AB2C(uint64_t a1)
{
  sub_1000346F8(a1 + 80, *(void **)(a1 + 88));
  sub_1001A297C(a1 + 56, *(void **)(a1 + 64));
  sub_1000346F8(a1 + 32, *(void **)(a1 + 40));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_10030AB98(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030AC1C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030ACA0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  return sub_10030ACE4((void *)a1);
}

void *sub_10030ACE4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030AD68(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 32))
  {
    int v3 = (void **)(a1 + 40);
    sub_100047F64(&v3);
    *(unsigned char *)(a1 + 32) = 0;
  }
  return sub_10030ADB4((void *)a1);
}

void *sub_10030ADB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030AE38(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10030AEBC(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)(a1 + 112));
    }
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t sub_10030AF48(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 784))
  {
    if (*(unsigned char *)(a1 + 776) && *(char *)(a1 + 775) < 0) {
      operator delete(*(void **)(a1 + 752));
    }
    if (*(unsigned char *)(a1 + 744)) {
      sub_100310520(a1 + 400);
    }
    sub_1003107E0(a1 + 56);
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_10030AFC8(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = v2;
    if ((void *)v4 != v2)
    {
      do
        uint64_t v4 = sub_10030D10C(v4 - 1248);
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t *sub_10030B04C(uint64_t **a1, int *a2, uint64_t a3, unsigned int **a4)
{
  char v7 = a1 + 1;
  uint64_t v6 = a1[1];
  if (v6)
  {
    int v8 = *a2;
    while (1)
    {
      while (1)
      {
        char v9 = (uint64_t **)v6;
        int v10 = *((_DWORD *)v6 + 7);
        if (v8 >= v10) {
          break;
        }
        uint64_t v6 = *v9;
        char v7 = v9;
        if (!*v9) {
          goto LABEL_10;
        }
      }
      if (v10 >= v8) {
        break;
      }
      uint64_t v6 = v9[1];
      if (!v6)
      {
        char v7 = v9 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    char v9 = a1 + 1;
LABEL_10:
    char v11 = (uint64_t *)operator new(0x28uLL);
    *(uint64_t *)((char *)v11 + 28) = **a4;
    sub_100046C38(a1, (uint64_t)v9, v7, v11);
    return v11;
  }
  return (uint64_t *)v9;
}

uint64_t *sub_10030B10C(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v9 = 0;
  uint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v9, a2);
  BOOL result = *v6;
  if (!*v6)
  {
    memset(v8, 0, sizeof(v8));
    sub_10030B1B0((uint64_t)a1, a4, v8);
    sub_100046C38(a1, v9, v6, v8[0]);
    return v8[0];
  }
  return result;
}

unsigned char *sub_10030B1B0@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  uint64_t v6 = a3 + 1;
  char v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  BOOL result = v7 + 32;
  uint64_t v9 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    BOOL result = sub_10004FC84(result, *(void **)v9, *((void *)v9 + 1));
  }
  else
  {
    long long v10 = *v9;
    *((void *)v7 + 6) = *((void *)v9 + 2);
    *(_OWORD *)BOOL result = v10;
  }
  *((_DWORD *)v7 + 14) = 0;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10030B248(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_10030B264(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000593FC(a1, (long long *)a2);
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(v4 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(v4 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(v4 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v7;
  }
  int v8 = (unsigned char *)(a1 + 104);
  if (*(char *)(a2 + 127) < 0)
  {
    sub_10004FC84(v8, *(void **)(a2 + 104), *(void *)(a2 + 112));
  }
  else
  {
    long long v9 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)int v8 = v9;
  }
  return a1;
}

void sub_10030B35C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 79) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(unsigned char *)(v1 + 24))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10030B3C8(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[128] = 0;
  if (*(unsigned char *)(a2 + 128))
  {
    sub_10030B264((uint64_t)a1, a2);
    a1[128] = 1;
  }
  return a1;
}

void sub_10030B40C(_Unwind_Exception *a1)
{
  sub_10010B788(v1);
  _Unwind_Resume(a1);
}

void *sub_10030B420(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030B4A4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10004379C(result, a4);
    BOOL result = (void *)sub_10030B52C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030B50C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030B640(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030B52C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030B264(a4 + v7, a2 + v7);
      v7 += 128;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030B58C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 128;
    do
    {
      sub_10030B5B0(v4 + v2);
      v2 -= 128;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030B5B0(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_10030B640(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 128;
        sub_10030B5B0(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10030B6C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030B748(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030B7CC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10030B854(result, a4);
    BOOL result = (void *)sub_10030B8F8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030B834(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030AFC8(&a9);
  _Unwind_Resume(a1);
}

char *sub_10030B854(void *a1, unint64_t a2)
{
  if (a2 >= 0x34834834834835) {
    sub_10006A748();
  }
  BOOL result = (char *)sub_10030B8AC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[1248 * v4];
  return result;
}

void *sub_10030B8AC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x34834834834835) {
    sub_10006A7CC();
  }
  return operator new(1248 * a2);
}

uint64_t sub_10030B8F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030DDAC(a4 + v7, (long long *)(a2 + v7));
      v7 += 1248;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030B958(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 1248;
    do
    {
      sub_10030D10C(v4 + v2);
      v2 -= 1248;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030B97C(uint64_t *a1)
{
  uint64_t v2 = *a1;
  unint64_t v3 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v4 = v3 + 1;
  if (v3 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000D8578();
  }
  uint64_t v5 = (uint64_t)(a1 + 2);
  unint64_t v6 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v2) >> 3);
  if (2 * v6 > v4) {
    unint64_t v4 = 2 * v6;
  }
  if (v6 >= 0x555555555555555) {
    unint64_t v7 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v7 = v4;
  }
  char v15 = a1 + 2;
  if (v7) {
    int v8 = (char *)sub_10004812C(v5, v7);
  }
  else {
    int v8 = 0;
  }
  char v11 = v8;
  uint64_t v12 = &v8[24 * v3];
  long long v14 = &v8[24 * v7];
  sub_100058DB0(v12, "89");
  char v13 = v12 + 24;
  sub_100048204(a1, &v11);
  uint64_t v9 = a1[1];
  sub_100048174((uint64_t)&v11);
  return v9;
}

void sub_10030BA68(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100048174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030BA7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030BB00((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030BADC(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 64;
    do
    {
      sub_10030A71C(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030BB00(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(long long *)((char *)a2 + 24);
  uint64_t v5 = __dst + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_10004FC84(v5, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *((void *)__dst + 7) = *((void *)a2 + 7);
    *(_OWORD *)uint64_t v5 = v6;
  }
  return __dst;
}

void sub_10030BB84(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10030BBA0(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[176] = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    sub_100311AFC((uint64_t)a1, (int *)a2);
    a1[176] = 1;
  }
  return a1;
}

void sub_10030BBE4(_Unwind_Exception *a1)
{
  sub_10030AEBC(v1);
  _Unwind_Resume(a1);
}

char *sub_10030BBF8(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_10004FC84(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_10004FC84(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v11;
  }
  if (*((char *)a2 + 215) < 0)
  {
    sub_10004FC84(__dst + 192, *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v12 = a2[12];
    *((void *)__dst + 26) = *((void *)a2 + 26);
    *((_OWORD *)__dst + 12) = v12;
  }
  char v13 = __dst + 216;
  if (*((char *)a2 + 239) < 0)
  {
    sub_10004FC84(v13, *((void **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v14 = *(long long *)((char *)a2 + 216);
    *((void *)__dst + 29) = *((void *)a2 + 29);
    *(_OWORD *)char v13 = v14;
  }
  __int16 v15 = *((_WORD *)a2 + 120);
  __dst[242] = *((unsigned char *)a2 + 242);
  *((_WORD *)__dst + 120) = v15;
  return __dst;
}

void sub_10030BE24(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 215) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v1 + 191) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030BF00(uint64_t a1)
{
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_10030BFC4(void *result, long long *a2)
{
  uint64_t v2 = result;
  uint64_t v3 = result[1];
  if (*((char *)a2 + 23) < 0)
  {
    BOOL result = sub_10004FC84((unsigned char *)result[1], *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(v3 + 16) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v3 = v4;
  }
  v2[1] = v3 + 24;
  return result;
}

void sub_10030C01C(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10030C024(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      int v4 = *(_DWORD *)a2;
      *(_WORD *)(a1 + 4) = *(_WORD *)(a2 + 4);
      *(_DWORD *)a1 = v4;
      std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
      *(unsigned char *)(a1 + 32) = *(unsigned char *)(a2 + 32);
      std::string::operator=((std::string *)(a1 + 40), (const std::string *)(a2 + 40));
      std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
      std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
      std::string::operator=((std::string *)(a1 + 112), (const std::string *)(a2 + 112));
      *(_DWORD *)(a1 + 136) = *(_DWORD *)(a2 + 136);
      std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
      char v5 = *(unsigned char *)(a2 + 170);
      *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
      *(unsigned char *)(a1 + 170) = v5;
    }
  }
  else if (*(unsigned char *)(a1 + 176))
  {
    sub_10030C110(a1);
  }
  else
  {
    sub_100311AFC(a1, (int *)a2);
    *(unsigned char *)(a1 + 176) = 1;
  }
}

void sub_10030C110(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)(a1 + 112));
    }
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    if (*(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)(a1 + 176) = 0;
  }
}

void *sub_10030C19C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10030C224(result, a4);
    BOOL result = (void *)sub_10030C2C8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030C204(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C63B8(&a9);
  _Unwind_Resume(a1);
}

char *sub_10030C224(void *a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3) {
    sub_10006A748();
  }
  BOOL result = (char *)sub_10030C27C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[312 * v4];
  return result;
}

void *sub_10030C27C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xD20D20D20D20D3) {
    sub_10006A7CC();
  }
  return operator new(312 * a2);
}

uint64_t sub_10030C2C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030C34C((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 312;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030C328(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 312;
    do
    {
      sub_1000C643C(v4 + v2);
      v2 -= 312;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030C34C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  *((_WORD *)__dst + 60) = *((_WORD *)a2 + 60);
  sub_10030C4FC(__dst + 128, (uint64_t)(a2 + 8));
  return __dst;
}

void sub_10030C480(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030C4FC(char *__dst, uint64_t a2)
{
  *long long __dst = 0;
  __dst[176] = 0;
  if (*(unsigned char *)(a2 + 176))
  {
    sub_10030C55C(__dst, (long long *)a2);
    __dst[176] = 1;
  }
  return __dst;
}

void sub_10030C540(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 176)) {
    sub_1000C64D4(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030C55C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  *((_DWORD *)__dst + 18) = *((_DWORD *)a2 + 18);
  if (*((char *)a2 + 103) < 0)
  {
    sub_10004FC84(__dst + 80, *((void **)a2 + 10), *((void *)a2 + 11));
  }
  else
  {
    long long v7 = a2[5];
    *((void *)__dst + 12) = *((void *)a2 + 12);
    *((_OWORD *)__dst + 5) = v7;
  }
  if (*((char *)a2 + 127) < 0)
  {
    sub_10004FC84(__dst + 104, *((void **)a2 + 13), *((void *)a2 + 14));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 104);
    *((void *)__dst + 15) = *((void *)a2 + 15);
    *(_OWORD *)(__dst + 104) = v8;
  }
  if (*((char *)a2 + 151) < 0)
  {
    sub_10004FC84(__dst + 128, *((void **)a2 + 16), *((void *)a2 + 17));
  }
  else
  {
    long long v9 = a2[8];
    *((void *)__dst + 18) = *((void *)a2 + 18);
    *((_OWORD *)__dst + 8) = v9;
  }
  uint64_t v10 = __dst + 152;
  if (*((char *)a2 + 175) < 0)
  {
    sub_10004FC84(v10, *((void **)a2 + 19), *((void *)a2 + 20));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 152);
    *((void *)__dst + 21) = *((void *)a2 + 21);
    *(_OWORD *)uint64_t v10 = v11;
  }
  return __dst;
}

void sub_10030C6E8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 151) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 127) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 103) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10030C77C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030C800(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_10030C884(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_10004FC84(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }
  if (*((char *)a2 + 191) < 0)
  {
    sub_10004FC84(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v11;
  }
  if (*((char *)a2 + 215) < 0)
  {
    sub_10004FC84(__dst + 192, *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v12 = a2[12];
    *((void *)__dst + 26) = *((void *)a2 + 26);
    *((_OWORD *)__dst + 12) = v12;
  }
  __dst[216] = *((unsigned char *)a2 + 216);
  sub_1000593FC((uint64_t)(__dst + 224), a2 + 14);
  sub_1000593FC((uint64_t)(__dst + 256), a2 + 16);
  return __dst;
}

void sub_10030CAA4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void **a10)
{
  if (*(char *)(v10 + 191) < 0) {
    operator delete(*v16);
  }
  if (*(char *)(v10 + 167) < 0) {
    operator delete(*v15);
  }
  if (*(char *)(v10 + 143) < 0) {
    operator delete(*v14);
  }
  if (*(char *)(v10 + 119) < 0) {
    operator delete(*v13);
  }
  if (*(char *)(v10 + 95) < 0) {
    operator delete(*v12);
  }
  if (*(char *)(v10 + 71) < 0) {
    operator delete(*v11);
  }
  if (*(char *)(v10 + 47) < 0) {
    operator delete(*a10);
  }
  if (*(char *)(v10 + 23) < 0) {
    operator delete(*(void **)v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030CBA4(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 280) && *(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  if (*(unsigned char *)(a1 + 248) && *(char *)(a1 + 247) < 0) {
    operator delete(*(void **)(a1 + 224));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_10030CC88(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030CD0C(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_1001A1088(result, a4);
    BOOL result = (void *)sub_10030CD94((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030CD74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030A698(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030CD94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030CE18((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 64;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030CDF4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 64;
    do
    {
      sub_10030A71C(v4 + v2);
      v2 -= 64;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030CE18(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *(_OWORD *)(__dst + 24) = *(long long *)((char *)a2 + 24);
  long long v5 = __dst + 40;
  if (*((char *)a2 + 63) < 0)
  {
    sub_10004FC84(v5, *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 40);
    *((void *)__dst + 7) = *((void *)a2 + 7);
    *(_OWORD *)long long v5 = v6;
  }
  return __dst;
}

void sub_10030CE9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10030CEB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030CF3C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030CFC0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10030D044(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 240))
  {
    if (*(char *)(a1 + 239) < 0) {
      operator delete(*(void **)(a1 + 216));
    }
    sub_1000C584C(a1);
  }
  return a1;
}

void *sub_10030D088(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10030D10C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 1240);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 1216);
  if (v3) {
    sub_10004D2C8(v3);
  }
  long long v4 = *(std::__shared_weak_count **)(a1 + 1200);
  if (v4) {
    sub_10004D2C8(v4);
  }
  long long v5 = *(std::__shared_weak_count **)(a1 + 1184);
  if (v5) {
    sub_10004D2C8(v5);
  }
  long long v6 = *(std::__shared_weak_count **)(a1 + 1168);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (*(unsigned char *)(a1 + 1112) && *(char *)(a1 + 1015) < 0) {
    operator delete(*(void **)(a1 + 992));
  }
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*(void **)(a1 + 960));
  }
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*(void **)(a1 + 936));
  }
  if (*(unsigned char *)(a1 + 904) && *(char *)(a1 + 903) < 0) {
    operator delete(*(void **)(a1 + 880));
  }
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*(void **)(a1 + 856));
  }
  sub_10030D32C(a1 + 688);
  sub_10030D3C0(a1 + 528);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*(void **)(a1 + 504));
  }
  if (*(char *)(a1 + 503) < 0) {
    operator delete(*(void **)(a1 + 480));
  }
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*(void **)(a1 + 408));
  }
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*(void **)(a1 + 384));
  }
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*(void **)(a1 + 360));
  }
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*(void **)(a1 + 336));
  }
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*(void **)(a1 + 312));
  }
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*(void **)(a1 + 288));
  }
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*(void **)(a1 + 264));
  }
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*(void **)(a1 + 240));
  }
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*(void **)(a1 + 216));
  }
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  return a1;
}

uint64_t sub_10030D32C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(char *)(a1 + 159) < 0) {
      operator delete(*(void **)(a1 + 136));
    }
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)(a1 + 112));
    }
    if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(unsigned char *)(a1 + 32) && *(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
  }
  return a1;
}

uint64_t sub_10030D3C0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*(void **)(a1 + 128));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48) && *(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    uint64_t v3 = (void **)a1;
    sub_1001A010C(&v3);
  }
  return a1;
}

void *sub_10030D458(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030D4DC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_10030D560(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  long long v12 = 0;
  long long v6 = sub_1000C6D50(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (char *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_10030D604((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, (uint64_t *)v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10030D770((uint64_t)v10, 0);
  }
  return v7;
}

char *sub_10030D604@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  long long v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v6 = (char *)operator new(0x80uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  BOOL result = sub_10030D678(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10030D660(_Unwind_Exception *a1)
{
  sub_10030D770(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10030D678(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  long long v5 = *(long long *)((char *)a2 + 24);
  *((void *)__dst + 5) = *((void *)a2 + 5);
  *(_OWORD *)(__dst + 24) = v5;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  uint64_t v7 = __dst + 72;
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(v7, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return __dst;
}

void sub_10030D73C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10030D770(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10030D7C8((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10030D7C8(uint64_t a1)
{
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_10030D830(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030D8B4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030D938(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

char *sub_10030D9BC(char *__dst, uint64_t a2)
{
  *long long __dst = 0;
  __dst[256] = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    sub_10030DA1C(__dst, (long long *)a2);
    __dst[256] = 1;
  }
  return __dst;
}

void sub_10030DA00(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 256)) {
    sub_1000C5578(v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030DA1C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((_WORD *)__dst + 12) = *((_WORD *)a2 + 12);
  sub_1000593FC((uint64_t)(__dst + 32), a2 + 2);
  sub_1000593FC((uint64_t)(__dst + 64), a2 + 4);
  sub_1000593FC((uint64_t)(__dst + 96), a2 + 6);
  sub_1000593FC((uint64_t)(__dst + 128), a2 + 8);
  *((_WORD *)__dst + 80) = *((_WORD *)a2 + 80);
  if (*((char *)a2 + 191) < 0)
  {
    sub_10004FC84(__dst + 168, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)(__dst + 168) = v5;
  }
  __int16 v6 = *((_WORD *)a2 + 96);
  __dst[194] = *((unsigned char *)a2 + 194);
  *((_WORD *)__dst + 96) = v6;
  sub_1000593FC((uint64_t)(__dst + 200), (long long *)((char *)a2 + 200));
  long long v7 = *(long long *)((char *)a2 + 232);
  *((_WORD *)__dst + 124) = *((_WORD *)a2 + 124);
  *(_OWORD *)(__dst + 232) = v7;
  return __dst;
}

void sub_10030DB30(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 152) && *(char *)(v1 + 151) < 0) {
    operator delete(*v5);
  }
  if (*(unsigned char *)(v1 + 120) && *(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(unsigned char *)(v1 + 88) && *(char *)(v1 + 87) < 0) {
    operator delete(*v3);
  }
  if (*(unsigned char *)(v1 + 56) && *(char *)(v1 + 55) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030DBE4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_10019FE7C((void *)a1, *(void *)a2, *(void *)(a2 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 5));
  sub_1000593FC(a1 + 24, (long long *)(a2 + 24));
  sub_1000593FC(a1 + 56, (long long *)(a2 + 56));
  sub_1000593FC(a1 + 88, (long long *)(a2 + 88));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v4 = (unsigned char *)(a1 + 128);
  if (*(char *)(a2 + 151) < 0)
  {
    sub_10004FC84(v4, *(void **)(a2 + 128), *(void *)(a2 + 136));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)long long v4 = v5;
  }
  return a1;
}

void sub_10030DCB0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void **a10)
{
  if (*(unsigned char *)(v10 + 112) && *(char *)(v10 + 111) < 0) {
    operator delete(*v13);
  }
  if (*(unsigned char *)(v10 + 80) && *(char *)(v10 + 79) < 0) {
    operator delete(*v12);
  }
  if (*(unsigned char *)(v10 + 48))
  {
    if (*(char *)(v10 + 47) < 0) {
      operator delete(*v11);
    }
  }
  a10 = (void **)v10;
  sub_1001A010C(&a10);
  _Unwind_Resume(a1);
}

void *sub_10030DD28(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10030DDAC(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 24), *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 48), *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 72), *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *(void *)(a1 + 88) = *((void *)a2 + 11);
    *(_OWORD *)(a1 + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 96), *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 120), *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *(void *)(a1 + 136) = *((void *)a2 + 17);
    *(_OWORD *)(a1 + 120) = v9;
  }
  sub_10023C0CC((char *)(a1 + 144), a2 + 9);
  if (*((char *)a2 + 215) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 192), *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v10 = a2[12];
    *(void *)(a1 + 208) = *((void *)a2 + 26);
    *(_OWORD *)(a1 + 192) = v10;
  }
  if (*((char *)a2 + 239) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 216), *((void **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v11 = *(long long *)((char *)a2 + 216);
    *(void *)(a1 + 232) = *((void *)a2 + 29);
    *(_OWORD *)(a1 + 216) = v11;
  }
  if (*((char *)a2 + 263) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 240), *((void **)a2 + 30), *((void *)a2 + 31));
  }
  else
  {
    long long v12 = a2[15];
    *(void *)(a1 + 256) = *((void *)a2 + 32);
    *(_OWORD *)(a1 + 240) = v12;
  }
  if (*((char *)a2 + 287) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 264), *((void **)a2 + 33), *((void *)a2 + 34));
  }
  else
  {
    long long v13 = *(long long *)((char *)a2 + 264);
    *(void *)(a1 + 280) = *((void *)a2 + 35);
    *(_OWORD *)(a1 + 264) = v13;
  }
  if (*((char *)a2 + 311) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 288), *((void **)a2 + 36), *((void *)a2 + 37));
  }
  else
  {
    long long v14 = a2[18];
    *(void *)(a1 + 304) = *((void *)a2 + 38);
    *(_OWORD *)(a1 + 288) = v14;
  }
  if (*((char *)a2 + 335) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 312), *((void **)a2 + 39), *((void *)a2 + 40));
  }
  else
  {
    long long v15 = *(long long *)((char *)a2 + 312);
    *(void *)(a1 + 328) = *((void *)a2 + 41);
    *(_OWORD *)(a1 + 312) = v15;
  }
  if (*((char *)a2 + 359) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 336), *((void **)a2 + 42), *((void *)a2 + 43));
  }
  else
  {
    long long v16 = a2[21];
    *(void *)(a1 + 352) = *((void *)a2 + 44);
    *(_OWORD *)(a1 + 336) = v16;
  }
  uint64_t v17 = (unsigned char *)(a1 + 360);
  if (*((char *)a2 + 383) < 0)
  {
    sub_10004FC84(v17, *((void **)a2 + 45), *((void *)a2 + 46));
  }
  else
  {
    long long v18 = *(long long *)((char *)a2 + 360);
    *(void *)(a1 + 376) = *((void *)a2 + 47);
    *(_OWORD *)uint64_t v17 = v18;
  }
  if (*((char *)a2 + 407) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 384), *((void **)a2 + 48), *((void *)a2 + 49));
  }
  else
  {
    long long v19 = a2[24];
    *(void *)(a1 + 400) = *((void *)a2 + 50);
    *(_OWORD *)(a1 + 384) = v19;
  }
  if (*((char *)a2 + 431) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 408), *((void **)a2 + 51), *((void *)a2 + 52));
  }
  else
  {
    long long v20 = *(long long *)((char *)a2 + 408);
    *(void *)(a1 + 424) = *((void *)a2 + 53);
    *(_OWORD *)(a1 + 408) = v20;
  }
  if (*((char *)a2 + 455) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 432), *((void **)a2 + 54), *((void *)a2 + 55));
  }
  else
  {
    long long v21 = a2[27];
    *(void *)(a1 + 448) = *((void *)a2 + 56);
    *(_OWORD *)(a1 + 432) = v21;
  }
  if (*((char *)a2 + 479) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 456), *((void **)a2 + 57), *((void *)a2 + 58));
  }
  else
  {
    long long v22 = *(long long *)((char *)a2 + 456);
    *(void *)(a1 + 472) = *((void *)a2 + 59);
    *(_OWORD *)(a1 + 456) = v22;
  }
  if (*((char *)a2 + 503) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 480), *((void **)a2 + 60), *((void *)a2 + 61));
  }
  else
  {
    long long v23 = a2[30];
    *(void *)(a1 + 496) = *((void *)a2 + 62);
    *(_OWORD *)(a1 + 480) = v23;
  }
  if (*((char *)a2 + 527) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 504), *((void **)a2 + 63), *((void *)a2 + 64));
  }
  else
  {
    long long v24 = *(long long *)((char *)a2 + 504);
    *(void *)(a1 + 520) = *((void *)a2 + 65);
    *(_OWORD *)(a1 + 504) = v24;
  }
  sub_10030E654((unsigned char *)(a1 + 528), (uint64_t)(a2 + 33));
  sub_10030E6AC((unsigned char *)(a1 + 688), (uint64_t)(a2 + 43));
  if (*((char *)a2 + 879) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 856), *((void **)a2 + 107), *((void *)a2 + 108));
  }
  else
  {
    long long v25 = *(long long *)((char *)a2 + 856);
    *(void *)(a1 + 872) = *((void *)a2 + 109);
    *(_OWORD *)(a1 + 856) = v25;
  }
  sub_1000593FC(a1 + 880, a2 + 55);
  long long v26 = a2[57];
  *(_WORD *)(a1 + 928) = *((_WORD *)a2 + 464);
  *(_OWORD *)(a1 + 912) = v26;
  if (*((char *)a2 + 959) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 936), *((void **)a2 + 117), *((void *)a2 + 118));
  }
  else
  {
    long long v27 = *(long long *)((char *)a2 + 936);
    *(void *)(a1 + 952) = *((void *)a2 + 119);
    *(_OWORD *)(a1 + 936) = v27;
  }
  if (*((char *)a2 + 983) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 960), *((void **)a2 + 120), *((void *)a2 + 121));
  }
  else
  {
    long long v28 = a2[60];
    *(void *)(a1 + 976) = *((void *)a2 + 122);
    *(_OWORD *)(a1 + 960) = v28;
  }
  *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
  sub_10030E858((char *)(a1 + 992), a2 + 62);
  long long v29 = a2[70];
  long long v30 = a2[71];
  *(void *)(a1 + 1152) = *((void *)a2 + 144);
  *(_OWORD *)(a1 + 1136) = v30;
  *(_OWORD *)(a1 + 1120) = v29;
  *(void *)(a1 + 1160) = *((void *)a2 + 145);
  uint64_t v31 = *((void *)a2 + 146);
  *(void *)(a1 + 1168) = v31;
  if (v31) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v31 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1176) = *((void *)a2 + 147);
  uint64_t v32 = *((void *)a2 + 148);
  *(void *)(a1 + 1184) = v32;
  if (v32) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v32 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1192) = *((void *)a2 + 149);
  uint64_t v33 = *((void *)a2 + 150);
  *(void *)(a1 + 1200) = v33;
  if (v33) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v33 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 1208) = *((void *)a2 + 151);
  uint64_t v34 = *((void *)a2 + 152);
  *(void *)(a1 + 1216) = v34;
  if (v34) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v34 + 8), 1uLL, memory_order_relaxed);
  }
  __int16 v35 = *((_WORD *)a2 + 612);
  *(unsigned char *)(a1 + 1226) = *((unsigned char *)a2 + 1226);
  *(_WORD *)(a1 + 1224) = v35;
  *(void *)(a1 + 1232) = *((void *)a2 + 154);
  uint64_t v36 = *((void *)a2 + 155);
  *(void *)(a1 + 1240) = v36;
  if (v36) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v36 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_10030E3AC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, void **a10, void **a11, void **a12, void **a13, void **a14, void **a15, void **a16, void **a17, void **a18, void **a19, void **a20,void **a21,void **a22,void **a23)
{
  if (v23[959] < 0) {
    operator delete(*v30);
  }
  if (v23[904] && v23[903] < 0) {
    operator delete(*v29);
  }
  if (v23[879] < 0) {
    operator delete(*v28);
  }
  sub_10030D32C(v27);
  sub_10030D3C0(v26);
  if (v23[527] < 0) {
    operator delete(*v25);
  }
  if (v23[503] < 0) {
    operator delete(*v24);
  }
  if (v23[479] < 0) {
    operator delete(*a9);
  }
  if (v23[455] < 0) {
    operator delete(*a10);
  }
  if (v23[431] < 0) {
    operator delete(*a11);
  }
  if (v23[407] < 0) {
    operator delete(*a12);
  }
  if (v23[383] < 0) {
    operator delete(*a13);
  }
  if (v23[359] < 0) {
    operator delete(*a14);
  }
  if (v23[335] < 0) {
    operator delete(*a15);
  }
  if (v23[311] < 0) {
    operator delete(*a16);
  }
  if (v23[287] < 0) {
    operator delete(*a17);
  }
  if (v23[263] < 0) {
    operator delete(*a18);
  }
  if (v23[239] < 0) {
    operator delete(*a19);
  }
  if (v23[215] < 0) {
    operator delete(*a20);
  }
  sub_1001085D8(*(void *)(v31 - 88));
  if (v23[143] < 0) {
    operator delete(*a21);
  }
  if (v23[119] < 0) {
    operator delete(*a22);
  }
  if (v23[95] < 0) {
    operator delete(*a23);
  }
  if (v23[71] < 0) {
    operator delete(**(void ***)(v31 - 104));
  }
  if (v23[47] < 0) {
    operator delete(**(void ***)(v31 - 96));
  }
  _Unwind_Resume(a1);
}

void sub_10030E644()
{
}

void sub_10030E64C()
{
}

unsigned char *sub_10030E654(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[152] = 0;
  if (*(unsigned char *)(a2 + 152))
  {
    sub_10030DBE4((uint64_t)a1, a2);
    a1[152] = 1;
  }
  return a1;
}

void sub_10030E698(_Unwind_Exception *a1)
{
  sub_10030D3C0(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_10030E6AC(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[160] = 0;
  if (*(unsigned char *)(a2 + 160))
  {
    sub_10030E704((uint64_t)a1, a2);
    a1[160] = 1;
  }
  return a1;
}

void sub_10030E6F0(_Unwind_Exception *a1)
{
  sub_10030D32C(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10030E704(uint64_t a1, uint64_t a2)
{
  long long v4 = (long long *)(a2 + 40);
  *(unsigned char *)a1 = *(unsigned char *)a2;
  uint64_t v5 = a1 + 40;
  sub_1000593FC(a1 + 8, (long long *)(a2 + 8));
  sub_1000593FC(v5, v4);
  sub_1000593FC(a1 + 72, (long long *)(a2 + 72));
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  if (*(char *)(a2 + 135) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 112), *(void **)(a2 + 112), *(void *)(a2 + 120));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 112);
    *(void *)(a1 + 128) = *(void *)(a2 + 128);
    *(_OWORD *)(a1 + 112) = v6;
  }
  long long v7 = (unsigned char *)(a1 + 136);
  if (*(char *)(a2 + 159) < 0)
  {
    sub_10004FC84(v7, *(void **)(a2 + 136), *(void *)(a2 + 144));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 136);
    *(void *)(a1 + 152) = *(void *)(a2 + 152);
    *(_OWORD *)long long v7 = v8;
  }
  return a1;
}

void sub_10030E7DC(_Unwind_Exception *exception_object)
{
  if (v1[135] < 0) {
    operator delete(*v5);
  }
  if (v1[96] && v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[64] && v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[32])
  {
    if (v1[31] < 0) {
      operator delete(*v2);
    }
  }
  _Unwind_Resume(exception_object);
}

char *sub_10030E858(char *a1, long long *a2)
{
  *a1 = 0;
  a1[120] = 0;
  sub_10030E8AC(a1, a2);
  return a1;
}

void sub_10030E888(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 120))
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
  }
  _Unwind_Resume(exception_object);
}

__n128 sub_10030E8AC(char *__dst, long long *a2)
{
  if (*((unsigned char *)a2 + 120))
  {
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long v4 = *a2;
      *((void *)__dst + 2) = *((void *)a2 + 2);
      *(_OWORD *)long long __dst = v4;
    }
    long long v5 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(__dst + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(__dst + 24) = v5;
    __n128 result = *(__n128 *)((char *)a2 + 56);
    long long v7 = *(long long *)((char *)a2 + 72);
    long long v8 = *(long long *)((char *)a2 + 88);
    *(_OWORD *)(__dst + 104) = *(long long *)((char *)a2 + 104);
    *(_OWORD *)(__dst + 88) = v8;
    *(_OWORD *)(__dst + 72) = v7;
    *(__n128 *)(__dst + 56) = result;
    __dst[120] = 1;
  }
  return result;
}

uint64_t sub_10030E938(uint64_t a1)
{
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*(void **)(a1 + 176));
  }
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*(void **)(a1 + 152));
  }
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

uint64_t sub_10030E9EC(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_1000D8578();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v18 = a1 + 2;
  if (v9) {
    long long v10 = (char *)sub_10004812C(v7, v9);
  }
  else {
    long long v10 = 0;
  }
  long long v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  long long v16 = v11;
  uint64_t v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a2, *((void *)a2 + 1));
    long long v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long v11 = v12;
  }
  long long v16 = v11 + 24;
  sub_100048204(a1, v15);
  uint64_t v13 = a1[1];
  sub_100048174((uint64_t)v15);
  return v13;
}

void sub_10030EAFC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100048174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030EB10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_1000C5AB4(a1, a2) + 216;
  if (*(char *)(a2 + 239) < 0)
  {
    sub_10004FC84((unsigned char *)v4, *(void **)(a2 + 216), *(void *)(a2 + 224));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 216);
    *(void *)(v4 + 16) = *(void *)(a2 + 232);
    *(_OWORD *)uint64_t v4 = v5;
  }
  *(unsigned char *)(a1 + 240) = 1;
  return a1;
}

void sub_10030EB70(_Unwind_Exception *a1)
{
  sub_1000C584C(v1);
  _Unwind_Resume(a1);
}

uint64_t *sub_10030EB84(uint64_t *result, void *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = result[1];
  uint64_t v4 = a2[1];
  if (v3 == *result)
  {
    uint64_t v5 = a2[1];
  }
  else
  {
    do
    {
      uint64_t v5 = v4 - 72;
      long long v6 = *(_OWORD *)(v3 - 72);
      *(void *)(v4 - 56) = *(void *)(v3 - 56);
      *(_OWORD *)(v4 - 72) = v6;
      *(void *)(v3 - 64) = 0;
      *(void *)(v3 - 56) = 0;
      *(void *)(v3 - 72) = 0;
      long long v7 = *(_OWORD *)(v3 - 48);
      *(void *)(v4 - 32) = *(void *)(v3 - 32);
      *(_OWORD *)(v4 - 48) = v7;
      *(void *)(v3 - 40) = 0;
      *(void *)(v3 - 32) = 0;
      *(void *)(v3 - 48) = 0;
      long long v8 = *(_OWORD *)(v3 - 24);
      *(void *)(v4 - 8) = *(void *)(v3 - 8);
      *(_OWORD *)(v4 - 24) = v8;
      *(void *)(v3 - 16) = 0;
      *(void *)(v3 - 8) = 0;
      *(void *)(v3 - 24) = 0;
      v3 -= 72;
      v4 -= 72;
    }
    while (v3 != v2);
  }
  a2[1] = v5;
  uint64_t v9 = *result;
  char *result = v5;
  a2[1] = v9;
  uint64_t v10 = result[1];
  result[1] = a2[2];
  a2[2] = v10;
  uint64_t v11 = result[2];
  result[2] = a2[3];
  a2[3] = v11;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10030EC38(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 72;
    sub_10010C078(i - 72);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10030EC88(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_10010C078(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10030ED0C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10030ED90(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

BOOL sub_10030EE14(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  uint64_t v4 = a2[23];
  size_t v5 = *((void *)a2 + 1);
  if ((v4 & 0x80u) == 0) {
    uint64_t v6 = a2[23];
  }
  else {
    uint64_t v6 = *((void *)a2 + 1);
  }
  uint64_t v7 = a3[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a3 + 1);
  }
  if (v6 != v7) {
    return 0;
  }
  if (v8 >= 0) {
    uint64_t v10 = a3;
  }
  else {
    uint64_t v10 = *(unsigned __int8 **)a3;
  }
  if ((v4 & 0x80) != 0)
  {
    if (!memcmp(*(const void **)a2, v10, v5)) {
      goto LABEL_18;
    }
    return 0;
  }
  if (v4)
  {
    uint64_t v11 = a2;
    while (*v11 == *v10)
    {
      ++v11;
      ++v10;
      if (!--v4) {
        goto LABEL_18;
      }
    }
    return 0;
  }
LABEL_18:

  return sub_10030EED8(a2 + 24, a3 + 24);
}

BOOL sub_10030EED8(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0;
  }
  uint64_t v4 = a1[31];
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = a1[31];
  }
  else {
    uint64_t v5 = *((void *)a1 + 2);
  }
  uint64_t v6 = a2[31];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 2);
  }
  if (v5 != v6) {
    return 0;
  }
  int v8 = (const void **)(a1 + 8);
  if (v7 >= 0) {
    uint64_t v9 = a2 + 8;
  }
  else {
    uint64_t v9 = (unsigned __int8 *)*((void *)a2 + 1);
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v8, v9, *((void *)a1 + 2))) {
      return 0;
    }
  }
  else if (a1[31])
  {
    while (*(unsigned __int8 *)v8 == *v9)
    {
      int v8 = (const void **)((char *)v8 + 1);
      ++v9;
      if (!--v4) {
        goto LABEL_17;
      }
    }
    return 0;
  }
LABEL_17:
  uint64_t v10 = a1[55];
  if ((v10 & 0x80u) == 0) {
    uint64_t v11 = a1[55];
  }
  else {
    uint64_t v11 = *((void *)a1 + 5);
  }
  uint64_t v12 = a2[55];
  int v13 = (char)v12;
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *((void *)a2 + 5);
  }
  if (v11 != v12) {
    return 0;
  }
  long long v14 = (const void **)(a1 + 32);
  if (v13 >= 0) {
    long long v15 = a2 + 32;
  }
  else {
    long long v15 = (unsigned __int8 *)*((void *)a2 + 4);
  }
  if ((v10 & 0x80) != 0)
  {
    if (memcmp(*v14, v15, *((void *)a1 + 5))) {
      return 0;
    }
  }
  else if (a1[55])
  {
    while (*(unsigned __int8 *)v14 == *v15)
    {
      long long v14 = (const void **)((char *)v14 + 1);
      ++v15;
      if (!--v10) {
        goto LABEL_32;
      }
    }
    return 0;
  }
LABEL_32:
  uint64_t v16 = a1[79];
  if ((v16 & 0x80u) == 0) {
    uint64_t v17 = a1[79];
  }
  else {
    uint64_t v17 = *((void *)a1 + 8);
  }
  uint64_t v18 = a2[79];
  int v19 = (char)v18;
  if ((v18 & 0x80u) != 0) {
    uint64_t v18 = *((void *)a2 + 8);
  }
  if (v17 != v18) {
    return 0;
  }
  long long v20 = (const void **)(a1 + 56);
  if (v19 >= 0) {
    long long v21 = a2 + 56;
  }
  else {
    long long v21 = (unsigned __int8 *)*((void *)a2 + 7);
  }
  if ((v16 & 0x80) != 0)
  {
    if (!memcmp(*v20, v21, *((void *)a1 + 8))) {
      return *((double *)a1 + 10) == *((double *)a2 + 10);
    }
    return 0;
  }
  if (a1[79])
  {
    while (*(unsigned __int8 *)v20 == *v21)
    {
      long long v20 = (const void **)((char *)v20 + 1);
      ++v21;
      if (!--v16) {
        return *((double *)a1 + 10) == *((double *)a2 + 10);
      }
    }
    return 0;
  }
  return *((double *)a1 + 10) == *((double *)a2 + 10);
}

uint64_t sub_10030F098(uint64_t *a1, char *a2, long long *a3)
{
  uint64_t v4 = *a1;
  unint64_t v5 = 0xCCCCCCCCCCCCCCCDLL * ((a1[1] - *a1) >> 6);
  unint64_t v6 = v5 + 1;
  if (v5 + 1 > 0xCCCCCCCCCCCCCCLL) {
    sub_10006A748();
  }
  uint64_t v9 = (uint64_t)(a1 + 2);
  unint64_t v10 = 0xCCCCCCCCCCCCCCCDLL * ((a1[2] - v4) >> 6);
  if (2 * v10 > v6) {
    unint64_t v6 = 2 * v10;
  }
  if (v10 >= 0x66666666666666) {
    unint64_t v11 = 0xCCCCCCCCCCCCCCLL;
  }
  else {
    unint64_t v11 = v6;
  }
  v21[4] = a1 + 2;
  if (v11) {
    uint64_t v12 = (char *)sub_10030F398(v9, v11);
  }
  else {
    uint64_t v12 = 0;
  }
  int v13 = &v12[320 * v5];
  v21[0] = v12;
  v21[1] = v13;
  void v21[3] = &v12[320 * v11];
  char *v13 = *a2;
  long long v14 = *a3;
  *((void *)v13 + 3) = *((void *)a3 + 2);
  *(_OWORD *)(v13 + 8) = v14;
  *((void *)a3 + 1) = 0;
  *((void *)a3 + 2) = 0;
  *(void *)a3 = 0;
  long long v15 = *(long long *)((char *)a3 + 24);
  *((void *)v13 + 6) = *((void *)a3 + 5);
  *((_OWORD *)v13 + 2) = v15;
  *((void *)a3 + 4) = 0;
  *((void *)a3 + 5) = 0;
  *((void *)a3 + 3) = 0;
  long long v16 = a3[3];
  *((void *)v13 + 9) = *((void *)a3 + 8);
  *(_OWORD *)(v13 + 56) = v16;
  *((void *)a3 + 7) = 0;
  *((void *)a3 + 8) = 0;
  *((void *)a3 + 6) = 0;
  long long v17 = *(long long *)((char *)a3 + 72);
  *((void *)v13 + 12) = *((void *)a3 + 11);
  *((_OWORD *)v13 + 5) = v17;
  *((void *)a3 + 9) = 0;
  *((void *)a3 + 10) = 0;
  *((void *)a3 + 11) = 0;
  long long v18 = a3[6];
  *((void *)v13 + 15) = *((void *)a3 + 14);
  *(_OWORD *)(v13 + 104) = v18;
  *((void *)a3 + 12) = 0;
  *((void *)a3 + 13) = 0;
  *((void *)a3 + 14) = 0;
  *((_WORD *)v13 + 64) = *((_WORD *)a3 + 60);
  sub_10030F228(v13 + 136, a3 + 8);
  v21[2] = v13 + 320;
  sub_10030F320(a1, v21);
  uint64_t v19 = a1[1];
  sub_10030F598((uint64_t)v21);
  return v19;
}

void sub_10030F214(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030F598((uint64_t)va);
  _Unwind_Resume(a1);
}

unsigned char *sub_10030F228(unsigned char *a1, long long *a2)
{
  *a1 = 0;
  a1[176] = 0;
  sub_10030F25C((uint64_t)a1, a2);
  return a1;
}

__n128 sub_10030F25C(uint64_t a1, long long *a2)
{
  if (*((unsigned char *)a2 + 176))
  {
    long long v2 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v2;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v3 = *(long long *)((char *)a2 + 24);
    *(void *)(a1 + 40) = *((void *)a2 + 5);
    *(_OWORD *)(a1 + 24) = v3;
    *((void *)a2 + 4) = 0;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 3) = 0;
    long long v4 = a2[3];
    *(void *)(a1 + 64) = *((void *)a2 + 8);
    *(_OWORD *)(a1 + 48) = v4;
    *((void *)a2 + 7) = 0;
    *((void *)a2 + 8) = 0;
    *((void *)a2 + 6) = 0;
    *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
    long long v5 = a2[5];
    *(void *)(a1 + 96) = *((void *)a2 + 12);
    *(_OWORD *)(a1 + 80) = v5;
    *((void *)a2 + 11) = 0;
    *((void *)a2 + 12) = 0;
    *((void *)a2 + 10) = 0;
    long long v6 = *(long long *)((char *)a2 + 104);
    *(void *)(a1 + 120) = *((void *)a2 + 15);
    *(_OWORD *)(a1 + 104) = v6;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 15) = 0;
    *((void *)a2 + 13) = 0;
    long long v7 = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v7;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    __n128 result = *(__n128 *)((char *)a2 + 152);
    *(void *)(a1 + 168) = *((void *)a2 + 21);
    *(__n128 *)(a1 + 152) = result;
    *((void *)a2 + 19) = 0;
    *((void *)a2 + 20) = 0;
    *((void *)a2 + 21) = 0;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return result;
}

uint64_t sub_10030F320(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10030F3E0((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_10030F398(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xCCCCCCCCCCCCCDLL) {
    sub_10006A7CC();
  }
  return operator new(320 * a2);
}

uint64_t sub_10030F3E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a3 + v11;
      *(unsigned char *)(a7 + v11 - 320) = *(unsigned char *)(a3 + v11 - 320);
      uint64_t v14 = a7 + v11 - 312;
      uint64_t v15 = a3 + v11 - 312;
      long long v16 = *(_OWORD *)v15;
      *(void *)(v14 + 16) = *(void *)(a3 + v11 - 296);
      *(_OWORD *)uint64_t v14 = v16;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = 0;
      uint64_t v17 = a7 + v11 - 288;
      uint64_t v18 = a3 + v11 - 288;
      long long v19 = *(_OWORD *)v18;
      *(void *)(v17 + 16) = *(void *)(a3 + v11 - 272);
      *(_OWORD *)uint64_t v17 = v19;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
      *(void *)uint64_t v18 = 0;
      long long v20 = (long long *)(a3 + v11 - 264);
      long long v21 = *v20;
      *(void *)(v12 - 248) = *(void *)(a3 + v11 - 248);
      *(_OWORD *)(a7 + v11 - 264) = v21;
      *(void *)(v13 - 256) = 0;
      *(void *)(v13 - 248) = 0;
      *(void *)long long v20 = 0;
      long long v22 = *(_OWORD *)(a3 + v11 - 240);
      *(void *)(v12 - 224) = *(void *)(a3 + v11 - 224);
      *(_OWORD *)(v12 - 240) = v22;
      *(void *)(v13 - 240) = 0;
      *(void *)(v13 - 232) = 0;
      *(void *)(v13 - 224) = 0;
      long long v23 = *(_OWORD *)(a3 + v11 - 216);
      *(void *)(v12 - 200) = *(void *)(a3 + v11 - 200);
      *(_OWORD *)(v12 - 216) = v23;
      *(void *)(v13 - 216) = 0;
      *(void *)(v13 - 208) = 0;
      *(void *)(v13 - 200) = 0;
      *(_WORD *)(v12 - 192) = *(_WORD *)(a3 + v11 - 192);
      sub_10030F228((unsigned char *)(a7 + v11 - 184), (long long *)(a3 + v11 - 184));
      v11 -= 320;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

void sub_10030F500(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312)) {
    sub_1000C64D4(a1 + 136);
  }
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    long long v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t sub_10030F598(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 320;
    sub_10030F500(i - 320);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_10030F5E8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xD20D20D20D20D2) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x69069069069069) {
    unint64_t v9 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    unint64_t v10 = (char *)sub_10030C27C(v7, v9);
  }
  else {
    unint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[312 * v4];
  long long v16 = &v10[312 * v9];
  sub_10030C34C(v14, a2);
  uint64_t v15 = v14 + 312;
  sub_10030F708(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10030F890((uint64_t)&v13);
  return v11;
}

void sub_10030F6F4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030F890((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10030F708(uint64_t *a1, void *a2)
{
  uint64_t result = sub_10030F780((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_10030F780(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v11 = 0;
    do
    {
      uint64_t v12 = a7 + v11;
      uint64_t v13 = a7 + v11 - 312;
      uint64_t v14 = a3 + v11;
      uint64_t v15 = a3 + v11 - 312;
      long long v16 = *(_OWORD *)v15;
      *(void *)(v13 + 16) = *(void *)(a3 + v11 - 296);
      *(_OWORD *)uint64_t v13 = v16;
      *(void *)(v15 + 8) = 0;
      *(void *)(v15 + 16) = 0;
      *(void *)uint64_t v15 = 0;
      uint64_t v17 = a7 + v11 - 288;
      uint64_t v18 = a3 + v11 - 288;
      long long v19 = *(_OWORD *)v18;
      *(void *)(v17 + 16) = *(void *)(a3 + v11 - 272);
      *(_OWORD *)uint64_t v17 = v19;
      *(void *)(v18 + 8) = 0;
      *(void *)(v18 + 16) = 0;
      *(void *)uint64_t v18 = 0;
      long long v20 = (long long *)(a3 + v11 - 264);
      long long v21 = *v20;
      *(void *)(v12 - 248) = *(void *)(a3 + v11 - 248);
      *(_OWORD *)(a7 + v11 - 264) = v21;
      *(void *)(v14 - 256) = 0;
      *(void *)(v14 - 248) = 0;
      *(void *)long long v20 = 0;
      long long v22 = *(_OWORD *)(a3 + v11 - 240);
      *(void *)(v12 - 224) = *(void *)(a3 + v11 - 224);
      *(_OWORD *)(v12 - 240) = v22;
      *(void *)(v14 - 240) = 0;
      *(void *)(v14 - 232) = 0;
      *(void *)(v14 - 224) = 0;
      long long v23 = *(_OWORD *)(a3 + v11 - 216);
      *(void *)(v12 - 200) = *(void *)(a3 + v11 - 200);
      *(_OWORD *)(v12 - 216) = v23;
      *(void *)(v14 - 216) = 0;
      *(void *)(v14 - 208) = 0;
      *(void *)(v14 - 200) = 0;
      *(_WORD *)(v12 - 192) = *(_WORD *)(a3 + v11 - 192);
      sub_10030F228((unsigned char *)(a7 + v11 - 184), (long long *)(a3 + v11 - 184));
      v11 -= 312;
    }
    while (a3 + v11 != a5);
  }
  return a6;
}

uint64_t sub_10030F890(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 312;
    sub_1000C643C(i - 312);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_10030F8E0(void ***a1)
{
  uint64_t v1 = *a1;
  long long v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 320;
        sub_10030F500(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10030F964(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10030F9EC(result, a4);
    uint64_t result = (void *)sub_10030FA90((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030F9CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_100310018(&a9);
  _Unwind_Resume(a1);
}

char *sub_10030F9EC(void *a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    sub_10006A748();
  }
  uint64_t result = (char *)sub_10030FA44((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[200 * v4];
  return result;
}

void *sub_10030FA44(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x147AE147AE147AFLL) {
    sub_10006A7CC();
  }
  return operator new(200 * a2);
}

uint64_t sub_10030FA90(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10030FB14(a4 + v7, a2 + v7);
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10030FAF0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 200;
    do
    {
      sub_10030FF90(v4 + v2);
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10030FB14(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  long long v5 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = v5;
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  *(unsigned char *)(a1 + 80) = *(unsigned char *)(a2 + 80);
  if (*(char *)(a2 + 111) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 88), *(void **)(a2 + 88), *(void *)(a2 + 96));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 88);
    *(void *)(a1 + 104) = *(void *)(a2 + 104);
    *(_OWORD *)(a1 + 88) = v7;
  }
  *(_DWORD *)(a1 + 112) = *(_DWORD *)(a2 + 112);
  if (*(char *)(a2 + 143) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v8;
  }
  uint64_t v9 = *(void *)(a2 + 144);
  *(void *)(a1 + 152) = 0;
  *(void *)(a1 + 144) = v9;
  *(void *)(a1 + 160) = 0;
  *(void *)(a1 + 168) = 0;
  sub_1000302C0((char *)(a1 + 152), *(long long **)(a2 + 152), *(long long **)(a2 + 160), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a2 + 160) - *(void *)(a2 + 152)) >> 3));
  *(void *)(a1 + 176) = 0;
  *(void *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0;
  sub_10030FD18((void *)(a1 + 176), *(long long **)(a2 + 176), *(long long **)(a2 + 184), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(a2 + 184) - *(void *)(a2 + 176)) >> 3));
  return a1;
}

void sub_10030FCA0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if (v11[111] < 0) {
    operator delete(*v13);
  }
  if (v11[79] < 0) {
    operator delete(*v12);
  }
  if (v11[31] < 0) {
    operator delete(*v10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_10030FD18(void *result, long long *a2, long long *a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10005CC94(result, a4);
    uint64_t result = (void *)sub_10030FDA0((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10030FD80(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030FEEC(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_10030FDA0(uint64_t a1, long long *a2, long long *a3, uint64_t a4)
{
  uint64_t v4 = a4;
  uint64_t v13 = a4;
  uint64_t v14 = a4;
  v11[0] = a1;
  v11[1] = &v13;
  v11[2] = &v14;
  uint64_t v12 = 0;
  if (a2 != a3)
  {
    long long v6 = a2 + 1;
    do
    {
      *(_OWORD *)uint64_t v4 = *(v6 - 1);
      long long v7 = (unsigned char *)(v4 + 16);
      if (*((char *)v6 + 23) < 0)
      {
        sub_10004FC84(v7, *(void **)v6, *((void *)v6 + 1));
        uint64_t v4 = v14;
      }
      else
      {
        long long v8 = *v6;
        *(void *)(v4 + 32) = *((void *)v6 + 2);
        *(_OWORD *)long long v7 = v8;
      }
      uint64_t v9 = v6 - 1;
      v4 += 40;
      uint64_t v14 = v4;
      long long v6 = (long long *)((char *)v6 + 40);
    }
    while ((long long *)((char *)v9 + 40) != a3);
  }
  LOBYTE(v12) = 1;
  sub_10030FE6C((uint64_t)v11);
  return v4;
}

void sub_10030FE58(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_10030FE6C(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_10030FEA4(a1);
  }
  return a1;
}

void sub_10030FEA4(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 16);
  uint64_t v2 = **(void **)(a1 + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 - 1) < 0) {
      operator delete(*(void **)(v1 - 24));
    }
    v1 -= 40;
  }
}

void sub_10030FEEC(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_10030FF40((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_10030FF40(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 40)
  {
    if (*(char *)(i - 1) < 0) {
      operator delete(*(void **)(i - 24));
    }
  }
  a1[1] = v2;
}

void sub_10030FF90(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 176);
  sub_10030FEEC(&v2);
  uint64_t v2 = (void **)(a1 + 152);
  sub_100047F64(&v2);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_100310018(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 200;
        sub_10030FF90(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_10031009C(void *a1, char *a2, long long *a3)
{
  long long v5 = sub_100058DB0(a1, a2) + 3;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(v5, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v6 = *a3;
    void v5[2] = *((void *)a3 + 2);
    *(_OWORD *)long long v5 = v6;
  }
  return a1;
}

void sub_1003100F0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

long long *sub_10031010C(long long *a1, long long *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10031016C(a3, v4);
      uint64_t v4 = (long long *)((char *)v4 + 312);
      a3 += 312;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_10031016C(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  uint64_t v9 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  uint64_t v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)uint64_t v11 = v12;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  *(_WORD *)(a1 + 120) = *((_WORD *)a2 + 60);
  sub_10031029C(a1 + 128, (uint64_t)(a2 + 8));
  return a1;
}

__n128 sub_10031029C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 176) == *(unsigned __int8 *)(a2 + 176))
  {
    if (*(unsigned char *)(a1 + 176))
    {
      sub_1003103A4(a1, (long long *)a2);
    }
  }
  else if (*(unsigned char *)(a1 + 176))
  {
    *(unsigned char *)(sub_1000C64D4(a1) + 176) = 0;
  }
  else
  {
    long long v3 = *(_OWORD *)a2;
    *(void *)(a1 + 16) = *(void *)(a2 + 16);
    *(_OWORD *)a1 = v3;
    *(void *)(a2 + 8) = 0;
    *(void *)(a2 + 16) = 0;
    *(void *)a2 = 0;
    long long v4 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v4;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    long long v5 = *(_OWORD *)(a2 + 48);
    *(void *)(a1 + 64) = *(void *)(a2 + 64);
    *(_OWORD *)(a1 + 48) = v5;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 48) = 0;
    *(_DWORD *)(a1 + 72) = *(_DWORD *)(a2 + 72);
    long long v6 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v6;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 80) = 0;
    long long v7 = *(_OWORD *)(a2 + 104);
    *(void *)(a1 + 120) = *(void *)(a2 + 120);
    *(_OWORD *)(a1 + 104) = v7;
    *(void *)(a2 + 112) = 0;
    *(void *)(a2 + 120) = 0;
    *(void *)(a2 + 104) = 0;
    long long v8 = *(_OWORD *)(a2 + 128);
    *(void *)(a1 + 144) = *(void *)(a2 + 144);
    *(_OWORD *)(a1 + 128) = v8;
    *(void *)(a2 + 136) = 0;
    *(void *)(a2 + 144) = 0;
    *(void *)(a2 + 128) = 0;
    __n128 result = *(__n128 *)(a2 + 152);
    *(void *)(a1 + 168) = *(void *)(a2 + 168);
    *(__n128 *)(a1 + 152) = result;
    *(void *)(a2 + 152) = 0;
    *(void *)(a2 + 160) = 0;
    *(void *)(a2 + 168) = 0;
    *(unsigned char *)(a1 + 176) = 1;
  }
  return result;
}

uint64_t sub_1003103A4(uint64_t a1, long long *a2)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((unsigned char *)a2 + 23) = 0;
  *(unsigned char *)a2 = 0;
  long long v5 = (void **)(a1 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)long long v5 = v6;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v7 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v7);
  }
  long long v8 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)long long v7 = v8;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  *(_DWORD *)(a1 + 72) = *((_DWORD *)a2 + 18);
  uint64_t v9 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v9);
  }
  long long v10 = a2[5];
  *(void *)(a1 + 96) = *((void *)a2 + 12);
  *(_OWORD *)uint64_t v9 = v10;
  *((unsigned char *)a2 + 103) = 0;
  *((unsigned char *)a2 + 80) = 0;
  uint64_t v11 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(long long *)((char *)a2 + 104);
  *(void *)(a1 + 120) = *((void *)a2 + 15);
  *(_OWORD *)uint64_t v11 = v12;
  *((unsigned char *)a2 + 127) = 0;
  *((unsigned char *)a2 + 104) = 0;
  uint64_t v13 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v13);
  }
  long long v14 = a2[8];
  *(void *)(a1 + 144) = *((void *)a2 + 18);
  *(_OWORD *)uint64_t v13 = v14;
  *((unsigned char *)a2 + 151) = 0;
  *((unsigned char *)a2 + 128) = 0;
  uint64_t v15 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v15);
  }
  long long v16 = *(long long *)((char *)a2 + 152);
  *(void *)(a1 + 168) = *((void *)a2 + 21);
  *(_OWORD *)uint64_t v15 = v16;
  *((unsigned char *)a2 + 175) = 0;
  *((unsigned char *)a2 + 152) = 0;
  return a1;
}

uint64_t sub_100310520(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(char *)(a1 + 343) < 0) {
      operator delete(*(void **)(a1 + 320));
    }
    *(unsigned char *)(a1 + 312) = 0;
  }
  if (*(unsigned char *)(a1 + 280))
  {
    if (*(char *)(a1 + 311) < 0) {
      operator delete(*(void **)(a1 + 288));
    }
    *(unsigned char *)(a1 + 280) = 0;
  }
  if (*(char *)(a1 + 279) < 0) {
    operator delete(*(void **)(a1 + 256));
  }
  long long v3 = (void **)(a1 + 224);
  sub_1003106DC(&v3);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*(void **)(a1 + 200));
  }
  if (*(unsigned char *)(a1 + 168))
  {
    if (*(char *)(a1 + 199) < 0) {
      operator delete(*(void **)(a1 + 176));
    }
    *(unsigned char *)(a1 + 168) = 0;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  long long v3 = (void **)(a1 + 80);
  sub_1003106DC(&v3);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(unsigned char *)a1)
  {
    if (*(char *)(a1 + 31) < 0) {
      operator delete(*(void **)(a1 + 8));
    }
    *(unsigned char *)a1 = 0;
  }
  return a1;
}

uint64_t sub_100310648(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 112))
  {
    if (*(char *)(a1 + 143) < 0) {
      operator delete(*(void **)(a1 + 120));
    }
    *(unsigned char *)(a1 + 112) = 0;
  }
  if (*(unsigned char *)(a1 + 80))
  {
    if (*(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    *(unsigned char *)(a1 + 80) = 0;
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  long long v3 = (void **)(a1 + 24);
  sub_1003106DC(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_1003106DC(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    long long v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 88;
        sub_100310760(v4);
      }
      while ((void *)v4 != v2);
      long long v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100310760(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(unsigned char *)(a1 + 24))
  {
    if (*(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    *(unsigned char *)(a1 + 24) = 0;
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_1003107E0(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 336))
  {
    sub_10010C0E0(a1 + 312, *(void **)(a1 + 320));
    if (*(unsigned char *)(a1 + 280))
    {
      if (*(char *)(a1 + 311) < 0) {
        operator delete(*(void **)(a1 + 288));
      }
      *(unsigned char *)(a1 + 280) = 0;
    }
    if (*(char *)(a1 + 279) < 0) {
      operator delete(*(void **)(a1 + 256));
    }
    sub_10031085C(a1 + 24);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t sub_10031085C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 176))
  {
    if (*(char *)(a1 + 207) < 0) {
      operator delete(*(void **)(a1 + 184));
    }
    *(unsigned char *)(a1 + 176) = 0;
  }
  if (*(unsigned char *)(a1 + 136))
  {
    if (*(char *)(a1 + 167) < 0) {
      operator delete(*(void **)(a1 + 144));
    }
    *(unsigned char *)(a1 + 136) = 0;
  }
  if (*(unsigned char *)(a1 + 104))
  {
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)(a1 + 112));
    }
    *(unsigned char *)(a1 + 104) = 0;
  }
  if (*(unsigned char *)(a1 + 72))
  {
    if (*(char *)(a1 + 103) < 0) {
      operator delete(*(void **)(a1 + 80));
    }
    *(unsigned char *)(a1 + 72) = 0;
  }
  long long v3 = (void **)(a1 + 48);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100310928(uint64_t result, uint64_t a2)
{
  if (*(unsigned __int8 *)(result + 1248) == *(unsigned __int8 *)(a2 + 1248))
  {
    if (*(unsigned char *)(result + 1248))
    {
      return sub_100310984(result, (long long *)a2);
    }
  }
  else if (*(unsigned char *)(result + 1248))
  {
    __n128 result = sub_10030D10C(result);
    *(unsigned char *)(result + 1248) = 0;
  }
  else
  {
    __n128 result = sub_1003115D8(result, (long long *)a2);
    *(unsigned char *)(result + 1248) = 1;
  }
  return result;
}

uint64_t sub_100310984(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  uint64_t v5 = a1 + 24;
  long long v6 = (long long *)((char *)a2 + 24);
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)v5);
  }
  long long v7 = *v6;
  *(void *)(v5 + 16) = *((void *)v6 + 2);
  *(_OWORD *)uint64_t v5 = v7;
  *((unsigned char *)a2 + 47) = 0;
  *((unsigned char *)a2 + 24) = 0;
  long long v8 = (void **)(a1 + 48);
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*v8);
  }
  long long v9 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)long long v8 = v9;
  *((unsigned char *)a2 + 71) = 0;
  *((unsigned char *)a2 + 48) = 0;
  long long v10 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v10);
  }
  long long v11 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)long long v10 = v11;
  *((unsigned char *)a2 + 95) = 0;
  *((unsigned char *)a2 + 72) = 0;
  long long v12 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v12);
  }
  long long v13 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)long long v12 = v13;
  *((unsigned char *)a2 + 119) = 0;
  *((unsigned char *)a2 + 96) = 0;
  long long v14 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v14);
  }
  long long v15 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)long long v14 = v15;
  *((unsigned char *)a2 + 143) = 0;
  *((unsigned char *)a2 + 120) = 0;
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)a2 + 6);
  std::string::operator=((std::string *)(a1 + 168), (const std::string *)a2 + 7);
  long long v16 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v16);
  }
  long long v17 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)long long v16 = v17;
  *((unsigned char *)a2 + 215) = 0;
  *((unsigned char *)a2 + 192) = 0;
  uint64_t v18 = (void **)(a1 + 216);
  if (*(char *)(a1 + 239) < 0) {
    operator delete(*v18);
  }
  long long v19 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)uint64_t v18 = v19;
  *((unsigned char *)a2 + 239) = 0;
  *((unsigned char *)a2 + 216) = 0;
  long long v20 = (void **)(a1 + 240);
  if (*(char *)(a1 + 263) < 0) {
    operator delete(*v20);
  }
  long long v21 = a2[15];
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  *(_OWORD *)long long v20 = v21;
  *((unsigned char *)a2 + 263) = 0;
  *((unsigned char *)a2 + 240) = 0;
  long long v22 = (void **)(a1 + 264);
  if (*(char *)(a1 + 287) < 0) {
    operator delete(*v22);
  }
  long long v23 = *(long long *)((char *)a2 + 264);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *(_OWORD *)long long v22 = v23;
  *((unsigned char *)a2 + 287) = 0;
  *((unsigned char *)a2 + 264) = 0;
  long long v24 = (void **)(a1 + 288);
  if (*(char *)(a1 + 311) < 0) {
    operator delete(*v24);
  }
  long long v25 = a2[18];
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *(_OWORD *)long long v24 = v25;
  *((unsigned char *)a2 + 311) = 0;
  *((unsigned char *)a2 + 288) = 0;
  uint64_t v26 = (void **)(a1 + 312);
  if (*(char *)(a1 + 335) < 0) {
    operator delete(*v26);
  }
  long long v27 = *(long long *)((char *)a2 + 312);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(_OWORD *)uint64_t v26 = v27;
  *((unsigned char *)a2 + 335) = 0;
  *((unsigned char *)a2 + 312) = 0;
  long long v28 = (void **)(a1 + 336);
  if (*(char *)(a1 + 359) < 0) {
    operator delete(*v28);
  }
  long long v29 = a2[21];
  *(void *)(a1 + 352) = *((void *)a2 + 44);
  *(_OWORD *)long long v28 = v29;
  *((unsigned char *)a2 + 359) = 0;
  *((unsigned char *)a2 + 336) = 0;
  long long v30 = (void **)(a1 + 360);
  if (*(char *)(a1 + 383) < 0) {
    operator delete(*v30);
  }
  long long v31 = *(long long *)((char *)a2 + 360);
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  *(_OWORD *)long long v30 = v31;
  *((unsigned char *)a2 + 383) = 0;
  *((unsigned char *)a2 + 360) = 0;
  uint64_t v32 = (void **)(a1 + 384);
  if (*(char *)(a1 + 407) < 0) {
    operator delete(*v32);
  }
  long long v33 = a2[24];
  *(void *)(a1 + 400) = *((void *)a2 + 50);
  *(_OWORD *)uint64_t v32 = v33;
  *((unsigned char *)a2 + 407) = 0;
  *((unsigned char *)a2 + 384) = 0;
  uint64_t v34 = (void **)(a1 + 408);
  if (*(char *)(a1 + 431) < 0) {
    operator delete(*v34);
  }
  long long v35 = *(long long *)((char *)a2 + 408);
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  *(_OWORD *)uint64_t v34 = v35;
  *((unsigned char *)a2 + 431) = 0;
  *((unsigned char *)a2 + 408) = 0;
  uint64_t v36 = (void **)(a1 + 432);
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*v36);
  }
  long long v37 = a2[27];
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(_OWORD *)uint64_t v36 = v37;
  *((unsigned char *)a2 + 455) = 0;
  *((unsigned char *)a2 + 432) = 0;
  long long v38 = (void **)(a1 + 456);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*v38);
  }
  long long v39 = *(long long *)((char *)a2 + 456);
  *(void *)(a1 + 472) = *((void *)a2 + 59);
  *(_OWORD *)long long v38 = v39;
  *((unsigned char *)a2 + 479) = 0;
  *((unsigned char *)a2 + 456) = 0;
  uint64_t v40 = (void **)(a1 + 480);
  if (*(char *)(a1 + 503) < 0) {
    operator delete(*v40);
  }
  long long v41 = a2[30];
  *(void *)(a1 + 496) = *((void *)a2 + 62);
  *(_OWORD *)uint64_t v40 = v41;
  *((unsigned char *)a2 + 503) = 0;
  *((unsigned char *)a2 + 480) = 0;
  int v42 = (void **)(a1 + 504);
  if (*(char *)(a1 + 527) < 0) {
    operator delete(*v42);
  }
  long long v43 = *(long long *)((char *)a2 + 504);
  *(void *)(a1 + 520) = *((void *)a2 + 65);
  *(_OWORD *)int v42 = v43;
  *((unsigned char *)a2 + 527) = 0;
  *((unsigned char *)a2 + 504) = 0;
  sub_100310F00((__n128 *)(a1 + 528), (uint64_t)(a2 + 33));
  sub_100311218(a1 + 688, (uint64_t)(a2 + 43));
  long long v44 = (void **)(a1 + 856);
  if (*(char *)(a1 + 879) < 0) {
    operator delete(*v44);
  }
  long long v45 = *(long long *)((char *)a2 + 856);
  *(void *)(a1 + 872) = *((void *)a2 + 109);
  *(_OWORD *)long long v44 = v45;
  *((unsigned char *)a2 + 879) = 0;
  *((unsigned char *)a2 + 856) = 0;
  sub_100179CB0(a1 + 880, (__n128 *)a2 + 55);
  long long v46 = a2[57];
  *(_WORD *)(a1 + 928) = *((_WORD *)a2 + 464);
  *(_OWORD *)(a1 + 912) = v46;
  long long v47 = (void **)(a1 + 936);
  if (*(char *)(a1 + 959) < 0) {
    operator delete(*v47);
  }
  long long v48 = *(long long *)((char *)a2 + 936);
  *(void *)(a1 + 952) = *((void *)a2 + 119);
  *(_OWORD *)long long v47 = v48;
  *((unsigned char *)a2 + 959) = 0;
  *((unsigned char *)a2 + 936) = 0;
  long long v49 = (void **)(a1 + 960);
  if (*(char *)(a1 + 983) < 0) {
    operator delete(*v49);
  }
  long long v50 = a2[60];
  *(void *)(a1 + 976) = *((void *)a2 + 122);
  *(_OWORD *)long long v49 = v50;
  *((unsigned char *)a2 + 983) = 0;
  *((unsigned char *)a2 + 960) = 0;
  *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
  sub_1003114D8(a1 + 992, a2 + 62);
  long long v51 = a2[70];
  long long v52 = a2[71];
  *(unsigned char *)(a1 + 1152) = *((unsigned char *)a2 + 1152);
  *(_OWORD *)(a1 + 1136) = v52;
  *(_OWORD *)(a1 + 1120) = v51;
  long long v53 = *(long long *)((char *)a2 + 1160);
  *((void *)a2 + 145) = 0;
  *((void *)a2 + 146) = 0;
  int v54 = *(std::__shared_weak_count **)(a1 + 1168);
  *(_OWORD *)(a1 + 1160) = v53;
  if (v54) {
    sub_10004D2C8(v54);
  }
  long long v55 = *(long long *)((char *)a2 + 1176);
  *((void *)a2 + 147) = 0;
  *((void *)a2 + 148) = 0;
  long long v56 = *(std::__shared_weak_count **)(a1 + 1184);
  *(_OWORD *)(a1 + 1176) = v55;
  if (v56) {
    sub_10004D2C8(v56);
  }
  long long v57 = *(long long *)((char *)a2 + 1192);
  *((void *)a2 + 149) = 0;
  *((void *)a2 + 150) = 0;
  uint64_t v58 = *(std::__shared_weak_count **)(a1 + 1200);
  *(_OWORD *)(a1 + 1192) = v57;
  if (v58) {
    sub_10004D2C8(v58);
  }
  long long v59 = *(long long *)((char *)a2 + 1208);
  *((void *)a2 + 151) = 0;
  *((void *)a2 + 152) = 0;
  long long v60 = *(std::__shared_weak_count **)(a1 + 1216);
  *(_OWORD *)(a1 + 1208) = v59;
  if (v60) {
    sub_10004D2C8(v60);
  }
  __int16 v61 = *((_WORD *)a2 + 612);
  *(unsigned char *)(a1 + 1226) = *((unsigned char *)a2 + 1226);
  *(_WORD *)(a1 + 1224) = v61;
  long long v62 = a2[77];
  a2[77] = 0u;
  uint64_t v63 = *(std::__shared_weak_count **)(a1 + 1240);
  *(_OWORD *)(a1 + 1232) = v62;
  if (v63) {
    sub_10004D2C8(v63);
  }
  return a1;
}

void sub_100310F00(__n128 *a1, uint64_t a2)
{
  if (a1[9].n128_u8[8] == *(unsigned __int8 *)(a2 + 152))
  {
    if (a1[9].n128_u8[8])
    {
      sub_100310F88((uint64_t)a1, a2);
    }
  }
  else if (a1[9].n128_u8[8])
  {
    sub_100311038((uint64_t)a1);
  }
  else
  {
    sub_100311138(a1, a2);
    a1[9].n128_u8[8] = 1;
  }
}

uint64_t sub_100310F88(uint64_t a1, uint64_t a2)
{
  sub_1003110D0((void **)a1);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_100179CB0(a1 + 24, (__n128 *)(a2 + 24));
  sub_100179CB0(a1 + 56, (__n128 *)(a2 + 56));
  sub_100179CB0(a1 + 88, (__n128 *)(a2 + 88));
  *(_DWORD *)(a1 + 120) = *(_DWORD *)(a2 + 120);
  long long v4 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)long long v4 = v5;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  return a1;
}

void sub_100311038(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 152))
  {
    if (*(char *)(a1 + 151) < 0) {
      operator delete(*(void **)(a1 + 128));
    }
    if (*(unsigned char *)(a1 + 112) && *(char *)(a1 + 111) < 0) {
      operator delete(*(void **)(a1 + 88));
    }
    if (*(unsigned char *)(a1 + 80) && *(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    if (*(unsigned char *)(a1 + 48))
    {
      if (*(char *)(a1 + 47) < 0) {
        operator delete(*(void **)(a1 + 24));
      }
    }
    uint64_t v2 = (void **)a1;
    sub_1001A010C(&v2);
    *(unsigned char *)(a1 + 152) = 0;
  }
}

void sub_1003110D0(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    long long v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 96;
        sub_1001A0094(v3);
      }
      while ((void *)v3 != v1);
      long long v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

__n128 sub_100311138(__n128 *a1, uint64_t a2)
{
  a1->n128_u64[0] = 0;
  a1->n128_u64[1] = 0;
  a1[1].n128_u64[0] = 0;
  *a1 = *(__n128 *)a2;
  a1[1].n128_u64[0] = *(void *)(a2 + 16);
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  a1[1].n128_u8[8] = 0;
  a1[3].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 48))
  {
    __n128 v2 = *(__n128 *)(a2 + 24);
    a1[2].n128_u64[1] = *(void *)(a2 + 40);
    *(__n128 *)((char *)a1 + 24) = v2;
    *(void *)(a2 + 32) = 0;
    *(void *)(a2 + 40) = 0;
    *(void *)(a2 + 24) = 0;
    a1[3].n128_u8[0] = 1;
  }
  a1[3].n128_u8[8] = 0;
  a1[5].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 80))
  {
    __n128 v3 = *(__n128 *)(a2 + 56);
    a1[4].n128_u64[1] = *(void *)(a2 + 72);
    *(__n128 *)((char *)a1 + 56) = v3;
    *(void *)(a2 + 64) = 0;
    *(void *)(a2 + 72) = 0;
    *(void *)(a2 + 56) = 0;
    a1[5].n128_u8[0] = 1;
  }
  a1[5].n128_u8[8] = 0;
  a1[7].n128_u8[0] = 0;
  if (*(unsigned char *)(a2 + 112))
  {
    __n128 v4 = *(__n128 *)(a2 + 88);
    a1[6].n128_u64[1] = *(void *)(a2 + 104);
    *(__n128 *)((char *)a1 + 88) = v4;
    *(void *)(a2 + 96) = 0;
    *(void *)(a2 + 104) = 0;
    *(void *)(a2 + 88) = 0;
    a1[7].n128_u8[0] = 1;
  }
  a1[7].n128_u32[2] = *(_DWORD *)(a2 + 120);
  __n128 result = *(__n128 *)(a2 + 128);
  a1[9].n128_u64[0] = *(void *)(a2 + 144);
  a1[8] = result;
  *(void *)(a2 + 136) = 0;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 128) = 0;
  return result;
}

void sub_100311218(uint64_t a1, uint64_t a2)
{
  if (*(unsigned __int8 *)(a1 + 160) == *(unsigned __int8 *)(a2 + 160))
  {
    if (*(unsigned char *)(a1 + 160))
    {
      sub_1003112A0(a1, a2);
    }
  }
  else if (*(unsigned char *)(a1 + 160))
  {
    sub_100311364(a1);
  }
  else
  {
    sub_1003113F8(a1, a2);
    *(unsigned char *)(a1 + 160) = 1;
  }
}

uint64_t sub_1003112A0(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  sub_100179CB0(a1 + 8, (__n128 *)(a2 + 8));
  sub_100179CB0(a1 + 40, (__n128 *)(a2 + 40));
  sub_100179CB0(a1 + 72, (__n128 *)(a2 + 72));
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  __n128 v4 = (void **)(a1 + 112);
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*v4);
  }
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)__n128 v4 = v5;
  *(unsigned char *)(a2 + 135) = 0;
  *(unsigned char *)(a2 + 112) = 0;
  long long v6 = (void **)(a1 + 136);
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*v6);
  }
  long long v7 = *(_OWORD *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(_OWORD *)long long v6 = v7;
  *(unsigned char *)(a2 + 159) = 0;
  *(unsigned char *)(a2 + 136) = 0;
  return a1;
}

void sub_100311364(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 160))
  {
    if (*(char *)(a1 + 159) < 0) {
      operator delete(*(void **)(a1 + 136));
    }
    if (*(char *)(a1 + 135) < 0) {
      operator delete(*(void **)(a1 + 112));
    }
    if (*(unsigned char *)(a1 + 96) && *(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    if (*(unsigned char *)(a1 + 64) && *(char *)(a1 + 63) < 0) {
      operator delete(*(void **)(a1 + 40));
    }
    if (*(unsigned char *)(a1 + 32))
    {
      if (*(char *)(a1 + 31) < 0) {
        operator delete(*(void **)(a1 + 8));
      }
    }
    *(unsigned char *)(a1 + 160) = 0;
  }
}

__n128 sub_1003113F8(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = *(unsigned char *)a2;
  *(unsigned char *)(a1 + 8) = 0;
  *(unsigned char *)(a1 + 32) = 0;
  if (*(unsigned char *)(a2 + 32))
  {
    long long v2 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v2;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)(a1 + 32) = 1;
  }
  *(unsigned char *)(a1 + 40) = 0;
  *(unsigned char *)(a1 + 64) = 0;
  if (*(unsigned char *)(a2 + 64))
  {
    long long v3 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v3;
    *(void *)(a2 + 48) = 0;
    *(void *)(a2 + 56) = 0;
    *(void *)(a2 + 40) = 0;
    *(unsigned char *)(a1 + 64) = 1;
  }
  *(unsigned char *)(a1 + 72) = 0;
  *(unsigned char *)(a1 + 96) = 0;
  if (*(unsigned char *)(a2 + 96))
  {
    long long v4 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v4;
    *(void *)(a2 + 80) = 0;
    *(void *)(a2 + 88) = 0;
    *(void *)(a2 + 72) = 0;
    *(unsigned char *)(a1 + 96) = 1;
  }
  *(_WORD *)(a1 + 104) = *(_WORD *)(a2 + 104);
  long long v5 = *(_OWORD *)(a2 + 112);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = v5;
  *(void *)(a2 + 120) = 0;
  *(void *)(a2 + 128) = 0;
  *(void *)(a2 + 112) = 0;
  __n128 result = *(__n128 *)(a2 + 136);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  *(__n128 *)(a1 + 136) = result;
  *(void *)(a2 + 144) = 0;
  *(void *)(a2 + 152) = 0;
  *(void *)(a2 + 136) = 0;
  return result;
}

__n128 sub_1003114D8(uint64_t a1, long long *a2)
{
  if (*(unsigned __int8 *)(a1 + 120) == *((unsigned __int8 *)a2 + 120))
  {
    if (*(unsigned char *)(a1 + 120))
    {
      if (*(char *)(a1 + 23) < 0) {
        operator delete(*(void **)a1);
      }
      long long v4 = *a2;
      *(void *)(a1 + 16) = *((void *)a2 + 2);
      *(_OWORD *)a1 = v4;
      *((unsigned char *)a2 + 23) = 0;
      *(unsigned char *)a2 = 0;
      long long v5 = *(long long *)((char *)a2 + 40);
      *(_OWORD *)(a1 + 24) = *(long long *)((char *)a2 + 24);
      *(_OWORD *)(a1 + 40) = v5;
      __n128 result = *(__n128 *)((char *)a2 + 56);
      long long v7 = *(long long *)((char *)a2 + 72);
      long long v8 = *(long long *)((char *)a2 + 88);
      *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
      *(_OWORD *)(a1 + 88) = v8;
      *(_OWORD *)(a1 + 72) = v7;
      *(__n128 *)(a1 + 56) = result;
    }
  }
  else if (*(unsigned char *)(a1 + 120))
  {
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(unsigned char *)(a1 + 120) = 0;
  }
  else
  {
    long long v9 = *a2;
    *(void *)(a1 + 16) = *((void *)a2 + 2);
    *(_OWORD *)a1 = v9;
    *((void *)a2 + 1) = 0;
    *((void *)a2 + 2) = 0;
    *(void *)a2 = 0;
    long long v10 = *(long long *)((char *)a2 + 24);
    *(_OWORD *)(a1 + 40) = *(long long *)((char *)a2 + 40);
    *(_OWORD *)(a1 + 24) = v10;
    __n128 result = *(__n128 *)((char *)a2 + 56);
    long long v11 = *(long long *)((char *)a2 + 72);
    long long v12 = *(long long *)((char *)a2 + 88);
    *(_OWORD *)(a1 + 104) = *(long long *)((char *)a2 + 104);
    *(_OWORD *)(a1 + 88) = v12;
    *(_OWORD *)(a1 + 72) = v11;
    *(__n128 *)(a1 + 56) = result;
    *(unsigned char *)(a1 + 120) = 1;
  }
  return result;
}

uint64_t sub_1003115D8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_DWORD *)(a1 + 16) = *((_DWORD *)a2 + 4);
  *(_OWORD *)a1 = v4;
  long long v5 = *(long long *)((char *)a2 + 24);
  *(void *)(a1 + 40) = *((void *)a2 + 5);
  *(_OWORD *)(a1 + 24) = v5;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 3) = 0;
  long long v6 = a2[3];
  *(void *)(a1 + 64) = *((void *)a2 + 8);
  *(_OWORD *)(a1 + 48) = v6;
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  *((void *)a2 + 6) = 0;
  long long v7 = *(long long *)((char *)a2 + 72);
  *(void *)(a1 + 88) = *((void *)a2 + 11);
  *(_OWORD *)(a1 + 72) = v7;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  long long v8 = a2[6];
  *(void *)(a1 + 112) = *((void *)a2 + 14);
  *(_OWORD *)(a1 + 96) = v8;
  *((void *)a2 + 12) = 0;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  long long v9 = *(long long *)((char *)a2 + 120);
  *(void *)(a1 + 136) = *((void *)a2 + 17);
  *(_OWORD *)(a1 + 120) = v9;
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  sub_10023C0CC((char *)(a1 + 144), a2 + 9);
  long long v10 = a2[12];
  *(void *)(a1 + 208) = *((void *)a2 + 26);
  *(_OWORD *)(a1 + 192) = v10;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 24) = 0;
  long long v11 = *(long long *)((char *)a2 + 216);
  *(void *)(a1 + 232) = *((void *)a2 + 29);
  *(_OWORD *)(a1 + 216) = v11;
  *((void *)a2 + 28) = 0;
  *((void *)a2 + 29) = 0;
  *((void *)a2 + 27) = 0;
  long long v12 = a2[15];
  *(void *)(a1 + 256) = *((void *)a2 + 32);
  *(_OWORD *)(a1 + 240) = v12;
  *((void *)a2 + 31) = 0;
  *((void *)a2 + 32) = 0;
  *((void *)a2 + 30) = 0;
  long long v13 = *(long long *)((char *)a2 + 264);
  *(void *)(a1 + 280) = *((void *)a2 + 35);
  *(_OWORD *)(a1 + 264) = v13;
  *((void *)a2 + 33) = 0;
  *((void *)a2 + 34) = 0;
  *((void *)a2 + 35) = 0;
  long long v14 = a2[18];
  *(void *)(a1 + 304) = *((void *)a2 + 38);
  *(_OWORD *)(a1 + 288) = v14;
  *((void *)a2 + 36) = 0;
  *((void *)a2 + 37) = 0;
  *((void *)a2 + 38) = 0;
  long long v15 = *(long long *)((char *)a2 + 312);
  *(void *)(a1 + 328) = *((void *)a2 + 41);
  *(_OWORD *)(a1 + 312) = v15;
  *((void *)a2 + 39) = 0;
  *((void *)a2 + 40) = 0;
  *((void *)a2 + 41) = 0;
  long long v16 = a2[21];
  *(void *)(a1 + 352) = *((void *)a2 + 44);
  *(_OWORD *)(a1 + 336) = v16;
  *((void *)a2 + 42) = 0;
  *((void *)a2 + 43) = 0;
  *((void *)a2 + 44) = 0;
  long long v17 = *(long long *)((char *)a2 + 360);
  *(void *)(a1 + 376) = *((void *)a2 + 47);
  *(_OWORD *)(a1 + 360) = v17;
  *((void *)a2 + 45) = 0;
  *((void *)a2 + 46) = 0;
  *((void *)a2 + 47) = 0;
  long long v18 = a2[24];
  *(void *)(a1 + 400) = *((void *)a2 + 50);
  *(_OWORD *)(a1 + 384) = v18;
  *((void *)a2 + 48) = 0;
  *((void *)a2 + 49) = 0;
  *((void *)a2 + 50) = 0;
  long long v19 = *(long long *)((char *)a2 + 408);
  *(void *)(a1 + 424) = *((void *)a2 + 53);
  *(_OWORD *)(a1 + 408) = v19;
  *((void *)a2 + 51) = 0;
  *((void *)a2 + 52) = 0;
  *((void *)a2 + 53) = 0;
  long long v20 = a2[27];
  *(void *)(a1 + 448) = *((void *)a2 + 56);
  *(_OWORD *)(a1 + 432) = v20;
  *((void *)a2 + 54) = 0;
  *((void *)a2 + 55) = 0;
  *((void *)a2 + 56) = 0;
  long long v21 = *(long long *)((char *)a2 + 456);
  *(void *)(a1 + 472) = *((void *)a2 + 59);
  *(_OWORD *)(a1 + 456) = v21;
  *((void *)a2 + 57) = 0;
  *((void *)a2 + 58) = 0;
  *((void *)a2 + 59) = 0;
  long long v22 = a2[30];
  *(void *)(a1 + 496) = *((void *)a2 + 62);
  *(_OWORD *)(a1 + 480) = v22;
  *((void *)a2 + 60) = 0;
  *((void *)a2 + 61) = 0;
  *((void *)a2 + 62) = 0;
  long long v23 = *(long long *)((char *)a2 + 504);
  *(void *)(a1 + 520) = *((void *)a2 + 65);
  *(_OWORD *)(a1 + 504) = v23;
  *((void *)a2 + 63) = 0;
  *((void *)a2 + 64) = 0;
  *((void *)a2 + 65) = 0;
  *(unsigned char *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 680) = 0;
  if (*((unsigned char *)a2 + 680))
  {
    sub_100311138((__n128 *)(a1 + 528), (uint64_t)(a2 + 33));
    *(unsigned char *)(a1 + 680) = 1;
  }
  *(unsigned char *)(a1 + 688) = 0;
  *(unsigned char *)(a1 + 848) = 0;
  if (*((unsigned char *)a2 + 848))
  {
    sub_1003113F8(a1 + 688, (uint64_t)(a2 + 43));
    *(unsigned char *)(a1 + 848) = 1;
  }
  long long v24 = *(long long *)((char *)a2 + 856);
  *(void *)(a1 + 872) = *((void *)a2 + 109);
  *(_OWORD *)(a1 + 856) = v24;
  *((void *)a2 + 109) = 0;
  *((void *)a2 + 108) = 0;
  *((void *)a2 + 107) = 0;
  *(unsigned char *)(a1 + 880) = 0;
  *(unsigned char *)(a1 + 904) = 0;
  if (*((unsigned char *)a2 + 904))
  {
    long long v25 = a2[55];
    *(void *)(a1 + 896) = *((void *)a2 + 112);
    *(_OWORD *)(a1 + 880) = v25;
    *((void *)a2 + 112) = 0;
    *((void *)a2 + 111) = 0;
    *((void *)a2 + 110) = 0;
    *(unsigned char *)(a1 + 904) = 1;
  }
  long long v26 = a2[57];
  *(_WORD *)(a1 + 928) = *((_WORD *)a2 + 464);
  *(_OWORD *)(a1 + 912) = v26;
  long long v27 = *(long long *)((char *)a2 + 936);
  *(void *)(a1 + 952) = *((void *)a2 + 119);
  *(_OWORD *)(a1 + 936) = v27;
  *((void *)a2 + 119) = 0;
  *((void *)a2 + 118) = 0;
  *((void *)a2 + 117) = 0;
  long long v28 = a2[60];
  *(void *)(a1 + 976) = *((void *)a2 + 122);
  *(_OWORD *)(a1 + 960) = v28;
  *((void *)a2 + 122) = 0;
  *((void *)a2 + 121) = 0;
  *((void *)a2 + 120) = 0;
  *(unsigned char *)(a1 + 984) = *((unsigned char *)a2 + 984);
  *(unsigned char *)(a1 + 992) = 0;
  *(unsigned char *)(a1 + 1112) = 0;
  if (*((unsigned char *)a2 + 1112))
  {
    long long v29 = a2[62];
    *(void *)(a1 + 1008) = *((void *)a2 + 126);
    *(_OWORD *)(a1 + 992) = v29;
    *((void *)a2 + 126) = 0;
    *((void *)a2 + 125) = 0;
    *((void *)a2 + 124) = 0;
    long long v30 = *(long long *)((char *)a2 + 1016);
    *(_OWORD *)(a1 + 1032) = *(long long *)((char *)a2 + 1032);
    *(_OWORD *)(a1 + 1016) = v30;
    long long v31 = *(long long *)((char *)a2 + 1048);
    long long v32 = *(long long *)((char *)a2 + 1064);
    long long v33 = *(long long *)((char *)a2 + 1080);
    *(_OWORD *)(a1 + 1096) = *(long long *)((char *)a2 + 1096);
    *(_OWORD *)(a1 + 1080) = v33;
    *(_OWORD *)(a1 + 1064) = v32;
    *(_OWORD *)(a1 + 1048) = v31;
    *(unsigned char *)(a1 + 1112) = 1;
  }
  long long v34 = a2[70];
  long long v35 = a2[71];
  *(void *)(a1 + 1152) = *((void *)a2 + 144);
  *(_OWORD *)(a1 + 1136) = v35;
  *(_OWORD *)(a1 + 1120) = v34;
  *(void *)(a1 + 1160) = *((void *)a2 + 145);
  *(void *)(a1 + 1168) = *((void *)a2 + 146);
  *(long long *)((char *)a2 + 1160) = 0u;
  *(void *)(a1 + 1176) = *((void *)a2 + 147);
  *(void *)(a1 + 1184) = *((void *)a2 + 148);
  *(long long *)((char *)a2 + 1176) = 0u;
  *(void *)(a1 + 1192) = *((void *)a2 + 149);
  *(void *)(a1 + 1200) = *((void *)a2 + 150);
  *(long long *)((char *)a2 + 1192) = 0u;
  *(void *)(a1 + 1208) = *((void *)a2 + 151);
  *(void *)(a1 + 1216) = *((void *)a2 + 152);
  *(long long *)((char *)a2 + 1208) = 0u;
  __int16 v36 = *((_WORD *)a2 + 612);
  *(unsigned char *)(a1 + 1226) = *((unsigned char *)a2 + 1226);
  *(_WORD *)(a1 + 1224) = v36;
  *(_OWORD *)(a1 + 1232) = a2[77];
  a2[77] = 0u;
  return a1;
}

void sub_100311A40(_Unwind_Exception *exception_object)
{
  if (v1[143] < 0) {
    operator delete(*v6);
  }
  if (v1[119] < 0) {
    operator delete(*v5);
  }
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[71] < 0) {
    operator delete(*v3);
  }
  if (v1[47] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100311A9C(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[1248] = 0;
  if (*(unsigned char *)(a2 + 1248))
  {
    sub_10030DDAC((uint64_t)a1, (long long *)a2);
    a1[1248] = 1;
  }
  return a1;
}

void sub_100311AE0(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 1248)) {
    sub_10030D10C(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100311AFC(uint64_t a1, int *a2)
{
  int v4 = *a2;
  *(_WORD *)(a1 + 4) = *((_WORD *)a2 + 2);
  *(_DWORD *)a1 = v4;
  if (*((char *)a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *((void **)a2 + 1), *((void *)a2 + 2));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 2);
    *(void *)(a1 + 24) = *((void *)a2 + 3);
    *(_OWORD *)(a1 + 8) = v5;
  }
  *(unsigned char *)(a1 + 32) = *((unsigned char *)a2 + 32);
  if (*((char *)a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *((void **)a2 + 5), *((void *)a2 + 6));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 10);
    *(void *)(a1 + 56) = *((void *)a2 + 7);
    *(_OWORD *)(a1 + 40) = v6;
  }
  if (*((char *)a2 + 87) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 64), *((void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v7 = *((_OWORD *)a2 + 4);
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v7;
  }
  if (*((char *)a2 + 111) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 88), *((void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 22);
    *(void *)(a1 + 104) = *((void *)a2 + 13);
    *(_OWORD *)(a1 + 88) = v8;
  }
  if (*((char *)a2 + 135) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 112), *((void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v9 = *((_OWORD *)a2 + 7);
    *(void *)(a1 + 128) = *((void *)a2 + 16);
    *(_OWORD *)(a1 + 112) = v9;
  }
  *(_DWORD *)(a1 + 136) = a2[34];
  long long v10 = (unsigned char *)(a1 + 144);
  if (*((char *)a2 + 167) < 0)
  {
    sub_10004FC84(v10, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v11 = *((_OWORD *)a2 + 9);
    *(void *)(a1 + 160) = *((void *)a2 + 20);
    *(_OWORD *)long long v10 = v11;
  }
  __int16 v12 = *((_WORD *)a2 + 84);
  *(unsigned char *)(a1 + 170) = *((unsigned char *)a2 + 170);
  *(_WORD *)(a1 + 168) = v12;
  return a1;
}

void sub_100311C88(_Unwind_Exception *exception_object)
{
  if (v1[135] < 0) {
    operator delete(*v6);
  }
  if (v1[111] < 0) {
    operator delete(*v5);
  }
  if (v1[87] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[31] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100311D04(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[240] = 0;
  if (*(unsigned char *)(a2 + 240))
  {
    sub_100311D64((uint64_t)a1, a2);
    a1[240] = 1;
  }
  return a1;
}

void sub_100311D48(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 240)) {
    sub_1000C5634(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100311D64(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100311E70(a1, a2);
  sub_100313228((char *)(v4 + 32), (long long *)(a2 + 32));
  if (*(char *)(a2 + 191) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 168), *(void **)(a2 + 168), *(void *)(a2 + 176));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 168);
    *(void *)(a1 + 184) = *(void *)(a2 + 184);
    *(_OWORD *)(a1 + 168) = v5;
  }
  uint64_t v6 = *(void *)(a2 + 192);
  *(void *)(a1 + 200) = 0;
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  sub_100311ED8((void *)(a1 + 200), *(void *)(a2 + 200), *(void *)(a2 + 208), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 208) - *(void *)(a2 + 200)) >> 3));
  uint64_t v7 = *(void *)(a2 + 224);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(void *)(a1 + 224) = v7;
  return a1;
}

void sub_100311E20(_Unwind_Exception *a1)
{
  sub_100309AC4(v2);
  if (*(unsigned char *)v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    *(unsigned char *)uint64_t v1 = 0;
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100311E70(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  if (*(unsigned char *)a2)
  {
    long long v3 = (unsigned char *)(a1 + 8);
    if (*(char *)(a2 + 31) < 0)
    {
      sub_10004FC84(v3, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long v4 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)long long v3 = v4;
    }
    *(unsigned char *)a1 = 1;
  }
  return a1;
}

void *sub_100311ED8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100311F60(result, a4);
    __n128 result = (void *)sub_100311FB8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100311F40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C56F4(&a9);
  _Unwind_Resume(a1);
}

char *sub_100311F60(void *a1, unint64_t a2)
{
  if (a2 >= 0x2E8BA2E8BA2E8BBLL) {
    sub_10006A748();
  }
  __n128 result = (char *)sub_10010C8A4((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[88 * v4];
  return result;
}

uint64_t sub_100311FB8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1000C5DA8(a4 + v7, a2 + v7);
      v7 += 88;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100312018(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 88;
    do
    {
      sub_1000C5778(v4 + v2);
      v2 -= 88;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_10031203C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  *((void *)__dst + 15) = 0;
  *((void *)__dst + 16) = 0;
  *((void *)__dst + 17) = 0;
  sub_100312200((void *)__dst + 15, *((void *)a2 + 15), *((void *)a2 + 16), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)a2 + 16) - *((void *)a2 + 15)) >> 4));
  return __dst;
}

void sub_100312184(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100312200(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_100312288(result, a4);
    __n128 result = (void *)sub_1003122DC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100312268(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5358(&a9);
  _Unwind_Resume(a1);
}

char *sub_100312288(void *a1, unint64_t a2)
{
  if (a2 >= 0x333333333333334) {
    sub_10006A748();
  }
  __n128 result = (char *)sub_1001F7E24((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[80 * v4];
  return result;
}

uint64_t sub_1003122DC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100312360(a4 + v7, a2 + v7);
      v7 += 80;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10031233C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 80;
    do
    {
      sub_1000C53DC(v4 + v2);
      v2 -= 80;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100312360(uint64_t a1, uint64_t a2)
{
  *(_DWORD *)a1 = *(_DWORD *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  sub_100312438((uint64_t *)(a1 + 56), a2 + 56);
  return a1;
}

void sub_100312404(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100312438(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100312490(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_100312478(_Unwind_Exception *a1)
{
  sub_1000C5440(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100312490(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    long long v4 = a2;
    long long v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __n128 result = sub_10031251C(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          long long v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          long long v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          long long v4 = v8;
        }
        while (!v9);
      }
      long long v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10031251C(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  __int16 v12 = 0;
  uint64_t v6 = sub_1000C6D50(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    long long v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_1003125C0((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10031282C((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_1003125C0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x1C8uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_100312634(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10031261C(_Unwind_Exception *a1)
{
  sub_10031282C(v1, 0);
  _Unwind_Resume(a1);
}

unsigned char *sub_100312634(unsigned char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_1003126AC(__dst + 24, (long long *)((char *)a2 + 24));
  return __dst;
}

void sub_100312690(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003126AC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10023C0CC(__dst + 24, (long long *)((char *)a2 + 24));
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v5;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v6 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v6;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v7;
  }
  sub_10030DA1C(__dst + 144, a2 + 9);
  return __dst;
}

void sub_1003127B8(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v3);
  }
  sub_1001085D8(v2);
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(a1);
}

void sub_10031282C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000C549C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

uint64_t sub_100312884(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA3D70A3D70A3D7) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x51EB851EB851EBLL) {
    unint64_t v9 = 0xA3D70A3D70A3D7;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100312BAC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  long long v13 = v10;
  long long v14 = &v10[400 * v4];
  long long v16 = &v10[400 * v9];
  sub_1003129A4((uint64_t)v14, a2);
  long long v15 = v14 + 400;
  sub_100312B34(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100312CE8((uint64_t)&v13);
  return v11;
}

void sub_100312990(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100312CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003129A4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100312A00((unsigned char *)a1, a2);
  sub_10031203C(v4 + 248, (long long *)(a2 + 248));
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  return a1;
}

void sub_1003129E4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 240)) {
    sub_1000C5634(v1);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100312A00(unsigned char *a1, uint64_t a2)
{
  *a1 = 0;
  a1[240] = 0;
  if (*(unsigned char *)(a2 + 240))
  {
    sub_100312A60((uint64_t)a1, a2);
    a1[240] = 1;
  }
  return a1;
}

void sub_100312A44(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 240)) {
    sub_1000C5634(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100312A60(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  if (*(unsigned char *)a2)
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *(unsigned char *)a1 = 1;
  }
  sub_100313228((char *)(a1 + 32), (long long *)(a2 + 32));
  long long v5 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)(a1 + 168) = v5;
  *(void *)(a2 + 176) = 0;
  *(void *)(a2 + 184) = 0;
  *(void *)(a2 + 168) = 0;
  uint64_t v6 = *(void *)(a2 + 192);
  *(void *)(a1 + 208) = 0;
  *(void *)(a1 + 216) = 0;
  *(void *)(a1 + 192) = v6;
  *(void *)(a1 + 200) = 0;
  *(_OWORD *)(a1 + 200) = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(void *)(a2 + 200) = 0;
  *(void *)(a2 + 208) = 0;
  *(void *)(a2 + 216) = 0;
  uint64_t v7 = *(void *)(a2 + 224);
  *(_DWORD *)(a1 + 232) = *(_DWORD *)(a2 + 232);
  *(void *)(a1 + 224) = v7;
  return a1;
}

void sub_100312B0C(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    *(unsigned char *)uint64_t v1 = 0;
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100312B34(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100312BF8((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100312BAC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0xA3D70A3D70A3D8) {
    sub_10006A7CC();
  }
  return operator new(400 * a2);
}

uint64_t sub_100312BF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 400;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 400;
    sub_100312C8C(v12, v10 + a3);
  }
  return a6;
}

uint64_t sub_100312C8C(uint64_t a1, uint64_t a2)
{
  long long v4 = sub_100311D04((unsigned char *)a1, a2);
  sub_10031203C(v4 + 248, (long long *)(a2 + 248));
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  return a1;
}

void sub_100312CCC(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 240)) {
    sub_1000C5634(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100312CE8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 400;
    sub_1000C52BC(i - 400);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t **sub_100312D38(uint64_t **result, long long *a2, long long *a3)
{
  uint64_t v5 = result;
  if (result[2])
  {
    uint64_t v6 = *result;
    uint64_t v7 = result[1];
    unsigned char *result = (uint64_t *)(result + 1);
    v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    long long v15 = result;
    long long v16 = v8;
    long long v17 = v8;
    if (v8)
    {
      long long v16 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        unint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          sub_100312ECC((uint64_t)(v8 + 7), (uint64_t)v9 + 56);
          uint64_t v18 = 0;
          uint64_t v10 = (uint64_t **)sub_1000EA518((uint64_t)v5, &v18, v17 + 4);
          sub_100046C38(v5, v18, v10, v17);
          long long v17 = v16;
          if (v16) {
            long long v16 = sub_1000EA590((uint64_t)v16);
          }
          uint64_t v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              uint64_t v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              unint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          unint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_100312FAC((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_100313004(v5, a2 + 2);
      long long v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          long long v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100312EB8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

__n128 sub_100312ECC(uint64_t a1, uint64_t a2)
{
  std::string::operator=((std::string *)a1, (const std::string *)a2);
  std::string::operator=((std::string *)(a1 + 24), (const std::string *)(a2 + 24));
  std::string::operator=((std::string *)(a1 + 48), (const std::string *)(a2 + 48));
  std::string::operator=((std::string *)(a1 + 72), (const std::string *)(a2 + 72));
  std::string::operator=((std::string *)(a1 + 144), (const std::string *)(a2 + 144));
  *(_WORD *)(a1 + 168) = *(_WORD *)(a2 + 168);
  sub_100179AF8((std::string *)(a1 + 176), (const std::string *)(a2 + 176));
  sub_100179AF8((std::string *)(a1 + 208), (const std::string *)(a2 + 208));
  sub_100179AF8((std::string *)(a1 + 240), (const std::string *)(a2 + 240));
  sub_100179AF8((std::string *)(a1 + 272), (const std::string *)(a2 + 272));
  *(_WORD *)(a1 + 304) = *(_WORD *)(a2 + 304);
  std::string::operator=((std::string *)(a1 + 312), (const std::string *)(a2 + 312));
  char v4 = *(unsigned char *)(a2 + 338);
  *(_WORD *)(a1 + 336) = *(_WORD *)(a2 + 336);
  *(unsigned char *)(a1 + 338) = v4;
  sub_100179AF8((std::string *)(a1 + 344), (const std::string *)(a2 + 344));
  __n128 result = *(__n128 *)(a2 + 376);
  *(_WORD *)(a1 + 392) = *(_WORD *)(a2 + 392);
  *(__n128 *)(a1 + 376) = result;
  return result;
}

uint64_t sub_100312FAC(uint64_t a1)
{
  sub_1000C5440(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1000C5440(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100313004(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_1003125C0((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  uint64_t v3 = (uint64_t **)sub_1000EA518((uint64_t)a1, &v6, v7[0] + 4);
  sub_100046C38(a1, v6, v3, v7[0]);
  char v4 = v7[0];
  v7[0] = 0;
  sub_10031282C((uint64_t)v7, 0);
  return v4;
}

void sub_10031307C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10031282C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

void sub_100313094(uint64_t *a1, void *a2)
{
  sub_10031310C((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v4;
  uint64_t v5 = *a1;
  *a1 = v4;
  a2[1] = v5;
  uint64_t v6 = a1[1];
  a1[1] = a2[2];
  a2[2] = v6;
  uint64_t v7 = a1[2];
  a1[2] = a2[3];
  a2[3] = v7;
  *a2 = a2[1];
}

__n128 sub_10031310C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  if (a3 != a5)
  {
    uint64_t v7 = 0;
    do
    {
      uint64_t v8 = a7 + v7;
      *(unsigned char *)(a7 + v7 - 128) = 0;
      uint64_t v9 = a3 + v7;
      *(unsigned char *)(a7 + v7 - 104) = 0;
      if (*(unsigned char *)(a3 + v7 - 104))
      {
        uint64_t v10 = (void *)(v9 - 128);
        long long v11 = *(_OWORD *)(v9 - 128);
        *(void *)(a7 + v7 - 112) = *(void *)(v9 - 112);
        *(_OWORD *)(a7 + v7 - 128) = v11;
        v10[1] = 0;
        _OWORD v10[2] = 0;
        void *v10 = 0;
        *(unsigned char *)(v8 - 104) = 1;
      }
      long long v12 = *(_OWORD *)(v9 - 96);
      *(void *)(v8 - 80) = *(void *)(v9 - 80);
      *(_OWORD *)(v8 - 96) = v12;
      *(void *)(v9 - 88) = 0;
      *(void *)(v9 - 80) = 0;
      *(void *)(v9 - 96) = 0;
      long long v13 = *(_OWORD *)(v9 - 72);
      *(void *)(v8 - 56) = *(void *)(v9 - 56);
      *(_OWORD *)(v8 - 72) = v13;
      *(void *)(v9 - 64) = 0;
      *(void *)(v9 - 56) = 0;
      *(void *)(v9 - 72) = 0;
      long long v14 = *(_OWORD *)(v9 - 48);
      *(void *)(v8 - 32) = *(void *)(v9 - 32);
      *(_OWORD *)(v8 - 48) = v14;
      *(void *)(v9 - 40) = 0;
      *(void *)(v9 - 32) = 0;
      *(void *)(v9 - 48) = 0;
      __n128 result = *(__n128 *)(v9 - 24);
      *(void *)(v8 - 8) = *(void *)(v9 - 8);
      *(__n128 *)(v8 - 24) = result;
      *(void *)(v9 - 24) = 0;
      *(void *)(v9 - 16) = 0;
      *(void *)(v9 - 8) = 0;
      v7 -= 128;
    }
    while (a3 + v7 != a5);
  }
  return result;
}

uint64_t sub_1003131D8(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 128;
    sub_10030B5B0(i - 128);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_100313228(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_100311E70((uint64_t)(__dst + 24), (uint64_t)a2 + 24);
  sub_100311E70((uint64_t)(__dst + 56), (uint64_t)a2 + 56);
  __dst[88] = *((unsigned char *)a2 + 88);
  uint64_t v5 = __dst + 96;
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(v5, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v6 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *(_OWORD *)uint64_t v5 = v6;
  }
  *(_OWORD *)(__dst + 120) = *(long long *)((char *)a2 + 120);
  return __dst;
}

void sub_1003132DC(_Unwind_Exception *exception_object)
{
  if (*v3)
  {
    if (*(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    unsigned char *v3 = 0;
  }
  if (*v2)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    unsigned char *v2 = 0;
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100313344(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10031337C(uint64_t a1)
{
}

uint64_t sub_100313398(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_1003133DC(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t *sub_100313408(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_10005DF6C(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100313448(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100313460(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100313460(a1, *a2);
    sub_100313460(a1, a2[1]);
    sub_1003134BC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_1003134BC(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100313534(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100313534(a1, *a2);
    sub_100313534(a1, a2[1]);
    sub_100313590((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100313590(uint64_t a1)
{
  sub_1000346F8(a1 + 24, *(void **)(a1 + 32));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_1003135E4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100313668(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003136EC(void *a1)
{
  if (a1)
  {
    sub_1003136EC(*a1);
    sub_1003136EC(a1[1]);
    sub_100313740((uint64_t)(a1 + 4));
    operator delete(a1);
  }
}

void sub_100313740(uint64_t a1)
{
  sub_100060644((void *)(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100313790(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100313814(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10031389C()
{
}

__n128 sub_1003138B0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B6D28;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100313904(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B6D28;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031393C(void *a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  *a2 = xpc_null_create();
  ctu::rest::read_rest_value();
  uint64_t v3 = (void (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(void (**)(void *))(*v5 + v3);
  }
  v3(v5);
  xpc_release(object);
}

void sub_1003139DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_1003139F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100313A34()
{
}

void sub_100313A44()
{
}

void *sub_100313A58(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B6DA8;
  result[1] = v3;
  return result;
}

uint64_t sub_100313AA0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B6DA8;
  a2[1] = v2;
  return result;
}

void sub_100313ACC(uint64_t a1, int *a2)
{
  int v2 = *a2;
  xpc_object_t v9 = 0;
  uint64_t v3 = (ctu::rest::detail *)v2;
  uint64_t v4 = asString();
  ctu::rest::detail::write_enum_string_value((uint64_t *)&v9, v3, v4, v5);
  sub_100058DB0(&__p, "/cc/props/cellular_plan_bootstrap_status");
  xpc_object_t object = v9;
  if (v9) {
    xpc_retain(v9);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v8 < 0) {
    operator delete(__p);
  }
  xpc_release(v9);
}

void sub_100313B80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100313BC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100313C04()
{
}

void sub_100313C14()
{
}

__n128 sub_100313C28(uint64_t a1)
{
  int v2 = (char *)operator new(0x28uLL);
  *(void *)int v2 = off_1019B6E38;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100313C7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B6E38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100313CB4(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  long long v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100313DAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100313DEC()
{
}

void sub_100313DFC()
{
}

__n128 sub_100313E10(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_1019B6EB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100313E64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B6EB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100313E9C(void *a1)
{
  uint64_t v5 = 255;
  *(_OWORD *)long long v6 = 0u;
  long long v7 = 0u;
  *(_OWORD *)__p_8 = 0u;
  uint64_t v9 = 0;
  rest::read_rest_value();
  int v2 = (void (*)(void *, uint64_t *))a1[2];
  uint64_t v3 = a1[3];
  uint64_t v4 = (void *)(a1[1] + (v3 >> 1));
  if (v3) {
    int v2 = *(void (**)(void *, uint64_t *))(*v4 + v2);
  }
  v2(v4, &v5);
  if (SHIBYTE(__p_8[1]) < 0) {
    operator delete(*((void **)&v7 + 1));
  }
  if (SBYTE7(v7) < 0) {
    operator delete(v6[0]);
  }
}

void sub_100313F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100313F88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100313FC8()
{
}

void sub_100313FD8()
{
}

__n128 sub_100313FEC(uint64_t a1)
{
  int v2 = (char *)operator new(0x20uLL);
  *(void *)int v2 = off_1019B6F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100314040(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B6F38;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100314078(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1003140C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100314100()
{
}

void sub_100314110()
{
}

__n128 sub_100314124(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B6FB8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100314178(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B6FB8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003141B0(uint64_t *a1, xpc_object_t *a2)
{
  sub_1000FF5C4(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_10031422C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031426C()
{
}

void sub_10031427C()
{
}

__n128 sub_100314290(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7038;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003142E4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7038;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10031431C(uint64_t *a1, xpc_object_t *a2)
{
  sub_10008BD58(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100314398(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003143D8()
{
}

void sub_1003143E8()
{
}

__n128 sub_1003143FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B70B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100314450(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B70B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100314488(uint64_t *a1, xpc_object_t *a2)
{
  sub_10008B2E4(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100314504(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100314544()
{
}

void sub_100314554()
{
}

__n128 sub_100314568(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7138;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003145BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7138;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_1003145F4(uint64_t a1, xpc_object_t *a2)
{
  sub_100089CF0(*(uint64_t **)(a1 + 8), a2);
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)(*(void *)(a1 + 16) + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100314670(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003146B0()
{
}

void sub_1003146C0()
{
}

__n128 sub_1003146D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B71B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100314728(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B71B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100314760(uint64_t *a1, xpc_object_t *a2)
{
  sub_100314828(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_1003147DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031481C()
{
}

void sub_100314828(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_10010C0E0(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v12, object, 0);
    xpc_release(object[0]);
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v11, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v13; i != v11[1] || v12 != v11[0]; uint64_t i = ++v13)
    {
      xpc_object_t v10 = 0;
      object[0] = &v12;
      object[1] = i;
      sub_10003FBDC((uint64_t)object, &v10);
      if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary)
      {
        *(_OWORD *)long long __p = 0u;
        long long v9 = 0u;
        *(_OWORD *)xpc_object_t object = 0u;
        xpc_object_t v6 = v10;
        if (v10) {
          xpc_retain(v10);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_100314ADC((uint64_t)object, &v6);
        xpc_release(v6);
        sub_100314CB8((uint64_t **)a1, object, (uint64_t)object);
        if (SHIBYTE(v9) < 0) {
          operator delete(__p[1]);
        }
        if (SHIBYTE(__p[0]) < 0) {
          operator delete(object[0]);
        }
      }
      xpc_release(v10);
    }
    xpc_release(v12);
    xpc_release(v12);
  }
  xpc_release(v3);
}

void sub_100314A40(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v19 - 48));
  xpc_release(v18);
  _Unwind_Resume(a1);
}

void sub_100314ADC(uint64_t a1, void **a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    xpc_object_t v4 = object;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t object = v4;
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    p_xpc_object_t object = &object;
    long long v7 = "first";
    sub_100048BAC((uint64_t)&p_object, &v8);
    long long __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
    *(_OWORD *)a1 = v10;
    *(void *)(a1 + 16) = v11;
    xpc_release(v8);
    p_xpc_object_t object = &object;
    long long v7 = "second";
    sub_100048BAC((uint64_t)&p_object, &v8);
    long long __p = 0;
    uint64_t v13 = 0;
    uint64_t v14 = 0;
    xpc::dyn_cast_or_default();
    if (SHIBYTE(v14) < 0) {
      operator delete(__p);
    }
    uint64_t v5 = (void **)(a1 + 24);
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*v5);
    }
    *(_OWORD *)uint64_t v5 = v10;
    *(void *)(a1 + 40) = v11;
    xpc_release(v8);
  }
  xpc_release(object);
}

void sub_100314C44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  xpc_release(object);
  xpc_release(a12);
  _Unwind_Resume(a1);
}

_OWORD *sub_100314CB8(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v10 = 0;
  uint64_t v5 = (void **)sub_100046ED4((uint64_t)a1, &v10, a2);
  xpc_object_t v6 = *v5;
  if (!*v5)
  {
    long long v7 = (uint64_t **)v5;
    void v9[2] = 1;
    xpc_object_t v6 = operator new(0x50uLL);
    v9[1] = a1 + 1;
    _OWORD v6[2] = *(_OWORD *)a3;
    *((void *)v6 + 6) = *(void *)(a3 + 16);
    *(void *)a3 = 0;
    *(void *)(a3 + 8) = 0;
    *(_OWORD *)((char *)v6 + 56) = *(_OWORD *)(a3 + 24);
    *((void *)v6 + 9) = *(void *)(a3 + 40);
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)(a3 + 32) = 0;
    *(void *)(a3 + 40) = 0;
    sub_100046C38(a1, v10, v7, (uint64_t *)v6);
    v9[0] = 0;
    sub_10010E764((uint64_t)v9, 0);
  }
  return v6;
}

void sub_100314D90()
{
}

__n128 sub_100314DA4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7238;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100314DF8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7238;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100314E30(uint64_t *a1, xpc_object_t *a2)
{
  sub_100314EF8(a1[1], a2);
  xpc_object_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    xpc_object_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100314EAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100314EEC()
{
}

void sub_100314EF8(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_1000346F8(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v10, object, 0);
    xpc_release(object[0]);
    v7[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      v7[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(object, v7, count);
    xpc_release(v7[0]);
    for (uint64_t i = v11; i != object[1] || v10 != object[0]; uint64_t i = ++v11)
    {
      v7[1] = i;
      xpc_object_t v8 = 0;
      v7[0] = &v10;
      sub_10003FBDC((uint64_t)v7, &v8);
      if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v6 = v8;
        v7[0] = 0;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_100315174((int *)v7, &v6);
        xpc_release(v6);
        sub_100315328((uint64_t **)a1, (int *)v7, (uint64_t)v7);
      }
      xpc_release(v8);
    }
    xpc_release(v10);
    xpc_release(v10);
  }
  xpc_release(v3);
}

void sub_1003150E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object, uint64_t a11, xpc_object_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15)
{
  xpc_release(object);
  xpc_release(a15);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void sub_100315174(int *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v9 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v9 = v3;
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = &v9;
    long long v7 = "first";
    sub_100048BAC((uint64_t)&v6, &object);
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      int v10 = *a1;
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v10, (int *)&object, v5);
      *a1 = v10;
    }
    else if (type == (xpc_type_t)&_xpc_type_BOOL {
           || type == (xpc_type_t)&_xpc_type_int64
    }
           || type == (xpc_type_t)&_xpc_type_uint64)
    {
      *a1 = xpc::dyn_cast_or_default((xpc *)&object, 0, (uint64_t)v5);
    }
    xpc_release(object);
    xpc_object_t v6 = &v9;
    long long v7 = "second";
    sub_100048BAC((uint64_t)&v6, &object);
    read_rest_value();
    xpc_release(object);
    xpc_object_t v3 = v9;
  }
  xpc_release(v3);
}

void sub_1003152D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
}

uint64_t **sub_100315328(uint64_t **a1, int *a2, uint64_t a3)
{
  xpc_object_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  if (v5)
  {
    int v7 = *a2;
    while (1)
    {
      while (1)
      {
        xpc_object_t v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 7);
        if (v7 >= v9) {
          break;
        }
        uint64_t v5 = *v8;
        xpc_object_t v6 = v8;
        if (!*v8) {
          goto LABEL_10;
        }
      }
      if (v9 >= v7) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        xpc_object_t v6 = v8 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    xpc_object_t v8 = a1 + 1;
LABEL_10:
    int v10 = operator new(0x28uLL);
    v10[7] = *(_DWORD *)a3;
    *((_WORD *)v10 + 16) = *(_WORD *)(a3 + 4);
    sub_100046C38(a1, (uint64_t)v8, v6, (uint64_t *)v10);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_1003153F0()
{
}

__n128 sub_100315404(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B72B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100315458(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B72B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100315490(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    char v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (unsigned __int8 *)a2, v6);
    *uint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  int v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    int v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_100315580(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003155C0()
{
}

void sub_1003155D0()
{
}

void *sub_1003155E4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7338;
  result[1] = v3;
  return result;
}

uint64_t sub_10031562C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7338;
  a2[1] = v2;
  return result;
}

void sub_100315658(uint64_t a1, xpc_object_t *a2)
{
}

uint64_t sub_100315660(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003156A0()
{
}

void sub_1003156AC(unsigned char **a1, xpc_object_t *a2)
{
  uint64_t v2 = *a1;
  v4[0] = 0;
  v4[1] = 0;
  uint64_t v3 = v4;
  sub_10031571C((uint64_t)&v3, a2);
  sub_1003159D4(v2, &v3);
  sub_10005CD2C((uint64_t)&v3, v4[0]);
}

void sub_100315704(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_10031571C(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_10005CD2C(a1, *(char **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v11, object, 0);
    xpc_release(object[0]);
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v10, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v12; i != v10[1] || v11 != v10[0]; uint64_t i = ++v12)
    {
      xpc_object_t v9 = 0;
      object[0] = &v11;
      object[1] = i;
      sub_10003FBDC((uint64_t)object, &v9);
      if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
      {
        *(_OWORD *)xpc_object_t object = 0u;
        long long v8 = 0u;
        HIDWORD(v8) = 1;
        xpc_object_t v6 = v9;
        if (v9) {
          xpc_retain(v9);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_100315A34((uint64_t)object, &v6);
        xpc_release(v6);
        sub_100315B7C((uint64_t **)a1, object, (uint64_t)object);
        if (SBYTE7(v8) < 0) {
          operator delete(object[0]);
        }
      }
      xpc_release(v9);
    }
    xpc_release(v11);
    xpc_release(v11);
  }
  xpc_release(v3);
}

void sub_100315930(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, xpc_object_t a19, xpc_object_t a20)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v21 - 64));
  xpc_release(v20);
  _Unwind_Resume(a1);
}

unsigned char *sub_1003159D4(unsigned char *result, void *a2)
{
  void *result = 0;
  uint64_t v4 = (void *)*a2;
  uint64_t v2 = a2 + 1;
  xpc_object_t v3 = v4;
  if (v4 != v2)
  {
    while (!*((unsigned char *)v3 + 56))
    {
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          xpc_object_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          xpc_object_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          xpc_object_t v3 = v6;
        }
        while (!v7);
      }
      xpc_object_t v3 = v6;
      if (v6 == v2) {
        return result;
      }
    }
    void *result = 1;
  }
  return result;
}

void sub_100315A34(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v2 = *a2;
  xpc_object_t v6 = v2;
  if (v2 && xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v2);
  }
  else
  {
    xpc_object_t v2 = xpc_null_create();
    xpc_object_t v6 = v2;
  }
  if (xpc_get_type(v2) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v3 = &v6;
    uint64_t v4 = "first";
    sub_100048BAC((uint64_t)&v3, &object);
    read_rest_value();
    xpc_release(object);
    xpc_object_t v3 = &v6;
    uint64_t v4 = "second";
    sub_100048BAC((uint64_t)&v3, &object);
    read_rest_value();
    xpc_release(object);
    xpc_object_t v2 = v6;
  }
  xpc_release(v2);
}

void sub_100315B28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

uint64_t *sub_100315B7C(uint64_t **a1, void **a2, uint64_t a3)
{
  uint64_t v8 = 0;
  uint64_t v5 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v8, a2);
  __n128 result = *v5;
  if (!*v5)
  {
    memset(v7, 0, sizeof(v7));
    sub_100315C08((uint64_t)a1, a3, v7);
    sub_100046C38(a1, v8, v5, v7[0]);
    return v7[0];
  }
  return result;
}

unsigned char *sub_100315C08@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[2] = 0;
  a3[1] = 0;
  xpc_object_t v6 = a3 + 1;
  BOOL v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  void *v6 = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v7 + 32;
  if (*(char *)(a2 + 23) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)__n128 result = *(_OWORD *)a2;
    *((void *)v7 + 6) = *(void *)(a2 + 16);
  }
  *((void *)v7 + 7) = *(void *)(a2 + 24);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100315CA0(_Unwind_Exception *a1)
{
  void *v1 = 0;
  sub_1000C6EE8(v3, v2);
  _Unwind_Resume(a1);
}

void sub_100315CC0()
{
}

void *sub_100315CD4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B73B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100315D1C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B73B8;
  a2[1] = v2;
  return result;
}

void sub_100315D48(uint64_t a1, xpc_object_t *a2)
{
}

uint64_t sub_100315D50(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100315D90()
{
}

void sub_100315DA0()
{
}

void *sub_100315DB4(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7438;
  result[1] = v3;
  return result;
}

uint64_t sub_100315DFC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7438;
  a2[1] = v2;
  return result;
}

uint64_t sub_100315E28(uint64_t a1, const xpc::object *a2)
{
  return read_rest_value(*(EmergencyMode **)(a1 + 8), a2);
}

uint64_t sub_100315E30(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100315E70()
{
}

void sub_100315E80()
{
}

__n128 sub_100315E94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B74B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100315EE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B74B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100315F20(uint64_t a1, xpc_object_t *a2)
{
  sub_10010C4E0(*(uint64_t **)(a1 + 8), a2);
  uint64_t v3 = *(uint64_t (**)(void *))(a1 + 24);
  uint64_t v4 = *(void *)(a1 + 32);
  uint64_t v5 = (void *)(*(void *)(a1 + 16) + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100315F9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100315FDC()
{
}

void sub_100315FEC()
{
}

__n128 sub_100316000(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_1019B7538;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100316054(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7538;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10031608C(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_1003160D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100316114()
{
}

void sub_100316124()
{
}

__n128 sub_100316138(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B75B8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10031618C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B75B8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_1003161C4(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = a1[1];
  long long v19 = 0u;
  long long v20 = 0u;
  if (*(unsigned char *)(v4 + 24))
  {
    uint64_t v5 = (void *)(v4 + 8);
    uint64_t v6 = *(void *)(v4 + 8);
    *(void *)&long long v19 = *(void *)v4;
    *((void *)&v19 + 1) = v6;
    *(void *)&long long v20 = *(void *)(v4 + 16);
    if ((void)v20)
    {
      *(void *)(v6 + 16) = (char *)&v19 + 8;
      *(void *)uint64_t v4 = v5;
      *uint64_t v5 = 0;
      *(void *)(v4 + 16) = 0;
    }
    else
    {
      *(void *)&long long v19 = (char *)&v19 + 8;
    }
    BYTE8(v20) = 1;
  }
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_null)
  {
    if (*(unsigned char *)(v4 + 24))
    {
      sub_100313460(v4, *(void **)(v4 + 8));
      *(unsigned char *)(v4 + 24) = 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(v4 + 24))
    {
      object[1] = 0;
      *(void *)&long long v22 = 0;
      object[0] = &object[1];
      sub_1003168B8(v4, object);
      sub_100313460((uint64_t)object, (void *)object[1]);
    }
    xpc_object_t v7 = *a2;
    if (*a2 && xpc_get_type(v7) == (xpc_type_t)&_xpc_type_array) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t v7 = xpc_null_create();
    }
    sub_100313460(v4, *(void **)(v4 + 8));
    *(void *)uint64_t v4 = v4 + 8;
    *(void *)(v4 + 16) = 0;
    *(void *)(v4 + 8) = 0;
    if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_array)
    {
      object[0] = v7;
      if (v7) {
        xpc_retain(v7);
      }
      else {
        object[0] = xpc_null_create();
      }
      sub_100048BF4(&v29, object, 0);
      xpc_release(object[0]);
      object[0] = v7;
      if (v7) {
        xpc_retain(v7);
      }
      else {
        object[0] = xpc_null_create();
      }
      if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_array) {
        count = (void *)xpc_array_get_count(v7);
      }
      else {
        count = 0;
      }
      sub_100048BF4(v28, object, count);
      xpc_release(object[0]);
      for (uint64_t i = v30; ; uint64_t i = ++v30)
      {
        if (i == v28[1] && v29 == v28[0])
        {
          xpc_release(v29);
          xpc_release(v29);
          goto LABEL_55;
        }
        xpc_object_t v27 = 0;
        object[0] = &v29;
        object[1] = i;
        sub_10003FBDC((uint64_t)object, &v27);
        if (xpc_get_type(v27) == (xpc_type_t)&_xpc_type_dictionary) {
          break;
        }
LABEL_53:
        xpc_release(v27);
      }
      *(_OWORD *)long long __p = 0u;
      long long v26 = 0u;
      memset(v24, 0, sizeof(v24));
      long long v22 = 0u;
      *(_OWORD *)long long v23 = 0u;
      *(_OWORD *)xpc_object_t object = 0u;
      xpc_object_t v10 = v27;
      if (v27)
      {
        xpc_retain(v27);
        xpc_object_t v33 = v10;
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v33 = v10;
        if (!v10)
        {
          xpc_object_t v11 = xpc_null_create();
          xpc_object_t v10 = 0;
          goto LABEL_36;
        }
      }
      if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v10);
        xpc_object_t v11 = v10;
LABEL_37:
        if (xpc_get_type(v11) == (xpc_type_t)&_xpc_type_dictionary)
        {
          v31[0] = &v33;
          v31[1] = "first";
          sub_100048BAC((uint64_t)v31, &v32);
          __int16 v36 = 0;
          long long v37 = 0;
          uint64_t v38 = 0;
          xpc::dyn_cast_or_default();
          if (SHIBYTE(v38) < 0) {
            operator delete(v36);
          }
          if (SBYTE7(v22) < 0) {
            operator delete(object[0]);
          }
          *(_OWORD *)xpc_object_t object = v34;
          *(void *)&long long v22 = v35;
          xpc_release(v32);
          __int16 v36 = &v33;
          long long v37 = "second";
          sub_100048BAC((uint64_t)&v36, &v34);
          sub_101119174((uint64_t)&v22 + 8, (void **)&v34);
          xpc_release((xpc_object_t)v34);
          xpc_object_t v11 = v33;
        }
        xpc_release(v11);
        xpc_release(v10);
        *(void *)&long long v34 = 0;
        long long v12 = (uint64_t **)sub_100046ED4(v4, &v34, object);
        if (!*v12)
        {
          uint64_t v38 = 1;
          char v13 = operator new(0x90uLL);
          long long v37 = (const char *)(v4 + 8);
          v13[2] = *(_OWORD *)object;
          *((void *)v13 + 6) = v22;
          object[0] = 0;
          object[1] = 0;
          *(void *)&long long v22 = 0;
          *((unsigned char *)v13 + 56) = BYTE8(v22);
          void v13[4] = *(_OWORD *)v23;
          *((void **)v13 + 10) = v24[0];
          v23[0] = 0;
          v23[1] = 0;
          v24[0] = 0;
          long long v14 = *(_OWORD *)&v24[1];
          *((void **)v13 + 13) = v24[3];
          *(_OWORD *)((char *)v13 + 88) = v14;
          memset(&v24[1], 0, 24);
          long long v15 = *(_OWORD *)__p;
          *((void *)v13 + 16) = v26;
          v13[7] = v15;
          __p[0] = 0;
          __p[1] = 0;
          *(void *)&long long v26 = 0;
          *((void *)v13 + 17) = *((void *)&v26 + 1);
          sub_100046C38((uint64_t **)v4, v34, v12, (uint64_t *)v13);
          __int16 v36 = 0;
          sub_10031699C((uint64_t)&v36, 0);
        }
        if (SBYTE7(v26) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v24[3]) < 0) {
          operator delete(v24[1]);
        }
        if (SHIBYTE(v24[0]) < 0) {
          operator delete(v23[0]);
        }
        if (SBYTE7(v22) < 0) {
          operator delete(object[0]);
        }
        goto LABEL_53;
      }
      xpc_object_t v11 = xpc_null_create();
LABEL_36:
      xpc_object_t v33 = v11;
      goto LABEL_37;
    }
LABEL_55:
    xpc_release(v7);
  }
  uint64_t v16 = (void (*)(void *, long long *))a1[3];
  uint64_t v17 = a1[4];
  uint64_t v18 = (void *)(a1[2] + (v17 >> 1));
  if (v17) {
    uint64_t v16 = *(void (**)(void *, long long *))(*v18 + v16);
  }
  v16(v18, &v19);
  if (BYTE8(v20)) {
    sub_100313460((uint64_t)&v19, *((void **)&v19 + 1));
  }
}

void sub_100316708(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, char a11, void *a12, uint64_t a13, char a14, xpc_object_t object, void *a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,xpc_object_t a41,xpc_object_t a42,uint64_t a43,xpc_object_t a44)
{
  if (a14) {
    sub_100313460((uint64_t)&a11, a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10031686C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003168AC()
{
}

uint64_t sub_1003168B8(uint64_t a1, void *a2)
{
  if (*(unsigned char *)(a1 + 24))
  {
    sub_100316930(a1, a2);
  }
  else
  {
    *(void *)a1 = *a2;
    uint64_t v3 = a2 + 1;
    uint64_t v4 = a2[1];
    *(void *)(a1 + 8) = v4;
    uint64_t v5 = a1 + 8;
    uint64_t v6 = a2[2];
    *(void *)(a1 + 16) = v6;
    if (v6)
    {
      *(void *)(v4 + 16) = v5;
      *a2 = v3;
      void *v3 = 0;
      a2[2] = 0;
    }
    else
    {
      *(void *)a1 = v5;
    }
    *(unsigned char *)(a1 + 24) = 1;
  }
  return a1;
}

void sub_100316930(uint64_t a1, void *a2)
{
  uint64_t v4 = (void *)(a1 + 8);
  sub_100313460(a1, *(void **)(a1 + 8));
  *(void *)a1 = *a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = a2[1];
  *uint64_t v4 = v6;
  uint64_t v7 = a2[2];
  *(void *)(a1 + 16) = v7;
  if (v7)
  {
    *(void *)(v6 + 16) = v4;
    *a2 = v5;
    *uint64_t v5 = 0;
    a2[2] = 0;
  }
  else
  {
    *(void *)a1 = v4;
  }
}

void sub_10031699C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1003134BC((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_1003169F8()
{
}

void *sub_100316A0C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7638;
  result[1] = v3;
  return result;
}

uint64_t sub_100316A54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7638;
  a2[1] = v2;
  return result;
}

void sub_100316A80(uint64_t a1, const SubscriptionSlotConfiguration *a2)
{
}

uint64_t sub_100316A88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100316AC8()
{
}

void sub_100316AD4(uint64_t a1, const SubscriptionSlotConfiguration *a2)
{
  xpc_object_t v5 = 0;
  if (*((unsigned char *)a2 + 8)) {
    write_rest_value(a2);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/subscription_configuration");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100316B90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

void *sub_100316BD4(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    char v4 = (void *)result[3];
    xpc_object_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100316E3C(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_100316E4C()
{
}

__n128 sub_100316E60(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B76C8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100316EB4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B76C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100316EEC(void *a1)
{
  uint64_t v2 = a1[1];
  xpc::dyn_cast_or_default();
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  *(void *)(v2 + 16) = v8;
  *(_OWORD *)uint64_t v2 = v7;
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  xpc_object_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }
  return v3(v5);
}

void sub_100316FAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100316FC8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100317008()
{
}

void *sub_100317014(void *a1)
{
  *a1 = off_1019B7748;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100317060(void *a1)
{
  *a1 = off_1019B7748;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_1003170CC(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B7748;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100317130(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B7748;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100317170(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100317180(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1003171C0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (!v4) {
    return;
  }
  uint64_t v6 = a1[1];
  long long v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  if (a1[2])
  {
    if (*(unsigned __int8 *)(a3 + 24) - 6 < 2)
    {
      uint64_t v9 = *(void *)(v6 + 384);
      if (!v9) {
        goto LABEL_11;
      }
LABEL_10:
      (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a3);
LABEL_11:
      uint64_t v10 = *(void *)(v6 + 400);
      if (v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a3);
      }
      goto LABEL_13;
    }
    if (!*(unsigned char *)(a3 + 24))
    {
      uint64_t v9 = *(void *)(v6 + 384);
      if (!v9) {
        goto LABEL_11;
      }
      goto LABEL_10;
    }
  }
LABEL_13:

  sub_10004D2C8(v8);
}

void sub_1003172D8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003172EC(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031732C()
{
}

void *sub_100317338(void *a1)
{
  *a1 = off_1019B77C8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100317384(void *a1)
{
  *a1 = off_1019B77C8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_1003173F0(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B77C8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100317454(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B77C8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100317494(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_1003174A4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1003174E4(void *a1, uint64_t a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (!v3) {
    return;
  }
  xpc_object_t v5 = (void *)a1[1];
  uint64_t v6 = std::__shared_weak_count::lock(v3);
  if (!v6) {
    return;
  }
  long long v7 = v6;
  if (a1[2])
  {
    int v8 = *(unsigned __int8 *)(a2 + 24);
    if (v8 == 2)
    {
LABEL_10:
      uint64_t v11 = v5[66];
      if (v11) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 152))(v11, a2);
      }
      goto LABEL_12;
    }
    if (v8 == 1)
    {
      uint64_t v9 = v5[48];
      if (v9) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 32))(v9, a2);
      }
      uint64_t v10 = v5[50];
      if (v10) {
        (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 32))(v10, a2);
      }
      goto LABEL_10;
    }
  }
LABEL_12:

  sub_10004D2C8(v7);
}

void sub_1003175F8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031760C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031764C()
{
}

void sub_10031765C()
{
}

void *sub_100317670(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7858;
  result[1] = v3;
  return result;
}

uint64_t sub_1003176B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7858;
  a2[1] = v2;
  return result;
}

void sub_1003176E4(uint64_t a1, uint64_t a2)
{
  xpc_object_t v5 = 0;
  if (*(unsigned char *)a2) {
    sub_100029348((uint64_t *)(a2 + 8), &v5);
  }
  else {
    xpc_object_t v5 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/cellular_plan_selected_plan_home_country");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_1003177A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1003177E4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100317824()
{
}

void sub_100317834()
{
}

void *sub_100317848(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B78E8;
  result[1] = v3;
  return result;
}

uint64_t sub_100317890(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B78E8;
  a2[1] = v2;
  return result;
}

void sub_1003178BC()
{
  xpc_object_t v3 = 0;
  write_rest_value();
  sub_100058DB0(&__p, "/cc/props/selected_cellular_plan");
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100317960(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_1003179A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003179E4()
{
}

void sub_1003179F4()
{
}

void *sub_100317A08(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7978;
  result[1] = v3;
  return result;
}

uint64_t sub_100317A50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7978;
  a2[1] = v2;
  return result;
}

uint64_t sub_100317A7C(uint64_t a1, xpc *this, BOOL a3)
{
  uint64_t v3 = *(unsigned char **)(a1 + 8);
  uint64_t result = xpc::dyn_cast_or_default(this, 0, a3);
  unsigned char *v3 = result;
  return result;
}

uint64_t sub_100317AAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100317AEC()
{
}

void sub_100317AF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  sub_100058DB0(&__p, "/cc/props/airplane_mode_user_preference");
  uint64_t v8 = *a4;
  uint64_t v7 = a4[1];
  uint64_t v9 = operator new(0x28uLL);
  *uint64_t v9 = off_1019B79F8;
  v9[1] = a1;
  void v9[2] = a3;
  void v9[3] = v8;
  void v9[4] = v7;
  uint64_t v12[3] = v9;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (v11 < 0) {
    operator delete(__p);
  }
}

void sub_100317BD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void sub_100317C0C()
{
}

__n128 sub_100317C20(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B79F8;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100317C74(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B79F8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100317CAC(void *a1, xpc_object_t *a2)
{
  char v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *char v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *char v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  long long v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100317DA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100317DE4()
{
}

void sub_100317DF4()
{
}

__n128 sub_100317E08(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7A78;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100317E5C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7A78;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100317E94(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = a1[1];
  unsigned int v14 = 0;
  long long v15 = 0;
  char v13 = &v14;
  sub_10003F854((uint64_t)&v13, a2);
  *(_OWORD *)long long __p = 0u;
  long long v12 = 0u;
  *(_OWORD *)uint64_t v9 = 0u;
  long long v10 = 0u;
  MCC::MCC((MCC *)v9, (const MCC *)v3);
  MCC::MCC((MCC *)__p, (const MCC *)(v3 + 32));
  uint64_t v7 = v13;
  v8[0] = v14;
  v8[1] = v15;
  if (v15)
  {
    v14[2] = v8;
    char v13 = &v14;
    unsigned int v14 = 0;
    long long v15 = 0;
  }
  else
  {
    uint64_t v7 = v8;
  }
  sub_10006267C(v3, (uint64_t)&v7);
  sub_10003FB28((uint64_t)&v7, v8[0]);
  if (MCCAndMNC::operator!=())
  {
    char v4 = (void (*)(void *))a1[3];
    uint64_t v5 = a1[4];
    uint64_t v6 = (void *)(a1[2] + (v5 >> 1));
    if (v5) {
      char v4 = *(void (**)(void *))(*v6 + v4);
    }
    v4(v6);
  }
  if (SHIBYTE(v12) < 0) {
    operator delete(__p[1]);
  }
  if (SHIBYTE(v10) < 0) {
    operator delete(v9[1]);
  }
  sub_10003FB28((uint64_t)&v13, v14);
}

void sub_100317FD4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  sub_10003FB28((uint64_t)&a10, a11);
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_10003FB28(v26 - 56, *(void **)(v26 - 48));
  _Unwind_Resume(a1);
}

uint64_t sub_100318034(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100318074()
{
}

uint64_t sub_100318080(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_1003180C8()
{
}

void *sub_1003180DC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7AF8;
  result[1] = v3;
  return result;
}

uint64_t sub_100318124(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7AF8;
  a2[1] = v2;
  return result;
}

void sub_100318150(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)a2;
  uint64_t v2 = v6;
  long long v7 = *(_OWORD *)(a2 + 8);
  uint64_t v3 = v7;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  unint64_t v4 = *(void *)(a1 + 8);
  v8[0] = v4;
  v8[1] = 0uLL;
  sub_10030F964((void *)v8 + 1, v2, v3, 0x8F5C28F5C28F5C29 * ((v3 - v2) >> 3));
  uint64_t v5 = *(std::__shared_weak_count **)(v4 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_1003182B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10)
{
  *(void *)(v10 - 56) = &a10;
  sub_100310018((void ***)(v10 - 56));
  _Unwind_Resume(a1);
}

uint64_t sub_1003182D4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100318314()
{
}

uint64_t *sub_100318320(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(*v1 + 304);
  memset(v6, 0, sizeof(v6));
  sub_10030F964(v6, v1[1], v1[2], 0x8F5C28F5C28F5C29 * ((v1[2] - v1[1]) >> 3));
  (*(void (**)(uint64_t, void *))(*(void *)v2 + 200))(v2, v6);
  long long v7 = (void **)v6;
  sub_100310018(&v7);
  sub_100318400((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003183D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  *(void *)(v11 - 24) = v10;
  sub_100310018((void ***)(v11 - 24));
  sub_100318400(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100318400(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_100310018(&v2);
    operator delete();
  }
  return result;
}

void *sub_100318460(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_1003184E8()
{
}

__n128 sub_1003184FC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7B88;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100318550(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7B88;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100318588(void *a1, xpc *a2)
{
  unint64_t v4 = (__int16 *)a1[1];
  __int16 v10 = *v4;
  if (xpc_get_type(*(xpc_object_t *)a2) == (xpc_type_t)&_xpc_type_null)
  {
    if (*((unsigned char *)v4 + 1)) {
      *((unsigned char *)v4 + 1) = 0;
    }
  }
  else
  {
    if (!*((unsigned char *)v4 + 1)) {
      *unint64_t v4 = 256;
    }
    *(unsigned char *)unint64_t v4 = xpc::dyn_cast_or_default(a2, 0, v5);
  }
  uint64_t v6 = (uint64_t (*)(void *, __int16 *))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, __int16 *))(*v8 + v6);
  }
  return v6(v8, &v10);
}

uint64_t sub_100318658(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100318698()
{
}

void sub_1003186A8()
{
}

void *sub_1003186BC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7C08;
  result[1] = v3;
  return result;
}

uint64_t sub_100318704(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7C08;
  a2[1] = v2;
  return result;
}

void sub_100318730(uint64_t a1, BOOL *a2)
{
  xpc_object_t v2 = xpc_BOOL_create(*a2);
  if (!v2) {
    xpc_object_t v2 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/props/cellular_data_hide_indicator");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0) {
    operator delete(__p);
  }
  xpc_release(v2);
}

void sub_1003187E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100318828(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100318868()
{
}

void *sub_100318874(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    unint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100318ADC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_100318AEC()
{
}

__n128 sub_100318B00(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_1019B7C98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100318B54(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7C98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100318B8C(void *a1, xpc_object_t *a2)
{
  unint64_t v4 = (int *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    int v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)a2, v6);
    *unint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *unint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  uint64_t v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    uint64_t v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_100318C7C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100318CBC()
{
}

void sub_100318CCC()
{
}

__n128 sub_100318CE0(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x28uLL);
  *(void *)xpc_object_t v2 = off_1019B7D18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100318D34(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7D18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100318D6C(uint64_t *a1, xpc_object_t *a2)
{
  sub_100318E34(a1[1], a2);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  char v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100318DE8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100318E28()
{
}

void sub_100318E34(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_10024D10C(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v11, object, 0);
    xpc_release(object[0]);
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v10, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v12; i != v10[1] || v11 != v10[0]; uint64_t i = ++v12)
    {
      xpc_object_t v9 = 0;
      object[0] = &v11;
      object[1] = i;
      sub_10003FBDC((uint64_t)object, &v9);
      if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
      {
        object[0] = 0;
        long long v8 = 0u;
        object[1] = &v8;
        xpc_object_t v6 = v9;
        if (v9) {
          xpc_retain(v9);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_1003190EC((int *)object, &v6);
        xpc_release(v6);
        sub_1003192A0(a1, (int *)object, (uint64_t)object);
        sub_1000346F8((uint64_t)&object[1], (void *)v8);
      }
      xpc_release(v9);
    }
    xpc_release(v11);
    xpc_release(v11);
  }
  xpc_release(v3);
}

void sub_10031904C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t a16, xpc_object_t a17)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v18 - 64));
  xpc_release(v17);
  _Unwind_Resume(a1);
}

void sub_1003190EC(int *a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v9 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v9 = v3;
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v6 = &v9;
    uint64_t v7 = "first";
    sub_100048BAC((uint64_t)&v6, &object);
    xpc_type_t type = xpc_get_type(object);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      int v10 = *a1;
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v10, (int *)&object, v5);
      *a1 = v10;
    }
    else if (type == (xpc_type_t)&_xpc_type_BOOL {
           || type == (xpc_type_t)&_xpc_type_int64
    }
           || type == (xpc_type_t)&_xpc_type_uint64)
    {
      *a1 = xpc::dyn_cast_or_default((xpc *)&object, 0, (uint64_t)v5);
    }
    xpc_release(object);
    xpc_object_t v6 = &v9;
    uint64_t v7 = "second";
    sub_100048BAC((uint64_t)&v6, &object);
    read_rest_value();
    xpc_release(object);
    xpc_object_t v3 = v9;
  }
  xpc_release(v3);
}

void sub_10031924C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13)
{
}

uint64_t *sub_1003192A0(uint64_t a1, int *a2, uint64_t a3)
{
  char v5 = (uint64_t **)(a1 + 8);
  uint64_t v4 = *(uint64_t **)(a1 + 8);
  if (v4)
  {
    int v6 = *a2;
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v4;
        int v8 = *((_DWORD *)v4 + 8);
        if (v6 >= v8) {
          break;
        }
        uint64_t v4 = *v7;
        char v5 = v7;
        if (!*v7) {
          goto LABEL_10;
        }
      }
      if (v8 >= v6) {
        break;
      }
      uint64_t v4 = v7[1];
      if (!v4)
      {
        char v5 = v7 + 1;
        goto LABEL_10;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(a1 + 8);
LABEL_10:
    memset(v10, 0, sizeof(v10));
    sub_10031935C(a1, a3, v10);
    sub_100046C38((uint64_t **)a1, (uint64_t)v7, v5, v10[0]);
    return v10[0];
  }
  return (uint64_t *)v7;
}

_DWORD *sub_10031935C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  __n128 result = operator new(0x40uLL);
  *a3 = result;
  a3[1] = v5;
  result[8] = *(_DWORD *)a2;
  uint64_t v7 = (void *)(a2 + 16);
  uint64_t v8 = *(void *)(a2 + 16);
  *((void *)result + 5) = *(void *)(a2 + 8);
  *((void *)result + 6) = v8;
  xpc_object_t v9 = (char *)(result + 12);
  uint64_t v10 = *(void *)(a2 + 24);
  *((void *)result + 7) = v10;
  if (v10)
  {
    *(void *)(v8 + 16) = v9;
    *(void *)(a2 + 8) = v7;
    *uint64_t v7 = 0;
    *(void *)(a2 + 24) = 0;
  }
  else
  {
    *((void *)result + 5) = v9;
  }
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1003193EC()
{
}

__n128 sub_100319400(uint64_t a1)
{
  xpc_object_t v2 = (char *)operator new(0x20uLL);
  *(void *)xpc_object_t v2 = off_1019B7D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100319454(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7D98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10031948C(void *a1, xpc *this, BOOL a3)
{
  uint64_t v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = (uint64_t (*)(void *, uint64_t))a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = (void *)(a1[1] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *, uint64_t))(*v7 + v5);
  }

  return v5(v7, v4);
}

uint64_t sub_100319510(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319550()
{
}

void sub_100319560()
{
}

void *sub_100319574(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B7E18;
  result[1] = v3;
  return result;
}

uint64_t sub_1003195BC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B7E18;
  a2[1] = v2;
  return result;
}

xpc_type_t sub_1003195E8(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  xpc_type_t result = xpc_get_type(*a2);
  if (result == (xpc_type_t)&_xpc_type_null)
  {
    if (*(unsigned char *)(v3 + 1)) {
      *(unsigned char *)(v3 + 1) = 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(v3 + 1)) {
      *(_WORD *)uint64_t v3 = 256;
    }
    xpc_type_t result = (xpc_type_t)xpc::dyn_cast_or_default((xpc *)a2, 0, v5);
    *(unsigned char *)uint64_t v3 = (_BYTE)result;
  }
  return result;
}

uint64_t sub_100319650(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319690()
{
}

void sub_1003196A0()
{
}

__n128 sub_1003196B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7E98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100319708(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7E98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100319740(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (char *)a1[1];
  char v13 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    char v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (unsigned __int8 *)a2, v6);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  xpc_object_t v9 = (uint64_t (*)(void *, char *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    xpc_object_t v9 = *(uint64_t (**)(void *, char *))(*v11 + v9);
  }
  return v9(v11, &v13);
}

uint64_t sub_10031983C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031987C()
{
}

void sub_10031988C()
{
}

__n128 sub_1003198A0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7F18;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_1003198F4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7F18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031992C(void *a1)
{
  uint64_t v2 = (long long *)a1[1];
  long long v3 = *v2;
  uint64_t v9 = *((void *)v2 + 2);
  *(_OWORD *)long long __p = v3;
  *((void *)v2 + 1) = 0;
  *((void *)v2 + 2) = 0;
  *(void *)uint64_t v2 = 0;
  uint64_t v12 = 0;
  uint64_t v13 = 0;
  uint64_t v14 = 0;
  xpc::dyn_cast_or_default();
  if (*((char *)v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  long long v4 = v10;
  *((void *)v2 + 2) = v11;
  long long *v2 = v4;
  BOOL v5 = (void (*)(void *, void **))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    BOOL v5 = *(void (**)(void *, void **))(*v7 + v5);
  }
  v5(v7, __p);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100319A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100319A4C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319A8C()
{
}

void sub_100319A9C()
{
}

__n128 sub_100319AB0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B7F98;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100319B04(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B7F98;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100319B3C(void *a1, xpc *this, BOOL a3)
{
  long long v4 = (unsigned char *)a1[1];
  int v5 = *v4;
  *long long v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v6 = (uint64_t (*)(void *, BOOL))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(uint64_t (**)(void *, BOOL))(*v8 + v6);
  }

  return v6(v8, v5 != 0);
}

uint64_t sub_100319BD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319C18()
{
}

void sub_100319C28()
{
}

__n128 sub_100319C3C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8018;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100319C90(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8018;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100319CC8(void *a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  read_rest_value();
  xpc_release(object);
  long long v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  int v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    long long v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }
  return v3(v5);
}

void sub_100319D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_100319D90(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319DD0()
{
}

void sub_100319DE0()
{
}

__n128 sub_100319DF4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8098;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100319E48(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8098;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100319E80(void *a1, xpc *this, BOOL a3)
{
  uint64_t v4 = (unsigned char *)a1[1];
  *uint64_t v4 = xpc::dyn_cast_or_default(this, 0, a3);
  int v5 = (uint64_t (*)(void *))a1[3];
  uint64_t v6 = a1[4];
  uint64_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    int v5 = *(uint64_t (**)(void *))(*v7 + v5);
  }

  return v5(v7);
}

uint64_t sub_100319F08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100319F48()
{
}

uint64_t *sub_100319F54(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100319FAC(a1, *(void ***)a2, (void **)(a2 + 8));
  return a1;
}

void sub_100319F94(_Unwind_Exception *a1)
{
  sub_10023A670(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100319FAC(uint64_t *result, void **a2, void **a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    int v5 = (uint64_t **)result;
    uint64_t v6 = (uint64_t)(result + 1);
    do
    {
      __n128 result = sub_10031A038(v5, v6, v4 + 4, (long long *)v4 + 2);
      uint64_t v7 = (void **)v4[1];
      if (v7)
      {
        do
        {
          uint64_t v8 = v7;
          uint64_t v7 = (void **)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v8 = (void **)v4[2];
          BOOL v9 = *v8 == v4;
          uint64_t v4 = v8;
        }
        while (!v9);
      }
      uint64_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_10031A038(uint64_t **a1, uint64_t a2, void **a3, long long *a4)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  uint64_t v6 = sub_1000C6D50(a1, a2, &v12, &v11, a3);
  uint64_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    uint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_10031A0DC((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10023C164((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_10031A0DC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0xA0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_10031A150(v6 + 4, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10031A138(_Unwind_Exception *a1)
{
  sub_10023C164(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_10031A150(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  sub_10023C008((uint64_t)(__dst + 3), (uint64_t)a2 + 24);
  return __dst;
}

void sub_10031A1AC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10031A1CC()
{
}

__n128 sub_10031A1E0(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019B8118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10031A22C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8118;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031A25C(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_null)
  {
    if (*(unsigned char *)(v4 + 24))
    {
      sub_10023A670(v4, *(void **)(v4 + 8));
      *(unsigned char *)(v4 + 24) = 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(v4 + 24))
    {
      v11[0] = 0;
      v11[1] = 0;
      long long v10 = v11;
      sub_10023B964(v4, &v10);
      sub_10023A670((uint64_t)&v10, v11[0]);
    }
    sub_10023B9DC(v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v5 + 2664))
  {
    uint64_t v6 = *(void *)(v5 + 304);
    sub_100319F54((uint64_t *)&v10, v5 + 2640);
    char v12 = 1;
    (*(void (**)(uint64_t, void ***))(*(void *)v6 + 184))(v6, &v10);
    if (v12) {
      sub_10023A670((uint64_t)&v10, v11[0]);
    }
    uint64_t v7 = *(void *)(v5 + 464);
    if (v7)
    {
      LOBYTE(v8[0]) = 0;
      char v9 = 0;
      if (*(unsigned char *)(v5 + 2664))
      {
        sub_100319F54(v8, v5 + 2640);
        char v9 = 1;
      }
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v7 + 40))(v7, v8);
      if (v9) {
        sub_10023A670((uint64_t)v8, (void *)v8[1]);
      }
    }
  }
}

void sub_10031A3D4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, char a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, char a19)
{
  if (a12) {
    sub_10023A670((uint64_t)&a9, a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031A430(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031A470()
{
}

void sub_10031A480()
{
}

__n128 sub_10031A494(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8198;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10031A4E8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8198;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031A520(void *a1, xpc_object_t *a2)
{
  long long v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  char v9 = (void **)*v3;
  long long v10 = v5;
  if (v3[2])
  {
    void v5[2] = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    char v9 = &v10;
  }
  sub_10031A644((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10030AAD0((uint64_t)&v9, v10);
}

void sub_10031A5E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_10031A5F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031A638()
{
}

void sub_10031A644(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_10030AAD0(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v19, object, 0);
    xpc_release(object[0]);
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v18, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v20; i != v18[1] || v19 != v18[0]; uint64_t i = ++v20)
    {
      xpc_object_t v17 = 0;
      object[0] = &v19;
      object[1] = i;
      sub_10003FBDC((uint64_t)object, &v17);
      if (xpc_get_type(v17) == (xpc_type_t)&_xpc_type_dictionary)
      {
        uint64_t v16 = 0;
        long long v15 = 0u;
        v10[1] = 0;
        long long v8 = 0u;
        v10[0] = 0;
        *(_OWORD *)xpc_object_t object = 0u;
        long long v12 = 0uLL;
        char v9 = v10;
        uint64_t v11 = &v12;
        uint64_t v14 = 0;
        *(void *)&long long v15 = 0;
        uint64_t v13 = &v14;
        xpc_object_t v6 = v17;
        if (v17) {
          xpc_retain(v17);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_10031A960((uint64_t)object, &v6);
        xpc_release(v6);
        sub_10031AB00((uint64_t **)a1, object, (long long *)object);
        sub_1000346F8((uint64_t)&v13, v14);
        sub_1001A297C((uint64_t)&v11, (void *)v12);
        sub_1000346F8((uint64_t)&v9, v10[0]);
        if (SBYTE7(v8) < 0) {
          operator delete(object[0]);
        }
      }
      xpc_release(v17);
    }
    xpc_release(v19);
    xpc_release(v19);
  }
  xpc_release(v3);
}

void sub_10031A8C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(*(xpc_object_t *)(v12 - 104));
  xpc_release(v11);
  _Unwind_Resume(a1);
}

void sub_10031A960(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t v7 = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
    xpc_object_t v7 = v3;
  }
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    uint64_t v4 = &v7;
    uint64_t v5 = "first";
    sub_100048BAC((uint64_t)&v4, &object);
    read_rest_value();
    xpc_release(object);
    uint64_t v4 = &v7;
    uint64_t v5 = "second";
    sub_100048BAC((uint64_t)&v4, &object);
    sub_1003B4B74(a1 + 24, &object);
    xpc_release(object);
    xpc_object_t v3 = v7;
  }
  xpc_release(v3);
}

void sub_10031AA54(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, xpc_object_t a12)
{
}

uint64_t sub_10031AAA8(uint64_t a1)
{
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

char *sub_10031AB00(uint64_t **a1, void **a2, long long *a3)
{
  uint64_t v10 = 0;
  uint64_t v5 = (char **)sub_100046ED4((uint64_t)a1, &v10, a2);
  xpc_object_t v6 = *v5;
  if (!*v5)
  {
    xpc_object_t v7 = (uint64_t **)v5;
    memset(v9, 0, sizeof(v9));
    sub_10031ABA0((uint64_t)a1, a3, v9);
    sub_100046C38(a1, v10, v7, (uint64_t *)v9[0]);
    xpc_object_t v6 = v9[0];
    v9[0] = 0;
    sub_10031AD24((uint64_t)v9, 0);
  }
  return v6;
}

char *sub_10031ABA0@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  uint64_t v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  xpc_object_t v6 = (char *)operator new(0x98uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = sub_10031AC14(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10031ABFC(_Unwind_Exception *a1)
{
  sub_10031AD24(v1, 0);
  _Unwind_Resume(a1);
}

char *sub_10031AC14(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((void *)__dst + 3) = *((void *)a2 + 3);
  *((void *)__dst + 4) = *((void *)a2 + 4);
  uint64_t v5 = (void *)a2 + 5;
  uint64_t v6 = *((void *)a2 + 5);
  *((void *)__dst + 5) = v6;
  xpc_object_t v7 = __dst + 40;
  uint64_t v8 = *((void *)a2 + 6);
  *((void *)__dst + 6) = v8;
  if (v8)
  {
    *(void *)(v6 + 16) = v7;
    *((void *)a2 + 4) = v5;
    *uint64_t v5 = 0;
    *((void *)a2 + 6) = 0;
  }
  else
  {
    *((void *)__dst + 4) = v7;
  }
  *((void *)__dst + 7) = *((void *)a2 + 7);
  char v9 = a2 + 4;
  uint64_t v10 = *((void *)a2 + 8);
  *((void *)__dst + 8) = v10;
  uint64_t v11 = __dst + 64;
  uint64_t v12 = *((void *)a2 + 9);
  *((void *)__dst + 9) = v12;
  if (v12)
  {
    *(void *)(v10 + 16) = v11;
    *((void *)a2 + 7) = v9;
    *char v9 = 0;
    *((void *)a2 + 9) = 0;
  }
  else
  {
    *((void *)__dst + 7) = v11;
  }
  *((void *)__dst + 10) = *((void *)a2 + 10);
  uint64_t v13 = (void *)a2 + 11;
  uint64_t v14 = *((void *)a2 + 11);
  *((void *)__dst + 11) = v14;
  long long v15 = __dst + 88;
  uint64_t v16 = *((void *)a2 + 12);
  *((void *)__dst + 12) = v16;
  if (v16)
  {
    *(void *)(v14 + 16) = v15;
    *((void *)a2 + 10) = v13;
    void *v13 = 0;
    *((void *)a2 + 12) = 0;
  }
  else
  {
    *((void *)__dst + 10) = v15;
  }
  uint64_t v17 = *((void *)a2 + 13);
  __dst[112] = *((unsigned char *)a2 + 112);
  *((void *)__dst + 13) = v17;
  return __dst;
}

void sub_10031AD24(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10030AB2C((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10031AD80()
{
}

__n128 sub_10031AD94(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8218;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10031ADE8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8218;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_10031AE20(void *a1, xpc *this, BOOL a3)
{
  long long v4 = (unsigned char *)a1[1];
  *long long v4 = xpc::dyn_cast_or_default(this, 0, a3);
  uint64_t v5 = (uint64_t (*)(void *))a1[3];
  uint64_t v6 = a1[4];
  xpc_object_t v7 = (void *)(a1[2] + (v6 >> 1));
  if (v6) {
    uint64_t v5 = *(uint64_t (**)(void *))(*v7 + v5);
  }

  return v5(v7);
}

uint64_t sub_10031AEA8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031AEE8()
{
}

void sub_10031AEF8()
{
}

void *sub_10031AF0C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8298;
  result[1] = v3;
  return result;
}

uint64_t sub_10031AF54(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8298;
  a2[1] = v2;
  return result;
}

uint64_t sub_10031AF80(uint64_t a1, SubscriptionInfo *a2, const object *a3)
{
  return rest::read_rest_value(*(rest **)(a1 + 8), a2, a3);
}

uint64_t sub_10031AF88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031AFC8()
{
}

void sub_10031AFD8()
{
}

void *sub_10031AFEC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8318;
  result[1] = v3;
  return result;
}

uint64_t sub_10031B034(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8318;
  a2[1] = v2;
  return result;
}

void sub_10031B060(uint64_t a1, xpc_object_t *a2)
{
}

uint64_t sub_10031B068(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031B0A8()
{
}

void sub_10031B0B4(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v3 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t v3 = xpc_null_create();
  }
  sub_1000346F8(a1, *(void **)(a1 + 8));
  *(void *)a1 = a1 + 8;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 8) = 0;
  if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v10, object, 0);
    xpc_release(object[0]);
    v7[0] = v3;
    if (v3) {
      xpc_retain(v3);
    }
    else {
      v7[0] = xpc_null_create();
    }
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v3);
    }
    else {
      count = 0;
    }
    sub_100048BF4(object, v7, count);
    xpc_release(v7[0]);
    for (uint64_t i = v11; i != object[1] || v10 != object[0]; uint64_t i = ++v11)
    {
      v7[1] = i;
      xpc_object_t v8 = 0;
      v7[0] = &v10;
      sub_10003FBDC((uint64_t)v7, &v8);
      if (xpc_get_type(v8) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v6 = v8;
        v7[0] = 0;
        if (v8) {
          xpc_retain(v8);
        }
        else {
          xpc_object_t v6 = xpc_null_create();
        }
        sub_10031B330((int *)v7, &v6);
        xpc_release(v6);
        sub_10003474C((uint64_t **)a1, (int *)v7, (uint64_t)v7);
      }
      xpc_release(v8);
    }
    xpc_release(v10);
    xpc_release(v10);
  }
  xpc_release(v3);
}

void sub_10031B2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, xpc_object_t object, uint64_t a11, xpc_object_t a12, xpc_object_t a13, uint64_t a14, xpc_object_t a15)
{
  xpc_release(object);
  xpc_release(a15);
  xpc_release(v15);
  _Unwind_Resume(a1);
}

void sub_10031B330(int *a1, void **a2)
{
  xpc_object_t v3 = *a2;
  xpc_object_t object = v3;
  if (v3 && xpc_get_type(v3) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v3);
    xpc_object_t v4 = object;
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t object = v4;
  }
  if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_dictionary)
  {
    p_xpc_object_t object = &object;
    xpc_object_t v10 = "first";
    sub_100048BAC((uint64_t)&p_object, &v11);
    xpc_type_t type = xpc_get_type(v11);
    if (type == (xpc_type_t)&_xpc_type_string)
    {
      int v13 = *a1;
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)&v11, v6);
      *a1 = v13;
    }
    else if (type == (xpc_type_t)&_xpc_type_BOOL {
           || type == (xpc_type_t)&_xpc_type_int64
    }
           || type == (xpc_type_t)&_xpc_type_uint64)
    {
      *a1 = xpc::dyn_cast_or_default((xpc *)&v11, 0, (uint64_t)v6);
    }
    xpc_release(v11);
    p_xpc_object_t object = &object;
    xpc_object_t v10 = "second";
    sub_100048BAC((uint64_t)&p_object, &v11);
    xpc_type_t v7 = xpc_get_type(v11);
    if (v7 == (xpc_type_t)&_xpc_type_string)
    {
      LOBYTE(v13) = *((unsigned char *)a1 + 4);
      ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (unsigned __int8 *)&v11, v8);
      *((unsigned char *)a1 + 4) = v13;
    }
    else if (v7 == (xpc_type_t)&_xpc_type_BOOL {
           || v7 == (xpc_type_t)&_xpc_type_int64
    }
           || v7 == (xpc_type_t)&_xpc_type_uint64)
    {
      *((unsigned char *)a1 + 4) = xpc::dyn_cast_or_default((xpc *)&v11, 0, (uint64_t)v8);
    }
    xpc_release(v11);
  }
  xpc_release(object);
}

void sub_10031B4E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t a12, xpc_object_t object)
{
}

void sub_10031B53C()
{
}

__n128 sub_10031B550(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8398;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10031B5A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8398;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031B5DC(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = a1[1];
  uint64_t v5 = (void *)(v3 + 8);
  uint64_t v4 = *(void *)(v3 + 8);
  uint64_t v17 = *(uint64_t **)v3;
  uint64_t v18 = (char *)v4;
  if (*(void *)(v3 + 16))
  {
    *(void *)(v4 + 16) = &v18;
    *(void *)uint64_t v3 = v5;
    *uint64_t v5 = 0;
    *(void *)(v3 + 16) = 0;
  }
  else
  {
    uint64_t v17 = (uint64_t *)&v18;
  }
  xpc_object_t v6 = *a2;
  if (*a2 && xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_array) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t v6 = xpc_null_create();
  }
  sub_10005CD2C(v3, *(char **)(v3 + 8));
  *(void *)(v3 + 8) = 0;
  *(void *)(v3 + 16) = 0;
  *(void *)uint64_t v3 = v5;
  if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_array)
  {
    object[0] = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      object[0] = xpc_null_create();
    }
    sub_100048BF4(&v24, object, 0);
    xpc_release(object[0]);
    object[0] = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      object[0] = xpc_null_create();
    }
    if (xpc_get_type(v6) == (xpc_type_t)&_xpc_type_array) {
      count = (void *)xpc_array_get_count(v6);
    }
    else {
      count = 0;
    }
    sub_100048BF4(v23, object, count);
    xpc_release(object[0]);
    for (uint64_t i = v25; ; uint64_t i = ++v25)
    {
      if (i == v23[1] && v24 == v23[0])
      {
        xpc_release(v24);
        xpc_release(v24);
        goto LABEL_41;
      }
      xpc_object_t v22 = 0;
      object[0] = &v24;
      object[1] = i;
      sub_10003FBDC((uint64_t)object, &v22);
      if (xpc_get_type(v22) == (xpc_type_t)&_xpc_type_dictionary) {
        break;
      }
LABEL_39:
      xpc_release(v22);
    }
    *(_OWORD *)xpc_object_t object = 0u;
    long long v21 = 0u;
    xpc_object_t v9 = v22;
    if (v22)
    {
      xpc_retain(v22);
      xpc_object_t v30 = v9;
    }
    else
    {
      xpc_object_t v9 = xpc_null_create();
      xpc_object_t v30 = v9;
      if (!v9)
      {
        xpc_object_t v10 = xpc_null_create();
        xpc_object_t v9 = 0;
        goto LABEL_29;
      }
    }
    if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v9);
      xpc_object_t v10 = v9;
LABEL_30:
      if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v27 = (uint64_t *)&v30;
        long long v28 = "first";
        sub_100048BAC((uint64_t)&v27, &v26);
        read_rest_value();
        xpc_release(v26);
        xpc_object_t v27 = (uint64_t *)&v30;
        long long v28 = "second";
        sub_100048BAC((uint64_t)&v27, &v26);
        sub_1003B667C((uint64_t)&v21 + 8, &v26);
        xpc_release(v26);
        xpc_object_t v10 = v30;
      }
      xpc_release(v10);
      xpc_release(v9);
      xpc_object_t v30 = 0;
      xpc_object_t v11 = (uint64_t **)sub_100046ED4(v3, &v30, object);
      if (!*v11)
      {
        uint64_t v29 = 0;
        uint64_t v12 = (uint64_t *)operator new(0x40uLL);
        long long v28 = (const char *)(v3 + 8);
        LOBYTE(v29) = 0;
        int v13 = v12 + 4;
        if (SBYTE7(v21) < 0)
        {
          sub_10004FC84(v13, object[0], (unint64_t)object[1]);
        }
        else
        {
          *(_OWORD *)int v13 = *(_OWORD *)object;
          void v12[6] = v21;
        }
        v12[7] = *((void *)&v21 + 1);
        sub_100046C38((uint64_t **)v3, (uint64_t)v30, v11, v12);
      }
      if (SBYTE7(v21) < 0) {
        operator delete(object[0]);
      }
      goto LABEL_39;
    }
    xpc_object_t v10 = xpc_null_create();
LABEL_29:
    xpc_object_t v30 = v10;
    goto LABEL_30;
  }
LABEL_41:
  xpc_release(v6);
  uint64_t v14 = (void (*)(void *, uint64_t **))a1[3];
  uint64_t v15 = a1[4];
  uint64_t v16 = (void *)(a1[2] + (v15 >> 1));
  if (v15) {
    uint64_t v14 = *(void (**)(void *, uint64_t **))(*v16 + v14);
  }
  v14(v16, &v17);
  sub_10005CD2C((uint64_t)&v17, v18);
}

void sub_10031B9B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, int a10, char a11, char *a12, uint64_t a13, xpc_object_t object, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,xpc_object_t a21,xpc_object_t a22,uint64_t a23,xpc_object_t a24,uint64_t a25,xpc_object_t a26,uint64_t a27)
{
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(a24);
  xpc_release(v27);
  sub_10005CD2C((uint64_t)&a11, a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10031BAD4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031BB14()
{
}

void sub_10031BB24()
{
}

void *sub_10031BB38(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8418;
  result[1] = v3;
  return result;
}

uint64_t sub_10031BB80(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8418;
  a2[1] = v2;
  return result;
}

uint64_t sub_10031BBAC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031BBEC()
{
}

void sub_10031BBFC()
{
}

__n128 sub_10031BC10(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_1019B8498;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_10031BC64(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B8498;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10031BC9C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  xpc_object_t v9 = (char **)*v3;
  xpc_object_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    void *v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    xpc_object_t v9 = &v10;
  }
  sub_1000E4B84((uint64_t)v3, a2);
  xpc_object_t v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  xpc_object_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    xpc_object_t v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10005CD2C((uint64_t)&v9, v10);
}

void sub_10031BD5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_10031BD74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031BDB4()
{
}

void *sub_10031BDC0(void *a1)
{
  *a1 = off_1019B8518;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10031BE0C(void *a1)
{
  *a1 = off_1019B8518;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_10031BE78(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B8518;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10031BED4(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B8518;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10031BF0C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10031BF1C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10031BF5C(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void **)(a1 + 8);
      if (v5)
      {
        values = @"UserAssignedDeviceName";
        CFArrayRef v6 = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
        CFArrayRef v23 = v6;
        if (v6) {
          uint64_t v7 = sub_100083F10;
        }
        else {
          uint64_t v7 = 0;
        }
        if (v7)
        {
          CFArrayRef v21 = v6;
          CFDictionaryRef theDict = 0;
          uint64_t v8 = v5[62];
          if (v6) {
            CFRetain(v6);
          }
          (*(void (**)(unsigned char *__return_ptr, uint64_t, CFArrayRef *))(*(void *)v8 + 224))(v24, v8, &v21);
          *(void *)long long buf = theDict;
          CFDictionaryRef theDict = *(CFDictionaryRef *)v24;
          *(void *)xpc_object_t v24 = 0;
          sub_100057D78((const void **)buf);
          sub_100057D78((const void **)v24);
          sub_100044D00((const void **)&v21);
          if (theDict) {
            xpc_object_t v9 = sub_100080778;
          }
          else {
            xpc_object_t v9 = 0;
          }
          if (v9)
          {
            Value = CFDictionaryGetValue(theDict, @"UserAssignedDeviceName");
            if (Value)
            {
              CFTypeID v11 = CFGetTypeID(Value);
              if (v11 == CFStringGetTypeID())
              {
                memset(buf, 0, sizeof(buf));
                ctu::cf::assign();
                uint64_t v12 = *(void *)buf;
                *(void *)xpc_object_t v24 = *(void *)&buf[8];
                *(void *)&v24[7] = *(void *)&buf[15];
                uint8_t v13 = buf[23];
                uint64_t v14 = v5[671];
                if (*(char *)(v14 + 23) < 0) {
                  operator delete(*(void **)v14);
                }
                *(void *)uint64_t v14 = v12;
                *(void *)(v14 + 8) = *(void *)v24;
                *(void *)(v14 + 15) = *(void *)&v24[7];
                *(unsigned char *)(v14 + 23) = v13;
                uint64_t v15 = v5[5];
                if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v16 = (uint64_t **)v5[671];
                  if (*((char *)v16 + 23) < 0) {
                    uint64_t v16 = (uint64_t **)*v16;
                  }
                  *(_DWORD *)long long buf = 136315138;
                  *(void *)&uint8_t buf[4] = v16;
                  _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I User assigned device name changed to [%s]", buf, 0xCu);
                }
                uint64_t v17 = v5[58];
                if (v17)
                {
                  uint64_t v18 = v5[672];
                  *(void *)long long buf = v5[671];
                  *(void *)&uint8_t buf[8] = v18;
                  if (v18) {
                    atomic_fetch_add_explicit((atomic_ullong *volatile)(v18 + 8), 1uLL, memory_order_relaxed);
                  }
                  (*(void (**)(uint64_t, uint8_t *))(*(void *)v17 + 56))(v17, buf);
                  if (*(void *)&buf[8]) {
                    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
                  }
                }
              }
            }
          }
          else
          {
            long long v20 = v5[5];
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "gestalt query failed to get answers for DeviceName", buf, 2u);
            }
          }
          sub_100057D78((const void **)&theDict);
        }
        else
        {
          long long v19 = v5[5];
          if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
          {
            *(_WORD *)long long buf = 0;
            _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "gestalt query failed to create questions of DeviceName", buf, 2u);
          }
        }
        sub_100044D00((const void **)&v23);
      }
      sub_10004D2C8(v4);
    }
  }
}

void sub_10031C2BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, std::__shared_weak_count *a16, int a17, __int16 a18, char a19, char a20)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  sub_100057D78(&a10);
  sub_100044D00(&a11);
  sub_10004D2C8(v20);
  _Unwind_Resume(a1);
}

uint64_t sub_10031C334(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031C374()
{
}

void sub_10031C384()
{
}

void *sub_10031C398(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8598;
  result[1] = v3;
  return result;
}

uint64_t sub_10031C3E0(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8598;
  a2[1] = v2;
  return result;
}

void sub_10031C40C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void **)a2;
  uint64_t v2 = *(void **)(a2 + 8);
  *(_DWORD *)uint64_t v7 = *(_DWORD *)(a2 + 16);
  *(_DWORD *)&void v7[3] = *(_DWORD *)(a2 + 19);
  int v4 = *(char *)(a2 + 23);
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v5 = *(void *)(a1 + 8);
  if (v4 < 0)
  {
    sub_10004FC84(__p, v3, (unint64_t)v2);
  }
  else
  {
    __p[0] = v3;
    __p[1] = v2;
    *(_DWORD *)xpc_object_t v9 = *(_DWORD *)v7;
    *(_DWORD *)&void v9[3] = *(_DWORD *)&v7[3];
    char v10 = v4;
  }
  CFArrayRef v6 = *(std::__shared_weak_count **)(v5 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_10031C58C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031C5A8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031C5E8()
{
}

uint64_t *sub_10031C5F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  std::string::operator=((std::string *)(*(void *)v1 + 592), (const std::string *)(v1 + 8));
  sub_1001102C4(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_10031C63C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_10031C65C()
{
}

void *sub_10031C670(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8618;
  result[1] = v3;
  return result;
}

uint64_t sub_10031C6B8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8618;
  a2[1] = v2;
  return result;
}

void sub_10031C6E4(uint64_t a1, void *a2)
{
  a2[1] = 0;
  a2[2] = 0;
  *a2 = 0;
  uint64_t v2 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v2)
  {
    if (std::__shared_weak_count::lock(v2)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10031C820(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031C860()
{
}

uint64_t *sub_10031C86C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  sub_1003078F0(*v1, v1 + 1);
  sub_10031C8CC((uint64_t *)&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_10031C8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10031C8CC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030AFC8(&v2);
    operator delete();
  }
  return result;
}

void *sub_10031C92C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10031C9B4()
{
}

void *sub_10031C9C8(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B86A8;
  result[1] = v3;
  return result;
}

uint64_t sub_10031CA10(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B86A8;
  a2[1] = v2;
  return result;
}

void sub_10031CA3C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10031CB2C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031CB6C()
{
}

void sub_10031CB78(uint64_t a1)
{
  uint64_t v1 = a1;
  *(_DWORD *)(**(void **)a1 + 1708) = *(_DWORD *)(*(void *)a1 + 8);
  operator delete();
}

void *sub_10031CBC4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10031CC4C()
{
}

void *sub_10031CC60(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B8738;
  result[1] = v3;
  return result;
}

uint64_t sub_10031CCA8(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B8738;
  a2[1] = v2;
  return result;
}

void sub_10031CCD4(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10031CDC0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031CE00()
{
}

void sub_10031CE0C(uint64_t a1)
{
  uint64_t v1 = a1;
  *(void *)(**(void **)a1 + 1712) = *(void *)(*(void *)a1 + 8);
  operator delete();
}

void *sub_10031CE54(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_10031CEDC()
{
}

void *sub_10031CEF0(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B87C8;
  result[1] = v3;
  return result;
}

uint64_t sub_10031CF38(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B87C8;
  a2[1] = v2;
  return result;
}

void sub_10031CF64(uint64_t a1, unsigned __int8 *a2)
{
  unsigned __int8 v25 = *a2;
  int v2 = v25;
  uint64_t v3 = *(void *)(a1 + 8);
  if (*(unsigned __int8 *)(v3 + 1784) == v25) {
    return;
  }
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = printers::asString((printers *)(v3 + 1784), v5);
    uint64_t v8 = printers::asString((printers *)&v25, v7);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v6;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I iCloud Signed changed from %s to %s", buf, 0x16u);
    int v2 = v25;
  }
  *(unsigned char *)(v3 + 1784) = v2;
  uint64_t v9 = *(void *)(v3 + 464);
  if (v9) {
    (*(void (**)(uint64_t, BOOL))(*(void *)v9 + 112))(v9, v2 != 0);
  }
  (***(void (****)(uint8_t *__return_ptr))(v3 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  CFTypeID v11 = ServiceMap;
  uint64_t v12 = "30AKRemoteDeviceServiceInterface";
  if (((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x8000000000000000) != 0)
  {
    uint8_t v13 = (unsigned __int8 *)((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = (const char *)v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v12;
  uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)__p);
  if (!v16)
  {
    uint64_t v18 = 0;
    goto LABEL_13;
  }
  uint64_t v18 = v16[3];
  uint64_t v17 = (std::__shared_weak_count *)v16[4];
  if (!v17)
  {
LABEL_13:
    std::mutex::unlock(v11);
    uint64_t v17 = 0;
    char v19 = 1;
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v11);
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v17);
  char v19 = 0;
LABEL_14:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v18) {
    (*(void (**)(uint64_t, void))(*(void *)v18 + 16))(v18, *(unsigned __int8 *)(v3 + 1784));
  }
  if (v25)
  {
    sub_1002DCC0C(v3, 0);
  }
  else
  {
    uint64_t v20 = *(void *)(v3 + 288);
    xpc_object_t v24 = 0;
    (*(void (**)(uint64_t, const void **))(*(void *)v20 + 264))(v20, &v24);
    sub_100044D00(&v24);
    uint64_t v21 = *(void *)(v3 + 288);
    memset(buf, 0, sizeof(buf));
    sub_100058DB0(__p, "");
    (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v21 + 88))(v21, buf, __p);
    if (v23 < 0) {
      operator delete(__p[0]);
    }
    if (*(void *)buf)
    {
      *(void *)&uint8_t buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    (*(void (**)(void, double))(**(void **)(v3 + 288) + 296))(*(void *)(v3 + 288), 0.0);
  }
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
}

void sub_10031D290(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a18) {
    operator delete(a18);
  }
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10031D310(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031D350()
{
}

void *sub_10031D35C(void *a1)
{
  *a1 = off_1019B8848;
  int v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10031D3A8(void *a1)
{
  *a1 = off_1019B8848;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10031D414(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B8848;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10031D478(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B8848;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10031D4B8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10031D4C8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10031D508(void *a1, __int16 *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    __int16 v4 = *a2;
    uint64_t v5 = a1[1];
    uint64_t v6 = std::__shared_weak_count::lock(v3);
    if (v6)
    {
      uint64_t v7 = v6;
      if (a1[2])
      {
        uint64_t v8 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          v9[0] = 67109378;
          v9[1] = v4 & 1;
          __int16 v10 = 2080;
          uint64_t v11 = asString();
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Cellular plan regulatory restriction active : %{BOOL}d reason_code:%s", (uint8_t *)v9, 0x12u);
        }
      }
      sub_10004D2C8(v7);
    }
  }
}

void sub_10031D5F0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031D604(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031D644()
{
}

void *sub_10031D650(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10031D6D4(void *a1)
{
  *a1 = off_1019B88D8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10031D720(void *a1)
{
  *a1 = off_1019B88D8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10031D78C(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B88D8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10031D7F0(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B88D8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10031D830(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10031D840(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10031D880(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  *a2 = xpc_null_create();
  uint64_t v4 = a1[1];
  uint64_t v5 = *(NSObject **)(v4 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Received kDMMigrationDidFinishNotification", buf, 2u);
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      uint64_t v8 = v7;
      if (!a1[2])
      {
LABEL_26:
        sub_10004D2C8(v8);
        goto LABEL_27;
      }
      (***(void (****)(uint8_t *__return_ptr))(v4 + 320))(buf);
      ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
      __int16 v10 = ServiceMap;
      if ((v11 & 0x8000000000000000) != 0)
      {
        uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v13 = 5381;
        do
        {
          unint64_t v11 = v13;
          unsigned int v14 = *v12++;
          uint64_t v13 = (33 * v13) ^ v14;
        }
        while (v14);
      }
      std::mutex::lock(ServiceMap);
      unint64_t v21 = v11;
      unsigned int v15 = sub_10004D37C(&v10[1].__m_.__sig, &v21);
      if (v15)
      {
        uint64_t v17 = v15[3];
        uint64_t v16 = (std::__shared_weak_count *)v15[4];
        if (v16)
        {
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v10);
          atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v16);
          char v18 = 0;
LABEL_14:
          int v19 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 24))(v17);
          if ((v18 & 1) == 0) {
            sub_10004D2C8(v16);
          }
          if (v23) {
            sub_10004D2C8(v23);
          }
          if (v19)
          {
            char v20 = *(NSObject **)(v4 + 40);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I handling kDMMigrationDidFinishNotification", buf, 2u);
            }
            if (*(unsigned char *)(v4 + 2289) == 1
              || (*(unsigned int (**)(void))(**(void **)(v4 + 304) + 296))(*(void *)(v4 + 304)))
            {
              *(void *)long long buf = 0;
              char v23 = 0;
              char v24 = 0;
              (*(void (**)(uint8_t *__return_ptr))(**(void **)(v4 + 304) + 352))(buf);
              if (v24) {
                sub_1002DB61C(v4);
              }
            }
            else
            {
              *(unsigned char *)(v4 + 5265) = 1;
            }
          }
          goto LABEL_26;
        }
      }
      else
      {
        uint64_t v17 = 0;
      }
      std::mutex::unlock(v10);
      uint64_t v16 = 0;
      char v18 = 1;
      goto LABEL_14;
    }
  }
LABEL_27:
  xpc_release(v3);
}

void sub_10031DB50(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_10004D2C8(v13);
  xpc_release(v12);
  _Unwind_Resume(a1);
}

uint64_t sub_10031DBB4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_10031DBF4()
{
}

void sub_10031DC00(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B8958;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_10031DC20(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B8958;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_10031DC74(uint64_t a1)
{
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*(void **)(a1 + 192));
  }
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*(void **)(a1 + 168));
  }
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*(void **)(a1 + 144));
  }
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 24);
    operator delete(v2);
  }
}

uint64_t sub_10031DD30(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_10031DDB0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10031DE48(void *a1)
{
  *a1 = off_1019B89A8;
  sub_10023D374(a1 + 2);
  return a1;
}

void sub_10031DE8C(void *a1)
{
  *a1 = off_1019B89A8;
  sub_10023D374(a1 + 2);

  operator delete();
}

void *sub_10031DEF0(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B89A8;
  v2[1] = v3;
  sub_10031DDB0((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_10031DF48(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031DF5C(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019B89A8;
  a2[1] = v2;
  return sub_10031DDB0((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_10031DF8C(uint64_t a1)
{
  return sub_10023D374((void *)(a1 + 16));
}

void sub_10031DF94(void *a1)
{
  sub_10023D374(a1 + 2);

  operator delete(a1);
}

void *sub_10031DFD0(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v4 = *(void **)(a1 + 8);
  if (*a2)
  {
    uint64_t v5 = v4[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v7[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "could not bootstrap target transfer flow controller", (uint8_t *)v7, 2u);
    }
    return (void *)sub_1002EB2F8(a1 + 16, 0, v3);
  }
  else
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1174405120;
    xpc_object_t v7[2] = sub_10031E14C;
    void v7[3] = &unk_1019B8A08;
    v7[4] = v4;
    sub_10031DDB0((uint64_t)v8, a1 + 16);
    char v9 = 0;
    sub_1002DFBC0(v4, 0, (uint64_t)v7);
    return sub_10023D374(v8);
  }
}

uint64_t sub_10031E100(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031E140()
{
}

uint64_t sub_10031E14C(uint64_t a1, const void **a2, int a3)
{
  uint64_t v4 = (os_log_t *)(*(void *)(a1 + 32) + 40);
  if (a3)
  {
    uint64_t v5 = *v4;
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "could not get transfer plan list", buf, 2u);
    }
    uint64_t v6 = a1 + 40;
    char v7 = *(unsigned char *)(a1 + 72);
    char v8 = 0;
  }
  else
  {
    sub_100062740(&v14, a2);
    char v10 = sub_100CDBDD4(v4, &v14, 1);
    sub_100044D00(&v14);
    sub_100062740(&v13, a2);
    char v11 = sub_100CDBDD4(v4, &v13, 0);
    sub_100044D00(&v13);
    uint64_t v6 = a1 + 40;
    char v8 = v11 & (v10 ^ 1);
    char v7 = 0;
  }
  return sub_1002EB2F8(v6, v8, v7);
}

void sub_10031E23C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void *sub_10031E25C(void *a1)
{
  *a1 = off_1019B8A58;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_10031E2A0(void *a1)
{
  *a1 = off_1019B8A58;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_10031E304(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B8A58;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10031E358(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031E36C(uint64_t a1, void *a2)
{
  *a2 = off_1019B8A58;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10031E398(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_10031E3A0(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10031E3DC(uint64_t a1, unsigned char *a2, unsigned char *a3)
{
  uint64_t v3 = a1 + 8;
  if (*a2) {
    BOOL v4 = *a3 == 0;
  }
  else {
    BOOL v4 = 0;
  }
  char v5 = v4;
  return sub_1000607A8(v3, v5);
}

uint64_t sub_10031E3F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031E438()
{
}

BOOL sub_10031E444(uint64_t a1)
{
  return *(unsigned char *)(**(void **)(a1 + 40) + 2592) == 1;
}

uint64_t *sub_10031E45C(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  uint64_t v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  char v7 = *v6;
  if (!*v6)
  {
    char v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_10031E514((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    char v7 = v10[0];
    v10[0] = 0;
    sub_10031E5B4((uint64_t)v10, 0);
  }
  return v7;
}

unsigned char *sub_10031E514@<X0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  __n128 result = v6 + 4;
  char v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    void v6[6] = *((void *)v8 + 2);
    *(_OWORD *)__n128 result = v9;
  }
  unsigned char v6[8] = 0;
  v6[9] = 0;
  v6[7] = v6 + 8;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10031E59C(_Unwind_Exception *a1)
{
  sub_10031E5B4(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10031E5B4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100313590((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_10031E60C(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(void **)(a1 + 40);
  uint64_t v4 = *v3;
  uint64_t v5 = *(void **)(*v3 + 2872);
  uint64_t v6 = *v3 + 2880;
  if (v5 == (void *)v6)
  {
LABEL_29:
    *a2 = 0;
    return;
  }
  uint64_t v7 = *(void *)(v4 + 2464);
  uint64_t v8 = *(void *)(v4 + 2472);
  while (v7 == v8)
  {
LABEL_23:
    char v18 = (void *)v5[1];
    if (v18)
    {
      do
      {
        int v19 = v18;
        char v18 = (void *)*v18;
      }
      while (v18);
    }
    else
    {
      do
      {
        int v19 = (void *)v5[2];
        BOOL v20 = *v19 == (void)v5;
        uint64_t v5 = v19;
      }
      while (!v20);
    }
    uint64_t v5 = v19;
    if (v19 == (void *)v6) {
      goto LABEL_29;
    }
  }
  int v9 = *((_DWORD *)v5 + 8);
  uint64_t v10 = v7;
  while (1)
  {
    if (*(_DWORD *)v10 != v9) {
      goto LABEL_22;
    }
    uint64_t v11 = v3[1];
    uint64_t v12 = *(unsigned __int8 *)(v10 + 95);
    if ((v12 & 0x80u) == 0) {
      uint64_t v13 = *(unsigned __int8 *)(v10 + 95);
    }
    else {
      uint64_t v13 = *(void *)(v10 + 80);
    }
    uint64_t v14 = *(unsigned __int8 *)(v11 + 23);
    int v15 = (char)v14;
    if ((v14 & 0x80u) != 0) {
      uint64_t v14 = *(void *)(v11 + 8);
    }
    if (v13 != v14) {
      goto LABEL_22;
    }
    uint64_t v16 = v15 >= 0 ? (unsigned __int8 *)v3[1] : *(unsigned __int8 **)v11;
    if ((v12 & 0x80) != 0) {
      break;
    }
    if (!*(unsigned char *)(v10 + 95)) {
      goto LABEL_30;
    }
    uint64_t v17 = 0;
    while (*(unsigned __int8 *)(v10 + v17 + 72) == v16[v17])
    {
      if (v12 == ++v17) {
        goto LABEL_30;
      }
    }
LABEL_22:
    v10 += 168;
    if (v10 == v8) {
      goto LABEL_23;
    }
  }
  if (memcmp(*(const void **)(v10 + 72), v16, *(void *)(v10 + 80))) {
    goto LABEL_22;
  }
LABEL_30:
  if (*((char *)v5 + 175) < 0)
  {
    sub_10004FC84(v22, (void *)v5[19], v5[20]);
  }
  else
  {
    *(_OWORD *)xpc_object_t v22 = *(_OWORD *)(v5 + 19);
    uint64_t v23 = v5[21];
  }
  if (SHIBYTE(v23) < 0)
  {
    sub_10004FC84(__dst, v22[0], (unint64_t)v22[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v22;
    uint64_t v26 = v23;
  }
  char v24 = 0;
  if (SHIBYTE(v26) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)__dst;
    uint64_t v28 = v26;
  }
  uint64_t v29 = 0;
  if (ctu::cf::convert_copy())
  {
    unint64_t v21 = v24;
    char v24 = v29;
    xpc_object_t v30 = v21;
    sub_1000558F4(&v30);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(__p[0]);
  }
  *a2 = v24;
  char v24 = 0;
  sub_1000558F4(&v24);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  if (SHIBYTE(v23) < 0) {
    operator delete(v22[0]);
  }
}

void sub_10031E860(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, const void *a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

const void **sub_10031E8B4(uint64_t a1)
{
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(const void ***)(a1 + 32);
  if (v2 != &v5)
  {
    uint64_t v3 = *v2;
    void *v2 = 0;
    uint64_t v6 = v3;
    void *v2 = v5;
    uint64_t v5 = 0;
    sub_1000558F4(&v6);
  }
  return sub_1000558F4(&v5);
}

const void **sub_10031E92C(uint64_t a1)
{
  (*(void (**)(const void **__return_ptr))(**(void **)(a1 + 40) + 16))(&v5);
  uint64_t v2 = *(const void ***)(a1 + 32);
  if (v2 != &v5)
  {
    uint64_t v3 = *v2;
    void *v2 = 0;
    uint64_t v6 = v3;
    void *v2 = v5;
    uint64_t v5 = 0;
    sub_1000558F4(&v6);
  }
  return sub_1000558F4(&v5);
}

uint64_t *sub_10031E9A4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *v1;
  long long v8 = 0u;
  long long v9 = 0u;
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 232))(&v8);
  int v3 = v8;
  if (*(_DWORD *)(v2 + 2632) == 1 && v8 != 0)
  {
    *(_WORD *)(v2 + 1560) = 0;
    *(unsigned char *)(v2 + 1562) = 0;
  }
  sub_1000607A8((uint64_t)(v1 + 1), v3 != 0);
  sub_1000886C0((uint64_t)&v8 + 8, (char *)v9);
  sub_10031EA88((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10031EA54(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char *a13)
{
}

uint64_t *sub_10031EA88(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10031EAD8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_10031EAE8(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10031EB04(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t sub_10031EB14(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(**(void **)(a1 + 40) + 320) + 32))();
}

__n128 sub_10031EB44(unsigned __int8 *a1, uint64_t a2)
{
  int v3 = *a1;
  a1[8] = *(unsigned char *)a2;
  uint64_t v4 = a1 + 16;
  if (v3)
  {
    if ((char)a1[39] < 0) {
      operator delete(*(void **)v4);
    }
    __n128 result = *(__n128 *)(a2 + 8);
    *((void *)v4 + 2) = *(void *)(a2 + 24);
    *(__n128 *)uint64_t v4 = result;
    *(unsigned char *)(a2 + 31) = 0;
    *(unsigned char *)(a2 + 8) = 0;
  }
  else
  {
    __n128 result = *(__n128 *)(a2 + 8);
    *((void *)a1 + 4) = *(void *)(a2 + 24);
    *(__n128 *)uint64_t v4 = result;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 24) = 0;
    *(void *)(a2 + 8) = 0;
    *a1 = 1;
  }
  return result;
}

uint64_t *sub_10031EBC4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *v1;
  v8[0] = 0;
  v8[128] = 0;
  int v3 = sub_1002DDF00(v2, (uint64_t)v8);
  uint64_t v4 = v1[4];
  int v10 = v3;
  char v9 = 0;
  if (!v4) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, int *, char *))(*(void *)v4 + 48))(v4, &v10, &v9);
  sub_10010B788((uint64_t)v8);
  sub_10031EC88((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10031EC64(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11)
{
}

uint64_t *sub_10031EC88(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030B420((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10031ECD8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_10031ED70(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 336);
  memset(v8, 0, sizeof(v8));
  sub_10030B4A4(v8, v1[1], v1[2], (v1[2] - v1[1]) >> 7);
  sub_1000DFC90((uint64_t)v10, (uint64_t)(v1 + 10));
  uint64_t v11 = v2;
  uint64_t v13 = 0;
  uint64_t v4 = operator new(0x30uLL);
  *uint64_t v4 = off_1019B8BF0;
  sub_100023950((uint64_t)(v4 + 1), (uint64_t)v10);
  void v4[5] = v11;
  uint64_t v13 = v4;
  (*(void (**)(uint64_t, void *, uint64_t *, uint64_t *, void *))(*(void *)v3 + 112))(v3, v8, v1 + 4, v1 + 7, v12);
  sub_10030DD28(v12);
  sub_100060644(v10);
  char v9 = (void **)v8;
  sub_10030B640(&v9);
  sub_10031EF08((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10031EEB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, char a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15)
{
  sub_10030DD28((void *)(v15 - 72));
  sub_100060644(&a15);
  a14 = (void **)&a11;
  sub_10030B640(&a14);
  sub_10031EF08(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10031EF08(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 80));
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030B640(&v2);
    operator delete();
  }
  return result;
}

void *sub_10031EF90(void *a1)
{
  *a1 = off_1019B8BF0;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_10031EFD4(void *a1)
{
  *a1 = off_1019B8BF0;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_10031F038(uint64_t a1)
{
  uint64_t v2 = a1 + 8;
  uint64_t v3 = operator new(0x30uLL);
  void *v3 = off_1019B8BF0;
  sub_1000DFC90((uint64_t)(v3 + 1), v2);
  void v3[5] = *(void *)(a1 + 40);
  return v3;
}

void sub_10031F0A0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031F0B4(uint64_t a1, void *a2)
{
  *a2 = off_1019B8BF0;
  uint64_t result = sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
  a2[5] = *(void *)(a1 + 40);
  return result;
}

void *sub_10031F108(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_10031F110(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

void sub_10031F14C(uint64_t a1, void *a2)
{
  uint64_t v3 = (char **)*a2;
  uint64_t v4 = a2 + 1;
  uint64_t v5 = a2[1];
  uint64_t v15 = (char **)*a2;
  uint64_t v16 = (char *)v5;
  if (a2[2])
  {
    *(void *)(v5 + 16) = &v16;
    *a2 = v4;
    *uint64_t v4 = 0;
    a2[2] = 0;
    uint64_t v6 = *(void *)(a1 + 40);
    if (v3 == &v16)
    {
      BOOL v8 = 0;
    }
    else
    {
      do
      {
        if (*((char *)v3 + 55) < 0)
        {
          sub_10004FC84(__p, v3[4], (unint64_t)v3[5]);
        }
        else
        {
          *(_OWORD *)long long __p = *((_OWORD *)v3 + 2);
          int v19 = v3[6];
        }
        int v7 = *((unsigned __int8 *)v3 + 56);
        BOOL v8 = *((unsigned char *)v3 + 56) == 0;
        char v20 = *((unsigned char *)v3 + 56);
        if (SHIBYTE(v19) < 0) {
          operator delete(__p[0]);
        }
        if (!v7) {
          break;
        }
        char v9 = v3[1];
        if (v9)
        {
          do
          {
            int v10 = (char **)v9;
            char v9 = *(char **)v9;
          }
          while (v9);
        }
        else
        {
          do
          {
            int v10 = (char **)v3[2];
            BOOL v11 = *v10 == (char *)v3;
            uint64_t v3 = v10;
          }
          while (!v11);
        }
        uint64_t v3 = v10;
      }
      while (v10 != &v16);
    }
  }
  else
  {
    BOOL v8 = 0;
    uint64_t v15 = &v16;
    uint64_t v6 = *(void *)(a1 + 40);
  }
  uint64_t v12 = a1 + 8;
  uint64_t v13 = *(NSObject **)(v6 + 40);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v14 = "Allow";
    if (v8) {
      uint64_t v14 = "Deny";
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = (void *)v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I checkPreFlightEligibility: %s", (uint8_t *)__p, 0xCu);
  }
  sub_1000607A8(v12, !v8);
  sub_10005CD2C((uint64_t)&v15, v16);
}

void sub_10031F308(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_10031F324(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031F364()
{
}

uint64_t *sub_10031F370(uint64_t **a1)
{
  uint64_t v1 = *a1;
  BOOL v8 = a1;
  char v9 = v1;
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + 1508))
  {
    uint64_t v3 = sub_1002D4620(*v1, (os_log_t *)(v2 + 40), *(_DWORD *)(v2 + 1504));
    if (*(unsigned char *)(v2 + 1508)) {
      *(unsigned char *)(v2 + 1508) = 0;
    }
  }
  else
  {
    uint64_t v3 = 0;
  }
  (*(void (**)(const void **__return_ptr))(**(void **)(v2 + 304) + 240))(&v10);
  uint64_t v4 = v1[1];
  uint64_t v5 = v10;
  int v10 = 0;
  BOOL v11 = v5;
  (*(void (**)(uint64_t, const void **, uint64_t, uint64_t))(v4 + 16))(v4, &v11, v3, v6);
  sub_100044D00(&v11);
  sub_100044D00(&v10);
  sub_10031F478((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_10031F444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12)
{
}

uint64_t *sub_10031F478(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 8);
    if (v2) {
      _Block_release(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10031F4D0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_10031F568(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  BOOL v11 = a1;
  uint64_t v12 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (unsigned char *)(*(void *)v1 + 4600);
  if (*(unsigned char *)(*(void *)v1 + 5264))
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I getCarrierItems: Fetch in progress, delaying", buf, 2u);
    }
    sub_10031F89C((void *)(v2 + 5200), (uint64_t)(v1 + 16));
  }
  else
  {
    v16[0] = 0;
    v16[1] = 0;
    char v17 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v16);
    if (v17)
    {
      if ((*(uint64_t (**)(void))(**(void **)(v2 + 320) + 40))(*(void *)(v2 + 320)))
      {
        if (!v3[1] || !*v3)
        {
          uint64_t v7 = *(void *)(v2 + 336);
          int v8 = v1[8];
          unsigned int v9 = LOBYTE(v16[0]) - 89;
          sub_10031F4D0((uint64_t)v13, (uint64_t)(v1 + 16));
          uint64_t v15 = 0;
          int v10 = operator new(0x28uLL);
          void *v10 = off_1019B8C70;
          sub_100349184((uint64_t)(v10 + 1), (uint64_t)v13);
          uint64_t v15 = v10;
          (*(void (**)(uint64_t, BOOL, void, uint8_t *))(*(void *)v7 + 32))(v7, v8 != 0, (v9 < 9) & (0x181u >> v9), buf);
          sub_100313790(buf);
          sub_100313790(v13);
          goto LABEL_13;
        }
        *(void *)long long buf = 0;
        char v5 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
        sub_10031F910((uint64_t)(v1 + 16), (uint64_t)buf, v5);
      }
      else
      {
        *(void *)long long buf = 0;
        sub_10031F910((uint64_t)(v1 + 16), (uint64_t)buf, 0);
      }
    }
    else
    {
      *(void *)long long buf = 0;
      sub_10031F910((uint64_t)(v1 + 16), (uint64_t)buf, 16);
    }
    sub_100044D00((const void **)buf);
  }
LABEL_13:
  sub_10031F84C((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_10031F7F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
}

uint64_t *sub_10031F84C(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313790((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

void *sub_10031F89C(void *a1, uint64_t a2)
{
  sub_10031F4D0((uint64_t)v4, a2);
  sub_10031F964(v4, a1);
  sub_100313790(v4);
  return a1;
}

uint64_t sub_10031F910(uint64_t a1, uint64_t a2, char a3)
{
  char v5 = a3;
  uint64_t v3 = *(void *)(a1 + 24);
  if (!v3) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)v3 + 48))(v3, a2, &v5);
}

void *sub_10031F964(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10031FBCC(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void *sub_10031FBD8(void *a1)
{
  *a1 = off_1019B8C70;
  sub_100313790(a1 + 1);
  return a1;
}

void sub_10031FC1C(void *a1)
{
  *a1 = off_1019B8C70;
  sub_100313790(a1 + 1);

  operator delete();
}

void *sub_10031FC80(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B8C70;
  sub_10031F4D0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10031FCD4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10031FCE8(uint64_t a1, void *a2)
{
  *a2 = off_1019B8C70;
  return sub_10031F4D0((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10031FD14(uint64_t a1)
{
  return sub_100313790((void *)(a1 + 8));
}

void sub_10031FD1C(void *a1)
{
  sub_100313790(a1 + 1);

  operator delete(a1);
}

const void **sub_10031FD58(uint64_t a1, const void **a2, char *a3)
{
  uint64_t v4 = *a2;
  uint64_t v7 = v4;
  int v8 = v4;
  *a2 = 0;
  char v5 = *a3;
  if (v4) {
    CFRetain(v4);
  }
  sub_10031F910(a1 + 8, (uint64_t)&v8, v5);
  sub_100044D00(&v8);
  return sub_100044D00(&v7);
}

void sub_10031FDBC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10031FDD8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10031FE18()
{
}

uint64_t sub_10031FE24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_10031FEA4(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v40 = a1;
  long long v41 = v1;
  uint64_t v2 = (void *)*v1;
  (***(void (****)(void **__return_ptr))(*v1 + 320))(__p);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)__p[0]);
  uint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  long long v51 = (char **)v5;
  unsigned int v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&v51);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_9:
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  if (v11)
  {
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    uint64_t v47 = 0;
    sub_1002DCA80(&v45, v2[52]);
    int v42 = 0;
    long long v43 = 0;
    unint64_t v44 = 0;
    uint64_t v13 = v45;
    uint64_t v14 = v46;
    while (v13 != v14)
    {
      if (*(unsigned char *)(v13 + 4))
      {
        if (*(char *)(v13 + 455) < 0)
        {
          sub_10004FC84(__p, *(void **)(v13 + 432), *(void *)(v13 + 440));
        }
        else
        {
          long long v15 = *(_OWORD *)(v13 + 432);
          uint64_t v50 = *(void *)(v13 + 448);
          *(_OWORD *)long long __p = v15;
        }
        uint64_t v16 = v43;
        if ((unint64_t)v43 >= v44)
        {
          char v18 = (unsigned char *)sub_100320610((uint64_t *)&v42, (long long *)__p);
        }
        else
        {
          if (SHIBYTE(v50) < 0)
          {
            sub_10004FC84(v43, __p[0], (unint64_t)__p[1]);
          }
          else
          {
            long long v17 = *(_OWORD *)__p;
            *((void *)v43 + 2) = v50;
            *uint64_t v16 = v17;
          }
          char v18 = (char *)v16 + 24;
        }
        long long v43 = v18;
        if (SHIBYTE(v50) < 0) {
          operator delete(__p[0]);
        }
      }
      v13 += 1248;
    }
    uint64_t v19 = v2[308];
    uint64_t v20 = v2[309];
    while (1)
    {
      if (v19 == v20)
      {
        uint64_t v27 = v2[321];
        uint64_t v28 = v2[322];
        while (v27 != v28)
        {
          if (*(unsigned char *)(v27 + 80))
          {
            uint64_t v29 = *(void *)(v27 + 56);
            uint64_t v30 = *(void *)(v27 + 64);
            while (v29 != v30)
            {
              if (*(char *)(v29 + 39) < 0)
              {
                sub_10004FC84(__p, *(void **)(v29 + 16), *(void *)(v29 + 24));
              }
              else
              {
                long long v31 = *(_OWORD *)(v29 + 16);
                uint64_t v50 = *(void *)(v29 + 32);
                *(_OWORD *)long long __p = v31;
              }
              xpc_object_t v32 = v43;
              if ((unint64_t)v43 >= v44)
              {
                long long v34 = (unsigned char *)sub_100320610((uint64_t *)&v42, (long long *)__p);
              }
              else
              {
                if (SHIBYTE(v50) < 0)
                {
                  sub_10004FC84(v43, __p[0], (unint64_t)__p[1]);
                }
                else
                {
                  long long v33 = *(_OWORD *)__p;
                  *((void *)v43 + 2) = v50;
                  _OWORD *v32 = v33;
                }
                long long v34 = (char *)v32 + 24;
              }
              long long v43 = v34;
              if (SHIBYTE(v50) < 0) {
                operator delete(__p[0]);
              }
              v29 += 216;
            }
          }
          v27 += 88;
        }
        __p[0] = v2;
        sub_1003208B8((uint64_t)&__p[1], (uint64_t)(v1 + 1));
        long long v53 = 0;
        uint64_t v35 = operator new(0x30uLL);
        __int16 v36 = __p[0];
        void *v35 = off_1019B8D00;
        v35[1] = v36;
        sub_10031FE24((uint64_t)(v35 + 2), (uint64_t)&__p[1]);
        long long v53 = v35;
        (*(void (**)(uint64_t, void ***, char ***))(*(void *)v11 + 240))(v11, &v42, &v51);
        sub_100320E60(&v51);
        sub_10030B6C4(&__p[1]);
        long long v48 = &v42;
        sub_100047F64((void ***)&v48);
        int v42 = (void **)&v45;
        sub_10030AFC8(&v42);
        if ((v12 & 1) == 0) {
          goto LABEL_62;
        }
        goto LABEL_63;
      }
      unint64_t v21 = (void **)(v19 + 72);
      if (*(char *)(v19 + 95) < 0)
      {
        unint64_t v23 = *(void *)(v19 + 80);
        if (!v23) {
          goto LABEL_42;
        }
        sub_10004FC84(__p, *v21, v23);
      }
      else
      {
        if (!*(unsigned char *)(v19 + 95)) {
          goto LABEL_42;
        }
        long long v22 = *(_OWORD *)v21;
        uint64_t v50 = *(void *)(v19 + 88);
        *(_OWORD *)long long __p = v22;
      }
      char v24 = v43;
      if ((unint64_t)v43 >= v44)
      {
        uint64_t v26 = (unsigned char *)sub_100320610((uint64_t *)&v42, (long long *)__p);
      }
      else
      {
        if (SHIBYTE(v50) < 0)
        {
          sub_10004FC84(v43, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          long long v25 = *(_OWORD *)__p;
          *((void *)v43 + 2) = v50;
          *char v24 = v25;
        }
        uint64_t v26 = (char *)v24 + 24;
      }
      long long v43 = v26;
      if (SHIBYTE(v50) < 0) {
        operator delete(__p[0]);
      }
LABEL_42:
      v19 += 168;
    }
  }
  uint64_t v38 = v2[5];
  if (os_log_type_enabled(v38, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_ERROR, "failed to get PersonalityShop", (uint8_t *)__p, 2u);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v50 = 0;
  v52[0] = 0;
  v52[1] = 0;
  long long v51 = v52;
  uint64_t v39 = v1[4];
  if (!v39) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **, char ***))(*(void *)v39 + 48))(v39, __p, &v51);
  sub_10005CD2C((uint64_t)&v51, v52[0]);
  long long v51 = (char **)__p;
  sub_100320504((void ***)&v51);
  if ((v12 & 1) == 0) {
LABEL_62:
  }
    sub_10004D2C8(v10);
LABEL_63:
  sub_1003204B4((uint64_t *)&v41);
  return sub_100046B58((uint64_t *)&v40);
}

void sub_1003203B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char *a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, uint64_t *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29)
{
  sub_100320E60(&a28);
  sub_10030B6C4(v30);
  a18 = (uint64_t *)&a12;
  sub_100047F64((void ***)&a18);
  a12 = &a15;
  sub_10030AFC8((void ***)&a12);
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v29);
  }
  sub_1003204B4(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003204B4(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030B6C4((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void sub_100320504(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 136;
        sub_100320588(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100320588(uint64_t a1)
{
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*(void **)(a1 + 104));
  }
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

uint64_t sub_100320610(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0xAAAAAAAAAAAAAAABLL * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xAAAAAAAAAAAAAAALL) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0xAAAAAAAAAAAAAAABLL * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x555555555555555) {
    unint64_t v9 = 0xAAAAAAAAAAAAAAALL;
  }
  else {
    unint64_t v9 = v5;
  }
  char v18 = a1 + 2;
  if (v9) {
    int v10 = (char *)sub_10004812C(v7, v9);
  }
  else {
    int v10 = 0;
  }
  uint64_t v11 = &v10[24 * v4];
  v15[0] = v10;
  v15[1] = v11;
  uint64_t v16 = v11;
  long long v17 = &v10[24 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v16;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v16 = v11 + 24;
  sub_100320734(a1, v15);
  uint64_t v13 = a1[1];
  sub_100048174((uint64_t)v15);
  return v13;
}

void sub_100320720(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100048174((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100320734(uint64_t *a1, void *a2)
{
  uint64_t result = sub_1003207AC((uint64_t)(a1 + 2), a1[1], (void **)a1[1], *a1, (void **)*a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_1003207AC(uint64_t a1, uint64_t a2, void **a3, uint64_t a4, void **a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v17 = a6;
  *((void *)&v17 + 1) = a7;
  long long v16 = v17;
  v14[0] = a1;
  v14[1] = &v16;
  v14[2] = &v17;
  uint64_t v15 = 0;
  if (a3 == a5)
  {
    uint64_t v12 = a6;
  }
  else
  {
    do
    {
      unint64_t v9 = (unsigned char *)(v7 - 24);
      int v10 = a3 - 3;
      if (*((char *)a3 - 1) < 0)
      {
        sub_10004FC84(v9, *(a3 - 3), (unint64_t)*(a3 - 2));
        uint64_t v7 = *((void *)&v17 + 1);
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        *(void *)(v7 - 8) = *(a3 - 1);
        *(_OWORD *)unint64_t v9 = v11;
      }
      v7 -= 24;
      *((void *)&v17 + 1) = v7;
      a3 = v10;
    }
    while (v10 != a5);
    uint64_t v12 = v17;
  }
  LOBYTE(v15) = 1;
  sub_100320880((uint64_t)v14);
  return v12;
}

void sub_10032086C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100320880(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_1000D8858(a1);
  }
  return a1;
}

uint64_t sub_1003208B8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100320950(void *a1)
{
  *a1 = off_1019B8D00;
  sub_10030B6C4(a1 + 2);
  return a1;
}

void sub_100320994(void *a1)
{
  *a1 = off_1019B8D00;
  sub_10030B6C4(a1 + 2);

  operator delete();
}

void *sub_1003209F8(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B8D00;
  v2[1] = v3;
  sub_1003208B8((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_100320A50(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100320A64(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019B8D00;
  a2[1] = v2;
  return sub_1003208B8((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_100320A94(uint64_t a1)
{
  return sub_10030B6C4((void *)(a1 + 16));
}

void sub_100320A9C(void *a1)
{
  sub_10030B6C4(a1 + 2);

  operator delete(a1);
}

void sub_100320AD8(uint64_t a1, uint64_t *a2)
{
  long long v22 = 0;
  unint64_t v23 = 0;
  char v24 = 0;
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v27 = &v22;
  if (v4 == v3)
  {
    uint64_t v12 = 0;
  }
  else
  {
    unint64_t v5 = 0xF0F0F0F0F0F0F0F1 * ((v4 - v3) >> 3);
    v28[0] = 0;
    if (v5 >= 0x1E1E1E1E1E1E1E2) {
      sub_10006A748();
    }
    uint64_t v6 = (char *)sub_100320E18((uint64_t)&v24, v5);
    uint64_t v7 = 0;
    long long v22 = v6;
    unint64_t v23 = v6;
    char v24 = &v6[136 * v8];
    do
    {
      uint64_t v9 = sub_10023C008((uint64_t)&v6[v7], v3 + v7) + 104;
      int v10 = (void **)(v3 + v7 + 104);
      if (*(char *)(v3 + v7 + 127) < 0)
      {
        sub_10004FC84((unsigned char *)v9, *v10, *(void *)(v3 + v7 + 112));
      }
      else
      {
        long long v11 = *(_OWORD *)v10;
        *(void *)(v9 + 16) = *(void *)(v3 + v7 + 120);
        *(_OWORD *)uint64_t v9 = v11;
      }
      *(void *)&v6[v7 + 128] = *(void *)(v3 + v7 + 128);
      v7 += 136;
    }
    while (v3 + v7 != v4);
    uint64_t v12 = &v6[v7];
    unint64_t v23 = v12;
  }
  uint64_t v13 = *(void *)(a1 + 8);
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v27 = v28;
  uint64_t v14 = *(void *)(v13 + 528);
  if (v14)
  {
    if (v22 != v12)
    {
      uint64_t v15 = v22 + 104;
      do
      {
        uint64_t v16 = v15[23];
        BOOL v17 = (v16 & 0x80u) != 0;
        if ((v16 & 0x80u) != 0) {
          uint64_t v16 = *((void *)v15 + 1);
        }
        if (v17) {
          char v18 = *(char **)v15;
        }
        else {
          char v18 = v15;
        }
        if (v16) {
          uint64_t v19 = v18;
        }
        else {
          uint64_t v19 = "<invalid>";
        }
        sub_100058DB0(__p, v19);
        sub_1000EA6A0((uint64_t **)&v27, __p, (uint64_t)__p);
        if (v26 < 0) {
          operator delete(__p[0]);
        }
        uint64_t v20 = v15 + 32;
        v15 += 136;
      }
      while (v20 != v12);
      uint64_t v14 = *(void *)(v13 + 528);
    }
    (*(void (**)(uint64_t, char ***))(*(void *)v14 + 184))(v14, &v27);
  }
  uint64_t v21 = *(void *)(a1 + 40);
  if (!v21) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, char **, char ***))(*(void *)v21 + 48))(v21, &v22, &v27);
  sub_10005CD2C((uint64_t)&v27, v28[0]);
  uint64_t v27 = &v22;
  sub_100320504((void ***)&v27);
}

void sub_100320D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20)
{
}

uint64_t sub_100320DCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100320E0C()
{
}

void *sub_100320E18(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1E1E1E1E1E1E1E2) {
    sub_10006A7CC();
  }
  return operator new(136 * a2);
}

void *sub_100320E60(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100320EE4(void *a1)
{
  *a1 = off_1019B8D90;
  uint64_t v2 = (const void *)a1[2];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_100320F34(void *a1)
{
  *a1 = off_1019B8D90;
  uint64_t v1 = (const void *)a1[2];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_100320FA4(uint64_t a1)
{
  uint64_t v1 = (void *)(a1 + 8);
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = off_1019B8D90;
  sub_10032124C(v2 + 1, v1);
  return v2;
}

void *sub_100320FF8(uint64_t a1, void *a2)
{
  *a2 = off_1019B8D90;
  return sub_10032124C(a2 + 1, (void *)(a1 + 8));
}

void sub_100321024(uint64_t a1)
{
}

void sub_10032102C(const void **a1)
{
  sub_100321288(a1[2]);

  operator delete(a1);
}

const void **sub_100321068(uint64_t a1, const void **a2, unsigned __int8 *a3)
{
  long long v11 = *a2;
  uint64_t v4 = v11;
  *a2 = 0;
  if (v4) {
    unint64_t v5 = sub_100083F10;
  }
  else {
    unint64_t v5 = 0;
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 16);
    *(void *)long long buf = v4;
    if (v4) {
      CFRetain(v4);
    }
    (*(void (**)(uint64_t, unsigned char *, void))(v6 + 16))(v6, buf, 0);
  }
  else
  {
    LODWORD(v7) = *a3;
    uint64_t v8 = *(NSObject **)(*(void *)(a1 + 8) + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = asString();
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "List transfer plans operation failed. error:%s", buf, 0xCu);
      uint64_t v4 = v11;
    }
    if (v7) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = 5;
    }
    uint64_t v9 = *(void *)(a1 + 16);
    *(void *)long long buf = v4;
    if (v4) {
      CFRetain(v4);
    }
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(v9 + 16))(v9, buf, v7);
  }
  sub_100044D00((const void **)buf);
  return sub_100044D00(&v11);
}

void sub_1003211C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100321200(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B8DF0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100321240()
{
  return &off_1019B8DF0;
}

void *sub_10032124C(void *a1, void *a2)
{
  uint64_t v3 = (void *)a2[1];
  *a1 = *a2;
  if (v3) {
    uint64_t v3 = _Block_copy(v3);
  }
  a1[1] = v3;
  return a1;
}

void sub_100321288(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

uint64_t *sub_1003212A8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  int v10 = a1;
  long long v11 = v1;
  uint64_t v2 = *v1;
  v17[0] = 0;
  v17[128] = 0;
  char v3 = sub_1002DDF00(v2, (uint64_t)v17);
  sub_10010B788((uint64_t)v17);
  if ((v3 & 2) == 0)
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "eSIM unsupported device", (uint8_t *)&buf, 2u);
    }
LABEL_4:
    memset(&buf, 0, sizeof(buf));
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    sub_100321678(v1[4], (uint64_t)&buf, (uint64_t)&v13, 17);
    goto LABEL_19;
  }
  if ((sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(v2 + 320)) & 1) == 0)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "eSIM modification not allowed.", (uint8_t *)&buf, 2u);
    }
    goto LABEL_4;
  }
  v18[0] = 0;
  v18[1] = 0;
  char v19 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v18);
  if (v19)
  {
    memset(&buf, 0, sizeof(buf));
    char v5 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 32))(*(void *)(v2 + 320));
    sub_100CDA4C8((void *)(v2 + 2320), (uint64_t *)(v2 + 2464), (uint64_t *)(v2 + 2568), 0, v5, 0, &buf);
    if (!v19) {
      sub_10016C840();
    }
    ctu::hex((uint64_t *)&v13, (ctu *)v18, (const void *)0x10, v6);
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__p, buf.__r_.__value_.__l.__data_, buf.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = buf;
    }
    sub_100321678(v1[4], (uint64_t)&v13, (uint64_t)&__p, 0);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    uint64_t v8 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "invalid EID", (uint8_t *)&buf, 2u);
    }
    memset(&buf, 0, sizeof(buf));
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v13 = 0;
    sub_100321678(v1[4], (uint64_t)&buf, (uint64_t)&v13, 16);
  }
LABEL_19:
  if (SHIBYTE(v15) < 0) {
    operator delete(v13);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  sub_100321628((uint64_t *)&v11);
  return sub_100046B58((uint64_t *)&v10);
}

void sub_1003215A8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_100321628(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100321628(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030B748((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100321678(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

void *sub_1003216C8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_10032174C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 480))
  {
    uint64_t v12 = 0;
    uint64_t v13 = 0;
    *(void *)std::string buf = "CellularPlanControllerImpl";
    sub_1002BFAE4((char **)buf, (dispatch_object_t *)(v2 + 24), &v12);
    (***(void (****)(uint8_t *__return_ptr))(v2 + 320))(buf);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v10, *(Registry **)buf);
    ctu::RestModule::connect();
    if (v11) {
      sub_10004D2C8(v11);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v3 = *(void *)(v2 + 480);
    uint64_t v4 = v12;
    *(void *)std::string buf = v2;
    *(void *)&uint8_t buf[8] = v12;
    uint64_t v15 = v13;
    if (v13) {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_10031F4D0((uint64_t)v16, v1 + 8);
    char v18 = 0;
    char v5 = (char *)operator new(0x40uLL);
    *(void *)char v5 = off_1019B8E10;
    *(_OWORD *)(v5 + 8) = *(_OWORD *)buf;
    *((void *)v5 + 3) = v15;
    *(void *)&uint8_t buf[8] = 0;
    uint64_t v15 = 0;
    sub_100349184((uint64_t)(v5 + 32), (uint64_t)v16);
    char v18 = v5;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v3 + 56))(v3, v4, v17);
    sub_1003216C8(v17);
    sub_100313790(v16);
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (v13) {
      sub_10004D2C8(v13);
    }
  }
  else
  {
    unint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "No Cloud Sender available to get blacklist plans", buf, 2u);
    }
    *(void *)std::string buf = 0;
    sub_10031F910(v1 + 8, (uint64_t)buf, 4);
    sub_100044D00((const void **)buf);
  }
  sub_100321A2C(&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100321994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, const void *a15)
{
}

uint64_t *sub_100321A2C(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313790((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100321A7C(void *a1)
{
  *a1 = off_1019B8E10;
  sub_100313790(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100321ACC(void *a1)
{
  *a1 = off_1019B8E10;
  sub_100313790(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100321B3C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_1019B8E10;
  sub_100321E08((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100321B90(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100321BA4(uint64_t a1, void *a2)
{
  *a2 = off_1019B8E10;
  return sub_100321E08((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100321BD0(uint64_t a1)
{
}

void sub_100321BD8(void *a1)
{
  sub_100321E70((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100321C14(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  long long v8 = *(_OWORD *)(a2 + 1);
  uint64_t v9 = a2[3];
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v4 = *(void *)(a1 + 8);
  if (!(_BYTE)v3)
  {
    unint64_t v6 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "List Blacklist plans failed", buf, 2u);
    }
    goto LABEL_9;
  }
  uint64_t v5 = *(void *)(v4 + 464);
  if (!v5)
  {
    uint64_t v7 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Cannot create blacklist plans as no upload triggers model.", buf, 2u);
    }
LABEL_9:
    uint64_t v10 = 0;
    sub_10031F910(a1 + 32, (uint64_t)&v10, 5);
    goto LABEL_10;
  }
  (*(void (**)(const void **__return_ptr))(*(void *)v5 + 136))(&v10);
  sub_10031F910(a1 + 32, (uint64_t)&v10, 0);
LABEL_10:
  sub_100044D00(&v10);
  *(void *)std::string buf = &v8;
  sub_10010DF1C((void ***)buf);
}

void sub_100321D8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va1, a6);
  va_start(va, a6);
  uint64_t v7 = va_arg(va1, const void *);
  sub_100044D00((const void **)va);
  sub_10010DF1C((void ***)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_100321DBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100321DFC()
{
}

uint64_t sub_100321E08(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_10031F4D0(a1 + 24, a2 + 24);
  return a1;
}

void sub_100321E58(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100321E70(uint64_t a1)
{
  sub_100313790((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

uint64_t *sub_100321EBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v24 = a1;
  uint64_t v25 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 480))
  {
    uint64_t v44 = 0;
    long long v42 = 0u;
    long long v43 = 0u;
    long long v41 = 0u;
    memset(v40, 0, sizeof(v40));
    long long v39 = 0u;
    long long v37 = 0u;
    memset(v38, 0, sizeof(v38));
    long long v36 = 0u;
    *(_OWORD *)std::string buf = 0u;
    v66[0] = 0;
    v66[1] = 0;
    char v67 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v66);
    if (v67)
    {
      unsigned int v4 = LOBYTE(v66[0]) - 89;
      if (v4 > 8 || ((1 << v4) & 0x181) == 0)
      {
        ctu::hex((uint64_t *)__dst, (ctu *)v66, (const void *)0x10, v3);
        if (SHIBYTE(v40[1].__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40[1].__r_.__value_.__l.__data_);
        }
        v40[1] = *(std::string *)__dst;
      }
    }
    uint64_t v5 = *(void *)(v2 + 2328);
    if (v5)
    {
      int v6 = *(_DWORD *)(v2 + 580);
      uint64_t v7 = v2 + 2328;
      do
      {
        int v8 = *(_DWORD *)(v5 + 32);
        BOOL v9 = v8 < v6;
        if (v8 >= v6) {
          uint64_t v10 = (uint64_t *)v5;
        }
        else {
          uint64_t v10 = (uint64_t *)(v5 + 8);
        }
        if (!v9) {
          uint64_t v7 = v5;
        }
        uint64_t v5 = *v10;
      }
      while (*v10);
      if (v7 != v2 + 2328 && v6 >= *(_DWORD *)(v7 + 32)) {
        std::string::operator=(v40, (const std::string *)(v7 + 40));
      }
    }
    memset(__dst, 0, 24);
    ctu::cf::assign();
    uint64_t v11 = *(void *)__dst;
    *(void *)&long long v63 = *(void *)&__dst[8];
    *(void *)((char *)&v63 + 7) = *(void *)&__dst[15];
    char v12 = __dst[23];
    if (SHIBYTE(v37) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    *((void *)&v36 + 1) = v11;
    *(void *)&long long v37 = v63;
    *(void *)((char *)&v37 + 7) = *(void *)((char *)&v63 + 7);
    HIBYTE(v37) = v12;
    memset(__dst, 0, 24);
    ctu::cf::assign();
    uint64_t v13 = *(void **)__dst;
    *(void *)&long long v63 = *(void *)&__dst[8];
    *(void *)((char *)&v63 + 7) = *(void *)&__dst[15];
    char v14 = __dst[23];
    if (SHIBYTE(v38[2]) < 0) {
      operator delete(v38[0]);
    }
    v38[0] = v13;
    v38[1] = (void *)v63;
    *(void **)((char *)&v38[1] + 7) = *(void **)((char *)&v63 + 7);
    HIBYTE(v38[2]) = v14;
    memset(__dst, 0, 24);
    ctu::cf::assign();
    uint64_t v15 = *(void **)__dst;
    *(void *)&long long v63 = *(void *)&__dst[8];
    *(void *)((char *)&v63 + 7) = *(void *)&__dst[15];
    char v16 = __dst[23];
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[3]);
    }
    v38[3] = v15;
    *(void *)&long long v39 = v63;
    *(void *)((char *)&v39 + 7) = *(void *)((char *)&v63 + 7);
    HIBYTE(v39) = v16;
    sub_1002D3F44(v2);
    memset(&v34, 0, sizeof(v34));
    BOOL v17 = *(const std::string **)(v2 + 5368);
    if (v17) {
      std::string::operator=(&v34, v17);
    }
    *(_DWORD *)long long __dst = 3;
    *(void *)&__dst[8] = CFAbsoluteTimeGetCurrent();
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__dst[16], v34.__r_.__value_.__l.__data_, v34.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&__dst[16] = v34;
    }
    char v49 = 0;
    long long v41 = *(_OWORD *)__dst;
    if ((_BYTE)v44)
    {
      if (SBYTE7(v43) < 0)
      {
        operator delete((void *)v42);
        char v19 = v49;
      }
      else
      {
        char v19 = 0;
      }
      long long v42 = *(_OWORD *)&__dst[16];
      *(void *)&long long v43 = *(void *)&__dst[32];
      BYTE8(v43) = v19;
    }
    else
    {
      long long v42 = *(_OWORD *)&__dst[16];
      *(void *)&long long v43 = *(void *)&__dst[32];
      BYTE8(v43) = 0;
      LOBYTE(v44) = 1;
    }
    long long v64 = 0u;
    long long v65 = 0u;
    long long v63 = 0u;
    sub_10010DB3C(__dst, (long long *)buf);
    long long v63 = 0uLL;
    *(void *)&long long v64 = 0;
    char v26 = &v63;
    uint64_t v27 = 0;
    *(void *)&long long v63 = operator new(0xC8uLL);
    *((void *)&v63 + 1) = v63;
    *(void *)&long long v64 = v63 + 200;
    *((void *)&v63 + 1) = sub_10010DE98((uint64_t)&v64, (uint64_t)__dst, (uint64_t)&v62, v63);
    *((void *)&v64 + 1) = 0;
    long long v65 = 0uLL;
    if (v61 && v60 < 0) {
      operator delete(v59);
    }
    if (v58 < 0) {
      operator delete(v57);
    }
    if (v56 < 0) {
      operator delete(v55);
    }
    if (v54 < 0) {
      operator delete(v53);
    }
    if (v52 < 0) {
      operator delete(v51);
    }
    if (v50 < 0) {
      operator delete(*(void **)&__dst[24]);
    }
    if ((__dst[23] & 0x80000000) != 0) {
      operator delete(*(void **)__dst);
    }
    xpc_object_t v32 = 0;
    long long v33 = 0;
    *(void *)long long __dst = "CellularPlanControllerImpl";
    sub_1002BFAE4((char **)__dst, (dispatch_object_t *)(v2 + 24), &v32);
    (***(void (****)(unsigned char *__return_ptr))(v2 + 320))(__dst);
    Registry::createRestModuleOneTimeUseMobileHelperConnection(&v30, *(Registry **)__dst);
    ctu::RestModule::connect();
    if (v31) {
      sub_10004D2C8(v31);
    }
    if (*(void *)&__dst[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&__dst[8]);
    }
    uint64_t v20 = *(void *)(v2 + 480);
    uint64_t v21 = v32;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    char v26 = 0;
    sub_100322898(&v26, v63, *((uint64_t *)&v63 + 1), 0x8F5C28F5C28F5C29 * ((uint64_t)(*((void *)&v63 + 1) - v63) >> 3));
    memset(v29, 0, sizeof(v29));
    sub_1003229A4(v29, *((uint64_t *)&v64 + 1), v65, 0x8E38E38E38E38E39 * ((uint64_t)(v65 - *((void *)&v64 + 1)) >> 3));
    *(void *)long long __dst = v2;
    *(void *)&__dst[8] = v32;
    *(void *)&__dst[16] = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_1000DFC90((uint64_t)&__dst[24], v1 + 32);
    uint64_t v47 = 0;
    long long v22 = (char *)operator new(0x40uLL);
    *(void *)long long v22 = off_1019B8E90;
    *(_OWORD *)(v22 + 8) = *(_OWORD *)__dst;
    *((void *)v22 + 3) = *(void *)&__dst[16];
    *(void *)&__dst[8] = 0;
    *(void *)&__dst[16] = 0;
    sub_100023950((uint64_t)(v22 + 32), (uint64_t)&__dst[24]);
    uint64_t v47 = v22;
    (*(void (**)(uint64_t, void **, long long **, void *))(*(void *)v20 + 64))(v20, v21, &v26, v46);
    sub_100322EB8(v46);
    sub_100060644(&__dst[24]);
    if (*(void *)&__dst[16]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&__dst[16]);
    }
    uint64_t v45 = (long long **)v29;
    sub_10030EC88((void ***)&v45);
    uint64_t v45 = &v26;
    sub_10010DF1C((void ***)&v45);
    if (v33) {
      sub_10004D2C8(v33);
    }
    xpc_object_t v32 = (void **)&v64 + 1;
    sub_10030EC88(&v32);
    xpc_object_t v32 = (void **)&v63;
    sub_10010DF1C(&v32);
    if (SHIBYTE(v34.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v34.__r_.__value_.__l.__data_);
    }
    if ((_BYTE)v44 && SBYTE7(v43) < 0) {
      operator delete((void *)v42);
    }
    if (SHIBYTE(v40[1].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40[1].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v40[0].__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v40[0].__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[3]);
    }
    if (SHIBYTE(v38[2]) < 0) {
      operator delete(v38[0]);
    }
    if (SHIBYTE(v37) < 0) {
      operator delete(*((void **)&v36 + 1));
    }
    if (SBYTE7(v36) < 0) {
      operator delete(*(void **)buf);
    }
  }
  else
  {
    char v18 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "No Cloud Sender available to add blacklist plan.", buf, 2u);
    }
    sub_1000607A8(v1 + 32, 0);
  }
  sub_100322830(&v25);
  return sub_100046B58((uint64_t *)&v24);
}

void sub_1003225F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,uint64_t a61,uint64_t a62,void *__p)
{
  if (a70 && a68 < 0) {
    operator delete(__p);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a42 < 0) {
    operator delete(a37);
  }
  if (a36 < 0) {
    operator delete(a31);
  }
  if (a30 < 0) {
    operator delete(a25);
  }
  sub_100322830(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100322830(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 32));
    sub_1000558F4((const void **)(v1 + 24));
    sub_1000558F4((const void **)(v1 + 16));
    sub_1000558F4((const void **)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100322898(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_10030F9EC(result, a4);
    uint64_t result = (void *)sub_100322920((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100322900(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10010DF1C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100322920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_10010DB3C((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 200;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100322980(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 200;
    do
    {
      sub_10010DDFC(v4 + v2);
      v2 -= 200;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003229A4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    int v6 = result;
    sub_10019E6A8(result, a4);
    uint64_t result = (void *)sub_100322A2C((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100322A0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030EC88(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100322A2C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100322AB0((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100322A8C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      sub_10010C078(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100322AB0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  int v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)int v6 = v7;
  }
  return __dst;
}

void sub_100322B64(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100322B98(void *a1)
{
  *a1 = off_1019B8E90;
  sub_100060644(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100322BE8(void *a1)
{
  *a1 = off_1019B8E90;
  sub_100060644(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100322C58(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_1019B8E90;
  sub_100322E04((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100322CAC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100322CC0(uint64_t a1, void *a2)
{
  *a2 = off_1019B8E90;
  return sub_100322E04((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100322CEC(uint64_t a1)
{
}

void sub_100322CF4(void *a1)
{
  sub_100322E6C((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_100322D30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  if ((*a2 & 1) == 0)
  {
    long long v4 = *(NSObject **)(*(void *)(a1 + 8) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)int v6 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Blacklist plan upload operation failed", v6, 2u);
    }
  }
  return sub_1000607A8(a1 + 32, v3 & 1);
}

uint64_t sub_100322DB8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100322DF8()
{
}

uint64_t sub_100322E04(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_1000DFC90(a1 + 24, a2 + 24);
  return a1;
}

void sub_100322E54(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100322E6C(uint64_t a1)
{
  sub_100060644((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void *sub_100322EB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100322F3C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 464))
  {
    ctu::cf::assign();
    v13[0] = 0;
    *(_DWORD *)((char *)v13 + 3) = 0;
    ctu::cf::assign();
    v12[0] = 0;
    *(_DWORD *)((char *)v12 + 3) = 0;
    long long __dst = 0;
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    ctu::cf::assign();
    v11[0] = 0;
    *(_DWORD *)((char *)v11 + 3) = 0;
    uint64_t v3 = *(void *)(v2 + 464);
    long long __dst = 0;
    uint64_t v19 = 0;
    LODWORD(v20) = v13[0];
    *(_DWORD *)((char *)&v20 + 3) = 0;
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    *(_DWORD *)unint64_t v23 = v12[0];
    *(_DWORD *)&void v23[3] = 0;
    char v24 = 0;
    std::string __p = 0;
    uint64_t v26 = 0;
    *(_DWORD *)uint64_t v27 = v11[0];
    *(_DWORD *)&v27[3] = 0;
    char v28 = 0;
    int v8 = 0;
    uint64_t v9 = 0;
    uint64_t v10 = 0;
    v16[0] = &v8;
    v16[1] = 0;
    int v8 = (char *)operator new(0x48uLL);
    uint64_t v9 = (uint64_t)v8;
    uint64_t v10 = v8 + 72;
    uint64_t v9 = sub_100323350((uint64_t)&v10, (uint64_t)&__dst, (uint64_t)&v29, (uint64_t)v8);
    sub_1000DFC90((uint64_t)v15, v1 + 32);
    BOOL v17 = 0;
    long long v4 = operator new(0x28uLL);
    *long long v4 = off_1019B8F10;
    sub_100023950((uint64_t)(v4 + 1), (uint64_t)v15);
    BOOL v17 = v4;
    (*(void (**)(uint64_t, char **, void *))(*(void *)v3 + 64))(v3, &v8, v16);
    sub_100060644(v16);
    sub_100060644(v15);
    char v14 = &v8;
    sub_10030EC88((void ***)&v14);
    if (v28 < 0) {
      operator delete(__p);
    }
    if (v24 < 0) {
      operator delete(v21);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete(__dst);
    }
  }
  sub_100322830(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100323240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, void *a10, uint64_t a11, uint64_t a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *__p,uint64_t a37,int a38,__int16 a39,char a40,char a41,void *a42,uint64_t a43,int a44,__int16 a45,char a46,char a47)
{
  if (a41 < 0) {
    operator delete(__p);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  if (v50 < 0) {
    operator delete(v47);
  }
  if (v49 < 0) {
    operator delete(a9);
  }
  if (v48 < 0) {
    operator delete(a10);
  }
  sub_100322830(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

void sub_100323310(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    JUMPOUT(0x1003232DCLL);
  }
  JUMPOUT(0x1003232E0);
}

void sub_100323324(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    JUMPOUT(0x1003232E4);
  }
  JUMPOUT(0x1003232ECLL);
}

void sub_10032333C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    JUMPOUT(0x1003232F4);
  }
  JUMPOUT(0x1003232F8);
}

uint64_t sub_100323350(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1003233D4((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 72;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003233B0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 72;
    do
    {
      sub_10010C078(v4 + v2);
      v2 -= 72;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_1003233D4(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  int v6 = __dst + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *(_OWORD *)int v6 = v7;
  }
  return __dst;
}

void sub_100323488(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003234BC(void *a1)
{
  *a1 = off_1019B8F10;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_100323500(void *a1)
{
  *a1 = off_1019B8F10;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_100323564(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B8F10;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003235B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003235CC(uint64_t a1, void *a2)
{
  *a2 = off_1019B8F10;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1003235F8(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_100323600(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10032363C(uint64_t a1, char *a2)
{
  return sub_1000607A8(a1 + 8, *a2);
}

uint64_t sub_100323648(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100323688()
{
}

uint64_t *sub_100323694(void **a1)
{
  uint64_t v1 = *a1;
  int v8 = a1;
  uint64_t v9 = v1;
  uint64_t v2 = *v1;
  if (sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(*v1 + 320)))
  {
    v11[0] = 0;
    v11[1] = 0;
    char v12 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v11);
    if (v12)
    {
      unsigned int v3 = LOBYTE(v11[0]) - 89;
      if (v3 > 8 || ((1 << v3) & 0x181) == 0)
      {
        uint64_t v7 = *(void *)(v2 + 336);
        sub_1000332B4((uint64_t)buf, (uint64_t)(v1 + 1));
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v7 + 40))(v7, buf);
        sub_100033230(buf);
        goto LABEL_11;
      }
    }
    *(void *)std::string buf = 0;
    uint64_t v4 = v1[4];
    if (!v4) {
      sub_10007B600();
    }
  }
  else
  {
    long long v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I No pending plans available, eSIM modification not allowed.", buf, 2u);
    }
    *(void *)std::string buf = 0;
    uint64_t v4 = v1[4];
    if (!v4) {
      sub_10007B600();
    }
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v4 + 48))(v4, buf);
  sub_100044D00((const void **)buf);
LABEL_11:
  sub_1003238C0((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_100323880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_1003238C0(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100033230((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100323910(uint64_t a1, uint64_t a2)
{
  unsigned int v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    unsigned int v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_100323990(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100323A28(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 288);
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v8 = *(void *)(v1 + 24);
    *(_OWORD *)std::string __p = v3;
  }
  sub_100323990((uint64_t)v9, v1 + 32);
  (*(void (**)(uint64_t, void **, void *))(*(void *)v2 + 168))(v2, __p, v9);
  sub_1000605C0(v9);
  if (SHIBYTE(v8) < 0) {
    operator delete(__p[0]);
  }
  sub_100323B5C(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100323B18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t *sub_100323B5C(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_1000605C0((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100323BBC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 416))
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(v2 + 304) + 440))(__p);
    long long v3 = (void *)HIBYTE(v10);
    if (v10 < 0) {
      long long v3 = __p[1];
    }
    if (!v3)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 304) + 432))(buf);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v10 = v12;
    }
    uint64_t v4 = *(void *)(v2 + 416);
    sub_10031F4D0((uint64_t)buf, v1 + 8);
    (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v4 + 80))(v4, __p, buf);
    sub_100313790(buf);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", buf, 2u);
    }
    *(void *)std::string buf = 0;
    sub_10031F910(v1 + 8, (uint64_t)buf, 5);
    sub_100044D00((const void **)buf);
  }
  sub_100321A2C(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100323D90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100321A2C(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100323DE8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 416)
    && ((*(uint64_t (**)(void))(**(void **)(v2 + 496) + 16))(*(void *)(v2 + 496)) & 1) != 0)
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v10 = 0;
    (*(void (**)(void **__return_ptr))(**(void **)(v2 + 304) + 440))(__p);
    long long v3 = (void *)HIBYTE(v10);
    if (v10 < 0) {
      long long v3 = __p[1];
    }
    if (!v3)
    {
      (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 304) + 432))(buf);
      if (SHIBYTE(v10) < 0) {
        operator delete(__p[0]);
      }
      *(_OWORD *)std::string __p = *(_OWORD *)buf;
      uint64_t v10 = v12;
    }
    uint64_t v4 = *(void *)(v2 + 416);
    sub_10031F4D0((uint64_t)buf, v1 + 8);
    (*(void (**)(uint64_t, void **, uint8_t *))(*(void *)v4 + 88))(v4, __p, buf);
    sub_100313790(buf);
    if (SHIBYTE(v10) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    long long v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", buf, 2u);
    }
    *(void *)std::string buf = 0;
    sub_10031F910(v1 + 8, (uint64_t)buf, 5);
    sub_100044D00((const void **)buf);
  }
  sub_100321A2C(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100323FE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100321A2C(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_100324040(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1003240C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100324160(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 416);
  if (v2)
  {
    sub_1003240C8((uint64_t)buf, v1 + 32);
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v2 + 96))(v2, v1 + 8, buf);
    sub_1003135E4(buf);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", buf, 2u);
    }
    uint64_t v7 = 0;
    *(void *)std::string buf = 0;
    sub_1002E1174(v1 + 32, 0, (uint64_t)buf, (uint64_t)&v7, 5);
    sub_100057D78(&v7);
    sub_1000558F4((const void **)buf);
  }
  sub_1003242CC(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100324288(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, const void *);
  sub_100057D78((const void **)va2);
  sub_1000558F4((const void **)va3);
  sub_1003242CC((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003242CC(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_1003135E4((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10032432C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 416);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 104))(v2, v1 + 8);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", buf, 2u);
    }
  }
  sub_1001102C4(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1003243E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1003243FC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 416);
  if (v2)
  {
    sub_10031ECD8((uint64_t)buf, v1 + 32);
    (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v2 + 136))(v2, v1 + 8, buf);
    sub_100313668(buf);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "No pending transfer plans handler", buf, 2u);
    }
    sub_10024924C(v1 + 32, 5);
  }
  sub_100324530(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100324504(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_100324530(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100324590@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)operator new(0x120uLL);
  uint64_t result = sub_1003245DC((uint64_t)v2);
  *a1 = v2 + 24;
  a1[1] = v2;
  return result;
}

void sub_1003245C8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003245DC(uint64_t a1)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1019BB100;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(_OWORD *)(a1 + 184) = 0u;
  *(_OWORD *)(a1 + 200) = 0u;
  *(_OWORD *)(a1 + 216) = 0u;
  *(_OWORD *)(a1 + 232) = 0u;
  *(_OWORD *)(a1 + 248) = 0u;
  *(void *)(a1 + 280) = 0;
  *(_OWORD *)(a1 + 24) = 0u;
  uint64_t v2 = a1 + 24;
  *(_OWORD *)(v2 + 240) = 0u;
  sub_10030A548(v2);
  return a1;
}

void sub_10032466C(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100324680(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019BB100;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003246A0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019BB100;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_1003246F4(uint64_t a1)
{
  return sub_10030A89C(a1 + 24);
}

void *sub_100324700(void *a1)
{
  *a1 = off_1019B8F90;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_100324750(void *a1)
{
  *a1 = off_1019B8F90;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_1003247C0(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_1019B8F90;
  sub_1003248E4(v2 + 1, v1);
  return v2;
}

void *sub_100324814(uint64_t a1, void *a2)
{
  *a2 = off_1019B8F90;
  return sub_1003248E4(a2 + 1, (void **)(a1 + 8));
}

void sub_100324840(uint64_t a1)
{
}

void sub_100324848(const void **a1)
{
  sub_10032491C(a1[1]);

  operator delete(a1);
}

uint64_t sub_100324884(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100324898(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003248D8()
{
}

void *sub_1003248E4(void *a1, void **a2)
{
  uint64_t v3 = *a2;
  if (*a2) {
    uint64_t v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_10032491C(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

void *sub_10032493C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_1003249C0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v45 = a1;
  uint64_t v46 = v1;
  uint64_t v2 = *(void *)v1;
  if (!*(unsigned char *)(v1 + 249))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Not ESIM flow. Aborting..", buf, 2u);
    }
    char v4 = 17;
    goto LABEL_25;
  }
  if (*(char *)(v1 + 31) < 0)
  {
    if (!*(void *)(v1 + 16)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v1 + 31))
  {
    goto LABEL_22;
  }
  if (*(char *)(v1 + 55) < 0)
  {
    if (!*(void *)(v1 + 40)) {
      goto LABEL_22;
    }
  }
  else if (!*(unsigned char *)(v1 + 55))
  {
    goto LABEL_22;
  }
  if (*(char *)(v1 + 127) < 0)
  {
    if (*(void *)(v1 + 112)) {
      goto LABEL_15;
    }
LABEL_22:
    uint64_t v8 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Mandatory field empty. Aborting..", buf, 2u);
    }
    char v4 = 6;
LABEL_25:
    sub_10024924C(v1 + 256, v4);
    goto LABEL_26;
  }
  if (!*(unsigned char *)(v1 + 127)) {
    goto LABEL_22;
  }
LABEL_15:
  v98[0] = 0;
  v98[1] = 0;
  char v99 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v98);
  if (!v99 || (unsigned int v6 = LOBYTE(v98[0]) - 89, v6 <= 8) && ((1 << v6) & 0x181) != 0)
  {
    uint64_t v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid CSN, Aborting..", buf, 2u);
    }
    sub_10024924C(v1 + 256, 16);
    goto LABEL_26;
  }
  long long v51 = 0;
  uint64_t v52 = 0;
  uint64_t v53 = 0;
  ctu::hex((uint64_t *)&v51, (ctu *)v98, (const void *)0x10, v5);
  uint64_t v10 = (const void **)(v1 + 8);
  char v11 = *(unsigned char *)(v1 + 31);
  if (v11 >= 0) {
    uint64_t v12 = *(unsigned __int8 *)(v1 + 31);
  }
  else {
    uint64_t v12 = *(void *)(v1 + 16);
  }
  uint64_t v13 = HIBYTE(v53);
  int v14 = SHIBYTE(v53);
  if (v53 < 0) {
    uint64_t v13 = v52;
  }
  if (v12 == v13)
  {
    if (v53 >= 0) {
      uint64_t v15 = (unsigned __int8 *)&v51;
    }
    else {
      uint64_t v15 = (unsigned __int8 *)v51;
    }
    if ((*(unsigned char *)(v1 + 31) & 0x80) != 0)
    {
      uint64_t v19 = (const void **)*v10;
      if (memcmp(*v10, v15, *(void *)(v1 + 16)))
      {
        char v18 = *(NSObject **)(v2 + 40);
        if (!os_log_type_enabled(v18, OS_LOG_TYPE_ERROR)) {
          goto LABEL_43;
        }
        uint64_t v10 = v19;
LABEL_80:
        uint64_t v44 = v51;
        if (v14 >= 0) {
          uint64_t v44 = &v51;
        }
        *(_DWORD *)std::string buf = 136315394;
        uint64_t v81 = v10;
        __int16 v82 = 2080;
        uint64_t v83 = v44;
        _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "EID mismatch: (%s) != (%s), Aborting..", buf, 0x16u);
        goto LABEL_43;
      }
    }
    else if (*(unsigned char *)(v1 + 31))
    {
      char v16 = (unsigned __int8 *)(v1 + 8);
      uint64_t v17 = *(unsigned __int8 *)(v1 + 31);
      while (*v16 == *v15)
      {
        ++v16;
        ++v15;
        if (!--v17) {
          goto LABEL_47;
        }
      }
      goto LABEL_42;
    }
LABEL_47:
    bzero(buf, 0x4E0uLL);
    uint64_t v48 = 0;
    unint64_t v49 = 0;
    unint64_t v50 = 0;
    std::string::operator=(&v84, (const std::string *)(v1 + 128));
    std::string::operator=(&v85, (const std::string *)(v1 + 152));
    std::string::operator=(&v86, (const std::string *)(v1 + 176));
    std::string::operator=(v87, (const std::string *)(v1 + 200));
    std::string::operator=(v89, (const std::string *)(v1 + 104));
    std::string::operator=(v94, (const std::string *)(v1 + 224));
    std::string::operator=(&v91, (const std::string *)(v1 + 32));
    __int16 v96 = *(unsigned __int8 *)(v1 + 250) | 0x100;
    sub_100CD7084(v1 + 32, (uint64_t)v54);
    if (SHIBYTE(v93) < 0) {
      operator delete((void *)__p);
    }
    long long __p = *(_OWORD *)v54;
    uint64_t v93 = *(void *)&v54[16];
    buf[3] = 1;
    *(_WORD *)std::string buf = 2311;
    char v97 = 1;
    *(_DWORD *)(v2 + 5268) = 3;
    if (*(char *)(v1 + 103) < 0) {
      uint64_t v20 = *(void *)(v1 + 88);
    }
    else {
      uint64_t v20 = *(unsigned __int8 *)(v1 + 103);
    }
    if (v20) {
      sub_100093B44(&v95, (const std::string *)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      uint64_t v21 = *(void *)(v1 + 64);
    }
    else {
      uint64_t v21 = *(unsigned __int8 *)(v1 + 79);
    }
    if (v21) {
      std::string::operator=(&v90, (const std::string *)(v1 + 56));
    }
    memset(&__str, 0, sizeof(__str));
    uint64_t v22 = *(void *)(v2 + 320);
    sub_100058DB0(v54, "");
    (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)v22 + 160))(&__str, v22, v1 + 128, v1 + 152, v1 + 176, v1 + 200, v54, 1);
    if ((v54[23] & 0x80000000) != 0) {
      operator delete(*(void **)v54);
    }
    std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
    if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = __str.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::operator=(&v88, &__str);
    }
    unint64_t v24 = v49;
    if (v49 >= v50)
    {
      uint64_t v25 = sub_1003252B8(&v48, (long long *)buf);
    }
    else
    {
      sub_10030DDAC(v49, (long long *)buf);
      uint64_t v25 = v24 + 1248;
    }
    unint64_t v49 = v25;
    sub_1003078F0(v2, &v48);
    uint64_t v26 = *(void *)(v2 + 336);
    *(void *)char v54 = v2;
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&v54[8], __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
    }
    else {
      *(std::string *)&v54[8] = __str;
    }
    sub_10030BBF8((char *)&v55, (long long *)(v1 + 8));
    sub_10031ECD8((uint64_t)v77, v1 + 256);
    long long v79 = 0;
    uint64_t v27 = (char *)operator new(0x140uLL);
    uint64_t v28 = *(void *)v54;
    uint64_t v29 = v58;
    *(void *)uint64_t v27 = off_1019B9010;
    *((void *)v27 + 1) = v28;
    *((_OWORD *)v27 + 1) = *(_OWORD *)&v54[8];
    *((void *)v27 + 4) = *(void *)&v54[24];
    memset(&v54[8], 0, 24);
    *(_OWORD *)(v27 + 40) = v55;
    *((void *)v27 + 7) = v56;
    long long v55 = 0uLL;
    uint64_t v56 = 0;
    long long v30 = v57;
    *((void *)v27 + 10) = v29;
    *((_OWORD *)v27 + 4) = v30;
    long long v57 = 0uLL;
    long long v31 = v59;
    uint64_t v32 = v62;
    *((void *)v27 + 13) = v60;
    *(_OWORD *)(v27 + 88) = v31;
    uint64_t v58 = 0;
    long long v59 = 0uLL;
    uint64_t v60 = 0;
    long long v33 = v61;
    *((void *)v27 + 16) = v32;
    *((_OWORD *)v27 + 7) = v33;
    long long v61 = 0uLL;
    long long v34 = v63;
    uint64_t v35 = v66;
    *((void *)v27 + 19) = v64;
    *(_OWORD *)(v27 + 136) = v34;
    uint64_t v62 = 0;
    long long v63 = 0uLL;
    uint64_t v64 = 0;
    long long v36 = v65;
    *((void *)v27 + 22) = v35;
    *((_OWORD *)v27 + 10) = v36;
    long long v65 = 0uLL;
    long long v37 = v67;
    uint64_t v38 = v70;
    *((void *)v27 + 25) = v68;
    *(_OWORD *)(v27 + 184) = v37;
    uint64_t v66 = 0;
    long long v67 = 0uLL;
    uint64_t v68 = 0;
    long long v39 = v69;
    *((void *)v27 + 28) = v38;
    *((_OWORD *)v27 + 13) = v39;
    long long v69 = 0uLL;
    long long v40 = v71;
    uint64_t v41 = v74;
    *((void *)v27 + 31) = v72;
    *(_OWORD *)(v27 + 232) = v40;
    uint64_t v70 = 0;
    long long v71 = 0uLL;
    uint64_t v72 = 0;
    long long v42 = v73;
    *((void *)v27 + 34) = v41;
    *((_OWORD *)v27 + 16) = v42;
    long long v73 = 0uLL;
    uint64_t v74 = 0;
    __int16 v43 = v75;
    v27[282] = v76;
    *((_WORD *)v27 + 140) = v43;
    sub_10032CA08((uint64_t)(v27 + 288), (uint64_t)v77);
    long long v79 = v27;
    (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v26 + 72))(v26, 1, 0, v78);
    sub_10032493C(v78);
    sub_100313668(v77);
    sub_10030BF00((uint64_t)&v55);
    if ((v54[31] & 0x80000000) != 0) {
      operator delete(*(void **)&v54[8]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
    sub_10030AFC8((void ***)&__str);
    sub_10030D10C((uint64_t)buf);
    goto LABEL_76;
  }
LABEL_42:
  char v18 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
  {
    if (v11 < 0) {
      uint64_t v10 = (const void **)*v10;
    }
    goto LABEL_80;
  }
LABEL_43:
  sub_10024924C(v1 + 256, 6);
LABEL_76:
  if (SHIBYTE(v53) < 0) {
    operator delete(v51);
  }
LABEL_26:
  sub_100325260(&v46);
  return sub_100046B58((uint64_t *)&v45);
}

void sub_100325184(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  long long __p = &a17;
  sub_10030AFC8((void ***)&__p);
  sub_10030D10C((uint64_t)&a69);
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_100325260(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100325260(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 256));
    sub_10030BF00(v1 + 8);
    operator delete();
  }
  return result;
}

uint64_t sub_1003252B8(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 5);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x34834834834834) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 5);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x1A41A41A41A41ALL) {
    unint64_t v9 = 0x34834834834834;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10030B8AC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  int v14 = &v10[1248 * v4];
  char v16 = &v10[1248 * v9];
  sub_10030DDAC((uint64_t)v14, a2);
  uint64_t v15 = v14 + 1248;
  sub_1003253D8(a1, &v13);
  uint64_t v11 = a1[1];
  sub_1003254E4((uint64_t)&v13);
  return v11;
}

void sub_1003253C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1003254E4((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_1003253D8(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100325450((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100325450(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v10 = 0;
  uint64_t v11 = a7 - 1248;
  while (a3 + v10 != a5)
  {
    uint64_t v12 = v11 + v10;
    v10 -= 1248;
    sub_10030DDAC(v12, (long long *)(v10 + a3));
  }
  return a6;
}

uint64_t sub_1003254E4(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 1248;
    sub_10030D10C(i - 1248);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

uint64_t sub_100325534(uint64_t a1)
{
  *(void *)a1 = off_1019B9010;
  sub_100313668((void *)(a1 + 288));
  sub_10030BF00(a1 + 40);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100325594(uint64_t a1)
{
  *(void *)a1 = off_1019B9010;
  sub_100313668((void *)(a1 + 288));
  sub_10030BF00(a1 + 40);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_100325614(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x140uLL);
  void *v2 = off_1019B9010;
  sub_100326118((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100325668(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032567C(uint64_t a1, void *a2)
{
  *a2 = off_1019B9010;
  return sub_100326118((uint64_t)(a2 + 1), a1 + 8);
}

void sub_1003256A8(uint64_t a1)
{
}

void sub_1003256B0(void *a1)
{
  sub_1003261C8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1003256EC(uint64_t a1, uint64_t *a2, unsigned __int8 *a3)
{
  uint64_t v50 = 0;
  uint64_t v51 = 0;
  uint64_t v52 = 0;
  sub_10030C19C(&v50, *a2, a2[1], 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 3));
  uint64_t v5 = *(void *)(a1 + 8);
  if (v50 != v51)
  {
    long long v69 = 0;
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    sub_100CD7084(a1 + 64, (uint64_t)&v69);
    long long v67 = 0u;
    long long v68 = 0u;
    long long v65 = 0u;
    long long v66 = 0u;
    long long v63 = 0u;
    long long v64 = 0u;
    long long v61 = 0u;
    long long v62 = 0u;
    long long v59 = 0u;
    long long v60 = 0u;
    *(_OWORD *)long long __p = 0u;
    *(_OWORD *)std::string buf = 0u;
    memset(v57, 0, sizeof(v57));
    uint64_t v6 = v50;
    uint64_t v49 = v51;
    if (v50 == v51) {
      goto LABEL_60;
    }
    uint64_t v47 = v5;
    uint64_t v48 = a1;
    while (1)
    {
      std::locale::locale(&v72);
      std::locale::locale(__dst, &v72);
      int v7 = *(char *)(v6 + 95);
      if (v7 >= 0) {
        uint64_t v8 = (char *)(v6 + 72);
      }
      else {
        uint64_t v8 = *(char **)(v6 + 72);
      }
      if (v7 >= 0) {
        uint64_t v9 = *(unsigned __int8 *)(v6 + 95);
      }
      else {
        uint64_t v9 = *(void *)(v6 + 80);
      }
      if (v71 >= 0) {
        uint64_t v10 = (char *)&v69;
      }
      else {
        uint64_t v10 = (char *)v69;
      }
      if (v71 >= 0) {
        uint64_t v11 = HIBYTE(v71);
      }
      else {
        uint64_t v11 = v70;
      }
      if (v9) {
        BOOL v12 = v11 == 0;
      }
      else {
        BOOL v12 = 1;
      }
      if (v12)
      {
        char v18 = v8;
        uint64_t v17 = v10;
LABEL_22:
        uint64_t v13 = &v10[v11];
        std::locale::~locale(__dst);
        std::locale::~locale(&v72);
        if (v18 == &v8[v9] && v17 == v13)
        {
          if (BYTE8(v68))
          {
            std::string::operator=((std::string *)buf, (const std::string *)v6);
            std::string::operator=((std::string *)&v57[8], (const std::string *)(v6 + 24));
            std::string::operator=((std::string *)&v57[32], (const std::string *)(v6 + 48));
            std::string::operator=((std::string *)&v57[56], (const std::string *)(v6 + 72));
            std::string::operator=((std::string *)&v57[80], (const std::string *)(v6 + 96));
            *(_WORD *)&v57[104] = *(_WORD *)(v6 + 120);
            sub_1003262CC((std::string *)&v57[112], (std::string *)(v6 + 128));
LABEL_59:
            uint64_t v5 = v47;
            a1 = v48;
            if (!BYTE8(v68))
            {
LABEL_60:
              uint64_t v26 = *(NSObject **)(v5 + 40);
              if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
              {
                uint64_t v46 = (std::locale::__imp *)&v69;
                if (v71 < 0) {
                  uint64_t v46 = (std::locale::__imp *)v69;
                }
                LODWORD(__dst[0].__locale_) = 136315138;
                *(std::locale::__imp **)((char *)&__dst[0].__locale_ + 4) = v46;
                _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "No Plans with Iccid hash %s, Aborting..", (uint8_t *)__dst, 0xCu);
              }
              sub_10024924C(a1 + 288, 1);
              sub_10032639C((uint64_t)buf);
              if (SHIBYTE(v71) < 0) {
                operator delete(v69);
              }
              goto LABEL_119;
            }
          }
          else
          {
            sub_10030C34C((char *)buf, (long long *)v6);
            BYTE8(v68) = 1;
            uint64_t v5 = v47;
            a1 = v48;
          }
          uint64_t v53 = 0;
          unint64_t v54 = 0;
          unint64_t v55 = 0;
          if (*(_DWORD *)(v5 + 2632) == 1) {
            char v27 = 17;
          }
          else {
            char v27 = 18;
          }
          if (*(unsigned char *)(a1 + 282) == 1) {
            char v28 = v27;
          }
          else {
            char v28 = 9;
          }
          if ((v57[7] & 0x80000000) != 0)
          {
            sub_10004FC84(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
          }
          else
          {
            *(_OWORD *)&__dst[0].__locale_ = *(_OWORD *)buf;
            uint64_t v78 = *(void *)v57;
          }
          if ((v57[31] & 0x80000000) != 0)
          {
            sub_10004FC84(&v79, *(void **)&v57[8], *(unint64_t *)&v57[16]);
          }
          else
          {
            long long v79 = *(_OWORD *)&v57[8];
            uint64_t v80 = *(void *)&v57[24];
          }
          memset(v83, 0, 25);
          *(_OWORD *)uint64_t v81 = 0u;
          memset(v82, 0, sizeof(v82));
          BYTE1(v83[3]) = 1;
          LOBYTE(v84[0]) = 0;
          char v98 = 0;
          unint64_t v29 = v54;
          if (v54 >= v55)
          {
            uint64_t v36 = 0x6F96F96F96F96F97 * ((uint64_t)(v54 - v53) >> 3);
            if ((unint64_t)(v36 + 1) > 0xD20D20D20D20D2) {
              sub_10006A748();
            }
            unint64_t v37 = 0xDF2DF2DF2DF2DF2ELL * ((uint64_t)(v55 - v53) >> 3);
            if (v37 <= v36 + 1) {
              unint64_t v37 = v36 + 1;
            }
            if ((unint64_t)(0x6F96F96F96F96F97 * ((uint64_t)(v55 - v53) >> 3)) >= 0x69069069069069) {
              unint64_t v38 = 0xD20D20D20D20D2;
            }
            else {
              unint64_t v38 = v37;
            }
            char v76 = &v55;
            if (v38) {
              long long v39 = (std::locale::__imp *)sub_10030C27C((uint64_t)&v55, v38);
            }
            else {
              long long v39 = 0;
            }
            long long v40 = (char *)v39 + 312 * v36;
            v72.__locale_ = v39;
            long long v73 = v40;
            __int16 v75 = (char *)v39 + 312 * v38;
            long long v41 = *(_OWORD *)&__dst[0].__locale_;
            *((void *)v40 + 2) = v78;
            *(_OWORD *)long long v40 = v41;
            __dst[1].__locale_ = 0;
            uint64_t v78 = 0;
            __dst[0].__locale_ = 0;
            long long v42 = v79;
            *((void *)v40 + 5) = v80;
            *(_OWORD *)(v40 + 24) = v42;
            uint64_t v80 = 0;
            long long v79 = 0uLL;
            long long v43 = *(_OWORD *)v81;
            *((void **)v40 + 8) = v82[0];
            *((_OWORD *)v40 + 3) = v43;
            v81[0] = 0;
            v81[1] = 0;
            v82[0] = 0;
            long long v44 = *(_OWORD *)&v82[1];
            *((void **)v40 + 11) = v82[3];
            *(_OWORD *)(v40 + 72) = v44;
            memset(&v82[1], 0, 24);
            long long v45 = *(_OWORD *)v83;
            *((void **)v40 + 14) = v83[2];
            *((_OWORD *)v40 + 6) = v45;
            memset(v83, 0, 24);
            *((_WORD *)v40 + 60) = v83[3];
            sub_10030F228(v40 + 128, (long long *)v84);
            uint64_t v74 = v40 + 312;
            sub_10030F708(&v53, &v72);
            unint64_t v35 = v54;
            sub_10030F890((uint64_t)&v72);
          }
          else
          {
            long long v30 = *(_OWORD *)&__dst[0].__locale_;
            *(void *)(v54 + 16) = v78;
            *(_OWORD *)unint64_t v29 = v30;
            __dst[1].__locale_ = 0;
            uint64_t v78 = 0;
            __dst[0].__locale_ = 0;
            uint64_t v31 = v80;
            *(_OWORD *)(v29 + 24) = v79;
            *(void *)(v29 + 40) = v31;
            uint64_t v80 = 0;
            long long v79 = 0uLL;
            long long v32 = *(_OWORD *)v81;
            *(void **)(v29 + 64) = v82[0];
            *(_OWORD *)(v29 + 48) = v32;
            v81[1] = 0;
            v82[0] = 0;
            v81[0] = 0;
            long long v33 = *(_OWORD *)&v82[1];
            *(void **)(v29 + 88) = v82[3];
            *(_OWORD *)(v29 + 72) = v33;
            memset(&v82[1], 0, 24);
            long long v34 = *(_OWORD *)v83;
            *(void **)(v29 + 112) = v83[2];
            *(_OWORD *)(v29 + 96) = v34;
            memset(v83, 0, 24);
            *(_WORD *)(v29 + 120) = v83[3];
            sub_10030F228((unsigned char *)(v29 + 128), (long long *)v84);
            unint64_t v35 = v29 + 312;
          }
          unint64_t v54 = v35;
          if (v98)
          {
            if (v97 < 0) {
              operator delete(v96);
            }
            if (v95 < 0) {
              operator delete(v94);
            }
            if (v93 < 0) {
              operator delete(v92);
            }
            if (v91 < 0) {
              operator delete(v90);
            }
            if (v89 < 0) {
              operator delete(v88);
            }
            if (v87 < 0) {
              operator delete(v86);
            }
            if (v85 < 0) {
              operator delete(v84[0]);
            }
          }
          if (SHIBYTE(v83[2]) < 0) {
            operator delete(v83[0]);
          }
          if (SHIBYTE(v82[3]) < 0) {
            operator delete(v82[1]);
          }
          if (SHIBYTE(v82[0]) < 0) {
            operator delete(v81[0]);
          }
          if (SHIBYTE(v80) < 0) {
            operator delete((void *)v79);
          }
          if (SHIBYTE(v78) < 0) {
            operator delete(__dst[0].__locale_);
          }
          *(void *)&long long v79 = 0;
          sub_1002E7D24(v5, &v53, v28, (uint64_t)__dst);
        }
      }
      else
      {
        uint64_t v15 = v11 - 1;
        uint64_t v16 = v9 - 1;
        uint64_t v17 = v10;
        char v18 = v8;
        while (sub_100326220(__dst, v18, v17))
        {
          ++v18;
          ++v17;
          if (v16)
          {
            uint64_t v19 = v15--;
            --v16;
            if (v19) {
              continue;
            }
          }
          goto LABEL_22;
        }
        std::locale::~locale(__dst);
        std::locale::~locale(&v72);
      }
      v6 += 312;
      if (v6 == v49) {
        goto LABEL_59;
      }
    }
  }
  int v20 = *a3;
  uint64_t v21 = *(NSObject **)(v5 + 40);
  if (v20)
  {
    if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Available profile(s) is ODA.", buf, 2u);
    }
    BOOL v22 = *(_DWORD *)(v5 + 2632) == 1;
    if (*(_DWORD *)(v5 + 2632) == 1) {
      char v23 = 17;
    }
    else {
      char v23 = 18;
    }
    if (*(unsigned char *)(a1 + 282) == 1) {
      uint8_t v24 = v23;
    }
    else {
      uint8_t v24 = 9;
    }
    *(_DWORD *)std::string buf = *(_DWORD *)(v5 + 580);
    uint8_t buf[4] = v24;
    buf[5] = 3;
    *(_OWORD *)long long v57 = 0uLL;
    *(void *)&uint8_t buf[8] = 0;
    v57[16] = 4;
    memset(&v57[24], 0, 100);
    __p[1] = 0;
    *(void *)&long long v59 = 0;
    BYTE8(v59) = 0;
    __p[0] = 0;
    *(_WORD *)((char *)&v59 + 9) = v22;
    sub_1002E4C70(v5 + 1792, (uint64_t)buf);
    if (SBYTE7(v59) < 0) {
      operator delete(__p[0]);
    }
    if ((v57[119] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[96]);
    }
    if ((v57[95] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[72]);
    }
    if ((v57[71] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[48]);
    }
    if ((v57[47] & 0x80000000) != 0) {
      operator delete(*(void **)&v57[24]);
    }
    if ((v57[15] & 0x80000000) != 0) {
      operator delete(*(void **)&buf[8]);
    }
    std::string::operator=((std::string *)(v5 + 1936), (const std::string *)(a1 + 16));
    char v25 = 0;
  }
  else
  {
    if (os_log_type_enabled(*(os_log_t *)(v5 + 40), OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "No profiles available on ALS, Aborting..", buf, 2u);
    }
    char v25 = 7;
  }
  sub_10024924C(a1 + 288, v25);
LABEL_119:
  *(void *)std::string buf = &v50;
  sub_1000C63B8((void ***)buf);
}

void sub_100325F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,int a62,__int16 a63)
{
  if (a73 < 0) {
    operator delete(__p);
  }
  a66 = (uint64_t)&a16;
  sub_1000C63B8((void ***)&a66);
  sub_10032639C((uint64_t)&a19);
  if (a65 < 0) {
    operator delete(a60);
  }
  a19 = (uint64_t)&a13;
  sub_1000C63B8((void ***)&a19);
  _Unwind_Resume(a1);
}

uint64_t sub_1003260CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032610C()
{
}

uint64_t sub_100326118(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_10030BBF8((char *)(a1 + 32), (long long *)(a2 + 32));
  sub_10031ECD8(a1 + 280, a2 + 280);
  return a1;
}

void sub_10032619C(_Unwind_Exception *a1)
{
  sub_10030BF00(v3);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(a1);
}

void sub_1003261C8(uint64_t a1)
{
  sub_100313668((void *)(a1 + 280));
  sub_10030BF00(a1 + 32);
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

BOOL sub_100326220(const std::locale *a1, char *a2, char *a3)
{
  uint64_t v5 = *a2;
  uint64_t v6 = std::locale::use_facet(a1, &std::ctype<char>::id);
  LODWORD(v5) = ((uint64_t (*)(const std::locale::facet *, uint64_t))v6->__vftable[1].~facet)(v6, v5);
  uint64_t v7 = *a3;
  uint64_t v8 = std::locale::use_facet(a1, &std::ctype<char>::id);
  return v5 == ((unsigned int (*)(const std::locale::facet *, uint64_t))v8->__vftable[1].~facet)(v8, v7);
}

std::string *sub_1003262CC(std::string *__dst, std::string *__str)
{
  uint64_t v3 = __dst;
  if (__dst[7].__r_.__value_.__s.__data_[8] == __str[7].__r_.__value_.__s.__data_[8])
  {
    if (__dst[7].__r_.__value_.__s.__data_[8])
    {
      std::string::operator=(__dst, __str);
      std::string::operator=(v3 + 1, __str + 1);
      std::string::operator=(v3 + 2, __str + 2);
      LODWORD(v3[3].__r_.__value_.__l.__data_) = __str[3].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)v3 + 80), (std::string *)((char *)__str + 80));
      std::string::operator=((std::string *)((char *)v3 + 104), (std::string *)((char *)__str + 104));
      std::string::operator=((std::string *)((char *)v3 + 128), (std::string *)((char *)__str + 128));
      return std::string::operator=((std::string *)((char *)v3 + 152), (std::string *)((char *)__str + 152));
    }
  }
  else if (__dst[7].__r_.__value_.__s.__data_[8])
  {
    long long __dst = (std::string *)sub_1000C64D4((uint64_t)__dst);
    v3[7].__r_.__value_.__s.__data_[8] = 0;
  }
  else
  {
    long long __dst = (std::string *)sub_10030C55C((char *)__dst, (long long *)__str);
    v3[7].__r_.__value_.__s.__data_[8] = 1;
  }
  return __dst;
}

uint64_t sub_10032639C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 312))
  {
    if (*(unsigned char *)(a1 + 304)) {
      sub_1000C64D4(a1 + 128);
    }
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    if (*(char *)(a1 + 95) < 0) {
      operator delete(*(void **)(a1 + 72));
    }
    if (*(char *)(a1 + 71) < 0) {
      operator delete(*(void **)(a1 + 48));
    }
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t sub_100326428(uint64_t a1)
{
  *(void *)a1 = off_1019B90A0;
  sub_1000558F4((const void **)(a1 + 16));
  return a1;
}

void sub_10032646C(uint64_t a1)
{
  *(void *)a1 = off_1019B90A0;
  sub_1000558F4((const void **)(a1 + 16));

  operator delete();
}

void *sub_1003264D0(uint64_t a1)
{
  uint64_t v2 = operator new(0x28uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)uint64_t v2 = off_1019B90A0;
  *((void *)v2 + 1) = v3;
  sub_100083DA4((const void **)v2 + 2, (const void **)(a1 + 16));
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  *((_DWORD *)v2 + 8) = *(_DWORD *)(a1 + 32);
  return v2;
}

const void **sub_100326538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)a2 = off_1019B90A0;
  *(void *)(a2 + 8) = v4;
  uint64_t result = sub_100083DA4((const void **)(a2 + 16), (const void **)(a1 + 16));
  uint64_t v6 = *(void *)(a1 + 24);
  *(_DWORD *)(a2 + 32) = *(_DWORD *)(a1 + 32);
  *(void *)(a2 + 24) = v6;
  return result;
}

const void **sub_100326598(uint64_t a1)
{
  return sub_1000558F4((const void **)(a1 + 16));
}

void sub_1003265A0(const void **a1)
{
  sub_1000558F4(a1 + 2);

  operator delete(a1);
}

void sub_1003265DC(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 432))
  {
    int v4 = *a2;
    v17[0] = 0;
    v17[1] = 0;
    uint64_t v18 = 0;
    if (*(unsigned char *)(a1 + 28)) {
      BOOL v5 = *(unsigned char *)(a1 + 29) == 0;
    }
    else {
      BOOL v5 = 1;
    }
    if (v5) {
      uint64_t v6 = "Continue";
    }
    else {
      uint64_t v6 = "Update";
    }
    sub_100058DB0(v17, v6);
    uint64_t v7 = *(void *)(v2 + 432);
    long long v19 = 0uLL;
    uint64_t v20 = 0;
    ctu::cf::assign();
    *(_OWORD *)uint64_t v15 = v19;
    uint64_t v16 = v20;
    uint64_t v8 = *(int *)(a1 + 32);
    uint64_t v9 = (char *)asString();
    sub_100058DB0(&v19, v9);
    sub_100058DB0(v13, "5001");
    if (v4) {
      uint64_t v10 = "Success";
    }
    else {
      uint64_t v10 = "Failed";
    }
    sub_100058DB0(__p, v10);
    (*(void (**)(uint64_t, void **, void **, uint64_t, long long *, void **, void **))(*(void *)v7 + 216))(v7, v17, v15, v8, &v19, v13, __p);
    if (v12 < 0) {
      operator delete(__p[0]);
    }
    if (v14 < 0) {
      operator delete(v13[0]);
    }
    if (SHIBYTE(v20) < 0) {
      operator delete((void *)v19);
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(v15[0]);
    }
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
  }
}

void sub_100326750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (*(char *)(v33 - 33) < 0) {
    operator delete(*(void **)(v33 - 56));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003267DC(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B9100)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10032681C()
{
  return &off_1019B9100;
}

uint64_t sub_100326828@<X0>(long long *a1@<X1>, void *a2@<X8>)
{
  int v4 = (char *)operator new(0x120uLL);
  uint64_t result = sub_100326884((uint64_t)v4, a1);
  *a2 = v4 + 24;
  a2[1] = v4;
  return result;
}

void sub_100326870(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100326884(uint64_t a1, long long *a2)
{
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = off_1019BB100;
  sub_1003268E0((char *)(a1 + 24), a2);
  return a1;
}

void sub_1003268CC(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

char *sub_1003268E0(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  *((void *)__dst + 12) = 0;
  *((void *)__dst + 13) = 0;
  *((void *)__dst + 14) = 0;
  sub_1000302C0(__dst + 96, *((long long **)a2 + 12), *((long long **)a2 + 13), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 13) - *((void *)a2 + 12)) >> 3));
  int v8 = *((_DWORD *)a2 + 30);
  __dst[124] = *((unsigned char *)a2 + 124);
  *((_DWORD *)__dst + 30) = v8;
  sub_100058198((const void **)__dst + 16, (const void **)a2 + 16);
  if (*((char *)a2 + 159) < 0)
  {
    sub_10004FC84(__dst + 136, *((void **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 136);
    *((void *)__dst + 19) = *((void *)a2 + 19);
    *(_OWORD *)(__dst + 136) = v9;
  }
  if (*((char *)a2 + 183) < 0)
  {
    sub_10004FC84(__dst + 160, *((void **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v10 = a2[10];
    *((void *)__dst + 22) = *((void *)a2 + 22);
    *((_OWORD *)__dst + 10) = v10;
  }
  *((_DWORD *)__dst + 46) = *((_DWORD *)a2 + 46);
  if (*((char *)a2 + 215) < 0)
  {
    sub_10004FC84(__dst + 192, *((void **)a2 + 24), *((void *)a2 + 25));
  }
  else
  {
    long long v11 = a2[12];
    *((void *)__dst + 26) = *((void *)a2 + 26);
    *((_OWORD *)__dst + 12) = v11;
  }
  if (*((char *)a2 + 239) < 0)
  {
    sub_10004FC84(__dst + 216, *((void **)a2 + 27), *((void *)a2 + 28));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 216);
    *((void *)__dst + 29) = *((void *)a2 + 29);
    *(_OWORD *)(__dst + 216) = v12;
  }
  uint64_t v13 = __dst + 240;
  if (*((char *)a2 + 263) < 0)
  {
    sub_10004FC84(v13, *((void **)a2 + 30), *((void *)a2 + 31));
  }
  else
  {
    long long v14 = a2[15];
    *((void *)__dst + 32) = *((void *)a2 + 32);
    *(_OWORD *)uint64_t v13 = v14;
  }
  return __dst;
}

void sub_100326B2C(_Unwind_Exception *a1, void **a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 239) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 215) < 0) {
    operator delete(*v9);
  }
  if (*(char *)(v2 + 183) < 0) {
    operator delete(*v8);
  }
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*v7);
  }
  sub_100057D78(v6);
  sub_100047F64((void ***)va);
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 71) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 47) < 0) {
    operator delete(*a2);
  }
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t *sub_100326C10(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v15 = a1;
  uint64_t v16 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = sub_1002DF3BC(*(void *)v1, 1);
  char v4 = v3;
  if (v3) {
    goto LABEL_2;
  }
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v1 + 31)) {
      goto LABEL_6;
    }
LABEL_11:
    char v4 = 36;
LABEL_2:
    sub_10024924C(v1 + 56, v4);
    goto LABEL_3;
  }
  if (!*(void *)(v1 + 16)) {
    goto LABEL_11;
  }
LABEL_6:
  v29[0] = 0;
  v29[1] = 0;
  char v30 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v29);
  if (!v30)
  {
    sub_10024924C(v1 + 56, 16);
    goto LABEL_3;
  }
  uint64_t v26 = 0;
  char v27 = 0;
  sub_100324590(&v26);
  long long v21 = 0u;
  long long v22 = 0u;
  memset(v23, 0, sizeof(v23));
  long long __p = 0u;
  long long v25 = 0u;
  BOOL v6 = *(_DWORD *)(v2 + 2632) == 1;
  LODWORD(v21) = *(_DWORD *)(v2 + 580);
  WORD2(v21) = 774;
  long long v22 = 0uLL;
  *((void *)&v21 + 1) = 0;
  LOBYTE(v23[0]) = 4;
  memset(&v23[1], 0, 100);
  long long __p = 0uLL;
  BYTE8(v25) = 0;
  *(void *)&long long v25 = 0;
  BYTE9(v25) = v6;
  std::string::operator=(v26, (const std::string *)(v1 + 8));
  if ((*(char *)(v1 + 55) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v1 + 55)) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  if (*(void *)(v1 + 40)) {
LABEL_14:
  }
    std::string::operator=(v26 + 2, (const std::string *)(v1 + 32));
LABEL_15:
  v28[0] = 0;
  BOOL v7 = sub_1002DE6C4(v2, (uint64_t)v28);
  v26[5].__r_.__value_.__s.__data_[3] = v7;
  sub_1000C5D34(v28);
  int v8 = v26;
  std::string::size_type size = v26[4].__r_.__value_.__l.__size_;
  if (size >= v26[4].__r_.__value_.__r.__words[2])
  {
    uint64_t v10 = sub_10030B97C((uint64_t *)&v26[4]);
  }
  else
  {
    sub_100058DB0((void *)v26[4].__r_.__value_.__l.__size_, "89");
    uint64_t v10 = size + 24;
    v8[4].__r_.__value_.__l.__size_ = size + 24;
  }
  v8[4].__r_.__value_.__l.__size_ = v10;
  v26[5].__r_.__value_.__s.__data_[2] = 0;
  long long v11 = (char *)encodeProfileEligibilityCheckAction();
  sub_10003ED78((std::string *)((char *)v26 + 160), v11);
  if (*(void *)(v2 + 680))
  {
    sub_10024924C(v1 + 56, 0);
    uint64_t v12 = *(void *)(v2 + 680);
    long long v19 = v26;
    uint64_t v20 = v27;
    if (v27) {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100311AFC((uint64_t)v17, (int *)&v21);
    char v18 = 1;
    (*(void (**)(uint64_t, std::string **, unsigned char *))(*(void *)v12 + 192))(v12, &v19, v17);
    sub_10030AEBC((uint64_t)v17);
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
  else
  {
    if (sub_1002E3B1C(v2, 0))
    {
      if (*(char *)(v2 + 615) < 0)
      {
        **(unsigned char **)(v2 + 592) = 0;
        *(void *)(v2 + 600) = 0;
      }
      else
      {
        *(unsigned char *)(v2 + 592) = 0;
        *(unsigned char *)(v2 + 615) = 0;
      }
      *(unsigned char *)(v2 + 1706) = 1;
      (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
      uint64_t v14 = *(void *)(v2 + 680);
      long long v19 = v26;
      uint64_t v20 = v27;
      if (v27) {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      sub_100311AFC((uint64_t)v17, (int *)&v21);
      char v18 = 1;
      (*(void (**)(uint64_t, void *, std::string **, void, unsigned char *))(*(void *)v14 + 32))(v14, v29, &v19, 0, v17);
      sub_10030AEBC((uint64_t)v17);
      if (v20) {
        sub_10004D2C8(v20);
      }
      sub_1002DA408(v2);
      char v13 = 0;
    }
    else
    {
      char v13 = 5;
    }
    sub_10024924C(v1 + 56, v13);
  }
  if (SBYTE7(v25) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v23[12]) < 0) {
    operator delete(v23[10]);
  }
  if (SHIBYTE(v23[9]) < 0) {
    operator delete(v23[7]);
  }
  if (SHIBYTE(v23[6]) < 0) {
    operator delete(v23[4]);
  }
  if (SHIBYTE(v23[3]) < 0) {
    operator delete(v23[1]);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(*((void **)&v21 + 1));
  }
  if (v27) {
    sub_10004D2C8(v27);
  }
LABEL_3:
  sub_100327148(&v16);
  return sub_100046B58((uint64_t *)&v15);
}

void sub_100327050(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,void *a38,uint64_t a39,int a40,__int16 a41,char a42,char a43,uint64_t a44,void *a45,uint64_t a46,int a47,__int16 a48,char a49,char a50,void *a51,uint64_t a52,int a53,__int16 a54,char a55,char a56,void *a57,uint64_t a58,int a59,__int16 a60,char a61,char a62,void *a63)
{
  sub_10030AEBC((uint64_t)&a12);
  if (a36) {
    sub_10004D2C8((std::__shared_weak_count *)a36);
  }
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a68 < 0) {
    operator delete(a63);
  }
  if (a62 < 0) {
    operator delete(a57);
  }
  if (a56 < 0) {
    operator delete(a51);
  }
  if (a50 < 0) {
    operator delete(a45);
  }
  if (a43 < 0) {
    operator delete(a38);
  }
  if (a73) {
    sub_10004D2C8((std::__shared_weak_count *)a73);
  }
  sub_100327148(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100327148(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 56));
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_1003271B8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_1019B9120;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_1003271D8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_1019B9120;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t *sub_100327234(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v29 = a1;
  uint64_t v30 = v1;
  uint64_t v2 = *(void *)v1;
  int v3 = operator new(0x20uLL);
  *((void *)v3 + 1) = 0;
  *((void *)v3 + 2) = 0;
  *(void *)int v3 = off_1019B9120;
  *((unsigned char *)v3 + 24) = 0;
  uint64_t v4 = *(void *)(v1 + 8);
  uint64_t v5 = *(void *)(v1 + 16);
  if (v4 != v5)
  {
    char v28 = (int *)(v2 + 1792);
    while (1)
    {
      int v6 = sub_1002DF3BC(v2, 1);
      if (v6)
      {
        *((unsigned char *)v3 + 24) = v6;
        goto LABEL_77;
      }
      if (*(char *)(v4 + 23) < 0)
      {
        if (!*(void *)(v4 + 8))
        {
LABEL_16:
          char v10 = 36;
LABEL_18:
          *((unsigned char *)v3 + 24) = v10;
          goto LABEL_77;
        }
      }
      else if (!*(unsigned char *)(v4 + 23))
      {
        goto LABEL_16;
      }
      v66[0] = 0;
      v66[1] = 0;
      char v67 = 0;
      (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v66);
      if (!v67)
      {
        char v10 = 16;
        goto LABEL_18;
      }
      long long v45 = 0;
      long long v44 = 0;
      sub_100324590(&v44);
      uint64_t v43 = 0;
      long long v41 = 0u;
      long long v42 = 0u;
      long long v39 = 0u;
      long long v40 = 0u;
      memset(v38, 0, sizeof(v38));
      memset(v37, 0, sizeof(v37));
      if (!*(unsigned char *)(v2 + 1968)) {
        goto LABEL_23;
      }
      uint64_t v7 = *(void *)(v2 + 416);
      int v8 = *(std::__shared_weak_count **)(v2 + 424);
      if (v8) {
        atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v7) {
        break;
      }
      (*(void (**)(uint8_t *__return_ptr))(*(void *)v7 + 168))(buf);
      if (!v65) {
        goto LABEL_20;
      }
      sub_10030D10C((uint64_t)buf);
      char v9 = 0;
      if (v8) {
        goto LABEL_21;
      }
LABEL_22:
      if ((v9 & 1) == 0)
      {
        if ((_BYTE)v43)
        {
          LODWORD(v37[0]) = *v28;
          WORD2(v37[0]) = *(_WORD *)(v2 + 1796);
          std::string::operator=((std::string *)((char *)v37 + 8), (const std::string *)(v2 + 1800));
          LOBYTE(v37[2]) = *(unsigned char *)(v2 + 1824);
          std::string::operator=((std::string *)((char *)&v37[2] + 8), (const std::string *)(v2 + 1832));
          std::string::operator=(v38, (const std::string *)(v2 + 1856));
          std::string::operator=(&v38[1], (const std::string *)(v2 + 1880));
          std::string::operator=((std::string *)&v39, (const std::string *)(v2 + 1904));
          DWORD2(v40) = *(_DWORD *)(v2 + 1928);
          std::string::operator=((std::string *)&v41, (const std::string *)(v2 + 1936));
          WORD4(v42) = *(_WORD *)(v2 + 1960);
          BYTE10(v42) = *(unsigned char *)(v2 + 1962);
        }
        else
        {
          sub_100311AFC((uint64_t)v37, v28);
          LOBYTE(v43) = 1;
        }
        sub_10030C110((uint64_t)v28);
        goto LABEL_39;
      }
LABEL_23:
      char v11 = *(unsigned char *)(v1 + 32);
      BOOL v12 = *(_DWORD *)(v2 + 2632) == 1;
      *(_DWORD *)std::string buf = *(_DWORD *)(v2 + 580);
      v48[0] = v11;
      v48[1] = 3;
      uint64_t v49 = 0;
      uint64_t v50 = 0;
      *(void *)&v48[4] = 0;
      char v51 = 4;
      long long v52 = 0u;
      long long v53 = 0u;
      long long v54 = 0u;
      long long v55 = 0u;
      long long v56 = 0u;
      long long v57 = 0u;
      int v58 = 0;
      long long __p = 0;
      uint64_t v60 = 0;
      char v62 = 0;
      uint64_t v61 = 0;
      BOOL v63 = v12;
      char v64 = 0;
      sub_1002E4C70((uint64_t)v37, (uint64_t)buf);
      if (SHIBYTE(v61) < 0) {
        operator delete(__p);
      }
      if (SHIBYTE(v57) < 0) {
        operator delete(*((void **)&v56 + 1));
      }
      if (SBYTE7(v56) < 0) {
        operator delete((void *)v55);
      }
      if (SHIBYTE(v54) < 0) {
        operator delete(*((void **)&v53 + 1));
      }
      if (SBYTE7(v53) < 0) {
        operator delete((void *)v52);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(*(void **)&v48[4]);
      }
LABEL_39:
      std::string::operator=(v44, (const std::string *)v4);
      if (*(char *)(v4 + 47) < 0)
      {
        if (!*(void *)(v4 + 32)) {
          goto LABEL_44;
        }
LABEL_43:
        std::string::operator=(v44 + 2, (const std::string *)(v4 + 24));
        goto LABEL_44;
      }
      if (*(unsigned char *)(v4 + 47)) {
        goto LABEL_43;
      }
LABEL_44:
      v46[0] = 0;
      BOOL v13 = sub_1002DE6C4(v2, (uint64_t)v46);
      v44[5].__r_.__value_.__s.__data_[3] = v13;
      sub_1000C5D34(v46);
      if (!*(unsigned char *)(v4 + 304)) {
        goto LABEL_54;
      }
      char v14 = *(unsigned char *)(v4 + 151);
      if (v14 < 0)
      {
        if (!*(void *)(v4 + 136))
        {
LABEL_54:
          uint64_t v17 = v44;
          std::string::size_type size = v44[4].__r_.__value_.__l.__size_;
          if (size >= v44[4].__r_.__value_.__r.__words[2])
          {
            uint64_t v20 = sub_10030B97C((uint64_t *)&v44[4]);
          }
          else
          {
            sub_100058DB0((void *)v44[4].__r_.__value_.__l.__size_, "89");
            uint64_t v20 = size + 24;
            v17[4].__r_.__value_.__l.__size_ = size + 24;
          }
          goto LABEL_58;
        }
      }
      else if (!*(unsigned char *)(v4 + 151))
      {
        goto LABEL_54;
      }
      uint64_t v15 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v16 = v4 + 128;
        if (v14 < 0) {
          uint64_t v16 = *(void *)(v4 + 128);
        }
        *(_DWORD *)std::string buf = 136315138;
        *(void *)uint64_t v48 = v16;
        _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Recieved ICCID (%s) for ALS plan", buf, 0xCu);
      }
      uint64_t v17 = v44;
      char v18 = v44 + 4;
      std::string::size_type v19 = v44[4].__r_.__value_.__l.__size_;
      if (v19 >= v44[4].__r_.__value_.__r.__words[2])
      {
        uint64_t v20 = sub_10030E9EC((uint64_t *)v18, (long long *)(v4 + 128));
      }
      else
      {
        sub_1000D87F8(v18, (long long *)(v4 + 128));
        uint64_t v20 = v19 + 24;
      }
LABEL_58:
      v17[4].__r_.__value_.__l.__size_ = v20;
      long long v22 = v44;
      v44[5].__r_.__value_.__s.__data_[2] = 0;
      if (*(unsigned char *)(v4 + 304)) {
        std::string::operator=((std::string *)((char *)v22 + 136), (const std::string *)(v4 + 152));
      }
      char v23 = (char *)encodeProfileEligibilityCheckAction();
      sub_10003ED78((std::string *)((char *)v44 + 160), v23);
      uint64_t v24 = *(void *)(v2 + 680);
      if (v24)
      {
        *((unsigned char *)v3 + 24) = 0;
        unint64_t v35 = v44;
        uint64_t v36 = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_10030BBA0(v34, (uint64_t)v37);
        (*(void (**)(uint64_t, std::string **, unsigned char *))(*(void *)v24 + 192))(v24, &v35, v34);
        sub_10030AEBC((uint64_t)v34);
        if (v36) {
          sub_10004D2C8(v36);
        }
        int v25 = 3;
      }
      else if (sub_1002E3B1C(v2, 0))
      {
        *(unsigned char *)(v2 + 1706) = 1;
        (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
        uint64_t v26 = *(void *)(v2 + 680);
        long long v32 = v44;
        uint64_t v33 = v45;
        if (v45) {
          atomic_fetch_add_explicit(&v45->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_10030BBA0(v31, (uint64_t)v37);
        (*(void (**)(uint64_t, void *, std::string **, void, unsigned char *))(*(void *)v26 + 32))(v26, v66, &v32, 0, v31);
        sub_10030AEBC((uint64_t)v31);
        if (v33) {
          sub_10004D2C8(v33);
        }
        sub_1002DA408(v2);
        int v25 = 0;
      }
      else
      {
        *((unsigned char *)v3 + 24) = 5;
        int v25 = 2;
      }
      sub_10030AEBC((uint64_t)v37);
      if (v45) {
        sub_10004D2C8(v45);
      }
      if (v25 != 3 && v25) {
        goto LABEL_78;
      }
LABEL_77:
      v4 += 312;
      if (v4 == v5) {
        goto LABEL_78;
      }
    }
    buf[0] = 0;
    char v65 = 0;
LABEL_20:
    char v9 = 1;
    if (!v8) {
      goto LABEL_22;
    }
LABEL_21:
    sub_10004D2C8(v8);
    goto LABEL_22;
  }
LABEL_78:
  if (*(void *)(v1 + 64)) {
    sub_10024924C(v1 + 40, *((unsigned char *)v3 + 24));
  }
  sub_10004D2C8((std::__shared_weak_count *)v3);
  sub_1003279F0(&v30);
  return sub_100046B58((uint64_t *)&v29);
}

void sub_100327930(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,std::__shared_weak_count *a53)
{
  sub_10030AEBC((uint64_t)&a29);
  if (a53) {
    sub_10004D2C8(a53);
  }
  sub_10030AEBC((uint64_t)&STACK[0x230]);
  if (STACK[0x2F0]) {
    sub_10004D2C8((std::__shared_weak_count *)STACK[0x2F0]);
  }
  sub_10004D2C8(v53);
  sub_1003279F0(&a28);
  sub_100046B58(&a27);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003279F0(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 40));
    uint64_t v2 = (void **)(v1 + 8);
    sub_1000C63B8(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_100327A58(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100327AF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100327B70(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v9 = a1;
  uint64_t v10 = v1;
  uint64_t v2 = *(void *)v1;
  v18[0] = 0;
  v18[1] = 0;
  char v19 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v18);
  if (!v19)
  {
    uint64_t v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Missing CSN", buf, 2u);
    }
    __int16 v4 = 272;
    goto LABEL_21;
  }
  int v3 = sub_1002DF3BC(v2, 0);
  if (v3)
  {
    __int16 v4 = v3 | 0x100;
LABEL_21:
    sub_100327EFC(*(void *)(v1 + 56), v4);
    goto LABEL_22;
  }
  if (!sub_1002E3B1C(v2, 0))
  {
    __int16 v4 = 261;
    goto LABEL_21;
  }
  *(unsigned char *)(v2 + 1706) = 1;
  *(_OWORD *)BOOL v13 = 0u;
  long long v14 = 0u;
  memset(v15, 0, sizeof(v15));
  *(_OWORD *)long long __p = 0u;
  long long v17 = 0u;
  BOOL v6 = *(_DWORD *)(v2 + 2632) == 1;
  LODWORD(v13[0]) = *(_DWORD *)(v2 + 580);
  WORD2(v13[0]) = 773;
  long long v14 = 0uLL;
  v13[1] = 0;
  LOBYTE(v15[0]) = 3;
  memset(&v15[1], 0, 100);
  __p[0] = 0;
  __p[1] = 0;
  BYTE8(v17) = 0;
  *(void *)&long long v17 = 0;
  BYTE9(v17) = v6;
  std::string::operator=((std::string *)__p, (const std::string *)(v1 + 8));
  uint64_t v7 = *(void *)(v2 + 680);
  sub_100311AFC((uint64_t)buf, (int *)v13);
  char v12 = 1;
  (*(void (**)(uint64_t, void *, uint8_t *))(*(void *)v7 + 40))(v7, v18, buf);
  sub_10030AEBC((uint64_t)buf);
  sub_100327EFC(*(void *)(v1 + 56), 0);
  if (SBYTE7(v17) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v15[12]) < 0) {
    operator delete(v15[10]);
  }
  if (SHIBYTE(v15[9]) < 0) {
    operator delete(v15[7]);
  }
  if (SHIBYTE(v15[6]) < 0) {
    operator delete(v15[4]);
  }
  if (SHIBYTE(v15[3]) < 0) {
    operator delete(v15[1]);
  }
  if (SHIBYTE(v14) < 0) {
    operator delete(v13[1]);
  }
LABEL_22:
  sub_100327E9C(&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_100327E08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, __int16 a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,uint64_t a42,void *a43,uint64_t a44,int a45,__int16 a46,char a47,char a48,void *a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,void *a55,uint64_t a56,int a57,__int16 a58,char a59,char a60,void *a61,uint64_t a62,int a63)
{
  sub_10030AEBC((uint64_t)&a11);
  if (a72 < 0) {
    operator delete(__p);
  }
  if (a66 < 0) {
    operator delete(a61);
  }
  if (a60 < 0) {
    operator delete(a55);
  }
  if (a54 < 0) {
    operator delete(a49);
  }
  if (a48 < 0) {
    operator delete(a43);
  }
  if (a41 < 0) {
    operator delete(a36);
  }
  sub_100327E9C(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100327E9C(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030C77C((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100327EFC(uint64_t a1, __int16 a2)
{
  __int16 v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)a1 + 48))(a1, &v3);
}

_OWORD *sub_100327F4C(uint64_t **a1, void **a2, uint64_t a3, _OWORD **a4)
{
  uint64_t v13 = 0;
  BOOL v6 = (void **)sub_100046ED4((uint64_t)a1, &v13, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    int v8 = (uint64_t **)v6;
    _DWORD v12[2] = 1;
    uint64_t v7 = operator new(0x50uLL);
    v12[1] = a1 + 1;
    char v9 = *a4;
    uint64_t v10 = *((void *)*a4 + 2);
    xpc_object_t v7[2] = **a4;
    *((void *)v7 + 6) = v10;
    v9[1] = 0;
    _DWORD v9[2] = 0;
    *char v9 = 0;
    *((void *)v7 + 7) = 0;
    *((void *)v7 + 8) = 0;
    *((void *)v7 + 9) = 0;
    sub_100046C38(a1, v13, v8, (uint64_t *)v7);
    v12[0] = 0;
    sub_10010E764((uint64_t)v12, 0);
  }
  return v7;
}

uint64_t sub_100328018(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003280B0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100328130(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v28 = a1;
  uint64_t v29 = v1;
  uint64_t v3 = (void *)(v1 + 8);
  uint64_t v2 = *(void *)v1;
  bzero(v47, 0x318uLL);
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 416))(v47);
  if (v54)
  {
    v34[0] = 0;
    v34[1] = 0;
    uint64_t v33 = (uint64_t *)v34;
    if (v53) {
      sub_100328AC0(&v33, v51, &v52);
    }
    v45[0] = 0;
    v45[1] = 0;
    char v46 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 360))(v45);
    if (!v46)
    {
      uint64_t v15 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v15, OS_LOG_TYPE_ERROR))
      {
        if (*(char *)(v1 + 31) < 0) {
          uint64_t v3 = (void *)*v3;
        }
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = v3;
        _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Invalid CSN for ICCID (%s)", (uint8_t *)__p, 0xCu);
      }
      __p[0] = 0;
      v38[0] = 0;
      sub_1002E8348(v1 + 32, (uint64_t)__p, (uint64_t)v38, 262);
      goto LABEL_57;
    }
    if (v48 == 2) {
      goto LABEL_42;
    }
    sub_100058DB0(__p, "ICCID");
    v38[0] = __p;
    uint64_t v4 = sub_100327F4C(&v33, __p, (uint64_t)&unk_10144E20E, (_OWORD **)v38);
    std::string::operator=((std::string *)((char *)v4 + 56), (const std::string *)(v1 + 8));
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
    ctu::hex((uint64_t *)__p, (ctu *)v45, (const void *)0x10, v5);
    sub_100058DB0(v38, "CSN");
    cf[0] = v38;
    BOOL v6 = sub_100327F4C(&v33, (void **)v38, (uint64_t)&unk_10144E20E, (_OWORD **)cf);
    uint64_t v7 = (char *)v6 + 56;
    if (*((char *)v6 + 79) < 0) {
      operator delete(*(void **)v7);
    }
    *(_OWORD *)uint64_t v7 = *(_OWORD *)__p;
    *((void *)v7 + 2) = v43;
    HIBYTE(v43) = 0;
    LOBYTE(__p[0]) = 0;
    if (SHIBYTE(v39) < 0)
    {
      operator delete((void *)v38[0]);
      if (SHIBYTE(v43) < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v8 = *(void *)(v2 + 2328);
    if (v8)
    {
      uint64_t v9 = v2 + 2328;
      do
      {
        int v10 = *(_DWORD *)(v8 + 32);
        BOOL v11 = v10 < 1;
        if (v10 >= 1) {
          char v12 = (uint64_t *)v8;
        }
        else {
          char v12 = (uint64_t *)(v8 + 8);
        }
        if (!v11) {
          uint64_t v9 = v8;
        }
        uint64_t v8 = *v12;
      }
      while (*v12);
      if (v9 != v2 + 2328 && *(int *)(v9 + 32) <= 1)
      {
        sub_100058DB0(__p, "IMEI");
        v38[0] = __p;
        uint64_t v13 = sub_100327F4C(&v33, __p, (uint64_t)&unk_10144E20E, (_OWORD **)v38);
        std::string::operator=((std::string *)((char *)v13 + 56), (const std::string *)(v9 + 40));
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
      }
    }
    if (*(unsigned char *)(v2 + 2368))
    {
      if ((*(char *)(v2 + 2367) & 0x80000000) == 0)
      {
        if (!*(unsigned char *)(v2 + 2367)) {
          goto LABEL_36;
        }
LABEL_34:
        sub_100058DB0(__p, "MEID");
        v38[0] = __p;
        uint64_t v16 = sub_100327F4C(&v33, __p, (uint64_t)&unk_10144E20E, (_OWORD **)v38);
        std::string::operator=((std::string *)((char *)v16 + 56), (const std::string *)(v2 + 2344));
        if (SHIBYTE(v43) < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_36;
      }
      if (*(void *)(v2 + 2352)) {
        goto LABEL_34;
      }
    }
LABEL_36:
    if (*(char *)(v2 + 1559) < 0)
    {
      if (!*(void *)(v2 + 1544)) {
        goto LABEL_42;
      }
    }
    else if (!*(unsigned char *)(v2 + 1559))
    {
      goto LABEL_42;
    }
    sub_100058DB0(__p, "countryCode");
    v38[0] = __p;
    long long v17 = sub_100327F4C(&v33, __p, (uint64_t)&unk_10144E20E, (_OWORD **)v38);
    std::string::operator=((std::string *)((char *)v17 + 56), (const std::string *)(v2 + 1536));
    if (SHIBYTE(v43) < 0) {
      operator delete(__p[0]);
    }
LABEL_42:
    int v18 = sub_1002DF3BC(v2, 0);
    if (v18)
    {
      __p[0] = 0;
      v38[0] = 0;
      sub_1002E8348(v1 + 32, (uint64_t)__p, (uint64_t)v38, v18 | 0x100);
    }
    else
    {
      if (sub_1002E3B1C(v2, 0))
      {
        *(unsigned char *)(v2 + 1706) = 1;
        uint64_t v19 = *(void *)(v2 + 680);
        LOBYTE(__p[0]) = 0;
        char v44 = 0;
        (*(void (**)(uint64_t, void *, void **))(*(void *)v19 + 40))(v19, v45, __p);
        sub_10030AEBC((uint64_t)__p);
        long long v32 = 0;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          long long v21 = v33;
          if (v33 != (uint64_t *)v34)
          {
            do
            {
              cf[0] = 0;
              v38[0] = 0;
              ctu::cf::convert_copy();
              cf[0] = v38[0];
              __dst[0] = 0;
              v38[0] = 0;
              ctu::cf::convert_copy();
              __dst[0] = (void *)v38[0];
              sub_100328D40(Mutable, (void *)cf[0], (uint64_t)v38[0]);
              sub_10010F494((const void **)__dst);
              sub_10010F494(cf);
              long long v22 = (uint64_t *)v21[1];
              if (v22)
              {
                do
                {
                  char v23 = v22;
                  long long v22 = (uint64_t *)*v22;
                }
                while (v22);
              }
              else
              {
                do
                {
                  char v23 = (uint64_t *)v21[2];
                  BOOL v24 = *v23 == (void)v21;
                  long long v21 = v23;
                }
                while (!v24);
              }
              long long v21 = v23;
            }
            while (v23 != (uint64_t *)v34);
          }
          int v25 = v32;
          long long v32 = Mutable;
          v38[0] = v25;
          sub_10005717C(v38);
        }
        if (SHIBYTE(v50) < 0)
        {
          sub_10004FC84(__dst, (void *)v49, *((unint64_t *)&v49 + 1));
        }
        else
        {
          *(_OWORD *)long long __dst = v49;
          uint64_t v31 = v50;
        }
        if (SHIBYTE(v31) < 0)
        {
          sub_10004FC84(cf, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)CFTypeRef cf = *(_OWORD *)__dst;
          uint64_t v37 = v31;
        }
        unint64_t v35 = 0;
        if (SHIBYTE(v37) < 0)
        {
          sub_10004FC84(v38, (void *)cf[0], (unint64_t)cf[1]);
        }
        else
        {
          *(_OWORD *)unint64_t v38 = *(_OWORD *)cf;
          uint64_t v39 = v37;
        }
        long long v40 = 0;
        if (ctu::cf::convert_copy())
        {
          char v27 = v35;
          unint64_t v35 = v40;
          long long v41 = v27;
          sub_1000558F4(&v41);
        }
        if (SHIBYTE(v39) < 0) {
          operator delete((void *)v38[0]);
        }
        long long v41 = v35;
        unint64_t v35 = 0;
        sub_1000558F4(&v35);
        if (SHIBYTE(v37) < 0) {
          operator delete((void *)cf[0]);
        }
        sub_10004EFE4(v38, (CFTypeRef *)&v32);
        sub_1002E8348(v1 + 32, (uint64_t)&v41, (uint64_t)v38, 0);
        sub_100057D78(v38);
        sub_1000558F4(&v41);
        if (SHIBYTE(v31) < 0) {
          operator delete(__dst[0]);
        }
        sub_10005717C((const void **)&v32);
        goto LABEL_58;
      }
      __p[0] = 0;
      v38[0] = 0;
      sub_1002E8348(v1 + 32, (uint64_t)__p, (uint64_t)v38, 261);
    }
LABEL_57:
    sub_100057D78(v38);
    sub_1000558F4((const void **)__p);
LABEL_58:
    sub_10010C0E0((uint64_t)&v33, v34[0]);
    goto LABEL_59;
  }
  long long v14 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v3 = (void *)*v3;
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v3;
    _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Missing websheet info - invalid ICCID (%s)", (uint8_t *)__p, 0xCu);
  }
  __p[0] = 0;
  v38[0] = 0;
  sub_1002E8348(v1 + 32, (uint64_t)__p, (uint64_t)v38, 262);
  sub_100057D78(v38);
  sub_1000558F4((const void **)__p);
LABEL_59:
  sub_10030AF48((uint64_t)v47);
  sub_100328A60(&v29);
  return sub_100046B58((uint64_t *)&v28);
}

void sub_1003288E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, __int16 a18, uint64_t a19, uint64_t a20,const void *a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,void *a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,char a61)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_10005717C(&a17);
  sub_10010C0E0((uint64_t)&a18, (void *)a19);
  sub_10030AF48((uint64_t)&a61);
  sub_100328A60(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100328A58()
{
}

uint64_t *sub_100328A60(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030C800((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t **sub_100328AC0(uint64_t **result, long long *a2, long long *a3)
{
  unint64_t v5 = result;
  if (result[2])
  {
    BOOL v6 = *result;
    uint64_t v7 = result[1];
    unsigned char *result = (uint64_t *)(result + 1);
    xpc_object_t v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v8 = (uint64_t *)v6[1];
    }
    else {
      uint64_t v8 = v6;
    }
    uint64_t v15 = result;
    uint64_t v16 = v8;
    long long v17 = v8;
    if (v8)
    {
      uint64_t v16 = sub_1000EA590((uint64_t)v8);
      if (a2 != a3)
      {
        uint64_t v9 = a2;
        do
        {
          std::string::operator=((std::string *)(v8 + 4), (const std::string *)(v9 + 2));
          std::string::operator=((std::string *)(v8 + 7), (const std::string *)((char *)v9 + 56));
          uint64_t v18 = 0;
          int v10 = (uint64_t **)sub_1000EA518((uint64_t)v5, &v18, v17 + 4);
          sub_100046C38(v5, v18, v10, v17);
          long long v17 = v16;
          if (v16) {
            uint64_t v16 = sub_1000EA590((uint64_t)v16);
          }
          BOOL v11 = (long long *)*((void *)v9 + 1);
          if (v11)
          {
            do
            {
              a2 = v11;
              BOOL v11 = *(long long **)v11;
            }
            while (v11);
          }
          else
          {
            do
            {
              a2 = (long long *)*((void *)v9 + 2);
              BOOL v12 = *(void *)a2 == (void)v9;
              uint64_t v9 = a2;
            }
            while (!v12);
          }
          uint64_t v8 = v17;
          if (v17) {
            BOOL v12 = a2 == a3;
          }
          else {
            BOOL v12 = 1;
          }
          uint64_t v9 = a2;
        }
        while (!v12);
      }
    }
    uint64_t result = (uint64_t **)sub_100236D64((uint64_t)&v15);
  }
  if (a2 != a3)
  {
    do
    {
      uint64_t result = (uint64_t **)sub_100328C54(v5, a2 + 2);
      uint64_t v13 = (long long *)*((void *)a2 + 1);
      if (v13)
      {
        do
        {
          long long v14 = v13;
          uint64_t v13 = *(long long **)v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          long long v14 = (long long *)*((void *)a2 + 2);
          BOOL v12 = *(void *)v14 == (void)a2;
          a2 = v14;
        }
        while (!v12);
      }
      a2 = v14;
    }
    while (v14 != a3);
  }
  return result;
}

void sub_100328C40(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

char *sub_100328C54(uint64_t **a1, long long *a2)
{
  memset(v7, 0, sizeof(v7));
  sub_100328CCC((uint64_t)a1, a2, v7);
  uint64_t v6 = 0;
  uint64_t v3 = (uint64_t **)sub_1000EA518((uint64_t)a1, &v6, (void *)v7[0] + 4);
  sub_100046C38(a1, v6, v3, (uint64_t *)v7[0]);
  uint64_t v4 = v7[0];
  v7[0] = 0;
  sub_10010E764((uint64_t)v7, 0);
  return v4;
}

char *sub_100328CCC@<X0>(uint64_t a1@<X0>, long long *a2@<X1>, char **a3@<X8>)
{
  unint64_t v5 = (char *)(a1 + 8);
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v6 = (char *)operator new(0x50uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t result = sub_100236948(v6 + 32, a2);
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_100328D28(_Unwind_Exception *a1)
{
  sub_10010E764(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100328D40(__CFDictionary *a1, void *cf, uint64_t a3)
{
  key = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v6 = a3;
  if (a3)
  {
    CFRetain((CFTypeRef)a3);
    if (key)
    {
      CFDictionaryAddValue(a1, key, (const void *)a3);
      a3 = 1;
    }
    else
    {
      a3 = 0;
    }
  }
  sub_10010F494((const void **)&v6);
  sub_10010F494((const void **)&key);
  return a3;
}

void sub_100328DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_100328DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100328E7C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100328EFC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v46 = a1;
  uint64_t v47 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (std::string *)(*(void *)v1 + 640);
  std::string::operator=(v3, (const std::string *)(v1 + 296));
  long long v86 = 0uLL;
  uint8_t v87 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&v86);
  if (!v87)
  {
    uint64_t v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Missing CSN", buf, 2u);
    }
    *(void *)std::string buf = 0;
    *(void *)long long __dst = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)buf, (uint64_t)__dst, (uint64_t)&__str, 272);
    goto LABEL_14;
  }
  if (*(unsigned char *)(v2 + 4601) && *(unsigned char *)(v2 + 4600))
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E add on plan blocked : regulatory restriction active", buf, 2u);
    }
    *(void *)std::string buf = 0;
    *(void *)long long __dst = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    __int16 v5 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
    sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)buf, (uint64_t)__dst, (uint64_t)&__str, v5 | 0x100);
    goto LABEL_14;
  }
  int v6 = sub_1002DF3BC(v2, 0);
  if (v6)
  {
    __int16 v7 = v6;
    uint64_t v8 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Cannot run provisioning operation", buf, 2u);
    }
    *(void *)std::string buf = 0;
    *(void *)long long __dst = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)buf, (uint64_t)__dst, (uint64_t)&__str, v7 | 0x100);
    goto LABEL_14;
  }
  if (*(unsigned char *)(v1 + 288))
  {
    if (*(unsigned char *)(v1 + 256))
    {
      if (sub_1002E3B1C(v2, 0))
      {
        memset(&__str, 0, sizeof(__str));
        (*(void (**)(void **__return_ptr))(**(void **)(v2 + 288) + 272))(&v58);
        sub_100CD9080(&v58, (const void **)(v1 + 8), &__str);
        sub_100044D00((const void **)&v58);
        CFTypeRef cf = 0;
        if (*(char *)(v1 + 255) < 0)
        {
          sub_10004FC84(__p, *(void **)(v1 + 232), *(void *)(v1 + 240));
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)(v1 + 232);
          uint64_t v56 = *(void *)(v1 + 248);
        }
        if (SHIBYTE(v56) < 0)
        {
          sub_10004FC84(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)__p;
          *(void *)&__dst[16] = v56;
        }
        uint64_t v60 = 0;
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_10004FC84(buf, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)__dst;
          *(void *)&uint8_t buf[16] = *(void *)&__dst[16];
        }
        uint64_t v50 = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v19 = v60;
          uint64_t v60 = v50;
          v52[0] = v19;
          sub_1000558F4((const void **)v52);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        CFTypeRef cf = v60;
        uint64_t v60 = 0;
        sub_1000558F4((const void **)&v60);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        if (SHIBYTE(v56) < 0) {
          operator delete(__p[0]);
        }
        CFTypeRef v54 = 0;
        if (*(char *)(v1 + 287) < 0)
        {
          sub_10004FC84(v52, *(void **)(v1 + 264), *(void *)(v1 + 272));
        }
        else
        {
          *(_OWORD *)long long v52 = *(_OWORD *)(v1 + 264);
          uint64_t v53 = *(void *)(v1 + 280);
        }
        if (SHIBYTE(v53) < 0)
        {
          sub_10004FC84(__dst, v52[0], (unint64_t)v52[1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)v52;
          *(void *)&__dst[16] = v53;
        }
        long long v59 = 0;
        if ((__dst[23] & 0x80000000) != 0)
        {
          sub_10004FC84(buf, *(void **)__dst, *(unint64_t *)&__dst[8]);
        }
        else
        {
          *(_OWORD *)std::string buf = *(_OWORD *)__dst;
          *(void *)&uint8_t buf[16] = *(void *)&__dst[16];
        }
        uint64_t v60 = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v20 = v59;
          long long v59 = (uint64_t *)v60;
          uint64_t v50 = v20;
          sub_1000558F4((const void **)&v50);
        }
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        CFTypeRef v54 = v59;
        long long v59 = 0;
        sub_1000558F4((const void **)&v59);
        if ((__dst[23] & 0x80000000) != 0) {
          operator delete(*(void **)__dst);
        }
        if (SHIBYTE(v53) < 0) {
          operator delete(v52[0]);
        }
        v51[0] = 0;
        v51[1] = 0;
        uint64_t v50 = (uint64_t *)v51;
        sub_100058DB0(buf, "companionICCID");
        *(void *)long long __dst = buf;
        long long v21 = sub_100327F4C(&v50, (void **)buf, (uint64_t)&unk_10144E20E, (_OWORD **)__dst);
        std::string::operator=((std::string *)((char *)v21 + 56), (const std::string *)(v1 + 8));
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        sub_100058DB0(buf, "companionPhoneNumber");
        *(void *)long long __dst = buf;
        long long v22 = sub_100327F4C(&v50, (void **)buf, (uint64_t)&unk_10144E20E, (_OWORD **)__dst);
        std::string::operator=((std::string *)((char *)v22 + 56), (const std::string *)(v1 + 80));
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        sub_100058DB0(buf, "companionIMEI");
        *(void *)long long __dst = buf;
        char v23 = sub_100327F4C(&v50, (void **)buf, (uint64_t)&unk_10144E20E, (_OWORD **)__dst);
        std::string::operator=((std::string *)((char *)v23 + 56), &__str);
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        long long v59 = 0;
        CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
        if (Mutable)
        {
          int v25 = v50;
          if (v50 != (uint64_t *)v51)
          {
            do
            {
              *(void *)long long __dst = 0;
              *(void *)std::string buf = 0;
              ctu::cf::convert_copy();
              *(void *)long long __dst = *(void *)buf;
              uint64_t v60 = 0;
              *(void *)std::string buf = 0;
              ctu::cf::convert_copy();
              uint64_t v60 = *(void **)buf;
              sub_100328D40(Mutable, *(void **)__dst, *(uint64_t *)buf);
              sub_10010F494((const void **)&v60);
              sub_10010F494((const void **)__dst);
              uint64_t v26 = (uint64_t *)v25[1];
              if (v26)
              {
                do
                {
                  char v27 = v26;
                  uint64_t v26 = (uint64_t *)*v26;
                }
                while (v26);
              }
              else
              {
                do
                {
                  char v27 = (uint64_t *)v25[2];
                  BOOL v28 = *v27 == (void)v25;
                  int v25 = v27;
                }
                while (!v28);
              }
              int v25 = v27;
            }
            while (v27 != (uint64_t *)v51);
          }
          uint64_t v29 = v59;
          long long v59 = (uint64_t *)Mutable;
          *(void *)std::string buf = v29;
          sub_10005717C((const void **)buf);
        }
        memset(__dst, 0, sizeof(__dst));
        memset(v82, 0, sizeof(v82));
        long long v83 = 0u;
        long long v84 = 0u;
        BOOL v30 = *(_DWORD *)(v2 + 2632) == 1;
        *(_DWORD *)long long __dst = *(_DWORD *)(v2 + 580);
        *(_WORD *)&__dst[4] = 779;
        memset(&__dst[8], 0, 24);
        v82[0] = 3;
        memset(&v82[8], 0, 100);
        long long v83 = 0uLL;
        BYTE8(v84) = 0;
        *(void *)&long long v84 = 0;
        BYTE9(v84) = v30;
        std::string::operator=((std::string *)&v83, v3);
        uint64_t v31 = *(void *)(v2 + 680);
        sub_100311AFC((uint64_t)buf, (int *)__dst);
        BYTE8(v73) = 1;
        (*(void (**)(uint64_t, long long *, uint8_t *))(*(void *)v31 + 40))(v31, &v86, buf);
        sub_10030AEBC((uint64_t)buf);
        uint64_t v60 = (void *)cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_10004EFE4(&v49, (CFTypeRef *)&v59);
        CFTypeRef v48 = v54;
        if (v54) {
          CFRetain(v54);
        }
        sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)&v60, (uint64_t)&v49, (uint64_t)&v48, 0);
        sub_1000558F4(&v48);
        sub_100057D78(&v49);
        sub_1000558F4((const void **)&v60);
        if (SBYTE7(v84) < 0) {
          operator delete((void *)v83);
        }
        if ((v82[103] & 0x80000000) != 0) {
          operator delete(*(void **)&v82[80]);
        }
        if ((v82[79] & 0x80000000) != 0) {
          operator delete(*(void **)&v82[56]);
        }
        if ((v82[55] & 0x80000000) != 0) {
          operator delete(*(void **)&v82[32]);
        }
        if ((v82[31] & 0x80000000) != 0) {
          operator delete(*(void **)&v82[8]);
        }
        if ((__dst[31] & 0x80000000) != 0) {
          operator delete(*(void **)&__dst[8]);
        }
        sub_10005717C((const void **)&v59);
        sub_10010C0E0((uint64_t)&v50, v51[0]);
        sub_1000558F4(&v54);
        sub_1000558F4(&cf);
        if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
        {
          long long v32 = (void *)__str.__r_.__value_.__r.__words[0];
LABEL_148:
          operator delete(v32);
          goto LABEL_15;
        }
        goto LABEL_15;
      }
      *(void *)std::string buf = 0;
      *(void *)long long __dst = 0;
      __str.__r_.__value_.__r.__words[0] = 0;
      sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)buf, (uint64_t)__dst, (uint64_t)&__str, 261);
LABEL_14:
      sub_1000558F4((const void **)&__str.__r_.__value_.__l.__data_);
      sub_100057D78((const void **)__dst);
      sub_1000558F4((const void **)buf);
      goto LABEL_15;
    }
    long long v17 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Purchase add on plan failed, no endpoint", buf, 2u);
    }
LABEL_40:
    *(void *)std::string buf = 0;
    *(void *)long long __dst = 0;
    __str.__r_.__value_.__r.__words[0] = 0;
    sub_10032A0F4(*(void *)(v1 + 344), (uint64_t)buf, (uint64_t)__dst, (uint64_t)&__str, 262);
    goto LABEL_14;
  }
  if ((*(char *)(v1 + 31) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v1 + 31)) {
      goto LABEL_23;
    }
LABEL_43:
    uint64_t v18 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Missing required parameters (endpoint and iccid)", buf, 2u);
    }
    goto LABEL_40;
  }
  if (!*(void *)(v1 + 16)) {
    goto LABEL_43;
  }
LABEL_23:
  long long v84 = 0u;
  long long v85 = 0u;
  long long v83 = 0u;
  memset(v82, 0, sizeof(v82));
  memset(__dst, 0, sizeof(__dst));
  std::string::operator=((std::string *)__dst, (const std::string *)(v1 + 8));
  if (!v87) {
    sub_10016C840();
  }
  *(_OWORD *)&v82[16] = v86;
  uint64_t v11 = *(void *)(v2 + 2328);
  if (v11)
  {
    uint64_t v12 = v2 + 2328;
    do
    {
      int v13 = *(_DWORD *)(v11 + 32);
      BOOL v14 = v13 < 1;
      if (v13 >= 1) {
        uint64_t v15 = (uint64_t *)v11;
      }
      else {
        uint64_t v15 = (uint64_t *)(v11 + 8);
      }
      if (!v14) {
        uint64_t v12 = v11;
      }
      uint64_t v11 = *v15;
    }
    while (*v15);
    if (v12 != v2 + 2328 && *(int *)(v12 + 32) <= 1) {
      std::string::operator=((std::string *)&v82[32], (const std::string *)(v12 + 40));
    }
  }
  if (*(unsigned char *)(v2 + 2368))
  {
    if (*(char *)(v2 + 2367) < 0 ? *(void *)(v2 + 2352) : *(unsigned __int8 *)(v2 + 2367)) {
      std::string::operator=((std::string *)&v82[56], (const std::string *)(v2 + 2344));
    }
  }
  sub_1002D3F44(v2);
  uint64_t v33 = *(void *)(v2 + 5368);
  if (*(char *)(v33 + 23) < 0) {
    uint64_t v34 = *(void *)(v33 + 8);
  }
  else {
    uint64_t v34 = *(unsigned __int8 *)(v33 + 23);
  }
  if (v34)
  {
    std::string::operator=((std::string *)&v82[104], (const std::string *)v33);
    uint64_t v33 = *(void *)(v2 + 5368);
  }
  if (*(char *)(v33 + 167) < 0) {
    uint64_t v35 = *(void *)(v33 + 152);
  }
  else {
    uint64_t v35 = *(unsigned __int8 *)(v33 + 167);
  }
  if (v35) {
    std::string::operator=((std::string *)&v82[80], (const std::string *)(v33 + 144));
  }
  sub_10003ED78((std::string *)&v84, entitlements::kServiceTypeiPadSignup);
  HIDWORD(v85) = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 8))(*(void *)(v2 + 320));
  DWORD2(v85) = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 16))(*(void *)(v2 + 320));
  uint64_t v36 = *(void *)(v2 + 240);
  *(void *)std::string buf = v2;
  *(_OWORD *)&uint8_t buf[8] = v86;
  unsigned char buf[24] = v87;
  sub_10032A144((char *)&v62, (long long *)__dst);
  sub_100328DE4((uint64_t)v78, v1 + 320);
  uint64_t v80 = 0;
  uint64_t v37 = operator new(0x108uLL);
  *(_OWORD *)((char *)v37 + 8) = *(_OWORD *)buf;
  *(_OWORD *)((char *)v37 + 17) = *(_OWORD *)&buf[9];
  *(_OWORD *)((char *)v37 + 40) = v62;
  _OWORD v37[4] = v64;
  long long v38 = v67;
  *(_OWORD *)((char *)v37 + 88) = v66;
  *(void *)uint64_t v37 = off_1019B9170;
  *((void *)v37 + 7) = v63;
  long long v62 = 0uLL;
  uint64_t v63 = 0;
  uint64_t v39 = v68;
  *((void *)v37 + 10) = v65;
  long long v64 = 0uLL;
  *((void *)v37 + 15) = v39;
  *(_OWORD *)((char *)v37 + 104) = v38;
  uint64_t v65 = 0;
  long long v67 = 0uLL;
  long long v40 = v69;
  uint64_t v41 = v72;
  *((void *)v37 + 18) = v70;
  unsigned char v37[8] = v40;
  uint64_t v70 = 0;
  uint64_t v68 = 0;
  long long v69 = 0uLL;
  long long v42 = v71;
  *((void *)v37 + 21) = v41;
  *(_OWORD *)((char *)v37 + 152) = v42;
  long long v71 = 0uLL;
  long long v43 = v73;
  uint64_t v44 = v76;
  *((void *)v37 + 24) = v74;
  v37[11] = v43;
  uint64_t v74 = 0;
  uint64_t v72 = 0;
  long long v73 = 0uLL;
  *(_OWORD *)((char *)v37 + 200) = v75;
  long long v75 = 0uLL;
  uint64_t v76 = 0;
  uint64_t v45 = v77;
  *((void *)v37 + 27) = v44;
  *((void *)v37 + 28) = v45;
  sub_100328E7C((uint64_t)v37 + 232, (uint64_t)v78);
  uint64_t v80 = v37;
  (*(void (**)(uint64_t, unsigned char *, std::string *))(*(void *)v36 + 176))(v36, __dst, &__str);
  sub_10032B10C(&__str);
  sub_10030CC88(v78);
  if (SHIBYTE(v76) < 0) {
    operator delete((void *)v75);
  }
  if (SHIBYTE(v74) < 0) {
    operator delete((void *)v73);
  }
  if (SHIBYTE(v72) < 0) {
    operator delete((void *)v71);
  }
  if (SHIBYTE(v70) < 0) {
    operator delete((void *)v69);
  }
  if (SHIBYTE(v68) < 0) {
    operator delete((void *)v67);
  }
  __p[0] = &v64;
  sub_100047F64((void ***)__p);
  if (SHIBYTE(v63) < 0) {
    operator delete((void *)v62);
  }
  if (SBYTE7(v85) < 0) {
    operator delete((void *)v84);
  }
  if (SHIBYTE(v83) < 0) {
    operator delete(*(void **)&v82[104]);
  }
  if ((v82[103] & 0x80000000) != 0) {
    operator delete(*(void **)&v82[80]);
  }
  if ((v82[79] & 0x80000000) != 0) {
    operator delete(*(void **)&v82[56]);
  }
  if ((v82[55] & 0x80000000) != 0) {
    operator delete(*(void **)&v82[32]);
  }
  __p[0] = &__dst[24];
  sub_100047F64((void ***)__p);
  if ((__dst[23] & 0x80000000) != 0)
  {
    long long v32 = *(void **)__dst;
    goto LABEL_148;
  }
LABEL_15:
  sub_10032A08C(&v47);
  return sub_100046B58((uint64_t *)&v46);
}

void sub_100329CC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *a17, uint64_t a18, uint64_t a19, uint64_t a20,void *a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,uint64_t a31,uint64_t a32,void *a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,void *a41,uint64_t a42,uint64_t a43,void *a44,uint64_t a45,uint64_t a46,void *a47,uint64_t a48,uint64_t a49,void *a50,uint64_t a51,uint64_t a52,void *a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (SLOBYTE(STACK[0x277]) < 0) {
    operator delete((void *)STACK[0x260]);
  }
  if (SLOBYTE(STACK[0x25F]) < 0) {
    operator delete((void *)STACK[0x248]);
  }
  if (SLOBYTE(STACK[0x247]) < 0) {
    operator delete((void *)STACK[0x230]);
  }
  if (SLOBYTE(STACK[0x22F]) < 0) {
    operator delete((void *)STACK[0x218]);
  }
  if (SLOBYTE(STACK[0x217]) < 0) {
    operator delete((void *)STACK[0x200]);
  }
  a21 = &a71;
  sub_100047F64((void ***)&a21);
  if (a70 < 0) {
    operator delete(a65);
  }
  sub_10032A08C(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10032A08C(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_10030CC88((void *)(v1 + 320));
    if (*(char *)(v1 + 319) < 0) {
      operator delete(*(void **)(v1 + 296));
    }
    sub_10030CBA4(v1 + 8);
    operator delete();
  }
  return result;
}

uint64_t sub_10032A0F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, __int16 a5)
{
  __int16 v6 = a5;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)a1 + 48))(a1, a2, a3, a4, &v6);
}

char *sub_10032A144(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  *((void *)__dst + 5) = 0;
  sub_1000302C0(__dst + 24, *((long long **)a2 + 3), *((long long **)a2 + 4), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a2 + 4) - *((void *)a2 + 3)) >> 3));
  *((_OWORD *)__dst + 3) = a2[3];
  if (*((char *)a2 + 87) < 0)
  {
    sub_10004FC84(__dst + 64, *((void **)a2 + 8), *((void *)a2 + 9));
  }
  else
  {
    long long v5 = a2[4];
    *((void *)__dst + 10) = *((void *)a2 + 10);
    *((_OWORD *)__dst + 4) = v5;
  }
  if (*((char *)a2 + 111) < 0)
  {
    sub_10004FC84(__dst + 88, *((void **)a2 + 11), *((void *)a2 + 12));
  }
  else
  {
    long long v6 = *(long long *)((char *)a2 + 88);
    *((void *)__dst + 13) = *((void *)a2 + 13);
    *(_OWORD *)(__dst + 88) = v6;
  }
  if (*((char *)a2 + 135) < 0)
  {
    sub_10004FC84(__dst + 112, *((void **)a2 + 14), *((void *)a2 + 15));
  }
  else
  {
    long long v7 = a2[7];
    *((void *)__dst + 16) = *((void *)a2 + 16);
    *((_OWORD *)__dst + 7) = v7;
  }
  if (*((char *)a2 + 159) < 0)
  {
    sub_10004FC84(__dst + 136, *((void **)a2 + 17), *((void *)a2 + 18));
  }
  else
  {
    long long v8 = *(long long *)((char *)a2 + 136);
    *((void *)__dst + 19) = *((void *)a2 + 19);
    *(_OWORD *)(__dst + 136) = v8;
  }
  uint64_t v9 = __dst + 160;
  if (*((char *)a2 + 183) < 0)
  {
    sub_10004FC84(v9, *((void **)a2 + 20), *((void *)a2 + 21));
  }
  else
  {
    long long v10 = a2[10];
    *((void *)__dst + 22) = *((void *)a2 + 22);
    *(_OWORD *)uint64_t v9 = v10;
  }
  *((void *)__dst + 23) = *((void *)a2 + 23);
  return __dst;
}

void sub_10032A2DC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (*(char *)(v2 + 159) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v2 + 135) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v2 + 111) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v3);
  }
  sub_100047F64((void ***)va);
  if (*(char *)(v2 + 23) < 0) {
    operator delete(*(void **)v2);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10032A36C(uint64_t a1)
{
  if (*(char *)(a1 + 183) < 0) {
    operator delete(*(void **)(a1 + 160));
  }
  if (*(char *)(a1 + 159) < 0) {
    operator delete(*(void **)(a1 + 136));
  }
  if (*(char *)(a1 + 135) < 0) {
    operator delete(*(void **)(a1 + 112));
  }
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  uint64_t v3 = (void **)(a1 + 24);
  sub_100047F64(&v3);
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_10032A408(void *a1)
{
  *a1 = off_1019B9170;
  sub_10030CC88(a1 + 29);
  sub_10032A36C((uint64_t)(a1 + 5));
  return a1;
}

void sub_10032A454(void *a1)
{
  *a1 = off_1019B9170;
  sub_10030CC88(a1 + 29);
  sub_10032A36C((uint64_t)(a1 + 5));

  operator delete();
}

void *sub_10032A4C0(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x108uLL);
  void *v2 = off_1019B9170;
  sub_10032AF50((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10032A514(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032A528(uint64_t a1, void *a2)
{
  *a2 = off_1019B9170;
  return sub_10032AF50((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

uint64_t sub_10032A554(uint64_t a1)
{
  sub_10030CC88((void *)(a1 + 232));

  return sub_10032A36C(a1 + 40);
}

void sub_10032A590(void *a1)
{
  sub_10030CC88(a1 + 29);
  sub_10032A36C((uint64_t)(a1 + 5));

  operator delete(a1);
}

uint64_t sub_10032A5D4(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  sub_10032B034((uint64_t)v19, a2);
  uint64_t v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v5)
  {
    long long v7 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v15 = asString();
      LODWORD(v41) = 136315138;
      *(void *)((char *)&v41 + 4) = v15;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Purchase add on plan failed %s", (uint8_t *)&v41, 0xCu);
    }
    *(void *)&long long v41 = 0;
    v25[0] = 0;
    *(void *)&long long v28 = 0;
    sub_10032A0F4(*(void *)(a1 + 256), (uint64_t)&v41, (uint64_t)v25, (uint64_t)&v28, v5 | 0x100);
    goto LABEL_26;
  }
  if (!v23) {
    goto LABEL_22;
  }
  uint64_t v8 = HIBYTE(v21);
  if (v21 < 0) {
    uint64_t v8 = *((void *)&v20 + 1);
  }
  if (!v8)
  {
LABEL_22:
    int v13 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      LOWORD(v41) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Empty Purchase add on plan response", (uint8_t *)&v41, 2u);
    }
    *(void *)&long long v41 = 0;
    v25[0] = 0;
    *(void *)&long long v28 = 0;
    sub_10032A0F4(*(void *)(a1 + 256), (uint64_t)&v41, (uint64_t)v25, (uint64_t)&v28, 262);
    goto LABEL_26;
  }
  if (!sub_1002E3B1C(*(void *)(a1 + 8), 0))
  {
    *(void *)&long long v41 = 0;
    v25[0] = 0;
    *(void *)&long long v28 = 0;
    sub_10032A0F4(*(void *)(a1 + 256), (uint64_t)&v41, (uint64_t)v25, (uint64_t)&v28, 261);
LABEL_26:
    sub_1000558F4((const void **)&v28);
    sub_100057D78((const void **)v25);
    sub_1000558F4((const void **)&v41);
    return sub_1000C636C((uint64_t)v19);
  }
  CFTypeRef cf = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    CFTypeRef v10 = cf;
    CFTypeRef cf = Mutable;
    *(void *)&long long v41 = v10;
    sub_10005717C((const void **)&v41);
  }
  uint64_t v59 = 0;
  long long v61 = 0u;
  long long v57 = 0u;
  long long v58 = 0u;
  long long v55 = 0u;
  long long v56 = 0u;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v51 = 0u;
  long long v52 = 0u;
  long long v49 = 0u;
  long long v50 = 0u;
  long long v47 = 0u;
  long long v48 = 0u;
  long long v46 = 0u;
  long long __p = 0u;
  memset(v45, 0, sizeof(v45));
  long long v42 = 0u;
  long long v43 = 0u;
  long long v41 = 0u;
  uint64_t v60 = &v61;
  std::string::operator=((std::string *)&v41, &v22);
  std::string::operator=((std::string *)&v56, (const std::string *)(a1 + 176));
  std::string::operator=((std::string *)((char *)&v42 + 8), (const std::string *)(a1 + 40));
  ctu::hex((uint64_t *)v25, (ctu *)(a1 + 88), (const void *)0x10, v11);
  if (SHIBYTE(v45[0]) < 0) {
    operator delete((void *)__p);
  }
  long long __p = *(_OWORD *)v25;
  v45[0] = v26;
  sub_10032AFC0(&v46, (const std::string *)(a1 + 104));
  uint64_t v12 = *(unsigned __int8 *)(a1 + 151);
  if ((v12 & 0x80u) != 0) {
    uint64_t v12 = *(void *)(a1 + 136);
  }
  if (v12) {
    sub_10032AFC0(&v48, (const std::string *)(a1 + 128));
  }
  sub_10032AFC0(&v50, (const std::string *)(a1 + 152));
  sub_10032AFC0((unsigned char *)&v52 + 8, (const std::string *)(a1 + 200));
  CFTypeRef v36 = cf;
  if (cf) {
    CFRetain(cf);
  }
  sub_100DDB308((CFMutableDictionaryRef *)&v36, &v41);
  sub_10005717C(&v36);
  CFTypeRef v35 = 0;
  if (SHIBYTE(v21) < 0)
  {
    sub_10004FC84(&__dst, (void *)v20, *((unint64_t *)&v20 + 1));
  }
  else
  {
    long long __dst = v20;
    uint64_t v34 = v21;
  }
  if (SHIBYTE(v34) < 0)
  {
    sub_10004FC84(&v28, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v28 = __dst;
    *(void *)&long long v29 = v34;
  }
  long long v38 = 0;
  if (SBYTE7(v29) < 0)
  {
    sub_10004FC84(v25, (void *)v28, *((unint64_t *)&v28 + 1));
  }
  else
  {
    *(_OWORD *)int v25 = v28;
    uint64_t v26 = v29;
  }
  CFTypeRef v39 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v16 = v38;
    long long v38 = v39;
    long long v40 = v16;
    sub_1000558F4(&v40);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  CFTypeRef v35 = v38;
  long long v38 = 0;
  sub_1000558F4(&v38);
  if (SBYTE7(v29) < 0) {
    operator delete((void *)v28);
  }
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)__dst);
  }
  long long v28 = 0u;
  long long v29 = 0u;
  memset(v30, 0, sizeof(v30));
  long long v31 = 0u;
  long long v32 = 0u;
  BOOL v17 = *(_DWORD *)(v6 + 2632) == 1;
  LODWORD(v28) = *(_DWORD *)(v6 + 580);
  WORD2(v28) = 780;
  long long v29 = 0uLL;
  *((void *)&v28 + 1) = 0;
  LOBYTE(v30[0]) = 3;
  memset(&v30[1], 0, 100);
  long long v31 = 0uLL;
  BYTE8(v32) = 0;
  *(void *)&long long v32 = 0;
  BYTE9(v32) = v17;
  std::string::operator=((std::string *)&v31, (const std::string *)(v6 + 640));
  uint64_t v18 = *(void *)(v6 + 680);
  sub_100311AFC((uint64_t)v25, (int *)&v28);
  char v27 = 1;
  (*(void (**)(uint64_t, uint64_t, void **))(*(void *)v18 + 40))(v18, a1 + 16, v25);
  sub_10030AEBC((uint64_t)v25);
  CFTypeRef v39 = v35;
  if (v35) {
    CFRetain(v35);
  }
  sub_10004EFE4(&v38, &cf);
  CFStringRef v24 = @"entitlements";
  sub_10032A0F4(*(void *)(a1 + 256), (uint64_t)&v39, (uint64_t)&v38, (uint64_t)&v24, 0);
  sub_1000558F4((const void **)&v24);
  sub_100057D78(&v38);
  sub_1000558F4(&v39);
  if (SBYTE7(v32) < 0) {
    operator delete((void *)v31);
  }
  if (SHIBYTE(v30[12]) < 0) {
    operator delete(v30[10]);
  }
  if (SHIBYTE(v30[9]) < 0) {
    operator delete(v30[7]);
  }
  if (SHIBYTE(v30[6]) < 0) {
    operator delete(v30[4]);
  }
  if (SHIBYTE(v30[3]) < 0) {
    operator delete(v30[1]);
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(*((void **)&v28 + 1));
  }
  sub_1000558F4(&v35);
  sub_10010C0E0((uint64_t)&v60, (void *)v61);
  if (BYTE8(v57))
  {
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    BYTE8(v57) = 0;
  }
  if (SBYTE7(v57) < 0) {
    operator delete((void *)v56);
  }
  if (BYTE8(v52))
  {
    if (SBYTE7(v54) < 0) {
      operator delete((void *)v53);
    }
    BYTE8(v52) = 0;
  }
  if ((_BYTE)v50)
  {
    if (SHIBYTE(v51) < 0) {
      operator delete(*((void **)&v50 + 1));
    }
    LOBYTE(v50) = 0;
  }
  if ((_BYTE)v48)
  {
    if (SHIBYTE(v49) < 0) {
      operator delete(*((void **)&v48 + 1));
    }
    LOBYTE(v48) = 0;
  }
  if ((_BYTE)v46)
  {
    if (SHIBYTE(v47) < 0) {
      operator delete(*((void **)&v46 + 1));
    }
    LOBYTE(v46) = 0;
  }
  *(void *)&long long v28 = &v45[1];
  sub_100047F64((void ***)&v28);
  if (SHIBYTE(v45[0]) < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v43) < 0) {
    operator delete(*((void **)&v42 + 1));
  }
  if (SBYTE7(v42) < 0) {
    operator delete((void *)v41);
  }
  sub_10005717C(&cf);
  return sub_1000C636C((uint64_t)v19);
}

void sub_10032AC98(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,void *__p,void *a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,void *a54,uint64_t a55,uint64_t a56,void *a57,uint64_t a58,uint64_t a59,void *a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_1000558F4(&a74);
  if (a48 < 0) {
    operator delete(__p);
  }
  if (a72 < 0) {
    operator delete(a68);
  }
  sub_10010C0E0(v74, (void *)STACK[0x350]);
  if (LOBYTE(STACK[0x328]))
  {
    if (SLOBYTE(STACK[0x347]) < 0) {
      operator delete((void *)STACK[0x330]);
    }
    LOBYTE(STACK[0x328]) = 0;
  }
  if (SLOBYTE(STACK[0x327]) < 0) {
    operator delete((void *)STACK[0x310]);
  }
  if (LOBYTE(STACK[0x2D8]))
  {
    if (SLOBYTE(STACK[0x2F7]) < 0) {
      operator delete((void *)STACK[0x2E0]);
    }
    LOBYTE(STACK[0x2D8]) = 0;
  }
  if (LOBYTE(STACK[0x2B0]))
  {
    if (SLOBYTE(STACK[0x2CF]) < 0) {
      operator delete((void *)STACK[0x2B8]);
    }
    LOBYTE(STACK[0x2B0]) = 0;
  }
  if (LOBYTE(STACK[0x290]))
  {
    if (SLOBYTE(STACK[0x2AF]) < 0) {
      operator delete((void *)STACK[0x298]);
    }
    LOBYTE(STACK[0x290]) = 0;
  }
  if (LOBYTE(STACK[0x270]))
  {
    if (SLOBYTE(STACK[0x28F]) < 0) {
      operator delete((void *)STACK[0x278]);
    }
    LOBYTE(STACK[0x270]) = 0;
  }
  STACK[0x208] = (unint64_t)&STACK[0x258];
  sub_100047F64((void ***)&STACK[0x208]);
  if (SLOBYTE(STACK[0x257]) < 0) {
    operator delete((void *)STACK[0x240]);
  }
  if (SLOBYTE(STACK[0x23F]) < 0) {
    operator delete((void *)STACK[0x228]);
  }
  if (SLOBYTE(STACK[0x227]) < 0) {
    operator delete((void *)STACK[0x210]);
  }
  sub_10005717C(&a73);
  sub_1000C636C((uint64_t)&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_10032AF04(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032AF44()
{
}

uint64_t sub_10032AF50(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(_OWORD *)(a1 + 9) = *(long long *)((char *)a2 + 9);
  *(_OWORD *)a1 = v4;
  sub_10032A144((char *)(a1 + 32), a2 + 2);
  sub_100328DE4(a1 + 224, (uint64_t)(a2 + 14));
  return a1;
}

void sub_10032AFAC(_Unwind_Exception *a1)
{
  sub_10032A36C(v1);
  _Unwind_Resume(a1);
}

std::string *sub_10032AFC0(unsigned char *a1, const std::string *a2)
{
  int v4 = *a1;
  uint64_t result = (std::string *)(a1 + 8);
  if (v4)
  {
    return std::string::operator=(result, a2);
  }
  else
  {
    if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
    {
      uint64_t result = (std::string *)sub_10004FC84(result, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
    }
    else
    {
      long long v5 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
      result->__r_.__value_.__r.__words[2] = a2->__r_.__value_.__r.__words[2];
      *(_OWORD *)&result->__r_.__value_.__l.__data_ = v5;
    }
    *a1 = 1;
  }
  return result;
}

uint64_t sub_10032B034(uint64_t a1, uint64_t a2)
{
  *(unsigned char *)a1 = 0;
  *(unsigned char *)(a1 + 56) = 0;
  if (*(unsigned char *)(a2 + 56))
  {
    *(unsigned char *)a1 = *(unsigned char *)a2;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      long long v4 = *(_OWORD *)(a2 + 8);
      *(void *)(a1 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a1 + 8) = v4;
    }
    long long v5 = (unsigned char *)(a1 + 32);
    if (*(char *)(a2 + 55) < 0)
    {
      sub_10004FC84(v5, *(void **)(a2 + 32), *(void *)(a2 + 40));
    }
    else
    {
      long long v6 = *(_OWORD *)(a2 + 32);
      *(void *)(a1 + 48) = *(void *)(a2 + 48);
      *(_OWORD *)long long v5 = v6;
    }
    *(unsigned char *)(a1 + 56) = 1;
  }
  return a1;
}

void sub_10032B0E0(_Unwind_Exception *a1)
{
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  sub_1000C636C(v1);
  _Unwind_Resume(a1);
}

void *sub_10032B10C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_10032B190(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_10032B210(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v20 = a1;
  uint64_t v21 = v1;
  uint64_t v2 = *(void *)v1;
  memset(v26, 0, sizeof(v26));
  sub_1003240C8((uint64_t)v26, v2 + 1640);
  sub_10032B644((void *)(v2 + 1640), v1 + 32);
  long long v24 = 0uLL;
  char v25 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&v24);
  if (*(void *)(v1 + 8) == *(void *)(v1 + 16))
  {
    long long v5 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "No plans to transfer", buf, 2u);
    }
    int v4 = 6;
    goto LABEL_16;
  }
  if (*(unsigned char *)(v2 + 2264))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Abort transfer - Call ongoing", buf, 2u);
    }
    int v4 = 33;
    goto LABEL_16;
  }
  unsigned int v6 = *(_DWORD *)(v2 + 2276);
  BOOL v7 = v6 > 4;
  int v8 = (1 << v6) & 0x19;
  if (!v7 && v8 != 0)
  {
    CFTypeRef v10 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Abort transfer - In emergency mode", buf, 2u);
    }
LABEL_15:
    int v4 = 13;
LABEL_16:
    sub_1002E0E3C((void *)v2, 0, v4);
    sub_10032B644((void *)(v2 + 1640), (uint64_t)v26);
    goto LABEL_17;
  }
  uint64_t v12 = *(void *)(v2 + 384);
  if (v12 && (*(unsigned int (**)(uint64_t))(*(void *)v12 + 168))(v12))
  {
    int v13 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E Transfer entitlements ongoing", buf, 2u);
    }
    goto LABEL_15;
  }
  if (!v25)
  {
    int v4 = 16;
    goto LABEL_16;
  }
  if (!*(void *)(v2 + 384))
  {
    uint64_t v19 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "No Transfer Controller", buf, 2u);
    }
    int v4 = 5;
    goto LABEL_16;
  }
  if (v2 + 5504 != v1 + 8) {
    sub_10032B92C((std::string **)(v2 + 5504), *(std::string **)(v1 + 8), *(std::string **)(v1 + 16), (uint64_t)(*(void *)(v1 + 16) - *(void *)(v1 + 8)) >> 6);
  }
  BOOL v14 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v14 || (uint64_t v15 = *(void *)(v2 + 8), (v16 = std::__shared_weak_count::lock(v14)) == 0)) {
    sub_100088B9C();
  }
  BOOL v17 = v16;
  atomic_fetch_add_explicit(&v16->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v16);
  uint64_t v18 = operator new(0x38uLL);
  *uint64_t v18 = off_1019B9200;
  v18[1] = v2;
  void v18[2] = v15;
  void v18[3] = v17;
  *((_OWORD *)v18 + 2) = v24;
  *((unsigned char *)v18 + 48) = v25;
  char v23 = v18;
  sub_1002F76C4(v2, (uint64_t)buf);
  sub_100060644(buf);
LABEL_17:
  sub_1003135E4(v26);
  sub_10032B5DC(&v21);
  return sub_100046B58((uint64_t *)&v20);
}

void sub_10032B58C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19)
{
}

uint64_t *sub_10032B5DC(uint64_t *result)
{
  uint64_t v1 = *result;
  std::string *result = 0;
  if (v1)
  {
    sub_1003135E4((void *)(v1 + 32));
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030A698(&v2);
    operator delete();
  }
  return result;
}

void *sub_10032B644(void *a1, uint64_t a2)
{
  sub_1003240C8((uint64_t)v4, a2);
  sub_10032B6B8(v4, a1);
  sub_1003135E4(v4);
  return a1;
}

void *sub_10032B6B8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    int v4 = (void *)result[3];
    long long v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      uint64_t result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10032B920(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_10032B92C(std::string **a1, std::string *__str, std::string *a3, unint64_t a4)
{
  uint64_t v9 = (uint64_t)(a1 + 2);
  uint64_t v8 = (uint64_t)a1[2];
  CFTypeRef v10 = *a1;
  if (a4 > (v8 - (uint64_t)*a1) >> 6)
  {
    if (v10)
    {
      uint64_t v11 = (uint64_t)a1[1];
      uint64_t v12 = *a1;
      if ((std::string *)v11 != v10)
      {
        do
        {
          v11 -= 64;
          sub_10030A71C(v11);
        }
        while ((std::string *)v11 != v10);
        uint64_t v12 = *a1;
      }
      a1[1] = v10;
      operator delete(v12);
      uint64_t v8 = 0;
      *a1 = 0;
      a1[1] = 0;
      a1[2] = 0;
    }
    if (a4 >> 58) {
      sub_10006A748();
    }
    uint64_t v13 = v8 >> 5;
    if (v8 >> 5 <= a4) {
      uint64_t v13 = a4;
    }
    if ((unint64_t)v8 >= 0x7FFFFFFFFFFFFFC0) {
      unint64_t v14 = 0x3FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v14 = v13;
    }
    sub_1001A1088(a1, v14);
    uint64_t v15 = sub_10030CD94(v9, (uint64_t)__str, (uint64_t)a3, (uint64_t)a1[1]);
    goto LABEL_16;
  }
  unint64_t v16 = ((char *)a1[1] - (char *)v10) >> 6;
  if (v16 < a4)
  {
    BOOL v17 = (std::string *)((char *)__str + 64 * v16);
    sub_10032BAA8(__str, v17, v10);
    uint64_t v15 = sub_10030CD94(v9, (uint64_t)v17, (uint64_t)a3, (uint64_t)a1[1]);
LABEL_16:
    a1[1] = (std::string *)v15;
    return;
  }
  uint64_t v18 = sub_10032BAA8(__str, a3, v10);
  for (uint64_t i = (uint64_t)a1[1]; (std::string *)i != v18; sub_10030A71C(i))
    i -= 64;
  a1[1] = v18;
}

void sub_10032BA98(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_10032BAA0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

std::string *sub_10032BAA8(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    long long v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      *(_OWORD *)&this[1].__r_.__value_.__l.__data_ = *(_OWORD *)&v5[1].__r_.__value_.__l.__data_;
      std::string::operator=((std::string *)((char *)this + 40), (std::string *)((char *)v5 + 40));
      this = (std::string *)((char *)this + 64);
      long long v5 = (std::string *)((char *)v5 + 64);
    }
    while (v5 != a2);
  }
  return this;
}

void *sub_10032BB14(void *a1)
{
  *a1 = off_1019B9200;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10032BB60(void *a1)
{
  *a1 = off_1019B9200;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

__n128 sub_10032BBCC(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x38uLL);
  *(void *)uint64_t v2 = off_1019B9200;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)v2 + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *((__n128 *)v2 + 2) = result;
  v2[48] = *(unsigned char *)(a1 + 48);
  return result;
}

__n128 sub_10032BC40(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B9200;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v2 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  __n128 result = *(__n128 *)(a1 + 32);
  *(unsigned char *)(a2 + 48) = *(unsigned char *)(a1 + 48);
  *(__n128 *)(a2 + 32) = result;
  return result;
}

void sub_10032BC90(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10032BCA0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10032BCE0(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v2 = *(void **)(a1 + 8);
  uint64_t v3 = v2[689];
  if (v2[688] == v3)
  {
    uint64_t v13 = v2[5];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Cached plan(s) is empty", buf, 2u);
    }
  }
  else
  {
    int v5 = *a2;
    v14[0] = v2[688];
    v14[1] = v3;
    v14[2] = v2[690];
    v2[688] = 0;
    v2[689] = 0;
    v2[690] = 0;
    uint64_t v6 = v2[58];
    if (v6) {
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v6 + 128))(v6, 1, 2);
    }
    BOOL v7 = (std::__shared_weak_count *)v2[2];
    if (!v7 || (v8 = v2[48], uint64_t v9 = v2[1], (v10 = std::__shared_weak_count::lock(v7)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v11 = v10;
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v10);
    uint64_t v12 = operator new(0x20uLL);
    *uint64_t v12 = off_1019B9270;
    v12[1] = v2;
    _DWORD v12[2] = v9;
    void v12[3] = v11;
    BOOL v17 = v12;
    (*(void (**)(uint64_t, void *, uint64_t, BOOL, uint8_t *))(*(void *)v8 + 232))(v8, v14, a1 + 32, v5 != 0, buf);
    sub_10023D374(buf);
    uint64_t v15 = (void **)v14;
    sub_10030A698(&v15);
  }
}

void sub_10032BEA8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12, uint64_t a13)
{
  a12 = (void **)&a9;
  sub_10030A698(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10032BEE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032BF24()
{
}

void *sub_10032BF30(void *a1)
{
  *a1 = off_1019B9270;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10032BF7C(void *a1)
{
  *a1 = off_1019B9270;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10032BFE8(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B9270;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10032C04C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B9270;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10032C08C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10032C09C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10032C0DC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (a1[2])
      {
        int v5 = *(std::__shared_weak_count **)(v3 + 16);
        if (v5)
        {
          if (std::__shared_weak_count::lock(v5)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v4);
    }
  }
}

uint64_t sub_10032C204(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032C244()
{
}

void sub_10032C250(void ***a1)
{
  uint64_t v1 = a1;
  sub_1002E0E3C(**a1, *((unsigned char *)*a1 + 8), *((unsigned __int8 *)*a1 + 9));
  operator delete();
}

void sub_10032C2AC()
{
}

uint64_t *sub_10032C2D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v24 = a1;
  uint64_t v25 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(void *)(*(void *)v1 + 384))
  {
    v30[0] = 0;
    v30[1] = 0;
    char v31 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v30);
    if (!v31)
    {
      BOOL v7 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Target EID not available", (uint8_t *)__p, 2u);
      }
      char v8 = 4;
      goto LABEL_52;
    }
    uint64_t v3 = *(void *)(v2 + 5504);
    uint64_t v4 = *(void *)(v2 + 5512);
    if (*(char *)(v1 + 31) < 0)
    {
      sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
    }
    else
    {
      long long v5 = *(_OWORD *)(v1 + 8);
      uint64_t v28 = *(void *)(v1 + 24);
      *(_OWORD *)long long __p = v5;
    }
    long long v29 = *(_OWORD *)(v1 + 64);
    char v9 = HIBYTE(v28);
    if (v3 != v4)
    {
      if (v28 >= 0) {
        CFTypeRef v10 = (void *)HIBYTE(v28);
      }
      else {
        CFTypeRef v10 = __p[1];
      }
      if (v28 >= 0) {
        uint64_t v11 = __p;
      }
      else {
        uint64_t v11 = (void **)__p[0];
      }
      while (1)
      {
        uint64_t v12 = *(unsigned __int8 *)(v3 + 63);
        if ((v12 & 0x80u) == 0) {
          uint64_t v13 = (void *)*(unsigned __int8 *)(v3 + 63);
        }
        else {
          uint64_t v13 = *(void **)(v3 + 48);
        }
        if (v13 == v10)
        {
          if ((v12 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)(v3 + 40), v11, *(void *)(v3 + 48)))
            {
LABEL_29:
              if (*(void *)(v3 + 24) == (void)v29 && *(void *)(v3 + 32) == *((void *)&v29 + 1)) {
                break;
              }
            }
          }
          else
          {
            if (!*(unsigned char *)(v3 + 63)) {
              goto LABEL_29;
            }
            uint64_t v14 = 0;
            while (*(unsigned __int8 *)(v3 + v14 + 40) == *((unsigned __int8 *)v11 + v14))
            {
              if (v12 == ++v14) {
                goto LABEL_29;
              }
            }
          }
        }
        v3 += 64;
        if (v3 == v4)
        {
          uint64_t v3 = v4;
          break;
        }
      }
    }
    if (v9 < 0) {
      operator delete(__p[0]);
    }
    uint64_t v16 = *(void *)(v2 + 5512);
    if (v3 != v16)
    {
      BOOL v17 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Cancelled cached plan", buf, 2u);
        uint64_t v16 = *(void *)(v2 + 5512);
      }
      if (v3 + 64 == v16)
      {
        uint64_t v19 = v3;
      }
      else
      {
        do
        {
          if (*(char *)(v3 + 23) < 0) {
            operator delete(*(void **)v3);
          }
          *(_OWORD *)uint64_t v3 = *(_OWORD *)(v3 + 64);
          *(void *)(v3 + 16) = *(void *)(v3 + 80);
          *(unsigned char *)(v3 + 87) = 0;
          *(unsigned char *)(v3 + 64) = 0;
          *(_OWORD *)(v3 + 24) = *(_OWORD *)(v3 + 88);
          uint64_t v18 = (void **)(v3 + 40);
          if (*(char *)(v3 + 63) < 0) {
            operator delete(*v18);
          }
          *(_OWORD *)uint64_t v18 = *(_OWORD *)(v3 + 104);
          *(void *)(v3 + 56) = *(void *)(v3 + 120);
          *(unsigned char *)(v3 + 127) = 0;
          *(unsigned char *)(v3 + 104) = 0;
          uint64_t v19 = v3 + 64;
          uint64_t v20 = v3 + 128;
          v3 += 64;
        }
        while (v20 != v16);
        uint64_t v16 = *(void *)(v2 + 5512);
      }
      while (v16 != v19)
      {
        v16 -= 64;
        sub_10030A71C(v16);
      }
      char v8 = 0;
      *(void *)(v2 + 5512) = v19;
LABEL_52:
      sub_10024924C(v1 + 32, v8);
      goto LABEL_53;
    }
    uint64_t v21 = *(void *)(v2 + 384);
    sub_10031ECD8((uint64_t)buf, v1 + 32);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint8_t *))(*(void *)v21 + 248))(v21, v1 + 64, v1 + 8, buf);
    sub_100313668(buf);
  }
  else
  {
    uint64_t v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      char v23 = (void *)(v1 + 8);
      if (*(char *)(v1 + 31) < 0) {
        char v23 = (void *)*v23;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v23;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "cancel ongoing tranfser. iccid : %s. invalid TransferFlowController", (uint8_t *)__p, 0xCu);
    }
    sub_10024924C(v1 + 32, 4);
  }
LABEL_53:
  sub_10032C6C8(&v25);
  return sub_100046B58((uint64_t *)&v24);
}

void sub_10032C69C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_10032C6C8(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10032C728(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 384);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v2 + 208))(v2, v1 + 8);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "invalid target transfer flow controller", buf, 2u);
    }
  }
  sub_1001102C4(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10032C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10032C7F8(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  long long v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 384);
  if (v2)
  {
    (*(void (**)(uint64_t, unsigned __int8 *, void))(*(void *)v2 + 216))(v2, v1 + 8, v1[32]);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "invalid target transfer flow controller", buf, 2u);
    }
  }
  sub_10023CBF8((uint64_t *)&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10032C8B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10032C8CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 384);
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v2 + 224))(v2, v1 + 8, v1 + 32);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "invalid target transfer flow controller", buf, 2u);
    }
  }
  sub_10032C9A0(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10032C984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10032C9A0(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10032CA08(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_10032CA88(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v44 = a1;
  uint64_t v45 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(*(void *)v1 + 4601) && *(unsigned char *)(*(void *)v1 + 4600))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E esim conversion is blocked : regulatory restriction active", buf, 2u);
    }
    char v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
LABEL_24:
    sub_10024924C(v1 + 8, v4);
    goto LABEL_25;
  }
  if (*(unsigned char *)(v2 + 2289) != 1 || *(unsigned char *)(v2 + 2592) != 1)
  {
    uint64_t v14 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "no wifi connection. abort conversion.", buf, 2u);
    }
    char v4 = 41;
    goto LABEL_24;
  }
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 304) + 328))(*(void *)(v2 + 304), 3) & 1) == 0)
  {
    uint64_t v16 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "device doesnot support eSIM", buf, 2u);
    }
    char v4 = 17;
    goto LABEL_24;
  }
  __p[0] = 0;
  __p[1] = 0;
  long long v5 = (os_log_t *)(v2 + 40);
  uint64_t v63 = 0;
  sub_1002F410C((uint64_t)__p, (NSObject **)(v2 + 40), v2 + 2464);
  uint64_t v6 = (void *)HIBYTE(v63);
  int v7 = SHIBYTE(v63);
  if (v63 < 0) {
    uint64_t v6 = __p[1];
  }
  char v8 = *v5;
  char v9 = *v5;
  if (!v6)
  {
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
LABEL_59:
      char v13 = 5;
      goto LABEL_60;
    }
    *(_WORD *)std::string buf = 0;
    BOOL v17 = "cannot find physical SIM iccid";
    uint64_t v18 = v8;
LABEL_84:
    _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, v17, buf, 2u);
    goto LABEL_59;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    CFTypeRef v10 = (void **)__p[0];
    if (v7 >= 0) {
      CFTypeRef v10 = __p;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v10;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I convert %s to eSIM", buf, 0xCu);
  }
  uint64_t v11 = *(void *)(v2 + 384);
  if (v11)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)v11 + 168))(v11))
    {
      uint64_t v12 = *v5;
      if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)std::string buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#E Transfer entitlements ongoing", buf, 2u);
      }
      char v13 = 13;
      goto LABEL_60;
    }
    sub_1002E0CF4(v2, 2);
  }
  uint64_t v19 = *(void *)(v2 + 320);
  uint64_t v20 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v20;
  if (v20) {
    dispatch_retain(v20);
  }
  uint64_t v21 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v21 || (v22 = *(void *)(v2 + 8), (char v23 = std::__shared_weak_count::lock(v21)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v24 = v22 + 96;
  if (!v22) {
    uint64_t v24 = 0;
  }
  uint64_t v59 = v24;
  uint64_t v60 = v23;
  uint64_t v25 = *(std::__shared_weak_count **)(v2 + 424);
  uint64_t v57 = *(void *)(v2 + 416);
  long long v58 = v25;
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = *(std::__shared_weak_count **)(v2 + 520);
  uint64_t v55 = *(void *)(v2 + 512);
  long long v56 = v26;
  if (v26) {
    atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v19 + 424))(buf, v19, 2, &object, &v59, &v57, &v55);
  long long v27 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  uint64_t v28 = *(std::__shared_weak_count **)(v2 + 392);
  *(_OWORD *)(v2 + 384) = v27;
  if (v28)
  {
    sub_10004D2C8(v28);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v56) {
    sub_10004D2C8(v56);
  }
  if (v58) {
    sub_10004D2C8(v58);
  }
  if (v60) {
    sub_10004D2C8(v60);
  }
  if (object) {
    dispatch_release(object);
  }
  if (!*(void *)(v2 + 384))
  {
    os_log_t v30 = *v5;
    if (!os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR)) {
      goto LABEL_59;
    }
    *(_WORD *)std::string buf = 0;
    BOOL v17 = "cannot create transfer flow controller";
    uint64_t v18 = v30;
    goto LABEL_84;
  }
  if (!*(void *)(v2 + 1664))
  {
    long long v52 = 0;
    long long v53 = 0;
    uint64_t v54 = 0;
    if (*(unsigned char *)(v2 + 2664))
    {
      sub_100319F54((uint64_t *)&v52, v2 + 2640);
    }
    else
    {
      long long v53 = 0;
      uint64_t v54 = 0;
      long long v52 = &v53;
    }
    sub_1002D3F44(v2);
    uint64_t v31 = *(void *)(v2 + 384);
    int v32 = *(_DWORD *)(v2 + 2632);
    sub_1002DD40C((uint64_t)buf, (void *)(v2 + 1616));
    sub_1002DCA80(v51, *(void *)(v2 + 416));
    uint64_t v33 = *(std::__shared_weak_count **)(v2 + 5376);
    uint64_t v49 = *(void *)(v2 + 5368);
    long long v50 = v33;
    if (v33) {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, void ***, uint64_t, uint8_t *, void *, uint64_t *))(*(void *)v31 + 16))(v31, v2 + 2568, v2 + 2464, v32 == 1, v2 + 2320, v2 + 2344, &v52, v2 + 2488, buf, v51, &v49);
    if (v50) {
      sub_10004D2C8(v50);
    }
    long long v64 = (void **)v51;
    sub_10030AFC8(&v64);
    sub_10005CD2C((uint64_t)buf, *(char **)&buf[8]);
    (*(void (**)(void))(**(void **)(v2 + 384) + 88))(*(void *)(v2 + 384));
    long long v46 = 0;
    uint64_t v47 = 0;
    long long v48 = 0;
    sub_1002FC384((uint64_t *)buf, (unsigned __int8 *)__p, *(void *)(v2 + 2464), *(void *)(v2 + 2472), v2 + 2320);
    uint64_t v70 = 0;
    uint64_t v71 = 0;
    if (SHIBYTE(v63) < 0)
    {
      sub_10004FC84(v72, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v72 = *(_OWORD *)__p;
      *(void *)&v72[16] = v63;
    }
    long long v46 = 0;
    uint64_t v47 = 0;
    long long v48 = 0;
    long long v64 = (void **)&v46;
    v65[0] = 0;
    long long v46 = (char *)operator new(0x40uLL);
    uint64_t v47 = (uint64_t)v46;
    long long v48 = v46 + 64;
    uint64_t v47 = sub_10030BA7C((uint64_t)&v48, (uint64_t)buf, (uint64_t)&v73, (uint64_t)v46);
    if ((v72[23] & 0x80000000) != 0) {
      operator delete(*(void **)v72);
    }
    if (SHIBYTE(v69) < 0) {
      operator delete(*(void **)buf);
    }
    (*(void (**)(uint8_t *__return_ptr))(**(void **)(v2 + 304) + 352))(buf);
    if (!(_BYTE)v69) {
      sub_10016C840();
    }
    long long v67 = *(_OWORD *)buf;
    long long v64 = (void **)v2;
    sub_10031ECD8((uint64_t)v65, v1 + 8);
    *(void *)std::string buf = v64;
    sub_10032CA08((uint64_t)&buf[8], (uint64_t)v65);
    uint64_t v34 = (void **)operator new(0x30uLL);
    CFTypeRef v35 = *(void **)buf;
    unsigned char *v34 = off_1019B9300;
    v34[1] = v35;
    sub_10032CA08((uint64_t)(v34 + 2), (uint64_t)&buf[8]);
    v74[3] = v34;
    sub_10032B6B8(v74, (void *)(v2 + 1640));
    sub_1003135E4(v74);
    sub_100313668(&buf[8]);
    sub_100313668(v65);
    *(void *)std::string buf = v2;
    CFTypeRef v36 = *(std::__shared_weak_count **)(v2 + 16);
    if (!v36 || (v37 = *(void *)(v2 + 8), (long long v38 = std::__shared_weak_count::lock(v36)) == 0)) {
      sub_100088B9C();
    }
    CFTypeRef v39 = v38;
    *(void *)&uint8_t buf[8] = v37;
    long long v69 = v38;
    atomic_fetch_add_explicit(&v38->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v38);
    long long v40 = v46;
    uint64_t v41 = v47;
    uint64_t v70 = v46;
    uint64_t v71 = v47;
    long long v42 = v48;
    *(void *)uint64_t v72 = v48;
    long long v46 = 0;
    uint64_t v47 = 0;
    long long v48 = 0;
    *(_OWORD *)&v72[8] = v67;
    long long v66 = 0;
    long long v43 = (char *)operator new(0x48uLL);
    *(void *)long long v43 = off_1019B9390;
    *((void *)v43 + 1) = v2;
    *((void *)v43 + 2) = v37;
    *((void *)v43 + 3) = v39;
    *(void *)&uint8_t buf[8] = 0;
    long long v69 = 0;
    *((void *)v43 + 4) = v40;
    *((void *)v43 + 5) = v41;
    *((void *)v43 + 6) = v42;
    uint64_t v71 = 0;
    *(void *)uint64_t v72 = 0;
    uint64_t v70 = 0;
    *(_OWORD *)(v43 + 56) = v67;
    long long v66 = v43;
    sub_1002F76C4(v2, (uint64_t)&v64);
    sub_100060644(&v64);
    v74[0] = (void **)&v70;
    sub_10030A698(v74);
    if (v69) {
      std::__shared_weak_count::__release_weak(v69);
    }
    v74[0] = (void **)&v46;
    sub_10030A698(v74);
    sub_10023A670((uint64_t)&v52, v53);
    goto LABEL_61;
  }
  long long v29 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "inconsistent status, transfer ongoing", buf, 2u);
  }
  char v13 = 4;
LABEL_60:
  sub_10024924C(v1 + 8, v13);
LABEL_61:
  if (SHIBYTE(v63) < 0) {
    operator delete(__p[0]);
  }
LABEL_25:
  sub_10032D4B4(&v45);
  return sub_100046B58((uint64_t *)&v44);
}

void sub_10032D33C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,char a25,void *a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,dispatch_object_t object,void *__p,uint64_t a36,int a37,__int16 a38,char a39,char a40,uint64_t a41)
{
  if (*(char *)(v41 - 169) < 0) {
    operator delete(*(void **)(v41 - 192));
  }
  sub_10023A670((uint64_t)&a25, a26);
  if (a40 < 0) {
    operator delete(__p);
  }
  sub_10032D4B4(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_10032D4B4(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_10032D504(void *a1)
{
  *a1 = off_1019B9300;
  sub_100313668(a1 + 2);
  return a1;
}

void sub_10032D548(void *a1)
{
  *a1 = off_1019B9300;
  sub_100313668(a1 + 2);

  operator delete();
}

void *sub_10032D5AC(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B9300;
  v2[1] = v3;
  sub_10031ECD8((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_10032D604(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032D618(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019B9300;
  a2[1] = v2;
  return sub_10031ECD8((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_10032D648(uint64_t a1)
{
  return sub_100313668((void *)(a1 + 16));
}

void sub_10032D650(void *a1)
{
  sub_100313668(a1 + 2);

  operator delete(a1);
}

const void **sub_10032D68C(uint64_t a1, uint64_t a2, const void **a3, const void **a4, char *a5)
{
  uint64_t v6 = *a3;
  *a3 = 0;
  CFTypeRef v10 = *a4;
  uint64_t v11 = v6;
  *a4 = 0;
  char v7 = *a5;
  char v8 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v13 = asString();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I send convertPhysicalToeSIM callback: %s", buf, 0xCu);
  }
  sub_10024924C(a1 + 16, v7);
  sub_100057D78(&v10);
  return sub_1000558F4(&v11);
}

void sub_10032D770(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10)
{
}

uint64_t sub_10032D78C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032D7CC()
{
}

uint64_t sub_10032D7D8(uint64_t a1)
{
  *(void *)a1 = off_1019B9390;
  char v4 = (void **)(a1 + 32);
  sub_10030A698(&v4);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10032D83C(uint64_t a1)
{
  *(void *)a1 = off_1019B9390;
  uint64_t v3 = (void **)(a1 + 32);
  sub_10030A698(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  operator delete();
}

void *sub_10032D8B4(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_1019B9390;
  sub_10032DB08((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10032D908(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032D91C(uint64_t a1, void *a2)
{
  *a2 = off_1019B9390;
  return sub_10032DB08((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10032D948(uint64_t a1)
{
}

void sub_10032D950(void *a1)
{
  sub_10032DB8C((uint64_t)a1 + 8);

  operator delete(a1);
}

void *sub_10032D98C(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = *(void **)(a1 + 8);
  char v4 = (std::__shared_weak_count *)v3[2];
  if (!v4 || (v5 = *a2, v6 = v3[48], uint64_t v7 = v3[1], (v8 = std::__shared_weak_count::lock(v4)) == 0)) {
    sub_100088B9C();
  }
  char v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  CFTypeRef v10 = operator new(0x20uLL);
  void *v10 = off_1019B9400;
  v10[1] = v3;
  _OWORD v10[2] = v7;
  void v10[3] = v9;
  void v12[3] = v10;
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, void *))(*(void *)v6 + 232))(v6, a1 + 32, a1 + 56, v5 != 0, v12);
  return sub_10023D374(v12);
}

void sub_10032DA98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023D374((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10032DABC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032DAFC()
{
}

uint64_t sub_10032DB08(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = 0;
  sub_10030CD0C((void *)(a1 + 24), *(void *)(a2 + 24), *(void *)(a2 + 32), (uint64_t)(*(void *)(a2 + 32) - *(void *)(a2 + 24)) >> 6);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  return a1;
}

void sub_10032DB74(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032DB8C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 24);
  sub_10030A698(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void *sub_10032DBD0(void *a1)
{
  *a1 = off_1019B9400;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10032DC1C(void *a1)
{
  *a1 = off_1019B9400;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10032DC88(uint64_t a1)
{
  __n128 result = (char *)operator new(0x20uLL);
  *(void *)__n128 result = off_1019B9400;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10032DCEC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B9400;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10032DD2C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10032DD3C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10032DD7C(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      if (a1[2])
      {
        int v5 = *(std::__shared_weak_count **)(v3 + 16);
        if (v5)
        {
          if (std::__shared_weak_count::lock(v5)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v4);
    }
  }
}

uint64_t sub_10032DEA4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032DEE4()
{
}

void sub_10032DEF0(void ***a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 136315138;
    uint64_t v6 = asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I convert psim -> esim ? %s", buf, 0xCu);
  }
  sub_1002E0E3C(v2, *((unsigned char *)v1 + 9), *((unsigned __int8 *)v1 + 8));
  operator delete();
}

void sub_10032DFD4()
{
}

uint64_t sub_10032E000(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_10032E080(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v32 = a1;
  uint64_t v33 = v1;
  uint64_t v2 = *(void *)v1;
  if ((_os_feature_enabled_impl() & 1) == 0)
  {
    memset(buf, 0, sizeof(buf));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, 17);
    goto LABEL_49;
  }
  if (*(unsigned char *)(v2 + 4601) && *(unsigned char *)(v2 + 4600))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#E transfer credential fetch is blocked : regulatory restriction active", buf, 2u);
    }
    memset(buf, 0, sizeof(buf));
    char v4 = (*(uint64_t (**)(void))(**(void **)(v2 + 320) + 848))(*(void *)(v2 + 320));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, v4);
    goto LABEL_49;
  }
  int v5 = (void *)(v1 + 8);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 304) + 368))(*(void *)(v2 + 304), v1 + 8) & 1) == 0)
  {
    uint64_t v22 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v22, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v1 + 31) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_ERROR, "transfer plan (source). Iccid: [%s] is not present", buf, 0xCu);
    }
    sub_1003084A0(*(void *)(v2 + 160));
    memset(buf, 0, sizeof(buf));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, 6);
LABEL_49:
    if ((char)buf[23] < 0)
    {
      uint64_t v24 = *(void **)buf;
LABEL_51:
      operator delete(v24);
      goto LABEL_52;
    }
    goto LABEL_52;
  }
  if (*(unsigned char *)(v2 + 2289) != 1)
  {
    char v23 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v1 + 31) < 0) {
        int v5 = (void *)*v5;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v5;
      _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, "no internet connection. abort query. iccid : [%s]", buf, 0xCu);
    }
    sub_1003084A0(*(void *)(v2 + 160));
    memset(buf, 0, sizeof(buf));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, 5);
    goto LABEL_49;
  }
  uint64_t v6 = *(void *)(v2 + 400);
  if (v6) {
    goto LABEL_41;
  }
  uint64_t v7 = *(void *)(v2 + 320);
  char v8 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v8;
  if (v8) {
    dispatch_retain(v8);
  }
  char v9 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v9 || (v10 = *(void *)(v2 + 8), (uint64_t v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v12 = v10 + 96;
  if (!v10) {
    uint64_t v12 = 0;
  }
  uint64_t v41 = v12;
  long long v42 = v11;
  uint64_t v13 = *(std::__shared_weak_count **)(v2 + 424);
  uint64_t v39 = *(void *)(v2 + 416);
  long long v40 = v13;
  if (v13) {
    atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v14 = *(std::__shared_weak_count **)(v2 + 520);
  uint64_t v37 = *(void *)(v2 + 512);
  long long v38 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v7 + 424))(buf, v7, 1, &object, &v41, &v39, &v37);
  long long v15 = *(_OWORD *)buf;
  *(void *)std::string buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  uint64_t v16 = *(std::__shared_weak_count **)(v2 + 408);
  *(_OWORD *)(v2 + 400) = v15;
  if (v16)
  {
    sub_10004D2C8(v16);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v38) {
    sub_10004D2C8(v38);
  }
  if (v40) {
    sub_10004D2C8(v40);
  }
  if (v42) {
    sub_10004D2C8(v42);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v17 = *(void *)(v2 + 400);
  if (!v17)
  {
    uint64_t v31 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_ERROR, "cannot create source transfer auth controller", buf, 2u);
    }
    sub_1003084A0(*(void *)(v2 + 160));
    memset(buf, 0, sizeof(buf));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, 5);
    goto LABEL_49;
  }
  *(void *)&uint8_t buf[8] = 0;
  *(void *)&uint8_t buf[16] = 0;
  *(void *)std::string buf = &buf[8];
  if (*(unsigned char *)(v2 + 2664)) {
    uint64_t v18 = (uint8_t *)(v2 + 2640);
  }
  else {
    uint64_t v18 = buf;
  }
  int v19 = *(_DWORD *)(v2 + 2632);
  sub_1002DD40C((uint64_t)v48, (void *)(v2 + 1616));
  memset(v36, 0, sizeof(v36));
  uint64_t v20 = *(std::__shared_weak_count **)(v2 + 5376);
  uint64_t v34 = *(void *)(v2 + 5368);
  CFTypeRef v35 = v20;
  if (v20) {
    atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, uint8_t *, uint64_t, void *, void *, uint64_t *, uint64_t *, uint64_t))(*(void *)v17 + 16))(v17, v2 + 2568, v2 + 2464, v19 == 1, v2 + 2320, v2 + 2344, v18, v2 + 2488, v48, v36, &v34, v32, v33);
  if (v35) {
    sub_10004D2C8(v35);
  }
  uint64_t v44 = (void **)v36;
  sub_10030AFC8(&v44);
  sub_10005CD2C((uint64_t)v48, (char *)v48[1]);
  sub_10023A670((uint64_t)buf, *(void **)&buf[8]);
  uint64_t v6 = *(void *)(v2 + 400);
LABEL_41:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 160))(v6))
  {
    uint64_t v21 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "transfer attempt ongoing on source", buf, 2u);
    }
    sub_1003084A0(*(void *)(v2 + 160));
    memset(buf, 0, sizeof(buf));
    sub_10032E894(*(void *)(v1 + 56), (uint64_t)buf, 13);
    goto LABEL_49;
  }
  uint64_t v26 = *(void *)(v2 + 400);
  *(void *)std::string buf = v2;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(&buf[8], *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v27 = *(_OWORD *)v5;
    uint64_t v46 = *(void *)(v1 + 24);
    *(_OWORD *)&uint8_t buf[8] = v27;
  }
  sub_10032E8E4((uint64_t)v47, v1 + 32);
  uint64_t v49 = 0;
  uint64_t v28 = operator new(0x48uLL);
  uint64_t v29 = *(void *)buf;
  *uint64_t v28 = off_1019B9490;
  v28[1] = v29;
  os_log_t v30 = v28 + 2;
  if (SHIBYTE(v46) < 0)
  {
    sub_10004FC84(v30, *(void **)&buf[8], *(unint64_t *)&buf[16]);
  }
  else
  {
    *(_OWORD *)os_log_t v30 = *(_OWORD *)&buf[8];
    uint8_t v28[4] = v46;
  }
  sub_10032E000((uint64_t)(v28 + 5), (uint64_t)v47);
  uint64_t v49 = v28;
  (*(void (**)(uint64_t, void *, void *))(*(void *)v26 + 296))(v26, v5, v48);
  sub_10033022C(v48);
  sub_10030CEB8(v47);
  if (SHIBYTE(v46) < 0)
  {
    uint64_t v24 = *(void **)&buf[8];
    goto LABEL_51;
  }
LABEL_52:
  sub_10032E834(&v33);
  return sub_100046B58((uint64_t *)&v32);
}

void sub_10032E724(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t object,uint64_t a26,void *__p,uint64_t a28,int a29,__int16 a30,char a31,char a32,int a33,__int16 a34,char a35,char a36)
{
  if (a32 < 0) {
    operator delete(__p);
  }
  sub_10032E834(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_10032E834(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_10030CEB8((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10032E894(uint64_t a1, uint64_t a2, char a3)
{
  char v4 = a3;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, &v4);
}

uint64_t sub_10032E8E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10032E97C(uint64_t a1)
{
  *(void *)a1 = off_1019B9490;
  sub_10030CEB8((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10032E9D0(uint64_t a1)
{
  *(void *)a1 = off_1019B9490;
  sub_10030CEB8((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10032EA44(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_1019B9490;
  sub_10032F8D8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10032EA98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10032EAAC(uint64_t a1, void *a2)
{
  *a2 = off_1019B9490;
  return sub_10032F8D8((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10032EAD8(uint64_t a1)
{
}

void sub_10032EAE0(void *a1)
{
  sub_10032F968((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10032EB1C(uint64_t a1, uint64_t a2, unsigned __int8 *a3)
{
  __str.__r_.__value_.__s.__data_[0] = 0;
  char v66 = 0;
  if (*(unsigned char *)(a2 + 256))
  {
    sub_1003300C4((uint64_t)&__str, (long long *)a2);
    char v66 = 1;
  }
  int v5 = *a3;
  uint64_t v6 = *(void *)(a1 + 8);
  if (v5)
  {
    uint64_t v7 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      uint64_t v50 = a1 + 16;
      if (*(char *)(a1 + 39) < 0) {
        uint64_t v50 = *(void *)(a1 + 16);
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v50;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "get transfer token failed for iccid: %s", buf, 0xCu);
    }
    sub_1003084A0(*(void *)(v6 + 160));
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v100 = 0;
    sub_10032E894(*(void *)(a1 + 64), (uint64_t)buf, v5);
    if (SBYTE7(v100) < 0)
    {
      char v8 = *(void **)buf;
LABEL_168:
      operator delete(v8);
      goto LABEL_169;
    }
    goto LABEL_169;
  }
  memset(&v81, 0, sizeof(v81));
  if (*(unsigned char *)(v6 + 2368)) {
    std::string::operator=(&v81, (const std::string *)(v6 + 2344));
  }
  uint64_t v78 = 0;
  uint64_t v79 = 0;
  uint64_t v80 = 0;
  sub_10010CB7C(&v78, *(void *)(v6 + 2464), *(void *)(v6 + 2472), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v6 + 2472) - *(void *)(v6 + 2464)) >> 3));
  uint64_t v10 = v78;
  uint64_t v9 = v79;
  uint64_t v11 = (void *)(a1 + 16);
  if (v78 == v79)
  {
    uint64_t v9 = v78;
  }
  else
  {
    char v12 = *(unsigned char *)(a1 + 39);
    if (v12 >= 0) {
      uint64_t v13 = *(unsigned __int8 *)(a1 + 39);
    }
    else {
      uint64_t v13 = *(void *)(a1 + 24);
    }
    if (v12 >= 0) {
      uint64_t v14 = (unsigned __int8 *)(a1 + 16);
    }
    else {
      uint64_t v14 = *(unsigned __int8 **)(a1 + 16);
    }
    while (1)
    {
      uint64_t v15 = *(unsigned __int8 *)(v10 + 95);
      uint64_t v16 = (v15 & 0x80u) == 0 ? *(unsigned __int8 *)(v10 + 95) : *(void *)(v10 + 80);
      if (v16 != v13) {
        break;
      }
      if ((v15 & 0x80) != 0)
      {
        if (memcmp(*(const void **)(v10 + 72), v14, *(void *)(v10 + 80))) {
          break;
        }
      }
      else if (*(unsigned char *)(v10 + 95))
      {
        uint64_t v17 = 0;
        while (*(unsigned __int8 *)(v10 + v17 + 72) == v14[v17])
        {
          if (v15 == ++v17) {
            goto LABEL_27;
          }
        }
        break;
      }
LABEL_27:
      v10 += 168;
      if (v10 == v9) {
        goto LABEL_53;
      }
    }
    if (v10 == v9)
    {
LABEL_53:
      uint64_t v19 = v9;
      goto LABEL_54;
    }
    uint64_t v18 = v10 + 168;
    if (v10 + 168 != v9)
    {
      uint64_t v19 = v10;
      while (1)
      {
        uint64_t v20 = *(unsigned __int8 *)(v10 + 263);
        if ((v20 & 0x80u) == 0) {
          uint64_t v21 = *(unsigned __int8 *)(v10 + 263);
        }
        else {
          uint64_t v21 = *(void *)(v10 + 248);
        }
        uint64_t v22 = *(unsigned __int8 *)(a1 + 39);
        int v23 = (char)v22;
        if ((v22 & 0x80u) != 0) {
          uint64_t v22 = *(void *)(a1 + 24);
        }
        if (v21 != v22) {
          goto LABEL_49;
        }
        uint64_t v24 = (unsigned __int8 *)(v23 >= 0 ? a1 + 16 : *v11);
        if ((v20 & 0x80) == 0) {
          break;
        }
        if (!memcmp(*(const void **)(v10 + 240), v24, *(void *)(v10 + 248))) {
          goto LABEL_48;
        }
LABEL_49:
        v18 += 168;
        v10 += 168;
        if (v18 == v9)
        {
          uint64_t v9 = v79;
          goto LABEL_54;
        }
      }
      if (*(unsigned char *)(v10 + 263))
      {
        uint64_t v25 = 0;
        while (*(unsigned __int8 *)(v10 + v25 + 240) == v24[v25])
        {
          if (v20 == ++v25) {
            goto LABEL_48;
          }
        }
        goto LABEL_49;
      }
LABEL_48:
      sub_10032FAFC(v19, v18);
      v19 += 168;
      goto LABEL_49;
    }
  }
  uint64_t v19 = v10;
LABEL_54:
  sub_10032F9B8((uint64_t)&v78, v19, v9);
  uint64_t v75 = 0;
  uint64_t v76 = 0;
  uint64_t v77 = 0;
  sub_100311ED8(&v75, *(void *)(v6 + 2568), *(void *)(v6 + 2576), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v6 + 2576) - *(void *)(v6 + 2568)) >> 3));
  uint64_t v27 = v75;
  uint64_t v26 = v76;
  while (v27 != v26)
  {
    if (!*(unsigned char *)(v27 + 80)) {
      goto LABEL_103;
    }
    uint64_t v29 = *(void *)(v27 + 56);
    uint64_t v28 = *(void *)(v27 + 64);
    if (v29 == v28)
    {
      uint64_t v28 = *(void *)(v27 + 56);
    }
    else
    {
      char v30 = *(unsigned char *)(a1 + 39);
      if (v30 >= 0) {
        uint64_t v31 = *(unsigned __int8 *)(a1 + 39);
      }
      else {
        uint64_t v31 = *(void *)(a1 + 24);
      }
      if (v30 >= 0) {
        int v32 = (unsigned __int8 *)(a1 + 16);
      }
      else {
        int v32 = *(unsigned __int8 **)(a1 + 16);
      }
      while (1)
      {
        uint64_t v33 = *(unsigned __int8 *)(v29 + 39);
        uint64_t v34 = (v33 & 0x80u) == 0 ? *(unsigned __int8 *)(v29 + 39) : *(void *)(v29 + 24);
        if (v34 != v31) {
          break;
        }
        if ((v33 & 0x80) != 0)
        {
          if (memcmp(*(const void **)(v29 + 16), v32, *(void *)(v29 + 24))) {
            break;
          }
        }
        else if (*(unsigned char *)(v29 + 39))
        {
          uint64_t v35 = 0;
          while (*(unsigned __int8 *)(v29 + v35 + 16) == v32[v35])
          {
            if (v33 == ++v35) {
              goto LABEL_75;
            }
          }
          break;
        }
LABEL_75:
        v29 += 216;
        if (v29 == v28) {
          goto LABEL_101;
        }
      }
      if (v29 == v28)
      {
LABEL_101:
        uint64_t v37 = v28;
        goto LABEL_102;
      }
      uint64_t v36 = v29 + 216;
      if (v29 + 216 != v28)
      {
        uint64_t v37 = v29;
        while (1)
        {
          uint64_t v38 = *(unsigned __int8 *)(v29 + 255);
          if ((v38 & 0x80u) == 0) {
            uint64_t v39 = *(unsigned __int8 *)(v29 + 255);
          }
          else {
            uint64_t v39 = *(void *)(v29 + 240);
          }
          uint64_t v40 = *(unsigned __int8 *)(a1 + 39);
          int v41 = (char)v40;
          if ((v40 & 0x80u) != 0) {
            uint64_t v40 = *(void *)(a1 + 24);
          }
          if (v39 != v40) {
            goto LABEL_97;
          }
          long long v42 = (unsigned __int8 *)(v41 >= 0 ? a1 + 16 : *v11);
          if ((v38 & 0x80) == 0) {
            break;
          }
          if (!memcmp(*(const void **)(v29 + 232), v42, *(void *)(v29 + 240))) {
            goto LABEL_96;
          }
LABEL_97:
          v36 += 216;
          v29 += 216;
          if (v36 == v28)
          {
            uint64_t v28 = *(void *)(v27 + 64);
            goto LABEL_102;
          }
        }
        if (*(unsigned char *)(v29 + 255))
        {
          uint64_t v43 = 0;
          while (*(unsigned __int8 *)(v29 + v43 + 232) == v42[v43])
          {
            if (v38 == ++v43) {
              goto LABEL_96;
            }
          }
          goto LABEL_97;
        }
LABEL_96:
        sub_10032FC84(v37, v36);
        v37 += 216;
        goto LABEL_97;
      }
    }
    uint64_t v37 = v29;
LABEL_102:
    sub_10032FA2C(v27 + 56, v37, v28);
    uint64_t v26 = v76;
LABEL_103:
    v27 += 88;
  }
  v74[0] = 0;
  v74[1] = 0;
  uint64_t v73 = (uint64_t *)v74;
  if (v66 && v55)
  {
    v124[0] = (void *)(a1 + 16);
    uint64_t v44 = sub_10032FE40(&v73, (void **)(a1 + 16), (uint64_t)&unk_10144E20E, (long long **)v124);
    std::string::operator=((std::string *)(v44 + 7), &__str);
    *((_WORD *)v44 + 40) = v53;
    sub_100179AF8((std::string *)(v44 + 11), &v54);
    sub_100179AF8((std::string *)v44 + 5, &v56);
    sub_100179AF8((std::string *)(v44 + 19), &v57);
    sub_100179AF8((std::string *)(v44 + 23), &v58);
    *((_WORD *)v44 + 108) = v59;
    std::string::operator=((std::string *)(v44 + 28), &v60);
    *((_WORD *)v44 + 124) = v61;
    *((unsigned char *)v44 + 250) = v62;
    sub_100179AF8((std::string *)(v44 + 32), &v63);
    *((_OWORD *)v44 + 18) = v64;
    *((_WORD *)v44 + 152) = v65;
  }
  else
  {
    uint64_t v45 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "invalid token", buf, 2u);
    }
  }
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  uint64_t v70 = &v71;
  uint64_t v46 = *(void *)(v6 + 416);
  if (v46)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v46 + 224))(buf);
    sub_10005CD2C((uint64_t)&v70, v71);
    uint64_t v47 = *(char **)&buf[8];
    uint64_t v70 = *(char ***)buf;
    uint64_t v71 = *(char **)&buf[8];
    uint64_t v72 = v100;
    if ((void)v100)
    {
      *(void *)(*(void *)&buf[8] + 16) = &v71;
      *(void *)std::string buf = &buf[8];
      *(void *)&uint8_t buf[8] = 0;
      *(void *)&long long v100 = 0;
      uint64_t v47 = 0;
    }
    else
    {
      uint64_t v70 = &v71;
    }
    sub_10005CD2C((uint64_t)buf, v47);
  }
  memset(v144, 0, sizeof(v144));
  *(_OWORD *)long long v143 = 0u;
  long long v142 = 0u;
  *(_OWORD *)long long v141 = 0u;
  *(_OWORD *)char v140 = 0u;
  long long v139 = 0u;
  *(_OWORD *)char v138 = 0u;
  *(_OWORD *)char v137 = 0u;
  memset(v136, 0, sizeof(v136));
  long long v135 = 0u;
  *(_OWORD *)char v134 = 0u;
  long long v133 = 0u;
  *(_OWORD *)long long v132 = 0u;
  long long v131 = 0u;
  *(_OWORD *)uint64_t v130 = 0u;
  long long v129 = 0u;
  *(_OWORD *)int v128 = 0u;
  long long v127 = 0u;
  *(_OWORD *)long long v126 = 0u;
  long long v125 = 0u;
  *(_OWORD *)long long v124 = 0u;
  (*(void (**)(uint8_t *__return_ptr))(**(void **)(v6 + 304) + 560))(buf);
  sub_100CD1EF8((std::string *)(v6 + 2488), (void *)(v6 + 320), (os_log_t *)(v6 + 40), &v75, &v78, v6 + 2320, (uint64_t)&v81, (uint64_t)&v73, (uint64_t)v124, (const std::string **)(v6 + 5368), (uint64_t)&v70, (uint64_t)buf);
  sub_10010E37C((uint64_t)buf, *(void **)&buf[8]);
  long long v123 = 0u;
  long long v122 = 0u;
  long long v121 = 0u;
  long long v120 = 0u;
  long long v119 = 0u;
  long long v118 = 0u;
  long long v116 = 0u;
  long long v117 = 0u;
  long long v114 = 0u;
  long long v115 = 0u;
  long long v112 = 0u;
  long long v113 = 0u;
  long long v110 = 0u;
  long long v111 = 0u;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  long long v100 = 0u;
  long long v101 = 0u;
  *(_OWORD *)std::string buf = 0u;
  uint64_t v98 = 0;
  long long v96 = 0u;
  memset(v97, 0, sizeof(v97));
  long long v94 = 0u;
  *(_OWORD *)char v95 = 0u;
  long long v92 = 0u;
  *(_OWORD *)char v93 = 0u;
  long long v90 = 0u;
  *(_OWORD *)char v91 = 0u;
  long long v88 = 0u;
  *(_OWORD *)char v89 = 0u;
  long long v86 = 0u;
  *(_OWORD *)uint8_t v87 = 0u;
  *(_OWORD *)long long v85 = 0u;
  sub_100311D64((uint64_t)v85, (uint64_t)v124);
  LOBYTE(v98) = 1;
  long long __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  long long v83 = 0uLL;
  uint64_t v84 = 0;
  sub_10098E0F8((uint64_t)buf, (os_log_t *)(v6 + 40), (uint64_t)v85, (const std::string *)v137, (uint64_t *)&__p, &v83);
  __int16 v82 = (void **)&v83;
  sub_100047F64(&v82);
  *(void *)&long long v83 = &__p;
  sub_10010DF1C((void ***)&v83);
  long long __p = 0;
  uint64_t v68 = 0;
  uint64_t v69 = 0;
  sub_100990074((uint64_t)buf, a1 + 16, &__p);
  uint64_t v48 = HIBYTE(v69);
  if (v69 < 0) {
    uint64_t v48 = v68;
  }
  if (!v48)
  {
    uint64_t v49 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v49, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 39) >= 0) {
        uint64_t v51 = a1 + 16;
      }
      else {
        uint64_t v51 = *(void *)(a1 + 16);
      }
      LODWORD(v83) = 136315138;
      *(void *)((char *)&v83 + 4) = v51;
      _os_log_error_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_ERROR, "get empty transfer credentials for iccid: %s", (uint8_t *)&v83, 0xCu);
    }
    sub_1003084A0(*(void *)(v6 + 160));
  }
  sub_10032E894(*(void *)(a1 + 64), (uint64_t)&__p, 0);
  if (SHIBYTE(v69) < 0) {
    operator delete(__p);
  }
  if ((_BYTE)v98)
  {
    long long __p = (char *)v97 + 8;
    sub_1000C56F4((void ***)&__p);
    if (SHIBYTE(v96) < 0) {
      operator delete(v95[1]);
    }
    if (SBYTE7(v94) < 0) {
      operator delete(v93[0]);
    }
    if (BYTE8(v90))
    {
      if (SBYTE7(v92) < 0) {
        operator delete(v91[0]);
      }
      BYTE8(v90) = 0;
    }
    if (BYTE8(v88))
    {
      if (SBYTE7(v90) < 0) {
        operator delete(v89[0]);
      }
      BYTE8(v88) = 0;
    }
    if (SBYTE7(v88) < 0) {
      operator delete(v87[0]);
    }
    if (LOBYTE(v85[0]) && SHIBYTE(v86) < 0) {
      operator delete(v85[1]);
    }
  }
  sub_1000C52BC((uint64_t)buf);
  *(void *)std::string buf = (char *)v144 + 8;
  sub_1000C5358((void ***)buf);
  if (SBYTE7(v144[0]) < 0) {
    operator delete(v143[0]);
  }
  if (SHIBYTE(v142) < 0) {
    operator delete(v141[1]);
  }
  if (SHIBYTE(v141[0]) < 0) {
    operator delete(v140[0]);
  }
  if (SHIBYTE(v139) < 0) {
    operator delete(v138[1]);
  }
  if (SHIBYTE(v138[0]) < 0) {
    operator delete(v137[0]);
  }
  *(void *)std::string buf = (char *)v136 + 8;
  sub_1000C56F4((void ***)buf);
  if (SHIBYTE(v135) < 0) {
    operator delete(v134[1]);
  }
  if (SBYTE7(v133) < 0) {
    operator delete(v132[0]);
  }
  if (BYTE8(v129))
  {
    if (SBYTE7(v131) < 0) {
      operator delete(v130[0]);
    }
    BYTE8(v129) = 0;
  }
  if (BYTE8(v127))
  {
    if (SBYTE7(v129) < 0) {
      operator delete(v128[0]);
    }
    BYTE8(v127) = 0;
  }
  if (SBYTE7(v127) < 0) {
    operator delete(v126[0]);
  }
  if (LOBYTE(v124[0]) && SHIBYTE(v125) < 0) {
    operator delete(v124[1]);
  }
  sub_10005CD2C((uint64_t)&v70, v71);
  sub_100330068((uint64_t)&v73, v74[0]);
  *(void *)std::string buf = &v75;
  sub_1000C56F4((void ***)buf);
  *(void *)std::string buf = &v78;
  sub_10008A88C((void ***)buf);
  if (SHIBYTE(v81.__r_.__value_.__r.__words[2]) < 0)
  {
    char v8 = (void *)v81.__r_.__value_.__r.__words[0];
    goto LABEL_168;
  }
LABEL_169:
  if (v66) {
    sub_1000C5578((uint64_t)&__str);
  }
}

void sub_10032F5E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,char a45,void *a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,char a52,uint64_t a53,uint64_t a54,char a55,uint64_t a56,uint64_t a57,char a58,uint64_t a59,uint64_t a60,void *__p,uint64_t a62,int a63)
{
  sub_10005CD2C((uint64_t)&a49, (char *)a50);
  sub_100330068((uint64_t)&a52, (void *)a53);
  STACK[0x2E0] = (unint64_t)&a55;
  sub_1000C56F4((void ***)&STACK[0x2E0]);
  STACK[0x2E0] = (unint64_t)&a58;
  sub_10008A88C((void ***)&STACK[0x2E0]);
  if (a66 < 0) {
    operator delete(__p);
  }
  if (a45) {
    sub_1000C5578((uint64_t)&a13);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_10032F88C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10032F8CC()
{
}

uint64_t sub_10032F8D8(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_10032E8E4(a1 + 32, a2 + 32);
  return a1;
}

void sub_10032F94C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10032F968(uint64_t a1)
{
  sub_10030CEB8((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t sub_10032F9B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10032FA9C(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
      {
        v7 -= 168;
        sub_10008A14C(v7);
      }
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_10032FA2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    sub_10032FC24(a3, *(void *)(a1 + 8), a2);
    uint64_t v6 = v5;
    uint64_t v7 = *(void *)(a1 + 8);
    if (v7 != v5)
    {
      do
        uint64_t v7 = sub_1000C584C(v7 - 216);
      while (v7 != v6);
    }
    *(void *)(a1 + 8) = v6;
  }
  return a2;
}

uint64_t sub_10032FA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10032FAFC(a3, v4);
      v4 += 168;
      a3 += 168;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_10032FAFC(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_10005C9A4(a1 + 16, (__n128 *)(a2 + 16));
  sub_10008A7C8((uint64_t *)(a1 + 40));
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a2 + 48) = 0;
  *(void *)(a2 + 56) = 0;
  *(void *)(a2 + 40) = 0;
  int v4 = *(_DWORD *)(a2 + 64);
  *(_WORD *)(a1 + 68) = *(_WORD *)(a2 + 68);
  *(_DWORD *)(a1 + 64) = v4;
  uint64_t v5 = (void **)(a1 + 72);
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*v5);
  }
  long long v6 = *(_OWORD *)(a2 + 72);
  *(void *)(a1 + 88) = *(void *)(a2 + 88);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 95) = 0;
  *(unsigned char *)(a2 + 72) = 0;
  uint64_t v7 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  uint64_t v9 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t v9 = v10;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  uint64_t v11 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  return a1;
}

uint64_t sub_10032FC24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1;
  if (a1 != a2)
  {
    do
    {
      sub_10032FC84(a3, v4);
      v4 += 216;
      a3 += 216;
    }
    while (v4 != a2);
    return a2;
  }
  return v4;
}

uint64_t sub_10032FC84(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = a1 + 16;
  uint64_t v5 = (long long *)(a2 + 16);
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)v4);
  }
  long long v6 = *v5;
  *(void *)(v4 + 16) = *((void *)v5 + 2);
  *(_OWORD *)uint64_t v4 = v6;
  *(unsigned char *)(a2 + 39) = 0;
  *(unsigned char *)(a2 + 16) = 0;
  uint64_t v7 = (void **)(a1 + 40);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)uint64_t v7 = v8;
  *(unsigned char *)(a2 + 63) = 0;
  *(unsigned char *)(a2 + 40) = 0;
  uint64_t v9 = (void **)(a1 + 64);
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)uint64_t v9 = v10;
  *(unsigned char *)(a2 + 87) = 0;
  *(unsigned char *)(a2 + 64) = 0;
  *(_DWORD *)(a1 + 88) = *(_DWORD *)(a2 + 88);
  uint64_t v11 = (void **)(a1 + 96);
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 96);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_OWORD *)uint64_t v11 = v12;
  *(unsigned char *)(a2 + 119) = 0;
  *(unsigned char *)(a2 + 96) = 0;
  uint64_t v13 = (void **)(a1 + 120);
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a2 + 143) = 0;
  *(unsigned char *)(a2 + 120) = 0;
  uint64_t v15 = (void **)(a1 + 144);
  if (*(char *)(a1 + 167) < 0) {
    operator delete(*v15);
  }
  long long v16 = *(_OWORD *)(a2 + 144);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(_OWORD *)uint64_t v15 = v16;
  *(unsigned char *)(a2 + 167) = 0;
  *(unsigned char *)(a2 + 144) = 0;
  uint64_t v17 = (void **)(a1 + 168);
  if (*(char *)(a1 + 191) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 168);
  *(void *)(a1 + 184) = *(void *)(a2 + 184);
  *(_OWORD *)uint64_t v17 = v18;
  *(unsigned char *)(a2 + 191) = 0;
  *(unsigned char *)(a2 + 168) = 0;
  uint64_t v19 = (void **)(a1 + 192);
  if (*(char *)(a1 + 215) < 0) {
    operator delete(*v19);
  }
  long long v20 = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = *(void *)(a2 + 208);
  *(_OWORD *)uint64_t v19 = v20;
  *(unsigned char *)(a2 + 215) = 0;
  *(unsigned char *)(a2 + 192) = 0;
  return a1;
}

uint64_t *sub_10032FE40(uint64_t **a1, void **a2, uint64_t a3, long long **a4)
{
  uint64_t v11 = 0;
  long long v6 = (uint64_t **)sub_100046ED4((uint64_t)a1, &v11, a2);
  uint64_t v7 = *v6;
  if (!*v6)
  {
    long long v8 = v6;
    memset(v10, 0, sizeof(v10));
    sub_10032FEF8((uint64_t)a1, a4, v10);
    sub_100046C38(a1, v11, v8, v10[0]);
    uint64_t v7 = v10[0];
    v10[0] = 0;
    sub_10032FFC0((uint64_t)v10, 0);
  }
  return v7;
}

double sub_10032FEF8@<D0>(uint64_t a1@<X0>, long long **a2@<X2>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  long long v6 = (char *)operator new(0x138uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  uint64_t v7 = v6 + 32;
  long long v8 = *a2;
  if (*((char *)*a2 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)v8, *((void *)v8 + 1));
  }
  else
  {
    long long v9 = *v8;
    *((void *)v6 + 6) = *((void *)v8 + 2);
    *(_OWORD *)uint64_t v7 = v9;
  }
  double result = 0.0;
  *(_OWORD *)(v6 + 56) = 0u;
  uint64_t v11 = v6 + 56;
  v11[15] = 0u;
  v11[11] = 0u;
  v11[12] = 0u;
  v11[9] = 0u;
  v11[10] = 0u;
  v11[7] = 0u;
  v11[8] = 0u;
  v11[5] = 0u;
  void v11[6] = 0u;
  void v11[3] = 0u;
  void v11[4] = 0u;
  v11[1] = 0u;
  void v11[2] = 0u;
  v11[14] = 0u;
  v11[13] = 0u;
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_10032FFA8(_Unwind_Exception *a1)
{
  sub_10032FFC0(v1, 0);
  _Unwind_Resume(a1);
}

void sub_10032FFC0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100330018((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void sub_100330018(uint64_t a1)
{
  sub_1000C5578(a1 + 24);
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100330068(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100330068(a1, *a2);
    sub_100330068(a1, a2[1]);
    sub_100330018((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

__n128 sub_1003300C4(uint64_t a1, long long *a2)
{
  long long v2 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v2;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  __int16 v3 = *((_WORD *)a2 + 12);
  *(unsigned char *)(a1 + 32) = 0;
  *(_WORD *)(a1 + 24) = v3;
  *(unsigned char *)(a1 + 56) = 0;
  if (*((unsigned char *)a2 + 56))
  {
    long long v4 = a2[2];
    *(void *)(a1 + 48) = *((void *)a2 + 6);
    *(_OWORD *)(a1 + 32) = v4;
    *((void *)a2 + 5) = 0;
    *((void *)a2 + 6) = 0;
    *((void *)a2 + 4) = 0;
    *(unsigned char *)(a1 + 56) = 1;
  }
  *(unsigned char *)(a1 + 64) = 0;
  *(unsigned char *)(a1 + 88) = 0;
  if (*((unsigned char *)a2 + 88))
  {
    long long v5 = a2[4];
    *(void *)(a1 + 80) = *((void *)a2 + 10);
    *(_OWORD *)(a1 + 64) = v5;
    *((void *)a2 + 9) = 0;
    *((void *)a2 + 10) = 0;
    *((void *)a2 + 8) = 0;
    *(unsigned char *)(a1 + 88) = 1;
  }
  *(unsigned char *)(a1 + 96) = 0;
  *(unsigned char *)(a1 + 120) = 0;
  if (*((unsigned char *)a2 + 120))
  {
    long long v6 = a2[6];
    *(void *)(a1 + 112) = *((void *)a2 + 14);
    *(_OWORD *)(a1 + 96) = v6;
    *((void *)a2 + 13) = 0;
    *((void *)a2 + 14) = 0;
    *((void *)a2 + 12) = 0;
    *(unsigned char *)(a1 + 120) = 1;
  }
  *(unsigned char *)(a1 + 128) = 0;
  *(unsigned char *)(a1 + 152) = 0;
  if (*((unsigned char *)a2 + 152))
  {
    long long v7 = a2[8];
    *(void *)(a1 + 144) = *((void *)a2 + 18);
    *(_OWORD *)(a1 + 128) = v7;
    *((void *)a2 + 17) = 0;
    *((void *)a2 + 18) = 0;
    *((void *)a2 + 16) = 0;
    *(unsigned char *)(a1 + 152) = 1;
  }
  *(_WORD *)(a1 + 160) = *((_WORD *)a2 + 80);
  long long v8 = *(long long *)((char *)a2 + 168);
  *(void *)(a1 + 184) = *((void *)a2 + 23);
  *(_OWORD *)(a1 + 168) = v8;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 21) = 0;
  char v9 = *((unsigned char *)a2 + 194);
  __int16 v10 = *((_WORD *)a2 + 96);
  *(unsigned char *)(a1 + 200) = 0;
  *(_WORD *)(a1 + 192) = v10;
  *(unsigned char *)(a1 + 194) = v9;
  *(unsigned char *)(a1 + 224) = 0;
  if (*((unsigned char *)a2 + 224))
  {
    long long v11 = *(long long *)((char *)a2 + 200);
    *(void *)(a1 + 216) = *((void *)a2 + 27);
    *(_OWORD *)(a1 + 200) = v11;
    *((void *)a2 + 26) = 0;
    *((void *)a2 + 27) = 0;
    *((void *)a2 + 25) = 0;
    *(unsigned char *)(a1 + 224) = 1;
  }
  __n128 result = *(__n128 *)((char *)a2 + 232);
  *(_WORD *)(a1 + 248) = *((_WORD *)a2 + 124);
  *(__n128 *)(a1 + 232) = result;
  return result;
}

void *sub_10033022C(void *a1)
{
  long long v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_1003302B0(uint64_t a1, uint64_t a2)
{
  __int16 v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    __int16 v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100330330(uint64_t *a1)
{
  uint64_t v1 = *a1;
  char v30 = a1;
  uint64_t v31 = v1;
  uint64_t v2 = *(void *)v1;
  __int16 v3 = (unsigned char *)(*(void *)v1 + 4600);
  uint64_t v4 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    long long v5 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      long long v5 = (void *)*v5;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I get transfer plan info from self device. iccid:%s", (uint8_t *)&buf, 0xCu);
  }
  if (v3[1] && *v3)
  {
    long long v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#E transfer type is blocked : regulatory restriction active", (uint8_t *)&buf, 2u);
    }
    goto LABEL_51;
  }
  long long v7 = (void *)(v1 + 8);
  if (((*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 304) + 368))(*(void *)(v2 + 304), v1 + 8) & 1) == 0)
  {
    uint64_t v25 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v25, OS_LOG_TYPE_ERROR)) {
      goto LABEL_51;
    }
    if (*(char *)(v1 + 31) < 0) {
      long long v7 = (void *)*v7;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v7;
    uint64_t v26 = "transfer plan (source). Iccid: [%s] is not present";
LABEL_61:
    _os_log_error_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_ERROR, v26, (uint8_t *)&buf, 0xCu);
    goto LABEL_51;
  }
  if (*(unsigned char *)(v2 + 2289) == 1)
  {
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    if (sub_100CCD2E8())
    {
      uint64_t v8 = *(void *)(v2 + 400);
      if (v8)
      {
LABEL_43:
        if (!(*(unsigned int (**)(uint64_t))(*(void *)v8 + 160))(v8))
        {
          uint64_t v28 = *(void *)(v2 + 400);
          sub_100330A6C((uint64_t)v43, v1 + 56);
          uint64_t v46 = 0;
          uint64_t v29 = operator new(0x28uLL);
          *uint64_t v29 = off_1019B9520;
          sub_1003302B0((uint64_t)(v29 + 1), (uint64_t)v43);
          uint64_t v46 = v29;
          (*(void (**)(uint64_t, uint64_t, uint64_t, long long *))(*(void *)v28 + 304))(v28, v1 + 8, v1 + 32, &buf);
          sub_10033022C(&buf);
          sub_10030CF3C(v43);
          goto LABEL_52;
        }
        int v23 = *(NSObject **)(v2 + 40);
        if (!os_log_type_enabled(v23, OS_LOG_TYPE_ERROR)) {
          goto LABEL_54;
        }
        LOWORD(buf) = 0;
        uint64_t v24 = "transfer attempt ongoing on source";
        goto LABEL_63;
      }
      uint64_t v9 = *(void *)(v2 + 320);
      __int16 v10 = *(NSObject **)(v2 + 24);
      dispatch_object_t object = v10;
      if (v10) {
        dispatch_retain(v10);
      }
      long long v11 = *(std::__shared_weak_count **)(v2 + 16);
      if (!v11 || (uint64_t v12 = *(void *)(v2 + 8), (v13 = std::__shared_weak_count::lock(v11)) == 0)) {
        sub_100088B9C();
      }
      uint64_t v14 = v12 + 96;
      if (!v12) {
        uint64_t v14 = 0;
      }
      uint64_t v39 = v14;
      uint64_t v40 = v13;
      uint64_t v15 = *(std::__shared_weak_count **)(v2 + 424);
      uint64_t v37 = *(void *)(v2 + 416);
      uint64_t v38 = v15;
      if (v15) {
        atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      long long v16 = *(std::__shared_weak_count **)(v2 + 520);
      uint64_t v35 = *(void *)(v2 + 512);
      uint64_t v36 = v16;
      if (v16) {
        atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v9 + 424))(&buf, v9, 1, &object, &v39, &v37, &v35);
      long long v17 = buf;
      long long buf = 0uLL;
      long long v18 = *(std::__shared_weak_count **)(v2 + 408);
      *(_OWORD *)(v2 + 400) = v17;
      if (v18)
      {
        sub_10004D2C8(v18);
        if (*((void *)&buf + 1)) {
          sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
        }
      }
      if (v36) {
        sub_10004D2C8(v36);
      }
      if (v38) {
        sub_10004D2C8(v38);
      }
      if (v40) {
        sub_10004D2C8(v40);
      }
      if (object) {
        dispatch_release(object);
      }
      uint64_t v19 = *(void *)(v2 + 400);
      if (v19)
      {
        *((void *)&buf + 1) = 0;
        uint64_t v45 = 0;
        *(void *)&long long buf = (char *)&buf + 8;
        if (*(unsigned char *)(v2 + 2664)) {
          p_long long buf = (long long *)(v2 + 2640);
        }
        else {
          p_long long buf = &buf;
        }
        int v21 = *(_DWORD *)(v2 + 2632);
        sub_1002DD40C((uint64_t)v43, (void *)(v2 + 1616));
        memset(v34, 0, sizeof(v34));
        uint64_t v22 = *(std::__shared_weak_count **)(v2 + 5376);
        uint64_t v32 = *(void *)(v2 + 5368);
        uint64_t v33 = v22;
        if (v22) {
          atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, long long *, uint64_t, void *, void *, uint64_t *, uint64_t *, uint64_t))(*(void *)v19 + 16))(v19, v2 + 2568, v2 + 2464, v21 == 1, v2 + 2320, v2 + 2344, p_buf, v2 + 2488, v43, v34, &v32, v30, v31);
        if (v33) {
          sub_10004D2C8(v33);
        }
        long long v42 = (void **)v34;
        sub_10030AFC8(&v42);
        sub_10005CD2C((uint64_t)v43, (char *)v43[1]);
        sub_10023A670((uint64_t)&buf, *((void **)&buf + 1));
        uint64_t v8 = *(void *)(v2 + 400);
        goto LABEL_43;
      }
      int v23 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        uint64_t v24 = "cannot create source transfer auth controller";
LABEL_63:
        _os_log_error_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_ERROR, v24, (uint8_t *)&buf, 2u);
      }
    }
    else
    {
      int v23 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf) = 0;
        uint64_t v24 = "invalid target eid";
        goto LABEL_63;
      }
    }
LABEL_54:
    sub_100330A1C(*(void *)(v1 + 80), 0);
    goto LABEL_52;
  }
  uint64_t v25 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_ERROR))
  {
    if (*(char *)(v1 + 31) < 0) {
      long long v7 = (void *)*v7;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v7;
    uint64_t v26 = "no internet connection. abort query. iccid : [%s]";
    goto LABEL_61;
  }
LABEL_51:
  sub_100330A1C(*(void *)(v1 + 80), 0);
LABEL_52:
  sub_1003309AC(&v31);
  return sub_100046B58((uint64_t *)&v30);
}

void sub_1003308EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,dispatch_object_t object,char *a26,char a27,char *a28)
{
  if (a15) {
    sub_10004D2C8(a15);
  }
  a26 = &a16;
  sub_10030AFC8((void ***)&a26);
  sub_10005CD2C((uint64_t)&a27, a28);
  sub_10023A670(v28 - 128, *(void **)(v28 - 120));
  sub_1003309AC(&a13);
  sub_100046B58(&a12);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003309AC(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_10030CF3C((void *)(v1 + 56));
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100330A1C(uint64_t a1, char a2)
{
  char v3 = a2;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)a1 + 48))(a1, &v3);
}

uint64_t sub_100330A6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100330B04(void *a1)
{
  *a1 = off_1019B9520;
  sub_10030CF3C(a1 + 1);
  return a1;
}

void sub_100330B48(void *a1)
{
  *a1 = off_1019B9520;
  sub_10030CF3C(a1 + 1);

  operator delete();
}

void *sub_100330BAC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9520;
  sub_100330A6C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100330C00(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100330C14(uint64_t a1, void *a2)
{
  *a2 = off_1019B9520;
  return sub_100330A6C((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100330C40(uint64_t a1)
{
  return sub_10030CF3C((void *)(a1 + 8));
}

void sub_100330C48(void *a1)
{
  sub_10030CF3C(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100330C84@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unsigned char *a3@<X2>, char a4@<W8>)
{
  v11[0] = 0;
  char v12 = 0;
  int v7 = *(unsigned __int8 *)(a2 + 256);
  if (*(unsigned char *)(a2 + 256))
  {
    sub_1003300C4((uint64_t)v11, (long long *)a2);
    char v12 = 1;
    a4 = v11[24];
    BOOL v4 = v11[25] == 0;
  }
  if (v7) {
    BOOL v8 = *a3 == 0;
  }
  else {
    BOOL v8 = 0;
  }
  char v9 = !v8;
  if ((v9 | v4)) {
    a4 = 0;
  }
  uint64_t result = sub_100330A1C(*(void *)(a1 + 32), a4);
  if (v12) {
    return sub_1000C5578((uint64_t)v11);
  }
  return result;
}

void sub_100330D24(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42)
{
  if (a42) {
    sub_1000C5578((uint64_t)&a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100330D40(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100330D80()
{
}

uint64_t sub_100330D8C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100330E0C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  __int16 v10 = a1;
  uint64_t v11 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 320);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 8);
  sub_100058198(&v14, (const void **)(v1 + 16));
  long long v5 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v5;
  if (v5) {
    dispatch_retain(v5);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const void **, dispatch_object_t *, void))(*(void *)v3 + 432))(&v15, v3, v4, &v14, &object, *(unsigned __int8 *)(v2 + 588));
  long long v6 = v15;
  long long v15 = 0uLL;
  int v7 = *(std::__shared_weak_count **)(v2 + 376);
  *(_OWORD *)(v2 + 368) = v6;
  if (v7)
  {
    sub_10004D2C8(v7);
    if (*((void *)&v15 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v15 + 1));
    }
  }
  if (object) {
    dispatch_release(object);
  }
  sub_100057D78(&v14);
  *(unsigned char *)(v2 + 588) ^= 1u;
  uint64_t v8 = *(void *)(v2 + 368);
  if (v8)
  {
    long long v15 = 0uLL;
    (*(void (**)(long long *__return_ptr))(*(void *)v8 + 48))(&v15);
    if ((void)v15)
    {
      long long v12 = v15;
      if (*((void *)&v15 + 1)) {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)&v15 + 1) + 8), 1uLL, memory_order_relaxed);
      }
      sub_1002E956C(*(void *)(v1 + 48), (uint64_t)&v12, 0);
    }
    else
    {
      long long v12 = 0uLL;
      sub_1002E956C(*(void *)(v1 + 48), (uint64_t)&v12, 5);
    }
    if (*((void *)&v12 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v12 + 1));
    }
  }
  else
  {
    long long v15 = 0uLL;
    sub_1002E956C(*(void *)(v1 + 48), (uint64_t)&v15, 4);
  }
  if (*((void *)&v15 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v15 + 1));
  }
  sub_100331010(&v11);
  return sub_100046B58((uint64_t *)&v10);
}

void sub_100330FAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, dispatch_object_t object, char a14, uint64_t a15, std::__shared_weak_count *a16)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  sub_100331010(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100331010(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_10030CFC0((void *)(v1 + 24));
    sub_100057D78((const void **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_100331068(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v8 = a1;
  char v9 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 368);
  if (v2)
  {
    sub_10031ECD8((uint64_t)buf, (uint64_t)(v1 + 16));
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v2 + 16))(v2, buf);
    sub_100313668(buf);
  }
  else
  {
    uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      int v5 = v1[8];
      long long v6 = "kUnknown";
      if (v5 == 1) {
        long long v6 = "kSource";
      }
      if (v5 == 2) {
        int v7 = "kTarget";
      }
      else {
        int v7 = v6;
      }
      *(_DWORD *)long long buf = 136315138;
      uint64_t v11 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "invalid proximity transfer controller for endpoint : %s", buf, 0xCu);
    }
    sub_10024924C((uint64_t)(v1 + 16), 4);
  }
  sub_1003311D0((uint64_t *)&v9);
  return sub_100046B58((uint64_t *)&v8);
}

void sub_1003311A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_1003311D0(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_100331220(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  char v9 = a1;
  __int16 v10 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 368);
  if (v2)
  {
    (*(void (**)(uint64_t, void))(*(void *)v2 + 24))(v2, v1[9]);
    char v3 = 0;
  }
  else
  {
    uint64_t v4 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = v1[8];
      int v7 = "kUnknown";
      if (v6 == 1) {
        int v7 = "kSource";
      }
      if (v6 == 2) {
        uint64_t v8 = "kTarget";
      }
      else {
        uint64_t v8 = v7;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v12 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "invalid proximity transfer controller for endpoint : %s", buf, 0xCu);
    }
    char v3 = 4;
  }
  sub_10024924C((uint64_t)(v1 + 16), v3);
  sub_100331364((uint64_t *)&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_100331348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100331364(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1003313B4(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  char v9 = a1;
  __int16 v10 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 368);
  if (v2)
  {
    (*(void (**)(uint64_t, unsigned __int8 *))(*(void *)v2 + 40))(v2, v1 + 16);
    char v3 = 0;
  }
  else
  {
    uint64_t v4 = *(NSObject **)(*(void *)v1 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v6 = v1[8];
      int v7 = "kUnknown";
      if (v6 == 1) {
        int v7 = "kSource";
      }
      if (v6 == 2) {
        uint64_t v8 = "kTarget";
      }
      else {
        uint64_t v8 = v7;
      }
      *(_DWORD *)long long buf = 136315138;
      long long v12 = v8;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "invalid proximity transfer controller for endpoint : %s", buf, 0xCu);
    }
    char v3 = 4;
  }
  sub_10024924C((uint64_t)(v1 + 40), v3);
  sub_1003314F8((uint64_t *)&v10);
  return sub_100046B58((uint64_t *)&v9);
}

void sub_1003314DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1003314F8(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_100313668((void *)(v1 + 40));
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

void sub_100331558(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = *(void *)(v1 + 320);
  char v3 = *(NSObject **)(v1 + 24);
  dispatch_object_t object = v3;
  int v5 = 0;
  if (v3) {
    dispatch_retain(v3);
  }
  uint64_t v6 = 0;
  int v7 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, const void **, dispatch_object_t *, void))(*(void *)v2 + 432))(&v6, v2, 1, &v5, &object, *(unsigned __int8 *)(v1 + 588));
  if (object) {
    dispatch_release(object);
  }
  sub_100057D78(&v5);
  (*(void (**)(uint64_t))(*(void *)v6 + 56))(v6);
  if (v7) {
    sub_10004D2C8(v7);
  }
  operator delete();
}

void sub_100331654(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, char a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  operator delete();
}

void sub_1003316A8(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  uint64_t v3 = *(void *)(v2 + 368);
  if (v3)
  {
    (*(void (**)(uint64_t, void))(*(void *)v3 + 32))(v3, *((unsigned __int8 *)v1 + 9));
  }
  else
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      int v5 = *((unsigned __int8 *)v1 + 8);
      uint64_t v6 = "kUnknown";
      if (v5 == 1) {
        uint64_t v6 = "kSource";
      }
      if (v5 == 2) {
        int v7 = "kTarget";
      }
      else {
        int v7 = v6;
      }
      *(_DWORD *)long long buf = 136315138;
      char v9 = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "invalid proximity transfer controller for endpoint : %s", buf, 0xCu);
    }
  }
  operator delete();
}

void sub_1003317D0()
{
}

void sub_100331800()
{
}

void *sub_100331814(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019B95A0;
  result[1] = v3;
  return result;
}

uint64_t sub_10033185C(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019B95A0;
  a2[1] = v2;
  return result;
}

uint64_t sub_100331888(uint64_t a1)
{
  return (*(uint64_t (**)(void))(**(void **)(*(void *)(a1 + 8) + 384) + 24))();
}

uint64_t sub_1003318B4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B9600)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003318F4()
{
  return &off_1019B9600;
}

void *sub_100331900(void *a1)
{
  *a1 = off_1019B9620;
  sub_100313668(a1 + 1);
  return a1;
}

void sub_100331944(void *a1)
{
  *a1 = off_1019B9620;
  sub_100313668(a1 + 1);

  operator delete();
}

void *sub_1003319A8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9620;
  sub_10031ECD8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003319FC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100331A10(uint64_t a1, void *a2)
{
  *a2 = off_1019B9620;
  return sub_10031ECD8((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100331A3C(uint64_t a1)
{
  return sub_100313668((void *)(a1 + 8));
}

void sub_100331A44(void *a1)
{
  sub_100313668(a1 + 1);

  operator delete(a1);
}

uint64_t sub_100331A80(uint64_t a1, char *a2)
{
  return sub_10024924C(a1 + 8, *a2);
}

uint64_t sub_100331A8C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B9680)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100331ACC()
{
  return &off_1019B9680;
}

void *sub_100331AD8(void *a1)
{
  *a1 = off_1019B96A0;
  sub_10023D374(a1 + 2);
  return a1;
}

void sub_100331B1C(void *a1)
{
  *a1 = off_1019B96A0;
  sub_10023D374(a1 + 2);

  operator delete();
}

void *sub_100331B80(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B96A0;
  v2[1] = v3;
  sub_10031DDB0((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_100331BD8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100331BEC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019B96A0;
  a2[1] = v2;
  return sub_10031DDB0((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_100331C1C(uint64_t a1)
{
  return sub_10023D374((void *)(a1 + 16));
}

void sub_100331C24(void *a1)
{
  sub_10023D374(a1 + 2);

  operator delete(a1);
}

uint64_t sub_100331C60(uint64_t a1, char *a2)
{
  return sub_1002EB2F8(a1 + 16, *a2, 0);
}

uint64_t sub_100331C70(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019B9700)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100331CB0()
{
  return &off_1019B9700;
}

void *sub_100331CBC(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

void sub_100331CD0(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (*((unsigned char *)*a1 + 8) == 1) {
    uint64_t v3 = 400;
  }
  else {
    uint64_t v3 = 384;
  }
  if (*((unsigned char *)*a1 + 8) == 1) {
    uint64_t v4 = v2 + 400;
  }
  else {
    uint64_t v4 = v2 + 384;
  }
  uint64_t v5 = *(void *)(v2 + v3);
  if (v5)
  {
    if (((*(uint64_t (**)(uint64_t))(*(void *)v5 + 160))(v5) & 1) == 0)
    {
      (*(void (**)(void, void))(**(void **)(v2 + v3) + 128))(*(void *)(v2 + v3), *((unsigned __int8 *)v1 + 8));
      uint64_t v6 = *(std::__shared_weak_count **)(v4 + 8);
      int v7 = (void *)(v2 + v3);
      *int v7 = 0;
      v7[1] = 0;
      if (v6) {
        sub_10004D2C8(v6);
      }
      uint64_t v8 = *(void *)(v2 + 464);
      if (v8) {
        (*(void (**)(uint64_t, void, void))(*(void *)v8 + 128))(v8, 0, *((unsigned __int8 *)v1 + 8));
      }
    }
  }
  else
  {
    char v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "No Transfer Controller", buf, 2u);
    }
  }
  operator delete();
}

void sub_100331E30()
{
}

uint64_t *sub_100331E5C(const void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *((void *)*v1 + 50);
  if (v2)
  {
    sub_10002FD9C(&v6, v1 + 1);
    (*(void (**)(uint64_t, const void **))(*(void *)v2 + 328))(v2, &v6);
    sub_100030068(&v6);
  }
  sub_100331F10((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100331EEC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_100030068((const void **)va2);
  sub_100331F10((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100331F10(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100030068((const void **)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_100331F60(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  (*(void (**)(void, uint64_t, uint64_t))(**(void **)(*(void *)v1 + 416) + 48))(*(void *)(*(void *)v1 + 416), v1 + 8, v1 + 32);
  (***(void (****)(long long *__return_ptr))(v2 + 320))(&v7);
  long long v8 = v7;
  long long v7 = 0uLL;
  sub_1007B6834((uint64_t *)&v8, v1 + 8, v1 + 56, &v9);
  uint64_t v3 = *(std::__shared_weak_count **)(v2 + 5584);
  *(_OWORD *)(v2 + 5576) = v9;
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (*((void *)&v8 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v8 + 1));
  }
  if (*((void *)&v7 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v7 + 1));
  }
  sub_100332098(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10033205C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_100332098(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100332098(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    uint64_t v2 = (void **)(v1 + 32);
    sub_10030B640(&v2);
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100332118(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(void *)(v1 + 5576))
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (!v2 || (v3 = *(void *)(v1 + 8), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
      sub_100088B9C();
    }
    uint64_t v5 = v4;
    atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v4);
    if (capabilities::ct::getProvisioningProfileSupport(v6) == 1) {
      int v7 = (*(uint64_t (**)(void))(**(void **)(v1 + 304) + 296))(*(void *)(v1 + 304));
    }
    else {
      int v7 = 0;
    }
    if (v7) {
      char v8 = 3;
    }
    else {
      char v8 = 2;
    }
    if (v7) {
      char v9 = 3;
    }
    else {
      char v9 = 0;
    }
    if (*(unsigned char *)(v1 + 4656)) {
      char v10 = 1;
    }
    else {
      char v10 = v9;
    }
    if (*(unsigned char *)(v1 + 4656) == 2) {
      unsigned __int8 v11 = v8;
    }
    else {
      unsigned __int8 v11 = v10;
    }
    uint64_t v12 = *(void *)(v1 + 5576);
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    v13[0] = off_1019B9740;
    v13[1] = v3;
    _DWORD v13[2] = v5;
    void v13[3] = v13;
    (*(void (**)(uint64_t, void, void *))(*(void *)v12 + 16))(v12, v11, v13);
    sub_10003B34C(v13);
    std::__shared_weak_count::__release_weak(v5);
  }
  operator delete();
}

void sub_1003322B8(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10003B34C((uint64_t *)va);
  std::__shared_weak_count::__release_weak(v1);
  operator delete();
}

void *sub_100332304(void *a1)
{
  *a1 = off_1019B9740;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100332350(void *a1)
{
  *a1 = off_1019B9740;
  uint64_t v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

void *sub_1003323BC(uint64_t a1)
{
  uint64_t result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  void *result = off_1019B9740;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100332418(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_1019B9740;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100332450(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100332460(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_1003324A0(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    uint64_t v3 = std::__shared_weak_count::lock(v2);
    if (v3)
    {
      uint64_t v4 = v3;
      uint64_t v5 = *(void *)(a1 + 8);
      if (v5)
      {
        uint64_t v6 = *(std::__shared_weak_count **)(v5 + 5584);
        *(_OWORD *)(v5 + 5576) = 0u;
        if (v6) {
          sub_10004D2C8(v6);
        }
      }
      sub_10004D2C8(v4);
    }
  }
}

uint64_t sub_100332514(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100332554()
{
}

uint64_t *sub_100332560(const void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *v1;
  sub_10002FD9C(&v10, v1 + 1);
  sub_100083DA4(&v9, v1 + 2);
  sub_100083DA4(&v8, v1 + 3);
  sub_100083DA4(&v7, v1 + 4);
  v6[0] = 0;
  v6[176] = 0;
  sub_1002ECBD8((uint64_t)v2, (CFDataRef *)&v10, &v9, &v8, &v7, 0, (uint64_t)v6);
  sub_10030AEBC((uint64_t)v6);
  sub_1000558F4(&v7);
  sub_1000558F4(&v8);
  sub_1000558F4(&v9);
  sub_100030068(&v10);
  sub_100332670(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_10033262C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, const void **);
  sub_10030AEBC((uint64_t)va2);
  sub_1000558F4((const void **)(v2 - 64));
  sub_1000558F4((const void **)(v2 - 56));
  sub_1000558F4((const void **)(v2 - 48));
  sub_100030068((const void **)(v2 - 40));
  sub_100332670((const void ***)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

const void ***sub_100332670(const void ***result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_1000558F4(v1 + 4);
    sub_1000558F4(v1 + 3);
    sub_1000558F4(v1 + 2);
    sub_100030068(v1 + 1);
    operator delete();
  }
  return result;
}

uint64_t *sub_1003326D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 680);
  if (v3) {
    (*(void (**)(uint64_t))(*(void *)v3 + 160))(v3);
  }
  if (*(char *)(v1 + 31) < 0)
  {
    if (!*(void *)(v1 + 16)) {
      goto LABEL_24;
    }
  }
  else if (!*(unsigned char *)(v1 + 31))
  {
LABEL_24:
    long long v16 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E No ICCID and carrier details", buf, 2u);
    }
    goto LABEL_36;
  }
  if (*(char *)(v1 + 55) < 0)
  {
    if (!*(void *)(v1 + 40)) {
      goto LABEL_24;
    }
  }
  else if (!*(unsigned char *)(v1 + 55))
  {
    goto LABEL_24;
  }
  *(void *)long long buf = 0;
  uint64_t v25 = 0;
  uint64_t v26 = 0;
  uint64_t v4 = *(void *)(v2 + 320);
  sub_100058DB0(__p, "");
  uint64_t v5 = v1 + 8;
  uint64_t v6 = v1 + 32;
  uint64_t v7 = v1 + 56;
  uint64_t v8 = v1 + 80;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *, uint64_t))(*(void *)v4 + 160))(buf, v4, v5, v6, v7, v8, __p, 1);
  if (v30 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v9 = HIBYTE(v26);
  if (v26 < 0) {
    uint64_t v9 = v25;
  }
  if (!v9)
  {
    long long v17 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_34;
    }
    *(_WORD *)long long __p = 0;
    long long v18 = "#E Empty carrier name";
    uint64_t v19 = v17;
    goto LABEL_30;
  }
  uint64_t v10 = *(void *)(v2 + 320);
  sub_100058DB0(__p, "");
  uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, unsigned char *))(*(void *)v10 + 264))(v10, v5, v6, v7, v8, __p);
  if (v30 < 0) {
    operator delete(*(void **)__p);
  }
  uint64_t v12 = *(NSObject **)(v2 + 40);
  BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
  if (v11)
  {
    if (v13)
    {
      uint64_t v14 = buf;
      if (v26 < 0) {
        uint64_t v14 = *(uint8_t **)buf;
      }
      *(_DWORD *)long long __p = 136315394;
      *(void *)&__p[4] = v14;
      __int16 v28 = 1024;
      int v29 = v11;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Purchase plan without iccid for carrier: %s, wait time: %u", __p, 0x12u);
    }
    uint64_t v15 = *(void *)(v2 + 416);
    if (v15)
    {
      (*(void (**)(uint64_t, uint8_t *, uint64_t))(*(void *)v15 + 40))(v15, buf, v11);
    }
    else
    {
      long long v20 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long __p = 0;
        _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#E cannot append without PendingTransferHandler", __p, 2u);
      }
    }
    *(unsigned char *)(v2 + 586) = 1;
    *(unsigned char *)(v2 + 1512) = 0;
    (*(void (**)(void))(**(void **)(v2 + 336) + 152))(*(void *)(v2 + 336));
    *(unsigned char *)(v2 + 1706) = 1;
    (*(void (**)(void, void))(**(void **)(v2 + 160) + 24))(*(void *)(v2 + 160), 0);
    goto LABEL_34;
  }
  if (v13)
  {
    *(_WORD *)long long __p = 0;
    long long v18 = "#E Empty wait time";
    uint64_t v19 = v12;
LABEL_30:
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, v18, __p, 2u);
  }
LABEL_34:
  if (SHIBYTE(v26) < 0) {
    operator delete(*(void **)buf);
  }
LABEL_36:
  sub_100332B14(&v23);
  return sub_100046B58((uint64_t *)&v22);
}

void sub_100332AB0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a23 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_100332B14(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100332B14(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 127) < 0) {
      operator delete(*(void **)(v1 + 104));
    }
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100332BB0()
{
}

void *sub_100332BC4()
{
  uint64_t result = operator new(0x10uLL);
  void *result = off_1019B97C0;
  return result;
}

void sub_100332BFC(uint64_t a1, void *a2)
{
  *a2 = off_1019B97C0;
}

void sub_100332C24(uint64_t a1, os_log_t *a2, os_signpost_id_t *a3)
{
  os_signpost_id_t v3 = *a3;
  if (*a3 - 1 <= 0xFFFFFFFFFFFFFFFDLL)
  {
    uint64_t v4 = *a2;
    if (os_signpost_enabled(*a2))
    {
      *(_WORD *)uint64_t v5 = 0;
      _os_signpost_emit_with_name_impl((void *)&_mh_execute_header, v4, OS_SIGNPOST_INTERVAL_END, v3, "CellularPlanProvisioningOngoing", (const char *)&unk_1017DEDA7, v5, 2u);
    }
  }
}

uint64_t sub_100332C9C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100332CDC()
{
}

uint64_t *sub_100332CE8(const void ***a1)
{
  uint64_t v1 = *a1;
  long long v20 = a1;
  int v21 = v1;
  uint64_t v2 = *v1;
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)long long __p = 0u;
  uint64_t v33 = 0;
  uint64_t v3 = sub_1008A2050((uint64_t *)__p);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  memset(cf, 0, 32);
  sub_100083DA4(cf, v1 + 4);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)int v29 = *(_OWORD *)buf;
  uint64_t v30 = *(void *)&buf[16];
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  *(_OWORD *)uint64_t v27 = *(_OWORD *)buf;
  uint64_t v28 = *(void *)&buf[16];
  if (v1[4])
  {
    memset(buf, 0, sizeof(buf));
    ctu::cf::assign();
    uint64_t v4 = *(const void **)buf;
    *(void *)uint64_t v39 = *(void *)&buf[8];
    *(void *)&v39[7] = *(void *)&buf[15];
    uint8_t v5 = buf[23];
    if (SHIBYTE(cf[3]) < 0) {
      operator delete((void *)cf[1]);
    }
    cf[1] = v4;
    CFTypeRef cf[2] = *(CFTypeRef *)v39;
    *(CFTypeRef *)((char *)&cf[2] + 7) = *(CFTypeRef *)&v39[7];
    HIBYTE(cf[3]) = v5;
  }
  uint64_t v6 = *((void *)v2 + 48);
  if (v6)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 192))(buf);
    if (SHIBYTE(cf[3]) < 0) {
      operator delete((void *)cf[1]);
    }
    *(_OWORD *)&cf[1] = *(_OWORD *)buf;
    cf[3] = *(CFTypeRef *)&buf[16];
  }
  if (SHIBYTE(cf[3]) < 0)
  {
    if (!cf[2]) {
      goto LABEL_39;
    }
    sub_10004FC84(__dst, (void *)cf[1], (unint64_t)cf[2]);
  }
  else
  {
    if (!HIBYTE(cf[3])) {
      goto LABEL_39;
    }
    *(_OWORD *)long long __dst = *(_OWORD *)&cf[1];
    CFTypeRef v26 = cf[3];
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_10004FC84(v39, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)uint64_t v39 = *(_OWORD *)__dst;
    *(void *)&v39[16] = v26;
  }
  v42[0] = 0;
  if ((char)v39[23] < 0)
  {
    sub_10004FC84(buf, *(void **)v39, *(unint64_t *)&v39[8]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)v39;
    *(void *)&uint8_t buf[16] = *(void *)&v39[16];
  }
  v22[0] = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v7 = (void *)v42[0];
    v42[0] = v22[0];
    v35[0] = v7;
    sub_1000558F4((const void **)v35);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  CFTypeRef v38 = v42[0];
  v42[0] = 0;
  sub_1000558F4(v42);
  if ((char)v39[23] < 0) {
    operator delete(*(void **)v39);
  }
  *(CFTypeRef *)long long buf = cf[0];
  cf[0] = v38;
  CFTypeRef v38 = 0;
  sub_1000558F4((const void **)buf);
  sub_1000558F4(&v38);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  *(void *)uint64_t v39 = "AltSmdpFqdn";
  if (SHIBYTE(cf[3]) < 0)
  {
    sub_10004FC84(&v39[8], (void *)cf[1], (unint64_t)cf[2]);
    uint64_t v8 = *(char **)v39;
  }
  else
  {
    *(_OWORD *)&v39[8] = *(_OWORD *)&cf[1];
    *(CFTypeRef *)&v39[24] = cf[3];
    uint64_t v8 = "AltSmdpFqdn";
  }
  sub_100058DB0(buf, v8);
  long long v46 = *(_OWORD *)&v39[8];
  uint64_t v47 = *(void *)&v39[24];
  memset(&v39[8], 0, 24);
  uint64_t v45 = sub_100333A04;
  v35[1] = 0;
  uint64_t v36 = 0;
  v35[0] = 0;
  v22[0] = v35;
  v22[1] = 0;
  v35[0] = operator new(0x38uLL);
  v35[1] = v35[0];
  uint64_t v36 = (char *)v35[0] + 56;
  v35[1] = (void *)sub_100333B38((uint64_t)&v36, (uint64_t)buf, (uint64_t)v48, (uint64_t)v35[0]);
  uint64_t v9 = *((void *)v2 + 52);
  if (v9) {
    (*(void (**)(uint64_t, void **, void **))(*(void *)v9 + 120))(v9, v27, v35);
  }
  v22[0] = v35;
  sub_100333C9C((void ***)v22);
  sub_100146540((uint64_t (**)(void, void, void, void, void))&v45);
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if ((char)v39[31] < 0) {
    operator delete(*(void **)&v39[8]);
  }
LABEL_39:
  (*(void (**)(void, void **, uint64_t, void **))(**((void **)v2 + 52) + 272))(*((void *)v2 + 52), v27, v3, v29);
  bzero(buf, 0x4E8uLL);
  (*(void (**)(uint8_t *__return_ptr))(**((void **)v2 + 52) + 168))(buf);
  if (v53)
  {
    v42[0] = 0;
    v42[1] = 0;
    char v43 = 0;
    (*(void (**)(const void **__return_ptr))(**((void **)v2 + 38) + 352))(v42);
    if (v43)
    {
      memset(v39, 0, 24);
      ctu::hex((uint64_t *)v39, (ctu *)v42, (const void *)0x10, v10);
      uint64_t v11 = *((void *)v2 + 58);
      if (v11) {
        (*(void (**)(uint64_t, uint64_t *, uint64_t *, void **, uint8_t *, void **))(*(void *)v11 + 144))(v11, &v49, &v50, v27, v39, v29);
      }
      if ((char)v39[23] < 0) {
        operator delete(*(void **)v39);
      }
    }
    else
    {
      uint64_t v12 = *((void *)v2 + 5);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)uint64_t v39 = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_ERROR, "pending plans transfer target CSN not available", v39, 2u);
      }
    }
    CFTypeRef v13 = (CFTypeRef)HIBYTE(cf[3]);
    if (SHIBYTE(cf[3]) < 0) {
      CFTypeRef v13 = cf[2];
    }
    if (!v13)
    {
      if (SHIBYTE(v52) < 0)
      {
        sub_10004FC84(v22, (void *)v51, *((unint64_t *)&v51 + 1));
      }
      else
      {
        *(_OWORD *)uint64_t v22 = v51;
        uint64_t v23 = v52;
      }
      if (SHIBYTE(v23) < 0)
      {
        sub_10004FC84(v35, v22[0], (unint64_t)v22[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v35 = *(_OWORD *)v22;
        uint64_t v36 = v23;
      }
      uint64_t v34 = 0;
      if (SHIBYTE(v36) < 0)
      {
        sub_10004FC84(v39, v35[0], (unint64_t)v35[1]);
      }
      else
      {
        *(_OWORD *)uint64_t v39 = *(_OWORD *)v35;
        *(void *)&v39[16] = v36;
      }
      uint64_t v37 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v14 = v34;
        uint64_t v34 = v37;
        CFTypeRef v38 = v14;
        sub_1000558F4(&v38);
      }
      if ((char)v39[23] < 0) {
        operator delete(*(void **)v39);
      }
      uint64_t v24 = v34;
      uint64_t v34 = 0;
      sub_1000558F4(&v34);
      if (SHIBYTE(v36) < 0) {
        operator delete(v35[0]);
      }
      *(CFTypeRef *)uint64_t v39 = cf[0];
      cf[0] = v24;
      uint64_t v24 = 0;
      sub_1000558F4((const void **)v39);
      sub_1000558F4(&v24);
      if (SHIBYTE(v23) < 0) {
        operator delete(v22[0]);
      }
    }
    if (v53) {
      sub_10030D10C((uint64_t)buf);
    }
  }
  uint64_t v15 = *((void *)v2 + 5);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    if ((v3 - 1) > 3u) {
      long long v16 = "kUnknown";
    }
    else {
      long long v16 = off_1019BB270[(char)(v3 - 1)];
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Transfer status: %s", buf, 0xCu);
  }
  if (v3 == 1)
  {
    memset(v39, 0, sizeof(v39));
    *(_OWORD *)uint64_t v40 = 0u;
    long long v41 = 0u;
    BOOL v18 = *((_DWORD *)v2 + 658) == 1;
    *(_DWORD *)uint64_t v39 = *((_DWORD *)v2 + 145);
    *(_WORD *)&void v39[4] = 772;
    memset(&v39[8], 0, 24);
    v39[32] = 4;
    memset(&v39[40], 0, 100);
    v40[0] = 0;
    v40[1] = 0;
    BYTE8(v41) = 0;
    *(void *)&long long v41 = 0;
    BYTE9(v41) = v18;
    sub_10002FD9C((const void **)v35, v1 + 1);
    sub_100083DA4(v42, v1 + 2);
    CFTypeRef v38 = cf[0];
    if (cf[0]) {
      CFRetain(cf[0]);
    }
    sub_100083DA4(&v37, v1 + 5);
    sub_100311AFC((uint64_t)buf, (int *)v39);
    v48[120] = 1;
    sub_1002ECBD8((uint64_t)v2, (CFDataRef *)v35, v42, &v38, &v37, 1, (uint64_t)buf);
    sub_10030AEBC((uint64_t)buf);
    sub_1000558F4(&v37);
    sub_1000558F4(&v38);
    sub_1000558F4(v42);
    sub_100030068((const void **)v35);
    if (SBYTE7(v41) < 0) {
      operator delete(v40[0]);
    }
    if ((char)v39[135] < 0) {
      operator delete(*(void **)&v39[112]);
    }
    if ((char)v39[111] < 0) {
      operator delete(*(void **)&v39[88]);
    }
    if ((char)v39[87] < 0) {
      operator delete(*(void **)&v39[64]);
    }
    if ((char)v39[63] < 0) {
      operator delete(*(void **)&v39[40]);
    }
    if ((char)v39[31] < 0) {
      operator delete(*(void **)&v39[8]);
    }
  }
  else if (v3 == 4 && !*((void *)v2 + 48))
  {
    uint64_t v17 = *((void *)v2 + 52);
    if (SHIBYTE(v30) < 0)
    {
      sub_10004FC84(buf, v29[0], (unint64_t)v29[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)v29;
      *(void *)&uint8_t buf[16] = v30;
    }
    LOBYTE(v45) = 1;
    (*(void (**)(uint64_t, void **, uint64_t, uint8_t *))(*(void *)v17 + 112))(v17, v27, 9, buf);
    if ((_BYTE)v45)
    {
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
    }
    uint64_t v45 = 0;
    sub_1002F47B0((uint64_t)v2, 4, (uint64_t)buf);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  sub_1000558F4(cf);
  if (SHIBYTE(cf[3]) < 0) {
    operator delete((void *)cf[1]);
  }
  sub_100333994(&v21);
  return sub_100046B58((uint64_t *)&v20);
}

void sub_1003336E4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10, void *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,const void *a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1000558F4(&a32);
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_100333994(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100333944(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    JUMPOUT(0x1003338F8);
  }
  JUMPOUT(0x100333900);
}

void sub_100333958(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    JUMPOUT(0x10033390CLL);
  }
  JUMPOUT(0x100333914);
}

void sub_10033396C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,int a33,__int16 a34,char a35,char a36)
{
  if (a36 < 0) {
    JUMPOUT(0x100333928);
  }
  JUMPOUT(0x10033392CLL);
}

void sub_100333980(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  if (a72 < 0) {
    JUMPOUT(0x100333928);
  }
  JUMPOUT(0x10033392CLL);
}

const void ***sub_100333994(const void ***result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_1000558F4(v1 + 5);
    sub_1000558F4(v1 + 4);
    sub_1000558F4(v1 + 3);
    sub_1000558F4(v1 + 2);
    sub_100030068(v1 + 1);
    operator delete();
  }
  return result;
}

_UNKNOWN **sub_100333A04(unsigned int a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v5 = a1;
  switch(v5)
  {
    case 1:
      unint64_t v10 = (unsigned char *)(a3 + 8);
      if (*(char *)(a2 + 31) < 0)
      {
        sub_10004FC84(v10, *(void **)(a2 + 8), *(void *)(a2 + 16));
      }
      else
      {
        long long v11 = *(_OWORD *)(a2 + 8);
        *(void *)(a3 + 24) = *(void *)(a2 + 24);
        *(_OWORD *)unint64_t v10 = v11;
      }
      uint64_t result = 0;
      *(void *)a3 = sub_100333A04;
      break;
    case 2:
      long long v12 = *(_OWORD *)(a2 + 8);
      *(void *)(a3 + 24) = *(void *)(a2 + 24);
      *(_OWORD *)(a3 + 8) = v12;
      *(void *)(a2 + 16) = 0;
      *(void *)(a2 + 24) = 0;
      *(void *)(a2 + 8) = 0;
      *(void *)a3 = sub_100333A04;
      if ((*(char *)(a2 + 31) & 0x80000000) == 0) {
        goto LABEL_9;
      }
      uint64_t v9 = *(void **)(a2 + 8);
      goto LABEL_8;
    case 3:
      if (a4) {
      else
      }
        BOOL v13 = a5 == &unk_10148CE20;
      if (v13) {
        uint64_t result = (_UNKNOWN **)(a2 + 8);
      }
      else {
        uint64_t result = 0;
      }
      break;
    case 4:
      return result;
    default:
      if (*(char *)(a2 + 31) < 0)
      {
        uint64_t v9 = *(void **)(a2 + 8);
LABEL_8:
        operator delete(v9);
      }
LABEL_9:
      uint64_t result = 0;
      *(void *)a2 = 0;
      break;
  }
  return result;
}

uint64_t sub_100333B38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100333BBC((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100333B98(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      sub_100333C4C(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100333BBC(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  *((void *)__dst + 3) = 0;
  *((void *)__dst + 4) = 0;
  uint64_t v7 = (void (*)(uint64_t, uint64_t, char *, void, void))*((void *)a2 + 3);
  uint64_t v6 = (uint64_t)a2 + 24;
  uint64_t v5 = v7;
  if (v7) {
    v5(1, v6, __dst + 24, 0, 0);
  }
  return __dst;
}

void sub_100333C30(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100333C4C(uint64_t a1)
{
  sub_100146540((uint64_t (**)(void, void, void, void, void))(a1 + 24));
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void sub_100333C9C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_100333C4C(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100333D20(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100333DB8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100333E3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100333EBC(void **a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *v1;
  v14[0] = 0;
  v14[1] = 0;
  char v15 = 0;
  (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v14);
  if (v15)
  {
    uint64_t v3 = *(void *)(v2 + 336);
    unsigned int v4 = LOBYTE(v14[0]) - 89;
    sub_100333D20((uint64_t)__p, (uint64_t)(v1 + 1));
    BOOL v13 = 0;
    uint64_t v5 = operator new(0x28uLL);
    *uint64_t v5 = off_1019B9840;
    sub_100333E3C((uint64_t)(v5 + 1), (uint64_t)__p);
    BOOL v13 = v5;
    (*(void (**)(uint64_t, void, void **))(*(void *)v3 + 96))(v3, (v4 < 9) & (0x181u >> v4), v11);
    sub_100333DB8(v11);
    sub_10030D088(__p);
  }
  else
  {
    sub_100058DB0(v11, "");
    sub_100058DB0(__p, "");
    sub_10033413C(v1[4], (uint64_t)v11, (uint64_t)__p, 272);
    if (v10 < 0) {
      operator delete(__p[0]);
    }
    if (v12 < 0) {
      operator delete(v11[0]);
    }
  }
  sub_1003340EC((uint64_t *)&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100334080(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_1003340EC(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003340EC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D088((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_10033413C(uint64_t a1, uint64_t a2, uint64_t a3, __int16 a4)
{
  __int16 v5 = a4;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, __int16 *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

void *sub_10033418C(void *a1)
{
  *a1 = off_1019B9840;
  sub_10030D088(a1 + 1);
  return a1;
}

void sub_1003341D0(void *a1)
{
  *a1 = off_1019B9840;
  sub_10030D088(a1 + 1);

  operator delete();
}

void *sub_100334234(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9840;
  sub_100333D20((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100334288(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033429C(uint64_t a1, void *a2)
{
  *a2 = off_1019B9840;
  return sub_100333D20((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1003342C8(uint64_t a1)
{
  return sub_10030D088((void *)(a1 + 8));
}

void sub_1003342D0(void *a1)
{
  sub_10030D088(a1 + 1);

  operator delete(a1);
}

void sub_10033430C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(unsigned __int8 *)(a2 + 23);
  if ((v4 & 0x80u) != 0) {
    uint64_t v4 = *(void *)(a2 + 8);
  }
  if (!v4) {
    goto LABEL_10;
  }
  uint64_t v5 = *(unsigned __int8 *)(a3 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a3 + 8);
  }
  if (v5)
  {
    uint64_t v6 = *(void *)(a1 + 32);
    sub_10033413C(v6, a2, a3, 0);
  }
  else
  {
LABEL_10:
    sub_100058DB0(v9, "");
    sub_100058DB0(__p, "");
    sub_10033413C(*(void *)(a1 + 32), (uint64_t)v9, (uint64_t)__p, 261);
    if (v8 < 0) {
      operator delete(__p[0]);
    }
    if (v10 < 0) {
      operator delete(v9[0]);
    }
  }
}

void sub_1003343E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100334414(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100334454()
{
}

uint64_t *sub_100334460(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  int v2 = sub_1002EE274(*(void *)v1, v1 + 8, *(unsigned __int8 *)(v1 + 32));
  sub_1002EB2F8(v1 + 40, v2 == 0, v2);
  sub_1003344E0(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003344C4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1003344E0(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10023D374((void *)(v1 + 40));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100334540(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(*(void *)v1 + 2264))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Abort selection - Call ongoing", buf, 2u);
    }
    char v4 = 0;
    char v5 = 33;
    goto LABEL_11;
  }
  unsigned int v6 = *(_DWORD *)(v2 + 2276);
  BOOL v7 = v6 > 4;
  int v8 = (1 << v6) & 0x19;
  if (!v7 && v8 != 0)
  {
    char v10 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
LABEL_10:
      char v4 = 0;
      char v5 = 13;
      goto LABEL_11;
    }
    *(_WORD *)long long buf = 0;
    char v15 = "Abort selection - In emergency mode";
LABEL_21:
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v15, buf, 2u);
    goto LABEL_10;
  }
  if (*(void *)(v2 + 680) && !*(unsigned char *)(v2 + 1705))
  {
    char v10 = *(NSObject **)(v2 + 40);
    if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
      goto LABEL_10;
    }
    *(_WORD *)long long buf = 0;
    char v15 = "Provisioning operation exists";
    goto LABEL_21;
  }
  *(unsigned char *)(v2 + 1512) = 0;
  (*(void (**)(void, uint64_t, void))(**(void **)(v2 + 304) + 136))(*(void *)(v2 + 304), v1 + 8, *(unsigned __int8 *)(v1 + 32));
  if (*(unsigned char *)(v1 + 32))
  {
    uint64_t v12 = *(void *)(v2 + 528);
    if (v12)
    {
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(buf, *(void **)(v1 + 8), *(void *)(v1 + 16));
        BOOL v14 = *(unsigned char *)(v1 + 32) != 0;
      }
      else
      {
        long long v13 = *(_OWORD *)(v1 + 8);
        uint64_t v19 = *(void *)(v1 + 24);
        *(_OWORD *)long long buf = v13;
        BOOL v14 = 1;
      }
      (*(void (**)(uint64_t, uint8_t *, BOOL))(*(void *)v12 + 120))(v12, buf, v14);
      if (SHIBYTE(v19) < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
  char v5 = 0;
  char v4 = 1;
LABEL_11:
  sub_1002EB2F8(v1 + 40, v4, v5);
  sub_1003344E0(&v17);
  return sub_100046B58((uint64_t *)&v16);
}

void sub_100334750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_1003344E0(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100334784(uint64_t **a1)
{
  uint64_t v1 = *a1;
  unsigned int v6 = a1;
  BOOL v7 = v1;
  uint64_t v2 = *v1;
  if (*(unsigned char *)(*v1 + 2264))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Call currently active", buf, 2u);
    }
    __int16 v4 = 289;
  }
  else
  {
    __int16 v4 = (*(uint64_t (**)(void, uint64_t *))(**(void **)(v2 + 304) + 544))(*(void *)(v2 + 304), v1 + 1);
  }
  sub_100327EFC(v1[7], v4);
  sub_100334870((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100334854(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100334870(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030C77C((void *)(v1 + 32));
    sub_10005CD2C(v1 + 8, *(char **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_1003348CC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = *(void *)v1;
  if (!*(unsigned char *)(*(void *)v1 + 2264))
  {
    unsigned int v6 = *(_DWORD *)(v2 + 2276);
    BOOL v7 = v6 > 4;
    int v8 = (1 << v6) & 0x19;
    if (v7 || v8 == 0)
    {
      if (!*(void *)(v2 + 680) || *(unsigned char *)(v2 + 1705))
      {
        char v4 = 1;
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 304) + 152))(*(void *)(v2 + 304), v1 + 8, 1);
        char v5 = 0;
        goto LABEL_11;
      }
      char v10 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR)) {
        goto LABEL_10;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v12 = "Provisioning operation exists";
    }
    else
    {
      char v10 = *(NSObject **)(v2 + 40);
      if (!os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
LABEL_10:
        char v4 = 0;
        char v5 = 13;
        goto LABEL_11;
      }
      *(_WORD *)long long buf = 0;
      uint64_t v12 = "Abort selection - In emergency mode";
    }
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    goto LABEL_10;
  }
  uint64_t v3 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Abort selection - Call ongoing", buf, 2u);
  }
  char v4 = 0;
  char v5 = 33;
LABEL_11:
  sub_1002EB2F8(v1 + 32, v4, v5);
  sub_100334A68(&v14);
  return sub_100046B58((uint64_t *)&v13);
}

void sub_100334A4C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100334A68(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10023D374((void *)(v1 + 32));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100334AC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v13 = a1;
  uint64_t v14 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(unsigned char *)(*(void *)v1 + 2264))
  {
    uint64_t v3 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_ERROR, "Abort selection - Call ongoing", buf, 2u);
    }
    char v4 = 0;
    char v5 = 33;
  }
  else
  {
    unsigned int v6 = *(_DWORD *)(v2 + 2276);
    BOOL v7 = v6 > 4;
    int v8 = (1 << v6) & 0x19;
    if (v7 || v8 == 0)
    {
      int v11 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v2 + 304) + 168))(*(void *)(v2 + 304), v1 + 8);
      char v4 = v11;
      if (v11) {
        char v5 = 0;
      }
      else {
        char v5 = 6;
      }
    }
    else
    {
      char v10 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Abort selection - In emergency mode", buf, 2u);
      }
      char v4 = 0;
      char v5 = 13;
    }
  }
  sub_1002EB2F8(v1 + 32, v4, v5);
  sub_100334C28(&v14);
  return sub_100046B58((uint64_t *)&v13);
}

void sub_100334C0C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100334C28(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10023D374((void *)(v1 + 32));
    sub_10005CD2C(v1 + 8, *(char **)(v1 + 16));
    operator delete();
  }
  return result;
}

uint64_t *sub_100334C84(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned int v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)v1;
  if (*(char *)(v1 + 31) < 0)
  {
    sub_10004FC84(__p, *(void **)(v1 + 8), *(void *)(v1 + 16));
  }
  else
  {
    long long v3 = *(_OWORD *)(v1 + 8);
    uint64_t v9 = *(void *)(v1 + 24);
    *(_OWORD *)long long __p = v3;
  }
  char v4 = *(void **)(v1 + 32);
  if (v4) {
    char v4 = _Block_copy(v4);
  }
  v10[0] = off_1019B98D0;
  v10[1] = v4;
  void v10[3] = v10;
  sub_1002EED78(v2, __p, (uint64_t)v10);
  sub_10023D374(v10);
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
  sub_100334DC0(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100334D74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t *sub_100334DC0(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 32);
    if (v2) {
      _Block_release(v2);
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_100334E28(void *a1)
{
  *a1 = off_1019B98D0;
  uint64_t v2 = (const void *)a1[1];
  if (v2) {
    _Block_release(v2);
  }
  return a1;
}

void sub_100334E78(void *a1)
{
  *a1 = off_1019B98D0;
  uint64_t v1 = (const void *)a1[1];
  if (v1) {
    _Block_release(v1);
  }

  operator delete();
}

void *sub_100334EE8(uint64_t a1)
{
  uint64_t v1 = (void **)(a1 + 8);
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_1019B98D0;
  sub_100335010(v2 + 1, v1);
  return v2;
}

void *sub_100334F3C(uint64_t a1, void *a2)
{
  *a2 = off_1019B98D0;
  return sub_100335010(a2 + 1, (void **)(a1 + 8));
}

void sub_100334F68(uint64_t a1)
{
}

void sub_100334F70(const void **a1)
{
  sub_100335048(a1[1]);

  operator delete(a1);
}

uint64_t sub_100334FAC(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100334FC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100335004()
{
}

void *sub_100335010(void *a1, void **a2)
{
  long long v3 = *a2;
  if (*a2) {
    long long v3 = _Block_copy(v3);
  }
  *a1 = v3;
  return a1;
}

void sub_100335048(const void *a1)
{
  if (a1) {
    _Block_release(a1);
  }
}

BOOL sub_100335068(uint64_t a1)
{
  uint64_t v1 = **(void **)(a1 + 40);
  BOOL result = *(unsigned char *)(v1 + 5560)
        && ((*(uint64_t (**)(void))(**(void **)(v1 + 320) + 40))(*(void *)(v1 + 320)) & 1) == 0
        && *(void *)(v1 + 680) == 0;
  *(unsigned char *)(v1 + 5560) = 0;
  return result;
}

uint64_t sub_1003350E0(uint64_t result)
{
  *(unsigned char *)(**(void **)(result + 40) + 5560) = 0;
  return result;
}

uint64_t *sub_1003350F4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v3 = a1;
  uint64_t v4 = v1;
  sub_1003351AC((void *)(*(void *)v1 + 5472), v1 + 8);
  sub_10033515C(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100335140(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10033515C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10003B34C((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_1003351AC(void *a1, uint64_t a2)
{
  sub_1000F0058((uint64_t)v4, a2);
  sub_100335220(v4, a1);
  sub_10003B34C(v4);
  return a1;
}

void *sub_100335220(void *result, void *a2)
{
  if (a2 != result)
  {
    long long v3 = result;
    uint64_t v4 = (void *)result[3];
    char v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100335488(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_100335494(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = **a1;
  *(unsigned char *)(v1 + 5560) = 0;
  uint64_t v2 = *(void *)(v1 + 5496);
  if (v2)
  {
    long long v3 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I notify follow up extension, SS launched", buf, 2u);
      uint64_t v2 = *(void *)(v1 + 5496);
      if (!v2) {
        sub_10007B600();
      }
    }
    (*(void (**)(uint64_t))(*(void *)v2 + 48))(v2);
    sub_1003355AC((void *)(v1 + 5472));
  }
  operator delete();
}

void sub_100335580()
{
}

void *sub_1003355AC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100335634(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(*(void *)(v1 + 48) + 432);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 272))(v2);
  }
  sub_1003356C4(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_1003356A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_1003356C4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10033571C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_1003357B4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100335834(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  unsigned int v6 = v1;
  uint64_t v2 = *(void *)(*((void *)v1 + 5) + 528);
  if (v2)
  {
    uint64_t v3 = *v1;
    sub_10033571C((uint64_t)v7, (uint64_t)(v1 + 2));
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 32))(v2, v3, v7);
    sub_1000F25E0(v7);
  }
  else
  {
    sub_100335978((uint64_t)(v1 + 2), 0);
  }
  sub_100335928((uint64_t *)&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_1003358FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_1000F25E0((uint64_t *)va2);
  sub_100335928((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100335928(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_1000F25E0((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100335978(uint64_t a1, __int16 a2)
{
  __int16 v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, __int16 *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_1003359CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100335A64(unsigned int **a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  unsigned int v6 = v1;
  uint64_t v2 = *(void *)(*((void *)v1 + 5) + 528);
  if (v2)
  {
    uint64_t v3 = *v1;
    sub_1003359CC((uint64_t)v7, (uint64_t)(v1 + 2));
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 40))(v2, v3, v7);
    sub_10030D458(v7);
  }
  else
  {
    sub_100335BA8((uint64_t)(v1 + 2), 0);
  }
  sub_100335B58((uint64_t *)&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100335B2C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_10030D458((uint64_t *)va2);
  sub_100335B58((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100335B58(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D458((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100335BA8(uint64_t a1, uint64_t a2)
{
  int v4 = a2;
  char v5 = BYTE4(a2);
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, int *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t sub_100335C04(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100335C9C(unsigned int **a1)
{
  uint64_t v1 = *a1;
  unsigned int v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*((void *)v1 + 5) + 528);
  if (v2)
  {
    uint64_t v3 = *v1;
    sub_100335C04((uint64_t)v8, (uint64_t)(v1 + 2));
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 176))(v2, v3, v8);
    sub_10030D4DC(v8);
  }
  else
  {
    LOBYTE(v8[0]) = 0;
    char v9 = 0;
    uint64_t v4 = *((void *)v1 + 4);
    if (!v4) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void *))(*(void *)v4 + 48))(v4, v8);
    sub_100335E2C((uint64_t)v8);
  }
  sub_100335DDC((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100335DA0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
}

uint64_t *sub_100335DDC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D4DC((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t sub_100335E2C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 64))
  {
    if (*(unsigned char *)(a1 + 56) && *(char *)(a1 + 55) < 0) {
      operator delete(*(void **)(a1 + 32));
    }
    if (*(unsigned char *)(a1 + 24) && *(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

uint64_t *sub_100335E88(unsigned int **a1)
{
  uint64_t v1 = *a1;
  unsigned int v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*((void *)v1 + 5) + 528);
  if (v2)
  {
    uint64_t v3 = *v1;
    sub_1000DFC90((uint64_t)v8, (uint64_t)(v1 + 2));
    char v10 = 0;
    uint64_t v4 = operator new(0x28uLL);
    *uint64_t v4 = off_1019B9990;
    sub_100023950((uint64_t)(v4 + 1), (uint64_t)v8);
    char v10 = v4;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 64))(v2, v3, v9);
    sub_100060644(v9);
    sub_100060644(v8);
  }
  else
  {
    sub_1000607A8((uint64_t)(v1 + 2), 0);
  }
  sub_100335FD4((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100335F98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_100060644((uint64_t *)va3);
  sub_100060644((uint64_t *)va2);
  sub_100335FD4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100335FD4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100336024(void *a1)
{
  *a1 = off_1019B9990;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_100336068(void *a1)
{
  *a1 = off_1019B9990;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_1003360CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9990;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100336120(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100336134(uint64_t a1, void *a2)
{
  *a2 = off_1019B9990;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100336160(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_100336168(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1003361A4(uint64_t a1, char *a2)
{
  return sub_1000607A8(a1 + 8, *a2);
}

uint64_t sub_1003361B0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_1003361F0()
{
}

uint64_t *sub_1003361FC(unsigned int **a1)
{
  uint64_t v1 = *a1;
  unsigned int v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*((void *)v1 + 5) + 528);
  if (v2)
  {
    uint64_t v3 = *v1;
    sub_1000DFC90((uint64_t)v8, (uint64_t)(v1 + 2));
    uint64_t v10 = 0;
    uint64_t v4 = operator new(0x28uLL);
    *uint64_t v4 = off_1019B9A10;
    sub_100023950((uint64_t)(v4 + 1), (uint64_t)v8);
    uint64_t v10 = v4;
    (*(void (**)(uint64_t, uint64_t, void *))(*(void *)v2 + 72))(v2, v3, v9);
    sub_100060644(v9);
    sub_100060644(v8);
  }
  else
  {
    sub_1000607A8((uint64_t)(v1 + 2), 0);
  }
  sub_100335FD4((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10033630C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  va_copy(va3, va2);
  uint64_t v7 = va_arg(va3, void);
  uint64_t v9 = va_arg(va3, void);
  uint64_t v10 = va_arg(va3, void);
  uint64_t v11 = va_arg(va3, void);
  sub_100060644((uint64_t *)va3);
  sub_100060644((uint64_t *)va2);
  sub_100335FD4((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_100336348(void *a1)
{
  *a1 = off_1019B9A10;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_10033638C(void *a1)
{
  *a1 = off_1019B9A10;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_1003363F0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9A10;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100336444(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100336458(uint64_t a1, void *a2)
{
  *a2 = off_1019B9A10;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_100336484(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_10033648C(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_1003364C8(uint64_t a1, char *a2)
{
  return sub_1000607A8(a1 + 8, *a2);
}

uint64_t sub_1003364D4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100336514()
{
}

uint64_t *sub_100336520(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)(v1 + 168) + 528);
  if (v2)
  {
    sub_10006891C((uint64_t)v7, v1);
    sub_1000DFC90((uint64_t)v17, v1 + 136);
    uint64_t v19 = 0;
    uint64_t v3 = operator new(0x28uLL);
    void *v3 = off_1019B9A90;
    sub_100023950((uint64_t)(v3 + 1), (uint64_t)v17);
    uint64_t v19 = v3;
    (*(void (**)(uint64_t, unsigned char *, void *))(*(void *)v2 + 88))(v2, v7, v18);
    sub_100060644(v18);
    sub_100060644(v17);
    sub_10005CD90((uint64_t)v16, v16[1]);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
  }
  else
  {
    sub_1000607A8(v1 + 136, 0);
  }
  sub_100336720(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10033668C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40)
{
  sub_100060644((void *)(v40 - 72));
  sub_100060644((void *)(v40 - 104));
  sub_10005CD90((uint64_t)&a39, a40);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_100336720(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100336720(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 136));
    sub_10005CD90(v1 + 112, *(void **)(v1 + 120));
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_1003367BC(void *a1)
{
  *a1 = off_1019B9A90;
  sub_100060644(a1 + 1);
  return a1;
}

void sub_100336800(void *a1)
{
  *a1 = off_1019B9A90;
  sub_100060644(a1 + 1);

  operator delete();
}

void *sub_100336864(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9A90;
  sub_1000DFC90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003368B8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003368CC(uint64_t a1, void *a2)
{
  *a2 = off_1019B9A90;
  return sub_1000DFC90((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_1003368F8(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 8));
}

void sub_100336900(void *a1)
{
  sub_100060644(a1 + 1);

  operator delete(a1);
}

uint64_t sub_10033693C(uint64_t a1, char *a2)
{
  return sub_1000607A8(a1 + 8, *a2);
}

uint64_t sub_100336948(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100336988()
{
}

uint64_t *sub_100336994(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 528);
  if (v2) {
    (*(void (**)(uint64_t, unsigned __int8 *, void))(*(void *)v2 + 104))(v2, v1 + 8, v1[32]);
  }
  sub_10023CBF8((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100336A08(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100336A24(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 528);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 136))(v2);
  }
  sub_10024924C(v1 + 8, 0);
  sub_10032D4B4(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100336A9C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100336AB8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100336B50(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100336BD0(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)(v1 + 176) + 528);
  if (v2)
  {
    sub_10006891C((uint64_t)v7, v1);
    int v3 = *(unsigned __int8 *)(v1 + 168);
    sub_100336AB8((uint64_t)v17, v1 + 136);
    (*(void (**)(uint64_t, unsigned char *, BOOL, void *))(*(void *)v2 + 160))(v2, v7, v3 != 0, v17);
    sub_10030D830(v17);
    sub_10005CD90((uint64_t)v16, v16[1]);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
  }
  else
  {
    sub_100336E2C(v1 + 136, 0x100000003);
  }
  sub_100336D90(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100336D0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40)
{
  sub_10030D830((void *)(v40 - 72));
  sub_10005CD90((uint64_t)&a39, a40);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_100336D90(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100336D90(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D830((void *)(v1 + 136));
    sub_10005CD90(v1 + 112, *(void **)(v1 + 120));
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100336E2C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v2 + 48))(v2, &v4);
}

uint64_t *sub_100336E80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)(*(void *)(v1 + 176) + 528);
  if (v2)
  {
    sub_10006891C((uint64_t)v7, v1);
    int v3 = *(unsigned __int8 *)(v1 + 168);
    sub_100336AB8((uint64_t)v17, v1 + 136);
    (*(void (**)(uint64_t, unsigned char *, BOOL, void *))(*(void *)v2 + 168))(v2, v7, v3 != 0, v17);
    sub_10030D830(v17);
    sub_10005CD90((uint64_t)v16, v16[1]);
    if (v15 < 0) {
      operator delete(__p);
    }
    if (v13 < 0) {
      operator delete(v12);
    }
    if (v11 < 0) {
      operator delete(v10);
    }
    if (v9 < 0) {
      operator delete(v8);
    }
  }
  else
  {
    sub_100336E2C(v1 + 136, 0x100000003);
  }
  sub_100336D90(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100336FBC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, __int16 a11, char a12, char a13, void *a14, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,uint64_t a39,void *a40)
{
  sub_10030D830((void *)(v40 - 72));
  sub_10005CD90((uint64_t)&a39, a40);
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  if (a19 < 0) {
    operator delete(a14);
  }
  sub_100336D90(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100337040(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(void *)(v1 + 24);
  if (!*(void *)(v2 + 512)) {
    goto LABEL_21;
  }
  __s1 = 0;
  size_t __n = 0;
  uint64_t v16 = 0;
  (*(void (**)(void **__return_ptr))(**(void **)(v2 + 304) + 536))(&__s1);
  uint64_t v3 = HIBYTE(v16);
  if (v16 >= 0) {
    size_t v4 = HIBYTE(v16);
  }
  else {
    size_t v4 = __n;
  }
  uint64_t v5 = *(unsigned __int8 *)(v1 + 23);
  int v6 = (char)v5;
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(v1 + 8);
  }
  if (v4 != v5) {
    goto LABEL_18;
  }
  if (v6 >= 0) {
    uint64_t v7 = (unsigned __int8 *)v1;
  }
  else {
    uint64_t v7 = *(unsigned __int8 **)v1;
  }
  if ((v16 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v16))
    {
      p_s1 = &__s1;
      char v9 = v7;
      while (*(unsigned __int8 *)p_s1 == *v9)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v9;
        if (!--v3) {
          goto LABEL_22;
        }
      }
      goto LABEL_18;
    }
LABEL_22:
    char v11 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      BOOL v18 = v7;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Deactivated iccid [%s] matches monitor mode iccid", buf, 0xCu);
    }
    goto LABEL_19;
  }
  if (!memcmp(__s1, v7, __n)) {
    goto LABEL_22;
  }
LABEL_18:
  (*(void (**)(void, uint64_t))(**(void **)(v2 + 512) + 72))(*(void *)(v2 + 512), v1);
LABEL_19:
  if (SHIBYTE(v16) < 0) {
    operator delete(__s1);
  }
LABEL_21:
  sub_100337234(&v13);
  return sub_100046B58((uint64_t *)&v12);
}

void sub_100337200(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_100337234(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100337234(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10033728C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v19 = a1;
  uint64_t v20 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 304);
  if (!v3) {
    goto LABEL_25;
  }
  (*(void (**)(void **__return_ptr))(*(void *)v3 + 536))(__p);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 63);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = (void *)*(unsigned __int8 *)(v1 + 63);
  }
  else {
    uint64_t v5 = *(void **)(v1 + 48);
  }
  unint64_t v6 = v22;
  int v7 = (char)v22;
  if ((v22 & 0x80u) != 0) {
    unint64_t v6 = (unint64_t)__p[1];
  }
  if (v5 != (void *)v6)
  {
    BOOL v14 = 1;
    if (((char)v22 & 0x80000000) == 0) {
      goto LABEL_24;
    }
    goto LABEL_27;
  }
  int v8 = (const void **)(v1 + 40);
  if ((v22 & 0x80u) == 0) {
    char v9 = __p;
  }
  else {
    char v9 = (void **)__p[0];
  }
  if ((v4 & 0x80) != 0)
  {
    BOOL v14 = memcmp(*v8, v9, *(void *)(v1 + 48)) != 0;
    goto LABEL_23;
  }
  if (*(unsigned char *)(v1 + 63))
  {
    uint64_t v10 = v4 - 1;
    do
    {
      int v12 = *(unsigned __int8 *)v8;
      int v8 = (const void **)((char *)v8 + 1);
      int v11 = v12;
      int v13 = *(unsigned __int8 *)v9;
      char v9 = (void **)((char *)v9 + 1);
      BOOL v14 = v11 != v13;
    }
    while (v11 == v13 && v10-- != 0);
LABEL_23:
    if ((v7 & 0x80000000) == 0) {
      goto LABEL_24;
    }
LABEL_27:
    operator delete(__p[0]);
    if (v14) {
      goto LABEL_25;
    }
LABEL_28:
    char v16 = (*(uint64_t (**)(void))(**(void **)(v2 + 304) + 528))(*(void *)(v2 + 304));
    char v17 = *(unsigned char *)(v2 + 5561) != 0;
    goto LABEL_29;
  }
  BOOL v14 = 0;
  if ((char)v22 < 0) {
    goto LABEL_27;
  }
LABEL_24:
  if (!v14) {
    goto LABEL_28;
  }
LABEL_25:
  char v16 = 0;
  char v17 = 0;
LABEL_29:
  sub_10006074C(v1 + 8, v16, v17);
  sub_100337428(&v20);
  return sub_100046B58((uint64_t *)&v19);
}

void sub_10033740C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  sub_100337428((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100337428(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    sub_1000605C0((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

uint64_t *sub_100337488(uint64_t *a1)
{
  uint64_t v1 = *a1;
  int v12 = a1;
  uint64_t v13 = v1;
  uint64_t v2 = *(void *)v1;
  if (!*(unsigned char *)(v1 + 8))
  {
    uint64_t v3 = *(void *)(v2 + 416);
    if (v3)
    {
      sub_100058DB0(__p, "");
      (*(void (**)(uint64_t, void **, uint64_t))(*(void *)v3 + 152))(v3, __p, 1);
      if (v22 < 0) {
        operator delete(__p[0]);
      }
    }
    goto LABEL_45;
  }
  if (*(char *)(v1 + 39) < 0)
  {
    if (!*(void *)(v1 + 24)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(v1 + 39))
  {
    goto LABEL_33;
  }
  if (*(char *)(v1 + 63) < 0)
  {
    if (!*(void *)(v1 + 48)) {
      goto LABEL_33;
    }
  }
  else if (!*(unsigned char *)(v1 + 63))
  {
    goto LABEL_33;
  }
  if ((*(char *)(v1 + 87) & 0x80000000) == 0)
  {
    if (*(unsigned char *)(v1 + 87)) {
      goto LABEL_15;
    }
LABEL_33:
    int v7 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Invalid request details.", (uint8_t *)__p, 2u);
    }
    char v8 = 17;
    goto LABEL_46;
  }
  if (!*(void *)(v1 + 72)) {
    goto LABEL_33;
  }
LABEL_15:
  bzero(__p, 0x4E0uLL);
  std::string::operator=(&v25, (const std::string *)(v1 + 88));
  std::string::operator=(v26, (const std::string *)(v1 + 112));
  long long v16 = 0u;
  memset(__str, 0, sizeof(__str));
  sub_100E63EA4((uint64_t)__str);
  std::string::operator=(&v23, (const std::string *)__str);
  std::string::operator=(&v24, (const std::string *)&__str[24]);
  char v21 = 1;
  (***(void (****)(long long *__return_ptr))(v2 + 320))(&buf);
  sub_100CD69E4((Registry **)&buf, (const void **)(v1 + 16), (uint64_t)__str, (uint64_t)&v14);
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  std::string v28 = v14;
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  std::string::operator=(v29, (const std::string *)(v1 + 136));
  uint64_t v4 = *(void *)(v2 + 320);
  sub_100058DB0(&buf, "");
  (*(void (**)(std::string *__return_ptr, uint64_t, std::string *, std::string *, std::string *, std::string *, long long *, uint64_t))(*(void *)v4 + 160))(&v14, v4, &v23, &v24, &v25, v26, &buf, 1);
  if (SHIBYTE(v27.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v27.__r_.__value_.__l.__data_);
  }
  std::string v27 = v14;
  *((unsigned char *)&v14.__r_.__value_.__s + 23) = 0;
  v14.__r_.__value_.__s.__data_[0] = 0;
  if (SHIBYTE(v19) < 0) {
    operator delete((void *)buf);
  }
  std::string::size_type size = HIBYTE(v27.__r_.__value_.__r.__words[2]);
  if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type size = v27.__r_.__value_.__l.__size_;
  }
  if (!size) {
    std::string::operator=(&v27, (const std::string *)(v1 + 40));
  }
  memset(&v14, 0, sizeof(v14));
  (*(void (**)(std::string *__return_ptr))(**(void **)(v2 + 320) + 800))(&v14);
  if ((v14.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type v6 = HIBYTE(v14.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type v6 = v14.__r_.__value_.__l.__size_;
  }
  if (v6)
  {
    long long buf = 0uLL;
    uint64_t v19 = 0;
    *((void *)&buf + 1) = sub_1003252B8((uint64_t *)&buf, (long long *)__p);
    sub_1003078F0(v2, (uint64_t *)&buf);
    p_long long buf = (void **)&buf;
    sub_10030AFC8(&p_buf);
  }
  else
  {
    char v9 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      if ((v27.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        int v11 = &v27;
      }
      else {
        int v11 = (std::string *)v27.__r_.__value_.__r.__words[0];
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Carrier (%s) does not support direct auth", (uint8_t *)&buf, 0xCu);
    }
    sub_10024924C(v1 + 160, 17);
  }
  if (SHIBYTE(v14.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v14.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(*(void **)&__str[24]);
  }
  if ((__str[23] & 0x80000000) != 0) {
    operator delete(*(void **)__str);
  }
  sub_10030D10C((uint64_t)__p);
  if (v6)
  {
LABEL_45:
    char v8 = 0;
LABEL_46:
    sub_10024924C(v1 + 160, v8);
  }
  sub_1003379FC(&v13);
  return sub_100046B58((uint64_t *)&v12);
}

void sub_10033792C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,uint64_t a38,void *a39,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10030D10C((uint64_t)&a39);
  sub_1003379FC(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_1003379FC(uint64_t *a1)
{
  uint64_t v2 = *a1;
  *a1 = 0;
  if (v2)
  {
    sub_1002F21FC(v2);
    operator delete();
  }
  return a1;
}

void sub_100337A44(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
}

uint64_t sub_100337A50(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(v3);
  sub_100337AA4(*(void *)(a1 + 32), (uint64_t)v3);
  return sub_10030E938((uint64_t)v3);
}

uint64_t sub_100337AA4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (long long *)(a2 + 8);
  *(_DWORD *)a1 = *(_DWORD *)a2;
  uint64_t v5 = a1 + 8;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)v5);
  }
  long long v6 = *v4;
  *(void *)(v5 + 16) = *((void *)v4 + 2);
  *(_OWORD *)uint64_t v5 = v6;
  *(unsigned char *)(a2 + 31) = 0;
  *(unsigned char *)(a2 + 8) = 0;
  int v7 = (void **)(a1 + 32);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*v7);
  }
  long long v8 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)int v7 = v8;
  *(unsigned char *)(a2 + 55) = 0;
  *(unsigned char *)(a2 + 32) = 0;
  char v9 = (void **)(a1 + 56);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*v9);
  }
  long long v10 = *(_OWORD *)(a2 + 56);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(_OWORD *)char v9 = v10;
  *(unsigned char *)(a2 + 79) = 0;
  *(unsigned char *)(a2 + 56) = 0;
  int v11 = (void **)(a1 + 80);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*v11);
  }
  long long v12 = *(_OWORD *)(a2 + 80);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_OWORD *)int v11 = v12;
  *(unsigned char *)(a2 + 103) = 0;
  *(unsigned char *)(a2 + 80) = 0;
  uint64_t v13 = (void **)(a1 + 104);
  if (*(char *)(a1 + 127) < 0) {
    operator delete(*v13);
  }
  long long v14 = *(_OWORD *)(a2 + 104);
  *(void *)(a1 + 120) = *(void *)(a2 + 120);
  *(_OWORD *)uint64_t v13 = v14;
  *(unsigned char *)(a2 + 127) = 0;
  *(unsigned char *)(a2 + 104) = 0;
  char v15 = (void **)(a1 + 128);
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*v15);
  }
  long long v16 = *(_OWORD *)(a2 + 128);
  *(void *)(a1 + 144) = *(void *)(a2 + 144);
  *(_OWORD *)char v15 = v16;
  *(unsigned char *)(a2 + 151) = 0;
  *(unsigned char *)(a2 + 128) = 0;
  char v17 = (void **)(a1 + 152);
  if (*(char *)(a1 + 175) < 0) {
    operator delete(*v17);
  }
  long long v18 = *(_OWORD *)(a2 + 152);
  *(void *)(a1 + 168) = *(void *)(a2 + 168);
  *(_OWORD *)char v17 = v18;
  *(unsigned char *)(a2 + 175) = 0;
  *(unsigned char *)(a2 + 152) = 0;
  uint64_t v19 = (void **)(a1 + 176);
  if (*(char *)(a1 + 199) < 0) {
    operator delete(*v19);
  }
  long long v20 = *(_OWORD *)(a2 + 176);
  *(void *)(a1 + 192) = *(void *)(a2 + 192);
  *(_OWORD *)uint64_t v19 = v20;
  *(unsigned char *)(a2 + 199) = 0;
  *(unsigned char *)(a2 + 176) = 0;
  char v21 = (void **)(a1 + 200);
  if (*(char *)(a1 + 223) < 0) {
    operator delete(*v21);
  }
  long long v22 = *(_OWORD *)(a2 + 200);
  *(void *)(a1 + 216) = *(void *)(a2 + 216);
  *(_OWORD *)char v21 = v22;
  *(unsigned char *)(a2 + 223) = 0;
  *(unsigned char *)(a2 + 200) = 0;
  return a1;
}

uint64_t sub_100337C88(uint64_t a1)
{
  (*(void (**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(v3);
  sub_100337AA4(*(void *)(a1 + 32), (uint64_t)v3);
  return sub_10030E938((uint64_t)v3);
}

uint64_t sub_100337CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100337D74(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100337DF4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  uint64_t v5 = v1;
  sub_1002F5B54(*v1, (uint64_t)v6);
  uint64_t v2 = v1[4];
  if (!v2) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, unsigned char *))(*(void *)v2 + 48))(v2, v6);
  sub_10030E938((uint64_t)v6);
  sub_100337EA8((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100337E7C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100337EA8(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D8B4((void *)(v1 + 8));
    operator delete();
  }
  return result;
}

void *sub_100337EF8(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100337F7C(uint64_t **a1)
{
  uint64_t v1 = *a1;
  int v11 = a1;
  long long v12 = v1;
  uint64_t v2 = *v1;
  if (sub_1002DDD6C(*(void (****)(Registry **__return_ptr))(*v1 + 320)))
  {
    if (*(void *)(v2 + 336) && sub_1002FE04C(v2)) {
      (*(void (**)(void))(**(void **)(v2 + 336) + 176))(*(void *)(v2 + 336));
    }
    v17[0] = 0;
    v17[1] = 0;
    char v18 = 0;
    (*(void (**)(void *__return_ptr))(**(void **)(v2 + 304) + 352))(v17);
    if (v18)
    {
      unsigned int v3 = LOBYTE(v17[0]) - 89;
      if (v3 > 8 || ((1 << v3) & 0x181) == 0)
      {
        int v8 = *(_DWORD *)(v2 + 2632);
        uint64_t v9 = *(void *)(v2 + 336);
        *(void *)long long buf = v2;
        sub_1000332B4((uint64_t)v14, (uint64_t)(v1 + 1));
        long long v16 = 0;
        long long v10 = operator new(0x30uLL);
        void *v10 = off_1019B9B70;
        v10[1] = v2;
        sub_10003334C((uint64_t)(v10 + 2), (uint64_t)v14);
        long long v16 = v10;
        (*(void (**)(uint64_t, BOOL, void *))(*(void *)v9 + 128))(v9, v8 != 1, v15);
        sub_100337EF8(v15);
        sub_100033230(v14);
        goto LABEL_16;
      }
    }
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "Invalid CSN.", buf, 2u);
    }
    *(void *)long long buf = 0;
    uint64_t v5 = v1[4];
    if (!v5) {
      sub_10007B600();
    }
  }
  else
  {
    long long v6 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I No carrier items available, eSIM modification not allowed.", buf, 2u);
    }
    *(void *)long long buf = 0;
    uint64_t v5 = v1[4];
    if (!v5) {
      sub_10007B600();
    }
  }
  (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 48))(v5, buf);
  sub_100044D00((const void **)buf);
LABEL_16:
  sub_1003238C0((uint64_t *)&v12);
  return sub_100046B58((uint64_t *)&v11);
}

void sub_100338248(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17)
{
  sub_100337EF8(&a17);
  sub_100033230(v17);
  sub_1003238C0(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void *sub_100338298(void *a1)
{
  *a1 = off_1019B9B70;
  sub_100033230(a1 + 2);
  return a1;
}

void sub_1003382DC(void *a1)
{
  *a1 = off_1019B9B70;
  sub_100033230(a1 + 2);

  operator delete();
}

void *sub_100338340(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B9B70;
  v2[1] = v3;
  sub_1000332B4((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_100338398(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003383AC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019B9B70;
  a2[1] = v2;
  return sub_1000332B4((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_1003383DC(uint64_t a1)
{
  return sub_100033230((void *)(a1 + 16));
}

void sub_1003383E4(void *a1)
{
  sub_100033230(a1 + 2);

  operator delete(a1);
}

const void **sub_100338420(uint64_t a1, const void **a2, unsigned __int8 *a3, long long *a4)
{
  uint64_t v5 = *a2;
  *a2 = 0;
  int v6 = *a3;
  long long v44 = *a4;
  uint64_t v45 = *((void *)a4 + 2);
  CFTypeRef cf = v5;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  if (v6 || (v5 ? (int v11 = sub_100083F10) : (int v11 = 0), !v11))
  {
    int v8 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = asString();
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Failed to get carrier setup items: %s", (uint8_t *)&buf, 0xCu);
    }
    goto LABEL_4;
  }
  long long v12 = *(unsigned int **)(v7 + 2464);
  uint64_t v13 = *(unsigned int **)(v7 + 2472);
  if (v12 == v13) {
    goto LABEL_4;
  }
  while (v12[16] != 1 || (subscriber::isSimReady() & 1) == 0)
  {
    v12 += 42;
    if (v12 == v13)
    {
      long long v12 = v13;
      break;
    }
  }
  if (*(unsigned int **)(v7 + 2472) == v12 || *(_DWORD *)(v7 + 2632) != 1) {
    goto LABEL_4;
  }
  (***(void (****)(unsigned long long *__return_ptr))(v7 + 320))(&buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)buf);
  char v15 = ServiceMap;
  if (v16 < 0)
  {
    char v17 = (unsigned __int8 *)(v16 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      uint64_t v16 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  std::mutex::lock(ServiceMap);
  *(void *)uint64_t v50 = v16;
  long long v20 = sub_10004D37C(&v15[1].__m_.__sig, (unint64_t *)v50);
  if (v20)
  {
    uint64_t v21 = v20[3];
    long long v22 = (std::__shared_weak_count *)v20[4];
    if (v22)
    {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v15);
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v22);
      char v23 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v21 = 0;
  }
  std::mutex::unlock(v15);
  long long v22 = 0;
  char v23 = 1;
LABEL_28:
  if (*((void *)&buf + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
  }
  if (!v21)
  {
    *(void *)&unsigned long long buf = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v29 = *(void *)(a1 + 40);
    if (!v29) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, unsigned long long *))(*(void *)v29 + 48))(v29, &buf);
    sub_100044D00((const void **)&buf);
    int v30 = 1;
    goto LABEL_75;
  }
  *(_DWORD *)((char *)&v47 + 3) = 0;
  LODWORD(v47) = 0;
  char v43 = v22;
  (*(void (**)(uint8_t *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v21 + 96))(v50, v21, *v12, 1, @"CarrierName", 0, 0);
  unsigned long long buf = 0uLL;
  uint64_t v53 = 0;
  ctu::cf::assign();
  unint64_t v24 = *((void *)&buf + 1);
  std::string v25 = (void *)buf;
  LODWORD(v47) = v53;
  *(_DWORD *)((char *)&v47 + 3) = *(_DWORD *)((char *)&v53 + 3);
  unsigned int v26 = HIBYTE(v53);
  sub_1000577C4((const void **)v50);
  uint64_t v27 = v44;
  if ((v26 & 0x80) != 0)
  {
    sub_10004FC84(&buf, v25, v24);
    unsigned int v28 = HIBYTE(v53);
  }
  else
  {
    unsigned long long buf = __PAIR128__(v24, (unint64_t)v25);
    LODWORD(v53) = v47;
    *(_DWORD *)((char *)&v53 + 3) = *(_DWORD *)((char *)&v47 + 3);
    HIBYTE(v53) = v26;
    unsigned int v28 = v26;
  }
  if ((void)v44 == *((void *)&v44 + 1))
  {
LABEL_57:
    if ((v28 & 0x80) != 0) {
      operator delete((void *)buf);
    }
    if (v27 != *((void *)&v44 + 1)) {
      goto LABEL_60;
    }
    goto LABEL_72;
  }
  unsigned long long v31 = buf;
  if ((v28 & 0x80u) == 0) {
    uint64_t v32 = v28;
  }
  else {
    uint64_t v32 = *((void *)&buf + 1);
  }
  while (1)
  {
    uint64_t v33 = *(unsigned __int8 *)(v27 + 23);
    int v34 = (char)v33;
    if ((v33 & 0x80u) != 0) {
      uint64_t v33 = *(void *)(v27 + 8);
    }
    if (v32 != v33) {
      goto LABEL_55;
    }
    uint64_t v35 = v34 >= 0 ? (unsigned __int8 *)v27 : *(unsigned __int8 **)v27;
    if ((v28 & 0x80) != 0) {
      break;
    }
    if (!v28)
    {
      BOOL v42 = v27 == *((void *)&v44 + 1);
      goto LABEL_70;
    }
    p_unsigned long long buf = &buf;
    uint64_t v37 = v28;
    while (*(unsigned __int8 *)p_buf == *v35)
    {
      p_unsigned long long buf = (unsigned long long *)((char *)p_buf + 1);
      ++v35;
      if (!--v37) {
        goto LABEL_57;
      }
    }
LABEL_55:
    v27 += 192;
    if (v27 == *((void *)&v44 + 1))
    {
      uint64_t v27 = *((void *)&v44 + 1);
      goto LABEL_57;
    }
  }
  if (memcmp((const void *)v31, v35, *((size_t *)&v31 + 1))) {
    goto LABEL_55;
  }
  operator delete((void *)v31);
  BOOL v42 = v27 == *((void *)&v44 + 1);
LABEL_70:
  if (v42)
  {
LABEL_72:
    int v30 = 0;
    long long v22 = v43;
    goto LABEL_73;
  }
LABEL_60:
  CFTypeRef v38 = *(NSObject **)(v7 + 40);
  long long v22 = v43;
  if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I Physical SIM from same carrier is present and suppress carrier setup items.", v50, 2u);
  }
  uint64_t v39 = *(void *)(v7 + 432);
  sub_100058DB0(v50, "");
  uint64_t v40 = (char *)asString();
  sub_100058DB0(__p, v40);
  (*(void (**)(uint64_t, uint8_t *, void, void **))(*(void *)v39 + 248))(v39, v50, 0, __p);
  if (v49 < 0) {
    operator delete(__p[0]);
  }
  if (v51 < 0) {
    operator delete(*(void **)v50);
  }
  __p[0] = 0;
  uint64_t v41 = *(void *)(a1 + 40);
  if (!v41) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v41 + 48))(v41, __p);
  sub_100044D00((const void **)__p);
  int v30 = 1;
LABEL_73:
  if ((v26 & 0x80) != 0) {
    operator delete(v25);
  }
LABEL_75:
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  if (!v30)
  {
LABEL_4:
    CFTypeRef v47 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v9 = *(void *)(a1 + 40);
    if (!v9) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v9 + 48))(v9, &v47);
    sub_100044D00(&v47);
  }
  *(void *)&unsigned long long buf = &v44;
  sub_10030A774((void ***)&buf);
  return sub_100044D00(&cf);
}

void sub_1003389F8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, char a13, uint64_t a14, uint64_t a15, const void *a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,uint64_t a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  operator delete(v39);
  if ((v38 & 1) == 0) {
    sub_10004D2C8(a12);
  }
  a26 = &a13;
  sub_10030A774((void ***)&a26);
  sub_100044D00(&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100338B1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100338B5C()
{
}

uint64_t sub_100338B68(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_100338C00(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100338C80(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v35 = a1;
  uint64_t v36 = v1;
  uint64_t v2 = *(void **)v1;
  values = @"EncryptedOnDeviceActivation";
  CFDictionaryRef theDict = 0;
  CFTypeRef cf = CFArrayCreate(kCFAllocatorDefault, (const void **)&values, 1, &kCFTypeArrayCallBacks);
  uint64_t v3 = v2[40];
  sub_100058DB0(__p, "");
  CFTypeRef v41 = cf;
  if (cf) {
    CFRetain(cf);
  }
  (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, CFTypeRef *))(*(void *)v3 + 152))(&v49, v3, v1 + 32, v1 + 56, v1 + 80, v1 + 104, __p, &v41);
  sub_10004EFE4(&theDict, (CFTypeRef *)&v49);
  sub_10005717C((const void **)&v49);
  sub_100044D00(&v41);
  if (SHIBYTE(v48[0]) < 0) {
    operator delete(__p[0]);
  }
  if (theDict) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (!v4)
  {
    uint64_t v9 = v2[5];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E Failed to get matching carrier bundle by keys", (uint8_t *)__p, 2u);
    }
    __p[0] = 0;
    *(void *)&long long v49 = 0;
    uint64_t v10 = *(void *)(v1 + 152);
    if (!v10) {
      sub_10007B600();
    }
    goto LABEL_29;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"EncryptedOnDeviceActivation");
  CFDictionaryRef v6 = Value;
  if (Value)
  {
    CFTypeID v7 = CFGetTypeID(Value);
    if (v7 == CFDictionaryGetTypeID()) {
      CFDictionaryRef v8 = v6;
    }
    else {
      CFDictionaryRef v8 = 0;
    }
  }
  else
  {
    CFDictionaryRef v8 = 0;
  }
  if (!CFDictionaryContainsKey(v8, @"Certificate")
    || !CFDictionaryContainsKey(v8, @"CertificateIdentifier"))
  {
    uint64_t v21 = v2[5];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to get values for certificate and identifier", (uint8_t *)__p, 2u);
    }
    __p[0] = 0;
    *(void *)&long long v49 = 0;
    uint64_t v10 = *(void *)(v1 + 152);
    if (!v10) {
      sub_10007B600();
    }
LABEL_29:
    (*(void (**)(uint64_t, void **, long long *))(*(void *)v10 + 48))(v10, __p, &v49);
    sub_100030068((const void **)&v49);
    sub_1000558F4((const void **)__p);
    goto LABEL_30;
  }
  (**(void (***)(void **__return_ptr))v2[40])(__p);
  ServiceMap = (std::mutex *)Registry::getServiceMap((Registry *)__p[0]);
  long long v12 = ServiceMap;
  if (v13 < 0)
  {
    long long v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long v49 = v13;
  char v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)&v49);
  if (!v17)
  {
    uint64_t v19 = 0;
    goto LABEL_32;
  }
  uint64_t v19 = v17[3];
  uint64_t v18 = (std::__shared_weak_count *)v17[4];
  if (!v18)
  {
LABEL_32:
    std::mutex::unlock(v12);
    uint64_t v18 = 0;
    char v20 = 1;
    goto LABEL_33;
  }
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v12);
  atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v18);
  char v20 = 0;
LABEL_33:
  if (__p[1]) {
    sub_10004D2C8((std::__shared_weak_count *)__p[1]);
  }
  if (v19)
  {
    CFTypeRef v40 = 0;
    char v23 = CFDictionaryGetValue(v8, @"Certificate");
    unint64_t v24 = v23;
    if (v23 && (CFTypeID v25 = CFGetTypeID(v23), v25 == CFStringGetTypeID()))
    {
      CFTypeRef v40 = v24;
      CFRetain(v24);
    }
    else
    {
      CFTypeRef v40 = 0;
    }
    CFTypeRef v39 = 0;
    unsigned int v26 = CFDictionaryGetValue(v8, @"CertificateIdentifier");
    uint64_t v27 = v26;
    if (v26 && (CFTypeID v28 = CFGetTypeID(v26), v28 == CFStringGetTypeID()))
    {
      CFTypeRef v39 = v27;
      CFRetain(v27);
    }
    else
    {
      CFTypeRef v39 = 0;
    }
    if (*(char *)(v1 + 31) < 0)
    {
      sub_10004FC84(__dst, *(void **)(v1 + 8), *(void *)(v1 + 16));
    }
    else
    {
      long long v29 = *(_OWORD *)(v1 + 8);
      uint64_t v38 = *(void *)(v1 + 24);
      *(_OWORD *)long long __dst = v29;
    }
    if (SHIBYTE(v38) < 0)
    {
      sub_10004FC84(&v49, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      long long v49 = *(_OWORD *)__dst;
      uint64_t v50 = v38;
    }
    long long v44 = 0;
    if (SHIBYTE(v50) < 0)
    {
      sub_10004FC84(__p, (void *)v49, *((unint64_t *)&v49 + 1));
    }
    else
    {
      *(_OWORD *)long long __p = v49;
      v48[0] = v50;
    }
    CFTypeRef v45 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v33 = v44;
      long long v44 = v45;
      long long v46 = v33;
      sub_1000558F4(&v46);
    }
    if (SHIBYTE(v48[0]) < 0) {
      operator delete(__p[0]);
    }
    long long v46 = v44;
    long long v44 = 0;
    sub_1000558F4(&v44);
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)v49);
    }
    CFTypeRef v45 = v40;
    if (v40) {
      CFRetain(v40);
    }
    __p[0] = v2;
    __p[1] = (void *)v39;
    if (v39) {
      CFRetain(v39);
    }
    sub_100338B68((uint64_t)v48, v1 + 128);
    char v51 = 0;
    int v34 = (char *)operator new(0x38uLL);
    *(void *)int v34 = off_1019B9C00;
    *(_OWORD *)(v34 + 8) = *(_OWORD *)__p;
    __p[1] = 0;
    sub_100338C00((uint64_t)(v34 + 24), (uint64_t)v48);
    char v51 = v34;
    (*(void (**)(uint64_t, const void **, CFTypeRef *, long long *))(*(void *)v19 + 88))(v19, &v46, &v45, &v49);
    sub_1003399AC(&v49);
    sub_10030D938(v48);
    sub_1000558F4((const void **)&__p[1]);
    sub_1000558F4(&v45);
    sub_1000558F4(&v46);
    if (SHIBYTE(v38) < 0) {
      operator delete(__dst[0]);
    }
    sub_1000558F4(&v39);
    uint64_t v32 = &v40;
  }
  else
  {
    int v30 = v2[5];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to get EncryptedIdentity service", (uint8_t *)__p, 2u);
    }
    __p[0] = 0;
    *(void *)&long long v49 = 0;
    uint64_t v31 = *(void *)(v1 + 152);
    if (!v31) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, void **, long long *))(*(void *)v31 + 48))(v31, __p, &v49);
    sub_100030068((const void **)&v49);
    uint64_t v32 = (const void **)__p;
  }
  sub_1000558F4(v32);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }
LABEL_30:
  sub_100057D78((const void **)&theDict);
  sub_100044D00(&cf);
  sub_100339500(&v36);
  return sub_100046B58((uint64_t *)&v35);
}

void sub_100339364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,int a23,__int16 a24,char a25,char a26,int a27,__int16 a28,char a29,char a30,int a31,__int16 a32,char a33,char a34,int a35,__int16 a36,char a37,char a38,int a39,__int16 a40,char a41,char a42,int a43,__int16 a44,char a45,char a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100339500(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D938((void *)(v1 + 128));
    if (*(char *)(v1 + 127) < 0) {
      operator delete(*(void **)(v1 + 104));
    }
    if (*(char *)(v1 + 103) < 0) {
      operator delete(*(void **)(v1 + 80));
    }
    if (*(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_1003395A0(uint64_t a1)
{
  *(void *)a1 = off_1019B9C00;
  sub_10030D938((void *)(a1 + 24));
  sub_1000558F4((const void **)(a1 + 16));
  return a1;
}

void sub_1003395EC(uint64_t a1)
{
  *(void *)a1 = off_1019B9C00;
  sub_10030D938((void *)(a1 + 24));
  sub_1000558F4((const void **)(a1 + 16));

  operator delete();
}

void *sub_100339658(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_1019B9C00;
  sub_100339940((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003396AC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003396C0(uint64_t a1, void *a2)
{
  *a2 = off_1019B9C00;
  return sub_100339940((uint64_t)(a2 + 1), a1 + 8);
}

const void **sub_1003396EC(uint64_t a1)
{
  sub_10030D938((void *)(a1 + 24));

  return sub_1000558F4((const void **)(a1 + 16));
}

void sub_100339728(uint64_t a1)
{
  sub_10030D938((void *)(a1 + 24));
  sub_1000558F4((const void **)(a1 + 16));

  operator delete((void *)a1);
}

const void **sub_10033976C(uint64_t a1, CFTypeRef *a2)
{
  CFTypeRef cf = *a2;
  CFTypeRef v3 = cf;
  *a2 = 0;
  if (v3) {
    uint64_t v4 = sub_10008324C;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    sub_100083DA4((const void **)buf, (const void **)(a1 + 16));
    CFTypeRef v9 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v5 = *(void *)(a1 + 48);
    if (!v5) {
      sub_10007B600();
    }
  }
  else
  {
    CFDictionaryRef v6 = *(NSObject **)(*(void *)(a1 + 8) + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Failed to encrypt string", buf, 2u);
    }
    CFTypeRef v9 = 0;
    *(void *)unsigned long long buf = 0;
    uint64_t v5 = *(void *)(a1 + 48);
    if (!v5) {
      sub_10007B600();
    }
  }
  (*(void (**)(uint64_t, uint8_t *, CFTypeRef *))(*(void *)v5 + 48))(v5, buf, &v9);
  sub_100030068(&v9);
  sub_1000558F4((const void **)buf);
  return sub_100030068(&cf);
}

void sub_1003398C8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11)
{
}

uint64_t sub_1003398F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100339934()
{
}

uint64_t sub_100339940(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = a1 + 16;
  sub_100083DA4((const void **)(a1 + 8), (const void **)(a2 + 8));
  sub_100338B68(v4, a2 + 16);
  return a1;
}

void sub_100339998(_Unwind_Exception *a1)
{
  sub_1000558F4(v1);
  _Unwind_Resume(a1);
}

void *sub_1003399AC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100339A30(void **a1)
{
  uint64_t v1 = *a1;
  CFDictionaryRef v6 = a1;
  CFTypeID v7 = v1;
  if (v1[1] != v1[3] || v1[2] != v1[4])
  {
    uint64_t v3 = *(void *)(*v1 + 256);
    if (v3)
    {
      (*(void (**)(uint64_t, void *, void *, void *, void *, void *))(*(void *)v3 + 32))(v3, v1 + 5, v1 + 8, v1 + 1, v1 + 3, v1 + 11);
    }
    else
    {
      uint64_t v4 = *(NSObject **)(*v1 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "invalid command receiver", buf, 2u);
      }
    }
  }
  sub_100339B2C((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_100339B10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100339B2C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 87) < 0) {
      operator delete(*(void **)(v1 + 64));
    }
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100339B94(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v21 = a1;
  uint64_t v22 = v1;
  uint64_t v2 = *(void *)v1;
  long long v41 = 0uLL;
  long long v39 = 0uLL;
  char v40 = 0;
  (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&v39);
  if (v40) {
    long long v41 = v39;
  }
  if ((void)v41 == *(void *)(v1 + 8) && *((void *)&v41 + 1) == *(void *)(v1 + 16))
  {
    uint64_t v12 = *(void *)(v2 + 384);
    if (v12)
    {
      if (*(unsigned char *)(v1 + 280))
      {
        uint8_t v13 = 1;
        buf[0] = 1;
      }
      else
      {
        uint64_t v18 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
        {
          char v20 = (void *)(v1 + 288);
          if (*(char *)(v1 + 311) < 0) {
            char v20 = (void *)*v20;
          }
          *(_DWORD *)unsigned long long buf = 136315394;
          long long v29 = v20;
          __int16 v30 = 2080;
          uint64_t v31 = asString();
          _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "get transfer token for iccid:%s failure. error:%s", buf, 0x16u);
          uint64_t v12 = *(void *)(v2 + 384);
        }
        uint8_t v13 = 0;
        buf[0] = 2;
      }
      buf[1] = v13;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v12 + 256))(v12, v1 + 320, v1 + 344, v1 + 288, v1 + 24);
    }
    else
    {
      char v17 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "invalid target transfer flow controller", buf, 2u);
      }
    }
  }
  else
  {
    uint64_t v4 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v5 = (void *)(v1 + 288);
      if (*(char *)(v1 + 311) < 0) {
        uint64_t v5 = (void *)*v5;
      }
      sCardSerialNumberAsString();
      if (v27 >= 0) {
        CFDictionaryRef v6 = v26;
      }
      else {
        CFDictionaryRef v6 = (void **)v26[0];
      }
      sCardSerialNumberAsString();
      if (v25 >= 0) {
        p_p = &__p;
      }
      else {
        p_p = __p;
      }
      char v23 = *(unsigned char *)(v1 + 280);
      uint64_t v9 = printers::asString((printers *)&v23, v7);
      uint64_t v10 = asString();
      *(_DWORD *)unsigned long long buf = 136316162;
      long long v29 = v5;
      __int16 v30 = 2080;
      uint64_t v31 = (uint64_t)v6;
      __int16 v32 = 2080;
      uint64_t v33 = p_p;
      __int16 v34 = 2080;
      uint64_t v35 = v9;
      __int16 v36 = 2080;
      uint64_t v37 = v10;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I transfer auth response. iccid: %s, source eid: %s, target eid: %s, data vaid? %s, error:%s", buf, 0x34u);
      if (v25 < 0) {
        operator delete(__p);
      }
      if (v27 < 0) {
        operator delete(v26[0]);
      }
    }
    uint64_t v11 = *(void *)(v2 + 256);
    if (v11)
    {
      if (*(unsigned char *)(v1 + 280))
      {
        *(_WORD *)unsigned long long buf = 257;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint8_t *, uint64_t))(*(void *)v11 + 40))(v11, v1 + 320, v1 + 8, v1 + 288, v1 + 344, buf, v1 + 24);
      }
      else
      {
        LOWORD(v26[0]) = 770;
        buf[0] = 0;
        char v38 = 0;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void **, uint8_t *))(*(void *)v11 + 40))(v11, v1 + 320, v1 + 8, v1 + 288, v1 + 344, v26, buf);
        if (v38) {
          sub_1000C5578((uint64_t)buf);
        }
      }
    }
    else
    {
      long long v14 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)unsigned long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "invalid command receiver", buf, 2u);
      }
    }
    if (*(unsigned char *)(v1 + 312) != 13)
    {
      uint64_t v15 = *(std::__shared_weak_count **)(v2 + 408);
      *(void *)(v2 + 400) = 0;
      *(void *)(v2 + 408) = 0;
      if (v15) {
        sub_10004D2C8(v15);
      }
      uint64_t v16 = *(void *)(v2 + 464);
      if (v16) {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)v16 + 128))(v16, 0, 1);
      }
    }
  }
  sub_10033A060(&v22);
  return sub_100046B58((uint64_t *)&v21);
}

void sub_100339FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,char a57)
{
  if (a57) {
    sub_1000C5578((uint64_t)&a25);
  }
  sub_10033A060(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033A060(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 343) < 0) {
      operator delete(*(void **)(v1 + 320));
    }
    if (*(char *)(v1 + 311) < 0) {
      operator delete(*(void **)(v1 + 288));
    }
    if (*(unsigned char *)(v1 + 280)) {
      sub_1000C5578(v1 + 24);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10033A0D8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  memset(&v9, 0, sizeof(v9));
  if (*(unsigned char *)(v1 + 144)) {
    std::string::operator=(&v9, (const std::string *)(v1 + 120));
  }
  *(_OWORD *)long long __p = 0u;
  long long v8 = 0u;
  uint64_t v3 = *(const std::string **)(v1 + 32);
  if (*(void *)(v1 + 40) - (void)v3 == 96) {
    sub_100093B44((std::string *)__p, v3);
  }
  sub_1002F5F2C(v2, (const std::string *)(v1 + 8), (uint64_t)&v9, (long long *)__p, 1, *(unsigned char *)(v1 + 184));
  if (BYTE8(v8) && SBYTE7(v8) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
  sub_10033A1E4(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_10033A198(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
  if (*(char *)(v17 - 17) < 0) {
    operator delete(*(void **)(v17 - 40));
  }
  sub_10033A1E4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033A1E4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 183) < 0) {
      operator delete(*(void **)(v1 + 160));
    }
    if (*(unsigned char *)(v1 + 144) && *(char *)(v1 + 143) < 0) {
      operator delete(*(void **)(v1 + 120));
    }
    if (*(unsigned char *)(v1 + 112) && *(char *)(v1 + 111) < 0) {
      operator delete(*(void **)(v1 + 88));
    }
    if (*(unsigned char *)(v1 + 80) && *(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    uint64_t v2 = (void **)(v1 + 32);
    sub_1001A010C(&v2);
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10033A2B4(uint64_t **a1, void **a2, long long **a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  CFTypeID v7 = a1 + 1;
  long long v8 = a1 + 1;
  if (!v5) {
    goto LABEL_10;
  }
  CFTypeID v7 = a1 + 1;
  while (1)
  {
    while (1)
    {
      long long v8 = (uint64_t **)v5;
      uint64_t v10 = v5 + 4;
      if ((sub_100046FE8(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      uint64_t v5 = *v8;
      CFTypeID v7 = v8;
      if (!*v8) {
        goto LABEL_10;
      }
    }
    if ((sub_100046FE8(v10, a2) & 0x80) == 0) {
      break;
    }
    CFTypeID v7 = v8 + 1;
    uint64_t v5 = v8[1];
    if (!v5) {
      goto LABEL_10;
    }
  }
  uint64_t v11 = *v7;
  if (!*v7)
  {
LABEL_10:
    uint64_t v12 = *a3;
    uint64_t v19 = 0;
    uint8_t v13 = (uint64_t *)operator new(0x58uLL);
    v18[0] = v13;
    v18[1] = v6;
    long long v14 = v13 + 4;
    if (*((char *)v12 + 23) < 0)
    {
      sub_10004FC84(v14, *(void **)v12, *((void *)v12 + 1));
    }
    else
    {
      long long v15 = *v12;
      void v13[6] = *((void *)v12 + 2);
      *(_OWORD *)long long v14 = v15;
    }
    v13[10] = 0;
    LOBYTE(v19) = 1;
    uint64_t *v13 = 0;
    v13[1] = 0;
    _DWORD v13[2] = (uint64_t)v8;
    *CFTypeID v7 = v13;
    uint64_t v16 = (uint64_t *)**a1;
    if (v16)
    {
      *a1 = v16;
      uint8_t v13 = *v7;
    }
    sub_100046C90(a1[1], v13);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    uint64_t v11 = (uint64_t *)v18[0];
    v18[0] = 0;
    sub_10033A414((uint64_t)v18);
  }
  return v11;
}

void sub_10033A400(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10033A414((uint64_t)va);
  _Unwind_Resume(a1);
}

void sub_10033A414(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100313740((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

uint64_t *sub_10033A46C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  CFTypeID v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = (void *)(v1 + 8);
  uint64_t v3 = *(void *)v1;
  if (sub_10010E194(*(void ***)(*(void *)v1 + 4696), (void **)(v1 + 8)))
  {
    uint64_t v4 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(v1 + 31) < 0) {
        uint64_t v2 = (void *)*v2;
      }
      *(_DWORD *)unsigned long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v2;
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "already trying to install %s", buf, 0xCu);
    }
  }
  else
  {
    *(void *)unsigned long long buf = v1 + 8;
    uint64_t v5 = sub_10033A2B4((uint64_t **)(v3 + 4688), (void **)(v1 + 8), (long long **)buf);
    sub_10033A644(v5 + 7, v1 + 88);
    if ((sub_1002F5F2C(v3, (const std::string *)(v1 + 8), v1 + 32, (long long *)(v1 + 56), 0, 16) & 1) == 0) {
      sub_1002F66D0((void *)v3, (long long *)(v1 + 8), 0);
    }
  }
  sub_10033A5BC(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_10033A5A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_10033A5BC(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_100060644((void *)(v1 + 88));
    if (*(unsigned char *)(v1 + 80) && *(char *)(v1 + 79) < 0) {
      operator delete(*(void **)(v1 + 56));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_10033A644(void *a1, uint64_t a2)
{
  sub_1000DFC90((uint64_t)v4, a2);
  sub_10033A6B8(v4, a1);
  sub_100060644(v4);
  return a1;
}

void *sub_10033A6B8(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    uint64_t v4 = (void *)result[3];
    uint64_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        BOOL result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      BOOL result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_10033A920(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

uint64_t *sub_10033A92C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v72 = a1;
  uint64_t v73 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = (NSObject **)(*(void *)v1 + 40);
  uint64_t v4 = *(void *)v1 + 2464;
  sub_1002F410C((uint64_t)__p, v3, v4);
  uint64_t v5 = (const void **)(v1 + 8);
  if ((SBYTE7(v103[0]) & 0x80u) == 0) {
    uint64_t v6 = (void *)BYTE7(v103[0]);
  }
  else {
    uint64_t v6 = __p[1];
  }
  CFTypeID v7 = (void *)*(unsigned __int8 *)(v1 + 31);
  int v8 = (char)v7;
  if ((char)v7 < 0) {
    CFTypeID v7 = *(void **)(v1 + 16);
  }
  if (v6 != v7)
  {
    if ((BYTE7(v103[0]) & 0x80) != 0) {
      operator delete(__p[0]);
    }
    goto LABEL_24;
  }
  if (v8 >= 0) {
    std::string v9 = (unsigned __int8 *)(v1 + 8);
  }
  else {
    std::string v9 = (unsigned __int8 *)*v5;
  }
  if ((BYTE7(v103[0]) & 0x80) != 0)
  {
    long long v15 = __p[0];
    int v16 = memcmp(__p[0], v9, (size_t)__p[1]);
    operator delete(v15);
    if (!v16)
    {
      if ((*(unsigned char *)(v1 + 31) & 0x80) == 0) {
        goto LABEL_20;
      }
      goto LABEL_54;
    }
LABEL_24:
    if (*(void *)(v2 + 240))
    {
      sub_1002D3F44(v2);
      uint64_t v110 = 0;
      long long __dst = 0uLL;
      uint64_t v17 = *(long long **)(v2 + 5368);
      if (*((char *)v17 + 23) < 0)
      {
        sub_10004FC84(&__dst, *(void **)v17, *((void *)v17 + 1));
      }
      else
      {
        long long v18 = *v17;
        uint64_t v110 = *((void *)v17 + 2);
        long long __dst = v18;
      }
      uint64_t v22 = *(void *)(v2 + 240);
      __p[0] = (void *)v2;
      char v23 = *(std::__shared_weak_count **)(v2 + 16);
      if (!v23 || (unint64_t v24 = *(void **)(v2 + 8), (v25 = std::__shared_weak_count::lock(v23)) == 0)) {
        sub_100088B9C();
      }
      __p[1] = v24;
      *(void *)&v103[0] = v25;
      atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v25);
      if (*(char *)(v1 + 55) < 0)
      {
        sub_10004FC84((unsigned char *)v103 + 8, *(void **)(v1 + 32), *(void *)(v1 + 40));
      }
      else
      {
        long long v26 = *(_OWORD *)(v1 + 32);
        *((void *)&v103[1] + 1) = *(void *)(v1 + 48);
        *(_OWORD *)((char *)v103 + 8) = v26;
      }
      long long v27 = *(_OWORD *)(v1 + 72);
      long long v104 = *(_OWORD *)(v1 + 56);
      long long v105 = v27;
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(&v106, *(void **)(v1 + 8), *(void *)(v1 + 16));
      }
      else
      {
        long long v28 = *(_OWORD *)v5;
        uint64_t v107 = *(void *)(v1 + 24);
        long long v106 = v28;
      }
      long long v29 = operator new(0x70uLL);
      *(_OWORD *)((char *)v29 + 8) = *(_OWORD *)__p;
      void v29[2] = *(_OWORD *)((char *)v103 + 8);
      long long v30 = v105;
      *(_OWORD *)((char *)v29 + 56) = v104;
      *(void *)long long v29 = off_1019B9C90;
      *((void *)v29 + 3) = *(void *)&v103[0];
      __p[1] = 0;
      *(void *)&v103[0] = 0;
      *((void *)v29 + 6) = *((void *)&v103[1] + 1);
      memset((char *)v103 + 8, 0, 24);
      *(_OWORD *)((char *)v29 + 72) = v30;
      long long v31 = v106;
      *((void *)v29 + 13) = v107;
      *(_OWORD *)((char *)v29 + 88) = v31;
      long long v106 = 0uLL;
      uint64_t v107 = 0;
      *((void *)&v92 + 1) = v29;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, long long *, void **))(*(void *)v22 + 96))(v22, v1 + 32, v1 + 72, v1 + 8, v1 + 56, v1 + 88, v1 + 112, &__dst, v91);
      sub_1000C752C(v91);
      if (SHIBYTE(v107) < 0) {
        operator delete((void *)v106);
      }
      if (SHIBYTE(v103[1]) < 0) {
        operator delete(*((void **)&v103[0] + 1));
      }
      if (*(void *)&v103[0]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v103[0]);
      }
      if ((SHIBYTE(v110) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      __int16 v32 = (void *)__dst;
    }
    else
    {
      uint64_t v19 = *v3;
      if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "invalid multiplexer", (uint8_t *)__p, 2u);
      }
      if (*(char *)(v1 + 31) < 0)
      {
        sub_10004FC84(&v92, *(void **)(v1 + 8), *(void *)(v1 + 16));
      }
      else
      {
        long long v21 = *(_OWORD *)v5;
        char v93 = *(std::__shared_weak_count **)(v1 + 24);
        long long v92 = v21;
      }
      char v94 = 1;
      LOBYTE(__p[0]) = 0;
      char v108 = 0;
      LOWORD(__dst) = 770;
      sub_100309F9C(v2, (uint64_t *)(v1 + 32), v20, v1 + 72, (uint64_t)v91, (uint64_t)__p, (unsigned __int8 *)&__dst);
      if (v108) {
        sub_1000C5578((uint64_t)__p);
      }
      if ((SHIBYTE(v93) & 0x80000000) == 0) {
        goto LABEL_120;
      }
      __int16 v32 = (void *)v92;
    }
LABEL_119:
    operator delete(v32);
    goto LABEL_120;
  }
  if (BYTE7(v103[0]))
  {
    uint64_t v10 = 0;
    do
    {
      int v11 = *((unsigned __int8 *)__p + v10);
      int v12 = v9[v10];
    }
    while (v11 == v12 && BYTE7(v103[0]) - 1 != v10++);
    if (v11 != v12) {
      goto LABEL_24;
    }
  }
  if ((v8 & 0x80) == 0)
  {
LABEL_20:
    long long v14 = *(_OWORD *)v5;
    uint64_t v75 = *(void *)(v1 + 24);
    *(_OWORD *)uint64_t v74 = v14;
    goto LABEL_55;
  }
LABEL_54:
  sub_10004FC84(v74, *(void **)(v1 + 8), *(void *)(v1 + 16));
LABEL_55:
  uint64_t v33 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v34 = v74;
    if (v75 < 0) {
      __int16 v34 = (void **)v74[0];
    }
    LODWORD(__p[0]) = 136315138;
    *(void **)((char *)__p + 4) = v34;
    _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I get transfer token from self device. iccid:%s", (uint8_t *)__p, 0xCu);
  }
  char v93 = 0;
  *(_OWORD *)char v91 = 0u;
  long long v92 = 0u;
  if (SHIBYTE(v75) < 0)
  {
    sub_10004FC84(v91, v74[0], (unint64_t)v74[1]);
  }
  else
  {
    *(_OWORD *)char v91 = *(_OWORD *)v74;
    *(void *)&long long v92 = v75;
  }
  uint64_t v35 = *(std::__shared_weak_count **)(v2 + 392);
  *((void *)&v92 + 1) = *(void *)(v2 + 384);
  char v93 = v35;
  if (v35) {
    atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (((*(uint64_t (**)(void, void **))(**(void **)(v2 + 304) + 368))(*(void *)(v2 + 304), v74) & 1) == 0)
  {
    long long v52 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      char v55 = v74;
      if (v75 < 0) {
        char v55 = (void **)v74[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v55;
      _os_log_error_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_ERROR, "transfer plan (source). Iccid: [%s] is not present", (uint8_t *)__p, 0xCu);
    }
    LOBYTE(__p[0]) = 0;
    char v108 = 0;
    if (!*((void *)&v92 + 1)) {
      goto LABEL_113;
    }
LABEL_108:
    long long __dst = 0uLL;
    uint64_t v110 = 0;
    uint64_t v99 = 0;
    uint64_t v100 = 0;
    LOWORD(v96[0]) = 257;
    (*(void (**)(void))(**((void **)&v92 + 1) + 256))();
    LOBYTE(v96[0]) = 0;
    goto LABEL_109;
  }
  if (*(unsigned char *)(v2 + 2289) != 1 || *(unsigned char *)(v2 + 2592) != 1)
  {
    uint64_t v53 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      std::string v56 = v74;
      if (v75 < 0) {
        std::string v56 = (void **)v74[0];
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = v56;
      _os_log_error_impl((void *)&_mh_execute_header, v53, OS_LOG_TYPE_ERROR, "no internet connection. abort transfer. iccid : [%s]", (uint8_t *)__p, 0xCu);
    }
    LOBYTE(__p[0]) = 0;
    char v108 = 0;
    if (!*((void *)&v92 + 1)) {
      goto LABEL_113;
    }
    goto LABEL_108;
  }
  uint64_t v36 = *(void *)(v2 + 400);
  if (v36) {
    goto LABEL_98;
  }
  uint64_t v37 = *(void *)(v2 + 320);
  char v38 = *(NSObject **)(v2 + 24);
  dispatch_object_t object = v38;
  if (v38) {
    dispatch_retain(v38);
  }
  long long v39 = *(std::__shared_weak_count **)(v2 + 16);
  if (!v39 || (v40 = *(void *)(v2 + 8), (long long v41 = std::__shared_weak_count::lock(v39)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v42 = v40 + 96;
  if (!v40) {
    uint64_t v42 = 0;
  }
  uint64_t v88 = v42;
  char v89 = v41;
  char v43 = *(std::__shared_weak_count **)(v2 + 424);
  uint64_t v86 = *(void *)(v2 + 416);
  uint8_t v87 = v43;
  if (v43) {
    atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v44 = *(std::__shared_weak_count **)(v2 + 520);
  uint64_t v84 = *(void *)(v2 + 512);
  long long v85 = v44;
  if (v44) {
    atomic_fetch_add_explicit(&v44->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, dispatch_object_t *, uint64_t *, uint64_t *, uint64_t *))(*(void *)v37 + 424))(__p, v37, 1, &object, &v88, &v86, &v84);
  long long v45 = *(_OWORD *)__p;
  __p[0] = 0;
  __p[1] = 0;
  long long v46 = *(std::__shared_weak_count **)(v2 + 408);
  *(_OWORD *)(v2 + 400) = v45;
  if (v46)
  {
    sub_10004D2C8(v46);
    if (__p[1]) {
      sub_10004D2C8((std::__shared_weak_count *)__p[1]);
    }
  }
  if (v85) {
    sub_10004D2C8(v85);
  }
  if (v87) {
    sub_10004D2C8(v87);
  }
  if (v89) {
    sub_10004D2C8(v89);
  }
  if (object) {
    dispatch_release(object);
  }
  uint64_t v47 = *(void *)(v2 + 400);
  if (!v47)
  {
    uint64_t v70 = *v3;
    if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_ERROR, "cannot create source transfer auth controller", (uint8_t *)__p, 2u);
    }
    LOBYTE(__p[0]) = 0;
    char v108 = 0;
    if (!*((void *)&v92 + 1)) {
      goto LABEL_113;
    }
    goto LABEL_108;
  }
  __p[1] = 0;
  *(void *)&v103[0] = 0;
  __p[0] = &__p[1];
  if (*(unsigned char *)(v2 + 2664)) {
    uint64_t v48 = (void **)(v2 + 2640);
  }
  else {
    uint64_t v48 = __p;
  }
  int v49 = *(_DWORD *)(v2 + 2632);
  sub_1002DD40C((uint64_t)&__dst, (void *)(v2 + 1616));
  uint64_t v99 = 0;
  uint64_t v100 = 0;
  uint64_t v101 = 0;
  uint64_t v50 = *(std::__shared_weak_count **)(v2 + 5376);
  uint64_t v82 = *(void *)(v2 + 5368);
  long long v83 = v50;
  if (v50) {
    atomic_fetch_add_explicit(&v50->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, uint64_t, BOOL, uint64_t, uint64_t, void **, uint64_t, long long *, uint64_t *, uint64_t *))(*(void *)v47 + 16))(v47, v2 + 2568, v4, v49 == 1, v2 + 2320, v2 + 2344, v48, v2 + 2488, &__dst, &v99, &v82);
  if (v83) {
    sub_10004D2C8(v83);
  }
  v96[0] = (Registry *)&v99;
  sub_10030AFC8((void ***)v96);
  sub_10005CD2C((uint64_t)&__dst, *((char **)&__dst + 1));
  sub_10023A670((uint64_t)__p, (void *)__p[1]);
  uint64_t v36 = *(void *)(v2 + 400);
LABEL_98:
  if (!(*(unsigned int (**)(uint64_t))(*(void *)v36 + 160))(v36))
  {
    memset(v103, 0, sizeof(v103));
    *(_OWORD *)long long __p = 0u;
    if (SHIBYTE(v75) < 0)
    {
      sub_10004FC84(v103, v74[0], (unint64_t)v74[1]);
    }
    else
    {
      v103[0] = *(_OWORD *)v74;
      *(void *)&v103[1] = v75;
    }
    BYTE8(v103[1]) = 1;
    long long v98 = 0uLL;
    (*(void (**)(long long *__return_ptr))(**(void **)(v2 + 304) + 352))(&__dst);
    long long v98 = __dst;
    long long __dst = 0uLL;
    uint64_t v110 = 0;
    (***(void (****)(Registry **__return_ptr))(v2 + 320))(v96);
    ServiceMap = (std::mutex *)Registry::getServiceMap(v96[0]);
    std::string v58 = ServiceMap;
    if (v59 < 0)
    {
      std::string v60 = (unsigned __int8 *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v61 = 5381;
      do
      {
        uint64_t v59 = v61;
        unsigned int v62 = *v60++;
        uint64_t v61 = (33 * v61) ^ v62;
      }
      while (v62);
    }
    std::mutex::lock(ServiceMap);
    v80[0] = (void *)v59;
    std::string v63 = sub_10004D37C(&v58[1].__m_.__sig, (unint64_t *)v80);
    if (v63)
    {
      uint64_t v65 = v63[3];
      long long v64 = (std::__shared_weak_count *)v63[4];
      if (v64)
      {
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v58);
        atomic_fetch_add_explicit(&v64->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v64);
        char v66 = 0;
LABEL_138:
        if (v96[1]) {
          sub_10004D2C8((std::__shared_weak_count *)v96[1]);
        }
        if (v65)
        {
          (*(void (**)(Registry **__return_ptr, uint64_t))(*(void *)v65 + 248))(v96, v65);
          if (SHIBYTE(v110) < 0) {
            operator delete((void *)__dst);
          }
          long long __dst = *(_OWORD *)v96;
          uint64_t v110 = v97;
        }
        if ((v66 & 1) == 0) {
          sub_10004D2C8(v64);
        }
        sub_1002D3F44(v2);
        v96[1] = 0;
        uint64_t v97 = 0;
        v96[0] = 0;
        long long v67 = *(long long **)(v2 + 5368);
        if (*((char *)v67 + 23) < 0)
        {
          sub_10004FC84(v96, *(void **)v67, *((void *)v67 + 1));
        }
        else
        {
          long long v68 = *v67;
          uint64_t v97 = *((void *)v67 + 2);
          *(_OWORD *)long long v96 = v68;
        }
        uint64_t v69 = *(void *)(v2 + 400);
        v80[0] = 0;
        v80[1] = 0;
        uint64_t v81 = 0;
        v95[0] = 0;
        v95[1] = 0;
        sub_1003088DC((uint64_t)v78, v2, (uint64_t)v103);
        v76[0] = 0;
        v76[1] = 0;
        uint64_t v77 = 0;
        LOBYTE(v71) = 1;
        (*(void (**)(uint64_t, void **, void *, void **, void **, long long *, void **, long long *, Registry **, int))(*(void *)v69 + 288))(v69, v80, v95, __p, v78, &v98, v76, &__dst, v96, v71);
        if (SHIBYTE(v77) < 0) {
          operator delete(v76[0]);
        }
        if (v79 < 0) {
          operator delete(v78[0]);
        }
        if (SHIBYTE(v81) < 0) {
          operator delete(v80[0]);
        }
        if (SHIBYTE(v97) < 0) {
          operator delete(v96[0]);
        }
        if (SHIBYTE(v110) < 0) {
          operator delete((void *)__dst);
        }
        if (SBYTE7(v103[1]) < 0) {
          operator delete(*(void **)&v103[0]);
        }
        goto LABEL_113;
      }
    }
    else
    {
      uint64_t v65 = 0;
    }
    std::mutex::unlock(v58);
    long long v64 = 0;
    char v66 = 1;
    goto LABEL_138;
  }
  char v51 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p[0]) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "transfer attempt ongoing on source", (uint8_t *)__p, 2u);
  }
  LOBYTE(__p[0]) = 0;
  char v108 = 0;
  if (*((void *)&v92 + 1))
  {
    long long __dst = 0uLL;
    uint64_t v110 = 0;
    v96[0] = 0;
    v96[1] = 0;
    LOWORD(v80[0]) = 257;
    (*(void (**)(void))(**((void **)&v92 + 1) + 256))();
    LOBYTE(v80[0]) = 0;
LABEL_109:
    if (SHIBYTE(v110) < 0) {
      operator delete((void *)__dst);
    }
    if (v108) {
      sub_1000C5578((uint64_t)__p);
    }
  }
LABEL_113:
  if (v93) {
    sub_10004D2C8(v93);
  }
  if (SBYTE7(v92) < 0) {
    operator delete(v91[0]);
  }
  if (SHIBYTE(v75) < 0)
  {
    __int16 v32 = v74[0];
    goto LABEL_119;
  }
LABEL_120:
  sub_10033B948(&v73);
  return sub_100046B58((uint64_t *)&v72);
}

void sub_10033B6F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,dispatch_object_t object,char a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,void *a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,char a58)
{
  LOBYTE(a48) = 0;
  if (*(char *)(v58 - 89) < 0) {
    operator delete(*(void **)(v58 - 112));
  }
  if (LOBYTE(STACK[0x270])) {
    sub_1000C5578((uint64_t)&a58);
  }
  sub_1002B1A40((uint64_t)&a40);
  if (a20 < 0) {
    operator delete(__p);
  }
  sub_10033B948(&a14);
  sub_100046B58(&a13);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033B948(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 135) < 0) {
      operator delete(*(void **)(v1 + 112));
    }
    if (*(char *)(v1 + 111) < 0) {
      operator delete(*(void **)(v1 + 88));
    }
    if (*(char *)(v1 + 55) < 0) {
      operator delete(*(void **)(v1 + 32));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_10033B9D0(uint64_t a1)
{
  *(void *)a1 = off_1019B9C90;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10033BA3C(uint64_t a1)
{
  *(void *)a1 = off_1019B9C90;
  if (*(char *)(a1 + 111) < 0) {
    operator delete(*(void **)(a1 + 88));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete();
}

void *sub_10033BAC8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x70uLL);
  void *v2 = off_1019B9C90;
  sub_10033BDE4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033BB1C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033BB30(uint64_t a1, void *a2)
{
  *a2 = off_1019B9C90;
  return sub_10033BDE4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10033BB5C(uint64_t a1)
{
}

void sub_10033BB64(void *a1)
{
  sub_10033BEC8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10033BBA0(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if ((v3 - 1) >= 2) {
    unsigned __int8 v4 = 0;
  }
  else {
    unsigned __int8 v4 = a2[1];
  }
  if ((v3 - 1) >= 2) {
    int v5 = 0;
  }
  else {
    int v5 = *a2;
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 24);
  if (v6)
  {
    uint64_t v7 = *(void *)(a1 + 8);
    int v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      std::string v9 = v8;
      if (*(void *)(a1 + 16))
      {
        uint64_t v10 = *(NSObject **)(v7 + 40);
        BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
        if (v5 != 1 || v4 == 0)
        {
          if (v11)
          {
            *(_WORD *)unsigned long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I cannot reach source device", buf, 2u);
          }
          if (*(char *)(a1 + 111) < 0)
          {
            sub_10004FC84(&v18, *(void **)(a1 + 88), *(void *)(a1 + 96));
          }
          else
          {
            long long v18 = *(_OWORD *)(a1 + 88);
            uint64_t v19 = *(void *)(a1 + 104);
          }
          char v20 = 1;
          buf[0] = 0;
          char v16 = 0;
          __int16 v14 = 0;
          if ((v5 - 1) <= 1)
          {
            LOBYTE(v14) = v5;
            HIBYTE(v14) = v4;
          }
          sub_100309F9C(v7, (uint64_t *)(a1 + 32), v12, a1 + 72, (uint64_t)v17, (uint64_t)buf, (unsigned __int8 *)&v14);
          if (v16) {
            sub_1000C5578((uint64_t)buf);
          }
          if (SHIBYTE(v19) < 0) {
            operator delete((void *)v18);
          }
        }
        else if (v11)
        {
          *(_WORD *)unsigned long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I transfer consent request received on source", buf, 2u);
        }
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_10033BD5C(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033BD98(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033BDD8()
{
}

uint64_t sub_10033BDE4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 24), *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 24);
    *(void *)(a1 + 40) = *(void *)(a2 + 40);
    *(_OWORD *)(a1 + 24) = v5;
  }
  long long v6 = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 48) = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 64) = v6;
  uint64_t v7 = (unsigned char *)(a1 + 80);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10004FC84(v7, *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)uint64_t v7 = v8;
  }
  return a1;
}

void sub_10033BE98(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 16);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033BEC8(uint64_t a1)
{
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t *sub_10033BF2C(unsigned __int8 **a1)
{
  uint64_t v1 = *a1;
  uint8_t v13 = a1;
  __int16 v14 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 240);
  if (v3)
  {
    uint64_t v4 = (std::__shared_weak_count *)v2[2];
    if (!v4 || (v5 = v1[88], v6 = v2[1], (uint64_t v7 = std::__shared_weak_count::lock(v4)) == 0)) {
      sub_100088B9C();
    }
    long long v8 = v7;
    atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v7);
    std::string v9 = operator new(0x20uLL);
    *std::string v9 = off_1019B9D20;
    v9[1] = v2;
    _DWORD v9[2] = v6;
    void v9[3] = v8;
    unint64_t v24 = v9;
    (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, uint64_t, uint8_t *))(*(void *)v3 + 104))(v3, v1 + 8, v1 + 32, v1 + 48, v1 + 72, v5, buf);
    sub_1000C752C(buf);
    uint64_t v10 = v2[48];
    if (v10)
    {
      long long v21 = 0u;
      long long v22 = 0u;
      long long v19 = 0u;
      long long v20 = 0u;
      long long v17 = 0u;
      long long v18 = 0u;
      memset(v16, 0, sizeof(v16));
      LOWORD(v17) = 259;
      sub_10030DA1C((char *)buf, v16);
      char v25 = 1;
      __int16 v15 = 257;
      (*(void (**)(uint64_t, unsigned __int8 *, unsigned __int8 *, unsigned __int8 *, uint8_t *, __int16 *))(*(void *)v10 + 256))(v10, v1 + 8, v1 + 32, v1 + 48, buf, &v15);
      LOBYTE(v15) = 0;
      if (v25) {
        sub_1000C5578((uint64_t)buf);
      }
      sub_1000C5578((uint64_t)v16);
    }
  }
  else
  {
    BOOL v11 = v2[5];
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)unsigned long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "invalid multiplexer", buf, 2u);
    }
  }
  sub_10033C1D8((uint64_t *)&v14);
  return sub_100046B58((uint64_t *)&v13);
}

void sub_10033C170(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,char a48)
{
  a14 = 0;
  if (LOBYTE(STACK[0x220])) {
    sub_1000C5578((uint64_t)&a48);
  }
  sub_1000C5578((uint64_t)&a16);
  sub_10033C1D8(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033C1D8(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 71) < 0) {
      operator delete(*(void **)(v1 + 48));
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void *sub_10033C240(void *a1)
{
  *a1 = off_1019B9D20;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10033C28C(void *a1)
{
  *a1 = off_1019B9D20;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_10033C2F8(uint64_t a1)
{
  BOOL result = (char *)operator new(0x20uLL);
  *(void *)BOOL result = off_1019B9D20;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_10033C35C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_1019B9D20;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_10033C39C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_10033C3AC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_10033C3EC(void *a1, unsigned __int8 *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a1[3];
  if (v3)
  {
    int v4 = *a2;
    int v5 = a2[1];
    uint64_t v6 = a1[1];
    uint64_t v7 = std::__shared_weak_count::lock(v3);
    if (v7)
    {
      long long v8 = v7;
      if (a1[2] && (v4 != 1 || !v5))
      {
        std::string v9 = *(NSObject **)(v6 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)uint64_t v10 = 0;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I cannot reach source device to cancel transfer.", v10, 2u);
        }
      }
      sub_10004D2C8(v8);
    }
  }
}

uint64_t sub_10033C49C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033C4DC()
{
}

uint64_t sub_10033C4E8(uint64_t a1)
{
  *(void *)a1 = off_1019B9DA0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10033C558(uint64_t a1)
{
  *(void *)a1 = off_1019B9DA0;
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10033C5E8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x58uLL);
  void *v2 = off_1019B9DA0;
  sub_10033C8C0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033C63C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033C650(uint64_t a1, void *a2)
{
  *a2 = off_1019B9DA0;
  return sub_10033C8C0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10033C67C(uint64_t a1)
{
}

void sub_10033C684(void *a1)
{
  sub_1001F6FB4((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10033C6C0(uint64_t a1, unsigned __int8 *a2)
{
  int v3 = *a2;
  if ((v3 - 1) >= 2)
  {
    uint64_t v5 = *(void *)(a1 + 8);
  }
  else
  {
    int v4 = a2[1];
    uint64_t v5 = *(void *)(a1 + 8);
    if (v3 == 1 && v4 != 0)
    {
      long long buf = 0uLL;
      uint64_t v17 = 0;
      sub_100CDB988((void *)(a1 + 64), &buf);
      uint64_t v7 = *(void *)(v5 + 384);
      if (v7)
      {
        long long __p = 0;
        __int16 v14 = 0;
        uint64_t v15 = 0;
        v12[0] = 1;
        v12[1] = v4;
        (*(void (**)(uint64_t, uint64_t, uint64_t, long long *, void **, void, unsigned char *))(*(void *)v7 + 272))(v7, a1 + 16, a1 + 40, &buf, &__p, 0, v12);
        v12[0] = 0;
        if (__p)
        {
          __int16 v14 = __p;
          operator delete(__p);
        }
      }
      if (SHIBYTE(v17) < 0) {
        operator delete((void *)buf);
      }
      return;
    }
  }
  long long v8 = *(NSObject **)(v5 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
  {
    uint64_t v11 = *(void *)(a1 + 64);
    uint64_t v10 = a1 + 64;
    uint64_t v9 = v11;
    if (*(char *)(v10 + 23) >= 0) {
      uint64_t v9 = v10;
    }
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = v9;
    _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "cannot reach source device for generic transfer request : %s", (uint8_t *)&buf, 0xCu);
  }
}

void sub_10033C83C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, int a9, __int16 a10, char a11, void *__p, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_10033C874(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033C8B4()
{
}

uint64_t sub_10033C8C0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  uint64_t v6 = (unsigned char *)(a1 + 56);
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84(v6, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)uint64_t v6 = v7;
  }
  return a1;
}

void sub_10033C984(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 31) < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_10033C9B8(unsigned char **a1)
{
  uint64_t v1 = *a1;
  long long v4 = a1;
  long long v5 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 304);
  if (v1[8])
  {
    (*(void (**)(uint64_t, unsigned char *, unsigned char *))(*(void *)v2 + 192))(v2, v1 + 16, v1 + 16);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v9 = 0;
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v7 = 0;
    (*(void (**)(uint64_t, void **, void **))(*(void *)v2 + 192))(v2, v8, __p);
    if (SHIBYTE(v7) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v9) < 0) {
      operator delete(v8[0]);
    }
  }
  sub_10033CAD4((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_10033CA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  sub_10033CAD4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033CAD4(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_10033CB2C(unsigned char **a1)
{
  uint64_t v1 = *a1;
  uint64_t v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void *)(*(void *)v1 + 336);
  uint64_t v8 = *(void *)v1;
  char v9 = v1[8];
  sub_10031ECD8((uint64_t)v10, (uint64_t)(v1 + 16));
  uint64_t v12 = 0;
  int v3 = operator new(0x38uLL);
  uint64_t v4 = v8;
  void *v3 = off_1019B9E20;
  v3[1] = v4;
  *((unsigned char *)v3 + 16) = v9;
  sub_10032CA08((uint64_t)(v3 + 3), (uint64_t)v10);
  uint64_t v12 = v3;
  (*(void (**)(uint64_t, uint64_t, void, void *))(*(void *)v2 + 72))(v2, 1, 0, v11);
  sub_10032493C(v11);
  sub_100313668(v10);
  sub_1003311D0((uint64_t *)&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10033CC50(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  uint64_t v8 = va_arg(va2, void);
  uint64_t v9 = va_arg(va2, void);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v11 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  sub_10032493C((uint64_t *)va2);
  sub_100313668(v2);
  sub_1003311D0((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void *sub_10033CC8C(void *a1)
{
  *a1 = off_1019B9E20;
  sub_100313668(a1 + 3);
  return a1;
}

void sub_10033CCD0(void *a1)
{
  *a1 = off_1019B9E20;
  sub_100313668(a1 + 3);

  operator delete();
}

void *sub_10033CD34(uint64_t a1)
{
  uint64_t v2 = operator new(0x38uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019B9E20;
  v2[1] = v3;
  *((unsigned char *)v2 + 16) = *(unsigned char *)(a1 + 16);
  sub_10031ECD8((uint64_t)(v2 + 3), a1 + 24);
  return v2;
}

void sub_10033CD98(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033CDAC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019B9E20;
  uint64_t v2 = *(void *)(a1 + 8);
  *(unsigned char *)(a2 + 16) = *(unsigned char *)(a1 + 16);
  *(void *)(a2 + 8) = v2;
  return sub_10031ECD8(a2 + 24, a1 + 24);
}

void *sub_10033CDE8(uint64_t a1)
{
  return sub_100313668((void *)(a1 + 24));
}

void sub_10033CDF0(void *a1)
{
  sub_100313668(a1 + 3);

  operator delete(a1);
}

void sub_10033CE2C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  uint64_t v5 = *(void *)(v3 + 416);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 424);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = 0;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  sub_10030C19C(&v16, *a2, a2[1], 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 3));
  sub_1002FF3B0(&v19, v5, v16, v17);
  v23[0] = (void **)&v16;
  sub_1000C63B8(v23);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v13 = 0;
  __int16 v14 = 0;
  unint64_t v15 = 0;
  uint64_t v6 = v20;
  if (v19 == v20)
  {
    if (*(void *)(a1 + 48)) {
      goto LABEL_24;
    }
LABEL_22:
    char v12 = *(unsigned char *)(a1 + 16);
    sub_10031ECD8((uint64_t)v23, a1 + 24);
    sub_1002E7D24(v3, (uint64_t *)&v13, v12, (uint64_t)v23);
  }
  uint64_t v7 = 0;
  uint64_t v8 = v19 + 8;
  do
  {
    uint64_t v9 = v8 - 8;
    if (*(unsigned char *)(v8 - 8)) {
      BOOL v10 = *(unsigned char *)(v8 + 121) == 0;
    }
    else {
      BOOL v10 = 0;
    }
    if (v10)
    {
      if ((unint64_t)v7 >= v15)
      {
        uint64_t v7 = (char *)sub_10033D0C4((uint64_t *)&v13, (long long *)v8);
      }
      else
      {
        sub_10030C34C(v7, (long long *)v8);
        v7 += 312;
      }
      __int16 v14 = v7;
    }
    v8 += 320;
  }
  while (v9 + 320 != v6);
  if (v13 != (void **)v7 || *(void *)(a1 + 48) == 0) {
    goto LABEL_22;
  }
LABEL_24:
  sub_10024924C(a1 + 24, 42);
  long long v22 = &v13;
  sub_1000C63B8((void ***)&v22);
  uint64_t v13 = (void **)&v19;
  sub_10030F8E0(&v13);
}

void sub_10033D000(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void **);
  uint64_t v5 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void);
  uint64_t v7 = va_arg(va1, void);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v9 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v10 = va_arg(va2, void);
  uint64_t v12 = va_arg(va2, void);
  uint64_t v13 = va_arg(va2, void);
  va_copy(va3, va2);
  __int16 v14 = va_arg(va3, void **);
  sub_100313668((uint64_t *)va3);
  va_copy((va_list)v14, va);
  sub_1000C63B8((void ***)va2);
  va_copy((va_list)v3, va1);
  sub_10030F8E0((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10033D078(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033D0B8()
{
}

uint64_t sub_10033D0C4(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6F96F96F96F96F97 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0xD20D20D20D20D2) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6F96F96F96F96F97 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x69069069069069) {
    unint64_t v9 = 0xD20D20D20D20D2;
  }
  else {
    unint64_t v9 = v5;
  }
  uint64_t v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_10030C27C(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  __int16 v14 = &v10[312 * v4];
  uint64_t v16 = &v10[312 * v9];
  sub_10030C34C(v14, a2);
  unint64_t v15 = v14 + 312;
  sub_10030F708(a1, &v13);
  uint64_t v11 = a1[1];
  sub_10030F890((uint64_t)&v13);
  return v11;
}

void sub_10033D1D0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030F890((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_10033D1E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t sub_10033D27C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_10033D2FC(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v4 = a1;
  unint64_t v5 = v1;
  uint64_t v2 = *(void *)(*v1 + 336);
  memset(v10, 0, sizeof(v10));
  sub_10030B4A4(v10, v1[1], v1[2], (v1[2] - v1[1]) >> 7);
  sub_100058DB0(v8, "");
  sub_100058DB0(__p, "");
  sub_10033D1E4((uint64_t)v11, (uint64_t)(v1 + 4));
  (*(void (**)(uint64_t, void *, void **, void **, void *))(*(void *)v2 + 112))(v2, v10, v8, __p, v11);
  sub_10030DD28(v11);
  if (v7 < 0) {
    operator delete(__p[0]);
  }
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  v8[0] = v10;
  sub_10030B640((void ***)v8);
  sub_10033D498((uint64_t *)&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_10033D424(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22,char a23)
{
  sub_10030DD28((void *)(v23 - 56));
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  a17 = &a23;
  sub_10030B640((void ***)&a17);
  sub_10033D498(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033D498(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    sub_10030DD28((void *)(v1 + 32));
    uint64_t v2 = (void **)(v1 + 8);
    sub_10030B640(&v2);
    operator delete();
  }
  return result;
}

void sub_10033D500(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_1002EB8F0(**a1);
}

uint64_t sub_10033D558(uint64_t a1)
{
  *(void *)a1 = off_1019B9EA0;
  sub_1003135E4((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10033D5AC(uint64_t a1)
{
  *(void *)a1 = off_1019B9EA0;
  sub_1003135E4((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10033D620(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_1019B9EA0;
  sub_10033D84C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033D674(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033D688(uint64_t a1, void *a2)
{
  *a2 = off_1019B9EA0;
  return sub_10033D84C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10033D6B4(uint64_t a1)
{
}

void sub_10033D6BC(void *a1)
{
  sub_10033D8DC((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_10033D6F8(uint64_t a1, char *a2)
{
  char v3 = *a2;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = a1 + 16;
    if (*(char *)(a1 + 39) < 0) {
      uint64_t v5 = *(void *)(a1 + 16);
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I convert physical to eSIM for pending transfer plan (%s)", buf, 0xCu);
  }
  char v7 = 0;
  *(void *)long long buf = 0;
  sub_1002E1174(a1 + 40, 0, (uint64_t)buf, (uint64_t)&v7, v3);
  sub_100057D78(&v7);
  return sub_1000558F4((const void **)buf);
}

void sub_10033D7E4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  char v3 = va_arg(va1, const void *);
  sub_100057D78((const void **)va);
  sub_1000558F4((const void **)va1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033D800(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033D840()
{
}

uint64_t sub_10033D84C(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_1003240C8(a1 + 32, a2 + 32);
  return a1;
}

void sub_10033D8C0(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033D8DC(uint64_t a1)
{
  sub_1003135E4((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

uint64_t sub_10033D92C(uint64_t a1)
{
  *(void *)a1 = off_1019B9F20;
  sub_1003135E4((void *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_10033D9A0(uint64_t a1)
{
  *(void *)a1 = off_1019B9F20;
  sub_1003135E4((void *)(a1 + 88));
  if (*(char *)(a1 + 87) < 0) {
    operator delete(*(void **)(a1 + 64));
  }
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_10033DA34(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x78uLL);
  void *v2 = off_1019B9F20;
  sub_10033DDC0((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033DA88(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033DA9C(uint64_t a1, void *a2)
{
  *a2 = off_1019B9F20;
  return sub_10033DDC0((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10033DAC8(uint64_t a1)
{
}

void sub_10033DAD0(void *a1)
{
  sub_10033DEE8((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_10033DB0C(uint64_t a1, char *a2)
{
  char v3 = *a2;
  long long v4 = *(void **)(a1 + 8);
  if (*a2)
  {
    uint64_t v5 = v4[5];
    if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "failed to bootstrap plan transfer session for pending plan transfer", buf, 2u);
    }
    char v7 = 0;
    *(void *)long long buf = 0;
    sub_1002E1174(a1 + 88, 0, (uint64_t)buf, (uint64_t)&v7, v3);
    sub_100057D78(&v7);
    return sub_1000558F4((const void **)buf);
  }
  else
  {
    *(void *)long long buf = _NSConcreteStackBlock;
    uint64_t v9 = 1174405120;
    uint64_t v10 = sub_10033DF58;
    uint64_t v11 = &unk_1019B9F80;
    uint64_t v12 = v4;
    sub_1003240C8((uint64_t)v13, a1 + 88);
    if (*(char *)(a1 + 87) < 0)
    {
      sub_10004FC84(&v14, *(void **)(a1 + 64), *(void *)(a1 + 72));
    }
    else
    {
      long long v14 = *(_OWORD *)(a1 + 64);
      uint64_t v15 = *(void *)(a1 + 80);
    }
    if (*(char *)(a1 + 63) < 0)
    {
      sub_10004FC84(&v16, *(void **)(a1 + 40), *(void *)(a1 + 48));
    }
    else
    {
      long long v16 = *(_OWORD *)(a1 + 40);
      uint64_t v17 = *(void *)(a1 + 56);
    }
    if (*(char *)(a1 + 39) < 0)
    {
      sub_10004FC84(&__p, *(void **)(a1 + 16), *(void *)(a1 + 24));
    }
    else
    {
      long long __p = *(_OWORD *)(a1 + 16);
      uint64_t v19 = *(void *)(a1 + 32);
    }
    sub_1002DFBC0(v4, 0, (uint64_t)buf);
    if (SHIBYTE(v19) < 0) {
      operator delete((void *)__p);
    }
    if (SHIBYTE(v17) < 0) {
      operator delete((void *)v16);
    }
    if (SHIBYTE(v15) < 0) {
      operator delete((void *)v14);
    }
    return (const void **)sub_1003135E4(v13);
  }
}

void sub_10033DD10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a34 < 0) {
    operator delete(__p);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  sub_1003135E4(v34);
  _Unwind_Resume(a1);
}

uint64_t sub_10033DD74(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033DDB4()
{
}

uint64_t sub_10033DDC0(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 32);
    *(void *)(a1 + 48) = *(void *)(a2 + 48);
    *(_OWORD *)(a1 + 32) = v5;
  }
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 56);
    *(void *)(a1 + 72) = *(void *)(a2 + 72);
    *(_OWORD *)(a1 + 56) = v6;
  }
  sub_1003240C8(a1 + 80, a2 + 80);
  return a1;
}

void sub_10033DE9C(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033DEE8(uint64_t a1)
{
  sub_1003135E4((void *)(a1 + 80));
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

const void **sub_10033DF58(uint64_t a1, uint64_t a2, int a3)
{
  unint64_t v4 = *(void *)(a1 + 32);
  if (a3)
  {
    char v5 = a3;
    long long v6 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to get transfer plan list for pending plan transfer", (uint8_t *)&buf, 2u);
    }
    long long v16 = 0;
    v17[0] = 0;
    sub_1002E1174(a1 + 40, 0, (uint64_t)v17, (uint64_t)&v16, v5);
    sub_100057D78(&v16);
    char v7 = (const void **)v17;
  }
  else
  {
    long long v27 = 0uLL;
    if (sub_100CCD2E8())
    {
      if (*(char *)(a1 + 119) < 0)
      {
        sub_10004FC84(&buf, *(void **)(a1 + 96), *(void *)(a1 + 104));
      }
      else
      {
        long long buf = *(_OWORD *)(a1 + 96);
        uint64_t v22 = *(void *)(a1 + 112);
      }
      long long v23 = v27;
      if (*(char *)(a1 + 143) < 0)
      {
        sub_10004FC84(&__p, *(void **)(a1 + 120), *(void *)(a1 + 128));
      }
      else
      {
        long long __p = *(_OWORD *)(a1 + 120);
        uint64_t v25 = *(void *)(a1 + 136);
      }
      uint64_t v11 = 0;
      uint64_t v12 = 0;
      uint64_t v13 = 0;
      v17[1] = &v11;
      void v17[2] = 0;
      uint64_t v11 = (char *)operator new(0x40uLL);
      uint64_t v12 = (uint64_t)v11;
      uint64_t v13 = v11 + 64;
      uint64_t v12 = sub_10030BA7C((uint64_t)&v13, (uint64_t)&buf, (uint64_t)&v26, (uint64_t)v11);
      if (SHIBYTE(v25) < 0) {
        operator delete((void *)__p);
      }
      if (SHIBYTE(v22) < 0) {
        operator delete((void *)buf);
      }
      sub_1003240C8((uint64_t)v18, a1 + 40);
      uint64_t v20 = 0;
      uint64_t v10 = operator new(0x28uLL);
      void *v10 = off_1019B9FC0;
      sub_10032B190((uint64_t)(v10 + 1), (uint64_t)v18);
      uint64_t v20 = v10;
      sub_1002E85EC(v4, (uint64_t *)&v11, (uint64_t)v19);
    }
    unint64_t v8 = *(NSObject **)(v4 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid EID", (uint8_t *)&buf, 2u);
    }
    long long v14 = 0;
    uint64_t v15 = 0;
    sub_1002E1174(a1 + 40, 0, (uint64_t)&v15, (uint64_t)&v14, 5);
    sub_100057D78(&v14);
    char v7 = (const void **)&v15;
  }
  return sub_1000558F4(v7);
}

void sub_10033E254(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, int a14, __int16 a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,char a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_10033E304(uint64_t a1, uint64_t a2)
{
  sub_1003240C8(a1 + 40, a2 + 40);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v4;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v5;
  }
  BOOL result = (unsigned char *)(a1 + 120);
  if (*(char *)(a2 + 143) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  long long v7 = *(_OWORD *)(a2 + 120);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_OWORD *)BOOL result = v7;
  return result;
}

void sub_10033E3D4(_Unwind_Exception *a1)
{
  if (*(char *)(v2 + 119) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v2 + 95) < 0) {
    operator delete(*v3);
  }
  sub_1003135E4(v1);
  _Unwind_Resume(a1);
}

void *sub_10033E418(uint64_t a1)
{
  if (*(char *)(a1 + 143) < 0) {
    operator delete(*(void **)(a1 + 120));
  }
  if (*(char *)(a1 + 119) < 0) {
    operator delete(*(void **)(a1 + 96));
  }
  if (*(char *)(a1 + 95) < 0) {
    operator delete(*(void **)(a1 + 72));
  }

  return sub_1003135E4((void *)(a1 + 40));
}

void *sub_10033E47C(void *a1)
{
  *a1 = off_1019B9FC0;
  sub_1003135E4(a1 + 1);
  return a1;
}

void sub_10033E4C0(void *a1)
{
  *a1 = off_1019B9FC0;
  sub_1003135E4(a1 + 1);

  operator delete();
}

void *sub_10033E524(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019B9FC0;
  sub_1003240C8((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033E578(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033E58C(uint64_t a1, void *a2)
{
  *a2 = off_1019B9FC0;
  return sub_1003240C8((uint64_t)(a2 + 1), a1 + 8);
}

void *sub_10033E5B8(uint64_t a1)
{
  return sub_1003135E4((void *)(a1 + 8));
}

void sub_10033E5C0(void *a1)
{
  sub_1003135E4(a1 + 1);

  operator delete(a1);
}

const void **sub_10033E5FC(uint64_t a1, unsigned __int8 *a2, const void **a3, const void **a4, char *a5)
{
  int v6 = *a2;
  long long v7 = *a3;
  *a3 = 0;
  unint64_t v8 = *a4;
  uint64_t v11 = *a4;
  uint64_t v12 = v7;
  *a4 = 0;
  char v9 = *a5;
  long long v14 = v7;
  if (v7) {
    CFRetain(v7);
  }
  uint64_t v13 = v8;
  if (v8) {
    CFRetain(v8);
  }
  sub_1002E1174(a1 + 8, v6 != 0, (uint64_t)&v14, (uint64_t)&v13, v9);
  sub_100057D78(&v13);
  sub_1000558F4(&v14);
  sub_100057D78(&v11);
  return sub_1000558F4(&v12);
}

void sub_10033E6A8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9, const void *a10, const void *a11, const void *a12)
{
}

uint64_t sub_10033E6D4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019BA020)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10033E714()
{
  return &off_1019BA020;
}

void sub_10033E720(uint64_t **a1)
{
  uint64_t v1 = *a1;
  char v3 = a1;
  long long v4 = v1;
  uint64_t v2 = *v1;
  long long v6 = 0uLL;
  sub_100CCD2E8();
  v5[0] = off_1019BA050;
  void v5[3] = v5;
  sub_1002E8780(v2, &v6, (uint64_t)(v1 + 55), 0, (uint64_t)v5);
}

void sub_10033E7E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v5 = va_arg(va2, void);
  sub_100313668((uint64_t *)va2);
  sub_10033E80C((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_10033E80C(uint64_t *result)
{
  uint64_t v1 = *result;
  unsigned char *result = 0;
  if (v1)
  {
    sub_10030D10C(v1 + 8);
    operator delete();
  }
  return result;
}

void sub_10033E860()
{
}

void *sub_10033E874()
{
  BOOL result = operator new(0x10uLL);
  void *result = off_1019BA050;
  return result;
}

void sub_10033E8AC(uint64_t a1, void *a2)
{
  *a2 = off_1019BA050;
}

uint64_t sub_10033E8D8(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_1019BA0B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_10033E918()
{
  return &off_1019BA0B0;
}

uint64_t *sub_10033E924(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v6 = a1;
  uint64_t v7 = v1;
  uint64_t v2 = *(void **)v1;
  if (*(unsigned char *)(v1 + 1257))
  {
    uint64_t v3 = v2[42];
    uint64_t v4 = *(unsigned __int8 *)(v1 + 1258);
    __p[0] = off_1019BA0D0;
    __p[1] = v2;
    uint64_t v9 = v4;
    uint64_t v10 = __p;
    (*(void (**)(uint64_t, uint64_t, void, void **))(*(void *)v3 + 72))(v3, 1, 0, __p);
    sub_10032493C(__p);
  }
  else
  {
    if (*(char *)(v1 + 487) < 0)
    {
      sub_10004FC84(__p, *(void **)(v1 + 464), *(void *)(v1 + 472));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(v1 + 464);
      uint64_t v9 = *(void *)(v1 + 480);
    }
    LOBYTE(v10) = 1;
    sub_1002F5F2C((uint64_t)v2, (const std::string *)(v1 + 440), v1 + 512, (long long *)__p, *(unsigned char *)(v1 + 1256), 3);
    if ((_BYTE)v10 && SHIBYTE(v9) < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10033EAB4(&v7);
  return sub_100046B58((uint64_t *)&v6);
}

void sub_10033EA68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17)
{
}

uint64_t *sub_10033EAB4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030D10C(v1 + 8);
    operator delete();
  }
  return result;
}

void sub_10033EB08()
{
}

__n128 sub_10033EB1C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_1019BA0D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_10033EB68(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_1019BA0D0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_10033EB98(uint64_t a1, uint64_t *a2)
{
  memset(v4, 0, sizeof(v4));
  sub_10030C19C(v4, *a2, a2[1], 0x6F96F96F96F96F97 * ((a2[1] - *a2) >> 3));
  uint64_t v3 = *(void *)(a1 + 8);
  LOBYTE(v5[0]) = 0;
  char v6 = 0;
  sub_1002FE1EC(v3, 0, v4, (uint64_t)v5, *(unsigned char *)(a1 + 16));
  sub_10030AEBC((uint64_t)v5);
  v5[0] = (void **)v4;
  sub_1000C63B8(v5);
}

void sub_10033EC34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10030AEBC((uint64_t)va);
  *(void *)(v6 - 40) = v5;
  sub_1000C63B8((void ***)(v6 - 40));
  _Unwind_Resume(a1);
}

uint64_t sub_10033EC54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033EC94()
{
}

uint64_t sub_10033ECA0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_10033ED38(void *a1)
{
  *a1 = off_1019BA150;
  sub_1000DBADC(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_10033ED88(void *a1)
{
  *a1 = off_1019BA150;
  sub_1000DBADC(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete();
}

void *sub_10033EDF8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_1019BA150;
  sub_10033F160((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10033EE4C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033EE60(uint64_t a1, void *a2)
{
  *a2 = off_1019BA150;
  return sub_10033F160((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10033EE8C(uint64_t a1)
{
}

void sub_10033EE94(void *a1)
{
  sub_10033F1C8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_10033EED0(void *a1, unsigned __int8 *a2, uint64_t a3)
{
  int v4 = *a2;
  *(_OWORD *)uint64_t v12 = *(_OWORD *)a3;
  uint64_t v13 = *(void *)(a3 + 16);
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  *(void *)a3 = 0;
  uint64_t v5 = a1[1];
  if (a1[7])
  {
    if (SHIBYTE(v13) < 0)
    {
      sub_10004FC84(__p, v12[0], (unint64_t)v12[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)v12;
      uint64_t v15 = v13;
    }
    sub_10033F214((uint64_t)(a1 + 4), v4 != 0);
    if (SHIBYTE(v15) < 0) {
      operator delete(__p[0]);
    }
  }
  uint64_t v6 = (std::__shared_weak_count *)a1[3];
  if (v6)
  {
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      unint64_t v8 = v7;
      if (a1[2])
      {
        uint64_t v9 = *(NSObject **)(v5 + 40);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = "failed";
          if (v4) {
            uint64_t v10 = "success";
          }
          uint64_t v11 = v12;
          if (v13 < 0) {
            uint64_t v11 = (void **)v12[0];
          }
          *(_DWORD *)long long buf = 136446466;
          uint64_t v17 = v10;
          __int16 v18 = 2080;
          uint64_t v19 = v11;
          _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I report ABC:%{public}s, groupID:%s", buf, 0x16u);
        }
      }
      sub_10004D2C8(v8);
    }
  }
  if (SHIBYTE(v13) < 0) {
    operator delete(v12[0]);
  }
}

void sub_10033F060(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  operator delete(v18);
  _Unwind_Resume(a1);
}

uint64_t sub_10033F094(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033F0D4()
{
}

uint64_t sub_10033F0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t sub_10033F160(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  sub_10033ECA0(a1 + 24, a2 + 24);
  return a1;
}

void sub_10033F1B0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_10033F1C8(uint64_t a1)
{
  sub_1000DBADC((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

uint64_t sub_10033F214(uint64_t a1, char a2)
{
  char v4 = a2;
  uint64_t v2 = *(void *)(a1 + 24);
  if (!v2) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, char *))(*(void *)v2 + 48))(v2, &v4);
}

void sub_10033F268(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  time_t v3 = time(0) / 86400;
  if (*(void *)(v2 + 1712) != v3)
  {
    *(_DWORD *)(v2 + 1708) = 0;
    *(void *)(v2 + 1712) = v3;
    (*(void (**)(void))(**(void **)(v2 + 288) + 240))(*(void *)(v2 + 288));
  }
  ++*(_DWORD *)(v2 + 1708);
  (*(void (**)(void))(**(void **)(v2 + 288) + 224))(*(void *)(v2 + 288));
  (*(void (**)(void, uint64_t *, void))(**(void **)(v2 + 432) + 192))(*(void *)(v2 + 432), v1 + 1, *(unsigned int *)(v2 + 1708));
  uint64_t v4 = *(void *)(v2 + 288);
  v5[0] = off_1019BA1D0;
  v5[1] = v2;
  void v5[3] = v5;
  (*(void (**)(uint64_t, void *))(*(void *)v4 + 256))(v4, v5);
  sub_10031CBC4(v5);
  operator delete();
}

void sub_10033F408(uint64_t a1, ...)
{
  va_start(va, a1);
  sub_10031CBC4((uint64_t *)va);
  operator delete();
}

void sub_10033F448()
{
}

void *sub_10033F45C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019BA1D0;
  result[1] = v3;
  return result;
}

uint64_t sub_10033F4A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019BA1D0;
  a2[1] = v2;
  return result;
}

void sub_10033F4D0(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_10033F5C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033F600()
{
}

void sub_10033F60C(uint64_t **a1)
{
  uint64_t v1 = **a1;
  if (*(_DWORD *)(v1 + 1708) <= *((_DWORD *)*a1 + 2)) {
    goto LABEL_46;
  }
  memset(__p, 0, sizeof(__p));
  long long v22 = 0u;
  *(_OWORD *)&v23[16] = 0u;
  long long v24 = 0u;
  long long v28 = 0u;
  long long v27 = 0u;
  uint64_t v26 = 23;
  HIBYTE(v22) = 9;
  uint64_t v21 = *(void **)"Telephony";
  LOBYTE(v22) = 121;
  v23[23] = 19;
  qmemcpy(v23, "PhoneCloudContainer", 19);
  sub_10003ECB8((std::string *)&v23[24], "CK Upload Count Exceeded", 0x18uLL);
  std::to_string(&__dst, *(_DWORD *)(v1 + 1708));
  if (v24 >= 0) {
    uint64_t v2 = &v23[24];
  }
  else {
    uint64_t v2 = *(const std::string::value_type **)&v23[24];
  }
  if (v24 >= 0) {
    std::string::size_type v3 = HIBYTE(v24);
  }
  else {
    std::string::size_type v3 = v24;
  }
  uint64_t v4 = std::string::insert(&__dst, 0, v2, v3);
  uint64_t v5 = (void *)v4->__r_.__value_.__r.__words[0];
  *(void *)long long v29 = v4->__r_.__value_.__l.__size_;
  *(void *)&v29[7] = *(std::string::size_type *)((char *)&v4->__r_.__value_.__r.__words[1] + 7);
  char v6 = HIBYTE(v4->__r_.__value_.__r.__words[2]);
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p[2]) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = v5;
  __p[1] = *(void **)v29;
  *(void **)((char *)&__p[1] + 7) = *(void **)&v29[7];
  HIBYTE(__p[2]) = v6;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
  v26 |= 3uLL;
  uint64_t v7 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = *(_DWORD *)(v1 + 1708);
    LODWORD(__dst.__r_.__value_.__l.__data_) = 67109120;
    HIDWORD(__dst.__r_.__value_.__r.__words[0]) = v8;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Report CK daily upload count exceeded: %d", (uint8_t *)&__dst, 8u);
  }
  (***(void (****)(Registry **__return_ptr))(v1 + 320))(&v19);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v19);
  uint64_t v10 = ServiceMap;
  if ((v11 & 0x8000000000000000) != 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      std::string::size_type v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  __dst.__r_.__value_.__r.__words[0] = v11;
  uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)&__dst);
  if (v15)
  {
    uint64_t v17 = v15[3];
    long long v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      goto LABEL_22;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  long long v16 = 0;
  char v18 = 1;
LABEL_22:
  sub_1000DB86C((char *)&__dst, (long long *)&v21);
  uint64_t v30 = 0;
  (*(void (**)(uint64_t, std::string *, unsigned char *))(*(void *)v17 + 16))(v17, &__dst, v29);
  sub_1000DBADC(v29);
  if (v39 < 0) {
    operator delete(v38);
  }
  if (v37 < 0) {
    operator delete(v36);
  }
  if (v35 < 0) {
    operator delete(v34);
  }
  if (v33 < 0) {
    operator delete(v32);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if (v18) {
      goto LABEL_33;
    }
  }
  else if (v18)
  {
LABEL_33:
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (SBYTE7(v28) < 0) {
      operator delete((void *)v27);
    }
    if (SHIBYTE(__p[2]) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v24) < 0) {
      operator delete(*(void **)&v23[24]);
    }
    if ((v23[23] & 0x80000000) != 0) {
      operator delete(*(void **)v23);
    }
    if (SHIBYTE(v22) < 0) {
      operator delete(v21);
    }
    *(_DWORD *)(v1 + 1708) = 0;
LABEL_46:
    operator delete();
  }
  sub_10004D2C8(v16);
  goto LABEL_33;
}

void sub_10033F9D8(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  sub_1000DBADC(&a29);
  sub_1001278A0((uint64_t)&__p);
  if ((v39 & 1) == 0) {
    sub_10004D2C8(v38);
  }
  if (a11) {
    sub_10004D2C8(a11);
  }
  sub_1001278A0((uint64_t)&a12);
  operator delete();
}

void *sub_10033FA7C(void *a1)
{
  *a1 = off_1019BA250;
  sub_100060644(a1 + 2);
  return a1;
}

void sub_10033FAC0(void *a1)
{
  *a1 = off_1019BA250;
  sub_100060644(a1 + 2);

  operator delete();
}

void *sub_10033FB24(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019BA250;
  v2[1] = v3;
  sub_1000DFC90((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_10033FB7C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_10033FB90(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019BA250;
  a2[1] = v2;
  return sub_1000DFC90((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_10033FBC0(uint64_t a1)
{
  return sub_100060644((void *)(a1 + 16));
}

void sub_10033FBC8(void *a1)
{
  sub_100060644(a1 + 2);

  operator delete(a1);
}

const void **sub_10033FC04(uint64_t a1, const __CFArray **a2, unsigned __int8 *a3, long long *a4)
{
  CFArrayRef v5 = *a2;
  *a2 = 0;
  int v6 = *a3;
  long long v27 = *a4;
  uint64_t v28 = *((void *)a4 + 2);
  CFArrayRef theArray = v5;
  *((void *)a4 + 1) = 0;
  *((void *)a4 + 2) = 0;
  *(void *)a4 = 0;
  uint64_t v7 = *(void *)(a1 + 8);
  int v8 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Attempted to get carrier setup items", buf, 2u);
  }
  if (v6)
  {
    uint64_t v9 = *(NSObject **)(v7 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Failed to get carrier setup items", buf, 2u);
    }
    goto LABEL_6;
  }
  uint64_t v12 = (long long *)(v7 + 5424);
  if (*(unsigned char *)(v7 + 5448))
  {
    if (v12 != &v27)
    {
      long long v13 = v27;
      unint64_t v14 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v27 + 1) - v27) >> 6);
      uint64_t v15 = *(void *)(v7 + 5440);
      uint64_t v16 = *(void *)(v7 + 5424);
      if (0xAAAAAAAAAAAAAAABLL * ((v15 - v16) >> 6) >= v14)
      {
        if (0xAAAAAAAAAAAAAAABLL * ((*(void *)(v7 + 5432) - v16) >> 6) >= v14)
        {
          long long v24 = sub_1003402C0((std::string *)v27, *((std::string **)&v27 + 1), *(std::string **)(v7 + 5424));
          for (uint64_t i = *(void *)(v7 + 5432); (std::string *)i != v24; uint64_t i = sub_10030A7F8(i - 192))
            ;
          *(void *)(v7 + 5432) = v24;
          goto LABEL_31;
        }
        long long v23 = (std::string *)(v27 + ((*(void *)(v7 + 5432) - v16) >> 6 << 6));
        sub_1003402C0((std::string *)v27, v23, *(std::string **)(v7 + 5424));
        uint64_t v22 = sub_10033FFDC(v7 + 5440, (uint64_t)v23, *((uint64_t *)&v13 + 1), *(void *)(v7 + 5432));
      }
      else
      {
        if (v16)
        {
          uint64_t v17 = *(void *)(v7 + 5432);
          char v18 = *(void **)(v7 + 5424);
          if (v17 != v16)
          {
            do
              uint64_t v17 = sub_10030A7F8(v17 - 192);
            while (v17 != v16);
            char v18 = *(void **)v12;
          }
          *(void *)(v7 + 5432) = v16;
          operator delete(v18);
          uint64_t v15 = 0;
          *(void *)uint64_t v12 = 0;
          *(void *)(v7 + 5432) = 0;
          *(void *)(v7 + 5440) = 0;
        }
        if (v14 > 0x155555555555555) {
          sub_10006A748();
        }
        unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * (v15 >> 6);
        uint64_t v20 = 2 * v19;
        if (2 * v19 <= v14) {
          uint64_t v20 = v14;
        }
        if (v19 >= 0xAAAAAAAAAAAAAALL) {
          unint64_t v21 = 0x155555555555555;
        }
        else {
          unint64_t v21 = v20;
        }
        sub_10033FF88((void *)(v7 + 5424), v21);
        uint64_t v22 = sub_10033FFDC(v7 + 5440, v13, *((uint64_t *)&v13 + 1), *(void *)(v7 + 5432));
      }
      *(void *)(v7 + 5432) = v22;
    }
  }
  else
  {
    *(void *)uint64_t v12 = 0;
    *(void *)(v7 + 5432) = 0;
    *(void *)(v7 + 5440) = 0;
    sub_1003403B4((void *)(v7 + 5424), v27, *((uint64_t *)&v27 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v27 + 1) - v27) >> 6));
    *(unsigned char *)(v7 + 5448) = 1;
  }
LABEL_31:
  if (theArray) {
    uint64_t v26 = sub_100083F10;
  }
  else {
    uint64_t v26 = 0;
  }
  if (v26 && CFArrayGetCount(theArray) > 0)
  {
    char v10 = 1;
    goto LABEL_7;
  }
LABEL_6:
  char v10 = 0;
LABEL_7:
  sub_1000607A8(a1 + 16, v10);
  *(void *)long long buf = &v27;
  sub_10030A774((void ***)buf);
  return sub_100044D00((const void **)&theArray);
}

void sub_10033FF00(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, void **a13)
{
  *(void *)(v14 + 5432) = v13;
  a13 = (void **)&a9;
  sub_10030A774(&a13);
  sub_100044D00(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_10033FF3C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_10033FF7C()
{
}

char *sub_10033FF88(void *a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_10006A748();
  }
  __n128 result = (char *)sub_10034036C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[192 * v4];
  return result;
}

uint64_t sub_10033FFDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100340060((char *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 192;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10034003C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 192;
    do
    {
      sub_10030A7F8(v4 + v2);
      v2 -= 192;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100340060(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__dst + 48, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v6 = a2[3];
    *((void *)__dst + 8) = *((void *)a2 + 8);
    *((_OWORD *)__dst + 3) = v6;
  }
  if (*((char *)a2 + 95) < 0)
  {
    sub_10004FC84(__dst + 72, *((void **)a2 + 9), *((void *)a2 + 10));
  }
  else
  {
    long long v7 = *(long long *)((char *)a2 + 72);
    *((void *)__dst + 11) = *((void *)a2 + 11);
    *(_OWORD *)(__dst + 72) = v7;
  }
  if (*((char *)a2 + 119) < 0)
  {
    sub_10004FC84(__dst + 96, *((void **)a2 + 12), *((void *)a2 + 13));
  }
  else
  {
    long long v8 = a2[6];
    *((void *)__dst + 14) = *((void *)a2 + 14);
    *((_OWORD *)__dst + 6) = v8;
  }
  if (*((char *)a2 + 143) < 0)
  {
    sub_10004FC84(__dst + 120, *((void **)a2 + 15), *((void *)a2 + 16));
  }
  else
  {
    long long v9 = *(long long *)((char *)a2 + 120);
    *((void *)__dst + 17) = *((void *)a2 + 17);
    *(_OWORD *)(__dst + 120) = v9;
  }
  if (*((char *)a2 + 167) < 0)
  {
    sub_10004FC84(__dst + 144, *((void **)a2 + 18), *((void *)a2 + 19));
  }
  else
  {
    long long v10 = a2[9];
    *((void *)__dst + 20) = *((void *)a2 + 20);
    *((_OWORD *)__dst + 9) = v10;
  }
  std::string::size_type v11 = __dst + 168;
  if (*((char *)a2 + 191) < 0)
  {
    sub_10004FC84(v11, *((void **)a2 + 21), *((void *)a2 + 22));
  }
  else
  {
    long long v12 = *(long long *)((char *)a2 + 168);
    *((void *)__dst + 23) = *((void *)a2 + 23);
    *(_OWORD *)std::string::size_type v11 = v12;
  }
  return __dst;
}

void sub_100340214(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 167) < 0) {
    operator delete(*v7);
  }
  if (*(char *)(v1 + 143) < 0) {
    operator delete(*v6);
  }
  if (*(char *)(v1 + 119) < 0) {
    operator delete(*v5);
  }
  if (*(char *)(v1 + 95) < 0) {
    operator delete(*v4);
  }
  if (*(char *)(v1 + 71) < 0) {
    operator delete(*v3);
  }
  if (*(char *)(v1 + 47) < 0) {
    operator delete(*v2);
  }
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

std::string *sub_1003402C0(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    long long v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      std::string::operator=(this + 2, v5 + 2);
      std::string::operator=(this + 3, v5 + 3);
      std::string::operator=(this + 4, v5 + 4);
      std::string::operator=(this + 5, v5 + 5);
      std::string::operator=(this + 6, v5 + 6);
      std::string::operator=(this + 7, v5 + 7);
      this += 8;
      v5 += 8;
    }
    while (v5 != a2);
  }
  return this;
}

void *sub_10034036C(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x155555555555556) {
    sub_10006A7CC();
  }
  return operator new(192 * a2);
}

void *sub_1003403B4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    long long v6 = result;
    sub_10033FF88(result, a4);
    __n128 result = (void *)sub_10033FFDC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10034041C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10030A774(&a9);
  _Unwind_Resume(a1);
}

void sub_100340440()
{
}

void *sub_100340454()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_1019BA2D0;
  return result;
}

void sub_10034048C(uint64_t a1, void *a2)
{
  *a2 = off_1019BA2D0;
}

const void **sub_1003404B4(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  return sub_100044D00(&v3);
}

uint64_t sub_1003404E4(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100340524()
{
}

uint64_t *sub_100340530(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v22 = a1;
  uint64_t v23 = v1;
  uint64_t v2 = *(void *)v1;
  memset(&__p, 0, sizeof(__p));
  memset(v31, 0, sizeof(v31));
  LOBYTE(v31[0]) = *(unsigned char *)(v1 + 8);
  uint64_t v3 = (long long *)(v1 + 16);
  if (*(char *)(v1 + 39) < 0)
  {
    sub_10004FC84(&v31[1], *(void **)(v1 + 16), *(void *)(v1 + 24));
  }
  else
  {
    long long v4 = *v3;
    uint64_t v31[3] = *(void **)(v1 + 32);
    *(_OWORD *)&v31[1] = v4;
  }
  long long v5 = (void **)(v1 + 40);
  if (*(char *)(v1 + 63) < 0)
  {
    sub_10004FC84(&__p, *(void **)(v1 + 40), *(void *)(v1 + 48));
  }
  else
  {
    long long v6 = *(_OWORD *)v5;
    __p.__r_.__value_.__r.__words[2] = *(void *)(v1 + 56);
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v6;
  }
  int v7 = *(unsigned __int8 *)(v2 + 1776);
  *(unsigned char *)(v2 + 1720) = v31[0];
  long long v8 = (void **)(v2 + 1728);
  if (v7)
  {
    std::string::operator=((std::string *)(v2 + 1728), (const std::string *)&v31[1]);
    std::string::operator=((std::string *)(v2 + 1752), &__p);
  }
  else
  {
    if (SHIBYTE(v31[3]) < 0)
    {
      sub_10004FC84((unsigned char *)(v2 + 1728), v31[1], (unint64_t)v31[2]);
    }
    else
    {
      *(_OWORD *)long long v8 = *(_OWORD *)&v31[1];
      *(void **)(v2 + 1744) = v31[3];
    }
    uint64_t v9 = (unsigned char *)(v2 + 1752);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
    {
      sub_10004FC84(v9, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
      *(void *)(v2 + 1768) = *((void *)&__p.__r_.__value_.__l + 2);
    }
    *(unsigned char *)(v2 + 1776) = 1;
  }
  if (*(unsigned char *)(v1 + 8) || !*(unsigned char *)(v2 + 2625) || *(unsigned char *)(v2 + 2626) || !sub_1002FE04C(v2)) {
    goto LABEL_17;
  }
  std::string::size_type v11 = *(NSObject **)(v2 + 40);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v12 = v1 + 16;
    if (*(char *)(v1 + 39) < 0) {
      uint64_t v12 = *(void *)v3;
    }
    int v13 = *(unsigned __int8 *)(v2 + 1720);
    uint64_t v14 = (void *)(v1 + 40);
    if (*(char *)(v1 + 63) < 0) {
      uint64_t v14 = *v5;
    }
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v13;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v12;
    *(_WORD *)&unsigned char buf[18] = 2080;
    *(void *)&buf[20] = v14;
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Pop up activition result alert: %d carrier: %s phone number: %s", buf, 0x1Cu);
  }
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(v2 + 160) + 64))(&v29);
  uint64_t v15 = v29;
  if (v29)
  {
    int v16 = *(unsigned __int8 *)(v2 + 1720);
    if (*(char *)(v1 + 39) < 0)
    {
      sub_10004FC84(__dst, *(void **)(v1 + 16), *(void *)(v1 + 24));
    }
    else
    {
      *(_OWORD *)std::string __dst = *v3;
      uint64_t v27 = *(void *)(v1 + 32);
    }
    if (SHIBYTE(v27) < 0)
    {
      sub_10004FC84(v34, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)__int16 v34 = *(_OWORD *)__dst;
      uint64_t v35 = v27;
    }
    uint64_t v36 = 0;
    if (SHIBYTE(v35) < 0)
    {
      sub_10004FC84(buf, v34[0], (unint64_t)v34[1]);
    }
    else
    {
      *(_OWORD *)long long buf = *(_OWORD *)v34;
      *(void *)&uint8_t buf[16] = v35;
    }
    char v37 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v17 = v36;
      uint64_t v36 = v37;
      v24[0] = v17;
      sub_1000558F4((const void **)v24);
    }
    if ((buf[23] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v28 = v36;
    uint64_t v36 = 0;
    sub_1000558F4((const void **)&v36);
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
    if (*(char *)(v1 + 63) < 0)
    {
      unint64_t v18 = *(void *)(v1 + 48);
      if (v18)
      {
        sub_10004FC84(v24, *v5, v18);
        goto LABEL_52;
      }
    }
    else if (*(unsigned char *)(v1 + 63))
    {
      *(_OWORD *)long long v24 = *(_OWORD *)v5;
      uint64_t v25 = *(void *)(v1 + 56);
LABEL_52:
      if (SHIBYTE(v25) < 0)
      {
        sub_10004FC84(v34, v24[0], (unint64_t)v24[1]);
      }
      else
      {
        *(_OWORD *)__int16 v34 = *(_OWORD *)v24;
        uint64_t v35 = v25;
      }
      char v33 = 0;
      if (SHIBYTE(v35) < 0)
      {
        sub_10004FC84(buf, v34[0], (unint64_t)v34[1]);
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)v34;
        *(void *)&uint8_t buf[16] = v35;
      }
      uint64_t v36 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v20 = v33;
        char v33 = v36;
        char v37 = v20;
        sub_1000558F4((const void **)&v37);
      }
      if ((buf[23] & 0x80000000) != 0) {
        operator delete(*(void **)buf);
      }
      char v37 = v33;
      char v33 = 0;
      sub_1000558F4((const void **)&v33);
      if (SHIBYTE(v35) < 0) {
        operator delete(v34[0]);
      }
      char v19 = 0;
      goto LABEL_66;
    }
    char v37 = 0;
    char v19 = 1;
LABEL_66:
    (*(void (**)(uint64_t, BOOL, const void **, void **))(*(void *)v15 + 72))(v15, v16 != 0, &v28, &v37);
    sub_1000558F4((const void **)&v37);
    if (v25 >= 0) {
      char v21 = 1;
    }
    else {
      char v21 = v19;
    }
    if ((v21 & 1) == 0) {
      operator delete(v24[0]);
    }
    sub_1000558F4(&v28);
    if (SHIBYTE(v27) < 0) {
      operator delete(__dst[0]);
    }
  }
  if (v30) {
    sub_10004D2C8(v30);
  }
  if (*(unsigned char *)(v2 + 1776))
  {
    if (*(char *)(v2 + 1775) < 0) {
      operator delete(*(void **)(v2 + 1752));
    }
    if (*(char *)(v2 + 1751) < 0) {
      operator delete(*v8);
    }
    *(unsigned char *)(v2 + 1776) = 0;
  }
LABEL_17:
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v31[3]) < 0) {
    operator delete(v31[1]);
  }
  sub_100340BA4(&v23);
  return sub_100046B58((uint64_t *)&v22);
}

void sub_100340A64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,const void *a24,uint64_t a25,std::__shared_weak_count *a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,void *a34,uint64_t a35,int a36,__int16 a37,char a38,char a39,const void *a40,void *__p,uint64_t a42,int a43,__int16 a44,char a45,char a46)
{
  if (a46 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_1000558F4(&a24);
  if (a23 < 0) {
    operator delete(a18);
  }
  if (a26) {
    sub_10004D2C8(a26);
  }
  if (a39 < 0) {
    operator delete(a34);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  sub_100340BA4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100340BA4(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    if (*(char *)(v1 + 63) < 0) {
      operator delete(*(void **)(v1 + 40));
    }
    if (*(char *)(v1 + 39) < 0) {
      operator delete(*(void **)(v1 + 16));
    }
    operator delete();
  }
  return result;
}

void sub_100340C0C(void *a1, void **a2)
{
  uint64_t v2 = a1 + 1;
  uint64_t v3 = (void *)a1[1];
  if (v3)
  {
    long long v6 = a1 + 1;
    do
    {
      char v7 = sub_100046FE8(v3 + 4, a2);
      if (v7 >= 0) {
        long long v8 = v3;
      }
      else {
        long long v8 = v3 + 1;
      }
      if (v7 >= 0) {
        long long v6 = v3;
      }
      uint64_t v3 = (void *)*v8;
    }
    while (*v8);
    if (v6 != v2 && (sub_100046FE8(a2, (void **)v6 + 4) & 0x80) == 0)
    {
      uint64_t v9 = (void *)v6[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        std::string::size_type v11 = v6;
        do
        {
          uint64_t v10 = (void *)v11[2];
          BOOL v12 = *v10 == (void)v11;
          std::string::size_type v11 = v10;
        }
        while (!v12);
      }
      if ((void *)*a1 == v6) {
        *a1 = v10;
      }
      int v13 = (uint64_t *)a1[1];
      --a1[2];
      sub_10005EE6C(v13, v6);
      if (*((char *)v6 + 55) < 0) {
        operator delete((void *)v6[4]);
      }
      operator delete(v6);
    }
  }
}

uint64_t *sub_100340D20(uint64_t **a1, void **a2, long long **a3)
{
  long long v6 = a1 + 1;
  long long v5 = a1[1];
  if (!v5)
  {
    long long v8 = a1 + 1;
LABEL_9:
    uint64_t v10 = *a3;
    std::string::size_type v11 = (uint64_t *)operator new(0x40uLL);
    BOOL v12 = v11 + 4;
    if (*((char *)v10 + 23) < 0)
    {
      sub_10004FC84(v12, *(void **)v10, *((void *)v10 + 1));
    }
    else
    {
      long long v13 = *v10;
      void v11[6] = *((void *)v10 + 2);
      *(_OWORD *)BOOL v12 = v13;
    }
    *((unsigned char *)v11 + 56) = 0;
    *std::string::size_type v11 = 0;
    v11[1] = 0;
    void v11[2] = (uint64_t)v8;
    void *v6 = v11;
    uint64_t v14 = (uint64_t *)**a1;
    uint64_t v15 = v11;
    if (v14)
    {
      *a1 = v14;
      uint64_t v15 = *v6;
    }
    sub_100046C90(a1[1], v15);
    a1[2] = (uint64_t *)((char *)a1[2] + 1);
    return v11;
  }
  while (1)
  {
    while (1)
    {
      long long v8 = (uint64_t **)v5;
      uint64_t v9 = v5 + 4;
      if ((sub_100046FE8(a2, (void **)v5 + 4) & 0x80) == 0) {
        break;
      }
      long long v5 = *v8;
      long long v6 = v8;
      if (!*v8) {
        goto LABEL_9;
      }
    }
    if ((sub_100046FE8(v9, a2) & 0x80) == 0) {
      break;
    }
    long long v6 = v8 + 1;
    long long v5 = v8[1];
    if (!v5) {
      goto LABEL_9;
    }
  }
  std::string::size_type v11 = *v6;
  if (!*v6) {
    goto LABEL_9;
  }
  return v11;
}

void sub_100340E34(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void sub_100340E4C()
{
}

void *sub_100340E60()
{
  __n128 result = operator new(0x10uLL);
  void *result = off_1019BA350;
  return result;
}

void sub_100340E98(uint64_t a1, void *a2)
{
  *a2 = off_1019BA350;
}

uint64_t sub_100340EC4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100340F04()
{
}

uint64_t sub_100340F10(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_100340FA8(void *a1)
{
  *a1 = off_1019BA3D0;
  sub_10030ED0C(a1 + 2);
  return a1;
}

void sub_100340FEC(void *a1)
{
  *a1 = off_1019BA3D0;
  sub_10030ED0C(a1 + 2);

  operator delete();
}

void *sub_100341050(uint64_t a1)
{
  uint64_t v2 = operator new(0x30uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *v2 = off_1019BA3D0;
  v2[1] = v3;
  sub_100340F10((uint64_t)(v2 + 2), a1 + 16);
  return v2;
}

void sub_1003410A8(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003410BC(uint64_t a1, void *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  *a2 = off_1019BA3D0;
  a2[1] = v2;
  return sub_100340F10((uint64_t)(a2 + 2), a1 + 16);
}

void *sub_1003410EC(uint64_t a1)
{
  return sub_10030ED0C((void *)(a1 + 16));
}

void sub_1003410F4(void *a1)
{
  sub_10030ED0C(a1 + 2);

  operator delete(a1);
}

void sub_100341130(uint64_t a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a2[2];
  a2[1] = 0;
  a2[2] = 0;
  a2[3] = 0;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v8 = 0;
  long long v7 = 0uLL;
  sub_1003422D4(&v7, v3, v4, 0x6DB6DB6DB6DB6DB7 * ((v4 - v3) >> 3));
  sub_100340F10((uint64_t)&v9, a1 + 16);
  long long v5 = *(std::__shared_weak_count **)(v6 + 16);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100341300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100341344(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100341384()
{
}

uint64_t sub_100341390(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = (void *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 24);
  if (v4)
  {
    if (v4 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(*(void *)*v3 + 24))(*v3, a1);
      return a1;
    }
    *(void *)(a1 + 24) = v4;
  }
  else
  {
    uint64_t v3 = (void *)(a1 + 24);
  }
  void *v3 = 0;
  return a1;
}

uint64_t *sub_100341410(void **a1)
{
  uint64_t v1 = *a1;
  __int16 v32 = a1;
  char v33 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = (os_log_t *)(*v1 + 40);
  uint64_t v4 = *v3;
  if (os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v1[3] - v1[2]) >> 3);
    *(_DWORD *)long long buf = 134217984;
    *(void *)&uint8_t buf[4] = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I fetched %ld records from cloud", buf, 0xCu);
  }
  memset(&v56, 0, sizeof(v56));
  uint64_t v53 = 0;
  unint64_t v54 = 0;
  unint64_t v55 = 0;
  long long v51 = 0uLL;
  uint64_t v52 = 0;
  uint64_t v48 = 0;
  int v49 = 0;
  unint64_t v50 = 0;
  uint64_t v6 = *(void *)(v2 + 416);
  if (v6)
  {
    (*(void (**)(uint8_t *__return_ptr))(*(void *)v6 + 72))(buf);
    sub_10005CBB4((uint64_t *)&v51);
    long long v51 = *(_OWORD *)buf;
    uint64_t v52 = v60;
    *(void *)&long long v60 = 0;
    memset(buf, 0, sizeof(buf));
    v57[0] = buf;
    sub_100047F64((void ***)v57);
  }
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  if (v7 != v8)
  {
    uint64_t v9 = (void *)(v2 + 2320);
    uint64_t v10 = v7 + 24;
    do
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      long long v81 = 0u;
      long long v78 = 0u;
      long long v79 = 0u;
      long long v76 = 0u;
      long long v77 = 0u;
      long long v74 = 0u;
      long long v75 = 0u;
      long long v72 = 0u;
      long long v73 = 0u;
      long long v70 = 0u;
      long long v71 = 0u;
      long long v68 = 0u;
      long long v69 = 0u;
      long long v66 = 0u;
      long long v67 = 0u;
      long long v64 = 0u;
      long long v65 = 0u;
      long long v62 = 0u;
      long long v63 = 0u;
      long long v60 = 0u;
      long long v61 = 0u;
      *(_OWORD *)long long buf = 0u;
      memset(v58, 0, 40);
      *(_OWORD *)std::string v57 = 0u;
      long long v41 = 0;
      uint64_t v42 = 0;
      uint64_t v43 = 0;
      memset(v47, 0, sizeof(v47));
      sub_1000302C0((char *)v47, (long long *)v51, *((long long **)&v51 + 1), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)&v51 + 1) - v51) >> 3));
      char v11 = sub_100CD7B0C(v3, (const unsigned __int8 **)v10, v9, (uint64_t *)&v41, v47, (uint64_t)buf, (uint64_t)v57);
      *(void *)&v46[0] = v47;
      sub_100047F64((void ***)v46);
      *(void *)&v46[0] = &v41;
      sub_10010DF1C((void ***)v46);
      if (v11)
      {
        *((void *)&v83 + 1) = *(void *)(v10 + 24);
        unint64_t v12 = v54;
        if (v54 >= v55)
        {
          uint64_t v13 = sub_100341B84(&v53, (uint64_t)buf);
        }
        else
        {
          sub_100341CA4(v54, (uint64_t)buf);
          uint64_t v13 = v12 + 400;
        }
        unint64_t v54 = v13;
        uint64_t v14 = v49;
        if ((unint64_t)v49 >= v50)
        {
          int v16 = (unsigned char *)sub_100341D00(&v48, (long long *)v57);
        }
        else
        {
          if (SBYTE7(v58[0]) < 0)
          {
            sub_10004FC84(v49, v57[0], (unint64_t)v57[1]);
          }
          else
          {
            long long v15 = *(_OWORD *)v57;
            *((void *)v49 + 2) = *(void *)&v58[0];
            _OWORD *v14 = v15;
          }
          long long v17 = *(_OWORD *)((char *)v58 + 8);
          *(_OWORD *)((char *)v14 + 40) = *(_OWORD *)((char *)&v58[1] + 8);
          *(_OWORD *)((char *)v14 + 24) = v17;
          int v16 = (char *)v14 + 56;
        }
        int v49 = v16;
        uint64_t v18 = *(void *)(v10 + 8);
        if (v18 != *(void *)v10)
        {
          memset(v46, 0, sizeof(v46));
          PB::Reader::Reader((PB::Reader *)v46, *(const unsigned __int8 **)v10, v18 - *(void *)v10);
          uint64_t v44 = 0;
          uint64_t v45 = 0;
          long long v41 = (void **)&off_101A17F50;
          uint64_t v42 = 0;
          uint64_t v43 = 0;
          sub_1008E296C((uint64_t)&v41, (PB::Reader *)v46);
          ctu::hex();
          char v19 = std::string::append(&v36, "\n\n", 2uLL);
          long long v20 = *(_OWORD *)&v19->__r_.__value_.__l.__data_;
          v37.__r_.__value_.__r.__words[2] = v19->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v37.__r_.__value_.__l.__data_ = v20;
          v19->__r_.__value_.__l.__size_ = 0;
          v19->__r_.__value_.__r.__words[2] = 0;
          v19->__r_.__value_.__r.__words[0] = 0;
          PB::Base::formattedText((uint64_t *)v34, (PB::Base *)&v41);
          if ((v35 & 0x80u) == 0) {
            char v21 = v34;
          }
          else {
            char v21 = (void **)v34[0];
          }
          if ((v35 & 0x80u) == 0) {
            std::string::size_type v22 = v35;
          }
          else {
            std::string::size_type v22 = (std::string::size_type)v34[1];
          }
          uint64_t v23 = std::string::append(&v37, (const std::string::value_type *)v21, v22);
          long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
          v38.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
          *(_OWORD *)&v38.__r_.__value_.__l.__data_ = v24;
          v23->__r_.__value_.__l.__size_ = 0;
          v23->__r_.__value_.__r.__words[2] = 0;
          v23->__r_.__value_.__r.__words[0] = 0;
          uint64_t v25 = std::string::append(&v38, "\n\n", 2uLL);
          long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
          int64_t v40 = v25->__r_.__value_.__r.__words[2];
          *(_OWORD *)std::string __p = v26;
          v25->__r_.__value_.__l.__size_ = 0;
          v25->__r_.__value_.__r.__words[2] = 0;
          v25->__r_.__value_.__r.__words[0] = 0;
          if (v40 >= 0) {
            uint64_t v27 = __p;
          }
          else {
            uint64_t v27 = (void **)__p[0];
          }
          if (v40 >= 0) {
            std::string::size_type v28 = HIBYTE(v40);
          }
          else {
            std::string::size_type v28 = (std::string::size_type)__p[1];
          }
          std::string::append(&v56, (const std::string::value_type *)v27, v28);
          if (SHIBYTE(v40) < 0) {
            operator delete(__p[0]);
          }
          if (SHIBYTE(v38.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v38.__r_.__value_.__l.__data_);
          }
          if ((char)v35 < 0) {
            operator delete(v34[0]);
          }
          if (SHIBYTE(v37.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v37.__r_.__value_.__l.__data_);
          }
          if (SHIBYTE(v36.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v36.__r_.__value_.__l.__data_);
          }
          sub_1008E25A0((PB::Base *)&v41);
        }
      }
      if (SBYTE7(v58[0]) < 0) {
        operator delete(v57[0]);
      }
      sub_1000C52BC((uint64_t)buf);
      uint64_t v29 = v10 + 32;
      v10 += 56;
    }
    while (v29 != v8);
  }
  sub_100058DB0(buf, "Manatee_DownloadData_");
  sub_100CD689C(v3, (uint64_t)buf, (uint64_t)&v56);
  if (SBYTE7(v60) < 0) {
    operator delete(*(void **)buf);
  }
  v57[0] = 0;
  v57[1] = 0;
  *(void *)&v58[0] = 0;
  sub_1003420CC(v57, v53, v54, 0x8F5C28F5C28F5C29 * ((uint64_t)(v54 - v53) >> 4));
  uint64_t v30 = v1[8];
  if (!v30) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, void **))(*(void *)v30 + 48))(v30, v57);
  long long v41 = v57;
  sub_1000C5238(&v41);
  long long v41 = (void **)&v48;
  sub_100342230(&v41);
  long long v41 = (void **)&v51;
  sub_100047F64(&v41);
  long long v41 = (void **)&v53;
  sub_1000C5238(&v41);
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  sub_100341B1C((uint64_t *)&v33);
  return sub_100046B58((uint64_t *)&v32);
}

void sub_100341994(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,void *a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,char a42,uint64_t a43,uint64_t a44,char a45,uint64_t a46,uint64_t a47,uint64_t a48,char a49,uint64_t a50,uint64_t a51,void *__p,uint64_t a53,int a54,__int16 a55,char a56,char a57)
{
  a30 = (uint64_t)&a42;
  sub_100342230((void ***)&a30);
  a30 = (uint64_t)&a45;
  sub_100047F64((void ***)&a30);
  a30 = (uint64_t)&a49;
  sub_1000C5238((void ***)&a30);
  if (a57 < 0) {
    operator delete(__p);
  }
  sub_100341B1C(&a12);
  sub_100046B58(&a11);
  _Unwind_Resume(a1);
}

uint64_t *sub_100341B1C(uint64_t *result)
{
  uint64_t v1 = *result;
  void *result = 0;
  if (v1)
  {
    sub_10030ED0C((void *)(v1 + 40));
    uint64_t v2 = (void **)(v1 + 16);
    sub_10034251C(&v2);
    operator delete();
  }
  return result;
}

uint64_t sub_100341B84(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = 0x8F5C28F5C28F5C29 * ((a1[1] - *a1) >> 4);
  unint64_t v5 = v4 + 1;
  if (v4 + 1 > 0xA3D70A3D70A3D7) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x8F5C28F5C28F5C29 * ((a1[2] - v3) >> 4);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x51EB851EB851EBLL) {
    unint64_t v9 = 0xA3D70A3D70A3D7;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v17 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100312BAC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v13 = v10;
  uint64_t v14 = &v10[400 * v4];
  int v16 = &v10[400 * v9];
  sub_100341CA4((uint64_t)v14, a2);
  long long v15 = v14 + 400;
  sub_100312B34(a1, &v13);
  uint64_t v11 = a1[1];
  sub_100312CE8((uint64_t)&v13);
  return v11;
}

void sub_100341C90(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100312CE8((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100341CA4(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = sub_100311D04((unsigned char *)a1, a2);
  sub_10031203C(v4 + 248, (long long *)(a2 + 248));
  *(void *)(a1 + 392) = *(void *)(a2 + 392);
  return a1;
}

void sub_100341CE4(_Unwind_Exception *exception_object)
{
  if (*(unsigned char *)(v1 + 240)) {
    sub_1000C5634(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100341D00(uint64_t *a1, long long *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = 0x6DB6DB6DB6DB6DB7 * ((a1[1] - *a1) >> 3);
  unint64_t v5 = v4 + 1;
  if ((unint64_t)(v4 + 1) > 0x492492492492492) {
    sub_10006A748();
  }
  uint64_t v7 = (uint64_t)(a1 + 2);
  unint64_t v8 = 0x6DB6DB6DB6DB6DB7 * ((a1[2] - v3) >> 3);
  if (2 * v8 > v5) {
    unint64_t v5 = 2 * v8;
  }
  if (v8 >= 0x249249249249249) {
    unint64_t v9 = 0x492492492492492;
  }
  else {
    unint64_t v9 = v5;
  }
  long long v20 = a1 + 2;
  if (v9) {
    uint64_t v10 = (char *)sub_100341ECC(v7, v9);
  }
  else {
    uint64_t v10 = 0;
  }
  uint64_t v11 = &v10[56 * v4];
  v17[0] = v10;
  v17[1] = v11;
  uint64_t v18 = v11;
  char v19 = &v10[56 * v9];
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a2, *((void *)a2 + 1));
    uint64_t v11 = v18;
  }
  else
  {
    long long v12 = *a2;
    *((void *)v11 + 2) = *((void *)a2 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  uint64_t v13 = &v10[56 * v4];
  long long v14 = *(long long *)((char *)a2 + 24);
  *(_OWORD *)(v13 + 40) = *(long long *)((char *)a2 + 40);
  *(_OWORD *)(v13 + 24) = v14;
  uint64_t v18 = v11 + 56;
  sub_100341E54(a1, v17);
  uint64_t v15 = a1[1];
  sub_10034203C((uint64_t)v17);
  return v15;
}

void sub_100341E40(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10034203C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100341E54(uint64_t *a1, void *a2)
{
  uint64_t result = sub_100341F18((uint64_t)(a1 + 2), a1[1], a1[1], *a1, *a1, a2[1], a2[1]);
  a2[1] = v5;
  uint64_t v6 = *a1;
  *a1 = v5;
  a2[1] = v6;
  uint64_t v7 = a1[1];
  a1[1] = a2[2];
  a2[2] = v7;
  uint64_t v8 = a1[2];
  a1[2] = a2[3];
  a2[3] = v8;
  *a2 = a2[1];
  return result;
}

void *sub_100341ECC(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_10006A7CC();
  }
  return operator new(56 * a2);
}

uint64_t sub_100341F18(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v7 = a7;
  *(void *)&long long v15 = a6;
  *((void *)&v15 + 1) = a7;
  long long v14 = v15;
  v13[0] = a1;
  v13[1] = &v14;
  _DWORD v13[2] = &v15;
  void v13[3] = 1;
  if (a3 != a5)
  {
    uint64_t v9 = a7;
    do
    {
      long long v10 = *(_OWORD *)(a3 - 56);
      *(void *)(v9 - 40) = *(void *)(a3 - 40);
      *(_OWORD *)(v9 - 56) = v10;
      *(void *)(a3 - 48) = 0;
      *(void *)(a3 - 40) = 0;
      *(void *)(a3 - 56) = 0;
      long long v11 = *(_OWORD *)(a3 - 16);
      *(_OWORD *)(v9 - 32) = *(_OWORD *)(a3 - 32);
      *(_OWORD *)(v9 - 16) = v11;
      v9 -= 56;
      v7 -= 56;
      a3 -= 56;
    }
    while (a3 != a5);
    *((void *)&v15 + 1) = v9;
  }
  sub_100341FBC((uint64_t)v13);
  return a6;
}

uint64_t sub_100341FBC(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100341FF4(a1);
  }
  return a1;
}

void sub_100341FF4(uint64_t a1)
{
  uint64_t v1 = *(void *)(*(void *)(a1 + 16) + 8);
  uint64_t v2 = *(void *)(*(void *)(a1 + 8) + 8);
  while (v1 != v2)
  {
    if (*(char *)(v1 + 23) < 0) {
      operator delete(*(void **)v1);
    }
    v1 += 56;
  }
}

uint64_t sub_10034203C(uint64_t a1)
{
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100342074(uint64_t a1, void **a2)
{
  uint64_t v2 = *(void ***)(a1 + 16);
  if (v2 != a2)
  {
    do
    {
      uint64_t v5 = v2 - 7;
      *(void *)(a1 + 16) = v2 - 7;
      if (*((char *)v2 - 33) < 0)
      {
        operator delete(*v5);
        uint64_t v5 = *(void ***)(a1 + 16);
      }
      uint64_t v2 = v5;
    }
    while (v5 != a2);
  }
}

void *sub_1003420CC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100342154(result, a4);
    uint64_t result = (void *)sub_1003421AC((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100342134(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1000C5238(&a9);
  _Unwind_Resume(a1);
}

char *sub_100342154(void *a1, unint64_t a2)
{
  if (a2 >= 0xA3D70A3D70A3D8) {
    sub_10006A748();
  }
  uint64_t result = (char *)sub_100312BAC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[400 * v4];
  return result;
}

uint64_t sub_1003421AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100341CA4(a4 + v7, a2 + v7);
      v7 += 400;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_10034220C(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 400;
    do
    {
      sub_1000C52BC(v4 + v2);
      v2 -= 400;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100342230(void ***a1)
{
  uint64_t v2 = *a1;
  if (*v2)
  {
    sub_100342284((uint64_t *)v2);
    uint64_t v3 = **a1;
    operator delete(v3);
  }
}

void sub_100342284(uint64_t *a1)
{
  uint64_t v2 = *a1;
  for (uint64_t i = a1[1]; i != v2; i -= 56)
  {
    if (*(char *)(i - 33) < 0) {
      operator delete(*(void **)(i - 56));
    }
  }
  a1[1] = v2;
}

void *sub_1003422D4(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_10034235C(result, a4);
    uint64_t result = (void *)sub_1003423B4((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10034233C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10034251C(&a9);
  _Unwind_Resume(a1);
}

char *sub_10034235C(void *a1, unint64_t a2)
{
  if (a2 >= 0x492492492492493) {
    sub_10006A748();
  }
  uint64_t result = (char *)sub_100341ECC((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[56 * v4];
  return result;
}

uint64_t sub_1003423B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100342438((void *)(a4 + v7), (long long *)(a2 + v7));
      v7 += 56;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100342414(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 56;
    do
    {
      sub_1003424C4(v4 + v2);
      v2 -= 56;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100342438(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    std::locale __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10005C928(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), *((void *)a2 + 4) - *((void *)a2 + 3));
  __dst[6] = *((void *)a2 + 6);
  return __dst;
}

void sub_1003424A8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_1003424C4(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 24);
  if (v2)
  {
    *(void *)(a1 + 32) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void **)a1;
    operator delete(v3);
  }
}

void sub_10034251C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 56;
        sub_1003424C4(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void *sub_1003425A0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100342624(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void *sub_1003426BC(void *a1)
{
  *a1 = off_1019BA450;
  sub_10030ED90(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_10034270C(void *a1)
{
  *a1 = off_1019BA450;
  sub_10030ED90(a1 + 4);
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_10034277C(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x40uLL);
  void *v2 = off_1019BA450;
  sub_100342A64((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003427D0(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003427E4(uint64_t a1, void *a2)
{
  *a2 = off_1019BA450;
  return sub_100342A64((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100342810(uint64_t a1)
{
}

void sub_100342818(void *a1)
{
  sub_100342ACC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100342854(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(a2 + 8);
  uint64_t v3 = v7;
  long long v8 = *(_OWORD *)(a2 + 16);
  uint64_t v6 = v8;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  uint64_t v4 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 134217984;
    *(void *)((char *)&buf + 4) = 0x8F5C28F5C28F5C29 * ((v6 - v3) >> 3);
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I fetched %ld blacklist plans from cloud", (uint8_t *)&buf, 0xCu);
  }
  long long buf = 0uLL;
  uint64_t v11 = 0;
  sub_100322898(&buf, v3, v6, 0x8F5C28F5C28F5C29 * ((v6 - v3) >> 3));
  uint64_t v5 = *(void *)(a1 + 56);
  if (!v5) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, long long *))(*(void *)v5 + 48))(v5, &buf);
  p_long long buf = (void **)&buf;
  sub_10010DF1C(&p_buf);
  *(void *)&long long buf = &v7;
  sub_10010DF1C((void ***)&buf);
}

void sub_1003429E8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_10010DF1C((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100342A18(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100342A58()
{
}

uint64_t sub_100342A64(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100342624(a1 + 24, a2 + 24);
  return a1;
}

void sub_100342AB4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100342ACC(uint64_t a1)
{
  sub_10030ED90((void *)(a1 + 24));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void sub_100342B18(uint64_t **a1)
{
  uint64_t v1 = **a1;
  uint64_t v2 = (printers *)(*a1 + 1);
  int v3 = *(unsigned __int8 *)v2;
  if (*(unsigned __int8 *)(v1 + 1784) == v3) {
    goto LABEL_29;
  }
  uint64_t v4 = (unsigned char *)(v1 + 1784);
  uint64_t v5 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = printers::asString((printers *)(v1 + 1784), v6);
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = printers::asString(v2, v7);
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I iCloud Signed changed from %s to %s", buf, 0x16u);
    int v3 = *(unsigned __int8 *)v2;
  }
  *(unsigned char *)(v1 + 1784) = v3;
  uint64_t v8 = *(void *)(v1 + 464);
  if (v8) {
    (*(void (**)(uint64_t, BOOL))(*(void *)v8 + 112))(v8, v3 != 0);
  }
  (***(void (****)(unsigned char *__return_ptr))(v1 + 320))(buf);
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)buf);
  uint64_t v10 = ServiceMap;
  uint64_t v11 = "30AKRemoteDeviceServiceInterface";
  if (((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x8000000000000000) != 0)
  {
    long long v12 = (unsigned __int8 *)((unint64_t)"30AKRemoteDeviceServiceInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = (const char *)v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  std::string::size_type v28 = v11;
  long long v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)&v28);
  if (v15)
  {
    uint64_t v17 = v15[3];
    int v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
LABEL_14:
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v17) {
        (*(void (**)(uint64_t, void))(*(void *)v17 + 16))(v17, *v4);
      }
      uint64_t v19 = *(void *)(v1 + 384);
      if (v19) {
        (*(void (**)(uint64_t, void))(*(void *)v19 + 56))(v19, *v4);
      }
      if (*v4)
      {
        sub_1002DCC0C(v1, 1);
      }
      else
      {
        uint64_t v20 = *(void *)(v1 + 288);
        uint64_t v27 = 0;
        (*(void (**)(uint64_t, const void **))(*(void *)v20 + 264))(v20, &v27);
        sub_100044D00(&v27);
        uint64_t v21 = *(void *)(v1 + 288);
        uint64_t v25 = 0;
        uint64_t v26 = 0;
        long long v24 = 0;
        sub_100058DB0(__p, "");
        (*(void (**)(uint64_t, void **, void **))(*(void *)v21 + 88))(v21, &v24, __p);
        if (v23 < 0) {
          operator delete(__p[0]);
        }
        if (v24)
        {
          uint64_t v25 = v24;
          operator delete(v24);
        }
        (*(void (**)(void, double))(**(void **)(v1 + 288) + 296))(*(void *)(v1 + 288), 0.0);
      }
      if ((v18 & 1) == 0) {
        sub_10004D2C8(v16);
      }
LABEL_29:
      operator delete();
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  int v16 = 0;
  char v18 = 1;
  goto LABEL_14;
}

void sub_100342E9C(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, uint64_t a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a17) {
    operator delete(a17);
  }
  if ((v24 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  operator delete();
}

void sub_100342F3C(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_1002DCC0C(**a1, 1);
  operator delete();
}

void sub_100342F94()
{
}

uint64_t sub_100342FC0(uint64_t a1)
{
  *(void *)a1 = off_1019BA4D0;
  sub_100060644((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100343014(uint64_t a1)
{
  *(void *)a1 = off_1019BA4D0;
  sub_100060644((void *)(a1 + 40));
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }

  operator delete();
}

void *sub_100343088(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x48uLL);
  void *v2 = off_1019BA4D0;
  sub_1003432A4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_1003430DC(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_1003430F0(uint64_t a1, void *a2)
{
  *a2 = off_1019BA4D0;
  return sub_1003432A4((uint64_t)(a2 + 1), a1 + 8);
}

void sub_10034311C(uint64_t a1)
{
}

void sub_100343124(void *a1)
{
  sub_100343334((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_100343160(uint64_t a1, unsigned char *a2)
{
  int v3 = *a2;
  if (!*a2)
  {
    uint64_t v4 = *(NSObject **)(*(void *)(a1 + 8) + 40);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a1 + 39) >= 0) {
        uint64_t v6 = a1 + 16;
      }
      else {
        uint64_t v6 = *(void *)(a1 + 16);
      }
      int v7 = 136315394;
      uint64_t v8 = v6;
      __int16 v9 = 2080;
      uint64_t v10 = asString();
      _os_log_error_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_ERROR, "delete transferrred plan [%s] failed with error : %s", (uint8_t *)&v7, 0x16u);
    }
  }
  return sub_1000607A8(a1 + 40, v3 != 0);
}

uint64_t sub_100343258(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100343298()
{
}

uint64_t sub_1003432A4(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  if (*(char *)(a2 + 31) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 8), *(void **)(a2 + 8), *(void *)(a2 + 16));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 8);
    *(void *)(a1 + 24) = *(void *)(a2 + 24);
    *(_OWORD *)(a1 + 8) = v4;
  }
  sub_1000DFC90(a1 + 32, a2 + 32);
  return a1;
}

void sub_100343318(_Unwind_Exception *exception_object)
{
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100343334(uint64_t a1)
{
  sub_100060644((void *)(a1 + 32));
  if (*(char *)(a1 + 31) < 0)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    operator delete(v2);
  }
}

void sub_100343388()
{
}

void *sub_10034339C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  void *result = off_1019BA550;
  result[1] = v3;
  return result;
}

uint64_t sub_1003433E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_1019BA550;
  a2[1] = v2;
  return result;
}

const void **sub_100343410(const void **result, unsigned __int8 *a2, uint64_t *a3, uint64_t *a4, uint64_t a5, NSObject **a6)
{
  int v10 = *a2;
  uint64_t v11 = (uint64_t)result[1];
  if (*(void *)a5)
  {
    if (**(void **)a5 != *(void *)(*(void *)a5 + 8))
    {
      uint64_t result = *(const void ***)(v11 + 512);
      if (result) {
        uint64_t result = (const void **)(*((uint64_t (**)(const void **))*result + 3))(result);
      }
    }
  }
  if (v10)
  {
    if (*(void *)(v11 + 5256))
    {
      long long v12 = (void *)(v11 + 5232);
      uint64_t v13 = *(NSObject **)(v11 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
      {
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = asString();
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Remote device plan fetch failed: %s", buf, 0xCu);
      }
      *(void *)long long buf = 0;
      sub_10031F910((uint64_t)v12, (uint64_t)buf, v10);
      sub_100044D00((const void **)buf);
      return (const void **)sub_100343904(v12);
    }
  }
  else
  {
    CFTypeRef cf = 0;
    sub_100307B64((void **)&cf, v11, a3, a4, a5, a6);
    uint64_t v14 = *(void *)(v11 + 288);
    CFAbsoluteTime Current = CFAbsoluteTimeGetCurrent();
    (*(void (**)(uint64_t, CFAbsoluteTime))(*(void *)v14 + 296))(v14, Current + 1296000.0);
    if (*(void *)(v11 + 5256))
    {
      int v16 = *(NSObject **)(v11 + 40);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Get remote device plans callback cache cleared", buf, 2u);
      }
      *(void *)long long buf = cf;
      if (cf) {
        CFRetain(cf);
      }
      uint64_t v17 = (void *)(v11 + 5232);
      sub_10031F910((uint64_t)v17, (uint64_t)buf, 0);
      sub_100044D00((const void **)buf);
      sub_100343904(v17);
    }
    else
    {
      *(_OWORD *)long long buf = 0uLL;
      (***(void (****)(Registry **__return_ptr))(v11 + 320))(&v25);
      Registry::getNotificationSenderFactory((uint64_t *)&theArray, v25);
      CFArrayRef v18 = theArray;
      (***(void (****)(Registry **__return_ptr))(v11 + 320))(&v21);
      Registry::getTimerService(&v23, v21);
      (*(void (**)(uint8_t *__return_ptr, CFArrayRef, uint64_t *, uint64_t))(*(void *)v18 + 160))(buf, v18, &v23, v11 + 24);
      if (v24) {
        sub_10004D2C8(v24);
      }
      if (v22) {
        sub_10004D2C8(v22);
      }
      if (v28) {
        sub_10004D2C8(v28);
      }
      if (v26) {
        sub_10004D2C8(v26);
      }
      if (*(void *)buf)
      {
        CFArrayRef theArray = 0;
        uint64_t v25 = (Registry *)cf;
        if (cf) {
          CFRetain(cf);
        }
        sub_100CD0194((CFArrayRef *)&v25, &theArray);
        sub_100044D00((const void **)&v25);
        if (theArray) {
          uint64_t v19 = sub_100083F10;
        }
        else {
          uint64_t v19 = 0;
        }
        if (v19 && CFArrayGetCount(theArray) >= 1)
        {
          uint64_t v20 = *(void *)buf;
          uint64_t v21 = (Registry *)theArray;
          if (theArray) {
            CFRetain(theArray);
          }
          (*(void (**)(uint64_t, Registry **))(*(void *)v20 + 48))(v20, &v21);
          sub_100044D00((const void **)&v21);
        }
        sub_100044D00((const void **)&theArray);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    return sub_100044D00(&cf);
  }
  return result;
}

void sub_1003437E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15, char a16, uint64_t a17, char a18, int a19, __int16 a20,char a21,char a22,uint64_t a23)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003438B8(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_1003438F8()
{
}

void *sub_100343904(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  a1[3] = 0;
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_10034398C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100343A10(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + 16) = 0u;
  *(_DWORD *)(a1 + 32) = 1065353216;
  if (a3)
  {
    uint64_t v5 = 48 * a3;
    do
    {
      sub_100343A8C(a1, a2, (long long *)a2);
      a2 += 48;
      v5 -= 48;
    }
    while (v5);
  }
  return a1;
}

void sub_100343A78(_Unwind_Exception *a1)
{
  sub_100343DF4(v1);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100343A8C(uint64_t a1, unsigned __int8 *a2, long long *a3)
{
  uint64_t v6 = (void *)(a1 + 24);
  unint64_t v7 = sub_100206390(a1 + 24, (uint64_t)a2);
  unint64_t v8 = v7;
  unint64_t v9 = *(void *)(a1 + 8);
  if (v9)
  {
    uint8x8_t v10 = (uint8x8_t)vcnt_s8((int8x8_t)v9);
    v10.i16[0] = vaddlv_u8(v10);
    unint64_t v11 = v10.u32[0];
    if (v10.u32[0] > 1uLL)
    {
      unint64_t v12 = v7;
      if (v7 >= v9) {
        unint64_t v12 = v7 % v9;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v7;
    }
    uint64_t v13 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v12);
    if (v13)
    {
      for (uint64_t i = *v13; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v15 = *((void *)i + 1);
        if (v15 == v8)
        {
          if (sub_1000609C0(a1 + 32, i + 16, a2)) {
            return i;
          }
        }
        else
        {
          if (v11 > 1)
          {
            if (v15 >= v9) {
              v15 %= v9;
            }
          }
          else
          {
            v15 &= v9 - 1;
          }
          if (v15 != v12) {
            break;
          }
        }
      }
    }
  }
  else
  {
    unint64_t v12 = 0;
  }
  memset(v25, 0, sizeof(v25));
  sub_100343D1C(a1, v8, a3, v25);
  float v16 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v17 = *(float *)(a1 + 32);
  if (!v9 || (float)(v17 * (float)v9) < v16)
  {
    BOOL v18 = 1;
    if (v9 >= 3) {
      BOOL v18 = (v9 & (v9 - 1)) != 0;
    }
    unint64_t v19 = v18 | (2 * v9);
    unint64_t v20 = vcvtps_u32_f32(v16 / v17);
    if (v19 <= v20) {
      size_t v21 = v20;
    }
    else {
      size_t v21 = v19;
    }
    sub_1001369F0(a1, v21);
    unint64_t v9 = *(void *)(a1 + 8);
    if ((v9 & (v9 - 1)) != 0)
    {
      if (v8 >= v9) {
        unint64_t v12 = v8 % v9;
      }
      else {
        unint64_t v12 = v8;
      }
    }
    else
    {
      unint64_t v12 = (v9 - 1) & v8;
    }
  }
  std::string::size_type v22 = *(void **)(*(void *)a1 + 8 * v12);
  if (v22)
  {
    *(void *)v25[0] = *v22;
    void *v22 = v25[0];
  }
  else
  {
    *(void *)v25[0] = *(void *)(a1 + 16);
    *(void *)(a1 + 16) = v25[0];
    *(void *)(*(void *)a1 + 8 * v12) = a1 + 16;
    if (*(void *)v25[0])
    {
      unint64_t v23 = *(void *)(*(void *)v25[0] + 8);
      if ((v9 & (v9 - 1)) != 0)
      {
        if (v23 >= v9) {
          v23 %= v9;
        }
      }
      else
      {
        v23 &= v9 - 1;
      }
      *(void *)(*(void *)a1 + 8 * v23) = v25[0];
    }
  }
  uint64_t i = (unsigned __int8 *)v25[0];
  v25[0] = 0;
  ++*v6;
  sub_100343D9C((uint64_t)v25, 0);
  return i;
}

void sub_100343D04(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100343D9C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

char *sub_100343D1C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, long long *a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = a1 + 16;
  *a4 = 0;
  a4[1] = 0;
  a4[2] = 0;
  unint64_t v8 = operator new(0x40uLL);
  *a4 = v8;
  a4[1] = v7;
  *((unsigned char *)a4 + 16) = 0;
  *(void *)unint64_t v8 = 0;
  *((void *)v8 + 1) = a2;
  uint64_t result = sub_100236948((char *)v8 + 16, a3);
  *((unsigned char *)a4 + 16) = 1;
  return result;
}

void sub_100343D84(_Unwind_Exception *a1)
{
  sub_100343D9C(v1, 0);
  _Unwind_Resume(a1);
}

void sub_100343D9C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_1000FECD4((uint64_t)v2 + 16);
    }
    operator delete(v2);
  }
}

uint64_t sub_100343DF4(uint64_t a1)
{
  sub_100343E30(a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = 0;
  if (v2) {
    operator delete(v2);
  }
  return a1;
}

void sub_100343E30(uint64_t a1, void *a2)
{
  if (a2)
  {
    uint64_t v2 = a2;
    do
    {
      uint64_t v3 = (void *)*v2;
      sub_1000FECD4((uint64_t)(v2 + 2));
      operator delete(v2);
      uint64_t v2 = v3;
    }
    while (v3);
  }
}

unsigned __int8 *sub_100343E74(void *a1, uint64_t a2)
{
  memset(v6, 0, sizeof(v6));
  sub_100343EF4((uint64_t)a1, a2, v6);
  uint64_t v3 = sub_100343FA8(a1, v6[0]);
  if (v4) {
    v6[0] = 0;
  }
  sub_100343D9C((uint64_t)v6, 0);
  return v3;
}

void sub_100343EDC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100343D9C((uint64_t)va, 0);
  _Unwind_Resume(a1);
}

unint64_t sub_100343EF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = a1 + 16;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  uint64_t v7 = (char *)operator new(0x40uLL);
  *a3 = v7;
  a3[1] = v6;
  *((unsigned char *)a3 + 16) = 0;
  *(void *)uint64_t v7 = 0;
  *((void *)v7 + 1) = 0;
  sub_100058DB0((void *)v7 + 2, *(char **)a2);
  *(_OWORD *)(v7 + 40) = *(_OWORD *)(a2 + 8);
  *((void *)v7 + 7) = *(void *)(a2 + 24);
  *(void *)(a2 + 16) = 0;
  *(void *)(a2 + 24) = 0;
  *(void *)(a2 + 8) = 0;
  *((unsigned char *)a3 + 16) = 1;
  unint64_t result = sub_100206390(a1 + 24, (uint64_t)(v7 + 16));
  *((void *)v7 + 1) = result;
  return result;
}

void sub_100343F90(_Unwind_Exception *a1)
{
  sub_100343D9C(v1, 0);
  _Unwind_Resume(a1);
}

unsigned __int8 *sub_100343FA8(void *a1, uint64_t a2)
{
  uint64_t v2 = (void *)a2;
  char v4 = (unsigned __int8 *)(a2 + 16);
  unint64_t v5 = sub_100206390((uint64_t)(a1 + 3), a2 + 16);
  v2[1] = v5;
  uint64_t v6 = sub_10034401C((uint64_t)a1, v5, v4);
  if (v6) {
    return v6;
  }
  sub_100344174(a1, v2);
  return (unsigned __int8 *)v2;
}

unsigned __int8 *sub_10034401C(uint64_t a1, unint64_t a2, unsigned __int8 *a3)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4)
  {
    uint8x8_t v7 = (uint8x8_t)vcnt_s8((int8x8_t)v4);
    v7.i16[0] = vaddlv_u8(v7);
    unint64_t v8 = v7.u32[0];
    if (v7.u32[0] > 1uLL) {
      uint64_t v9 = v4 <= a2 ? a2 % v4 : a2;
    }
    else {
      uint64_t v9 = (v4 - 1) & a2;
    }
    uint8x8_t v10 = *(unsigned __int8 ***)(*(void *)a1 + 8 * v9);
    if (v10)
    {
      for (uint64_t i = *v10; i; uint64_t i = *(unsigned __int8 **)i)
      {
        unint64_t v12 = *((void *)i + 1);
        if (v12 == a2)
        {
          if (sub_1000609C0(a1 + 32, i + 16, a3)) {
            return i;
          }
        }
        else
        {
          if (v8 > 1)
          {
            if (v12 >= v4) {
              v12 %= v4;
            }
          }
          else
          {
            v12 &= v4 - 1;
          }
          if (v12 != v9) {
            break;
          }
        }
      }
    }
  }
  float v13 = (float)(unint64_t)(*(void *)(a1 + 24) + 1);
  float v14 = *(float *)(a1 + 32);
  if (!v4 || (float)(v14 * (float)v4) < v13)
  {
    BOOL v15 = 1;
    if (v4 >= 3) {
      BOOL v15 = (v4 & (v4 - 1)) != 0;
    }
    unint64_t v16 = v15 | (2 * v4);
    unint64_t v17 = vcvtps_u32_f32(v13 / v14);
    if (v16 <= v17) {
      size_t v18 = v17;
    }
    else {
      size_t v18 = v16;
    }
    sub_1001369F0(a1, v18);
  }
  return 0;
}

void *sub_100344174(void *result, void *a2)
{
  int8x8_t v2 = (int8x8_t)result[1];
  unint64_t v3 = a2[1];
  uint8x8_t v4 = (uint8x8_t)vcnt_s8(v2);
  v4.i16[0] = vaddlv_u8(v4);
  if (v4.u32[0] > 1uLL)
  {
    if (v3 >= *(void *)&v2) {
      v3 %= *(void *)&v2;
    }
  }
  else
  {
    v3 &= *(void *)&v2 - 1;
  }
  unint64_t v5 = *(void **)(*result + 8 * v3);
  if (v5)
  {
    *a2 = *v5;
LABEL_13:
    *unint64_t v5 = a2;
    goto LABEL_14;
  }
  *a2 = result[2];
  result[2] = a2;
  *(void *)(*result + 8 * v3) = result + 2;
  if (*a2)
  {
    unint64_t v6 = *(void *)(*a2 + 8);
    if (v4.u32[0] > 1uLL)
    {
      if (v6 >= *(void *)&v2) {
        v6 %= *(void *)&v2;
      }
    }
    else
    {
      v6 &= *(void *)&v2 - 1;
    }
    unint64_t v5 = (void *)(*result + 8 * v6);
    goto LABEL_13;
  }
LABEL_14:
  ++result[3];
  return result;
}

void sub_10034422C(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_10034422C(a1, *a2);
    sub_10034422C(a1, a2[1]);
    sub_100344288((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100344288(uint64_t a1)
{
  int8x8_t v2 = (void **)(a1 + 104);
  sub_10023F96C(&v2);
  int8x8_t v2 = (void **)(a1 + 80);
  sub_10023FA88(&v2);
  if (*(unsigned char *)(a1 + 48))
  {
    if (*(char *)(a1 + 79) < 0) {
      operator delete(*(void **)(a1 + 56));
    }
    *(unsigned char *)(a1 + 48) = 0;
  }
  if (*(unsigned char *)(a1 + 16))
  {
    if (*(char *)(a1 + 47) < 0) {
      operator delete(*(void **)(a1 + 24));
    }
    *(unsigned char *)(a1 + 16) = 0;
  }
}

uint64_t *sub_100344308(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100344360(a1, *(int **)a2, (int *)(a2 + 8));
  return a1;
}

void sub_100344348(_Unwind_Exception *a1)
{
  sub_10034422C(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100344360(uint64_t *result, int *a2, int *a3)
{
  if (a2 != a3)
  {
    uint8x8_t v4 = a2;
    unint64_t v5 = (uint64_t **)result;
    unint64_t v6 = result + 1;
    do
    {
      unint64_t result = sub_1003443EC(v5, v6, v4 + 8, (uint64_t)(v4 + 8));
      uint8x8_t v7 = (int *)*((void *)v4 + 1);
      if (v7)
      {
        do
        {
          unint64_t v8 = v7;
          uint8x8_t v7 = *(int **)v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          unint64_t v8 = (int *)*((void *)v4 + 2);
          BOOL v9 = *(void *)v8 == (void)v4;
          uint8x8_t v4 = v8;
        }
        while (!v9);
      }
      uint8x8_t v4 = v8;
    }
    while (v8 != a3);
  }
  return result;
}

uint64_t *sub_1003443EC(uint64_t **a1, uint64_t *a2, int *a3, uint64_t a4)
{
  uint64_t v11 = 0;
  unint64_t v12 = 0;
  unint64_t v6 = sub_1000262C0(a1, a2, &v12, &v11, a3);
  uint8x8_t v7 = (uint64_t *)*v6;
  if (!*v6)
  {
    unint64_t v8 = (uint64_t **)v6;
    memset(v10, 0, sizeof(v10));
    sub_100344490((uint64_t)a1, a4, v10);
    sub_100046C38(a1, (uint64_t)v12, v8, v10[0]);
    uint8x8_t v7 = v10[0];
    v10[0] = 0;
    sub_100344BCC((uint64_t)v10, 0);
  }
  return v7;
}

void *sub_100344490@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v5 = a1 + 8;
  *a3 = 0;
  a3[1] = 0;
  a3[2] = 0;
  unint64_t v6 = operator new(0xA0uLL);
  *a3 = v6;
  a3[1] = v5;
  *((unsigned char *)a3 + 16) = 0;
  unsigned char v6[8] = *(_DWORD *)a2;
  v6[10] = *(_DWORD *)(a2 + 8);
  unint64_t result = sub_100344514((void *)v6 + 6, (uint64_t *)(a2 + 16));
  *((unsigned char *)a3 + 16) = 1;
  return result;
}

void sub_1003444FC(_Unwind_Exception *a1)
{
  sub_100344BCC(v1, 0);
  _Unwind_Resume(a1);
}

void *sub_100344514(void *a1, uint64_t *a2)
{
  uint64_t v4 = sub_100311E70((uint64_t)a1, (uint64_t)a2);
  sub_100311E70(v4 + 32, (uint64_t)(a2 + 4));
  a1[8] = 0;
  a1[9] = 0;
  a1[10] = 0;
  sub_100344624(a1 + 8, a2[8], a2[9], 0x8E38E38E38E38E39 * ((a2[9] - a2[8]) >> 4));
  a1[11] = 0;
  a1[12] = 0;
  a1[13] = 0;
  sub_1003448D8(a1 + 11, a2[11], a2[12], 0xCF3CF3CF3CF3CF3DLL * ((a2[12] - a2[11]) >> 3));
  return a1;
}

void sub_1003445C4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10023FA88((void ***)va);
  if (*v3)
  {
    if (*(char *)(v2 + 63) < 0) {
      operator delete(*(void **)(v2 + 40));
    }
    unsigned char *v3 = 0;
  }
  if (*(unsigned char *)v2)
  {
    if (*(char *)(v2 + 31) < 0) {
      operator delete(*(void **)(v2 + 8));
    }
    *(unsigned char *)uint64_t v2 = 0;
  }
  _Unwind_Resume(a1);
}

void *sub_100344624(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_1003446AC(result, a4);
    unint64_t result = (void *)sub_100344750((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_10034468C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10023FA88(&a9);
  _Unwind_Resume(a1);
}

char *sub_1003446AC(void *a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_10006A748();
  }
  unint64_t result = (char *)sub_100344704((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[144 * v4];
  return result;
}

void *sub_100344704(uint64_t a1, unint64_t a2)
{
  if (a2 >= 0x1C71C71C71C71C8) {
    sub_10006A7CC();
  }
  return operator new(144 * a2);
}

uint64_t sub_100344750(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1003447D4(a4 + v7, a2 + v7);
      v7 += 144;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003447B0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 144;
    do
    {
      sub_10023FB0C(v4 + v2);
      v2 -= 144;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003447D4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100311E70(a1 + 16, a2 + 16);
  sub_100311E70(a1 + 48, a2 + 48);
  if (*(char *)(a2 + 103) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 80), *(void **)(a2 + 80), *(void *)(a2 + 88));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 80);
    *(void *)(a1 + 96) = *(void *)(a2 + 96);
    *(_OWORD *)(a1 + 80) = v4;
  }
  *(unsigned char *)(a1 + 104) = *(unsigned char *)(a2 + 104);
  sub_100311E70(a1 + 112, a2 + 112);
  return a1;
}

void sub_100344874(_Unwind_Exception *exception_object)
{
  if (*v3)
  {
    if (*(char *)(v2 + 79) < 0) {
      operator delete(*(void **)(v2 + 56));
    }
    unsigned char *v3 = 0;
  }
  if (*v1)
  {
    if (*(char *)(v2 + 47) < 0) {
      operator delete(*(void **)(v2 + 24));
    }
    unsigned char *v1 = 0;
  }
  _Unwind_Resume(exception_object);
}

void *sub_1003448D8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    unint64_t v6 = result;
    sub_10010CC04(result, a4);
    unint64_t result = (void *)sub_100344960((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100344940(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10023F96C(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100344960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_1003449E4(a4 + v7, a2 + v7);
      v7 += 168;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_1003449C0(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 168;
    do
    {
      sub_10023F9F0(v4 + v2);
      v2 -= 168;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_1003449E4(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  if (*(char *)(a2 + 39) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 16), *(void **)(a2 + 16), *(void *)(a2 + 24));
  }
  else
  {
    long long v4 = *(_OWORD *)(a2 + 16);
    *(void *)(a1 + 32) = *(void *)(a2 + 32);
    *(_OWORD *)(a1 + 16) = v4;
  }
  if (*(char *)(a2 + 63) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 40), *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  else
  {
    long long v5 = *(_OWORD *)(a2 + 40);
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    *(_OWORD *)(a1 + 40) = v5;
  }
  *(_WORD *)(a1 + 64) = *(_WORD *)(a2 + 64);
  if (*(char *)(a2 + 95) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 72), *(void **)(a2 + 72), *(void *)(a2 + 80));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 72);
    *(void *)(a1 + 88) = *(void *)(a2 + 88);
    *(_OWORD *)(a1 + 72) = v6;
  }
  if (*(char *)(a2 + 119) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 96), *(void **)(a2 + 96), *(void *)(a2 + 104));
  }
  else
  {
    long long v7 = *(_OWORD *)(a2 + 96);
    *(void *)(a1 + 112) = *(void *)(a2 + 112);
    *(_OWORD *)(a1 + 96) = v7;
  }
  if (*(char *)(a2 + 143) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 120), *(void **)(a2 + 120), *(void *)(a2 + 128));
  }
  else
  {
    long long v8 = *(_OWORD *)(a2 + 120);
    *(void *)(a1 + 136) = *(void *)(a2 + 136);
    *(_OWORD *)(a1 + 120) = v8;
  }
  uint64_t v9 = (unsigned char *)(a1 + 144);
  if (*(char *)(a2 + 167) < 0)
  {
    sub_10004FC84(v9, *(void **)(a2 + 144), *(void *)(a2 + 152));
  }
  else
  {
    long long v10 = *(_OWORD *)(a2 + 144);
    *(void *)(a1 + 160) = *(void *)(a2 + 160);
    *(_OWORD *)uint64_t v9 = v10;
  }
  return a1;
}

void sub_100344B50(_Unwind_Exception *exception_object)
{
  if (v1[143] < 0) {
    operator delete(*v6);
  }
  if (v1[119] < 0) {
    operator delete(*v5);
  }
  if (v1[95] < 0) {
    operator delete(*v4);
  }
  if (v1[63] < 0) {
    operator delete(*v3);
  }
  if (v1[39] < 0) {
    operator delete(*v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100344BCC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)a1;
  *(void *)a1 = a2;
  if (v2)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_100344288((uint64_t)v2 + 32);
    }
    operator delete(v2);
  }
}

void *sub_100344C24(void *a1)
{
  *a1 = off_1019BA5E0;
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    _Block_release(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_100344C80(void *a1)
{
  *a1 = off_1019BA5E0;
  uint64_t v2 = (const void *)a1[6];
  if (v2) {
    _Block_release(v2);
  }
  unint64_t v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

void *sub_100344CFC(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_1019BA5E0;
  sub_100345000((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_100344D50(uint64_t a1, void *a2)
{
  *a2 = off_1019BA5E0;
  return sub_100345000((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void sub_100344D7C(uint64_t a1)
{
}

void sub_100344D84(void *a1)
{
  sub_100345060((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100344DC0(uint64_t a1, _WORD *a2)
{
  int v3 = HIBYTE(*a2);
  uint64_t v4 = *(void *)(a1 + 8);
  long long v5 = *(NSObject **)(v4 + 40);
  int v6 = *a2;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = v6;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Cellular plan regulatory restriction active : %{BOOL}d reason_code:%s", buf, 0x12u);
  }
  *(_WORD *)(*(void *)(a1 + 32) + 184) = v6 | 0x100;
  *(_WORD *)(*(void *)(a1 + 32) + 186) = v3 | 0x100;
  *(_OWORD *)long long buf = *(_OWORD *)(a1 + 16);
  uint64_t v7 = *(void *)(a1 + 40);
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  long long v8 = *(const void **)(a1 + 48);
  if (v8) {
    _Block_copy(v8);
  }
  uint64_t v9 = *(std::__shared_weak_count **)(v4 + 16);
  if (v9)
  {
    if (std::__shared_weak_count::lock(v9)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100344F9C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100344FB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100344FF4()
{
}

uint64_t sub_100345000(uint64_t a1, long long *a2)
{
  long long v3 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v3;
  uint64_t v4 = *((void *)a2 + 4);
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *(void *)(a1 + 32) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  long long v5 = (void *)*((void *)a2 + 5);
  if (v5) {
    long long v5 = _Block_copy(v5);
  }
  *(void *)(a1 + 40) = v5;
  return a1;
}

void sub_100345060(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 40);
  if (v2) {
    _Block_release(v2);
  }
  long long v3 = *(std::__shared_weak_count **)(a1 + 32);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

uint64_t *sub_1003450B4(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  long long v8 = v1;
  uint64_t v2 = *v1;
  long long v3 = (std::__shared_weak_count *)v1[4];
  v10[0] = v1[3];
  v10[1] = v3;
  if (v3) {
    atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = (const void *)v1[5];
  if (v4) {
    long long v5 = _Block_copy(v4);
  }
  else {
    long long v5 = 0;
  }
  uint64_t v9 = v5;
  sub_100302690(v2, v1 + 1, v10, (uint64_t *)&v9);
  if (v5) {
    _Block_release(v5);
  }
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10034519C((uint64_t *)&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100345164(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (v12) {
    _Block_release(v12);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_10034519C(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_10034519C(uint64_t *result)
{
  uint64_t v1 = *result;
  char *result = 0;
  if (v1)
  {
    uint64_t v2 = *(const void **)(v1 + 40);
    if (v2) {
      _Block_release(v2);
    }
    long long v3 = *(std::__shared_weak_count **)(v1 + 32);
    if (v3) {
      sub_10004D2C8(v3);
    }
    operator delete();
  }
  return result;
}

void *sub_100345200(void *a1)
{
  *a1 = off_1019BA660;
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    _Block_release(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }
  return a1;
}

void sub_10034525C(void *a1)
{
  *a1 = off_1019BA660;
  uint64_t v2 = (const void *)a1[4];
  if (v2) {
    _Block_release(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[3];
  if (v3) {
    sub_10004D2C8(v3);
  }

  operator delete();
}

void *sub_1003452D8(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_1019BA660;
  sub_10034547C((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_10034532C(uint64_t a1, void *a2)
{
  *a2 = off_1019BA660;
  return sub_10034547C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100345358(uint64_t a1)
{
}

void sub_100345360(void *a1)
{
  sub_1003454D4((uint64_t)a1 + 8);

  operator delete(a1);
}

unsigned char *sub_10034539C(uint64_t a1, uint64_t *a2)
{
  if (*a2 == a2[1])
  {
    uint64_t v4 = *(void *)(a1 + 32);
    return sub_100302DBC(v4, 2);
  }
  else
  {
    uint64_t v2 = *(void *)(a1 + 8);
    v5[0] = 0;
    v5[176] = 0;
    sub_1002FE1EC(v2, 0, a2, (uint64_t)v5, 0);
    return (unsigned char *)sub_10030AEBC((uint64_t)v5);
  }
}

void sub_10034541C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10030AEBC((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100345430(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100345470()
{
}

uint64_t sub_10034547C(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void **)(a2 + 24);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 24) = v4;
  return a1;
}

void sub_1003454D4(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    sub_10004D2C8(v3);
  }
}

uint64_t sub_100345528(uint64_t a1)
{
  *(void *)a1 = off_1019BA6E0;
  sub_1000C5D34((unsigned char *)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100345578(uint64_t a1)
{
  *(void *)a1 = off_1019BA6E0;
  sub_1000C5D34((unsigned char *)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_1003455E8(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x128uLL);
  void *v2 = off_1019BA6E0;
  sub_1003459A4((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_10034563C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100345650(uint64_t a1, void *a2)
{
  *a2 = off_1019BA6E0;
  return sub_1003459A4((uint64_t)(a2 + 1), (long long *)(a1 + 8));
}

void sub_10034567C(uint64_t a1)
{
}

void sub_100345684(void *a1)
{
  sub_100345A20((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_1003456C0(uint64_t a1, unsigned char *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*(void *)(v2 + 680))
  {
    if (*a2)
    {
      if (!*(unsigned char *)(a1 + 48)) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      sub_1000C5AB4((uint64_t)buf, a1 + 56);
      uint64_t v4 = (void *)(a1 + 32);
      char v5 = sub_1002DE4A4(v2, (uint64_t)buf, (uint64_t *)(a1 + 32), *(void *)(a1 + 16), *(void *)(a1 + 24));
      sub_1000C584C((uint64_t)buf);
      if ((v5 & 1) == 0)
      {
        int v6 = *(NSObject **)(v2 + 40);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__p[0]) = 0;
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I fetchProfilesForRemoteProvisioning_sync (New Profile): Eligibility check consent", (uint8_t *)__p, 2u);
        }
        uint64_t v7 = *(void *)(v2 + 288);
        sub_100058DB0(__p, "");
        (*(void (**)(uint64_t, void **))(*(void *)v7 + 72))(v7, __p);
        if (v11 < 0) {
          operator delete(__p[0]);
        }
        (*(void (**)(void, uint64_t, uint64_t))(**(void **)(v2 + 680) + 88))(*(void *)(v2 + 680), 1, *v4 + 72);
      }
    }
    else
    {
      uint64_t v9 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "fetchProfilesForRemoteProvisioning_sync (New Profile): Device not eligible", buf, 2u);
      }
      if (!*(unsigned char *)(a1 + 48)) {
        __assert_rtn("operator->", "optional.hpp", 1221, "this->is_initialized()");
      }
      sub_1000C5AB4((uint64_t)buf, a1 + 56);
      sub_1002DEB5C(v2, (uint64_t)buf, a1 + 16);
      sub_1000C584C((uint64_t)buf);
    }
  }
  else
  {
    long long v8 = *(NSObject **)(v2 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "(New Profile): No provisioning operation - cancelled during eligibility check?", buf, 2u);
    }
  }
}