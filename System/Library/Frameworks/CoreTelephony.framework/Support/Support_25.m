void sub_100D8B22C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,void *a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40)
{
  if (__p)
  {
    a40 = (uint64_t)__p;
    operator delete(__p);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  if (a9) {
    sub_10004D2C8(a9);
  }
  sub_1000346F8((uint64_t)&a35, a36);
  _Unwind_Resume(a1);
}

unint64_t sub_100D8B390(uint64_t a1, uint64_t a2, int *a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v10 = *(void *)(a1 + 112);
  if (v10 && (*(unsigned int (**)(uint64_t))(*(void *)v10 + 336))(v10))
  {
    v11 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "activateDataSettings";
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: we are in the middle of a retry scheduled activation, drop that activation in favor of this newer one", buf, 0xCu);
    }
    (*(void (**)(void, void))(**(void **)(a1 + 112) + 344))(*(void *)(a1 + 112), 0);
  }
  v12 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    if (*(unsigned char *)(a5 + 24)) {
      v13 = "handOver ";
    }
    else {
      v13 = (const char *)&unk_10165244B;
    }
    uint64_t v14 = asString();
    *(_DWORD *)buf = 136315650;
    *(void *)&buf[4] = "activateDataSettings";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v13;
    *(_WORD *)&buf[22] = 2080;
    *(void *)&buf[24] = v14;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: requested %sfor %s", buf, 0x20u);
  }
  if (((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 1160))(a1, *a3) & 1) == 0)
  {
    v17 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "activateDataSettings";
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s: can not activate with current baseband activated state", buf, 0xCu);
    }
    unint64_t v18 = 0xFFFFFFFDFFFFFFFFLL;
    goto LABEL_20;
  }
  int v15 = *a3;
  v96 = 0;
  uint64_t v97 = 0;
  __p = 0;
  sub_1008DB9AC(&__p, *(const void **)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2));
  if (validContextType())
  {
    for (i = (uint64_t *)__p; ; i = (uint64_t *)((char *)i + 12))
    {
      if (i == (uint64_t *)v96) {
        goto LABEL_37;
      }
      if (*((unsigned char *)i + 2)) {
        break;
      }
    }
    v100[0] = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(i, *(Registry **)(a1 + 72));
    v24 = ServiceMap;
    if (v25 < 0)
    {
      v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v27 = 5381;
      do
      {
        uint64_t v25 = v27;
        unsigned int v28 = *v26++;
        uint64_t v27 = (33 * v27) ^ v28;
      }
      while (v28);
    }
    std::mutex::lock(ServiceMap);
    *(void *)buf = v25;
    v29 = sub_10004D37C(&v24[1].__m_.__sig, (unint64_t *)buf);
    if (v29)
    {
      uint64_t v31 = v29[3];
      v30 = (std::__shared_weak_count *)v29[4];
      if (v30)
      {
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v24);
        atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v30);
        char v32 = 0;
        if (!v31)
        {
LABEL_30:
          char v33 = 1;
LABEL_34:
          if ((v32 & 1) == 0) {
            sub_10004D2C8(v30);
          }
          if (v33)
          {
LABEL_37:
            memset(buf, 0, 24);
            sub_100DA1880(buf, *(const void **)(a1 + 24 * v15 + 120), *(void *)(a1 + 24 * v15 + 128), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(a1 + 24 * v15 + 128) - *(void *)(a1 + 24 * v15 + 120)) >> 3));
            uint64_t v36 = *(void *)buf;
            uint64_t v35 = *(void *)&buf[8];
            if (*(void *)buf != *(void *)&buf[8])
            {
              do
              {
                if (*(unsigned char *)(v36 + 16)) {
                  (*(void (**)(void))(**(void **)(v36 + 8) + 88))(*(void *)(v36 + 8));
                }
                v36 += 24;
              }
              while (v36 != v35);
              uint64_t v36 = *(void *)buf;
            }
            if (v36)
            {
              *(void *)&buf[8] = v36;
              operator delete((void *)v36);
            }
            uint64_t v21 = 0;
            uint64_t v22 = 0;
            goto LABEL_45;
          }
          int v48 = v100[0];
          v49 = *(NSObject **)(a1 + 64);
          BOOL v50 = os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT);
          if (v48)
          {
            if (v50)
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&buf[4] = "handleBeforeActivate";
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#N %s: Internet is not allowed by data plan manager (1)", buf, 0xCu);
            }
            uint64_t v22 = 4294967294;
          }
          else
          {
            if (v50)
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&buf[4] = "handleBeforeActivate";
              _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#N %s: Internet is not allowed by data plan manager (2)", buf, 0xCu);
            }
            uint64_t v22 = 0xFFFFFFFFLL;
          }
          uint64_t v21 = 0x1200000000;
          goto LABEL_45;
        }
LABEL_33:
        uint64_t v34 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
        char v33 = (*(uint64_t (**)(uint64_t, uint64_t, unsigned char *))(*(void *)v31 + 928))(v31, v34, v100);
        goto LABEL_34;
      }
    }
    else
    {
      uint64_t v31 = 0;
    }
    std::mutex::unlock(v24);
    v30 = 0;
    char v32 = 1;
    if (!v31) {
      goto LABEL_30;
    }
    goto LABEL_33;
  }
  v19 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = asString();
    *(_DWORD *)buf = 136315394;
    *(void *)&buf[4] = "handleBeforeActivate";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
  }
  uint64_t v21 = (uint64_t)&_mh_execute_header;
  uint64_t v22 = 0xFFFFFFFFLL;
LABEL_45:
  if (__p)
  {
    v96 = (char *)__p;
    operator delete(__p);
  }
  if (v22)
  {
    unint64_t v98 = v22 | v21;
    unsigned int v99 = 0;
    return v98;
  }
  uint64_t v38 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 136))(a1, *a3, 0, 0);
  uint64_t v39 = a1 + 24 * *a3;
  uint64_t v41 = *(void *)(v39 + 120);
  uint64_t v40 = *(void *)(v39 + 128);
  if (v41 != v40)
  {
    uint64_t v42 = v38;
    char v43 = 0;
    do
    {
      while ((v43 & 1) != 0)
      {
        v41 += 24;
        char v43 = 1;
        if (v41 == v40) {
          goto LABEL_57;
        }
      }
      char v43 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v41 + 8) + 192))(*(void *)(v41 + 8), v42, 3);
      v41 += 24;
    }
    while (v41 != v40);
    if (v43)
    {
LABEL_57:
      v44 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "activateDataSettings";
        _os_log_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_DEFAULT, "#I %s: activation pending data plan check, bailing out", buf, 0xCu);
      }
      unint64_t v18 = 4294967294;
      goto LABEL_20;
    }
  }
  v45 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = "activateDataSettings";
    _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I %s: activation does not require data plan check. Continue activating context", buf, 0xCu);
  }
  switch(sub_100D86FA4(a1, *a3))
  {
    case 0u:
      if (a2)
      {
        uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)a2 + 384))(a2);
        uint64_t v47 = (*(uint64_t (**)(uint64_t, void))(*(void *)a2 + 24))(a2, 0);
      }
      else
      {
        uint64_t v47 = 0;
        uint64_t v46 = 999;
      }
      uint64_t v51 = *(void *)(a1 + 112);
      if (v51) {
        goto LABEL_79;
      }
      uint64_t v60 = (*(unsigned __int8 (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 136))(a1, 0, 1, 0);
      *(void *)buf = 0;
      *(void *)&buf[8] = 0;
      sub_1002A1B14(*(Registry **)(a1 + 72), buf);
      uint64_t v61 = *(void *)buf;
      if (*(void *)buf)
      {
        uint64_t v62 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 224))(a1, v46);
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v93, a1);
        *(void *)(a1 + 112) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v61 + 1048))(v61, v62, v47, &v93, v60 & 1);
        if (v94) {
          sub_10004D2C8(v94);
        }
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      uint64_t v51 = *(void *)(a1 + 112);
      if (!v51)
      {
        unint64_t v18 = 0x11FFFFFFFFLL;
LABEL_20:
        unint64_t v98 = v18;
        LOBYTE(v99) = 0;
        return v98;
      }
      v63 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
      {
        int v64 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "activateDataSettings";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v64;
        _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) attached to PDP %d", buf, 0x12u);
        uint64_t v51 = *(void *)(a1 + 112);
      }
LABEL_79:
      v52 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
      {
        int v53 = (*(uint64_t (**)(uint64_t))(*(void *)v51 + 16))(v51);
        *(_DWORD *)buf = 136315394;
        *(void *)&buf[4] = "activateDataSettings";
        *(_WORD *)&buf[12] = 1024;
        *(_DWORD *)&buf[14] = v53;
        _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s: using PDP %d", buf, 0x12u);
        uint64_t v51 = *(void *)(a1 + 112);
      }
      break;
    case 1u:
      unint64_t v18 = 2;
      goto LABEL_20;
    case 2u:
      LOBYTE(v99) = 0;
      return 0;
    case 3u:
      unint64_t v18 = 1;
      goto LABEL_20;
    default:
      unint64_t v18 = 0xFFFFFFF7FFFFFFFFLL;
      goto LABEL_20;
  }
  uint64_t v110 = 0;
  long long v108 = 0u;
  long long v109 = 0u;
  long long v106 = 0u;
  long long v107 = 0u;
  long long v104 = 0u;
  long long v105 = 0u;
  long long v102 = 0u;
  long long v103 = 0u;
  memset(buf, 0, sizeof(buf));
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v51 + 320))(buf, v51);
  uint64_t v54 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)a1 + 928))(a1, *a3, v46);
  unsigned int v56 = v55;
  unint64_t v57 = v54 & 0xFFFFFFFF00000000;
  switch((int)v54)
  {
    case -2:
      v58 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)v100 = 136315138;
        *(void *)&v100[4] = "activateDataSettings";
        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#E %s: !!! grabDataContext should not return kDataActivationResultFailedDoNotPost", v100, 0xCu);
      }
      uint64_t v59 = v57 | 0xFFFFFFFE;
      goto LABEL_115;
    case -1:
      uint64_t v59 = v54 | 0xFFFFFFFFLL;
      goto LABEL_115;
    case 0:
      uint64_t v54 = (*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 1192))(a1, *a3);
      goto LABEL_95;
    case 2:
      (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 1208))(a1, *a3, 1);
      int v77 = otherContextType();
      if (sub_100D86FA4(a1, v77) == 1)
      {
        uint64_t v78 = otherContextType();
        (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 1208))(a1, v78, 0);
      }
      uint64_t v59 = v57 | 2;
LABEL_115:
      unint64_t v98 = v59;
      unsigned int v99 = v56;
      goto LABEL_132;
    default:
LABEL_95:
      if (!*(void *)(a1 + 112))
      {
        unint64_t v98 = 0x11FFFFFFFFLL;
        LOBYTE(v99) = 0;
        goto LABEL_132;
      }
      if (capabilities::ct::supports5G((capabilities::ct *)v54))
      {
        uint64_t v65 = *(void *)(a1 + 112);
        uint64_t v66 = *a3;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v91, a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v65 + 424))(v65, v66, &v91);
        if (v92) {
          sub_10004D2C8(v92);
        }
      }
      sub_100D8DB80((PersonalitySpecificImpl *)a1);
      unsigned int v99 = 0;
      unint64_t v98 = 0x1FFFFFFFFLL;
      if (!(*(unsigned int (**)(uint64_t, uint64_t, void, uint64_t, void, unint64_t *))(*(void *)a1 + 72))(a1, 1, *a3, *(unsigned __int8 *)(a5 + 24) | 0x100, 0, &v98))goto LABEL_132; {
      uint64_t v67 = *(void *)(a1 + 112);
      }
      uint64_t v68 = *a3;
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v89, a1);
      sub_100D8C4F8((uint64_t)v86, (long long *)a5);
      int v69 = a4;
      v83 = 0;
      v84 = 0;
      uint64_t v85 = 0;
      sub_1008DB9AC(&v83, *(const void **)a6, *(void *)(a6 + 8), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a6 + 8) - *(void *)a6) >> 2));
      unint64_t v70 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, unsigned char *, void **))(*(void *)v67 + 256))(v67, v68, &v89, v86, &v83);
      unsigned __int8 v72 = v71;
      if (v83)
      {
        v84 = v83;
        operator delete(v83);
      }
      uint64_t v73 = a2;
      if (v88 < 0) {
        operator delete(v87);
      }
      unint64_t v74 = HIDWORD(v70);
      if (v90) {
        sub_10004D2C8(v90);
      }
      unsigned int v75 = v56 & 0xFFFFFF00 | v72;
      if (v70 >= 0xFFFFFFFE)
      {
        if (v69)
        {
          *(void *)v100 = v70;
          *(_DWORD *)&v100[8] = v56 & 0xFFFFFF00 | v72;
          if (sub_100D8DD24((void *)a1, v73, *a3, (uint64_t)v100))
          {
            *a3 = otherContextType();
            LODWORD(v70) = *(_DWORD *)v100;
            LODWORD(v74) = *(_DWORD *)&v100[4];
            unsigned int v75 = v56 & 0xFFFFFF00 | v100[8];
            if (*(_DWORD *)v100 < 0xFFFFFFFE)
            {
              if (!*(_DWORD *)v100)
              {
                (*(void (**)(uint64_t))(*(void *)a1 + 1208))(a1);
                goto LABEL_126;
              }
              if (*(_DWORD *)v100 != 2) {
                goto LABEL_131;
              }
            }
            uint64_t v79 = *(void *)(a1 + 112);
            if (!v79) {
              goto LABEL_131;
            }
          }
          else
          {
            uint64_t v79 = *(void *)(a1 + 112);
            if (!v79) {
              goto LABEL_131;
            }
          }
        }
        else
        {
          uint64_t v79 = *(void *)(a1 + 112);
          if (!v79) {
            goto LABEL_131;
          }
        }
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v79 + 328))(v79, buf);
        goto LABEL_131;
      }
      if (!v70)
      {
        (*(void (**)(uint64_t, void, uint64_t))(*(void *)a1 + 1208))(a1, *a3, 2);
LABEL_126:
        LODWORD(v70) = 0;
        goto LABEL_131;
      }
      if (v70 == 2)
      {
        uint64_t v76 = *(void *)(a1 + 112);
        if (v76) {
          (*(void (**)(uint64_t, uint8_t *))(*(void *)v76 + 328))(v76, buf);
        }
        LODWORD(v70) = 2;
      }
LABEL_131:
      unint64_t v98 = v70 | ((unint64_t)v74 << 32);
      unsigned int v99 = v75;
LABEL_132:
      for (uint64_t j = 0; j != -160; j -= 80)
      {
        if (*((char *)&v109 + j + 15) < 0) {
          operator delete(*(void **)((char *)&v108 + j + 8));
        }
      }
      return v98;
  }
}

uint64_t sub_100D8C4F8(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  long long v5 = a2[1];
  *(_OWORD *)(a1 + 26) = *(long long *)((char *)a2 + 26);
  *(_OWORD *)a1 = v4;
  *(_OWORD *)(a1 + 16) = v5;
  uint64_t v6 = a1 + 48;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84((unsigned char *)v6, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    long long v7 = a2[3];
    *(void *)(v6 + 16) = *((void *)a2 + 8);
    *(_OWORD *)uint64_t v6 = v7;
  }
  *(unsigned char *)(a1 + 72) = *((unsigned char *)a2 + 72);
  return a1;
}

void sub_100D8C560(uint64_t a1, const DataAPNSettingsObserver *a2, long long *a3, uint64_t a4)
{
}

void sub_100D8C568(void *a1)
{
  v19 = 0;
  uint64_t v20 = 0;
  uint64_t v21 = 0;
  (*(void (**)(void ***__return_ptr))(*a1 + 728))(&v19);
  if (!v21)
  {
    v13 = a1[8];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I remove rd: resources empty", v18, 2u);
    }
    goto LABEL_49;
  }
  v2 = v19;
  if (v19 == &v20)
  {
    long long v4 = 0;
LABEL_34:
    uint64_t v14 = a1[8];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unint64_t v18 = 0;
      int v15 = "#E remove rd: No IPSec Interface found, failed";
LABEL_36:
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, v15, v18, 2u);
      if (!v4) {
        goto LABEL_49;
      }
    }
    else
    {
LABEL_47:
      if (!v4) {
        goto LABEL_49;
      }
    }
    goto LABEL_48;
  }
  uint64_t v3 = 0;
  long long v4 = 0;
  uint64_t v5 = kIPsecInterfaceSettingsResource;
  while (1)
  {
    long long v7 = (const void *)v2[4];
    uint64_t v6 = (std::__shared_weak_count *)v2[5];
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(uint64_t (**)(const void *))(*(void *)v7 + 16))(v7) != v5)
    {
      if (!v6) {
        goto LABEL_20;
      }
      goto LABEL_19;
    }
    if (!v8)
    {
      v16 = a1[8];
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v18 = 0;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E remove rd: resource object contains wrong data type, failed", v18, 2u);
      }
      if (v6) {
        goto LABEL_46;
      }
      goto LABEL_47;
    }
    if (v6) {
      atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v3 = v8[1];
    v9 = (std::__shared_weak_count *)v8[2];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v4) {
      sub_10004D2C8(v4);
    }
    if (!v3) {
      break;
    }
    if (!v6)
    {
      long long v4 = v9;
      goto LABEL_20;
    }
    sub_10004D2C8(v6);
    long long v4 = v9;
LABEL_19:
    sub_10004D2C8(v6);
LABEL_20:
    uint64_t v10 = (void *)v2[1];
    if (v10)
    {
      do
      {
        v11 = (void **)v10;
        uint64_t v10 = (void *)*v10;
      }
      while (v10);
    }
    else
    {
      do
      {
        v11 = (void **)v2[2];
        BOOL v12 = *v11 == v2;
        v2 = v11;
      }
      while (!v12);
    }
    v2 = v11;
    if (v11 == &v20)
    {
      if (!v3) {
        goto LABEL_34;
      }
      (*(void (**)(uint64_t))(*(void *)v3 + 120))(v3);
      uint64_t v14 = a1[8];
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)unint64_t v18 = 0;
        int v15 = "#I remove rd: removed (if existed)";
        goto LABEL_36;
      }
      goto LABEL_47;
    }
  }
  v17 = a1[8];
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#E remove rd: resource object contains empty interface, failed", v18, 2u);
  }
  if (v6)
  {
    sub_10004D2C8(v6);
    long long v4 = v9;
LABEL_46:
    sub_10004D2C8(v6);
    goto LABEL_47;
  }
  long long v4 = v9;
  if (v9) {
LABEL_48:
  }
    sub_10004D2C8(v4);
LABEL_49:
  sub_100103DF0((uint64_t)&v19, v20);
}

void sub_100D8C8DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
  if (v11) {
    sub_10004D2C8(v11);
  }
  sub_100103DF0((uint64_t)&a10, a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100D8C914(uint64_t a1, BOOL a2, unsigned int a3, __int16 a4, BOOL a5, uint64_t a6)
{
  if (((*(uint64_t (**)(uint64_t))(*(void *)a1 + 1056))(a1) & 1) == 0)
  {
    sub_100D8C568((void *)a1);
    return 1;
  }
  BOOL v65 = a2;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v12, *(Registry **)(a1 + 72));
  uint64_t v14 = ServiceMap;
  if (v15 < 0)
  {
    v16 = (unsigned __int8 *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v17 = 5381;
    do
    {
      uint64_t v15 = v17;
      unsigned int v18 = *v16++;
      uint64_t v17 = (33 * v17) ^ v18;
    }
    while (v18);
  }
  std::mutex::lock(ServiceMap);
  *(void *)buf = v15;
  v19 = sub_10004D37C(&v14[1].__m_.__sig, (unint64_t *)buf);
  BOOL v66 = a5;
  unsigned int v67 = a3;
  if (!v19)
  {
    uint64_t v21 = 0;
LABEL_11:
    std::mutex::unlock(v14);
    uint64_t v20 = 0;
    char v22 = 1;
    if (!v21) {
      goto LABEL_15;
    }
    goto LABEL_12;
  }
  uint64_t v21 = v19[3];
  uint64_t v20 = (std::__shared_weak_count *)v19[4];
  if (!v20) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v14);
  atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v20);
  char v22 = 0;
  if (!v21)
  {
LABEL_15:
    sub_100D8C568((void *)a1);
    int v24 = 0;
    if (v22) {
      goto LABEL_17;
    }
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v23 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v21 + 1200))(v21, v23) & 1) == 0) {
    goto LABEL_15;
  }
  int v24 = 1;
  if ((v22 & 1) == 0) {
LABEL_16:
  }
    sub_10004D2C8(v20);
LABEL_17:
  if (!v24) {
    return 1;
  }
  uint64_t v25 = *(void *)(a1 + 112);
  if (v25) {
    char v26 = (*(uint64_t (**)(uint64_t, void))(*(void *)v25 + 312))(v25, v67);
  }
  else {
    char v26 = 0;
  }
  unsigned int v28 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = asStringBool(v65);
    uint64_t v30 = asString();
    uint64_t v31 = asStringBool();
    uint64_t v32 = asStringBool(v26);
    uint64_t v33 = asStringBool(v66);
    *(_DWORD *)buf = 136316418;
    *(void *)&buf[4] = "activateHOInterface";
    *(_WORD *)&buf[12] = 2080;
    *(void *)&buf[14] = v29;
    *(_WORD *)&buf[22] = 2080;
    uint64_t v85 = v30;
    __int16 v86 = 2080;
    uint64_t v87 = v31;
    __int16 v88 = 2080;
    uint64_t v89 = v32;
    __int16 v90 = 2080;
    uint64_t v91 = v33;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s: value=%s ct = %s handover = %s activatorHandover=%s completed = %s", buf, 0x3Eu);
  }
  if ((a4 & 0xFF00) == 0)
  {
    uint64_t v34 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v35 = asStringBool();
      *(_DWORD *)buf = 136315394;
      *(void *)&buf[4] = "activateHOInterface";
      *(_WORD *)&buf[12] = 2080;
      *(void *)&buf[14] = v35;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I %s: update handover to %s", buf, 0x16u);
    }
    LOBYTE(a4) = v26;
  }
  uint64_t v76 = 0;
  int v77 = 0;
  uint64_t v78 = 0;
  (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 728))(&v76, a1, 1);
  if (!v78)
  {
    uint64_t v46 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "activateHOInterface";
      _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I %s: resources empty", buf, 0xCu);
    }
    uint64_t v27 = 1;
    goto LABEL_134;
  }
  uint64_t v36 = v76;
  if (v76 == &v77)
  {
    uint64_t v68 = 0;
LABEL_65:
    int v48 = *(NSObject **)(a1 + 64);
    if (!os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_68;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = "activateHOInterface";
    BOOL v50 = "#E %s: No IPSec Interface found, failed";
LABEL_67:
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, v50, buf, 0xCu);
LABEL_68:
    uint64_t v27 = 0;
    *(void *)a6 = 0x1FFFFFFFFLL;
    *(unsigned char *)(a6 + 8) = 0;
    goto LABEL_131;
  }
  uint64_t v64 = a6;
  uint64_t v37 = 0;
  uint64_t v68 = 0;
  uint64_t v38 = kIPsecInterfaceSettingsResource;
  while (1)
  {
    uint64_t v39 = (const void *)v36[4];
    uint64_t v40 = (std::__shared_weak_count *)v36[5];
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if ((*(uint64_t (**)(const void *))(*(void *)v39 + 16))(v39) != v38)
    {
      if (!v40) {
        goto LABEL_47;
      }
      goto LABEL_46;
    }
    if (!v41)
    {
      uint64_t v51 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&buf[4] = "activateHOInterface";
        _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#E %s: kIPsecInterfaceSettingsResource object contains wrong data type, failed", buf, 0xCu);
      }
      *(void *)uint64_t v64 = 0x1FFFFFFFFLL;
      *(unsigned char *)(v64 + 8) = 0;
      if (v40) {
        sub_10004D2C8(v40);
      }
      uint64_t v27 = 0;
      goto LABEL_131;
    }
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v37 = v41[1];
    uint64_t v42 = (std::__shared_weak_count *)v41[2];
    if (v42) {
      atomic_fetch_add_explicit(&v42->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (v68) {
      sub_10004D2C8(v68);
    }
    if (!v37) {
      break;
    }
    if (!v40)
    {
      uint64_t v68 = v42;
      goto LABEL_47;
    }
    sub_10004D2C8(v40);
    uint64_t v68 = v42;
LABEL_46:
    sub_10004D2C8(v40);
LABEL_47:
    char v43 = (void *)v36[1];
    if (v43)
    {
      do
      {
        v44 = (void **)v43;
        char v43 = (void *)*v43;
      }
      while (v43);
    }
    else
    {
      do
      {
        v44 = (void **)v36[2];
        BOOL v45 = *v44 == v36;
        uint64_t v36 = v44;
      }
      while (!v45);
    }
    uint64_t v36 = v44;
    if (v44 == &v77)
    {
      a6 = v64;
      if (!v37) {
        goto LABEL_65;
      }
      if ((_BYTE)a4)
      {
LABEL_80:
        if (!v66)
        {
LABEL_130:
          uint64_t v27 = 1;
          goto LABEL_131;
        }
        v74[0] = 0;
        v74[1] = 0;
        uint64_t v75 = 0;
        sub_100D8D580(a1, v67, 1, v74);
        uint64_t v73 = 0;
        if (SHIBYTE(v75) < 0)
        {
          sub_10004FC84(__dst, v74[0], (unint64_t)v74[1]);
        }
        else
        {
          *(_OWORD *)__dst = *(_OWORD *)v74;
          uint64_t v72 = v75;
        }
        if (SHIBYTE(v72) < 0)
        {
          sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
        }
        else
        {
          *(_OWORD *)__p = *(_OWORD *)__dst;
          uint64_t v81 = v72;
        }
        uint64_t v79 = 0;
        if (SHIBYTE(v81) < 0)
        {
          sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)buf = *(_OWORD *)__p;
          *(void *)&buf[16] = v81;
        }
        v82 = 0;
        if (ctu::cf::convert_copy())
        {
          uint64_t v54 = v79;
          uint64_t v79 = v82;
          v83 = v54;
          sub_1000558F4(&v83);
        }
        if ((buf[23] & 0x80000000) != 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v73 = v79;
        uint64_t v79 = 0;
        sub_1000558F4(&v79);
        if (SHIBYTE(v81) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v72) < 0) {
          operator delete(__dst[0]);
        }
        if (v73) {
          unsigned int v55 = sub_1000810B8;
        }
        else {
          unsigned int v55 = 0;
        }
        unsigned int v56 = *(NSObject **)(a1 + 64);
        BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
        if (v55)
        {
          if (v57)
          {
            v58 = v74;
            if (v75 < 0) {
              v58 = (void **)v74[0];
            }
            *(_DWORD *)buf = 136315394;
            *(void *)&buf[4] = "activateHOInterface";
            *(_WORD *)&buf[12] = 2080;
            *(void *)&buf[14] = v58;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I %s: rawInterface=%s", buf, 0x16u);
          }
          uint64_t v59 = *(void *)(a1 + 112);
          if (v59)
          {
            uint64_t v69 = v37;
            unint64_t v70 = v68;
            if (v68) {
              atomic_fetch_add_explicit(&v68->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v27 = (*(uint64_t (**)(uint64_t, uint64_t *, void **))(*(void *)v59 + 40))(v59, &v69, v74);
            if (v70) {
              sub_10004D2C8(v70);
            }
            if ((v27 & 1) == 0)
            {
              uint64_t v60 = *(NSObject **)(a1 + 64);
              if (os_log_type_enabled(v60, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)buf = 136315138;
                *(void *)&buf[4] = "activateHOInterface";
                _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#E %s: cannot configure virtual interface", buf, 0xCu);
              }
              *(void *)uint64_t v64 = 0x1FFFFFFFFLL;
              *(unsigned char *)(v64 + 8) = 0;
            }
            if ((*(uint64_t (**)(uint64_t, const void *))(*(void *)v37 + 112))(v37, v73))
            {
              int v61 = v27 ^ 1;
              goto LABEL_127;
            }
            unsigned int v56 = *(NSObject **)(a1 + 64);
            if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              *(void *)&buf[4] = "activateHOInterface";
              uint64_t v62 = "#E %s: delegate interface failed";
              goto LABEL_125;
            }
LABEL_126:
            uint64_t v27 = 0;
            *(void *)uint64_t v64 = 0x1FFFFFFFFLL;
            *(unsigned char *)(v64 + 8) = 0;
            int v61 = 1;
LABEL_127:
            sub_1000558F4(&v73);
            if (SHIBYTE(v75) < 0) {
              operator delete(v74[0]);
            }
            if (!v61) {
              goto LABEL_130;
            }
LABEL_131:
            int v53 = v68;
            goto LABEL_132;
          }
          unsigned int v56 = *(NSObject **)(a1 + 64);
          if (!os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_126;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = "activateHOInterface";
          uint64_t v62 = "#E %s: no data activator";
        }
        else
        {
          if (!v57) {
            goto LABEL_126;
          }
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = "activateHOInterface";
          uint64_t v62 = "#E %s: rawInterface empty !";
        }
LABEL_125:
        _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, v62, buf, 0xCu);
        goto LABEL_126;
      }
      if (!v65)
      {
        (*(void (**)(uint64_t))(*(void *)v37 + 120))(v37);
        goto LABEL_80;
      }
      char v47 = (*(uint64_t (**)(uint64_t, void))(*(void *)v37 + 104))(v37, *(void *)(a1 + 48));
      int v48 = *(NSObject **)(a1 + 64);
      BOOL v49 = os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT);
      if (v47)
      {
        if (v49)
        {
          *(_DWORD *)buf = 136315138;
          *(void *)&buf[4] = "activateHOInterface";
          _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I %s: VirtualInterface created", buf, 0xCu);
        }
        goto LABEL_80;
      }
      if (!v49) {
        goto LABEL_68;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&buf[4] = "activateHOInterface";
      BOOL v50 = "#E %s: VirtualInterface create failed";
      goto LABEL_67;
    }
  }
  v52 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    *(void *)&buf[4] = "activateHOInterface";
    _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#E %s: kIPsecInterfaceSettingsResource object contains empty interface, failed", buf, 0xCu);
  }
  *(void *)uint64_t v64 = 0x1FFFFFFFFLL;
  *(unsigned char *)(v64 + 8) = 0;
  if (v40)
  {
    sub_10004D2C8(v40);
    sub_10004D2C8(v40);
  }
  uint64_t v27 = 0;
  int v53 = v42;
LABEL_132:
  if (v53) {
    sub_10004D2C8(v53);
  }
LABEL_134:
  sub_100103DF0((uint64_t)&v76, v77);
  return v27;
}

void sub_100D8D488(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,const void *a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,char a29,void *a30,uint64_t a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  sub_100103DF0((uint64_t)&a29, a30);
  _Unwind_Resume(a1);
}

void sub_100D8D580(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(uint64_t **)(a1 + 112);
  if (!v5)
  {
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(a1 + 72));
  uint64_t v10 = ServiceMap;
  if (v11 < 0)
  {
    BOOL v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v42 = (void **)v11;
  uint64_t v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)&v42);
  if (!v15)
  {
    uint64_t v17 = 0;
LABEL_11:
    std::mutex::unlock(v10);
    v16 = 0;
    char v18 = 1;
    if (a3) {
      goto LABEL_61;
    }
    goto LABEL_12;
  }
  uint64_t v17 = v15[3];
  v16 = (std::__shared_weak_count *)v15[4];
  if (!v16) {
    goto LABEL_11;
  }
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v16);
  char v18 = 0;
  if (a3) {
    goto LABEL_61;
  }
LABEL_12:
  if (v17)
  {
    uint64_t v19 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
    if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v17 + 1200))(v17, v19))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 1056))(a1))
      {
        uint64_t v42 = 0;
        char v43 = 0;
        uint64_t v44 = 0;
        (*(void (**)(void ***__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 728))(&v42, a1, 1);
        if (!v44)
        {
          sub_100103DF0((uint64_t)&v42, v43);
          goto LABEL_61;
        }
        uint64_t v20 = v42;
        uint64_t v21 = &v43;
        if (v42 == &v43)
        {
          uint64_t v38 = 0;
LABEL_55:
          uint64_t v34 = *(NSObject **)(a1 + 64);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v46 = "getNetworkInterface";
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#E %s: No IPSec Interface found, failed", buf, 0xCu);
          }
          int v24 = 2;
LABEL_58:
          if (v38) {
            sub_10004D2C8(v38);
          }
          sub_100103DF0((uint64_t)&v42, v43);
          if (v24 != 2) {
            goto LABEL_63;
          }
          goto LABEL_61;
        }
        uint64_t v37 = 0;
        uint64_t v38 = 0;
        uint64_t v39 = kIPsecInterfaceSettingsResource;
        char v36 = v18;
        while (1)
        {
          char v22 = v20[4];
          uint64_t v23 = (std::__shared_weak_count *)v20[5];
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if ((*(uint64_t (**)(void *))(*v22 + 16))(v22) != v39) {
            break;
          }
          if (!v25)
          {
            uint64_t v29 = *(NSObject **)(a1 + 64);
            if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v46 = "getNetworkInterface";
              _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#E %s: kIPsecInterfaceSettingsResource object contains wrong data type, failed", buf, 0xCu);
            }
            int v24 = 2;
LABEL_22:
            if (v23) {
              goto LABEL_41;
            }
            goto LABEL_42;
          }
          char v26 = v21;
          if (v23) {
            atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v28 = v25[1];
          uint64_t v27 = (std::__shared_weak_count *)v25[2];
          if (v27) {
            atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v38) {
            sub_10004D2C8(v38);
          }
          uint64_t v37 = v28;
          if (!v28)
          {
            uint64_t v30 = *(NSObject **)(a1 + 64);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v46 = "getNetworkInterface";
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#E %s: kIPsecInterfaceSettingsResource object contains empty interface, failed", buf, 0xCu);
            }
            int v24 = 2;
            if (!v23)
            {
              uint64_t v38 = v27;
              char v18 = v36;
              goto LABEL_58;
            }
LABEL_40:
            sub_10004D2C8(v23);
            uint64_t v38 = v27;
            uint64_t v21 = v26;
            char v18 = v36;
LABEL_41:
            sub_10004D2C8(v23);
LABEL_42:
            if (v24) {
              goto LABEL_58;
            }
            goto LABEL_43;
          }
          if (v23)
          {
            int v24 = 0;
            goto LABEL_40;
          }
          uint64_t v38 = v27;
          uint64_t v21 = v26;
          char v18 = v36;
LABEL_43:
          uint64_t v31 = v20[1];
          if (v31)
          {
            do
            {
              uint64_t v32 = v31;
              uint64_t v31 = (void *)*v31;
            }
            while (v31);
          }
          else
          {
            do
            {
              uint64_t v32 = v20[2];
              BOOL v33 = *v32 == (void)v20;
              uint64_t v20 = (void **)v32;
            }
            while (!v33);
          }
          uint64_t v20 = (void **)v32;
          if (v32 == v21)
          {
            if (!v37) {
              goto LABEL_55;
            }
            *a4 = 0;
            a4[1] = 0;
            a4[2] = 0;
            (*(void (**)(uint64_t))(*(void *)v37 + 128))(v37);
            int v24 = 1;
            goto LABEL_58;
          }
        }
        int v24 = 0;
        goto LABEL_22;
      }
    }
  }
LABEL_61:
  uint64_t v35 = *(void *)(a1 + 112);
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v40, a1);
  (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v35 + 200))(v35, a2, &v40, a3);
  if (v41) {
    sub_10004D2C8(v41);
  }
LABEL_63:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
}

void sub_100D8DAFC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, void *a19)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_100103DF0((uint64_t)&a18, a19);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D8DB74(uint64_t a1, BOOL a2, unsigned int a3, __int16 a4, BOOL a5, uint64_t a6)
{
  return sub_100D8C914(a1 - 24, a2, a3, a4, a5, a6);
}

void sub_100D8DB80(PersonalitySpecificImpl *a1)
{
  if (capabilities::ct::supportsIPCInterfaceConfig(a1))
  {
    BOOL v11 = 0;
    uint64_t v2 = (*(uint64_t (**)(PersonalitySpecificImpl *, void, uint64_t, void))(*(void *)a1 + 136))(a1, 0, 1, 0);
    uint64_t v3 = *((void *)a1 + 14);
    uint64_t v4 = PersonalitySpecificImpl::simSlot(a1);
    LODWORD(v2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t, BOOL *))(*(void *)v3 + 432))(v3, v4, 1, v2, &v11);
    uint64_t v5 = *((void *)a1 + 8);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    if (v2)
    {
      if (!v6) {
        return;
      }
      uint64_t v7 = asStringBool(v11);
      *(_DWORD *)buf = 136315394;
      uint64_t v13 = "ipcInterfaceConfig";
      __int16 v14 = 2080;
      uint64_t v15 = v7;
      v8 = "#I %s: success, updated: %s";
      v9 = v5;
      uint32_t v10 = 22;
    }
    else
    {
      if (!v6) {
        return;
      }
      *(_DWORD *)buf = 136315138;
      uint64_t v13 = "ipcInterfaceConfig";
      v8 = "#E %s: failure";
      v9 = v5;
      uint32_t v10 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v8, buf, v10);
  }
}

uint64_t sub_100D8DD24(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = a1[8];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v8 = asStringBool(a2 != 0);
    uint64_t v9 = asString();
    uint64_t v10 = asStringBool(*(_DWORD *)a4 < 2u);
    *(_DWORD *)buf = 136315906;
    uint64_t v51 = "handleDataContextActivateError_Sync";
    __int16 v52 = 2080;
    uint64_t v53 = v8;
    __int16 v54 = 2080;
    uint64_t v55 = v9;
    __int16 v56 = 2080;
    uint64_t v57 = v10;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: observer=%s, ct=%s, newResult=%s", buf, 0x2Au);
  }
  uint64_t v31 = a2;
  sub_100D9EB8C(a1, a2, a3);
  int v11 = sub_100D9D4EC((uint64_t)a1, a3);
  int v49 = v11;
  int v12 = validContextType() ^ 1;
  if (v11 == a3) {
    LOBYTE(v12) = 1;
  }
  if (v12) {
    return 0;
  }
  uint64_t result = validContextType();
  if (!result) {
    return result;
  }
  __int16 v14 = a1[8];
  if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v15 = asString();
    uint64_t v16 = asString();
    *(_DWORD *)buf = 136315650;
    uint64_t v51 = "handleDataContextActivateError_Sync";
    __int16 v52 = 2080;
    uint64_t v53 = v15;
    __int16 v54 = 2080;
    uint64_t v55 = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: Activate %s failed, will try on %s", buf, 0x20u);
  }
  uint64_t v17 = &a1[3 * (int)a3];
  uint64_t v18 = v17[15];
  uint64_t v35 = v17[16];
  if (v18 == v35) {
    return 0;
  }
  int v19 = 0;
  char v20 = &a1[3 * v11];
  BOOL v33 = v20 + 16;
  uint64_t v34 = v20 + 15;
  do
  {
    if (*(unsigned char *)(v18 + 16) && validContextType())
    {
      uint64_t v21 = *v34;
      uint64_t v22 = *v33;
      while (v21 != v22)
      {
        uint64_t v23 = *(void *)(v21 + 8);
        if (v23 == *(void *)(v18 + 8))
        {
          *(unsigned char *)(v18 + 16) = 0;
          *(unsigned char *)(v21 + 16) = 1;
          int v24 = a1[8];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(uint64_t))(*(void *)v23 + 200))(v23);
            uint64_t v25 = asString();
            uint64_t v26 = asString();
            uint64_t v27 = asString();
            *(_DWORD *)buf = 136315906;
            uint64_t v51 = "handleDataContextActivateError_Sync";
            __int16 v52 = 2080;
            uint64_t v53 = v25;
            __int16 v54 = 2080;
            uint64_t v55 = v26;
            __int16 v56 = 2080;
            uint64_t v57 = v27;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Switching observer %s from %s to %s (change states)", buf, 0x2Au);
          }
          ++v19;
        }
        v21 += 24;
      }
    }
    v18 += 24;
  }
  while (v18 != v35);
  if (!v19) {
    return 0;
  }
  uint64_t v28 = a1[8];
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = asString();
    *(_DWORD *)buf = 136315394;
    uint64_t v51 = "handleDataContextActivateError_Sync";
    __int16 v52 = 2080;
    uint64_t v53 = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s: scheduling fallbackType %s", buf, 0x16u);
  }
  v37[0] = 1;
  uint64_t v38 = "fallback activation (sync)";
  uint64_t v39 = "CommCenter";
  char v40 = 0;
  int v41 = 0;
  char v42 = 0;
  int v43 = 0;
  __int16 v44 = 0;
  uint64_t v46 = 0;
  uint64_t v47 = 0;
  uint64_t v45 = 0;
  char v48 = 0;
  sub_100D932C8((uint64_t)__p, (uint64_t)a1, v11);
  *(void *)a4 = sub_100D8B390(a1, v31, &v49, 0, v37, __p);
  *(unsigned char *)(a4 + 8) = v30;
  if (__p[0])
  {
    __p[1] = __p[0];
    operator delete(__p[0]);
  }
  return 1;
}

void sub_100D8E154(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D8E178(uint64_t a1, int a2, int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 264);
  if (v4)
  {
    if (a3)
    {
      if (a4 && *(unsigned char *)(v4 + 180))
      {
        unsigned int v5 = *(_DWORD *)(v4 + 176);
        if (a2) {
          goto LABEL_20;
        }
      }
      else
      {
        unsigned int v5 = *(_DWORD *)(v4 + 168);
        if (a2) {
          goto LABEL_20;
        }
      }
    }
    else
    {
      unsigned int v5 = *(_DWORD *)(v4 + 172);
      if (a2) {
        goto LABEL_20;
      }
    }
  }
  else
  {
    unsigned int v5 = 1;
    if (a2) {
      goto LABEL_20;
    }
  }
  if (*(unsigned char *)(a1 + 632)) {
    BOOL v6 = v5 == 2;
  }
  else {
    BOOL v6 = 0;
  }
  if (v6)
  {
    if (*(unsigned char *)(a1 + 633)) {
      unsigned int v5 = 3;
    }
    else {
      unsigned int v5 = 1;
    }
  }
LABEL_20:
  uint64_t v7 = a1 + a2;
  if (*(unsigned char *)(v7 + 346)) {
    v5 &= ~2u;
  }
  if (*(unsigned char *)(v7 + 344)) {
    return v5 & 0xFFFFFFFE;
  }
  else {
    return v5;
  }
}

uint64_t sub_100D8E204(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, int a6)
{
  if (validContextType())
  {
    CFBooleanRef BOOLean = 0;
    *(void *)buf = CFPreferencesCopyAppValue(@"DualIPBringUp", @"com.apple.commcenter");
    sub_1000BE34C(&BOOLean, (CFTypeRef *)buf);
    if (BOOLean) {
      int v12 = sub_100084B4C;
    }
    else {
      int v12 = 0;
    }
    int v61 = a4;
    if (v12 && CFBooleanGetValue(BOOLean))
    {
      uint64_t v13 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)buf = 136315138;
        *(void *)&uint8_t buf[4] = "validateIPFamily";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: The Key DualIPBringUp found and TRUE bringing up both IPv4 and IPv6", buf, 0xCu);
      }
      int v14 = 3;
      *a3 = 3;
      uint64_t v15 = (int)a2;
      *(unsigned char *)(a1 + (int)a2 + 240) = 0;
      goto LABEL_72;
    }
    if (a2 || !*(unsigned char *)(a1 + 632)) {
      char v18 = sub_100D8E178(a1, a2, a5, a6) & 1;
    }
    else {
      char v18 = 1;
    }
    char v62 = v18;
    if (validContextType())
    {
      if (a2 || !*(unsigned char *)(a1 + 632) || *(unsigned char *)(a1 + 633))
      {
        unsigned int v19 = sub_100D8E178(a1, a2, a5, a6);
        int v20 = (v19 >> 1) & 1;
        if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 1024))(a1, a2)) {
          goto LABEL_50;
        }
        if (v61 >= 1)
        {
          CFTypeRef cf = 0;
          ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)(v61 - 1), *(Registry **)(a1 + 72));
          uint64_t v22 = ServiceMap;
          if (v23 < 0)
          {
            int v24 = (unsigned __int8 *)(v23 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v25 = 5381;
            do
            {
              uint64_t v23 = v25;
              unsigned int v26 = *v24++;
              uint64_t v25 = (33 * v25) ^ v26;
            }
            while (v26);
          }
          std::mutex::lock(ServiceMap);
          *(void *)buf = v23;
          uint64_t v27 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)buf);
          if (v27)
          {
            uint64_t v29 = v27[3];
            uint64_t v28 = (std::__shared_weak_count *)v27[4];
            if (v28)
            {
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v22);
              atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
              sub_10004D2C8(v28);
              char v30 = 0;
LABEL_34:
              uint64_t v33 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
              (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v29 + 96))(&cf, v29, v33, 1, @"IPv6SupportedDataModeMask", 0, 0);
              if ((v30 & 1) == 0) {
                sub_10004D2C8(v28);
              }
              uint64_t v34 = (int *)cf;
              if (cf)
              {
                *(_DWORD *)buf = 0;
                CFTypeID v35 = CFGetTypeID(cf);
                if (v35 == CFNumberGetTypeID())
                {
                  ctu::cf::assign((ctu::cf *)buf, v34, v36);
                  int v37 = *(_DWORD *)buf;
                }
                else
                {
                  int v37 = 0;
                }
                uint64_t v39 = *(NSObject **)(a1 + 64);
                if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "isIPv6Allowed";
                  __int16 v66 = 1024;
                  LODWORD(v67) = v37;
                  _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: Read Carrier Bundle value of v6SupportedDataModeMask = %d", buf, 0x12u);
                }
                *(unsigned char *)(a1 + (int)a2 + 256) = 1;
                *(_DWORD *)(a1 + 4 * (int)a2 + 248) = v37;
              }
              else
              {
                int v37 = 110620;
                *(unsigned char *)(a1 + (int)a2 + 256) = 0;
                *(_DWORD *)(a1 + 4 * (int)a2 + 248) = -1;
                uint64_t v38 = *(NSObject **)(a1 + 64);
                if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
                {
                  *(_DWORD *)buf = 136315394;
                  *(void *)&uint8_t buf[4] = "isIPv6Allowed";
                  __int16 v66 = 1024;
                  LODWORD(v67) = 110620;
                  _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s: Failed to get value of v6SupportedDataModeMask from bundle, using %d", buf, 0x12u);
                }
              }
              if ((v37 & (1 << (v61 - 1))) == 0)
              {
                LOBYTE(v20) = 0;
                if ((v19 & 2) != 0)
                {
                  char v40 = *(NSObject **)(a1 + 64);
                  LOBYTE(v20) = 0;
                  if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v41 = asString();
                    *(_DWORD *)buf = 136315394;
                    *(void *)&uint8_t buf[4] = "isIPv6Allowed";
                    __int16 v66 = 2080;
                    unsigned int v67 = (const char *)v41;
                    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s: IPv6 is allowed but can not be supported in current DataMode %s", buf, 0x16u);
                    LOBYTE(v20) = 0;
                  }
                }
              }
              sub_1000577C4(&cf);
              goto LABEL_50;
            }
          }
          else
          {
            uint64_t v29 = 0;
          }
          std::mutex::unlock(v22);
          uint64_t v28 = 0;
          char v30 = 1;
          goto LABEL_34;
        }
      }
    }
    else
    {
      uint64_t v31 = *(NSObject **)(a1 + 64);
      LOBYTE(v20) = 0;
      if (!os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_50;
      }
      uint64_t v32 = asString();
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "isIPv6Allowed";
      __int16 v66 = 2080;
      unsigned int v67 = (const char *)v32;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
    LOBYTE(v20) = 0;
LABEL_50:
    *(unsigned char *)(a1 + (int)a2 + 240) = v62 ^ 1;
    int v42 = *a3;
    if (!*a3)
    {
      if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
        goto LABEL_52;
      }
      *(_DWORD *)buf = 136315650;
      *(void *)&uint8_t buf[4] = "Bad protocol family";
      __int16 v66 = 2080;
      unsigned int v67 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataAPNSettings.cpp";
      __int16 v68 = 1024;
      LODWORD(v69) = 2117;
      _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT ipFamily != kDataProtocolFamilyAny\n %s\n at %s:%d\n**********", buf, 0x1Cu);
      int v42 = *a3;
      if (!*a3)
      {
LABEL_52:
        __TUAssertTrigger();
        int v42 = *a3;
      }
    }
    int v14 = v42;
    if (v42 == 3)
    {
      int v43 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v44 = asString();
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "validateIPFamily";
        __int16 v66 = 2080;
        unsigned int v67 = (const char *)v44;
        _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I %s: Trying to activate Any family with protocol mask %s", buf, 0x16u);
        int v14 = *a3;
      }
      else
      {
        int v14 = 3;
      }
    }
    char v45 = v62;
    if ((v14 & 1) == 0) {
      char v45 = 1;
    }
    if ((v45 & 1) == 0)
    {
      uint64_t v46 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v47 = asString();
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "validateIPFamily";
        __int16 v66 = 2080;
        unsigned int v67 = (const char *)v47;
        _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I %s: Trying to activate %s but IPv4 is not allowed", buf, 0x16u);
        int v14 = *a3;
      }
      v14 &= ~1u;
      *a3 = v14;
    }
    if ((v14 & 2) != 0) {
      char v48 = v20;
    }
    else {
      char v48 = 1;
    }
    if ((v48 & 1) == 0)
    {
      int v49 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v50 = asString();
        *(_DWORD *)buf = 136315394;
        *(void *)&uint8_t buf[4] = "validateIPFamily";
        __int16 v66 = 2080;
        unsigned int v67 = (const char *)v50;
        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I %s: Trying to activate %s but IPv6 is not allowed", buf, 0x16u);
        int v14 = *a3;
      }
      v14 &= ~2u;
      *a3 = v14;
    }
    if (!v14)
    {
      v58 = *(NSObject **)(a1 + 64);
      uint64_t v17 = 0;
      if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_85;
      }
      *(_DWORD *)buf = 136315138;
      *(void *)&uint8_t buf[4] = "validateIPFamily";
      uint64_t v59 = "#I %s: No protocol available - validation failed (1)";
      goto LABEL_84;
    }
    uint64_t v15 = (int)a2;
LABEL_72:
    uint64_t v51 = a1 + v15;
    if (*(unsigned char *)(v51 + 346))
    {
      v14 &= ~2u;
      *a3 = v14;
    }
    if (*(unsigned char *)(v51 + 344))
    {
      v14 &= ~1u;
      *a3 = v14;
    }
    __int16 v52 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v52, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v53 = asString();
      uint64_t v54 = asString();
      uint64_t v55 = asString();
      uint64_t v56 = asStringBool(a5);
      uint64_t v57 = asStringBool(a6);
      *(_DWORD *)buf = 136316418;
      *(void *)&uint8_t buf[4] = "validateIPFamily";
      __int16 v66 = 2080;
      unsigned int v67 = (const char *)v53;
      __int16 v68 = 2080;
      uint64_t v69 = v54;
      __int16 v70 = 2080;
      uint64_t v71 = v55;
      __int16 v72 = 2080;
      uint64_t v73 = v56;
      __int16 v74 = 2080;
      uint64_t v75 = v57;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I %s: ipFamily = %s->%s currentMode=%s, isHomeCountry=%s, isRoaming=%s", buf, 0x3Eu);
      int v14 = *a3;
    }
    if (v14)
    {
      uint64_t v17 = 1;
LABEL_85:
      sub_100062778((const void **)&BOOLean);
      return v17;
    }
    v58 = *(NSObject **)(a1 + 64);
    uint64_t v17 = 0;
    if (!os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_85;
    }
    *(_DWORD *)buf = 136315138;
    *(void *)&uint8_t buf[4] = "validateIPFamily";
    uint64_t v59 = "#I %s: No protocol available - validation failed (2)";
LABEL_84:
    _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, v59, buf, 0xCu);
    uint64_t v17 = 0;
    goto LABEL_85;
  }
  uint64_t v16 = *(NSObject **)(a1 + 64);
  uint64_t v17 = 0;
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "validateIPFamily";
    __int16 v66 = 2080;
    unsigned int v67 = (const char *)asString();
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    return 0;
  }
  return v17;
}

void sub_100D8EB94(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va1, a5);
  va_start(va, a5);
  BOOL v6 = va_arg(va1, const void *);
  sub_1000577C4((const void **)va1);
  sub_100062778((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100D8EBFC(uint64_t a1, uint64_t a2, int *a3, int a4, int a5, int a6)
{
  return sub_100D8E204(a1 - 24, a2, a3, a4, a5, a6);
}

uint64_t sub_100D8EC04(uint64_t a1, int a2, int a3, int a4)
{
  return sub_100D8E178(a1 - 24, a2, a3, a4);
}

uint64_t sub_100D8EC0C(uint64_t a1, int a2)
{
  if ((validContextType() & 1) == 0)
  {
    int v11 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = 136315394;
      int v14 = "getAppType";
      __int16 v15 = 2080;
      uint64_t v16 = asString();
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v13, 0x16u);
    }
    return 3;
  }
  uint64_t v4 = a1 + 24 * a2;
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5 == v6) {
    return 3;
  }
  LODWORD(v7) = 3;
  do
  {
    (*(void (**)(void))(**(void **)(v5 + 8) + 200))(*(void *)(v5 + 8));
    int AppType = DataiRatControllerInterface::getAppType();
    if ((int)v7 < AppType || v7 == 3) {
      unsigned int v10 = AppType;
    }
    else {
      unsigned int v10 = v7;
    }
    if (AppType == 3) {
      uint64_t v7 = v7;
    }
    else {
      uint64_t v7 = v10;
    }
    v5 += 24;
  }
  while (v5 != v6);
  return v7;
}

uint64_t sub_100D8ED4C(uint64_t a1, int a2)
{
  return sub_100D8EC0C(a1 - 24, a2);
}

BOOL sub_100D8ED54(uint64_t a1, int a2, int a3)
{
  if ((validContextType() & 1) == 0)
  {
    int v12 = *(NSObject **)(a1 + 64);
    BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
    BOOL result = 0;
    if (!v13) {
      return result;
    }
    int v14 = 136315394;
    __int16 v15 = "isConnectionOnThisSettings";
    __int16 v16 = 2080;
    uint64_t v17 = asString();
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v14, 0x16u);
    return 0;
  }
  uint64_t v6 = a1 + 24 * a2;
  uint64_t v7 = *(void *)(v6 + 120);
  uint64_t v8 = *(void *)(v6 + 128);
  if (v7 == v8) {
    return 0;
  }
  uint64_t v9 = v7 + 24;
  do
  {
    BOOL v11 = (*(unsigned int (**)(void))(**(void **)(v9 - 16) + 200))(*(void *)(v9 - 16)) == a3;
    BOOL result = v11;
    BOOL v11 = v11 || v9 == v8;
    v9 += 24;
  }
  while (!v11);
  return result;
}

BOOL sub_100D8EE8C(uint64_t a1, int a2, int a3)
{
  return sub_100D8ED54(a1 - 24, a2, a3);
}

void sub_100D8EE94(uint64_t a1, int a2, uint64_t a3)
{
  if (validContextType())
  {
    memset(v9, 0, sizeof(v9));
    sub_100DA1880(v9, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v6 = (void **)v9[0];
    uint64_t v7 = (void **)v9[1];
    if (v9[0] != v9[1])
    {
      do
      {
        (*(void (**)(void *, uint64_t))(*v6[1] + 104))(v6[1], a3);
        v6 += 3;
      }
      while (v6 != v7);
      uint64_t v6 = (void **)v9[0];
    }
    if (v6)
    {
      v9[1] = v6;
      operator delete(v6);
    }
  }
  else
  {
    uint64_t v8 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v9[0]) = 136315394;
      *(void *)((char *)v9 + 4) = "handleDataContextMOBIKEDone";
      WORD2(v9[1]) = 2080;
      *(void *)((char *)&v9[1] + 6) = asString();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v9, 0x16u);
    }
  }
}

void sub_100D8EFF4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_100D8F018(uint64_t a1, int a2, uint64_t a3)
{
}

void sub_100D8F020(uint64_t a1, int a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_100D8F134;
  v4[3] = &unk_101A580D8;
  v4[4] = a1;
  int v5 = a2;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_10003E168(&v8, (void *)(a1 + 32));
  uint64_t v3 = *(NSObject **)(a1 + 48);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100DA1C00;
  block[3] = &unk_101A58D60;
  block[5] = v8;
  uint64_t v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  block[4] = v4;
  dispatch_async(v3, block);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100D8F134(uint64_t a1)
{
  uint64_t v2 = *(PersonalitySpecificImpl **)(a1 + 32);
  uint64_t v3 = *((void *)v2 + 8);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "retryPendingActivations_block_invoke";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s: retrying for %s", buf, 0x16u);
  }
  uint64_t v4 = *((void *)v2 + 55);
  if (v4)
  {
    *((void *)v2 + 55) = 0;
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    uint64_t v5 = sub_100D89AB4((uint64_t)v2, 0, 0);
    sub_100058DB0(buf, "Check if need to switchOver after out of pending");
    char v6 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, uint8_t *))(*(void *)v2 + 1216))(v2, v5, buf);
    char v7 = v6;
    if ((char)buf[23] < 0)
    {
      operator delete(*(void **)buf);
      if (v7) {
        return;
      }
    }
    else if (v6)
    {
      return;
    }
    sub_100D8F454(v2, v5);
  }
  if (validContextType())
  {
    uint64_t v8 = (void *)((char *)v2 + 24 * *(int *)(a1 + 40));
    memset(buf, 0, sizeof(buf));
    sub_100DA1880(buf, (const void *)v8[15], v8[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8[16] - v8[15]) >> 3));
    uint64_t v9 = *(void **)buf;
    unsigned int v10 = *(void **)&buf[8];
    if (*(void *)buf != *(void *)&buf[8])
    {
      do
      {
        uint64_t v11 = v9[1];
        v14[0] = 1;
        __int16 v15 = "reactivate pending";
        __int16 v16 = "CommCenter";
        char v17 = 0;
        int v18 = 0;
        char v19 = 0;
        int v20 = 0;
        __int16 v21 = 0;
        uint64_t v23 = 0;
        uint64_t v24 = 0;
        __p = 0;
        char v25 = 0;
        (*(void (**)(uint64_t, char *))(*(void *)v11 + 120))(v11, v14);
        if (SHIBYTE(v24) < 0) {
          operator delete(__p);
        }
        v9 += 3;
      }
      while (v9 != v10);
      uint64_t v9 = *(void **)buf;
    }
    if (v9)
    {
      *(void *)&buf[8] = v9;
      operator delete(v9);
    }
  }
  else
  {
    int v12 = *((void *)v2 + 8);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v13 = asString();
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "retryPendingActivations_block_invoke";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
  }
}

void sub_100D8F40C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D8F454(PersonalitySpecificImpl *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "handoverFailed";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s", buf, 0x16u);
  }
  if (validContextType())
  {
    *(_OWORD *)&buf[8] = 0uLL;
    *(void *)buf = &buf[8];
    uint64_t v5 = dword_1015716C8;
    do
    {
      char v6 = (char *)a1 + 24 * *v5;
      __p = 0;
      uint64_t v39 = 0;
      uint64_t v40 = 0;
      sub_100DA1880(&__p, *((const void **)v6 + 15), *((void *)v6 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)v6 + 16) - *((void *)v6 + 15)) >> 3));
      char v7 = (std::__shared_weak_count *)__p;
      uint64_t v8 = v39;
      if (__p != v39)
      {
        do
        {
          if (LOBYTE(v7->__shared_weak_owners_)) {
            sub_100DA1CD4((uint64_t *)buf, v7->__shared_owners_, v7->__shared_owners_);
          }
          ++v7;
        }
        while (v7 != v8);
        char v7 = (std::__shared_weak_count *)__p;
      }
      if (v7)
      {
        uint64_t v39 = v7;
        operator delete(v7);
      }
      ++v5;
    }
    while (v5 != &dword_1015716D0);
    if (sub_100D92908((uint64_t)a1) != a2)
    {
      (*(void (**)(PersonalitySpecificImpl *, uint64_t, uint64_t, void))(*(void *)a1 + 856))(a1, a2, 1, 0);
      char v19 = *(void **)buf;
      if (*(unsigned char **)buf != &buf[8])
      {
        int v20 = (void *)((char *)a1 + 32);
        do
        {
          uint64_t v21 = v19[4];
          sub_10003E168(&__p, v20);
          if (__p) {
            uint64_t v22 = (char *)__p + 24;
          }
          else {
            uint64_t v22 = 0;
          }
          CFNumberRef v36 = v22;
          int v37 = v39;
          __p = 0;
          uint64_t v39 = 0;
          (*(void (**)(uint64_t, uint64_t, char **, uint64_t, void))(*(void *)v21 + 296))(v21, a2, &v36, 1, 0);
          if (v37) {
            sub_10004D2C8(v37);
          }
          if (v39) {
            sub_10004D2C8(v39);
          }
          uint64_t v23 = (void *)v19[1];
          if (v23)
          {
            do
            {
              uint64_t v24 = v23;
              uint64_t v23 = (void *)*v23;
            }
            while (v23);
          }
          else
          {
            do
            {
              uint64_t v24 = (unsigned char *)v19[2];
              BOOL v25 = *(void *)v24 == (void)v19;
              char v19 = v24;
            }
            while (!v25);
          }
          char v19 = v24;
        }
        while (v24 != &buf[8]);
      }
      goto LABEL_57;
    }
    if (validContextType())
    {
      ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *((Registry **)a1 + 9));
      uint64_t v11 = ServiceMap;
      if (v12 < 0)
      {
        uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v14 = 5381;
        do
        {
          uint64_t v12 = v14;
          unsigned int v15 = *v13++;
          uint64_t v14 = (33 * v14) ^ v15;
        }
        while (v15);
      }
      std::mutex::lock(ServiceMap);
      __p = (void *)v12;
      __int16 v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)&__p);
      if (v16)
      {
        uint64_t v18 = v16[3];
        char v17 = (std::__shared_weak_count *)v16[4];
        if (v17)
        {
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v11);
          atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v17);
          if (!v18)
          {
LABEL_56:
            sub_10004D2C8(v17);
            goto LABEL_57;
          }
LABEL_40:
          uint64_t v34 = 0;
          CFTypeID v35 = 0;
          (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v18 + 432))(&v34, v18);
          if (v34)
          {
            unsigned int v26 = *(unsigned char **)buf;
            if (*(unsigned char **)buf != &buf[8])
            {
              do
              {
                uint64_t v27 = v34;
                uint64_t v28 = PersonalitySpecificImpl::simSlot(a1);
                uint64_t v29 = (*(uint64_t (**)(void))(**((void **)v26 + 4) + 200))(*((void *)v26 + 4));
                uint64_t v30 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 328))(a1, a2);
                (*(void (**)(void **__return_ptr, PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 536))(&__p, a1, a2);
                if (v40 >= 0) {
                  p_p = &__p;
                }
                else {
                  p_p = __p;
                }
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v27 + 56))(v27, v28, v29, a2, v30, p_p);
                if (SHIBYTE(v40) < 0) {
                  operator delete(__p);
                }
                uint64_t v32 = (void *)*((void *)v26 + 1);
                if (v32)
                {
                  do
                  {
                    uint64_t v33 = v32;
                    uint64_t v32 = (void *)*v32;
                  }
                  while (v32);
                }
                else
                {
                  do
                  {
                    uint64_t v33 = (unsigned char *)*((void *)v26 + 2);
                    BOOL v25 = *(void *)v33 == (void)v26;
                    unsigned int v26 = v33;
                  }
                  while (!v25);
                }
                unsigned int v26 = v33;
              }
              while (v33 != &buf[8]);
            }
          }
          if (v35) {
            sub_10004D2C8(v35);
          }
          if (!v17) {
            goto LABEL_57;
          }
          goto LABEL_56;
        }
        std::mutex::unlock(v11);
        if (v18) {
          goto LABEL_40;
        }
      }
      else
      {
        std::mutex::unlock(v11);
      }
    }
LABEL_57:
    sub_10005D144(*(void **)&buf[8]);
  }
}

void sub_100D8F94C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,void *a21)
{
  if (v21) {
    sub_10004D2C8(v21);
  }
  sub_10005D144(a21);
  _Unwind_Resume(a1);
}

void sub_100D8F9FC(uint64_t a1, int a2)
{
}

uint64_t sub_100D8FA04(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  __p = 0;
  uint64_t v30 = 0;
  uint64_t v5 = dword_1015716C8;
  uint64_t v31 = 0;
  do
  {
    uint64_t v6 = a1 + 24 * *v5;
    uint64_t v7 = *(void *)(v6 + 120);
    uint64_t v8 = *(void *)(v6 + 128);
    while (v7 != v8)
    {
      if (a2 && *(void *)(v7 + 8) == a2 || sub_100D8FD3C(a1, v7))
      {
        if (v30 >= v31)
        {
          unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((v30 - __p) >> 3) + 1;
          if (v11 > 0xAAAAAAAAAAAAAAALL) {
            sub_100DA1868();
          }
          if (0x5555555555555556 * ((v31 - __p) >> 3) > v11) {
            unint64_t v11 = 0x5555555555555556 * ((v31 - __p) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v31 - __p) >> 3) >= 0x555555555555555) {
            unint64_t v12 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v12 = v11;
          }
          if (v12) {
            uint64_t v13 = (char *)sub_10004812C((uint64_t)&v31, v12);
          }
          else {
            uint64_t v13 = 0;
          }
          uint64_t v14 = &v13[8 * ((v30 - __p) >> 3)];
          long long v15 = *(_OWORD *)v7;
          *((void *)v14 + 2) = *(void *)(v7 + 16);
          *(_OWORD *)uint64_t v14 = v15;
          __int16 v16 = v30;
          char v17 = v14;
          if (v30 != __p)
          {
            do
            {
              long long v18 = *(_OWORD *)(v16 - 24);
              *(v17 - 8) = *(v16 - 8);
              *(_OWORD *)(v17 - 24) = v18;
              v17 -= 24;
              v16 -= 24;
            }
            while (v16 != __p);
            __int16 v16 = __p;
          }
          unsigned int v10 = v14 + 24;
          __p = v17;
          uint64_t v31 = &v13[24 * v12];
          if (v16) {
            operator delete(v16);
          }
        }
        else
        {
          long long v9 = *(_OWORD *)v7;
          *((void *)v30 + 2) = *(void *)(v7 + 16);
          *(_OWORD *)uint64_t v30 = v9;
          unsigned int v10 = v30 + 24;
        }
        uint64_t v30 = v10;
      }
      v7 += 24;
    }
    ++v5;
  }
  while (v5 != &dword_1015716D0);
  char v19 = __p;
  uint64_t v20 = 2;
  while (v19 != v30)
  {
    uint64_t v21 = (*(uint64_t (**)(void))(**((void **)v19 + 1) + 208))(*((void *)v19 + 1));
    if (validContextType())
    {
      if (validContextType())
      {
        if (v20 != v21)
        {
          uint64_t v23 = *(NSObject **)(a1 + 64);
          BOOL v24 = os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT);
          uint64_t v22 = a3;
          if (v24)
          {
            uint64_t v25 = asString();
            uint64_t v26 = asString();
            *(_DWORD *)buf = 136315650;
            uint64_t v33 = "getForcedContextType";
            __int16 v34 = 2080;
            uint64_t v35 = v25;
            __int16 v36 = 2080;
            uint64_t v37 = v26;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#E %s: ContextType forced simulataneously on %s and on %s: we cannot proceed with any", buf, 0x20u);
          }
          uint64_t v20 = 2;
          goto LABEL_39;
        }
      }
      else
      {
        uint64_t v20 = v21;
      }
    }
    v19 += 24;
  }
  uint64_t v22 = a3;
  if (!validContextType())
  {
    uint64_t v20 = 2;
    goto LABEL_41;
  }
LABEL_39:
  if (v22) {
    *uint64_t v22 = 1;
  }
LABEL_41:
  if (__p) {
    operator delete(__p);
  }
  return v20;
}

void sub_100D8FD10(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D8FD3C(uint64_t a1, uint64_t a2)
{
  if (*(unsigned char *)(a2 + 16)) {
    return 1;
  }
  if (validContextType())
  {
    int v6 = otherContextType();
    memset(v10, 0, sizeof(v10));
    sub_100DA1880(v10, *(const void **)(a1 + 24 * v6 + 120), *(void *)(a1 + 24 * v6 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * v6 + 128) - *(void *)(a1 + 24 * v6 + 120)) >> 3));
    if (v10[0] == v10[1])
    {
      uint64_t v2 = 0;
    }
    else
    {
      uint64_t v7 = (char *)v10[0] + 24;
      do
      {
        BOOL v8 = *((void *)v7 - 2) != *(void *)(a2 + 8) || *(v7 - 8) == 0;
        uint64_t v2 = !v8;
        if (!v8) {
          break;
        }
        BOOL v8 = v7 == v10[1];
        v7 += 24;
      }
      while (!v8);
    }
    if (v10[0])
    {
      v10[1] = v10[0];
      operator delete(v10[0]);
    }
  }
  else
  {
    long long v9 = *(NSObject **)(a1 + 64);
    uint64_t v2 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v10[0]) = 136315394;
      *(void **)((char *)v10 + 4) = "isObserverCurrentOnSomething";
      WORD2(v10[1]) = 2080;
      *(void **)((char *)&v10[1] + 6) = (void *)asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v10, 0x16u);
      return 0;
    }
  }
  return v2;
}

uint64_t sub_100D8FEB8(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_100D8FA04(a1 - 24, a2, a3);
}

uint64_t sub_100D8FEC0(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 72));
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    uint64_t v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  int v42 = (char *)v4;
  BOOL v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)&v42);
  if (!v8)
  {
    std::mutex::unlock(v3);
    goto LABEL_9;
  }
  uint64_t v9 = v8[3];
  unsigned int v10 = (std::__shared_weak_count *)v8[4];
  uint64_t v41 = v10;
  if (!v10)
  {
    std::mutex::unlock(v3);
    if (v9) {
      goto LABEL_11;
    }
LABEL_9:
    unsigned int v11 = 2;
    goto LABEL_60;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  if (!v9)
  {
    unsigned int v11 = 2;
    unint64_t v12 = v10;
LABEL_59:
    sub_10004D2C8(v12);
    goto LABEL_60;
  }
LABEL_11:
  uint64_t v45 = 0;
  uint64_t v46 = 0;
  (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v9 + 432))(&v45, v9);
  if (!v45)
  {
    unsigned int v11 = 2;
    goto LABEL_56;
  }
  int v42 = 0;
  int v43 = 0;
  uint64_t v13 = dword_1015716C8;
  uint64_t v44 = 0;
  do
  {
    uint64_t v14 = a1 + 24 * *v13;
    uint64_t v16 = *(void *)(v14 + 120);
    uint64_t v15 = *(void *)(v14 + 128);
    while (v16 != v15)
    {
      if (sub_100D8FD3C(a1, v16))
      {
        char v17 = v43;
        if (v43 >= v44)
        {
          unint64_t v20 = 0xAAAAAAAAAAAAAAABLL * ((v43 - v42) >> 3);
          unint64_t v21 = v20 + 1;
          if (v20 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100DA1868();
          }
          if (0x5555555555555556 * ((v44 - v42) >> 3) > v21) {
            unint64_t v21 = 0x5555555555555556 * ((v44 - v42) >> 3);
          }
          if (0xAAAAAAAAAAAAAAABLL * ((v44 - v42) >> 3) >= 0x555555555555555) {
            unint64_t v22 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v22 = v21;
          }
          if (v22) {
            uint64_t v23 = (char *)sub_10004812C((uint64_t)&v44, v22);
          }
          else {
            uint64_t v23 = 0;
          }
          BOOL v24 = &v23[24 * v20];
          long long v25 = *(_OWORD *)v16;
          *((void *)v24 + 2) = *(void *)(v16 + 16);
          *(_OWORD *)BOOL v24 = v25;
          unint64_t v27 = (unint64_t)v42;
          uint64_t v26 = v43;
          unint64_t v28 = (unint64_t)v24;
          if (v43 != v42)
          {
            do
            {
              long long v29 = *(_OWORD *)(v26 - 24);
              *(unsigned char *)(v28 - 8) = *(v26 - 8);
              *(_OWORD *)(v28 - 24) = v29;
              v28 -= 24;
              v26 -= 24;
            }
            while (v26 != (char *)v27);
            uint64_t v26 = v42;
          }
          char v19 = v24 + 24;
          int v42 = (char *)v28;
          int v43 = v24 + 24;
          uint64_t v44 = &v23[24 * v22];
          if (v26) {
            operator delete(v26);
          }
        }
        else
        {
          long long v18 = *(_OWORD *)v16;
          *((void *)v43 + 2) = *(void *)(v16 + 16);
          _OWORD *v17 = v18;
          char v19 = (char *)v17 + 24;
        }
        int v43 = v19;
      }
      v16 += 24;
    }
    ++v13;
  }
  while (v13 != &dword_1015716D0);
  uint64_t v31 = v42;
  uint64_t v30 = v43;
  if (v42 == v43)
  {
    unsigned int v11 = 2;
    if (v42)
    {
LABEL_55:
      int v43 = v31;
      operator delete(v31);
    }
  }
  else
  {
    LODWORD(v32) = 3;
    do
    {
      (*(void (**)(void *))(**((void **)v31 + 1) + 200))(*((void **)v31 + 1));
      int AppType = DataiRatControllerInterface::getAppType();
      if ((int)v32 < AppType || v32 == 3) {
        unsigned int v35 = AppType;
      }
      else {
        unsigned int v35 = v32;
      }
      if (AppType == 3) {
        uint64_t v32 = v32;
      }
      else {
        uint64_t v32 = v35;
      }
      v31 += 24;
    }
    while (v31 != v30);
    if (v32 >= 3)
    {
      unsigned int v11 = 2;
    }
    else
    {
      uint64_t v36 = v45;
      uint64_t v37 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
      unsigned int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v36 + 96))(v36, v37, v32);
      uint64_t v38 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v39 = asString();
        *(_DWORD *)buf = 136315394;
        char v48 = "getPreferredTransportType";
        __int16 v49 = 2080;
        uint64_t v50 = v39;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s: iRAT recommends %s", buf, 0x16u);
      }
    }
    uint64_t v31 = v42;
    if (v42) {
      goto LABEL_55;
    }
  }
LABEL_56:
  if (v46) {
    sub_10004D2C8(v46);
  }
  unint64_t v12 = v41;
  if (v41) {
    goto LABEL_59;
  }
LABEL_60:
  if (validContextType()) {
    return v11;
  }
  else {
    return 1;
  }
}

void sub_100D902E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, void *__p, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (__p) {
    operator delete(__p);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  if (a9) {
    sub_10004D2C8(a9);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D90348(uint64_t a1)
{
  return sub_100D8FEC0(a1 - 24);
}

unint64_t sub_100D90350(uint64_t a1, uint64_t a2)
{
  if ((validContextType() & 1) == 0)
  {
    unint64_t v12 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315394;
      *(void *)&uint8_t buf[4] = "getCurrentImsPref";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asString();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
    return 0;
  }
  uint64_t v4 = a1 + 24 * (int)a2;
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5 == v6) {
    return 0;
  }
  unint64_t v7 = 0;
  BOOL v8 = (void *)(a1 + 32);
  do
  {
    uint64_t v9 = *(void *)(v5 + 8);
    sub_10003E168(buf, v8);
    if (*(void *)buf) {
      uint64_t v10 = *(void *)buf + 24;
    }
    else {
      uint64_t v10 = 0;
    }
    uint64_t v14 = v10;
    uint64_t v15 = *(std::__shared_weak_count **)&buf[8];
    *(void *)buf = 0;
    *(void *)&buf[8] = 0;
    unint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v9 + 216))(v9, a2, &v14);
    if (v15) {
      sub_10004D2C8(v15);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v11 > v7) {
      unint64_t v7 = v11;
    }
    v5 += 24;
  }
  while (v5 != v6);
  return v7;
}

void sub_100D904D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D90504(uint64_t a1, uint64_t a2, unsigned char *a3)
{
  return sub_100D89AB4(a1 - 24, a2, a3);
}

uint64_t sub_100D9050C(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[14];
  if (!v2) {
    return 2;
  }
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v6);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v2 + 288))(v2, a2, &v6);
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v4;
}

void sub_100D905C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D905DC(uint64_t a1, uint64_t a2)
{
  return sub_100D9050C((void *)(a1 - 24), a2);
}

uint64_t sub_100D905E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 80))();
  }
  else {
    return 1;
  }
}

uint64_t sub_100D90618(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 80))();
  }
  else {
    return 1;
  }
}

uint64_t sub_100D9064C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 96))();
  }
  else {
    return 1;
  }
}

uint64_t sub_100D90680(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 88);
  if (v1) {
    return (*(uint64_t (**)(void))(*(void *)v1 + 96))();
  }
  else {
    return 1;
  }
}

uint64_t sub_100D906B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1[14]) {
    return 0;
  }
  if ((validContextType() & 1) == 0)
  {
    uint64_t v14 = a1[8];
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v15) {
      return result;
    }
    *(_DWORD *)buf = 136315394;
    unint64_t v20 = "isMOBIKEPossibleTo";
    __int16 v21 = 2080;
    uint64_t v22 = asString();
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    return 0;
  }
  uint64_t v8 = a1[14];
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v17, a1);
  int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v8 + 232))(v8, a2, a3, &v17, a4);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (!v9) {
    return 0;
  }
  uint64_t v10 = &a1[3 * (int)a2];
  uint64_t v11 = v10[15];
  uint64_t v12 = v10[16];
  int v13 = 1;
  while (v11 != v12)
  {
    if (*(unsigned char *)(v11 + 16)) {
      v13 &= (*(uint64_t (**)(void, uint64_t))(**(void **)(v11 + 8) + 312))(*(void *)(v11 + 8), a2);
    }
    v11 += 24;
  }
  return v13 & 1;
}

void sub_100D9088C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D908AC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100D906B4((void *)(a1 - 24), a2, a3, a4);
}

uint64_t sub_100D908B4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v4 = a1[14];
  if (!v4) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v10);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *, uint64_t))(*(void *)v4 + 224))(v4, a2, a3, &v10, a4);
  if (v11) {
    sub_10004D2C8(v11);
  }
  return v8;
}

void sub_100D90970(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D90988(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100D908B4((void *)(a1 - 24), a2, a3, a4);
}

void sub_100D90990(uint64_t a1, uint64_t a2, uint64_t a3)
{
  sub_10003E168(&v14, (void *)(a1 + 32));
  unint64_t v7 = v14;
  uint64_t v6 = (std::__shared_weak_count *)v15;
  if (v15)
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 16), 1uLL, memory_order_relaxed);
    sub_10004D2C8(v6);
  }
  v26[0] = _NSConcreteStackBlock;
  v26[1] = 1174405120;
  v26[2] = sub_100D90CC8;
  v26[3] = &unk_101A580F8;
  v26[4] = a1;
  v26[5] = v7;
  unint64_t v27 = v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100DA1C3C((uint64_t)v28, a3);
  v28[4] = a2;
  uint64_t v8 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  Registry::getTimerService(&v23, *(Registry **)(a1 + 72));
  uint64_t v9 = v23;
  sub_100058DB0(__p, "apnFallback");
  uint64_t v10 = *(NSObject **)(a1 + 48);
  dispatch_object_t object = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  uint64_t v14 = _NSConcreteStackBlock;
  uint64_t v15 = 0x40000000;
  uint64_t v16 = sub_100D86DAC;
  uint64_t v17 = &unk_101A580B8;
  long long v18 = v26;
  aBlock = _Block_copy(&v14);
  sub_10038ECF0(v9, (uint64_t)__p, 0, 1000000 * a2, &object, &aBlock);
  uint64_t v11 = v25;
  uint64_t v25 = 0;
  uint64_t v12 = *(void *)(a1 + 664);
  *(void *)(a1 + 664) = v11;
  if (v12)
  {
    (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    uint64_t v13 = v25;
    uint64_t v25 = 0;
    if (v13) {
      (*(void (**)(uint64_t))(*(void *)v13 + 8))(v13);
    }
  }
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
  if (v22 < 0) {
    operator delete(__p[0]);
  }
  if (v24) {
    sub_10004D2C8(v24);
  }
  sub_100727CBC(v28);
  if (v27) {
    std::__shared_weak_count::__release_weak(v27);
  }
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
}

void sub_100D90C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock, dispatch_object_t object, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,std::__shared_weak_count *a31)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D90CC8(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (void *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = a1[10];
        if (!v6) {
          sub_10007B600();
        }
        if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 48))(v6))
        {
          uint64_t v7 = v3[14];
          if (v7)
          {
            uint64_t v8 = v3[8];
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)buf = 136315138;
              uint64_t v16 = "apnFallbackTimerSet_block_invoke";
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: APNFallback timeout: going back to IPv6 only", buf, 0xCu);
              uint64_t v7 = v3[14];
            }
            (*(void (**)(uint64_t *__return_ptr, void *))(*v3 + 16))(&v12, v3);
            (*(void (**)(uint64_t, void, uint64_t *, uint64_t, const char *))(*(void *)v7 + 264))(v7, 0, &v12, 31, "CommCenter");
            if (v13) {
              sub_10004D2C8(v13);
            }
          }
        }
        else
        {
          uint64_t v9 = (uint64_t)(a1 + 7);
          uint64_t v10 = v3[8];
          if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)buf = 136315138;
            uint64_t v16 = "apnFallbackTimerSet_block_invoke";
            _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: APNFallback timeout: cannot go back to IPv6 only, postponing ...", buf, 0xCu);
          }
          uint64_t v11 = a1[11];
          sub_100DA1C3C((uint64_t)v14, v9);
          sub_100D90990(v3, v11, v14);
          sub_100727CBC(v14);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100D90EE4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_10004D2C8(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100D90F1C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return sub_100DA1C3C(a1 + 56, a2 + 56);
}

void sub_100D90F60(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D90F78(uint64_t a1)
{
  sub_100727CBC((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100D90FC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)buf = 136315138;
    BOOL v24 = "apnFallback";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v7 = *(void *)(a3 + 24);
  if (!v7) {
    sub_10007B600();
  }
  if ((*(uint64_t (**)(uint64_t))(*(void *)v7 + 48))(v7))
  {
    if (((*(uint64_t (**)(uint64_t, void, void, void))(*(void *)a1 + 136))(a1, 0, 0, 0) & 1) != 0
      && !*(unsigned char *)(a1 + 632)
      && sub_100D86FA4(a1, 0) == 3)
    {
      __int16 v22 = 0;
      uint64_t v21 = 0;
      memset(&v20, 0, sizeof(v20));
      sub_100D85998(a1, (BOOL *)&v22 + 1, (BOOL *)&v22, &v21, (uint64_t)&v20);
      if (HIBYTE(v22) && *(void *)(a1 + 112))
      {
        int v8 = v22;
        if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
          sub_10004FC84(&__dst, v20.__r_.__value_.__l.__data_, v20.__r_.__value_.__l.__size_);
        }
        else {
          std::string __dst = v20;
        }
        if (*(char *)(a2 + 23) < 0) {
          sub_10004FC84(&__p, *(void **)a2, *(void *)(a2 + 8));
        }
        else {
          std::string __p = *(std::string *)a2;
        }
        sub_100D86D18(a1 + 632, 1, v8 != 0, &__dst, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__dst.__r_.__value_.__l.__data_);
        }
        uint64_t v10 = v21;
        if (v21)
        {
          sub_100DA1C3C((uint64_t)v29, a3);
          sub_100D90990(a1, v10, (uint64_t)v29);
          sub_100727CBC(v29);
        }
        uint64_t v11 = *(NSObject **)(a1 + 64);
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v12 = asString();
          sub_100D91410(&v17, a1 + 632);
          uint64_t v13 = (v17.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
              ? &v17
              : (std::string *)v17.__r_.__value_.__r.__words[0];
          *(_DWORD *)buf = 136315650;
          BOOL v24 = "apnFallback";
          __int16 v25 = 2080;
          uint64_t v26 = v12;
          __int16 v27 = 2080;
          unint64_t v28 = v13;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: fAPNFallbackState %s set to %s", buf, 0x20u);
          if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v17.__r_.__value_.__l.__data_);
          }
        }
        uint64_t v14 = *(void *)(a1 + 112);
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v15, a1);
        (*(void (**)(uint64_t, void, uint64_t *, uint64_t, const char *))(*(void *)v14 + 264))(v14, 0, &v15, 30, "CommCenter");
        if (v16) {
          sub_10004D2C8(v16);
        }
      }
      if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v20.__r_.__value_.__l.__data_);
      }
    }
  }
  else
  {
    uint64_t v9 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      BOOL v24 = "apnFallback";
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: APNFallback is not allowed", buf, 0xCu);
    }
  }
}

void sub_100D91390(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,void *__p,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a27 < 0) {
    operator delete(__p);
  }
  if (a33 < 0) {
    operator delete(a28);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91410(std::string *a1, uint64_t a2)
{
  sub_100058DB0(&v47, "[ipv4=");
  uint64_t v4 = (char *)asStringBool(*(unsigned char *)a2);
  sub_100058DB0(v45, v4);
  if ((v46 & 0x80u) == 0) {
    uint64_t v5 = v45;
  }
  else {
    uint64_t v5 = (void **)v45[0];
  }
  if ((v46 & 0x80u) == 0) {
    std::string::size_type v6 = v46;
  }
  else {
    std::string::size_type v6 = (std::string::size_type)v45[1];
  }
  uint64_t v7 = std::string::append(&v47, (const std::string::value_type *)v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  v48.__r_.__value_.__r.__words[2] = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v48.__r_.__value_.__l.__data_ = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  uint64_t v9 = std::string::append(&v48, ", ipv6=", 7uLL);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v49.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  uint64_t v11 = (char *)asStringBool(*(unsigned char *)(a2 + 1));
  sub_100058DB0(v43, v11);
  if ((v44 & 0x80u) == 0) {
    uint64_t v12 = v43;
  }
  else {
    uint64_t v12 = (void **)v43[0];
  }
  if ((v44 & 0x80u) == 0) {
    std::string::size_type v13 = v44;
  }
  else {
    std::string::size_type v13 = (std::string::size_type)v43[1];
  }
  uint64_t v14 = std::string::append(&v49, (const std::string::value_type *)v12, v13);
  long long v15 = *(_OWORD *)&v14->__r_.__value_.__l.__data_;
  v50.__r_.__value_.__r.__words[2] = v14->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v15;
  v14->__r_.__value_.__l.__size_ = 0;
  v14->__r_.__value_.__r.__words[2] = 0;
  v14->__r_.__value_.__r.__words[0] = 0;
  uint64_t v16 = std::string::append(&v50, ", tentative=", 0xCuLL);
  long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
  v51.__r_.__value_.__r.__words[2] = v16->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v17;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  long long v18 = (char *)asStringBool(*(unsigned char *)(a2 + 2));
  sub_100058DB0(__p, v18);
  if ((v42 & 0x80u) == 0) {
    char v19 = __p;
  }
  else {
    char v19 = (void **)__p[0];
  }
  if ((v42 & 0x80u) == 0) {
    std::string::size_type v20 = v42;
  }
  else {
    std::string::size_type v20 = (std::string::size_type)__p[1];
  }
  uint64_t v21 = std::string::append(&v51, (const std::string::value_type *)v19, v20);
  long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
  v52.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v52.__r_.__value_.__l.__data_ = v22;
  v21->__r_.__value_.__l.__size_ = 0;
  v21->__r_.__value_.__r.__words[2] = 0;
  v21->__r_.__value_.__r.__words[0] = 0;
  uint64_t v23 = std::string::append(&v52, ", apn=", 6uLL);
  long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
  v53.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v53.__r_.__value_.__l.__data_ = v24;
  v23->__r_.__value_.__l.__size_ = 0;
  v23->__r_.__value_.__r.__words[2] = 0;
  v23->__r_.__value_.__r.__words[0] = 0;
  int v25 = *(char *)(a2 + 31);
  if (v25 >= 0) {
    uint64_t v26 = (const std::string::value_type *)(a2 + 8);
  }
  else {
    uint64_t v26 = *(const std::string::value_type **)(a2 + 8);
  }
  if (v25 >= 0) {
    std::string::size_type v27 = *(unsigned __int8 *)(a2 + 31);
  }
  else {
    std::string::size_type v27 = *(void *)(a2 + 16);
  }
  unint64_t v28 = std::string::append(&v53, v26, v27);
  long long v29 = *(_OWORD *)&v28->__r_.__value_.__l.__data_;
  v54.__r_.__value_.__r.__words[2] = v28->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v54.__r_.__value_.__l.__data_ = v29;
  v28->__r_.__value_.__l.__size_ = 0;
  v28->__r_.__value_.__r.__words[2] = 0;
  v28->__r_.__value_.__r.__words[0] = 0;
  uint64_t v30 = std::string::append(&v54, ", app=\"", 7uLL);
  long long v31 = *(_OWORD *)&v30->__r_.__value_.__l.__data_;
  v55.__r_.__value_.__r.__words[2] = v30->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v55.__r_.__value_.__l.__data_ = v31;
  v30->__r_.__value_.__l.__size_ = 0;
  v30->__r_.__value_.__r.__words[2] = 0;
  v30->__r_.__value_.__r.__words[0] = 0;
  __int16 v34 = *(const std::string::value_type **)(a2 + 40);
  uint64_t v33 = a2 + 40;
  uint64_t v32 = v34;
  int v35 = *(char *)(v33 + 23);
  if (v35 >= 0) {
    uint64_t v36 = (const std::string::value_type *)v33;
  }
  else {
    uint64_t v36 = v32;
  }
  if (v35 >= 0) {
    std::string::size_type v37 = *(unsigned __int8 *)(v33 + 23);
  }
  else {
    std::string::size_type v37 = *(void *)(v33 + 8);
  }
  uint64_t v38 = std::string::append(&v55, v36, v37);
  long long v39 = *(_OWORD *)&v38->__r_.__value_.__l.__data_;
  v56.__r_.__value_.__r.__words[2] = v38->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v56.__r_.__value_.__l.__data_ = v39;
  v38->__r_.__value_.__l.__size_ = 0;
  v38->__r_.__value_.__r.__words[2] = 0;
  v38->__r_.__value_.__r.__words[0] = 0;
  uint64_t v40 = std::string::append(&v56, "\"]", 2uLL);
  *a1 = *v40;
  v40->__r_.__value_.__l.__size_ = 0;
  v40->__r_.__value_.__r.__words[2] = 0;
  v40->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v56.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v56.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v55.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v54.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v54.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v53.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v53.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
  if ((char)v42 < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v51.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v50.__r_.__value_.__l.__data_);
  }
  if ((char)v44 < 0) {
    operator delete(v43[0]);
  }
  if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v49.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v48.__r_.__value_.__l.__data_);
  }
  if ((char)v46 < 0) {
    operator delete(v45[0]);
  }
  if (SHIBYTE(v47.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v47.__r_.__value_.__l.__data_);
  }
}

void sub_100D9176C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,void *a33,uint64_t a34,int a35,__int16 a36,char a37,char a38,uint64_t a39,void *a40,uint64_t a41,int a42,__int16 a43,char a44,char a45,uint64_t a46,void *a47,uint64_t a48,int a49,__int16 a50,char a51,char a52,uint64_t a53,void *a54,uint64_t a55,int a56,__int16 a57,char a58,char a59)
{
  if (*(char *)(v59 - 41) < 0) {
    operator delete(*(void **)(v59 - 64));
  }
  if (*(char *)(v59 - 73) < 0) {
    operator delete(*(void **)(v59 - 96));
  }
  if (*(char *)(v59 - 105) < 0) {
    operator delete(*(void **)(v59 - 128));
  }
  if (*(char *)(v59 - 137) < 0) {
    operator delete(*(void **)(v59 - 160));
  }
  if (*(char *)(v59 - 169) < 0) {
    operator delete(*(void **)(v59 - 192));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a59 < 0) {
    operator delete(a54);
  }
  if (a52 < 0) {
    operator delete(a47);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (a45 < 0) {
    operator delete(a40);
  }
  if (a38 < 0) {
    operator delete(a33);
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D918A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100D918B0(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (a2 || !*(unsigned char *)(a1 + 632))
  {
    sub_100058DB0((void *)a3, (char *)&unk_10165244B);
  }
  else
  {
    __int16 v8 = 0;
    uint64_t v7 = 0;
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)a3 = 0;
    sub_100D85998(a1, (BOOL *)&v8 + 1, (BOOL *)&v8, &v7, a3);
    uint64_t v5 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0) {
        uint64_t v6 = a3;
      }
      else {
        uint64_t v6 = *(void *)a3;
      }
      *(_DWORD *)buf = 136315394;
      long long v10 = "getApnFallbackName";
      __int16 v11 = 2080;
      uint64_t v12 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: APNFallback name set to '%s'", buf, 0x16u);
    }
  }
}

void sub_100D919EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91A08(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v9 = 0;
  sub_100D918B0(a1, a2, (uint64_t)__p);
  uint64_t v5 = (void *)HIBYTE(v9);
  if (v9 < 0) {
    uint64_t v5 = __p[1];
  }
  if (v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v9;
    __p[1] = 0;
    uint64_t v9 = 0;
    __p[0] = 0;
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 264);
    if (v6)
    {
      if (*(char *)(v6 + 71) < 0)
      {
        sub_10004FC84((unsigned char *)a3, *(void **)(v6 + 48), *(void *)(v6 + 56));
      }
      else
      {
        long long v7 = *(_OWORD *)(v6 + 48);
        *(void *)(a3 + 16) = *(void *)(v6 + 64);
        *(_OWORD *)a3 = v7;
      }
    }
    else
    {
      sub_100058DB0((void *)a3, (char *)&unk_10165244B);
    }
  }
  if (SHIBYTE(v9) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100D91ACC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91AE8(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
}

void sub_100D91AF0(void *a1)
{
  uint64_t v1 = a1[14];
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v3);
    (*(void (**)(uint64_t, uint64_t *))(*(void *)v1 + 248))(v1, &v3);
    if (v4) {
      sub_10004D2C8(v4);
    }
  }
  else
  {
    uint64_t v2 = a1[8];
    if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)buf = 136315138;
      uint64_t v6 = "notifyConnectionReady";
      _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: data activator empty", buf, 0xCu);
    }
  }
}

void sub_100D91BFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91C1C(uint64_t a1)
{
}

uint64_t sub_100D91C24@<X0>(Registry **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, a1[9]);
  uint64_t v6 = ServiceMap;
  if ((v7 & 0x8000000000000000) != 0)
  {
    __int16 v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      unint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v7;
  __int16 v11 = sub_10004D37C(&v6[1].__m_.__sig, &v19);
  if (v11)
  {
    uint64_t v13 = v11[3];
    uint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v12 = 0;
  char v14 = 1;
  if (!v13)
  {
LABEL_7:
    uint64_t v15 = 1;
    if (v14) {
      return v15;
    }
    goto LABEL_12;
  }
LABEL_11:
  uint64_t v16 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  uint64_t v17 = (*((uint64_t (**)(Registry **, uint64_t, uint64_t, void))*a1 + 17))(a1, a2, 1, 0);
  uint64_t v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v13 + 1080))(v13, a2, v16, v17);
  if ((v14 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v12);
  return v15;
}

void sub_100D91DA4(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91DBC(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
}

void sub_100D91DC4(void *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v3 = a1[14];
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v5);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 216))(v3, a2, &v5);
    if (v6) {
      sub_10004D2C8(v6);
    }
  }
  else
  {
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_100D91E74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D91E8C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
}

uint64_t sub_100D91E94(void *a1)
{
  uint64_t v1 = a1[14];
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v4);
    uint64_t v2 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 208))(v1, &v4);
    if (v5) {
      sub_10004D2C8(v5);
    }
    return v2;
  }
  else
  {
    return getQosFlowsContainerDefault();
  }
}

void sub_100D91F48(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D91F60(uint64_t a1)
{
  return sub_100D91E94((void *)(a1 - 24));
}

void sub_100D91F68(PersonalitySpecificImpl *a1, uint64_t a2)
{
  uint64_t v4 = *((void *)a1 + 8);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    sub_10003E168(&__p, (void *)a1 + 4);
    uint64_t v5 = __p;
    uint64_t v6 = v43;
    std::string __p = 0;
    int v43 = 0;
    if (v5) {
      unint64_t v7 = (const char *)(*(uint64_t (**)(void))(v5[3] + 48))();
    }
    else {
      unint64_t v7 = "nothing";
    }
    uint64_t v8 = asString();
    *(_DWORD *)buf = 136315650;
    *(void *)&uint8_t buf[4] = "handleDataContextActivated";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v7;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v48 = v8;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: %s activated with %s", buf, 0x20u);
    if (v6) {
      sub_10004D2C8(v6);
    }
    if (v43) {
      sub_10004D2C8(v43);
    }
  }
  if (validContextType())
  {
    *(_OWORD *)&buf[8] = 0uLL;
    *(void *)buf = &buf[8];
    uint64_t v9 = dword_1015716C8;
    if ((*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, uint64_t))(*(void *)a1 + 1208))(a1, a2, 3))
    {
      do
      {
        unsigned int v10 = (uint64_t *)((char *)a1 + 24 * *v9);
        uint64_t v11 = v10[15];
        uint64_t v12 = v10[16];
        while (v11 != v12)
        {
          unsigned int v10 = (uint64_t *)*(unsigned __int8 *)(v11 + 16);
          if (*(unsigned char *)(v11 + 16)) {
            sub_100DA1CD4((uint64_t *)buf, *(void *)(v11 + 8), *(void *)(v11 + 8));
          }
          v11 += 24;
        }
        ++v9;
      }
      while (v9 != &dword_1015716D0);
    }
    else
    {
      do
      {
        unsigned int v10 = (uint64_t *)((char *)a1 + 24 * *v9);
        uint64_t v13 = v10[15];
        uint64_t v14 = v10[16];
        while (v13 != v14)
        {
          unsigned int v10 = (uint64_t *)*(unsigned __int8 *)(v13 + 16);
          if (*(unsigned char *)(v13 + 16))
          {
            uint64_t v15 = *(void *)(v13 + 8);
            if (v15)
            {
              if ((*(unsigned int (**)(uint64_t))(*(void *)v15 + 128))(v15)) {
                sub_100DA1CD4((uint64_t *)buf, *(void *)(v13 + 8), *(void *)(v13 + 8));
              }
            }
          }
          v13 += 24;
        }
        ++v9;
      }
      while (v9 != &dword_1015716D0);
    }
    uint64_t v16 = *((void *)a1 + 14);
    if (v16) {
      char v17 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v16 + 312))(v16, a2);
    }
    else {
      char v17 = 0;
    }
    std::string::size_type v20 = *(uint64_t **)buf;
    if (*(unsigned char **)buf != &buf[8])
    {
      do
      {
        sub_100D862A8((uint64_t)a1, a2, (const DataAPNSettingsObserver *)v20[4], 1);
        uint64_t v21 = *(void *)v20[4];
        if (v17) {
          long long v22 = (void (**)(void))(v21 + 48);
        }
        else {
          long long v22 = (void (**)(void))(v21 + 40);
        }
        (*v22)();
        uint64_t v23 = (uint64_t *)v20[1];
        if (v23)
        {
          do
          {
            unsigned int v10 = v23;
            uint64_t v23 = (uint64_t *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            unsigned int v10 = (uint64_t *)v20[2];
            BOOL v24 = *v10 == (void)v20;
            std::string::size_type v20 = v10;
          }
          while (!v24);
        }
        std::string::size_type v20 = v10;
      }
      while (v10 != (uint64_t *)&buf[8]);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *((Registry **)a1 + 9));
    uint64_t v26 = ServiceMap;
    if (v27 < 0)
    {
      unint64_t v28 = (unsigned __int8 *)(v27 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v29 = 5381;
      do
      {
        uint64_t v27 = v29;
        unsigned int v30 = *v28++;
        uint64_t v29 = (33 * v29) ^ v30;
      }
      while (v30);
    }
    std::mutex::lock(ServiceMap);
    std::string __p = (void *)v27;
    long long v31 = sub_10004D37C(&v26[1].__m_.__sig, (unint64_t *)&__p);
    if (v31)
    {
      uint64_t v33 = v31[3];
      uint64_t v32 = (std::__shared_weak_count *)v31[4];
      if (v32)
      {
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v26);
        atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v32);
        if (!v33)
        {
LABEL_66:
          sub_10004D2C8(v32);
          goto LABEL_67;
        }
LABEL_50:
        uint64_t v45 = 0;
        unsigned __int8 v46 = 0;
        (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v33 + 432))(&v45, v33);
        if (v45)
        {
          __int16 v34 = *(unsigned char **)buf;
          if (*(unsigned char **)buf != &buf[8])
          {
            do
            {
              uint64_t v35 = v45;
              uint64_t v36 = PersonalitySpecificImpl::simSlot(a1);
              uint64_t v37 = (*(uint64_t (**)(void))(**((void **)v34 + 4) + 200))(*((void *)v34 + 4));
              uint64_t v38 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 328))(a1, a2);
              (*(void (**)(void **__return_ptr, PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 536))(&__p, a1, a2);
              if (v44 >= 0) {
                p_p = &__p;
              }
              else {
                p_p = __p;
              }
              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, uint64_t, void *))(*(void *)v35 + 56))(v35, v36, v37, a2, v38, p_p);
              if (v44 < 0) {
                operator delete(__p);
              }
              uint64_t v40 = (void *)*((void *)v34 + 1);
              if (v40)
              {
                do
                {
                  uint64_t v41 = v40;
                  uint64_t v40 = (void *)*v40;
                }
                while (v40);
              }
              else
              {
                do
                {
                  uint64_t v41 = (unsigned char *)*((void *)v34 + 2);
                  BOOL v24 = *(void *)v41 == (void)v34;
                  __int16 v34 = v41;
                }
                while (!v24);
              }
              __int16 v34 = v41;
            }
            while (v41 != &buf[8]);
          }
        }
        if (v46) {
          sub_10004D2C8(v46);
        }
        if (!v32) {
          goto LABEL_67;
        }
        goto LABEL_66;
      }
      std::mutex::unlock(v26);
      if (v33) {
        goto LABEL_50;
      }
    }
    else
    {
      std::mutex::unlock(v26);
    }
LABEL_67:
    sub_10005D144(*(void **)&buf[8]);
    return;
  }
  long long v18 = *((void *)a1 + 8);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v19 = asString();
    *(_DWORD *)buf = 136315394;
    *(void *)&uint8_t buf[4] = "handleDataContextActivated";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v19;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
  }
}

void sub_100D92570(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19)
{
  if (v19) {
    sub_10004D2C8(v19);
  }
  sub_10005D144(a19);
  _Unwind_Resume(a1);
}

void sub_100D92614(uint64_t a1, uint64_t a2)
{
}

void sub_100D9261C(PersonalitySpecificImpl *a1, int a2, int a3, uint64_t a4)
{
  char v8 = 0;
  uint64_t v9 = dword_1015716C8;
  do
  {
    unsigned int v10 = (char *)a1 + 24 * *v9;
    uint64_t v11 = *((void *)v10 + 15);
    uint64_t v12 = *((void *)v10 + 16);
    while (v11 != v12)
    {
      if (*(unsigned char *)(v11 + 16)) {
        v8 |= (*(unsigned int (**)(void))(**(void **)(v11 + 8) + 200))(*(void *)(v11 + 8)) == a2;
      }
      v11 += 24;
    }
    ++v9;
  }
  while (v9 != &dword_1015716D0);
  if (v8)
  {
    uint64_t v13 = sub_100D89AB4((uint64_t)a1, 0, 0);
    if (a3)
    {
      uint64_t v14 = sub_100D92908((uint64_t)a1);
      if (v13 == a4)
      {
        uint64_t v15 = v14;
        if (v13 != v14)
        {
          sub_100058DB0(__p, "Switch to forced context type");
          char v16 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, unsigned char *))(*(void *)a1 + 1216))(a1, a4, __p);
          char v17 = v16;
          if (SHIBYTE(v24) < 0)
          {
            operator delete(*(void **)__p);
            if (v17) {
              return;
            }
          }
          else if (v16)
          {
            return;
          }
          long long v18 = *((void *)a1 + 8);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = asString();
            uint64_t v20 = asString();
            *(_DWORD *)std::string __p = 136315650;
            *(void *)&__p[4] = "recalculateForceContextType";
            __int16 v22 = 2080;
            uint64_t v23 = v19;
            __int16 v24 = 2080;
            uint64_t v25 = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: handover to forced type %s failed (2), deactivate current context %s", __p, 0x20u);
          }
          (*(void (**)(PersonalitySpecificImpl *, uint64_t, uint64_t, const char *, const char *))(*(void *)a1 + 680))(a1, v15, 35, "Handover to Forced Type Failed. (2)", "CommCenter");
          sub_100D8F454(a1, a4);
        }
      }
    }
    else
    {
      sub_100058DB0(__p, "Switch back to iRat type when context is not forced");
      (*(void (**)(PersonalitySpecificImpl *, uint64_t, unsigned char *))(*(void *)a1 + 1216))(a1, v13, __p);
      if (SHIBYTE(v24) < 0) {
        operator delete(*(void **)__p);
      }
    }
  }
}

void sub_100D928E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D92908(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 112);
  if (!v1) {
    return 2;
  }
  sub_10003E168(&v5, (void *)(a1 + 32));
  if (v5) {
    uint64_t v2 = v5 + 24;
  }
  else {
    uint64_t v2 = 0;
  }
  uint64_t v7 = v2;
  char v8 = v6;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 184))(v1, &v7);
  if (v8) {
    sub_10004D2C8(v8);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  return v3;
}

void sub_100D929AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D929D0(uint64_t a1, int a2, int a3, uint64_t a4)
{
}

uint64_t sub_100D929D8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (!v2) {
    return 0;
  }
  sub_10003E168(&v7, (void *)(a1 + 32));
  uint64_t v4 = v7 + 24;
  if (!v7) {
    uint64_t v4 = 0;
  }
  uint64_t v9 = v4;
  unsigned int v10 = v8;
  uint64_t v7 = 0;
  char v8 = 0;
  uint64_t v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v2 + 368))(v2, a2, &v9);
  if (v10) {
    sub_10004D2C8(v10);
  }
  if (v8) {
    sub_10004D2C8(v8);
  }
  return v5;
}

void sub_100D92A98(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D92ABC(uint64_t a1, uint64_t a2)
{
  return sub_100D929D8(a1 - 24, a2);
}

uint64_t sub_100D92AC4(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 376))();
  }
  return result;
}

uint64_t sub_100D92AFC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 376))();
  }
  return result;
}

void sub_100D92B34(void *a1, uint64_t a2)
{
  if (validContextType())
  {
    (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
    uint64_t v4 = otherContextType();
    memset(v19, 0, sizeof(v19));
    sub_100DA1880(v19, (const void *)a1[3 * (int)a2 + 15], a1[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)a2 + 16] - a1[3 * (int)a2 + 15]) >> 3));
    uint64_t v5 = a1[14];
    if (v5 && ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 312))(v5, v4) & 1) != 0)
    {
      uint64_t v6 = a1[8];
      if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "handleDataContextDeactivated";
        _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: In handover: switch observers to the remaining context when possible", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v7 = *(void *)v19;
      uint64_t v8 = *(void *)&v19[8];
      while (v7 != v8)
      {
        if (*(unsigned char *)(v7 + 16)) {
          sub_100D862A8((uint64_t)a1, v4, *(const DataAPNSettingsObserver **)(v7 + 8), 1);
        }
        v7 += 24;
      }
    }
    else
    {
      unsigned int v10 = a1[8];
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = "handleDataContextDeactivated";
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: Not in handover:", (uint8_t *)&buf, 0xCu);
      }
      uint64_t v11 = *(void *)v19;
      for (uint64_t i = *(void *)&v19[8]; v11 != i; v11 += 24)
      {
        if (*(unsigned char *)(v11 + 16))
        {
          uint64_t v13 = *(void *)(v11 + 8);
          sub_10003E168(&buf, a1 + 4);
          if ((void)buf) {
            uint64_t v14 = buf + 24;
          }
          else {
            uint64_t v14 = 0;
          }
          uint64_t v16 = v14;
          char v17 = (std::__shared_weak_count *)*((void *)&buf + 1);
          long long buf = 0uLL;
          int v15 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v13 + 64))(v13, a2, &v16);
          if (v17) {
            sub_10004D2C8(v17);
          }
          if (*((void *)&buf + 1)) {
            sub_10004D2C8(*((std::__shared_weak_count **)&buf + 1));
          }
          if (v15) {
            sub_100D862A8((uint64_t)a1, a2, *(const DataAPNSettingsObserver **)(v11 + 8), 0);
          }
        }
      }
    }
    (*(void (**)(void *, uint64_t))(*a1 + 1176))(a1, a2);
    if (*(void *)v19)
    {
      *(void *)&v19[8] = *(void *)v19;
      operator delete(*(void **)v19);
    }
  }
  else
  {
    uint64_t v9 = a1[8];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v19 = 136315394;
      *(void *)&v19[4] = "handleDataContextDeactivated";
      *(_WORD *)&v19[12] = 2080;
      *(void *)&v19[14] = asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", v19, 0x16u);
    }
  }
}

void sub_100D92E84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

void sub_100D92ED4(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100D92EDC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  if (validContextType())
  {
    memset(buf, 0, sizeof(buf));
    sub_100DA1880(buf, (const void *)a1[3 * (int)a2 + 15], a1[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)a2 + 16] - a1[3 * (int)a2 + 15]) >> 3));
    uint64_t v14 = *(void *)buf;
    uint64_t v15 = *(void *)&buf[8];
    while (v14 != v15)
    {
      if (*(unsigned char *)(v14 + 16))
      {
        uint64_t v16 = *(void *)(v14 + 8);
        if (v16) {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v16 + 72))(v16, a4, a5, a6);
        }
      }
      v14 += 24;
    }
    sub_100D932C8((uint64_t)&v42, (uint64_t)a1, a3);
    sub_100D932C8((uint64_t)&__p, (uint64_t)a1, a2);
    uint64_t v45 = 0;
    uint64_t v46 = 0;
    __src = 0;
    sub_1008DB9AC(&__src, v42, (uint64_t)v43, 0xAAAAAAAAAAAAAAABLL * ((v43 - (unsigned char *)v42) >> 2));
    uint64_t v19 = (uint64_t *)__p;
    uint64_t v20 = v41;
    while (v19 != v20)
    {
      sub_100D96EEC((char **)&__src, v19);
      uint64_t v19 = (uint64_t *)((char *)v19 + 12);
    }
    uint64_t v21 = (char *)__src;
    if (&__src == a7) {
      goto LABEL_33;
    }
    __int16 v22 = v45;
    size_t v23 = v45 - (unsigned char *)__src;
    unint64_t v24 = 0xAAAAAAAAAAAAAAABLL * ((v45 - (unsigned char *)__src) >> 2);
    uint64_t v25 = (uint64_t)a7[2];
    uint64_t v26 = (char *)*a7;
    if (0xAAAAAAAAAAAAAAABLL * ((v25 - (uint64_t)*a7) >> 2) >= v24)
    {
      uint64_t v33 = (char *)a7[1];
      unsigned int v30 = a7 + 1;
      uint64_t v32 = v33;
      size_t v34 = v33 - v26;
      unint64_t v35 = 0xAAAAAAAAAAAAAAABLL * ((v33 - v26) >> 2);
      if (v35 < v24)
      {
        uint64_t v36 = (char *)__src + 12 * v35;
        if (v32 != v26)
        {
          memmove(v26, __src, v34);
          uint64_t v26 = (char *)*v30;
        }
        size_t v23 = v22 - v36;
        if (v22 == v36) {
          goto LABEL_32;
        }
        uint64_t v37 = v26;
        uint64_t v38 = v36;
        goto LABEL_31;
      }
    }
    else
    {
      if (v26)
      {
        a7[1] = v26;
        operator delete(v26);
        uint64_t v25 = 0;
        *a7 = 0;
        a7[1] = 0;
        a7[2] = 0;
      }
      if (v24 > 0x1555555555555555) {
        sub_10006A748();
      }
      unint64_t v27 = 0xAAAAAAAAAAAAAAABLL * (v25 >> 2);
      uint64_t v28 = 2 * v27;
      if (2 * v27 <= v24) {
        uint64_t v28 = v24;
      }
      if (v27 >= 0xAAAAAAAAAAAAAAALL) {
        unint64_t v29 = 0x1555555555555555;
      }
      else {
        unint64_t v29 = v28;
      }
      sub_1008DBA28(a7, v29);
      long long v31 = (char *)a7[1];
      unsigned int v30 = a7 + 1;
      uint64_t v26 = v31;
    }
    if (v22 == v21)
    {
LABEL_32:
      std::string *v30 = &v26[v23];
      uint64_t v21 = (char *)__src;
LABEL_33:
      if (v21)
      {
        uint64_t v45 = v21;
        operator delete(v21);
      }
      if (__p)
      {
        uint64_t v41 = (uint64_t *)__p;
        operator delete(__p);
      }
      if (v42)
      {
        int v43 = v42;
        operator delete(v42);
      }
      uint64_t v18 = sub_100D93428(a1, a2, a3);
      if (*(void *)buf)
      {
        *(void *)&buf[8] = *(void *)buf;
        operator delete(*(void **)buf);
      }
      return v18;
    }
    uint64_t v37 = v26;
    uint64_t v38 = v21;
LABEL_31:
    memmove(v37, v38, v23);
    goto LABEL_32;
  }
  char v17 = a1[8];
  uint64_t v18 = 0;
  if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "handleDataContextNetworkDisconnect";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    return 0;
  }
  return v18;
}

void sub_100D93250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, void *a19, uint64_t a20)
{
  if (__p) {
    operator delete(__p);
  }
  if (a10) {
    operator delete(a10);
  }
  if (a13) {
    operator delete(a13);
  }
  if (a19) {
    operator delete(a19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D932C8(uint64_t a1, uint64_t a2, int a3)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  if (validContextType())
  {
    uint64_t v6 = a2 + 24 * a3;
    uint64_t v7 = *(void *)(v6 + 120);
    uint64_t v8 = *(void *)(v6 + 128);
    while (v7 != v8)
    {
      if (*(unsigned char *)(v7 + 16))
      {
        *(void *)uint64_t v11 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 272))(*(void *)(v7 + 8));
        *(_DWORD *)&v11[8] = v9;
        sub_100D96EEC((char **)a1, (uint64_t *)v11);
      }
      v7 += 24;
    }
  }
  else
  {
    unsigned int v10 = *(NSObject **)(a2 + 64);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)uint64_t v11 = 136315394;
      *(void *)&v11[4] = "getActiveConnectionsTraits";
      __int16 v12 = 2080;
      uint64_t v13 = asString();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", v11, 0x16u);
    }
  }
}

void sub_100D9340C(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D93428(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a1;
  if (!(*(unsigned int (**)(void *))(*a1 + 1056))(a1)
    || sub_100D98468((uint64_t)v5, a2, a3) != a3)
  {
    return 0;
  }
  if ((validContextType() & 1) == 0)
  {
    uint64_t v57 = v5[8];
    uint64_t v58 = 0;
    if (!os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT)) {
      return v58;
    }
    *(_DWORD *)long long buf = 136315394;
    __int16 v74 = "canDoHandover";
    __int16 v75 = 2080;
    uint64_t v76 = (const char *)asString();
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    return 0;
  }
  std::string __p = 0;
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  sub_100DA1880(&__p, (const void *)v5[3 * (int)a2 + 15], v5[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5[3 * (int)a2 + 16] - v5[3 * (int)a2 + 15]) >> 3));
  uint64_t v6 = (void **)__p;
  uint64_t v7 = v71;
  if (__p == v71)
  {
    int v55 = 1;
    int v56 = 1;
    goto LABEL_74;
  }
  int v8 = 1;
  v63 = v5;
  uint64_t v60 = v71;
  do
  {
    if ((sub_100D8FD3C((uint64_t)v5, (uint64_t)v6) & 1) == 0) {
      goto LABEL_66;
    }
    uint64_t v69 = 0;
    *(_OWORD *)unsigned int v67 = 0u;
    long long v68 = 0u;
    long long v66 = 0u;
    (*(void (**)(long long *__return_ptr))(*v6[1] + 280))(&v66);
    int v9 = v66;
    if (v66)
    {
      int v61 = v66;
      char v62 = v6;
      BOOL v10 = v67[12];
      uint64_t v11 = v5[8];
      BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
      if (v10)
      {
        if (v12)
        {
          uint64_t v13 = (*(uint64_t (**)(void *))(*v5 + 40))(v5);
          uint64_t v14 = asString();
          if (v66) {
            uint64_t v15 = "f";
          }
          else {
            uint64_t v15 = "t";
          }
          if (v66) {
            uint64_t v16 = (const char *)asString();
          }
          else {
            uint64_t v16 = "OK";
          }
          __int16 v22 = (const char *)*((void *)&v66 + 1);
          uint64_t v21 = *(unsigned char **)v67;
          uint64_t v23 = asStringBool(v67[8]);
          uint64_t v24 = asStringBool(v67[9]);
          uint64_t v25 = asStringBool(v67[10]);
          uint64_t v26 = asStringBool(v67[11]);
          *(_DWORD *)long long buf = 136317954;
          __int16 v74 = (const char *)v13;
          __int16 v75 = 2080;
          uint64_t v76 = "canDoHandover";
          __int16 v77 = 2080;
          uint64_t v78 = "cannot be activated";
          __int16 v79 = 2080;
          uint64_t v80 = v14;
          __int16 v81 = 2080;
          v82 = v15;
          __int16 v83 = 2080;
          v84 = v16;
          __int16 v85 = 2080;
          __int16 v86 = v22;
          __int16 v87 = 2080;
          __int16 v88 = v21;
          __int16 v89 = 2080;
          uint64_t v90 = v23;
          __int16 v91 = 2080;
          uint64_t v92 = v24;
          __int16 v93 = 2080;
          uint64_t v94 = v25;
          __int16 v95 = 2080;
          uint64_t v96 = v26;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: %s: %s: %s(%s{%s %s [ allowed=%s blocked=%s netAvailable=%s home=%s ]})", buf, 0x7Au);
          uint64_t v5 = v63;
        }
        goto LABEL_30;
      }
      if (!v12)
      {
LABEL_30:
        uint64_t v30 = *((void *)&v68 + 1);
        long long v31 = v69;
        if (v69) {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        if (v30)
        {
          while (1)
          {
            int v32 = *(unsigned __int8 *)(v30 + 28);
            uint64_t v33 = v5[8];
            BOOL v34 = os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT);
            if (v32)
            {
              if (v34)
              {
                BOOL v65 = v33;
                uint64_t v35 = (*(uint64_t (**)(void *))(*v5 + 40))(v5);
                uint64_t v36 = asString();
                uint64_t v37 = "f";
                if (!*(_DWORD *)v30) {
                  uint64_t v37 = "t";
                }
                uint64_t v64 = v37;
                if (*(_DWORD *)v30) {
                  uint64_t v38 = (const char *)asString();
                }
                else {
                  uint64_t v38 = "OK";
                }
                char v44 = *(const char **)(v30 + 8);
                int v43 = *(unsigned char **)(v30 + 16);
                uint64_t v45 = asStringBool(*(unsigned char *)(v30 + 24));
                uint64_t v46 = asStringBool(*(unsigned char *)(v30 + 25));
                uint64_t v47 = asStringBool(*(unsigned char *)(v30 + 26));
                uint64_t v48 = asStringBool(*(unsigned char *)(v30 + 27));
                *(_DWORD *)long long buf = 136317954;
                __int16 v74 = (const char *)v35;
                __int16 v75 = 2080;
                uint64_t v76 = "canDoHandover";
                __int16 v77 = 2080;
                uint64_t v78 = "cannot be activated (chained):";
                __int16 v79 = 2080;
                uint64_t v80 = v36;
                __int16 v81 = 2080;
                v82 = v64;
                __int16 v83 = 2080;
                v84 = v38;
                __int16 v85 = 2080;
                __int16 v86 = v44;
                __int16 v87 = 2080;
                __int16 v88 = v43;
                __int16 v89 = 2080;
                uint64_t v90 = v45;
                __int16 v91 = 2080;
                uint64_t v92 = v46;
                __int16 v93 = 2080;
                uint64_t v94 = v47;
                __int16 v95 = 2080;
                uint64_t v96 = v48;
                _os_log_impl((void *)&_mh_execute_header, v65, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: %s: %s: %s(%s{%s %s [ allowed=%s blocked=%s netAvailable=%s home=%s ]})", buf, 0x7Au);
                uint64_t v5 = v63;
              }
              goto LABEL_54;
            }
            if (v34) {
              break;
            }
LABEL_54:
            uint64_t v54 = *(void *)(v30 + 40);
            std::string v53 = *(std::__shared_weak_count **)(v30 + 48);
            if (v53) {
              atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v31) {
              sub_10004D2C8(v31);
            }
            long long v31 = v53;
            uint64_t v30 = v54;
            if (!v54) {
              goto LABEL_61;
            }
          }
          uint64_t v39 = (*(uint64_t (**)(void *))(*v5 + 40))(v5);
          uint64_t v40 = asString();
          if (*(_DWORD *)v30) {
            uint64_t v41 = "f";
          }
          else {
            uint64_t v41 = "t";
          }
          if (*(_DWORD *)v30) {
            unsigned __int8 v42 = (const char *)asString();
          }
          else {
            unsigned __int8 v42 = "OK";
          }
          std::string v49 = *(unsigned char **)(v30 + 8);
          if (v49)
          {
            uint64_t v50 = *(void *)(v30 + 16);
            if (*v49)
            {
              std::string v51 = "{";
              std::string v52 = "}";
LABEL_53:
              *(_DWORD *)long long buf = 136317442;
              __int16 v74 = (const char *)v39;
              __int16 v75 = 2080;
              uint64_t v76 = "canDoHandover";
              __int16 v77 = 2080;
              uint64_t v78 = "cannot be activated (chained):";
              __int16 v79 = 2080;
              uint64_t v80 = v40;
              __int16 v81 = 2080;
              v82 = v41;
              __int16 v83 = 2080;
              v84 = v42;
              __int16 v85 = 2080;
              __int16 v86 = v51;
              __int16 v87 = 2080;
              __int16 v88 = v49;
              __int16 v89 = 2080;
              uint64_t v90 = v50;
              __int16 v91 = 2080;
              uint64_t v92 = (uint64_t)v52;
              _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: %s: %s: %s(%s%s%s %s%s)", buf, 0x66u);
              goto LABEL_54;
            }
          }
          else
          {
            uint64_t v50 = *(void *)(v30 + 16);
          }
          std::string v52 = (const char *)&unk_10165244B;
          std::string v51 = (const char *)&unk_10165244B;
          goto LABEL_53;
        }
        std::string v53 = v31;
LABEL_61:
        uint64_t v6 = v62;
        uint64_t v7 = v60;
        int v9 = v61;
        if (v53) {
          sub_10004D2C8(v53);
        }
        goto LABEL_63;
      }
      uint64_t v17 = (*(uint64_t (**)(void *))(*v5 + 40))(v5);
      uint64_t v18 = asString();
      if (v66) {
        uint64_t v19 = "f";
      }
      else {
        uint64_t v19 = "t";
      }
      if (v66) {
        uint64_t v20 = (const char *)asString();
      }
      else {
        uint64_t v20 = "OK";
      }
      if (*((void *)&v66 + 1))
      {
        uint64_t v27 = *(void *)v67;
        if (**((unsigned char **)&v66 + 1))
        {
          uint64_t v28 = "{";
          unint64_t v29 = "}";
LABEL_29:
          *(_DWORD *)long long buf = 136317442;
          __int16 v74 = (const char *)v17;
          __int16 v75 = 2080;
          uint64_t v76 = "canDoHandover";
          __int16 v77 = 2080;
          uint64_t v78 = "cannot be activated";
          __int16 v79 = 2080;
          uint64_t v80 = v18;
          __int16 v81 = 2080;
          v82 = v19;
          __int16 v83 = 2080;
          v84 = v20;
          __int16 v85 = 2080;
          __int16 v86 = v28;
          __int16 v87 = 2080;
          __int16 v88 = (unsigned char *)*((void *)&v66 + 1);
          __int16 v89 = 2080;
          uint64_t v90 = v27;
          __int16 v91 = 2080;
          uint64_t v92 = (uint64_t)v29;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I DATA.%s: %s: %s: %s: %s(%s%s%s %s%s)", buf, 0x66u);
          goto LABEL_30;
        }
      }
      else
      {
        uint64_t v27 = *(void *)v67;
      }
      unint64_t v29 = (const char *)&unk_10165244B;
      uint64_t v28 = (const char *)&unk_10165244B;
      goto LABEL_29;
    }
LABEL_63:
    if (v69) {
      sub_10004D2C8(v69);
    }
    int v8 = 0;
    int v55 = 0;
    int v56 = 0;
    if (v9) {
      goto LABEL_68;
    }
LABEL_66:
    v6 += 3;
  }
  while (v6 != v7);
  int v55 = 1;
  int v56 = v8;
LABEL_68:
  uint64_t v6 = (void **)__p;
LABEL_74:
  uint64_t v58 = v55 & (v56 ^ 1u);
  if (v6)
  {
    uint64_t v71 = v6;
    operator delete(v6);
  }
  return v58;
}

void sub_100D93C3C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *__p,uint64_t a29)
{
}

uint64_t sub_100D93C94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7)
{
  return sub_100D92EDC((void *)(a1 - 24), a2, a3, a4, a5, a6, a7);
}

void sub_100D93C9C(void *a1, uint64_t a2)
{
  if (validContextType())
  {
    uint64_t v4 = otherContextType();
    uint64_t v5 = a1[14];
    if (v5)
    {
      char v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v5 + 312))(v5, v4);
      uint64_t v7 = a1[14];
      if (v7)
      {
        char v8 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v7 + 312))(v7, a2);
        goto LABEL_9;
      }
    }
    else
    {
      char v6 = 0;
    }
    char v8 = 0;
LABEL_9:
    (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
    BOOL v10 = a1[8];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      sub_10003E168(v40, a1 + 4);
      uint64_t v11 = *(void *)v40;
      BOOL v12 = *(std::__shared_weak_count **)&v40[8];
      *(void *)uint64_t v40 = 0;
      *(void *)&v40[8] = 0;
      if (v11) {
        uint64_t v13 = (const char *)(*(uint64_t (**)(void))(*(void *)(v11 + 24) + 48))();
      }
      else {
        uint64_t v13 = "nothing";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "handleDataContextAborted";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v13;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: from %s", buf, 0x16u);
      if (v12) {
        sub_10004D2C8(v12);
      }
      if (*(void *)&v40[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v40[8]);
      }
    }
    memset(buf, 0, sizeof(buf));
    sub_100DA1880(buf, (const void *)a1[3 * (int)a2 + 15], a1[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)a2 + 16] - a1[3 * (int)a2 + 15]) >> 3));
    uint64_t v14 = a1[8];
    BOOL v15 = os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT);
    if (v6)
    {
      if (v15)
      {
        *(_DWORD *)uint64_t v40 = 136315138;
        *(void *)&v40[4] = "handleDataContextAborted";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: In handover: switch observers to the remaining context", v40, 0xCu);
      }
      uint64_t v16 = *(void *)buf;
      uint64_t v17 = *(void *)&buf[8];
      while (v16 != v17)
      {
        if (*(unsigned char *)(v16 + 16)) {
          sub_100D862A8((uint64_t)a1, v4, *(const DataAPNSettingsObserver **)(v16 + 8), 1);
        }
        v16 += 24;
      }
    }
    else
    {
      if (v15)
      {
        *(_DWORD *)uint64_t v40 = 136315138;
        *(void *)&v40[4] = "handleDataContextAborted";
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s: Not in handover:", v40, 0xCu);
      }
      uint64_t v18 = *(void *)buf;
      for (uint64_t i = *(void *)&buf[8]; v18 != i; v18 += 24)
      {
        if (*(unsigned char *)(v18 + 16))
        {
          uint64_t v20 = *(void *)(v18 + 8);
          if (v20)
          {
            sub_10003E168(v40, a1 + 4);
            if (*(void *)v40) {
              uint64_t v21 = *(void *)v40 + 24;
            }
            else {
              uint64_t v21 = 0;
            }
            uint64_t v36 = v21;
            uint64_t v37 = *(std::__shared_weak_count **)&v40[8];
            *(void *)uint64_t v40 = 0;
            *(void *)&v40[8] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v20 + 80))(v20, a2, &v36);
            if (v37) {
              sub_10004D2C8(v37);
            }
            if (*(void *)&v40[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&v40[8]);
            }
            sub_100D862A8((uint64_t)a1, a2, *(const DataAPNSettingsObserver **)(v18 + 8), 0);
          }
        }
      }
      if ((v8 & 1) == 0) {
        goto LABEL_74;
      }
      __int16 v22 = a1[8];
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)uint64_t v40 = 136315138;
        *(void *)&v40[4] = "handleDataContextAborted";
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: handover to this:", v40, 0xCu);
      }
      if (validContextType())
      {
        uint64_t v23 = a1[14];
        if (v23)
        {
          sub_10003E168(v40, a1 + 4);
          if (*(void *)v40) {
            uint64_t v24 = *(void *)v40 + 24;
          }
          else {
            uint64_t v24 = 0;
          }
          uint64_t v38 = v24;
          uint64_t v39 = *(std::__shared_weak_count **)&v40[8];
          *(void *)uint64_t v40 = 0;
          *(void *)&v40[8] = 0;
          int v25 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v23 + 360))(v23, &v38);
          if (v39) {
            sub_10004D2C8(v39);
          }
          if (*(void *)&v40[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&v40[8]);
          }
          if (v25)
          {
            uint64_t v26 = a1[14];
            (*(void (**)(uint8_t *__return_ptr, void *))(*a1 + 16))(v40, a1);
            int v27 = (*(uint64_t (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v26 + 88))(v26, v4, v40);
            if (*(void *)&v40[8]) {
              sub_10004D2C8(*(std::__shared_weak_count **)&v40[8]);
            }
            if (!v27) {
              goto LABEL_74;
            }
          }
        }
      }
      else
      {
        uint64_t v28 = a1[8];
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = asString();
          *(_DWORD *)uint64_t v40 = 136315394;
          *(void *)&v40[4] = "isContextStateIdle";
          *(_WORD *)&v40[12] = 2080;
          *(void *)&v40[14] = v29;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", v40, 0x16u);
        }
      }
      if (sub_100D86FA4((uint64_t)a1, v4))
      {
        (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, v4, 0);
        memset(v40, 0, 24);
        sub_100DA1880(v40, (const void *)a1[3 * (int)v4 + 15], a1[3 * (int)v4 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)v4 + 16] - a1[3 * (int)v4 + 15]) >> 3));
        uint64_t v30 = *(void *)v40;
        uint64_t v31 = *(void *)&v40[8];
        if (*(void *)v40 != *(void *)&v40[8])
        {
          do
          {
            if (*(unsigned char *)(v30 + 16))
            {
              uint64_t v32 = *(void *)(v30 + 8);
              if (v32)
              {
                sub_10003E168(&v38, a1 + 4);
                if (v38) {
                  uint64_t v33 = v38 + 24;
                }
                else {
                  uint64_t v33 = 0;
                }
                uint64_t v34 = v33;
                uint64_t v35 = v39;
                uint64_t v38 = 0;
                uint64_t v39 = 0;
                (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v32 + 64))(v32, v4, &v34);
                if (v35) {
                  sub_10004D2C8(v35);
                }
                if (v39) {
                  sub_10004D2C8(v39);
                }
                sub_100D862A8((uint64_t)a1, v4, *(const DataAPNSettingsObserver **)(v30 + 8), 0);
              }
            }
            v30 += 24;
          }
          while (v30 != v31);
          uint64_t v30 = *(void *)v40;
        }
        if (v30)
        {
          *(void *)&v40[8] = v30;
          operator delete((void *)v30);
        }
      }
    }
LABEL_74:
    (*(void (**)(void *, uint64_t))(*a1 + 1184))(a1, a2);
    if (*(void *)buf)
    {
      *(void *)&buf[8] = *(void *)buf;
      operator delete(*(void **)buf);
    }
    return;
  }
  int v9 = a1[8];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "handleDataContextAborted";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
  }
}

void sub_100D943E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D944A8(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100D944B0(uint64_t a1, int a2, int a3)
{
  if (validContextType())
  {
    uint64_t v6 = a1 + 24 * a2;
    uint64_t v7 = *(void *)(v6 + 120);
    uint64_t v8 = *(void *)(v6 + 128);
    while (v7 != v8)
    {
      if (*(unsigned char *)(v7 + 16)
        || (int v11 = otherContextType(), sub_100D86FA4(a1, v11) == 3)
        && (int v12 = otherContextType(), sub_100D86BE4(a1, v12, *(const DataAPNSettingsObserver **)(v7 + 8))))
      {
        uint64_t v9 = (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 272))(*(void *)(v7 + 8));
        if ((v10 & 0x10000) != 0)
        {
          if ((v9 & 0x10000000000) == 0) {
            return 1;
          }
        }
        else if ((v9 & 0x10000000000) == 0 && !a3)
        {
          return 1;
        }
      }
      v7 += 24;
    }
  }
  else
  {
    uint64_t v13 = *(NSObject **)(a1 + 64);
    BOOL v14 = os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v14) {
      return result;
    }
    int v16 = 136315394;
    uint64_t v17 = "hasIllegalConnectionsWhileInternationalDataRoamingNotAllowed";
    __int16 v18 = 2080;
    uint64_t v19 = asString();
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v16, 0x16u);
  }
  return 0;
}

uint64_t sub_100D94644(uint64_t a1, int a2, int a3)
{
  return sub_100D944B0(a1 - 24, a2, a3);
}

uint64_t sub_100D9464C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = a1[14];
  if (v10) {
    (*(void (**)(uint64_t, void))(*(void *)v10 + 344))(v10, 0);
  }
  if (anyContextType())
  {
    uint64_t v11 = 0;
    LODWORD(a2) = 0;
    do
      LODWORD(a2) = (*(uint64_t (**)(void *, void, uint64_t, uint64_t, uint64_t))(*a1 + 680))(a1, dword_1015716C8[v11++], a3, a4, a5) | a2;
    while (v11 != 2);
    return a2 & 1;
  }
  int v12 = a1[8];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_100D86FA4((uint64_t)a1, a2);
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "deactivateDataSettings";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    __int16 v64 = 2080;
    uint64_t v65 = asString();
    __int16 v66 = 2080;
    uint64_t v67 = asString();
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: state %s ct %s reason %s", buf, 0x2Au);
  }
  if (!validContextType()) {
    goto LABEL_62;
  }
  int v13 = sub_100D86FA4((uint64_t)a1, a2);
  if ((v13 - 2) < 2)
  {
    uint64_t v26 = a1[14];
    if (v26)
    {
      sub_10003E168(buf, a1 + 4);
      if (*(void *)buf) {
        uint64_t v27 = *(void *)buf + 24;
      }
      else {
        uint64_t v27 = 0;
      }
      uint64_t v57 = v27;
      uint64_t v58 = *(std::__shared_weak_count **)&buf[8];
      *(void *)long long buf = 0;
      *(void *)&buf[8] = 0;
      int v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v26 + 360))(v26, &v57);
      if (v58) {
        sub_10004D2C8(v58);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v28)
      {
        uint64_t v29 = a1[8];
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v30 = asString();
          sub_100D86FA4((uint64_t)a1, a2);
          uint64_t v31 = asString();
          uint64_t v32 = asString();
          *(_DWORD *)long long buf = 136316162;
          *(void *)&uint8_t buf[4] = "deactivateDataSettings";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v30;
          __int16 v64 = 2080;
          uint64_t v65 = a4;
          __int16 v66 = 2080;
          uint64_t v67 = v31;
          __int16 v68 = 2080;
          uint64_t v69 = v32;
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: requested, because of %s('%s'), in state %s on %s (2)", buf, 0x34u);
        }
        uint64_t v33 = a1[14];
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v55, a1);
        LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v33 + 264))(v33, a2, &v55, a3, a5);
        uint64_t v34 = v56;
        if (!v56) {
          return a2 & 1;
        }
LABEL_37:
        sub_10004D2C8(v34);
        return a2 & 1;
      }
    }
    uint64_t v35 = a1[8];
    if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v36 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "deactivateDataSettings";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v36;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#E %s: !!! deactivation without current active PDPActivator (%s)", buf, 0x16u);
    }
    (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
    (*(void (**)(void *, uint64_t))(*a1 + 464))(a1, a2);
    goto LABEL_54;
  }
  if (v13 == 1)
  {
    uint64_t v37 = a1[14];
    uint64_t v38 = a1[8];
    BOOL v39 = os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT);
    if (v37)
    {
      if (v39)
      {
        uint64_t v40 = asString();
        sub_100D86FA4((uint64_t)a1, a2);
        uint64_t v41 = asString();
        uint64_t v42 = asString();
        *(_DWORD *)long long buf = 136316162;
        *(void *)&uint8_t buf[4] = "deactivateDataSettings";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v40;
        __int16 v64 = 2080;
        uint64_t v65 = a4;
        __int16 v66 = 2080;
        uint64_t v67 = v41;
        __int16 v68 = 2080;
        uint64_t v69 = v42;
        _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I %s: requested, because of %s('%s'), in state %s on %s (3)", buf, 0x34u);
        uint64_t v37 = a1[14];
      }
      sub_10003E168(buf, a1 + 4);
      if (*(void *)buf) {
        uint64_t v43 = *(void *)buf + 24;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v53 = v43;
      uint64_t v54 = *(std::__shared_weak_count **)&buf[8];
      *(void *)long long buf = 0;
      *(void *)&buf[8] = 0;
      (*(void (**)(uint64_t, uint64_t *))(*(void *)v37 + 48))(v37, &v53);
      if (v54) {
        sub_10004D2C8(v54);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
    }
    else if (v39)
    {
      uint64_t v44 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "deactivateDataSettings";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v44;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#E %s: !!! deactivation (on grab) without current active PDPActivator (%s)", buf, 0x16u);
    }
    (*(void (**)(void *, uint64_t))(*a1 + 464))(a1, a2);
    goto LABEL_54;
  }
  if (v13)
  {
LABEL_54:
    LOBYTE(a2) = 1;
    return a2 & 1;
  }
  uint64_t v14 = a1[14];
  if (!v14) {
    goto LABEL_58;
  }
  sub_10003E168(buf, a1 + 4);
  if (*(void *)buf) {
    uint64_t v15 = *(void *)buf + 24;
  }
  else {
    uint64_t v15 = 0;
  }
  uint64_t v61 = v15;
  char v62 = *(std::__shared_weak_count **)&buf[8];
  *(void *)long long buf = 0;
  *(void *)&buf[8] = 0;
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v14 + 360))(v14, &v61);
  if (v62) {
    sub_10004D2C8(v62);
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v17 = a1[14];
  if (!v16)
  {
    if (v17)
    {
      uint64_t v45 = a1[8];
      LOBYTE(a2) = 0;
      if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
        return a2 & 1;
      }
      uint64_t v46 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "deactivateDataSettings";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v46;
      uint64_t v23 = "#I %s: this is not our activator (%s)";
      goto LABEL_60;
    }
LABEL_58:
    uint64_t v45 = a1[8];
    LOBYTE(a2) = 0;
    if (!os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT)) {
      return a2 & 1;
    }
    uint64_t v47 = asString();
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "deactivateDataSettings";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v47;
    uint64_t v23 = "#I %s: activator is empty (%s)";
LABEL_60:
    uint64_t v24 = v45;
    uint32_t v25 = 22;
    goto LABEL_61;
  }
  int v18 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v17 + 80))(v17, a2);
  uint64_t v19 = a1[8];
  BOOL v20 = os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT);
  if (v18)
  {
    if (v20)
    {
      uint64_t v21 = asString();
      uint64_t v22 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "deactivateDataSettings";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v21;
      __int16 v64 = 2080;
      uint64_t v65 = v22;
      uint64_t v23 = "#I %s: nothing to deactivate for %s (%s)";
      uint64_t v24 = v19;
      uint32_t v25 = 32;
LABEL_61:
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, v23, buf, v25);
    }
LABEL_62:
    LOBYTE(a2) = 0;
    return a2 & 1;
  }
  if (v20)
  {
    uint64_t v49 = asString();
    sub_100D86FA4((uint64_t)a1, a2);
    uint64_t v50 = asString();
    uint64_t v51 = asString();
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "deactivateDataSettings";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v49;
    __int16 v64 = 2080;
    uint64_t v65 = a4;
    __int16 v66 = 2080;
    uint64_t v67 = v50;
    __int16 v68 = 2080;
    uint64_t v69 = v51;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s: requested, because of %s('%s'), in state %s on %s (1)", buf, 0x34u);
  }
  uint64_t v52 = a1[14];
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v59, a1);
  LOBYTE(a2) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v52 + 264))(v52, a2, &v59, a3, a5);
  uint64_t v34 = v60;
  if (v60) {
    goto LABEL_37;
  }
  return a2 & 1;
}

void sub_100D94F50(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a16) {
    sub_10004D2C8(a16);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D94FBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_100D9464C((void *)(a1 - 24), a2, a3, a4, a5);
}

uint64_t sub_100D94FC4(uint64_t a1, int a2, void *a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(__p[0]) = 136315650;
    *(void **)((char *)__p + 4) = "resetDataSettings";
    WORD2(__p[1]) = 2080;
    *(void **)((char *)&__p[1] + 6) = (void *)asString();
    HIWORD(__p[2]) = 2080;
    __p[3] = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: resetting settings %s due to %s", (uint8_t *)__p, 0x20u);
  }
  uint64_t v7 = dword_1015716C8;
  do
  {
    int v8 = *v7;
    if (*v7 == a2 || anyContextType())
    {
      uint64_t v9 = v8;
      memset(__p, 0, 24);
      sub_100DA1880(__p, *(const void **)(a1 + 24 * v8 + 120), *(void *)(a1 + 24 * v8 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * v8 + 128) - *(void *)(a1 + 24 * v8 + 120)) >> 3));
      uint64_t v11 = (char *)__p[0];
      uint64_t v10 = (char *)__p[1];
      if (__p[0] != __p[1])
      {
        int v12 = (const DataAPNSettingsObserver **)((char *)__p[0] + 8);
        do
        {
          if (*((unsigned char *)v12 + 8))
          {
            uint64_t v13 = *(void *)(a1 + 112);
            if (v13
              && (uint64_t v14 = otherContextType(),
                  (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v13 + 312))(v13, v14))
              && !anyContextType())
            {
              unsigned int v17 = otherContextType();
              char v15 = 1;
              int v16 = v12;
            }
            else
            {
              (*(void (**)(const DataAPNSettingsObserver *, void *))(*(void *)*v12 + 376))(*v12, a3);
              char v15 = 0;
              int v16 = (const DataAPNSettingsObserver **)(v11 + 8);
              unsigned int v17 = v8;
            }
            sub_100D862A8(a1, v17, *v16, v15);
          }
          v11 += 24;
          int v18 = (char *)(v12 + 2);
          v12 += 3;
        }
        while (v18 != v10);
      }
      *(_DWORD *)(a1 + 4 * v8 + 232) = 0;
      *(unsigned char *)(a1 + v8 + 240) = 0;
      uint64_t v19 = a1 + 16 * v8;
      BOOL v20 = *(std::__shared_weak_count **)(v19 + 320);
      *(void *)(v19 + 312) = 0;
      *(void *)(v19 + 320) = 0;
      if (v20) {
        sub_10004D2C8(v20);
      }
      if (*(unsigned char *)(v19 + 368)) {
        *(unsigned char *)(v19 + 368) = 0;
      }
      *(_DWORD *)(a1 + 4 * v9 + 448) = 0;
      uint64_t v21 = (void *)(a1 + 56 * (int)v9);
      v21[57] = 0;
      v21[58] = &unk_10165244B;
      v21[59] = &unk_10165244B;
      v21[60] = 0;
      v21[61] = 2;
      uint64_t v22 = (std::__shared_weak_count *)v21[63];
      v21[62] = 0;
      v21[63] = 0;
      if (v22) {
        sub_10004D2C8(v22);
      }
      if (__p[0])
      {
        __p[1] = __p[0];
        operator delete(__p[0]);
      }
    }
    ++v7;
  }
  while (v7 != dword_1015716D0);
  for (uint64_t i = 0; i != 2; ++i)
    *(_DWORD *)(a1 + 4 * dword_1015716D0[i] + 568) = 0;
  uint64_t v24 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = 0u;
  if (v24) {
    sub_10004D2C8(v24);
  }
  *(_DWORD *)(a1 + 592) = 2;
  uint64_t v25 = *(void *)(a1 + 440);
  *(void *)(a1 + 440) = 0;
  if (v25) {
    (*(void (**)(uint64_t))(*(void *)v25 + 8))(v25);
  }
  sub_100D87084(a1 + 632);
  return (*(uint64_t (**)(uint64_t, const char *, uint64_t, void))(*(void *)a1 + 696))(a1, "settings resetting", 1, 0);
}

void sub_100D9533C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D95360(uint64_t a1, int a2, void *a3)
{
  return sub_100D94FC4(a1 - 24, a2, a3);
}

void sub_100D95368(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4)
{
  int v8 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asStringBool(a3);
    if (a4) {
      uint64_t v10 = (const char *)(*(uint64_t (**)(uint64_t))(*(void *)a4 + 16))(a4);
    }
    else {
      uint64_t v10 = "null";
    }
    uint64_t v11 = asStringBool(*(unsigned char *)(a1 + 596));
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "detachActivator";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = a2;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v45 = v9;
    __int16 v46 = 2080;
    uint64_t v47 = v10;
    __int16 v48 = 2080;
    uint64_t v49 = v11;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: detaching due to : %s forced : %s requestingObserver : %s detaching : %s", buf, 0x34u);
  }
  if (*(unsigned char *)(a1 + 596)) {
    return;
  }
  *(unsigned char *)(a1 + 596) = 1;
  uint64_t v12 = *(void *)(a1 + 112);
  if (!v12
    || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v12 + 80))(v12, 2)
    || *(_DWORD *)(a1 + 232)
    || *(_DWORD *)(a1 + 236)
    || !(*(unsigned int (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112))
    && sub_100D83708((Registry **)a1, v13))
  {
    goto LABEL_11;
  }
  int v36 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112));
  if (a3) {
    goto LABEL_35;
  }
  uint64_t v14 = dword_1015716C8;
  while (2)
  {
    int v15 = *v14;
    uint64_t v41 = 0;
    uint64_t v42 = 0;
    uint64_t v43 = 0;
    sub_100DA1880(&v41, *(const void **)(a1 + 24 * v15 + 120), *(void *)(a1 + 24 * v15 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * v15 + 128) - *(void *)(a1 + 24 * v15 + 120)) >> 3));
    unsigned int v17 = v41;
    int v16 = v42;
    if (v41 == v42)
    {
      char v22 = 1;
      goto LABEL_31;
    }
    while (1)
    {
      if (LOBYTE(v17->__shared_weak_owners_))
      {
        uint64_t shared_owners = v17->__shared_owners_;
        if (shared_owners != a4) {
          break;
        }
      }
LABEL_25:
      if (++v17 == v16)
      {
        char v22 = 1;
        goto LABEL_30;
      }
    }
    if (!a4
      && ((*(uint64_t (**)(uint64_t))(*(void *)shared_owners + 128))(shared_owners) & 1) == 0
      && (*(unsigned int (**)(uint64_t))(*(void *)v17->__shared_owners_ + 200))(v17->__shared_owners_) == 5)
    {
      uint64_t v19 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)v17->__shared_owners_ + 16))(v17->__shared_owners_);
        uint64_t v21 = asString();
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "detachActivator";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v20;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v45 = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s: ephemeral observer %s is current on idle %s", buf, 0x20u);
      }
      goto LABEL_25;
    }
    uint64_t v23 = *(NSObject **)(a1 + 64);
    char v22 = 0;
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)v17->__shared_owners_ + 16))(v17->__shared_owners_);
      uint64_t v25 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "detachActivator";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v24;
      *(_WORD *)&unsigned char buf[22] = 2080;
      uint64_t v45 = v25;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s: cannot detach because %s is current on %s", buf, 0x20u);
      char v22 = 0;
    }
LABEL_30:
    unsigned int v17 = v41;
LABEL_31:
    if (v17)
    {
      uint64_t v42 = v17;
      operator delete(v17);
    }
    if (v22)
    {
      if (++v14 == dword_1015716D0)
      {
LABEL_35:
        uint64_t v26 = *(void *)(a1 + 112);
        sub_10003E168(buf, (void *)(a1 + 32));
        if (*(void *)buf) {
          uint64_t v27 = *(void *)buf + 24;
        }
        else {
          uint64_t v27 = 0;
        }
        uint64_t v39 = v27;
        uint64_t v40 = *(std::__shared_weak_count **)&buf[8];
        *(void *)long long buf = 0;
        *(void *)&buf[8] = 0;
        char v28 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v26 + 104))(v26, &v39);
        if (v40) {
          sub_10004D2C8(v40);
        }
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v28)
        {
          uint64_t v29 = *(NSObject **)(a1 + 64);
          if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "detachActivator";
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v36;
            _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) detached from PDP %d", buf, 0x12u);
          }
          *(void *)(a1 + 112) = 0;
          uint64_t v30 = dword_1015716C8;
          do
          {
            uint64_t v31 = *v30;
            memset(buf, 0, sizeof(buf));
            sub_100DA1880(buf, *(const void **)(a1 + 24 * (int)v31 + 120), *(void *)(a1 + 24 * (int)v31 + 128), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(a1 + 24 * (int)v31 + 128) - *(void *)(a1 + 24 * (int)v31 + 120)) >> 3));
            uint64_t v32 = *(void *)buf;
            uint64_t v33 = *(void *)&buf[8];
            if (*(void *)buf != *(void *)&buf[8])
            {
              do
              {
                if (*(unsigned char *)(v32 + 16))
                {
                  sub_100D862A8(a1, v31, *(const DataAPNSettingsObserver **)(v32 + 8), 0);
                  uint64_t v34 = *(void *)(v32 + 8);
                  sub_10003E168(&v41, (void *)(a1 + 32));
                  if (v41) {
                    uint64_t v35 = v41 + 1;
                  }
                  else {
                    uint64_t v35 = 0;
                  }
                  uint64_t v37 = v35;
                  uint64_t v38 = v42;
                  uint64_t v41 = 0;
                  uint64_t v42 = 0;
                  (*(void (**)(uint64_t, uint64_t, std::__shared_weak_count **))(*(void *)v34 + 64))(v34, v31, &v37);
                  if (v38) {
                    sub_10004D2C8(v38);
                  }
                  if (v42) {
                    sub_10004D2C8(v42);
                  }
                  (*(void (**)(void, const char *))(**(void **)(v32 + 8) + 376))(*(void *)(v32 + 8), "detach activator");
                }
                v32 += 24;
              }
              while (v32 != v33);
              uint64_t v32 = *(void *)buf;
            }
            if (v32)
            {
              *(void *)&buf[8] = v32;
              operator delete((void *)v32);
            }
            ++v30;
          }
          while (v30 != dword_1015716D0);
        }
        break;
      }
      continue;
    }
    break;
  }
LABEL_11:
  *(unsigned char *)(a1 + 596) = 0;
}

void sub_100D959C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, uint64_t a20,uint64_t a21,std::__shared_weak_count *a22)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (a22) {
    sub_10004D2C8(a22);
  }
  *(unsigned char *)(v22 + 596) = 0;
  _Unwind_Resume(exception_object);
}

void sub_100D95A64(uint64_t a1, uint64_t a2, BOOL a3, uint64_t a4)
{
}

void sub_100D95A6C(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "clearActivator";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: clearing activator", buf, 0xCu);
  }
  uint64_t v3 = *(void *)(a1 + 112);
  if (v3
    && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v3 + 80))(v3, 2)
    && !*(_DWORD *)(a1 + 232)
    && !*(_DWORD *)(a1 + 236)
    && ((*(unsigned int (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112))
     || !sub_100D83708((Registry **)a1, v4)))
  {
    int v5 = (*(uint64_t (**)(void))(**(void **)(a1 + 112) + 16))(*(void *)(a1 + 112));
    uint64_t v6 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "clearActivator";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: (change states) cleared from PDP %d", buf, 0x12u);
    }
    *(void *)(a1 + 112) = 0;
    uint64_t v7 = dword_1015716C8;
    do
    {
      uint64_t v8 = *v7;
      memset(buf, 0, sizeof(buf));
      sub_100DA1880(buf, *(const void **)(a1 + 24 * (int)v8 + 120), *(void *)(a1 + 24 * (int)v8 + 128), 0xAAAAAAAAAAAAAAABLL* ((uint64_t)(*(void *)(a1 + 24 * (int)v8 + 128) - *(void *)(a1 + 24 * (int)v8 + 120)) >> 3));
      uint64_t v9 = *(void *)buf;
      uint64_t v10 = *(void *)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        do
        {
          if (*(unsigned char *)(v9 + 16))
          {
            sub_100D862A8(a1, v8, *(const DataAPNSettingsObserver **)(v9 + 8), 0);
            uint64_t v11 = *(void *)(v9 + 8);
            sub_10003E168(&v13, (void *)(a1 + 32));
            if (v13) {
              uint64_t v12 = v13 + 24;
            }
            else {
              uint64_t v12 = 0;
            }
            uint64_t v15 = v12;
            int v16 = v14;
            uint64_t v13 = 0;
            uint64_t v14 = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v11 + 64))(v11, v8, &v15);
            if (v16) {
              sub_10004D2C8(v16);
            }
            if (v14) {
              sub_10004D2C8(v14);
            }
            (*(void (**)(void, const char *))(**(void **)(v9 + 8) + 376))(*(void *)(v9 + 8), "detach activator");
          }
          v9 += 24;
        }
        while (v9 != v10);
        uint64_t v9 = *(void *)buf;
      }
      if (v9)
      {
        *(void *)&buf[8] = v9;
        operator delete((void *)v9);
      }
      ++v7;
    }
    while (v7 != dword_1015716D0);
  }
}

void sub_100D95D80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
}

void sub_100D95DC8(uint64_t a1)
{
}

uint64_t sub_100D95DD0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, uint64_t a6)
{
  uint64_t v12 = a1[8];
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v20 = "requestQos";
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v13 = a1[14];
  if (!v13) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v17, a1);
  sub_100058198(&v16, a5);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t, const void **, uint64_t))(*(void *)v13 + 136))(v13, a2, &v17, a3, a4, &v16, a6);
  sub_100057D78(&v16);
  if (v18) {
    sub_10004D2C8(v18);
  }
  return v14;
}

void sub_100D95F44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D95F6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const void **a5, uint64_t a6)
{
  return sub_100D95DD0((void *)(a1 - 24), a2, a3, a4, a5, a6);
}

void sub_100D95F74(void *a1, uint64_t a2, uint64_t a3, const void **a4)
{
  uint64_t v8 = a1[8];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v14 = "setPacketNotificationFilter";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v9 = a1[14];
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v11, a1);
    sub_100058198(&v10, a4);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, const void **))(*(void *)v9 + 144))(v9, a2, &v11, a3, &v10);
    sub_100057D78(&v10);
    if (v12) {
      sub_10004D2C8(v12);
    }
  }
}

void sub_100D960C0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100D960E8(uint64_t a1, uint64_t a2, uint64_t a3, const void **a4)
{
}

void sub_100D960F0(void *a1, uint64_t a2, const void **a3)
{
  uint64_t v6 = a1[8];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v12 = "dropIPPackets";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v7 = a1[14];
  if (v7)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v9, a1);
    sub_100062740(&v8, a3);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, const void **))(*(void *)v7 + 152))(v7, a2, &v9, &v8);
    sub_100044D00(&v8);
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
}

void sub_100D9622C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(a1);
}

void sub_100D96254(uint64_t a1, uint64_t a2, const void **a3)
{
}

void sub_100D9625C(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[8];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = "dropIMSPackets";
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v5 = a1[14];
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v6, a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v5 + 160))(v5, a2, &v6);
    if (v7) {
      sub_10004D2C8(v7);
    }
  }
}

void sub_100D9637C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9639C(uint64_t a1, uint64_t a2)
{
}

void sub_100D963A4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = a1[8];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    uint64_t v13 = "setQuality";
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: start", buf, 0xCu);
  }
  uint64_t v9 = a1[14];
  if (v9)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v10, a1);
    (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, uint64_t))(*(void *)v9 + 168))(v9, a2, &v10, a3, a4);
    if (v11) {
      sub_10004D2C8(v11);
    }
  }
}

void sub_100D964DC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D964FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100D96504(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1[14];
  if (v4)
  {
    (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v9, a1);
    uint64_t v7 = (*(uint64_t (**)(void *, void, void, void))(*a1 + 136))(a1, 0, 0, 0);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)v4 + 400))(v4, &v9, a2, a3, v7);
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  else
  {
    uint64_t v8 = a1[8];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#E invalid fDataActivator", buf, 2u);
    }
  }
}

void sub_100D96630(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D96648(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100D96650(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[8];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v10 = 136315138;
    uint64_t v11 = "handleDataContextGrabbed";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v10, 0xCu);
  }
  uint64_t v7 = a1[14];
  if (v7 == a3) {
    goto LABEL_8;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v10 = 136315650;
    uint64_t v11 = "called from wrong context";
    __int16 v12 = 2080;
    uint64_t v13 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataAPNSettings.cpp";
    __int16 v14 = 1024;
    int v15 = 3391;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT dataActivator == fDataActivator\n %s\n at %s:%d\n**********", (uint8_t *)&v10, 0x1Cu);
    uint64_t v7 = a1[14];
  }
  if (v7 == a3 || (__TUAssertTrigger(), a1[14] == a3))
  {
LABEL_8:
    int v8 = sub_100D86FA4((uint64_t)a1, a2);
    if (v8 == 1)
    {
      (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
      (*(void (**)(void *, uint64_t))(*a1 + 1192))(a1, a2);
      sub_100D8F020((uint64_t)a1, a2);
    }
    uint64_t v9 = otherContextType();
    if (sub_100D86FA4((uint64_t)a1, v9) == 1)
    {
      (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, v9, 0);
      if (v8 != 1)
      {
        (*(void (**)(void *, uint64_t))(*a1 + 1192))(a1, v9);
        sub_100D8F020((uint64_t)a1, v9);
      }
    }
  }
}

void sub_100D968EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

void sub_100D968F4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = a1[8];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v13 = 136315138;
    __int16 v14 = "handleDataContextGrabRejected";
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: start", (uint8_t *)&v13, 0xCu);
  }
  uint64_t v7 = a1[14];
  if (v7 == a3) {
    goto LABEL_8;
  }
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    int v13 = 136315650;
    __int16 v14 = "called from wrong context";
    __int16 v15 = 2080;
    int v16 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataAPNSettings.cpp";
    __int16 v17 = 1024;
    int v18 = 3420;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT dataActivator == fDataActivator\n %s\n at %s:%d\n**********", (uint8_t *)&v13, 0x1Cu);
    uint64_t v7 = a1[14];
  }
  if (v7 == a3 || (__TUAssertTrigger(), a1[14] == a3))
  {
LABEL_8:
    int v8 = sub_100D86FA4((uint64_t)a1, a2);
    if (v8 == 1)
    {
      sub_100D88BAC(a1, a2);
      (*(void (**)(void *, uint64_t))(*a1 + 480))(a1, a2);
    }
    uint64_t v9 = otherContextType();
    if (sub_100D86FA4((uint64_t)a1, v9) == 1)
    {
      (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, v9, 0);
      sub_100D88BAC(a1, v9);
      (*(void (**)(void *, uint64_t))(*a1 + 480))(a1, v9);
    }
    else if (v8 != 1)
    {
      int v10 = sub_100D86FA4((uint64_t)a1, a2);
      if ((v10 - 1) < 2)
      {
        (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
        sub_100D88BAC(a1, a2);
        (*(void (**)(void *, uint64_t))(*a1 + 480))(a1, a2);
      }
      else if (v10)
      {
        if (v10 == 3) {
          (*(void (**)(void *, uint64_t))(*a1 + 464))(a1, a2);
        }
      }
      else
      {
        uint64_t v11 = a1[8];
        if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
        {
          sub_100D86FA4((uint64_t)a1, a2);
          uint64_t v12 = asString();
          int v13 = 136315394;
          __int16 v14 = "handleDataContextGrabRejected";
          __int16 v15 = 2080;
          int v16 = (const char *)v12;
          _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: ERR: At wrong state %s", (uint8_t *)&v13, 0x16u);
        }
      }
    }
  }
}

void sub_100D96CA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
}

uint64_t sub_100D96CAC(uint64_t a1, int a2)
{
  if (a2 == 1) {
    return 1;
  }
  if (a2)
  {
    __int16 v14 = *(NSObject **)(a1 + 64);
    uint64_t v13 = 0;
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)int v16 = 136315394;
      *(void *)&v16[4] = "checkActivationStatusBeforeActivate";
      __int16 v17 = 2080;
      uint64_t v18 = asString();
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E %s: requested for unknown context type: %s", v16, 0x16u);
      return 0;
    }
    return v13;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 72));
  uint64_t v4 = ServiceMap;
  if (v5 < 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      uint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int v16 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)v16);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_14:
    std::mutex::unlock(v4);
    int v10 = 0;
    char v12 = 1;
    if (!v11) {
      goto LABEL_16;
    }
LABEL_15:
    if (((*(uint64_t (**)(uint64_t, void))(*(void *)a1 + 1024))(a1, 0) & 1) == 0)
    {
      uint64_t v13 = (*(uint64_t (**)(uint64_t))(*(void *)v11 + 1112))(v11);
      if (v12) {
        return v13;
      }
      goto LABEL_17;
    }
    goto LABEL_16;
  }
  uint64_t v11 = v9[3];
  int v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_14;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v4);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v12 = 0;
  if (v11) {
    goto LABEL_15;
  }
LABEL_16:
  uint64_t v13 = 1;
  if ((v12 & 1) == 0) {
LABEL_17:
  }
    sub_10004D2C8(v10);
  return v13;
}

void sub_100D96EC0(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D96EEC(char **a1, uint64_t *a2)
{
  unint64_t v6 = (unint64_t)a1[2];
  uint64_t v4 = (uint64_t)(a1 + 2);
  unint64_t v5 = v6;
  unint64_t v7 = *(void *)(v4 - 8);
  if (v7 >= v6)
  {
    unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - (void)*a1) >> 2);
    unint64_t v11 = v10 + 1;
    if (v10 + 1 > 0x1555555555555555) {
      sub_10006A748();
    }
    unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v5 - (void)*a1) >> 2);
    if (2 * v12 > v11) {
      unint64_t v11 = 2 * v12;
    }
    if (v12 >= 0xAAAAAAAAAAAAAAALL) {
      unint64_t v13 = 0x1555555555555555;
    }
    else {
      unint64_t v13 = v11;
    }
    if (v13) {
      __int16 v14 = (char *)sub_1008DBA7C(v4, v13);
    }
    else {
      __int16 v14 = 0;
    }
    __int16 v15 = &v14[12 * v10];
    int v16 = &v14[12 * v13];
    uint64_t v17 = *a2;
    *((_DWORD *)v15 + 2) = *((_DWORD *)a2 + 2);
    *(void *)__int16 v15 = v17;
    uint64_t v9 = v15 + 12;
    uint64_t v19 = *a1;
    uint64_t v18 = a1[1];
    if (v18 != *a1)
    {
      do
      {
        uint64_t v20 = *(void *)(v18 - 12);
        v18 -= 12;
        int v21 = *((_DWORD *)v18 + 2);
        *(void *)(v15 - 12) = v20;
        v15 -= 12;
        *((_DWORD *)v15 + 2) = v21;
      }
      while (v18 != v19);
      uint64_t v18 = *a1;
    }
    *a1 = v15;
    a1[1] = v9;
    a1[2] = v16;
    if (v18) {
      operator delete(v18);
    }
  }
  else
  {
    uint64_t v8 = *a2;
    *(_DWORD *)(v7 + 8) = *((_DWORD *)a2 + 2);
    *(void *)unint64_t v7 = v8;
    uint64_t v9 = (char *)(v7 + 12);
  }
  a1[1] = v9;
}

uint64_t sub_100D97008(uint64_t a1, int a2)
{
  if ((validContextType() & 1) == 0)
  {
    unint64_t v10 = *(NSObject **)(a1 + 64);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    int v12 = 136315394;
    unint64_t v13 = "isImsSupported";
    __int16 v14 = 2080;
    uint64_t v15 = asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v12, 0x16u);
    return 0;
  }
  uint64_t v4 = a1 + 24 * a2;
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5 == v6) {
    return 0;
  }
  uint64_t v7 = v5 + 24;
  do
  {
    uint64_t result = (*(uint64_t (**)(void))(**(void **)(v7 - 16) + 136))(*(void *)(v7 - 16));
    if (result) {
      break;
    }
    BOOL v9 = v7 == v6;
    v7 += 24;
  }
  while (!v9);
  return result;
}

uint64_t sub_100D97134(uint64_t a1, int a2)
{
  return sub_100D97008(a1 - 24, a2);
}

uint64_t sub_100D9713C(uint64_t a1, int a2)
{
  if (validContextType())
  {
    memset(v12, 0, sizeof(v12));
    sub_100DA1880(v12, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v4 = (void *)v12[0];
    uint64_t v5 = v12[1];
    if (v12[0] == v12[1])
    {
      uint64_t v8 = 0;
      if (!v12[0]) {
        return v8;
      }
    }
    else
    {
      uint64_t v6 = v12[0] + 24;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v6 - 16) + 152))(*(void *)(v6 - 16));
        uint64_t v8 = v7;
        if (v6 == v5) {
          int v9 = 1;
        }
        else {
          int v9 = v7;
        }
        v6 += 24;
      }
      while (v9 != 1);
      uint64_t v4 = (void *)v12[0];
      if (!v12[0]) {
        return v8;
      }
    }
    v12[1] = v4;
    operator delete(v4);
    return v8;
  }
  unint64_t v10 = *(NSObject **)(a1 + 64);
  uint64_t v8 = 0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 136315394;
    *(void *)((char *)v12 + 4) = "isEmergencySupported";
    WORD2(v12[1]) = 2080;
    *(void *)((char *)&v12[1] + 6) = asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v12, 0x16u);
    return 0;
  }
  return v8;
}

void sub_100D972B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D972DC(uint64_t a1, int a2)
{
  return sub_100D9713C(a1 - 24, a2);
}

uint64_t sub_100D972E4(uint64_t a1, int a2)
{
  if (validContextType())
  {
    memset(v12, 0, sizeof(v12));
    sub_100DA1880(v12, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v4 = (void *)v12[0];
    uint64_t v5 = v12[1];
    if (v12[0] == v12[1])
    {
      uint64_t v8 = 0;
      if (!v12[0]) {
        return v8;
      }
    }
    else
    {
      uint64_t v6 = v12[0] + 24;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v6 - 16) + 160))(*(void *)(v6 - 16));
        uint64_t v8 = v7;
        if (v6 == v5) {
          int v9 = 1;
        }
        else {
          int v9 = v7;
        }
        v6 += 24;
      }
      while (v9 != 1);
      uint64_t v4 = (void *)v12[0];
      if (!v12[0]) {
        return v8;
      }
    }
    v12[1] = v4;
    operator delete(v4);
    return v8;
  }
  unint64_t v10 = *(NSObject **)(a1 + 64);
  uint64_t v8 = 0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 136315394;
    *(void *)((char *)v12 + 4) = "isSMSOverIMSnoVoLTEEnabled";
    WORD2(v12[1]) = 2080;
    *(void *)((char *)&v12[1] + 6) = asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v12, 0x16u);
    return 0;
  }
  return v8;
}

void sub_100D97460(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D97484(uint64_t a1, int a2)
{
  return sub_100D972E4(a1 - 24, a2);
}

uint64_t sub_100D9748C(uint64_t a1, int a2)
{
  if (validContextType())
  {
    memset(v12, 0, sizeof(v12));
    sub_100DA1880(v12, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v4 = (void *)v12[0];
    uint64_t v5 = v12[1];
    if (v12[0] == v12[1])
    {
      uint64_t v8 = 0;
      if (!v12[0]) {
        return v8;
      }
    }
    else
    {
      uint64_t v6 = v12[0] + 24;
      do
      {
        uint64_t v7 = (*(uint64_t (**)(void))(**(void **)(v6 - 16) + 232))(*(void *)(v6 - 16));
        uint64_t v8 = v7;
        if (v6 == v5) {
          int v9 = 1;
        }
        else {
          int v9 = v7;
        }
        v6 += 24;
      }
      while (v9 != 1);
      uint64_t v4 = (void *)v12[0];
      if (!v12[0]) {
        return v8;
      }
    }
    v12[1] = v4;
    operator delete(v4);
    return v8;
  }
  unint64_t v10 = *(NSObject **)(a1 + 64);
  uint64_t v8 = 0;
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v12[0]) = 136315394;
    *(void *)((char *)v12 + 4) = "isDadRequired";
    WORD2(v12[1]) = 2080;
    *(void *)((char *)&v12[1] + 6) = asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v12, 0x16u);
    return 0;
  }
  return v8;
}

void sub_100D97608(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D9762C(uint64_t a1, int a2)
{
  return sub_100D9748C(a1 - 24, a2);
}

uint64_t sub_100D97634(uint64_t a1, int a2, uint64_t a3)
{
  if (validContextType())
  {
    memset(v11, 0, sizeof(v11));
    sub_100DA1880(v11, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v6 = (void **)v11[0];
    uint64_t v7 = (void **)v11[1];
    if (v11[0] == v11[1])
    {
      uint64_t v8 = 1;
      if (!v11[0]) {
        return v8;
      }
      goto LABEL_13;
    }
    while (!sub_100D8FD3C(a1, (uint64_t)v6)
         || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 224))(v6[1], a3) & 1) != 0)
    {
      v6 += 3;
      if (v6 == v7)
      {
        uint64_t v8 = 1;
        goto LABEL_12;
      }
    }
    uint64_t v8 = 0;
LABEL_12:
    uint64_t v6 = (void **)v11[0];
    if (v11[0])
    {
LABEL_13:
      v11[1] = v6;
      operator delete(v6);
    }
  }
  else
  {
    int v9 = *(NSObject **)(a1 + 64);
    uint64_t v8 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 136315394;
      *(void *)((char *)v11 + 4) = "deactivateWithReasonAllowed";
      WORD2(v11[1]) = 2080;
      *(void *)((char *)&v11[1] + 6) = asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v11, 0x16u);
      return 0;
    }
  }
  return v8;
}

void sub_100D977CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D977F0(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100D97634(a1 - 24, a2, a3);
}

uint64_t sub_100D977F8(uint64_t a1, int a2, uint64_t a3)
{
  if (validContextType())
  {
    memset(v11, 0, sizeof(v11));
    sub_100DA1880(v11, *(const void **)(a1 + 24 * a2 + 120), *(void *)(a1 + 24 * a2 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * a2 + 128) - *(void *)(a1 + 24 * a2 + 120)) >> 3));
    uint64_t v6 = (void **)v11[0];
    uint64_t v7 = (void **)v11[1];
    if (v11[0] == v11[1])
    {
      uint64_t v8 = 0;
      if (!v11[0]) {
        return v8;
      }
      goto LABEL_13;
    }
    while (!sub_100D8FD3C(a1, (uint64_t)v6)
         || ((*(uint64_t (**)(void *, uint64_t))(*v6[1] + 168))(v6[1], a3) & 1) == 0)
    {
      v6 += 3;
      if (v6 == v7)
      {
        uint64_t v8 = 0;
        goto LABEL_12;
      }
    }
    uint64_t v8 = 1;
LABEL_12:
    uint64_t v6 = (void **)v11[0];
    if (v11[0])
    {
LABEL_13:
      v11[1] = v6;
      operator delete(v6);
    }
  }
  else
  {
    int v9 = *(NSObject **)(a1 + 64);
    uint64_t v8 = 0;
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v11[0]) = 136315394;
      *(void *)((char *)v11 + 4) = "shouldDeactivateBeDelayed";
      WORD2(v11[1]) = 2080;
      *(void *)((char *)&v11[1] + 6) = asString();
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)v11, 0x16u);
      return 0;
    }
  }
  return v8;
}

void sub_100D97990(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

uint64_t sub_100D979B4(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100D977F8(a1 - 24, a2, a3);
}

unint64_t sub_100D979BC(uint64_t a1, uint64_t a2)
{
  return sub_100D90350(a1 - 24, a2);
}

BOOL sub_100D979C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 264);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 272) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "not ";
    if (v2) {
      uint64_t v4 = (const char *)&unk_10165244B;
    }
    int v6 = 136315394;
    uint64_t v7 = "isImsAltNameConfigured";
    __int16 v8 = 2080;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s: alt-name is %ssupported", (uint8_t *)&v6, 0x16u);
  }
  return v2;
}

BOOL sub_100D97AA8(uint64_t a1)
{
  return sub_100D979C4(a1 - 24);
}

BOOL sub_100D97AB0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 264);
  if (v1) {
    BOOL v2 = *(unsigned __int8 *)(v1 + 193) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  uint64_t v3 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = "not ";
    if (v2) {
      uint64_t v4 = (const char *)&unk_10165244B;
    }
    int v6 = 136315394;
    uint64_t v7 = "isSwitchOverSupported";
    __int16 v8 = 2080;
    int v9 = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I %s: switchover is %ssupported", (uint8_t *)&v6, 0x16u);
  }
  return v2;
}

BOOL sub_100D97B94(uint64_t a1)
{
  return sub_100D97AB0(a1 - 24);
}

BOOL sub_100D97B9C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 264);
  return v1 && *(unsigned char *)(v1 + 194) != 0;
}

BOOL sub_100D97BBC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  return v1 && *(unsigned char *)(v1 + 194) != 0;
}

BOOL sub_100D97BDC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 264);
  return v1 && *(unsigned char *)(v1 + 195) != 0;
}

BOOL sub_100D97BFC(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 240);
  return v1 && *(unsigned char *)(v1 + 195) != 0;
}

uint64_t sub_100D97C1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2)
  {
    uint64_t v2 = *(unsigned __int8 *)(v2 + 196);
    uint64_t v3 = v2 != 0;
  }
  else
  {
    uint64_t v3 = 0;
  }
  uint64_t v31 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v2, *(Registry **)(a1 + 72));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  unint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    BOOL v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  BOOL v11 = 0;
  char v13 = 1;
LABEL_12:
  uint64_t v14 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(const void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v12 + 96))(&v30, v12, v14, 1, @"EnableWiFiN1ModeOnlyWhenSAEnabled", kCFBooleanFalse, 0);
  sub_1000057AC(&v31, &v30);
  sub_1000577C4(&v30);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  buf[0] = 0;
  ctu::cf::assign((ctu::cf *)buf, v31, v15);
  if (buf[0])
  {
    int v16 = (std::mutex *)Registry::getServiceMap((uint64_t *)buf[0], *(Registry **)(a1 + 72));
    uint64_t v17 = v16;
    if (v18 < 0)
    {
      uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        uint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(v16);
    *(void *)long long buf = v18;
    uint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)buf);
    if (v22)
    {
      uint64_t v24 = v22[3];
      uint64_t v23 = (std::__shared_weak_count *)v22[4];
      if (v23)
      {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v23);
        char v25 = 0;
        if (!v24)
        {
LABEL_27:
          if ((v25 & 1) == 0) {
            sub_10004D2C8(v23);
          }
          goto LABEL_29;
        }
LABEL_24:
        uint64_t v26 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
        int v27 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v24 + 728))(v24, v26);
        char v28 = *(NSObject **)(a1 + 64);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109376;
          *(_DWORD *)&uint8_t buf[4] = v3;
          __int16 v33 = 1024;
          int v34 = v27;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I Support5GSaHandOver=%d, saCapability=%d", buf, 0xEu);
        }
        uint64_t v3 = v3 & v27;
        goto LABEL_27;
      }
    }
    else
    {
      uint64_t v24 = 0;
    }
    std::mutex::unlock(v17);
    uint64_t v23 = 0;
    char v25 = 1;
    if (!v24) {
      goto LABEL_27;
    }
    goto LABEL_24;
  }
LABEL_29:
  sub_100062778((const void **)&v31);
  return v3;
}

void sub_100D97F1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D97F84(uint64_t a1)
{
  return sub_100D97C1C(a1 - 24);
}

uint64_t sub_100D97F8C(uint64_t a1)
{
  uint64_t v2 = (capabilities::ct *)(*(uint64_t (**)(uint64_t, void, uint64_t, void))(*(void *)a1 + 136))(a1, 0, 1, 0);
  if ((v2 & 0x20000) == 0 || capabilities::ct::getBasebandBootStrategy(v2) != 2) {
    goto LABEL_26;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 72));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v6;
  unint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)__p);
  if (!v10)
  {
    std::mutex::unlock(v5);
    goto LABEL_26;
  }
  uint64_t v12 = v10[3];
  BOOL v11 = (std::__shared_weak_count *)v10[4];
  if (!v11)
  {
    std::mutex::unlock(v5);
    if (v12) {
      goto LABEL_12;
    }
LABEL_26:
    uint64_t v14 = *(void *)(a1 + 264);
    if (v14 && *(unsigned char *)(v14 + 198)) {
      return *(unsigned __int8 *)(v14 + 197) != 0;
    }
    else {
      return ((*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, 0, 1, 1) & 1) == 0;
    }
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  if (!v12)
  {
LABEL_25:
    sub_10004D2C8(v11);
    goto LABEL_26;
  }
LABEL_12:
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  (*(void (**)(void **__return_ptr, uint64_t))(*(void *)a1 + 816))(__p, a1);
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void **))(*(void *)v12 + 40))(&v17, v12, __p);
  if (v16 < 0) {
    operator delete(__p[0]);
  }
  if (!v17
    || ((*(uint64_t (**)(uint64_t))(*(void *)v12 + 280))(v12) & 1) != 0
    || ((*(uint64_t (**)(uint64_t))(*(void *)v17 + 264))(v17) & 1) == 0)
  {
    if (v18) {
      sub_10004D2C8(v18);
    }
    if (!v11) {
      goto LABEL_26;
    }
    goto LABEL_25;
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  return 1;
}

void sub_100D9821C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, std::__shared_weak_count *a17)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (v17) {
    sub_10004D2C8(v17);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D98264(uint64_t a1)
{
  return sub_100D97F8C(a1 - 24);
}

uint64_t sub_100D9826C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 264);
  if (v2 && *(unsigned char *)(v2 + 200)) {
    return *(unsigned __int8 *)(v2 + 199) != 0;
  }
  uint64_t result = *(void *)(a1 + 112);
  if (result)
  {
    if ((*(unsigned int (**)(uint64_t))(*(void *)result + 16))(result))
    {
      return 0;
    }
    else
    {
      uint64_t result = sub_100D83708((Registry **)a1, v4);
      if (result)
      {
        uint64_t v5 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
        return suspendInternetOnBBCall((Registry **)(a1 + 72), v5);
      }
    }
  }
  return result;
}

uint64_t sub_100D98320(uint64_t a1)
{
  return sub_100D9826C(a1 - 24);
}

uint64_t sub_100D98328(uint64_t a1, uint64_t a2)
{
  if ((validContextType() & 1) == 0)
  {
    BOOL v11 = *(NSObject **)(a1 + 64);
    BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v12) {
      return result;
    }
    int v13 = 136315394;
    uint64_t v14 = "isContextConfiguredOnConnections";
    __int16 v15 = 2080;
    uint64_t v16 = asString();
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v13, 0x16u);
    return 0;
  }
  uint64_t v4 = a1 + 24 * (int)a2;
  uint64_t v5 = *(void *)(v4 + 120);
  uint64_t v6 = *(void *)(v4 + 128);
  if (v5 == v6) {
    return 0;
  }
  uint64_t v7 = v5 + 24;
  do
  {
    int v8 = (*(uint64_t (**)(void, uint64_t))(**(void **)(v7 - 16) + 184))(*(void *)(v7 - 16), a2);
    if (v8) {
      BOOL v9 = v7 == v6;
    }
    else {
      BOOL v9 = 1;
    }
    v7 += 24;
  }
  while (!v9);
  return v8 ^ 1u;
}

uint64_t sub_100D98460(uint64_t a1, uint64_t a2)
{
  return sub_100D98328(a1 - 24, a2);
}

uint64_t sub_100D98468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((validContextType() & 1) == 0)
  {
    BOOL v12 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315394;
      __int16 v15 = "handoverPossible";
      __int16 v16 = 2080;
      uint64_t v17 = asString();
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v14, 0x16u);
    }
    return 2;
  }
  uint64_t v6 = a1 + 24 * (int)a2;
  uint64_t v7 = *(void *)(v6 + 120);
  uint64_t v8 = *(void *)(v6 + 128);
  if (v7 == v8) {
    return 2;
  }
  char v9 = 1;
  uint64_t v10 = a3;
  do
  {
    if (sub_100D8FD3C(a1, v7))
    {
      int v11 = (*(uint64_t (**)(void, uint64_t, uint64_t))(**(void **)(v7 + 8) + 176))(*(void *)(v7 + 8), a2, a3);
      if (v11 == a3)
      {
        char v9 = 0;
      }
      else
      {
        if (v11 == a2) {
          return a2;
        }
        char v9 = 0;
        uint64_t v10 = 2;
      }
    }
    v7 += 24;
  }
  while (v7 != v8);
  if (v9) {
    return 2;
  }
  return v10;
}

uint64_t sub_100D985EC(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1[14];
  if (!v3) {
    return 1;
  }
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v8);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t *))(*(void *)v3 + 416))(v3, a2, a3, &v8);
  if (v9) {
    sub_10004D2C8(v9);
  }
  return v6;
}

void sub_100D986B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D986CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100D985EC((void *)(a1 - 24), a2, a3);
}

void sub_100D986D4(PersonalitySpecificImpl *a1, int a2)
{
  if ((*(unsigned int (**)(PersonalitySpecificImpl *))(*(void *)a1 + 1056))(a1))
  {
    int v4 = 0;
    uint64_t v5 = dword_1015716C8;
    do
    {
      uint64_t v6 = (void *)((char *)a1 + 24 * *v5);
      uint64_t v7 = v6[15];
      uint64_t v8 = v6[16];
      while (v7 != v8)
      {
        if (*(unsigned char *)(v7 + 16)) {
          v4 |= (*(uint64_t (**)(void))(**(void **)(v7 + 8) + 136))(*(void *)(v7 + 8));
        }
        v7 += 24;
      }
      ++v5;
    }
    while (v5 != dword_1015716D0);
    if (v4)
    {
      uint64_t v9 = sub_100D89AB4((uint64_t)a1, 0, 0);
      int v10 = (*(uint64_t (**)(PersonalitySpecificImpl *))(*(void *)a1 + 912))(a1);
      int v11 = (capabilities::ct *)PersonalitySpecificImpl::simSlot(a1);
      if (v11 == a2 || v9 != 1 || v10 || !capabilities::ct::supportsGemini(v11))
      {
        sub_100058DB0(__p, "Check if need to switch to delayed iRat type after call finish");
        char v13 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, unsigned char *))(*(void *)a1 + 1216))(a1, v9, __p);
        char v14 = v13;
        if (v18 < 0)
        {
          operator delete(*(void **)__p);
          if (v14) {
            return;
          }
        }
        else if (v13)
        {
          return;
        }
        sub_100D8F454(a1, v9);
        return;
      }
      BOOL v12 = *((void *)a1 + 8);
      if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)std::string __p = 136315394;
        *(void *)&__p[4] = asString();
        __int16 v16 = 2080;
        uint64_t v17 = asString();
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Vega switchoverto after call: let's not try Vega HO at this point: contextType=%s, transportType=%s", __p, 0x16u);
      }
    }
  }
}

void sub_100D98938(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9895C(uint64_t a1, int a2)
{
}

void sub_100D98964(Registry **this, uint64_t a2, long long **a3, int a4)
{
  if (!a4)
  {
LABEL_31:
    LODWORD(buf) = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)this);
    uint64_t v31 = 0;
    uint64_t v32 = 0;
    *((void *)&buf + 1) = 0;
    sub_1000302C0((char *)&buf + 8, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    uint64_t v33 = (*((uint64_t (**)(Registry **, uint64_t, uint64_t, void))*this + 17))(this, a2, 1, 0);
    int v34 = a2;
    *(void *)CFTypeRef cf = 0;
    write_rest_value();
    sub_100058DB0(&__p, "/cc/events/proxy_update");
    xpc_object_t object = *(xpc_object_t *)cf;
    *(void *)CFTypeRef cf = xpc_null_create();
    ctu::RestModule::sendEvent();
    xpc_release(object);
    xpc_object_t object = 0;
    if (v29 < 0) {
      operator delete(__p);
    }
    xpc_release(*(xpc_object_t *)cf);
    std::string __p = (char *)&buf + 8;
    sub_100047F64((void ***)&__p);
    return;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, this[9]);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    char v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_8;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  char v14 = 0;
  char v16 = 1;
  if (!v15)
  {
LABEL_8:
    uint64_t v17 = this[8];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "System Determination Manager is NULL!", (uint8_t *)&buf, 2u);
    }
    goto LABEL_29;
  }
LABEL_12:
  long long buf = 0uLL;
  uint64_t v31 = 0;
  (*((void (**)(long long *__return_ptr, Registry **))*this + 102))(&buf, this);
  std::string __p = 0;
  char v28 = 0;
  (*(void (**)(void **__return_ptr, uint64_t, long long *))(*(void *)v15 + 40))(&__p, v15, &buf);
  if (__p)
  {
    *(void *)CFTypeRef cf = 0;
    (*(void (**)(unsigned char *__return_ptr))(*(void *)__p + 40))(cf);
    char v18 = *(BOOL **)cf;
    LOBYTE(object) = 0;
    if (*(void *)cf)
    {
      CFTypeID v19 = CFGetTypeID(*(CFTypeRef *)cf);
      if (v19 == CFBooleanGetTypeID())
      {
        ctu::cf::assign((ctu::cf *)&object, v18, v20);
        LODWORD(v18) = (_BYTE)object != 0;
      }
      else
      {
        LODWORD(v18) = 0;
      }
    }
    sub_1000577C4((const void **)cf);
  }
  else
  {
    unsigned int v21 = this[8];
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      uint64_t v23 = HIBYTE(v31);
      if (v31 < 0) {
        uint64_t v23 = *((void *)&buf + 1);
      }
      p_long long buf = (const char *)&buf;
      if (v31 < 0) {
        p_long long buf = (const char *)buf;
      }
      if (v23) {
        char v25 = p_buf;
      }
      else {
        char v25 = "<invalid>";
      }
      *(_DWORD *)CFTypeRef cf = 136315138;
      *(void *)&cf[4] = v25;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "IMS Call config not found for pid %s", cf, 0xCu);
    }
    LODWORD(v18) = 0;
  }
  if (v28) {
    sub_10004D2C8(v28);
  }
  if (SHIBYTE(v31) < 0)
  {
    operator delete((void *)buf);
    if (v18) {
      goto LABEL_24;
    }
LABEL_29:
    if ((v16 & 1) == 0) {
      sub_10004D2C8(v14);
    }
    goto LABEL_31;
  }
  if (!v18) {
    goto LABEL_29;
  }
LABEL_24:
  uint64_t v22 = this[8];
  if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(buf) = 136315138;
    *(void *)((char *)&buf + 4) = "proxyUpdate";
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I %s: suppressed proxy change in handover", (uint8_t *)&buf, 0xCu);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100D98DC8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, void *a12, std::__shared_weak_count *a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t a27)
{
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  if ((v28 & 1) == 0) {
    sub_10004D2C8(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D98EA0(uint64_t a1, uint64_t a2, long long **a3, int a4)
{
}

void sub_100D98EA8(Registry **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, a1[9]);
  uint64_t v8 = ServiceMap;
  if ((v9 & 0x8000000000000000) != 0)
  {
    int v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      unint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, &v19);
  if (!v13)
  {
    uint64_t v15 = 0;
LABEL_9:
    std::mutex::unlock(v8);
    char v14 = 0;
    char v16 = 1;
    if (!v15) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v15 = v13[3];
  char v14 = (std::__shared_weak_count *)v13[4];
  if (!v14) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
  if (v15)
  {
LABEL_10:
    uint64_t v17 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
    uint64_t v18 = (*((uint64_t (**)(Registry **, uint64_t, uint64_t, void))*a1 + 17))(a1, a2, 1, 0);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v15 + 720))(v15, v17, a3, v18);
  }
LABEL_11:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100D9901C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D99034(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t *a4@<X8>)
{
}

BOOL sub_100D9903C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (!a1[14]) {
    return 0;
  }
  if (validContextType())
  {
    if (sub_100D86FA4((uint64_t)a1, a2) == 3)
    {
      if (a4 == a2) {
        return 0;
      }
    }
    else
    {
      int v11 = sub_100D86FA4((uint64_t)a1, a2);
      if (a4 == a2 || v11 != 2) {
        return 0;
      }
    }
    uint64_t v65 = 0;
    __int16 v66 = 0;
    uint64_t v67 = 0;
    sub_100DA1880(&v65, (const void *)a1[3 * (int)a2 + 15], a1[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)a2 + 16] - a1[3 * (int)a2 + 15]) >> 3));
    char v62 = 0;
    v63 = 0;
    __int16 v64 = 0;
    uint64_t v89 = 0;
    long long v87 = 0u;
    long long v88 = 0u;
    long long v85 = 0u;
    long long v86 = 0u;
    long long v83 = 0u;
    long long v84 = 0u;
    long long v81 = 0u;
    long long v82 = 0u;
    long long v79 = 0u;
    long long v80 = 0u;
    long long v77 = 0u;
    long long v78 = 0u;
    long long v75 = 0u;
    long long v76 = 0u;
    memset(buf, 0, sizeof(buf));
    sub_10004DE24((uint64_t)buf);
    sub_10004B96C(buf, (uint64_t)"(", 1);
    unsigned int v12 = v65;
    char v13 = v66;
    if (v65 == v66)
    {
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v14 = 0;
      do
      {
        if (*((unsigned char *)v12 + 16))
        {
          uint64_t v15 = v12[1];
          sub_10003E168(__p, a1 + 4);
          if (__p[0]) {
            char v16 = (char *)__p[0] + 24;
          }
          else {
            char v16 = 0;
          }
          uint64_t v60 = v16;
          uint64_t v61 = (std::__shared_weak_count *)__p[1];
          *(_OWORD *)std::string __p = 0uLL;
          int v17 = (*(uint64_t (**)(uint64_t, uint64_t, char **, uint64_t, uint64_t))(*(void *)v15 + 240))(v15, a2, &v60, a3, a4);
          if (v61) {
            sub_10004D2C8(v61);
          }
          if (__p[1]) {
            sub_10004D2C8((std::__shared_weak_count *)__p[1]);
          }
          ++v14;
          if (v17)
          {
            uint64_t v18 = v63;
            if (v63 >= (void *)v64)
            {
              unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (unsigned char *)v62) >> 3);
              unint64_t v22 = v21 + 1;
              if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
                sub_100DA1868();
              }
              if (0x5555555555555556 * ((v64 - (unsigned char *)v62) >> 3) > v22) {
                unint64_t v22 = 0x5555555555555556 * ((v64 - (unsigned char *)v62) >> 3);
              }
              if (0xAAAAAAAAAAAAAAABLL * ((v64 - (unsigned char *)v62) >> 3) >= 0x555555555555555) {
                unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
              }
              else {
                unint64_t v23 = v22;
              }
              if (v23) {
                uint64_t v24 = (char *)sub_10004812C((uint64_t)&v64, v23);
              }
              else {
                uint64_t v24 = 0;
              }
              char v25 = &v24[24 * v21];
              long long v26 = *(_OWORD *)v12;
              *((void *)v25 + 2) = v12[2];
              *(_OWORD *)char v25 = v26;
              char v28 = (char *)v62;
              int v27 = (char *)v63;
              char v29 = v25;
              if (v63 != v62)
              {
                do
                {
                  long long v30 = *(_OWORD *)(v27 - 24);
                  *(v29 - 8) = *(v27 - 8);
                  *(_OWORD *)(v29 - 24) = v30;
                  v29 -= 24;
                  v27 -= 24;
                }
                while (v27 != v28);
                int v27 = (char *)v62;
              }
              CFBooleanRef v20 = v25 + 24;
              char v62 = v29;
              v63 = v25 + 24;
              __int16 v64 = &v24[24 * v23];
              if (v27) {
                operator delete(v27);
              }
            }
            else
            {
              long long v19 = *(_OWORD *)v12;
              v63[2] = v12[2];
              *uint64_t v18 = v19;
              CFBooleanRef v20 = (void *)v18 + 3;
            }
            v63 = v20;
            uint64_t v31 = (const char *)(*(uint64_t (**)(void))(*(void *)v12[1] + 16))(v12[1]);
            size_t v32 = strlen(v31);
            uint64_t v33 = sub_10004B96C(buf, (uint64_t)v31, v32);
            sub_10004B96C(v33, (uint64_t)", ", 2);
          }
        }
        v12 += 3;
      }
      while (v12 != v13);
    }
    sub_10004B96C(buf, (uint64_t)")", 1);
    int v34 = v62;
    uint64_t v35 = v63;
    int v36 = a1[8];
    BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
    if (v34 == v35)
    {
      if (v37)
      {
        LODWORD(__p[0]) = 136315138;
        *(void **)((char *)__p + 4) = "checkSwitchAPN";
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %s: no observers to be moved", (uint8_t *)__p, 0xCu);
      }
    }
    else
    {
      if (v37)
      {
        sub_10004BC98((uint64_t)&buf[8], __p);
        uint64_t v38 = v69 >= 0 ? __p : (void **)__p[0];
        *(_DWORD *)__int16 v70 = 136315394;
        uint64_t v71 = "checkSwitchAPN";
        __int16 v72 = 2080;
        uint64_t v73 = v38;
        _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#I %s: %s", v70, 0x16u);
        if (v69 < 0) {
          operator delete(__p[0]);
        }
      }
      if (sub_100D86FA4((uint64_t)a1, a2) == 2)
      {
        uint64_t v39 = a1[8];
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = "checkSwitchAPN";
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I %s: APN needs to switch, cancelled activation", (uint8_t *)__p, 0xCu);
        }
        uint64_t v40 = "switching APN, cancelled activation";
LABEL_58:
        (*(void (**)(void *, uint64_t, uint64_t, const char *, const char *))(*a1 + 680))(a1, a2, 27, v40, "CommCenter");
        goto LABEL_59;
      }
      if (0xAAAAAAAAAAAAAAABLL * (((char *)v63 - (unsigned char *)v62) >> 3) == v14)
      {
        uint64_t v41 = a1[8];
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          LODWORD(__p[0]) = 136315138;
          *(void **)((char *)__p + 4) = "checkSwitchAPN";
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I %s: All connections are going to switch to other APN, deactivate context", (uint8_t *)__p, 0xCu);
        }
        uint64_t v40 = "All Connections switched to other APN";
        goto LABEL_58;
      }
      uint64_t v42 = a1[14];
      sub_10003E168(__p, a1 + 4);
      if (__p[0]) {
        uint64_t v43 = (char *)__p[0] + 24;
      }
      else {
        uint64_t v43 = 0;
      }
      uint64_t v58 = v43;
      uint64_t v59 = (std::__shared_weak_count *)__p[1];
      *(_OWORD *)std::string __p = 0uLL;
      char v44 = (*(uint64_t (**)(uint64_t, uint64_t, char **))(*(void *)v42 + 368))(v42, a2, &v58);
      if (v59) {
        sub_10004D2C8(v59);
      }
      if (__p[1]) {
        sub_10004D2C8((std::__shared_weak_count *)__p[1]);
      }
      if ((v44 & 1) == 0)
      {
        uint64_t v45 = a1[14];
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v56, a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void))(*(void *)v45 + 272))(v45, a2, &v56, 3, 0);
        if (v57) {
          sub_10004D2C8(v57);
        }
      }
      __int16 v46 = (char *)v62;
      uint64_t v47 = (char *)v63;
      while (v46 != v47)
      {
        uint64_t v48 = *((void *)v46 + 1);
        sub_10003E168(__p, a1 + 4);
        if (__p[0]) {
          uint64_t v49 = (char *)__p[0] + 24;
        }
        else {
          uint64_t v49 = 0;
        }
        uint64_t v54 = v49;
        uint64_t v55 = (std::__shared_weak_count *)__p[1];
        *(_OWORD *)std::string __p = 0uLL;
        int v50 = (*(uint64_t (**)(uint64_t, uint64_t, char **))(*(void *)v48 + 64))(v48, a2, &v54);
        if (v55) {
          sub_10004D2C8(v55);
        }
        if (__p[1]) {
          sub_10004D2C8((std::__shared_weak_count *)__p[1]);
        }
        if (v50) {
          sub_100D862A8((uint64_t)a1, a2, *((const DataAPNSettingsObserver **)v46 + 1), 0);
        }
        v46 += 24;
      }
      if ((v44 & 1) == 0)
      {
        uint64_t v51 = a1[14];
        (*(void (**)(uint64_t *__return_ptr, void *))(*a1 + 16))(&v52, a1);
        (*(void (**)(uint64_t, uint64_t, uint64_t *, void))(*(void *)v51 + 280))(v51, a2, &v52, 0);
        if (v53) {
          sub_10004D2C8(v53);
        }
      }
    }
LABEL_59:
    if (SHIBYTE(v78) < 0) {
      operator delete(*((void **)&v77 + 1));
    }
    std::streambuf::~streambuf();
    std::ostream::~ostream();
    std::ios::~ios();
    if (v62)
    {
      v63 = v62;
      operator delete(v62);
    }
    if (v65)
    {
      __int16 v66 = v65;
      operator delete(v65);
    }
    return v34 != v35;
  }
  uint64_t v8 = a1[8];
  BOOL v9 = os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT);
  BOOL result = 0;
  if (!v9) {
    return result;
  }
  *(_DWORD *)long long buf = 136315394;
  *(void *)&uint8_t buf[4] = "checkSwitchAPN";
  *(_WORD *)&unsigned char buf[12] = 2080;
  *(void *)&buf[14] = asString();
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
  return 0;
}

void sub_100D99968(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,uint64_t a22,void *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  sub_1000C937C((uint64_t)&a35);
  if (__p) {
    operator delete(__p);
  }
  if (a23) {
    operator delete(a23);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100D99A30(PersonalitySpecificImpl *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *((void *)a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = asString();
    if (*(char *)(a3 + 23) >= 0) {
      uint64_t v8 = (void *)a3;
    }
    else {
      uint64_t v8 = *(void **)a3;
    }
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "switchOverTo";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v7;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v129 = (uint64_t)v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: context type = %s, reason = %s", buf, 0x20u);
  }
  if (!*((void *)a1 + 14))
  {
    uint64_t v18 = *((void *)a1 + 8);
    uint64_t v12 = 0;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return v12;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "switchOverTo";
    uint64_t v15 = "#I %s: activator empty";
    goto LABEL_18;
  }
  if (((*(uint64_t (**)(PersonalitySpecificImpl *))(*(void *)a1 + 1056))(a1) & 1) == 0)
  {
    uint64_t v18 = *((void *)a1 + 8);
    uint64_t v12 = 0;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return v12;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "switchOverTo";
    uint64_t v15 = "#I %s: switchover not supported";
    goto LABEL_18;
  }
  if (!validContextType()) {
    return 0;
  }
  int v9 = sub_100D8FA04((uint64_t)a1, 0, 0);
  int v10 = validContextType() ^ 1;
  if (v9 == a2) {
    LOBYTE(v10) = 1;
  }
  if (v10)
  {
    unsigned int v109 = sub_100D92908((uint64_t)a1);
    if (validContextType())
    {
      unsigned __int8 v127 = 0;
      unsigned int v107 = (*(uint64_t (**)(PersonalitySpecificImpl *))(*(void *)a1 + 912))(a1);
      uint64_t v20 = v109;
      if (v109 == a2)
      {
        if (a2 == 1)
        {
          if (sub_100D906B4(a1, 1, v107, (uint64_t)&v127))
          {
            int v21 = v127;
            BOOL v22 = v127 != 0;
            unint64_t v23 = *((void *)a1 + 8);
            if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v24 = asStringBool(v21 != 0);
              uint64_t v25 = asString();
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "switchOverTo";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v24;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v129 = v25;
              _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I %s: Mobike is possible. shouldSwitch: %s, preferredTransportType: %s", buf, 0x20u);
            }
LABEL_56:
            unsigned int v34 = 0;
            if (!v22 || v127) {
              goto LABEL_103;
            }
            uint64_t v125 = 0;
            v126 = 0;
            sub_1002A1B14(*((Registry **)a1 + 9), &v125);
            if (v109 == 1)
            {
              if (v125)
              {
                if (!(*(unsigned int (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 328))(a1, 1)&& (sub_100D93428(a1, 1, a2) & 1) == 0)
                {
                  uint64_t v48 = v125;
                  uint64_t v49 = PersonalitySpecificImpl::simSlot(a1);
                  if (((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v48 + 992))(v48, v49) & 1) == 0)
                  {
                    long long v104 = *((void *)a1 + 8);
                    if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
                    {
                      *(_WORD *)long long buf = 0;
                      _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "#I On IWLAN over Cell. Can't handover to BB. Should deactivate.", buf, 2u);
                    }
                    uint64_t v105 = *((void *)a1 + 14);
                    if (v105)
                    {
                      char v53 = 1;
                      uint64_t v43 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v105 + 176))(v105, 1);
                      int v52 = 0;
                      goto LABEL_75;
                    }
                    int v52 = 0;
                    uint64_t v43 = 0;
                    goto LABEL_187;
                  }
                }
              }
            }
            uint64_t v50 = *((void *)a1 + 14);
            if (!v50 || !(*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v50 + 176))(v50, 1)) {
              goto LABEL_74;
            }
            if ((sub_100D93428(a1, v109, a2) & 1) == 0)
            {
              uint64_t v55 = *((void *)a1 + 8);
              int v52 = 0;
              uint64_t v43 = 0;
              char v53 = 0;
              if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v56 = asString();
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v56;
                uint64_t v54 = "#I %s: Can't handover from %s right now in unstable state, not deactivating because the recommende"
                      "d context type is not possible anyway";
                uint64_t v57 = v55;
                uint32_t v58 = 22;
LABEL_73:
                _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, v54, buf, v58);
LABEL_74:
                int v52 = 0;
                uint64_t v43 = 0;
                char v53 = 0;
                goto LABEL_75;
              }
              goto LABEL_75;
            }
            if (v125
              && (*(unsigned int (**)(PersonalitySpecificImpl *, void))(*(void *)a1 + 992))(a1, v109)
              && (*(unsigned int (**)(uint64_t))(*(void *)v125 + 984))(v125))
            {
              uint64_t v51 = *((void *)a1 + 8);
              int v52 = 0;
              uint64_t v43 = 0;
              char v53 = 0;
              if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                uint64_t v54 = "#I %s: Unstable state in the middle of a call. Let it be.";
LABEL_171:
                uint64_t v57 = v51;
                uint32_t v58 = 12;
                goto LABEL_73;
              }
LABEL_75:
              if (v126) {
                sub_10004D2C8(v126);
              }
              if ((v53 & 1) == 0)
              {
                unsigned int v34 = 0;
                BOOL v22 = 1;
                goto LABEL_103;
              }
              int v106 = v52;
              long long v108 = 0;
              goto LABEL_79;
            }
            if (v109 == 1
              && (*(unsigned int (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 328))(a1, 1) == 1)
            {
              uint64_t v88 = *((void *)a1 + 14);
              if ((!v88 || ((*(uint64_t (**)(uint64_t))(*(void *)v88 + 304))(v88) & 1) == 0)
                && v125
                && (*(unsigned int (**)(uint64_t))(*(void *)v125 + 216))(v125))
              {
                uint64_t v51 = *((void *)a1 + 8);
                int v52 = 0;
                uint64_t v43 = 0;
                char v53 = 0;
                if (!os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT)) {
                  goto LABEL_75;
                }
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                uint64_t v54 = "#I %s: Unstable state in the non-WoW network. Do not touch it.";
                goto LABEL_171;
              }
            }
            if (validContextType())
            {
              if (*((unsigned char *)a1 + 16 * (int)v109 + 704))
              {
                uint64_t v89 = sub_100D9B080((uint64_t)a1, v109);
                if (v89 < sub_100D9B7F0((Registry **)a1, v90))
                {
                  __int16 v91 = *((void *)a1 + 8);
                  int v52 = 0;
                  uint64_t v43 = 0;
                  char v53 = 0;
                  if (!os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT)) {
                    goto LABEL_75;
                  }
                  uint64_t v92 = asString();
                  uint64_t v93 = sub_100D9B080((uint64_t)a1, v109);
                  *(_DWORD *)long long buf = 136315906;
                  *(void *)&uint8_t buf[4] = "switchOverTo";
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = v92;
                  *(_WORD *)&unsigned char buf[22] = 2048;
                  uint64_t v129 = v93;
                  __int16 v130 = 2080;
                  v131 = "seconds";
                  uint64_t v54 = "#I %s: Unstable state in a fresh handover to %s that is %lld %s old. Do not touch it.";
                  uint64_t v57 = v91;
                  uint32_t v58 = 42;
                  goto LABEL_73;
                }
              }
            }
            if (validContextType() && *((unsigned char *)a1 + 16 * (int)v109 + 704))
            {
              uint64_t v94 = *((void *)a1 + 8);
              if (os_log_type_enabled(v94, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v95 = asString();
                uint64_t v96 = sub_100D9B080((uint64_t)a1, v109);
                *(_DWORD *)long long buf = 136315906;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v95;
                *(_WORD *)&unsigned char buf[22] = 2048;
                uint64_t v129 = v96;
                __int16 v130 = 2080;
                v131 = "seconds";
                uint64_t v97 = "#I %s: Unstable state in a activation on %s that is %lld %s old.";
                unint64_t v98 = v94;
                uint32_t v99 = 42;
LABEL_183:
                _os_log_impl((void *)&_mh_execute_header, v98, OS_LOG_TYPE_DEFAULT, v97, buf, v99);
              }
            }
            else
            {
              v100 = *((void *)a1 + 8);
              if (os_log_type_enabled(v100, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v101 = asString();
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v101;
                uint64_t v97 = "#E %s: Unstable state in a activation on %s that has no start timestamp";
                unint64_t v98 = v100;
                uint32_t v99 = 22;
                goto LABEL_183;
              }
            }
            long long v102 = *((void *)a1 + 8);
            if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v103 = asString();
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "switchOverTo";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v103;
              _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#I %s: Can't handover from %s right now in unstable state, deactivating for now", buf, 0x16u);
            }
            int v52 = 1;
            uint64_t v43 = 1;
LABEL_187:
            char v53 = 1;
            goto LABEL_75;
          }
          if (sub_100D9B2B8(a1, v107))
          {
            uint64_t v41 = *((void *)a1 + 8);
            if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v42 = asString();
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = "switchOverTo";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v42;
              _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I %s: iRat transport type is changed to %s. We should deactivate", buf, 0x16u);
            }
            uint64_t v43 = 0;
            int v106 = 0;
            char v44 = "transport type changed";
LABEL_50:
            long long v108 = v44;
LABEL_79:
            uint64_t v59 = dword_1015716C8;
            do
            {
              uint64_t v60 = (void *)((char *)a1 + 24 * *v59);
              memset(buf, 0, sizeof(buf));
              sub_100DA1880(buf, (const void *)v60[15], v60[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v60[16] - v60[15]) >> 3));
              uint64_t v62 = *(void *)buf;
              uint64_t v61 = *(void *)&buf[8];
              if (*(void *)buf != *(void *)&buf[8])
              {
                do
                {
                  if (*(unsigned char *)(v62 + 16)) {
                    (*(void (**)(void, uint64_t))(**(void **)(v62 + 8) + 328))(*(void *)(v62 + 8), v43);
                  }
                  v62 += 24;
                }
                while (v62 != v61);
                uint64_t v62 = *(void *)buf;
              }
              if (v62)
              {
                *(void *)&uint8_t buf[8] = v62;
                operator delete((void *)v62);
              }
              ++v59;
            }
            while (v59 != dword_1015716D0);
            if (v106) {
              goto LABEL_99;
            }
            int v63 = 1;
            __int16 v64 = dword_1015716C8;
            do
            {
              uint64_t v65 = (void *)((char *)a1 + 24 * *v64);
              memset(buf, 0, sizeof(buf));
              sub_100DA1880(buf, (const void *)v65[15], v65[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v65[16] - v65[15]) >> 3));
              uint64_t v66 = *(void *)buf;
              uint64_t v67 = *(void *)&buf[8];
              if (*(void *)buf != *(void *)&buf[8])
              {
                do
                {
                  if (*(unsigned char *)(v66 + 16)) {
                    v63 &= (*(uint64_t (**)(void))(**(void **)(v66 + 8) + 336))(*(void *)(v66 + 8));
                  }
                  v66 += 24;
                }
                while (v66 != v67);
                uint64_t v66 = *(void *)buf;
              }
              if (v66)
              {
                *(void *)&uint8_t buf[8] = v66;
                operator delete((void *)v66);
              }
              ++v64;
            }
            while (v64 != dword_1015716D0);
            if (v63)
            {
LABEL_99:
              for (uint64_t i = 0; i != 2; ++i)
                (*(void (**)(PersonalitySpecificImpl *, void, uint64_t, const char *, const char *))(*(void *)a1 + 680))(a1, dword_1015716C8[i], 27, v108, "CommCenter");
            }
            else
            {
              long long v87 = *((void *)a1 + 8);
              if (os_log_type_enabled(v87, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                _os_log_impl((void *)&_mh_execute_header, v87, OS_LOG_TYPE_DEFAULT, "#I %s: deactivation on handover not possible cancelled, a connection does not want deactivation", buf, 0xCu);
              }
            }
            BOOL v22 = 0;
            unsigned int v34 = 1;
LABEL_103:
            uint64_t v69 = *((void *)a1 + 55);
            if (v69)
            {
              __int16 v70 = *((void *)a1 + 8);
              if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#I %s: We have pending handover that is not needed anymore, discarding it", buf, 0xCu);
                uint64_t v69 = *((void *)a1 + 55);
                *((void *)a1 + 55) = 0;
                if (!v69) {
                  goto LABEL_109;
                }
              }
              else
              {
                *((void *)a1 + 55) = 0;
              }
              (*(void (**)(uint64_t))(*(void *)v69 + 8))(v69);
            }
LABEL_109:
            if (!v22)
            {
              if (v109 == a2) {
                return 1;
              }
              else {
                return v34;
              }
            }
            char v124 = 0;
            if (v127) {
              goto LABEL_111;
            }
            uint64_t v73 = *((void *)a1 + 14);
            if (!v73) {
              goto LABEL_153;
            }
            if ((*(unsigned int (**)(uint64_t, void))(*(void *)v73 + 176))(v73, 0))
            {
              __int16 v74 = *((void *)a1 + 8);
              if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v75 = asString();
                uint64_t v76 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v75;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v129 = v76;
                _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I %s: Can't handover from %s right now, pending switch to %s", buf, 0x20u);
              }
              uint64_t v12 = 1;
              char v124 = 1;
LABEL_115:
              memset(buf, 0, sizeof(buf));
              if (*(char *)(a3 + 23) < 0)
              {
                sub_10004FC84(buf, *(void **)a3, *(void *)(a3 + 8));
              }
              else
              {
                *(_OWORD *)long long buf = *(_OWORD *)a3;
                *(void *)&uint8_t buf[16] = *(void *)(a3 + 16);
              }
              uint64_t v125 = 0;
              v126 = 0;
              sub_100BF51F4(&v125, (void *)a1 + 4);
              Registry::getTimerService(&v118, *((Registry **)a1 + 9));
              uint64_t v77 = v118;
              sub_100058DB0(__p, "switchover back off timer");
              long long v78 = *((void *)a1 + 6);
              dispatch_object_t object = v78;
              if (v78) {
                dispatch_retain(v78);
              }
              aBlock[0] = _NSConcreteStackBlock;
              aBlock[1] = 1174405120;
              aBlock[2] = sub_100D9B998;
              aBlock[3] = &unk_101A58128;
              long long v79 = v126;
              aBlock[4] = a1;
              aBlock[5] = v125;
              v111 = v126;
              if (v126) {
                atomic_fetch_add_explicit(&v126->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              }
              if ((char)buf[23] < 0)
              {
                sub_10004FC84(&v112, *(void **)buf, *(unint64_t *)&buf[8]);
              }
              else
              {
                long long v112 = *(_OWORD *)buf;
                uint64_t v113 = *(void *)&buf[16];
              }
              v114 = _Block_copy(aBlock);
              sub_100118A44(v77, (uint64_t)__p, 0, 2000000, &object, &v114);
              uint64_t v80 = v120;
              uint64_t v120 = 0;
              uint64_t v81 = *((void *)a1 + 55);
              *((void *)a1 + 55) = v80;
              if (v81)
              {
                (*(void (**)(uint64_t))(*(void *)v81 + 8))(v81);
                uint64_t v82 = v120;
                uint64_t v120 = 0;
                if (v82) {
                  (*(void (**)(uint64_t))(*(void *)v82 + 8))(v82);
                }
              }
              if (v114) {
                _Block_release(v114);
              }
              if (object) {
                dispatch_release(object);
              }
              if (v117 < 0) {
                operator delete(__p[0]);
              }
              if (v119) {
                sub_10004D2C8(v119);
              }
              if (SHIBYTE(v113) < 0) {
                operator delete((void *)v112);
              }
              if (v111) {
                std::__shared_weak_count::__release_weak(v111);
              }
              if (v79) {
                std::__shared_weak_count::__release_weak(v79);
              }
              if ((char)buf[23] < 0) {
                operator delete(*(void **)buf);
              }
              return v12;
            }
            if (v127)
            {
LABEL_111:
              uint64_t v71 = *((void *)a1 + 8);
              if (os_log_type_enabled(v71, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v72 = asString();
                *(_DWORD *)long long buf = 136315394;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v72;
                _os_log_impl((void *)&_mh_execute_header, v71, OS_LOG_TYPE_DEFAULT, "#I %s: Try to MOBIKE handover to transportType:%s", buf, 0x16u);
              }
              sub_100D908B4(a1, v109, v107, a3);
              uint64_t v12 = 1;
            }
            else
            {
LABEL_153:
              long long v83 = *((void *)a1 + 8);
              if (os_log_type_enabled(v83, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v84 = asString();
                uint64_t v85 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "switchOverTo";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v84;
                *(_WORD *)&unsigned char buf[22] = 2080;
                uint64_t v129 = v85;
                _os_log_impl((void *)&_mh_execute_header, v83, OS_LOG_TYPE_DEFAULT, "#I %s: Currently activated or activating on %s, switching over to %s", buf, 0x20u);
              }
              if (sub_100D93428(a1, v109, a2))
              {
                uint64_t v86 = *((void *)a1 + 14);
                (*(void (**)(uint64_t *__return_ptr, PersonalitySpecificImpl *))(*(void *)a1 + 16))(&v122, a1);
                sub_100D932C8((uint64_t)v121, (uint64_t)a1, v109);
                uint64_t v12 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t *, uint64_t, void, void **, char *))(*(void *)v86 + 240))(v86, v109, a2, &v122, a3, 0, v121, &v124);
                if (v121[0])
                {
                  v121[1] = v121[0];
                  operator delete(v121[0]);
                }
                if (v123) {
                  sub_10004D2C8(v123);
                }
              }
              else
              {
                uint64_t v12 = 0;
              }
            }
            if (!v124) {
              return v12;
            }
            goto LABEL_115;
          }
        }
        goto LABEL_54;
      }
      long long v26 = *((void *)a1 + 8);
      if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v27 = asString();
        uint64_t v28 = asString();
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = "switchOverTo";
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v27;
        *(_WORD *)&unsigned char buf[22] = 2080;
        uint64_t v129 = v28;
        _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: Currently activated or activating on %s, iRat recommend %s: see if we can switch...", buf, 0x20u);
        uint64_t v20 = v109;
      }
      int v29 = sub_100D98468((uint64_t)a1, v20, a2);
      if (v29 == a2)
      {
        if (sub_100D91C24((Registry **)a1, a2, v30))
        {
          if (!validContextType()
            || !*((unsigned char *)a1 + 16 * (int)v109 + 704)
            || (uint64_t v31 = sub_100D9B080((uint64_t)a1, v109), v31 >= sub_100D9B110((Registry **)a1, v32)))
          {
            BOOL v22 = 1;
            goto LABEL_56;
          }
          uint64_t v33 = *((void *)a1 + 8);
          unsigned int v34 = 0;
          BOOL v22 = 0;
          if (!os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_103;
          }
          uint64_t v35 = asString();
          uint64_t v36 = sub_100D9B080((uint64_t)a1, v109);
          *(_DWORD *)long long buf = 136315906;
          *(void *)&uint8_t buf[4] = "switchOverTo";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v35;
          *(_WORD *)&unsigned char buf[22] = 2048;
          uint64_t v129 = v36;
          __int16 v130 = 2080;
          v131 = "seconds";
          BOOL v37 = "#I %s: Do not initiate new handover when activation is fresh on %s that is %lld %s old. Do not touch it.";
          uint64_t v38 = v33;
          uint32_t v39 = 42;
        }
        else
        {
          __int16 v46 = *((void *)a1 + 8);
          unsigned int v34 = 0;
          BOOL v22 = 0;
          if (!os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_103;
          }
          uint64_t v47 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "switchOverTo";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v47;
          BOOL v37 = "#I %s: Policy is not allowing the new context type: %s";
          uint64_t v38 = v46;
          uint32_t v39 = 22;
        }
      }
      else
      {
        if (v29 != v109)
        {
          if ((validContextType() & 1) == 0)
          {
            uint64_t v45 = *((void *)a1 + 8);
            if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = "switchOverTo";
              _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I %s: handoverPossible got unknown, deactivating", buf, 0xCu);
            }
            uint64_t v43 = 0;
            int v106 = 0;
            char v44 = "Should deactivate rather than switchover";
            goto LABEL_50;
          }
LABEL_54:
          unsigned int v34 = 0;
          BOOL v22 = 0;
          goto LABEL_103;
        }
        uint64_t v40 = *((void *)a1 + 8);
        unsigned int v34 = 0;
        BOOL v22 = 0;
        if (!os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_103;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = "switchOverTo";
        BOOL v37 = "#I %s: handoverPossible got same context type, staying on it";
        uint64_t v38 = v40;
        uint32_t v39 = 12;
      }
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, v37, buf, v39);
      goto LABEL_54;
    }
    uint64_t v18 = *((void *)a1 + 8);
    uint64_t v12 = 0;
    if (!os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT)) {
      return v12;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "switchOverTo";
    uint64_t v15 = "#I %s: no valid current context type";
LABEL_18:
    char v16 = v18;
    uint32_t v17 = 12;
    goto LABEL_19;
  }
  int v11 = *((void *)a1 + 8);
  uint64_t v12 = 0;
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v13 = asString();
    uint64_t v14 = asString();
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "switchOverTo";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v13;
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v129 = v14;
    uint64_t v15 = "#I %s: Forced Context Type is %s, forbidden to switch to %s";
    char v16 = v11;
    uint32_t v17 = 32;
LABEL_19:
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, v15, buf, v17);
    return 0;
  }
  return v12;
}

void sub_100D9AF58(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *aBlock,dispatch_object_t object,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,uint64_t a34,uint64_t a35,void *__p,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40)
{
  uint64_t v42 = *(std::__shared_weak_count **)(v40 - 176);
  if (v42) {
    sub_10004D2C8(v42);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9B080(uint64_t a1, int a2)
{
  if (!validContextType() || !*(unsigned char *)(a1 + 696 + 16 * a2 + 8)) {
    return 0;
  }
  uint64_t v4 = sub_100DA1258(*(Registry **)(a1 + 72));
  uint64_t v5 = a1 + 696 + 16 * a2;
  if (!*(unsigned char *)(v5 + 8)) {
    sub_10016C840();
  }
  uint64_t v6 = (unsigned __int128)((v4 - *(void *)v5) * (__int128)0x112E0BE826D694B3) >> 64;
  return (v6 >> 26) + ((unint64_t)v6 >> 63);
}

uint64_t sub_100D9B110@<X0>(Registry **a1@<X0>, uint64_t *a2@<X8>)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, a1[9]);
  uint64_t v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v20 = v5;
  int v9 = sub_10004D37C(&v4[1].__m_.__sig, &v20);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_9:
  uint64_t v13 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 96))(&cf, v11, v13, 1, @"FreshActivationInterval", 0, 0);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  uint64_t v14 = (unsigned int *)cf;
  if (cf)
  {
    LODWORD(v20) = 0;
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v20, v14, v16);
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 3;
  }
  sub_1000577C4(&cf);
  return v17;
}

void sub_100D9B290(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_100D9B2B8(PersonalitySpecificImpl *a1, uint64_t a2)
{
  int v4 = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 328))(a1, 1);
  unint64_t v5 = *((void *)a1 + 8);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = "shouldActOnTransportTypeChangeTo";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    *(_WORD *)&unsigned char buf[22] = 2080;
    uint64_t v31 = asString();
    __int16 v32 = 2080;
    uint64_t v33 = asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %s: Current context is %s over %s, new transport type is %s.", buf, 0x2Au);
  }
  if (v4 != a2)
  {
    uint64_t v6 = dword_1015716C8;
    do
    {
      uint64_t v7 = (void *)((char *)a1 + 24 * *v6);
      memset(buf, 0, sizeof(buf));
      sub_100DA1880(buf, (const void *)v7[15], v7[16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7[16] - v7[15]) >> 3));
      uint64_t v8 = *(void *)buf;
      uint64_t v9 = *(void *)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        while (!*(unsigned char *)(v8 + 16)
             || ((*(uint64_t (**)(void, uint64_t))(**(void **)(v8 + 8) + 320))(*(void *)(v8 + 8), a2) & 1) != 0)
        {
          v8 += 24;
          if (v8 == v9)
          {
            uint64_t v8 = *(void *)buf;
            goto LABEL_10;
          }
        }
        unint64_t v20 = *((void *)a1 + 8);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = (*(uint64_t (**)(void))(**(void **)(v8 + 8) + 16))(*(void *)(v8 + 8));
          *(_DWORD *)int v29 = 136315394;
          *(void *)&void v29[4] = "shouldActOnTransportTypeChangeTo";
          *(_WORD *)&v29[12] = 2080;
          *(void *)&v29[14] = v21;
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s: %s told us not to switch transport", v29, 0x16u);
        }
        if (*(void *)buf)
        {
          *(void *)&uint8_t buf[8] = *(void *)buf;
          operator delete(*(void **)buf);
        }
        return 0;
      }
LABEL_10:
      if (v8)
      {
        *(void *)&uint8_t buf[8] = v8;
        operator delete((void *)v8);
      }
      ++v6;
    }
    while (v6 != dword_1015716D0);
    if (a2
      || !(*(unsigned int (**)(PersonalitySpecificImpl *, void))(*(void *)a1 + 992))(a1, 0))
    {
      return 1;
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *((Registry **)a1 + 9));
    char v12 = ServiceMap;
    if (v13 < 0)
    {
      uint64_t v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        uint64_t v13 = v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v13;
    uint64_t v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)buf);
    if (!v17)
    {
      std::mutex::unlock(v12);
      return 1;
    }
    uint64_t v19 = v17[3];
    uint64_t v18 = (std::__shared_weak_count *)v17[4];
    if (!v18)
    {
      std::mutex::unlock(v12);
      if (v19) {
        goto LABEL_29;
      }
      return 1;
    }
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v12);
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v18);
    if (!v19) {
      goto LABEL_36;
    }
LABEL_29:
    *(void *)int v29 = 0;
    *(void *)&v29[8] = 0;
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v19 + 432))(v29, v19);
    uint64_t v23 = *(void *)v29;
    if (!*(void *)v29) {
      goto LABEL_33;
    }
    uint64_t v24 = PersonalitySpecificImpl::simSlot(a1);
    int v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)v23 + 88))(v23, v24, 1);
    long long v26 = *((void *)a1 + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "shouldActOnTransportTypeChangeTo";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v27;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: iRAT recommends %s context type", buf, 0x16u);
    }
    if (v25)
    {
LABEL_33:
      if (*(void *)&v29[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&v29[8]);
      }
      if (v18) {
LABEL_36:
      }
        sub_10004D2C8(v18);
      return 1;
    }
    uint64_t v28 = *((void *)a1 + 8);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "shouldActOnTransportTypeChangeTo";
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s: Stale event", buf, 0xCu);
    }
    if (*(void *)&v29[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&v29[8]);
    }
    if (v18) {
      sub_10004D2C8(v18);
    }
  }
  return 0;
}

void sub_100D9B78C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v14) {
    sub_10004D2C8(v14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9B7F0@<X0>(Registry **a1@<X0>, uint64_t *a2@<X8>)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, a1[9]);
  int v4 = ServiceMap;
  if ((v5 & 0x8000000000000000) != 0)
  {
    uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      unint64_t v5 = v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v20 = v5;
  uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, &v20);
  if (v9)
  {
    uint64_t v11 = v9[3];
    int v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      char v12 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v4);
  int v10 = 0;
  char v12 = 1;
LABEL_9:
  uint64_t v13 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v11 + 96))(&cf, v11, v13, 1, @"StallActivationInterval", 0, 0);
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  uint64_t v14 = (unsigned int *)cf;
  if (cf)
  {
    LODWORD(v20) = 0;
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 == CFNumberGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v20, v14, v16);
      uint64_t v17 = v20;
    }
    else
    {
      uint64_t v17 = 0;
    }
  }
  else
  {
    uint64_t v17 = 15;
  }
  sub_1000577C4(&cf);
  return v17;
}

void sub_100D9B970(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void sub_100D9B998(void *a1)
{
  char v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (PersonalitySpecificImpl *)a1[4];
    int v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      unint64_t v5 = v4;
      if (a1[5])
      {
        uint64_t v6 = sub_100D89AB4((uint64_t)v3, 0, 0);
        uint64_t v7 = *((void *)v3 + 8);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          int v9 = 136315394;
          int v10 = "switchOverTo_block_invoke";
          __int16 v11 = 2080;
          uint64_t v12 = asString();
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: switchover pending timer, trying to switch to: %s", (uint8_t *)&v9, 0x16u);
        }
        uint64_t v8 = *((void *)v3 + 55);
        *((void *)v3 + 55) = 0;
        if (v8) {
          (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
        }
        if (((*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, void *))(*(void *)v3 + 1216))(v3, v6, a1 + 7) & 1) == 0)sub_100D8F454(v3, v6); {
      }
        }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100D9BB14(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

unsigned char *sub_100D9BB2C(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 48);
  a1[5] = *(void *)(a2 + 40);
  a1[6] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  BOOL result = a1 + 7;
  if (*(char *)(a2 + 79) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  long long v5 = *(_OWORD *)(a2 + 56);
  a1[9] = *(void *)(a2 + 72);
  *(_OWORD *)BOOL result = v5;
  return result;
}

void sub_100D9BB94(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9BBAC(uint64_t a1)
{
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  char v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100D9BC00(uint64_t a1, int a2)
{
  if (validContextType())
  {
    sub_100D87AF8(a1, a2);
    int v4 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315138;
      uint64_t v10 = asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I fLastActivationStart set for %s (handover)", (uint8_t *)&v9, 0xCu);
    }
    long long v5 = dword_1015716C8;
    do
    {
      uint64_t v6 = a1 + 24 * *v5;
      uint64_t v7 = *(void *)(v6 + 120);
      uint64_t v8 = *(void *)(v6 + 128);
      while (v7 != v8)
      {
        if (*(unsigned char *)(v7 + 16)) {
          (*(void (**)(void, uint64_t))(**(void **)(v7 + 8) + 264))(*(void *)(v7 + 8), 1);
        }
        v7 += 24;
      }
      ++v5;
    }
    while (v5 != dword_1015716D0);
  }
}

void sub_100D9BD48(uint64_t a1, int a2)
{
}

BOOL sub_100D9BD50(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100D9903C((void *)(a1 - 24), a2, a3, a4);
}

BOOL sub_100D9BD58(uint64_t a1)
{
  return *(_DWORD *)(*(void *)(a1 + 240) + 144) == 4;
}

void sub_100D9BD6C(PersonalitySpecificImpl *this@<X0>, std::string *a2@<X8>)
{
  char v4 = 0;
  uint64_t v5 = 0;
  LOWORD(__p.__r_.__value_.__l.__data_) = 1;
  uint64_t v6 = (char *)this + 120;
  uint64_t v7 = (char *)this + 168;
  do
  {
    char v8 = v4;
    int v9 = __p.__r_.__value_.__s.__data_[v5];
    uint64_t v10 = v6;
    while (2)
    {
      for (uint64_t i = *(void *)v10; i != *((void *)v10 + 1); i += 24)
      {
        uint64_t v12 = *(void *)(i + 8);
        if (v12) {
          BOOL v13 = *(unsigned __int8 *)(i + 16) == v9;
        }
        else {
          BOOL v13 = 0;
        }
        if (v13)
        {
          (*(void (**)(uint64_t))(*(void *)v12 + 416))(v12);
          return;
        }
      }
      v10 += 24;
      if (v10 != v7) {
        continue;
      }
      break;
    }
    char v4 = 1;
    uint64_t v5 = 1;
  }
  while ((v8 & 1) == 0);
  a2->__r_.__value_.__r.__words[0] = 0;
  a2->__r_.__value_.__l.__size_ = 0;
  a2->__r_.__value_.__r.__words[2] = 0;
  uint64_t v14 = (uint64_t *)*(unsigned int *)(*((void *)this + 33) + 144);
  if (v14 == 4)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v14, *((Registry **)this + 9));
    CFNumberRef v16 = ServiceMap;
    if ((v17 & 0x8000000000000000) != 0)
    {
      uint64_t v18 = (unsigned __int8 *)(v17 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v19 = 5381;
      do
      {
        unint64_t v17 = v19;
        unsigned int v20 = *v18++;
        uint64_t v19 = (33 * v19) ^ v20;
      }
      while (v20);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v26 = v17;
    uint64_t v21 = sub_10004D37C(&v16[1].__m_.__sig, &v26);
    if (v21)
    {
      uint64_t v23 = v21[3];
      BOOL v22 = (std::__shared_weak_count *)v21[4];
      if (v22)
      {
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v16);
        atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v22);
        char v24 = 0;
LABEL_25:
        (*(void (**)(std::string *__return_ptr, uint64_t))(*(void *)v23 + 144))(&__p, v23);
        std::string::operator=(a2, &__p);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if ((v24 & 1) == 0) {
          sub_10004D2C8(v22);
        }
        return;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    std::mutex::unlock(v16);
    BOOL v22 = 0;
    char v24 = 1;
    goto LABEL_25;
  }
  PersonalitySpecificImpl::simSlot(this);
  PersonalityIdFromSlotId();
  std::string::operator=(a2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
}

void sub_100D9BF80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9BFE8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
}

void sub_100D9BFF0(PersonalitySpecificImpl *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (validContextType())
  {
    char v16 = 0;
    unint64_t v17 = 0;
    uint64_t v18 = 0;
    sub_100DA1880(&v16, *((const void **)a1 + 3 * (int)a2 + 15), *((void *)a1 + 3 * (int)a2 + 16), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*((void *)a1 + 3 * (int)a2 + 16) - *((void *)a1 + 3 * (int)a2 + 15)) >> 3));
    int v9 = v16;
    char v8 = v17;
    if (v16 != v17)
    {
      do
      {
        if (*((unsigned char *)v9 + 16))
        {
          uint64_t v10 = v9[1];
          if (v10)
          {
            __int16 v11 = *((void *)a1 + 8);
            if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
            {
              sub_10003E168(&__p, (void *)a1 + 4);
              uint64_t v12 = __p;
              BOOL v13 = v21;
              std::string __p = 0;
              uint64_t v21 = 0;
              if (v12) {
                uint64_t v14 = (const char *)(*(uint64_t (**)(void))(v12[3] + 48))();
              }
              else {
                uint64_t v14 = "nothing";
              }
              *(_DWORD *)long long buf = 136315394;
              *(void *)int v25 = "handleDidGetPcoInfo";
              *(_WORD *)&v25[8] = 2080;
              *(void *)&v25[10] = v14;
              _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s: handling %s", buf, 0x16u);
              if (v13) {
                sub_10004D2C8(v13);
              }
              if (v21) {
                sub_10004D2C8(v21);
              }
              uint64_t v10 = v9[1];
            }
            (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v10 + 96))(v10, a3, a4);
          }
        }
        v9 += 3;
      }
      while (v9 != v8);
    }
    *(_DWORD *)long long buf = PersonalitySpecificImpl::simSlot(a1);
    *(void *)&v25[4] = (*(uint64_t (**)(PersonalitySpecificImpl *, uint64_t, uint64_t, void))(*(void *)a1 + 136))(a1, a2, 1, 0);
    *(_DWORD *)&v25[12] = a4;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    unint64_t v26 = 0;
    sub_10005C928(&v26, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
    xpc_object_t v23 = 0;
    write_rest_value();
    sub_100058DB0(&__p, "/cc/events/pco_update");
    xpc_object_t object = v23;
    xpc_object_t v23 = xpc_null_create();
    ctu::RestModule::sendEvent();
    xpc_release(object);
    xpc_object_t object = 0;
    if (v22 < 0) {
      operator delete(__p);
    }
    xpc_release(v23);
    if (v26)
    {
      uint64_t v27 = v26;
      operator delete(v26);
    }
    if (v16)
    {
      unint64_t v17 = v16;
      operator delete(v16);
    }
  }
  else
  {
    CFTypeID v15 = *((void *)a1 + 8);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)int v25 = "handleDidGetPcoInfo";
      *(_WORD *)&v25[8] = 2080;
      *(void *)&v25[10] = asString();
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
  }
}

void sub_100D9C32C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, xpc_object_t object, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,xpc_object_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *a25,uint64_t a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9C3E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

uint64_t sub_100D9C3EC(uint64_t a1, int a2, uint64_t a3, int a4, int a5)
{
  return sub_100D85334(a1 - 24, a2, a3, a4, a5);
}

void sub_100D9C3F4(void *a1, uint64_t a2, uint64_t *a3)
{
  char valid = validContextType();
  uint64_t v7 = a1[8];
  BOOL v8 = os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT);
  if (valid)
  {
    if (v8)
    {
      (*(void (**)(void **__return_ptr, void *, uint64_t))(*a1 + 536))(__p, a1, a2);
      int v9 = v17 >= 0 ? __p : (void **)__p[0];
      uint64_t v10 = asString();
      uint64_t v11 = asStringBool(*a3 != 0);
      *(_DWORD *)long long buf = 136315906;
      uint64_t v19 = "setActivationBlocker";
      __int16 v20 = 2080;
      uint64_t v21 = (uint64_t)v9;
      __int16 v22 = 2080;
      uint64_t v23 = v10;
      __int16 v24 = 2080;
      uint64_t v25 = v11;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s: ActivationBlocker for %s (ct %s) set to %s", buf, 0x2Au);
      if (v17 < 0) {
        operator delete(__p[0]);
      }
    }
    uint64_t v13 = *a3;
    uint64_t v12 = a3[1];
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    a1[2 * (int)a2 + 39] = v13;
    uint64_t v14 = &a1[2 * (int)a2];
    CFTypeID v15 = (std::__shared_weak_count *)v14[40];
    v14[40] = v12;
    if (v15) {
      sub_10004D2C8(v15);
    }
  }
  else if (v8)
  {
    *(_DWORD *)long long buf = 136315394;
    uint64_t v19 = "setActivationBlocker";
    __int16 v20 = 2080;
    uint64_t v21 = asString();
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
  }
}

void sub_100D9C5E4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
}

void sub_100D9C608(uint64_t a1, uint64_t a2, uint64_t *a3)
{
}

uint64_t sub_100D9C610(uint64_t a1, int a2, int a3)
{
  uint64_t v5 = *(void *)(a1 + 264);
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 272);
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (!v5 || (uint64_t v7 = *(long long **)(v5 + 224), v8 = *(long long **)(v5 + 232), v7 == v8))
  {
LABEL_12:
    uint64_t v10 = 0;
    if (!v6) {
      return v10;
    }
LABEL_13:
    sub_10004D2C8(v6);
    return v10;
  }
  while (1)
  {
    uint64_t v16 = 0;
    long long v12 = *v7;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    std::string __p = 0;
    sub_100448664(&__p, *((const void **)v7 + 3), *((void *)v7 + 4), (uint64_t)(*((void *)v7 + 4) - *((void *)v7 + 3)) >> 2);
    LOBYTE(v16) = *((unsigned char *)v7 + 48);
    if (v12 == a2)
    {
      int v9 = __p;
      if (__p != v14) {
        break;
      }
    }
LABEL_9:
    if (__p)
    {
      uint64_t v14 = __p;
      operator delete(__p);
    }
    uint64_t v7 = (long long *)((char *)v7 + 56);
    if (v7 == v8) {
      goto LABEL_12;
    }
  }
  while (*v9 != a3)
  {
    if (++v9 == v14) {
      goto LABEL_9;
    }
  }
  if (__p)
  {
    uint64_t v14 = __p;
    operator delete(__p);
  }
  uint64_t v10 = 1;
  if (v6) {
    goto LABEL_13;
  }
  return v10;
}

void sub_100D9C72C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9C744(uint64_t a1, int a2, int a3)
{
  return sub_100D9C610(a1 - 24, a2, a3);
}

void sub_100D9C74C(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t v3 = *(void *)(a1 + 264);
  char v4 = *(std::__shared_weak_count **)(a1 + 272);
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v3) {
    BOOL v5 = v3 + 224 == (void)a2;
  }
  else {
    BOOL v5 = 1;
  }
  if (!v5) {
    sub_100BC4CC8(a2, *(long long **)(v3 + 224), *(long long **)(v3 + 232), 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*(void *)(v3 + 232) - *(void *)(v3 + 224)) >> 3));
  }
  if (v4)
  {
    sub_10004D2C8(v4);
  }
}

void sub_100D9C7FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100BC5188((void ***)va);
  _Unwind_Resume(a1);
}

void sub_100D9C820(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
}

uint64_t sub_100D9C828(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    return *(unsigned char *)(a1 + a2 + 348) != 0;
  }
  return result;
}

uint64_t sub_100D9C868(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    return *(unsigned char *)(a1 + a2 + 324) != 0;
  }
  return result;
}

void sub_100D9C8A8(PersonalitySpecificImpl *a1, uint64_t a2)
{
  PersonalitySpecificImpl::simSlot(a1);
  uint64_t v4 = *((void *)a1 + 14);
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 16))(v4);
  }
  (*(void (**)(PersonalitySpecificImpl *, uint64_t, uint64_t, uint64_t))(*(void *)a1 + 136))(a1, a2, 1, 1);
  sub_100D90350((uint64_t)a1, a2);
  sub_100D9C97C();
}

void sub_100D9C97C()
{
  xpc_object_t v3 = 0;
  write_rest_value();
  sub_100058DB0(&__p, "/cc/events/data_context_activation_blocked");
  xpc_object_t object = v3;
  xpc_object_t v3 = xpc_null_create();
  ctu::RestModule::sendEvent();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100D9CA10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

void sub_100D9CA54(uint64_t a1, uint64_t a2)
{
}

void sub_100D9CA5C(void *a1, uint64_t a2, int a3, int a4)
{
  if ((validContextType() & 1) == 0)
  {
    uint64_t v10 = a1[8];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "reportContextConnectionError";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asString();
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
    return;
  }
  if (a3 == 4)
  {
    if ((a4 - 1028) <= 0x27 && ((1 << (a4 - 4)) & 0x8000000041) != 0)
    {
      BOOL v8 = a1[8];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        *(_DWORD *)&uint8_t buf[4] = a4;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I clear all IPv4v6 activation blocker upon endReason: %d", buf, 8u);
      }
      int v9 = (char *)a1 + (int)a2;
LABEL_8:
      v9[346] = 0;
      v9[344] = 0;
      return;
    }
    return;
  }
  uint64_t v11 = &a1[2 * (int)a2];
  uint64_t v13 = v11[39];
  long long v12 = (std::__shared_weak_count *)v11[40];
  if (v12) {
    atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v13)
  {
    if (!sub_1004FCA34(v13))
    {
      uint64_t v35 = a1[8];
      if (!os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_72;
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "reportContextConnectionError";
      uint64_t v36 = "#I %s: ActivationBlocker: already ON - skip error checking";
      BOOL v37 = v35;
      uint32_t v38 = 12;
      goto LABEL_71;
    }
    if (*(_DWORD *)(v13 + 32) == a3)
    {
      for (uint64_t i = *(_DWORD **)(v13 + 40); ; ++i)
      {
        if (i == *(_DWORD **)(v13 + 48)) {
          goto LABEL_20;
        }
        if (*i == a4) {
          break;
        }
      }
      std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = *(void *)(v13 + 72);
      if (v43 >= 1 && v43 < (std::chrono::steady_clock::now().__d_.__rep_ - *(void *)(v13 + 88)) / 1000000000)
      {
        *(std::chrono::steady_clock::time_point *)(v13 + 88) = std::chrono::steady_clock::now();
        *(_DWORD *)(v13 + 96) = 0;
      }
      ++*(_DWORD *)(v13 + 96);
      if (!sub_1004FCA34(v13)) {
        (*(void (**)(void *, uint64_t))(*a1 + 848))(a1, a2);
      }
      char v44 = a1[8];
      if (!os_log_type_enabled(v44, OS_LOG_TYPE_DEFAULT))
      {
LABEL_72:
        char v28 = 0;
        if (!v12) {
          goto LABEL_58;
        }
LABEL_57:
        sub_10004D2C8(v12);
        goto LABEL_58;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "reportContextConnectionError";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = asString();
      *(_WORD *)&unsigned char buf[22] = 1024;
      LODWORD(__p) = a4;
      uint64_t v36 = "#I %s: ActivationBlocker: additional error reported: type=%s, reason=%d";
      BOOL v37 = v44;
      uint32_t v38 = 28;
LABEL_71:
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, v36, buf, v38);
      goto LABEL_72;
    }
  }
LABEL_20:
  sub_100D85334((uint64_t)a1, a2, (uint64_t)"new connection error", 1, 0);
  uint64_t v16 = a1[33];
  uint64_t v15 = (std::__shared_weak_count *)a1[34];
  if (v15) {
    atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v16)
  {
    uint64_t v45 = v15;
    uint64_t v52 = 0;
    uint64_t v53 = 0;
    uint64_t v54 = 0;
    sub_100D9C74C((uint64_t)a1, &v52);
    uint64_t v18 = v52;
    uint64_t v17 = v53;
    if (v52 != v53)
    {
      __int16 v46 = (long long *)(v16 + 48);
      do
      {
        uint64_t v64 = 0;
        long long v19 = *(_OWORD *)v18;
        *(void *)&uint8_t buf[16] = *(void *)(v18 + 16);
        *(_OWORD *)long long buf = v19;
        uint64_t v62 = 0;
        uint64_t v63 = 0;
        std::string __p = 0;
        sub_100448664(&__p, *(const void **)(v18 + 24), *(void *)(v18 + 32), (uint64_t)(*(void *)(v18 + 32) - *(void *)(v18 + 24)) >> 2);
        LOBYTE(v64) = *(unsigned char *)(v18 + 48);
        if (*(_DWORD *)buf == a3)
        {
          __int16 v20 = __p;
          uint64_t v21 = __p;
          if (__p == v62)
          {
            char v22 = 1;
            if (!__p) {
              goto LABEL_32;
            }
LABEL_31:
            uint64_t v62 = v20;
            operator delete(v20);
            goto LABEL_32;
          }
          while (*v21 != a4)
          {
            if (++v21 == (_DWORD *)v62) {
              goto LABEL_29;
            }
          }
          uint64_t v47 = 0;
          uint64_t v48 = 0;
          uint64_t v49 = 0;
          sub_100448664(&v47, __p, (uint64_t)v62, (v62 - (unsigned char *)__p) >> 2);
          int v59 = a3;
          char v58 = buf[4];
          uint64_t v57 = *(void *)&buf[16];
          int v56 = *(_DWORD *)&buf[8];
          char v55 = v64;
          sub_100DA199C(&v59, (uint64_t)&v47, v46, &v58, &v57, &v56, &v55, &v50);
          sub_100D9C3F4(a1, a2, &v50);
          if (v51) {
            sub_10004D2C8(v51);
          }
          if (v47)
          {
            uint64_t v48 = v47;
            operator delete(v47);
          }
          char v22 = 0;
        }
        else
        {
LABEL_29:
          char v22 = 1;
        }
        __int16 v20 = __p;
        if (__p) {
          goto LABEL_31;
        }
LABEL_32:
        v18 += 56;
        if (v18 == v17) {
          char v23 = 0;
        }
        else {
          char v23 = v22;
        }
      }
      while ((v23 & 1) != 0);
    }
    *(void *)long long buf = &v52;
    sub_100BC5188((void ***)buf);
    uint64_t v15 = v45;
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  uint64_t v24 = v11[39];
  uint64_t v25 = (std::__shared_weak_count *)v11[40];
  if (v25) {
    atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (v24)
  {
    ++*(_DWORD *)(v24 + 96);
    if (!sub_1004FCA34(v24)) {
      (*(void (**)(void *, uint64_t))(*a1 + 848))(a1, a2);
    }
    unint64_t v26 = a1[8];
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v27 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "reportContextConnectionError";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v27;
      *(_WORD *)&unsigned char buf[22] = 1024;
      LODWORD(__p) = a4;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s: ActivationBlocker: new error reported: type=%s, reason=%d", buf, 0x1Cu);
    }
  }
  char v28 = 1;
  long long v12 = v25;
  if (v25) {
    goto LABEL_57;
  }
LABEL_58:
  if (a3 == 1) {
    char v29 = v28;
  }
  else {
    char v29 = 0;
  }
  if (v29)
  {
    uint64_t v30 = (int)a2;
    switch(a4)
    {
      case '\'':
        uint32_t v39 = a1[8];
        if (os_log_type_enabled(v39, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_DEFAULT, "#I clear all IPv4v6 activation blocker upon UMTS_REACTIVATION_REQ", buf, 2u);
        }
        int v9 = (char *)a1 + v30;
        goto LABEL_8;
      case '3':
        uint64_t v40 = (char *)a1 + (int)a2;
        if (v40[344]) {
          return;
        }
        uint64_t v41 = a1[8];
        if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v42 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "reportContextConnectionError";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v42;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I %s: fIPv4ActivationBlocker[%s] set", buf, 0x16u);
        }
        unsigned int v34 = v40 + 344;
        break;
      case '2':
        uint64_t v31 = (char *)a1 + (int)a2;
        if (v31[346]) {
          return;
        }
        __int16 v32 = a1[8];
        if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v33 = asString();
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = "reportContextConnectionError";
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v33;
          _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I %s: fIPv6ActivationBlocker[%s] set", buf, 0x16u);
        }
        unsigned int v34 = v31 + 346;
        break;
      default:
        return;
    }
    *unsigned int v34 = 1;
  }
}

void sub_100D9D1AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27)
{
  if (v27) {
    sub_10004D2C8(v27);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9D250(uint64_t a1, uint64_t a2, int a3, int a4)
{
}

unint64_t sub_100D9D258@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  if ((sub_100D8ED54(a1, a2, 17) || (unint64_t result = sub_100D8ED54(a1, a2, 26), result))
    && (unint64_t result = sub_100D90350(a1, a2)) == 0)
  {
    *(_DWORD *)a3 = 83;
    *(void *)(a3 + 8) = " IMS Preferences not ready";
    *(void *)(a3 + 16) = &unk_10165244B;
    *(_DWORD *)(a3 + 24) = 0;
    *(unsigned char *)(a3 + 28) = 0;
    *(_DWORD *)(a3 + 32) = a2;
    *(void *)(a3 + 44) = 0;
    *(void *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 52) = 0;
  }
  else
  {
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 8) = &unk_10165244B;
    *(void *)(a3 + 16) = &unk_10165244B;
    *(void *)(a3 + 44) = 0;
    *(void *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 52) = 0;
    *(_DWORD *)(a3 + 32) = a2;
  }
  return result;
}

unint64_t sub_100D9D314@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  return sub_100D9D258(a1 - 24, a2, a3);
}

void sub_100D9D31C(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    LODWORD(v9[0]) = 136315394;
    *(void *)((char *)v9 + 4) = "handleDNSReady";
    WORD2(v9[1]) = 2080;
    *(void *)((char *)&v9[1] + 6) = asString();
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: for %s", (uint8_t *)v9, 0x16u);
  }
  BOOL v5 = dword_1015716C8;
  do
  {
    int v6 = *v5;
    if (*v5 == a2 || anyContextType())
    {
      memset(v9, 0, sizeof(v9));
      sub_100DA1880(v9, *(const void **)(a1 + 24 * v6 + 120), *(void *)(a1 + 24 * v6 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 24 * v6 + 128) - *(void *)(a1 + 24 * v6 + 120)) >> 3));
      uint64_t v7 = (void **)v9[0];
      BOOL v8 = (void **)v9[1];
      if (v9[0] != v9[1])
      {
        do
        {
          if (sub_100D8FD3C(a1, (uint64_t)v7)) {
            (*(void (**)(void *))(*v7[1] + 392))(v7[1]);
          }
          v7 += 3;
        }
        while (v7 != v8);
        uint64_t v7 = (void **)v9[0];
      }
      if (v7)
      {
        v9[1] = v7;
        operator delete(v7);
      }
    }
    ++v5;
  }
  while (v5 != dword_1015716D0);
}

void sub_100D9D4C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10)
{
}

void sub_100D9D4E4(uint64_t a1, int a2)
{
}

uint64_t sub_100D9D4EC(uint64_t a1, uint64_t a2)
{
  if (validContextType())
  {
    uint64_t v4 = a1 + 24 * (int)a2;
    uint64_t v5 = *(void *)(v4 + 120);
    uint64_t v6 = *(void *)(v4 + 128);
    if (v5 == v6) {
      return 2;
    }
    uint64_t v7 = 2;
    while (1)
    {
      if (*(unsigned char *)(v5 + 16))
      {
        uint64_t v8 = *(void *)(v5 + 8);
        sub_10003E168(buf, (void *)(a1 + 32));
        if (*(void *)buf) {
          uint64_t v9 = *(void *)buf + 24;
        }
        else {
          uint64_t v9 = 0;
        }
        uint64_t v20 = v9;
        uint64_t v21 = *(std::__shared_weak_count **)&buf[8];
        *(void *)long long buf = 0;
        *(void *)&uint8_t buf[8] = 0;
        uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v8 + 304))(v8, a2, &v20);
        if (v21) {
          sub_10004D2C8(v21);
        }
        if (*(void *)&buf[8]) {
          sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
        }
        if (v10 != v7)
        {
          if (validContextType())
          {
            if (validContextType())
            {
              uint64_t v16 = *(NSObject **)(a1 + 64);
              if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v18 = asString();
                uint64_t v19 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)&uint8_t buf[4] = "getFailureFallbackType";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v18;
                __int16 v23 = 2080;
                uint64_t v24 = v19;
                long long v12 = "#E %s: Conflicting fallback types: %s and %s";
                uint64_t v13 = v16;
                uint32_t v14 = 32;
LABEL_21:
                _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, v12, buf, v14);
              }
              return 2;
            }
          }
          else
          {
            uint64_t v7 = v10;
          }
        }
      }
      v5 += 24;
      if (v5 == v6) {
        return v7;
      }
    }
  }
  uint64_t v11 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "getFailureFallbackType";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    long long v12 = "#E %s: wrong context type: %s";
    uint64_t v13 = v11;
    uint32_t v14 = 22;
    goto LABEL_21;
  }
  return 2;
}

void sub_100D9D724(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9D750(PersonalitySpecificImpl *a1, uint64_t a2, int a3, char a4)
{
  if ((a4 & 1) != 0 || a2 == 1 && a3 == 95)
  {
    uint64_t v7 = (char *)a1 + (int)a2;
    if (!v7[348])
    {
      uint64_t v8 = v7 + 348;
      uint64_t v9 = *((void *)a1 + 8);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315394;
        *(void *)&uint8_t buf[4] = "checkFatalBlockers";
        __int16 v25 = 2080;
        uint64_t v26 = asString();
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: iWLAN ActivationBlocker set for error code %s", buf, 0x16u);
      }
      unsigned char *v8 = 1;
      *((_DWORD *)a1 + (int)a2 + 88) = a3;
      (*(void (**)(PersonalitySpecificImpl *, uint64_t))(*(void *)a1 + 848))(a1, a2);
      ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *((Registry **)a1 + 9));
      long long v12 = ServiceMap;
      if (v13 < 0)
      {
        uint32_t v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v15 = 5381;
        do
        {
          uint64_t v13 = v15;
          unsigned int v16 = *v14++;
          uint64_t v15 = (33 * v15) ^ v16;
        }
        while (v16);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long buf = v13;
      uint64_t v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)buf);
      if (v17)
      {
        uint64_t v19 = v17[3];
        uint64_t v18 = (std::__shared_weak_count *)v17[4];
        if (v18)
        {
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v12);
          atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v18);
          char v20 = 0;
          if (!v19)
          {
LABEL_18:
            if ((v20 & 1) == 0) {
              sub_10004D2C8(v18);
            }
            return;
          }
LABEL_16:
          uint64_t v21 = PersonalitySpecificImpl::simSlot(a1);
          sub_100058DB0(__p, "checkFatalBlockers");
          (*(void (**)(uint64_t, uint64_t, void **, void))(*(void *)v19 + 1096))(v19, v21, __p, 0);
          if (v23 < 0) {
            operator delete(__p[0]);
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v19 = 0;
      }
      std::mutex::unlock(v12);
      uint64_t v18 = 0;
      char v20 = 1;
      if (!v19) {
        goto LABEL_18;
      }
      goto LABEL_16;
    }
  }
}

void sub_100D9D9A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9D9F0(uint64_t a1, uint64_t a2, int a3, char a4)
{
}

uint64_t sub_100D9D9F8(uint64_t a1, int a2, uint64_t a3)
{
  if ((validContextType() & 1) == 0)
  {
    uint64_t v10 = *(NSObject **)(a1 + 64);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v11) {
      return result;
    }
    int v12 = 136315394;
    uint64_t v13 = "resetFatalActivationBlockers";
    __int16 v14 = 2080;
    uint64_t v15 = asString();
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v12, 0x16u);
    return 0;
  }
  uint64_t v6 = a1 + a2;
  if (!*(unsigned char *)(v6 + 348)) {
    return 0;
  }
  uint64_t v7 = (unsigned char *)(v6 + 348);
  uint64_t v8 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v12 = 136316674;
    uint64_t v13 = "resetFatalActivationBlockers";
    __int16 v14 = 2080;
    uint64_t v15 = a3;
    __int16 v16 = 2080;
    uint64_t v17 = asString();
    __int16 v18 = 2080;
    uint64_t v19 = asStringBool(1);
    __int16 v20 = 2080;
    uint64_t v21 = asStringBool(0);
    __int16 v22 = 2080;
    uint64_t v23 = asString();
    __int16 v24 = 2080;
    uint64_t v25 = asString();
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: %s: ActivationBlocker for %s: change FatalActivationBlocker flag: %s -> %s, cause %s -> %s", (uint8_t *)&v12, 0x48u);
  }
  *uint64_t v7 = 0;
  *(_DWORD *)(a1 + 4 * a2 + 352) = 0;
  return 1;
}

uint64_t sub_100D9DBD8(uint64_t a1, int a2, uint64_t a3)
{
  return sub_100D9D9F8(a1 - 24, a2, a3);
}

uint64_t sub_100D9DBE0(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, BOOL a6)
{
  uint64_t v9 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316418;
    *(void *)&uint8_t buf[4] = "handleDataContextActivateError_Async";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    __int16 v61 = 1024;
    *(_DWORD *)uint64_t v62 = a3;
    *(_WORD *)&v62[4] = 2080;
    *(void *)&v62[6] = asString();
    *(_WORD *)&v62[14] = 1024;
    *(_DWORD *)&v62[16] = a4;
    __int16 v63 = 2080;
    uint64_t v64 = asStringBool(a6);
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: ct=%s, errCode=%d (%s), rawCode=%d, toRetry = %s", buf, 0x36u);
  }
  unsigned int v57 = a2;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *(Registry **)(a1 + 72));
  int v12 = ServiceMap;
  if (v13 < 0)
  {
    __int16 v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v13;
  uint64_t v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)buf);
  uint64_t v18 = a2;
  if (v17)
  {
    uint64_t v20 = v17[3];
    uint64_t v19 = (std::__shared_weak_count *)v17[4];
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v12);
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v19);
      char v21 = 0;
      if (!v20) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  std::mutex::unlock(v12);
  uint64_t v19 = 0;
  char v21 = 1;
  if (!v20) {
    goto LABEL_16;
  }
LABEL_12:
  uint64_t v22 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  uint64_t v23 = *(std::__shared_weak_count **)(a1 + 272);
  uint64_t v58 = *(void *)(a1 + 264);
  int v59 = v23;
  if (v23) {
    atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t, void, uint64_t *, void))(*(void *)v20 + 160))(v20, v22, a2, &v58, a4);
  if (v59) {
    sub_10004D2C8(v59);
  }
LABEL_16:
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  int v24 = a2;
  if (!a6)
  {
    int v24 = sub_100D9D4EC(a1, a2);
    uint64_t v18 = a2;
  }
  (*(void (**)(uint64_t, uint64_t, void, void))(*(void *)a1 + 856))(a1, v18, a3, 0);
  int valid = validContextType();
  uint64_t v26 = a2;
  int v27 = v24 != a2 || a6;
  if ((valid & v27 & 1) == 0)
  {
    sub_100D9E3B0((void *)a1, a2, a3, 0, a4, a5);
    return a6;
  }
  char v28 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = asString();
    uint64_t v30 = asString();
    *(_DWORD *)long long buf = 136315650;
    *(void *)&uint8_t buf[4] = "handleDataContextActivateError_Async";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v29;
    __int16 v61 = 2080;
    *(void *)uint64_t v62 = v30;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s: Activate %s failed, will try on %s", buf, 0x20u);
    uint64_t v26 = a2;
  }
  if (!a6)
  {
    if ((validContextType() & 1) == 0
      || (uint64_t v36 = a1 + 24 * (int)a2, v37 = *(void *)(v36 + 120), v54 = *(void *)(v36 + 128), v37 == v54))
    {
      sub_100D9E3B0((void *)a1, a2, a3, 0, a4, a5);
    }
    else
    {
      int v38 = 0;
      uint64_t v39 = a1 + 24 * v24;
      uint64_t v51 = (uint64_t *)(v39 + 128);
      uint64_t v52 = (uint64_t *)(v39 + 120);
      do
      {
        if (*(unsigned char *)(v37 + 16) && validContextType())
        {
          uint64_t v40 = *v52;
          uint64_t v41 = *v51;
          while (v40 != v41)
          {
            uint64_t v42 = *(void *)(v40 + 8);
            if (v42 == *(void *)(v37 + 8))
            {
              *(unsigned char *)(v37 + 16) = 0;
              *(unsigned char *)(v40 + 16) = 1;
              std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = *(NSObject **)(a1 + 64);
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                (*(void (**)(uint64_t))(*(void *)v42 + 200))(v42);
                uint64_t v44 = asString();
                uint64_t v45 = asString();
                uint64_t v46 = asString();
                *(_DWORD *)long long buf = 136315906;
                *(void *)&uint8_t buf[4] = "handleDataContextActivateError_Async";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v44;
                __int16 v61 = 2080;
                *(void *)uint64_t v62 = v45;
                *(_WORD *)&v62[8] = 2080;
                *(void *)&v62[10] = v46;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I %s: Switching observer %s from %s to %s (change states)", buf, 0x2Au);
                std::chrono::duration<long long, std::ratio<1, 1000000000>>::rep v43 = *(NSObject **)(a1 + 64);
              }
              if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v47 = asString();
                (*(void (**)(void))(**(void **)(v37 + 8) + 200))(*(void *)(v37 + 8));
                uint64_t v48 = asString();
                uint64_t v49 = asStringBool(1);
                *(_DWORD *)long long buf = 136315906;
                *(void *)&uint8_t buf[4] = "handleDataContextActivateError_Async";
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = v47;
                __int16 v61 = 2080;
                *(void *)uint64_t v62 = v48;
                *(_WORD *)&v62[8] = 2080;
                *(void *)&v62[10] = v49;
                _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I %s:  (change states) on %s: connection %s becomes current %s (retry)", buf, 0x2Au);
              }
              ++v38;
            }
            v40 += 24;
          }
        }
        v37 += 24;
      }
      while (v37 != v54);
      sub_100D9E3B0((void *)a1, v57, a3, v38 != 0, a4, a5);
      if (v38) {
        goto LABEL_28;
      }
    }
    return 0;
  }
  (*(void (**)(uint64_t, uint64_t, void))(*(void *)a1 + 1208))(a1, v26, 0);
LABEL_28:
  uint64_t v31 = *(void *)(a1 + 112);
  if (v31)
  {
    __int16 v32 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v33 = asString();
      uint64_t v34 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "handleDataContextActivateError_Async";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v33;
      __int16 v61 = 2080;
      *(void *)uint64_t v62 = v34;
      _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I %s:  with %s, scheduling retryType %s", buf, 0x20u);
      uint64_t v31 = *(void *)(a1 + 112);
    }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v31 + 344))(v31, 1);
    sub_10003E168(buf, (void *)(a1 + 32));
    uint64_t v35 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v35);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_10003E168(buf, (void *)(a1 + 32));
    operator new();
  }
  return 1;
}

void sub_100D9E364(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9E3B0(void *a1, uint64_t a2, uint64_t a3, BOOL a4, unsigned int a5, unsigned int a6)
{
  uint64_t v10 = a1[8];
  if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136316162;
    *(void *)&uint8_t buf[4] = "handleDataActivationError_Async";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    __int16 v39 = 1024;
    *(_DWORD *)uint64_t v40 = a3;
    *(_WORD *)&v40[4] = 2080;
    *(void *)&v40[6] = asString();
    __int16 v41 = 2080;
    uint64_t v42 = asStringBool(a4);
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s: ct=%s, errCode=%d (%s), fallback=%s", buf, 0x30u);
  }
  if (validContextType())
  {
    (*(void (**)(void *, uint64_t, void))(*a1 + 1208))(a1, a2, 0);
    uint64_t v35 = 0;
    uint64_t v36 = 0;
    uint64_t v37 = 0;
    sub_100DA1880(&v35, (const void *)a1[3 * (int)a2 + 15], a1[3 * (int)a2 + 16], 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(a1[3 * (int)a2 + 16] - a1[3 * (int)a2 + 15]) >> 3));
    uint64_t v11 = otherContextType();
    uint64_t v12 = a1[14];
    if (v12) {
      char v13 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v12 + 312))(v12, v11);
    }
    else {
      char v13 = 0;
    }
    (*(void (**)(void *, uint64_t, uint64_t, void))(*a1 + 856))(a1, a2, a3, 0);
    uint64_t v17 = v35;
    uint64_t v16 = v36;
    if (v35 != v36)
    {
      while (1)
      {
        if (*(unsigned char *)(v17 + 16))
        {
          if ((v13 & 1) == 0)
          {
            uint64_t v18 = a1[8];
            if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
            {
              (*(void (**)(void))(**(void **)(v17 + 8) + 200))(*(void *)(v17 + 8));
              uint64_t v19 = asString();
              uint64_t v20 = asString();
              *(_DWORD *)long long buf = 136315650;
              *(void *)&uint8_t buf[4] = "handleDataActivationError_Async";
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v19;
              __int16 v39 = 2080;
              *(void *)uint64_t v40 = v20;
              _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: Failing observer %s on %s", buf, 0x20u);
            }
            uint64_t v21 = *(void *)(v17 + 8);
            sub_10003E168(buf, a1 + 4);
            if (*(void *)buf) {
              uint64_t v22 = *(void *)buf + 24;
            }
            else {
              uint64_t v22 = 0;
            }
            uint64_t v33 = v22;
            uint64_t v34 = *(std::__shared_weak_count **)&buf[8];
            *(void *)long long buf = 0;
            *(void *)&uint8_t buf[8] = 0;
            (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void, void))(*(void *)v21 + 56))(v21, a2, &v33, a3, a5, a6);
            uint64_t v23 = v34;
            if (v34) {
              goto LABEL_18;
            }
            goto LABEL_19;
          }
        }
        else if (!a4 && sub_100D8FD3C((uint64_t)a1, v17))
        {
          int v24 = a1[8];
          if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
          {
            (*(void (**)(void))(**(void **)(v17 + 8) + 200))(*(void *)(v17 + 8));
            uint64_t v25 = asString();
            uint64_t v26 = asString();
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "handleDataActivationError_Async";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v25;
            __int16 v39 = 2080;
            *(void *)uint64_t v40 = v26;
            _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Failing handover for observer %s on %s", buf, 0x20u);
          }
          uint64_t v27 = *(void *)(v17 + 8);
          sub_10003E168(buf, a1 + 4);
          if (*(void *)buf) {
            uint64_t v28 = *(void *)buf + 24;
          }
          else {
            uint64_t v28 = 0;
          }
          uint64_t v31 = v28;
          __int16 v32 = *(std::__shared_weak_count **)&buf[8];
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
          (*(void (**)(uint64_t, uint64_t, uint64_t *, uint64_t, void))(*(void *)v27 + 296))(v27, a2, &v31, a3, a5);
          uint64_t v23 = v32;
          if (!v32) {
            goto LABEL_19;
          }
LABEL_18:
          sub_10004D2C8(v23);
LABEL_19:
          if (*(void *)&buf[8]) {
            sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
          }
        }
        v17 += 24;
        if (v17 == v16)
        {
          uint64_t v17 = v35;
          break;
        }
      }
    }
    if (v17)
    {
      uint64_t v36 = v17;
      operator delete((void *)v17);
    }
  }
  else
  {
    __int16 v14 = a1[8];
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v15 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "handleDataActivationError_Async";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", buf, 0x16u);
    }
  }
}

void sub_100D9E8AC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a13) {
    sub_10004D2C8(a13);
  }
  if (a20) {
    sub_10004D2C8(a20);
  }
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9E914(void *a1)
{
  uint64_t v1 = a1[14];
  if (v1)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v3);
    uint64_t v1 = (*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v1 + 384))(v1, &v3);
    if (v4) {
      sub_10004D2C8(v4);
    }
  }
  return v1;
}

void sub_100D9E9BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9E9D4(uint64_t a1)
{
  return sub_100D9E914((void *)(a1 - 24));
}

uint64_t sub_100D9E9DC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 112);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

uint64_t sub_100D9EA14(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 88);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 392))();
  }
  return result;
}

void sub_100D9EA4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = dword_1015716C8;
  do
  {
    uint64_t v11 = a1 + 24 * *v10;
    uint64_t v14 = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    sub_100DA1880(&v14, *(const void **)(v11 + 120), *(void *)(v11 + 128), 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v11 + 128) - *(void *)(v11 + 120)) >> 3));
    uint64_t v12 = v14;
    uint64_t v13 = v15;
    if (v14 != v15)
    {
      do
      {
        if (*(unsigned char *)(v12 + 16)) {
          (*(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(**(void **)(v12 + 8) + 368))(*(void *)(v12 + 8), a2, a3, a4, a5);
        }
        v12 += 24;
      }
      while (v12 != v13);
      uint64_t v12 = v14;
    }
    if (v12)
    {
      uint64_t v15 = v12;
      operator delete((void *)v12);
    }
    ++v10;
  }
  while (v10 != dword_1015716D0);
}

void sub_100D9EB68(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9EB84(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
}

void sub_100D9EB8C(void *a1, uint64_t a2, uint64_t a3)
{
  if (validContextType())
  {
    uint64_t v6 = &a1[3 * (int)a3];
    uint64_t v7 = v6[15];
    uint64_t v8 = v6[16];
    if (v7 == v8) {
      goto LABEL_12;
    }
    char v9 = 0;
    do
    {
      if (*(unsigned char *)(v7 + 16)) {
        BOOL v10 = *(void *)(v7 + 8) == a2;
      }
      else {
        BOOL v10 = 1;
      }
      char v11 = !v10;
      v9 |= v11;
      v7 += 24;
    }
    while (v7 != v8);
    if ((v9 & 1) == 0)
    {
LABEL_12:
      uint64_t v12 = *(void (**)(void *, uint64_t, void))(*a1 + 1208);
      v12(a1, a3, 0);
    }
  }
  else
  {
    uint64_t v13 = a1[8];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      int v14 = 136315394;
      uint64_t v15 = "tryToSetDataSettingsStateToIdle";
      __int16 v16 = 2080;
      uint64_t v17 = asString();
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v14, 0x16u);
    }
  }
}

uint64_t sub_100D9ED14(uint64_t a1, unsigned int a2, unsigned int a3, unsigned int a4, unsigned int a5, BOOL a6)
{
  return sub_100D9DBE0(a1 - 24, a2, a3, a4, a5, a6);
}

void sub_100D9ED1C(void *a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = a1[8];
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = 136315650;
    char v9 = "handleDataActivateResult_Async";
    __int16 v10 = 2080;
    uint64_t v11 = asString();
    __int16 v12 = 1024;
    int v13 = a3;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: (impl): ct=%s, result=%d", (uint8_t *)&v8, 0x1Cu);
  }
  if (a3 == 2) {
    unsigned int v7 = -1;
  }
  else {
    unsigned int v7 = a3;
  }
  if (v7 >= 0xFFFFFFFE)
  {
    sub_100D9E3B0(a1, a2, HIDWORD(a3), 0, 0, 0);
  }
  else if (v7 == 1)
  {
    (*(void (**)(void *, uint64_t))(*a1 + 448))(a1, a2);
  }
  else if (!v7)
  {
    (*(void (**)(void *, uint64_t, uint64_t))(*a1 + 1208))(a1, a2, 2);
  }
}

uint64_t sub_100D9EEA0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 120);
  uint64_t v2 = *(void *)(a1 + 128);
  uint64_t v3 = 1;
  while (v1 != v2)
  {
    if (*(unsigned char *)(v1 + 16))
    {
      int v4 = (*(uint64_t (**)(void))(**(void **)(v1 + 8) + 408))(*(void *)(v1 + 8));
      if (v4 <= (int)v3) {
        uint64_t v3 = v3;
      }
      else {
        uint64_t v3 = v4;
      }
    }
    v1 += 24;
  }
  return v3;
}

uint64_t sub_100D9EF20(uint64_t a1)
{
  return sub_100D9EEA0(a1 - 24);
}

uint64_t sub_100D9EF28(void *a1, uint64_t a2)
{
  uint64_t v2 = a1[14];
  if (!v2) {
    return 0;
  }
  (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v6);
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v2 + 408))(v2, &v6, a2);
  if (v7) {
    sub_10004D2C8(v7);
  }
  return v4;
}

void sub_100D9EFE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100D9EFF8(uint64_t a1, uint64_t a2)
{
  return sub_100D9EF28((void *)(a1 - 24), a2);
}

uint64_t *sub_100D9F000@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result = (uint64_t *)validContextType();
  if (result)
  {
    return sub_100DA248C(a3, a1 + 24 * a2 + 392);
  }
  else
  {
    a3[2] = 0;
    a3[1] = 0;
    *a3 = (uint64_t)(a3 + 1);
  }
  return result;
}

uint64_t *sub_100D9F07C@<X0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  return sub_100D9F000(a1 - 24, a2, a3);
}

uint64_t *sub_100D9F084(uint64_t a1, int a2, unint64_t *a3)
{
  uint64_t result = (uint64_t *)validContextType();
  if (result)
  {
    unint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a3;
    return sub_100112BAC((uint64_t *)(a1 + 24 * a2 + 392), v7, v9, v8);
  }
  return result;
}

uint64_t *sub_100D9F0F4(uint64_t a1, int a2, unint64_t *a3)
{
  uint64_t result = (uint64_t *)validContextType();
  if (result)
  {
    unint64_t v7 = *a3;
    uint64_t v8 = a3[1];
    uint64_t v9 = *a3;
    return sub_100112BAC((uint64_t *)(a1 + 24 * a2 + 368), v7, v9, v8);
  }
  return result;
}

void sub_100D9F164(uint64_t a1, int a2)
{
  if (validContextType())
  {
    uint64_t v4 = a1 + 24 * a2;
    sub_100103DF0(v4 + 392, *(void **)(v4 + 400));
    *(void *)(v4 + 400) = 0;
    *(void *)(v4 + 408) = 0;
    *(void *)(v4 + 392) = v4 + 400;
  }
}

void sub_100D9F1B4(uint64_t a1, int a2)
{
}

double sub_100D9F1BC@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  if (validContextType())
  {
    uint64_t v6 = a1 + 56 * a2;
    long long v7 = *(_OWORD *)(v6 + 456);
    long long v8 = *(_OWORD *)(v6 + 472);
    *(_OWORD *)a3 = v7;
    *(_OWORD *)(a3 + 16) = v8;
    uint64_t v9 = *(void *)(v6 + 496);
    *(void *)(a3 + 32) = *(void *)(v6 + 488);
    *(void *)(a3 + 40) = v9;
    uint64_t v10 = *(void *)(v6 + 504);
    *(void *)(a3 + 48) = v10;
    if (v10) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
    }
  }
  else
  {
    *(void *)&long long v7 = 0;
    *(_OWORD *)a3 = 0u;
    *(_OWORD *)(a3 + 16) = 0u;
    *(void *)(a3 + 8) = &unk_10165244B;
    *(void *)(a3 + 16) = &unk_10165244B;
    *(_DWORD *)(a3 + 32) = 2;
    *(void *)(a3 + 44) = 0;
    *(void *)(a3 + 36) = 0;
    *(_DWORD *)(a3 + 52) = 0;
  }
  return *(double *)&v7;
}

double sub_100D9F258@<D0>(uint64_t a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  return sub_100D9F1BC(a1 - 24, a2, a3);
}

void sub_100D9F260(uint64_t a1, int a2, long long *a3)
{
  if (validContextType())
  {
    if (*(_DWORD *)a3 == 101 && *(_DWORD *)(a1 + 56 * a2 + 456))
    {
      uint64_t v6 = *(NSObject **)(a1 + 64);
      if (!os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT)) {
        return;
      }
      int v16 = 136315394;
      uint64_t v17 = "setLastActivateError";
      __int16 v18 = 2080;
      uint64_t v19 = asString();
      long long v7 = "#I %s: Keep the old error: %s";
      goto LABEL_12;
    }
    uint64_t v8 = a1 + 56 * a2;
    long long v9 = *a3;
    long long v10 = a3[1];
    *(void *)(v8 + 488) = *((void *)a3 + 4);
    *(_OWORD *)(v8 + 456) = v9;
    *(_OWORD *)(v8 + 472) = v10;
    uint64_t v11 = (void *)(v8 + 496);
    uint64_t v13 = *((void *)a3 + 5);
    uint64_t v12 = *((void *)a3 + 6);
    if (v12) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
    }
    void *v11 = v13;
    uint64_t v14 = a1 + 56 * a2;
    uint64_t v15 = *(std::__shared_weak_count **)(v14 + 504);
    *(void *)(v14 + 504) = v12;
    if (v15) {
      sub_10004D2C8(v15);
    }
    uint64_t v6 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      int v16 = 136315394;
      uint64_t v17 = "setLastActivateError";
      __int16 v18 = 2080;
      uint64_t v19 = asString();
      long long v7 = "#I %s: Use the new error: %s";
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, v7, (uint8_t *)&v16, 0x16u);
    }
  }
}

void sub_100D9F3F8(uint64_t a1, int a2, long long *a3)
{
}

uint64_t sub_100D9F400(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    ++*(_DWORD *)(a1 + 4 * a2 + 448);
  }
  return result;
}

uint64_t sub_100D9F440(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    ++*(_DWORD *)(a1 + 4 * a2 + 424);
  }
  return result;
}

void sub_100D9F480(uint64_t a1, uint64_t a2)
{
  if (validContextType())
  {
    uint64_t v4 = dword_1015716C8;
    do
    {
      uint64_t v5 = a1 + 24 * *v4;
      uint64_t v6 = *(void *)(v5 + 120);
      uint64_t v7 = *(void *)(v5 + 128);
      while (v6 != v7)
      {
        if (*(unsigned char *)(v6 + 16)) {
          (*(void (**)(void, uint64_t))(**(void **)(v6 + 8) + 424))(*(void *)(v6 + 8), a2);
        }
        v6 += 24;
      }
      ++v4;
    }
    while (v4 != dword_1015716D0);
  }
  else
  {
    uint64_t v8 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      int v9 = 136315394;
      long long v10 = "updateAgentOnHandover";
      __int16 v11 = 2080;
      uint64_t v12 = asString();
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#E %s: wrong context type: %s", (uint8_t *)&v9, 0x16u);
    }
  }
}

void sub_100D9F5DC(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100D9F5E4(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    return *(unsigned int *)(a1 + 4 * a2 + 448);
  }
  return result;
}

uint64_t sub_100D9F61C(uint64_t a1, int a2)
{
  uint64_t result = validContextType();
  if (result) {
    return *(unsigned int *)(a1 + 4 * a2 + 424);
  }
  return result;
}

uint64_t sub_100D9F654@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 584);
  *a2 = *(void *)(result + 576);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100D9F674@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 560);
  *a2 = *(void *)(result + 552);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100D9F694(uint64_t a1, int a2)
{
  (*(void (**)(uint64_t))(*(void *)a1 + 840))(a1);
  if (a2)
  {
    uint64_t v4 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Resetting throttle counter", v6, 2u);
    }
    for (uint64_t i = 0; i != 2; ++i)
      *(_DWORD *)(a1 + 4 * dword_1015716D0[i] + 568) = 0;
    *(_DWORD *)(a1 + 592) = 2;
  }
}

void sub_100D9F758(uint64_t a1, int a2)
{
}

void sub_100D9F760(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = "clearThrottling";
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I %s: Clearing throttle timer", buf, 0xCu);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 584);
  *(_OWORD *)(a1 + 576) = 0u;
  if (v4) {
    sub_10004D2C8(v4);
  }
  *(void *)(a1 + 448) = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *(Registry **)(a1 + 72));
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  __int16 v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (!v11)
  {
    uint64_t v13 = 0;
LABEL_13:
    std::mutex::unlock(v6);
    uint64_t v12 = 0;
    char v14 = 1;
    if (!v13) {
      goto LABEL_15;
    }
    goto LABEL_14;
  }
  uint64_t v13 = v11[3];
  uint64_t v12 = (std::__shared_weak_count *)v11[4];
  if (!v12) {
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v6);
  atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v12);
  char v14 = 0;
  if (!v13)
  {
LABEL_15:
    if (v14) {
      return;
    }
    goto LABEL_16;
  }
LABEL_14:
  uint64_t v15 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  sub_100058DB0(__p, "throttle timeout ends");
  (*(void (**)(uint64_t, uint64_t, void **, void))(*(void *)v13 + 1096))(v13, v15, __p, 0);
  if ((v17 & 0x80000000) == 0) {
    goto LABEL_15;
  }
  operator delete(__p[0]);
  if (v14) {
    return;
  }
LABEL_16:
  sub_10004D2C8(v12);
}

void sub_100D9F948(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100D9F990(uint64_t a1)
{
}

BOOL sub_100D9F998(void *a1, uint64_t a2, uint64_t a3)
{
  (*(void (**)(_OWORD *__return_ptr))(*a1 + 768))(v9);
  long long v5 = v9[1];
  *(_OWORD *)a3 = v9[0];
  *(_OWORD *)(a3 + 16) = v5;
  *(void *)(a3 + 32) = v10;
  long long v6 = v11;
  long long v11 = 0uLL;
  uint64_t v7 = *(std::__shared_weak_count **)(a3 + 48);
  *(_OWORD *)(a3 + 40) = v6;
  if (v7)
  {
    sub_10004D2C8(v7);
    if (*((void *)&v11 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v11 + 1));
    }
  }
  return a1[72] != 0;
}

BOOL sub_100D9FA38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100D9F998((void *)(a1 - 24), a2, a3);
}

void sub_100D9FA40(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    v5[0] = 67109120;
    v5[1] = a2;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I set fBbBackOffThrottlingTimerValue to %d", (uint8_t *)v5, 8u);
  }
  *(_DWORD *)(a1 + 728) = a2;
}

void sub_100D9FAEC(uint64_t a1, int a2)
{
}

void sub_100D9FAF4(uint64_t a1, int a2, unsigned int a3, unsigned char *a4)
{
  uint64_t v8 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    int v9 = *(_DWORD *)(a1 + 4 * a3 + 568);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)&uint8_t buf[4] = a3;
    *(_WORD *)&uint8_t buf[8] = 1024;
    *(_DWORD *)&buf[10] = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I ThrottleType= %d. index=%d", buf, 0xEu);
  }
  if (!validContextType())
  {
    if (a3 == 2) {
      return;
    }
LABEL_18:
    if (*(void *)(a1 + 576)) {
      return;
    }
    *a4 = 1;
    if (a3 == 3)
    {
      int v14 = *(_DWORD *)(a1 + 728);
      if (v14)
      {
        uint64_t v15 = *(NSObject **)(a1 + 64);
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v14;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I use BB's backoff timer of %d + 1 sec", buf, 8u);
          int v14 = *(_DWORD *)(a1 + 728);
          unsigned int v16 = *(_DWORD *)(a1 + 580);
        }
        else
        {
          unsigned int v16 = 0;
        }
        char v17 = (std::__shared_weak_count *)(v14 + 1);
        a3 = 3;
        *(_DWORD *)(a1 + 592) = 3;
        if (v16 <= 5) {
          goto LABEL_39;
        }
        uint64_t v23 = (_DWORD *)(a1 + 580);
        goto LABEL_38;
      }
      unsigned int v22 = *(_DWORD *)(a1 + 592);
      if ((v22 & 0xFFFFFFFE) == 2) {
        uint64_t v18 = 1;
      }
      else {
        uint64_t v18 = v22;
      }
      char v17 = sub_100DA0048(a1, v18, 0x100000001);
      unsigned int v20 = *(_DWORD *)(a1 + 4 * v18 + 568);
      a3 = v18;
    }
    else
    {
      char v17 = sub_100DA0048(a1, a3, 0);
      uint64_t v18 = a3;
      uint64_t v19 = a1 + 4 * a3;
      unsigned int v20 = *(_DWORD *)(v19 + 568) + 1;
      *(_DWORD *)(v19 + 568) = v20;
    }
    *(_DWORD *)(a1 + 592) = a3;
    if (v20 > 5)
    {
      uint64_t v23 = (_DWORD *)(a1 + 4 * v18 + 568);
      if (a3 != 1)
      {
LABEL_38:
        *uint64_t v23 = 5;
        goto LABEL_39;
      }
      *uint64_t v23 = 0;
    }
LABEL_39:
    int v24 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "handleErrorThrottling";
      *(_WORD *)&unsigned char buf[12] = 1024;
      *(_DWORD *)&buf[14] = a3;
      *(_WORD *)&buf[18] = 2048;
      *(void *)&buf[20] = v17;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s: Throttling Settings activation error type %d. Next timer fire in %lld sec", buf, 0x1Cu);
    }
    if (v17)
    {
      sub_10003E168(buf, (void *)(a1 + 32));
      uint64_t v26 = *(void *)buf;
      uint64_t v25 = *(std::__shared_weak_count **)&buf[8];
      if (*(void *)&buf[8])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
        sub_10004D2C8(v25);
      }
      Registry::getTimerService((uint64_t *)buf, *(Registry **)(a1 + 72));
      uint64_t v27 = *(void *)buf;
      sub_100058DB0(__p, "throttle timeout");
      uint64_t v28 = *(NSObject **)(a1 + 48);
      dispatch_object_t object = v28;
      if (v28) {
        dispatch_retain(v28);
      }
      v30[0] = _NSConcreteStackBlock;
      v30[1] = 1174405120;
      v30[2] = sub_100DA0444;
      v30[3] = &unk_101A58158;
      v30[4] = a1;
      v30[5] = v26;
      uint64_t v31 = v25;
      if (v25) {
        atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      }
      aBlock = _Block_copy(v30);
      sub_100118A44(v27, (uint64_t)__p, 0, 1000000 * (void)v17, &object, &aBlock);
      sub_1004DC2E0((void *)(a1 + 576), (uint64_t *)v36);
      uint64_t v29 = *(void *)v36;
      *(void *)uint64_t v36 = 0;
      if (v29) {
        (*(void (**)(uint64_t))(*(void *)v29 + 8))(v29);
      }
      if (aBlock) {
        _Block_release(aBlock);
      }
      if (object) {
        dispatch_release(object);
      }
      if (v35 < 0) {
        operator delete(__p[0]);
      }
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (v31) {
        std::__shared_weak_count::__release_weak(v31);
      }
      if (v25) {
        std::__shared_weak_count::__release_weak(v25);
      }
    }
    return;
  }
  memset(buf, 0, 24);
  sub_100D932C8((uint64_t)buf, a1, a2);
  uint64_t v10 = *(void **)buf;
  if (a3 != 1 || *(void *)buf == *(void *)&buf[8])
  {
LABEL_9:
    char v12 = 0;
  }
  else
  {
    uint64_t v11 = *(void *)buf;
    while ((*(unsigned char *)(v11 + 7) & 1) == 0)
    {
      v11 += 12;
      if (v11 == *(void *)&buf[8]) {
        goto LABEL_9;
      }
    }
    uint64_t v21 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)uint64_t v36 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I internal throttling ignored", v36, 2u);
      char v12 = 1;
      uint64_t v10 = *(void **)buf;
    }
    else
    {
      char v12 = 1;
    }
  }
  if (v10)
  {
    *(void *)&uint8_t buf[8] = v10;
    operator delete(v10);
  }
  if (a3 == 2) {
    char v13 = 1;
  }
  else {
    char v13 = v12;
  }
  if ((v13 & 1) == 0) {
    goto LABEL_18;
  }
}

void sub_100D9FF88(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15, void *aBlock, dispatch_object_t object, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

std::__shared_weak_count *sub_100DA0048(uint64_t a1, unsigned int a2, uint64_t a3)
{
  unsigned int v3 = a3;
  uint64_t v6 = __stack_chk_guard;
  if ((a3 & 0xFF00000000) != 0)
  {
    if (a2) {
      goto LABEL_36;
    }
  }
  else
  {
    uint64_t v6 = a1 + 4 * a2;
    unsigned int v3 = *(_DWORD *)(v6 + 568);
    if (a2) {
      goto LABEL_36;
    }
  }
  uint64_t v33 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v6, *(Registry **)(a1 + 72));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)int v38 = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)v38);
  if (!v13)
  {
    uint64_t v15 = 0;
    goto LABEL_12;
  }
  uint64_t v15 = v13[3];
  int v14 = (std::__shared_weak_count *)v13[4];
  if (!v14)
  {
LABEL_12:
    std::mutex::unlock(v8);
    int v14 = 0;
    char v16 = 1;
    goto LABEL_13;
  }
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v8);
  atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v14);
  char v16 = 0;
LABEL_13:
  uint64_t v17 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v15 + 96))(v31, v15, v17, 1, @"NetworkErrorsThrottlingSequence", 0, 0);
  sub_100056248(&v33, (CFTypeRef *)v31);
  sub_1000577C4((const void **)v31);
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  if (v33) {
    uint64_t v18 = sub_1000810B8;
  }
  else {
    uint64_t v18 = 0;
  }
  if (v18)
  {
    memset(v38, 0, sizeof(v38));
    uint64_t v39 = 0;
    ctu::cf::assign();
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v38;
    uint64_t v32 = v39;
    memset(v38, 0, sizeof(v38));
    uint64_t v39 = 0;
    DataUtils::tokenizeWithBasicDelimiters();
    uint64_t v20 = *(void *)v38;
    uint64_t v19 = *(void *)&v38[8];
    if (*(void *)&v38[8] != *(void *)v38)
    {
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v30 = 0;
      unint64_t v21 = *(void *)v38 + 24 * (v3 % (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)&v38[8] - *(void *)v38) >> 3)));
      if (*(char *)(v21 + 23) < 0)
      {
        sub_10004FC84(__p, *(void **)v21, *(void *)(v21 + 8));
      }
      else
      {
        long long v22 = *(_OWORD *)v21;
        uint64_t v30 = *(void *)(v21 + 16);
        *(_OWORD *)std::string __p = v22;
      }
      char v23 = HIBYTE(v30);
      if (v30 >= 0) {
        int v24 = __p;
      }
      else {
        int v24 = (void **)__p[0];
      }
      int v14 = (std::__shared_weak_count *)atoi((const char *)v24);
      uint64_t v25 = *(NSObject **)(a1 + 64);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109376;
        unsigned int v35 = v3;
        __int16 v36 = 2048;
        uint64_t v37 = v14;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I CB throttling seq index = %d, ret = %llu", buf, 0x12u);
        char v23 = HIBYTE(v30);
      }
      if (v23 < 0) {
        operator delete(__p[0]);
      }
    }
    __p[0] = v38;
    sub_100047F64((void ***)__p);
    if (SHIBYTE(v32) < 0) {
      operator delete(v31[0]);
    }
    if (v19 != v20)
    {
      sub_1000558F4(&v33);
      return v14;
    }
  }
  sub_1000558F4(&v33);
LABEL_36:
  int v26 = dword_1015716D8[6 * a2 + v3];
  int v14 = (std::__shared_weak_count *)v26;
  uint64_t v27 = *(NSObject **)(a1 + 64);
  if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)int v38 = 67109120;
    *(_DWORD *)&v38[4] = v26;
    _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I kPDPThrottleTimerInterval = %d", v38, 8u);
  }
  return v14;
}

void sub_100DA03B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, const void *a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  a9 = (void **)&a24;
  sub_100047F64(&a9);
  if (a18 < 0) {
    operator delete(a13);
  }
  sub_1000558F4(&a19);
  _Unwind_Resume(a1);
}

void sub_100DA0444(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      long long v5 = v4;
      if (a1[5]) {
        (*(void (**)(uint64_t))(*(void *)v3 + 840))(v3);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100DA04E0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DA04F4(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DA0510(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100DA0520(uint64_t a1, int a2, unsigned int a3, unsigned char *a4)
{
}

uint64_t sub_100DA0528(uint64_t a1)
{
  uint64_t v2 = &dword_1015716C8;
  while (2)
  {
    uint64_t v3 = a1 + 24 * *v2;
    uint64_t v4 = *(void *)(v3 + 120);
    uint64_t v5 = *(void *)(v3 + 128);
    while (v4 != v5)
    {
      if (*(unsigned char *)(v4 + 16))
      {
        uint64_t v6 = *(void *)(v4 + 8);
        if (v6)
        {
          if ((*(uint64_t (**)(uint64_t))(*(void *)v6 + 432))(v6)) {
            return 1;
          }
        }
      }
      v4 += 24;
    }
    if (++v2 != &dword_1015716D0) {
      continue;
    }
    break;
  }
  return 0;
}

uint64_t sub_100DA05E0(uint64_t a1)
{
  return sub_100DA0528(a1 - 24);
}

void sub_100DA05E8(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 64);
  uint64_t v86 = (os_log_t *)(a1 + 64);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)a1 + 48))(a1, 2);
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v89 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: ---------------- Settings: %s: -------------------", buf, 0xCu);
  }
  uint64_t v4 = *(void *)(a1 + 264);
  uint64_t v87 = a1;
  if (v4)
  {
    sub_100C97150(v4, v86);
  }
  else
  {
    uint64_t v5 = *v86;
    if (os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t No APN configured", buf, 2u);
    }
  }
  uint64_t v6 = *v86;
  if (os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
  {
    int v7 = *(_DWORD *)(a1 + 244);
    PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
    uint64_t v8 = subscriber::asString();
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)uint64_t v89 = v7;
    *(_WORD *)&v89[4] = 2080;
    *(void *)&v89[6] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fPriority = %u simSlot = %s", buf, 0x12u);
    uint64_t v6 = *(NSObject **)(a1 + 64);
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = *(void *)(a1 + 112);
    if (v9) {
      int v10 = (*(uint64_t (**)(uint64_t))(*(void *)v9 + 16))(v9);
    }
    else {
      int v10 = -1;
    }
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)uint64_t v89 = v10;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fDataActivator pdpId = %d", buf, 8u);
    uint64_t v6 = *v86;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v11 = asStringBool(*(unsigned char *)(a1 + 596));
    unsigned int v12 = v86;
    *(_DWORD *)long long buf = 136315138;
    *(void *)uint64_t v89 = v11;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fDetachingActivatorState = %s", buf, 0xCu);
    uint64_t v6 = *(NSObject **)(v87 + 64);
  }
  else
  {
    unsigned int v12 = v86;
  }
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t Context type states: {", buf, 2u);
  }
  for (uint64_t i = 0; i != 2; ++i)
  {
    uint64_t v14 = dword_1015716C8[i];
    uint64_t v15 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v16 = asString();
      uint64_t v17 = asString();
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v89 = v16;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v17;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t fState[%s] = %s", buf, 0x16u);
      uint64_t v15 = *(NSObject **)(v87 + 64);
    }
    int v18 = *(unsigned __int8 *)(v87 + 696 + 16 * v14 + 8);
    BOOL v19 = os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT);
    if (v18)
    {
      if (!v19) {
        continue;
      }
      uint64_t v20 = asString();
      uint64_t v21 = sub_100D9B080(v87, v14);
      *(_DWORD *)long long buf = 136315650;
      *(void *)uint64_t v89 = v20;
      *(_WORD *)&v89[8] = 2048;
      *(void *)&v89[10] = v21;
      *(_WORD *)&v89[18] = 2080;
      *(void *)&v89[20] = "seconds";
      long long v22 = v15;
      char v23 = "#I DATA:: fLastActivationStart[%s] is %lld %s old.";
      uint32_t v24 = 32;
    }
    else
    {
      if (!v19) {
        continue;
      }
      uint64_t v25 = asString();
      *(_DWORD *)long long buf = 136315138;
      *(void *)uint64_t v89 = v25;
      long long v22 = v15;
      char v23 = "#I DATA:: fLastActivationStart[%s] is empty";
      uint32_t v24 = 12;
    }
    _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, v23, buf, v24);
  }
  uint64_t v26 = 312;
  uint64_t v27 = v87;
  do
  {
    uint64_t v28 = *(void *)(v27 + v26);
    if (v28)
    {
      sub_1004FCAA8(v28, *v12);
      uint64_t v27 = v87;
    }
    v26 += 16;
  }
  while (v26 != 344);
  uint64_t v29 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t FatalActivationBlockers: {", buf, 2u);
  }
  for (uint64_t j = 0; j != 2; ++j)
  {
    uint64_t v31 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v32 = asStringBool(*(unsigned char *)(v87 + dword_1015716C8[j] + 348));
      uint64_t v33 = asString();
      uint64_t v34 = asString();
      *(_DWORD *)long long buf = 136315650;
      *(void *)uint64_t v89 = v32;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v33;
      *(_WORD *)&v89[18] = 2080;
      *(void *)&v89[20] = v34;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t %s (%s) cause %s", buf, 0x20u);
    }
  }
  unsigned int v35 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t }", buf, 2u);
  }
  for (uint64_t k = 0; k != 2; ++k)
  {
    uint64_t v37 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      int v38 = dword_1015716C8[k];
      uint64_t v39 = asString();
      uint64_t v40 = asStringBool(*(unsigned char *)(v87 + v38 + 344));
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v89 = v39;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v40;
      _os_log_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t fIPv4ActivationBlocker[%s] = %s", buf, 0x16u);
    }
  }
  for (uint64_t m = 0; m != 2; ++m)
  {
    uint64_t v42 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      int v43 = dword_1015716C8[m];
      uint64_t v44 = asString();
      uint64_t v45 = asStringBool(*(unsigned char *)(v87 + v43 + 346));
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v89 = v44;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v45;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t fIPv6ActivationBlocker[%s] = %s", buf, 0x16u);
    }
  }
  uint64_t v46 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t }", buf, 2u);
    uint64_t v46 = *v12;
  }
  uint64_t v47 = v87;
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v48 = asStringBool(*(unsigned char *)(v87 + 256));
    uint64_t v47 = v87;
    int v49 = *(_DWORD *)(v87 + 248);
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v89 = v48;
    *(_WORD *)&v89[8] = 1024;
    *(_DWORD *)&v89[10] = v49;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fCBv6SupportedDataModeMaskPresent[kDataContextBB] = %s, fCBv6SupportedDataModeMask[kDataContextBB] = %d", buf, 0x12u);
    uint64_t v46 = *(NSObject **)(v87 + 64);
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v50 = asStringBool(*(unsigned char *)(v47 + 257));
    uint64_t v47 = v87;
    int v51 = *(_DWORD *)(v87 + 252);
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v89 = v50;
    *(_WORD *)&v89[8] = 1024;
    *(_DWORD *)&v89[10] = v51;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fCBv6SupportedDataModeMaskPresent[kDataContextIWLAN] = %s, fCBv6SupportedDataModeMask[kDataContextIWLAN] = %d", buf, 0x12u);
    uint64_t v46 = *(NSObject **)(v87 + 64);
  }
  if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fObservers BB: {", buf, 2u);
  }
  uint64_t v52 = *(void *)(v47 + 120);
  for (uint64_t n = *(void *)(v47 + 128); v52 != n; v52 += 24)
  {
    uint64_t v54 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v55 = (*(uint64_t (**)(void))(**(void **)(v52 + 8) + 16))(*(void *)(v52 + 8));
      uint64_t v56 = asStringBool(*(unsigned char *)(v52 + 16));
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v89 = v55;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v56;
      _os_log_impl((void *)&_mh_execute_header, v54, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t %s (%s)", buf, 0x16u);
    }
  }
  unsigned int v57 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t }", buf, 2u);
    unsigned int v57 = *v12;
  }
  if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fObservers iWLAN: {", buf, 2u);
  }
  uint64_t v58 = *(void *)(v87 + 144);
  for (iuint64_t i = *(void *)(v87 + 152); v58 != ii; v58 += 24)
  {
    uint64_t v60 = *v12;
    if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v61 = (*(uint64_t (**)(void))(**(void **)(v58 + 8) + 16))(*(void *)(v58 + 8));
      uint64_t v62 = asStringBool(*(unsigned char *)(v58 + 16));
      *(_DWORD *)long long buf = 136315394;
      *(void *)uint64_t v89 = v61;
      *(_WORD *)&v89[8] = 2080;
      *(void *)&v89[10] = v62;
      _os_log_impl((void *)&_mh_execute_header, v60, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t %s (%s)", buf, 0x16u);
    }
  }
  __int16 v63 = *v12;
  if (os_log_type_enabled(*v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t }", buf, 2u);
    __int16 v63 = *v12;
  }
  uint64_t v64 = v87;
  if (os_log_type_enabled(v63, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v65 = asStringBool(*(void *)(v87 + 576) != 0);
    uint64_t v64 = v87;
    int v66 = *(_DWORD *)(v87 + 592);
    *(_DWORD *)long long buf = 136315394;
    *(void *)uint64_t v89 = v65;
    *(_WORD *)&v89[8] = 1024;
    *(_DWORD *)&v89[10] = v66;
    _os_log_impl((void *)&_mh_execute_header, v63, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fThrottleTimer active = %s, fLastThrottleType = %d", buf, 0x12u);
  }
  unsigned int v67 = sub_100DA0048(v64, 0, 0);
  __int16 v68 = *(NSObject **)(v87 + 64);
  if (os_log_type_enabled(v68, OS_LOG_TYPE_DEFAULT))
  {
    int v69 = *(_DWORD *)(v87 + 568);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v89 = v69;
    *(_WORD *)&v89[4] = 1024;
    *(_DWORD *)&v89[6] = v67;
    _os_log_impl((void *)&_mh_execute_header, v68, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fThrottleTimerArrayIndex[ThrottleType::kThrottleTypeNetwork] = %d, timeout = %d", buf, 0xEu);
  }
  unsigned int v70 = sub_100DA0048(v87, 1u, 0);
  uint64_t v71 = v87;
  uint64_t v72 = *(NSObject **)(v87 + 64);
  if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
  {
    int v73 = *(_DWORD *)(v87 + 572);
    *(_DWORD *)long long buf = 67109376;
    *(_DWORD *)uint64_t v89 = v73;
    *(_WORD *)&v89[4] = 1024;
    *(_DWORD *)&v89[6] = v70;
    _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t fThrottleTimerArrayIndex[ThrottleType::kThrottleTypeInternal] = %d, timeout = %d", buf, 0xEu);
  }
  for (juint64_t j = 0; jj != 2; ++jj)
  {
    uint64_t v75 = dword_1015716C8[jj];
    uint64_t v76 = v71 + 56 * (int)v75;
    uint64_t v77 = *(void *)(v76 + 464);
    uint64_t v78 = *(void *)(v76 + 472);
    int v79 = *(unsigned __int8 *)(v76 + 484);
    uint64_t v80 = *(std::__shared_weak_count **)(v76 + 504);
    if (v80) {
      atomic_fetch_add_explicit(&v80->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v81 = *v86;
    if (os_log_type_enabled(*v86, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v82 = asString();
      int v83 = *(_DWORD *)(v87 + 4 * v75 + 448);
      uint64_t v84 = asString();
      uint64_t v85 = asStringBool(v79 != 0);
      *(_DWORD *)long long buf = 136316418;
      *(void *)uint64_t v89 = v82;
      *(_WORD *)&v89[8] = 1024;
      *(_DWORD *)&v89[10] = v83;
      *(_WORD *)&v89[14] = 2080;
      *(void *)&v89[16] = v77;
      *(_WORD *)&v89[24] = 2080;
      *(void *)&v89[26] = v78;
      __int16 v90 = 2080;
      uint64_t v91 = v84;
      __int16 v92 = 2080;
      uint64_t v93 = v85;
      _os_log_impl((void *)&_mh_execute_header, v81, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t\t ContextType=%s: fActivateErrorCount = %d, fLastActivateError: reasouint64_t n = %s, subReasouint64_t n = %s, error = %s, networkStateValid = %s", buf, 0x3Au);
    }
    if (v80) {
      sub_10004D2C8(v80);
    }
    uint64_t v71 = v87;
  }
}

void sub_100DA1230(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DA1250(uint64_t a1)
{
}

uint64_t sub_100DA1258(Registry *a1)
{
  Registry::getTimerService((uint64_t *)&v3, a1);
  uint64_t v1 = (**v3)(v3);
  if (v4) {
    sub_10004D2C8(v4);
  }
  return v1;
}

void sub_100DA12C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DA12D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 112);
  if (v2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)v2 + 128);
    v3();
  }
  else
  {
    uint64_t v4 = *(NSObject **)(a1 + 64);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v5 = 136315138;
      uint64_t v6 = "setCoalescing";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#E %s: pdpActivator is empty", (uint8_t *)&v5, 0xCu);
    }
  }
}

void sub_100DA13D4(uint64_t a1)
{
}

void sub_100DA13E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1[14];
  if (v5)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v9);
    sub_1000DFC90((uint64_t)v13, a4);
    (*(void (**)(uint64_t, uint64_t *, uint64_t, uint64_t, void *))(*(void *)v5 + 112))(v5, &v9, a2, a3, v13);
    sub_100060644(v13);
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  else
  {
    uint64_t v8 = a1[8];
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      unsigned int v12 = "queryAnbrBitrate";
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s: pdpActivator is empty", buf, 0xCu);
    }
    sub_1000607A8(a4, 0);
  }
}

void sub_100DA152C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100060644((uint64_t *)va);
  if (a3) {
    sub_10004D2C8(a3);
  }
  _Unwind_Resume(a1);
}

void sub_100DA155C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
}

void sub_100DA1564(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[14];
  if (v3)
  {
    (*(void (**)(uint64_t *__return_ptr))(*a1 + 16))(&v5);
    sub_100323990((uint64_t)v9, a2);
    (*(void (**)(uint64_t, uint64_t *, void *))(*(void *)v3 + 120))(v3, &v5, v9);
    sub_1000605C0(v9);
    if (v6) {
      sub_10004D2C8(v6);
    }
  }
  else
  {
    uint64_t v4 = a1[8];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      uint64_t v8 = "getAnbrActivationState";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: pdpActivator is empty", buf, 0xCu);
    }
    sub_10006074C(a2, 0, 0);
  }
}

void sub_100DA169C(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000605C0((uint64_t *)va);
  if (a3) {
    sub_10004D2C8(a3);
  }
  _Unwind_Resume(a1);
}

void sub_100DA16CC(uint64_t a1, uint64_t a2)
{
}

void *sub_100DA16D4(void *result, uint64_t a2)
{
  uint64_t v2 = result[15];
  for (uint64_t i = result[16]; v2 != i; v2 += 24)
  {
    if (*(unsigned char *)(v2 + 16))
    {
      uint64_t result = *(void **)(v2 + 8);
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(*result + 344))(result, a2);
      }
    }
  }
  return result;
}

void *sub_100DA1754(uint64_t a1, uint64_t a2)
{
  return sub_100DA16D4((void *)(a1 - 24), a2);
}

void *sub_100DA175C(void *result, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = result[15];
  for (uint64_t i = result[16]; v3 != i; v3 += 24)
  {
    if (*(unsigned char *)(v3 + 16))
    {
      uint64_t result = *(void **)(v3 + 8);
      if (result) {
        uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t, uint64_t))(*result + 352))(result, a2, a3);
      }
    }
  }
  return result;
}

void *sub_100DA17E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_100DA175C((void *)(a1 - 24), a2, a3);
}

uint64_t sub_100DA17EC(uint64_t a1)
{
  sub_100D87084(a1);
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = 0;
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100DA1868()
{
}

void *sub_100DA1880(void *result, const void *a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    uint64_t result = sub_100DA18FC(result, a4);
    uint64_t v7 = v6[1];
    uint64_t v8 = a3 - (void)a2;
    if (v8) {
      uint64_t result = memmove((void *)v6[1], a2, v8 - 7);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100DA18E0(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

char *sub_100DA18FC(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100DA1868();
  }
  uint64_t result = (char *)sub_10004812C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

uint64_t sub_100DA1950(uint64_t a1, uint64_t *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  sub_100D96EEC((char **)a1, a2);
  return a1;
}

void sub_100DA1980(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DA199C@<X0>(int *a1@<X1>, uint64_t a2@<X2>, long long *a3@<X3>, char *a4@<X4>, uint64_t *a5@<X5>, int *a6@<X6>, char *a7@<X7>, void *a8@<X8>)
{
  uint64_t v16 = operator new(0x80uLL);
  uint64_t result = sub_100DA1A40(v16, a1, a2, a3, a4, a5, a6, a7);
  *a8 = v16 + 3;
  a8[1] = v16;
  return result;
}

void sub_100DA1A2C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100DA1A40(void *a1, int *a2, uint64_t a3, long long *a4, char *a5, uint64_t *a6, int *a7, char *a8)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A58D18;
  sub_100DA1B38((uint64_t)(a1 + 3), a2, a3, a4, a5, a6, a7, a8);
  return a1;
}

void sub_100DA1A88(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100DA1A9C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A58D18;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DA1ABC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A58D18;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100DA1B10(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

uint64_t sub_100DA1B38(uint64_t a1, int *a2, uint64_t a3, long long *a4, char *a5, uint64_t *a6, int *a7, char *a8)
{
  int v14 = *a2;
  uint64_t v17 = 0;
  uint64_t v18 = 0;
  std::string __p = 0;
  sub_100448664(&__p, *(const void **)a3, *(void *)(a3 + 8), (uint64_t)(*(void *)(a3 + 8) - *(void *)a3) >> 2);
  sub_1004FC8A4(a1, v14, (uint64_t)&__p, a4, *a5, *a6, *a7, *a8);
  if (__p)
  {
    uint64_t v17 = __p;
    operator delete(__p);
  }
  return a1;
}

void sub_100DA1BE4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11)
{
  if (__p) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DA1C00(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100DA1C10(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DA1C2C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t sub_100DA1C3C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100DA1CD4(uint64_t *result, unint64_t a2, uint64_t a3)
{
  uint64_t v4 = result;
  uint64_t v6 = (uint64_t **)(result + 1);
  uint64_t v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        uint64_t v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        uint64_t v5 = *v7;
        uint64_t v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      uint64_t v5 = v7[1];
      if (!v5)
      {
        uint64_t v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    uint64_t v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (uint64_t *)operator new(0x28uLL);
    void v9[4] = a3;
    uint64_t *v9 = 0;
    v9[1] = 0;
    _OWORD v9[2] = (uint64_t)v7;
    *uint64_t v6 = v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *uint64_t v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = v9;
    }
    uint64_t result = sub_100046C90((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

uint64_t sub_100DA1D8C(uint64_t a1)
{
  v24.__locale_ = 0;
  std::locale::locale(&v24);
  uint64_t v2 = std::locale::classic();
  if (std::locale::operator==(&v24, v2))
  {
    unsigned int v3 = *(_DWORD *)a1;
    do
    {
      uint64_t v4 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v4 - 1;
      *(unsigned char *)(v4 - 1) = *(_DWORD *)(a1 + 20) + v3 % 0xA;
      LODWORD(v4) = *(_DWORD *)a1;
      unsigned int v3 = *(_DWORD *)a1 / 0xAu;
      *(_DWORD *)a1 = v3;
    }
    while (v4 > 9);
    uint64_t v5 = *(void *)(a1 + 8);
    goto LABEL_28;
  }
  uint64_t v6 = std::locale::use_facet(&v24, &std::numpunct<char>::id);
  std::string __p = 0;
  unint64_t v22 = 0;
  uint64_t v23 = 0;
  ((void (*)(void **__return_ptr))v6->__vftable[1].__on_zero_shared)(&__p);
  if (SHIBYTE(v23) < 0)
  {
    unint64_t v7 = v22;
    if (!v22) {
      goto LABEL_24;
    }
    p_p = (char *)__p;
  }
  else
  {
    unint64_t v7 = HIBYTE(v23);
    if (!HIBYTE(v23)) {
      goto LABEL_24;
    }
    p_p = (char *)&__p;
  }
  if (*p_p > 0)
  {
    char v9 = ((uint64_t (*)(const std::locale::facet *))v6->__vftable[1].~facet_0)(v6);
    uint64_t v10 = 0;
    uint64_t v11 = __p;
    if (v23 >= 0) {
      uint64_t v11 = &__p;
    }
    unsigned int v12 = (uint64_t *)(a1 + 8);
    LOBYTE(v13) = *v11;
    char v14 = *v11;
    do
    {
      if (!v14)
      {
        if (++v10 < v7)
        {
          uint64_t v15 = v23 >= 0 ? &__p : (void **)__p;
          int v13 = *((char *)v15 + v10);
          if (v13 < 1) {
            LOBYTE(v13) = 127;
          }
        }
        uint64_t v16 = (unsigned char *)(*v12 - 1);
        uint64_t *v12 = (uint64_t)v16;
        unsigned char *v16 = v9;
        char v14 = v13;
      }
      --v14;
      uint64_t v17 = *(void *)(a1 + 8);
      *(void *)(a1 + 8) = v17 - 1;
      *(unsigned char *)(v17 - 1) = *(_DWORD *)(a1 + 20) + *(_DWORD *)a1 % 0xAu;
      LODWORD(v17) = *(_DWORD *)a1;
      *(_DWORD *)a1 /= 0xAu;
    }
    while (v17 > 9);
    goto LABEL_26;
  }
LABEL_24:
  unsigned int v12 = (uint64_t *)(a1 + 8);
  unsigned int v18 = *(_DWORD *)a1;
  do
  {
    uint64_t v19 = *(void *)(a1 + 8);
    *(void *)(a1 + 8) = v19 - 1;
    *(unsigned char *)(v19 - 1) = *(_DWORD *)(a1 + 20) + v18 % 0xA;
    LODWORD(v19) = *(_DWORD *)a1;
    unsigned int v18 = *(_DWORD *)a1 / 0xAu;
    *(_DWORD *)a1 = v18;
  }
  while (v19 > 9);
LABEL_26:
  uint64_t v5 = *v12;
  if (SHIBYTE(v23) < 0) {
    operator delete(__p);
  }
LABEL_28:
  std::locale::~locale(&v24);
  return v5;
}

void sub_100DA1FFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, std::locale a15)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  std::locale::~locale(&a15);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DA2030(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
  if (v2)
  {
    unsigned int v3 = *(PersonalitySpecificImpl **)(v1 + 16);
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)v1)
      {
        uint64_t v6 = *((void *)v3 + 14);
        if (v6)
        {
          if ((*(unsigned int (**)(uint64_t))(*(void *)v6 + 336))(v6))
          {
            (*(void (**)(void, void))(**((void **)v3 + 14) + 344))(*((void *)v3 + 14), 0);
            unsigned int v29 = *(_DWORD *)(v1 + 24);
            uint64_t v7 = v29;
            uint64_t v26 = 0;
            uint64_t v27 = 0;
            uint64_t v28 = 0;
            sub_100D932C8((uint64_t)&v26, (uint64_t)v3, v29);
            uint64_t v25 = 0;
            memset(v24, 0, sizeof(v24));
            unint64_t v22 = 0;
            uint64_t v23 = 0;
            std::string __p = 0;
            sub_1008DB9AC(&__p, v26, (uint64_t)v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)v26) >> 2));
            sub_100D882CC(v3, v7, (uint64_t)&__p, (uint64_t)v24);
            if (__p)
            {
              unint64_t v22 = __p;
              operator delete(__p);
            }
            uint64_t v8 = LODWORD(v24[0]);
            if (LODWORD(v24[0]))
            {
              char v9 = *((void *)v3 + 8);
              if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v10 = asString();
                *(_DWORD *)long long buf = 136315650;
                *(void *)uint64_t v37 = "operator()";
                *(_WORD *)&char v37[8] = 2080;
                *(void *)&v37[10] = v10;
                *(_WORD *)&v37[18] = 1024;
                int v38 = v24[0];
                _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s: handleDataActivateResult_Async(3.0): retryType=%s, error=%d", buf, 0x1Cu);
              }
              sub_100D9ED1C(v3, *(unsigned int *)(v1 + 24), (v8 << 32) | 0xFFFFFFFFLL);
            }
            else
            {
              buf[0] = 1;
              *(void *)&v37[4] = "retry activation (async)";
              *(void *)&v37[12] = "CommCenter";
              LOBYTE(v38) = 0;
              int v39 = 0;
              char v40 = 0;
              int v41 = 0;
              __int16 v42 = 0;
              uint64_t v44 = 0;
              uint64_t v45 = 0;
              uint64_t v43 = 0;
              char v46 = 0;
              uint64_t v19 = 0;
              uint64_t v20 = 0;
              unsigned int v18 = 0;
              sub_1008DB9AC(&v18, v26, (uint64_t)v27, 0xAAAAAAAAAAAAAAABLL * ((v27 - (unsigned char *)v26) >> 2));
              unint64_t v11 = sub_100D8B390((uint64_t)v3, 0, (int *)&v29, 0, (uint64_t)buf, (uint64_t)&v18);
              if (v18)
              {
                uint64_t v19 = v18;
                operator delete(v18);
              }
              unsigned int v12 = *((void *)v3 + 8);
              uint64_t v13 = *(unsigned int *)(v1 + 24);
              if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v14 = asString();
                *(_DWORD *)uint64_t v30 = 136315650;
                uint64_t v31 = "operator()";
                __int16 v32 = 2080;
                uint64_t v33 = v14;
                __int16 v34 = 1024;
                int v35 = v11;
                _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s: handleDataActivateResult_Async(3): retryType=%s, activationReturn=%d", v30, 0x1Cu);
                uint64_t v13 = *(unsigned int *)(v1 + 24);
              }
              sub_100D9ED1C(v3, v13, v11);
            }
            if (v25) {
              sub_10004D2C8(v25);
            }
            if (v26)
            {
              uint64_t v27 = v26;
              operator delete(v26);
            }
          }
        }
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100DA2438(&v17);
  return sub_100046B58((uint64_t *)&v16);
}

void sub_100DA23A4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,std::__shared_weak_count *a23,uint64_t a24,void *__p,uint64_t a26)
{
  if (a23) {
    sub_10004D2C8(a23);
  }
  if (__p)
  {
    a26 = (uint64_t)__p;
    operator delete(__p);
  }
  sub_10004D2C8(v26);
  sub_100DA2438(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DA2438(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 8);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100DA248C(uint64_t *a1, uint64_t a2)
{
  a1[2] = 0;
  a1[1] = 0;
  *a1 = (uint64_t)(a1 + 1);
  sub_100103B20(a1, *(void **)a2, (void *)(a2 + 8));
  return a1;
}

void sub_100DA24CC(_Unwind_Exception *a1)
{
  sub_100103DF0(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100DA2738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  uint64_t v15 = v14;

  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA29B8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA2BD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA2ED8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10004D2C8(a18);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100DA2F50(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }

  return a1;
}

void sub_100DA3234(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  uint64_t v20 = v19;

  if (a14 < 0) {
    operator delete(__p);
  }
  if (a17) {
    sub_10004D2C8(a17);
  }

  _Unwind_Resume(a1);
}

void sub_100DA36A8(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100DA3750(uint64_t a1, const void **a2)
{
  int v3 = *(unsigned __int8 *)a2;
  if (v3 == 2)
  {
    if (*((unsigned char *)a2 + 8) == 19)
    {
      uint64_t v4 = *(void **)(a1 + 32);
      if (v4)
      {
        [v4 getLogContext];
        char v5 = v15;
      }
      else
      {
        char v5 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_ERROR, "Driver not ready", (uint8_t *)&v14, 2u);
      }
      id v11 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:35 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      uint64_t v7 = *(void **)(a1 + 32);
      if (v7)
      {
        [v7 getLogContext];
        uint64_t v8 = v15;
      }
      else
      {
        uint64_t v8 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Get Vinyl FW Update Info error", (uint8_t *)&v14, 2u);
      }
      id v11 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
  }
  else
  {
    uint64_t v16 = 0;
    if (v3 != 1)
    {
      exceptiouint64_t n = (ctu::ResultIsEmptyError *)__cxa_allocate_exception(0x10uLL);
      ctu::ResultIsEmptyError::ResultIsEmptyError(exception);
    }
    sub_100058198(&v16, a2 + 1);
    if (v16) {
      char v6 = sub_100080778;
    }
    else {
      char v6 = 0;
    }
    if (v6)
    {
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    else
    {
      char v9 = *(void **)(a1 + 32);
      if (v9)
      {
        [v9 getLogContext];
        uint64_t v10 = v15;
      }
      else
      {
        uint64_t v10 = 0;
        uint64_t v14 = 0;
        uint64_t v15 = 0;
      }
      ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v14) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Empty dictionary - maybe eUICC does not exist", (uint8_t *)&v14, 2u);
      }
      id v12 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:35 userInfo:0];
      (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
    }
    sub_100057D78(&v16);
  }
}

void sub_100DA3A14(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100DA3CD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA414C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v22);
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  if (a20) {
    sub_10004D2C8(a20);
  }

  _Unwind_Resume(a1);
}

void sub_100DA460C(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100DA4A54(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100DA4E64(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100DA5284(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100DA5628(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100DA5A34(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA5EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25)
{
  _Unwind_Resume(a1);
}

void sub_100DA6328(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if ((v30 & 1) == 0) {
    sub_10004D2C8(v28);
  }

  _Unwind_Resume(a1);
}

void sub_100DA673C(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA6AB8(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA6E48(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA7264(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }

  _Unwind_Resume(a1);
}

void sub_100DA7574(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA7868(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA7984(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14)
{
  _Unwind_Resume(a1);
}

void sub_100DA799C(uint64_t a1, void *a2, void *a3)
{
  id v8 = a2;
  id v5 = a3;
  uint64_t v6 = *(void *)(a1 + 32);
  if (v8)
  {
    uint64_t v7 = [v8 text];
  }
  else
  {
    uint64_t v7 = 0;
  }
  (*(void (**)(uint64_t, void *, id))(v6 + 16))(v6, v7, v5);
  if (v8) {
}
  }

void sub_100DA7A3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

void sub_100DA7F90(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);

  sub_1001A7138((uint64_t)va);
  if (a3) {
    sub_10004D2C8(a3);
  }
  if ((v7 & 1) == 0) {
    sub_10004D2C8(v5);
  }

  _Unwind_Resume(a1);
}

void sub_100DA83F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, const void **a10)
{
  sub_100706DDC((uint64_t)&a9, a10);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }

  _Unwind_Resume(a1);
}

void sub_100DA88E0(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, ...)
{
  va_start(va, a3);

  sub_1000558F4((const void **)va);
  if (a3) {
    sub_10004D2C8(a3);
  }
  if ((v7 & 1) == 0) {
    sub_10004D2C8(v5);
  }

  _Unwind_Resume(a1);
}

void sub_100DA91E0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, void *a14, uint64_t a15, void *a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,void *a34)
{
  if (a24) {
    sub_10004D2C8(a24);
  }
  sub_10026CF54((uint64_t)&a33, a34);

  _Unwind_Resume(a1);
}

void sub_100DA9450(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100DA9780(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA9B0C(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DA9E68(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DAA14C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DAA430(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_10004D2C8(a19);
  }

  _Unwind_Resume(a1);
}

void sub_100DAA754(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, std::__shared_weak_count *a19)
{
  if (a19) {
    sub_10004D2C8(a19);
  }

  _Unwind_Resume(a1);
}

void sub_100DAAAC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_10004D2C8(a24);
  }

  _Unwind_Resume(a1);
}

void sub_100DAAE48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a24) {
    sub_10004D2C8(a24);
  }

  _Unwind_Resume(a1);
}

void sub_100DAB160(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DAB450(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DAB778(_Unwind_Exception *a1)
{
  if ((v5 & 1) == 0) {
    sub_10004D2C8(v3);
  }

  _Unwind_Resume(a1);
}

void sub_100DAB958(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10)
{
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DABE44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  sub_10026CF54(v21, a15);
  if (a18) {
    sub_10004D2C8(a18);
  }

  _Unwind_Resume(a1);
}

void sub_100DAC2B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DAC684(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }

  _Unwind_Resume(a1);
}

void sub_100DAC95C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  sub_100DAE22C((uint64_t)&a9);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }

  _Unwind_Resume(a1);
}

void sub_100DACDB4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, int a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25)
{
  if ((v30 & 1) == 0) {
    sub_10004D2C8(v28);
  }

  _Unwind_Resume(a1);
}

void sub_100DAD12C(_Unwind_Exception *a1)
{
  if ((v4 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100DAD3E8(_Unwind_Exception *a1)
{
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100DAD848(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  if ((v23 & 1) == 0) {
    sub_10004D2C8(v21);
  }

  _Unwind_Resume(a1);
}

void sub_100DADAF8(_Unwind_Exception *a1)
{
  char v5 = v3;

  if ((v5 & 1) == 0) {
    sub_10004D2C8(v2);
  }

  _Unwind_Resume(a1);
}

void sub_100DAE074(_Unwind_Exception *a1)
{
  if ((v6 & 1) == 0) {
    sub_10004D2C8(v4);
  }

  _Unwind_Resume(a1);
}

void sub_100DAE144(uint64_t ***a1, int a2, void *a3)
{
  int v8 = a2;
  id v4 = a3;
  if (v4)
  {
    long long v9 = 0uLL;
    uint64_t v10 = 0;
    ctu::cf::assign();
    char v5 = *a1;
    *(void *)&long long v9 = &v8;
    char v6 = sub_10008CC40(v5, &v8, (uint64_t)&unk_10144E20E, (_DWORD **)&v9);
    char v7 = v6[5];
    if (v7)
    {
      v6[6] = v7;
      operator delete(v7);
      v6[5] = 0;
      v6[6] = 0;
      v6[7] = 0;
    }
    *(_OWORD *)(v6 + 5) = 0uLL;
    v6[7] = 0;
  }
}

void sub_100DAE1F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  if (a9) {
    operator delete(a9);
  }

  _Unwind_Resume(a1);
}

uint64_t sub_100DAE22C(uint64_t a1)
{
  if (*(unsigned char *)(a1 + 48))
  {
    char v3 = (void **)(a1 + 24);
    sub_100DAE280(&v3);
    if (*(char *)(a1 + 23) < 0) {
      operator delete(*(void **)a1);
    }
  }
  return a1;
}

void sub_100DAE280(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    char v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 72;
        sub_10030A71C(v4);
      }
      while ((void *)v4 != v2);
      char v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

uint64_t sub_100DAE304(uint64_t a1)
{
  return a1;
}

void sub_100DAE330(uint64_t a1)
{
  operator delete();
}

void *sub_100DAE37C(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59630;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DAE3D4(uint64_t a1, void *a2)
{
  *a2 = off_101A59630;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DAE41C(uint64_t a1)
{
}

void sub_100DAE424(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DAE460(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100DAE488(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59690)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAE4C8()
{
  return &off_101A59690;
}

uint64_t sub_100DAE4D4(uint64_t a1)
{
  *(void *)a1 = off_101A596B0;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10004D2C8(v2);
  }

  return a1;
}

void sub_100DAE538(uint64_t a1)
{
  *(void *)a1 = off_101A596B0;

  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 24);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

void *sub_100DAE5BC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x30uLL);
  void *v2 = off_101A596B0;
  sub_100547AE0(v2 + 1, v1);
  return v2;
}

void *sub_100DAE610(uint64_t a1, void *a2)
{
  *a2 = off_101A596B0;
  return sub_100547AE0(a2 + 1, a1 + 8);
}

void sub_100DAE63C(uint64_t a1)
{
}

void sub_100DAE644(void *a1)
{
  sub_100547B44((uint64_t)a1 + 8);

  operator delete(a1);
}

const void **sub_100DAE680(uint64_t a1, CFTypeRef *a2)
{
  char v3 = (uint64_t *)*a2;
  CFTypeRef cf = *a2;
  *a2 = 0;
  uint64_t v4 = *(Registry **)(a1 + 8);
  if (v4)
  {
    [(Registry *)v4 registry];
    uint64_t v4 = v40;
  }
  else
  {
    char v40 = 0;
    int v41 = 0;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, v4);
  char v6 = ServiceMap;
  char v7 = "22CellularPlanController";
  if (((unint64_t)"22CellularPlanController" & 0x8000000000000000) != 0)
  {
    int v8 = (unsigned __int8 *)((unint64_t)"22CellularPlanController" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      char v7 = (const char *)v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v37 = (char *)v7;
  char v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&v37);
  if (v11)
  {
    uint64_t v13 = v11[3];
    id v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v15 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  id v12 = 0;
  char v15 = 1;
LABEL_12:
  if (v41) {
    sub_10004D2C8(v41);
  }
  if (v13)
  {
    uint64_t v16 = (char *)*(id *)(a1 + 32);
    uint64_t v37 = v16;
    id v17 = objc_retainBlock(*(id *)(a1 + 40));
    id v38 = v17;
    CFTypeRef v18 = cf;
    CFTypeRef v39 = cf;
    if (cf) {
      CFRetain(cf);
    }
    __int16 v42 = 0;
    uint64_t v19 = operator new(0x20uLL);
    void *v19 = off_101A59720;
    v19[1] = v16;
    v19[2] = v17;
    v19[3] = v18;
    id v38 = 0;
    CFTypeRef v39 = 0;
    __int16 v42 = v19;
    (*(void (**)(uint64_t, Registry **))(*(void *)v13 + 624))(v13, &v40);
    sub_10030D8B4(&v40);
    sub_100044D00(&v39);

    goto LABEL_36;
  }
  uint64_t v20 = *(Registry **)(a1 + 8);
  if (v20)
  {
    [(Registry *)v20 registry];
    uint64_t v20 = v40;
  }
  else
  {
    char v40 = 0;
    int v41 = 0;
  }
  uint64_t v21 = (std::mutex *)Registry::getServiceMap(v14, v20);
  unint64_t v22 = v21;
  char v23 = "N8cellplan36CellularPlanControllerWatchInterfaceE";
  if (((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x8000000000000000) != 0)
  {
    std::locale v24 = (unsigned __int8 *)((unint64_t)"N8cellplan36CellularPlanControllerWatchInterfaceE" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = 5381;
    do
    {
      char v23 = (const char *)v25;
      unsigned int v26 = *v24++;
      uint64_t v25 = (33 * v25) ^ v26;
    }
    while (v26);
  }
  std::mutex::lock(v21);
  uint64_t v37 = (char *)v23;
  uint64_t v27 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)&v37);
  if (v27)
  {
    uint64_t v29 = v27[3];
    uint64_t v28 = (std::__shared_weak_count *)v27[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v22);
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v28);
      char v30 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  std::mutex::unlock(v22);
  uint64_t v28 = 0;
  char v30 = 1;
LABEL_29:
  if (v41) {
    sub_10004D2C8(v41);
  }
  if (v29)
  {
    uint64_t v31 = (char *)*(id *)(a1 + 32);
    uint64_t v37 = v31;
    id v32 = objc_retainBlock(*(id *)(a1 + 40));
    id v38 = v32;
    CFTypeRef v33 = cf;
    CFTypeRef v39 = cf;
    if (cf) {
      CFRetain(cf);
    }
    __int16 v42 = 0;
    __int16 v34 = operator new(0x20uLL);
    *__int16 v34 = off_101A597A0;
    v34[1] = v31;
    v34[2] = v32;
    v34[3] = v33;
    id v38 = 0;
    CFTypeRef v39 = 0;
    __int16 v42 = v34;
    (*(void (**)(uint64_t, Registry **))(*(void *)v29 + 64))(v29, &v40);
    sub_10030D8B4(&v40);
    sub_100044D00(&v39);

    if ((v30 & 1) == 0) {
LABEL_35:
    }
      sub_10004D2C8(v28);
  }
  else
  {
    char v40 = (Registry *)cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v37 = 0;
    sub_100DAEBB8(a1 + 32, (void *)cf, (uint64_t *)&v37);
    sub_100044D00((const void **)&v40);
    if ((v30 & 1) == 0) {
      goto LABEL_35;
    }
  }
LABEL_36:
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  return sub_100044D00(&cf);
}

void sub_100DAEA80(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, uint64_t a15)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DAEB6C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59810)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAEBAC()
{
  return &off_101A59810;
}

void sub_100DAEBB8(uint64_t a1, void *a2, uint64_t *a3)
{
  if (a2) {
    uint64_t v4 = sub_100083F10;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    id v6 = a2;
    char v46 = objc_opt_new();
    uint64_t v47 = +[NSMutableArray array];
    for (unint64_t i = 0; ; ++i)
    {
      if (i >= (unint64_t)[v6 count])
      {
        [v46 setMeInfoList:v47];
        (*(void (**)(void))(*(void *)(a1 + 8) + 16))();

        goto LABEL_69;
      }
      int v8 = [v6 objectAtIndexedSubscript:i];
      if (v8)
      {
        objc_opt_class();
        if (objc_opt_isKindOfClass())
        {
          id v9 = v8;
          unsigned int v10 = objc_opt_new();
          char v11 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoSlotId"];
          id v12 = (subscriber *)[v11 unsignedIntValue];
          int v14 = subscriber::instanceAsSimSlot(v12, v13);

          if (v14 == 1) {
            uint64_t v15 = 1;
          }
          else {
            uint64_t v15 = 2 * (v14 == 2);
          }
          [v10 setSlotId:v15];
          uint64_t v16 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoCurrentMobileId"];
          [v10 setCurrentMobileId:v16];

          id v17 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoCurrentSubscriberId"];
          [v10 setCurrentSubscriberId:v17];

          CFTypeRef v18 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoIMEI"];
          [v10 setIMEI:v18];

          uint64_t v19 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoICCID"];
          [v10 setICCID:v19];

          uint64_t v20 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoIMSI"];
          [v10 setIMSI:v20];

          uint64_t v21 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfo1xIMSI"];
          [v10 setCdmaIMSI:v21];

          unint64_t v22 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoMEID"];
          [v10 setMEID:v22];

          char v23 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoEUIMID"];
          [v10 setEUIMID:v23];

          std::locale v24 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoPRLVersion"];
          [v10 setPRLVersion:v24];

          uint64_t v25 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoERIVersion"];
          [v10 setERIVersion:v25];

          unsigned int v26 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoMIN"];
          [v10 setMIN:v26];

          uint64_t v27 = [v9 objectForKeyedSubscript:@"kCTMobileEquipmentInfoNAI"];
          [v10 setNAI:v27];

          uint64_t v28 = *a3;
          if (!*a3 || *(_DWORD *)v28 != v14)
          {
            if (*(void *)a1)
            {
              [*(id *)a1 getLogContext];
              id v32 = v49;
            }
            else
            {
              id v32 = 0;
              *(void *)long long buf = 0;
              int v49 = 0;
            }
            ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
            if (os_log_type_enabled(v32, OS_LOG_TYPE_ERROR))
            {
              *(_WORD *)long long buf = 0;
              _os_log_error_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_ERROR, "Could not get cellular plan device Info", buf, 2u);
            }
            goto LABEL_60;
          }
          uint64_t v29 = (void *)(v28 + 8);
          if (*(char *)(v28 + 31) < 0)
          {
            if (!*(void *)(v28 + 16)) {
              goto LABEL_36;
            }
            uint64_t v29 = (void *)*v29;
          }
          else if (!*(unsigned char *)(v28 + 31))
          {
LABEL_36:
            __int16 v36 = (void *)(v28 + 32);
            if (*(char *)(v28 + 55) < 0)
            {
              if (!*(void *)(v28 + 40)) {
                goto LABEL_42;
              }
              __int16 v36 = (void *)*v36;
            }
            else if (!*(unsigned char *)(v28 + 55))
            {
LABEL_42:
              id v38 = (void *)(v28 + 56);
              if (*(char *)(v28 + 79) < 0)
              {
                if (!*(void *)(v28 + 64)) {
                  goto LABEL_48;
                }
                id v38 = (void *)*v38;
              }
              else if (!*(unsigned char *)(v28 + 79))
              {
LABEL_48:
                char v40 = (void *)(v28 + 104);
                if (*(char *)(v28 + 127) < 0)
                {
                  if (!*(void *)(v28 + 112)) {
                    goto LABEL_54;
                  }
                  char v40 = (void *)*v40;
                }
                else if (!*(unsigned char *)(v28 + 127))
                {
LABEL_54:
                  __int16 v42 = (void *)(v28 + 128);
                  if (*(char *)(v28 + 151) < 0)
                  {
                    if (*(void *)(v28 + 136))
                    {
                      __int16 v42 = (void *)*v42;
                      goto LABEL_59;
                    }
                  }
                  else
                  {
                    if (!*(unsigned char *)(v28 + 151)) {
                      goto LABEL_60;
                    }
LABEL_59:
                    uint64_t v43 = +[NSString stringWithUTF8String:v42];
                    [v10 setBaseVersion:v43];
                  }
LABEL_60:
                  [v47 addObject:v10];

                  goto LABEL_61;
                }
                int v41 = +[NSString stringWithUTF8String:v40];
                [v10 setBaseId:v41];

                uint64_t v28 = *a3;
                goto LABEL_54;
              }
              CFTypeRef v39 = +[NSString stringWithUTF8String:v38];
              [v10 setEffectiveICCID:v39];

              uint64_t v28 = *a3;
              goto LABEL_48;
            }
            uint64_t v37 = +[NSString stringWithUTF8String:v36];
            [v10 setCSN:v37];

            uint64_t v28 = *a3;
            goto LABEL_42;
          }
          int v35 = +[NSString stringWithUTF8String:v29];
          [v10 setDisplayCSN:v35];

          uint64_t v28 = *a3;
          goto LABEL_36;
        }
        if (*(void *)a1)
        {
          [*(id *)a1 getLogContext];
          uint64_t v31 = v49;
        }
        else
        {
          uint64_t v31 = 0;
          *(void *)long long buf = 0;
          int v49 = 0;
        }
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
        if (os_log_type_enabled(v31, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          CFTypeRef v33 = v31;
          __int16 v34 = "meInfo array item is of invalid type";
          goto LABEL_29;
        }
      }
      else
      {
        if (*(void *)a1)
        {
          [*(id *)a1 getLogContext];
          char v30 = v49;
        }
        else
        {
          char v30 = 0;
          *(void *)long long buf = 0;
          int v49 = 0;
        }
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
        if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          CFTypeRef v33 = v30;
          __int16 v34 = "meInfo array item is missing";
LABEL_29:
          _os_log_error_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_ERROR, v34, buf, 2u);
        }
      }
LABEL_61:
    }
  }
  id v44 = *(id *)a1;
  if (*(void *)a1)
  {
    [v44 getLogContext];
    uint64_t v45 = v49;
  }
  else
  {
    uint64_t v45 = 0;
    *(void *)long long buf = 0;
    int v49 = 0;
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  if (os_log_type_enabled(v45, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Could not get Mobile Equipment Info", buf, 2u);
  }
  id v6 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:6 userInfo:0];
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
LABEL_69:
}

void sub_100DAF308(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DAF3D8(uint64_t a1)
{
  *(void *)a1 = off_101A59720;
  sub_100044D00((const void **)(a1 + 24));

  return a1;
}

void sub_100DAF42C(uint64_t a1)
{
  *(void *)a1 = off_101A59720;
  sub_100044D00((const void **)(a1 + 24));

  operator delete();
}

void *sub_100DAF4A0(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_101A59720;
  sub_100DAF774((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_100DAF4F4(uint64_t a1, void *a2)
{
  *a2 = off_101A59720;
  return sub_100DAF774((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100DAF520(uint64_t a1)
{
}

void sub_100DAF528(void *a1)
{
  sub_100DAF7C0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100DAF564(uint64_t a1, int *a2)
{
  int v10 = *a2;
  long long v11 = *(_OWORD *)(a2 + 2);
  uint64_t v12 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  long long v13 = *((_OWORD *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 6);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  long long v15 = *(_OWORD *)(a2 + 14);
  uint64_t v16 = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  long long v2 = *((_OWORD *)a2 + 5);
  uint64_t v18 = *((void *)a2 + 12);
  long long v17 = v2;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  long long v3 = *(_OWORD *)(a2 + 26);
  uint64_t v20 = *((void *)a2 + 15);
  long long v19 = v3;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v4 = *((void *)a2 + 18);
  long long v21 = *((_OWORD *)a2 + 8);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v5 = *(_OWORD *)(a2 + 38);
  uint64_t v6 = *((void *)a2 + 21);
  uint64_t v22 = v4;
  uint64_t v24 = v6;
  long long v23 = v5;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  uint64_t v7 = *((void *)a2 + 24);
  long long v25 = *((_OWORD *)a2 + 11);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v8 = *(_OWORD *)(a2 + 50);
  uint64_t v9 = *((void *)a2 + 27);
  uint64_t v26 = v7;
  uint64_t v28 = v9;
  long long v27 = v8;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  sub_100062740(&v29, (const void **)(a1 + 24));
  operator new();
}

void sub_100DAF6DC()
{
  sub_10030E938(v0);
  operator delete();
}

uint64_t sub_100DAF728(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59780)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAF768()
{
  return &off_101A59780;
}

uint64_t sub_100DAF774(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(id *)a2;
  *(void *)(a1 + 8) = objc_retainBlock(*(id *)(a2 + 8));
  sub_100062740((const void **)(a1 + 16), (const void **)(a2 + 16));
  return a1;
}

void sub_100DAF7C0(uint64_t a1)
{
  sub_100044D00((const void **)(a1 + 16));

  long long v2 = *(void **)a1;
}

uint64_t sub_100DAF804(uint64_t a1)
{
  *(void *)a1 = off_101A597A0;
  sub_100044D00((const void **)(a1 + 24));

  return a1;
}

void sub_100DAF858(uint64_t a1)
{
  *(void *)a1 = off_101A597A0;
  sub_100044D00((const void **)(a1 + 24));

  operator delete();
}

void *sub_100DAF8CC(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  long long v2 = operator new(0x20uLL);
  void *v2 = off_101A597A0;
  sub_100DAF774((uint64_t)(v2 + 1), v1);
  return v2;
}

uint64_t sub_100DAF920(uint64_t a1, void *a2)
{
  *a2 = off_101A597A0;
  return sub_100DAF774((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100DAF94C(uint64_t a1)
{
}

void sub_100DAF954(void *a1)
{
  sub_100DAF7C0((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100DAF990(uint64_t a1, int *a2)
{
  int v10 = *a2;
  long long v11 = *(_OWORD *)(a2 + 2);
  uint64_t v12 = *((void *)a2 + 3);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  long long v13 = *((_OWORD *)a2 + 2);
  uint64_t v14 = *((void *)a2 + 6);
  *((void *)a2 + 3) = 0;
  *((void *)a2 + 4) = 0;
  *((void *)a2 + 5) = 0;
  *((void *)a2 + 6) = 0;
  long long v15 = *(_OWORD *)(a2 + 14);
  uint64_t v16 = *((void *)a2 + 9);
  *((void *)a2 + 7) = 0;
  *((void *)a2 + 8) = 0;
  long long v2 = *((_OWORD *)a2 + 5);
  uint64_t v18 = *((void *)a2 + 12);
  long long v17 = v2;
  *((void *)a2 + 9) = 0;
  *((void *)a2 + 10) = 0;
  *((void *)a2 + 11) = 0;
  *((void *)a2 + 12) = 0;
  long long v3 = *(_OWORD *)(a2 + 26);
  uint64_t v20 = *((void *)a2 + 15);
  long long v19 = v3;
  *((void *)a2 + 13) = 0;
  *((void *)a2 + 14) = 0;
  uint64_t v4 = *((void *)a2 + 18);
  long long v21 = *((_OWORD *)a2 + 8);
  *((void *)a2 + 15) = 0;
  *((void *)a2 + 16) = 0;
  *((void *)a2 + 17) = 0;
  *((void *)a2 + 18) = 0;
  long long v5 = *(_OWORD *)(a2 + 38);
  uint64_t v6 = *((void *)a2 + 21);
  uint64_t v22 = v4;
  uint64_t v24 = v6;
  long long v23 = v5;
  *((void *)a2 + 19) = 0;
  *((void *)a2 + 20) = 0;
  uint64_t v7 = *((void *)a2 + 24);
  long long v25 = *((_OWORD *)a2 + 11);
  *((void *)a2 + 21) = 0;
  *((void *)a2 + 22) = 0;
  *((void *)a2 + 23) = 0;
  *((void *)a2 + 24) = 0;
  long long v8 = *(_OWORD *)(a2 + 50);
  uint64_t v9 = *((void *)a2 + 27);
  uint64_t v26 = v7;
  uint64_t v28 = v9;
  long long v27 = v8;
  *((void *)a2 + 25) = 0;
  *((void *)a2 + 26) = 0;
  *((void *)a2 + 27) = 0;
  sub_100062740(&v29, (const void **)(a1 + 24));
  operator new();
}

void sub_100DAFB08()
{
  sub_10030E938(v0);
  operator delete();
}

uint64_t sub_100DAFB54(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59800)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAFB94()
{
  return &off_101A59800;
}

uint64_t sub_100DAFBA0(uint64_t a1)
{
  return a1;
}

void sub_100DAFBCC(uint64_t a1)
{
  operator delete();
}

void *sub_100DAFC18(uint64_t a1)
{
  long long v2 = operator new(0x10uLL);
  void *v2 = off_101A59830;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DAFC70(uint64_t a1, void *a2)
{
  *a2 = off_101A59830;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DAFCB8(uint64_t a1)
{
}

void sub_100DAFCC0(id *a1)
{
  operator delete(a1);
}

void sub_100DAFCFC(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) >= 0) {
    long long v3 = a2;
  }
  else {
    long long v3 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100DAFD74(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DAFD88(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59890)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAFDC8()
{
  return &off_101A59890;
}

uint64_t sub_100DAFDD4(uint64_t a1)
{
  return a1;
}

void sub_100DAFE00(uint64_t a1)
{
  operator delete();
}

void *sub_100DAFE4C(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A598B0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DAFEA4(uint64_t a1, void *a2)
{
  *a2 = off_101A598B0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DAFEEC(uint64_t a1)
{
}

void sub_100DAFEF4(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DAFF30(uint64_t a1, unsigned char *a2)
{
  return (*(uint64_t (**)(void, BOOL, void))(*(void *)(a1 + 8) + 16))(*(void *)(a1 + 8), *a2 != 0, 0);
}

uint64_t sub_100DAFF50(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59920)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DAFF90()
{
  return &off_101A59920;
}

void *sub_100DAFF9C(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DB0020(uint64_t a1)
{
  return a1;
}

void sub_100DB004C(uint64_t a1)
{
  operator delete();
}

void *sub_100DB0098(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59940;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB00F0(uint64_t a1, void *a2)
{
  *a2 = off_101A59940;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0138(uint64_t a1)
{
}

void sub_100DB0140(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DB017C(uint64_t a1, unsigned __int8 *a2)
{
  int v2 = *a2;
  uint64_t v3 = *(void *)(a1 + 8);
  if (v2 == 1) {
    uint64_t v4 = 1;
  }
  else {
    uint64_t v4 = 2 * (v2 == 2);
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, void))(v3 + 16))(v3, v4, 0);
}

uint64_t sub_100DB01A8(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A599A0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB01E8()
{
  return &off_101A599A0;
}

uint64_t sub_100DB01F4(uint64_t a1)
{
  return a1;
}

void sub_100DB0220(uint64_t a1)
{
  operator delete();
}

void *sub_100DB026C(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  void *v2 = off_101A599C0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB02C4(uint64_t a1, void *a2)
{
  *a2 = off_101A599C0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB030C(uint64_t a1)
{
}

void sub_100DB0314(id *a1)
{
  operator delete(a1);
}

void sub_100DB0350(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v4 = *a2;
  if (*a2)
  {
    uint64_t v5 = *a3;
    id v7 = (id)objc_opt_new();
    [v7 setObject:v4 forKeyedSubscript:@"kCTEncryptedIdentity"];
    if (v5) {
      [v7 setObject:v5 forKeyedSubscript:@"kCTIdentityAnonymousUserName"];
    }
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
  else
  {
    uint64_t v6 = *(void *)(a1 + 8);
    id v7 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:45 userInfo:0];
    (*(void (**)(uint64_t, void))(v6 + 16))(v6, 0);
  }
}

void sub_100DB0440(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB0458(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59A30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB0498()
{
  return &off_101A59A30;
}

void *sub_100DB04A4(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DB0528(uint64_t a1)
{
  return a1;
}

void sub_100DB0554(uint64_t a1)
{
  operator delete();
}

void *sub_100DB05A0(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  void *v2 = off_101A59A50;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB05F8(uint64_t a1, void *a2)
{
  *a2 = off_101A59A50;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0640(uint64_t a1)
{
}

void sub_100DB0648(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DB0684(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100DB069C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59AB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB06DC()
{
  return &off_101A59AB0;
}

uint64_t sub_100DB06E8(uint64_t a1)
{
  return a1;
}

void sub_100DB0714(uint64_t a1)
{
  operator delete();
}

void *sub_100DB0760(uint64_t a1)
{
  int v2 = operator new(0x10uLL);
  void *v2 = off_101A59AD0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB07B8(uint64_t a1, void *a2)
{
  *a2 = off_101A59AD0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0800(uint64_t a1)
{
}

void sub_100DB0808(id *a1)
{
  operator delete(a1);
}

void sub_100DB0844(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v6 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3, __p[0], __p[1], v6);
  (*(void (**)(uint64_t, void *, void))(v2 + 16))(v2, v4, 0);

  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB08D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DB0900(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59B30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB0940()
{
  return &off_101A59B30;
}

uint64_t sub_100DB094C(uint64_t a1)
{
  return a1;
}

void sub_100DB0978(uint64_t a1)
{
  operator delete();
}

void *sub_100DB09C4(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59B50;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB0A1C(uint64_t a1, void *a2)
{
  *a2 = off_101A59B50;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0A64(uint64_t a1)
{
}

void sub_100DB0A6C(id *a1)
{
  operator delete(a1);
}

const void **sub_100DB0AA8(uint64_t a1, const void **a2)
{
  uint64_t v3 = *a2;
  *a2 = 0;
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  return sub_100044D00(&v3);
}

void sub_100DB0AF8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100044D00((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB0B0C(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59BB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB0B4C()
{
  return &off_101A59BB0;
}

uint64_t sub_100DB0B58(uint64_t a1)
{
  return a1;
}

void sub_100DB0B84(uint64_t a1)
{
  operator delete();
}

void *sub_100DB0BD0(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59BD0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB0C28(uint64_t a1, void *a2)
{
  *a2 = off_101A59BD0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0C70(uint64_t a1)
{
}

void sub_100DB0C78(id *a1)
{
  operator delete(a1);
}

void sub_100DB0CB4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void *)(a2 + 16);
  *(_OWORD *)std::string __p = *(_OWORD *)a2;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  *(void *)a2 = 0;
  uint64_t v2 = *(void *)(a1 + 8);
  if (v6 >= 0) {
    uint64_t v3 = __p;
  }
  else {
    uint64_t v3 = (void **)__p[0];
  }
  uint64_t v4 = +[NSString stringWithUTF8String:](NSString, "stringWithUTF8String:", v3, __p[0], __p[1], v6);
  (*(void (**)(uint64_t, void *, void))(v2 + 16))(v2, v4, 0);

  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB0D48(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DB0D70(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59C30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB0DB0()
{
  return &off_101A59C30;
}

uint64_t sub_100DB0DBC(uint64_t a1)
{
  return a1;
}

void sub_100DB0DE8(uint64_t a1)
{
  operator delete();
}

void *sub_100DB0E34(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59C50;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB0E8C(uint64_t a1, void *a2)
{
  *a2 = off_101A59C50;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB0ED4(uint64_t a1)
{
}

void sub_100DB0EDC(id *a1)
{
  operator delete(a1);
}

void sub_100DB0F18(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100DB0F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB0FA4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59CB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB0FE4()
{
  return &off_101A59CB0;
}

uint64_t sub_100DB0FF0(uint64_t a1)
{
  return a1;
}

void sub_100DB101C(uint64_t a1)
{
  operator delete();
}

void *sub_100DB1068(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59CD0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB10C0(uint64_t a1, void *a2)
{
  *a2 = off_101A59CD0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB1108(uint64_t a1)
{
}

void sub_100DB1110(id *a1)
{
  operator delete(a1);
}

void sub_100DB114C(uint64_t a1, uint64_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  if (*((char *)a2 + 23) >= 0) {
    uint64_t v3 = a2;
  }
  else {
    uint64_t v3 = (uint64_t *)*a2;
  }
  id v4 = +[NSString stringWithUTF8String:v3];
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100DB11C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB11D8(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59D30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB1218()
{
  return &off_101A59D30;
}

uint64_t sub_100DB1224(uint64_t a1)
{
  return a1;
}

void sub_100DB1258(uint64_t a1)
{
  operator delete();
}

void *sub_100DB12AC(uint64_t a1)
{
  uint64_t v2 = operator new(0x18uLL);
  void *v2 = off_101A59D50;
  v2[1] = *(id *)(a1 + 8);
  v2[2] = objc_retainBlock(*(id *)(a1 + 16));
  return v2;
}

id sub_100DB1310(uint64_t a1, void *a2)
{
  *a2 = off_101A59D50;
  a2[1] = *(id *)(a1 + 8);
  id result = objc_retainBlock(*(id *)(a1 + 16));
  a2[2] = result;
  return result;
}

void sub_100DB1368(uint64_t a1)
{
  uint64_t v2 = *(void **)(a1 + 8);
}

void sub_100DB13A4(id *a1)
{
  operator delete(a1);
}

void sub_100DB13E8(uint64_t a1, void *a2)
{
  uint64_t v3 = a2 + 1;
  id v4 = (void *)a2[1];
  uint64_t v22 = (void **)*a2;
  long long v23 = v4;
  if (a2[2])
  {
    v4[2] = &v23;
    *a2 = v3;
    *uint64_t v3 = 0;
    a2[2] = 0;
  }
  else
  {
    uint64_t v22 = &v23;
  }
  uint64_t v5 = +[NSMutableDictionary dictionary];
  uint64_t v6 = v22;
  if (v22 == &v23)
  {
LABEL_13:
    uint64_t v12 = *(void **)(a1 + 8);
    if (v12)
    {
      [v12 getLogContext];
      long long v13 = *(NSObject **)&buf[8];
    }
    else
    {
      long long v13 = 0;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315395;
      *(void *)&uint8_t buf[4] = "operator()";
      *(_WORD *)&unsigned char buf[12] = 2117;
      *(void *)&buf[14] = v5;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "%s: output auth info: %{sensitive}@", buf, 0x16u);
    }
    uint64_t v14 = *(void *)(a1 + 16);
    id v15 = [objc_alloc((Class)CTSubscriberAuthDataHolder) initWithData:v5];
    (*(void (**)(uint64_t, id, void))(v14 + 16))(v14, v15, 0);
  }
  else
  {
    while (1)
    {
      uint64_t v7 = subscriber::clientKeyFromAuthInfoType();
      if (!v7) {
        break;
      }
      long long v25 = 0;
      uint64_t v26 = 0;
      if (!ctu::cf::convert_copy())
      {
        uint64_t v18 = *(void **)(a1 + 8);
        if (v18)
        {
          [v18 getLogContext];
          long long v19 = *(NSObject **)&buf[8];
        }
        else
        {
          long long v19 = 0;
          *(void *)long long buf = 0;
          *(void *)&uint8_t buf[8] = 0;
        }
        ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
        if (os_log_type_enabled(v19, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Unable to convert auth info data", buf, 2u);
        }
        id v21 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:14 userInfo:0];
        (*(void (**)(void))(*(void *)(a1 + 16) + 16))();

        sub_100030068(&v25);
        goto LABEL_31;
      }
      long long v8 = v25;
      long long v25 = v26;
      *(void *)long long buf = v8;
      sub_100030068((const void **)buf);
      [v5 setObject:v25 forKeyedSubscript:v7];
      sub_100030068(&v25);
      uint64_t v9 = v6[1];
      if (v9)
      {
        do
        {
          int v10 = (void **)v9;
          uint64_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          int v10 = (void **)v6[2];
          BOOL v11 = *v10 == v6;
          uint64_t v6 = v10;
        }
        while (!v11);
      }
      uint64_t v6 = v10;
      if (v10 == &v23) {
        goto LABEL_13;
      }
    }
    uint64_t v16 = *(void **)(a1 + 8);
    if (v16)
    {
      [v16 getLogContext];
      long long v17 = *(NSObject **)&buf[8];
    }
    else
    {
      long long v17 = 0;
      *(void *)long long buf = 0;
      *(void *)&uint8_t buf[8] = 0;
    }
    ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
    if (os_log_type_enabled(v17, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, "Unable to find client key for auth info", buf, 2u);
    }
    id v20 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:14 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 16) + 16))();
  }
LABEL_31:

  sub_10026CF54((uint64_t)&v22, v23);
}

void sub_100DB1754(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  uint64_t v6 = va_arg(va1, void *);
  uint64_t v7 = va_arg(va1, void);
  sub_100030068((const void **)va1);

  sub_10026CF54((uint64_t)va, v6);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB17CC(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59DB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB180C()
{
  return &off_101A59DB0;
}

uint64_t sub_100DB1818(uint64_t a1)
{
  return a1;
}

void sub_100DB1844(uint64_t a1)
{
  operator delete();
}

void *sub_100DB1890(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59DD0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB18E8(uint64_t a1, void *a2)
{
  *a2 = off_101A59DD0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB1930(uint64_t a1)
{
}

void sub_100DB1938(id *a1)
{
  operator delete(a1);
}

void sub_100DB1974(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 8) + 16);
    v3();
  }
  else
  {
    id v4 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_100DB1A24(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB1A38(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59E30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB1A78()
{
  return &off_101A59E30;
}

uint64_t sub_100DB1A84(uint64_t a1)
{
  return a1;
}

void sub_100DB1AB0(uint64_t a1)
{
  operator delete();
}

void *sub_100DB1AFC(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59E50;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB1B54(uint64_t a1, void *a2)
{
  *a2 = off_101A59E50;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB1B9C(uint64_t a1)
{
}

void sub_100DB1BA4(id *a1)
{
  operator delete(a1);
}

void sub_100DB1BE0(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v3 = *(void (**)(void))(*(void *)(a1 + 8) + 16);
    v3();
  }
  else
  {
    id v4 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:22 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_100DB1C90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB1CA4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59EB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB1CE4()
{
  return &off_101A59EB0;
}

uint64_t sub_100DB1CF0(uint64_t a1)
{
  return a1;
}

void sub_100DB1D1C(uint64_t a1)
{
  operator delete();
}

void *sub_100DB1D68(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59ED0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB1DC0(uint64_t a1, void *a2)
{
  *a2 = off_101A59ED0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB1E08(uint64_t a1)
{
}

void sub_100DB1E10(id *a1)
{
  operator delete(a1);
}

void sub_100DB1E4C(uint64_t a1, _WORD *a2)
{
  if ((unsigned __int16)*a2 > 0xFFu)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    +[NSNumber numberWithBool:*a2 != 0];
    id v4 = (id)objc_claimAutoreleasedReturnValue();
    (*(void (**)(uint64_t))(v3 + 16))(v3);
  }
  else
  {
    id v4 = [objc_alloc((Class)NSError) initWithDomain:NSPOSIXErrorDomain code:6 userInfo:0];
    (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
  }
}

void sub_100DB1F10(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB1F28(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59F30)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB1F68()
{
  return &off_101A59F30;
}

uint64_t sub_100DB1F74(uint64_t a1)
{
  return a1;
}

void sub_100DB1FA0(uint64_t a1)
{
  operator delete();
}

void *sub_100DB1FEC(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59F50;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB2044(uint64_t a1, void *a2)
{
  *a2 = off_101A59F50;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB208C(uint64_t a1)
{
}

void sub_100DB2094(id *a1)
{
  operator delete(a1);
}

void sub_100DB20D0(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = +[NSNumber numberWithInteger:*a2];
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100DB213C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB2150(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A59FB0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB2190()
{
  return &off_101A59FB0;
}

uint64_t sub_100DB219C(uint64_t a1)
{
  return a1;
}

void sub_100DB21C8(uint64_t a1)
{
  operator delete();
}

void *sub_100DB2214(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A59FD0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB226C(uint64_t a1, void *a2)
{
  *a2 = off_101A59FD0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB22B4(uint64_t a1)
{
}

void sub_100DB22BC(id *a1)
{
  operator delete(a1);
}

void sub_100DB22F8(uint64_t a1, int *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  id v3 = +[NSNumber numberWithInteger:*a2];
  (*(void (**)(uint64_t))(v2 + 16))(v2);
}

void sub_100DB2364(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB2378(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A5A030)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB23B8()
{
  return &off_101A5A030;
}

uint64_t sub_100DB23C4(uint64_t a1)
{
  return a1;
}

void sub_100DB23F0(uint64_t a1)
{
  operator delete();
}

void *sub_100DB243C(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A5A050;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB2494(uint64_t a1, void *a2)
{
  *a2 = off_101A5A050;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB24DC(uint64_t a1)
{
}

void sub_100DB24E4(id *a1)
{
  operator delete(a1);
}

void sub_100DB2520(uint64_t a1, void *a2)
{
  uint64_t v2 = a2 + 1;
  id v3 = (void *)a2[1];
  BOOL v11 = (void **)*a2;
  uint64_t v12 = v3;
  if (a2[2])
  {
    v3[2] = &v12;
    *a2 = v2;
    void *v2 = 0;
    a2[2] = 0;
  }
  else
  {
    BOOL v11 = &v12;
  }
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v5 = objc_opt_new();
  uint64_t v6 = v11;
  if (v11 != &v12)
  {
    do
    {
      uint64_t v16 = 0;
      long long v17 = 0;
      uint64_t v14 = 0;
      id v15 = 0;
      sub_10005C928(&v14, v6[5], (uint64_t)v6[6], (char *)v6[6] - (char *)v6[5]);
      id v20 = 0;
      uint64_t v21 = 0;
      std::string __p = 0;
      sub_10005C928(&__p, v14, (uint64_t)v15, v15 - (unsigned char *)v14);
      uint64_t v18 = 0;
      uint64_t v22 = 0;
      long long v23 = 0;
      uint64_t v24 = 0;
      sub_10005C928(&v22, __p, (uint64_t)v20, v20 - (unsigned char *)__p);
      long long v25 = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v7 = v18;
        uint64_t v18 = v25;
        uint64_t v26 = v7;
        sub_100030068(&v26);
      }
      if (v22)
      {
        long long v23 = v22;
        operator delete(v22);
      }
      long long v17 = v18;
      uint64_t v18 = 0;
      sub_100030068(&v18);
      if (__p)
      {
        id v20 = __p;
        operator delete(__p);
      }
      if (v14)
      {
        id v15 = v14;
        operator delete(v14);
      }
      switch(*((_DWORD *)v6 + 8))
      {
        case 3:
          [v5 setSres:v17];
          break;
        case 4:
          [v5 setKc:v17];
          break;
        case 5:
          [v5 setRes:v17];
          break;
        case 6:
          [v5 setCk:v17];
          break;
        case 7:
          [v5 setIk:v17];
          break;
        case 9:
          [v5 setAuts:v17];
          break;
        default:
          break;
      }
      sub_100030068(&v17);
      long long v8 = v6[1];
      if (v8)
      {
        do
        {
          uint64_t v9 = (void **)v8;
          long long v8 = (void *)*v8;
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v9 = (void **)v6[2];
          BOOL v10 = *v9 == v6;
          uint64_t v6 = v9;
        }
        while (!v10);
      }
      uint64_t v6 = v9;
    }
    while (v9 != &v12);
  }
  (*(void (**)(uint64_t, void *, void))(v4 + 16))(v4, v5, 0);

  sub_10026CF54((uint64_t)&v11, v12);
}

void sub_100DB2750(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, uint64_t a13, uint64_t a14, char a15, int a16, __int16 a17, char a18, char a19, void *__p,uint64_t a21)
{
  sub_10026CF54((uint64_t)&a9, a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB27F4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A5A0B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB2834()
{
  return &off_101A5A0B0;
}

uint64_t sub_100DB2840(uint64_t a1)
{
  return a1;
}

void sub_100DB286C(uint64_t a1)
{
  operator delete();
}

void *sub_100DB28B8(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A5A0D0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB2910(uint64_t a1, void *a2)
{
  *a2 = off_101A5A0D0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB2958(uint64_t a1)
{
}

void sub_100DB2960(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DB299C(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100DB29B4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A5A130)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB29F4()
{
  return &off_101A5A130;
}

uint64_t sub_100DB2A00(uint64_t a1)
{
  return a1;
}

void sub_100DB2A2C(uint64_t a1)
{
  operator delete();
}

void *sub_100DB2A78(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A5A150;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB2AD0(uint64_t a1, void *a2)
{
  *a2 = off_101A5A150;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB2B18(uint64_t a1)
{
}

void sub_100DB2B20(id *a1)
{
  operator delete(a1);
}

void sub_100DB2B5C(uint64_t a1, unsigned char *a2)
{
  if (*a2)
  {
    uint64_t v3 = 0;
  }
  else
  {
    uint64_t v3 = +[NSError errorWithDomain:NSPOSIXErrorDomain code:35 userInfo:0];
  }
  id v4 = (id)v3;
  (*(void (**)(void))(*(void *)(a1 + 8) + 16))();
}

void sub_100DB2BE4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DB2BF8(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A5A1B0)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB2C38()
{
  return &off_101A5A1B0;
}

uint64_t sub_100DB2C44(uint64_t a1)
{
  return a1;
}

void sub_100DB2C70(uint64_t a1)
{
  operator delete();
}

void *sub_100DB2CBC(uint64_t a1)
{
  uint64_t v2 = operator new(0x10uLL);
  void *v2 = off_101A5A1D0;
  v2[1] = objc_retainBlock(*(id *)(a1 + 8));
  return v2;
}

id sub_100DB2D14(uint64_t a1, void *a2)
{
  *a2 = off_101A5A1D0;
  id result = objc_retainBlock(*(id *)(a1 + 8));
  a2[1] = result;
  return result;
}

void sub_100DB2D5C(uint64_t a1)
{
}

void sub_100DB2D64(id *a1)
{
  operator delete(a1);
}

uint64_t sub_100DB2DA0(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 8) + 16))();
}

uint64_t sub_100DB2DB4(uint64_t a1, uint64_t a2)
{
  if (sub_10006C624(a2, (uint64_t)&off_101A5A230)) {
    return a1 + 8;
  }
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB2DF4()
{
  return &off_101A5A230;
}

void sub_100DB2E00()
{
}

uint64_t sub_100DB2E28(uint64_t a1, long long *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "cp.db");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, &v6);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 8), (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
  *(void *)a1 = &off_101A5A270;
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 32), *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *(void *)(a1 + 48) = *((void *)a2 + 2);
    *(_OWORD *)(a1 + 32) = v4;
  }
  sub_100DB2F5C(a1);
  return a1;
}

void sub_100DB2EFC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, char a12)
{
  id v15 = (std::__shared_weak_count *)*((void *)v12 + 3);
  if (v15) {
    std::__shared_weak_count::__release_weak(v15);
  }
  CellularPlanDatabaseStoreInterface::~CellularPlanDatabaseStoreInterface(v12);
  ctu::OsLogLogger::~OsLogLogger(v13);
  _Unwind_Resume(a1);
}

void sub_100DB2F5C(uint64_t a1)
{
  uint64_t v35 = 0;
  __int16 v36 = 0;
  sub_100DB3CF4(&v35, a1);
  uint64_t v2 = v35;
  if (v35)
  {
    memset(&buf, 0, sizeof(buf));
    uint64_t v3 = v36;
    if (v36) {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100058DB0(&__p, "remote_subscription");
    sub_100DB634C(&buf, *(sqlite3 **)(v2 + 24), (uint64_t)&__p);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v3) {
      sub_10004D2C8(v3);
    }
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      int64_t size = buf.__r_.__value_.__l.__size_;
      if (buf.__r_.__value_.__l.__size_)
      {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        goto LABEL_15;
      }
    }
    else
    {
      int64_t size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
      if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
      {
        p_std::string buf = &buf;
LABEL_15:
        if (size >= 18)
        {
          uint64_t v7 = (char *)p_buf + size;
          long long v8 = p_buf;
          do
          {
            uint64_t v9 = (char *)memchr(v8, 32, size - 17);
            if (!v9) {
              break;
            }
            if (*(void *)v9 == 0x6E5F656E6F687020
              && *((void *)v9 + 1) == 0x4554207265626D75
              && *((_WORD *)v9 + 8) == 21592)
            {
              if (v9 != v7 && v9 - (char *)p_buf != -1) {
                goto LABEL_46;
              }
              break;
            }
            long long v8 = (std::string *)(v9 + 1);
            int64_t size = v7 - (char *)v8;
          }
          while (v7 - (char *)v8 >= 18);
        }
        if (v3) {
          atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        sub_100058DB0(&__p, "ALTER TABLE 'remote_subscription' ADD COLUMN phone_number TEXT DEFAULT '';");
        v40[3] = 0;
        BOOL v15 = sub_100DB43B0(*(sqlite3 **)(v2 + 24), (const char *)&__p, (uint64_t)v40);
        sub_100DB6784(v40);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (v3) {
          sub_10004D2C8(v3);
        }
        if (v15 || (long long v13 = *(NSObject **)(a1 + 8), !os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)))
        {
LABEL_46:
          if (!v3) {
            goto LABEL_48;
          }
          goto LABEL_47;
        }
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        uint64_t v14 = "Failed to add column to remote_subscription table";
LABEL_117:
        _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, v14, (uint8_t *)&__p, 2u);
        if (!v3)
        {
LABEL_48:
          sub_100058DB0(v31, "local_subscription");
          sub_100DB634C(&__p, *(sqlite3 **)(v2 + 24), (uint64_t)v31);
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(buf.__r_.__value_.__l.__data_);
          }
          std::string buf = __p;
          *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
          __p.__r_.__value_.__s.__data_[0] = 0;
          if (v32 < 0) {
            operator delete(v31[0]);
          }
          if (v3) {
            sub_10004D2C8(v3);
          }
          if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
          {
            int64_t v16 = buf.__r_.__value_.__l.__size_;
            if (buf.__r_.__value_.__l.__size_)
            {
              long long v17 = (std::string *)buf.__r_.__value_.__r.__words[0];
              goto LABEL_59;
            }
          }
          else
          {
            int64_t v16 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
            if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
            {
              long long v17 = &buf;
LABEL_59:
              if (v16 >= 18)
              {
                uint64_t v18 = (char *)v17 + v16;
                long long v19 = v17;
                do
                {
                  id v20 = (char *)memchr(v19, 32, v16 - 17);
                  if (!v20) {
                    break;
                  }
                  if (*(void *)v20 == 0x6E5F656E6F687020
                    && *((void *)v20 + 1) == 0x4554207265626D75
                    && *((_WORD *)v20 + 8) == 21592)
                  {
                    if (v20 != v18 && v20 - (char *)v17 != -1) {
                      goto LABEL_90;
                    }
                    break;
                  }
                  long long v19 = (std::string *)(v20 + 1);
                  int64_t v16 = v18 - (char *)v19;
                }
                while (v18 - (char *)v19 >= 18);
              }
              if (v3) {
                atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              sub_100058DB0(&__p, "ALTER TABLE 'local_subscription' ADD COLUMN phone_number TEXT DEFAULT '';");
              v38[3] = 0;
              BOOL v26 = sub_100DB43B0(*(sqlite3 **)(v2 + 24), (const char *)&__p, (uint64_t)v38);
              sub_100DB6784(v38);
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              if (v3) {
                sub_10004D2C8(v3);
              }
              if (v26 || (uint64_t v24 = *(NSObject **)(a1 + 8), !os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)))
              {
LABEL_90:
                if (!v3) {
                  goto LABEL_92;
                }
                goto LABEL_91;
              }
              LOWORD(__p.__r_.__value_.__l.__data_) = 0;
              long long v25 = "Failed to add column to local_subscription table";
LABEL_120:
              _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, v25, (uint8_t *)&__p, 2u);
              if (!v3)
              {
LABEL_92:
                sub_100058DB0(v31, "remote_plan");
                sub_100DB634C(&__p, *(sqlite3 **)(v2 + 24), (uint64_t)v31);
                if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                  operator delete(buf.__r_.__value_.__l.__data_);
                }
                std::string buf = __p;
                *((unsigned char *)&__p.__r_.__value_.__s + 23) = 0;
                __p.__r_.__value_.__s.__data_[0] = 0;
                if (v32 < 0)
                {
                  operator delete(v31[0]);
                  if (v3) {
                    goto LABEL_96;
                  }
                }
                else if (v3)
                {
LABEL_96:
                  sub_10004D2C8(v3);
                  std::string::size_type v27 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                    std::string::size_type v27 = buf.__r_.__value_.__l.__size_;
                  }
                  if (v27) {
                    goto LABEL_111;
                  }
                  atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
LABEL_104:
                  sub_100058DB0(&__p, "CREATE TABLE IF NOT EXISTS 'remote_plan' (keyName TEXT PRIMARY KEY, value BLOB);");
                  v37[3] = 0;
                  BOOL v29 = sub_100DB43B0(*(sqlite3 **)(v2 + 24), (const char *)&__p, (uint64_t)v37);
                  sub_100DB6784(v37);
                  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(__p.__r_.__value_.__l.__data_);
                  }
                  if (v3) {
                    sub_10004D2C8(v3);
                  }
                  if (!v29)
                  {
                    char v30 = *(NSObject **)(a1 + 8);
                    if (os_log_type_enabled(v30, OS_LOG_TYPE_ERROR))
                    {
                      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
                      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to create remote_plan table", (uint8_t *)&__p, 2u);
                    }
                  }
LABEL_111:
                  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
                    operator delete(buf.__r_.__value_.__l.__data_);
                  }
                  goto LABEL_113;
                }
                std::string::size_type v28 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
                if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                  std::string::size_type v28 = buf.__r_.__value_.__l.__size_;
                }
                if (v28) {
                  goto LABEL_111;
                }
                goto LABEL_104;
              }
LABEL_91:
              atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
              goto LABEL_92;
            }
          }
          if (v3) {
            atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          sub_100058DB0(&__p, "CREATE TABLE IF NOT EXISTS 'local_subscription' (timestamp DATETIME NOT NULL, iccid TEXT, status INTEGER, device_id TEXT NOT NULL, primary_iccid TEXT, manage_account_url TEXT, manage_account_postdata TEXT, plan_type INTEGER, smdp_address TEXT, present_in_response BOOL, is_alt_em_address_update_url BOOL, phone_number TEXT DEFAULT '', UNIQUE(iccid, device_id, primary_iccid));");
          v39[3] = 0;
          BOOL v23 = sub_100DB43B0(*(sqlite3 **)(v2 + 24), (const char *)&__p, (uint64_t)v39);
          sub_100DB6784(v39);
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          if (v3) {
            sub_10004D2C8(v3);
          }
          if (v23) {
            goto LABEL_90;
          }
          uint64_t v24 = *(NSObject **)(a1 + 8);
          if (!os_log_type_enabled(v24, OS_LOG_TYPE_ERROR)) {
            goto LABEL_90;
          }
          LOWORD(__p.__r_.__value_.__l.__data_) = 0;
          long long v25 = "Failed to create local_subscription table";
          goto LABEL_120;
        }
LABEL_47:
        atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
        goto LABEL_48;
      }
    }
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100058DB0(&__p, "CREATE TABLE IF NOT EXISTS 'remote_subscription' (timestamp DATETIME NOT NULL, iccid TEXT, status INTEGER, device_id TEXT NOT NULL, primary_iccid TEXT, manage_account_url TEXT, manage_account_postdata TEXT, plan_type INTEGER, smdp_address TEXT, present_in_response BOOL, is_alt_em_address_update_url BOOL, phone_number TEXT DEFAULT '', UNIQUE(iccid, device_id, primary_iccid));");
    v41[3] = 0;
    BOOL v12 = sub_100DB43B0(*(sqlite3 **)(v2 + 24), (const char *)&__p, (uint64_t)v41);
    sub_100DB6784(v41);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (v3) {
      sub_10004D2C8(v3);
    }
    if (v12) {
      goto LABEL_46;
    }
    long long v13 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v13, OS_LOG_TYPE_ERROR)) {
      goto LABEL_46;
    }
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    uint64_t v14 = "Failed to create remote_subscription table";
    goto LABEL_117;
  }
  OsLogContext v6 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "failed to create database session", (uint8_t *)&buf, 2u);
  }
LABEL_113:
  if (v36) {
    sub_10004D2C8(v36);
  }
}

void sub_100DB3608(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,char a39)
{
  sub_100DB6784(&a31);
  if (a21 < 0) {
    operator delete(__p);
  }
  if (v39) {
    sub_10004D2C8(v39);
  }
  if (a28 < 0) {
    operator delete(a23);
  }
  if (v39) {
    sub_10004D2C8(v39);
  }
  _Unwind_Resume(a1);
}

void **sub_100DB36F0(void **this)
{
  *this = &off_101A5A270;
  if (*((char *)this + 55) < 0) {
    operator delete(this[4]);
  }
  uint64_t v2 = (std::__shared_weak_count *)this[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  CellularPlanDatabaseStoreInterface::~CellularPlanDatabaseStoreInterface((CellularPlanDatabaseStoreInterface *)this);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(this + 1));
  return this;
}

void sub_100DB3760(void **a1)
{
  sub_100DB36F0(a1);

  operator delete();
}

void sub_100DB3798(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  if (sub_100DB3C28(a2, 1))
  {
    uint64_t v32 = 0;
    CFTypeRef v33 = 0;
    sub_100DB3CF4(&v32, a1);
    uint64_t v6 = v32;
    if (v32)
    {
      memset(&v31, 0, sizeof(v31));
      sub_100058DB0(&v31, "SELECT value");
      sub_100058DB0(&v30, "remote_plan");
      uint64_t v7 = std::string::insert(&v30, 0, " FROM ", 6uLL);
      long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
      uint64_t v35 = (std::string::__raw *)v7->__r_.__value_.__r.__words[2];
      *(_OWORD *)std::string __p = v8;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(v35) >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      if (SHIBYTE(v35) >= 0) {
        std::string::size_type v10 = HIBYTE(v35);
      }
      else {
        std::string::size_type v10 = (std::string::size_type)__p[1];
      }
      std::string::append(&v31, (const std::string::value_type *)v9, v10);
      if (SHIBYTE(v35) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v30.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v30.__r_.__value_.__l.__data_);
      }
      std::string::append(&v31, " WHERE keyName LIKE ?1;", 0x17uLL);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      ppStmt = 0;
      if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        BOOL v11 = &v31;
      }
      else {
        BOOL v11 = (std::string *)v31.__r_.__value_.__r.__words[0];
      }
      sqlite3_prepare_v2(*(sqlite3 **)(v6 + 24), (const char *)v11, -1, &ppStmt, 0);
      if (*(char *)(a2 + 23) >= 0) {
        BOOL v12 = (const char *)a2;
      }
      else {
        BOOL v12 = *(const char **)a2;
      }
      sqlite3_bind_text(ppStmt, 1, v12, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
      while (sqlite3_step(ppStmt) == 100)
      {
        long long v13 = sqlite3_column_blob(ppStmt, 0);
        int v14 = sqlite3_column_bytes(ppStmt, 0);
        memset(&v30, 0, sizeof(v30));
        sub_1001E7940(&v30, v13, (uint64_t)v13 + v14, v14);
        BOOL v15 = (std::string *)a3[1];
        unint64_t v16 = a3[2];
        if ((unint64_t)v15 >= v16)
        {
          unint64_t v17 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v15 - *a3) >> 3);
          unint64_t v18 = v17 + 1;
          if (v17 + 1 > 0xAAAAAAAAAAAAAAALL) {
            sub_100205700();
          }
          unint64_t v19 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v16 - *a3) >> 3);
          if (2 * v19 > v18) {
            unint64_t v18 = 2 * v19;
          }
          if (v19 >= 0x555555555555555) {
            unint64_t v20 = 0xAAAAAAAAAAAAAAALL;
          }
          else {
            unint64_t v20 = v18;
          }
          uint64_t v37 = a3 + 2;
          uint64_t v21 = (char *)sub_10004812C((uint64_t)(a3 + 2), v20);
          uint64_t v22 = (std::string *)&v21[24 * v17];
          __p[0] = v21;
          __p[1] = v22;
          __int16 v36 = &v21[24 * v23];
          v22->__r_.__value_.__r.__words[0] = 0;
          v22->__r_.__value_.__l.__size_ = 0;
          v22->__r_.__value_.__r.__words[2] = 0;
          *uint64_t v22 = v30;
          memset(&v30, 0, sizeof(v30));
          uint64_t v35 = (std::string::__raw *)&v22[1];
          sub_100205688(a3, __p);
          uint64_t v24 = a3[1];
          sub_100205838((uint64_t)__p);
          long long v25 = (void *)v30.__r_.__value_.__r.__words[0];
          a3[1] = v24;
          if (v25)
          {
            v30.__r_.__value_.__l.__size_ = (std::string::size_type)v25;
            operator delete(v25);
          }
        }
        else
        {
          v15->__r_.__value_.__r.__words[0] = 0;
          v15->__r_.__value_.__l.__size_ = 0;
          v15->__r_.__value_.__r.__words[2] = 0;
          *BOOL v15 = v30;
          a3[1] = (uint64_t)&v15[1];
        }
      }
      if (ppStmt) {
        sqlite3_finalize(ppStmt);
      }
      if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v31.__r_.__value_.__l.__data_);
      }
    }
    else
    {
      std::string::size_type v27 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p[0]) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_ERROR, "Missing session", (uint8_t *)__p, 2u);
      }
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
    }
    if (v33) {
      sub_10004D2C8(v33);
    }
  }
  else
  {
    BOOL v26 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v28 = (const char *)a2;
      }
      else {
        std::string::size_type v28 = *(const char **)a2;
      }
      LODWORD(__p[0]) = 136315138;
      *(void **)((char *)__p + 4) = (void *)v28;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Invalid key [%s] for SELECT", (uint8_t *)__p, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_100DB3B6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DB3C28(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = (unsigned char *)a1;
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v3 = *(void *)(a1 + 8);
    if (v3)
    {
      uint64_t v2 = *(unsigned char **)a1;
LABEL_6:
      while (1)
      {
        unsigned int v4 = (char)*v2;
        if (v4 <= 0x3B && ((1 << *v2) & 0x800008400000000) != 0) {
          break;
        }
        if ((v4 & 0x80000000) != 0)
        {
          if (!__maskrune((char)*v2, 0x40000uLL) || __maskrune(v4, 0x4000uLL)) {
            return 0;
          }
        }
        else
        {
          __uint32_t v6 = _DefaultRuneLocale.__runetype[v4];
          if ((v6 & 0x40000) == 0 || (v6 & 0x4000) != 0) {
            return 0;
          }
        }
        ++v2;
        if (!--v3) {
          return 1;
        }
      }
      return 0;
    }
  }
  else
  {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 23);
    if (*(unsigned char *)(a1 + 23)) {
      goto LABEL_6;
    }
  }
  return a2;
}

void sub_100DB3CF4(void *a1, uint64_t a2)
{
  unsigned int v4 = *(std::__shared_weak_count **)(a2 + 24);
  if (v4)
  {
    uint64_t v5 = std::__shared_weak_count::lock(v4);
    __uint32_t v6 = v5;
    if (v5)
    {
      uint64_t v7 = *(char **)(a2 + 16);
      long long v8 = (char *)v5;
      if (v7) {
        goto LABEL_15;
      }
    }
  }
  else
  {
    __uint32_t v6 = 0;
  }
  long long v8 = (char *)operator new(0x38uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)long long v8 = off_101A5A530;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)buf, kCtLoggingSystemName, "cp.db");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v15, (const OsLogContext *)buf);
  uint64_t v7 = v8 + 24;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(v8 + 24), (const ctu::OsLogLogger *)v15);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)buf);
  *((void *)v8 + 4) = 0;
  *((void *)v8 + 5) = 0;
  if (*(char *)(a2 + 55) >= 0) {
    uint64_t v9 = (const char *)(a2 + 32);
  }
  else {
    uint64_t v9 = *(const char **)(a2 + 32);
  }
  int v10 = sqlite3_open(v9, (sqlite3 **)v8 + 6);
  if (!v10 || (BOOL v11 = *(NSObject **)v7, !os_log_type_enabled(*(os_log_t *)v7, OS_LOG_TYPE_ERROR)))
  {
    if (!v6) {
      goto LABEL_13;
    }
    goto LABEL_12;
  }
  if (*(char *)(a2 + 55) >= 0) {
    uint64_t v14 = a2 + 32;
  }
  else {
    uint64_t v14 = *(void *)(a2 + 32);
  }
  *(_DWORD *)std::string buf = 136315394;
  uint64_t v17 = v14;
  __int16 v18 = 1024;
  int v19 = v10;
  _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "Unable to open db %s (%d)", buf, 0x12u);
  if (v6) {
LABEL_12:
  }
    sub_10004D2C8(v6);
LABEL_13:
  atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 2, 1uLL, memory_order_relaxed);
  BOOL v12 = *(std::__shared_weak_count **)(a2 + 24);
  *(void *)(a2 + 16) = v7;
  *(void *)(a2 + 24) = v8;
  if (v12) {
    std::__shared_weak_count::__release_weak(v12);
  }
LABEL_15:
  if (*((void *)v7 + 3))
  {
    *a1 = v7;
    a1[1] = v8;
  }
  else
  {
    long long v13 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Session not found", buf, 2u);
    }
    *a1 = 0;
    a1[1] = 0;
    sub_10004D2C8((std::__shared_weak_count *)v8);
  }
}

void sub_100DB3F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14)
{
  shared_weak_owners = (std::__shared_weak_count *)v14[1].__shared_weak_owners_;
  if (shared_weak_owners) {
    std::__shared_weak_count::__release_weak(shared_weak_owners);
  }
  ctu::OsLogLogger::~OsLogLogger(v16);
  std::__shared_weak_count::~__shared_weak_count(v14);
  operator delete(v19);
  if (v15) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(a1);
}

void sub_100DB3F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((sub_100DB3C28(a2, 1) & 1) == 0)
  {
    BOOL v12 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v12, OS_LOG_TYPE_ERROR)) {
      return;
    }
    if (*(char *)(a2 + 23) >= 0) {
      long long v13 = (void *)a2;
    }
    else {
      long long v13 = *(void **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v13;
    uint64_t v14 = "Invalid key [%s] for REPLACE";
    BOOL v15 = v12;
    uint32_t v16 = 12;
    goto LABEL_15;
  }
  if (*(void *)(a3 + 8) == *(void *)a3)
  {
    uint64_t v17 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v17, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v14 = "Empty value, skip";
    BOOL v15 = v17;
    uint32_t v16 = 2;
LABEL_15:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v14, buf, v16);
    return;
  }
  uint64_t v30 = 0;
  std::string v31 = 0;
  sub_100DB3CF4(&v30, a1);
  uint64_t v7 = v30;
  __uint32_t v6 = v31;
  if (!v30) {
    goto LABEL_34;
  }
  if (v31) {
    atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&v28, "remote_plan");
  long long v8 = std::string::insert(&v28, 0, "REPLACE INTO ", 0xDuLL);
  long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
  v29.__r_.__value_.__r.__words[2] = v8->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v29.__r_.__value_.__l.__data_ = v9;
  v8->__r_.__value_.__l.__size_ = 0;
  v8->__r_.__value_.__r.__words[2] = 0;
  v8->__r_.__value_.__r.__words[0] = 0;
  int v10 = std::string::append(&v29, " VALUES(?1, ?2);", 0x10uLL);
  long long v11 = *(_OWORD *)&v10->__r_.__value_.__l.__data_;
  std::string::size_type v35 = v10->__r_.__value_.__r.__words[2];
  *(_OWORD *)std::string buf = v11;
  v10->__r_.__value_.__l.__size_ = 0;
  v10->__r_.__value_.__r.__words[2] = 0;
  v10->__r_.__value_.__r.__words[0] = 0;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v23, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v23 = *(_OWORD *)a2;
    uint64_t v24 = *(void *)(a2 + 16);
  }
  std::string __p = 0;
  BOOL v26 = 0;
  uint64_t v27 = 0;
  sub_10005C928(&__p, *(const void **)a3, *(void *)(a3 + 8), *(void *)(a3 + 8) - *(void *)a3);
  CFTypeRef v33 = 0;
  __int16 v18 = (char *)operator new(0x38uLL);
  int v19 = v18;
  *(void *)__int16 v18 = off_101A5A320;
  if (SHIBYTE(v24) < 0)
  {
    sub_10004FC84(v18 + 8, v23[0], (unint64_t)v23[1]);
  }
  else
  {
    *(_OWORD *)(v18 + 8) = *(_OWORD *)v23;
    *((void *)v18 + 3) = v24;
  }
  v19[4] = 0;
  v19[5] = 0;
  v19[6] = 0;
  sub_10005C928(v19 + 4, __p, (uint64_t)v26, v26 - (unsigned char *)__p);
  CFTypeRef v33 = v19;
  BOOL v20 = sub_100DB43B0(*(sqlite3 **)(v7 + 24), (const char *)buf, (uint64_t)v32);
  sub_100DB6784(v32);
  if (__p)
  {
    BOOL v26 = __p;
    operator delete(__p);
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v23[0]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v29.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v29.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v28.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v28.__r_.__value_.__l.__data_);
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v20 || (uint64_t v21 = *(NSObject **)(a1 + 8), !os_log_type_enabled(v21, OS_LOG_TYPE_ERROR)))
  {
LABEL_34:
    if (!v6) {
      return;
    }
    goto LABEL_35;
  }
  if (*(char *)(a2 + 23) >= 0) {
    uint64_t v22 = (void *)a2;
  }
  else {
    uint64_t v22 = *(void **)a2;
  }
  *(_DWORD *)std::string buf = 136315138;
  *(void *)&uint8_t buf[4] = v22;
  _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to update value for %s", buf, 0xCu);
  if (v6) {
LABEL_35:
  }
    sub_10004D2C8(v6);
}

void sub_100DB42E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,uint64_t a32,uint64_t a33,char a34)
{
  operator delete(v35);
  sub_1002BEAFC((uint64_t)&a9);
  if (*(char *)(v36 - 73) < 0) {
    operator delete(*(void **)(v36 - 96));
  }
  if (a30 < 0) {
    operator delete(__p);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (v34)
  {
    sub_10004D2C8(v34);
    sub_10004D2C8(v34);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100DB43B0(sqlite3 *a1, const char *a2, uint64_t a3)
{
  pStmt = 0;
  if (a2[23] < 0) {
    a2 = *(const char **)a2;
  }
  sqlite3_prepare_v2(a1, a2, -1, &pStmt, 0);
  uint64_t v4 = *(void *)(a3 + 24);
  if (v4)
  {
    long long v8 = pStmt;
    (*(void (**)(uint64_t, sqlite3_stmt **))(*(void *)v4 + 48))(v4, &v8);
  }
  BOOL v5 = sqlite3_step(pStmt) == 101;
  sqlite3_finalize(pStmt);
  return v5;
}

void sub_100DB4450(uint64_t a1, uint64_t a2)
{
  if (sub_100DB3C28(a2, 1))
  {
    uint64_t v21 = 0;
    uint64_t v22 = 0;
    sub_100DB3CF4(&v21, a1);
    uint64_t v5 = v21;
    uint64_t v4 = v22;
    if (!v21) {
      goto LABEL_28;
    }
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100058DB0(&v19, "remote_plan");
    __uint32_t v6 = std::string::insert(&v19, 0, "DELETE from '", 0xDuLL);
    long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
    v20.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v7;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    long long v8 = std::string::append(&v20, "' WHERE keyName = ?;", 0x14uLL);
    long long v9 = *(_OWORD *)&v8->__r_.__value_.__l.__data_;
    std::string::size_type v26 = v8->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string buf = v9;
    v8->__r_.__value_.__l.__size_ = 0;
    v8->__r_.__value_.__r.__words[2] = 0;
    v8->__r_.__value_.__r.__words[0] = 0;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v18 = *(void *)(a2 + 16);
    }
    uint64_t v24 = 0;
    BOOL v12 = operator new(0x20uLL);
    void *v12 = off_101A5A3B0;
    long long v13 = v12 + 1;
    if (SHIBYTE(v18) < 0)
    {
      sub_10004FC84(v13, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      *(_OWORD *)long long v13 = *(_OWORD *)__p;
      void v12[3] = v18;
    }
    uint64_t v24 = v12;
    BOOL v14 = sub_100DB43B0(*(sqlite3 **)(v5 + 24), (const char *)buf, (uint64_t)v23);
    sub_100DB6784(v23);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v20.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v19.__r_.__value_.__l.__data_);
    }
    if (v4) {
      sub_10004D2C8(v4);
    }
    if (v14 || (BOOL v15 = *(NSObject **)(a1 + 8), !os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)))
    {
LABEL_28:
      if (!v4) {
        return;
      }
      goto LABEL_29;
    }
    if (*(char *)(a2 + 23) >= 0) {
      uint32_t v16 = (void *)a2;
    }
    else {
      uint32_t v16 = *(void **)a2;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, "Failed to update value for %s", buf, 0xCu);
    if (v4) {
LABEL_29:
    }
      sub_10004D2C8(v4);
  }
  else
  {
    int v10 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a2 + 23) >= 0) {
        long long v11 = (void *)a2;
      }
      else {
        long long v11 = *(void **)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v11;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Invalid key [%s] for DELETE", buf, 0xCu);
    }
  }
}

void sub_100DB4710(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *a21,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,char a30)
{
  operator delete(v31);
  if (a14 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v32 - 57) < 0) {
    operator delete(*(void **)(v32 - 80));
  }
  if (a26 < 0) {
    operator delete(a21);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  if (v30)
  {
    sub_10004D2C8(v30);
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(a1);
}

void sub_100DB47B8(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (sub_100DB49FC(a2, 0))
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = 0;
    sub_100058DB0(&__p, "iccid");
    sub_100DB4A5C((uint64_t *)buf, a1, (uint64_t)&__p, (uint64_t)a2, 1);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_100058DB0(v8, "iccid");
    sub_100DB4A5C((uint64_t *)&__p, a1, (uint64_t)v8, (uint64_t)a2, 0);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (*(void *)&buf[8] == *(void *)buf)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_1005E6A50(a3, (uint64_t)__p, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)__p) >> 6));
    }
    else
    {
      sub_100DB5060((uint64_t)buf, (uint64_t)__p, v11);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      a3[2] = v14;
      uint64_t v14 = 0;
      memset(buf, 0, sizeof(buf));
    }
    v8[0] = &__p;
    sub_10023FDC8((void ***)v8);
    std::string __p = buf;
    sub_10023FDC8((void ***)&__p);
  }
  else
  {
    __uint32_t v6 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        long long v7 = a2;
      }
      else {
        long long v7 = *(char **)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid iccid: [%s] for SELECT", buf, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_100DB4990(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::string __p = &a15;
  sub_10023FDC8((void ***)&__p);
  a15 = &a21;
  sub_10023FDC8((void ***)&a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB49FC(char *a1, uint64_t a2)
{
  if (a1[23] < 0)
  {
    uint64_t v2 = *((void *)a1 + 1);
    if (v2)
    {
      a1 = *(char **)a1;
      goto LABEL_6;
    }
  }
  else
  {
    uint64_t v2 = a1[23];
    if (a1[23])
    {
LABEL_6:
      while ((*a1 & 0x80000000) == 0 && (_DefaultRuneLocale.__runetype[*a1] & 0x10000) != 0)
      {
        ++a1;
        if (!--v2) {
          return 1;
        }
      }
      return 0;
    }
  }
  return a2;
}

void sub_100DB4A5C(uint64_t *a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  uint64_t v56 = 0;
  unsigned int v57 = 0;
  sub_100DB3CF4(&v56, a2);
  uint64_t v9 = v56;
  if (v56)
  {
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
    memset(&v55, 0, sizeof(v55));
    sub_100058DB0(&v55, "SELECT timestamp, iccid, status, device_id, plan_type, primary_iccid, smdp_address, manage_account_url, manage_account_postdata, is_alt_em_address_update_url, present_in_response, phone_number");
    if (a5) {
      int v10 = "local_subscription";
    }
    else {
      int v10 = "remote_subscription";
    }
    uint64_t v11 = (std::string *)sub_100058DB0(&__str, v10);
    uint64_t v12 = std::string::insert(v11, 0, " FROM ", 6uLL);
    long long v13 = *(_OWORD *)&v12->__r_.__value_.__l.__data_;
    *(void *)&long long v42 = *((void *)&v12->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v13;
    v12->__r_.__value_.__l.__size_ = 0;
    v12->__r_.__value_.__r.__words[2] = 0;
    v12->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v42) & 0x80u) == 0) {
      uint64_t v14 = __p;
    }
    else {
      uint64_t v14 = (void **)__p[0];
    }
    if ((SBYTE7(v42) & 0x80u) == 0) {
      std::string::size_type v15 = BYTE7(v42);
    }
    else {
      std::string::size_type v15 = (std::string::size_type)__p[1];
    }
    std::string::append(&v55, (const std::string::value_type *)v14, v15);
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    std::operator+<char>();
    uint32_t v16 = std::string::append(&__str, " = ?1 ORDER BY timestamp DESC;", 0x1EuLL);
    long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
    *(void *)&long long v42 = *((void *)&v16->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v17;
    v16->__r_.__value_.__l.__size_ = 0;
    v16->__r_.__value_.__r.__words[2] = 0;
    v16->__r_.__value_.__r.__words[0] = 0;
    if ((SBYTE7(v42) & 0x80u) == 0) {
      uint64_t v18 = __p;
    }
    else {
      uint64_t v18 = (void **)__p[0];
    }
    if ((SBYTE7(v42) & 0x80u) == 0) {
      std::string::size_type v19 = BYTE7(v42);
    }
    else {
      std::string::size_type v19 = (std::string::size_type)__p[1];
    }
    std::string::append(&v55, (const std::string::value_type *)v18, v19);
    if (SBYTE7(v42) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    ppStmt = 0;
    if ((v55.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string v20 = &v55;
    }
    else {
      std::string v20 = (std::string *)v55.__r_.__value_.__r.__words[0];
    }
    sqlite3_prepare_v2(*(sqlite3 **)(v9 + 24), (const char *)v20, -1, &ppStmt, 0);
    if (*(char *)(a4 + 23) >= 0) {
      uint64_t v21 = (const char *)a4;
    }
    else {
      uint64_t v21 = *(const char **)a4;
    }
    sqlite3_bind_text(ppStmt, 1, v21, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    while (sqlite3_step(ppStmt) == 100)
    {
      *(_OWORD *)int v51 = 0u;
      long long v52 = 0u;
      *(_OWORD *)int v49 = 0u;
      long long v50 = 0u;
      long long v47 = 0u;
      *(_OWORD *)uint64_t v48 = 0u;
      *(_OWORD *)uint64_t v45 = 0u;
      *(_OWORD *)char v46 = 0u;
      *(_OWORD *)uint64_t v43 = 0u;
      long long v44 = 0u;
      *(_OWORD *)std::string __p = 0u;
      long long v42 = 0u;
      BYTE9(v52) = 1;
      __p[0] = COERCE_VOID_(sqlite3_column_double(ppStmt, 0));
      uint64_t v22 = (char *)sqlite3_column_text(ppStmt, 1);
      sub_10003ED78((std::string *)v43, v22);
      BYTE8(v44) = sqlite3_column_int(ppStmt, 2);
      uint64_t v23 = (char *)sqlite3_column_text(ppStmt, 3);
      sub_10003ED78((std::string *)&__p[1], v23);
      BYTE9(v44) = sqlite3_column_int(ppStmt, 4);
      uint64_t v24 = (char *)sqlite3_column_text(ppStmt, 5);
      sub_10003ED78((std::string *)v45, v24);
      long long v25 = (char *)sqlite3_column_text(ppStmt, 6);
      sub_10003ED78((std::string *)v48, v25);
      std::string::size_type v26 = (char *)sqlite3_column_text(ppStmt, 7);
      sub_10003ED78((std::string *)&v49[1], v26);
      BYTE8(v52) = sqlite3_column_int(ppStmt, 9) != 0;
      BYTE9(v52) = sqlite3_column_int(ppStmt, 10) != 0;
      uint64_t v27 = (char *)sqlite3_column_text(ppStmt, 11);
      sub_10003ED78((std::string *)&v46[1], v27);
      memset(&__str, 0, sizeof(__str));
      std::string v28 = (char *)sqlite3_column_text(ppStmt, 8);
      sub_100058DB0(&__str, v28);
      id v38 = 0;
      CFTypeRef v39 = 0;
      uint64_t v40 = 0;
      ctu::base64::decode();
      uint64_t v30 = (char *)v38;
      std::string v29 = v39;
      if (v38 != v39)
      {
        while (1)
        {
          uint64_t v31 = *v30;
          if (!(*v30 < 0 ? __maskrune(v31, 0x40000uLL) : _DefaultRuneLocale.__runetype[v31] & 0x40000)) {
            break;
          }
          if (++v30 == v29)
          {
            sub_10012CD04(&v36, (char *)v38, v39, v39 - (unsigned char *)v38);
            if (SBYTE7(v52) < 0) {
              operator delete(v51[0]);
            }
            *(_OWORD *)int v51 = v36;
            *(void *)&long long v52 = v37;
            goto LABEL_43;
          }
        }
      }
      std::string::operator=((std::string *)v51, &__str);
LABEL_43:
      unint64_t v33 = a1[1];
      if (v33 >= a1[2])
      {
        uint64_t v34 = sub_1003DBC84(a1, (uint64_t)__p);
      }
      else
      {
        sub_10023FB90(a1[1], (uint64_t)__p);
        uint64_t v34 = v33 + 192;
        a1[1] = v33 + 192;
      }
      a1[1] = v34;
      if (v38)
      {
        CFTypeRef v39 = (char *)v38;
        operator delete(v38);
      }
      if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__str.__r_.__value_.__l.__data_);
      }
      if (SBYTE7(v52) < 0) {
        operator delete(v51[0]);
      }
      if (SHIBYTE(v50) < 0) {
        operator delete(v49[1]);
      }
      if (SHIBYTE(v49[0]) < 0) {
        operator delete(v48[0]);
      }
      if (SHIBYTE(v47) < 0) {
        operator delete(v46[1]);
      }
      if (SHIBYTE(v46[0]) < 0) {
        operator delete(v45[0]);
      }
      if (SBYTE7(v44) < 0) {
        operator delete(v43[0]);
      }
      if (SHIBYTE(v42) < 0) {
        operator delete(__p[1]);
      }
    }
    if (ppStmt) {
      sqlite3_finalize(ppStmt);
    }
    if (SHIBYTE(v55.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v55.__r_.__value_.__l.__data_);
    }
  }
  else
  {
    std::string::size_type v35 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v35, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__p[0]) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_ERROR, "Cannot find database session", (uint8_t *)__p, 2u);
    }
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
  if (v57) {
    sub_10004D2C8(v57);
  }
}

void sub_100DB4F88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v22 - 129) < 0) {
    operator delete(*(void **)(v22 - 152));
  }
  if (*(char *)(v22 - 105) < 0) {
    operator delete(*(void **)(v22 - 128));
  }
  sub_10023FDC8((void ***)&__p);
  uint64_t v24 = *(std::__shared_weak_count **)(v22 - 96);
  if (v24) {
    sub_10004D2C8(v24);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DB5060(uint64_t result, uint64_t a2, uint64_t a3)
{
  if (a2 != a3)
  {
    uint64_t v4 = a2;
    uint64_t v5 = (uint64_t *)result;
    do
    {
      unint64_t v6 = *v5;
      unint64_t v7 = v5[1];
      if (*(char *)(v4 + 55) < 0)
      {
        sub_10004FC84(__p, *(void **)(v4 + 32), *(void *)(v4 + 40));
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)(v4 + 32);
        uint64_t v15 = *(void *)(v4 + 48);
      }
      char v8 = HIBYTE(v15);
      if (v6 != v7)
      {
        if (v15 >= 0) {
          uint64_t v9 = (void *)HIBYTE(v15);
        }
        else {
          uint64_t v9 = __p[1];
        }
        if (v15 >= 0) {
          int v10 = __p;
        }
        else {
          int v10 = (void **)__p[0];
        }
        do
        {
          uint64_t v11 = *(unsigned __int8 *)(v6 + 55);
          if ((v11 & 0x80u) == 0) {
            uint64_t v12 = (void *)*(unsigned __int8 *)(v6 + 55);
          }
          else {
            uint64_t v12 = *(void **)(v6 + 40);
          }
          if (v12 == v9)
          {
            if ((v11 & 0x80) != 0)
            {
              if (!memcmp(*(const void **)(v6 + 32), v10, *(void *)(v6 + 40))) {
                goto LABEL_26;
              }
            }
            else
            {
              if (!*(unsigned char *)(v6 + 55)) {
                goto LABEL_26;
              }
              uint64_t v13 = 0;
              while (*(unsigned __int8 *)(v6 + v13 + 32) == *((unsigned __int8 *)v10 + v13))
              {
                if (v11 == ++v13) {
                  goto LABEL_26;
                }
              }
            }
          }
          v6 += 192;
        }
        while (v6 != v7);
        unint64_t v6 = v7;
      }
LABEL_26:
      if (v8 < 0) {
        operator delete(__p[0]);
      }
      if (v6 == v5[1])
      {
        if (v6 >= v5[2])
        {
          id result = sub_1003DD108(v5, v4);
        }
        else
        {
          sub_10023FB90(v6, v4);
          id result = v6 + 192;
          v5[1] = v6 + 192;
        }
        v5[1] = result;
      }
      else
      {
        id result = CellularPlanEntitlementSubscriptionDetails::merge((CellularPlanEntitlementSubscriptionDetails *)v6, (const CellularPlanEntitlementSubscriptionDetails *)v4);
      }
      v4 += 192;
    }
    while (v4 != a3);
  }
  return result;
}

void sub_100DB51E0(_Unwind_Exception *a1)
{
  *(void *)(v1 + 8) = v2;
  _Unwind_Resume(a1);
}

void sub_100DB51E8(uint64_t a1@<X0>, char *a2@<X1>, int a3@<W2>, uint64_t *a4@<X8>)
{
  if (sub_100DB49FC(a2, 0))
  {
    sub_100058DB0(__p, "iccid");
    sub_100DB4A5C(a4, a1, (uint64_t)__p, (uint64_t)a2, a3);
    if (v11 < 0) {
      operator delete(*(void **)__p);
    }
  }
  else
  {
    char v8 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        uint64_t v9 = a2;
      }
      else {
        uint64_t v9 = *(char **)a2;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v9;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Invalid iccid: [%s] for SELECT", __p, 0xCu);
    }
    *a4 = 0;
    a4[1] = 0;
    a4[2] = 0;
  }
}

void sub_100DB5300(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DB5324(uint64_t a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  if (sub_100DB49FC(a2, 0))
  {
    memset(buf, 0, sizeof(buf));
    uint64_t v14 = 0;
    sub_100058DB0(&__p, "primary_iccid");
    sub_100DB4A5C((uint64_t *)buf, a1, (uint64_t)&__p, (uint64_t)a2, 1);
    if (SHIBYTE(v12) < 0) {
      operator delete(__p);
    }
    std::string __p = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_100058DB0(v8, "primary_iccid");
    sub_100DB4A5C((uint64_t *)&__p, a1, (uint64_t)v8, (uint64_t)a2, 0);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (*(void *)&buf[8] == *(void *)buf)
    {
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      sub_1005E6A50(a3, (uint64_t)__p, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)__p) >> 6));
    }
    else
    {
      sub_100DB5060((uint64_t)buf, (uint64_t)__p, v11);
      *(_OWORD *)a3 = *(_OWORD *)buf;
      a3[2] = v14;
      uint64_t v14 = 0;
      memset(buf, 0, sizeof(buf));
    }
    v8[0] = &__p;
    sub_10023FDC8((void ***)v8);
    std::string __p = buf;
    sub_10023FDC8((void ***)&__p);
  }
  else
  {
    unint64_t v6 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_ERROR))
    {
      if (a2[23] >= 0) {
        unint64_t v7 = a2;
      }
      else {
        unint64_t v7 = *(char **)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v7;
      _os_log_error_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_ERROR, "Invalid primaryIccid: [%s] for SELECT", buf, 0xCu);
    }
    *a3 = 0;
    a3[1] = 0;
    a3[2] = 0;
  }
}

void sub_100DB54FC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, char **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, char *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,char a21)
{
  std::string __p = &a15;
  sub_10023FDC8((void ***)&__p);
  a15 = &a21;
  sub_10023FDC8((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_100DB5568(uint64_t a1@<X0>, uint64_t a2@<X1>, __int16 a3@<W2>, uint64_t *a4@<X8>)
{
  if ((a3 & 0xFF00) != 0)
  {
    char v7 = a3;
    sub_100058DB0(__p, "device_id");
    sub_100DB4A5C(a4, a1, (uint64_t)__p, a2, v7 != 0);
    if (SHIBYTE(v14) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    __p[0] = 0;
    __p[1] = 0;
    uint64_t v14 = 0;
    sub_100058DB0(&v10, "device_id");
    sub_100DB4A5C((uint64_t *)__p, a1, (uint64_t)&v10, a2, 1);
    if (SHIBYTE(v12) < 0) {
      operator delete(v10);
    }
    int v10 = 0;
    uint64_t v11 = 0;
    uint64_t v12 = 0;
    sub_100058DB0(v8, "device_id");
    sub_100DB4A5C((uint64_t *)&v10, a1, (uint64_t)v8, a2, 0);
    if (v9 < 0) {
      operator delete(v8[0]);
    }
    if (__p[1] == __p[0])
    {
      *a4 = 0;
      a4[1] = 0;
      a4[2] = 0;
      sub_1005E6A50(a4, (uint64_t)v10, v11, 0xAAAAAAAAAAAAAAABLL * ((v11 - (uint64_t)v10) >> 6));
    }
    else
    {
      sub_100DB5060((uint64_t)__p, (uint64_t)v10, v11);
      *(_OWORD *)a4 = *(_OWORD *)__p;
      a4[2] = v14;
      __p[1] = 0;
      uint64_t v14 = 0;
      __p[0] = 0;
    }
    v8[0] = &v10;
    sub_10023FDC8((void ***)v8);
    int v10 = __p;
    sub_10023FDC8((void ***)&v10);
  }
}

void sub_100DB56E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t **__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  std::string __p = &a15;
  sub_10023FDC8((void ***)&__p);
  a15 = &a21;
  sub_10023FDC8((void ***)&a15);
  _Unwind_Resume(a1);
}

void sub_100DB5760(uint64_t a1, uint64_t *a2, int a3)
{
  uint64_t v43 = 0;
  long long v44 = 0;
  sub_100DB3CF4(&v43, a1);
  if (v43)
  {
    uint64_t v24 = v43;
    v41[0] = 0;
    v41[1] = 0;
    uint64_t v42 = 0;
    if (a3) {
      unint64_t v6 = "local_subscription";
    }
    else {
      unint64_t v6 = "remote_subscription";
    }
    sub_100058DB0(v41, v6);
    uint64_t v8 = *a2;
    uint64_t v7 = a2[1];
    if (v8 != v7)
    {
      char v9 = v44;
      int v10 = v44;
      do
      {
        uint64_t v11 = (void *)(v8 + 32);
        if (!sub_100DB49FC((char *)(v8 + 32), 1)) {
          goto LABEL_49;
        }
        uint64_t v12 = (void *)(v8 + 8);
        if (!sub_100DB49FC((char *)(v8 + 8), 0)) {
          goto LABEL_49;
        }
        uint64_t v13 = (void *)(v8 + 64);
        if (!sub_100DB49FC((char *)(v8 + 64), 1)) {
          goto LABEL_49;
        }
        uint64_t v14 = *(unsigned __int8 *)(v8 + 55);
        if ((v14 & 0x80u) != 0) {
          uint64_t v14 = *(void *)(v8 + 40);
        }
        if (!v14)
        {
          uint64_t v15 = *(unsigned __int8 *)(v8 + 87);
          if ((v15 & 0x80u) != 0) {
            uint64_t v15 = *(void *)(v8 + 72);
          }
          if (!v15) {
            goto LABEL_49;
          }
        }
        if sub_100DB3C28(v8 + 112, 1) && (sub_100DB3C28(v8 + 136, 1))
        {
          if (v9) {
            atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::operator+<char>();
          uint32_t v16 = std::string::append(&v40, " (timestamp, iccid, status, device_id, plan_type, primary_iccid, smdp_address, manage_account_url, manage_account_postdata, is_alt_em_address_update_url, present_in_response, phone_number) VALUES (?1, ?2, ?3, ?4, ?5, ?6, ?7, ?8, ?9, ?10, ?11, ?12);",
                  0xF8uLL);
          long long v17 = *(_OWORD *)&v16->__r_.__value_.__l.__data_;
          *(void *)&uint8_t buf[16] = *((void *)&v16->__r_.__value_.__l + 2);
          *(_OWORD *)std::string buf = v17;
          v16->__r_.__value_.__l.__size_ = 0;
          v16->__r_.__value_.__r.__words[2] = 0;
          v16->__r_.__value_.__r.__words[0] = 0;
          sub_10023FB90((uint64_t)v25, v8);
          char v46 = 0;
          uint64_t v18 = operator new(0xC8uLL);
          *uint64_t v18 = off_101A5A430;
          sub_10023FB90((uint64_t)(v18 + 1), (uint64_t)v25);
          char v46 = v18;
          BOOL v19 = sub_100DB43B0(*(sqlite3 **)(v24 + 24), buf, (uint64_t)v45);
          sub_100DB6784(v45);
          if (v39 < 0) {
            operator delete(__p);
          }
          if (v37 < 0) {
            operator delete(v36);
          }
          if (v35 < 0) {
            operator delete(v34);
          }
          if (v33 < 0) {
            operator delete(v32);
          }
          if (v31 < 0) {
            operator delete(v30);
          }
          if (v29 < 0) {
            operator delete(v28);
          }
          if (v27 < 0) {
            operator delete(v26);
          }
          if ((buf[23] & 0x80000000) != 0) {
            operator delete(*(void **)buf);
          }
          if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v40.__r_.__value_.__l.__data_);
          }
          if (v10) {
            sub_10004D2C8(v10);
          }
          if (!v19)
          {
            std::string v20 = *(NSObject **)(a1 + 8);
            if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
            {
              if (*(char *)(v8 + 31) < 0) {
                uint64_t v12 = (void *)*v12;
              }
              if (*(char *)(v8 + 55) < 0) {
                uint64_t v11 = (void *)*v11;
              }
              if (*(char *)(v8 + 87) < 0) {
                uint64_t v13 = (void *)*v13;
              }
              *(_DWORD *)std::string buf = 136315650;
              *(void *)&uint8_t buf[4] = v12;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = v11;
              *(_WORD *)&unsigned char buf[22] = 2080;
              uint64_t v48 = v13;
              _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to update details - deviceId: [%s], iccid: [%s] primary: [%s]", buf, 0x20u);
            }
          }
        }
        else
        {
LABEL_49:
          uint64_t v21 = *(NSObject **)(a1 + 8);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v22 = (void *)(v8 + 8);
            if (*(char *)(v8 + 31) < 0) {
              uint64_t v22 = (void *)*v22;
            }
            if (*(char *)(v8 + 55) < 0) {
              uint64_t v11 = (void *)*v11;
            }
            uint64_t v23 = (void *)(v8 + 64);
            if (*(char *)(v8 + 87) < 0) {
              uint64_t v23 = (void *)*v23;
            }
            *(_DWORD *)std::string buf = 136315650;
            *(void *)&uint8_t buf[4] = v22;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v11;
            *(_WORD *)&unsigned char buf[22] = 2080;
            uint64_t v48 = v23;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I invalid data for [%s][%s][%s] , skipping", buf, 0x20u);
          }
        }
        v8 += 192;
        char v9 = v10;
      }
      while (v8 != v7);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
  }
  if (v44) {
    sub_10004D2C8(v44);
  }
}

void sub_100DB5B50(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  sub_100DB6784((void *)(v43 - 176));
  sub_1000C62D8((uint64_t)&a13);
  if (*(char *)(v43 - 121) < 0) {
    operator delete(*(void **)(v43 - 144));
  }
  if (a42 < 0) {
    operator delete(__p);
  }
  if (v42) {
    sub_10004D2C8(v42);
  }
  if (*(char *)(v43 - 193) < 0) {
    operator delete(*(void **)(v43 - 216));
  }
  if (v42) {
    sub_10004D2C8(v42);
  }
  _Unwind_Resume(a1);
}

void sub_100DB5C00(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  sub_100DB3CF4(&v53, a1);
  uint64_t v6 = v53;
  if (!v53) {
    goto LABEL_88;
  }
  memset(&v52, 0, sizeof(v52));
  if (sub_100DB3C28(a2, 0))
  {
    std::string::append(&v52, "primary_iccid = ?", 0x11uLL);
  }
  else
  {
    uint64_t v7 = *(unsigned __int8 *)(a2 + 23);
    int v8 = (char)v7;
    if ((v7 & 0x80u) != 0) {
      uint64_t v7 = *(void *)(a2 + 8);
    }
    if (v7)
    {
      char v9 = *(NSObject **)(a1 + 8);
      if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
        goto LABEL_86;
      }
      int v10 = *(void **)a2;
      if (v8 >= 0) {
        int v10 = (void *)a2;
      }
      *(_DWORD *)std::string buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      uint64_t v11 = "Invalid Primary ICCID: (%s)";
LABEL_24:
      long long v17 = v9;
      uint32_t v18 = 12;
LABEL_62:
      _os_log_error_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_ERROR, v11, buf, v18);
      goto LABEL_86;
    }
  }
  uint64_t v12 = (_OWORD *)(a2 + 24);
  if (sub_100DB3C28(a2 + 24, 0))
  {
    std::string::size_type size = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type size = v52.__r_.__value_.__l.__size_;
    }
    if (size) {
      std::string::append(&v52, " AND ", 5uLL);
    }
    std::string::append(&v52, "iccid = ?", 9uLL);
    goto LABEL_25;
  }
  uint64_t v14 = *(unsigned __int8 *)(a2 + 47);
  int v15 = (char)v14;
  if ((v14 & 0x80u) != 0) {
    uint64_t v14 = *(void *)(a2 + 32);
  }
  if (v14)
  {
    char v9 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_ERROR)) {
      goto LABEL_86;
    }
    uint64_t v16 = *(void *)v12;
    if (v15 >= 0) {
      uint64_t v16 = a2 + 24;
    }
    *(_DWORD *)std::string buf = 136315138;
    *(void *)&uint8_t buf[4] = v16;
    uint64_t v11 = "Invalid ICCID: (%s)";
    goto LABEL_24;
  }
LABEL_25:
  if (*(void *)(a2 + 48) != *(void *)(a2 + 56))
  {
    std::string::size_type v19 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      std::string::size_type v19 = v52.__r_.__value_.__l.__size_;
    }
    if (v19) {
      std::string::append(&v52, " AND ", 5uLL);
    }
    std::string::append(&v52, "status IN (", 0xBuLL);
    if (*(void *)(a2 + 56) != *(void *)(a2 + 48))
    {
      unint64_t v20 = 0;
      do
      {
        std::string::append(&v52, "?,", 2uLL);
        ++v20;
      }
      while (v20 < *(void *)(a2 + 56) - *(void *)(a2 + 48));
    }
    std::string::size_type v21 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    uint64_t v22 = &v52;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0)
    {
      std::string::size_type v21 = v52.__r_.__value_.__l.__size_;
      uint64_t v22 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    v22->__r_.__value_.__s.__data_[v21 - 1] = 41;
  }
  std::string::size_type v23 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
  if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v23 = v52.__r_.__value_.__l.__size_;
  }
  if (v23)
  {
    memset(buf, 0, sizeof(buf));
    std::string::size_type v58 = 0;
    if (a3) {
      uint64_t v24 = "local_subscription";
    }
    else {
      uint64_t v24 = "remote_subscription";
    }
    sub_100058DB0(&v48, v24);
    long long v25 = std::string::insert(&v48, 0, "DELETE FROM ", 0xCuLL);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    v49.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v49.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    char v27 = std::string::append(&v49, " WHERE ", 7uLL);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    v50.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v50.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      char v29 = &v52;
    }
    else {
      char v29 = (std::string *)v52.__r_.__value_.__r.__words[0];
    }
    if ((v52.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      std::string::size_type v30 = HIBYTE(v52.__r_.__value_.__r.__words[2]);
    }
    else {
      std::string::size_type v30 = v52.__r_.__value_.__l.__size_;
    }
    char v31 = std::string::append(&v50, (const std::string::value_type *)v29, v30);
    long long v32 = *(_OWORD *)&v31->__r_.__value_.__l.__data_;
    v51.__r_.__value_.__r.__words[2] = v31->__r_.__value_.__r.__words[2];
    *(_OWORD *)&v51.__r_.__value_.__l.__data_ = v32;
    v31->__r_.__value_.__l.__size_ = 0;
    v31->__r_.__value_.__r.__words[2] = 0;
    v31->__r_.__value_.__r.__words[0] = 0;
    char v33 = std::string::append(&v51, ";", 1uLL);
    long long v34 = *(_OWORD *)&v33->__r_.__value_.__l.__data_;
    std::string::size_type v58 = v33->__r_.__value_.__r.__words[2];
    *(_OWORD *)std::string buf = v34;
    v33->__r_.__value_.__l.__size_ = 0;
    v33->__r_.__value_.__r.__words[2] = 0;
    v33->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v51.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v51.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v50.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v50.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v49.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v49.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v48.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v48.__r_.__value_.__l.__data_);
    }
    char v35 = v54;
    if (v54) {
      atomic_fetch_add_explicit(&v54->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(v41, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)int v41 = *(_OWORD *)a2;
      uint64_t v42 = *(void *)(a2 + 16);
    }
    if (*(char *)(a2 + 47) < 0)
    {
      sub_10004FC84(&v43, *(void **)(a2 + 24), *(void *)(a2 + 32));
    }
    else
    {
      long long v43 = *v12;
      uint64_t v44 = *(void *)(a2 + 40);
    }
    std::string __p = 0;
    char v46 = 0;
    uint64_t v47 = 0;
    sub_100DB6414(&__p, *(const void **)(a2 + 48), *(void *)(a2 + 56), *(void *)(a2 + 56) - *(void *)(a2 + 48));
    uint64_t v56 = 0;
    char v37 = (char *)operator new(0x50uLL);
    id v38 = v37;
    *(void *)char v37 = off_101A5A4B0;
    if (SHIBYTE(v42) < 0)
    {
      sub_10004FC84(v37 + 8, v41[0], (unint64_t)v41[1]);
    }
    else
    {
      *(_OWORD *)(v37 + 8) = *(_OWORD *)v41;
      *((void *)v37 + 3) = v42;
    }
    if (SHIBYTE(v44) < 0)
    {
      sub_10004FC84(v38 + 32, (void *)v43, *((unint64_t *)&v43 + 1));
    }
    else
    {
      *((_OWORD *)v38 + 2) = v43;
      *((void *)v38 + 6) = v44;
    }
    *((void *)v38 + 7) = 0;
    *((void *)v38 + 8) = 0;
    *((void *)v38 + 9) = 0;
    sub_100DB6414((void *)v38 + 7, __p, (uint64_t)v46, v46 - (unsigned char *)__p);
    uint64_t v56 = v38;
    BOOL v39 = sub_100DB43B0(*(sqlite3 **)(v6 + 24), (const char *)buf, (uint64_t)v55);
    sub_100DB6784(v55);
    if (__p)
    {
      char v46 = __p;
      operator delete(__p);
    }
    if (SHIBYTE(v44) < 0) {
      operator delete((void *)v43);
    }
    if (SHIBYTE(v42) < 0) {
      operator delete(v41[0]);
    }
    if (v35) {
      sub_10004D2C8(v35);
    }
    if (!v39)
    {
      std::string v40 = *(NSObject **)(a1 + 8);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v51.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_ERROR, "Failed to delete subscription records", (uint8_t *)&v51, 2u);
      }
    }
    if (SHIBYTE(v58) < 0) {
      operator delete(*(void **)buf);
    }
    goto LABEL_86;
  }
  long long v36 = *(NSObject **)(a1 + 8);
  if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    uint64_t v11 = "No conditions set, abort";
    long long v17 = v36;
    uint32_t v18 = 2;
    goto LABEL_62;
  }
LABEL_86:
  if (SHIBYTE(v52.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v52.__r_.__value_.__l.__data_);
  }
LABEL_88:
  if (v54) {
    sub_10004D2C8(v54);
  }
}

void sub_100DB6204(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,void *a44,uint64_t a45,int a46,__int16 a47,char a48,char a49)
{
  if (v49[31] < 0) {
    operator delete(*v50);
  }
  operator delete(v49);
  sub_1003CDFD8((uint64_t)&__p);
  if (v51) {
    sub_10004D2C8(v51);
  }
  if (*(char *)(v52 - 73) < 0) {
    operator delete(*(void **)(v52 - 96));
  }
  if (*(char *)(v52 - 145) < 0) {
    operator delete(*(void **)(v52 - 168));
  }
  uint64_t v54 = *(std::__shared_weak_count **)(v52 - 136);
  if (v54) {
    sub_10004D2C8(v54);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DB634C(std::string *a1, sqlite3 *db, uint64_t a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  ppStmt = 0;
  sqlite3_prepare_v2(db, "SELECT sql FROM sqlite_master WHERE name = ?;", -1, &ppStmt, 0);
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v5 = (const char *)a3;
  }
  else {
    uint64_t v5 = *(const char **)a3;
  }
  sqlite3_bind_text(ppStmt, 1, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (sqlite3_step(ppStmt) == 100)
  {
    uint64_t v6 = (char *)sqlite3_column_text(ppStmt, 0);
    sub_10003ED78(a1, v6);
  }
  return sqlite3_finalize(ppStmt);
}

void sub_100DB63F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DB6414(void *result, const void *a2, uint64_t a3, size_t __sz)
{
  if (__sz)
  {
    uint64_t v6 = result;
    id result = sub_10005C9F8(result, __sz);
    uint64_t v7 = v6[1];
    size_t v8 = a3 - (void)a2;
    if (v8) {
      id result = memmove((void *)v6[1], a2, v8);
    }
    v6[1] = v7 + v8;
  }
  return result;
}

void sub_100DB6474(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(void **)v1;
  if (*(void *)v1)
  {
    *(void *)(v1 + 8) = v3;
    operator delete(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DB6490(uint64_t a1)
{
  *(void *)a1 = off_101A5A320;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100DB64F0(uint64_t a1)
{
  *(void *)a1 = off_101A5A320;
  uint64_t v2 = *(void **)(a1 + 32);
  if (v2)
  {
    *(void *)(a1 + 40) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void *sub_100DB6570(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = operator new(0x38uLL);
  void *v2 = off_101A5A320;
  sub_100DB6700(v2 + 1, v1);
  return v2;
}

void sub_100DB65C4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100DB65D8(uint64_t a1, void *a2)
{
  *a2 = off_101A5A320;
  return sub_100DB6700(a2 + 1, (long long *)(a1 + 8));
}

void sub_100DB6604(uint64_t a1)
{
}

void sub_100DB660C(void *a1)
{
  sub_1003424C4((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_100DB6648(uint64_t a1, sqlite3_stmt **a2)
{
  uint64_t v2 = *a2;
  uint64_t v3 = a1 + 8;
  if (*(char *)(a1 + 31) >= 0) {
    uint64_t v4 = (const char *)(a1 + 8);
  }
  else {
    uint64_t v4 = *(const char **)(a1 + 8);
  }
  sqlite3_bind_text(*a2, 1, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t v5 = *(const void **)(v3 + 24);
  sqlite3_uint64 v6 = *(void *)(v3 + 32) - (void)v5;

  return sqlite3_bind_blob64(v2, 2, v5, v6, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100DB66B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DB66F4()
{
}

void *sub_100DB6700(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  sub_10005C928(__dst + 3, *((const void **)a2 + 3), *((void *)a2 + 4), *((void *)a2 + 4) - *((void *)a2 + 3));
  return __dst;
}

void sub_100DB6768(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DB6784(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DB6808(uint64_t a1)
{
  *(void *)a1 = off_101A5A3B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100DB6858(uint64_t a1)
{
  *(void *)a1 = off_101A5A3B0;
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

void *sub_100DB68C8(uint64_t a1)
{
  uint64_t v2 = operator new(0x20uLL);
  void *v2 = off_101A5A3B0;
  uint64_t v3 = v2 + 1;
  if (*(char *)(a1 + 31) < 0)
  {
    sub_10004FC84(v3, *(void **)(a1 + 8), *(void *)(a1 + 16));
  }
  else
  {
    *(_OWORD *)uint64_t v3 = *(_OWORD *)(a1 + 8);
    v2[3] = *(void *)(a1 + 24);
  }
  return v2;
}

void sub_100DB693C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_100DB6950(char *result, void *a2)
{
  *a2 = off_101A5A3B0;
  uint64_t v2 = a2 + 1;
  if (result[31] < 0) {
    return (char *)sub_10004FC84(v2, *((void **)result + 1), *((void *)result + 2));
  }
  long long v3 = *(_OWORD *)(result + 8);
  v2[2] = *((void *)result + 3);
  *(_OWORD *)uint64_t v2 = v3;
  return result;
}

void sub_100DB699C(uint64_t a1)
{
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
}

void sub_100DB69B0(void **__p)
{
  if (*((char *)__p + 31) < 0) {
    operator delete(__p[1]);
  }

  operator delete(__p);
}

uint64_t sub_100DB69F4(uint64_t a1, sqlite3_stmt **a2)
{
  long long v4 = *(const char **)(a1 + 8);
  uint64_t v2 = a1 + 8;
  long long v3 = v4;
  if (*(char *)(v2 + 23) >= 0) {
    uint64_t v5 = (const char *)v2;
  }
  else {
    uint64_t v5 = v3;
  }
  return sqlite3_bind_text(*a2, 1, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
}

uint64_t sub_100DB6A1C(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100DB6A5C()
{
}

void *sub_100DB6A68(void *a1)
{
  *a1 = off_101A5A430;
  sub_1000C62D8((uint64_t)(a1 + 1));
  return a1;
}

void sub_100DB6AAC(void *a1)
{
  *a1 = off_101A5A430;
  sub_1000C62D8((uint64_t)(a1 + 1));

  operator delete();
}

void *sub_100DB6B10(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  uint64_t v2 = operator new(0xC8uLL);
  void *v2 = off_101A5A430;
  sub_10023FB90((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100DB6B64(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DB6B78(uint64_t a1, void *a2)
{
  *a2 = off_101A5A430;
  return sub_10023FB90((uint64_t)(a2 + 1), a1 + 8);
}

uint64_t sub_100DB6BA4(uint64_t a1)
{
  return sub_1000C62D8(a1 + 8);
}

void sub_100DB6BAC(void *a1)
{
  sub_1000C62D8((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100DB6BE8(uint64_t a1, sqlite3_stmt **a2)
{
  long long v3 = *a2;
  sqlite3_bind_double(*a2, 1, *(double *)(a1 + 8));
  if (*(char *)(a1 + 63) >= 0) {
    long long v4 = (const char *)(a1 + 40);
  }
  else {
    long long v4 = *(const char **)(a1 + 40);
  }
  sqlite3_bind_text(v3, 2, v4, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(v3, 3, *(unsigned __int8 *)(a1 + 64));
  if (*(char *)(a1 + 39) >= 0) {
    uint64_t v5 = (const char *)(a1 + 16);
  }
  else {
    uint64_t v5 = *(const char **)(a1 + 16);
  }
  sqlite3_bind_text(v3, 4, v5, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(v3, 5, *(unsigned __int8 *)(a1 + 65));
  if (*(char *)(a1 + 95) >= 0) {
    sqlite3_uint64 v6 = (const char *)(a1 + 72);
  }
  else {
    sqlite3_uint64 v6 = *(const char **)(a1 + 72);
  }
  sqlite3_bind_text(v3, 6, v6, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (*(char *)(a1 + 143) >= 0) {
    uint64_t v7 = (const char *)(a1 + 120);
  }
  else {
    uint64_t v7 = *(const char **)(a1 + 120);
  }
  sqlite3_bind_text(v3, 7, v7, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (*(char *)(a1 + 167) >= 0) {
    size_t v8 = (const char *)(a1 + 144);
  }
  else {
    size_t v8 = *(const char **)(a1 + 144);
  }
  sqlite3_bind_text(v3, 8, v8, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  sqlite3_bind_int(v3, 10, *(unsigned __int8 *)(a1 + 192));
  sqlite3_bind_int(v3, 11, *(unsigned __int8 *)(a1 + 193));
  if (*(char *)(a1 + 119) >= 0) {
    char v9 = (const char *)(a1 + 96);
  }
  else {
    char v9 = *(const char **)(a1 + 96);
  }
  sqlite3_bind_text(v3, 12, v9, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  uint64_t v12 = *(char **)(a1 + 168);
  uint64_t v11 = a1 + 168;
  int v10 = v12;
  int v13 = *(char *)(v11 + 23);
  if (v13 >= 0) {
    uint64_t v14 = (char *)v11;
  }
  else {
    uint64_t v14 = v10;
  }
  if (v13 >= 0) {
    size_t v15 = *(unsigned __int8 *)(v11 + 23);
  }
  else {
    size_t v15 = *(void *)(v11 + 8);
  }
  std::string::size_type v19 = 0;
  uint64_t v20 = 0;
  uint32_t v18 = 0;
  sub_10012C7D0((char *)&v18, v14, &v14[v15], v15);
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v17 = 0;
  ctu::base64::encode();
  sqlite3_bind_text(v3, 9, (const char *)__p, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  if (v18)
  {
    std::string::size_type v19 = v18;
    operator delete(v18);
  }
}

void sub_100DB6DE0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a15) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DB6E14(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DB6E54()
{
}

uint64_t sub_100DB6E60(uint64_t a1)
{
  *(void *)a1 = off_101A5A4B0;
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }
  return a1;
}

void sub_100DB6ED0(uint64_t a1)
{
  *(void *)a1 = off_101A5A4B0;
  uint64_t v2 = *(void **)(a1 + 56);
  if (v2)
  {
    *(void *)(a1 + 64) = v2;
    operator delete(v2);
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  if (*(char *)(a1 + 31) < 0) {
    operator delete(*(void **)(a1 + 8));
  }

  operator delete();
}

char *sub_100DB6F60(uint64_t a1)
{
  uint64_t v1 = (long long *)(a1 + 8);
  uint64_t v2 = (char *)operator new(0x50uLL);
  *(void *)uint64_t v2 = off_101A5A4B0;
  sub_100DB714C(v2 + 8, v1);
  return v2;
}

void sub_100DB6FB4(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

char *sub_100DB6FC8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5A4B0;
  return sub_100DB714C((char *)(a2 + 8), (long long *)(a1 + 8));
}

void sub_100DB6FF4(uint64_t a1)
{
}

void sub_100DB6FFC(void *a1)
{
  sub_1001D75C8((uint64_t)a1 + 8);

  operator delete(a1);
}

uint64_t sub_100DB7038(uint64_t result, sqlite3_stmt **a2)
{
  uint64_t v2 = result;
  long long v3 = (const char *)(result + 8);
  long long v4 = *a2;
  if ((*(char *)(result + 31) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(result + 31)) {
      goto LABEL_7;
    }
LABEL_6:
    id result = sqlite3_bind_text(*a2, 1, v3, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    int v5 = 2;
    goto LABEL_8;
  }
  if (*(void *)(result + 16))
  {
    long long v3 = *(const char **)v3;
    goto LABEL_6;
  }
LABEL_7:
  int v5 = 1;
LABEL_8:
  sqlite3_uint64 v6 = (const char *)(v2 + 32);
  if ((*(char *)(v2 + 55) & 0x80000000) == 0)
  {
    if (!*(unsigned char *)(v2 + 55)) {
      goto LABEL_14;
    }
    goto LABEL_13;
  }
  if (*(void *)(v2 + 40))
  {
    sqlite3_uint64 v6 = *(const char **)v6;
LABEL_13:
    int v7 = v5 + 1;
    id result = sqlite3_bind_text(v4, v5, v6, -1, (void (__cdecl *)(void *))0xFFFFFFFFFFFFFFFFLL);
    int v5 = v7;
  }
LABEL_14:
  char v9 = *(unsigned __int8 **)(v2 + 56);
  size_t v8 = *(unsigned __int8 **)(v2 + 64);
  while (v9 != v8)
  {
    int v10 = v5 + 1;
    int v11 = *v9++;
    id result = sqlite3_bind_int(v4, v5, v11);
    int v5 = v10;
  }
  return result;
}

uint64_t sub_100DB7100(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DB7140()
{
}

char *sub_100DB714C(char *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)std::string __dst = v4;
  }
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(__dst + 24, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    long long v5 = *(long long *)((char *)a2 + 24);
    *((void *)__dst + 5) = *((void *)a2 + 5);
    *(_OWORD *)(__dst + 24) = v5;
  }
  *((void *)__dst + 6) = 0;
  *((void *)__dst + 7) = 0;
  *((void *)__dst + 8) = 0;
  sub_100DB6414((void *)__dst + 6, *((const void **)a2 + 6), *((void *)a2 + 7), *((void *)a2 + 7) - *((void *)a2 + 6));
  return __dst;
}

void sub_100DB71EC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DB7220(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A530;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DB7240(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A530;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DB7294(void *a1)
{
  uint64_t v2 = (sqlite3 *)a1[6];
  if (v2) {
    sqlite3_close(v2);
  }
  long long v3 = (std::__shared_weak_count *)a1[5];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 3));
}

void stewie::ServiceAtLocationFactory::createFactory(stewie::ServiceAtLocationFactory *this, const ctu::OsLogLogger *a2)
{
}

void sub_100DB7388()
{
}

void sub_100DB73AC(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v6 = *a2;
  if (!*a2)
  {
    int v11 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
LABEL_18:
      *a5 = 0;
      a5[1] = 0;
      return;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v12 = "targetInstantAtLocationCache required";
LABEL_21:
    _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, v12, buf, 2u);
    goto LABEL_18;
  }
  uint64_t v7 = *a3;
  if (!*a3)
  {
    int v11 = *(NSObject **)(a1 + 8);
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_ERROR)) {
      goto LABEL_18;
    }
    *(_WORD *)std::string buf = 0;
    uint64_t v12 = "anchorageAtLocation required";
    goto LABEL_21;
  }
  *(_OWORD *)std::string buf = xmmword_101573600;
  size_t v8 = (std::__shared_weak_count *)a2[1];
  uint64_t v16 = v6;
  uint64_t v17 = v8;
  if (v8)
  {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v7 = *a3;
  }
  char v9 = (std::__shared_weak_count *)a3[1];
  uint64_t v14 = v7;
  size_t v15 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  int v10 = *(std::__shared_weak_count **)(a4 + 8);
  int v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  stewie::ServiceAtLocation::create(&v16, &v14, (os_log_t *)(a1 + 8), a5);
  if (v13) {
    sub_10004D2C8(v13);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  if (v17) {
    sub_10004D2C8(v17);
  }
}

void sub_100DB74F0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DB7520(uint64_t a1)
{
  return a1;
}

void sub_100DB754C(uint64_t a1)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 8));

  operator delete();
}

void sub_100DB7598(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100DB7600(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DB763C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100DB7674(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100DB76A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

const void **asString@<X0>(const __CFURL *a1@<X0>, uint64_t a2@<X8>)
{
  v4[0] = 0;
  copyURLAsString((uint64_t *)v4, a1);
  v4[1] = v4[0];
  sub_1000292E0(a2);
  return sub_1000558F4(v4);
}

void sub_100DB7738(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

void copyDirectoryContentsInString(os_log_t *a1@<X0>, Registry **a2@<X1>, int a3@<W3>, void *a4@<X8>)
{
  uint64_t v38 = 0;
  BOOL v39 = 0;
  Registry::getFileSystemInterface(&v38, *a2);
  memset(buf, 0, sizeof(buf));
  *(void *)&long long v43 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long v36 = *(_OWORD *)buf;
  uint64_t v37 = v43;
  uint64_t v33 = (uint64_t)&v33;
  long long v34 = &v33;
  CFIndex capacity = 0;
  if ((*(uint64_t (**)(uint64_t, void **, uint64_t *, uint64_t))(*(void *)v38 + 96))(v38, v36, &v33, 1))
  {
    size_t v8 = *a1;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
LABEL_7:
      *a4 = 0;
      goto LABEL_72;
    }
    char v9 = v36;
    if (v37 < 0) {
      char v9 = (void **)v36[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v9;
    int v10 = "#N Failed to get contents of directory at path: %{public}s";
LABEL_6:
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v10, buf, 0xCu);
    goto LABEL_7;
  }
  if (!capacity)
  {
    size_t v8 = *a1;
    if (!os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_7;
    }
    char v27 = v36;
    if (v37 < 0) {
      char v27 = (void **)v36[0];
    }
    *(_DWORD *)std::string buf = 136446210;
    *(void *)&uint8_t buf[4] = v27;
    int v10 = "#N Directory at path: %{public}s is empty";
    goto LABEL_6;
  }
  Mutable = CFArrayCreateMutable(kCFAllocatorDefault, capacity, &kCFTypeArrayCallBacks);
  CFMutableArrayRef theArray = Mutable;
  uint64_t v12 = v34;
  if (v34 != &v33)
  {
    while (1)
    {
      int v13 = v12 + 2;
      if (*((char *)v12 + 39) < 0)
      {
        sub_10004FC84(__p, (void *)v12[2], v12[3]);
      }
      else
      {
        *(_OWORD *)std::string __p = *v13;
        uint64_t v31 = v12[4];
      }
      *(void *)std::string buf = 0;
      if (ctu::cf::convert_copy())
      {
        uint64_t v14 = CFURLCreateWithFileSystemPath(kCFAllocatorDefault, *(CFStringRef *)buf, kCFURLPOSIXPathStyle, 0);
        CFRelease(*(CFTypeRef *)buf);
      }
      else
      {
        if (*(void *)buf) {
          CFRelease(*(CFTypeRef *)buf);
        }
        uint64_t v14 = 0;
      }
      if (SHIBYTE(v31) < 0) {
        operator delete(__p[0]);
      }
      char v29 = v14;
      if (!v14)
      {
        uint64_t v16 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)v12 + 39) < 0) {
            int v13 = *(_OWORD **)v13;
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v13;
          _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#N Failed to get the url from string %{public}s", buf, 0xCu);
        }
        goto LABEL_40;
      }
      CFStringRef v28 = 0;
      CFStringRef v28 = CFCopyDescription(v14);
      if (sub_1004D362C(a2, v29))
      {
        if (!a3 || sub_1005B6DE8()) {
          goto LABEL_24;
        }
        if ((*(uint64_t (**)(uint64_t, uint64_t *))(*(void *)v38 + 88))(v38, v12 + 2))
        {
          uint64_t v53 = 0;
          long long v51 = 0u;
          long long v52 = 0u;
          long long v49 = 0u;
          long long v50 = 0u;
          long long v47 = 0u;
          long long v48 = 0u;
          long long v45 = 0u;
          long long v46 = 0u;
          long long v43 = 0u;
          long long v44 = 0u;
          *(_OWORD *)std::string buf = 0u;
          sub_1007DE21C((uint64_t)buf, (uint64_t)a2);
          sub_1007DE874((uint64_t)buf, (std::string *)(v12 + 2));
          if ((sub_1006396EC((CBSignUtilityLogger *)(v12 + 2), 0, 0) & 1) == 0)
          {
            uint64_t v24 = *a1;
            if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
            {
              if (*((char *)v12 + 39) < 0) {
                int v13 = *(_OWORD **)v13;
              }
              *(_DWORD *)std::string v40 = 136446210;
              int v41 = v13;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#N Verification is failing for the bundle: %{public}s", v40, 0xCu);
            }
            sub_1007E1374((uint64_t)buf);
            sub_1007DE5C8((uint64_t)buf);
            goto LABEL_39;
          }
          if (sub_1007DF8F0((uint64_t)buf) && (sub_1007DFB84((uint64_t)buf) & 1) == 0)
          {
            os_log_t v25 = *a1;
            if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
            {
              if (*((char *)v12 + 39) < 0) {
                int v13 = *(_OWORD **)v13;
              }
              *(_DWORD *)std::string v40 = 136446210;
              int v41 = v13;
              std::string::size_type v21 = v25;
              uint64_t v22 = "#N Not a valid Unknown bundle: %{public}s. Removing it.";
LABEL_65:
              _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, v22, v40, 0xCu);
            }
LABEL_66:
            sub_1007E1374((uint64_t)buf);
          }
          else if (sub_1007DFC54((uint64_t)buf) && (sub_1007DFDC4((uint64_t)buf) & 1) == 0)
          {
            os_log_t v20 = *a1;
            if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
            {
              if (*((char *)v12 + 39) < 0) {
                int v13 = *(_OWORD **)v13;
              }
              *(_DWORD *)std::string v40 = 136446210;
              int v41 = v13;
              std::string::size_type v21 = v20;
              uint64_t v22 = "#N Not a valid Default bundle: %{public}s. Removing it.";
              goto LABEL_65;
            }
            goto LABEL_66;
          }
          sub_1007DE5C8((uint64_t)buf);
LABEL_24:
          *(void *)std::string buf = 0;
          copyFileName((const void **)v29, (CFStringRef *)buf);
          if (*(void *)buf) {
            size_t v15 = sub_1000810B8;
          }
          else {
            size_t v15 = 0;
          }
          if (v15) {
            CFArrayAppendValue(theArray, *(const void **)buf);
          }
          sub_1000558F4((const void **)buf);
          goto LABEL_39;
        }
        os_log_t v23 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)v12 + 39) < 0) {
            int v13 = *(_OWORD **)v13;
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v13;
          uint32_t v18 = v23;
          std::string::size_type v19 = "#N Scanning for directory contents, bundle %{public}s is not present";
LABEL_38:
          _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, v19, buf, 0xCu);
        }
      }
      else
      {
        os_log_t v17 = *a1;
        if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
        {
          if (*((char *)v12 + 39) < 0) {
            int v13 = *(_OWORD **)v13;
          }
          *(_DWORD *)std::string buf = 136446210;
          *(void *)&uint8_t buf[4] = v13;
          uint32_t v18 = v17;
          std::string::size_type v19 = "#N Not a valid bundle %{public}s";
          goto LABEL_38;
        }
      }
LABEL_39:
      sub_1000558F4((const void **)&v28);
LABEL_40:
      sub_1000FE824((const void **)&v29);
      uint64_t v12 = (uint64_t *)v12[1];
      if (v12 == &v33)
      {
        Mutable = theArray;
        break;
      }
    }
  }
  if (!CFArrayGetCount(Mutable))
  {
    long long v26 = *a1;
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#N Failed to create the directory contents in string format", buf, 2u);
    }
  }
  sub_100044D6C(a4, (CFTypeRef *)&theArray);
  sub_1000440D4((const void **)&theArray);
LABEL_72:
  sub_1001257B0(&v33);
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  if (v39) {
    sub_10004D2C8(v39);
  }
}

void sub_100DB7DA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, const void *a20,uint64_t a21,uint64_t a22,uint64_t a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,std::__shared_weak_count *a32,uint64_t a33,uint64_t a34,char a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a32) {
    sub_10004D2C8(a32);
  }
  _Unwind_Resume(a1);
}

const void **copyFileName@<X0>(const void **result@<X0>, CFStringRef *a2@<X8>)
{
  *a2 = 0;
  if (result)
  {
    *a2 = CFURLCopyLastPathComponent((CFURLRef)result);
    uint64_t v2 = 0;
    return sub_1000558F4(&v2);
  }
  return result;
}

void sub_100DB7EB0(_Unwind_Exception *a1)
{
  sub_1000558F4(v1);
  _Unwind_Resume(a1);
}

void getCarrierBundleLegacyLocation(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  memset(&__dst, 0, sizeof(__dst));
  switch(a1)
  {
    case 0:
    case 5:
    case 6:
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      return;
    case 1:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__dst, "Carrier1Bundle.bundle");
      if (a2 == 2) {
        qmemcpy(&__dst, "Carrier2Bundle.bundle", 21);
      }
      goto LABEL_9;
    case 2:
      strcpy((char *)&__dst, "Operator1Bundle.bundle");
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
      if (a2 == 2) {
        qmemcpy(&__dst, "Operator2Bundle.bundle", 22);
      }
      goto LABEL_9;
    case 3:
      sub_10003ECB8(&__dst, "CarrierBootstrap.bundle", 0x17uLL);
      goto LABEL_9;
    case 4:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__dst, "CarrierDefault.bundle");
      goto LABEL_9;
    default:
LABEL_9:
      long long v4 = (char *)sub_1003F26A8();
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v6 = 0;
      sub_100058DB0(__p, v4);
      ctu::path_join_impl();
      *(void *)a3 = 0;
      *(void *)(a3 + 8) = 0;
      *(void *)(a3 + 16) = 0;
      if (SHIBYTE(v6) < 0)
      {
        sub_10004FC84((unsigned char *)a3, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)a3 = *(_OWORD *)__p;
        *(void *)(a3 + 16) = v6;
      }
      ctu::path_join_impl();
      if (SHIBYTE(v6) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
      return;
  }
}

void sub_100DB8090(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getBundleLocation(int a1@<W0>, int a2@<W1>, void *a3@<X8>)
{
  memset(&__dst, 0, sizeof(__dst));
  switch(a1)
  {
    case 0:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      memset(&__dst, 0, sizeof(__dst));
      goto LABEL_18;
    case 1:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__dst, "Carrier1Bundle.bundle");
      if (a2 == 2) {
        qmemcpy(&__dst, "Carrier2Bundle.bundle", 21);
      }
      goto LABEL_9;
    case 2:
      strcpy((char *)&__dst, "Operator1Bundle.bundle");
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 22;
      if (a2 == 2) {
        qmemcpy(&__dst, "Operator2Bundle.bundle", 22);
      }
      goto LABEL_9;
    case 3:
      sub_10003ECB8(&__dst, "CarrierBootstrap.bundle", 0x17uLL);
      goto LABEL_9;
    case 4:
      *((unsigned char *)&__dst.__r_.__value_.__s + 23) = 21;
      strcpy((char *)&__dst, "CarrierDefault.bundle");
      goto LABEL_9;
    case 5:
      long long v4 = "Carrier1CountryBundle.bundle";
      long long v5 = "Carrier2CountryBundle.bundle";
      goto LABEL_12;
    case 6:
      long long v4 = "Operator1CountryBundle.bundle";
      long long v5 = "Operator2CountryBundle.bundle";
LABEL_12:
      if (a2 == 2) {
        uint64_t v6 = (char *)v5;
      }
      else {
        uint64_t v6 = (char *)v4;
      }
      sub_10003ED78(&__dst, v6);
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      getCountryBundleLinksDir(__p);
      uint64_t v11 = v9;
      long long v10 = *(_OWORD *)__p;
      __p[1] = 0;
      uint64_t v9 = 0;
      __p[0] = 0;
      ctu::path_join_impl();
      break;
    default:
LABEL_9:
      *a3 = 0;
      a3[1] = 0;
      a3[2] = 0;
      getCarrierBundleLinksDir(__p);
      uint64_t v11 = v9;
      long long v10 = *(_OWORD *)__p;
      __p[1] = 0;
      uint64_t v9 = 0;
      __p[0] = 0;
      ctu::path_join_impl();
      break;
  }
  int v7 = SHIBYTE(v9);
  *(_OWORD *)a3 = v10;
  a3[2] = v11;
  HIBYTE(v11) = 0;
  LOBYTE(v10) = 0;
  if (v7 < 0) {
    operator delete(__p[0]);
  }
LABEL_18:
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__dst.__r_.__value_.__l.__data_);
  }
}

void sub_100DB8340(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (*(char *)(v21 - 25) < 0) {
    operator delete(*(void **)(v21 - 48));
  }
  _Unwind_Resume(exception_object);
}

void getCountryBundleLinksDir(void *a1@<X8>)
{
  getCountryBundleDir(__p);
  if (v4 >= 0) {
    uint64_t v2 = (char *)__p;
  }
  else {
    uint64_t v2 = (char *)__p[0];
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB8420(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getCarrierBundleLinksDir(void *a1@<X8>)
{
  getCarrierBundleDir(__p);
  if (v4 >= 0) {
    uint64_t v2 = (char *)__p;
  }
  else {
    uint64_t v2 = (char *)__p[0];
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB84C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getBundlePrefsFilePath(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  char v3 = a1;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  getSimSlotBundlePrefsDomain(a2, a1, (uint64_t)__p);
  if (v13 >= 0) {
    long long v5 = (void *)HIBYTE(v13);
  }
  else {
    long long v5 = __p[1];
  }
  if (!v5)
  {
    *(_OWORD *)a3 = *(_OWORD *)__p;
    *(void *)(a3 + 16) = v13;
    return;
  }
  if ((v3 - 5) > 1u) {
    getCarrierBundlePreferencesDir(&__dst);
  }
  else {
    getCountryBundlePreferencesDir(&__dst);
  }
  long long v6 = *(_OWORD *)&__dst.__r_.__value_.__l.__data_;
  v11[0] = __dst.__r_.__value_.__r.__words[2];
  *(_DWORD *)((char *)v11 + 3) = *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3);
  char v7 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  memset(&__dst, 0, sizeof(__dst));
  if (v7 < 0)
  {
    sub_10004FC84(&__dst, (void *)v6, *((unint64_t *)&v6 + 1));
  }
  else
  {
    *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = v6;
    LODWORD(__dst.__r_.__value_.__r.__words[2]) = v11[0];
    *(_DWORD *)((char *)&__dst.__r_.__value_.__r.__words[2] + 3) = *(_DWORD *)((char *)v11 + 3);
    *((unsigned char *)&__dst.__r_.__value_.__s + 23) = v7;
  }
  ctu::path_join_impl();
  size_t v8 = strlen(kPlistExtension);
  uint64_t v9 = std::string::append(&__dst, kPlistExtension, v8);
  *(std::string *)a3 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v7 & 0x80) == 0) {
      goto LABEL_14;
    }
  }
  else if ((v7 & 0x80) == 0)
  {
    goto LABEL_14;
  }
  operator delete((void *)v6);
LABEL_14:
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB8680(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  operator delete(v22);
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

void getSimSlotBundlePrefsDomain(int a1@<W0>, int a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  switch(a2)
  {
    case 1:
      memset(v8, 0, 15);
      if (a1 != 2 && a1 != 1) {
        goto LABEL_14;
      }
      goto LABEL_15;
    case 2:
      memset(v8, 0, 15);
      if (a1 == 2 || a1 == 1) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 3:
    case 4:
      sub_1000292E0((uint64_t)v7);
      *(_OWORD *)a3 = *(_OWORD *)v7;
      *(void *)(a3 + 16) = *(void *)&v7[16];
      return;
    case 5:
      memset(v8, 0, 15);
      if (a1 == 2 || a1 == 1) {
        goto LABEL_15;
      }
      goto LABEL_14;
    case 6:
      memset(v8, 0, 15);
      if (a1 == 2 || a1 == 1)
      {
LABEL_15:
        sub_1000292E0((uint64_t)v7);
        v8[0] = *(void *)&v7[8];
        uint64_t v4 = *(void *)v7;
        *(void *)((char *)v8 + 7) = *(void *)&v7[15];
        char v5 = v7[23];
      }
      else
      {
LABEL_14:
        uint64_t v4 = 0;
        char v5 = 0;
      }
      uint64_t v6 = v8[0];
      *(void *)a3 = v4;
      *(void *)(a3 + 8) = v6;
      *(void *)(a3 + 15) = *(void *)((char *)v8 + 7);
      *(unsigned char *)(a3 + 23) = v5;
      break;
    default:
      return;
  }
}

void getCountryBundlePreferencesDir(void *a1@<X8>)
{
  getCountryBundleDir(__p);
  if (v4 >= 0) {
    uint64_t v2 = (char *)__p;
  }
  else {
    uint64_t v2 = (char *)__p[0];
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  ctu::path_join_impl();
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB8960(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getCarrierBundlePreferencesDir(void *a1@<X8>)
{
  getCarrierBundleDir(__p);
  if (v4 >= 0) {
    uint64_t v2 = (char *)__p;
  }
  else {
    uint64_t v2 = (char *)__p[0];
  }
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  ctu::path_join_impl();
  if (v4 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DB8A18(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void getCarrierBundlePrefsLegacyFilePath(char a1@<W0>, int a2@<W1>, std::string *a3@<X8>)
{
  if ((a1 - 5) > 1u)
  {
    getSimSlotBundlePrefsDomain(a2, a1, (uint64_t)v10);
    if (v11 >= 0) {
      char v4 = (void *)HIBYTE(v11);
    }
    else {
      char v4 = v10[1];
    }
    if (v4)
    {
      char v5 = (char *)sub_1003F26A8();
      memset(&v9, 0, sizeof(v9));
      sub_100058DB0(&v9, v5);
      ctu::path_join_impl();
      ctu::path_join_impl();
      a3->__r_.__value_.__r.__words[0] = 0;
      a3->__r_.__value_.__l.__size_ = 0;
      a3->__r_.__value_.__r.__words[2] = 0;
      memset(&__p, 0, sizeof(__p));
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        sub_10004FC84(&__p, v9.__r_.__value_.__l.__data_, v9.__r_.__value_.__l.__size_);
      }
      else {
        std::string __p = v9;
      }
      ctu::path_join_impl();
      size_t v6 = strlen(kPlistExtension);
      char v7 = std::string::append(&__p, kPlistExtension, v6);
      *a3 = *v7;
      v7->__r_.__value_.__l.__size_ = 0;
      v7->__r_.__value_.__r.__words[2] = 0;
      v7->__r_.__value_.__r.__words[0] = 0;
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v9.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(v11) < 0) {
        operator delete(v10[0]);
      }
    }
    else
    {
      *(_OWORD *)&a3->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
      a3->__r_.__value_.__r.__words[2] = v11;
    }
  }
  else
  {
    a3->__r_.__value_.__r.__words[0] = 0;
    a3->__r_.__value_.__l.__size_ = 0;
    a3->__r_.__value_.__r.__words[2] = 0;
  }
}

void sub_100DB8BD0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void getCarrierNameForSimSlot(Registry **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X2>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *a1);
  size_t v8 = ServiceMap;
  if (v9 < 0)
  {
    long long v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  uint64_t v17 = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&v17);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_7;
      }
LABEL_11:
      (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, uint64_t, void))(*(void *)v15 + 80))(&v17, v15, a2, 1, @"CarrierName", *a3, 0);
      sub_100056248(a4, (CFTypeRef *)&v17);
      sub_1000577C4((const void **)&v17);
      if (v16) {
        return;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
  if (v15) {
    goto LABEL_11;
  }
LABEL_7:
  *a4 = *a3;
  *a3 = 0;
  if ((v16 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v14);
}

void sub_100DB8D98(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

double getUserBundlePrefsDomain@<D0>(int a1@<W0>, void *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  if (a1 == 2 || a1 == 1)
  {
    sub_1000292E0((uint64_t)&v4);
    double result = *(double *)&v4;
    *(_OWORD *)a2 = v4;
    a2[2] = v5;
  }
  return result;
}

double getUserBundlePrefsFilePath@<D0>(int a1@<W0>, std::string *a2@<X8>)
{
  v10[0] = 0;
  v10[1] = 0;
  int64_t v11 = 0;
  getUserBundlePrefsDomain(a1, v10);
  if (v11 >= 0) {
    char v3 = (void *)HIBYTE(v11);
  }
  else {
    char v3 = v10[1];
  }
  if (v3)
  {
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    getCarrierBundlePreferencesDir(&__p);
    std::string v9 = __p;
    memset(&__p, 0, sizeof(__p));
    ctu::path_join_impl();
    size_t v4 = strlen(kPlistExtension);
    uint64_t v5 = std::string::append(&v9, kPlistExtension, v4);
    long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
    *a2 = *v5;
    v5->__r_.__value_.__l.__size_ = 0;
    v5->__r_.__value_.__r.__words[2] = 0;
    v5->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v9.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v11) < 0) {
      operator delete(v10[0]);
    }
  }
  else
  {
    *(void **)&long long v6 = v10[0];
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v10;
    a2->__r_.__value_.__r.__words[2] = v11;
  }
  return *(double *)&v6;
}

void sub_100DB8F4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void getUserBundlePrefsLegacyFilePath(int a1@<W0>, std::string *a2@<X8>)
{
  v9[0] = 0;
  v9[1] = 0;
  int64_t v10 = 0;
  getUserBundlePrefsDomain(a1, v9);
  if (v10 >= 0) {
    char v3 = (void *)HIBYTE(v10);
  }
  else {
    char v3 = v9[1];
  }
  if (v3)
  {
    size_t v4 = (char *)sub_1003F26A8();
    memset(&v8, 0, sizeof(v8));
    sub_100058DB0(&v8, v4);
    ctu::path_join_impl();
    ctu::path_join_impl();
    a2->__r_.__value_.__r.__words[0] = 0;
    a2->__r_.__value_.__l.__size_ = 0;
    a2->__r_.__value_.__r.__words[2] = 0;
    memset(&__p, 0, sizeof(__p));
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__p, v8.__r_.__value_.__l.__data_, v8.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v8;
    }
    ctu::path_join_impl();
    size_t v5 = strlen(kPlistExtension);
    long long v6 = std::string::append(&__p, kPlistExtension, v5);
    *a2 = *v6;
    v6->__r_.__value_.__l.__size_ = 0;
    v6->__r_.__value_.__r.__words[2] = 0;
    v6->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v8.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v10) < 0) {
      operator delete(v9[0]);
    }
  }
  else
  {
    *(_OWORD *)&a2->__r_.__value_.__l.__data_ = *(_OWORD *)v9;
    a2->__r_.__value_.__r.__words[2] = v10;
  }
}

void sub_100DB90F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void getUserBundleLocation(int a1@<W0>, void *a2@<X8>)
{
  memset(v5, 0, sizeof(v5));
  switch(a1)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return;
    case 1:
      HIBYTE(v5[2]) = 21;
      qmemcpy(v5, "Carrier Bundle.bundle", 21);
      goto LABEL_5;
    case 2:
      HIBYTE(v5[2]) = 22;
      qmemcpy(v5, "Operator Bundle.bundle", 22);
      goto LABEL_5;
    default:
LABEL_5:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      getCarrierBundleLinksDir(__p);
      *(_OWORD *)a2 = *(_OWORD *)__p;
      a2[2] = v4;
      __p[1] = 0;
      uint64_t v4 = 0;
      __p[0] = 0;
      ctu::path_join_impl();
      if (SHIBYTE(v4) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v5[2]) < 0) {
        operator delete(v5[0]);
      }
      return;
  }
}

void sub_100DB9258(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (*(char *)(v21 + 23) < 0) {
    operator delete(*(void **)v21);
  }
  if (a15 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  _Unwind_Resume(exception_object);
}

void getUserBundleLegacyLocation(int a1@<W0>, void *a2@<X8>)
{
  memset(__p, 0, sizeof(__p));
  switch(a1)
  {
    case 0:
    case 3:
    case 4:
    case 5:
    case 6:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      return;
    case 1:
      HIBYTE(__p[2]) = 21;
      qmemcpy(__p, "Carrier Bundle.bundle", 21);
      goto LABEL_5;
    case 2:
      HIBYTE(__p[2]) = 22;
      qmemcpy(__p, "Operator Bundle.bundle", 22);
      goto LABEL_5;
    default:
LABEL_5:
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      char v3 = (char *)sub_1003F26A8();
      *a2 = 0;
      a2[1] = 0;
      a2[2] = 0;
      sub_100058DB0(a2, v3);
      ctu::path_join_impl();
      ctu::path_join_impl();
      if (SHIBYTE(__p[2]) < 0) {
        operator delete(__p[0]);
      }
      return;
  }
}

void sub_100DB93BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (*(char *)(v14 + 23) < 0) {
    operator delete(*(void **)v14);
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

const void **generateUUIDForIPCC@<X0>(void *a1@<X8>)
{
  CFUUIDRef v4 = CFUUIDCreate(kCFAllocatorDefault);
  CFStringRef v3 = CFUUIDCreateString(kCFAllocatorDefault, v4);
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  long long v5 = 0uLL;
  uint64_t v6 = 0;
  ctu::cf::assign();
  *(_OWORD *)a1 = 0uLL;
  a1[2] = v6;
  sub_1000558F4((const void **)&v3);
  return sub_10012577C((const void **)&v4);
}

void sub_100DB9498(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, const void *a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  sub_1000558F4(&a10);
  sub_10012577C(&a11);
  _Unwind_Resume(a1);
}

uint64_t getCarrierBundleDir@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)sub_1003F26A8();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  return ctu::path_join_impl();
}

void sub_100DB9520(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t getCountryBundleDir@<X0>(void *a1@<X8>)
{
  uint64_t v2 = (char *)sub_1003F26A8();
  a1[1] = 0;
  a1[2] = 0;
  *a1 = 0;
  sub_100058DB0(a1, v2);
  ctu::path_join_impl();
  return ctu::path_join_impl();
}

void sub_100DB9590(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void getGSMAOverlayKey(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v1, 0, sizeof(v1));
  ctu::tokenize();
  uint64_t v2 = (void **)v1;
  sub_100047F64(&v2);
}

void sub_100DB96F4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100047F64(&a12);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

void getCarrierIdentifier(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  char v35 = 0;
  long long v36 = 0;
  unint64_t v37 = 0;
  long long v33 = 0uLL;
  uint64_t v34 = 0;
  long long v31 = 0u;
  long long v32 = 0u;
  long long v29 = 0u;
  long long v30 = 0u;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v25 = 0u;
  long long v26 = 0u;
  long long v23 = 0u;
  long long v24 = 0u;
  *(_OWORD *)uint64_t v21 = 0u;
  long long v22 = 0u;
  long long v19 = 0u;
  long long v20 = 0u;
  long long v17 = 0u;
  long long v18 = 0u;
  long long v16 = 0u;
  sub_1003C09B4((void (__cdecl ***)(std::istringstream *__hidden))&v16, a1, 8);
  while (1)
  {
    CFStringRef v3 = (void *)sub_10013EA34((uint64_t)&v16);
    CFUUIDRef v4 = v36;
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
      break;
    }
    if ((unint64_t)v36 >= v37)
    {
      uint64_t v6 = (long long *)sub_100048008((uint64_t *)&v35, &v33);
    }
    else
    {
      if (SHIBYTE(v34) < 0)
      {
        sub_10004FC84(v36, (void *)v33, *((unint64_t *)&v33 + 1));
      }
      else
      {
        long long v5 = v33;
        *((void *)v36 + 2) = v34;
        *CFUUIDRef v4 = v5;
      }
      uint64_t v6 = (long long *)((char *)v4 + 24);
    }
    long long v36 = v6;
  }
  char v7 = v35;
  if ((int)(-1431655765 * ((unint64_t)((char *)v36 - (char *)v35) >> 3)) >= 1)
  {
    signed int v8 = 0;
    std::string v9 = (void **)(a2 + 96);
    int64_t v10 = (void **)(a2 + 72);
    int64_t v11 = (void **)(a2 + 24);
    uint64_t v12 = (void **)(a2 + 48);
    while (v8 != 2)
    {
      if (v8 == 1)
      {
        sub_100058DB0(__p, "_");
        sub_100DB9B40(&v15, (std::string *)&v7[1], (char *)__p);
        if (*(char *)(a2 + 95) < 0) {
          operator delete(*v10);
        }
        *(_OWORD *)int64_t v10 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        *(void *)(a2 + 88) = *((void *)&v15.__r_.__value_.__l + 2);
LABEL_26:
        *((unsigned char *)&v15.__r_.__value_.__s + 23) = 0;
        v15.__r_.__value_.__s.__data_[0] = 0;
        if (v14 < 0) {
          operator delete(__p[0]);
        }
        goto LABEL_28;
      }
      if (!v8)
      {
        std::string::basic_string(&v15, v7, 0, 3uLL, (std::allocator<char> *)__p);
        if (*(char *)(a2 + 47) < 0) {
          operator delete(*v11);
        }
        *(_OWORD *)int64_t v11 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        *(void *)(a2 + 40) = *((void *)&v15.__r_.__value_.__l + 2);
        std::string::basic_string(&v15, v35, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
        if (*(char *)(a2 + 71) < 0) {
          operator delete(*v12);
        }
        *(_OWORD *)uint64_t v12 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
        *(void *)(a2 + 64) = *((void *)&v15.__r_.__value_.__l + 2);
      }
LABEL_28:
      ++v8;
      char v7 = v35;
      if (v8 >= (int)(-1431655765 * ((unint64_t)((char *)v36 - (char *)v35) >> 3))) {
        goto LABEL_29;
      }
    }
    sub_100058DB0(__p, "_");
    sub_100DB9B40(&v15, (std::string *)&v7[2], (char *)__p);
    if (*(char *)(a2 + 119) < 0) {
      operator delete(*v9);
    }
    *(_OWORD *)std::string v9 = *(_OWORD *)&v15.__r_.__value_.__l.__data_;
    *(void *)(a2 + 112) = *((void *)&v15.__r_.__value_.__l + 2);
    goto LABEL_26;
  }
LABEL_29:
  if (SBYTE7(v22) < 0) {
    operator delete(v21[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v34) < 0) {
    operator delete((void *)v33);
  }
  *(void *)&long long v16 = &v35;
  sub_100047F64((void ***)&v16);
}

void sub_100DB9AC0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18)
{
  a18 = v19 - 104;
  sub_100047F64((void ***)&a18);
  sub_10039A890(v18);
  _Unwind_Resume(a1);
}

std::string *sub_100DB9B40(std::string *a1, std::string *__str, char *a3)
{
  int64_t size = HIBYTE(__str->__r_.__value_.__r.__words[2]);
  if ((size & 0x80u) == 0) {
    uint64_t v6 = __str;
  }
  else {
    uint64_t v6 = (std::string *)__str->__r_.__value_.__r.__words[0];
  }
  int v7 = a3[23];
  if (v7 >= 0) {
    signed int v8 = a3;
  }
  else {
    signed int v8 = *(char **)a3;
  }
  if (v7 >= 0) {
    int64_t v9 = a3[23];
  }
  else {
    int64_t v9 = *((void *)a3 + 1);
  }
  if (v9)
  {
    if ((size & 0x80u) != 0) {
      int64_t size = __str->__r_.__value_.__l.__size_;
    }
    if (size >= v9)
    {
      uint64_t v12 = (char *)v6 + size;
      int v13 = *v8;
      char v14 = v6;
      do
      {
        int64_t v15 = size - v9;
        if (v15 == -1) {
          break;
        }
        long long v16 = (char *)memchr(v14, v13, v15 + 1);
        if (!v16) {
          break;
        }
        long long v17 = v16;
        if (!memcmp(v16, v8, v9))
        {
          if (v17 != v12)
          {
            int64_t v11 = v17 - (char *)v6;
            if (v17 - (char *)v6 != -1) {
              return std::string::basic_string(a1, __str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
            }
          }
          break;
        }
        char v14 = (std::string *)(v17 + 1);
        int64_t size = v12 - (v17 + 1);
      }
      while (size >= v9);
    }
    return (std::string *)sub_100058DB0(a1, "");
  }
  else
  {
    int64_t v11 = 0;
    return std::string::basic_string(a1, __str, v11 + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v18);
  }
}

void getCarrierInformation(const std::string *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (char *)a2;
  *(void *)(a2 + 112) = 0;
  *(_OWORD *)(a2 + 80) = 0u;
  *(_OWORD *)(a2 + 96) = 0u;
  *(_OWORD *)(a2 + 48) = 0u;
  *(_OWORD *)(a2 + 64) = 0u;
  *(_OWORD *)(a2 + 16) = 0u;
  *(_OWORD *)(a2 + 32) = 0u;
  *(_OWORD *)a2 = 0u;
  long long v48 = 0;
  long long v49 = 0;
  unint64_t v50 = 0;
  long long v46 = 0uLL;
  uint64_t v47 = 0;
  long long v44 = 0u;
  long long v45 = 0u;
  long long v42 = 0u;
  long long v43 = 0u;
  long long v40 = 0u;
  long long v41 = 0u;
  long long v38 = 0u;
  long long v39 = 0u;
  long long v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  long long v35 = 0u;
  long long v32 = 0u;
  long long v33 = 0u;
  long long v30 = 0u;
  long long v31 = 0u;
  long long v29 = 0u;
  sub_1003C09B4((void (__cdecl ***)(std::istringstream *__hidden))&v29, a1, 8);
  while (1)
  {
    CFStringRef v3 = (void *)sub_10013EA34((uint64_t)&v29);
    CFUUIDRef v4 = v49;
    if ((*((unsigned char *)v3 + *(void *)(*v3 - 24) + 32) & 5) != 0) {
      break;
    }
    if ((unint64_t)v49 >= v50)
    {
      uint64_t v6 = (long long *)sub_100048008((uint64_t *)&v48, &v46);
    }
    else
    {
      if (SHIBYTE(v47) < 0)
      {
        sub_10004FC84(v49, (void *)v46, *((unint64_t *)&v46 + 1));
      }
      else
      {
        long long v5 = v46;
        *((void *)v49 + 2) = v47;
        *CFUUIDRef v4 = v5;
      }
      uint64_t v6 = (long long *)((char *)v4 + 24);
    }
    long long v49 = v6;
  }
  int v7 = v48;
  if ((int)(-1431655765 * ((unint64_t)((char *)v49 - (char *)v48) >> 3)) >= 1)
  {
    uint64_t v8 = 0;
    long long v23 = (void **)(v2 + 96);
    long long v24 = (void **)(v2 + 72);
    int64_t v9 = (void **)(v2 + 24);
    int64_t v10 = (void **)(v2 + 48);
    do
    {
      if (v8)
      {
        int64_t v11 = &v7[v8];
        uint64_t v12 = HIBYTE(v11->__r_.__value_.__r.__words[2]);
        if (SHIBYTE(v11->__r_.__value_.__r.__words[2]) < 0)
        {
          int v13 = (const std::string *)v11->__r_.__value_.__r.__words[0];
          uint64_t size = v11->__r_.__value_.__l.__size_;
        }
        else
        {
          int v13 = &v7[v8];
          uint64_t size = HIBYTE(v11->__r_.__value_.__r.__words[2]);
        }
        if (size >= 4)
        {
          int64_t v15 = (char *)v13 + size;
          long long v16 = (std::string *)v13;
          while (1)
          {
            long long v17 = (char *)memchr(v16, 71, size - 3);
            if (!v17) {
              goto LABEL_34;
            }
            if (*(_DWORD *)v17 == 826558791) {
              break;
            }
            long long v16 = (std::string *)(v17 + 1);
            uint64_t size = v15 - (char *)v16;
            if (v15 - (char *)v16 < 4) {
              goto LABEL_34;
            }
          }
          if (v17 == v15)
          {
LABEL_34:
            uint64_t v2 = (char *)a2;
            goto LABEL_35;
          }
          uint64_t v2 = (char *)a2;
          if (v17 - (char *)v13 != -1)
          {
            sub_100058DB0(__p, "-");
            sub_100DB9B40(&v28, (std::string *)&v7[v8], (char *)__p);
            if (*(char *)(a2 + 95) < 0) {
              operator delete(*v24);
            }
            *(std::string *)long long v24 = v28;
            *((unsigned char *)&v28.__r_.__value_.__s + 23) = 0;
            v28.__r_.__value_.__s.__data_[0] = 0;
            if (v27 < 0) {
              operator delete(__p[0]);
            }
            int v7 = v48;
            uint64_t v12 = HIBYTE(v48[v8].__r_.__value_.__r.__words[2]);
          }
        }
LABEL_35:
        char v18 = (std::string *)&v7[v8];
        uint64_t v19 = v18;
        if ((v12 & 0x80) != 0)
        {
          uint64_t v19 = (std::string *)v18->__r_.__value_.__r.__words[0];
          uint64_t v12 = v18->__r_.__value_.__l.__size_;
        }
        if (v12 >= 4)
        {
          long long v20 = (char *)v19 + v12;
          uint64_t v21 = v19;
          do
          {
            long long v22 = (char *)memchr(v21, 71, v12 - 3);
            if (!v22) {
              break;
            }
            if (*(_DWORD *)v22 == 843336007)
            {
              if (v22 != v20 && v22 - (char *)v19 != -1)
              {
                sub_100058DB0(__p, "-");
                sub_100DB9B40(&v28, v18, (char *)__p);
                if (v2[119] < 0) {
                  operator delete(*v23);
                }
                *(std::string *)long long v23 = v28;
                *((unsigned char *)&v28.__r_.__value_.__s + 23) = 0;
                v28.__r_.__value_.__s.__data_[0] = 0;
                if (v27 < 0) {
                  operator delete(__p[0]);
                }
              }
              break;
            }
            uint64_t v21 = (std::string *)(v22 + 1);
            uint64_t v12 = v20 - (char *)v21;
          }
          while (v20 - (char *)v21 >= 4);
        }
      }
      else
      {
        std::string::basic_string(&v28, v7, 0, 3uLL, (std::allocator<char> *)__p);
        if (v2[47] < 0) {
          operator delete(*v9);
        }
        *(std::string *)int64_t v9 = v28;
        std::string::basic_string(&v28, v48, 3uLL, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)__p);
        if (v2[71] < 0) {
          operator delete(*v10);
        }
        *(std::string *)int64_t v10 = v28;
      }
      ++v8;
      int v7 = v48;
    }
    while (v8 < (int)(-1431655765 * ((unint64_t)((char *)v49 - (char *)v48) >> 3)));
  }
  if (SBYTE7(v35) < 0) {
    operator delete(v34[0]);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  if (SHIBYTE(v47) < 0) {
    operator delete((void *)v46);
  }
  *(void *)&long long v29 = &v48;
  sub_100047F64((void ***)&v29);
}

void sub_100DBA154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1003C0B38((uint64_t)&a22);
  if (*(char *)(v22 - 113) < 0) {
    operator delete(*(void **)(v22 - 136));
  }
  a22 = v22 - 112;
  sub_100047F64((void ***)&a22);
  sub_10039A890(a12);
  _Unwind_Resume(a1);
}

uint64_t checkFilePresentUsingMobileHelper(os_log_t *a1, Registry **a2, uint64_t *a3)
{
  uint64_t v10 = 0;
  int64_t v11 = 0;
  Registry::getMobileHelper(&v10, *a2);
  if (!v10)
  {
    uint64_t v8 = *a1;
    if (os_log_type_enabled(*a1, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Couldnt get MobileHelper", buf, 2u);
    }
    goto LABEL_11;
  }
  if (!(*(unsigned int (**)(uint64_t, uint64_t *))(*(void *)v10 + 160))(v10, a3))
  {
LABEL_11:
    uint64_t v7 = 0;
    goto LABEL_12;
  }
  long long v5 = *a1;
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a3 + 23) >= 0) {
      uint64_t v6 = a3;
    }
    else {
      uint64_t v6 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::string buf = 136315138;
    int v13 = v6;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I File: %s existing using mobile helper. Check permissions of this path", buf, 0xCu);
  }
  uint64_t v7 = 1;
LABEL_12:
  if (v11) {
    sub_10004D2C8(v11);
  }
  return v7;
}

void sub_100DBA320(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

const char *sub_100DBA340(unsigned int a1)
{
  if (a1 > 0xF) {
    return "overlay unknown";
  }
  else {
    return off_101A5A730[a1];
  }
}

uint64_t sub_100DBA364(void **a1)
{
  char v1 = *((unsigned char *)a1 + 23);
  if (v1 >= 0) {
    uint64_t v2 = *((unsigned __int8 *)a1 + 23);
  }
  else {
    uint64_t v2 = (uint64_t)a1[1];
  }
  if (v1 >= 0) {
    CFStringRef v3 = (char *)a1;
  }
  else {
    CFStringRef v3 = (char *)*a1;
  }
  CFUUIDRef v4 = &v3[v2];
  if (v2 >= 29)
  {
    uint64_t v5 = v2;
    uint64_t v6 = v3;
    do
    {
      uint64_t v7 = (char *)memchr(v6, 100, v5 - 28);
      if (!v7) {
        break;
      }
      if (*(void *)v7 == 0x6D2B656369766564
        && *((void *)v7 + 1) == 0x746C756D2B6F6E76
        && *((void *)v7 + 2) == 0x61632B65646F6D69
        && *(void *)(v7 + 21) == 0x726569727261632BLL)
      {
        if (v7 != v4 && v7 == v3) {
          return 7;
        }
        break;
      }
      uint64_t v6 = v7 + 1;
      uint64_t v5 = v4 - v6;
    }
    while (v4 - v6 >= 29);
  }
  if (v2 >= 22)
  {
    uint64_t v12 = v2;
    int v13 = v3;
    do
    {
      char v14 = (char *)memchr(v13, 109, v12 - 21);
      if (!v14) {
        break;
      }
      if (*(void *)v14 == 0x6C756D2B6F6E766DLL
        && *((void *)v14 + 1) == 0x632B65646F6D6974
        && *(void *)(v14 + 14) == 0x726569727261632BLL)
      {
        if (v14 != v4 && v14 == v3) {
          return 6;
        }
        break;
      }
      int v13 = v14 + 1;
      uint64_t v12 = v4 - v13;
    }
    while (v4 - v13 >= 22);
    if (v2 >= 24)
    {
      uint64_t v17 = v2;
      char v18 = v3;
      do
      {
        uint64_t v19 = (char *)memchr(v18, 100, v17 - 23);
        if (!v19) {
          break;
        }
        if (*(void *)v19 == 0x6D2B656369766564
          && *((void *)v19 + 1) == 0x65646F6D69746C75
          && *((void *)v19 + 2) == 0x726569727261632BLL)
        {
          if (v19 != v4 && v19 == v3) {
            return 3;
          }
          break;
        }
        char v18 = v19 + 1;
        uint64_t v17 = v4 - v18;
      }
      while (v4 - v18 >= 24);
    }
  }
  if (v2 >= 19)
  {
    uint64_t v22 = v2;
    long long v23 = v3;
    do
    {
      long long v24 = (char *)memchr(v23, 100, v22 - 18);
      if (!v24) {
        break;
      }
      if (*(void *)v24 == 0x6D2B656369766564
        && *((void *)v24 + 1) == 0x727261632B6F6E76
        && *(void *)(v24 + 11) == 0x726569727261632BLL)
      {
        if (v24 != v4 && v24 == v3) {
          return 5;
        }
        break;
      }
      long long v23 = v24 + 1;
      uint64_t v22 = v4 - v23;
    }
    while (v4 - v23 >= 19);
  }
  if (v2 >= 17)
  {
    uint64_t v27 = v2;
    std::string v28 = v3;
    do
    {
      long long v29 = (char *)memchr(v28, 109, v27 - 16);
      if (!v29) {
        break;
      }
      if (*(void *)v29 == 0x646F6D69746C756DLL && *((void *)v29 + 1) == 0x6569727261632B65 && v29[16] == 114)
      {
        if (v29 != v4 && v29 == v3) {
          return 2;
        }
        break;
      }
      std::string v28 = v29 + 1;
      uint64_t v27 = v4 - v28;
    }
    while (v4 - v28 >= 17);
  }
  if (v2 >= 14)
  {
    uint64_t v32 = v2;
    long long v33 = v3;
    do
    {
      uint64_t v34 = (char *)memchr(v33, 100, v32 - 13);
      if (!v34) {
        break;
      }
      if (*(void *)v34 == 0x632B656369766564 && *(void *)(v34 + 6) == 0x726569727261632BLL)
      {
        if (v34 != v4 && v34 == v3) {
          return 1;
        }
        break;
      }
      long long v33 = v34 + 1;
      uint64_t v32 = v4 - v33;
    }
    while (v4 - v33 >= 14);
  }
  if (v2 < 12) {
    return 0;
  }
  uint64_t v36 = v2;
  long long v37 = v3;
  do
  {
    long long v38 = (char *)memchr(v37, 109, v36 - 11);
    if (!v38) {
      break;
    }
    if (*(void *)v38 == 0x7261632B6F6E766DLL && *((_DWORD *)v38 + 2) == 1919248754)
    {
      if (v38 != v4 && v38 == v3) {
        return 4;
      }
      break;
    }
    long long v37 = v38 + 1;
    uint64_t v36 = v4 - v37;
  }
  while (v4 - v37 >= 12);
  uint64_t v40 = v2;
  long long v41 = v3;
  do
  {
    long long v42 = (char *)memchr(v41, 103, v40 - 11);
    if (!v42) {
      break;
    }
    if (*(void *)v42 == 0x7261632B616D7367 && *((_DWORD *)v42 + 2) == 1919248754)
    {
      if (v42 != v4 && v42 == v3) {
        return 8;
      }
      break;
    }
    long long v41 = v42 + 1;
    uint64_t v40 = v4 - v41;
  }
  while (v4 - v41 >= 12);
  if (v2 >= 19)
  {
    uint64_t v44 = v2;
    long long v45 = v3;
    do
    {
      long long v46 = (char *)memchr(v45, 100, v44 - 18);
      if (!v46) {
        break;
      }
      if (*(void *)v46 == 0x672B656369766564
        && *((void *)v46 + 1) == 0x727261632B616D73
        && *(void *)(v46 + 11) == 0x726569727261632BLL)
      {
        if (v46 != v4 && v46 == v3) {
          return 9;
        }
        break;
      }
      long long v45 = v46 + 1;
      uint64_t v44 = v4 - v45;
    }
    while (v4 - v45 >= 19);
    if (v2 >= 22)
    {
      uint64_t v49 = v2;
      unint64_t v50 = v3;
      do
      {
        long long v51 = (char *)memchr(v50, 109, v49 - 21);
        if (!v51) {
          break;
        }
        if (*(void *)v51 == 0x646F6D69746C756DLL
          && *((void *)v51 + 1) == 0x632B616D73672B65
          && *(void *)(v51 + 14) == 0x726569727261632BLL)
        {
          if (v51 != v4 && v51 == v3) {
            return 10;
          }
          break;
        }
        unint64_t v50 = v51 + 1;
        uint64_t v49 = v4 - v50;
      }
      while (v4 - v50 >= 22);
      if (v2 >= 29)
      {
        uint64_t v54 = v2;
        std::string v55 = v3;
        do
        {
          uint64_t v56 = (char *)memchr(v55, 100, v54 - 28);
          if (!v56) {
            break;
          }
          if (*(void *)v56 == 0x6D2B656369766564
            && *((void *)v56 + 1) == 0x65646F6D69746C75
            && *((void *)v56 + 2) == 0x61632B616D73672BLL
            && *(void *)(v56 + 21) == 0x726569727261632BLL)
          {
            BOOL v76 = v56 != v4 && v56 == v3;
            if (v76) {
              uint64_t result = 11;
            }
            else {
              uint64_t result = 0;
            }
            if (v76) {
              return result;
            }
            goto LABEL_165;
          }
          std::string v55 = v56 + 1;
          uint64_t v54 = v4 - v55;
        }
        while (v4 - v55 >= 29);
      }
    }
  }
  if (v2 < 17) {
    return 0;
  }
LABEL_165:
  uint64_t v60 = v2;
  uint64_t v61 = v3;
  do
  {
    uint64_t v62 = (char *)memchr(v61, 109, v60 - 16);
    if (!v62) {
      break;
    }
    if (*(void *)v62 == 0x6D73672B6F6E766DLL && *((void *)v62 + 1) == 0x6569727261632B61 && v62[16] == 114)
    {
      if (v62 != v4 && v62 == v3) {
        return 12;
      }
      break;
    }
    uint64_t v61 = v62 + 1;
    uint64_t v60 = v4 - v61;
  }
  while (v4 - v61 >= 17);
  if (v2 < 24) {
    return 0;
  }
  uint64_t v65 = v2;
  int v66 = v3;
  do
  {
    unsigned int v67 = (char *)memchr(v66, 100, v65 - 23);
    if (!v67) {
      break;
    }
    if (*(void *)v67 == 0x6D2B656369766564
      && *((void *)v67 + 1) == 0x616D73672B6F6E76
      && *((void *)v67 + 2) == 0x726569727261632BLL)
    {
      if (v67 != v4 && v67 == v3) {
        return 13;
      }
      break;
    }
    int v66 = v67 + 1;
    uint64_t v65 = v4 - v66;
  }
  while (v4 - v66 >= 24);
  if (v2 < 27) {
    return 0;
  }
  uint64_t v70 = v2;
  uint64_t v71 = v3;
  do
  {
    uint64_t v72 = (char *)memchr(v71, 109, v70 - 26);
    if (!v72) {
      break;
    }
    if (*(void *)v72 == 0x6C756D2B6F6E766DLL
      && *((void *)v72 + 1) == 0x672B65646F6D6974
      && *((void *)v72 + 2) == 0x727261632B616D73
      && *(void *)(v72 + 19) == 0x726569727261632BLL)
    {
      if (v72 != v4 && v72 == v3) {
        return 14;
      }
      break;
    }
    uint64_t v71 = v72 + 1;
    uint64_t v70 = v4 - v71;
  }
  while (v4 - v71 >= 27);
  if (v2 < 34) {
    return 0;
  }
  uint64_t v77 = v3;
  do
  {
    uint64_t result = (uint64_t)memchr(v77, 100, v2 - 33);
    if (!result) {
      break;
    }
    uint64_t v78 = result;
    if (!memcmp((const void *)result, "device+mvno+multimode+gsma+carrier", 0x22uLL))
    {
      if ((char *)v78 == v3) {
        unsigned int v79 = 15;
      }
      else {
        unsigned int v79 = 0;
      }
      if ((char *)v78 == v4) {
        return 0;
      }
      else {
        return v79;
      }
    }
    uint64_t result = 0;
    uint64_t v77 = (char *)(v78 + 1);
    uint64_t v2 = (uint64_t)&v4[-v78 - 1];
  }
  while (v2 >= 34);
  return result;
}

BOOL sub_100DBAB5C()
{
  __s1 = 0;
  __uint64_t n = 0;
  uint64_t v18 = 0;
  getGSMAOverlayKey(&__s1);
  std::string __p = 0;
  uint64_t v14 = 0;
  uint64_t v15 = 0;
  getGSMAOverlayKey(&__p);
  char v0 = HIBYTE(v18);
  if (v18 >= 0) {
    size_t v1 = HIBYTE(v18);
  }
  else {
    size_t v1 = __n;
  }
  uint64_t v2 = HIBYTE(v15);
  int v3 = SHIBYTE(v15);
  if (v15 < 0) {
    uint64_t v2 = v14;
  }
  if (v1 != v2)
  {
    BOOL v10 = 1;
    if ((SHIBYTE(v15) & 0x80000000) == 0) {
      goto LABEL_23;
    }
    goto LABEL_26;
  }
  if (v15 >= 0) {
    p_p = (unsigned __int8 *)&__p;
  }
  else {
    p_p = (unsigned __int8 *)__p;
  }
  if (SHIBYTE(v18) < 0)
  {
    BOOL v10 = memcmp(__s1, p_p, __n) != 0;
    goto LABEL_22;
  }
  if (HIBYTE(v18))
  {
    uint64_t v5 = HIBYTE(v18) - 1;
    p_s1 = &__s1;
    do
    {
      int v8 = *(unsigned __int8 *)p_s1;
      p_s1 = (void **)((char *)p_s1 + 1);
      int v7 = v8;
      int v9 = *p_p++;
      BOOL v10 = v7 != v9;
    }
    while (v7 == v9 && v5-- != 0);
LABEL_22:
    if ((v3 & 0x80000000) == 0) {
      goto LABEL_23;
    }
LABEL_26:
    operator delete(__p);
    if ((v18 & 0x8000000000000000) == 0) {
      return v10;
    }
LABEL_27:
    operator delete(__s1);
    return v10;
  }
  BOOL v10 = 0;
  if (SHIBYTE(v15) < 0) {
    goto LABEL_26;
  }
LABEL_23:
  if (v0 < 0) {
    goto LABEL_27;
  }
  return v10;
}

void sub_100DBAC6C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBAC88(void *a1)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  memset(v1, 0, sizeof(v1));
  ctu::tokenize();
  uint64_t v2 = (void **)v1;
  sub_100047F64(&v2);
}

void sub_100DBADD4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_100047F64(&a12);
  if (*(char *)(v12 + 23) < 0) {
    operator delete(*(void **)v12);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100DBAE00(os_log_t *a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      int v7 = a2;
    }
    else {
      int v7 = (uint64_t *)*a2;
    }
    if (*((char *)a3 + 23) >= 0) {
      int v8 = a3;
    }
    else {
      int v8 = (uint64_t *)*a3;
    }
    *(_DWORD *)std::string buf = 136315394;
    *(void *)&uint8_t buf[4] = v7;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I currentCarrierFile: %s - matchedCarrierFile: %s", buf, 0x16u);
  }
  memset(buf, 0, sizeof(buf));
  sub_100DBAC88(buf);
  std::string __p = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  sub_100DBAC88(&__p);
  int v9 = *a1;
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v10 = buf;
    if ((buf[23] & 0x80u) != 0) {
      BOOL v10 = *(uint8_t **)buf;
    }
    p_p = &__p;
    if (v27 < 0) {
      p_p = __p;
    }
    *(_DWORD *)std::string v28 = 136315394;
    long long v29 = v10;
    __int16 v30 = 2080;
    long long v31 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I current key: %s - matched key: %s", v28, 0x16u);
  }
  uint8_t v12 = buf[23];
  if ((buf[23] & 0x80u) == 0) {
    uint64_t v13 = buf[23];
  }
  else {
    uint64_t v13 = *(void *)&buf[8];
  }
  uint64_t v14 = HIBYTE(v27);
  int v15 = SHIBYTE(v27);
  if (v27 < 0) {
    uint64_t v14 = v26;
  }
  if (v13 != v14)
  {
    BOOL v22 = 1;
    if ((SHIBYTE(v27) & 0x80000000) == 0) {
      goto LABEL_37;
    }
    goto LABEL_40;
  }
  if (v27 >= 0) {
    long long v16 = (unsigned __int8 *)&__p;
  }
  else {
    long long v16 = (unsigned __int8 *)__p;
  }
  if ((char)buf[23] < 0)
  {
    BOOL v22 = memcmp(*(const void **)buf, v16, *(size_t *)&buf[8]) != 0;
    goto LABEL_36;
  }
  if (buf[23])
  {
    uint64_t v17 = buf[23] - 1;
    uint64_t v18 = buf;
    do
    {
      int v20 = *v18++;
      int v19 = v20;
      int v21 = *v16++;
      BOOL v22 = v19 != v21;
    }
    while (v19 == v21 && v17-- != 0);
LABEL_36:
    if ((v15 & 0x80000000) == 0) {
      goto LABEL_37;
    }
LABEL_40:
    operator delete(__p);
    if ((buf[23] & 0x80) == 0) {
      return v22;
    }
LABEL_41:
    operator delete(*(void **)buf);
    return v22;
  }
  BOOL v22 = 0;
  if (SHIBYTE(v27) < 0) {
    goto LABEL_40;
  }
LABEL_37:
  if ((v12 & 0x80) != 0) {
    goto LABEL_41;
  }
  return v22;
}

void sub_100DBB038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBB05C(std::string *a1, NSObject **a2, std::string::size_type a3)
{
  a1->__r_.__value_.__r.__words[0] = 0;
  a1->__r_.__value_.__l.__size_ = 0;
  a1->__r_.__value_.__r.__words[2] = 0;
  if (*(char *)(a3 + 23) >= 0) {
    uint64_t v4 = *(unsigned __int8 *)(a3 + 23);
  }
  else {
    uint64_t v4 = *(void *)(a3 + 8);
  }
  if (v4)
  {
    if ((ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || (ctu::starts_with() & 1) != 0
      || ctu::starts_with())
    {
      uint64_t v6 = (const void *)kPlistExtension;
      char v7 = *(unsigned char *)(a3 + 23);
      int v8 = *(unsigned char **)a3;
      if (v7 >= 0) {
        int v9 = (unsigned char *)a3;
      }
      else {
        int v9 = *(unsigned char **)a3;
      }
      int64_t v10 = strlen(kPlistExtension);
      if (v10)
      {
        int64_t v11 = v10;
        if (v7 >= 0) {
          uint64_t v12 = *(unsigned __int8 *)(a3 + 23);
        }
        else {
          uint64_t v12 = *(void *)(a3 + 8);
        }
        if (v12 >= v10)
        {
          uint64_t v18 = &v9[v12];
          int v19 = (char)*kPlistExtension;
          int v20 = v9;
          do
          {
            uint64_t v21 = v12 - v11;
            if (v21 == -1) {
              break;
            }
            BOOL v22 = (char *)memchr(v20, v19, v21 + 1);
            if (!v22) {
              break;
            }
            long long v23 = v22;
            if (!memcmp(v22, v6, v11))
            {
              if (v23 != v18)
              {
                std::string::size_type v17 = v23 - v9;
                if (v23 - v9 != -1) {
                  goto LABEL_35;
                }
              }
              break;
            }
            int v20 = v23 + 1;
            uint64_t v12 = v18 - (v23 + 1);
          }
          while (v12 >= v11);
        }
        uint64_t v13 = *a2;
        if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          uint64_t v14 = "#I plist extension is not present in the carrier file name";
LABEL_32:
          int v15 = v13;
          uint32_t v16 = 2;
LABEL_33:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, (uint8_t *)&buf, v16);
        }
      }
      else
      {
        std::string::size_type v17 = 0;
LABEL_35:
        memset(&buf, 0, sizeof(buf));
        if (v7 < 0) {
          sub_10004FC84(&buf, v8, *(void *)(a3 + 8));
        }
        else {
          std::string buf = *(std::string *)a3;
        }
        std::string::erase(&buf, v17, 0xFFFFFFFFFFFFFFFFLL);
        std::string::size_type size = HIBYTE(buf.__r_.__value_.__r.__words[2]);
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          p_std::string buf = &buf;
        }
        else {
          p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
        }
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          std::string::size_type size = buf.__r_.__value_.__l.__size_;
        }
        if (size)
        {
          uint64_t v26 = (char *)&p_buf[-1].__r_.__value_.__r.__words[2] + 7;
          uint64_t v27 = -1;
          while (size)
          {
            int v28 = v26[size--];
            ++v27;
            if (v28 == 43)
            {
              if (size == -1) {
                break;
              }
              if (v27)
              {
                std::string::basic_string(&v34, &buf, size + 1, 0xFFFFFFFFFFFFFFFFLL, (std::allocator<char> *)&v35);
                *a1 = v34;
                goto LABEL_59;
              }
              long long v29 = *a2;
              if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
              {
                LOWORD(v34.__r_.__value_.__l.__data_) = 0;
                __int16 v30 = "#I _ is the last character in the string, cannot get the version";
                goto LABEL_58;
              }
              goto LABEL_59;
            }
          }
        }
        long long v29 = *a2;
        if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(v34.__r_.__value_.__l.__data_) = 0;
          __int16 v30 = "#I _ is missing from the carrier file";
LABEL_58:
          _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, v30, (uint8_t *)&v34, 2u);
        }
LABEL_59:
        if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(buf.__r_.__value_.__l.__data_);
        }
      }
    }
    else
    {
      long long v31 = *a2;
      if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
      {
        if (*(char *)(a3 + 23) >= 0) {
          std::string::size_type v32 = a3;
        }
        else {
          std::string::size_type v32 = *(void *)a3;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v32;
        uint64_t v14 = "#I There is no overlay for the carrier file: %s";
        int v15 = v31;
        uint32_t v16 = 12;
        goto LABEL_33;
      }
    }
  }
  else
  {
    uint64_t v13 = *a2;
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      uint64_t v14 = "#I Carrier file name is empty?";
      goto LABEL_32;
    }
  }
}

void sub_100DBB624(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a20 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100DBB64C(NSObject **a1, std::string::size_type a2, std::string::size_type a3)
{
  memset(&__src, 0, sizeof(__src));
  sub_100DBB05C(&__src, a1, a2);
  std::string::size_type v6 = HIBYTE(__src.__r_.__value_.__r.__words[2]);
  int v7 = SHIBYTE(__src.__r_.__value_.__r.__words[2]);
  std::string::size_type size = __src.__r_.__value_.__l.__size_;
  if ((__src.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v6 = __src.__r_.__value_.__l.__size_;
  }
  if (!v6)
  {
    uint64_t v12 = *a1;
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a2 + 23) >= 0) {
        std::string::size_type v13 = a2;
      }
      else {
        std::string::size_type v13 = *(void *)a2;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v13;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Current carrier file does not have version: %s", (uint8_t *)&buf, 0xCu);
    }
    BOOL v14 = 0;
    if ((v7 & 0x80) != 0) {
      goto LABEL_67;
    }
    return v14;
  }
  memset(&v30, 0, sizeof(v30));
  sub_100DBB05C(&v30, a1, a3);
  std::string::size_type v9 = HIBYTE(v30.__r_.__value_.__r.__words[2]);
  int v10 = SHIBYTE(v30.__r_.__value_.__r.__words[2]);
  std::string::size_type v11 = v30.__r_.__value_.__l.__size_;
  if ((v30.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v9 = v30.__r_.__value_.__l.__size_;
  }
  if (!v9)
  {
    int v15 = *a1;
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(a3 + 23) >= 0) {
        std::string::size_type v16 = a3;
      }
      else {
        std::string::size_type v16 = *(void *)a3;
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v16;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Matched carrier file does not have version: %s", (uint8_t *)&buf, 0xCu);
    }
    BOOL v14 = 0;
    if ((v10 & 0x80) != 0) {
      goto LABEL_65;
    }
    goto LABEL_66;
  }
  long long v29 = 0;
  if (v7 < 0) {
    sub_10004FC84(&__dst, __src.__r_.__value_.__l.__data_, size);
  }
  else {
    std::string __dst = __src;
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = __dst;
  }
  std::string::size_type v32 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  std::string v34 = 0;
  if (ctu::cf::convert_copy())
  {
    std::string::size_type v17 = v32;
    std::string::size_type v32 = v34;
    char v35 = v17;
    sub_1000558F4((const void **)&v35);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  long long v29 = v32;
  std::string::size_type v32 = 0;
  sub_1000558F4((const void **)&v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
  {
    operator delete(__dst.__r_.__value_.__l.__data_);
    if ((v10 & 0x80000000) == 0) {
      goto LABEL_38;
    }
  }
  else if ((v10 & 0x80000000) == 0)
  {
LABEL_38:
    std::string v26 = v30;
    goto LABEL_41;
  }
  sub_10004FC84(&v26, v30.__r_.__value_.__l.__data_, v11);
LABEL_41:
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&__p, v26.__r_.__value_.__l.__data_, v26.__r_.__value_.__l.__size_);
  }
  else {
    std::string __p = v26;
  }
  std::string::size_type v32 = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = __p;
  }
  std::string v34 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v18 = v32;
    std::string::size_type v32 = v34;
    char v35 = v18;
    sub_1000558F4((const void **)&v35);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  CFStringRef v19 = v32;
  uint64_t v27 = v32;
  std::string::size_type v32 = 0;
  sub_1000558F4((const void **)&v32);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v26.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v26.__r_.__value_.__l.__data_);
  }
  int v20 = *a1;
  if (os_log_type_enabled(*a1, OS_LOG_TYPE_DEFAULT))
  {
    p_src = (std::string *)__src.__r_.__value_.__r.__words[0];
    if (v7 >= 0) {
      p_src = &__src;
    }
    BOOL v22 = (std::string *)v30.__r_.__value_.__r.__words[0];
    if (v10 >= 0) {
      BOOL v22 = &v30;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136446466;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_src;
    WORD2(buf.__r_.__value_.__r.__words[1]) = 2082;
    *(std::string::size_type *)((char *)&buf.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v22;
    _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Versions in the plist files (%{public}s, %{public}s)", (uint8_t *)&buf, 0x16u);
  }
  uint64_t v23 = _CompareBundleVersionStrings(v29, v19);
  BOOL v14 = v23 == -1;
  if (v23 == -1)
  {
    long long v24 = *a1;
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I New version is higher", (uint8_t *)&buf, 2u);
    }
  }
  sub_1000558F4((const void **)&v27);
  sub_1000558F4((const void **)&v29);
  if ((*((unsigned char *)&v30.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_65:
  }
    operator delete(v30.__r_.__value_.__l.__data_);
LABEL_66:
  if ((*((unsigned char *)&__src.__r_.__value_.__s + 23) & 0x80) != 0) {
LABEL_67:
  }
    operator delete(__src.__r_.__value_.__l.__data_);
  return v14;
}

void sub_100DBBAEC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,const void *a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,const void *a36,void *__p,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (a42 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_1000558F4(&a23);
  if (a29 < 0) {
    operator delete(a24);
  }
  if (a35 < 0) {
    operator delete(a30);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DBBBE8(uint64_t a1, uint64_t a2, const void **a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&__p, kCtLoggingSystemName, "cb.overlay");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&buf, (const OsLogContext *)&__p);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)&buf);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&buf);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&__p);
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  Registry::getFileSystemInterface((uint64_t *)(a1 + 24), *(Registry **)a2);
  *(_DWORD *)(a1 + 40) = a4;
  sub_100058198((const void **)(a1 + 48), a3);
  *(void *)(a1 + 56) = 0;
  int v15 = (std::string *)(a1 + 56);
  sub_1007DE21C(a1 + 64, a2);
  sub_1007DE21C(a1 + 248, a2);
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 480) = a5;
  if (*a3) {
    std::string::size_type v16 = sub_100080778;
  }
  else {
    std::string::size_type v16 = 0;
  }
  if (!v16)
  {
    int v20 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Received base bundle matching info is invalid", (uint8_t *)&__p, 2u);
    }
    return a1;
  }
  sub_100058198(&v33, a3);
  int v17 = sub_100DBC1A0(*(void *)(a6 + 24), (uint64_t)&v33, a1 + 64, 0);
  sub_100057D78(&v33);
  if (v17)
  {
    uint64_t v18 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      sub_1007DF5E4(a1 + 64, &__p);
      CFStringRef v19 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v19;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Found the base bundle successfully with name %s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(char *)(a1 + 127) < 0) {
      sub_10004FC84(&buf, *(void **)(a1 + 104), *(void *)(a1 + 112));
    }
    else {
      std::string buf = *(std::string *)(a1 + 104);
    }
    long long v25 = std::string::append(&buf, "/carrier.plist", 0xEuLL);
    long long v26 = *(_OWORD *)&v25->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v25->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v26;
    v25->__r_.__value_.__l.__size_ = 0;
    v25->__r_.__value_.__r.__words[2] = 0;
    v25->__r_.__value_.__r.__words[0] = 0;
    std::string::operator=((std::string *)(a1 + 200), &__p);
  }
  else
  {
    sub_100058198(&v31, a3);
    int v21 = sub_100DBC1A0(*(void *)(a7 + 24), (uint64_t)&v31, a1 + 64, 1);
    sub_100057D78(&v31);
    BOOL v22 = *(NSObject **)a1;
    BOOL v23 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT);
    if (!v21)
    {
      if (v23)
      {
        LOWORD(__p.__r_.__value_.__l.__data_) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Failed to find a bundle", (uint8_t *)&__p, 2u);
      }
      goto LABEL_37;
    }
    if (v23)
    {
      sub_1007DF5E4(a1 + 64, &__p);
      long long v24 = (__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
          ? &__p
          : (std::string *)__p.__r_.__value_.__r.__words[0];
      LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v24;
      _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Found the base bundle successfully with name %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
    if (*(char *)(a1 + 127) < 0) {
      sub_10004FC84(&buf, *(void **)(a1 + 104), *(void *)(a1 + 112));
    }
    else {
      std::string buf = *(std::string *)(a1 + 104);
    }
    uint64_t v27 = std::string::append(&buf, "/carrier.plist", 0xEuLL);
    long long v28 = *(_OWORD *)&v27->__r_.__value_.__l.__data_;
    __p.__r_.__value_.__r.__words[2] = v27->__r_.__value_.__r.__words[2];
    *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v28;
    v27->__r_.__value_.__l.__size_ = 0;
    v27->__r_.__value_.__r.__words[2] = 0;
    v27->__r_.__value_.__r.__words[0] = 0;
    std::string::operator=((std::string *)(a1 + 200), &__p);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
LABEL_37:
  if (*(char *)(a1 + 223) < 0) {
    sub_10004FC84(&__p, *(void **)(a1 + 200), *(void *)(a1 + 208));
  }
  else {
    std::string __p = *(std::string *)(a1 + 200);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
    operator delete(__p.__r_.__value_.__l.__data_);
    if (!size) {
      return a1;
    }
  }
  else if (!*((unsigned char *)&__p.__r_.__value_.__s + 23))
  {
    return a1;
  }
  sub_100DBC1F0((const void **)&buf.__r_.__value_.__l.__data_, (os_log_t *)a1, a1 + 64);
  if (v15 != &buf)
  {
    __p.__r_.__value_.__r.__words[0] = v15->__r_.__value_.__r.__words[0];
    v15->__r_.__value_.__r.__words[0] = buf.__r_.__value_.__r.__words[0];
    buf.__r_.__value_.__r.__words[0] = 0;
    sub_100057D78((const void **)&__p.__r_.__value_.__l.__data_);
  }
  sub_100057D78((const void **)&buf.__r_.__value_.__l.__data_);
  return a1;
}

void sub_100DBC088(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (*(char *)(v23 + 479) < 0) {
    operator delete(*(void **)(v23 + 456));
  }
  if (*(char *)(v23 + 455) < 0) {
    operator delete(*(void **)(v23 + 432));
  }
  sub_1007DE5C8(v27);
  sub_1007DE5C8(v26);
  sub_100057D78(v25);
  sub_100057D78(v24);
  long long v29 = *(std::__shared_weak_count **)(v23 + 32);
  if (v29) {
    sub_10004D2C8(v29);
  }
  std::string v30 = *(std::__shared_weak_count **)(v23 + 16);
  if (v30) {
    sub_10004D2C8(v30);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v23);
  _Unwind_Resume(a1);
}

uint64_t sub_100DBC1A0(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  char v5 = a4;
  if (!a1) {
    sub_10007B600();
  }
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, char *))(*(void *)a1 + 48))(a1, a2, a3, &v5);
}

void sub_100DBC1F0(const void **a1, os_log_t *a2, uint64_t a3)
{
  char v5 = (Registry **)(a2 + 1);
  if (*(char *)(a3 + 159) < 0)
  {
    sub_10004FC84(__p, *(void **)(a3 + 136), *(void *)(a3 + 144));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(a3 + 136);
    uint64_t v7 = *(void *)(a3 + 152);
  }
  sub_1007B946C(a2, v5, (const UInt8 *)__p, a1);
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DBC278(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DBC294(uint64_t a1, uint64_t a2, const void **a3, int a4, char a5, uint64_t a6)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v14, kCtLoggingSystemName, "cb.overlay");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v15, &v14);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)v15);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v15);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v12 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  Registry::getFileSystemInterface((uint64_t *)(a1 + 24), *(Registry **)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a6 + 160) | a4;
  sub_100058198((const void **)(a1 + 48), a3);
  sub_100DBC1F0((const void **)(a1 + 56), (os_log_t *)a1, a6);
  sub_1007DE310(a1 + 64, a6);
  sub_1007DE310(a1 + 248, a6);
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 480) = a5;
  return a1;
}

void sub_100DBC3B0(_Unwind_Exception *a1)
{
  sub_1007DE5C8(v4);
  sub_100057D78(v2);
  sub_100057D78(v3);
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 2);
  if (v7) {
    sub_10004D2C8(v7);
  }
  ctu::OsLogLogger::~OsLogLogger(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DBC42C(uint64_t a1, uint64_t a2, const void **a3, int a4, char a5, uint64_t a6, uint64_t a7)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v16, kCtLoggingSystemName, "cb.overlay");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v17, &v16);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)v17);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v16);
  *(void *)(a1 + 8) = *(void *)a2;
  uint64_t v14 = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v14;
  if (v14) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v14 + 8), 1uLL, memory_order_relaxed);
  }
  Registry::getFileSystemInterface((uint64_t *)(a1 + 24), *(Registry **)a2);
  *(_DWORD *)(a1 + 40) = *(_DWORD *)(a6 + 160) | a4;
  sub_100058198((const void **)(a1 + 48), a3);
  sub_100DBC1F0((const void **)(a1 + 56), (os_log_t *)a1, a6);
  sub_1007DE310(a1 + 64, a6);
  sub_1007DE310(a1 + 248, a7);
  *(_OWORD *)(a1 + 448) = 0u;
  *(_OWORD *)(a1 + 464) = 0u;
  *(_OWORD *)(a1 + 432) = 0u;
  *(unsigned char *)(a1 + 480) = a5;
  return a1;
}

void sub_100DBC554(_Unwind_Exception *a1)
{
  sub_1007DE5C8(v4);
  sub_100057D78(v2);
  sub_100057D78(v3);
  std::string::size_type v6 = (std::__shared_weak_count *)*((void *)v1 + 4);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = (std::__shared_weak_count *)*((void *)v1 + 2);
  if (v7) {
    sub_10004D2C8(v7);
  }
  ctu::OsLogLogger::~OsLogLogger(v1);
  _Unwind_Resume(a1);
}

void sub_100DBC5D0(uint64_t a1)
{
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*(void **)(a1 + 456));
  }
  if (*(char *)(a1 + 455) < 0) {
    operator delete(*(void **)(a1 + 432));
  }
  sub_1007DE5C8(a1 + 248);
  sub_1007DE5C8(a1 + 64);
  sub_100057D78((const void **)(a1 + 56));
  sub_100057D78((const void **)(a1 + 48));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 32);
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }

  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)a1);
}

void sub_100DBC65C(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = a1 + 64;
  sub_1007DF5E4(a1 + 64, &buf);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
  {
    std::string::size_type size = buf.__r_.__value_.__l.__size_;
    operator delete(buf.__r_.__value_.__l.__data_);
    if (size) {
      goto LABEL_8;
    }
  }
  else if (*((unsigned char *)&buf.__r_.__value_.__s + 23))
  {
    goto LABEL_8;
  }
  std::string::size_type v6 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I There is no valid carrier bundle name", (uint8_t *)&buf, 2u);
  }
  __TUAssertTrigger();
LABEL_8:
  unsigned int v7 = *(_DWORD *)(a1 + 40) - 1;
  if (v7 > 0xE) {
    int v8 = "carrier";
  }
  else {
    int v8 = off_101A5A7B0[v7];
  }
  sub_100058DB0(&v62, v8);
  std::string::push_back(&v62, 43);
  std::string v57 = v62;
  memset(&v62, 0, sizeof(v62));
  sub_1007DF5E4(v4, &__p);
  if (v56 >= 0) {
    p_p = (const std::string::value_type *)&__p;
  }
  else {
    p_p = (const std::string::value_type *)__p;
  }
  if (v56 >= 0) {
    std::string::size_type v10 = HIBYTE(v56);
  }
  else {
    std::string::size_type v10 = v55;
  }
  std::string::size_type v11 = std::string::append(&v57, p_p, v10);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v63.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v63.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  std::string::push_back(&v63, 43);
  std::string buf = v63;
  memset(&v63, 0, sizeof(v63));
  int v13 = *(char *)(a1 + 455);
  if (v13 >= 0) {
    uint64_t v14 = (const std::string::value_type *)(a1 + 432);
  }
  else {
    uint64_t v14 = *(const std::string::value_type **)(a1 + 432);
  }
  if (v13 >= 0) {
    std::string::size_type v15 = *(unsigned __int8 *)(a1 + 455);
  }
  else {
    std::string::size_type v15 = *(void *)(a1 + 440);
  }
  OsLogContext v16 = std::string::append(&buf, v14, v15);
  std::string::size_type v17 = v16->__r_.__value_.__r.__words[0];
  *(void *)&long long v60 = v16->__r_.__value_.__l.__size_;
  *(void *)((char *)&v60 + 7) = *(std::string::size_type *)((char *)&v16->__r_.__value_.__r.__words[1] + 7);
  char v18 = HIBYTE(v16->__r_.__value_.__r.__words[2]);
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  CFStringRef v19 = (void **)(a1 + 456);
  if (*(char *)(a1 + 479) < 0) {
    operator delete(*v19);
  }
  uint64_t v20 = v60;
  *(void *)(a1 + 456) = v17;
  *(void *)(a1 + 464) = v20;
  *(void *)(a1 + 471) = *(void *)((char *)&v60 + 7);
  *(unsigned char *)(a1 + 479) = v18;
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v56) < 0) {
    operator delete(__p);
  }
  if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v57.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v62.__r_.__value_.__l.__data_);
  }
  int v21 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v22 = (void *)(a1 + 456);
    if (*(char *)(a1 + 479) < 0) {
      BOOL v22 = *v19;
    }
    LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v22;
    _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Overridden filename prefix: %s", (uint8_t *)&buf, 0xCu);
  }
  memset(&buf, 0, sizeof(buf));
  if (*(char *)(a1 + 223) < 0) {
    sub_10004FC84(&buf, *(void **)(a1 + 200), *(void *)(a1 + 208));
  }
  else {
    std::string buf = *(std::string *)(a1 + 200);
  }
  uint64_t v23 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    p_std::string buf = &buf;
    if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
      p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
    }
    LODWORD(v63.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v63.__r_.__value_.__r.__words + 4) = (std::string::size_type)p_buf;
    _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I Current carrier file path name: %s", (uint8_t *)&v63, 0xCu);
  }
  memset(&v63, 0, sizeof(v63));
  sub_100DBCF70(a1, &v63);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    size_t v25 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  }
  else {
    size_t v25 = buf.__r_.__value_.__l.__size_;
  }
  if (v25)
  {
    uint64_t v26 = (buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &buf
        : (std::string *)buf.__r_.__value_.__r.__words[0];
    uint64_t v27 = memchr(v26, 43, v25);
    if (v27)
    {
      if (v27 - (unsigned char *)v26 != -1)
      {
        memset(&v57, 0, sizeof(v57));
        (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 120))(&v62);
        ctu::tokenize();
        if (SHIBYTE(v62.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v62.__r_.__value_.__l.__data_);
        }
        memset(&v62, 0, sizeof(v62));
        (*(void (**)(void **__return_ptr))(**(void **)(a1 + 24) + 120))(&__p);
        ctu::tokenize();
        if (SHIBYTE(v56) < 0) {
          operator delete(__p);
        }
        unint64_t v28 = 126
            - 2
            * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 3));
        if (v57.__r_.__value_.__l.__size_ == v57.__r_.__value_.__r.__words[0]) {
          uint64_t v29 = 0;
        }
        else {
          uint64_t v29 = v28;
        }
        sub_100902218((uint64_t)v57.__r_.__value_.__l.__data_, (char *)v57.__r_.__value_.__l.__size_, (uint64_t)&v60, v29, 1);
        unint64_t v30 = 126
            - 2
            * __clz(0xAAAAAAAAAAAAAAABLL* ((uint64_t)(v62.__r_.__value_.__l.__size_ - v62.__r_.__value_.__r.__words[0]) >> 3));
        if (v62.__r_.__value_.__l.__size_ == v62.__r_.__value_.__r.__words[0]) {
          uint64_t v31 = 0;
        }
        else {
          uint64_t v31 = v30;
        }
        sub_100902218((uint64_t)v62.__r_.__value_.__l.__data_, (char *)v62.__r_.__value_.__l.__size_, (uint64_t)&v60, v31, 1);
        std::string __p = 0;
        std::string::size_type v55 = 0;
        uint64_t v56 = 0;
        sub_100CC3120(&__p, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v57.__r_.__value_.__l.__size_ - v57.__r_.__value_.__r.__words[0]) >> 3));
        std::string::size_type v32 = v57.__r_.__value_.__l.__size_;
        long long v33 = (std::string *)v57.__r_.__value_.__r.__words[0];
        char v35 = (void **)v62.__r_.__value_.__l.__size_;
        std::string v34 = (void **)v62.__r_.__value_.__r.__words[0];
        uint64_t v36 = (char *)__p;
        std::string::size_type v58 = (std::string *)__p;
        int v59 = (void **)v62.__r_.__value_.__r.__words[0];
        uint64_t v53 = a2;
        if (v57.__r_.__value_.__r.__words[0] == v57.__r_.__value_.__l.__size_)
        {
LABEL_79:
          uint64_t v40 = v36;
        }
        else
        {
          if (v62.__r_.__value_.__r.__words[0] != v62.__r_.__value_.__l.__size_)
          {
            while ((sub_100046FE8(v33, v34) & 0x80) == 0)
            {
              char v37 = sub_100046FE8(v59, (void **)&v33->__r_.__value_.__l.__data_);
              long long v38 = (std::string **)&v59;
              if ((v37 & 0x80) == 0) {
                goto LABEL_71;
              }
LABEL_72:
              ++*v38;
              if (v33 == (std::string *)v32)
              {
                uint64_t v36 = (char *)v58;
                goto LABEL_79;
              }
              std::string v34 = v59;
              if (v59 == v35)
              {
                uint64_t v36 = (char *)v58;
                goto LABEL_75;
              }
            }
            std::string::operator=(v58, v33);
            long long v38 = &v58;
LABEL_71:
            ++v33;
            goto LABEL_72;
          }
LABEL_75:
          uint64_t v39 = 0;
          do
          {
            std::string::operator=((std::string *)&v36[v39 * 24], &v33[v39]);
            ++v39;
          }
          while (&v33[v39] != (std::string *)v32);
          uint64_t v40 = &v36[v39 * 24];
        }
        long long v41 = v40;
        long long v42 = __p;
        if (__p != v40)
        {
          do
          {
            long long v43 = *(NSObject **)a1;
            if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v44 = v42;
              if (*((char *)v42 + 23) < 0) {
                uint64_t v44 = (void *)*v42;
              }
              LODWORD(v60) = 136446210;
              *(void *)((char *)&v60 + 4) = v44;
              _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I Adding the extra identifier %{public}s to the file name", (uint8_t *)&v60, 0xCu);
            }
            if (*((char *)v42 + 23) >= 0) {
              size_t v45 = *((unsigned __int8 *)v42 + 23);
            }
            else {
              size_t v45 = v42[1];
            }
            uint64_t v61 = 0;
            long long v60 = 0uLL;
            sub_1000C140C((uint64_t)&v60, v45 + 1);
            if (v61 >= 0) {
              long long v46 = &v60;
            }
            else {
              long long v46 = (long long *)v60;
            }
            *(unsigned char *)long long v46 = 43;
            uint64_t v47 = (char *)v46 + 1;
            if (v45)
            {
              if (*((char *)v42 + 23) >= 0) {
                long long v48 = v42;
              }
              else {
                long long v48 = (const void *)*v42;
              }
              memmove(v47, v48, v45);
            }
            *((unsigned char *)v47 + v45) = 0;
            if (v61 >= 0) {
              uint64_t v49 = (const std::string::value_type *)&v60;
            }
            else {
              uint64_t v49 = (const std::string::value_type *)v60;
            }
            if (v61 >= 0) {
              std::string::size_type v50 = HIBYTE(v61);
            }
            else {
              std::string::size_type v50 = *((void *)&v60 + 1);
            }
            std::string::append((std::string *)(a1 + 456), v49, v50);
            if (SHIBYTE(v61) < 0) {
              operator delete((void *)v60);
            }
            v42 += 3;
          }
          while (v42 != (void *)v41);
        }
        *(void *)&long long v60 = &__p;
        sub_100047F64((void ***)&v60);
        std::string __p = &v62;
        sub_100047F64((void ***)&__p);
        v62.__r_.__value_.__r.__words[0] = (std::string::size_type)&v57;
        sub_100047F64((void ***)&v62);
        a2 = v53;
      }
    }
  }
  long long v51 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    sub_100DBCF70(a1, &v57);
    long long v52 = (v57.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
        ? &v57
        : (std::string *)v57.__r_.__value_.__r.__words[0];
    LODWORD(v62.__r_.__value_.__l.__data_) = 136315138;
    *(std::string::size_type *)((char *)v62.__r_.__value_.__r.__words + 4) = (std::string::size_type)v52;
    _os_log_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_DEFAULT, "#I Overridden carrier file path name: %s", (uint8_t *)&v62, 0xCu);
    if (SHIBYTE(v57.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v57.__r_.__value_.__l.__data_);
    }
  }
  if (*(char *)(a1 + 479) < 0)
  {
    sub_10004FC84((unsigned char *)a2, *v19, *(void *)(a1 + 464));
  }
  else
  {
    *(_OWORD *)a2 = *(_OWORD *)v19;
    *(void *)(a2 + 16) = *(void *)(a1 + 472);
  }
  if (SHIBYTE(v63.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v63.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
}

void sub_100DBCE1C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void ***__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,uint64_t a27,uint64_t a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34,uint64_t a35,void **a36,uint64_t a37,int a38,__int16 a39,char a40,char a41)
{
  std::string __p = &a36;
  sub_100047F64((void ***)&__p);
  a36 = &a20;
  sub_100047F64(&a36);
  if (*(char *)(v41 - 137) < 0) {
    operator delete(*(void **)(v41 - 160));
  }
  if (*(char *)(v41 - 105) < 0) {
    operator delete(*(void **)(v41 - 128));
  }
  _Unwind_Resume(a1);
}

void sub_100DBCF70(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_100DBE568(a1, &v8);
  sub_100DBE6D8(a1, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a2 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_100DBD014(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DBD048(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 24);
  sub_100DBCF70(a1, &__p);
  int v3 = (*(uint64_t (**)(uint64_t, std::string *))(*(void *)v2 + 88))(v2, &__p);
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  uint64_t v4 = *(NSObject **)a1;
  BOOL v5 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (v5)
    {
      sub_100DBCF70(a1, &__p);
      if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        p_p = &__p;
      }
      else {
        p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
      }
      *(_DWORD *)std::string buf = 136315138;
      std::string::size_type v10 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Overridden file %s already exists, not generating again", buf, 0xCu);
      if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__p.__r_.__value_.__l.__data_);
      }
    }
  }
  else if (v5)
  {
    LOWORD(__p.__r_.__value_.__l.__data_) = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Overridden file does not exist", (uint8_t *)&__p, 2u);
  }
  return v3 ^ 1u;
}

void sub_100DBD1A0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100DBD1C4(uint64_t a1, uint64_t a2)
{
  sub_100DBDE50(&v68);
  v62[0] = _NSConcreteStackBlock;
  v62[1] = 0x40000000;
  std::string v63 = sub_100DBDEE0;
  uint64_t v64 = &unk_101A5A658;
  uint64_t v65 = a1;
  *(void *)&__p.st_dev = &__p;
  __p.st_ino = (__darwin_ino64_t)&__p;
  *(void *)&__p.st_uid = 0;
  if ((*(unsigned int (**)(void, std::string *))(**(void **)(a1 + 24) + 88))(*(void *)(a1 + 24), &v68))
  {
    uint64_t v3 = *(void *)(a1 + 24);
    (*(void (**)(std::string *__return_ptr, uint64_t, std::string *))(*(void *)v3 + 136))(&buf, v3, &v68);
    uint64_t v4 = (*(uint64_t (**)(uint64_t, std::string *, stat *, void))(*(void *)v3 + 96))(v3, &buf, &__p, 0);
    uint64_t v5 = v4;
    if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(buf.__r_.__value_.__l.__data_);
      if (v5) {
        goto LABEL_36;
      }
    }
    else if (v4)
    {
      goto LABEL_36;
    }
    std::string::size_type v6 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      std::string::size_type v7 = a1 + 456;
      if (*(char *)(a1 + 479) < 0) {
        std::string::size_type v7 = *(void *)(a1 + 456);
      }
      LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Going through the contents in the directory searching for pattern %s", (uint8_t *)&buf, 0xCu);
    }
    for (__darwin_ino64_t i = __p.st_ino; (stat *)i != &__p; __darwin_ino64_t i = *(void *)(i + 8))
    {
      char v9 = *(unsigned char *)(i + 39);
      if (v9 < 0)
      {
        std::string::size_type v10 = *(char **)(i + 16);
        uint64_t v11 = *(void *)(i + 24);
      }
      else
      {
        std::string::size_type v10 = (char *)(i + 16);
        uint64_t v11 = *(unsigned __int8 *)(i + 39);
      }
      char v12 = *(unsigned char *)(a1 + 479);
      if (v12 >= 0) {
        int v13 = (char *)(a1 + 456);
      }
      else {
        int v13 = *(char **)(a1 + 456);
      }
      if (v12 >= 0) {
        int64_t v14 = *(unsigned __int8 *)(a1 + 479);
      }
      else {
        int64_t v14 = *(void *)(a1 + 464);
      }
      if (v14)
      {
        if (v11 >= v14)
        {
          std::string::size_type v15 = &v10[v11];
          int v16 = *v13;
          std::string::size_type v17 = v10;
          do
          {
            uint64_t v18 = v11 - v14;
            if (v18 == -1) {
              break;
            }
            CFStringRef v19 = (char *)memchr(v17, v16, v18 + 1);
            if (!v19) {
              break;
            }
            uint64_t v20 = v19;
            if (!memcmp(v19, v13, v14))
            {
              if (v20 == v15 || v20 != v10) {
                break;
              }
              goto LABEL_30;
            }
            std::string::size_type v17 = v20 + 1;
            uint64_t v11 = v15 - (v20 + 1);
          }
          while (v11 >= v14);
        }
      }
      else
      {
LABEL_30:
        int v21 = *(NSObject **)a1;
        if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
        {
          std::string::size_type v22 = i + 16;
          if (v9 < 0) {
            std::string::size_type v22 = *(void *)(i + 16);
          }
          LODWORD(buf.__r_.__value_.__l.__data_) = 136315138;
          *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = v22;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Removing file %s", (uint8_t *)&buf, 0xCu);
        }
        v63((uint64_t)v62, i + 16);
      }
    }
  }
LABEL_36:
  sub_1001257B0(&__p);
  if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v68.__r_.__value_.__l.__data_);
  }
  CFErrorRef err = 0;
  memset(&buf, 0, sizeof(buf));
  sub_100DBDFD0(&buf, a1);
  char v23 = (*(uint64_t (**)(void, std::string *, uint64_t, CFErrorRef *))(**(void **)(a1 + 24) + 192))(*(void *)(a1 + 24), &buf, a2, &err);
  long long v24 = *(NSObject **)a1;
  if (v23)
  {
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      sub_100DBDFD0((std::string *)&__p, a1);
      size_t v25 = (__p.st_gid & 0x80000000) == 0 ? &__p : *(stat **)&__p.st_dev;
      LODWORD(v68.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)v68.__r_.__value_.__r.__words + 4) = (std::string::size_type)v25;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I The overridden file was successfully written to %s", (uint8_t *)&v68, 0xCu);
      if (SHIBYTE(__p.st_gid) < 0) {
        operator delete(*(void **)&__p.st_dev);
      }
    }
    uint64_t v59 = 0;
    long long v60 = 0;
    Registry::getMobileHelper(&v59, *(Registry **)(a1 + 8));
    uint64_t v26 = v59;
    if (!v59)
    {
      uint64_t v47 = *(NSObject **)a1;
      if (os_log_type_enabled(v47, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__p.st_dev) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_ERROR, "Failed to create mobile helper to move the generated overlay files", (uint8_t *)&__p, 2u);
      }
      BOOL v33 = 0;
      goto LABEL_112;
    }
    p_p = &__p;
    sub_100DBDE50((std::string *)&__p);
    if ((__p.st_gid & 0x80000000) != 0) {
      p_p = *(stat **)&__p.st_dev;
    }
    sub_100DBE568(a1, &v68);
    int v28 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
    std::string::size_type v29 = v68.__r_.__value_.__r.__words[0];
    sub_100DBE6D8(a1, &v66);
    if (v28 >= 0) {
      unint64_t v30 = &v68;
    }
    else {
      unint64_t v30 = (std::string *)v29;
    }
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      uint64_t v31 = &v66;
    }
    else {
      uint64_t v31 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    unsigned int v32 = (*(uint64_t (**)(uint64_t, stat *, std::string *, std::string *))(*(void *)v26 + 56))(v26, p_p, v30, v31);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
    BOOL v33 = v32 == 0;
    std::string v34 = *(NSObject **)a1;
    BOOL v35 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT);
    if (v32)
    {
      if (v35)
      {
        sub_100DBDFD0(&v68, a1);
        int v36 = SHIBYTE(v68.__r_.__value_.__r.__words[2]);
        std::string::size_type v37 = v68.__r_.__value_.__r.__words[0];
        sub_100DBCF70(a1, &v66);
        long long v38 = &v68;
        if (v36 < 0) {
          long long v38 = (std::string *)v37;
        }
        if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v39 = &v66;
        }
        else {
          uint64_t v39 = (std::string *)v66.__r_.__value_.__r.__words[0];
        }
        __p.st_dev = 136315650;
        *(void *)&__p.st_mode = v38;
        WORD2(__p.st_ino) = 2080;
        *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = (__darwin_ino64_t)v39;
        HIWORD(__p.st_gid) = 1024;
        __p.st_rdev = v32;
        _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#N Could not copy %s to %s. Error: %d", (uint8_t *)&__p, 0x1Cu);
        if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v66.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v68.__r_.__value_.__l.__data_);
        }
      }
      sub_100058DB0(&__p, "NA");
      sub_100058DB0(&v68, "mobile");
      sub_1011A3554(a1, (uint64_t)&__p, v32, (const char *)&v68);
      if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v68.__r_.__value_.__l.__data_);
      }
      if (SHIBYTE(__p.st_gid) < 0) {
        operator delete(*(void **)&__p.st_dev);
      }
      (*(void (**)(stat *__return_ptr))(**(void **)(a1 + 24) + 120))(&__p);
      sub_100058DB0(&v68, "NA");
      sub_100DBE0A8(a1, (const char *)&__p, (const char *)&v68, v32, 2u);
    }
    else
    {
      if (!v35)
      {
LABEL_110:
        uint64_t v55 = *(void *)(a1 + 24);
        sub_100DBDFD0((std::string *)&__p, a1);
        (*(void (**)(uint64_t, stat *))(*(void *)v55 + 112))(v55, &__p);
        if (SHIBYTE(__p.st_gid) < 0) {
          operator delete(*(void **)&__p.st_dev);
        }
LABEL_112:
        if (v60) {
          sub_10004D2C8(v60);
        }
        goto LABEL_123;
      }
      sub_100DBDFD0((std::string *)&__p, a1);
      int st_gid_high = SHIBYTE(__p.st_gid);
      long long v52 = *(stat **)&__p.st_dev;
      sub_100DBCF70(a1, &v68);
      uint64_t v53 = &__p;
      if (st_gid_high < 0) {
        uint64_t v53 = v52;
      }
      if ((v68.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        uint64_t v54 = &v68;
      }
      else {
        uint64_t v54 = (std::string *)v68.__r_.__value_.__r.__words[0];
      }
      LODWORD(v66.__r_.__value_.__l.__data_) = 136315394;
      *(std::string::size_type *)((char *)v66.__r_.__value_.__r.__words + 4) = (std::string::size_type)v53;
      WORD2(v66.__r_.__value_.__r.__words[1]) = 2080;
      *(std::string::size_type *)((char *)&v66.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v54;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Moving %s to %s Succeeded", (uint8_t *)&v66, 0x16u);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(__p.st_gid) < 0) {
      operator delete(*(void **)&__p.st_dev);
    }
    goto LABEL_110;
  }
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
  {
    LOWORD(__p.st_dev) = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Failed to write the overridden carrier bundle file", (uint8_t *)&__p, 2u);
  }
  if (err) {
    uint64_t v40 = sub_10039195C;
  }
  else {
    uint64_t v40 = 0;
  }
  if (v40)
  {
    CFErrorGetDomain(err);
    memset(&__p, 0, 24);
    ctu::cf::assign();
    *(_OWORD *)&v68.__r_.__value_.__l.__data_ = *(_OWORD *)&__p.st_dev;
    v68.__r_.__value_.__r.__words[2] = *(void *)&__p.st_uid;
    unsigned int Code = CFErrorGetCode(err);
    long long v42 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
    {
      p_std::string buf = &buf;
      if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
        p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
      }
      __p.st_dev = 136446466;
      *(void *)&__p.st_mode = p_buf;
      WORD2(__p.st_ino) = 2114;
      *(__darwin_ino64_t *)((char *)&__p.st_ino + 6) = (__darwin_ino64_t)err;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "Error writing overlay file %{public}s with error %{public}@", (uint8_t *)&__p, 0x16u);
    }
    memset(&__p, 0, sizeof(__p));
    sub_100DBDE50(&v66);
    if ((v66.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      long long v43 = &v66;
    }
    else {
      long long v43 = (std::string *)v66.__r_.__value_.__r.__words[0];
    }
    int v44 = stat((const char *)v43, &__p);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    size_t v45 = *(NSObject **)a1;
    long long v46 = *(NSObject **)a1;
    if (v44)
    {
      if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_ERROR, "Error getting overlay folder stat", (uint8_t *)&v66, 2u);
      }
    }
    else if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v66.__r_.__value_.__l.__data_) = 67240704;
      HIDWORD(v66.__r_.__value_.__r.__words[0]) = __p.st_mode;
      LOWORD(v66.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v66.__r_.__value_.__r.__words[1] + 2) = __p.st_uid;
      HIWORD(v66.__r_.__value_.__r.__words[1]) = 1026;
      LODWORD(v66.__r_.__value_.__r.__words[2]) = __p.st_gid;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I Printing stats for overlay folder : mode: %{public}o, user id: %{public}u, group id: %{public}u", (uint8_t *)&v66, 0x14u);
    }
    WirelessUserDirectory = (const char *)_GetWirelessUserDirectory();
    int v49 = stat(WirelessUserDirectory, &__p);
    std::string::size_type v50 = *(NSObject **)a1;
    if (v49)
    {
      if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_ERROR))
      {
        LOWORD(v66.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_ERROR, "Error getting wireless user folder stat", (uint8_t *)&v66, 2u);
      }
    }
    else if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(v66.__r_.__value_.__l.__data_) = 67240704;
      HIDWORD(v66.__r_.__value_.__r.__words[0]) = __p.st_mode;
      LOWORD(v66.__r_.__value_.__r.__words[1]) = 1026;
      *(_DWORD *)((char *)&v66.__r_.__value_.__r.__words[1] + 2) = __p.st_uid;
      HIWORD(v66.__r_.__value_.__r.__words[1]) = 1026;
      LODWORD(v66.__r_.__value_.__r.__words[2]) = __p.st_gid;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I Printing stats for wireless user folder : mode: %{public}o, user id: %{public}u, group id: %{public}u", (uint8_t *)&v66, 0x14u);
    }
    (*(void (**)(std::string *__return_ptr))(**(void **)(a1 + 24) + 120))(&v66);
    sub_100DBE0A8(a1, (const char *)&v66, (const char *)&v68, Code, 1u);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    sub_100058DB0(&v66, "wireless");
    sub_1011A3554(a1, (uint64_t)&v68, Code, (const char *)&v66);
    if (SHIBYTE(v66.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v66.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v68.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v68.__r_.__value_.__l.__data_);
    }
  }
  BOOL v33 = 0;
LABEL_123:
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  sub_100127D74((const void **)&err);
  return v33;
}

void sub_100DBDCCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, const void *a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (v36 < 0) {
    operator delete(v35);
  }
  if (a16) {
    sub_10004D2C8(a16);
  }
  if (*(char *)(v37 - 105) < 0) {
    operator delete(*(void **)(v37 - 128));
  }
  sub_100127D74(&a17);
  _Unwind_Resume(a1);
}

void sub_100DBDE1C()
{
}

void sub_100DBDE28()
{
}

void sub_100DBDE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27)
{
  sub_1001257B0(&a27);
  if (*(char *)(v27 - 137) < 0) {
    operator delete(*(void **)(v27 - 160));
  }
  JUMPOUT(0x100DBDE14);
}

void sub_100DBDE50(std::string *a1)
{
  WirelessUserDirectory = (char *)_GetWirelessUserDirectory();
  sub_100058DB0(&v4, WirelessUserDirectory);
  uint64_t v3 = std::string::append(&v4, "/Library/", 9uLL);
  *a1 = *v3;
  v3->__r_.__value_.__l.__size_ = 0;
  v3->__r_.__value_.__r.__words[2] = 0;
  v3->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v4.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v4.__r_.__value_.__l.__data_);
  }
}

void sub_100DBDEC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBDEE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a1 + 32) + 24);
  sub_100DBDE50(&v9);
  int v4 = *(char *)(a2 + 23);
  if (v4 >= 0) {
    uint64_t v5 = (const std::string::value_type *)a2;
  }
  else {
    uint64_t v5 = *(const std::string::value_type **)a2;
  }
  if (v4 >= 0) {
    std::string::size_type v6 = *(unsigned __int8 *)(a2 + 23);
  }
  else {
    std::string::size_type v6 = *(void *)(a2 + 8);
  }
  std::string::size_type v7 = std::string::append(&v9, v5, v6);
  long long v8 = *(_OWORD *)&v7->__r_.__value_.__l.__data_;
  std::string::size_type v11 = v7->__r_.__value_.__r.__words[2];
  *(_OWORD *)stat __p = v8;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  (*(void (**)(uint64_t, void **))(*(void *)v3 + 112))(v3, __p);
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v9.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v9.__r_.__value_.__l.__data_);
  }
}

void sub_100DBDF9C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBDFD0(std::string *a1, uint64_t a2)
{
  sub_100DBDE50(&v8);
  sub_100DBE6D8(a2, &__p);
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_p = &__p;
  }
  else {
    p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
  }
  if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(__p.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = __p.__r_.__value_.__l.__size_;
  }
  std::string::size_type v6 = std::string::append(&v8, (const std::string::value_type *)p_p, size);
  *a1 = *v6;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v8.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v8.__r_.__value_.__l.__data_);
  }
}

void sub_100DBE074(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBE0A8(uint64_t a1, const char *a2, const char *a3, unsigned int a4, unsigned int a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(*(Registry **)(a1 + 8));
  std::string::size_type v11 = ServiceMap;
  if (v12 < 0)
  {
    int v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)std::string buf = v12;
  int v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    std::string::size_type v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  std::string::size_type v17 = 0;
  char v19 = 1;
LABEL_9:
  uint64_t v20 = *(NSObject **)a1;
  if (v18)
  {
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      if (a2[23] >= 0) {
        int v21 = a2;
      }
      else {
        int v21 = *(const char **)a2;
      }
      if (a3[23] >= 0) {
        std::string::size_type v22 = a3;
      }
      else {
        std::string::size_type v22 = *(const char **)a3;
      }
      *(_DWORD *)std::string buf = 136446978;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v22;
      __int16 v39 = 1026;
      unsigned int v40 = a4;
      __int16 v41 = 1024;
      unsigned int v42 = a5;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I Submitting metric on write failure for overlay file %{public}s. Error domain: %{public}s and error code: %{public}d, error location: %d", buf, 0x22u);
    }
    xpc_object_t v37 = 0;
    xpc_object_t v23 = xpc_dictionary_create(0, 0, 0);
    xpc_object_t v24 = v23;
    if (v23)
    {
      xpc_object_t v37 = v23;
    }
    else
    {
      xpc_object_t v24 = xpc_null_create();
      xpc_object_t v37 = v24;
      if (!v24)
      {
        xpc_object_t v25 = xpc_null_create();
        xpc_object_t v24 = 0;
        goto LABEL_27;
      }
    }
    if (xpc_get_type(v24) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v24);
LABEL_28:
      xpc_release(v24);
      xpc_object_t v35 = xpc_int64_create(a4);
      if (!v35) {
        xpc_object_t v35 = xpc_null_create();
      }
      *(void *)std::string buf = &v37;
      *(void *)&uint8_t buf[8] = "error_code";
      sub_100035E70((uint64_t)buf, &v35, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v35);
      xpc_object_t v35 = 0;
      if (a3[23] >= 0) {
        uint64_t v26 = a3;
      }
      else {
        uint64_t v26 = *(const char **)a3;
      }
      xpc_object_t v33 = xpc_string_create(v26);
      if (!v33) {
        xpc_object_t v33 = xpc_null_create();
      }
      *(void *)std::string buf = &v37;
      *(void *)&uint8_t buf[8] = "error_domain";
      sub_100035E70((uint64_t)buf, &v33, &v34);
      xpc_release(v34);
      xpc_object_t v34 = 0;
      xpc_release(v33);
      xpc_object_t v33 = 0;
      if (a2[23] >= 0) {
        uint64_t v27 = a2;
      }
      else {
        uint64_t v27 = *(const char **)a2;
      }
      xpc_object_t v31 = xpc_string_create(v27);
      if (!v31) {
        xpc_object_t v31 = xpc_null_create();
      }
      *(void *)std::string buf = &v37;
      *(void *)&uint8_t buf[8] = "overlay_file_name";
      sub_100035E70((uint64_t)buf, &v31, &v32);
      xpc_release(v32);
      xpc_object_t v32 = 0;
      xpc_release(v31);
      xpc_object_t v31 = 0;
      xpc_object_t v29 = xpc_int64_create(a5);
      if (!v29) {
        xpc_object_t v29 = xpc_null_create();
      }
      *(void *)std::string buf = &v37;
      *(void *)&uint8_t buf[8] = "directory_name";
      sub_100035E70((uint64_t)buf, &v29, &v30);
      xpc_release(v30);
      xpc_object_t v30 = 0;
      xpc_release(v29);
      xpc_object_t v28 = v37;
      xpc_object_t v29 = 0;
      if (v37) {
        xpc_retain(v37);
      }
      else {
        xpc_object_t v28 = xpc_null_create();
      }
      (*(void (**)(uint64_t, const char *, xpc_object_t *))(*(void *)v18 + 16))(v18, "commCenterBundleOverlayFileWriteFailure", &v28);
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_release(v37);
      goto LABEL_46;
    }
    xpc_object_t v25 = xpc_null_create();
LABEL_27:
    xpc_object_t v37 = v25;
    goto LABEL_28;
  }
  if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Cannot get analytics", buf, 2u);
  }
LABEL_46:
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
}

void sub_100DBE4C4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100DBE568(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  if (*(unsigned __int8 *)(a1 + 480) - 5 > 1)
  {
    std::string v8 = (char *)sub_1003F26A8();
    sub_100058DB0(&v10, v8);
    size_t v9 = strlen(kUserCBDir);
    uint64_t v5 = std::string::append(&v10, kUserCBDir, v9);
  }
  else
  {
    uint64_t v3 = (char *)sub_1003F26A8();
    sub_100058DB0(&v10, v3);
    size_t v4 = strlen(kUserCountryBundleDir);
    uint64_t v5 = std::string::append(&v10, kUserCountryBundleDir, v4);
  }
  long long v6 = *(_OWORD *)&v5->__r_.__value_.__l.__data_;
  v11.__r_.__value_.__r.__words[2] = v5->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v11.__r_.__value_.__l.__data_ = v6;
  v5->__r_.__value_.__l.__size_ = 0;
  v5->__r_.__value_.__r.__words[2] = 0;
  v5->__r_.__value_.__r.__words[0] = 0;
  std::string::size_type v7 = std::string::append(&v11, "Overlay/", 8uLL);
  *a2 = *v7;
  v7->__r_.__value_.__l.__size_ = 0;
  v7->__r_.__value_.__r.__words[2] = 0;
  v7->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v11.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v11.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v10.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v10.__r_.__value_.__l.__data_);
  }
}

void sub_100DBE69C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBE6D8(uint64_t a1@<X0>, std::string *a2@<X8>)
{
  sub_10060C178((const void **)(a1 + 456), 43, &v12);
  uint64_t v14 = 0;
  sub_1007DF670(a1 + 64, &v14);
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  ctu::cf::assign();
  *(_OWORD *)std::string __p = v15;
  uint64_t v11 = v16;
  sub_1000558F4(&v14);
  if (v11 >= 0) {
    size_t v4 = __p;
  }
  else {
    size_t v4 = (void **)__p[0];
  }
  if (v11 >= 0) {
    std::string::size_type v5 = HIBYTE(v11);
  }
  else {
    std::string::size_type v5 = (std::string::size_type)__p[1];
  }
  long long v6 = std::string::append(&v12, (const std::string::value_type *)v4, v5);
  long long v7 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
  v13.__r_.__value_.__r.__words[2] = v6->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v13.__r_.__value_.__l.__data_ = v7;
  v6->__r_.__value_.__l.__size_ = 0;
  v6->__r_.__value_.__r.__words[2] = 0;
  v6->__r_.__value_.__r.__words[0] = 0;
  size_t v8 = strlen(kPlistExtension);
  size_t v9 = std::string::append(&v13, kPlistExtension, v8);
  *a2 = *v9;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v13.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v13.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v11) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v12.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v12.__r_.__value_.__l.__data_);
  }
}

void sub_100DBE7F8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, void *a15, uint64_t a16, int a17, __int16 a18, char a19, char a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26)
{
  if (a26 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  if (a20 < 0) {
    operator delete(a15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DBE864(uint64_t a1, const void **a2, uint64_t a3, const void **a4, const void **a5, CFDictionaryRef *a6, const void **a7, uint64_t a8, char a9)
{
  *(void *)a1 = off_101A5A688;
  *(void *)(a1 + 8) = a2;
  *(void *)(a1 + 16) = 0;
  uint64_t v14 = (void **)(a1 + 16);
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0;
  *(void *)(a1 + 40) = *(void *)a3;
  uint64_t v77 = (Registry **)(a1 + 40);
  uint64_t v15 = *(void *)(a3 + 8);
  *(void *)(a1 + 48) = v15;
  if (v15) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v15 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v16 = (void *)(a1 + 56);
  Registry::getFileSystemInterface((uint64_t *)(a1 + 56), *(Registry **)a3);
  sub_100058198((const void **)(a1 + 72), a4);
  sub_100058198((const void **)(a1 + 80), a5);
  *(void *)(a1 + 88) = 0;
  std::string::size_type v17 = (std::string::size_type *)(a1 + 88);
  sub_100083DA4((const void **)(a1 + 96), a7);
  *(void *)(a1 + 104) = 0;
  uint64_t v78 = (CFDictionaryRef *)(a1 + 104);
  if (a9)
  {
    __p[0] = 0;
    __p[1] = 0;
    *(void *)&long long v80 = 0;
    if (*(char *)(a8 + 63) < 0) {
      sub_10004FC84(&__dst, *(void **)(a8 + 40), *(void *)(a8 + 48));
    }
    else {
      std::string __dst = *(std::string *)(a8 + 40);
    }
    uint64_t v18 = std::string::append(&__dst, "/supported_devices.plist", 0x18uLL);
    long long v19 = *(_OWORD *)&v18->__r_.__value_.__l.__data_;
    *(void *)&long long v80 = *((void *)&v18->__r_.__value_.__l + 2);
    *(_OWORD *)std::string __p = v19;
    v18->__r_.__value_.__l.__size_ = 0;
    v18->__r_.__value_.__r.__words[2] = 0;
    v18->__r_.__value_.__r.__words[0] = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    if ((*(unsigned int (**)(void, void **))(*(void *)*v16 + 88))(*v16, __p))
    {
      *(void *)&long long v91 = 0;
      sub_1007B946C(*(os_log_t **)(a1 + 8), v77, (const UInt8 *)__p, (const void **)&v91);
      if ((void)v91) {
        uint64_t v20 = sub_100080778;
      }
      else {
        uint64_t v20 = 0;
      }
      if (v20 && CFDictionaryContainsKey((CFDictionaryRef)v91, @"SupportedSIMOverrides"))
      {
        v85[0] = (void *)CFDictionaryGetValue((CFDictionaryRef)v91, @"SupportedSIMOverrides");
        __dst.__r_.__value_.__r.__words[0] = 0;
        int v21 = (const void **)sub_10004EFE4(&__dst, (CFTypeRef *)v85);
        CFDictionaryRef v22 = *v78;
        *uint64_t v78 = (CFDictionaryRef)__dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)v22;
        sub_100057D78(v21);
      }
      sub_100057D78((const void **)&v91);
    }
    if (SBYTE7(v80) < 0) {
      operator delete(__p[0]);
    }
  }
  CFDictionaryRef theDict = 0;
  uint64_t v88 = 0;
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(*(CFDictionaryRef *)(a1 + 80), *(const void **)(a1 + 96));
  CFDictionaryRef v24 = Value;
  if (Value && (CFTypeID v25 = CFGetTypeID(Value), v25 == CFDictionaryGetTypeID()))
  {
    __int16 v74 = v14;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    uint64_t v27 = v88;
    uint64_t v88 = Mutable;
    __p[0] = v27;
    sub_10005717C((const void **)__p);
    CFIndex Count = CFDictionaryGetCount(v24);
    memset(&__dst, 0, sizeof(__dst));
    sub_10004EE3C(&__dst, Count);
    long long v91 = 0uLL;
    uint64_t v92 = 0;
    sub_10004EE3C(&v91, Count);
    CFDictionaryGetKeysAndValues(v24, (const void **)__dst.__r_.__value_.__l.__data_, (const void **)v91);
    if (Count >= 1)
    {
      for (uint64_t i = 0; i != Count; ++i)
      {
        CFDictionaryRef v30 = *(const __CFDictionary **)(v91 + 8 * i);
        if (v30 && (CFTypeID v31 = CFGetTypeID(*(CFTypeRef *)(v91 + 8 * i)), v31 == CFDictionaryGetTypeID()))
        {
          CFArrayRef v32 = (const __CFArray *)CFDictionaryGetValue(v30, @"SupportedSIMs");
          CFArrayRef v33 = v32;
          if (v32 && (CFTypeID v34 = CFGetTypeID(v32), v34 == CFArrayGetTypeID()))
          {
            xpc_object_t v35 = CFDictionaryGetValue(v30, @"OverrideConfiguration");
            int v36 = v35;
            if (v35)
            {
              CFTypeID v37 = CFGetTypeID(v35);
              if (v37 == CFDictionaryGetTypeID())
              {
                CFIndex v38 = CFArrayGetCount(v33);
                if (v38 >= 1)
                {
                  for (CFIndex j = 0; j != v38; ++j)
                  {
                    ValueAtIndex = CFArrayGetValueAtIndex(v33, j);
                    __int16 v41 = ValueAtIndex;
                    if (ValueAtIndex)
                    {
                      CFTypeID v42 = CFGetTypeID(ValueAtIndex);
                      if (v42 == CFStringGetTypeID()) {
                        long long v43 = v41;
                      }
                      else {
                        long long v43 = 0;
                      }
                    }
                    else
                    {
                      long long v43 = 0;
                    }
                    if (*v78) {
                      int v44 = sub_100080778;
                    }
                    else {
                      int v44 = 0;
                    }
                    if (v44
                      && CFDictionaryContainsKey(*v78, v43)
                      && ((v45 = (const __CFDictionary *)CFDictionaryGetValue(*v78, v43), (CFDictionaryRef v46 = v45) == 0)
                        ? (CFDictionaryRef v48 = 0)
                        : (CFTypeID v47 = CFGetTypeID(v45), v47 != CFDictionaryGetTypeID())
                        ? (CFDictionaryRef v48 = 0)
                        : (CFDictionaryRef v48 = v46),
                          !sub_1004D3178(*(os_log_t **)(a1 + 8), (int)v77, v48)))
                    {
                      int v49 = **(NSObject ***)(a1 + 8);
                      if (os_log_type_enabled(v49, OS_LOG_TYPE_DEFAULT))
                      {
                        __p[0] = 0;
                        __p[1] = 0;
                        *(void *)&long long v80 = 0;
                        ctu::cf::assign();
                        *(_OWORD *)uint64_t v85 = *(_OWORD *)__p;
                        uint64_t v86 = v80;
                        std::string::size_type v50 = (void **)__p[0];
                        if ((SBYTE7(v80) & 0x80u) == 0) {
                          std::string::size_type v50 = v85;
                        }
                        *(_DWORD *)std::string buf = 136315138;
                        __int16 v90 = v50;
                        _os_log_impl((void *)&_mh_execute_header, v49, OS_LOG_TYPE_DEFAULT, "#I This SupportedSIM %s is not allowed for MVNO Overlay for this device", buf, 0xCu);
                        if (SHIBYTE(v86) < 0) {
                          operator delete(v85[0]);
                        }
                      }
                    }
                    else
                    {
                      CFDictionarySetValue(v88, v43, v36);
                    }
                  }
                }
                continue;
              }
            }
            uint64_t v55 = **(NSObject ***)(a1 + 8);
            if (os_log_type_enabled(v55, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              long long v52 = v55;
              uint64_t v53 = "#I No Override Configuration found in the config dictionary";
              goto LABEL_61;
            }
          }
          else
          {
            uint64_t v54 = **(NSObject ***)(a1 + 8);
            if (os_log_type_enabled(v54, OS_LOG_TYPE_DEFAULT))
            {
              LOWORD(__p[0]) = 0;
              long long v52 = v54;
              uint64_t v53 = "#I No Supported SIMs found in the config dictionary";
              goto LABEL_61;
            }
          }
        }
        else
        {
          long long v51 = **(NSObject ***)(a1 + 8);
          if (os_log_type_enabled(v51, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(__p[0]) = 0;
            long long v52 = v51;
            uint64_t v53 = "#I Failed to get the config dictionary in Allowed Multimode SIMs section";
LABEL_61:
            _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, v53, (uint8_t *)__p, 2u);
          }
        }
      }
    }
    if ((void)v91)
    {
      *((void *)&v91 + 1) = v91;
      operator delete((void *)v91);
    }
    uint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
    uint64_t v14 = v74;
    std::string::size_type v17 = (std::string::size_type *)(a1 + 88);
    if (__dst.__r_.__value_.__r.__words[0])
    {
      __dst.__r_.__value_.__l.__size_ = __dst.__r_.__value_.__r.__words[0];
LABEL_72:
      operator delete(v56);
    }
  }
  else
  {
    std::string v57 = **(NSObject ***)(a1 + 8);
    if (os_log_type_enabled(v57, OS_LOG_TYPE_DEFAULT))
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v80 = 0;
      ctu::cf::assign();
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __dst.__r_.__value_.__r.__words[2] = v80;
      p_dst = &__dst;
      if (SBYTE7(v80) < 0) {
        p_dst = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      LODWORD(v91) = 136315138;
      *(void *)((char *)&v91 + 4) = p_dst;
      _os_log_impl((void *)&_mh_execute_header, v57, OS_LOG_TYPE_DEFAULT, "#I There is no %s in the base bundle", (uint8_t *)&v91, 0xCu);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0)
      {
        uint64_t v56 = (void *)__dst.__r_.__value_.__r.__words[0];
        goto LABEL_72;
      }
    }
  }
  sub_10004EFE4(&theDict, (CFTypeRef *)&v88);
  sub_10005717C((const void **)&v88);
  if (theDict) {
    uint64_t v59 = sub_100080778;
  }
  else {
    uint64_t v59 = 0;
  }
  if (v59)
  {
    CFStringRef v60 = (const __CFString *)CFDictionaryGetValue(*a6, (const void *)qword_101B13EC0);
    CFStringRef v61 = v60;
    if (v60 && (CFTypeID v62 = CFGetTypeID(v60), v62 == CFStringGetTypeID()))
    {
      long long v82 = 0u;
      long long v83 = 0u;
      long long v80 = 0u;
      *(_OWORD *)key = 0u;
      *(_OWORD *)std::string __p = 0u;
      sub_1004D4824(*a6, a2, v77, v61, theDict, 1, __p);
      if (key[1]) {
        std::string v63 = sub_1000810B8;
      }
      else {
        std::string v63 = 0;
      }
      if (v63)
      {
        memset(&__dst, 0, sizeof(__dst));
        ctu::cf::assign();
        *(void *)&long long v91 = __dst.__r_.__value_.__l.__size_;
        std::string::size_type v64 = __dst.__r_.__value_.__r.__words[0];
        *(void *)((char *)&v91 + 7) = *(std::string::size_type *)((char *)&__dst.__r_.__value_.__r.__words[1] + 7);
        char v65 = HIBYTE(__dst.__r_.__value_.__r.__words[2]);
        if (*(char *)(a1 + 39) < 0) {
          operator delete(*v14);
        }
        uint64_t v66 = v91;
        *(void *)(a1 + 16) = v64;
        *(void *)(a1 + 24) = v66;
        *(void *)(a1 + 31) = *(void *)((char *)&v91 + 7);
        *(unsigned char *)(a1 + 39) = v65;
        *(void *)&long long v91 = CFDictionaryGetValue(theDict, key[1]);
        __dst.__r_.__value_.__r.__words[0] = 0;
        unsigned int v67 = (const void **)sub_10004EFE4(&__dst, (CFTypeRef *)&v91);
        std::string::size_type v68 = *v17;
        std::string::size_type *v17 = __dst.__r_.__value_.__r.__words[0];
        __dst.__r_.__value_.__r.__words[0] = v68;
        sub_100057D78(v67);
      }
      else
      {
        uint64_t v72 = **(NSObject ***)(a1 + 8);
        if (os_log_type_enabled(v72, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v72, OS_LOG_TYPE_DEFAULT, "#I There is no match to perform Multimode overlay", (uint8_t *)&__dst, 2u);
        }
      }
      if (*((void *)&v83 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v83 + 1));
      }
      sub_1000558F4((const void **)&key[1]);
      if (key[0]) {
        sub_10004D2C8((std::__shared_weak_count *)key[0]);
      }
      sub_1000558F4((const void **)__p);
    }
    else
    {
      int v69 = **(NSObject ***)(a1 + 8);
      if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(__p[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I Failed to find IMSI in the overlay matching info", (uint8_t *)__p, 2u);
      }
    }
  }
  else
  {
    uint64_t v70 = **(NSObject ***)(a1 + 8);
    if (os_log_type_enabled(v70, OS_LOG_TYPE_DEFAULT))
    {
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v80 = 0;
      ctu::cf::assign();
      *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)__p;
      __dst.__r_.__value_.__r.__words[2] = v80;
      uint64_t v71 = &__dst;
      if (SBYTE7(v80) < 0) {
        uint64_t v71 = (std::string *)__dst.__r_.__value_.__r.__words[0];
      }
      LODWORD(v91) = 136315138;
      *(void *)((char *)&v91 + 4) = v71;
      _os_log_impl((void *)&_mh_execute_header, v70, OS_LOG_TYPE_DEFAULT, "#I There is no merged %s overlay configuration", (uint8_t *)&v91, 0xCu);
      if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(__dst.__r_.__value_.__l.__data_);
      }
    }
  }
  sub_100057D78((const void **)&theDict);
  return a1;
}

void sub_100DBF1D0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, const void **a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,const void *a35)
{
  if (*(char *)(v41 - 153) < 0) {
    operator delete(*(void **)(v41 - 176));
  }
  sub_1004D49EC((uint64_t)&__p);
  sub_100057D78(&a35);
  sub_100057D78(a20);
  sub_1000558F4(v40);
  sub_100057D78(v36);
  sub_100057D78(v37);
  sub_100057D78(v39);
  long long v43 = *(std::__shared_weak_count **)(v35 + 64);
  if (v43) {
    sub_10004D2C8(v43);
  }
  int v44 = *(std::__shared_weak_count **)(v35 + 48);
  if (v44) {
    sub_10004D2C8(v44);
  }
  if (*(char *)(v35 + 39) < 0) {
    operator delete(*v38);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DBF3E0(uint64_t a1)
{
  *(void *)a1 = off_101A5A688;
  sub_100057D78((const void **)(a1 + 104));
  sub_1000558F4((const void **)(a1 + 96));
  sub_100057D78((const void **)(a1 + 88));
  sub_100057D78((const void **)(a1 + 80));
  sub_100057D78((const void **)(a1 + 72));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 64);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 48);
  if (v3) {
    sub_10004D2C8(v3);
  }
  if (*(char *)(a1 + 39) < 0) {
    operator delete(*(void **)(a1 + 16));
  }
  return a1;
}

void sub_100DBF470(uint64_t a1)
{
  sub_100DBF3E0(a1);

  operator delete();
}

char *sub_100DBF4A8@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  if (result[39] < 0) {
    return (char *)sub_10004FC84((unsigned char *)a2, *((void **)result + 2), *((void *)result + 3));
  }
  *(_OWORD *)a2 = *((_OWORD *)result + 1);
  *(void *)(a2 + 16) = *((void *)result + 4);
  return result;
}

const void **sub_100DBF4D4@<X0>(CFDictionaryRef theDict@<X1>, uint64_t a2@<X0>, void *a3@<X8>)
{
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, *(const void **)(a2 + 96));
  sub_10004EFE4(a3, (CFTypeRef *)&MutableCopy);
  return sub_10005717C((const void **)&MutableCopy);
}

void sub_100DBF538(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10005717C((const void **)va);
  _Unwind_Resume(a1);
}

void *sub_100DBF54C(void *a1, os_log_t *a2, uint64_t a3, const void **a4, const void **a5, uint64_t a6)
{
  sub_100058198(&v30, a4);
  sub_100058198(&v29, a5);
  sub_100058198((const void **)&theDict, a4);
  CFDictionaryRef Value = CFDictionaryGetValue(theDict, @"1xIMSI");
  if (Value && (CFTypeID v13 = CFGetTypeID(Value), v13 == CFStringGetTypeID()))
  {
    xpc_object_t v28 = 0;
    uint64_t v14 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I 1x's cards GW part will act as the multimode key", buf, 2u);
    }
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    CFDictionaryRemoveValue(MutableCopy, (const void *)qword_101B13ED0);
    CFDictionaryRemoveValue(MutableCopy, @"1xIMSI");
    uint64_t v16 = (const void *)qword_101B13EC0;
    std::string::size_type v17 = CFDictionaryGetValue(MutableCopy, @"GwIMSI");
    CFDictionarySetValue(MutableCopy, v16, v17);
    uint64_t v18 = CFDictionaryGetValue(MutableCopy, @"GwGID1");
    long long v19 = v18;
    if (v18)
    {
      CFTypeID v20 = CFGetTypeID(v18);
      if (v20 == CFStringGetTypeID()) {
        CFDictionarySetValue(MutableCopy, @"GID1", v19);
      }
    }
    int v21 = CFDictionaryGetValue(MutableCopy, @"GwGID2");
    CFDictionaryRef v22 = v21;
    if (v21)
    {
      CFTypeID v23 = CFGetTypeID(v21);
      if (v23 == CFStringGetTypeID()) {
        CFDictionarySetValue(MutableCopy, @"GID2", v22);
      }
    }
  }
  else
  {
    xpc_object_t v28 = 0;
    CFDictionaryRef v24 = *a2;
    if (os_log_type_enabled(*a2, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I SIM info part will act as the multimode key", buf, 2u);
    }
    MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
    CFDictionaryRemoveValue(MutableCopy, (const void *)qword_101B13ED0);
  }
  xpc_object_t v28 = MutableCopy;
  *(void *)std::string buf = 0;
  sub_100057D78((const void **)buf);
  CFStringRef v26 = @"AllowedMultimodeSIMs";
  CFRetain(@"AllowedMultimodeSIMs");
  sub_100DBE864((uint64_t)a1, (const void **)a2, a3, &v30, &v29, &v28, (const void **)&v26, a6, 0);
  sub_1000558F4((const void **)&v26);
  sub_100057D78((const void **)&v28);
  sub_100057D78((const void **)&theDict);
  sub_100057D78(&v29);
  sub_100057D78(&v30);
  *a1 = &off_101A5A6B0;
  return a1;
}

void sub_100DBF810(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  std::string::size_type v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  long long v7 = va_arg(va3, const void *);
  va_copy(va4, va3);
  size_t v9 = va_arg(va4, const void *);
  sub_1000558F4((const void **)va);
  sub_100057D78((const void **)va2);
  sub_100057D78((const void **)va1);
  sub_100057D78((const void **)va3);
  sub_100057D78((const void **)va4);
  _Unwind_Resume(a1);
}

void sub_100DBF860(uint64_t a1)
{
  sub_100DBF3E0(a1);

  operator delete();
}

void *sub_100DBF898(void *a1, const void **a2, uint64_t a3, const void **a4, const void **a5, uint64_t a6)
{
  sub_100058198(&v18, a4);
  sub_100058198(&v17, a5);
  sub_100058198((const void **)&theDict, a4);
  MutableCopy = CFDictionaryCreateMutableCopy(kCFAllocatorDefault, 0, theDict);
  CFDictionaryRemoveValue(MutableCopy, (const void *)qword_101B13ED0);
  uint64_t v16 = MutableCopy;
  CFStringRef v14 = @"MVNOOverrides";
  CFRetain(@"MVNOOverrides");
  sub_100DBE864((uint64_t)a1, a2, a3, &v18, &v17, &v16, (const void **)&v14, a6, 1);
  sub_1000558F4((const void **)&v14);
  sub_100057D78((const void **)&v16);
  sub_100057D78((const void **)&theDict);
  sub_100057D78(&v17);
  sub_100057D78(&v18);
  *a1 = &off_101A5A6D8;
  return a1;
}

void sub_100DBF9B8(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va4, a2);
  va_start(va3, a2);
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, const void *);
  va_copy(va2, va1);
  std::string::size_type v5 = va_arg(va2, const void *);
  va_copy(va3, va2);
  long long v7 = va_arg(va3, const void *);
  va_copy(va4, va3);
  size_t v9 = va_arg(va4, const void *);
  sub_1000558F4((const void **)va);
  sub_100057D78((const void **)va2);
  sub_100057D78((const void **)va1);
  sub_100057D78((const void **)va3);
  sub_100057D78((const void **)va4);
  _Unwind_Resume(a1);
}

void sub_100DBF9FC(uint64_t a1)
{
  sub_100DBF3E0(a1);

  operator delete();
}

char *sub_100DBFA34@<X0>(char *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = (void **)(result + 16);
  if ((result[39] & 0x80000000) == 0)
  {
    if (!result[39])
    {
      *(_OWORD *)a2 = *(_OWORD *)v2;
      *(void *)(a2 + 16) = *((void *)result + 4);
      return result;
    }
    return (char *)std::operator+<char>();
  }
  if (*((void *)result + 3)) {
    return (char *)std::operator+<char>();
  }
  return (char *)sub_10004FC84((unsigned char *)a2, *v2, 0);
}

void *sub_100DBFA80(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v9 = *(void *)(a3 + 8);
  *a1 = *(void *)a3;
  a1[1] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  Registry::getFileSystemInterface(a1 + 2, *(Registry **)a3);
  a1[4] = a6;
  a1[5] = a2;
  return a1;
}

void sub_100DBFADC(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    sub_10004D2C8(v3);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100DBFAF4@<X0>(capabilities::ct *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  uint64_t result = capabilities::ct::compatibleHardwareConfigurationString((uint64_t *)a2, a1);
  uint64_t v5 = *(unsigned __int8 *)(a2 + 23);
  if ((v5 & 0x80u) != 0) {
    uint64_t v5 = *(void *)(a2 + 8);
  }
  if (!v5)
  {
    long long v6 = **((void **)a1 + 5);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Model name is empty", v7, 2u);
    }
    return (uint64_t *)__TUAssertTrigger();
  }
  return result;
}

void sub_100DBFB90(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DBFBAC(uint64_t a1@<X0>, const void **a2@<X8>)
{
  *a2 = 0;
  v14[0] = 0;
  v14[1] = 0;
  uint64_t v15 = 0;
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  if (*(char *)(v5 + 63) < 0)
  {
    sub_10004FC84(__p, *(void **)(v5 + 40), *(void *)(v5 + 48));
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)(v5 + 40);
    uint64_t v13 = *(void *)(v5 + 56);
  }
  (*(void (**)(void **__return_ptr, uint64_t, void **))(*(void *)v4 + 136))(v14, v4, __p);
  if (SHIBYTE(v13) < 0) {
    operator delete(__p[0]);
  }
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v13 = 0;
  sub_100058DB0(buf, kPlistExtensionWithoutDot);
  sub_100DBFAF4((capabilities::ct *)a1, (uint64_t)v8);
  findMatchingFile();
  if (v9 < 0) {
    operator delete(v8[0]);
  }
  if (v11 < 0) {
    operator delete(*(void **)buf);
  }
  if (__p[0] == __p[1])
  {
    long long v6 = **(NSObject ***)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I No device specific overlay file name found in the base bundle", buf, 2u);
    }
  }
  else
  {
    v8[0] = 0;
    ctu::ns::AutoPool::AutoPool((ctu::ns::AutoPool *)v8);
    dictAfterMergingPlistsAtPath();
    if (&v7 != a2)
    {
      *(void *)std::string buf = *a2;
      *a2 = v7;
      long long v7 = 0;
      sub_100057D78((const void **)buf);
    }
    sub_100057D78(&v7);
    ctu::ns::AutoPool::~AutoPool((ctu::ns::AutoPool *)v8);
  }
  *(void *)std::string buf = __p;
  sub_100047F64((void ***)buf);
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[0]);
  }
}

void sub_100DBFD7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,char a23)
{
  sub_100057D78(v23);
  _Unwind_Resume(a1);
}

void sub_100DBFE00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    JUMPOUT(0x100DBFDECLL);
  }
  JUMPOUT(0x100DBFDF0);
}

uint64_t sub_100DBFE14(uint64_t a1, os_log_t *a2, uint64_t a3, const void **a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  *(void *)a1 = *(void *)a3;
  uint64_t v10 = *(void *)(a3 + 8);
  *(void *)(a1 + 8) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = a2;
  *(void *)(a1 + 40) = a7;
  sub_100058198((const void **)(a1 + 48), a4);
  *(_OWORD *)(a1 + 56) = 0u;
  char v11 = (std::string::size_type *)(a1 + 56);
  *(_OWORD *)(a1 + 72) = 0u;
  CFDictionaryRef v48 = 0;
  uint64_t v49 = 0;
  uint64_t v50 = 0;
  CFTypeID v47 = 0;
  key = 0;
  std::string v12 = *(os_log_t **)(a1 + 32);
  sub_100058198(&v45, (const void **)(a1 + 48));
  uint64_t v13 = *(void *)(a1 + 40);
  if (*(char *)(v13 + 63) < 0) {
    sub_10004FC84(&__p, *(void **)(v13 + 40), *(void *)(v13 + 48));
  }
  else {
    std::string __p = *(std::string *)(v13 + 40);
  }
  sub_1004D3D0C(v12, (Registry **)a1, &v45, (long long *)&__p, &buf);
  v43.__r_.__value_.__r.__words[0] = (std::string::size_type)&v48;
  v43.__r_.__value_.__l.__size_ = (std::string::size_type)&v47;
  v43.__r_.__value_.__r.__words[2] = (std::string::size_type)&key;
  sub_100688068(&v43, (long long *)&buf);
  sub_1000558F4(&v54);
  sub_1000558F4(&v53);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(buf.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(__p.__r_.__value_.__l.__data_);
  }
  sub_100057D78(&v45);
  uint64_t v14 = HIBYTE(v50);
  if (v50 < 0) {
    uint64_t v14 = v49;
  }
  if (v14 && (v47 ? (uint64_t v15 = sub_1000810B8) : (uint64_t v15 = 0), v15 && (key ? (v16 = sub_1000810B8) : (v16 = 0), v16)))
  {
    CFDictionaryRef theDict = 0;
    sub_1007B946C(a2, (Registry **)a3, (const UInt8 *)&v48, (const void **)&theDict);
    if (theDict) {
      std::string::size_type v17 = sub_100080778;
    }
    else {
      std::string::size_type v17 = 0;
    }
    if (v17)
    {
      CFDictionaryRef v41 = 0;
      buf.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryGetValue(theDict, key);
      sub_10004EFE4(&v41, (CFTypeRef *)&buf.__r_.__value_.__l.__data_);
      if (v41) {
        uint64_t v18 = sub_100080778;
      }
      else {
        uint64_t v18 = 0;
      }
      if (v18)
      {
        long long v19 = (const char *)kGsmaOverlayKeyToken;
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        std::string v40 = buf;
        size_t v20 = strlen(v19);
        int v21 = std::string::insert(&v40, 0, v19, v20);
        long long v22 = *(_OWORD *)&v21->__r_.__value_.__l.__data_;
        v43.__r_.__value_.__r.__words[2] = v21->__r_.__value_.__r.__words[2];
        *(_OWORD *)&v43.__r_.__value_.__l.__data_ = v22;
        v21->__r_.__value_.__l.__size_ = 0;
        v21->__r_.__value_.__r.__words[2] = 0;
        v21->__r_.__value_.__r.__words[0] = 0;
        CFTypeID v23 = std::string::append(&v43, "v", 1uLL);
        long long v24 = *(_OWORD *)&v23->__r_.__value_.__l.__data_;
        __p.__r_.__value_.__r.__words[2] = v23->__r_.__value_.__r.__words[2];
        *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
        v23->__r_.__value_.__l.__size_ = 0;
        v23->__r_.__value_.__r.__words[2] = 0;
        v23->__r_.__value_.__r.__words[0] = 0;
        sub_1007DF670(*(void *)(a1 + 40), &v38);
        memset(&buf, 0, sizeof(buf));
        ctu::cf::assign();
        std::string v39 = buf;
        if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          CFTypeID v25 = &v39;
        }
        else {
          CFTypeID v25 = (std::string *)v39.__r_.__value_.__r.__words[0];
        }
        if ((v39.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v39.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v39.__r_.__value_.__l.__size_;
        }
        uint64_t v27 = std::string::append(&__p, (const std::string::value_type *)v25, size);
        std::string::size_type v28 = v27->__r_.__value_.__r.__words[0];
        v51[0] = v27->__r_.__value_.__l.__size_;
        *(void *)((char *)v51 + 7) = *(std::string::size_type *)((char *)&v27->__r_.__value_.__r.__words[1] + 7);
        char v29 = HIBYTE(v27->__r_.__value_.__r.__words[2]);
        v27->__r_.__value_.__l.__size_ = 0;
        v27->__r_.__value_.__r.__words[2] = 0;
        v27->__r_.__value_.__r.__words[0] = 0;
        if (*(char *)(a1 + 87) < 0) {
          operator delete(*(void **)(a1 + 64));
        }
        uint64_t v30 = v51[0];
        *(void *)(a1 + 64) = v28;
        *(void *)(a1 + 72) = v30;
        *(void *)(a1 + 79) = *(void *)((char *)v51 + 7);
        *(unsigned char *)(a1 + 87) = v29;
        if (SHIBYTE(v39.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v39.__r_.__value_.__l.__data_);
        }
        sub_1000558F4(&v38);
        if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(__p.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v43.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v43.__r_.__value_.__l.__data_);
        }
        if (SHIBYTE(v40.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v40.__r_.__value_.__l.__data_);
        }
        __p.__r_.__value_.__r.__words[0] = (std::string::size_type)CFDictionaryGetValue(v41, @"OverrideConfiguration");
        buf.__r_.__value_.__r.__words[0] = 0;
        CFTypeID v31 = (const void **)sub_10004EFE4(&buf, (CFTypeRef *)&__p.__r_.__value_.__l.__data_);
        std::string::size_type v32 = *v11;
        std::string::size_type *v11 = buf.__r_.__value_.__r.__words[0];
        buf.__r_.__value_.__r.__words[0] = v32;
        sub_100057D78(v31);
      }
      else
      {
        int v36 = **(NSObject ***)(a1 + 32);
        if (os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
        {
          LOWORD(buf.__r_.__value_.__l.__data_) = 0;
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, "#N No overlay configuration to perform GSMA overlay.", (uint8_t *)&buf, 2u);
        }
      }
      sub_100057D78((const void **)&v41);
    }
    else
    {
      CFTypeID v34 = **(NSObject ***)(a1 + 32);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        uint64_t v35 = (void **)&v48;
        if (v50 < 0) {
          uint64_t v35 = v48;
        }
        LODWORD(buf.__r_.__value_.__l.__data_) = 136446210;
        *(std::string::size_type *)((char *)buf.__r_.__value_.__r.__words + 4) = (std::string::size_type)v35;
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "Failed to load GSMA configurations file: %{public}s", (uint8_t *)&buf, 0xCu);
      }
    }
    sub_100057D78((const void **)&theDict);
  }
  else
  {
    CFArrayRef v33 = **(NSObject ***)(a1 + 32);
    if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#N No matched GSMA configuration present in GSMA bundle.", (uint8_t *)&buf, 2u);
    }
  }
  sub_1000558F4((const void **)&key);
  sub_1000558F4(&v47);
  if (SHIBYTE(v50) < 0) {
    operator delete(v48);
  }
  return a1;
}

void sub_100DC0324(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,const void *a25,const void *a26,void *a27,uint64_t a28,int a29,__int16 a30,char a31,char a32,uint64_t a33,void *__p,uint64_t a35,int a36,__int16 a37,char a38,char a39,uint64_t a40,char a41,int a42,const void *a43)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_1000558F4(&a10);
  if (a39 < 0) {
    operator delete(__p);
  }
  if (a32 < 0) {
    operator delete(a27);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_100057D78(&a25);
  sub_100057D78(&a26);
  sub_1000558F4(&a43);
  sub_1000558F4((const void **)(v46 - 160));
  if (*(char *)(v46 - 129) < 0) {
    operator delete(*(void **)(v46 - 152));
  }
  if (*(char *)(v43 + 87) < 0) {
    operator delete(*(void **)(v43 + 64));
  }
  sub_100057D78(v45);
  sub_100057D78(v44);
  CFDictionaryRef v48 = *(std::__shared_weak_count **)(v43 + 24);
  if (v48) {
    sub_10004D2C8(v48);
  }
  uint64_t v49 = *(std::__shared_weak_count **)(v43 + 8);
  if (v49) {
    sub_10004D2C8(v49);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DC0464(void *a1, uint64_t *a2)
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)uint64_t v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  sub_10004BD84((uint64_t)&v12);
  sub_100F900D8(*a2, __p);
  if ((v11 & 0x80u) == 0) {
    uint64_t v4 = __p;
  }
  else {
    uint64_t v4 = (void **)__p[0];
  }
  if ((v11 & 0x80u) == 0) {
    uint64_t v5 = v11;
  }
  else {
    uint64_t v5 = (uint64_t)__p[1];
  }
  long long v6 = sub_10004B96C(v13, (uint64_t)v4, v5);
  sub_10004B96C(v6, (uint64_t)"{", 1);
  long long v7 = (void *)std::ostream::operator<<();
  sub_10004B96C(v7, (uint64_t)"}", 1);
  if ((char)v11 < 0) {
    operator delete(__p[0]);
  }
  sub_10004BC98((uint64_t)v13 + 8, a1);
  *(void *)((char *)&v13[-1]
  *(void *)&v13[0] = v8;
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100DC0670(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

ctu::OsLogLogger *sub_100DC06A0(ctu::OsLogLogger *a1, void *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "wea");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, &v6);
  ctu::OsLogLogger::OsLogLogger(a1, (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
  *((void *)a1 + 1) = 0;
  *((void *)a1 + 2) = 0;
  *((void *)a1 + 3) = 0;
  *((void *)a1 + 4) = *a2;
  uint64_t v4 = a2[1];
  *((void *)a1 + 5) = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 16), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_100DC073C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void sub_100DC0760(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t **a5)
{
  uint64_t v6 = *a4;
  uint64_t v7 = a4[1];
  if (v7 == *a4) {
    return;
  }
  char v9 = *(void **)(a1 + 8);
  uint64_t v66 = *(void **)(a1 + 16);
  if (v9 != v66)
  {
    while (2)
    {
      unsigned int v67 = v9;
      uint64_t v10 = *v9;
      long long v12 = *(void **)(v10 + 16);
      unsigned __int8 v11 = *(void **)(v10 + 24);
      while (v12 != v11)
      {
        uint64_t v13 = (long long *)*v12;
        if (*(char *)(*v12 + 23) < 0)
        {
          sub_10004FC84(buf, *(void **)v13, *((void *)v13 + 1));
        }
        else
        {
          long long v14 = *v13;
          uint64_t v80 = *((void *)v13 + 2);
          *(_OWORD *)std::string buf = v14;
        }
        long long v15 = (long long *)v12[2];
        if (*((char *)v15 + 23) < 0)
        {
          sub_10004FC84(&v81, *(void **)v15, *((void *)v15 + 1));
        }
        else
        {
          long long v16 = *v15;
          uint64_t v82 = *((void *)v15 + 2);
          long long v81 = v16;
        }
        sub_1004AD8F8((uint64_t)&v73, (void **)buf, 2);
        if (sub_100145EC0((unsigned __int8 *)a2, &v73))
        {
          int v17 = 1;
        }
        else
        {
          long long v18 = (long long *)*v12;
          if (*(char *)(*v12 + 23) < 0)
          {
            sub_10004FC84(&__dst, *(void **)v18, *((void *)v18 + 1));
          }
          else
          {
            long long v19 = *v18;
            uint64_t v76 = *((void *)v18 + 2);
            long long __dst = v19;
          }
          long long v20 = (long long *)v12[2];
          if (*((char *)v20 + 23) < 0)
          {
            sub_10004FC84(&v77, *(void **)v20, *((void *)v20 + 1));
          }
          else
          {
            long long v21 = *v20;
            uint64_t v78 = *((void *)v20 + 2);
            long long v77 = v21;
          }
          sub_1004AD8F8((uint64_t)&v71, (void **)&__dst, 2);
          int v17 = sub_100145EC0((unsigned __int8 *)a3, &v71);
          sub_10005CD2C((uint64_t)&v71, v72);
          for (uint64_t i = 0; i != -48; i -= 24)
          {
            if ((char)buf[i - 1] < 0) {
              operator delete(*(void **)((char *)&v77 + i));
            }
          }
        }
        sub_10005CD2C((uint64_t)&v73, v74);
        for (uint64_t j = 0; j != -48; j -= 24)
        {
          if (*((char *)&v82 + j + 7) < 0) {
            operator delete(*(void **)((char *)&v81 + j));
          }
        }
        if (v17)
        {
          char v29 = *(uint64_t **)a1;
          if (os_log_type_enabled((os_log_t)v29, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string buf = 0;
            _os_log_impl((void *)&_mh_execute_header, (os_log_t)v29, OS_LOG_TYPE_DEFAULT, "#I Alert already being monitored...", buf, 2u);
          }
          return;
        }
        v12 += 4;
      }
      char v9 = v67 + 2;
      if (v67 + 2 != v66) {
        continue;
      }
      break;
    }
    uint64_t v6 = *a4;
    uint64_t v7 = a4[1];
  }
  long long __dst = 0uLL;
  uint64_t v76 = 0;
  sub_100DC23DC(&__dst, v6, v7, 0xAAAAAAAAAAAAAAABLL * ((v7 - v6) >> 3));
  uint64_t v73 = 0;
  __int16 v74 = 0;
  sub_100DC2B18(&v73, a2);
  uint64_t v71 = 0;
  uint64_t v72 = 0;
  sub_100DC2B18(&v71, a3);
  uint64_t v24 = *(unsigned __int8 *)(a2 + 23);
  if ((v24 & 0x80u) != 0) {
    uint64_t v24 = *(void *)(a2 + 8);
  }
  if (v24)
  {
    uint64_t v25 = *(unsigned __int8 *)(a3 + 23);
    if ((v25 & 0x80u) != 0) {
      uint64_t v25 = *(void *)(a3 + 8);
    }
    if (v25) {
      goto LABEL_47;
    }
    uint64_t v27 = v73;
    uint64_t v26 = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v74 + 1, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v28 = v72;
    uint64_t v71 = v27;
    uint64_t v72 = v26;
    if (!v28) {
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v31 = v71;
    uint64_t v30 = v72;
    if (v72) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v72 + 1, 1uLL, memory_order_relaxed);
    }
    std::string::size_type v28 = v74;
    uint64_t v73 = v31;
    __int16 v74 = v30;
    if (!v28) {
      goto LABEL_47;
    }
  }
  sub_10004D2C8((std::__shared_weak_count *)v28);
LABEL_47:
  std::string::size_type v32 = *(uint64_t ***)(a1 + 8);
  CFArrayRef v33 = *(uint64_t ***)(a1 + 16);
  if (v32 == v33)
  {
    uint64_t v35 = *((void *)&__dst + 1);
  }
  else
  {
    CFTypeID v34 = (__n128 *)*((void *)&__dst + 1);
    do
    {
      uint64_t v35 = __dst;
      v70[0] = v32;
      v70[1] = a5;
      v70[2] = (uint64_t **)&v73;
      v70[3] = (uint64_t **)&v71;
      uint8_t v70[4] = (uint64_t **)a1;
      while (1)
      {
        if ((__n128 *)v35 == v34)
        {
          uint64_t v35 = (uint64_t)v34;
          goto LABEL_54;
        }
        if (sub_100DC25A0(v70, v35)) {
          break;
        }
        v35 += 24;
      }
      if ((__n128 *)v35 != v34)
      {
        for (uint64_t k = (__n128 *)(v35 + 24); k != v34; uint64_t k = (__n128 *)((char *)k + 24))
        {
          if (!sub_100DC25A0(v70, (uint64_t)k))
          {
            sub_10005C9A4(v35, k);
            v35 += 24;
          }
        }
      }
LABEL_54:
      uint64_t v36 = *((void *)&__dst + 1);
      if (v35 != *((void *)&__dst + 1))
      {
        uint64_t v37 = *((void *)&__dst + 1);
        do
        {
          std::string v39 = *(void **)(v37 - 24);
          v37 -= 24;
          CFIndex v38 = v39;
          if (v39)
          {
            *(void *)(v36 - 16) = v38;
            operator delete(v38);
          }
          uint64_t v36 = v37;
        }
        while (v37 != v35);
        *((void *)&__dst + 1) = v35;
      }
      v32 += 2;
      CFTypeID v34 = (__n128 *)v35;
    }
    while (v32 != v33);
  }
  for (uint64_t m = (uint64_t *)__dst; m != (uint64_t *)v35; m += 3)
  {
    CFTypeID v42 = (char *)operator new(0x40uLL);
    *((void *)v42 + 1) = 0;
    *((void *)v42 + 2) = 0;
    *(void *)CFTypeID v42 = off_101A5A968;
    *(_OWORD *)(v42 + 24) = 0u;
    uint64_t v43 = (uint64_t *)(v42 + 24);
    *((void *)v42 + 7) = 0;
    *(_OWORD *)(v42 + 40) = 0u;
    *(void *)std::string buf = v73;
    *(void *)&uint8_t buf[8] = v74;
    if (v74) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v74 + 1, 1uLL, memory_order_relaxed);
    }
    uint64_t v80 = v71;
    *(void *)&long long v81 = v72;
    if (v72) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v72 + 1, 1uLL, memory_order_relaxed);
    }
    sub_100DC0F8C((void *)v42 + 5, (long long *)buf);
    if ((void)v81) {
      sub_10004D2C8((std::__shared_weak_count *)v81);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    uint64_t v45 = *(void *)(a1 + 32);
    int v44 = *(std::__shared_weak_count **)(a1 + 40);
    uint64_t v46 = operator new(0x98uLL);
    CFTypeID v47 = v46;
    v46[1] = 0;
    v46[2] = 0;
    *uint64_t v46 = off_101A5A9B8;
    *(void *)std::string buf = v45;
    *(void *)&uint8_t buf[8] = v44;
    if (v44) {
      atomic_fetch_add_explicit(&v44->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    }
    sub_100F8FDB4((uint64_t)(v46 + 3), buf, m);
    if (v44) {
      std::__shared_weak_count::__release_weak(v44);
    }
    *(void *)&long long v69 = v47 + 3;
    *((void *)&v69 + 1) = v47;
    sub_1000B3BC8((uint64_t)&v69, v47 + 4, (uint64_t)(v47 + 3));
    long long v48 = v69;
    long long v69 = 0uLL;
    uint64_t v49 = (std::__shared_weak_count *)*((void *)v42 + 4);
    *(_OWORD *)(v42 + 24) = v48;
    if (v49)
    {
      sub_10004D2C8(v49);
      if (*((void *)&v69 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v69 + 1));
      }
    }
    sub_100F90AC8(*v43);
    long long v51 = *(uint64_t ***)(a1 + 16);
    unint64_t v50 = *(void *)(a1 + 24);
    if ((unint64_t)v51 >= v50)
    {
      uint64_t v53 = *(char **)(a1 + 8);
      uint64_t v54 = ((char *)v51 - v53) >> 4;
      unint64_t v55 = v54 + 1;
      if ((unint64_t)(v54 + 1) >> 60) {
        sub_10006A748();
      }
      uint64_t v56 = v50 - (void)v53;
      if (v56 >> 3 > v55) {
        unint64_t v55 = v56 >> 3;
      }
      if ((unint64_t)v56 >= 0x7FFFFFFFFFFFFFF0) {
        unint64_t v57 = 0xFFFFFFFFFFFFFFFLL;
      }
      else {
        unint64_t v57 = v55;
      }
      if (v57 >> 60) {
        sub_10006A7CC();
      }
      std::string::size_type v58 = (char *)operator new(16 * v57);
      uint64_t v59 = (uint64_t **)&v58[16 * v54];
      CFStringRef v60 = &v58[16 * v57];
      *uint64_t v59 = v43;
      v59[1] = (uint64_t *)v42;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v42 + 1, 1uLL, memory_order_relaxed);
      long long v52 = v59 + 2;
      if (v51 == (uint64_t **)v53)
      {
        *(void *)(a1 + 8) = v59;
        *(void *)(a1 + 16) = v52;
        *(void *)(a1 + 24) = v60;
      }
      else
      {
        do
        {
          long long v61 = *((_OWORD *)v51 - 1);
          v51 -= 2;
          *((_OWORD *)v59 - 1) = v61;
          v59 -= 2;
          *long long v51 = 0;
          v51[1] = 0;
        }
        while (v51 != (uint64_t **)v53);
        long long v51 = *(uint64_t ***)(a1 + 8);
        CFTypeID v62 = *(uint64_t ***)(a1 + 16);
        *(void *)(a1 + 8) = v59;
        *(void *)(a1 + 16) = v52;
        *(void *)(a1 + 24) = v60;
        while (v62 != v51)
        {
          std::string v63 = (std::__shared_weak_count *)*(v62 - 1);
          if (v63) {
            sub_10004D2C8(v63);
          }
          v62 -= 2;
        }
      }
      if (v51) {
        operator delete(v51);
      }
    }
    else
    {
      *long long v51 = v43;
      v51[1] = (uint64_t *)v42;
      atomic_fetch_add_explicit((atomic_ullong *volatile)v42 + 1, 1uLL, memory_order_relaxed);
      long long v52 = v51 + 2;
    }
    *(void *)(a1 + 16) = v52;
    sub_10004D2C8((std::__shared_weak_count *)v42);
  }
  sub_100DC10C0(a1);
  if (v72) {
    sub_10004D2C8((std::__shared_weak_count *)v72);
  }
  if (v74) {
    sub_10004D2C8((std::__shared_weak_count *)v74);
  }
  *(void *)std::string buf = &__dst;
  sub_10011FF94((void ***)buf);
}

void sub_100DC0E30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char a23,std::__shared_weak_count *a24,uint64_t a25,void **p_p,std::__shared_weak_count *a27,uint64_t a28,void *__p,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a24) {
    sub_10004D2C8(a24);
  }
  if (a27) {
    sub_10004D2C8(a27);
  }
  p_p = &__p;
  sub_10011FF94(&p_p);
  _Unwind_Resume(a1);
}

void *sub_100DC0F8C(void *result, long long *a2)
{
  uint64_t v3 = (char **)result;
  unint64_t v4 = result[2];
  uint64_t v5 = (_OWORD *)result[1];
  if ((unint64_t)v5 >= v4)
  {
    uint64_t v7 = ((uint64_t)v5 - *result) >> 5;
    unint64_t v8 = v7 + 1;
    if ((unint64_t)(v7 + 1) >> 59) {
      sub_10006A748();
    }
    uint64_t v9 = v4 - *result;
    if (v9 >> 4 > v8) {
      unint64_t v8 = v9 >> 4;
    }
    if ((unint64_t)v9 >= 0x7FFFFFFFFFFFFFE0) {
      unint64_t v10 = 0x7FFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v10 = v8;
    }
    long long v23 = result + 2;
    if (v10 >> 59) {
      sub_10006A7CC();
    }
    unsigned __int8 v11 = (char *)operator new(32 * v10);
    long long v12 = &v11[32 * v7];
    long long v13 = *a2;
    long long v14 = a2[1];
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    *(_OWORD *)long long v12 = v13;
    *((_OWORD *)v12 + 1) = v14;
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v6 = v12 + 32;
    long long v16 = *v3;
    unint64_t v15 = (unint64_t)v3[1];
    if ((char *)v15 == *v3)
    {
      int64x2_t v18 = vdupq_n_s64(v15);
    }
    else
    {
      do
      {
        long long v17 = *(_OWORD *)(v15 - 32);
        v15 -= 32;
        *((_OWORD *)v12 - 2) = v17;
        v12 -= 32;
        *(void *)unint64_t v15 = 0;
        *(void *)(v15 + 8) = 0;
        *((_OWORD *)v12 + 1) = *(_OWORD *)(v15 + 16);
        *(void *)(v15 + 16) = 0;
        *(void *)(v15 + 24) = 0;
      }
      while ((char *)v15 != v16);
      int64x2_t v18 = *(int64x2_t *)v3;
    }
    *uint64_t v3 = v12;
    v3[1] = v6;
    int64x2_t v21 = v18;
    long long v19 = v3[2];
    v3[2] = &v11[32 * v10];
    long long v22 = v19;
    uint64_t v20 = v18.i64[0];
    uint64_t result = (void *)sub_100DC29C0((uint64_t)&v20);
  }
  else
  {
    *uint64_t v5 = *a2;
    *(void *)a2 = 0;
    *((void *)a2 + 1) = 0;
    v5[1] = a2[1];
    *((void *)a2 + 2) = 0;
    *((void *)a2 + 3) = 0;
    uint64_t v6 = (char *)(v5 + 2);
  }
  v3[1] = v6;
  return result;
}

void sub_100DC10C0(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)std::string buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Active shapes:", buf, 2u);
  }
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  for (uint64_t i = *(uint64_t ***)(a1 + 16); v3 != i; v3 += 2)
  {
    uint64_t v5 = *(NSObject **)a1;
    if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
    {
      sub_100DC0464(buf, *v3);
      if (v8 >= 0) {
        uint64_t v6 = buf;
      }
      else {
        uint64_t v6 = *(uint8_t **)buf;
      }
      *(_DWORD *)uint64_t v9 = 136446210;
      unint64_t v10 = v6;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I %{public}s", v9, 0xCu);
      if (v8 < 0) {
        operator delete(*(void **)buf);
      }
    }
  }
}

uint64_t sub_100DC120C(uint64_t a1, unsigned __int8 *a2, uint64_t *a3, const void **a4)
{
  v64[0] = 0;
  v64[1] = 0;
  uint64_t v65 = 0;
  unint64_t v4 = *(uint64_t ***)(a1 + 8);
  for (uint64_t i = *(uint64_t ***)(a1 + 16); v4 != i; v4 += 2)
  {
    char v8 = (void *)(*v4)[2];
    uint64_t v7 = (void *)(*v4)[3];
    long long v52 = v7;
    while (v8 != v7)
    {
      uint64_t v9 = (long long *)*v8;
      if (*(char *)(*v8 + 23) < 0)
      {
        sub_10004FC84(buf, *(void **)v9, *((void *)v9 + 1));
      }
      else
      {
        long long v10 = *v9;
        *(void *)&uint8_t buf[16] = *((void *)v9 + 2);
        *(_OWORD *)std::string buf = v10;
      }
      unsigned __int8 v11 = (long long *)v8[2];
      if (*((char *)v11 + 23) < 0)
      {
        sub_10004FC84(&v77, *(void **)v11, *((void *)v11 + 1));
      }
      else
      {
        long long v12 = *v11;
        v78[0] = *((void *)v11 + 2);
        long long v77 = v12;
      }
      sub_1004AD8F8((uint64_t)v63, (void **)buf, 2);
      unint64_t v55 = v8;
      int v13 = sub_100145EC0(a2, v63);
      sub_10005CD2C((uint64_t)v63, (char *)v63[1]);
      for (uint64_t j = 0; j != -6; j -= 3)
      {
        if (SHIBYTE(v78[j]) < 0) {
          operator delete(*(void **)&buf[j * 8 + 24]);
        }
      }
      if (v13)
      {
        uint64_t v16 = *a3;
        uint64_t v15 = a3[1];
        while (v16 != v15)
        {
          uint64_t v18 = **v4;
          long long v17 = (std::__shared_weak_count *)(*v4)[1];
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          CFStringRef v60 = 0;
          long long v61 = 0;
          CFTypeID v62 = 0;
          *(void *)&long long v72 = &v60;
          *((void *)&v72 + 1) = 0;
          long long v19 = (uint64_t *)operator new(0x10uLL);
          CFStringRef v60 = v19;
          long long v61 = v19;
          CFTypeID v62 = v19 + 2;
          uint64_t *v19 = v18;
          v19[1] = (uint64_t)v17;
          if (v17) {
            atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          long long v61 = v19 + 2;
          sub_100F90E4C(&v60, (uint64_t)buf);
          long long v69 = 0;
          uint64_t v70 = 0;
          uint64_t v71 = 0;
          sub_1004081A4(&v69, *(const void **)v16, *(void *)(v16 + 8), (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 4);
          long long v58 = 0uLL;
          uint64_t v59 = 0;
          std::string __p = &v58;
          unsigned int v67 = 0;
          *(void *)&long long v58 = operator new(0x18uLL);
          *((void *)&v58 + 1) = v58;
          uint64_t v59 = v58 + 24;
          *((void *)&v58 + 1) = sub_100DC2A10((uint64_t)&v59, (uint64_t)&v69, (uint64_t)&v72, (void *)v58);
          std::string __p = 0;
          unsigned int v67 = 0;
          std::string::size_type v68 = 0;
          sub_10122FBA0((uint64_t)&v72, (uint64_t *)&v58, (long long **)&__p);
          sub_100058198(&v57, a4);
          sub_101230B50((uint64_t *)buf, (uint64_t *)&v72, (uint64_t)v64, &v57);
          char v21 = v20;
          sub_100057D78(&v57);
          if (v74)
          {
            uint64_t v75 = v74;
            operator delete(v74);
          }
          std::string __p = &v72;
          sub_10011FF94((void ***)&__p);
          std::string __p = &v58;
          sub_10011FF94((void ***)&__p);
          if (v69)
          {
            uint64_t v70 = v69;
            operator delete(v69);
          }
          if ((void)v77)
          {
            *((void *)&v77 + 1) = v77;
            operator delete((void *)v77);
          }
          *(void *)&long long v72 = buf;
          sub_10011FF94((void ***)&v72);
          *(void *)&long long v72 = &v60;
          sub_10077EE24((void ***)&v72);
          if (v17) {
            sub_10004D2C8(v17);
          }
          long long v22 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            sub_100F900D8(**v4, &v72);
            if (v73 >= 0) {
              long long v23 = &v72;
            }
            else {
              long long v23 = (long long *)v72;
            }
            uint64_t v24 = (uint64_t)(*(void *)(v16 + 8) - *(void *)v16) >> 4;
            uint64_t v25 = v64;
            if (v65 < 0) {
              uint64_t v25 = (void **)v64[0];
            }
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = v23;
            *(_WORD *)&unsigned char buf[12] = 2048;
            *(void *)&buf[14] = v24;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&long long v77 = v25;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I S-Test: [%{public}s] ~ [poly sz:%lu] : %s", buf, 0x20u);
            if (v73 < 0) {
              operator delete((void *)v72);
            }
          }
          if (v21)
          {
            BOOL v26 = sub_100F9047C(**v4);
            uint64_t v27 = *(NSObject **)a1;
            BOOL v28 = os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT);
            if (v26)
            {
              if (v28)
              {
                sub_100F900D8(**v4, buf);
                if (buf[23] >= 0) {
                  uint64_t v46 = buf;
                }
                else {
                  uint64_t v46 = *(unsigned char **)buf;
                }
                LODWORD(v72) = 136446210;
                *(void *)((char *)&v72 + 4) = v46;
                CFTypeID v47 = v27;
LABEL_86:
                _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] ready...", (uint8_t *)&v72, 0xCu);
                if ((buf[23] & 0x80000000) != 0) {
                  operator delete(*(void **)buf);
                }
              }
LABEL_88:
              uint64_t v45 = 1;
              goto LABEL_89;
            }
            if (v28)
            {
              sub_100F900D8(**v4, buf);
              if (buf[23] >= 0) {
                char v29 = buf;
              }
              else {
                char v29 = *(unsigned char **)buf;
              }
              LODWORD(v72) = 136446210;
              *(void *)((char *)&v72 + 4) = v29;
              _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I [%{public}s] not ready for dispatch...", (uint8_t *)&v72, 0xCu);
              if ((buf[23] & 0x80000000) != 0) {
                operator delete(*(void **)buf);
              }
            }
          }
          v16 += 24;
        }
        uint64_t v30 = (long long *)a3[3];
        uint64_t v31 = (long long *)a3[4];
        while (v30 != v31)
        {
          uint64_t v33 = **v4;
          std::string::size_type v32 = (std::__shared_weak_count *)(*v4)[1];
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          std::string __p = 0;
          unsigned int v67 = 0;
          std::string::size_type v68 = 0;
          *(void *)&long long v72 = &__p;
          *((void *)&v72 + 1) = 0;
          CFTypeID v34 = operator new(0x10uLL);
          std::string __p = v34;
          unsigned int v67 = v34;
          std::string::size_type v68 = v34 + 2;
          *CFTypeID v34 = v33;
          v34[1] = v32;
          if (v32) {
            atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          unsigned int v67 = v34 + 2;
          sub_100F90E4C((uint64_t **)&__p, (uint64_t)buf);
          long long v58 = *v30;
          uint64_t v59 = *((void *)v30 + 2);
          uint64_t v35 = (uint64_t *)operator new(0x18uLL);
          long long v61 = v35 + 3;
          CFTypeID v62 = v35 + 3;
          *(_OWORD *)uint64_t v35 = v58;
          v35[2] = v59;
          CFStringRef v60 = v35;
          sub_10122FC38((uint64_t)&v72, (long long **)&v60);
          sub_100058198(&v56, a4);
          sub_101230B50((uint64_t *)buf, (uint64_t *)&v72, (uint64_t)v64, &v56);
          char v37 = v36;
          sub_100057D78(&v56);
          if (v74)
          {
            uint64_t v75 = v74;
            operator delete(v74);
          }
          long long v69 = (void **)&v72;
          sub_10011FF94(&v69);
          operator delete(v35);
          if ((void)v77)
          {
            *((void *)&v77 + 1) = v77;
            operator delete((void *)v77);
          }
          *(void *)&long long v72 = buf;
          sub_10011FF94((void ***)&v72);
          *(void *)&long long v72 = &__p;
          sub_10077EE24((void ***)&v72);
          if (v32) {
            sub_10004D2C8(v32);
          }
          CFIndex v38 = *(NSObject **)a1;
          if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
          {
            std::string v39 = a4;
            sub_100F900D8(**v4, &v72);
            int v40 = v73;
            CFDictionaryRef v41 = (long long *)v72;
            sub_100F84850(&__p);
            if (v40 >= 0) {
              CFTypeID v42 = &v72;
            }
            else {
              CFTypeID v42 = v41;
            }
            p_p = &__p;
            if (SHIBYTE(v68) < 0) {
              p_p = __p;
            }
            int v44 = v64;
            if (v65 < 0) {
              int v44 = (void **)v64[0];
            }
            *(_DWORD *)std::string buf = 136446722;
            *(void *)&uint8_t buf[4] = v42;
            *(_WORD *)&unsigned char buf[12] = 2082;
            *(void *)&buf[14] = p_p;
            *(_WORD *)&unsigned char buf[22] = 2080;
            *(void *)&long long v77 = v44;
            _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I S-Test: [%{public}s] ~ [%{public}s] : %s", buf, 0x20u);
            if (SHIBYTE(v68) < 0) {
              operator delete(__p);
            }
            a4 = v39;
            if (v73 < 0) {
              operator delete((void *)v72);
            }
          }
          if (v37 && sub_100F9047C(**v4))
          {
            os_log_t v48 = *(os_log_t *)a1;
            if (!os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_88;
            }
            sub_100F900D8(**v4, buf);
            if (buf[23] >= 0) {
              uint64_t v49 = buf;
            }
            else {
              uint64_t v49 = *(unsigned char **)buf;
            }
            LODWORD(v72) = 136446210;
            *(void *)((char *)&v72 + 4) = v49;
            CFTypeID v47 = v48;
            goto LABEL_86;
          }
          uint64_t v30 = (long long *)((char *)v30 + 24);
        }
      }
      char v8 = v55 + 4;
      uint64_t v7 = v52;
    }
  }
  uint64_t v45 = 0;
LABEL_89:
  if (SHIBYTE(v65) < 0) {
    operator delete(v64[0]);
  }
  return v45;
}

void sub_100DC19B4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,int a22,__int16 a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,char a33,uint64_t a34,uint64_t a35,char a36,uint64_t a37,uint64_t a38,void *__p,uint64_t a40,int a41,__int16 a42,char a43,char a44,uint64_t a45,char a46)
{
  if (a44 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC1B28()
{
}

void sub_100DC1B38(uint64_t a1, void **a2, int a3)
{
  uint64_t v5 = *(uint64_t ***)(a1 + 8);
  for (uint64_t i = *(uint64_t ***)(a1 + 16); v5 != i; v5 += 2)
  {
    uint64_t v8 = **v5;
    if (*(char *)(v8 + 63) < 0)
    {
      sub_10004FC84(__p, *(void **)(v8 + 40), *(void *)(v8 + 48));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)(v8 + 40);
      uint64_t v22 = *(void *)(v8 + 56);
    }
    if (v22 >= 0) {
      uint64_t v9 = (unsigned __int8 *)HIBYTE(v22);
    }
    else {
      uint64_t v9 = (unsigned __int8 *)__p[1];
    }
    long long v10 = (unsigned __int8 *)*((unsigned __int8 *)a2 + 23);
    int v11 = (char)v10;
    if ((char)v10 < 0) {
      long long v10 = (unsigned __int8 *)a2[1];
    }
    if (v9 == v10)
    {
      if (v11 >= 0) {
        long long v12 = (unsigned __int8 *)a2;
      }
      else {
        long long v12 = (unsigned __int8 *)*a2;
      }
      if (v22 < 0)
      {
        long long v17 = __p[0];
        int v18 = memcmp(__p[0], v12, (size_t)__p[1]);
        operator delete(v17);
        if (!v18) {
          goto LABEL_33;
        }
      }
      else
      {
        if (!HIBYTE(v22)) {
          goto LABEL_33;
        }
        uint64_t v13 = 0;
        do
        {
          int v14 = *((unsigned __int8 *)__p + v13);
          int v15 = v12[v13];
        }
        while (v14 == v15 && HIBYTE(v22) - 1 != v13++);
        if (v14 == v15)
        {
LABEL_33:
          sub_100F909DC(**v5, a3);
          return;
        }
      }
    }
    else if (v22 < 0)
    {
      operator delete(__p[0]);
    }
  }
  long long v19 = *(NSObject **)a1;
  if (os_log_type_enabled(*(os_log_t *)a1, OS_LOG_TYPE_DEFAULT))
  {
    if (*((char *)a2 + 23) >= 0) {
      char v20 = a2;
    }
    else {
      char v20 = *a2;
    }
    LODWORD(__p[0]) = 136446210;
    *(void **)((char *)__p + 4) = v20;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Failed to match hash: %{public}s", (uint8_t *)__p, 0xCu);
  }
}

void sub_100DC1D04(uint64_t a1, const void **a2)
{
  uint64_t v2 = a1;
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  unint64_t v4 = *(uint64_t **)(a1 + 16);
  if (v3 == (uint64_t **)v4) {
    goto LABEL_82;
  }
  do
  {
    uint64_t v6 = *v3;
    uint64_t v7 = (long long *)(*v3)[2];
    uint64_t v8 = (long long *)(*v3)[3];
    if (v7 == v8) {
      goto LABEL_77;
    }
    char v9 = *((unsigned char *)a2 + 23);
    if (v9 >= 0) {
      long long v10 = (const void *)*((unsigned __int8 *)a2 + 23);
    }
    else {
      long long v10 = a2[1];
    }
    if (v9 >= 0) {
      int v11 = (unsigned __int8 *)a2;
    }
    else {
      int v11 = (unsigned __int8 *)*a2;
    }
    while (1)
    {
      long long v12 = *(const void ***)v7;
      uint64_t v13 = *(unsigned __int8 *)(*(void *)v7 + 23);
      if ((v13 & 0x80u) == 0) {
        int v14 = (const void *)*(unsigned __int8 *)(*(void *)v7 + 23);
      }
      else {
        int v14 = *(const void **)(*(void *)v7 + 8);
      }
      if (v14 == v10)
      {
        if ((v13 & 0x80) != 0)
        {
          if (!memcmp(*v12, v11, *(void *)(*(void *)v7 + 8))) {
            goto LABEL_33;
          }
        }
        else
        {
          if (!*(unsigned char *)(*(void *)v7 + 23)) {
            goto LABEL_33;
          }
          int v15 = v11;
          while (*(unsigned __int8 *)v12 == *v15)
          {
            long long v12 = (const void **)((char *)v12 + 1);
            ++v15;
            if (!--v13) {
              goto LABEL_33;
            }
          }
        }
      }
      uint64_t v16 = (unsigned __int8 *)*((void *)v7 + 2);
      uint64_t v17 = v16[23];
      if ((v17 & 0x80u) == 0) {
        int v18 = (const void *)v16[23];
      }
      else {
        int v18 = (const void *)*((void *)v16 + 1);
      }
      if (v18 != v10) {
        goto LABEL_31;
      }
      if ((v17 & 0x80) != 0) {
        break;
      }
      if (!v16[23]) {
        goto LABEL_33;
      }
      long long v19 = v11;
      while (*v16 == *v19)
      {
        ++v16;
        ++v19;
        if (!--v17) {
          goto LABEL_33;
        }
      }
LABEL_31:
      v7 += 2;
      if (v7 == v8) {
        goto LABEL_77;
      }
    }
    if (memcmp(*(const void **)v16, v11, *((void *)v16 + 1))) {
      goto LABEL_31;
    }
LABEL_33:
    if (v7 == v8) {
      goto LABEL_77;
    }
    char v20 = v7 + 2;
    if (v7 + 2 == v8)
    {
      uint64_t v21 = (uint64_t)v7;
      goto LABEL_69;
    }
    uint64_t v21 = (uint64_t)v7;
    while (2)
    {
      uint64_t v22 = v7;
      uint64_t v7 = v20;
      long long v23 = (unsigned __int8 *)*((void *)v22 + 4);
      uint64_t v24 = v23[23];
      if ((v24 & 0x80u) == 0) {
        uint64_t v25 = (const void *)v23[23];
      }
      else {
        uint64_t v25 = (const void *)*((void *)v23 + 1);
      }
      int v26 = *((char *)a2 + 23);
      if (v26 >= 0) {
        uint64_t v27 = (const void *)*((unsigned __int8 *)a2 + 23);
      }
      else {
        uint64_t v27 = a2[1];
      }
      if (v25 == v27)
      {
        if (v26 >= 0) {
          BOOL v28 = (unsigned __int8 *)a2;
        }
        else {
          BOOL v28 = (unsigned __int8 *)*a2;
        }
        if ((v24 & 0x80) != 0)
        {
          if (memcmp(*(const void **)v23, v28, *((void *)v23 + 1))) {
            goto LABEL_52;
          }
        }
        else if (v23[23])
        {
          while (*v23 == *v28)
          {
            ++v23;
            ++v28;
            if (!--v24) {
              goto LABEL_66;
            }
          }
          goto LABEL_52;
        }
      }
      else
      {
LABEL_52:
        char v29 = (unsigned __int8 *)*((void *)v22 + 6);
        uint64_t v30 = v29[23];
        if ((v30 & 0x80u) == 0) {
          uint64_t v31 = (const void *)v29[23];
        }
        else {
          uint64_t v31 = (const void *)*((void *)v29 + 1);
        }
        if (v31 == v27)
        {
          if (v26 >= 0) {
            std::string::size_type v32 = (unsigned __int8 *)a2;
          }
          else {
            std::string::size_type v32 = (unsigned __int8 *)*a2;
          }
          if ((v30 & 0x80) != 0)
          {
            if (!memcmp(*(const void **)v29, v32, *((void *)v29 + 1))) {
              goto LABEL_66;
            }
          }
          else
          {
            if (!v29[23]) {
              goto LABEL_66;
            }
            while (*v29 == *v32)
            {
              ++v29;
              ++v32;
              if (!--v30) {
                goto LABEL_66;
              }
            }
          }
        }
        sub_100DC2AC0(v21, v7);
        v21 += 32;
      }
LABEL_66:
      char v20 = v7 + 2;
      if (v7 + 2 != v8) {
        continue;
      }
      break;
    }
    uint64_t v8 = (long long *)(*v3)[3];
LABEL_69:
    if ((long long *)v21 != v8)
    {
      uint64_t v33 = (uint64_t)v8;
      CFTypeID v34 = (long long *)v6[3];
      if (v8 != v34)
      {
        uint64_t v35 = 32 * (((uint64_t)v8 - v21) >> 5);
        do
        {
          sub_100DC2AC0(v21, (long long *)(v21 + v35));
          v21 += 32;
        }
        while ((long long *)(v21 + v35) != v34);
        uint64_t v33 = v6[3];
      }
      while (v33 != v21)
      {
        v33 -= 32;
        sub_10000ACD0(v33);
      }
      v6[3] = v21;
    }
LABEL_77:
    v3 += 2;
  }
  while (v3 != (uint64_t **)v4);
  uint64_t v2 = a1;
  uint64_t v3 = *(uint64_t ***)(a1 + 8);
  char v36 = *(uint64_t ***)(a1 + 16);
  if (v3 == v36)
  {
LABEL_82:
    int v37 = 0;
    goto LABEL_83;
  }
  while ((*v3)[3] != (*v3)[2])
  {
    v3 += 2;
    if (v3 == v36)
    {
      int v37 = 0;
      uint64_t v3 = *(uint64_t ***)(a1 + 16);
      goto LABEL_83;
    }
  }
  sub_100F902A8(**v3);
  int v37 = 1;
  if (v3 != v36)
  {
    for (uint64_t i = v3 + 2; i != v36; i += 2)
    {
      CFTypeID v42 = *i;
      if ((*i)[3] == (*i)[2])
      {
        sub_100F902A8(*v42);
        ++v37;
      }
      else
      {
        uint64_t v43 = i[1];
        _DWORD *i = 0;
        i[1] = 0;
        int v44 = (std::__shared_weak_count *)v3[1];
        *uint64_t v3 = v42;
        v3[1] = v43;
        if (v44) {
          sub_10004D2C8(v44);
        }
        v3 += 2;
      }
    }
  }
LABEL_83:
  CFIndex v38 = *(uint64_t **)(v2 + 16);
  if (v3 != (uint64_t **)v38)
  {
    while (v38 != (uint64_t *)v3)
    {
      std::string v39 = (std::__shared_weak_count *)*(v38 - 1);
      if (v39) {
        sub_10004D2C8(v39);
      }
      v38 -= 2;
    }
    *(void *)(v2 + 16) = v3;
  }
  int v40 = *(NSObject **)v2;
  if (os_log_type_enabled(*(os_log_t *)v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)std::string buf = 67109120;
    int v47 = v37;
    _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %u shapes dropped", buf, 8u);
  }
  sub_100DC10C0(v2);
}

uint64_t sub_100DC2180@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v26 = 0;
  long long v24 = 0u;
  long long v25 = 0u;
  long long v22 = 0u;
  long long v23 = 0u;
  long long v20 = 0u;
  long long v21 = 0u;
  long long v18 = 0u;
  long long v19 = 0u;
  long long v16 = 0u;
  long long v17 = 0u;
  *(_OWORD *)int v14 = 0u;
  long long v15 = 0u;
  memset(v13, 0, sizeof(v13));
  long long v12 = 0u;
  sub_10004BD84((uint64_t)&v12);
  sub_10004B96C(v13, (uint64_t)"=====================", 21);
  sub_10004B96C(v13, (uint64_t)"Active alerts:", 14);
  uint64_t v5 = *(uint64_t ***)(a1 + 8);
  for (uint64_t i = *(uint64_t ***)(a1 + 16); v5 != i; v5 += 2)
  {
    sub_100DC0464(__p, *v5);
    if ((v11 & 0x80u) == 0) {
      uint64_t v6 = __p;
    }
    else {
      uint64_t v6 = (void **)__p[0];
    }
    if ((v11 & 0x80u) == 0) {
      uint64_t v7 = v11;
    }
    else {
      uint64_t v7 = (uint64_t)__p[1];
    }
    sub_10004B96C(v13, (uint64_t)v6, v7);
    if ((char)v11 < 0) {
      operator delete(__p[0]);
    }
  }
  sub_10004B96C(v13, (uint64_t)"=====================", 21);
  sub_10004BC98((uint64_t)v13 + 8, a2);
  *(void *)((char *)&v13[-1]
  *(void *)&v13[0] = v8;
  if (SHIBYTE(v15) < 0) {
    operator delete(v14[1]);
  }
  std::streambuf::~streambuf();
  std::iostream::~basic_iostream();
  return std::ios::~ios();
}

void sub_100DC23AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, char a16)
{
}

void *sub_100DC23DC(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    uint64_t v6 = result;
    sub_100DC2464(result, a4);
    uint64_t result = sub_100DC24B8((uint64_t)(v6 + 2), a2, a3, (void *)v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100DC2444(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_10011FF94(&a9);
  _Unwind_Resume(a1);
}

char *sub_100DC2464(void *a1, unint64_t a2)
{
  if (a2 >= 0xAAAAAAAAAAAAAABLL) {
    sub_100578470();
  }
  uint64_t result = (char *)sub_10004812C((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[24 * v4];
  return result;
}

void *sub_100DC24B8(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  uint64_t v10 = a4;
  unsigned __int8 v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1004081A4(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  sub_100DC2568((uint64_t)v8);
  return v4;
}

void sub_100DC2554(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100DC2568(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 24)) {
    sub_100612288(a1);
  }
  return a1;
}

BOOL sub_100DC25A0(uint64_t ***a1, uint64_t a2)
{
  uint64_t v4 = (os_log_t *)a1[4];
  v28[0] = 0;
  v28[1] = 0;
  uint64_t v29 = 0;
  uint64_t v5 = **a1;
  uint64_t v7 = *v5;
  uint64_t v6 = (std::__shared_weak_count *)v5[1];
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  long long v25 = 0;
  uint64_t v26 = 0;
  uint64_t v27 = 0;
  *(void *)&long long buf = &v25;
  *((void *)&buf + 1) = 0;
  xpc_object_t v8 = (uint64_t *)operator new(0x10uLL);
  long long v25 = v8;
  uint64_t v27 = v8 + 2;
  uint64_t *v8 = v7;
  v8[1] = (uint64_t)v6;
  if (v6) {
    atomic_fetch_add_explicit(&v6->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v26 = v8 + 2;
  sub_100F90E4C(&v25, (uint64_t)&v39);
  uint64_t v33 = 0;
  CFTypeID v34 = 0;
  uint64_t v35 = 0;
  sub_1004081A4(&v33, *(const void **)a2, *(void *)(a2 + 8), (uint64_t)(*(void *)(a2 + 8) - *(void *)a2) >> 4);
  long long v22 = 0;
  long long v23 = 0;
  long long v24 = 0;
  p_long long buf = (long long *)&v22;
  uint64_t v31 = 0;
  long long v22 = operator new(0x18uLL);
  long long v23 = v22;
  long long v24 = v22 + 3;
  long long v23 = sub_100DC2A10((uint64_t)&v24, (uint64_t)&v33, (uint64_t)&buf, v22);
  p_long long buf = 0;
  uint64_t v31 = 0;
  uint64_t v32 = 0;
  sub_10122FBA0((uint64_t)&buf, (uint64_t *)&v22, &p_buf);
  sub_100058198(&v21, (const void **)a1[1]);
  sub_101230B50((uint64_t *)&v39, (uint64_t *)&buf, (uint64_t)v28, &v21);
  char v10 = v9;
  sub_100057D78(&v21);
  if (__p)
  {
    CFIndex v38 = __p;
    operator delete(__p);
  }
  p_long long buf = &buf;
  sub_10011FF94((void ***)&p_buf);
  p_long long buf = (long long *)&v22;
  sub_10011FF94((void ***)&p_buf);
  if (v33)
  {
    CFTypeID v34 = v33;
    operator delete(v33);
  }
  if (v41)
  {
    CFTypeID v42 = v41;
    operator delete(v41);
  }
  *(void *)&long long buf = &v39;
  sub_10011FF94((void ***)&buf);
  *(void *)&long long buf = &v25;
  sub_10077EE24((void ***)&buf);
  if (v6) {
    sub_10004D2C8(v6);
  }
  if (v10)
  {
    unsigned __int8 v11 = **a1 + 2;
    uint64_t v13 = a1[2];
    long long v12 = a1[3];
    long long v15 = *v13;
    int v14 = v13[1];
    *(void *)&long long v39 = v15;
    *((void *)&v39 + 1) = v14;
    if (v14) {
      atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
    }
    int v40 = *v12;
    long long v16 = v12[1];
    CFDictionaryRef v41 = (std::__shared_weak_count *)v16;
    if (v16) {
      atomic_fetch_add_explicit(v16 + 1, 1uLL, memory_order_relaxed);
    }
    sub_100DC0F8C(v11, &v39);
    if (v41) {
      sub_10004D2C8(v41);
    }
    if (*((void *)&v39 + 1)) {
      sub_10004D2C8(*((std::__shared_weak_count **)&v39 + 1));
    }
    long long v17 = *v4;
    if (os_log_type_enabled(*v4, OS_LOG_TYPE_DEFAULT))
    {
      sub_100F900D8(***a1, &v39);
      if (SHIBYTE(v40) >= 0) {
        uint64_t v18 = (uint64_t)&v39;
      }
      else {
        uint64_t v18 = v39;
      }
      LODWORD(buf) = 136446210;
      *(void *)((char *)&buf + 4) = v18;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Similar shape found: %{public}s", (uint8_t *)&buf, 0xCu);
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)v39);
      }
      long long v17 = *v4;
    }
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      long long v19 = v28;
      if (v29 < 0) {
        long long v19 = (void **)v28[0];
      }
      LODWORD(v39) = 136446210;
      *(void *)((char *)&v39 + 4) = v19;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %{public}s", (uint8_t *)&v39, 0xCu);
    }
  }
  if (SHIBYTE(v29) < 0) {
    operator delete(v28[0]);
  }
  return v10 != 0;
}

void sub_100DC2900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,void *a30,uint64_t a31,uint64_t a32,uint64_t a33)
{
  if (a25 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC29B0()
{
}

void sub_100DC29B8()
{
}

uint64_t sub_100DC29C0(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 32;
    sub_10000ACD0(i - 32);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100DC2A10(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v4 = a4;
  char v10 = a4;
  unsigned __int8 v11 = a4;
  v8[0] = a1;
  v8[1] = &v10;
  void v8[2] = &v11;
  uint64_t v9 = 0;
  if (a2 != a3)
  {
    uint64_t v6 = a2;
    do
    {
      *uint64_t v4 = 0;
      v4[1] = 0;
      v4[2] = 0;
      sub_1004081A4(v4, *(const void **)v6, *(void *)(v6 + 8), (uint64_t)(*(void *)(v6 + 8) - *(void *)v6) >> 4);
      uint64_t v4 = v11 + 3;
      v11 += 3;
      v6 += 24;
    }
    while (v6 != a3);
  }
  LOBYTE(v9) = 1;
  sub_100DC2568((uint64_t)v8);
  return v4;
}

void sub_100DC2AAC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

uint64_t sub_100DC2AC0(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)a2 = 0;
  *((void *)a2 + 1) = 0;
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 8);
  *(_OWORD *)a1 = v4;
  if (v5) {
    sub_10004D2C8(v5);
  }
  long long v6 = a2[1];
  *((void *)a2 + 2) = 0;
  *((void *)a2 + 3) = 0;
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 24);
  *(_OWORD *)(a1 + 16) = v6;
  if (v7) {
    sub_10004D2C8(v7);
  }
  return a1;
}

char *sub_100DC2B18(void *a1, uint64_t a2)
{
  uint64_t result = (char *)operator new(0x30uLL);
  uint64_t v5 = result;
  *((void *)result + 1) = 0;
  *((void *)result + 2) = 0;
  *(void *)uint64_t result = off_101A5A918;
  long long v6 = result + 24;
  if (*(char *)(a2 + 23) < 0)
  {
    uint64_t result = (char *)sub_10004FC84(result + 24, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *long long v6 = *(_OWORD *)a2;
    *((void *)result + 5) = *(void *)(a2 + 16);
  }
  *a1 = v6;
  a1[1] = v5;
  return result;
}

void sub_100DC2BA0(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100DC2BB8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A918;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DC2BD8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A918;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DC2C2C(uint64_t a1)
{
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
}

void sub_100DC2C44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A968;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DC2C64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A968;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DC2CB8(void *a1)
{
  uint64_t v2 = a1[5];
  if (v2)
  {
    uint64_t v3 = a1[6];
    long long v4 = (void *)a1[5];
    if (v3 != v2)
    {
      do
      {
        v3 -= 32;
        sub_10000ACD0(v3);
      }
      while (v3 != v2);
      long long v4 = (void *)a1[5];
    }
    a1[6] = v2;
    operator delete(v4);
  }
  uint64_t v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_100DC2D44(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A9B8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DC2D64(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5A9B8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DC2DB8(uint64_t a1)
{
}

uint64_t sub_100DC2DC4(const void *a1)
{
  if (!a1) {
    return 11;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyCDMA1x)) {
    return 3;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyCDMAEVDO)) {
    return 4;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyCDMAHybrid)) {
    return 5;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyGSM)) {
    return 0;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyUTRAN)) {
    return 2;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyLTE)) {
    return 7;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyUTRAN2)) {
    return 9;
  }
  if (CFEqual(a1, kCTRegistrationRadioAccessTechnologyNR)) {
    return 10;
  }
  return 11;
}

uint64_t sub_100DC2EF0(int a1)
{
  uint64_t v1 = &kCTWirelessTechnologyUnknown;
  if (a1 <= 39)
  {
    if (a1 == 4)
    {
      uint64_t v1 = &kCTWirelessTechnologyUMTS;
      return *(void *)v1;
    }
    if (a1 == 8)
    {
      uint64_t v1 = &kCTWirelessTechnologyCDMA2000;
      return *(void *)v1;
    }
    if (a1 != 32) {
      return *(void *)v1;
    }
    goto LABEL_11;
  }
  if (a1 == 40 || a1 == 64)
  {
LABEL_11:
    uint64_t v1 = &kCTWirelessTechnologyLTE;
    return *(void *)v1;
  }
  if (a1 == 128) {
    uint64_t v1 = &kCTWirelessTechnologyNR;
  }
  return *(void *)v1;
}

uint64_t sub_100DC2F68(const void *a1)
{
  if (a1)
  {
    if (CFEqual(a1, kCTRegistrationRATSelection0))
    {
      return 1;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection1))
    {
      return 2;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection2))
    {
      return 3;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection3))
    {
      return 4;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection4))
    {
      return 8;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection5))
    {
      return 12;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection6))
    {
      return 16;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection8))
    {
      return 32;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection11))
    {
      return -48;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection9))
    {
      return 80;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection10))
    {
      return -112;
    }
    else if (CFEqual(a1, kCTRegistrationRATSelection7))
    {
      return -1;
    }
    else
    {
      return 0;
    }
  }
  else
  {
    return 0;
  }
}

void sub_100DC3114(int a1, int a2, void *a3, void *a4)
{
  uint64_t v5 = kCTRegistrationRATSelectionUnknown;
  *a3 = kCTRegistrationRATSelectionUnknown;
  *a4 = v5;
  if (a1 <= 30)
  {
    switch(a1)
    {
      case 1:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection0;
        goto LABEL_18;
      case 2:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection1;
        goto LABEL_18;
      case 3:
        *a3 = kCTRegistrationRATSelection2;
        if (a2 == 2)
        {
          uint64_t v9 = (uint64_t *)&kCTRegistrationRATSelection1;
        }
        else
        {
          if (a2 != 1) {
            return;
          }
          uint64_t v9 = (uint64_t *)&kCTRegistrationRATSelection0;
        }
        uint64_t v8 = *v9;
        break;
      case 4:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection3;
        goto LABEL_18;
      case 8:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection4;
        goto LABEL_18;
      case 12:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection5;
        goto LABEL_18;
      case 15:
      case 18:
      case 19:
        goto LABEL_17;
      case 16:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection6;
        goto LABEL_18;
      default:
        goto LABEL_34;
    }
    goto LABEL_19;
  }
  if (a1 > 143)
  {
    if (a1 > 207)
    {
      if (a1 != 208)
      {
        if (a1 != 211 && a1 != 255) {
          goto LABEL_34;
        }
        goto LABEL_17;
      }
    }
    else
    {
      if (a1 == 144)
      {
LABEL_25:
        uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection10;
        goto LABEL_18;
      }
      if (a1 == 147) {
        goto LABEL_17;
      }
      if (a1 != 192) {
        goto LABEL_34;
      }
    }
    uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection11;
    goto LABEL_18;
  }
  uint64_t v6 = (a1 - 31);
  if (v6 > 0x31) {
    goto LABEL_24;
  }
  if (((1 << (a1 - 31)) & 0x100100001) != 0)
  {
LABEL_17:
    uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection7;
    goto LABEL_18;
  }
  if (((1 << (a1 - 31)) & 0x2000200000000) != 0)
  {
    uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection9;
LABEL_18:
    uint64_t v8 = *v7;
    *a3 = v8;
LABEL_19:
    *a4 = v8;
    return;
  }
  if (v6 == 1)
  {
    uint64_t v7 = (uint64_t *)&kCTRegistrationRATSelection8;
    goto LABEL_18;
  }
LABEL_24:
  if (a1 == 128) {
    goto LABEL_25;
  }
LABEL_34:
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR))
  {
    v10[0] = 67109120;
    v10[1] = a1;
    _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "Unable to convert RAT selection mask 0x%02x to string", (uint8_t *)v10, 8u);
  }
}

uint64_t *sub_100DC33A4(uint64_t a1)
{
  sub_100C62700(a1, "kBatteryMeasurementModelGetProperty", (unint64_t)sub_100DC3414, 3u);

  return sub_100C62630(a1, "kBatteryMeasurementModelSetProperty", (unint64_t)sub_100DC37EC, 3u);
}

void sub_100DC3414(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, unint64_t *a5)
{
  if (xpc_dictionary_get_value(*a4, "kBatteryMeasurementModelTemperature"))
  {
    uint64_t v36 = 0;
    unint64_t v33 = (unint64_t)a4;
    CFTypeID v34 = "kBatteryMeasurementModelTemperatureSensor";
    sub_100048BAC((uint64_t)&v33, &v35);
    uint64_t v9 = xpc::dyn_cast_or_default((xpc *)&v35, 0, v8);
    xpc_release(v35);
    xpc_object_t v31 = xpc_BOOL_create(0);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    unint64_t v33 = *a5;
    CFTypeID v34 = "kBatteryMeasurementModelValid";
    sub_100035E70((uint64_t)&v33, &v31, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v31);
    xpc_object_t v31 = 0;
    xpc_object_t v29 = xpc_int64_create(SHIDWORD(v36));
    if (!v29) {
      xpc_object_t v29 = xpc_null_create();
    }
    unint64_t v33 = *a5;
    CFTypeID v34 = "kBatteryMeasurementModelTemperatureFiltered";
    sub_100035E70((uint64_t)&v33, &v29, &v30);
    xpc_release(v30);
    xpc_object_t v30 = 0;
    xpc_release(v29);
    xpc_object_t v29 = 0;
    xpc_object_t v27 = xpc_int64_create((int)v36);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    unint64_t v33 = *a5;
    CFTypeID v34 = "kBatteryMeasurementModelTemperatureRaw";
    sub_100035E70((uint64_t)&v33, &v27, &v28);
    xpc_release(v28);
    xpc_object_t v28 = 0;
    xpc_release(v27);
    xpc_object_t v27 = 0;
    ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *a1);
    long long v12 = ServiceMap;
    if ((v13 & 0x8000000000000000) != 0)
    {
      int v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v15 = 5381;
      do
      {
        unint64_t v13 = v15;
        unsigned int v16 = *v14++;
        uint64_t v15 = (33 * v15) ^ v16;
      }
      while (v16);
    }
    std::mutex::lock(ServiceMap);
    unint64_t v33 = v13;
    long long v17 = sub_10004D37C(&v12[1].__m_.__sig, &v33);
    if (v17)
    {
      uint64_t v19 = v17[3];
      uint64_t v18 = (std::__shared_weak_count *)v17[4];
      if (v18)
      {
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v12);
        atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v18);
        char v20 = 0;
        if (!v19)
        {
LABEL_25:
          if ((v20 & 1) == 0) {
            sub_10004D2C8(v18);
          }
          return;
        }
LABEL_17:
        if ((*(unsigned int (**)(uint64_t, uint64_t, char *, uint64_t *))(*(void *)v19 + 16))(v19, v9, (char *)&v36 + 4, &v36))
        {
          xpc_object_t v25 = xpc_BOOL_create(1);
          if (!v25) {
            xpc_object_t v25 = xpc_null_create();
          }
          unint64_t v33 = *a5;
          CFTypeID v34 = "kBatteryMeasurementModelValid";
          sub_100035E70((uint64_t)&v33, &v25, &v26);
          xpc_release(v26);
          xpc_object_t v26 = 0;
          xpc_release(v25);
          xpc_object_t v25 = 0;
          xpc_object_t v23 = xpc_int64_create(SHIDWORD(v36));
          if (!v23) {
            xpc_object_t v23 = xpc_null_create();
          }
          unint64_t v33 = *a5;
          CFTypeID v34 = "kBatteryMeasurementModelTemperatureFiltered";
          sub_100035E70((uint64_t)&v33, &v23, &v24);
          xpc_release(v24);
          xpc_object_t v24 = 0;
          xpc_release(v23);
          xpc_object_t v23 = 0;
          xpc_object_t v21 = xpc_int64_create((int)v36);
          if (!v21) {
            xpc_object_t v21 = xpc_null_create();
          }
          unint64_t v33 = *a5;
          CFTypeID v34 = "kBatteryMeasurementModelTemperatureRaw";
          sub_100035E70((uint64_t)&v33, &v21, &v22);
          xpc_release(v22);
          xpc_object_t v22 = 0;
          xpc_release(v21);
          xpc_object_t v21 = 0;
        }
        goto LABEL_25;
      }
    }
    else
    {
      uint64_t v19 = 0;
    }
    std::mutex::unlock(v12);
    uint64_t v18 = 0;
    char v20 = 1;
    if (!v19) {
      goto LABEL_25;
    }
    goto LABEL_17;
  }
}

void sub_100DC3794(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC37EC(Registry **a1@<X0>, xpc_object_t *a2@<X3>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v18 = v6;
  char v10 = sub_10004D37C(&v5[1].__m_.__sig, &v18);
  if (v10)
  {
    uint64_t v12 = v10[3];
    unsigned __int8 v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  unsigned __int8 v11 = 0;
  char v13 = 1;
  if (!v12) {
    goto LABEL_14;
  }
LABEL_10:
  if (xpc_dictionary_get_value(*a2, "kBatteryMeasurementModelMaxTemperature"))
  {
    unint64_t v18 = (unint64_t)a2;
    uint64_t v19 = "kBatteryMeasurementModelTemperatureMax";
    sub_100048BAC((uint64_t)&v18, &object);
    uint64_t v15 = xpc::dyn_cast_or_default((xpc *)&object, 0, v14);
    xpc_release(object);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 24))(v12, v15);
  }
  if (xpc_dictionary_get_value(*a2, "kBatteryMeasurementModelTemperatureUpdate"))
  {
    unint64_t v18 = (unint64_t)a2;
    uint64_t v19 = "kBatteryMeasurementModelTemperatureUpdateSeconds";
    sub_100048BAC((uint64_t)&v18, &object);
    uint64_t v17 = xpc::dyn_cast_or_default((xpc *)&object, 0, v16);
    xpc_release(object);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 32))(v12, v17);
  }
LABEL_14:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_100DC39B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DC3A10()
{
  return sub_100C624B8((uint64_t)&unk_101B12BB0, (uint64_t)sub_100DC33A4);
}

void *sub_100DC3A2C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = MGCopyAnswer();
  return sub_10086FCF0(a1, (CFTypeRef *)&v3);
}

void NetworkPolicyDriverInterface::create(NetworkPolicyDriverInterface *this)
{
}

void sub_100DC3AB8()
{
}

uint64_t *sub_100DC3ADC(uint64_t a1)
{
  sub_100C62700(a1, "kSmsGetCellBroadcastSettingForAlertType", (unint64_t)sub_100DC3D68, 3u);
  sub_100C62700(a1, "kSmsSetCellBroadcastSettingForAlertType", (unint64_t)sub_100DC4160, 3u);
  sub_100C62700(a1, "kSmsCopyCellBroadcastAlertTypes", (unint64_t)sub_100DC4578, 3u);
  sub_100C62700(a1, "kSmsCopyCellBroadcastAlertTypesForAllSIMSlots", (unint64_t)sub_100DC47F4, 3u);
  sub_100C62700(a1, "kSmsSetCellBroadcastCustomSettingsForAlertType", (unint64_t)sub_100DC4CA4, 3u);
  sub_100C62700(a1, "kSmsGetCellBroadcastCustomSettingsForAlertType", (unint64_t)sub_100DC4F8C, 3u);
  sub_100C62700(a1, "kSmsGetCellBroadcastConfig", (unint64_t)sub_100DC52E0, 3u);
  sub_100C62700(a1, "kSmsCellBroadcastSelfTestRequest", (unint64_t)sub_100DC5580, 0xEu);
  sub_100C62700(a1, "kSmsEarlyGeofenceCommandRequest", (unint64_t)sub_100DC5648, 3u);
  sub_100C62700(a1, "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingRequest", (unint64_t)sub_100DC5710, 3u);
  sub_100C62700(a1, "kSetSMSTestingMode", (unint64_t)sub_100DC59F0, 0xEu);
  sub_100C62700(a1, "kInjectCellBroadcastMessage", (unint64_t)sub_100DC5B68, 0xEu);
  sub_100C62700(a1, "kInjectOOSGeofence", (unint64_t)sub_100DC60C8, 0xEu);
  sub_100C62700(a1, "kGetVoicemailCount", (unint64_t)sub_100DC6454, 3u);
  sub_100C62700(a1, "kSendAppleSafetyAlert", (unint64_t)sub_100DC693C, 0x1Eu);
  sub_100C62700(a1, "kGetAutoReadOutSetting", (unint64_t)sub_100DC6D9C, 3u);

  return sub_100C62700(a1, "kSetAutoReadOutSetting", (unint64_t)sub_100DC703C, 0x12u);
}

void sub_100DC3D68(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v8 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Request to GET the CB setting", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *a1);
  unsigned __int8 v11 = ServiceMap;
  if (v12 < 0)
  {
    char v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  int v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    uint64_t v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  uint64_t v17 = 0;
  char v19 = 1;
  if (!v18)
  {
LABEL_9:
    xpc_object_t v38 = xpc_BOOL_create(0);
    if (!v38) {
      xpc_object_t v38 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    unint64_t v33 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v38, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v38);
    xpc_object_t v38 = 0;
    if (v19) {
      return;
    }
LABEL_37:
    sub_10004D2C8(v17);
    return;
  }
LABEL_15:
  int v37 = 0;
  *(void *)long long buf = a4;
  unint64_t v33 = "kSmsCellBroadcastAlertTypes";
  sub_100048BAC((uint64_t)buf, &v35);
  xpc::bridge((uint64_t *)&v36, (xpc *)&v35, v20);
  sub_100056248(&v37, &v36);
  sub_1000577C4(&v36);
  xpc_release(v35);
  LOBYTE(v36) = 0;
  subscriber::makeSimSlotRange();
  xpc_object_t v22 = *(const char **)buf;
  xpc_object_t v21 = (unsigned int *)v33;
  if (*(const char **)buf == v33) {
    goto LABEL_31;
  }
  xpc_object_t v23 = v34;
  while ((v23(*(unsigned int *)v22) & 1) == 0)
  {
    v22 += 4;
    if (v22 == (const char *)v21)
    {
      xpc_object_t v22 = (const char *)v21;
      break;
    }
  }
  xpc_object_t v24 = (unsigned int *)v33;
  if (v22 == v33)
  {
LABEL_31:
    BOOL v26 = 0;
    LOBYTE(v25) = 0;
  }
  else
  {
    int v25 = 0;
    BOOL v26 = 0;
    do
    {
      v25 |= (*(uint64_t (**)(uint64_t, void, const void *, const void **))(*(void *)v18 + 192))(v18, *(unsigned int *)v22, v37, &v36);
      if (v25) {
        BOOL v26 = (v36 | v26) != 0;
      }
      xpc_object_t v27 = (unsigned int *)(v22 + 4);
      xpc_object_t v22 = (const char *)v21;
      if (v27 != v21)
      {
        xpc_object_t v22 = (const char *)v27;
        while ((v23(*(unsigned int *)v22) & 1) == 0)
        {
          v22 += 4;
          if (v22 == (const char *)v21)
          {
            xpc_object_t v22 = (const char *)v21;
            break;
          }
        }
      }
    }
    while (v22 != (const char *)v24);
  }
  xpc_object_t v30 = xpc_BOOL_create(v26);
  if (!v30) {
    xpc_object_t v30 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  unint64_t v33 = "kSmsCellBroadcastEnabled";
  sub_100035E70((uint64_t)buf, &v30, &v31);
  xpc_release(v31);
  xpc_object_t v31 = 0;
  xpc_release(v30);
  xpc_object_t v30 = 0;
  xpc_object_t v28 = xpc_BOOL_create(v25 & 1);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  unint64_t v33 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v28, &v29);
  xpc_release(v29);
  xpc_object_t v29 = 0;
  xpc_release(v28);
  xpc_object_t v28 = 0;
  sub_1000558F4(&v37);
  if ((v19 & 1) == 0) {
    goto LABEL_37;
  }
}

void sub_100DC4100(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object, char a17, int a18, const void *a19)
{
  sub_1000558F4(&a19);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(a1);
}

void sub_100DC4160(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t object = xpc_BOOL_create(0);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  int v37 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &object, &v43);
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  *(void *)long long buf = a4;
  int v37 = "kSmsCellBroadcastEnabled";
  sub_100048BAC((uint64_t)buf, &v41);
  uint64_t v9 = xpc::dyn_cast_or_default((xpc *)&v41, 0, v8);
  xpc_release(v41);
  sub_100DC72BC();
  char v10 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Request to SET the CB setting", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v11, *a1);
  char v13 = ServiceMap;
  if (v14 < 0)
  {
    unsigned int v15 = (unsigned __int8 *)(v14 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v16 = 5381;
    do
    {
      uint64_t v14 = v16;
      unsigned int v17 = *v15++;
      uint64_t v16 = (33 * v16) ^ v17;
    }
    while (v17);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v14;
  uint64_t v18 = sub_10004D37C(&v13[1].__m_.__sig, (unint64_t *)buf);
  if (v18)
  {
    uint64_t v20 = v18[3];
    char v19 = (std::__shared_weak_count *)v18[4];
    if (v19)
    {
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v13);
      atomic_fetch_add_explicit(&v19->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v19);
      char v21 = 0;
      if (!v20) {
        goto LABEL_32;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v20 = 0;
  }
  std::mutex::unlock(v13);
  char v19 = 0;
  char v21 = 1;
  if (!v20) {
    goto LABEL_32;
  }
LABEL_14:
  char v31 = v21;
  xpc_object_t v41 = 0;
  *(void *)long long buf = a4;
  int v37 = "kSmsCellBroadcastAlertTypes";
  sub_100048BAC((uint64_t)buf, &v39);
  xpc::bridge((uint64_t *)&v40, (xpc *)&v39, v22);
  sub_100056248(&v41, &v40);
  sub_1000577C4(&v40);
  xpc_release(v39);
  subscriber::makeSimSlotRange();
  int v25 = *(const char **)buf;
  xpc_object_t v24 = (unsigned int *)v37;
  if (*(const char **)buf == v37) {
    goto LABEL_28;
  }
  BOOL v26 = v38;
  while ((v26(*(unsigned int *)v25) & 1) == 0)
  {
    v25 += 4;
    if (v25 == (const char *)v24)
    {
      int v25 = (const char *)v24;
      break;
    }
  }
  xpc_object_t v27 = (unsigned int *)v37;
  if (v25 == v37)
  {
LABEL_28:
    char v28 = 0;
  }
  else
  {
    char v28 = 0;
    do
    {
      char v29 = (*(uint64_t (**)(uint64_t, void, xpc_object_t, uint64_t))(*(void *)v20 + 200))(v20, *(unsigned int *)v25, v41, v9);
      xpc_object_t v30 = (unsigned int *)(v25 + 4);
      int v25 = (const char *)v24;
      if (v30 != v24)
      {
        int v25 = (const char *)v30;
        while ((v26(*(unsigned int *)v25) & 1) == 0)
        {
          v25 += 4;
          if (v25 == (const char *)v24)
          {
            int v25 = (const char *)v24;
            break;
          }
        }
      }
      v28 |= v29;
    }
    while (v25 != (const char *)v27);
  }
  ctu::cf_to_xpc((uint64_t *)&v34, (ctu *)v41, v23);
  *(void *)long long buf = *a5;
  int v37 = "kSmsCellBroadcastAlertTypes";
  sub_100035E70((uint64_t)buf, &v34, &v35);
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_object_t v32 = xpc_BOOL_create(v28 & 1);
  if (!v32) {
    xpc_object_t v32 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  int v37 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v32, &v33);
  xpc_release(v33);
  xpc_object_t v33 = 0;
  xpc_release(v32);
  xpc_object_t v32 = 0;
  sub_1000558F4((const void **)&v41);
  char v21 = v31;
LABEL_32:
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v19);
  }
}

void sub_100DC44EC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, xpc_object_t object, char a20,xpc_object_t a21)
{
  sub_1000558F4((const void **)&a21);
  if ((a11 & 1) == 0) {
    sub_10004D2C8(v21);
  }
  _Unwind_Resume(a1);
}

void sub_100DC4578(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v7 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Request to get all cell broadcast types", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *a1);
  char v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  unsigned int v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (!v15)
  {
    std::mutex::unlock(v10);
    return;
  }
  uint64_t v17 = v15[3];
  uint64_t v16 = (std::__shared_weak_count *)v15[4];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v10);
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v16);
    if (!v17)
    {
LABEL_21:
      sub_10004D2C8(v16);
      return;
    }
  }
  else
  {
    std::mutex::unlock(v10);
    if (!v17) {
      return;
    }
  }
  char v28 = 0;
  (*(void (**)(ctu **__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 208))(&v27, v17, 1);
  *(void *)long long buf = v28;
  uint64_t v18 = v27;
  xpc_object_t v27 = 0;
  char v28 = v18;
  sub_100057D78((const void **)buf);
  sub_100057D78((const void **)&v27);
  if (v28) {
    uint64_t v20 = sub_100080778;
  }
  else {
    uint64_t v20 = 0;
  }
  if (v20)
  {
    ctu::cf_to_xpc((uint64_t *)&v25, v28, v19);
    *(void *)long long buf = *a5;
    xpc_object_t v24 = "kSmsCellBroadcastAlertTypes";
    sub_100035E70((uint64_t)buf, &v25, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v25);
    xpc_object_t v25 = 0;
  }
  else
  {
    xpc_object_t v21 = xpc_string_create("Failed to create a dictionary");
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v24 = "kSmsCellBroadcastAlertTypes";
    sub_100035E70((uint64_t)buf, &v21, &v22);
    xpc_release(v22);
    xpc_object_t v22 = 0;
    xpc_release(v21);
    xpc_object_t v21 = 0;
  }
  sub_100057D78((const void **)&v28);
  if (v16) {
    goto LABEL_21;
  }
}

void sub_100DC47CC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100057D78((const void **)va);
  if (v8) {
    sub_10004D2C8(v8);
  }
  _Unwind_Resume(a1);
}

void sub_100DC47F4(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v7 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Request to get all cell broadcast types", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *a1);
  char v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  unsigned int v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (!v15)
  {
    std::mutex::unlock(v10);
    return;
  }
  uint64_t v17 = v15[3];
  uint64_t v16 = (std::__shared_weak_count *)v15[4];
  if (v16)
  {
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v10);
    atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v16);
    if (!v17)
    {
LABEL_39:
      sub_10004D2C8(v16);
      return;
    }
  }
  else
  {
    std::mutex::unlock(v10);
    if (!v17) {
      return;
    }
  }
  unsigned int v18 = subscriber::expectedSimCount();
  CFMutableArrayRef theArray = 0;
  CFMutableArrayRef theArray = CFArrayCreateMutable(kCFAllocatorDefault, v18, &kCFTypeArrayCallBacks);
  subscriber::makeSimSlotRange();
  uint64_t v20 = *(const char **)buf;
  char v19 = (unsigned int *)v39;
  if (*(const char **)buf != v39)
  {
    xpc_object_t v21 = v40;
    while ((v21(*(unsigned int *)v20) & 1) == 0)
    {
      v20 += 4;
      if (v20 == (const char *)v19)
      {
        uint64_t v20 = (const char *)v19;
        break;
      }
    }
    xpc_object_t v22 = (unsigned int *)v39;
    if (v20 != v39)
    {
      do
      {
        uint64_t v23 = *(unsigned int *)v20;
        value = 0;
        (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v17 + 208))(&v36, v17, v23);
        *(void *)CFTypeID v42 = value;
        xpc_object_t v24 = v36;
        uint64_t v36 = 0;
        value = v24;
        sub_100057D78((const void **)v42);
        sub_100057D78((const void **)&v36);
        if (value) {
          xpc_object_t v25 = sub_100080778;
        }
        else {
          xpc_object_t v25 = 0;
        }
        if (v25)
        {
          CFArrayAppendValue(theArray, value);
        }
        else
        {
          sub_100DC72BC();
          BOOL v26 = qword_101B12BC0;
          if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
          {
            uint64_t v28 = subscriber::asString();
            *(_DWORD *)CFTypeID v42 = 136315138;
            *(void *)&v42[4] = v28;
            _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Failed to get alert type dictionary for slot: %s", v42, 0xCu);
          }
        }
        sub_100057D78((const void **)&value);
        xpc_object_t v27 = (unsigned int *)(v20 + 4);
        uint64_t v20 = (const char *)v19;
        if (v27 != v19)
        {
          uint64_t v20 = (const char *)v27;
          while ((v21(*(unsigned int *)v20) & 1) == 0)
          {
            v20 += 4;
            if (v20 == (const char *)v19)
            {
              uint64_t v20 = (const char *)v19;
              break;
            }
          }
        }
      }
      while (v20 != (const char *)v22);
    }
  }
  if (CFArrayGetCount(theArray) < 1)
  {
    sub_100DC72BC();
    xpc_object_t v30 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_ERROR, "Failed to get alert type dictionaries.", buf, 2u);
    }
    *(void *)long long buf = *a5;
    xpc_object_t v39 = "kSmsCellBroadcastAlertTypesForAllSIMSlots";
    sub_10021ACC8((uint64_t)buf, &v33);
    xpc_release(v33);
    xpc_object_t v33 = 0;
    xpc_object_t v31 = xpc_BOOL_create(0);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v39 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v31, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_release(v31);
    xpc_object_t v31 = 0;
  }
  else
  {
    ctu::cf_to_xpc((uint64_t *)&v34, theArray, v29);
    *(void *)long long buf = *a5;
    xpc_object_t v39 = "kSmsCellBroadcastAlertTypesForAllSIMSlots";
    sub_100035E70((uint64_t)buf, &v34, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v34);
    xpc_object_t v34 = 0;
  }
  sub_1000440D4((const void **)&theArray);
  if (v16) {
    goto LABEL_39;
  }
}

void sub_100DC4C14(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC4CA4(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  BOOL v8 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Request to set custom alert setting", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *a1);
  uint64_t v11 = ServiceMap;
  if (v12 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    uint64_t v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  uint64_t v17 = 0;
  char v19 = 1;
  if (!v18)
  {
LABEL_9:
    xpc_object_t v22 = xpc_BOOL_create(0);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    uint64_t v28 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v22, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v22);
    xpc_object_t v22 = 0;
    if (v19) {
      return;
    }
LABEL_20:
    sub_10004D2C8(v17);
    return;
  }
LABEL_15:
  xpc_object_t v31 = 0;
  *(void *)long long buf = a4;
  uint64_t v28 = "kSmsSetCellBroadcastCustomSettings";
  sub_100048BAC((uint64_t)buf, &v29);
  xpc::bridge((uint64_t *)&v30, (xpc *)&v29, v20);
  sub_10004EFE4(&v31, &v30);
  sub_1000577C4(&v30);
  xpc_release(v29);
  xpc_object_t v24 = v31;
  if (v31) {
    CFRetain(v31);
  }
  char v21 = (*(uint64_t (**)(uint64_t, const void **))(*(void *)v18 + 72))(v18, &v24);
  xpc_object_t v25 = xpc_BOOL_create(v21);
  if (!v25) {
    xpc_object_t v25 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  uint64_t v28 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v25, &v26);
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_release(v25);
  xpc_object_t v25 = 0;
  sub_100057D78(&v24);
  sub_100057D78(&v31);
  if ((v19 & 1) == 0) {
    goto LABEL_20;
  }
}

void sub_100DC4F30(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, const void *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, xpc_object_t object, char a19)
{
  sub_100057D78(&a12);
  sub_100057D78((const void **)(v21 - 72));
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(a1);
}

void sub_100DC4F8C(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  BOOL v8 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Request to get custom alert setting", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *a1);
  uint64_t v11 = ServiceMap;
  if (v12 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    uint64_t v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_9;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  uint64_t v17 = 0;
  char v19 = 1;
  if (!v18)
  {
LABEL_9:
    xpc_object_t v22 = xpc_BOOL_create(0);
    if (!v22) {
      xpc_object_t v22 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v30 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v22, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v22);
    xpc_object_t v22 = 0;
    if (v19) {
      return;
    }
LABEL_20:
    sub_10004D2C8(v17);
    return;
  }
LABEL_15:
  xpc_object_t v33 = 0;
  *(void *)long long buf = a4;
  xpc_object_t v30 = "kSmsGetCellBroadcastCustomSettings";
  sub_100048BAC((uint64_t)buf, &v31);
  xpc::bridge((uint64_t *)&v32, (xpc *)&v31, v20);
  sub_10004EFE4(&v33, (CFTypeRef *)&v32);
  sub_1000577C4((const void **)&v32);
  xpc_release(v31);
  xpc_object_t v32 = 0;
  uint64_t v28 = v33;
  if (v33) {
    CFRetain(v33);
  }
  (*(void (**)(ctu **__return_ptr, uint64_t, const void **))(*(void *)v18 + 80))(&v32, v18, &v28);
  sub_100057D78(&v28);
  ctu::cf_to_xpc((uint64_t *)&v26, v32, v21);
  *(void *)long long buf = *a5;
  xpc_object_t v30 = "kSmsCellBroadcastCustomSettingsResponse";
  sub_100035E70((uint64_t)buf, &v26, &v27);
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_object_t v24 = xpc_BOOL_create(1);
  if (!v24) {
    xpc_object_t v24 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v30 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v24, &v25);
  xpc_release(v25);
  xpc_object_t v25 = 0;
  xpc_release(v24);
  xpc_object_t v24 = 0;
  sub_100057D78((const void **)&v32);
  sub_100057D78(&v33);
  if ((v19 & 1) == 0) {
    goto LABEL_20;
  }
}

void sub_100DC5278(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object)
{
  sub_100057D78((const void **)(v22 - 80));
  sub_100057D78((const void **)(v22 - 72));
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(a1);
}

void sub_100DC52E0(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v7 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Request to get CellBroadcast Configuration", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *a1);
  char v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  unsigned int v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_15;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  char v18 = 1;
  if (!v17) {
    goto LABEL_15;
  }
LABEL_12:
  uint64_t v28 = 0;
  (*(void (**)(ctu **__return_ptr, uint64_t))(*(void *)v17 + 96))(&v28, v17);
  ctu::cf_to_xpc((uint64_t *)&v26, v28, v19);
  *(void *)long long buf = *a5;
  xpc_object_t v25 = "kSmsCellBroadcastConfigContent";
  sub_100035E70((uint64_t)buf, &v26, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  xpc_object_t v22 = xpc_BOOL_create(1);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v25 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v22, &v23);
  xpc_release(v23);
  xpc_object_t v23 = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  sub_100057D78((const void **)&v28);
LABEL_15:
  if ((v18 & 1) == 0) {
    sub_10004D2C8(v16);
  }
  if (!v17)
  {
    xpc_object_t v20 = xpc_BOOL_create(0);
    if (!v20) {
      xpc_object_t v20 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v25 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v20, &v21);
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_release(v20);
  }
}

void sub_100DC5550(_Unwind_Exception *a1)
{
  sub_100057D78((const void **)(v3 - 56));
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100DC5580(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  unint64_t v6 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Self test command not supported", (uint8_t *)v7, 2u);
  }
  xpc_object_t v8 = xpc_BOOL_create(0);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = *a5;
  v7[1] = "kDidSucceed";
  sub_100035E70((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_100DC5648(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  unint64_t v6 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(v7[0]) = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Early Geofence Test not supported", (uint8_t *)v7, 2u);
  }
  xpc_object_t v8 = xpc_BOOL_create(0);
  if (!v8) {
    xpc_object_t v8 = xpc_null_create();
  }
  v7[0] = *a5;
  v7[1] = "kDidSucceed";
  sub_100035E70((uint64_t)v7, &v8, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v8);
}

void sub_100DC5710(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v7 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Request to get override accessibility vibration settings", buf, 2u);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v8, *a1);
  char v10 = ServiceMap;
  if (v11 < 0)
  {
    uint64_t v12 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v13 = 5381;
    do
    {
      uint64_t v11 = v13;
      unsigned int v14 = *v12++;
      uint64_t v13 = (33 * v13) ^ v14;
    }
    while (v14);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v11;
  unsigned int v15 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (v15)
  {
    uint64_t v17 = v15[3];
    uint64_t v16 = (std::__shared_weak_count *)v15[4];
    if (v16)
    {
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v10);
      atomic_fetch_add_explicit(&v16->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v16);
      char v18 = 0;
      if (!v17) {
        goto LABEL_9;
      }
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v17 = 0;
  }
  std::mutex::unlock(v10);
  uint64_t v16 = 0;
  char v18 = 1;
  if (!v17)
  {
LABEL_9:
    sub_100DC72BC();
    char v19 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_ERROR, "Failed to get CMAS interface", buf, 2u);
    }
    xpc_object_t v21 = xpc_BOOL_create(0);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v26 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v21, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v21);
    xpc_object_t v21 = 0;
    if (v18) {
      return;
    }
LABEL_22:
    sub_10004D2C8(v16);
    return;
  }
LABEL_17:
  char v20 = (*(uint64_t (**)(uint64_t))(*(void *)v17 + 88))(v17);
  xpc_object_t v27 = xpc_BOOL_create(v20);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v26 = "kSmsGetCellBroadcastOverrideAccessibilityVibrationSettingResponse";
  sub_100035E70((uint64_t)buf, &v27, &v28);
  xpc_release(v28);
  xpc_object_t v28 = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  xpc_object_t v23 = xpc_BOOL_create(1);
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v26 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
  if ((v18 & 1) == 0) {
    goto LABEL_22;
  }
}

void sub_100DC59B8(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC59F0(Registry **a1@<X0>, unint64_t a2@<X3>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  uint64_t v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v16[0] = v6;
  char v10 = sub_10004D37C(&v5[1].__m_.__sig, v16);
  if (!v10)
  {
    uint64_t v12 = 0;
LABEL_9:
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    char v13 = 1;
    if (!v12) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (!v11) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v5);
  atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  char v13 = 0;
  if (v12)
  {
LABEL_10:
    v16[0] = a2;
    v16[1] = (unint64_t)"kSetSMSTestingMode";
    sub_100048BAC((uint64_t)v16, &object);
    uint64_t v15 = xpc::dyn_cast_or_default((xpc *)&object, 0, v14);
    xpc_release(object);
    (*(void (**)(uint64_t, uint64_t))(*(void *)v12 + 216))(v12, v15);
  }
LABEL_11:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_100DC5B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC5B68(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, void *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    char v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    BOOL v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_7;
      }
LABEL_13:
      long long v35 = 0uLL;
      uint64_t v36 = 0;
      __p[0] = a4;
      __p[1] = "kInjectCellBroadcastMessage";
      sub_100048BAC((uint64_t)__p, object);
      long long buf = 0uLL;
      uint64_t v40 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v40) < 0) {
        operator delete((void *)buf);
      }
      xpc_release(object[0]);
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v34 = 0;
      sub_100058DB0(__p, "");
      if (xpc_dictionary_get_value(*a4, "kInjectWacString"))
      {
        sub_100DC72BC();
        uint64_t v17 = qword_101B12BC0;
        if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
        {
          char v18 = &v35;
          if (v36 < 0) {
            char v18 = (long long *)v35;
          }
          LODWORD(buf) = 136446210;
          *(void *)((char *)&buf + 4) = v18;
          _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Injecting WEA: %{public}s", (uint8_t *)&buf, 0xCu);
        }
        v29[0] = a4;
        v29[1] = "kInjectWacString";
        sub_100048BAC((uint64_t)v29, &v30);
        long long buf = 0uLL;
        uint64_t v40 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v40) < 0) {
          operator delete((void *)buf);
        }
        if (SHIBYTE(v34) < 0) {
          operator delete(__p[0]);
        }
        *(_OWORD *)std::string __p = *(_OWORD *)object;
        uint64_t v34 = v32;
        HIBYTE(v32) = 0;
        LOBYTE(object[0]) = 0;
        xpc_release(v30);
        char v19 = (void *)HIBYTE(v34);
        if (v34 < 0) {
          char v19 = __p[1];
        }
        if (v19)
        {
          sub_100DC72BC();
          char v20 = qword_101B12BC0;
          if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
          {
            xpc_object_t v21 = __p;
            if (v34 < 0) {
              xpc_object_t v21 = (void **)__p[0];
            }
            LODWORD(buf) = 136446210;
            *(void *)((char *)&buf + 4) = v21;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I           WAC: %{public}s", (uint8_t *)&buf, 0xCu);
          }
        }
      }
      if (SHIBYTE(v36) < 0)
      {
        sub_10004FC84(__dst, (void *)v35, *((unint64_t *)&v35 + 1));
      }
      else
      {
        *(_OWORD *)long long __dst = v35;
        uint64_t v26 = v36;
      }
      if (SHIBYTE(v34) < 0)
      {
        sub_10004FC84(v23, __p[0], (unint64_t)__p[1]);
      }
      else
      {
        *(_OWORD *)xpc_object_t v23 = *(_OWORD *)__p;
        uint64_t v24 = v34;
      }
      char v22 = (*(uint64_t (**)(uint64_t, void **, void **))(*(void *)v15 + 224))(v15, __dst, v23);
      xpc_object_t v27 = xpc_BOOL_create(v22);
      if (!v27) {
        xpc_object_t v27 = xpc_null_create();
      }
      *(void *)&long long buf = *a5;
      *((void *)&buf + 1) = "kInjectCellBroadcastMessageResult";
      sub_100035E70((uint64_t)&buf, &v27, &v28);
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      if (SHIBYTE(v24) < 0) {
        operator delete(v23[0]);
      }
      if (SHIBYTE(v26) < 0) {
        operator delete(__dst[0]);
      }
      if (SHIBYTE(v34) < 0) {
        operator delete(__p[0]);
      }
      if (SHIBYTE(v36) < 0)
      {
        operator delete((void *)v35);
        if (v16) {
          return;
        }
      }
      else if (v16)
      {
        return;
      }
      goto LABEL_47;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  BOOL v14 = 0;
  char v16 = 1;
  if (v15) {
    goto LABEL_13;
  }
LABEL_7:
  xpc_object_t v37 = xpc_BOOL_create(0);
  if (!v37) {
    xpc_object_t v37 = xpc_null_create();
  }
  *(void *)&long long buf = *a5;
  *((void *)&buf + 1) = "kInjectCellBroadcastMessageResult";
  sub_100035E70((uint64_t)&buf, &v37, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(v37);
  xpc_object_t v37 = 0;
  if ((v16 & 1) == 0) {
LABEL_47:
  }
    sub_10004D2C8(v14);
}

void sub_100DC5FBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,xpc_object_t object,xpc_object_t a28,uint64_t a29,uint64_t a30,void *a31,uint64_t a32,int a33,__int16 a34,char a35,char a36,void *a37,uint64_t a38,int a39,__int16 a40,char a41,char a42)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100DC60C8(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    char v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)&long long buf = v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    BOOL v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_7;
      }
LABEL_15:
      __p[0] = 0;
      __p[1] = 0;
      uint64_t v26 = 0;
      v23[0] = a4;
      v23[1] = "kInjectOOSGeofence";
      sub_100048BAC((uint64_t)v23, &v24);
      long long buf = 0uLL;
      uint64_t v30 = 0;
      xpc::dyn_cast_or_default();
      if (SHIBYTE(v30) < 0) {
        operator delete((void *)buf);
      }
      xpc_release(v24);
      sub_100DC72BC();
      char v18 = qword_101B12BC0;
      if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
      {
        char v19 = __p;
        if (v26 < 0) {
          char v19 = (void **)__p[0];
        }
        LODWORD(buf) = 136446210;
        *(void *)((char *)&buf + 4) = v19;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Injecting OOS Geofence: %{public}s", (uint8_t *)&buf, 0xCu);
      }
      char v20 = (*(uint64_t (**)(uint64_t, void **))(*(void *)v15 + 144))(v15, __p);
      xpc_object_t v21 = xpc_BOOL_create(v20);
      if (!v21) {
        xpc_object_t v21 = xpc_null_create();
      }
      *(void *)&long long buf = *a5;
      *((void *)&buf + 1) = "kInjectOOSGeofenceResult";
      sub_100035E70((uint64_t)&buf, &v21, &v22);
      xpc_release(v22);
      xpc_object_t v22 = 0;
      xpc_release(v21);
      xpc_object_t v21 = 0;
      if (SHIBYTE(v26) < 0)
      {
        operator delete(__p[0]);
        if (v16) {
          return;
        }
      }
      else if (v16)
      {
        return;
      }
      goto LABEL_25;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  BOOL v14 = 0;
  char v16 = 1;
  if (v15) {
    goto LABEL_15;
  }
LABEL_7:
  sub_100DC72BC();
  uint64_t v17 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    LOWORD(buf) = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I Could not get WeaGeofenceManagerInterface", (uint8_t *)&buf, 2u);
  }
  xpc_object_t v27 = xpc_BOOL_create(0);
  if (!v27) {
    xpc_object_t v27 = xpc_null_create();
  }
  *(void *)&long long buf = *a5;
  *((void *)&buf + 1) = "kInjectOOSGeofenceResult";
  sub_100035E70((uint64_t)&buf, &v27, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v27);
  xpc_object_t v27 = 0;
  if ((v16 & 1) == 0) {
LABEL_25:
  }
    sub_10004D2C8(v14);
}

void sub_100DC63C0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, xpc_object_t object, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20,uint64_t a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100DC6454(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    char v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  string[0] = (char *)v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)string);
  if (v13)
  {
    uint64_t v15 = v13[3];
    BOOL v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v17 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  BOOL v14 = 0;
  char v17 = 1;
LABEL_9:
  char v18 = (std::mutex *)Registry::getServiceMap(v16, *a1);
  char v19 = v18;
  if (v20 < 0)
  {
    xpc_object_t v21 = (unsigned __int8 *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = 5381;
    do
    {
      uint64_t v20 = v22;
      unsigned int v23 = *v21++;
      uint64_t v22 = (33 * v22) ^ v23;
    }
    while (v23);
  }
  std::mutex::lock(v18);
  string[0] = (char *)v20;
  xpc_object_t v24 = sub_10004D37C(&v19[1].__m_.__sig, (unint64_t *)string);
  if (v24)
  {
    uint64_t v26 = v24[3];
    xpc_object_t v25 = (std::__shared_weak_count *)v24[4];
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v19);
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v25);
      char v27 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  std::mutex::unlock(v19);
  xpc_object_t v25 = 0;
  char v27 = 1;
LABEL_17:
  int v28 = 0;
  if (!v26)
  {
    int v29 = 0;
    goto LABEL_34;
  }
  int v29 = 0;
  if (!v15) {
    goto LABEL_34;
  }
  memset(string, 0, sizeof(string));
  (*(void (**)(char **__return_ptr, uint64_t, uint64_t))(*(void *)v15 + 32))(string, v15, 1);
  if (SHIBYTE(string[2]) < 0)
  {
    if (string[1])
    {
      uint64_t v30 = string[0];
      goto LABEL_25;
    }
  }
  else if (HIBYTE(string[2]))
  {
    uint64_t v30 = (const char *)string;
LABEL_25:
    xpc_object_t v38 = xpc_string_create(v30);
    if (!v38) {
      xpc_object_t v38 = xpc_null_create();
    }
    v37[0] = *a5;
    v37[1] = "kVoicemailUrl";
    sub_100035E70((uint64_t)v37, &v38, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v38);
    xpc_object_t v38 = 0;
  }
  int v28 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 40))(v15, 1);
  if (v28 && (*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v15 + 48))(v15, 1)) {
    int v29 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 56))(v15, 1);
  }
  else {
    int v29 = 0;
  }
  if (SHIBYTE(string[2]) < 0) {
    operator delete(string[0]);
  }
LABEL_34:
  xpc_object_t v35 = xpc_BOOL_create(v28);
  if (!v35) {
    xpc_object_t v35 = xpc_null_create();
  }
  string[0] = *(char **)a5;
  string[1] = "kVoicemailAvailable";
  sub_100035E70((uint64_t)string, &v35, &v36);
  xpc_release(v36);
  xpc_object_t v36 = 0;
  xpc_release(v35);
  xpc_object_t v35 = 0;
  xpc_object_t v33 = xpc_int64_create(v29);
  if (!v33) {
    xpc_object_t v33 = xpc_null_create();
  }
  string[0] = *(char **)a5;
  string[1] = "kVoicemailCount";
  sub_100035E70((uint64_t)string, &v33, &v34);
  xpc_release(v34);
  xpc_object_t v34 = 0;
  xpc_release(v33);
  xpc_object_t v33 = 0;
  sub_100DC72BC();
  xpc_object_t v31 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = "false";
    if (v28) {
      uint64_t v32 = "true";
    }
    LODWORD(string[0]) = 136315394;
    *(char **)((char *)string + 4) = v32;
    WORD2(string[1]) = 1024;
    *(_DWORD *)((char *)&string[1] + 6) = v29;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I sGetVoicemailCount: available:%s, cnt:%d", (uint8_t *)string, 0x12u);
    if (v27)
    {
LABEL_40:
      if (v17) {
        return;
      }
      goto LABEL_41;
    }
  }
  else if (v27)
  {
    goto LABEL_40;
  }
  sub_10004D2C8(v25);
  if (v17) {
    return;
  }
LABEL_41:
  sub_10004D2C8(v14);
}

void sub_100DC689C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC693C(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  sub_100DC72BC();
  uint64_t v8 = qword_101B12BC0;
  if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Apple safety alert received", buf, 2u);
  }
  xpc_object_t object = xpc_BOOL_create(0);
  if (!object) {
    xpc_object_t object = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v36 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &object, &v38);
  xpc_release(v38);
  xpc_object_t v38 = 0;
  xpc_release(object);
  xpc_object_t object = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *a1);
  uint64_t v11 = ServiceMap;
  if (v12 < 0)
  {
    char v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  char v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    char v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      if (!v18) {
        goto LABEL_11;
      }
      goto LABEL_15;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  char v17 = 0;
  char v19 = 1;
  if (!v18)
  {
LABEL_11:
    sub_100DC72BC();
    uint64_t v20 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "Failed to get CellBroadcast interface", buf, 2u);
    }
    goto LABEL_32;
  }
LABEL_15:
  CFTypeRef cf = 0;
  *(void *)long long buf = a4;
  xpc_object_t v36 = "kAppleSafetyAlertContent";
  sub_100048BAC((uint64_t)buf, &v32);
  xpc::bridge((uint64_t *)&v33, (xpc *)&v32, v21);
  sub_10004EFE4(&cf, &v33);
  sub_1000577C4(&v33);
  xpc_release(v32);
  if (cf) {
    uint64_t v22 = sub_100080778;
  }
  else {
    uint64_t v22 = 0;
  }
  if (v22)
  {
    CFTypeRef v29 = cf;
    if (cf) {
      CFRetain(cf);
    }
    uint64_t v23 = (*(uint64_t (**)(uint64_t, CFTypeRef *))(*(void *)v18 + 176))(v18, &v29);
    sub_100057D78(&v29);
    xpc_object_t v27 = xpc_BOOL_create(v23 == 0);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v36 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v27, &v28);
    xpc_release(v28);
    xpc_object_t v28 = 0;
    xpc_release(v27);
    xpc_object_t v27 = 0;
    xpc_object_t v25 = xpc_int64_create(v23 >> 32);
    if (!v25) {
      xpc_object_t v25 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v36 = "kError";
    sub_100035E70((uint64_t)buf, &v25, &v26);
    xpc_release(v26);
    xpc_object_t v26 = 0;
    xpc_release(v25);
    xpc_object_t v25 = 0;
  }
  else
  {
    sub_100DC72BC();
    xpc_object_t v24 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_ERROR, "Invalid content: kAppleSafetyAlertContent", buf, 2u);
    }
    xpc_object_t v30 = xpc_int64_create(22);
    if (!v30) {
      xpc_object_t v30 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v36 = "kError";
    sub_100035E70((uint64_t)buf, &v30, &v31);
    xpc_release(v31);
    xpc_object_t v31 = 0;
    xpc_release(v30);
    xpc_object_t v30 = 0;
  }
  sub_100057D78(&cf);
LABEL_32:
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
}

void sub_100DC6D08(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, xpc_object_t object, char a17, int a18, const void *a19)
{
  sub_100057D78(&a19);
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(a1);
}

void sub_100DC6D9C(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t v26 = xpc_BOOL_create(0);
  if (!v26) {
    xpc_object_t v26 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v25 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v26, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v26);
  xpc_object_t v26 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *a1);
  uint64_t v9 = ServiceMap;
  if (v10 < 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      uint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v10;
  uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, (unint64_t *)buf);
  if (v14)
  {
    uint64_t v16 = v14[3];
    unsigned int v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      if (!v16) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  unsigned int v15 = 0;
  char v17 = 1;
  if (!v16)
  {
LABEL_9:
    sub_100DC72BC();
    uint64_t v18 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Failed to get CellBroadcast interface", buf, 2u);
    }
    goto LABEL_19;
  }
LABEL_13:
  BOOL value = 0;
  if ((*(unsigned int (**)(uint64_t, BOOL *))(*(void *)v16 + 56))(v16, &value))
  {
    xpc_object_t v21 = xpc_BOOL_create(value);
    if (!v21) {
      xpc_object_t v21 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v25 = "kAutoReadOutEnabled";
    sub_100035E70((uint64_t)buf, &v21, &v22);
    xpc_release(v22);
    xpc_object_t v22 = 0;
    xpc_release(v21);
    xpc_object_t v21 = 0;
    xpc_object_t v19 = xpc_BOOL_create(1);
    if (!v19) {
      xpc_object_t v19 = xpc_null_create();
    }
    *(void *)long long buf = *a5;
    xpc_object_t v25 = "kDidSucceed";
    sub_100035E70((uint64_t)buf, &v19, &v20);
    xpc_release(v20);
    xpc_object_t v20 = 0;
    xpc_release(v19);
    xpc_object_t v19 = 0;
  }
LABEL_19:
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
}

void sub_100DC700C(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC703C(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, void *a5)
{
  xpc_object_t v28 = xpc_BOOL_create(0);
  if (!v28) {
    xpc_object_t v28 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v27 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v28, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v28);
  *(void *)long long buf = a4;
  xpc_object_t v27 = "kAutoReadOutEnabled";
  xpc_object_t v28 = 0;
  sub_100048BAC((uint64_t)buf, &v25);
  uint64_t v9 = xpc::dyn_cast_or_default((xpc *)&v25, 0, v8);
  xpc_release(v25);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v10, *a1);
  uint64_t v12 = ServiceMap;
  if (v13 < 0)
  {
    uint64_t v14 = (unsigned __int8 *)(v13 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v15 = 5381;
    do
    {
      uint64_t v13 = v15;
      unsigned int v16 = *v14++;
      uint64_t v15 = (33 * v15) ^ v16;
    }
    while (v16);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v13;
  char v17 = sub_10004D37C(&v12[1].__m_.__sig, (unint64_t *)buf);
  if (v17)
  {
    uint64_t v19 = v17[3];
    uint64_t v18 = (std::__shared_weak_count *)v17[4];
    if (v18)
    {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v12);
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v18);
      char v20 = 0;
      if (!v19) {
        goto LABEL_9;
      }
      goto LABEL_13;
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  std::mutex::unlock(v12);
  uint64_t v18 = 0;
  char v20 = 1;
  if (!v19)
  {
LABEL_9:
    sub_100DC72BC();
    xpc_object_t v21 = qword_101B12BC0;
    if (os_log_type_enabled((os_log_t)qword_101B12BC0, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Failed to get CellBroadcast interface", buf, 2u);
    }
    goto LABEL_16;
  }
LABEL_13:
  char v22 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v19 + 64))(v19, v9);
  xpc_object_t v23 = xpc_BOOL_create(v22);
  if (!v23) {
    xpc_object_t v23 = xpc_null_create();
  }
  *(void *)long long buf = *a5;
  xpc_object_t v27 = "kDidSucceed";
  sub_100035E70((uint64_t)buf, &v23, &v24);
  xpc_release(v24);
  xpc_object_t v24 = 0;
  xpc_release(v23);
  xpc_object_t v23 = 0;
LABEL_16:
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v18);
  }
}

void sub_100DC7268(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DC72BC()
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B12BC8, memory_order_acquire) & 1) == 0
    && __cxa_guard_acquire(&qword_101B12BC8))
  {
    LogGroupName = (const char *)sGetLogGroupName();
    ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&qword_101B12BC0, kCtLoggingSystemName, LogGroupName);
    __cxa_guard_release(&qword_101B12BC8);
  }
}

void sub_100DC7340(_Unwind_Exception *a1)
{
}

uint64_t sub_100DC7358()
{
  return sub_100C624B8((uint64_t)&unk_101B12BB8, (uint64_t)sub_100DC3ADC);
}

void *sub_100DC7374(void *a1, void *a2, NSObject **a3)
{
  unint64_t v6 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v13, kCtLoggingSystemName, "carrier.space.ent");
  *unint64_t v6 = 0;
  v6[1] = 0;
  uint64_t v7 = *a3;
  a1[3] = *a3;
  if (v7) {
    dispatch_retain(v7);
  }
  a1[4] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&v11, &v13);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 5), (const ctu::OsLogLogger *)&v11);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v13);
  v12[0] = off_1019AF850;
  v12[1] = sub_100DC7688;
  void v12[3] = v12;
  a1[6] = 0;
  if ((capabilities::ct::supportsGemini(v8) & 1) == 0) {
    operator new();
  }
  if (!a1[6]) {
    operator new();
  }
  sub_10008863C(v12);
  *a1 = off_101A5AA70;
  a1[7] = *a2;
  uint64_t v9 = a2[1];
  a1[8] = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  a1[9] = 0;
  a1[10] = 0;
  return a1;
}

void sub_100DC75CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, ...)
{
  va_start(va, a5);
  sub_10008863C((uint64_t *)va);
  operator delete();
}

const char *sub_100DC7688(int a1)
{
  uint64_t v1 = "carrier.space.ent.?";
  if (a1 == 2) {
    uint64_t v1 = "carrier.space.ent.2";
  }
  if (a1 == 1) {
    return "carrier.space.ent.1";
  }
  else {
    return v1;
  }
}

void sub_100DC76B4(void *a1)
{
  *a1 = off_101A5AA70;
  char v2 = (std::__shared_weak_count *)a1[10];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[8];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = a1[6];
  a1[6] = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);

  CarrierSpaceEntitlementsHandlerInterface::~CarrierSpaceEntitlementsHandlerInterface((CarrierSpaceEntitlementsHandlerInterface *)a1);
}

void sub_100DC7764(void *a1)
{
  sub_100DC76B4(a1);

  operator delete();
}

void sub_100DC779C()
{
}

void sub_100DC7810()
{
}

const void **sub_100DC7834(uint64_t a1)
{
  *(void *)xpc_object_t v41 = 0;
  DevicePersistentCopyValue((uint64_t *)v41, @"CarrierSpaceUsageInfoKey", 0);
  if (*(void *)v41) {
    char v2 = sub_100080934;
  }
  else {
    char v2 = 0;
  }
  if (v2)
  {
    id v3 = *(id *)v41;
    uint64_t v4 = [v3 description];
    uint64_t v5 = [v4 componentsSeparatedByString:@"\n"];

    unint64_t v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Cached usage :", buf, 2u);
    }
    unint64_t v8 = 0;
    *(void *)&long long v7 = 136315138;
    long long v37 = v7;
    while (v8 < (unint64_t)objc_msgSend(v5, "count", v37))
    {
      uint64_t v9 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        id v10 = [v5 objectAtIndexedSubscript:v8];
        id v11 = [v10 UTF8String];
        *(_DWORD *)long long buf = v37;
        *(void *)&uint8_t buf[4] = v11;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
      }
      ++v8;
    }
  }
  sub_1000577C4((const void **)v41);
  *(void *)xpc_object_t v41 = 0;
  DevicePersistentCopyValue((uint64_t *)v41, @"CarrierSpacePlansInfoKey", 0);
  if (*(void *)v41) {
    uint64_t v12 = sub_100080934;
  }
  else {
    uint64_t v12 = 0;
  }
  if (v12)
  {
    id v13 = *(id *)v41;
    uint64_t v14 = [v13 description];
    uint64_t v15 = [v14 componentsSeparatedByString:@"\n"];

    unsigned int v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Cached plans :", buf, 2u);
    }
    unint64_t v18 = 0;
    *(void *)&long long v17 = 136315138;
    long long v38 = v17;
    while (v18 < (unint64_t)objc_msgSend(v15, "count", v38))
    {
      uint64_t v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        id v20 = [v15 objectAtIndexedSubscript:v18];
        id v21 = [v20 UTF8String];
        *(_DWORD *)long long buf = v38;
        *(void *)&uint8_t buf[4] = v21;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
      }
      ++v18;
    }
  }
  sub_1000577C4((const void **)v41);
  *(void *)xpc_object_t v41 = 0;
  DevicePersistentCopyValue((uint64_t *)v41, @"CarrierSpaceAppsInfoKey", 0);
  if (*(void *)v41) {
    char v22 = sub_100080934;
  }
  else {
    char v22 = 0;
  }
  if (v22)
  {
    id v23 = *(id *)v41;
    xpc_object_t v24 = [v23 description];
    xpc_object_t v25 = [v24 componentsSeparatedByString:@"\n"];

    xpc_object_t v26 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I Cached apps :", buf, 2u);
    }
    unint64_t v28 = 0;
    *(void *)&long long v27 = 136315138;
    long long v39 = v27;
    while (v28 < (unint64_t)objc_msgSend(v25, "count", v39))
    {
      CFTypeRef v29 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v29, OS_LOG_TYPE_DEFAULT))
      {
        id v30 = [v25 objectAtIndexedSubscript:v28];
        id v31 = [v30 UTF8String];
        *(_DWORD *)long long buf = v39;
        *(void *)&uint8_t buf[4] = v31;
        _os_log_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_DEFAULT, "#I %s", buf, 0xCu);
      }
      ++v28;
    }
  }
  sub_1000577C4((const void **)v41);
  *(void *)long long buf = 0;
  DevicePersistentCopyValue((uint64_t *)v41, @"CarrierSpaceBackgroundRefreshIntervalHrsKey", 0);
  sub_100056248(buf, (CFTypeRef *)v41);
  sub_1000577C4((const void **)v41);
  CFStringRef v32 = *(const __CFString **)buf;
  if (*(void *)buf) {
    xpc_object_t v33 = sub_1000810B8;
  }
  else {
    xpc_object_t v33 = 0;
  }
  if (v33)
  {
    xpc_object_t v34 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
    {
      IntCFDictionaryRef Value = CFStringGetIntValue(v32);
      *(_DWORD *)xpc_object_t v41 = 67109120;
      *(_DWORD *)&void v41[4] = IntValue;
      _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#I Cached background refresh interval : %d hrs", v41, 8u);
    }
  }
  return sub_1000558F4((const void **)buf);
}

void sub_100DC7D10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

id sub_100DC7DD8(void *a1, void *a2)
{
  id v2 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    int v106 = a1[5];
    if (os_log_type_enabled(v106, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_ERROR, "network usage info is of invalid type", buf, 2u);
    }
    id v136 = 0;
    goto LABEL_159;
  }
  id v129 = v2;
  id v136 = objc_alloc_init((Class)CTCarrierSpaceUsageInfo);
  id v134 = [v129 objectForKey:@"account-metrics"];
  if (!v134)
  {
    unsigned int v107 = a1[5];
    if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#I account metrics missing", buf, 2u);
    }
    goto LABEL_150;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v108 = a1[5];
    if (os_log_type_enabled(v108, OS_LOG_TYPE_ERROR))
    {
      id v114 = [(id)objc_opt_class() description];
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = [v114 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v108, OS_LOG_TYPE_ERROR, "account metrics is of invalid type %s", buf, 0xCu);
    }
LABEL_150:
    id v109 = 0;
    goto LABEL_158;
  }
  id v133 = v134;
  id v3 = [v133 count];
  v132 = +[NSMutableArray arrayWithCapacity:v3];
  id v131 = v3;
  if (!v3)
  {
LABEL_151:
    uint64_t v110 = v132;
    id v109 = v132;
    goto LABEL_157;
  }
  uint64_t v4 = 0;
  while (1)
  {
    uint64_t v139 = v4;
    v140 = objc_msgSend(v133, "objectAtIndexedSubscript:");
    if (!v140) {
      break;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      long long v112 = a1[5];
      if (os_log_type_enabled(v112, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v112, OS_LOG_TYPE_ERROR, "account metrics array item is of invalid type", buf, 2u);
      }
      goto LABEL_156;
    }
    id v145 = v140;
    id v144 = objc_alloc_init((Class)CTCarrierSpaceUsageAccountMetrics);
    uint64_t v5 = [v145 objectForKey:@"network-usage-label"];
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v5 length]) {
      [v144 setNetworkUsageLabel:v5];
    }
    unint64_t v6 = [v145 objectForKey:@"device-type"];

    long long v7 = v6;
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend(v144, "setDeviceType:", objc_msgSend(v6, "integerValue"));
    }
    unint64_t v8 = [v145 objectForKey:@"local-device-metrics"];
    objc_msgSend(v144, "setLocalDevice:", objc_msgSend(v8, "BOOLValue"));

    uint64_t v9 = [v145 objectForKey:@"subscription-status"];

    id v10 = v9;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v9 length]) {
      [v144 setSubscriptionStatus:v9];
    }
    id v11 = [v145 objectForKey:@"plan-type"];

    uint64_t v12 = v11;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v11 length]) {
      [v144 setPlanType:v11];
    }
    id v13 = [v145 objectForKey:@"billing-cycle-ends-date"];

    uint64_t v14 = v13;
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) != 0 && [v13 length])
    {
      uint64_t v15 = sub_100961BA4(v13);
      [v144 setBillingCycleEndDate:v15];
    }
    id v142 = [v145 objectForKey:@"applicable-plans"];
    if (v142)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v138 = v142;
        id v16 = [v138 count];
        v137 = +[NSMutableArray arrayWithCapacity:v16];
        id v135 = v16;
        if (v16)
        {
          uint64_t v17 = 0;
          while (1)
          {
            unint64_t v18 = [v138 objectAtIndexedSubscript:v17];
            if (!v18) {
              break;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              uint64_t v105 = a1[5];
              if (os_log_type_enabled(v105, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v105, OS_LOG_TYPE_ERROR, "applicable plans array item is of invalid type", buf, 2u);
              }
              goto LABEL_139;
            }
            id v19 = v18;
            id v20 = objc_alloc_init((Class)CTCarrierSpaceUsagePlanMetrics);
            id v21 = [v19 objectForKey:@"plan-label"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v21 length]) {
              [v20 setPlanLabel:v21];
            }
            char v22 = [v19 objectForKey:@"plan-category"];

            id v23 = v22;
            objc_opt_class();
            if (objc_opt_isKindOfClass()) {
              objc_msgSend(v20, "setPlanCategory:", objc_msgSend(v22, "integerValue"));
            }
            xpc_object_t v24 = [v19 objectForKey:@"current-used-plan"];
            objc_msgSend(v20, "setCurrentUsedPlan:", objc_msgSend(v24, "BOOLValue"));

            if ([v20 currentUsedPlan])
            {
              id v141 = [v19 objectForKey:@"managed-hours"];
              xpc_object_t v25 = (std::__shared_weak_count *)a1[10];
              if (v25)
              {
                __int16 v130 = std::__shared_weak_count::lock(v25);
                if (v130)
                {
                  uint64_t v26 = a1[9];
                  if (v26)
                  {
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      uint64_t v116 = v26;
                      id v27 = v141;
                      long long v156 = 0u;
                      long long v157 = 0u;
                      id v124 = v27;
                      unint64_t v28 = [v27 objectForKey:@"expiration-date"];
                      CFTypeRef v29 = sub_100961BA4(v28);

                      id v30 = v29;
                      uint64_t v31 = *((void *)&v157 + 1);
                      id v120 = v30;
                      *((void *)&v157 + 1) = v30;
                      *(void *)long long buf = v31;
                      sub_10007CA64((const void **)buf);
                      uint64_t v125 = [v124 objectForKey:@"time-windows"];
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        long long v154 = 0u;
                        long long v155 = 0u;
                        long long v152 = 0u;
                        long long v153 = 0u;
                        obuint64_t j = v125;
                        id v117 = [obj countByEnumeratingWithState:&v152 objects:buf count:16];
                        if (v117)
                        {
                          uint64_t v118 = *(void *)v153;
                          id v119 = v2;
                          do
                          {
                            for (uint64_t i = 0; i != v117; uint64_t i = (char *)i + 1)
                            {
                              if (*(void *)v153 != v118) {
                                objc_enumerationMutation(obj);
                              }
                              v121 = *(void **)(*((void *)&v152 + 1) + 8 * i);
                              CFStringRef v32 = objc_msgSend(obj, "objectForKeyedSubscript:");
                              objc_opt_class();
                              if (objc_opt_isKindOfClass())
                              {
                                long long v150 = 0u;
                                long long v151 = 0u;
                                long long v148 = 0u;
                                long long v149 = 0u;
                                id v126 = v32;
                                v115 = v32;
                                id v33 = [v126 countByEnumeratingWithState:&v148 objects:v159 count:16];
                                if (v33)
                                {
                                  uint64_t v128 = *(void *)v149;
                                  while (2)
                                  {
                                    id v127 = v33;
                                    for (uint64_t j = 0; j != v127; uint64_t j = (char *)j + 1)
                                    {
                                      if (*(void *)v149 != v128) {
                                        objc_enumerationMutation(v126);
                                      }
                                      xpc_object_t v35 = *(void **)(*((void *)&v148 + 1) + 8 * (void)j);
                                      objc_opt_class();
                                      if (objc_opt_isKindOfClass())
                                      {
                                        xpc_object_t v36 = [v35 objectForKey:@"off-peak-data-type"];
                                        objc_opt_class();
                                        if ((objc_opt_isKindOfClass() & 1) == 0) {
                                          goto LABEL_88;
                                        }
                                        long long v37 = [v35 objectForKey:@"start-time"];
                                        objc_opt_class();
                                        if ((objc_opt_isKindOfClass() & 1) == 0) {
                                          goto LABEL_87;
                                        }
                                        long long v38 = [v35 objectForKey:@"end-time"];
                                        objc_opt_class();
                                        if ((objc_opt_isKindOfClass() & 1) == 0)
                                        {

LABEL_87:
LABEL_88:

                                          goto LABEL_89;
                                        }
                                        memset(&v147[1], 0, 32);
                                        DWORD2(v147[2]) = 7;
                                        uint64_t v39 = sub_100961BA4(v37);
                                        uint64_t v40 = (void **)*((void *)&v147[1] + 1);
                                        *((void *)&v147[1] + 1) = v39;
                                        v158[0] = v40;
                                        sub_10007CA64((const void **)v158);
                                        uint64_t v41 = sub_100961BA4(v38);
                                        CFTypeID v42 = *(void ***)&v147[2];
                                        *(void *)&v147[2] = v41;
                                        v158[0] = v42;
                                        sub_10007CA64((const void **)v158);
                                        if (*((void *)&v147[1] + 1)) {
                                          xpc_object_t v43 = sub_1001908E4;
                                        }
                                        else {
                                          xpc_object_t v43 = 0;
                                        }
                                        if (v43)
                                        {
                                          if (*(void *)&v147[2] ? sub_1001908E4 : 0)
                                          {
                                            unsigned int v45 = [v36 intValue];
                                            if (v45 - 1 >= 3) {
                                              unsigned int v46 = 0;
                                            }
                                            else {
                                              unsigned int v46 = v45;
                                            }
                                            LODWORD(v147[1]) = v46;
                                            int v47 = sub_100961F18(v121);
                                            DWORD2(v147[2]) = v47;
                                            uint64_t v48 = *((void *)&v156 + 1);
                                            if (*((void *)&v156 + 1) >= (unint64_t)v157)
                                            {
                                              uint64_t v50 = (uint64_t)(*((void *)&v156 + 1) - v156) >> 5;
                                              unint64_t v51 = v50 + 1;
                                              if ((unint64_t)(v50 + 1) >> 59) {
                                                sub_10006A748();
                                              }
                                              uint64_t v52 = v157 - v156;
                                              if ((uint64_t)(v157 - v156) >> 4 > v51) {
                                                unint64_t v51 = v52 >> 4;
                                              }
                                              if ((unint64_t)v52 >= 0x7FFFFFFFFFFFFFE0) {
                                                unint64_t v53 = 0x7FFFFFFFFFFFFFFLL;
                                              }
                                              else {
                                                unint64_t v53 = v51;
                                              }
                                              v158[4] = (void **)&v157;
                                              uint64_t v54 = (void **)sub_1000F5A68((uint64_t)&v157, v53);
                                              unint64_t v55 = &v54[4 * v50];
                                              v158[0] = v54;
                                              v158[1] = v55;
                                              v158[3] = &v54[4 * v56];
                                              *(_DWORD *)unint64_t v55 = v147[1];
                                              v55[1] = 0;
                                              v55[1] = (void *)*((void *)&v147[1] + 1);
                                              *((void *)&v147[1] + 1) = 0;
                                              v55[2] = 0;
                                              v55[2] = *(void **)&v147[2];
                                              *(void *)&v147[2] = 0;
                                              *((_DWORD *)v55 + 6) = DWORD2(v147[2]);
                                              v158[2] = v55 + 4;
                                              sub_1009511BC((uint64_t *)&v156, v158);
                                              uint64_t v49 = *((void *)&v156 + 1);
                                              sub_100951364((uint64_t)v158);
                                            }
                                            else
                                            {
                                              **((_DWORD **)&v156 + 1) = v147[1];
                                              *(_OWORD *)(v48 + 8) = 0u;
                                              *(void *)(v48 + 8) = *((void *)&v147[1] + 1);
                                              *(void *)(v48 + 16) = *(void *)&v147[2];
                                              *(_OWORD *)((char *)&v147[1] + 8) = 0u;
                                              *(_DWORD *)(v48 + 24) = v47;
                                              uint64_t v49 = v48 + 32;
                                            }
                                            *((void *)&v156 + 1) = v49;
                                            id v2 = v119;
                                          }
                                        }
                                        sub_10007CA64((const void **)&v147[2]);
                                        sub_10007CA64((const void **)&v147[1] + 1);
                                      }
                                    }
                                    id v33 = [v126 countByEnumeratingWithState:&v148 objects:v159 count:16];
                                    if (v33) {
                                      continue;
                                    }
                                    break;
                                  }
                                }

                                CFStringRef v32 = v115;
                              }
                            }
                            id v117 = [obj countByEnumeratingWithState:&v152 objects:buf count:16];
                          }
                          while (v117);
                        }

                        long long v146 = v156;
                        long long v57 = v157;
                        long long v157 = 0uLL;
                        long long v156 = 0uLL;
                        v147[0] = v57;
                        (*(void (**)(uint64_t, long long *))(*(void *)v116 + 40))(v116, &v146);
                        sub_10007CA64((const void **)v147 + 1);
                        v158[0] = (void **)&v146;
                        sub_10061B228(v158);
                      }
                      else
                      {
                        uint64_t v59 = a1[5];
                        if (os_log_type_enabled(v59, OS_LOG_TYPE_DEFAULT))
                        {
                          *(_DWORD *)long long buf = 138412290;
                          *(void *)&uint8_t buf[4] = @"time-windows";
                          _os_log_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_DEFAULT, "#I %@ is of unexpected type", buf, 0xCu);
                        }
                      }
LABEL_89:

                      sub_10007CA64((const void **)&v157 + 1);
                      v158[0] = (void **)&v156;
                      sub_10061B228(v158);
                    }
                    else
                    {
                      long long v58 = a1[5];
                      if (os_log_type_enabled(v58, OS_LOG_TYPE_DEFAULT))
                      {
                        *(_DWORD *)long long buf = 138412290;
                        *(void *)&uint8_t buf[4] = @"managed-hours";
                        _os_log_impl((void *)&_mh_execute_header, v58, OS_LOG_TYPE_DEFAULT, "#I %@ is of unexpected type", buf, 0xCu);
                      }
                    }
                  }
                  sub_10004D2C8(v130);
                }
              }
            }
            id v60 = objc_alloc_init((Class)CTCarrierSpaceUsagePlanItemData);
            [v20 setDataUsage:v60];

            long long v61 = [v19 objectForKey:@"data-measure-unit"];

            CFTypeID v62 = v61;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v61 length])
            {
              uint64_t v63 = sub_100961AFC(v61);
              std::string::size_type v64 = [v20 dataUsage];
              [v64 setUnits:v63];
            }
            uint64_t v65 = [v19 objectForKey:@"data-capacity"];

            uint64_t v66 = v65;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v65 length])
            {
              unsigned int v67 = [v20 dataUsage];
              [v67 setCapacity:v66];
            }
            std::string::size_type v68 = [v19 objectForKey:@"max-data-before-throttling"];

            long long v69 = v68;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v68 length])
            {
              uint64_t v70 = [v20 dataUsage];
              [v70 setMaxDataBeforeThrottling:v69];
            }
            uint64_t v71 = [v19 objectForKey:@"data-used"];

            long long v72 = v71;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v71 length])
            {
              char v73 = [v20 dataUsage];
              [v73 setThisDeviceDataUsed:v72];
            }
            __int16 v74 = [v19 objectForKey:@"shared-data-used"];

            uint64_t v75 = v74;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v74 length])
            {
              uint64_t v76 = [v20 dataUsage];
              [v76 setSharedDataUsed:v75];
            }
            long long v77 = [v19 objectForKey:@"shared-plan-identifier"];

            uint64_t v78 = v77;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v77 length])
            {
              unsigned int v79 = [v20 dataUsage];
              [v79 setSharedPlanIdentifier:v78];
            }
            id v80 = objc_alloc_init((Class)CTCarrierSpaceUsagePlanItemMessages);
            [v20 setMessages:v80];

            long long v81 = [v19 objectForKey:@"messages-capacity"];

            uint64_t v82 = v81;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v81 length])
            {
              long long v83 = [v20 messages];
              [v83 setCapacity:v82];
            }
            uint64_t v84 = [v19 objectForKey:@"messages-used"];

            uint64_t v85 = v84;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v84 length])
            {
              uint64_t v86 = [v20 messages];
              [v86 setUsed:v85];
            }
            id v87 = objc_alloc_init((Class)CTCarrierSpaceUsagePlanItemVoice);
            [v20 setVoice:v87];

            uint64_t v88 = [v19 objectForKey:@"voice-minutes-capacity"];

            uint64_t v89 = v88;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v88 length])
            {
              __int16 v90 = [v20 voice];
              [v90 setMinutesCapacity:v89];
            }
            long long v91 = [v19 objectForKey:@"voice-minutes-used"];

            uint64_t v92 = v91;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v91 length])
            {
              uint64_t v93 = [v20 voice];
              [v93 setMinutesUsed:v92];
            }
            uint64_t v94 = [v19 objectForKey:@"remaining-balance"];

            uint64_t v95 = v94;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v94 length]) {
              [v20 setRemainingBalance:v94];
            }
            uint64_t v96 = [v19 objectForKey:@"throttled"];
            objc_msgSend(v20, "setThrottled:", objc_msgSend(v96, "BOOLValue"));

            uint64_t v97 = [v19 objectForKey:@"last-updated-at"];

            unint64_t v98 = v97;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v97 length])
            {
              uint32_t v99 = sub_100961BA4(v97);
              [v20 setLastUpdatedAt:v99];
            }
            [v137 insertObject:v20 atIndex:v17];

            if ((id)++v17 == v135) {
              goto LABEL_129;
            }
          }
          long long v104 = a1[5];
          if (os_log_type_enabled(v104, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v104, OS_LOG_TYPE_DEFAULT, "#I applicable plans array item is missing", buf, 2u);
          }
LABEL_139:

          id v101 = 0;
          v100 = v137;
        }
        else
        {
LABEL_129:
          v100 = v137;
          id v101 = v137;
        }

        goto LABEL_141;
      }
      uint64_t v103 = a1[5];
      if (os_log_type_enabled(v103, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v103, OS_LOG_TYPE_ERROR, "domestic usage is of invalid type", buf, 2u);
      }
    }
    else
    {
      long long v102 = a1[5];
      if (os_log_type_enabled(v102, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v102, OS_LOG_TYPE_DEFAULT, "#I domestic usage is missing", buf, 2u);
      }
    }
    id v101 = 0;
LABEL_141:

    [v144 setApplicablePlans:v101];
    [v132 insertObject:v144 atIndex:v139];

    uint64_t v4 = v139 + 1;
    if ((id)(v139 + 1) == v131) {
      goto LABEL_151;
    }
  }
  v111 = a1[5];
  if (os_log_type_enabled(v111, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v111, OS_LOG_TYPE_DEFAULT, "#I account metrics array item is missing", buf, 2u);
  }
LABEL_156:

  id v109 = 0;
  uint64_t v110 = v132;
LABEL_157:

LABEL_158:
  [v136 setAccountMetrics:v109];

LABEL_159:

  return v136;
}

void sub_100DC9280(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, void *a20,uint64_t a21,void *a22,uint64_t a23,void *a24,void *a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,void *a31,std::__shared_weak_count *a32,uint64_t a33,void *a34,void *a35,void *a36,void *a37,uint64_t a38,void *a39,void *a40,void *a41,uint64_t a42,void *a43,void *a44,void *a45,uint64_t a46,void *a47,void *a48)
{
  sub_100615960((uint64_t)&STACK[0x200]);
  sub_10004D2C8(a32);

  _Unwind_Resume(a1);
}

id sub_100DC95B0(uint64_t a1, void *a2)
{
  id v53 = a2;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    long long v37 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v37, OS_LOG_TYPE_ERROR))
    {
      id v45 = [(id)objc_opt_class() description];
      *(_DWORD *)long long buf = 136315138;
      id v61 = [v45 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v37, OS_LOG_TYPE_ERROR, "carrier plans info is of invalid type %s", buf, 0xCu);
    }
    id v54 = 0;
    goto LABEL_86;
  }
  id v48 = v53;
  id v54 = objc_alloc_init((Class)CTCarrierSpacePlansInfo);
  uint64_t v49 = a1;
  id v50 = [v48 objectForKey:@"plans-list"];
  if (!v50)
  {
    long long v38 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v38, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v38, OS_LOG_TYPE_DEFAULT, "#I plan group options info is missing", buf, 2u);
    }
    goto LABEL_74;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v39 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v39, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v39, OS_LOG_TYPE_ERROR, "plan group options is of invalid type", buf, 2u);
    }
LABEL_74:
    id v40 = 0;
    goto LABEL_82;
  }
  id v47 = v50;
  id v3 = (char *)[v47 count];
  uint64_t v4 = +[NSMutableArray arrayWithCapacity:v3];
  uint64_t v5 = (void *)v4;
  unsigned int v46 = v3;
  if (!v3)
  {
LABEL_75:
    id v40 = v5;
    goto LABEL_81;
  }
  unint64_t v6 = 0;
  unint64_t v51 = (void *)v4;
  while (1)
  {
    long long v7 = [v47 objectAtIndexedSubscript:v6];
    if (!v7) {
      break;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      CFTypeID v42 = *(NSObject **)(v49 + 40);
      if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "plan group info item is of invalid type", buf, 2u);
      }
      goto LABEL_80;
    }
    id v8 = v7;
    id v59 = objc_alloc_init((Class)CTCarrierSpacePlanGroupInfo);
    long long v57 = [v8 objectForKey:@"plan-category"];
    objc_opt_class();
    if (objc_opt_isKindOfClass()) {
      objc_msgSend(v59, "setPlanCategory:", objc_msgSend(v57, "integerValue"));
    }
    id v58 = [v8 objectForKey:@"plan-group-options"];
    if (v58)
    {
      objc_opt_class();
      if (objc_opt_isKindOfClass())
      {
        id v56 = v58;
        id v9 = [v56 count];
        unint64_t v55 = +[NSMutableArray arrayWithCapacity:v9];
        id v52 = v9;
        if (v9)
        {
          uint64_t v10 = 0;
          while (1)
          {
            id v11 = [v56 objectAtIndexedSubscript:v10];
            if (!v11) {
              break;
            }
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) == 0)
            {
              xpc_object_t v36 = *(NSObject **)(v49 + 40);
              if (os_log_type_enabled(v36, OS_LOG_TYPE_ERROR))
              {
                *(_WORD *)long long buf = 0;
                _os_log_error_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_ERROR, "plan group info item is of invalid type", buf, 2u);
              }
              goto LABEL_63;
            }
            id v12 = v11;
            id v13 = objc_alloc_init((Class)CTCarrierSpacePlanGroupOptionInfo);
            uint64_t v14 = [v12 objectForKey:@"plan-id"];
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v14 length]) {
              [v13 setPlanId:v14];
            }
            uint64_t v15 = [v12 objectForKey:@"plan-label"];

            id v16 = v15;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v15 length]) {
              [v13 setPlanLabel:v15];
            }
            uint64_t v17 = [v12 objectForKey:@"plan-value"];

            unint64_t v18 = v17;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v17 length]) {
              [v13 setPlanValue:v17];
            }
            id v19 = [v12 objectForKey:@"plan-subscribed"];

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v19 length])
            {
              id v20 = v19;
              if ([v20 isEqualToString:@"subscribed"])
              {
                uint64_t v21 = 0;
              }
              else if ([v20 isEqualToString:@"in-progress"])
              {
                uint64_t v21 = 2;
              }
              else if ([v20 isEqualToString:@"not-subscribed"])
              {
                uint64_t v21 = 1;
              }
              else
              {
                uint64_t v21 = 3;
              }

              [v13 setPlanSubscriptionStatus:v21];
            }
            char v22 = [v12 objectForKey:@"plan-purchasable"];
            objc_msgSend(v13, "setPlanPurchasable:", objc_msgSend(v22, "BOOLValue"));

            id v23 = [v12 objectForKey:@"plan-details-url"];

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v23 length]) {
              [v13 setPlanDetailsURL:v23];
            }
            xpc_object_t v24 = [v12 objectForKey:@"plan-termcond-url"];

            xpc_object_t v25 = v24;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v24 length]) {
              [v13 setPlanTermsURL:v24];
            }
            uint64_t v26 = [v12 objectForKey:@"plan-purchase-url"];

            id v27 = v26;
            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v26 length]) {
              [v13 setPlanPurchaseURL:v26];
            }
            unint64_t v28 = [v12 objectForKey:@"plan-type"];

            objc_opt_class();
            if ((objc_opt_isKindOfClass() & 1) != 0 && [v28 length])
            {
              id v29 = v28;
              if ([v29 isEqualToString:@"prepaid"])
              {
                uint64_t v30 = 1;
              }
              else if ([v29 isEqualToString:@"postpaid"])
              {
                uint64_t v30 = 2;
              }
              else
              {
                uint64_t v30 = 0;
              }

              [v13 setPlanType:v30];
            }
            [v55 insertObject:v13 atIndex:v10];

            if (v52 == (id)++v10) {
              goto LABEL_53;
            }
          }
          xpc_object_t v35 = *(NSObject **)(v49 + 40);
          if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I plan group info item is missing", buf, 2u);
          }
LABEL_63:

          id v32 = 0;
          uint64_t v31 = v55;
        }
        else
        {
LABEL_53:
          uint64_t v31 = v55;
          id v32 = v55;
        }

        goto LABEL_65;
      }
      xpc_object_t v34 = *(NSObject **)(v49 + 40);
      if (os_log_type_enabled(v34, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_ERROR, "plan group options is of invalid type", buf, 2u);
      }
    }
    else
    {
      id v33 = *(NSObject **)(v49 + 40);
      if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I plan group options info is missing", buf, 2u);
      }
    }
    id v32 = 0;
LABEL_65:

    [v59 setGroupOptionsList:v32];
    [v51 insertObject:v59 atIndex:v6];

    ++v6;
    uint64_t v5 = v51;
    if (v6 == v46) {
      goto LABEL_75;
    }
  }
  uint64_t v41 = *(NSObject **)(v49 + 40);
  if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I plan group info item is missing", buf, 2u);
  }
LABEL_80:

  id v40 = 0;
  uint64_t v5 = v51;
LABEL_81:

LABEL_82:
  [v54 setPlanGroupsList:v40];

  xpc_object_t v43 = [v48 objectForKey:@"more-plans-url"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v43 length]) {
    [v54 setMorePlansURL:v43];
  }

LABEL_86:

  return v54;
}

void sub_100DC9FB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, void *a13, uint64_t a14, void *a15, uint64_t a16, uint64_t a17, void *a18, void *a19)
{
  _Unwind_Resume(a1);
}

id sub_100DCA128(uint64_t a1, uint64_t a2, void *a3)
{
  id v4 = a3;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
    {
      id v23 = [(id)objc_opt_class() description];
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = [v23 UTF8String];
      _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "carrier apps info is of invalid type %s", __p, 0xCu);
    }
    id v27 = 0;
    goto LABEL_35;
  }
  id v25 = v4;
  id v27 = objc_alloc_init((Class)CTCarrierSpaceAppsInfo);
  id v5 = [v25 objectForKey:@"apps-list"];
  if (!v5)
  {
    uint64_t v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I apps list is missing", __p, 2u);
    }
    goto LABEL_23;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    id v16 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v16, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)std::string __p = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_ERROR, "apps list is of invalid type", __p, 2u);
    }
LABEL_23:
    id v17 = 0;
    goto LABEL_31;
  }
  id v26 = v5;
  id v6 = [v26 count];
  xpc_object_t v24 = +[NSMutableArray arrayWithCapacity:v6];
  if (!v6)
  {
LABEL_24:
    unint64_t v18 = v24;
    id v17 = v24;
    goto LABEL_30;
  }
  uint64_t v7 = 0;
  while (1)
  {
    id v8 = objc_msgSend(v26, "objectAtIndexedSubscript:", v7, v24);
    if (!v8) {
      break;
    }
    objc_opt_class();
    if ((objc_opt_isKindOfClass() & 1) == 0)
    {
      id v20 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v20, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_ERROR, "app ID item is of invalid type", buf, 2u);
      }
      goto LABEL_29;
    }
    id v9 = v8;
    sub_100058DB0(__p, (char *)[v9 UTF8String]);
    BOOL v11 = sub_100961C28((Registry **)(a1 + 56), (uint64_t)__p, v10);
    BOOL v12 = v11;
    if (v30 < 0)
    {
      operator delete(*(void **)__p);
      if (!v12)
      {
LABEL_12:
        id v13 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)long long buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "Team ID is not identified", buf, 2u);
        }
        goto LABEL_14;
      }
    }
    else if (!v11)
    {
      goto LABEL_12;
    }
    [v24 insertObject:v9 atIndex:v7];
LABEL_14:

    if (v6 == (id)++v7) {
      goto LABEL_24;
    }
  }
  id v19 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I app ID item is missing", buf, 2u);
  }
LABEL_29:

  id v17 = 0;
  unint64_t v18 = v24;
LABEL_30:

LABEL_31:
  [v27 setAppsList:v17];

  uint64_t v21 = [v25 valueForKey:@"apps-url"];
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) != 0 && [v21 length]) {
    [v27 setAppsURL:v21];
  }

LABEL_35:

  return v27;
}

void sub_100DCA564(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, void *a11, void *a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  _Unwind_Resume(a1);
}

void sub_100DCA62C(void *a1, uint64_t a2, char a3, uint64_t a4)
{
  id v8 = (char *)operator new(0x60uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)id v8 = off_101A5AC38;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((void *)v8 + 11) = 0;
  if (a3)
  {
    uint64_t v39 = 0;
    DevicePersistentCopyValue((uint64_t *)&v39, @"CarrierSpaceUsageInfoKey", 0);
    if (v39) {
      uint64_t v10 = sub_100080934;
    }
    else {
      uint64_t v10 = 0;
    }
    if (v10)
    {
      BOOL v11 = a1[5];
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I network usage info is available in persistent cache", (uint8_t *)&buf, 2u);
      }
      BOOL v12 = (std::__shared_weak_count *)operator new(0x20uLL);
      v12->__shared_owners_ = 0;
      v12->__shared_weak_owners_ = 0;
      v12->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC88;
      v12[1].__vftable = 0;
      uint64_t v13 = sub_100DC7DD8(a1, v39);
      uint64_t v14 = v12[1].__vftable;
      v12[1].__vftable = (std::__shared_weak_count_vtbl *)v13;

      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v15 = (std::__shared_weak_count *)*((void *)v8 + 7);
      *((void *)v8 + 6) = v12 + 1;
      *((void *)v8 + 7) = v12;
      if (v15) {
        sub_10004D2C8(v15);
      }
      sub_10004D2C8(v12);
      char v9 = 1;
    }
    else
    {
      char v9 = 0;
    }
    sub_1000577C4((const void **)&v39);
    if ((a3 & 2) == 0)
    {
LABEL_3:
      if ((a3 & 4) == 0) {
        goto LABEL_36;
      }
      goto LABEL_26;
    }
  }
  else
  {
    char v9 = 0;
    if ((a3 & 2) == 0) {
      goto LABEL_3;
    }
  }
  uint64_t v39 = 0;
  DevicePersistentCopyValue((uint64_t *)&v39, @"CarrierSpacePlansInfoKey", 0);
  if (v39) {
    id v16 = sub_100080934;
  }
  else {
    id v16 = 0;
  }
  if (v16)
  {
    id v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I carrier plans info is available in persistent cache", (uint8_t *)&buf, 2u);
    }
    unint64_t v18 = (std::__shared_weak_count *)operator new(0x20uLL);
    v18->__shared_owners_ = 0;
    v18->__shared_weak_owners_ = 0;
    v18->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ACD8;
    v18[1].__vftable = 0;
    uint64_t v19 = sub_100DC95B0((uint64_t)a1, v39);
    id v20 = v18[1].__vftable;
    v18[1].__vftable = (std::__shared_weak_count_vtbl *)v19;

    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    uint64_t v21 = (std::__shared_weak_count *)*((void *)v8 + 9);
    *((void *)v8 + 8) = v18 + 1;
    *((void *)v8 + 9) = v18;
    if (v21) {
      sub_10004D2C8(v21);
    }
    v9 |= 2u;
    sub_10004D2C8(v18);
  }
  sub_1000577C4((const void **)&v39);
  if ((a3 & 4) != 0)
  {
LABEL_26:
    uint64_t v39 = 0;
    DevicePersistentCopyValue((uint64_t *)&v39, @"CarrierSpaceAppsInfoKey", 0);
    if (v39) {
      char v22 = sub_100080934;
    }
    else {
      char v22 = 0;
    }
    if (v22)
    {
      id v23 = a1[5];
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf) = 0;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I carrier apps info is available in persistent cache", (uint8_t *)&buf, 2u);
      }
      xpc_object_t v24 = (std::__shared_weak_count *)operator new(0x20uLL);
      v24->__shared_owners_ = 0;
      v24->__shared_weak_owners_ = 0;
      v24->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD28;
      v24[1].__vftable = 0;
      uint64_t v25 = sub_100DCA128((uint64_t)a1, a2, v39);
      id v26 = v24[1].__vftable;
      v24[1].__vftable = (std::__shared_weak_count_vtbl *)v25;

      atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
      id v27 = (std::__shared_weak_count *)*((void *)v8 + 11);
      *((void *)v8 + 10) = v24 + 1;
      *((void *)v8 + 11) = v24;
      if (v27) {
        sub_10004D2C8(v27);
      }
      v9 |= 4u;
      sub_10004D2C8(v24);
    }
    sub_1000577C4((const void **)&v39);
  }
LABEL_36:
  uint64_t v39 = 0;
  DevicePersistentCopyValue((uint64_t *)&buf, @"CarrierSpaceBackgroundRefreshIntervalHrsKey", 0);
  sub_100056248(&v39, &buf);
  sub_1000577C4(&buf);
  CFStringRef v28 = v39;
  if (v39) {
    id v29 = sub_1000810B8;
  }
  else {
    id v29 = 0;
  }
  if (v29)
  {
    char v30 = a1[5];
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf) = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I background refresh interval is available in persistent cache", (uint8_t *)&buf, 2u);
      CFStringRef v28 = v39;
    }
    *((void *)v8 + 5) = CFStringGetIntValue(v28);
  }
  sub_1000558F4((const void **)&v39);
  uint64_t v31 = *(void *)(a4 + 24);
  LOBYTE(v39) = v9;
  if (!v31) {
    sub_10007B600();
  }
  (*(void (**)(uint64_t, __CFString **))(*(void *)v31 + 48))(v31, &v39);
  id v32 = (std::__shared_weak_count *)a1[10];
  if (v32)
  {
    id v33 = std::__shared_weak_count::lock(v32);
    if (v33)
    {
      xpc_object_t v34 = v33;
      uint64_t v35 = a1[9];
      if (v35)
      {
        xpc_object_t v36 = v8 + 24;
        long long v37 = (std::__shared_weak_count *)v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v35 + 16))(v35, &v36);
        if (v37) {
          sub_10004D2C8(v37);
        }
      }
      sub_10004D2C8(v34);
    }
  }
  sub_10004D2C8((std::__shared_weak_count *)v8);
}

void sub_100DCAB1C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  sub_10004D2C8(v11);
  sub_10004D2C8(v10);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCABB0()
{
  DevicePersistentSaveValue(@"CarrierSpaceUsageInfoKey", 0);
  DevicePersistentSaveValue(@"CarrierSpacePlansInfoKey", 0);
  DevicePersistentSaveValue(@"CarrierSpaceAppsInfoKey", 0);

  return DevicePersistentSaveValue(@"CarrierSpaceBackgroundRefreshIntervalHrsKey", 0);
}

void sub_100DCAC10(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DCAD14(void *a1, uint64_t a2, void ***a3)
{
  id v4 = *a3;
  if (!*a3)
  {
    uint64_t v15 = a1[5];
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    id v16 = "getCarrierSpaceUpdates - response pointer is invalid";
LABEL_16:
    _os_log_error_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_ERROR, v16, buf, 2u);
    return;
  }
  id v5 = *v4;
  if (*v4) {
    id v6 = sub_100080778;
  }
  else {
    id v6 = 0;
  }
  if (!v6)
  {
    uint64_t v15 = a1[5];
    if (!os_log_type_enabled(v15, OS_LOG_TYPE_ERROR)) {
      return;
    }
    *(_WORD *)long long buf = 0;
    id v16 = "getCarrierSpaceUpdates - result body missing";
    goto LABEL_16;
  }
  id v8 = (char *)operator new(0x60uLL);
  *((void *)v8 + 1) = 0;
  *((void *)v8 + 2) = 0;
  *(void *)id v8 = off_101A5AC38;
  *(_OWORD *)(v8 + 24) = 0u;
  *(_OWORD *)(v8 + 40) = 0u;
  *(_OWORD *)(v8 + 56) = 0u;
  *(_OWORD *)(v8 + 72) = 0u;
  *((void *)v8 + 11) = 0;
  id v9 = v5;
  uint64_t v10 = [v9 valueForKey:@"network-usage"];
  if (v10)
  {
    BOOL v11 = (std::__shared_weak_count *)operator new(0x20uLL);
    v11->__shared_owners_ = 0;
    v11->__shared_weak_owners_ = 0;
    v11->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC88;
    v11[1].__vftable = 0;
    uint64_t v12 = sub_100DC7DD8(a1, v10);
    uint64_t v13 = v11[1].__vftable;
    v11[1].__vftable = (std::__shared_weak_count_vtbl *)v12;

    if (v11[1].__vftable)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v14 = (std::__shared_weak_count *)*((void *)v8 + 7);
      *((void *)v8 + 6) = v11 + 1;
      *((void *)v8 + 7) = v11;
      if (v14) {
        sub_10004D2C8(v14);
      }
      DevicePersistentSaveValue(@"CarrierSpaceUsageInfoKey", v10);
    }
    sub_10004D2C8(v11);
  }
  else
  {
    id v17 = a1[5];
    if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I network usage info is not present", buf, 2u);
    }
  }
  uint64_t v18 = [v9 valueForKey:@"carrier-plans"];

  uint64_t v19 = (void *)v18;
  if (v18)
  {
    id v20 = (std::__shared_weak_count *)operator new(0x20uLL);
    v20->__shared_owners_ = 0;
    v20->__shared_weak_owners_ = 0;
    v20->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ACD8;
    v20[1].__vftable = 0;
    uint64_t v21 = sub_100DC95B0((uint64_t)a1, v19);
    char v22 = v20[1].__vftable;
    v20[1].__vftable = (std::__shared_weak_count_vtbl *)v21;

    if (v20[1].__vftable)
    {
      atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
      id v23 = (std::__shared_weak_count *)*((void *)v8 + 9);
      *((void *)v8 + 8) = v20 + 1;
      *((void *)v8 + 9) = v20;
      if (v23) {
        sub_10004D2C8(v23);
      }
      DevicePersistentSaveValue(@"CarrierSpacePlansInfoKey", v19);
    }
    sub_10004D2C8(v20);
  }
  else
  {
    xpc_object_t v24 = a1[5];
    if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I carrier plans info is not present", buf, 2u);
    }
  }
  uint64_t v25 = [v9 valueForKey:@"carrier-apps"];

  id v26 = (void *)v25;
  if (v25)
  {
    id v27 = (std::__shared_weak_count *)operator new(0x20uLL);
    v27->__shared_owners_ = 0;
    v27->__shared_weak_owners_ = 0;
    v27->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD28;
    v27[1].__vftable = 0;
    uint64_t v28 = sub_100DCA128((uint64_t)a1, a2, v26);
    id v29 = v27[1].__vftable;
    v27[1].__vftable = (std::__shared_weak_count_vtbl *)v28;

    if (v27[1].__vftable)
    {
      atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
      char v30 = (std::__shared_weak_count *)*((void *)v8 + 11);
      *((void *)v8 + 10) = v27 + 1;
      *((void *)v8 + 11) = v27;
      if (v30) {
        sub_10004D2C8(v30);
      }
      DevicePersistentSaveValue(@"CarrierSpaceAppsInfoKey", v26);
    }
    sub_10004D2C8(v27);
  }
  else
  {
    uint64_t v31 = a1[5];
    if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I carrier apps info is not present", buf, 2u);
    }
  }
  uint64_t v32 = [v9 valueForKey:@"user-consent"];

  id v33 = (void *)v32;
  if (!v32)
  {
    uint64_t v41 = a1[5];
    if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I user consent info is not present", buf, 2u);
    }
    goto LABEL_67;
  }
  xpc_object_t v34 = (std::__shared_weak_count *)operator new(0x20uLL);
  v34->__shared_owners_ = 0;
  v34->__shared_weak_owners_ = 0;
  v34->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD78;
  v34[1].__vftable = 0;
  uint64_t v35 = (void **)&v34[1].__vftable;
  id v59 = v33;
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    CFTypeID v42 = a1[5];
    if (os_log_type_enabled(v42, OS_LOG_TYPE_ERROR))
    {
      id v56 = [(id)objc_opt_class() description];
      id v57 = [v56 UTF8String];
      *(_DWORD *)long long buf = 136315138;
      id v63 = v57;
      _os_log_error_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_ERROR, "user consent info is of invalid type %s", buf, 0xCu);
    }
    id v37 = 0;
    goto LABEL_63;
  }
  id v58 = v59;
  xpc_object_t v36 = [v58 valueForKey:@"opt-in-url"];
  if (!v36)
  {
    xpc_object_t v43 = a1[5];
    if (os_log_type_enabled(v43, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v43, OS_LOG_TYPE_DEFAULT, "#I opt-in URL is not present", buf, 2u);
    }
    id v37 = 0;
    xpc_object_t v36 = 0;
    goto LABEL_62;
  }
  objc_opt_class();
  if ((objc_opt_isKindOfClass() & 1) == 0)
  {
    int v44 = a1[5];
    if (os_log_type_enabled(v44, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v44, OS_LOG_TYPE_ERROR, "opt-in URL is of invalid type", buf, 2u);
    }
    id v37 = 0;
    goto LABEL_62;
  }
  id v37 = objc_alloc_init((Class)CTCarrierSpaceUserConsentFlowInfo);
  id v38 = v36;
  if ([v38 length]) {
    [v37 setWebURL:v38];
  }
  uint64_t v39 = [v58 valueForKey:@"opt-in-url-post-data"];

  if (v39)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v40 = v39;

      if ([v40 length]) {
        [v37 setPostData:v40];
      }
      goto LABEL_61;
    }
    unsigned int v46 = a1[5];
    if (os_log_type_enabled(v46, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_ERROR, "opt-in post data is of invalid type", buf, 2u);
    }
  }
  else
  {
    id v45 = a1[5];
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I opt-in post data is not present", buf, 2u);
    }
  }
  id v40 = v38;
LABEL_61:

  xpc_object_t v36 = v39;
LABEL_62:

LABEL_63:
  id v47 = *v35;
  *uint64_t v35 = v37;

  if (*v35)
  {
    atomic_fetch_add_explicit(&v34->__shared_owners_, 1uLL, memory_order_relaxed);
    id v48 = (std::__shared_weak_count *)*((void *)v8 + 4);
    *((void *)v8 + 3) = v35;
    *((void *)v8 + 4) = v34;
    if (v48) {
      sub_10004D2C8(v48);
    }
  }
  sub_10004D2C8(v34);
LABEL_67:
  uint64_t v49 = [v9 valueForKey:@"background-refresh-interval-hrs"];

  if (v49)
  {
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      *((void *)v8 + 5) = (int)[v49 intValue];
      DevicePersistentSaveValue(@"CarrierSpaceBackgroundRefreshIntervalHrsKey", v49);
    }
    else
    {
      unint64_t v51 = a1[5];
      if (os_log_type_enabled(v51, OS_LOG_TYPE_ERROR))
      {
        *(_WORD *)long long buf = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v51, OS_LOG_TYPE_ERROR, "background refresh interval is of invalid type", buf, 2u);
      }
    }
  }
  else
  {
    id v50 = a1[5];
    if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I background refresh interval is not present", buf, 2u);
    }
  }
  id v52 = (std::__shared_weak_count *)a1[10];
  if (v52)
  {
    id v53 = std::__shared_weak_count::lock(v52);
    if (v53)
    {
      id v54 = v53;
      uint64_t v55 = a1[9];
      if (v55)
      {
        id v60 = v8 + 24;
        id v61 = (std::__shared_weak_count *)v8;
        atomic_fetch_add_explicit((atomic_ullong *volatile)v8 + 1, 1uLL, memory_order_relaxed);
        (*(void (**)(uint64_t, char **))(*(void *)v55 + 16))(v55, &v60);
        if (v61) {
          sub_10004D2C8(v61);
        }
      }
      sub_10004D2C8(v54);
    }
  }

  sub_10004D2C8((std::__shared_weak_count *)v8);
}

void sub_100DCB634(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10004D2C8(v16);

  sub_10004D2C8(v14);
  _Unwind_Resume(a1);
}

void sub_100DCB708(uint64_t a1, id *a2)
{
  if (*a2) {
    id v2 = sub_100080778;
  }
  else {
    id v2 = 0;
  }
  if (v2)
  {
    id v30 = *a2;
    uint64_t v32 = [v30 objectForKeyedSubscript:@"trigger-actions"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v4 = v32;
      int v5 = 0;
      for (unint64_t i = 0; i < (unint64_t)[v4 count]; ++i)
      {
        uint64_t v7 = [v4 objectAtIndexedSubscript:i];
        unsigned int v8 = [v7 isEqualToString:@"network-usage-update"];
        unsigned int v9 = [v7 isEqualToString:@"carrier-plans-update"];
        unsigned int v10 = [v7 isEqualToString:@"carrier-apps-update"];
        int v11 = v5 | v8;
        if (v9) {
          int v11 = v5 | v8 | 2;
        }
        if (v10) {
          int v5 = v11 | 4;
        }
        else {
          int v5 = v11;
        }
      }
      uint64_t v12 = *(std::__shared_weak_count **)(a1 + 80);
      if (v12)
      {
        uint64_t v13 = std::__shared_weak_count::lock(v12);
        if (v13)
        {
          uint64_t v14 = v13;
          uint64_t v15 = *(void *)(a1 + 72);
          if (v15) {
            (*(void (**)(uint64_t, void))(*(void *)v15 + 24))(v15, v5);
          }
          sub_10004D2C8(v14);
        }
      }
    }
    uint64_t v31 = [v30 objectForKeyedSubscript:@"plan-purchase-status"];
    objc_opt_class();
    if (objc_opt_isKindOfClass())
    {
      id v16 = v31;
      id v17 = *(std::__shared_weak_count **)(a1 + 80);
      if (v17)
      {
        uint64_t v18 = std::__shared_weak_count::lock(v17);
        if (v18)
        {
          uint64_t v28 = v18;
          id v29 = v16;
          uint64_t v19 = *(void *)(a1 + 72);
          if (v19)
          {
            long long v37 = 0u;
            long long v38 = 0u;
            long long v35 = 0u;
            long long v36 = 0u;
            id v20 = v16;
            id v21 = objc_msgSend(v20, "countByEnumeratingWithState:objects:count:", &v35, v39, 16, v28);
            if (v21)
            {
              uint64_t v22 = *(void *)v36;
              do
              {
                for (uint64_t j = 0; j != v21; uint64_t j = (char *)j + 1)
                {
                  if (*(void *)v36 != v22) {
                    objc_enumerationMutation(v20);
                  }
                  xpc_object_t v24 = *(void **)(*((void *)&v35 + 1) + 8 * (void)j);
                  objc_opt_class();
                  if (objc_opt_isKindOfClass())
                  {
                    id v25 = v24;
                    id v26 = [v25 objectForKeyedSubscript:@"plan-id"];
                    id v27 = [v25 objectForKeyedSubscript:@"status"];
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        sub_100058DB0(__p, (char *)[v26 UTF8String]);
                        (*(void (**)(uint64_t, void **, void))(*(void *)v19 + 32))(v19, __p, [v27 intValue]);
                        if (v34 < 0) {
                          operator delete(__p[0]);
                        }
                      }
                    }
                  }
                }
                id v21 = [v20 countByEnumeratingWithState:&v35 objects:v39 count:16];
              }
              while (v21);
            }
          }
          sub_10004D2C8(v28);
          id v16 = v29;
        }
      }
    }
  }
}

void sub_100DCBB0C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, id a11, uint64_t a12, void *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  sub_10004D2C8(v20);

  _Unwind_Resume(a1);
}

void sub_100DCBBD8(uint64_t a1, uint64_t a2, void *a3, uint64_t *a4)
{
  unsigned int v8 = (os_log_t *)(*(uint64_t (**)(void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48));
  uint64_t v30 = 0;
  uint64_t v31 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a1 + 56));
  int v11 = ServiceMap;
  if (v12 < 0)
  {
    uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  id v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
  if (v16)
  {
    uint64_t v18 = v16[3];
    id v17 = (std::__shared_weak_count *)v16[4];
    if (v17)
    {
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      char v19 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v18 = 0;
  }
  std::mutex::unlock(v11);
  id v17 = 0;
  char v19 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, uint64_t))(*(void *)v18 + 8))(&v30, v18, a2);
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  if (v30)
  {
    id v20 = [objc_alloc((Class)NSString) initWithBytes:*a3 length:a3[1] - *a3 encoding:4];
    v33[0] = @"oauth-access-token";
    v33[1] = @"carrier-plans";
    v34[0] = v20;
    id v21 = objc_alloc_init((Class)NSMutableDictionary);
    if (*((char *)a4 + 23) >= 0) {
      uint64_t v22 = a4;
    }
    else {
      uint64_t v22 = (uint64_t *)*a4;
    }
    id v23 = +[NSString stringWithUTF8String:v22];
    [v21 setValue:v23 forKey:@"plan-id"];

    id v32 = v21;
    xpc_object_t v24 = +[NSArray arrayWithObjects:&v32 count:1];
    v34[1] = v24;
    id v25 = +[NSDictionary dictionaryWithObjects:v34 forKeys:v33 count:2];

    *(void *)long long buf = 0;
    id v29 = 0;
    CFTypeRef v27 = v25;
    sub_100282490((const void **)buf, &v27);
    (*(void (**)(uint64_t, void))(*(void *)v30 + 376))(v30, 0);
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v30 + 136))(v30, buf);
    sub_1000577C4(&v29);
    sub_100057D78((const void **)buf);
  }
  else
  {
    id v26 = *v8;
    if (os_log_type_enabled(*v8, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_ERROR, "Could not get handle to entitlements controller", buf, 2u);
    }
  }
  if (v31) {
    sub_10004D2C8(v31);
  }
}

void sub_100DCBF10(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, std::__shared_weak_count *a14)
{
  sub_1000577C4(&a12);
  sub_100057D78(&a11);

  if (a14) {
    sub_10004D2C8(a14);
  }
  _Unwind_Resume(a1);
}

void sub_100DCBFB0(uint64_t a1@<X0>, int a2@<W1>, int **a3@<X2>, uint64_t a4@<X8>)
{
  if (a2 == 3)
  {
    uint64_t v50 = 5;
    v51[0] = 0;
    v51[1] = 0;
    id v52 = 0;
    int v5 = **a3;
    switch(v5)
    {
      case 6011:
        char v33 = 1;
        break;
      case 6002:
        char v33 = 4;
        break;
      case 6000:
        id v6 = (const void **)*((void *)*a3 + 1);
        if (v6)
        {
          if (*v6) {
            uint64_t v7 = sub_100080778;
          }
          else {
            uint64_t v7 = 0;
          }
          if (v7)
          {
            LOBYTE(v50) = 0;
            sub_100058198((const void **)&v47, v6);
            if (v47) {
              unsigned int v8 = sub_100080778;
            }
            else {
              unsigned int v8 = 0;
            }
            if (v8)
            {
              int64x2_t v59 = 0uLL;
              id v60 = 0;
              xpc_object_t v43 = v47;
              unsigned int v46 = [v43 objectForKeyedSubscript:@"carrier-plans"];
              objc_opt_class();
              if (objc_opt_isKindOfClass())
              {
                long long v57 = 0u;
                long long v58 = 0u;
                long long v55 = 0u;
                long long v56 = 0u;
                id v9 = v46;
                id v45 = v9;
                id v10 = [v9 countByEnumeratingWithState:&v55 objects:buf count:16];
                if (v10)
                {
                  uint64_t v11 = 0;
                  uint64_t v12 = *(void *)v56;
                  uint64_t v13 = *(void *)v56;
                  uint64_t v44 = *(void *)v56;
                  while (1)
                  {
                    if (v13 != v12) {
                      objc_enumerationMutation(v9);
                    }
                    uint64_t v14 = *(void **)(*((void *)&v55 + 1) + 8 * v11);
                    objc_opt_class();
                    if (objc_opt_isKindOfClass())
                    {
                      unsigned int v15 = [v14 objectForKeyedSubscript:@"plan-id"];
                      objc_opt_class();
                      if (objc_opt_isKindOfClass())
                      {
                        id v16 = [v14 objectForKeyedSubscript:@"status"];
                        objc_opt_class();
                        if (objc_opt_isKindOfClass())
                        {
                          *(_OWORD *)std::string __p = 0u;
                          long long v54 = 0u;
                          BYTE8(v54) = [v16 intValue];
                          sub_10003ED78((std::string *)__p, (char *)[v15 UTF8String]);
                          unint64_t v17 = v59.u64[1];
                          uint64_t v18 = v60;
                          if (v59.i64[1] >= (unint64_t)v60)
                          {
                            uint64_t v20 = v59.i64[0];
                            uint64_t v21 = (v59.i64[1] - v59.i64[0]) >> 5;
                            unint64_t v22 = v21 + 1;
                            if ((unint64_t)(v21 + 1) >> 59) {
                              sub_10006A748();
                            }
                            if (((uint64_t)v60 - v59.i64[0]) >> 4 > v22) {
                              unint64_t v22 = ((uint64_t)v60 - v59.i64[0]) >> 4;
                            }
                            if ((unint64_t)v60 - v59.i64[0] >= 0x7FFFFFFFFFFFFFE0) {
                              unint64_t v23 = 0x7FFFFFFFFFFFFFFLL;
                            }
                            else {
                              unint64_t v23 = v22;
                            }
                            std::string::size_type v64 = &v60;
                            if (v23 >> 59) {
                              sub_10006A7CC();
                            }
                            xpc_object_t v24 = (void **)operator new(32 * v23);
                            id v25 = &v24[4 * v21];
                            id v61 = v24;
                            v62.i64[0] = (uint64_t)v25;
                            id v26 = &v24[4 * v23];
                            *(_OWORD *)id v25 = *(_OWORD *)__p;
                            v25[2] = (void *)v54;
                            __p[0] = 0;
                            __p[1] = 0;
                            *(void *)&long long v54 = 0;
                            *((unsigned char *)v25 + 24) = BYTE8(v54);
                            CFTypeRef v27 = v25 + 4;
                            v62.i64[1] = (uint64_t)(v25 + 4);
                            id v63 = v26;
                            if (v17 == v20)
                            {
                              int64x2_t v29 = vdupq_n_s64(v17);
                            }
                            else
                            {
                              do
                              {
                                long long v28 = *(_OWORD *)(v17 - 32);
                                *(v25 - 2) = *(void **)(v17 - 16);
                                *((_OWORD *)v25 - 2) = v28;
                                *(void *)(v17 - 24) = 0;
                                *(void *)(v17 - 16) = 0;
                                *(void *)(v17 - 32) = 0;
                                *((unsigned char *)v25 - 8) = *(unsigned char *)(v17 - 8);
                                v25 -= 4;
                                v17 -= 32;
                              }
                              while (v17 != v20);
                              int64x2_t v29 = v59;
                              uint64_t v18 = v60;
                              CFTypeRef v27 = (void **)v62.i64[1];
                              id v26 = v63;
                            }
                            id v9 = v45;
                            v59.i64[0] = (uint64_t)v25;
                            v59.i64[1] = (uint64_t)v27;
                            int64x2_t v62 = v29;
                            id v60 = v26;
                            id v63 = v18;
                            id v61 = (void **)v29.i64[0];
                            sub_1000F5AA0((uint64_t)&v61);
                            v59.i64[1] = (uint64_t)v27;
                            uint64_t v12 = v44;
                            if (SBYTE7(v54) < 0) {
                              operator delete(__p[0]);
                            }
                          }
                          else
                          {
                            long long v19 = *(_OWORD *)__p;
                            *(void *)(v59.i64[1] + 16) = v54;
                            *(_OWORD *)unint64_t v17 = v19;
                            __p[1] = 0;
                            *(void *)&long long v54 = 0;
                            __p[0] = 0;
                            *(unsigned char *)(v17 + 24) = BYTE8(v54);
                            v59.i64[1] = v17 + 32;
                            uint64_t v12 = v44;
                            id v9 = v45;
                          }
                        }
                      }
                    }
                    if (++v11 >= (unint64_t)v10)
                    {
                      id v10 = [v9 countByEnumeratingWithState:&v55 objects:buf count:16];
                      if (!v10) {
                        break;
                      }
                      uint64_t v11 = 0;
                    }
                    uint64_t v13 = *(void *)v56;
                  }
                }

                long long v37 = (void *)v59.i64[1];
                long long v38 = (void *)v59.i64[0];
                int64x2_t v48 = v59;
                long long v36 = v60;
                uint64_t v49 = v60;
                uint64_t v39 = &v59;
              }
              else
              {
                long long v36 = 0;
                long long v37 = 0;
                long long v38 = 0;
                uint64_t v39 = &v48;
              }
              v39->i64[0] = 0;
              v39->i64[1] = 0;
              v39[1].i64[0] = 0;

              id v61 = (void **)&v59;
              sub_1000D82FC(&v61);
            }
            else
            {
              long long v36 = 0;
              long long v37 = 0;
              long long v38 = 0;
            }
            id v40 = (void **)v51[0];
            if (v51[0])
            {
              uint64_t v41 = (void **)v51[1];
              CFTypeID v42 = v51[0];
              if (v51[1] != v51[0])
              {
                do
                {
                  if (*((char *)v41 - 9) < 0) {
                    operator delete(*(v41 - 4));
                  }
                  v41 -= 4;
                }
                while (v41 != v40);
                CFTypeID v42 = v51[0];
              }
              v51[1] = v40;
              operator delete(v42);
            }
            v51[0] = v38;
            v51[1] = v37;
            id v52 = v36;
            uint64_t v49 = 0;
            int64x2_t v48 = 0uLL;
            *(void *)long long buf = &v48;
            sub_1000D82FC((void ***)buf);
            sub_100057D78((const void **)&v47);
            *(unsigned char *)a4 = v50;
            *(_OWORD *)(a4 + 8) = *(_OWORD *)v51;
            *(void *)(a4 + 24) = v52;
            v51[1] = 0;
            id v52 = 0;
            v51[0] = 0;
          }
          else
          {
            long long v35 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v35, OS_LOG_TYPE_DEFAULT))
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#N Received success status with no response body", buf, 2u);
            }
            *(unsigned char *)a4 = 2;
            *(void *)(a4 + 16) = 0;
            *(void *)(a4 + 24) = 0;
            *(void *)(a4 + 8) = 0;
          }
        }
        else
        {
          char v34 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v34, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v34, OS_LOG_TYPE_DEFAULT, "#N Received invalid arguments in update account response", buf, 2u);
          }
          *(unsigned char *)a4 = 2;
          *(void *)(a4 + 16) = 0;
          *(void *)(a4 + 24) = 0;
          *(void *)(a4 + 8) = 0;
        }
        goto LABEL_54;
      default:
        char v33 = 3;
        break;
    }
    *(unsigned char *)a4 = v33;
    *(void *)(a4 + 16) = 0;
    *(void *)(a4 + 24) = 0;
    *(void *)(a4 + 8) = 0;
LABEL_54:
    *(void *)long long buf = v51;
    sub_1000D82FC((void ***)buf);
    return;
  }
  uint64_t v31 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    id v32 = "RequestCanceled";
    if (a2 == 1) {
      id v32 = "RequestFailed";
    }
    if (a2 == 2) {
      id v32 = "AttemptFailed";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v32;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#N Received error in update account response: %s", buf, 0xCu);
  }
  *(unsigned char *)a4 = 3;
  *(void *)(a4 + 16) = 0;
  *(void *)(a4 + 24) = 0;
  *(void *)(a4 + 8) = 0;
}

void sub_100DCC634(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *a12, void *a13, char *a14, const void *a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,char *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,char a38)
{
  std::string __p = &a38;
  sub_1000D82FC((void ***)&__p);
  sub_100057D78(&a15);
  std::string __p = a14;
  sub_1000D82FC((void ***)&__p);
  _Unwind_Resume(a1);
}

void sub_100DCC6E0()
{
}

uint64_t sub_100DCC6F4(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

void sub_100DCC700(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100DCC7CC(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100DCC8A4);
  __cxa_rethrow();
}

void sub_100DCC7F4(_Unwind_Exception *a1)
{
}

void sub_100DCC80C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCC844(uint64_t a1)
{
}

uint64_t sub_100DCC860(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100DCC8A4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100DCC8D0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DCC8F0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCC944(void *a1)
{
  id v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    sub_10004D2C8(v2);
  }
  id v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_10004D2C8(v3);
  }
  id v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    sub_10004D2C8(v4);
  }
  int v5 = (std::__shared_weak_count *)a1[4];
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_100DCC9B0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DCC9D0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AC88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCCA24(uint64_t a1)
{
}

void sub_100DCCA30(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ACD8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DCCA50(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ACD8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCCAA4(uint64_t a1)
{
}

void sub_100DCCAB0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD28;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DCCAD0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD28;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCCB24(uint64_t a1)
{
}

void sub_100DCCB30(uint64_t **a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  id v3 = (NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48), *((unsigned int *)*a1 + 4));
  uint64_t v24 = 0;
  id v25 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(v2 + 56));
  id v6 = ServiceMap;
  if (v7 < 0)
  {
    unsigned int v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v12 = v11[3];
    uint64_t v13 = (std::__shared_weak_count *)v11[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v14 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v6);
  uint64_t v13 = 0;
  char v14 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v12 + 8))(&v24, v12, *((unsigned int *)v1 + 4));
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  if (v24)
  {
    unsigned int v15 = +[NSMutableDictionary dictionary];
    id v16 = +[NSMutableArray array];
    unint64_t v17 = v16;
    char v18 = *((unsigned char *)v1 + 8);
    if (v18)
    {
      [v16 addObject:@"network-usage"];
      char v18 = *((unsigned char *)v1 + 8);
    }
    if ((v18 & 2) != 0)
    {
      [v17 addObject:@"carrier-plans"];
      char v18 = *((unsigned char *)v1 + 8);
    }
    if ((v18 & 4) != 0) {
      [v17 addObject:@"carrier-apps"];
    }
    [v15 setObject:v17 forKey:@"sub-actions"];
    *(void *)long long buf = 0;
    unint64_t v23 = 0;
    CFTypeRef v21 = v15;
    id v26 = 0;
    sub_10004EFE4(&v26, &v21);
    long long v19 = *(const void **)buf;
    *(void *)long long buf = v26;
    id v26 = v19;
    sub_100057D78(&v26);
    if (*((_DWORD *)v1 + 3) == 1) {
      (*(void (**)(uint64_t, void))(*(void *)v24 + 376))(v24, 0);
    }
    (*(void (**)(uint64_t, uint8_t *))(*(void *)v24 + 128))(v24, buf);
    sub_1000577C4(&v23);
    sub_100057D78((const void **)buf);
  }
  else
  {
    uint64_t v20 = *v3;
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#N Could not get handle to entitlements controller", buf, 2u);
    }
  }
  if (v25) {
    sub_10004D2C8(v25);
  }
  operator delete();
}

void sub_100DCCE30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, uint64_t a14, std::__shared_weak_count *a15)
{
  sub_1000577C4(&a12);
  sub_100057D78(&a11);

  if (a15) {
    sub_10004D2C8(a15);
  }
  operator delete();
}

void sub_100DCCEBC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD78;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DCCEDC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5AD78;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCCF30(uint64_t a1)
{
}

void sub_100DCCF3C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100DCD598(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, ctu::OsLogLogger *a13, void *a14, uint64_t a15, char a16, void *a17, uint64_t a18, dispatch_object_t object, dispatch_object_t a20,void *__p,uint64_t a22,int a23,__int16 a24,char a25,char a26,char a27,uint64_t a28,uint64_t a29,uint64_t a30)
{
  sub_10030A9DC((uint64_t)&a16, a17);
  uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 + 13);
  if (v31) {
    sub_10004D2C8(v31);
  }
  id v32 = (std::__shared_weak_count *)*((void *)v30 + 11);
  if (v32) {
    sub_10004D2C8(v32);
  }
  char v33 = (std::__shared_weak_count *)*((void *)v30 + 9);
  if (v33) {
    sub_10004D2C8(v33);
  }
  char v34 = (std::__shared_weak_count *)*((void *)v30 + 7);
  if (v34) {
    sub_10004D2C8(v34);
  }
  ctu::OsLogLogger::~OsLogLogger(a13);
  sub_100087E88(a14);
  CTXPCSubscriptionManagerInterface::~CTXPCSubscriptionManagerInterface(v30);
  operator delete();
}

void *sub_100DCD810(uint64_t a1)
{
  id v3 = (void **)(a1 + 32);
  sub_1007034E0(&v3);
  return sub_100DCF340((void *)a1);
}

void *sub_100DCD850(uint64_t a1)
{
  sub_10030A9DC(a1 + 32, *(void **)(a1 + 40));

  return sub_100DCF3C4((void *)a1);
}

void sub_100DCD890(uint64_t a1)
{
  *(void *)a1 = off_101A5ADC8;
  sub_10005CD2C(a1 + 440, *(char **)(a1 + 448));
  if (*(unsigned char *)(a1 + 416)) {
    sub_10023A670(a1 + 392, *(void **)(a1 + 400));
  }
  PersonalitiesTracker::~PersonalitiesTracker((PersonalitiesTracker *)(a1 + 224));
  id v6 = (void **)(a1 + 200);
  sub_1007034E0(&v6);
  sub_100DCF340((void *)(a1 + 168));
  sub_10030A9DC(a1 + 144, *(void **)(a1 + 152));
  sub_100DCF3C4((void *)(a1 + 112));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 104);
  if (v2) {
    sub_10004D2C8(v2);
  }
  id v3 = *(std::__shared_weak_count **)(a1 + 88);
  if (v3) {
    sub_10004D2C8(v3);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 72);
  if (v4) {
    sub_10004D2C8(v4);
  }
  int v5 = *(std::__shared_weak_count **)(a1 + 56);
  if (v5) {
    sub_10004D2C8(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  CTXPCSubscriptionManagerInterface::~CTXPCSubscriptionManagerInterface((CTXPCSubscriptionManagerInterface *)a1);
}

void sub_100DCD980(uint64_t a1)
{
  sub_100DCD890(a1);

  operator delete();
}

void sub_100DCD9B8(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  id v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DCDAB8(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = a1;
  if ((a3 & 1) == 0 && !*(unsigned char *)(*(void *)(a1 + 376) + 24))
  {
    int64x2_t v62 = (const std::string ****)(a1 + 376);
    goto LABEL_182;
  }
  id v4 = *(uint64_t **)(a1 + 144);
  v147 = 0;
  uint64_t v148 = 0;
  long long v146 = &v147;
  id v141 = (uint64_t *)(a1 + 152);
  if (v4 == (uint64_t *)(a1 + 152)) {
    goto LABEL_73;
  }
  int v5 = 0;
  id v6 = &v147;
  while (1)
  {
    int v7 = *((_DWORD *)v4 + 8);
    unsigned int v8 = &v147;
    if (v6 == &v147) {
      goto LABEL_11;
    }
    uint64_t v9 = v5;
    unsigned int v10 = &v147;
    if (v5)
    {
      do
      {
        unsigned int v8 = (uint64_t **)v9;
        uint64_t v9 = (uint64_t *)v9[1];
      }
      while (v9);
    }
    else
    {
      do
      {
        unsigned int v8 = (uint64_t **)v10[2];
        BOOL v11 = *v8 == (uint64_t *)v10;
        unsigned int v10 = v8;
      }
      while (v11);
    }
    if (*((_DWORD *)v8 + 8) < v7)
    {
LABEL_11:
      BOOL v11 = v5 == 0;
      if (v5) {
        uint64_t v12 = v8;
      }
      else {
        uint64_t v12 = &v147;
      }
      if (v5) {
        uint64_t v13 = (void **)v8;
      }
      else {
        uint64_t v13 = &v146;
      }
      if (v11) {
        char v14 = &v147;
      }
      else {
        char v14 = v8 + 1;
      }
      if (v13[1]) {
        goto LABEL_32;
      }
LABEL_29:
      memset(__str, 0, 24);
      sub_100DCF448(__str, (uint64_t)&v146, (_DWORD *)v4 + 8);
      id v16 = *(uint64_t **)__str;
      **(void **)std::string __str = 0;
      v16[1] = 0;
      unint64_t v16[2] = (uint64_t)v12;
      *char v14 = v16;
      if (*(void *)v146)
      {
        long long v146 = *(void **)v146;
        id v16 = *v14;
      }
      sub_100046C90(v147, v16);
      ++v148;
      *(void *)std::string __str = 0;
      sub_100DCF2E8((uint64_t)__str);
      goto LABEL_32;
    }
    char v14 = &v147;
    uint64_t v12 = &v147;
    if (!v5) {
      goto LABEL_29;
    }
    while (1)
    {
      while (1)
      {
        uint64_t v12 = (uint64_t **)v5;
        int v15 = *((_DWORD *)v5 + 8);
        if (v15 <= v7) {
          break;
        }
        int v5 = *v12;
        char v14 = v12;
        if (!*v12) {
          goto LABEL_29;
        }
      }
      if (v15 >= v7) {
        break;
      }
      int v5 = v12[1];
      if (!v5)
      {
        char v14 = v12 + 1;
        goto LABEL_29;
      }
    }
LABEL_32:
    unint64_t v17 = (uint64_t *)v4[1];
    if (v17)
    {
      do
      {
        char v18 = v17;
        unint64_t v17 = (uint64_t *)*v17;
      }
      while (v17);
    }
    else
    {
      do
      {
        char v18 = (uint64_t *)v4[2];
        BOOL v11 = *v18 == (void)v4;
        id v4 = v18;
      }
      while (!v11);
    }
    if (v18 == v141) {
      break;
    }
    id v6 = (uint64_t **)v146;
    int v5 = v147;
    id v4 = v18;
  }
  long long v19 = (uint64_t *)v146;
  if (v146 != &v147)
  {
    while (1)
    {
      uint64_t v20 = *(const std::string ****)(v3 + 376);
      CFTypeRef v21 = *v20;
      unint64_t v22 = v20[1];
      if (v21 != v22)
      {
        while ((*v21)[2].__r_.__value_.__s.__data_[1]
             || HIDWORD((*v21)[2].__r_.__value_.__r.__words[0]) != *((_DWORD *)v19 + 8))
        {
          v21 += 2;
          if (v21 == v22) {
            goto LABEL_56;
          }
        }
      }
      if (v21 == v22) {
        break;
      }
      uint64_t v24 = *v21;
      unint64_t v23 = (std::__shared_weak_count *)v21[1];
      if (v23) {
        atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (!v24
        || !v24[2].__r_.__value_.__s.__data_[16]
        || v24[2].__r_.__value_.__s.__data_[17]
        || !isReal())
      {
        goto LABEL_57;
      }
      std::string::value_type v25 = v24[2].__r_.__value_.__s.__data_[18];
      std::string::operator=((std::string *)(v19 + 23), v24 + 1);
      if (*(unsigned char *)(*(void *)(v3 + 376) + 24))
      {
        *((unsigned char *)v19 + 208) = v24[2].__r_.__value_.__s.__data_[16] == 2;
        *((unsigned char *)v19 + 209) = v25 ^ 1;
      }
      if (v24[2].__r_.__value_.__s.__data_[14])
      {
        BOOL v26 = 1;
        *((unsigned char *)v19 + 210) = 1;
      }
      else
      {
        std::string::value_type v29 = v24[2].__r_.__value_.__s.__data_[15];
        *((unsigned char *)v19 + 210) = v29;
        if (v24[4].__r_.__value_.__s.__data_[0] | v29) {
          BOOL v26 = 1;
        }
        else {
          BOOL v26 = sub_10010E128(v3 + 440, (void **)&v24[1].__r_.__value_.__l.__data_) != 0;
        }
      }
      *((unsigned char *)v19 + 211) = v26;
      if (!v23) {
        goto LABEL_61;
      }
LABEL_60:
      sub_10004D2C8(v23);
LABEL_61:
      CFTypeRef v27 = (uint64_t *)v19[1];
      if (v27)
      {
        do
        {
          long long v28 = (uint64_t **)v27;
          CFTypeRef v27 = (uint64_t *)*v27;
        }
        while (v27);
      }
      else
      {
        do
        {
          long long v28 = (uint64_t **)v19[2];
          BOOL v11 = *v28 == v19;
          long long v19 = (uint64_t *)v28;
        }
        while (!v11);
      }
      long long v19 = (uint64_t *)v28;
      if (v28 == &v147) {
        goto LABEL_73;
      }
    }
LABEL_56:
    unint64_t v23 = 0;
LABEL_57:
    memset(__str, 0, 24);
    std::string::operator=((std::string *)(v19 + 23), (const std::string *)__str);
    if ((__str[23] & 0x80000000) != 0) {
      operator delete(*(void **)__str);
    }
    *((_DWORD *)v19 + 52) = 256;
    if (!v23) {
      goto LABEL_61;
    }
    goto LABEL_60;
  }
LABEL_73:
  int v30 = *(_DWORD *)(v3 + 424);
  uint64_t isValidSimSlot = subscriber::isValidSimSlot();
  id v32 = (uint64_t *)v146;
  if (v146 != &v147)
  {
    int v33 = isValidSimSlot;
    do
    {
      uint64_t isValidSimSlot = capabilities::ct::supportsCellRadio((capabilities::ct *)isValidSimSlot);
      int v34 = isValidSimSlot ^ 1;
      if (*((_DWORD *)v32 + 8) == v30) {
        int v35 = 2;
      }
      else {
        int v35 = 1;
      }
      if ((isValidSimSlot & v33) != 0) {
        int v34 = v35;
      }
      *((_DWORD *)v32 + 44) = v34;
      long long v36 = (uint64_t *)v32[1];
      if (v36)
      {
        do
        {
          long long v37 = (uint64_t **)v36;
          long long v36 = (uint64_t *)*v36;
        }
        while (v36);
      }
      else
      {
        do
        {
          long long v37 = (uint64_t **)v32[2];
          BOOL v11 = *v37 == v32;
          id v32 = (uint64_t *)v37;
        }
        while (!v11);
      }
      id v32 = (uint64_t *)v37;
    }
    while (v37 != &v147);
  }
  int v38 = *(_DWORD *)(v3 + 428);
  uint64_t v39 = subscriber::isValidSimSlot();
  v140 = (uint64_t **)(v3 + 144);
  id v40 = (uint64_t *)v146;
  if (v146 != &v147)
  {
    int v41 = v39;
    do
    {
      uint64_t v39 = capabilities::ct::supportsVoiceCall((capabilities::ct *)v39);
      int v42 = v39 ^ 1;
      if (*((_DWORD *)v40 + 8) == v38) {
        int v43 = 2;
      }
      else {
        int v43 = 1;
      }
      if ((v39 & v41) != 0) {
        int v42 = v43;
      }
      *((_DWORD *)v40 + 45) = v42;
      uint64_t v44 = (uint64_t *)v40[1];
      if (v44)
      {
        do
        {
          id v45 = (uint64_t **)v44;
          uint64_t v44 = (uint64_t *)*v44;
        }
        while (v44);
      }
      else
      {
        do
        {
          id v45 = (uint64_t **)v40[2];
          BOOL v11 = *v45 == v40;
          id v40 = (uint64_t *)v45;
        }
        while (!v11);
      }
      id v40 = (uint64_t *)v45;
    }
    while (v45 != &v147);
    unsigned int v46 = (uint64_t *)v146;
    if (v146 != &v147)
    {
      do
      {
        long long __p = 0uLL;
        *(void *)&long long v152 = 0;
        memset(__str, 0, sizeof(__str));
        memset(v150, 0, 41);
        std::string::operator=((std::string *)v46 + 2, (const std::string *)__str);
        std::string::operator=((std::string *)v46 + 3, (const std::string *)&__str[24]);
        std::string::operator=((std::string *)v46 + 4, (const std::string *)&v150[1]);
        *((unsigned char *)v46 + 120) = BYTE8(v150[2]);
        std::string::operator=((std::string *)(v46 + 16), (const std::string *)&__p);
        if (SBYTE7(v152) < 0) {
          operator delete((void *)__p);
        }
        if (SBYTE7(v150[2]) < 0) {
          operator delete(*(void **)&v150[1]);
        }
        if (SHIBYTE(v150[0]) < 0) {
          operator delete(*(void **)&__str[24]);
        }
        if ((__str[23] & 0x80000000) != 0) {
          operator delete(*(void **)__str);
        }
        uint64_t v47 = *(void *)(a1 + 376);
        int64x2_t v48 = *(void **)v47;
        uint64_t v49 = *(void **)(v47 + 8);
        if (v48 != v49)
        {
          while (*(unsigned char *)(*v48 + 49) || *(_DWORD *)(*v48 + 52) != *((_DWORD *)v46 + 8))
          {
            v48 += 2;
            if (v48 == v49) {
              goto LABEL_130;
            }
          }
        }
        if (v48 != v49)
        {
          uint64_t v50 = *v48;
          unint64_t v51 = (std::__shared_weak_count *)v48[1];
          if (v51) {
            atomic_fetch_add_explicit(&v51->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (v50 && *(unsigned char *)(v50 + 64) && !*(unsigned char *)(v50 + 65) && isReal())
          {
            (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 96) + 168))(__str);
            std::string::operator=((std::string *)v46 + 2, (const std::string *)__str);
            std::string::operator=((std::string *)v46 + 3, (const std::string *)&__str[24]);
            std::string::operator=((std::string *)v46 + 4, (const std::string *)&v150[1]);
            *((unsigned char *)v46 + 120) = BYTE8(v150[2]);
            std::string::operator=((std::string *)(v46 + 16), (const std::string *)&__p);
            if (SBYTE7(v152) < 0) {
              operator delete((void *)__p);
            }
            if (SBYTE7(v150[2]) < 0) {
              operator delete(*(void **)&v150[1]);
            }
            if (SHIBYTE(v150[0]) < 0) {
              operator delete(*(void **)&__str[24]);
            }
            if ((__str[23] & 0x80000000) != 0) {
              operator delete(*(void **)__str);
            }
          }
          if (v51) {
            sub_10004D2C8(v51);
          }
        }
LABEL_130:
        id v52 = (uint64_t *)v46[1];
        if (v52)
        {
          do
          {
            id v53 = (uint64_t **)v52;
            id v52 = (uint64_t *)*v52;
          }
          while (v52);
        }
        else
        {
          do
          {
            id v53 = (uint64_t **)v46[2];
            BOOL v11 = *v53 == v46;
            unsigned int v46 = (uint64_t *)v53;
          }
          while (!v11);
        }
        unsigned int v46 = (uint64_t *)v53;
      }
      while (v53 != &v147);
    }
  }
  uint64_t v3 = a1;
  if (rest::operator!=())
  {
    if (v140 != (uint64_t **)&v146)
    {
      long long v54 = (uint64_t *)v146;
      if (*(void *)(a1 + 160))
      {
        long long v55 = *v140;
        void *v140 = v141;
        *(void *)(*v141 + 16) = 0;
        *id v141 = 0;
        v141[1] = 0;
        if (v55[1]) {
          uint64_t v56 = v55[1];
        }
        else {
          uint64_t v56 = (uint64_t)v55;
        }
        *(void *)std::string __str = v140;
        *(void *)&__str[8] = v56;
        *(void *)&__str[16] = v56;
        if (v56)
        {
          *(void *)&__str[8] = sub_1000EA590(v56);
          long long v57 = &v147;
          if (v54 != (uint64_t *)&v147)
          {
            do
            {
              *(_DWORD *)(v56 + 32) = *((_DWORD *)v54 + 8);
              *(_DWORD *)(v56 + 40) = *((_DWORD *)v54 + 10);
              std::string::operator=((std::string *)(v56 + 48), (const std::string *)v54 + 2);
              std::string::operator=((std::string *)(v56 + 72), (const std::string *)v54 + 3);
              std::string::operator=((std::string *)(v56 + 96), (const std::string *)v54 + 4);
              *(unsigned char *)(v56 + 120) = *((unsigned char *)v54 + 120);
              std::string::operator=((std::string *)(v56 + 128), (const std::string *)(v54 + 16));
              std::string::operator=((std::string *)(v56 + 152), (const std::string *)(v54 + 19));
              *(void *)(v56 + 176) = v54[22];
              std::string::operator=((std::string *)(v56 + 184), (const std::string *)(v54 + 23));
              *(_DWORD *)(v56 + 208) = *((_DWORD *)v54 + 52);
              uint64_t v58 = *v141;
              int64x2_t v59 = (uint64_t **)v141;
              id v60 = (uint64_t **)v141;
              if (*v141)
              {
                do
                {
                  while (1)
                  {
                    int64x2_t v59 = (uint64_t **)v58;
                    if (*(_DWORD *)(*(void *)&__str[16] + 32) >= *(_DWORD *)(v58 + 32)) {
                      break;
                    }
                    uint64_t v58 = *(void *)v58;
                    id v60 = v59;
                    if (!*v59) {
                      goto LABEL_150;
                    }
                  }
                  uint64_t v58 = *(void *)(v58 + 8);
                }
                while (v58);
                id v60 = v59 + 1;
              }
LABEL_150:
              sub_100046C38(v140, (uint64_t)v59, v60, *(uint64_t **)&__str[16]);
              uint64_t v56 = *(void *)&__str[8];
              *(void *)&__str[16] = *(void *)&__str[8];
              if (*(void *)&__str[8]) {
                *(void *)&__str[8] = sub_1000EA590(*(uint64_t *)&__str[8]);
              }
              id v61 = (uint64_t *)v54[1];
              if (v61)
              {
                do
                {
                  long long v57 = (uint64_t **)v61;
                  id v61 = (uint64_t *)*v61;
                }
                while (v61);
              }
              else
              {
                do
                {
                  long long v57 = (uint64_t **)v54[2];
                  BOOL v11 = *v57 == v54;
                  long long v54 = (uint64_t *)v57;
                }
                while (!v11);
              }
              if (!v56) {
                break;
              }
              long long v54 = (uint64_t *)v57;
            }
            while (v57 != &v147);
          }
        }
        else
        {
          long long v57 = (uint64_t **)v54;
        }
        sub_100DD131C((uint64_t)__str);
        long long v54 = (uint64_t *)v57;
      }
      if (v54 != (uint64_t *)&v147)
      {
        do
        {
          memset(__str, 0, 24);
          sub_100DCF448(__str, (uint64_t)v140, (_DWORD *)v54 + 8);
          uint64_t v63 = *v141;
          std::string::size_type v64 = (uint64_t **)v141;
          uint64_t v65 = (uint64_t **)v141;
          if (*v141)
          {
            do
            {
              while (1)
              {
                std::string::size_type v64 = (uint64_t **)v63;
                if (*(_DWORD *)(*(void *)__str + 32) >= *(_DWORD *)(v63 + 32)) {
                  break;
                }
                uint64_t v63 = *(void *)v63;
                uint64_t v65 = v64;
                if (!*v64) {
                  goto LABEL_170;
                }
              }
              uint64_t v63 = *(void *)(v63 + 8);
            }
            while (v63);
            uint64_t v65 = v64 + 1;
          }
LABEL_170:
          sub_100046C38(v140, (uint64_t)v64, v65, *(uint64_t **)__str);
          *(void *)std::string __str = 0;
          sub_100DCF2E8((uint64_t)__str);
          uint64_t v66 = (uint64_t *)v54[1];
          if (v66)
          {
            do
            {
              unsigned int v67 = (uint64_t **)v66;
              uint64_t v66 = (uint64_t *)*v66;
            }
            while (v66);
          }
          else
          {
            do
            {
              unsigned int v67 = (uint64_t **)v54[2];
              BOOL v11 = *v67 == v54;
              long long v54 = (uint64_t *)v67;
            }
            while (!v11);
          }
          long long v54 = (uint64_t *)v67;
        }
        while (v67 != &v147);
      }
    }
    uint64_t v68 = *(void *)(a1 + 136);
    if (v68) {
      (*(void (**)(uint64_t, uint64_t **))(*(void *)v68 + 48))(v68, v140);
    }
    long long v69 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v69, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)std::string __str = 136315394;
      *(void *)&__str[4] = a2;
      *(_WORD *)&__str[12] = 2048;
      *(void *)&__str[14] = v148;
      _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#I Subscription info updated (%s), size: %zu", __str, 0x16u);
    }
    sub_100DCEE18(a1);
  }
  sub_10030A9DC((uint64_t)&v146, v147);
  int64x2_t v62 = (const std::string ****)(a1 + 376);
  if (*(unsigned char *)(*(void *)(a1 + 376) + 24))
  {
LABEL_183:
    v143 = 0;
    unint64_t v144 = 0;
    unint64_t v145 = 0;
    uint64_t v70 = *v62;
    uint64_t v71 = **v62;
    long long v72 = v70[1];
    if (v71 != v72)
    {
      char v73 = (uint64_t *)(v3 + 152);
      do
      {
        __int16 v74 = *v71;
        if ((*v71)[2].__r_.__value_.__s.__data_[0]
          && v74[2].__r_.__value_.__s.__data_[16]
          && !v74[2].__r_.__value_.__s.__data_[17]
          && isReal())
        {
          if (!(*v71)[2].__r_.__value_.__s.__data_[1])
          {
            uint64_t v77 = *v73;
            if (!*v73) {
              goto LABEL_218;
            }
            int v78 = HIDWORD((*v71)[2].__r_.__value_.__r.__words[0]);
            uint64_t v79 = v3 + 152;
            do
            {
              int v80 = *(_DWORD *)(v77 + 32);
              BOOL v81 = v80 < v78;
              if (v80 >= v78) {
                uint64_t v82 = (uint64_t *)v77;
              }
              else {
                uint64_t v82 = (uint64_t *)(v77 + 8);
              }
              if (!v81) {
                uint64_t v79 = v77;
              }
              uint64_t v77 = *v82;
            }
            while (*v82);
            if ((uint64_t *)v79 == v73 || v78 < *(_DWORD *)(v79 + 32)) {
              goto LABEL_218;
            }
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long __p = 0u;
            long long v152 = 0u;
            memset(v150, 0, sizeof(v150));
            memset(__str, 0, sizeof(__str));
            sub_1006F0E90((uint64_t)__str, v79 + 40);
            unint64_t v75 = v144;
            if (v144 >= v145) {
              goto LABEL_205;
            }
LABEL_192:
            sub_1006F0E90(v144, (uint64_t)__str);
            uint64_t v76 = v75 + 176;
LABEL_206:
            unint64_t v144 = v76;
            if (SBYTE7(v156) < 0) {
              operator delete((void *)v155);
            }
            if (SBYTE7(v154) < 0) {
              operator delete((void *)v153);
            }
            if (SHIBYTE(v152) < 0) {
              operator delete(*((void **)&__p + 1));
            }
            if (SHIBYTE(v150[2]) < 0) {
              operator delete(*((void **)&v150[1] + 1));
            }
            if (SBYTE7(v150[1]) < 0) {
              operator delete(*(void **)&v150[0]);
            }
            if ((__str[31] & 0x80000000) != 0) {
              operator delete(*(void **)&__str[8]);
            }
            goto LABEL_218;
          }
          if ((*v71)[2].__r_.__value_.__s.__data_[1] == 1)
          {
            long long v155 = 0u;
            long long v156 = 0u;
            long long v153 = 0u;
            long long v154 = 0u;
            long long __p = 0u;
            long long v152 = 0u;
            memset(v150, 0, sizeof(v150));
            memset(__str, 0, sizeof(__str));
            BYTE9(v156) = 1;
            std::string::operator=((std::string *)&v153, *v71);
            std::string::operator=((std::string *)&v155, *v71 + 1);
            unint64_t v75 = v144;
            if (v144 < v145) {
              goto LABEL_192;
            }
LABEL_205:
            uint64_t v76 = sub_100DCF4C0(&v143, (uint64_t)__str);
            goto LABEL_206;
          }
        }
LABEL_218:
        v71 += 2;
      }
      while (v71 != v72);
    }
    int v83 = *(_DWORD *)(v3 + 424);
    uint64_t v84 = subscriber::isValidSimSlot();
    uint64_t v85 = v143;
    unint64_t v86 = v144;
    if (v143 != (_DWORD *)v144)
    {
      int v87 = v84;
      do
      {
        uint64_t v84 = capabilities::ct::supportsCellRadio((capabilities::ct *)v84);
        int v88 = v84 ^ 1;
        if (*v85 == v83) {
          int v89 = 2;
        }
        else {
          int v89 = 1;
        }
        if ((v84 & v87) != 0) {
          int v88 = v89;
        }
        v85[34] = v88;
        v85 += 44;
      }
      while (v85 != (_DWORD *)v86);
    }
    int v90 = *(_DWORD *)(v3 + 428);
    uint64_t v91 = capabilities::ct::supportsVoiceCall((capabilities::ct *)v84);
    if (v91)
    {
      uint64_t v91 = subscriber::isValidSimSlot();
      int v92 = v91;
    }
    else
    {
      int v92 = 0;
    }
    uint64_t v93 = v143;
    unint64_t v94 = v144;
    if (v143 != (_DWORD *)v144)
    {
      int v95 = v92 ? 1 : 2;
      do
      {
        int v96 = v95;
        if (*v93)
        {
          uint64_t v91 = capabilities::ct::supportsVoiceCall((capabilities::ct *)v91);
          int v96 = v91 ^ 1;
          int v97 = *v93 == v90 ? 2 : 1;
          if ((v91 & v92) != 0) {
            int v96 = v97;
          }
        }
        v93[35] = v96;
        v93 += 44;
      }
      while (v93 != (_DWORD *)v94);
      uint64_t v98 = (uint64_t)v143;
      unint64_t v99 = v144;
      if (v143 != (_DWORD *)v144)
      {
        do
        {
          uint64_t v100 = *(void *)(v3 + 376);
          id v101 = *(void **)v100;
          long long v102 = *(void **)(v100 + 8);
          if (*(void **)v100 != v102)
          {
            while (!sub_10001D294((unsigned __int8 *)(*v101 + 24), (unsigned __int8 *)(v98 + 144)))
            {
              v101 += 2;
              if (v101 == v102)
              {
                id v101 = v102;
                break;
              }
            }
            if (v101 != *(void **)(v100 + 8))
            {
              uint64_t v104 = *v101;
              uint64_t v103 = (std::__shared_weak_count *)v101[1];
              if (v103) {
                atomic_fetch_add_explicit(&v103->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v104)
              {
                long long __p = 0uLL;
                *(void *)&long long v152 = 0;
                memset(__str, 0, sizeof(__str));
                memset(v150, 0, 41);
                std::string::operator=((std::string *)(v98 + 8), (const std::string *)__str);
                std::string::operator=((std::string *)(v98 + 32), (const std::string *)&__str[24]);
                std::string::operator=((std::string *)(v98 + 56), (const std::string *)&v150[1]);
                *(unsigned char *)(v98 + 80) = BYTE8(v150[2]);
                std::string::operator=((std::string *)(v98 + 88), (const std::string *)&__p);
                if (SBYTE7(v152) < 0) {
                  operator delete((void *)__p);
                }
                if (SBYTE7(v150[2]) < 0) {
                  operator delete(*(void **)&v150[1]);
                }
                if (SHIBYTE(v150[0]) < 0) {
                  operator delete(*(void **)&__str[24]);
                }
                if ((__str[23] & 0x80000000) != 0) {
                  operator delete(*(void **)__str);
                }
                if (*(unsigned char *)(v104 + 64) && !*(unsigned char *)(v104 + 65) && isReal())
                {
                  (*(void (**)(unsigned char *__return_ptr))(**(void **)(a1 + 96) + 168))(__str);
                  std::string::operator=((std::string *)(v98 + 8), (const std::string *)__str);
                  std::string::operator=((std::string *)(v98 + 32), (const std::string *)&__str[24]);
                  std::string::operator=((std::string *)(v98 + 56), (const std::string *)&v150[1]);
                  *(unsigned char *)(v98 + 80) = BYTE8(v150[2]);
                  std::string::operator=((std::string *)(v98 + 88), (const std::string *)&__p);
                  if (SBYTE7(v152) < 0) {
                    operator delete((void *)__p);
                  }
                  if (SBYTE7(v150[2]) < 0) {
                    operator delete(*(void **)&v150[1]);
                  }
                  if (SHIBYTE(v150[0]) < 0) {
                    operator delete(*(void **)&__str[24]);
                  }
                  if ((__str[23] & 0x80000000) != 0) {
                    operator delete(*(void **)__str);
                  }
                }
              }
              uint64_t v3 = a1;
              if (v103) {
                sub_10004D2C8(v103);
              }
            }
          }
          v98 += 176;
        }
        while (v98 != v99);
      }
    }
    uint64_t v105 = (uint64_t *)(v3 + 200);
    if (!rest::operator!=())
    {
LABEL_320:
      *(void *)std::string __str = &v143;
      sub_1007034E0((void ***)__str);
      return;
    }
    if (v105 != (uint64_t *)&v143)
    {
      uint64_t v107 = (uint64_t)v143;
      uint64_t v106 = v144;
      unint64_t v108 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(v144 - (void)v143) >> 4);
      uint64_t v109 = *(void *)(v3 + 216);
      uint64_t v110 = *(void *)(v3 + 200);
      if (0x2E8BA2E8BA2E8BA3 * ((v109 - v110) >> 4) >= v108)
      {
        if (0x2E8BA2E8BA2E8BA3 * ((*(void *)(v3 + 208) - v110) >> 4) >= v108)
        {
          uint64_t v120 = sub_100DD13F8((uint64_t)v143, v144, *(void *)(v3 + 200));
          for (uint64_t i = *(void *)(v3 + 208); i != v120; sub_100703564(i))
            i -= 176;
          *(void *)(v3 + 208) = v120;
          goto LABEL_297;
        }
        uint64_t v119 = (uint64_t)&v143[4 * ((*(void *)(v3 + 208) - v110) >> 4)];
        sub_100DD13F8((uint64_t)v143, v119, *(void *)(v3 + 200));
        uint64_t v118 = sub_100DD1374(v119, v106, *(void *)(v3 + 208));
      }
      else
      {
        if (v110)
        {
          uint64_t v111 = *(void *)(v3 + 208);
          long long v112 = *(void **)(v3 + 200);
          if (v111 != v110)
          {
            do
            {
              v111 -= 176;
              sub_100703564(v111);
            }
            while (v111 != v110);
            long long v112 = (void *)*v105;
          }
          *(void *)(v3 + 208) = v110;
          operator delete(v112);
          uint64_t v109 = 0;
          *uint64_t v105 = 0;
          *(void *)(v3 + 208) = 0;
          *(void *)(v3 + 216) = 0;
        }
        if (v108 > 0x1745D1745D1745DLL) {
          goto LABEL_322;
        }
        unint64_t v113 = 0x2E8BA2E8BA2E8BA3 * (v109 >> 4);
        uint64_t v114 = 2 * v113;
        if (2 * v113 <= v108) {
          uint64_t v114 = v108;
        }
        unint64_t v115 = v113 >= 0xBA2E8BA2E8BA2ELL ? 0x1745D1745D1745DLL : v114;
        if (v115 > 0x1745D1745D1745DLL) {
LABEL_322:
        }
          sub_10006A748();
        uint64_t v116 = (char *)sub_100DCF64C(v115);
        *(void *)(v3 + 200) = v116;
        *(void *)(v3 + 208) = v116;
        *(void *)(v3 + 216) = &v116[176 * v117];
        uint64_t v118 = sub_100DD1374(v107, v106, (uint64_t)v116);
      }
      *(void *)(v3 + 208) = v118;
    }
LABEL_297:
    uint64_t v122 = *(void *)(v3 + 192);
    if (v122) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v122 + 48))(v122, v3 + 200);
    }
    v123 = *(NSObject **)(v3 + 40);
    if (os_log_type_enabled(v123, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v124 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(v3 + 208) - *(void *)(v3 + 200)) >> 4);
      *(_DWORD *)std::string __str = 136315394;
      *(void *)&__str[4] = a2;
      *(_WORD *)&__str[12] = 2048;
      *(void *)&__str[14] = v124;
      _os_log_impl((void *)&_mh_execute_header, v123, OS_LOG_TYPE_DEFAULT, "#I Active subscriptions updated (%s), size: %zu", __str, 0x16u);
    }
    uint64_t v125 = *(unsigned __int8 **)(v3 + 200);
    id v126 = *(unsigned __int8 **)(v3 + 208);
    if (v125 != v126)
    {
      uint64_t v127 = 0;
      uint64_t v128 = v125 + 167;
      do
      {
        id v129 = *(NSObject **)(v3 + 40);
        if (os_log_type_enabled(v129, OS_LOG_TYPE_DEFAULT))
        {
          __int16 v130 = v128 - 55;
          if ((char)*(v128 - 32) < 0) {
            __int16 v130 = *(unsigned __int8 **)v130;
          }
          asString();
          if (v148 >= 0) {
            id v131 = &v146;
          }
          else {
            id v131 = v146;
          }
          uint64_t v132 = *v128;
          BOOL v133 = (v132 & 0x80u) != 0;
          if ((v132 & 0x80u) != 0) {
            uint64_t v132 = *(void *)(v128 - 15);
          }
          id v134 = (const char *)(v128 - 23);
          if (v133) {
            id v134 = *(const char **)(v128 - 23);
          }
          if (v132) {
            id v135 = v134;
          }
          else {
            id v135 = "<invalid>";
          }
          uint64_t v136 = asString();
          uint64_t v137 = asString();
          ++v127;
          *(_DWORD *)std::string __str = 134219266;
          *(void *)&__str[4] = v127;
          *(_WORD *)&__str[12] = 2080;
          *(void *)&__str[14] = v130;
          *(_WORD *)&__str[22] = 2080;
          *(void *)&__str[24] = v131;
          LOWORD(v150[0]) = 2080;
          *(void *)((char *)v150 + 2) = v135;
          WORD5(v150[0]) = 2080;
          *(void *)((char *)v150 + 12) = v136;
          WORD2(v150[1]) = 2080;
          *(void *)((char *)&v150[1] + 6) = v137;
          _os_log_impl((void *)&_mh_execute_header, v129, OS_LOG_TYPE_DEFAULT, "#I a%zu: uuid:%s label:%s personality:%s data_preferred:%s voice_preferred:%s", __str, 0x3Eu);
          if (SHIBYTE(v148) < 0) {
            operator delete(v146);
          }
          uint64_t v3 = a1;
        }
        id v138 = v128 + 9;
        v128 += 176;
      }
      while (v138 != v126);
    }
    goto LABEL_320;
  }
LABEL_182:
  if (capabilities::ct::supportsThumperService((capabilities::ct *)a1)) {
    goto LABEL_183;
  }
}

void sub_100DCECC8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, char a16, uint64_t a17, uint64_t a18, char *a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  a19 = &a16;
  sub_1007034E0((void ***)&a19);
  _Unwind_Resume(a1);
}

void sub_100DCEE18(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 144);
  uint64_t v2 = (void *)(a1 + 152);
  if (v1 != (void *)(a1 + 152))
  {
    uint64_t v3 = a1;
    uint64_t v23 = 0;
    CFTypeRef v21 = (void *)(a1 + 152);
    do
    {
      id v4 = *(NSObject **)(v3 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v5 = asStringBool(*((unsigned char *)v1 + 208));
        uint64_t v6 = asStringBool(*((unsigned char *)v1 + 209));
        uint64_t v7 = asStringBool(*((unsigned char *)v1 + 210));
        uint64_t v8 = asStringBool(*((unsigned char *)v1 + 211));
        uint64_t v9 = v1 + 19;
        if (*((char *)v1 + 175) < 0) {
          uint64_t v9 = (void *)*v9;
        }
        unint64_t v22 = v9;
        asString();
        uint64_t v10 = v3;
        if (v25 >= 0) {
          p_p = &__p;
        }
        else {
          p_p = __p;
        }
        uint64_t v12 = (const char *)v1[23];
        uint64_t v13 = *((unsigned __int8 *)v1 + 207);
        int v14 = (char)v13;
        if ((v13 & 0x80u) != 0) {
          uint64_t v13 = v1[24];
        }
        if (v14 >= 0) {
          uint64_t v12 = (const char *)(v1 + 23);
        }
        if (v13) {
          int v15 = v12;
        }
        else {
          int v15 = "<invalid>";
        }
        uint64_t v16 = asString();
        uint64_t v17 = asString();
        *(_DWORD *)long long buf = 134220290;
        uint64_t v27 = ++v23;
        __int16 v28 = 2080;
        uint64_t v29 = v5;
        __int16 v30 = 2080;
        uint64_t v31 = v6;
        __int16 v32 = 2080;
        uint64_t v33 = v7;
        __int16 v34 = 2080;
        uint64_t v35 = v8;
        __int16 v36 = 2080;
        long long v37 = v22;
        __int16 v38 = 2080;
        uint64_t v39 = p_p;
        __int16 v40 = 2080;
        int v41 = v15;
        __int16 v42 = 2080;
        uint64_t v43 = v16;
        __int16 v44 = 2080;
        uint64_t v45 = v17;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I c%zu: sim_ready:%s good:%s hidden:%s dataonly:%s uuid:%s label:%s personality:%s data_preferred:%s voice_preferred:%s", buf, 0x66u);
        if (v25 < 0) {
          operator delete(__p);
        }
        uint64_t v3 = v10;
        uint64_t v2 = v21;
      }
      char v18 = (void *)v1[1];
      if (v18)
      {
        do
        {
          long long v19 = v18;
          char v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          long long v19 = (void *)v1[2];
          BOOL v20 = *v19 == (void)v1;
          uint64_t v1 = v19;
        }
        while (!v20);
      }
      uint64_t v1 = v19;
    }
    while (v19 != v2);
  }
}

void sub_100DCF048(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DCF06C(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 424) != a2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 376) + 24)) {
      sub_100DCDAB8(a1, (uint64_t)"data preferred", 0);
    }
  }
}

void sub_100DCF098(uint64_t a1, int a2)
{
  if (*(_DWORD *)(a1 + 428) != a2)
  {
    if (*(unsigned char *)(*(void *)(a1 + 376) + 24)) {
      sub_100DCDAB8(a1, (uint64_t)"voice preferred", 0);
    }
  }
}

uint64_t sub_100DCF0C4(uint64_t result, int a2)
{
  if (*(_DWORD *)(result + 432) != a2) {
    return (*(uint64_t (**)(void))(**(void **)(result + 80) + 16))();
  }
  return result;
}

void sub_100DCF0FC(uint64_t a1, unsigned __int8 **a2)
{
  if (*(unsigned __int8 **)(a1 + 456) == a2[2])
  {
    uint64_t v3 = *(unsigned __int8 **)(a1 + 440);
    uint64_t v4 = a1 + 448;
    if (v3 == (unsigned __int8 *)(a1 + 448)) {
      return;
    }
    uint64_t v5 = *a2;
    while ((sub_1000609C0((uint64_t)&v11, v3 + 32, v5 + 32) & 1) != 0)
    {
      uint64_t v6 = (unsigned __int8 *)*((void *)v3 + 1);
      uint64_t v7 = v3;
      if (v6)
      {
        do
        {
          uint64_t v3 = v6;
          uint64_t v6 = *(unsigned __int8 **)v6;
        }
        while (v6);
      }
      else
      {
        do
        {
          uint64_t v3 = (unsigned __int8 *)*((void *)v7 + 2);
          BOOL v8 = *(void *)v3 == (void)v7;
          uint64_t v7 = v3;
        }
        while (!v8);
      }
      uint64_t v9 = (unsigned __int8 *)*((void *)v5 + 1);
      if (v9)
      {
        do
        {
          uint64_t v10 = v9;
          uint64_t v9 = *(unsigned __int8 **)v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (unsigned __int8 *)*((void *)v5 + 2);
          BOOL v8 = *(void *)v10 == (void)v5;
          uint64_t v5 = v10;
        }
        while (!v8);
      }
      uint64_t v5 = v10;
      if (v3 == (unsigned __int8 *)v4) {
        return;
      }
    }
  }
  sub_100DCDAB8(a1, (uint64_t)"data only plans updated", 0);
}

uint64_t **sub_100DCF1E4(uint64_t **a1, int a2, _DWORD *a3)
{
  uint64_t v6 = a1 + 1;
  uint64_t v5 = a1[1];
  uint64_t v7 = a1 + 1;
  BOOL v8 = a1 + 1;
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        BOOL v8 = (uint64_t **)v5;
        int v9 = *((_DWORD *)v5 + 8);
        if (v9 <= a2) {
          break;
        }
        uint64_t v5 = *v8;
        uint64_t v7 = v8;
        if (!*v8) {
          goto LABEL_8;
        }
      }
      if (v9 >= a2) {
        break;
      }
      uint64_t v5 = v8[1];
      if (!v5)
      {
        uint64_t v7 = v8 + 1;
        goto LABEL_8;
      }
    }
  }
  else
  {
LABEL_8:
    v12[2] = 1;
    uint64_t v10 = (char *)operator new(0xD8uLL);
    v12[1] = v6;
    *((_DWORD *)v10 + 8) = *a3;
    *(_OWORD *)(v10 + 200) = 0u;
    *(_OWORD *)(v10 + 40) = 0u;
    *(_OWORD *)(v10 + 56) = 0u;
    *(_OWORD *)(v10 + 72) = 0u;
    *(_OWORD *)(v10 + 88) = 0u;
    *(_OWORD *)(v10 + 104) = 0u;
    *(_OWORD *)(v10 + 120) = 0u;
    *(_OWORD *)(v10 + 136) = 0u;
    *(_OWORD *)(v10 + 152) = 0u;
    *(_OWORD *)(v10 + 168) = 0u;
    *(_OWORD *)(v10 + 184) = 0u;
    v10[209] = 1;
    sub_100046C38(a1, (uint64_t)v8, v7, (uint64_t *)v10);
    v12[0] = 0;
    sub_100DCF2E8((uint64_t)v12);
    return (uint64_t **)v10;
  }
  return v8;
}

void sub_100DCF2E8(uint64_t a1)
{
  uint64_t v1 = *(void **)a1;
  *(void *)a1 = 0;
  if (v1)
  {
    if (*(unsigned char *)(a1 + 16)) {
      sub_10030AA38((uint64_t)v1 + 32);
    }
    operator delete(v1);
  }
}

void *sub_100DCF340(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100DCF3C4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DCF448(void *a1, uint64_t a2, _DWORD *a3)
{
  uint64_t v5 = a2 + 8;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = operator new(0xD8uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  v6[8] = *a3;
  uint64_t result = sub_1006F0E90((uint64_t)(v6 + 10), (uint64_t)(a3 + 2));
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_100DCF4AC(_Unwind_Exception *a1)
{
  sub_100DCF2E8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DCF4C0(void *a1, uint64_t a2)
{
  uint64_t v2 = 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[1] - *a1) >> 4);
  unint64_t v3 = v2 + 1;
  if ((unint64_t)(v2 + 1) > 0x1745D1745D1745DLL) {
    sub_10006A748();
  }
  uint64_t v6 = a1 + 2;
  if (0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 4) > v3) {
    unint64_t v3 = 0x5D1745D1745D1746 * ((uint64_t)(a1[2] - *a1) >> 4);
  }
  if ((unint64_t)(0x2E8BA2E8BA2E8BA3 * ((uint64_t)(a1[2] - *a1) >> 4)) >= 0xBA2E8BA2E8BA2ELL) {
    unint64_t v7 = 0x1745D1745D1745DLL;
  }
  else {
    unint64_t v7 = v3;
  }
  long long v19 = v6;
  if (v7) {
    unint64_t v7 = (unint64_t)sub_100DCF64C(v7);
  }
  else {
    uint64_t v8 = 0;
  }
  unint64_t v17 = v7;
  *(void *)char v18 = v7 + 176 * v2;
  *(void *)&v18[16] = v7 + 176 * v8;
  sub_1006F0E90(*(uint64_t *)v18, a2);
  uint64_t v9 = 0;
  *(void *)&uint8_t v18[8] = *(void *)v18 + 176;
  uint64_t v11 = *a1;
  for (uint64_t i = a1[1]; i + v9 != v11; sub_1006F0E90(v9 + *(void *)v18, v9 + i))
    v9 -= 176;
  uint64_t v12 = a1[2];
  long long v13 = *(_OWORD *)&v18[8];
  uint64_t v16 = *(void *)&v18[8];
  long long v14 = *(_OWORD *)a1;
  *a1 = *(void *)v18 + v9;
  *(_OWORD *)char v18 = v14;
  *(_OWORD *)(a1 + 1) = v13;
  *(void *)&v18[16] = v12;
  unint64_t v17 = v14;
  sub_100DCF698((uint64_t)&v17);
  return v16;
}

void sub_100DCF614(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100DCF698((uint64_t)va);
  _Unwind_Resume(a1);
}

void *sub_100DCF64C(unint64_t a1)
{
  if (a1 >= 0x1745D1745D1745ELL) {
    sub_10006A7CC();
  }
  return operator new(176 * a1);
}

uint64_t sub_100DCF698(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 176;
    sub_100703564(i - 176);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100DCF6EC(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DCF724(uint64_t a1)
{
}

uint64_t sub_100DCF740(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100DCF784(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100DCF7B0(ServiceManager::Service *this)
{
  *(void *)this = off_101A5AEF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100DCF80C(ServiceManager::Service *this)
{
  *(void *)this = off_101A5AEF0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100DCF87C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "CTXPCSubscriptionManager");
}

unsigned char *sub_100DCF88C@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100DCF8CC(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    sub_100DCD9B8(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100DCD9B8(v4, 0);
}

uint64_t sub_100DCF940()
{
  return 0;
}

uint64_t sub_100DCF948()
{
  return 1;
}

uint64_t sub_100DCF950()
{
  return 0;
}

void sub_100DCF95C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(*(void *)(a1 + 8) + 16);
  if (v1)
  {
    if (std::__shared_weak_count::lock(v1)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100DCFA3C(uint64_t result, int a2, ServiceStage *this)
{
  if (a2 == 2)
  {
    uint64_t v3 = *(void *)(result + 8);
    ServiceStage::holdOffStage((uint64_t *)&group[1], this);
    uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
    if (v4)
    {
      if (std::__shared_weak_count::lock(v4)) {
        operator new();
      }
    }
    sub_100088B9C();
  }
  return result;
}

uint64_t *sub_100DCFB58(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 64));
  sub_100088C88(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100DCFBDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100DCFBF8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v17 = a1;
  uint64_t v18 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  Registry::createRestModuleOneTimeUseConnection(&v19, *(Registry **)(v2 + 48));
  uint64_t v4 = v2 + 64;
  ctu::RestModule::connect();
  if (v20) {
    sub_10004D2C8(v20);
  }
  uint64_t v5 = (uint8_t *)(v2 + 112);
  *(void *)long long buf = off_101A5AF70;
  uint64_t v27 = v2 + 64;
  uint64_t v29 = buf;
  if (buf != (uint8_t *)(v2 + 112))
  {
    uint64_t v6 = *(uint8_t **)(v2 + 136);
    if (v6 == v5)
    {
      uint64_t v23 = v2 + 64;
      uint64_t v24 = 0;
      long long __p = off_101A5AF70;
      uint64_t v29 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v5 + 24))(v2 + 112, buf);
      (*(void (**)(void))(**(void **)(v2 + 136) + 32))(*(void *)(v2 + 136));
      *(void *)(v2 + 136) = 0;
      uint64_t v29 = buf;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v2 + 112);
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else
    {
      *(void *)(v2 + 112) = off_101A5AF70;
      *(void *)(v2 + 120) = v4;
      uint64_t v29 = v6;
    }
    *(void *)(v2 + 136) = v5;
  }
  sub_100DCF3C4(buf);
  uint64_t v7 = *(void *)(v2 + 136);
  if (v7) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v7 + 48))(v7, v2 + 144);
  }
  uint64_t v8 = (uint8_t *)(v2 + 168);
  *(void *)long long buf = off_101A5B000;
  uint64_t v27 = v2 + 64;
  uint64_t v29 = buf;
  if (buf != (uint8_t *)(v2 + 168))
  {
    uint64_t v9 = *(uint8_t **)(v2 + 192);
    if (v9 == v8)
    {
      uint64_t v23 = v2 + 64;
      uint64_t v24 = 0;
      long long __p = off_101A5B000;
      uint64_t v29 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v8 + 24))(v2 + 168, buf);
      (*(void (**)(void))(**(void **)(v2 + 192) + 32))(*(void *)(v2 + 192));
      *(void *)(v2 + 192) = 0;
      uint64_t v29 = buf;
      (*((void (**)(void **, uint64_t))__p + 3))(&__p, v2 + 168);
      (*((void (**)(void **))__p + 4))(&__p);
    }
    else
    {
      *(void *)(v2 + 168) = off_101A5B000;
      *(void *)(v2 + 176) = v4;
      uint64_t v29 = v9;
    }
    *(void *)(v2 + 192) = v8;
  }
  sub_100DCF340(buf);
  uint64_t v10 = *(void *)(v2 + 192);
  if (v10) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 48))(v10, v2 + 200);
  }
  sub_100058DB0(&__p, "/cc/props/assigned_sim_labels");
  *(void *)long long buf = off_101A5B090;
  uint64_t v27 = v2 + 392;
  uint64_t v28 = v2;
  uint64_t v29 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  sub_100058DB0(&__p, "/cc/prefs-nb/user_default_voice_slot");
  uint64_t v11 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v11 = off_101A5B110;
  *((void *)v11 + 1) = v2 + 428;
  *((void *)v11 + 2) = v2;
  *((void *)v11 + 3) = sub_100DCF098;
  *((void *)v11 + 4) = 0;
  uint64_t v29 = v11;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  uint64_t v29 = 0;
  uint64_t v25 = 0;
  v21[0] = off_101A5B190;
  v21[1] = v2;
  v21[3] = v21;
  PersonalitiesTracker::bind();
  sub_100100490(v21);
  sub_10010040C(&__p);
  uint64_t v12 = (capabilities::ct *)sub_100100388(buf);
  if (capabilities::ct::supportsGemini(v12))
  {
    sub_100058DB0(&__p, "/cc/prefs-nb/activation_gemini_support");
    long long v13 = (uint8_t *)operator new(0x28uLL);
    *(void *)long long v13 = off_101A5B220;
    *((void *)v13 + 1) = v2 + 432;
    *((void *)v13 + 2) = v2;
    *((void *)v13 + 3) = sub_100DCF0C4;
    *((void *)v13 + 4) = 0;
    uint64_t v29 = v13;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
    sub_100058DB0(&__p, "/cc/props/user_preferred_data_slot");
    long long v14 = (uint8_t *)operator new(0x28uLL);
    *(void *)long long v14 = off_101A5B2A0;
    *((void *)v14 + 1) = v2 + 424;
    *((void *)v14 + 2) = v2;
    *((void *)v14 + 3) = sub_100DCF06C;
    *((void *)v14 + 4) = 0;
    uint64_t v29 = v14;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p);
    }
  }
  sub_100058DB0(&__p, "/cc/props/data_only_plans");
  int v15 = (uint8_t *)operator new(0x28uLL);
  *(void *)int v15 = off_101A5B320;
  *((void *)v15 + 1) = v2 + 440;
  *((void *)v15 + 2) = v2;
  *((void *)v15 + 3) = sub_100DCF0FC;
  *((void *)v15 + 4) = 0;
  uint64_t v29 = v15;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p);
  }
  sub_100088C88(&v18);
  return sub_100046B58((uint64_t *)&v17);
}

void sub_100DD0288(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100DD0334()
{
}

void *sub_100DD0348(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5AF70;
  result[1] = v3;
  return result;
}

uint64_t sub_100DD0390(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5AF70;
  a2[1] = v2;
  return result;
}

void sub_100DD03BC(int a1, rest *this)
{
  xpc_object_t v5 = 0;
  rest::write_rest_value((uint64_t *)&v5, this, (const SubscriptionInfo *)this);
  sub_100058DB0(&__p, "/cc/props/subscription_info");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100DD0460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100DD04A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD04E4()
{
}

void sub_100DD04F4()
{
}

void *sub_100DD0508(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5B000;
  result[1] = v3;
  return result;
}

uint64_t sub_100DD0550(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5B000;
  a2[1] = v2;
  return result;
}

void sub_100DD057C(int a1, rest *this)
{
  xpc_object_t v5 = 0;
  rest::write_rest_value((uint64_t *)&v5, this, (const ActiveSubscriptions *)this);
  sub_100058DB0(&__p, "/cc/props/active_subscriptions");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100DD0620(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100DD0664(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD06A4()
{
}

void sub_100DD06B4()
{
}

__n128 sub_100DD06C8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A5B090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100DD0714(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DD0744(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v4 = *(void *)(a1 + 8);
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_null)
  {
    if (*(unsigned char *)(v4 + 24))
    {
      sub_10023A670(v4, *(void **)(v4 + 8));
      *(unsigned char *)(v4 + 24) = 0;
    }
  }
  else
  {
    if (!*(unsigned char *)(v4 + 24))
    {
      *((void *)&v8 + 1) = 0;
      uint64_t v9 = 0;
      *(void *)&long long v8 = (char *)&v8 + 8;
      sub_10023B964(v4, &v8);
      sub_10023A670((uint64_t)&v8, *((void **)&v8 + 1));
    }
    sub_10023B9DC(v4, a2);
  }
  uint64_t v5 = *(void *)(a1 + 16);
  if (*(unsigned char *)(v5 + 416))
  {
    uint64_t v6 = *(NSObject **)(v5 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = *(void *)(v5 + 408);
      LODWORD(v8) = 134217984;
      *(void *)((char *)&v8 + 4) = v7;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Labels updated with %zu elems", (uint8_t *)&v8, 0xCu);
    }
    sub_100DCDAB8(v5, (uint64_t)"label changed", 0);
  }
}

void sub_100DD0880(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10)
{
}

uint64_t sub_100DD08A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD08E0()
{
}

void sub_100DD08F0()
{
}

__n128 sub_100DD0904(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5B110;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DD0958(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DD0990(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100DD0A88(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD0AC8()
{
}

void sub_100DD0AD8()
{
}

void *sub_100DD0AEC(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5B190;
  result[1] = v3;
  return result;
}

uint64_t sub_100DD0B34(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5B190;
  a2[1] = v2;
  return result;
}

void sub_100DD0B60(uint64_t a1, void *a2)
{
  uint64_t v3 = *(void *)(a1 + 8);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (uint64_t)(*(void *)(*(void *)(v3 + 376) + 8) - **(void **)(v3 + 376)) >> 4;
    int v6 = 134217984;
    uint64_t v7 = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Personalities updated with %zd elems", (uint8_t *)&v6, 0xCu);
  }
  sub_100DCDAB8(v3, (uint64_t)"personalities changed", a2[1] == *a2);
}

uint64_t sub_100DD0C34(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD0C74()
{
}

void sub_100DD0C84()
{
}

__n128 sub_100DD0C98(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5B220;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DD0CEC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B220;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DD0D24(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100DD0E1C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD0E5C()
{
}

void sub_100DD0E6C()
{
}

__n128 sub_100DD0E80(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5B2A0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DD0ED4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B2A0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DD0F0C(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (unsigned int *)a1[1];
  uint64_t v5 = *v4;
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    unsigned int v14 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v14, (int *)a2, v7);
    *uint64_t v4 = v14;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v7);
  }
  uint64_t v10 = (uint64_t (*)(void *, uint64_t))a1[3];
  uint64_t v11 = a1[4];
  uint64_t v12 = (void *)(a1[2] + (v11 >> 1));
  if (v11) {
    uint64_t v10 = *(uint64_t (**)(void *, uint64_t))(*v12 + v10);
  }
  return v10(v12, v5);
}

uint64_t sub_100DD1004(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD1044()
{
}

void sub_100DD1054()
{
}

__n128 sub_100DD1068(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5B320;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DD10BC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B320;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DD10F4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v9 = (char **)*v3;
  uint64_t v10 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_1000E4B84((uint64_t)v3, a2);
  int v6 = (void (*)(void *, char ***))a1[3];
  uint64_t v7 = a1[4];
  long long v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    int v6 = *(void (**)(void *, char ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_10005CD2C((uint64_t)&v9, v10);
}

void sub_100DD11B4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

uint64_t sub_100DD11CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD120C()
{
}

void sub_100DD1218(uint64_t **a1)
{
  uint64_t v4 = a1;
  uint64_t v1 = **a1;
  uint64_t v2 = *(NSObject **)(v1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(v1 + 160);
    *(_DWORD *)long long buf = 134217984;
    uint64_t v6 = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Subscription info initialized, size: %zu", buf, 0xCu);
  }
  sub_100DCEE18(v1);
  operator delete();
}

void sub_100DD12F0()
{
}

uint64_t sub_100DD131C(uint64_t a1)
{
  sub_10030A9DC(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_10030A9DC(*(void *)a1, v2);
  }
  return a1;
}

uint64_t sub_100DD1374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v6 = 0;
    do
    {
      sub_1006F0E90(a3 + v6, a1 + v6);
      v6 += 176;
    }
    while (a1 + v6 != a2);
    a3 += v6;
  }
  return a3;
}

void sub_100DD13D4(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 176;
    do
    {
      sub_100703564(v4 + v2);
      v2 -= 176;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DD13F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      *(_DWORD *)a3 = *(_DWORD *)v5;
      std::string::operator=((std::string *)(a3 + 8), (const std::string *)(v5 + 8));
      std::string::operator=((std::string *)(a3 + 32), (const std::string *)(v5 + 32));
      std::string::operator=((std::string *)(a3 + 56), (const std::string *)(v5 + 56));
      *(unsigned char *)(a3 + 80) = *(unsigned char *)(v5 + 80);
      std::string::operator=((std::string *)(a3 + 88), (const std::string *)(v5 + 88));
      std::string::operator=((std::string *)(a3 + 112), (const std::string *)(v5 + 112));
      *(void *)(a3 + 136) = *(void *)(v5 + 136);
      std::string::operator=((std::string *)(a3 + 144), (const std::string *)(v5 + 144));
      *(_DWORD *)(a3 + 168) = *(_DWORD *)(v5 + 168);
      a3 += 176;
      v5 += 176;
    }
    while (v5 != a2);
  }
  return a3;
}

uint64_t sub_100DD14AC(uint64_t a1, void *a2, long long *a3, char *a4, uint64_t a5)
{
  uint64_t v9 = a1 + 8;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v14, kCtLoggingSystemName, a4);
  sub_100DD15CC(v9, &v14);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
  *(void *)a1 = off_101A5B3A0;
  *(void *)(a1 + 40) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 48) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v11 = (unsigned char *)(a1 + 56);
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(v11, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v12 = *a3;
    *(void *)(a1 + 72) = *((void *)a3 + 2);
    *(_OWORD *)uint64_t v11 = v12;
  }
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 152) = a5;
  *(void *)(a1 + 160) = 0;
  return a1;
}

void sub_100DD159C(_Unwind_Exception *a1)
{
  uint64_t v4 = *(std::__shared_weak_count **)(v1 + 48);
  if (v4) {
    sub_10004D2C8(v4);
  }
  sub_1006C7390(v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD15CC(uint64_t a1, const OsLogContext *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v4, a2);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 24), (const ctu::OsLogLogger *)v4);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v4);
  return a1;
}

void sub_100DD161C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DD1644(uint64_t a1)
{
  *(void *)a1 = off_101A5B3A0;
  uint64_t v2 = *(void *)(a1 + 160);
  if (v2
    && ((*(void (**)(uint64_t))(*(void *)v2 + 16))(v2),
        uint64_t v3 = *(void *)(a1 + 160),
        *(void *)(a1 + 160) = 0,
        v3))
  {
    (*(void (**)(uint64_t))(*(void *)v3 + 8))(v3);
    uint64_t v4 = *(void *)(a1 + 160);
    *(void *)(a1 + 160) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
  }
  else
  {
    *(void *)(a1 + 160) = 0;
  }
  long long v8 = (void **)(a1 + 128);
  sub_10005CBF0(&v8);
  long long v8 = (void **)(a1 + 104);
  sub_10005CBF0(&v8);
  long long v8 = (void **)(a1 + 80);
  sub_100DD404C(&v8);
  if (*(char *)(a1 + 79) < 0) {
    operator delete(*(void **)(a1 + 56));
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 48);
  if (v5) {
    sub_10004D2C8(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 32));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6) {
    std::__shared_weak_count::__release_weak(v6);
  }
  return a1;
}

void sub_100DD1788(uint64_t a1)
{
  sub_100DD1644(a1);

  operator delete();
}

void sub_100DD17C0(uint64_t a1, int a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = "relinquished";
    if (a2) {
      uint64_t v6 = "acquired";
    }
    uint64_t v8 = *(void *)(a1 + 104);
    uint64_t v7 = *(void *)(a1 + 112);
    *(_DWORD *)long long buf = 136315650;
    BOOL v20 = v5;
    __int16 v21 = 2080;
    unint64_t v22 = v6;
    __int16 v23 = 2048;
    uint64_t v24 = (v7 - v8) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' being %s, Calling %zu call back(s)", buf, 0x20u);
  }
  uint64_t v9 = *(NSObject ****)(a1 + 104);
  for (uint64_t i = *(NSObject ****)(a1 + 112); v9 != i; v9 += 2)
  {
    uint64_t v11 = *v9;
    long long v12 = (*v9)[1];
    if (v12)
    {
      long long v13 = _Block_copy(v12);
      uint64_t v11 = *v9;
    }
    else
    {
      long long v13 = 0;
    }
    OsLogContext v14 = *v11;
    v16[0] = _NSConcreteStackBlock;
    v16[1] = 1174405120;
    unint64_t v16[2] = sub_100DD19AC;
    v16[3] = &unk_101A5B3D0;
    if (v13) {
      int v15 = _Block_copy(v13);
    }
    else {
      int v15 = 0;
    }
    aBlocuint64_t k = v15;
    char v18 = a2;
    dispatch_async(v14, v16);
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v13) {
      _Block_release(v13);
    }
  }
}

void sub_100DD198C(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DD19AC(uint64_t a1)
{
  return (*(uint64_t (**)(void, void))(*(void *)(a1 + 32) + 16))(*(void *)(a1 + 32), *(unsigned __int8 *)(a1 + 40));
}

void *sub_100DD19C4(uint64_t a1, uint64_t a2)
{
  __n128 result = *(void **)(a2 + 32);
  if (result) {
    __n128 result = _Block_copy(result);
  }
  *(void *)(a1 + 32) = result;
  return result;
}

void sub_100DD19F8(uint64_t a1)
{
  uint64_t v1 = *(const void **)(a1 + 32);
  if (v1) {
    _Block_release(v1);
  }
}

void sub_100DD1A1C(uint64_t a1, long long *a2, int a3)
{
  uint64_t v6 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v7 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v7 = (void *)*v7;
    }
    uint64_t v8 = "relinquished";
    if (a3) {
      uint64_t v8 = "acquired";
    }
    uint64_t v10 = *(void *)(a1 + 128);
    uint64_t v9 = *(void *)(a1 + 136);
    *(_DWORD *)long long buf = 136315650;
    uint64_t v24 = v7;
    __int16 v25 = 2080;
    BOOL v26 = v8;
    __int16 v27 = 2048;
    uint64_t v28 = (v9 - v10) >> 4;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' being %s, Calling %zu per assertion call back(s)", buf, 0x20u);
  }
  uint64_t v11 = *(NSObject ****)(a1 + 128);
  for (uint64_t i = *(NSObject ****)(a1 + 136); v11 != i; v11 += 2)
  {
    long long v13 = *v11;
    OsLogContext v14 = (*v11)[1];
    if (v14)
    {
      int v15 = _Block_copy(v14);
      long long v13 = *v11;
    }
    else
    {
      int v15 = 0;
    }
    uint64_t v16 = *v13;
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_100DD1C7C;
    block[3] = &unk_101A5B400;
    if (v15) {
      unint64_t v17 = _Block_copy(v15);
    }
    else {
      unint64_t v17 = 0;
    }
    aBlocuint64_t k = v17;
    if (*((char *)a2 + 23) < 0)
    {
      sub_10004FC84(&__p, *(void **)a2, *((void *)a2 + 1));
    }
    else
    {
      long long __p = *a2;
      uint64_t v21 = *((void *)a2 + 2);
    }
    char v22 = a3;
    dispatch_async(v16, block);
    if (SHIBYTE(v21) < 0) {
      operator delete((void *)__p);
    }
    if (aBlock) {
      _Block_release(aBlock);
    }
    if (v15) {
      _Block_release(v15);
    }
  }
}

void sub_100DD1C30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *aBlock)
{
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (v14) {
    _Block_release(v14);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD1C7C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 32);
  if (*(char *)(a1 + 63) < 0)
  {
    sub_10004FC84(__p, *(void **)(a1 + 40), *(void *)(a1 + 48));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a1 + 40);
    uint64_t v4 = *(void *)(a1 + 56);
  }
  (*(void (**)(uint64_t, void **, void))(v2 + 16))(v2, __p, *(unsigned __int8 *)(a1 + 64));
  if (SHIBYTE(v4) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DD1D04(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

unsigned char *sub_100DD1D20(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 32);
  if (v4) {
    uint64_t v4 = _Block_copy(v4);
  }
  *(void *)(a1 + 32) = v4;
  __n128 result = (unsigned char *)(a1 + 40);
  if (*(char *)(a2 + 63) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 40), *(void *)(a2 + 48));
  }
  long long v6 = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(_OWORD *)__n128 result = v6;
  return result;
}

void sub_100DD1D80(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(const void **)(v1 + 32);
  if (v3) {
    _Block_release(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD1DA0(uint64_t a1)
{
  if (*(char *)(a1 + 63) < 0) {
    operator delete(*(void **)(a1 + 40));
  }
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
}

void sub_100DD1DE0(uint64_t a1, uint64_t *a2)
{
  uint64_t v4 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      uint64_t v5 = (void *)*v5;
    }
    uint64_t v6 = *a2;
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v5;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v6;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' expiration will be checked in %lld seconds", buf, 0x16u);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v7 || (uint64_t v8 = std::__shared_weak_count::lock(v7)) == 0) {
    sub_100088B9C();
  }
  uint64_t v9 = v8;
  atomic_fetch_add_explicit(&v8->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v8);
  Registry::getTimerService(&v17, *(Registry **)(a1 + 40));
  sub_100058DB0(__p, "assertion expiration");
  atomic_fetch_add_explicit(&v9->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  *(_OWORD *)long long buf = *(_OWORD *)__p;
  *(void *)&uint8_t buf[16] = v16;
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v16 = 0;
  ctu::TimerService::createOneShotTimerImpl();
  if ((buf[23] & 0x80000000) != 0) {
    operator delete(*(void **)buf);
  }
  uint64_t v10 = v19;
  uint64_t v19 = 0;
  uint64_t v11 = *(void *)(a1 + 160);
  *(void *)(a1 + 160) = v10;
  if (v11)
  {
    (*(void (**)(uint64_t))(*(void *)v11 + 8))(v11);
    uint64_t v12 = v19;
    uint64_t v19 = 0;
    if (v12) {
      (*(void (**)(uint64_t))(*(void *)v12 + 8))(v12);
    }
  }
  if (SHIBYTE(v16) < 0) {
    operator delete(__p[0]);
  }
  if (v18) {
    sub_10004D2C8(v18);
  }
  long long v13 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    OsLogContext v14 = (void *)(a1 + 56);
    if (*(char *)(a1 + 79) < 0) {
      OsLogContext v14 = (void *)*v14;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v14;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' expiration timer created", buf, 0xCu);
  }
  std::__shared_weak_count::__release_weak(v9);
  std::__shared_weak_count::__release_weak(v9);
}

void sub_100DD209C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, std::__shared_weak_count *a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (*(char *)(v25 - 57) < 0) {
    operator delete(*(void **)(v25 - 80));
  }
  if (a16) {
    std::__shared_weak_count::__release_weak(a16);
  }
  if (a22 < 0) {
    operator delete(__p);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  std::__shared_weak_count::__release_weak(v24);
  _Unwind_Resume(a1);
}

void sub_100DD2100(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[6];
  if (v2)
  {
    uint64_t v3 = (os_unfair_lock_s *)a1[4];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (a1[5])
      {
        v6[0] = _NSConcreteStackBlock;
        v6[1] = 0x40000000;
        v6[2] = sub_100DD21C4;
        v6[3] = &unk_101A5B430;
        v6[4] = v3;
        os_unfair_lock_lock(v3 + 6);
        sub_100DD21C4((uint64_t)v6);
        os_unfair_lock_unlock(v3 + 6);
      }
      sub_10004D2C8(v5);
    }
  }
}

void sub_100DD21C4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t i = 0;
  Registry::getTimerService((uint64_t *)buf, *(Registry **)(v1 + 40));
  uint64_t v2 = (***(uint64_t (****)(void))buf)(*(void *)buf);
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v3 = *(NSObject **)(v1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v1 + 56);
    if (*(char *)(v1 + 79) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' expiration timer fired", buf, 0xCu);
  }
  int64x2_t v38 = 0uLL;
  unint64_t v39 = 0;
  uint64_t v5 = *(long long **)(v1 + 80);
  uint64_t v6 = *(uint64_t **)(v1 + 88);
  if (v5 == (long long *)v6)
  {
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    uint64_t i = 0;
  }
  else
  {
    uint64_t v7 = 0;
    int v8 = 0;
    int v9 = 0;
    int v10 = 0;
    uint64_t v11 = 0;
    uint64_t v36 = v2;
    do
    {
      if (*((unsigned char *)v5 + 40))
      {
        ++v10;
      }
      else
      {
        ++v9;
        uint64_t v12 = *((void *)v5 + 4) + 1000000000 * *(void *)(v1 + 152);
        BOOL v13 = v12 <= v2;
        uint64_t v14 = v12 - v2;
        if (v13)
        {
          char v18 = *(NSObject **)(v1 + 32);
          if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v19 = v1 + 56;
            if (*(char *)(v1 + 79) < 0) {
              uint64_t v19 = *(void *)(v1 + 56);
            }
            BOOL v20 = v5;
            if (*((char *)v5 + 23) < 0) {
              BOOL v20 = *(long long **)v5;
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = v19;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v20;
            _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' by %s expired, closing related xpc connection", buf, 0x16u);
            uint64_t v7 = (void *)v38.i64[1];
          }
          if ((unint64_t)v7 >= v39)
          {
            unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * (((uint64_t)v7 - v38.i64[0]) >> 4);
            unint64_t v22 = v21 + 1;
            if (v21 + 1 > 0x555555555555555) {
              sub_10006A748();
            }
            if (0x5555555555555556 * ((uint64_t)(v39 - v38.i64[0]) >> 4) > v22) {
              unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v39 - v38.i64[0]) >> 4);
            }
            if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v39 - v38.i64[0]) >> 4) >= 0x2AAAAAAAAAAAAAALL) {
              unint64_t v23 = 0x555555555555555;
            }
            else {
              unint64_t v23 = v22;
            }
            uint64_t v43 = &v39;
            if (v23) {
              unint64_t v23 = (unint64_t)sub_100A52878(v23);
            }
            else {
              uint64_t v24 = 0;
            }
            *(void *)long long buf = v23;
            *(void *)&uint8_t buf[8] = v23 + 48 * v21;
            *(void *)&uint8_t buf[16] = *(void *)&buf[8];
            unint64_t v42 = v23 + 48 * v24;
            sub_100DD4128(*(void **)&buf[8], v5);
            uint64_t v25 = *(void *)&buf[8];
            uint64_t v7 = (void *)(*(void *)&buf[16] + 48);
            *(void *)&buf[16] += 48;
            BOOL v26 = (long long *)v38.i64[1];
            if (v38.i64[1] == v38.i64[0])
            {
              int64x2_t v27 = vdupq_n_s64(v38.u64[1]);
            }
            else
            {
              do
              {
                v26 -= 3;
                uint64_t v25 = sub_100DD4230(v25 - 48, v26);
              }
              while (v26 != (long long *)v38.i64[0]);
              int64x2_t v27 = v38;
              uint64_t v7 = *(void **)&buf[16];
            }
            v38.i64[0] = v25;
            v38.i64[1] = (uint64_t)v7;
            *(int64x2_t *)&uint8_t buf[8] = v27;
            unint64_t v28 = v39;
            unint64_t v39 = v42;
            unint64_t v42 = v28;
            *(void *)long long buf = v27.i64[0];
            sub_100DD4294((uint64_t)buf);
            uint64_t v2 = v36;
          }
          else
          {
            sub_100DD4128(v7, v5);
            v7 += 6;
          }
          v38.i64[1] = (uint64_t)v7;
          ++v8;
        }
        else
        {
          uint64_t v15 = v14 / 1000000000;
          uint64_t v16 = v14 / 1000000000 + 1;
          if (!v11 || (v11 > v15 ? (BOOL v17 = v11 == v16) : (BOOL v17 = 1), !v17)) {
            uint64_t v11 = v16;
          }
        }
      }
      v5 += 3;
    }
    while (v5 != (long long *)v6);
    uint64_t v29 = v38.i64[0];
    for (uint64_t i = v11; (void *)v29 != v7; v29 += 48)
    {
      __int16 v30 = *(void **)(v29 + 24);
      xpc_object_t object = v30;
      if (v30) {
        xpc_retain(v30);
      }
      else {
        xpc_object_t object = xpc_null_create();
      }
      sub_100DD2768((void *)v1, &object, 1);
      xpc_release(object);
      xpc_object_t object = 0;
      *(unsigned char *)(v29 + 40) = 1;
    }
  }
  uint64_t v31 = *(NSObject **)(v1 + 32);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    __int16 v32 = (void *)(v1 + 56);
    if (*(char *)(v1 + 79) < 0) {
      __int16 v32 = (void *)*v32;
    }
    uint64_t v33 = *(void *)(v1 + 152);
    unint64_t v34 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(v1 + 88) - *(void *)(v1 + 80)) >> 4);
    *(_DWORD *)long long buf = 136316674;
    *(void *)&uint8_t buf[4] = v32;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = v33;
    *(_WORD *)&unsigned char buf[22] = 2048;
    unint64_t v42 = v11;
    LOWORD(v43) = 1024;
    *(_DWORD *)((char *)&v43 + 2) = v10;
    HIWORD(v43) = 1024;
    int v44 = v9;
    __int16 v45 = 1024;
    int v46 = v8;
    __int16 v47 = 2048;
    unint64_t v48 = v34;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' expiration timer fired result: fExpirationTimeout=%lld nextTimeout=%lld expired=%u unexpired=%u newExpired=%d fAssertions.size(): %lu", buf, 0x3Cu);
  }
  if (*(void *)(v1 + 152) && v11)
  {
    sub_100DD1DE0(v1, &i);
  }
  else
  {
    uint64_t v35 = *(void *)(v1 + 160);
    *(void *)(v1 + 160) = 0;
    if (v35) {
      (*(void (**)(uint64_t))(*(void *)v35 + 8))(v35);
    }
  }
  *(void *)long long buf = &v38;
  sub_100DD404C((void ***)buf);
}

void sub_100DD26B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object, char a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char *a20,char a21,uint64_t a22)
{
  a20 = &a15;
  sub_100DD404C((void ***)&a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD273C(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DD2758(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100DD2768(void *a1, xpc_object_t *a2, int a3)
{
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_connection)
  {
    uint64_t v6 = a1[10];
    uint64_t v7 = a1[11];
    if (v6 == v7) {
      goto LABEL_29;
    }
    while (!xpc_equal(*(xpc_object_t *)(v6 + 24), *a2))
    {
      v6 += 48;
      if (v6 == v7)
      {
        uint64_t v6 = v7;
        break;
      }
    }
    if (v6 == a1[11]) {
      goto LABEL_29;
    }
    __dst[1] = 0;
    uint64_t v22 = 0;
    __dst[0] = 0;
    if (*(char *)(v6 + 23) < 0)
    {
      sub_10004FC84(__dst, *(void **)v6, *(void *)(v6 + 8));
    }
    else
    {
      long long v8 = *(_OWORD *)v6;
      uint64_t v22 = *(void *)(v6 + 16);
      *(_OWORD *)long long __dst = v8;
    }
    (*(void (**)(void *, xpc_object_t *, uint64_t))(*a1 + 24))(a1, a2, v6);
    int v9 = a1[4];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = a1 + 7;
      if (*((char *)a1 + 79) < 0) {
        int v10 = (void *)*v10;
      }
      uint64_t v11 = (void *)v6;
      if (*(char *)(v6 + 23) < 0) {
        uint64_t v11 = *(void **)v6;
      }
      Registry::getTimerService((uint64_t *)&v19, (Registry *)a1[5]);
      uint64_t v12 = ((**v19)(v19) - *(void *)(v6 + 32)) / 1000000;
      uint64_t v13 = (uint64_t)(a1[11] - a1[10]) >> 4;
      *(_DWORD *)long long buf = 136315906;
      uint64_t v24 = v10;
      __int16 v25 = 2080;
      BOOL v26 = v11;
      __int16 v27 = 2048;
      uint64_t v28 = v12;
      __int16 v29 = 2048;
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * v13 - 1;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' by %s for %lld ms removed; total assertion count is now %zu",
        buf,
        0x2Au);
      if (v20) {
        sub_10004D2C8(v20);
      }
    }
    uint64_t v14 = sub_100DD4370((long long *)(v6 + 48), (long long *)a1[11], v6);
    for (uint64_t i = a1[11]; i != v14; sub_100DD40D0(i))
      i -= 48;
    a1[11] = v14;
    uint64_t v16 = a1[10];
    if (v16 == v14)
    {
      (*(void (**)(void *))(*a1 + 16))(a1);
      uint64_t v16 = a1[10];
      uint64_t v14 = a1[11];
    }
    if (v16 == v14) {
      sub_100DD17C0((uint64_t)a1, 0);
    }
    if (SHIBYTE(v22) < 0)
    {
      sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)__dst;
      uint64_t v18 = v22;
    }
    sub_100DD1A1C((uint64_t)a1, (long long *)__p, 0);
    if (SHIBYTE(v18) < 0) {
      operator delete(__p[0]);
    }
    if ((SHIBYTE(v22) & 0x80000000) == 0)
    {
LABEL_29:
      if (!a3) {
        return;
      }
    }
    else
    {
      operator delete(__dst[0]);
      if (!a3) {
        return;
      }
    }
    xpc_connection_cancel((xpc_connection_t)*a2);
  }
}

void sub_100DD2A84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23)
{
  if (a17) {
    sub_10004D2C8(a17);
  }
  if (a23 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD2AD8(os_unfair_lock_s *a1, void **a2, long long *a3)
{
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1174405120;
  long long v8 = sub_100DD2BF4;
  int v9 = &unk_101A5B480;
  uint64_t v5 = *a2;
  int v10 = a1;
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v13 = *((void *)a3 + 2);
  }
  uint64_t v6 = a1 + 6;
  os_unfair_lock_lock(v6);
  v8((uint64_t)v7);
  os_unfair_lock_unlock(v6);
  if (SHIBYTE(v13) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
}

void sub_100DD2BD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
}

void sub_100DD2BF4(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 32);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) != (xpc_type_t)&_xpc_type_connection) {
    goto LABEL_38;
  }
  uint64_t v4 = (_OWORD *)(a1 + 48);
  int v5 = (*(uint64_t (**)(void *, void **, uint64_t))(*v3 + 32))(v3, v2, a1 + 48);
  if (v5)
  {
    uint64_t v6 = v3 + 10;
    if (v3[10] == v3[11]) {
      sub_100DD17C0((uint64_t)v3, 1);
    }
    if (*(char *)(a1 + 71) < 0)
    {
      sub_10004FC84(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)long long __p = *v4;
      uint64_t v24 = *(void *)(a1 + 64);
    }
    sub_100DD1A1C((uint64_t)v3, (long long *)__p, 1);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    Registry::getTimerService((uint64_t *)&v20, (Registry *)v3[5]);
    uint64_t v22 = (**v20)(v20);
    sub_100DD42E4(buf, (long long *)(a1 + 48), v2, &v22);
    unint64_t v7 = v3[12];
    unint64_t v8 = v3[11];
    if (v8 >= v7)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v6) >> 4);
      if (v10 + 1 > 0x555555555555555) {
        sub_10006A748();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v6) >> 4);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v10 + 1) {
        uint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x555555555555555;
      }
      else {
        unint64_t v13 = v12;
      }
      v25[4] = v3 + 12;
      if (v13) {
        unint64_t v13 = (unint64_t)sub_100A52878(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v13 + 48 * v10;
      v25[0] = v13;
      v25[1] = v15;
      v25[3] = v13 + 48 * v14;
      sub_100DD4230(v15, (long long *)buf);
      v25[2] = v15 + 48;
      sub_100DD41A8(v3 + 10, v25);
      uint64_t v9 = v3[11];
      sub_100DD4294((uint64_t)v25);
    }
    else
    {
      uint64_t v9 = sub_100DD4230(v8, (long long *)buf) + 48;
    }
    v3[11] = v9;
    xpc_release(object);
    xpc_object_t object = 0;
    if (SHIBYTE(v29) < 0) {
      operator delete(*(void **)buf);
    }
    if (v21) {
      sub_10004D2C8(v21);
    }
    if (v3[19] && !v3[20]) {
      sub_100DD1DE0((uint64_t)v3, v3 + 19);
    }
  }
  uint64_t v16 = v3[4];
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    BOOL v17 = v3 + 7;
    if (*((char *)v3 + 79) < 0) {
      BOOL v17 = (void *)*v17;
    }
    if (*(char *)(a1 + 71) < 0) {
      uint64_t v4 = *(_OWORD **)v4;
    }
    uint64_t v18 = "false";
    if (v5) {
      uint64_t v18 = "true";
    }
    uint64_t v19 = (uint64_t)(v3[11] - v3[10]) >> 4;
    *(_DWORD *)long long buf = 136315906;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v27 = 2080;
    uint64_t v28 = v4;
    __int16 v29 = 2080;
    xpc_object_t object = v18;
    __int16 v31 = 2048;
    unint64_t v32 = 0xAAAAAAAAAAAAAAABLL * v19;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I Assertion '%s' by %s added=%s; total assertion count is now %zu",
      buf,
      0x2Au);
  }
  if ((v5 & 1) == 0)
  {
LABEL_38:
    if (v3[10] == v3[11]) {
      (*(void (**)(void *))(*v3 + 16))(v3);
    }
  }
}

void sub_100DD2F6C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,char a24)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DD2FC4(uint64_t a1)
{
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0) {
    operator delete(*(void **)a1);
  }
  return a1;
}

unsigned char *sub_100DD3008(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    *(void *)(a1 + 40) = xpc_null_create();
  }
  __n128 result = (unsigned char *)(a1 + 48);
  if (*(char *)(a2 + 71) < 0) {
    return sub_10004FC84(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  long long v6 = *(_OWORD *)(a2 + 48);
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  *(_OWORD *)__n128 result = v6;
  return result;
}

void sub_100DD3080(_Unwind_Exception *a1)
{
  sub_100C627D0(v1);
  _Unwind_Resume(a1);
}

void sub_100DD3098(uint64_t a1)
{
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void sub_100DD30D8(os_unfair_lock_s *a1, void **a2, long long *a3, char a4)
{
  v8[0] = _NSConcreteStackBlock;
  v8[1] = 1174405120;
  uint64_t v9 = sub_100DD31F8;
  unint64_t v10 = &unk_101A5B4B0;
  char v15 = a4;
  long long v6 = *a2;
  unint64_t v11 = a1;
  xpc_object_t object = v6;
  if (v6) {
    xpc_retain(v6);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v14 = *((void *)a3 + 2);
  }
  unint64_t v7 = a1 + 6;
  os_unfair_lock_lock(v7);
  v9((uint64_t)v8);
  os_unfair_lock_unlock(v7);
  if (SHIBYTE(v14) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
}

void sub_100DD31D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, xpc_object_t object)
{
}

void sub_100DD31F8(uint64_t a1)
{
  if (!*(unsigned char *)(a1 + 72))
  {
    uint64_t v2 = *(void *)(a1 + 32);
    if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_connection)
    {
      uint64_t v3 = *(void *)(v2 + 80);
      uint64_t v4 = *(void *)(v2 + 88);
      if (v3 != v4)
      {
        while (!xpc_equal(*(xpc_object_t *)(v3 + 24), *(xpc_object_t *)(a1 + 40)))
        {
          v3 += 48;
          if (v3 == v4)
          {
            uint64_t v3 = v4;
            break;
          }
        }
        int v5 = *(long long **)(v2 + 88);
        if ((long long *)v3 != v5)
        {
          uint64_t v3 = sub_100DD4370((long long *)(v3 + 48), v5, v3);
          for (uint64_t i = *(void *)(v2 + 88); i != v3; sub_100DD40D0(i))
            i -= 48;
          *(void *)(v2 + 88) = v3;
        }
      }
      unint64_t v7 = *(NSObject **)(v2 + 32);
      if (os_log_type_enabled(v7, OS_LOG_TYPE_ERROR))
      {
        unint64_t v8 = (void *)(v2 + 56);
        if (*(char *)(v2 + 79) < 0) {
          unint64_t v8 = (void *)*v8;
        }
        uint64_t v9 = (void *)(a1 + 48);
        if (*(char *)(a1 + 71) < 0) {
          uint64_t v9 = (void *)*v9;
        }
        unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((v3 - *(void *)(v2 + 80)) >> 4);
        int v11 = 136315650;
        uint64_t v12 = v8;
        __int16 v13 = 2080;
        uint64_t v14 = v9;
        __int16 v15 = 2048;
        unint64_t v16 = v10;
        _os_log_error_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_ERROR, "Assertion '%s' by %s added failed; total assertion count is now %zu",
          (uint8_t *)&v11,
          0x20u);
        uint64_t v3 = *(void *)(v2 + 88);
      }
      if (*(void *)(v2 + 80) == v3) {
        (*(void (**)(uint64_t))(*(void *)v2 + 16))(v2);
      }
    }
  }
}

void sub_100DD33B8(os_unfair_lock_s *a1, void **a2, long long *a3, uint64_t *a4)
{
  v10[0] = _NSConcreteStackBlock;
  v10[1] = 1174405120;
  int v11 = sub_100DD34FC;
  uint64_t v12 = &unk_101A5B4E0;
  unint64_t v7 = *a2;
  __int16 v13 = a1;
  xpc_object_t object = v7;
  if (v7) {
    xpc_retain(v7);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(&__p, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long __p = *a3;
    uint64_t v16 = *((void *)a3 + 2);
  }
  unint64_t v8 = (std::__shared_weak_count *)a4[1];
  uint64_t v17 = *a4;
  uint64_t v18 = v8;
  if (v8) {
    atomic_fetch_add_explicit(&v8->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v9 = a1 + 6;
  os_unfair_lock_lock(v9);
  v11((uint64_t)v10);
  os_unfair_lock_unlock(v9);
  if (v18) {
    sub_10004D2C8(v18);
  }
  if (SHIBYTE(v16) < 0) {
    operator delete((void *)__p);
  }
  xpc_release(object);
}

void sub_100DD34D8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object)
{
}

void sub_100DD34FC(uint64_t a1)
{
  uint64_t v2 = (void **)(a1 + 40);
  uint64_t v3 = *(void **)(a1 + 32);
  if (xpc_get_type(*(xpc_object_t *)(a1 + 40)) == (xpc_type_t)&_xpc_type_connection)
  {
    int v5 = *(std::__shared_weak_count **)(a1 + 80);
    uint64_t v24 = *(void *)(a1 + 72);
    __int16 v25 = v5;
    if (v5) {
      atomic_fetch_add_explicit(&v5->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    (*(void (**)(void *, void **, uint64_t, uint64_t *))(*v3 + 40))(v3, v2, a1 + 48, &v24);
    if (v25) {
      sub_10004D2C8(v25);
    }
    long long v6 = v3 + 10;
    if (v3[10] == v3[11]) {
      sub_100DD17C0((uint64_t)v3, 1);
    }
    if (*(char *)(a1 + 71) < 0)
    {
      sub_10004FC84(__p, *(void **)(a1 + 48), *(void *)(a1 + 56));
    }
    else
    {
      *(_OWORD *)long long __p = *(_OWORD *)(a1 + 48);
      uint64_t v23 = *(void *)(a1 + 64);
    }
    sub_100DD1A1C((uint64_t)v3, (long long *)__p, 1);
    if (SHIBYTE(v23) < 0) {
      operator delete(__p[0]);
    }
    Registry::getTimerService((uint64_t *)&v16, (Registry *)v3[5]);
    uint64_t v18 = (**v16)();
    sub_100DD42E4(__dst, (long long *)(a1 + 48), v2, &v18);
    unint64_t v7 = v3[12];
    unint64_t v8 = v3[11];
    if (v8 >= v7)
    {
      unint64_t v10 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v8 - *v6) >> 4);
      if (v10 + 1 > 0x555555555555555) {
        sub_10006A748();
      }
      unint64_t v11 = 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v7 - *v6) >> 4);
      uint64_t v12 = 2 * v11;
      if (2 * v11 <= v10 + 1) {
        uint64_t v12 = v10 + 1;
      }
      if (v11 >= 0x2AAAAAAAAAAAAAALL) {
        unint64_t v13 = 0x555555555555555;
      }
      else {
        unint64_t v13 = v12;
      }
      v26[4] = v3 + 12;
      if (v13) {
        unint64_t v13 = (unint64_t)sub_100A52878(v13);
      }
      else {
        uint64_t v14 = 0;
      }
      uint64_t v15 = v13 + 48 * v10;
      v26[0] = v13;
      v26[1] = v15;
      v26[3] = v13 + 48 * v14;
      sub_100DD4230(v15, (long long *)__dst);
      v26[2] = v15 + 48;
      sub_100DD41A8(v3 + 10, v26);
      uint64_t v9 = v3[11];
      sub_100DD4294((uint64_t)v26);
    }
    else
    {
      uint64_t v9 = sub_100DD4230(v8, (long long *)__dst) + 48;
    }
    v3[11] = v9;
    xpc_release(object);
    xpc_object_t object = 0;
    if (v20 < 0) {
      operator delete(__dst[0]);
    }
    if (v17) {
      sub_10004D2C8(v17);
    }
    if (v3[19] && !v3[20]) {
      sub_100DD1DE0((uint64_t)v3, v3 + 19);
    }
  }
  else if (v3[10] == v3[11])
  {
    uint64_t v4 = *(void (**)(void *))(*v3 + 16);
    v4(v3);
  }
}

void sub_100DD37E8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,uint64_t a26)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  _Unwind_Resume(a1);
}

unsigned char *sub_100DD383C(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void **)(a2 + 40);
  a1[5] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[5] = xpc_null_create();
  }
  __n128 result = a1 + 6;
  if (*(char *)(a2 + 71) < 0)
  {
    __n128 result = sub_10004FC84(result, *(void **)(a2 + 48), *(void *)(a2 + 56));
  }
  else
  {
    long long v6 = *(_OWORD *)(a2 + 48);
    a1[8] = *(void *)(a2 + 64);
    *(_OWORD *)__n128 result = v6;
  }
  uint64_t v7 = *(void *)(a2 + 80);
  a1[9] = *(void *)(a2 + 72);
  a1[10] = v7;
  if (v7) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v7 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DD38CC(_Unwind_Exception *a1)
{
  sub_100C627D0(v1);
  _Unwind_Resume(a1);
}

void sub_100DD38E4(uint64_t a1)
{
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 80);
  if (v2) {
    sub_10004D2C8(v2);
  }
  if (*(char *)(a1 + 71) < 0) {
    operator delete(*(void **)(a1 + 48));
  }
  xpc_release(*(xpc_object_t *)(a1 + 40));
  *(void *)(a1 + 40) = 0;
}

void sub_100DD3930(os_unfair_lock_s *a1, xpc_object_t *a2, char a3)
{
  if (xpc_get_type(*a2) == (xpc_type_t)&_xpc_type_connection)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1174405120;
    unint64_t v8 = sub_100DD3A18;
    uint64_t v9 = &unk_101A5B510;
    xpc_object_t v6 = *a2;
    unint64_t v10 = a1;
    xpc_object_t object = v6;
    if (v6) {
      xpc_retain(v6);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    char v12 = a3;
    os_unfair_lock_lock(a1 + 6);
    v8((uint64_t)v7);
    os_unfair_lock_unlock(a1 + 6);
    xpc_release(object);
  }
}

void sub_100DD3A18(uint64_t a1)
{
  uint64_t v3 = *(void **)(a1 + 32);
  uint64_t v2 = *(void **)(a1 + 40);
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  sub_100DD2768(v3, &object, *(unsigned __int8 *)(a1 + 48));
  xpc_release(object);
}

void sub_100DD3A78(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_100DD3A94(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  uint64_t v4 = (*(uint64_t (**)(void))(*(void *)a2 + 16))();
  os_unfair_lock_unlock(v3);
  return v4;
}

BOOL sub_100DD3AE4(uint64_t a1)
{
  return *(void *)(*(void *)(a1 + 32) + 80) == *(void *)(*(void *)(a1 + 32) + 88);
}

void sub_100DD3AF8(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  (*(void (**)(void))(*(void *)a2 + 16))();

  os_unfair_lock_unlock(v3);
}

uint64_t sub_100DD3B5C@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100DD3B64(*(void *)(a1 + 32), a2);
}

uint64_t sub_100DD3B64@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  uint64_t result = sub_100807108(a2, 0xAAAAAAAAAAAAAAABLL * ((uint64_t)(*(void *)(a1 + 88) - *(void *)(a1 + 80)) >> 4));
  int v5 = *(long long **)(a1 + 80);
  xpc_object_t v6 = *(long long **)(a1 + 88);
  if (v5 != v6)
  {
    unint64_t v7 = a2[1];
    do
    {
      if (v7 >= a2[2])
      {
        uint64_t result = sub_100048008(a2, v5);
        unint64_t v7 = result;
      }
      else
      {
        uint64_t result = (uint64_t)sub_1000D87F8(a2, v5);
        v7 += 24;
      }
      a2[1] = v7;
      v5 += 3;
    }
    while (v5 != v6);
  }
  return result;
}

void sub_100DD3C10(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD3C34()
{
  return 1;
}

void sub_100DD3C40(os_unfair_lock_s *a1@<X0>, NSObject **a2@<X1>, void **a3@<X2>, _OWORD *a4@<X8>)
{
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 1174405120;
  _OWORD v9[2] = sub_100DD3D84;
  void v9[3] = &unk_101A5B580;
  unint64_t v7 = *a2;
  uint8_t v9[4] = a1;
  dispatch_object_t object = v7;
  if (v7) {
    dispatch_retain(v7);
  }
  unint64_t v8 = *a3;
  if (*a3) {
    unint64_t v8 = _Block_copy(v8);
  }
  aBlocuint64_t k = v8;
  char v12 = v9;
  sub_100DD3D20(a1 + 2, (uint64_t)&v12);
  *a4 = v13;
  long long v13 = 0uLL;
  if (aBlock) {
    _Block_release(aBlock);
  }
  if (object) {
    dispatch_release(object);
  }
}

void sub_100DD3D20(os_unfair_lock_s *a1, uint64_t a2)
{
  uint64_t v3 = a1 + 4;
  os_unfair_lock_lock(a1 + 4);
  (*(void (**)(void))(*(void *)a2 + 16))();

  os_unfair_lock_unlock(v3);
}

void sub_100DD3D84(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = (void *)a1[4];
  *a2 = 0;
  a2[1] = 0;
  int v5 = operator new(0x28uLL);
  v5[1] = 0;
  _DWORD v5[2] = 0;
  *int v5 = off_101A5B658;
  xpc_object_t v6 = a1[5];
  v5[3] = v6;
  unint64_t v7 = v5 + 3;
  if (v6) {
    dispatch_retain(v6);
  }
  unint64_t v8 = (void *)a1[6];
  if (v8) {
    unint64_t v8 = _Block_copy(v8);
  }
  v5[4] = v8;
  *a2 = v7;
  a2[1] = v5;
  uint64_t v9 = v4[4];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    int v24 = 134217984;
    __int16 v25 = v5 + 3;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Registering call back: %p for assertion changes", (uint8_t *)&v24, 0xCu);
  }
  unint64_t v11 = (char *)v4[14];
  unint64_t v10 = v4[15];
  if ((unint64_t)v11 >= v10)
  {
    long long v13 = (char *)v4[13];
    uint64_t v14 = (v11 - v13) >> 4;
    unint64_t v15 = v14 + 1;
    if ((unint64_t)(v14 + 1) >> 60) {
      sub_10006A748();
    }
    uint64_t v16 = v10 - (void)v13;
    if (v16 >> 3 > v15) {
      unint64_t v15 = v16 >> 3;
    }
    if ((unint64_t)v16 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v17 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v17 = v15;
    }
    if (v17 >> 60) {
      sub_10006A7CC();
    }
    uint64_t v18 = (char *)operator new(16 * v17);
    uint64_t v19 = &v18[16 * v14];
    char v20 = &v18[16 * v17];
    *(void *)uint64_t v19 = v7;
    *((void *)v19 + 1) = v5;
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    char v12 = v19 + 16;
    if (v11 == v13)
    {
      v4[13] = v19;
      v4[14] = v12;
      v4[15] = v20;
    }
    else
    {
      do
      {
        long long v21 = *((_OWORD *)v11 - 1);
        v11 -= 16;
        *((_OWORD *)v19 - 1) = v21;
        v19 -= 16;
        *(void *)unint64_t v11 = 0;
        *((void *)v11 + 1) = 0;
      }
      while (v11 != v13);
      unint64_t v11 = (char *)v4[13];
      uint64_t v22 = (char *)v4[14];
      v4[13] = v19;
      v4[14] = v12;
      v4[15] = v20;
      while (v22 != v11)
      {
        uint64_t v23 = (std::__shared_weak_count *)*((void *)v22 - 1);
        if (v23) {
          sub_10004D2C8(v23);
        }
        v22 -= 16;
      }
    }
    if (v11) {
      operator delete(v11);
    }
  }
  else
  {
    *(void *)unint64_t v11 = v7;
    *((void *)v11 + 1) = v5;
    atomic_fetch_add_explicit(v5 + 1, 1uLL, memory_order_relaxed);
    char v12 = v11 + 16;
  }
  v4[14] = v12;
}

void sub_100DD3F8C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DD3FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(NSObject **)(a2 + 40);
  *(void *)(a1 + 40) = v4;
  if (v4) {
    dispatch_retain(v4);
  }
  uint64_t result = *(void **)(a2 + 48);
  if (result) {
    uint64_t result = _Block_copy(result);
  }
  *(void *)(a1 + 48) = result;
  return result;
}

void sub_100DD3FF8(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 48);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void sub_100DD404C(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    int v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 48;
        sub_100DD40D0(v4);
      }
      while ((void *)v4 != v2);
      int v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100DD40D0(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 24));
  *(void *)(a1 + 24) = 0;
  if (*(char *)(a1 + 23) < 0)
  {
    uint64_t v2 = *(void **)a1;
    operator delete(v2);
  }
}

void *sub_100DD4128(void *__dst, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v4 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v4;
  }
  int v5 = (void *)*((void *)a2 + 3);
  __dst[3] = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    __dst[3] = xpc_null_create();
  }
  uint64_t v6 = *((void *)a2 + 4);
  *((unsigned char *)__dst + 40) = *((unsigned char *)a2 + 40);
  __dst[4] = v6;
  return __dst;
}

uint64_t sub_100DD41A8(uint64_t *a1, void *a2)
{
  int v5 = (long long *)*a1;
  long long v4 = (long long *)a1[1];
  uint64_t result = a2[1];
  while (v4 != v5)
  {
    v4 -= 3;
    uint64_t result = sub_100DD4230(result - 48, v4);
  }
  a2[1] = result;
  uint64_t v7 = *a1;
  *a1 = result;
  a2[1] = v7;
  uint64_t v8 = a1[1];
  a1[1] = a2[2];
  a2[2] = v8;
  uint64_t v9 = a1[2];
  a1[2] = a2[3];
  a2[3] = v9;
  *a2 = a2[1];
  return result;
}

uint64_t sub_100DD4230(uint64_t a1, long long *a2)
{
  long long v4 = *a2;
  *(void *)(a1 + 16) = *((void *)a2 + 2);
  *(_OWORD *)a1 = v4;
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(void *)(a1 + 24) = *((void *)a2 + 3);
  *((void *)a2 + 3) = xpc_null_create();
  uint64_t v5 = *((void *)a2 + 4);
  *(unsigned char *)(a1 + 40) = *((unsigned char *)a2 + 40);
  *(void *)(a1 + 32) = v5;
  return a1;
}

uint64_t sub_100DD4294(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 48;
    sub_100DD40D0(i - 48);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void *sub_100DD42E4(void *__dst, long long *a2, void **a3, void *a4)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v7 = *a2;
    __dst[2] = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v7;
  }
  uint64_t v8 = *a3;
  __dst[3] = *a3;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    __dst[3] = xpc_null_create();
  }
  __dst[4] = *a4;
  *((unsigned char *)__dst + 40) = 0;
  return __dst;
}

uint64_t sub_100DD4370(long long *a1, long long *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    uint64_t v5 = a1;
    do
    {
      if (*(char *)(a3 + 23) < 0) {
        operator delete(*(void **)a3);
      }
      long long v6 = *v5;
      *(void *)(a3 + 16) = *((void *)v5 + 2);
      *(_OWORD *)a3 = v6;
      *((unsigned char *)v5 + 23) = 0;
      *(unsigned char *)uint64_t v5 = 0;
      uint64_t v7 = *((void *)v5 + 3);
      *((void *)v5 + 3) = xpc_null_create();
      uint64_t v8 = *(void **)(a3 + 24);
      *(void *)(a3 + 24) = v7;
      xpc_release(v8);
      uint64_t v9 = *((void *)v5 + 4);
      *(unsigned char *)(a3 + 40) = *((unsigned char *)v5 + 40);
      *(void *)(a3 + 32) = v9;
      a3 += 48;
      v5 += 3;
    }
    while (v5 != a2);
  }
  return a3;
}

void sub_100DD4414(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5B658;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DD4434(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5B658;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DD4488(uint64_t a1)
{
  uint64_t v2 = *(const void **)(a1 + 32);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (v3)
  {
    dispatch_release(v3);
  }
}

void *sub_100DD44E0(void *a1)
{
  *a1 = off_101A5B6A8;
  uint64_t v2 = (std::__shared_weak_count *)a1[11];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[9];
  if (v3) {
    sub_10004D2C8(v3);
  }
  long long v4 = (std::__shared_weak_count *)a1[7];
  if (v4) {
    sub_10004D2C8(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_100DD455C(void *a1)
{
  sub_100DD44E0(a1);

  operator delete();
}

void PowerObserver::create()
{
}

void sub_100DD4650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  if (object)
  {
    dispatch_release(object);
    if (!v10)
    {
LABEL_3:
      if (v11) {
        goto LABEL_4;
      }
      goto LABEL_5;
    }
  }
  else if (!v10)
  {
    goto LABEL_3;
  }
  sub_10004D2C8(v10);
  if (v11) {
LABEL_4:
  }
    operator delete();
LABEL_5:
  _Unwind_Resume(exception_object);
}

uint64_t PowerObserver::PowerObserver(uint64_t a1, void *a2, NSObject **a3)
{
  long long v6 = (void *)(a1 + 8);
  uint64_t v7 = (const char *)kCtLoggingSystemName;
  LogGroupName = (const char *)sGetLogGroupName();
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, v7, LogGroupName);
  sub_100DD4778(v6, a3, &v11);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(void *)a1 = off_101A5B6A8;
  *(void *)(a1 + 48) = *a2;
  uint64_t v9 = a2[1];
  *(void *)(a1 + 56) = v9;
  if (v9) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v9 + 8), 1uLL, memory_order_relaxed);
  }
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  return a1;
}

void sub_100DD4764(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100DD4778(void *a1, NSObject **a2, OsLogContext *a3)
{
  *a1 = 0;
  a1[1] = 0;
  uint64_t v5 = *a2;
  a1[2] = *a2;
  if (v5) {
    dispatch_retain(v5);
  }
  a1[3] = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, a3);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  return a1;
}

void sub_100DD47E0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v2);
  _Unwind_Resume(a1);
}

void PowerObserver::bootstrap(PowerObserver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (!v2 || (v3 = *((void *)this + 1), (long long v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  uint64_t v5 = v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v4);
  ctu::power::manager::get((uint64_t *)&v26, v6);
  long long v7 = v26;
  long long v26 = 0uLL;
  uint64_t v8 = (std::__shared_weak_count *)*((void *)this + 9);
  *((_OWORD *)this + 4) = v7;
  if (!v8)
  {
    if ((void)v7) {
      goto LABEL_10;
    }
    goto LABEL_9;
  }
  sub_10004D2C8(v8);
  if (*((void *)&v26 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v26 + 1));
  }
  if (!*((void *)this + 8)) {
LABEL_9:
  }
    __TUAssertTrigger();
LABEL_10:
  uint64_t v29 = 0;
  long long v27 = 0u;
  long long v28 = 0u;
  long long v26 = 0u;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1174405120;
  aBlock[2] = sub_100DD4BAC;
  aBlock[3] = &unk_101A5B6B8;
  aBlock[4] = v3;
  __int16 v25 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  uint64_t v9 = _Block_copy(aBlock);
  sub_100058DB0(buf, "CT");
  unint64_t v10 = *((void *)this + 3);
  *(void *)&long long v26 = 1;
  *((void *)&v26 + 1) = v10;
  if (v10) {
    dispatch_retain(v10);
  }
  if (v9) {
    OsLogContext v11 = _Block_copy(v9);
  }
  else {
    OsLogContext v11 = 0;
  }
  long long v27 = (unint64_t)v11;
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    long long v28 = *(_OWORD *)buf;
    uint64_t v29 = v23;
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  sub_10004FC84(&v28, *(void **)buf, *(unint64_t *)&buf[8]);
  if ((SHIBYTE(v23) & 0x80000000) == 0)
  {
    if (!v9) {
      goto LABEL_21;
    }
    goto LABEL_20;
  }
  operator delete(*(void **)buf);
  if (v9) {
LABEL_20:
  }
    _Block_release(v9);
LABEL_21:
  long long v17 = v26;
  if (*((void *)&v26 + 1)) {
    dispatch_retain(*((dispatch_object_t *)&v26 + 1));
  }
  char v12 = (void *)v27;
  if ((void)v27) {
    char v12 = _Block_copy((const void *)v27);
  }
  uint64_t v18 = v12;
  long long v13 = (void *)*((void *)&v27 + 1);
  if (*((void *)&v27 + 1)) {
    long long v13 = _Block_copy(*((const void **)&v27 + 1));
  }
  uint64_t v19 = v13;
  if (SHIBYTE(v29) < 0)
  {
    sub_10004FC84(&v20, (void *)v28, *((unint64_t *)&v28 + 1));
  }
  else
  {
    long long v20 = v28;
    uint64_t v21 = v29;
  }
  ctu::power::manager::registerListener();
  long long v14 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  unint64_t v15 = (std::__shared_weak_count *)*((void *)this + 11);
  *((_OWORD *)this + 5) = v14;
  if (v15)
  {
    sub_10004D2C8(v15);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  sub_100DD51E0((uint64_t)&v17);
  if (!*((void *)this + 10)) {
    __TUAssertTrigger();
  }
  uint64_t v16 = *((void *)this + 5);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I PowerObserver bootstrap", buf, 2u);
  }
  sub_100DD51E0((uint64_t)&v26);
  if (v25) {
    std::__shared_weak_count::__release_weak(v25);
  }
  std::__shared_weak_count::__release_weak(v5);
}

void sub_100DD4AC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, dispatch_object_t object, void *a12, void *aBlock, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,std::__shared_weak_count *a29)
{
  sub_100DD51E0(v30 - 112);
  if (a29) {
    std::__shared_weak_count::__release_weak(a29);
  }
  std::__shared_weak_count::__release_weak(v29);
  _Unwind_Resume(a1);
}

void sub_100DD4BAC(uint64_t a1, int a2, const void **a3)
{
  long long v4 = *(std::__shared_weak_count **)(a1 + 40);
  if (v4)
  {
    long long v7 = std::__shared_weak_count::lock(v4);
    if (v7)
    {
      uint64_t v8 = v7;
      uint64_t v9 = *(void *)(a1 + 32);
      if (!v9)
      {
LABEL_33:
        sub_10004D2C8(v8);
        return;
      }
      if (*a3) {
        unint64_t v10 = _Block_copy(*a3);
      }
      else {
        unint64_t v10 = 0;
      }
      OsLogContext v11 = (char *)operator new(0x38uLL);
      char v12 = v11;
      uint64_t v13 = v9 + 40;
      *((void *)v11 + 1) = 0;
      *((void *)v11 + 2) = 0;
      *(void *)OsLogContext v11 = off_101A5B7F0;
      if (v10)
      {
        long long v14 = _Block_copy(v10);
        unint64_t v15 = v14;
        *((void *)v12 + 4) = v13;
        uint64_t v16 = (NSObject ***)(v12 + 32);
        v12[24] = 1;
        *((_DWORD *)v12 + 7) = a2;
        long long v17 = (unsigned int *)(v12 + 28);
        uint64_t v18 = v12 + 40;
        if (v14)
        {
          uint64_t v19 = _Block_copy(v14);
          char v20 = 0;
          *uint64_t v18 = v19;
          if (v19) {
            goto LABEL_14;
          }
          goto LABEL_13;
        }
      }
      else
      {
        *((void *)v11 + 4) = v13;
        uint64_t v16 = (NSObject ***)(v11 + 32);
        v11[24] = 1;
        *((_DWORD *)v11 + 7) = a2;
        long long v17 = (unsigned int *)(v11 + 28);
        uint64_t v18 = v11 + 40;
      }
      unint64_t v15 = 0;
      *uint64_t v18 = 0;
      char v20 = 1;
LABEL_13:
      __TUAssertTrigger();
LABEL_14:
      TelephonyBasebandWatchdogStartWithStackshot();
      uint64_t v21 = **v16;
      if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v23 = ctu::power::manager::asCString((ctu::power::manager *)*v17, v22);
        LODWORD(buf) = 136315138;
        *(void *)((char *)&buf + 4) = v23;
        _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Received power notification: %s", (uint8_t *)&buf, 0xCu);
      }
      if ((v20 & 1) == 0) {
        _Block_release(v15);
      }
      HIDWORD(v25) = a2;
      LODWORD(v25) = a2 + 536870288;
      int v24 = v25 >> 4;
      if (v24 > 8)
      {
        if (v24 != 9)
        {
          if (v24 == 11)
          {
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 0x40000000;
            uint64_t v36 = sub_100181270;
            long long v37 = &unk_1019A65B0;
            int v38 = 1;
            sub_100181088((wis::MetricFactory *)0x80072);
          }
          goto LABEL_31;
        }
        sub_100068A94(&buf);
        (*(void (**)(void))(*(void *)buf + 32))(buf);
        unint64_t v32 = (std::__shared_weak_count *)*((void *)&buf + 1);
        if (!*((void *)&buf + 1))
        {
LABEL_31:
          sub_10004D2C8((std::__shared_weak_count *)v12);
          if (v10) {
            _Block_release(v10);
          }
          goto LABEL_33;
        }
      }
      else
      {
        if (v24 != 1)
        {
          if (v24 == 2)
          {
            *(void *)&long long buf = _NSConcreteStackBlock;
            *((void *)&buf + 1) = 0x40000000;
            uint64_t v36 = sub_100181270;
            long long v37 = &unk_1019A65B0;
            int v38 = 2;
            sub_100181088((wis::MetricFactory *)0x80072);
          }
          goto LABEL_31;
        }
        *(void *)&long long buf = _NSConcreteStackBlock;
        *((void *)&buf + 1) = 0x40000000;
        uint64_t v36 = sub_100181270;
        long long v37 = &unk_1019A65B0;
        int v38 = 0;
        sub_100181088((wis::MetricFactory *)0x80072);
        sub_100068A94(&v33);
        long long v26 = *(std::__shared_weak_count **)(v9 + 16);
        if (!v26 || (uint64_t v27 = v33, v28 = *(void *)(v9 + 8), (v29 = std::__shared_weak_count::lock(v26)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v30 = v29;
        atomic_fetch_add_explicit(&v29->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v29);
        atomic_fetch_add_explicit((atomic_ullong *volatile)v12 + 1, 1uLL, memory_order_relaxed);
        long long v37 = 0;
        __int16 v31 = operator new(0x28uLL);
        *__int16 v31 = off_101A5B840;
        v31[1] = v28;
        v31[2] = v30;
        v31[3] = v12 + 24;
        v31[4] = v12;
        long long v37 = v31;
        (*(void (**)(uint64_t, long long *))(*(void *)v27 + 24))(v27, &buf);
        sub_100060644(&buf);
        unint64_t v32 = v34;
        if (!v34) {
          goto LABEL_31;
        }
      }
      sub_10004D2C8(v32);
      goto LABEL_31;
    }
  }
}

void sub_100DD4FF4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15)
{
  sub_100060644(&a15);
  sub_1007D9AD0((uint64_t)&a9);
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10004D2C8(v17);
  if (v16) {
    _Block_release(v16);
  }
  sub_10004D2C8(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100DD50D0(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(result + 32) = *(void *)(a2 + 32);
  *(void *)(result + 40) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DD50EC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 40);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void PowerObserver::start(PowerObserver *this)
{
  uint64_t v1 = *((void *)this + 5);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I PowerObserver start", v2, 2u);
  }
}

void PowerObserver::shutdown(PowerObserver *this)
{
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 11);
  *((void *)this + 10) = 0;
  *((void *)this + 11) = 0;
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)*((void *)this + 9);
  *((void *)this + 8) = 0;
  *((void *)this + 9) = 0;
  if (v3) {
    sub_10004D2C8(v3);
  }
  long long v4 = *((void *)this + 5);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I PowerObserver shutdown", v5, 2u);
  }
}

uint64_t sub_100DD51E0(uint64_t a1)
{
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  uint64_t v2 = *(const void **)(a1 + 24);
  if (v2) {
    _Block_release(v2);
  }
  uint64_t v3 = *(const void **)(a1 + 16);
  if (v3) {
    _Block_release(v3);
  }
  long long v4 = *(NSObject **)(a1 + 8);
  if (v4) {
    dispatch_release(v4);
  }
  return a1;
}

void sub_100DD5240(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100DD530C(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100DD53E4);
  __cxa_rethrow();
}

void sub_100DD5334(_Unwind_Exception *a1)
{
}

void sub_100DD534C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DD5384(uint64_t a1)
{
}

uint64_t sub_100DD53A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100DD53E4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100DD5410(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5B7F0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DD5430(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5B7F0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DD5484(uint64_t a1)
{
  TelephonyBasebandWatchdogStop();
  (*(void (**)(void))(*(void *)(a1 + 40) + 16))();
  uint64_t v2 = **(NSObject ***)(a1 + 32);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = ctu::power::manager::asCString((ctu::power::manager *)*(unsigned int *)(a1 + 28), v3);
    int v6 = 136315138;
    uint64_t v7 = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Acknowledged power notification: %s", (uint8_t *)&v6, 0xCu);
  }
  uint64_t v5 = *(const void **)(a1 + 40);
  if (v5) {
    _Block_release(v5);
  }
}

void sub_100DD5554(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100DD5568(void *a1)
{
  *a1 = off_101A5B840;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  return a1;
}

void sub_100DD55C0(void *a1)
{
  *a1 = off_101A5B840;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    sub_10004D2C8(v2);
  }
  unsigned int v3 = (std::__shared_weak_count *)a1[2];
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }

  operator delete();
}

void *sub_100DD5638(void *a1)
{
  uint64_t result = operator new(0x28uLL);
  uint64_t v4 = a1[1];
  uint64_t v3 = a1[2];
  *uint64_t result = off_101A5B840;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v5 = a1[4];
  result[3] = a1[3];
  result[4] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void *sub_100DD56AC(void *result, void *a2)
{
  uint64_t v3 = result[1];
  uint64_t v2 = result[2];
  *a2 = off_101A5B840;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = result[4];
  a2[3] = result[3];
  a2[4] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DD56FC(uint64_t a1)
{
}

void sub_100DD5704(void *a1)
{
  sub_1007DD410((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100DD5740(uint64_t a1, char *a2)
{
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    char v4 = *a2;
    uint64_t v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      if (*(void *)(a1 + 8)) {
        **(unsigned char **)(a1 + 24) = v4;
      }
      sub_10004D2C8(v5);
    }
  }
}

uint64_t sub_100DD57A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD57E0()
{
}

void sub_100DD57EC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100DD5878(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  id v6 = +[CTEmergencyMode convertFromEmergencyMode:a2];
  [v6 setIsEmergencySetup:1];
  char v4 = *(void ***)(a1 + 8);
  v8[0] = off_101A5B980;
  v8[1] = &v7;
  void v8[2] = &v6;
  void v8[3] = v8;
  sub_100043ED0((uint64_t)v8, *v4);
  sub_100043E48(v8);
}

void sub_100DD5950(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100043E48((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_100DD597C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = a3;
  id v6 = +[CTEmergencyMode convertFromEmergencyMode:a2];
  [v6 setIsEmergencySetup:0];
  char v4 = *(void ***)(a1 + 8);
  v8[0] = off_101A5BA00;
  v8[1] = &v7;
  void v8[2] = &v6;
  void v8[3] = v8;
  sub_100043ED0((uint64_t)v8, *v4);
  sub_100043E48(v8);
}

void sub_100DD5A54(_Unwind_Exception *a1, uint64_t a2, void *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_100043E48((uint64_t *)va);

  _Unwind_Resume(a1);
}

void sub_100DD5A80(CTXPCEmergencyNotificationInterface *this)
{
  *(void *)this = off_101A5B8C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  CTXPCEmergencyNotificationInterface::~CTXPCEmergencyNotificationInterface(this);
}

void sub_100DD5ADC(CTXPCEmergencyNotificationInterface *this)
{
  *(void *)this = off_101A5B8C0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  CTXPCEmergencyNotificationInterface::~CTXPCEmergencyNotificationInterface(this);

  operator delete();
}

void sub_100DD5B4C(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100DD5BB4(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD5BF0(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100DD5C28(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100DD5C58(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100DD5CA0()
{
}

__n128 sub_100DD5CB4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A5B980;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100DD5D00(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5B980;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DD5D30(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = +[CTXPCPlaceholder cfUuid:**(void **)(a1 + 8)];
  [v4 emergencyModeChanged:v3 mode:**(void **)(a1 + 16)];
}

void sub_100DD5DAC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DD5DCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD5E0C()
{
}

void sub_100DD5E1C()
{
}

__n128 sub_100DD5E30(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A5BA00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100DD5E7C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5BA00;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DD5EAC(uint64_t a1, id *a2)
{
  id v4 = *a2;
  uint64_t v3 = +[CTXPCPlaceholder cfUuid:**(void **)(a1 + 8)];
  [v4 emergencyModeChanged:v3 mode:**(void **)(a1 + 16)];
}

void sub_100DD5F28(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, id a10)
{
  _Unwind_Resume(a1);
}

uint64_t sub_100DD5F48(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD5F88()
{
}

void sub_100DD5F94(uint64_t a1@<X0>, int64_t *a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, unsigned char *a5@<X4>, unsigned char *a6@<X5>, unsigned char *a7@<X6>, int a8@<W7>, void *a9@<X8>, char a10, char a11)
{
  bytes[0] = a3;
  bytes[1] = a4;
  *a9 = 0;
  xpc_object_t v18 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v19 = v18;
  if (v18)
  {
    *a9 = v18;
  }
  else
  {
    xpc_object_t v19 = xpc_null_create();
    *a9 = v19;
    if (!v19)
    {
      xpc_object_t v20 = xpc_null_create();
      xpc_object_t v19 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v19) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v19);
    goto LABEL_9;
  }
  xpc_object_t v20 = xpc_null_create();
LABEL_8:
  *a9 = v20;
LABEL_9:
  xpc_release(v19);
  xpc_object_t v43 = xpc_BOOL_create(1);
  if (!v43) {
    xpc_object_t v43 = xpc_null_create();
  }
  int v41 = a9;
  unint64_t v42 = "kNotificationFlag";
  sub_100035E70((uint64_t)&v41, &v43, &v44);
  xpc_release(v44);
  xpc_object_t v44 = 0;
  xpc_release(v43);
  xpc_object_t v43 = 0;
  xpc_object_t v39 = xpc_data_create(bytes, 0x10uLL);
  if (!v39) {
    xpc_object_t v39 = xpc_null_create();
  }
  int v41 = a9;
  unint64_t v42 = "kUuid";
  sub_100035E70((uint64_t)&v41, &v39, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v39);
  xpc_object_t v39 = 0;
  if (a1 >= 1)
  {
    xpc_object_t v21 = xpc_array_create(0, 0);
    if (v21 || (xpc_object_t v21 = xpc_null_create()) != 0)
    {
      if (xpc_get_type(v21) == (xpc_type_t)&_xpc_type_array)
      {
        xpc_retain(v21);
        xpc_object_t v22 = v21;
      }
      else
      {
        xpc_object_t v22 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v22 = xpc_null_create();
      xpc_object_t v21 = 0;
    }
    xpc_release(v21);
    uint64_t v23 = 8 * a1;
    do
    {
      xpc_object_t v24 = xpc_int64_create(*a2);
      if (!v24) {
        xpc_object_t v24 = xpc_null_create();
      }
      xpc_array_append_value(v22, v24);
      xpc_release(v24);
      ++a2;
      v23 -= 8;
    }
    while (v23);
    xpc_object_t v37 = v22;
    if (v22) {
      xpc_retain(v22);
    }
    else {
      xpc_object_t v37 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kArgs";
    sub_10017AC14((uint64_t)&v41, &v37, &v38);
    xpc_release(v38);
    xpc_object_t v38 = 0;
    xpc_release(v37);
    xpc_object_t v37 = 0;
    xpc_release(v22);
  }
  if (a8)
  {
    xpc_object_t v35 = xpc_data_create(a5, 0x100uLL);
    if (!v35) {
      xpc_object_t v35 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kStr1Data";
    sub_100035E70((uint64_t)&v41, &v35, &v36);
    xpc_release(v36);
    xpc_object_t v36 = 0;
    xpc_release(v35);
    xpc_object_t v35 = 0;
  }
  else if (*a5)
  {
    xpc_object_t v33 = xpc_string_create(a5);
    if (!v33) {
      xpc_object_t v33 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kStr1";
    sub_100035E70((uint64_t)&v41, &v33, &v34);
    xpc_release(v34);
    xpc_object_t v34 = 0;
    xpc_release(v33);
    xpc_object_t v33 = 0;
  }
  if (a10)
  {
    xpc_object_t v31 = xpc_data_create(a6, 0x100uLL);
    if (!v31) {
      xpc_object_t v31 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kStr2Data";
    sub_100035E70((uint64_t)&v41, &v31, &v32);
    xpc_release(v32);
    xpc_object_t v32 = 0;
    xpc_release(v31);
    xpc_object_t v31 = 0;
  }
  else if (*a6)
  {
    xpc_object_t v29 = xpc_string_create(a6);
    if (!v29) {
      xpc_object_t v29 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kStr2";
    sub_100035E70((uint64_t)&v41, &v29, &v30);
    xpc_release(v30);
    xpc_object_t v30 = 0;
    xpc_release(v29);
    xpc_object_t v29 = 0;
  }
  if (a11)
  {
    xpc_object_t v27 = xpc_data_create(a7, 0x400uLL);
    if (!v27) {
      xpc_object_t v27 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kLStrData";
    sub_100035E70((uint64_t)&v41, &v27, &v28);
    xpc_release(v28);
    xpc_object_t v28 = 0;
    xpc_release(v27);
  }
  else if (*a7)
  {
    xpc_object_t v25 = xpc_string_create(a7);
    if (!v25) {
      xpc_object_t v25 = xpc_null_create();
    }
    int v41 = a9;
    unint64_t v42 = "kLStr";
    sub_100035E70((uint64_t)&v41, &v25, &v26);
    xpc_release(v26);
    xpc_object_t v26 = 0;
    xpc_release(v25);
  }
}

void sub_100DD64C8(_Unwind_Exception *a1)
{
  xpc_release(v2);
  xpc_release(v3);
  sub_10017143C(v1);
  _Unwind_Resume(a1);
}

void sub_100DD64F8(void **a1, int a2, void **a3)
{
  uint64_t v17 = 0;
  xpc_object_t v18 = 0;
  sub_100034EDC(&v17);
  uint64_t v6 = v17;
  if (v17)
  {
    v11[0] = _NSConcreteStackBlock;
    v11[1] = 1174405120;
    _DWORD v11[2] = sub_100DD71D4;
    void v11[3] = &unk_101A5BB30;
    uint64_t v7 = *a3;
    xpc_object_t v12 = v7;
    if (v7) {
      xpc_retain(v7);
    }
    else {
      xpc_object_t v12 = xpc_null_create();
    }
    int v16 = a2;
    uint64_t v8 = v18;
    uint64_t v13 = v6;
    long long v14 = v18;
    if (v18) {
      atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v9 = *a1;
    xpc_object_t object = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t object = xpc_null_create();
    }
    uint64_t v21 = 0;
    xpc_object_t v22 = 0;
    sub_10003E168(&v21, (void *)(v6 + 8));
    unint64_t v10 = *(NSObject **)(v6 + 24);
    block[0] = _NSConcreteStackBlock;
    block[1] = 1174405120;
    block[2] = sub_100058ECC;
    block[3] = &unk_101A5BB98;
    block[5] = v21;
    xpc_object_t v20 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    void block[4] = v11;
    dispatch_async(v10, block);
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v22) {
      sub_10004D2C8(v22);
    }
    xpc_release(object);
    xpc_object_t object = 0;
    if (v14) {
      sub_10004D2C8(v14);
    }
    xpc_release(v12);
    xpc_object_t v12 = 0;
    if (v8) {
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v8 = v18;
    if (v18) {
LABEL_21:
    }
      sub_10004D2C8(v8);
  }
}

void sub_100DD66C4(int a1, uint64_t a2, int64_t *a3, uint64_t a4, uint64_t a5, unsigned char *a6, unsigned char *a7, unsigned char *a8, unsigned __int8 a9, char a10, char a11)
{
  xpc_object_t object = 0;
  sub_100DD5F94(a2, a3, a4, a5, a6, a7, a8, a9, &object, a10, a11);
  xpc_object_t v12 = object;
  xpc_object_t v13 = object;
  if (object)
  {
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v12 = xpc_null_create();
    xpc_object_t v13 = v12;
  }
  sub_10004530C(a1, &v13);
  xpc_release(v12);
  xpc_object_t v13 = 0;
  xpc_release(object);
}

void sub_100DD6778(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object)
{
  xpc_release(v12);
  xpc_release(object);
  _Unwind_Resume(a1);
}

void sub_100DD67A4(int a1, xpc_object_t *a2, xpc_object_t *a3, xpc_object_t *a4)
{
  xpc_object_t v8 = *a2;
  xpc_object_t v19 = v8;
  if (v8)
  {
    xpc_retain(v8);
  }
  else
  {
    xpc_object_t v8 = xpc_null_create();
    xpc_object_t v19 = v8;
  }
  xpc_object_t v9 = *a3;
  xpc_object_t v18 = v9;
  if (v9)
  {
    xpc_retain(v9);
  }
  else
  {
    xpc_object_t v9 = xpc_null_create();
    xpc_object_t v18 = v9;
  }
  sub_100035C00(a1, &v19, &v18, &object);
  xpc_object_t v10 = *a2;
  xpc_object_t v16 = v10;
  if (v10)
  {
    xpc_retain(v10);
  }
  else
  {
    xpc_object_t v10 = xpc_null_create();
    xpc_object_t v16 = v10;
  }
  xpc_object_t v11 = *a4;
  xpc_object_t v15 = v11;
  if (v11)
  {
    xpc_retain(v11);
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    xpc_object_t v15 = v11;
  }
  sub_100035C00(a1, &v16, &v15, &v17);
  uint64_t v27 = 0;
  xpc_object_t v28 = 0;
  sub_100034EDC(&v27);
  uint64_t v12 = v27;
  if (!v27)
  {
    xpc_object_t v13 = v28;
    if (!v28) {
      goto LABEL_34;
    }
    goto LABEL_33;
  }
  v21[0] = _NSConcreteStackBlock;
  v21[1] = 1174405120;
  v21[2] = sub_100DD6FE8;
  v21[3] = &unk_101A5BB00;
  xpc_object_t v22 = object;
  if (object) {
    xpc_retain(object);
  }
  else {
    xpc_object_t v22 = xpc_null_create();
  }
  int v26 = a1;
  xpc_object_t v13 = v28;
  uint64_t v23 = v12;
  xpc_object_t v24 = v28;
  if (v28) {
    atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  xpc_object_t v25 = v17;
  if (v17) {
    xpc_retain(v17);
  }
  else {
    xpc_object_t v25 = xpc_null_create();
  }
  uint64_t v31 = 0;
  xpc_object_t v32 = 0;
  sub_10003E168(&v31, (void *)(v12 + 8));
  long long v14 = *(NSObject **)(v12 + 24);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100058ECC;
  block[3] = &unk_101A5BB98;
  block[5] = v31;
  xpc_object_t v30 = v32;
  if (v32) {
    atomic_fetch_add_explicit(&v32->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v21;
  dispatch_async(v14, block);
  if (v30) {
    sub_10004D2C8(v30);
  }
  if (v32) {
    sub_10004D2C8(v32);
  }
  xpc_release(v25);
  xpc_object_t v25 = 0;
  if (v24) {
    sub_10004D2C8(v24);
  }
  xpc_release(v22);
  xpc_object_t v22 = 0;
  if (v13) {
LABEL_33:
  }
    sub_10004D2C8(v13);
LABEL_34:
  xpc_release(v17);
  xpc_object_t v17 = 0;
  xpc_release(v11);
  xpc_release(v10);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  xpc_release(v8);
}

void sub_100DD6A8C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, xpc_object_t object, uint64_t a12, uint64_t a13, xpc_object_t a14)
{
  xpc_release(object);
  xpc_release(v17);
  xpc_release(v16);
  xpc_release(a14);
  xpc_release(v15);
  xpc_release(v14);
  _Unwind_Resume(a1);
}

void sub_100DD6B08(xpc_object_t *a1, int a2, xpc_object_t *a3, xpc_object_t *a4)
{
  xpc_object_t v7 = *a1;
  xpc_object_t v9 = v7;
  if (v7)
  {
    xpc_retain(v7);
  }
  else
  {
    xpc_object_t v7 = xpc_null_create();
    xpc_object_t v9 = v7;
  }
  sub_100035C00(a2, a3, a4, &object);
  sub_100DD64F8(&v9, a2, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v7);
}

void sub_100DD6BA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v9);
  _Unwind_Resume(a1);
}

BOOL sub_100DD6BD8(int a1)
{
  uint64_t v11 = 0;
  uint64_t v12 = 0;
  sub_100034EDC(&v11);
  uint64_t v2 = v11;
  if (v11)
  {
    v7[0] = _NSConcreteStackBlock;
    v7[1] = 1174405120;
    void v7[2] = sub_100DD75A0;
    v7[3] = &unk_101A5BB60;
    uint64_t v3 = v12;
    v7[4] = v11;
    xpc_object_t v8 = v12;
    if (v12) {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    int v9 = a1;
    xpc_object_t v10 = v7;
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000;
    v13[2] = sub_100DD7C90;
    v13[3] = &unk_101A5BCD8;
    _OWORD v13[4] = v2 + 8;
    v13[5] = &v10;
    long long v14 = v13;
    id v4 = *(NSObject **)(v2 + 24);
    if (*(void *)(v2 + 32))
    {
      char v21 = 0;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v16 = 0x40000000;
      xpc_object_t v17 = sub_10005B248;
      xpc_object_t v18 = &unk_101A5BD18;
      xpc_object_t v19 = &v21;
      xpc_object_t v20 = &v14;
      dispatch_async_and_wait(v4, &block);
    }
    else
    {
      char v21 = 0;
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v16 = 0x40000000;
      xpc_object_t v17 = sub_10005A4E4;
      xpc_object_t v18 = &unk_101A5BCF8;
      xpc_object_t v19 = &v21;
      xpc_object_t v20 = &v14;
      dispatch_sync(v4, &block);
    }
    BOOL v5 = v21 != 0;
    if (v8) {
      sub_10004D2C8(v8);
    }
  }
  else
  {
    BOOL v5 = 0;
    uint64_t v3 = v12;
  }
  if (v3) {
    sub_10004D2C8(v3);
  }
  return v5;
}

void sub_100DD6DB4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  uint64_t v2 = *(void **)(v1 + 176);
  if (!v2) {
    return;
  }
  unint64_t v4 = *(void *)(a1 + 48);
  BOOL v5 = (void *)(v1 + 176);
  do
  {
    unint64_t v6 = v2[4];
    BOOL v7 = v6 >= v4;
    if (v6 >= v4) {
      xpc_object_t v8 = v2;
    }
    else {
      xpc_object_t v8 = v2 + 1;
    }
    if (v7) {
      BOOL v5 = v2;
    }
    uint64_t v2 = (void *)*v8;
  }
  while (*v8);
  if (v5 == (void *)(v1 + 176) || v4 < v5[4]) {
    return;
  }
  xpc_object_t v10 = (char *)v5[10];
  int v9 = (char *)v5[11];
  if (v9 == v10)
  {
LABEL_19:
    uint64_t v16 = v10;
    goto LABEL_20;
  }
  int v11 = *(_DWORD *)(a1 + 56);
  unint64_t v12 = (v9 - v10) >> 2;
  xpc_object_t v13 = (char *)v5[11];
  while (1)
  {
    unint64_t v14 = v12 >> 1;
    xpc_object_t v15 = &v10[4 * (v12 >> 1)];
    if (*(_DWORD *)v15 >= v11) {
      break;
    }
    xpc_object_t v10 = v15 + 4;
    unint64_t v14 = v12 + ~v14;
LABEL_18:
    unint64_t v12 = v14;
    if (!v14) {
      goto LABEL_19;
    }
  }
  if (*(_DWORD *)v15 > v11)
  {
    xpc_object_t v13 = &v10[4 * (v12 >> 1)];
    goto LABEL_18;
  }
  if (v12 >= 2)
  {
    do
    {
      unint64_t v24 = v14 >> 1;
      xpc_object_t v25 = &v10[4 * (v14 >> 1)];
      int v27 = *(_DWORD *)v25;
      int v26 = v25 + 4;
      v14 += ~(v14 >> 1);
      if (v27 < v11) {
        xpc_object_t v10 = v26;
      }
      else {
        unint64_t v14 = v24;
      }
    }
    while (v14);
  }
  uint64_t v16 = v15 + 4;
  uint64_t v28 = v13 - (v15 + 4);
  if (v28)
  {
    unint64_t v29 = v28 >> 2;
    do
    {
      unint64_t v30 = v29 >> 1;
      uint64_t v31 = &v16[4 * (v29 >> 1)];
      int v33 = *(_DWORD *)v31;
      xpc_object_t v32 = v31 + 4;
      v29 += ~(v29 >> 1);
      if (v33 > v11) {
        unint64_t v29 = v30;
      }
      else {
        uint64_t v16 = v32;
      }
    }
    while (v29);
  }
LABEL_20:
  if (v10 != v16)
  {
    uint64_t v17 = v9 - v16;
    if (v9 != v16)
    {
      memmove(v10, v16, v9 - v16);
      uint64_t v1 = *(void *)(a1 + 32);
    }
    v5[11] = &v10[v17];
    xpc_object_t v18 = *(NSObject **)(v1 + 40);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v19 = v5 + 5;
      int v20 = *(_DWORD *)v5[8];
      if (*((char *)v5 + 63) < 0) {
        xpc_object_t v19 = (void *)*v19;
      }
      char v21 = sub_100027EA4(*(_DWORD *)(a1 + 56));
      int v22 = *(_DWORD *)(a1 + 56);
      uint64_t v23 = (uint64_t)(v5[11] - v5[10]) >> 2;
      v34[0] = 67110146;
      v34[1] = v20;
      __int16 v35 = 2080;
      xpc_object_t v36 = v19;
      __int16 v37 = 2080;
      xpc_object_t v38 = v21;
      __int16 v39 = 1024;
      int v40 = v22;
      __int16 v41 = 2048;
      uint64_t v42 = v23;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I   ==== client %d (%s) UNREGISTERED for event %s(%d) (now total %zd)", (uint8_t *)v34, 0x2Cu);
    }
  }
}

void *sub_100DD6FE8(uint64_t a1)
{
  xpc_object_t v9 = xpc_int64_create(*(int *)(a1 + 64));
  if (!v9) {
    xpc_object_t v9 = xpc_null_create();
  }
  uint64_t v7 = a1 + 32;
  xpc_object_t v8 = "kEvent";
  sub_100035E70((uint64_t)&v7, &v9, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v9);
  xpc_object_t v9 = 0;
  sub_100027B04(*(void **)(a1 + 40), *(_DWORD *)(a1 + 64), (xpc_object_t *)(a1 + 32), 1);
  int v2 = *(_DWORD *)(a1 + 64);
  __n128 result = (void *)sub_100064648(v2);
  if (result)
  {
    int v4 = (int)result;
    xpc_object_t v5 = xpc_int64_create(v2);
    if (!v5) {
      xpc_object_t v5 = xpc_null_create();
    }
    uint64_t v7 = a1 + 56;
    xpc_object_t v8 = "kEvent";
    sub_100035E70((uint64_t)&v7, &v5, &v6);
    xpc_release(v6);
    xpc_object_t v6 = 0;
    xpc_release(v5);
    xpc_object_t v5 = 0;
    return sub_100027B04(*(void **)(a1 + 40), v4, (xpc_object_t *)(a1 + 56), 0);
  }
  return result;
}

xpc_object_t sub_100DD710C(void *a1, void *a2)
{
  int v4 = (void *)a2[4];
  a1[4] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[4] = xpc_null_create();
  }
  uint64_t v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void sub_100DD7188(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

void sub_100DD71D4(uint64_t a1)
{
  xpc_object_t v12 = xpc_int64_create(*(int *)(a1 + 64));
  if (!v12) {
    xpc_object_t v12 = xpc_null_create();
  }
  *(void *)long long buf = a1 + 32;
  *(void *)&uint8_t buf[8] = "kEvent";
  sub_100035E70((uint64_t)buf, &v12, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v12);
  xpc_object_t v12 = 0;
  int v2 = *(void **)(*(void *)(a1 + 40) + 176);
  if (v2)
  {
    uint64_t v3 = *(_xpc_connection_s **)(a1 + 56);
    do
    {
      unint64_t v4 = v2[4];
      if ((unint64_t)v3 >= v4)
      {
        if (v4 >= (unint64_t)v3)
        {
          xpc_connection_send_message(v3, *(xpc_object_t *)(a1 + 32));
          uint64_t v5 = *(NSObject **)(*(void *)(a1 + 40) + 64);
          if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
          {
            xpc_object_t v6 = sub_100027EA4(*(_DWORD *)(a1 + 64));
            int v7 = *(_DWORD *)(a1 + 64);
            xpc_object_t v8 = xpc_copy_description(*(xpc_object_t *)(a1 + 56));
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v11 = 0;
            sub_100058DB0(__p, v8);
            free(v8);
            if (v11 >= 0) {
              xpc_object_t v9 = __p;
            }
            else {
              xpc_object_t v9 = (void **)__p[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = v6;
            *(_WORD *)&unsigned char buf[12] = 1024;
            *(_DWORD *)&buf[14] = v7;
            __int16 v15 = 2080;
            uint64_t v16 = v9;
            _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I   --------------> %s (%d) sent to %s.", buf, 0x1Cu);
            if (SHIBYTE(v11) < 0) {
              operator delete(__p[0]);
            }
          }
          return;
        }
        ++v2;
      }
      int v2 = (void *)*v2;
    }
    while (v2);
  }
}

void sub_100DD7388(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

xpc_object_t sub_100DD73AC(void *a1, void *a2)
{
  unint64_t v4 = (void *)a2[4];
  a1[4] = v4;
  if (v4) {
    xpc_retain(v4);
  }
  else {
    a1[4] = xpc_null_create();
  }
  uint64_t v5 = a2[6];
  a1[5] = a2[5];
  a1[6] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  xpc_object_t v6 = (void *)a2[7];
  a1[7] = v6;
  if (v6) {
    return xpc_retain(v6);
  }
  xpc_object_t result = xpc_null_create();
  a1[7] = result;
  return result;
}

void sub_100DD7428(uint64_t a1)
{
  xpc_release(*(xpc_object_t *)(a1 + 56));
  *(void *)(a1 + 56) = 0;
  int v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2) {
    sub_10004D2C8(v2);
  }
  xpc_release(*(xpc_object_t *)(a1 + 32));
  *(void *)(a1 + 32) = 0;
}

void *sub_100DD7474(void *a1, uint64_t a2, int a3, xpc_object_t *a4)
{
  xpc_object_t v10 = xpc_int64_create(a3);
  if (!v10) {
    xpc_object_t v10 = xpc_null_create();
  }
  v9[0] = a4;
  v9[1] = "kEvent";
  sub_100035E70((uint64_t)v9, &v10, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  v12[0] = off_101A5BC68;
  v12[1] = a2;
  void v12[3] = v12;
  sub_100027C24(a1, a3, a4, 0, (uint64_t)v12);
  return sub_100027B9C(v12);
}

void sub_100DD756C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

uint64_t sub_100DD75A0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 32);
  int v2 = *(void **)(v1 + 168);
  uint64_t v3 = (void *)(v1 + 176);
  if (v2 == v3) {
    return 0;
  }
  while (1)
  {
    unint64_t v4 = (_DWORD *)v2[10];
    uint64_t v5 = (_DWORD *)v2[11];
    if (v5 != v4)
    {
      unint64_t v6 = v5 - v4;
      int v7 = *(_DWORD *)(a1 + 48);
      do
      {
        unint64_t v8 = v6 >> 1;
        xpc_object_t v9 = &v4[v6 >> 1];
        int v11 = *v9;
        xpc_object_t v10 = v9 + 1;
        v6 += ~(v6 >> 1);
        if (v11 < v7) {
          unint64_t v4 = v10;
        }
        else {
          unint64_t v6 = v8;
        }
      }
      while (v6);
      if (v4 != v5 && v7 >= *v4) {
        break;
      }
    }
    xpc_object_t v12 = (void *)v2[1];
    if (v12)
    {
      do
      {
        xpc_object_t v13 = v12;
        xpc_object_t v12 = (void *)*v12;
      }
      while (v12);
    }
    else
    {
      do
      {
        xpc_object_t v13 = (void *)v2[2];
        BOOL v14 = *v13 == (void)v2;
        int v2 = v13;
      }
      while (!v14);
    }
    int v2 = v13;
    if (v13 == v3) {
      return 0;
    }
  }
  return 1;
}

BOOL sub_100DD7664(int *a1, int *a2)
{
  uint64_t v4 = a2 - a1;
  BOOL result = 1;
  switch(v4)
  {
    case 0:
    case 1:
      return result;
    case 2:
      int v6 = *(a2 - 1);
      int v7 = *a1;
      if (v6 < *a1)
      {
        *a1 = v6;
        *(a2 - 1) = v7;
      }
      return result;
    case 3:
      sub_100050AC0(a1, a1 + 1, a2 - 1);
      return 1;
    case 4:
      sub_100054A64(a1, a1 + 1, a1 + 2, a2 - 1);
      return 1;
    case 5:
      sub_1008568F4(a1, a1 + 1, a1 + 2, a1 + 3, a2 - 1);
      return 1;
    default:
      unint64_t v8 = a1 + 2;
      sub_100050AC0(a1, a1 + 1, a1 + 2);
      xpc_object_t v9 = a1 + 3;
      if (a1 + 3 == a2) {
        return 1;
      }
      int v10 = 0;
      uint64_t v11 = 12;
      break;
  }
  while (1)
  {
    int v12 = *v9;
    int v13 = *v8;
    if (*v9 < *v8)
    {
      uint64_t v14 = v11;
      while (1)
      {
        *(int *)((char *)a1 + v14) = v13;
        uint64_t v15 = v14 - 4;
        if (v14 == 4) {
          break;
        }
        int v13 = *(int *)((char *)a1 + v14 - 8);
        v14 -= 4;
        if (v12 >= v13)
        {
          uint64_t v16 = (int *)((char *)a1 + v15);
          goto LABEL_12;
        }
      }
      uint64_t v16 = a1;
LABEL_12:
      int *v16 = v12;
      if (++v10 == 8) {
        return v9 + 1 == a2;
      }
    }
    unint64_t v8 = v9;
    v11 += 4;
    if (++v9 == a2) {
      return 1;
    }
  }
}

uint64_t *sub_100DD77E4(uint64_t a1)
{
  sub_100C62630(a1, "kRegisterNotification", (unint64_t)sub_100034F34, 0);
  sub_100C62630(a1, "kUnregisterNotification", (unint64_t)sub_100DD7878, 0);

  return sub_100C62700(a1, "kPing", (unint64_t)nullsub_3633, 0);
}

void sub_100DD7878(uint64_t a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  int v13 = a4;
  uint64_t v14 = (uint64_t)"kEvent";
  sub_100048BAC((uint64_t)&v13, object);
  int v6 = xpc::dyn_cast_or_default((xpc *)object, 0, v5);
  xpc_release(object[0]);
  remote_connectiouint64_t n = xpc_dictionary_get_remote_connection(*a4);
  if (remote_connection)
  {
    xpc_object_t v8 = remote_connection;
    xpc_retain(remote_connection);
LABEL_4:
    xpc_retain(v8);
    xpc_object_t v9 = v8;
    goto LABEL_5;
  }
  xpc_object_t v8 = xpc_null_create();
  if (v8) {
    goto LABEL_4;
  }
  xpc_object_t v8 = xpc_null_create();
  xpc_object_t v9 = 0;
LABEL_5:
  uint64_t v21 = 0;
  int v22 = 0;
  sub_100034EDC(&v21);
  uint64_t v10 = v21;
  if (v21)
  {
    int v13 = _NSConcreteStackBlock;
    uint64_t v14 = 1174405120;
    uint64_t v15 = sub_100DD6DB4;
    uint64_t v16 = &unk_101A5BAA0;
    uint64_t v11 = v22;
    uint64_t v17 = v21;
    xpc_object_t v18 = v22;
    if (v22) {
      atomic_fetch_add_explicit(&v22->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    xpc_object_t v19 = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t v19 = xpc_null_create();
    }
    int v20 = v6;
    xpc_object_t v25 = 0;
    int v26 = 0;
    sub_10003E168(&v25, (void *)(v10 + 8));
    int v12 = *(NSObject **)(v10 + 24);
    object[0] = _NSConcreteStackBlock;
    object[1] = (xpc_object_t)1174405120;
    xpc_object_t object[2] = sub_100058ECC;
    object[3] = &unk_101A5BB98;
    object[5] = v25;
    unint64_t v24 = v26;
    if (v26) {
      atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    object[4] = &v13;
    dispatch_async(v12, object);
    if (v24) {
      sub_10004D2C8(v24);
    }
    if (v26) {
      sub_10004D2C8(v26);
    }
    xpc_release(v19);
    xpc_object_t v19 = 0;
    if (v18) {
      sub_10004D2C8(v18);
    }
  }
  else
  {
    uint64_t v11 = v22;
  }
  if (v11) {
    sub_10004D2C8(v11);
  }
  xpc_release(v8);
  xpc_release(v9);
}

void sub_100DD7A98(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t object)
{
  xpc_release(v20);
  xpc_release(v21);
  _Unwind_Resume(a1);
}

void sub_100DD7AE4()
{
}

void *sub_100DD7AF8()
{
  BOOL result = operator new(0x10uLL);
  *BOOL result = off_101A5BBD8;
  return result;
}

void sub_100DD7B30(uint64_t a1, void *a2)
{
  *a2 = off_101A5BBD8;
}

uint64_t sub_100DD7B54(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD7B94()
{
}

void sub_100DD7BA4()
{
}

void *sub_100DD7BB8(uint64_t a1)
{
  BOOL result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *BOOL result = off_101A5BC68;
  result[1] = v3;
  return result;
}

uint64_t sub_100DD7C00(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5BC68;
  a2[1] = v2;
  return result;
}

BOOL sub_100DD7C2C(uint64_t a1, uint64_t a2)
{
  return *(void *)(a2 + 24) == **(void **)(a1 + 8);
}

uint64_t sub_100DD7C44(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DD7C84()
{
}

void *sub_100DD7C90(uint64_t a1)
{
  return (*(void *(**)(void *__return_ptr))(**(void **)(a1 + 40) + 16))(*(void **)(a1 + 40));
}

uint64_t sub_100DD7CA4()
{
  return sub_100C624B8((uint64_t)&unk_101B12BD0, (uint64_t)sub_100DD77E4);
}

void *sub_100DD7CC0(void *a1, void *a2)
{
  uint64_t v4 = a1 + 1;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v7, kCtLoggingSystemName, "wfmgr");
  sub_100DD7D88(v4, "WiFiManager", QOS_CLASS_UTILITY, &v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v7);
  *a1 = &off_101A5BD48;
  a1[6] = *a2;
  uint64_t v5 = a2[1];
  a1[7] = v5;
  if (v5) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v5 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_100DD7D74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void *sub_100DD7D88(void *a1, const char *a2, dispatch_qos_class_t a3, const OsLogContext *a4)
{
  dispatch_object_t object = 0;
  sub_10058A678(a1, a2, a3, &object);
  if (object) {
    dispatch_release(object);
  }
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&object, a4);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 4), (const ctu::OsLogLogger *)&object);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&object);
  return a1;
}

void sub_100DD7DF0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object)
{
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&object);
  sub_100087E88(v10);
  _Unwind_Resume(a1);
}

WiFiManagerInterface *sub_100DD7E28(WiFiManagerInterface *this)
{
  *(void *)this = &off_101A5BD48;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 7);
  if (v2) {
    sub_10004D2C8(v2);
  }
  WiFiManagerInterface::~WiFiManagerInterface(this);
  ctu::OsLogLogger::~OsLogLogger((WiFiManagerInterface *)((char *)this + 40));
  sub_100087E88((void *)this + 1);
  return this;
}

void sub_100DD7E94(WiFiManagerInterface *a1)
{
  sub_100DD7E28(a1);

  operator delete();
}

void sub_100DD7ED4(uint64_t a1, NSObject **a2)
{
  uint64_t v3 = *a2;
  dispatch_group_t group = v3;
  if (v3)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)a1 + 72))(a1, &group);
  if (group)
  {
    dispatch_group_leave(group);
    if (group) {
      dispatch_release(group);
    }
  }
}

void sub_100DD7F5C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD7F80(uint64_t a1, int a2, ServiceStage *this)
{
  if (!a2)
  {
    ServiceStage::holdOffStage((uint64_t *)&group, this);
    (*(void (**)(uint64_t, dispatch_group_t *))(*(void *)a1 + 80))(a1, &group);
    if (group)
    {
      dispatch_group_leave(group);
      if (group) {
        dispatch_release(group);
      }
    }
  }
}

void sub_100DD8000(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DD8034(void *a1@<X8>)
{
  if ((atomic_load_explicit((atomic_uchar *volatile)&qword_101B12BD8, memory_order_acquire) & 1) == 0)
  {
    uint64_t v2 = a1;
    int v3 = __cxa_guard_acquire(&qword_101B12BD8);
    a1 = v2;
    if (v3)
    {
      __cxa_atexit((void (*)(void *))sub_10072B500, &qword_101B12BE0, (void *)&_mh_execute_header);
      __cxa_guard_release(&qword_101B12BD8);
      a1 = v2;
    }
  }
  uint64_t v1 = unk_101B12BE8;
  *a1 = qword_101B12BE0;
  a1[1] = v1;
  if (v1) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v1 + 8), 1uLL, memory_order_relaxed);
  }
}

uint64_t sub_100DD80D0()
{
  return 0;
}

uint64_t sub_100DD80E0(uint64_t a1, void *a2, NSObject **a3, char *a4)
{
  *(void *)(a1 + 8) = off_101A5BF70;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v23, kCtLoggingSystemName, a4);
  *(void *)(a1 + 16) = 0;
  *(void *)(a1 + 24) = 0;
  xpc_object_t v8 = *a3;
  *(void *)(a1 + 32) = *a3;
  if (v8) {
    dispatch_retain(v8);
  }
  *(void *)(a1 + 40) = 0;
  uint64_t v16 = a1;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)&v17, &v23);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 48), (const ctu::OsLogLogger *)&v17);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)&v17);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v23);
  v22[0] = off_101999E18;
  v22[1] = sub_100DD8720;
  v22[3] = v22;
  *(void *)(a1 + 56) = 0;
  if ((capabilities::ct::supportsGemini(v9) & 1) == 0) {
    operator new();
  }
  if (!*(void *)(a1 + 56)) {
    operator new();
  }
  sub_10008863C(v22);
  *(void *)a1 = off_101A5BE58;
  *(void *)(a1 + 8) = off_101A5BF08;
  *(void *)(a1 + 64) = a4;
  *(void *)(a1 + 72) = *a2;
  uint64_t v10 = a2[1];
  *(void *)(a1 + 80) = v10;
  if (v10) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v10 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100058DB0(&__p, a4);
  uint64_t v11 = *a3;
  dispatch_object_t v19 = v11;
  if (v11) {
    dispatch_retain(v11);
  }
  dispatch_object_t object = 0;
  ctu::RestModule::RestModule();
  if (object) {
    dispatch_release(object);
  }
  if (v19) {
    dispatch_release(v19);
  }
  if (v21 < 0) {
    operator delete(__p);
  }
  *(void *)(a1 + 120) = 0;
  *(void *)(a1 + 112) = a1 + 120;
  *(unsigned char *)(a1 + 104) = 0;
  *(void *)(a1 + 128) = 0;
  *(void *)(a1 + 144) = 0;
  *(void *)(a1 + 136) = a1 + 144;
  *(void *)(a1 + 152) = 0;
  subscriber::makeSimSlotRange();
  var0 = v23.var0;
  fRef = v23.var1.fRef;
  if (v23.var0 != (char *)v23.var1.fRef)
  {
    uint64_t v14 = v24;
    while ((v14(*(unsigned int *)var0) & 1) == 0)
    {
      var0 += 4;
      if (var0 == (char *)fRef)
      {
        var0 = (char *)fRef;
        break;
      }
    }
    if (var0 != (char *)v23.var1.fRef) {
      sub_1007BBE54();
    }
  }
  return v16;
}

void sub_100DD8590(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, DataiRatControllerInterface *a13, uint64_t a14, char a15, uint64_t a16, uint64_t a17, dispatch_object_t object, dispatch_object_t a19, void *__p,uint64_t a21,int a22,__int16 a23,char a24,char a25,char a26)
{
  sub_10008863C((void *)(v26 - 128));
  operator delete();
}

const char *sub_100DD8720(unsigned int a1)
{
  if (a1 > 3) {
    return "DATA.iRatController.1";
  }
  else {
    return off_101A5C208[a1];
  }
}

void sub_100DD8744(uint64_t a1)
{
  sub_100058DB0(v9, *(char **)(a1 + 64));
  if ((v10 & 0x80000000) == 0)
  {
    if (v10) {
      goto LABEL_4;
    }
    goto LABEL_3;
  }
  uint64_t v4 = v9[1];
  operator delete(v9[0]);
  if (!v4) {
LABEL_3:
  }
    *(void *)(a1 + 64) = "iRatController";
LABEL_4:
  Registry::createRestModuleOneTimeUseConnection(&v5, *(Registry **)(a1 + 72));
  ctu::RestModule::connect();
  if (v6) {
    sub_10004D2C8(v6);
  }
  sub_100058DB0(__p, "/cc/props/potential_interface_cost");
  uint64_t v2 = operator new(0x28uLL);
  void *v2 = off_101A5C0E0;
  v2[1] = a1 + 136;
  v2[2] = a1;
  v2[3] = sub_100DD8934;
  v2[4] = 0;
  uint64_t v11 = v2;
  ctu::RestModule::observeProperty();
  sub_10003F600(v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  int v3 = operator new(0x20uLL);
  *int v3 = off_101A5C160;
  v3[1] = a1;
  v3[2] = sub_100DD8BB8;
  v3[3] = 0;
  uint64_t v11 = v3;
  ctu::RestModule::observeEvent();
  sub_10003F600(v9);
  if (v8 < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DD88E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

uint64_t sub_100DD8934(uint64_t result, void *a2)
{
  uint64_t v2 = result;
  int v3 = *(void **)(result + 136);
  if (*(void *)(result + 152) == a2[2])
  {
    if (v3 == (void *)(result + 144)) {
      return result;
    }
    uint64_t v4 = (void *)*a2;
    uint64_t v5 = *(void **)(result + 136);
    while (1)
    {
      BOOL v6 = *((_DWORD *)v5 + 7) == *((_DWORD *)v4 + 7) && *((unsigned __int8 *)v5 + 32) == *((unsigned __int8 *)v4 + 32);
      if (!v6) {
        break;
      }
      OsLogContext v7 = (void *)v5[1];
      char v8 = v5;
      if (v7)
      {
        do
        {
          uint64_t v5 = v7;
          OsLogContext v7 = (void *)*v7;
        }
        while (v7);
      }
      else
      {
        do
        {
          uint64_t v5 = (void *)v8[2];
          BOOL v6 = *v5 == (void)v8;
          char v8 = v5;
        }
        while (!v6);
      }
      xpc_object_t v9 = (void *)v4[1];
      if (v9)
      {
        do
        {
          char v10 = v9;
          xpc_object_t v9 = (void *)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          char v10 = (void *)v4[2];
          BOOL v6 = *v10 == (void)v4;
          uint64_t v4 = v10;
        }
        while (!v6);
      }
      uint64_t v4 = v10;
      if (v5 == (void *)(result + 144)) {
        return result;
      }
    }
  }
  if (v3 != (void *)(result + 144))
  {
    uint64_t v11 = a2 + 1;
    do
    {
      uint64_t v12 = *v11;
      int v13 = *((_DWORD *)v3 + 7);
      if (!*v11) {
        goto LABEL_33;
      }
      uint64_t v14 = a2 + 1;
      do
      {
        int v15 = *(_DWORD *)(v12 + 28);
        BOOL v16 = v15 < v13;
        if (v15 >= v13) {
          long long v17 = (uint64_t *)v12;
        }
        else {
          long long v17 = (uint64_t *)(v12 + 8);
        }
        if (!v16) {
          uint64_t v14 = (uint64_t *)v12;
        }
        uint64_t v12 = *v17;
      }
      while (*v17);
      if (v14 == v11 || v13 < *((_DWORD *)v14 + 7))
      {
LABEL_33:
        int v18 = *((unsigned __int8 *)v3 + 32);
LABEL_34:
        dispatch_object_t v19 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(result + 56) + 16))(*(void *)(result + 56), *((unsigned int *)v3 + 7));
        if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
        {
          int v20 = "false";
          if (v18) {
            int v20 = "true";
          }
          *(_DWORD *)long long buf = 136315138;
          xpc_object_t v25 = v20;
          _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Potential interface cost changed to %s. Informing iRat", buf, 0xCu);
        }
        char v21 = sub_1000389F8(*(uint64_t **)(v2 + 120), v13);
        sub_1007BD114(*v21);
      }
      int v18 = *((unsigned __int8 *)v3 + 32);
      if (*((unsigned __int8 *)v14 + 32) != v18) {
        goto LABEL_34;
      }
      int v22 = (void *)v3[1];
      if (v22)
      {
        do
        {
          OsLogContext v23 = v22;
          int v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          OsLogContext v23 = (void *)v3[2];
          BOOL v6 = *v23 == (void)v3;
          int v3 = v23;
        }
        while (!v6);
      }
      int v3 = v23;
    }
    while (v23 != (void *)(result + 144));
  }
  return result;
}

uint64_t sub_100DD8BB8(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)a1 + 152))();
}

void sub_100DD8BDC(uint64_t a1)
{
}

void sub_100DD8BE4(uint64_t a1, int a2)
{
  if (*(unsigned __int8 *)(a1 + 104) != a2)
  {
    uint64_t v4 = *(void **)(a1 + 112);
    uint64_t v5 = (void *)(a1 + 120);
    if (v4 != (void *)(a1 + 120))
    {
      do
      {
        if (v4[5])
        {
          BOOL v6 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *((unsigned int *)v4 + 8));
          BOOL v7 = os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT);
          if (a2)
          {
            if (v7)
            {
              *(_WORD *)long long buf = 0;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Session is logged in. Start iRatClient", buf, 2u);
            }
            sub_1007BC020(v4[5]);
          }
          else
          {
            if (v7)
            {
              *(_WORD *)uint64_t v11 = 0;
              _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I Session is logged out. Shut down iRatClient", v11, 2u);
            }
            sub_1007BC25C(v4[5]);
          }
        }
        char v8 = (void *)v4[1];
        if (v8)
        {
          do
          {
            xpc_object_t v9 = v8;
            char v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            xpc_object_t v9 = (void *)v4[2];
            BOOL v10 = *v9 == (void)v4;
            uint64_t v4 = v9;
          }
          while (!v10);
        }
        uint64_t v4 = v9;
      }
      while (v9 != v5);
    }
    *(unsigned char *)(a1 + 104) = a2;
  }
}

void sub_100DD8D3C(void *a1)
{
  ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 11));
  uint64_t v2 = (void *)a1[14];
  int v3 = a1 + 15;
  if (v2 != v3)
  {
    do
    {
      uint64_t v4 = v2[5];
      if (v4) {
        sub_1007BC25C(v4);
      }
      uint64_t v5 = (void *)v2[1];
      if (v5)
      {
        do
        {
          BOOL v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          BOOL v6 = (void *)v2[2];
          BOOL v7 = *v6 == (void)v2;
          uint64_t v2 = v6;
        }
        while (!v7);
      }
      uint64_t v2 = v6;
    }
    while (v6 != v3);
  }
}

void sub_100DD8DB8(uint64_t a1)
{
  *(void *)a1 = off_101A5BE58;
  *(void *)(a1 + 8) = off_101A5BF08;
  sub_1000346F8(a1 + 136, *(void **)(a1 + 144));
  sub_100DDAE90(a1 + 112, *(void **)(a1 + 120));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 96);
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = *(std::__shared_weak_count **)(a1 + 80);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v4) {
    (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 48));
  sub_100087E88((void *)(a1 + 16));

  DataiRatControllerInterface::~DataiRatControllerInterface((DataiRatControllerInterface *)a1);
}

void sub_100DD8EAC(uint64_t a1, int a2)
{
  v4[0] = _NSConcreteStackBlock;
  v4[1] = 0x40000000;
  v4[2] = sub_100DD8FC0;
  v4[3] = &unk_101A5BF40;
  v4[4] = a1;
  int v5 = a2;
  uint64_t v8 = 0;
  xpc_object_t v9 = 0;
  sub_10003E168(&v8, (void *)(a1 + 16));
  int v3 = *(NSObject **)(a1 + 32);
  block[0] = _NSConcreteStackBlock;
  block[1] = 1174405120;
  block[2] = sub_100DDB270;
  block[3] = &unk_101A5C1D8;
  block[5] = v8;
  BOOL v7 = v9;
  if (v9) {
    atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  void block[4] = v4;
  dispatch_async(v3, block);
  if (v7) {
    sub_10004D2C8(v7);
  }
  if (v9) {
    sub_10004D2C8(v9);
  }
}

void sub_100DD8FC0(uint64_t a1)
{
  uint64_t v1 = *(void **)(a1 + 32);
  int v3 = v1 + 15;
  uint64_t v2 = v1[15];
  if (v2)
  {
    int v5 = *(_DWORD *)(a1 + 40);
    BOOL v6 = v1 + 15;
    do
    {
      int v7 = *(_DWORD *)(v2 + 32);
      BOOL v8 = v7 < v5;
      if (v7 >= v5) {
        xpc_object_t v9 = (uint64_t *)v2;
      }
      else {
        xpc_object_t v9 = (uint64_t *)(v2 + 8);
      }
      if (!v8) {
        BOOL v6 = (uint64_t *)v2;
      }
      uint64_t v2 = *v9;
    }
    while (*v9);
    if (v6 != v3 && v5 >= *((_DWORD *)v6 + 8))
    {
      if (!v6[5])
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
          || (LODWORD(__p.__r_.__value_.__l.__data_) = 136315650,
              *(std::string::size_type *)((char *)__p.__r_.__value_.__r.__words + 4) = (std::string::size_type)"iRat Client should be valid",
              WORD2(__p.__r_.__value_.__r.__words[1]) = 2080,
              *(std::string::size_type *)((char *)&__p.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)"/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatControlleriOSBase.cpp",
              HIWORD(__p.__r_.__value_.__r.__words[2]) = 1024,
              int v29 = 112,
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", (uint8_t *)&__p, 0x1Cu), !v6[5]))
        {
          __TUAssertTrigger();
        }
      }
      int v10 = *(_DWORD *)(a1 + 40);
      uint64_t v11 = (uint64_t *)operator new(0x30uLL);
      v11[1] = 0;
      _DWORD v11[2] = 0;
      uint64_t *v11 = (uint64_t)off_101A097A0;
      void v11[3] = 0;
      void v11[4] = 0;
      v11[5] = 0;
      uint64_t v12 = *v3;
      if (*v3)
      {
        int v13 = v1 + 15;
        do
        {
          int v14 = *(_DWORD *)(v12 + 32);
          BOOL v15 = v14 < v10;
          if (v14 >= v10) {
            BOOL v16 = (uint64_t *)v12;
          }
          else {
            BOOL v16 = (uint64_t *)(v12 + 8);
          }
          if (!v15) {
            int v13 = (uint64_t *)v12;
          }
          uint64_t v12 = *v16;
        }
        while (*v16);
        if (v13 != v3 && *((_DWORD *)v13 + 8) <= v10)
        {
          uint64_t v17 = 0;
          int v18 = v13 + 10;
          do
          {
            if (DataiRatControllerInterface::isCriticalAppType() && v18[v17])
            {
              v27[0] = v11 + 3;
              v27[1] = v11;
              atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
              uint64_t v19 = v18[v17];
              int v20 = *(_DWORD *)(v19 + 4);
              if (*(char *)(v19 + 31) < 0)
              {
                sub_10004FC84(&__p, *(void **)(v19 + 8), *(void *)(v19 + 16));
                uint64_t v19 = v18[v17];
              }
              else
              {
                long long v21 = *(_OWORD *)(v19 + 8);
                __p.__r_.__value_.__r.__words[2] = *(void *)(v19 + 24);
                *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v21;
              }
              sub_100DDA9BC(v27, v17, v20, &__p, *(_DWORD *)(v19 + 32));
              if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(__p.__r_.__value_.__l.__data_);
              }
              sub_10004D2C8((std::__shared_weak_count *)v11);
            }
            ++v17;
          }
          while (v17 != 3);
          if (v11[4] != v11[3])
          {
            uint64_t v22 = v6[5];
            v26[0] = (uint64_t)(v11 + 3);
            v26[1] = (uint64_t)v11;
            atomic_fetch_add_explicit(v11 + 1, 1uLL, memory_order_relaxed);
            sub_1007BCF50(v22, v26);
            sub_10004D2C8((std::__shared_weak_count *)v11);
          }
        }
      }
      *(_OWORD *)&__p.__r_.__value_.__l.__data_ = 0uLL;
      sub_100DD931C(&__p, v1, *(unsigned int *)(a1 + 40));
      if (*(void *)(__p.__r_.__value_.__r.__words[0] + 8) == *(void *)__p.__r_.__value_.__l.__data_)
      {
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        if (!__p.__r_.__value_.__l.__size_)
        {
LABEL_42:
          sub_10004D2C8((std::__shared_weak_count *)v11);
          return;
        }
      }
      else
      {
        uint64_t v23 = v6[5];
        std::string::size_type size = (std::__shared_weak_count *)__p.__r_.__value_.__l.__size_;
        long long v25 = *(_OWORD *)&__p.__r_.__value_.__l.__data_;
        if (!__p.__r_.__value_.__l.__size_)
        {
          sub_1007BC3C0(v23, (uint64_t *)&v25);
          goto LABEL_42;
        }
        atomic_fetch_add_explicit((atomic_ullong *volatile)(__p.__r_.__value_.__l.__size_ + 8), 1uLL, memory_order_relaxed);
        sub_1007BC3C0(v23, (uint64_t *)&v25);
        sub_10004D2C8(size);
      }
      sub_10004D2C8(size);
      goto LABEL_42;
    }
  }
}

void sub_100DD92D4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10004D2C8(v20);
  sub_10004D2C8(v20);
  _Unwind_Resume(a1);
}

void sub_100DD931C(void *a1, void *a2, uint64_t a3)
{
  *a1 = 0;
  a1[1] = 0;
  BOOL v6 = operator new(0x30uLL);
  v6[1] = 0;
  int v7 = v6 + 1;
  v6[2] = 0;
  v6[3] = 0;
  BOOL v8 = v6 + 3;
  *BOOL v6 = off_101A097A0;
  v6[4] = 0;
  void v6[5] = 0;
  *a1 = v6 + 3;
  a1[1] = v6;
  uint64_t v9 = a2[15];
  if (v9)
  {
    int v10 = (std::__shared_weak_count *)v6;
    uint64_t v11 = a2 + 15;
    do
    {
      int v12 = *(_DWORD *)(v9 + 32);
      BOOL v13 = v12 < (int)a3;
      if (v12 >= (int)a3) {
        int v14 = (uint64_t *)v9;
      }
      else {
        int v14 = (uint64_t *)(v9 + 8);
      }
      if (!v13) {
        uint64_t v11 = (void *)v9;
      }
      uint64_t v9 = *v14;
    }
    while (*v14);
    if (v11 != a2 + 15 && *((_DWORD *)v11 + 8) <= (int)a3)
    {
      BOOL v15 = (void *)v11[7];
      BOOL v16 = v11 + 8;
      if (v15 != v11 + 8)
      {
        do
        {
          unsigned int v17 = *((_DWORD *)v15 + 7);
          if (v17 <= 2)
          {
            int v18 = *((_DWORD *)v15 + 8);
            atomic_fetch_add_explicit(v7, 1uLL, memory_order_relaxed);
            uint64_t v19 = operator new(0x50uLL);
            v19[1] = 0;
            v19[2] = 0;
            void *v19 = off_101A09840;
            *((_DWORD *)v19 + 7) = -1;
            v19[4] = 0;
            v19[5] = 0;
            v19[6] = 0;
            v19[7] = -1;
            v19[8] = -1;
            v19[9] = -1;
            *((_DWORD *)v19 + 6) = v17;
            *(void *)&long long v23 = v19 + 3;
            *((void *)&v23 + 1) = v19;
            *((_DWORD *)v19 + 17) = v18;
            *((_DWORD *)v19 + 18) = (*(uint64_t (**)(void *, uint64_t))(*a2 + 144))(a2, a3);
            sub_1007BEEA4(v8, &v23);
            if (*((void *)&v23 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v23 + 1));
            }
            sub_10004D2C8(v10);
          }
          int v20 = (void *)v15[1];
          if (v20)
          {
            do
            {
              long long v21 = v20;
              int v20 = (void *)*v20;
            }
            while (v20);
          }
          else
          {
            do
            {
              long long v21 = (void *)v15[2];
              BOOL v22 = *v21 == (void)v15;
              BOOL v15 = v21;
            }
            while (!v22);
          }
          BOOL v15 = v21;
        }
        while (v21 != v16);
      }
    }
  }
}

void sub_100DD94F8(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100DD9528(uint64_t a1, int a2)
{
}

void sub_100DD9530(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3)
  {
    uint64_t v6 = a1;
    uint64_t v7 = a1 + 120;
    do
    {
      int v8 = *(_DWORD *)(v3 + 32);
      BOOL v9 = v8 < (int)a2;
      if (v8 >= (int)a2) {
        int v10 = (uint64_t *)v3;
      }
      else {
        int v10 = (uint64_t *)(v3 + 8);
      }
      if (!v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 120 && *(_DWORD *)(v7 + 32) <= (int)a2)
    {
      if (!*(void *)(v7 + 40))
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
          || (*(_DWORD *)std::string __p = 136315650,
              *(void *)&__p[4] = "iRat Client should be valid",
              *(_WORD *)&unsigned char __p[12] = 2080,
              *(void *)&__p[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRat"
                                    "ControlleriOSBase.cpp",
              __int16 v57 = 1024,
              int v58 = 131,
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", __p, 0x1Cu), !*(void *)(v7 + 40)))
        {
          __TUAssertTrigger();
        }
      }
      uint64_t v11 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), a2);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        asString();
        int v12 = v57 >= 0 ? __p : *(unsigned char **)__p;
        *(_DWORD *)long long buf = 136315138;
        long long v55 = v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I with app Types %s", buf, 0xCu);
        if (SHIBYTE(v57) < 0) {
          operator delete(*(void **)__p);
        }
      }
      uint64_t v13 = *(void *)(v7 + 72);
      if (v13 == a3[2])
      {
        int v14 = *(void **)(v7 + 56);
        if (v14 == (void *)(v7 + 64))
        {
LABEL_39:
          long long v21 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), a2);
          if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)std::string __p = 0;
            _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I Subscribe app Types not changed", __p, 2u);
          }
          return;
        }
        BOOL v15 = (void *)*a3;
        while (1)
        {
          BOOL v16 = *((_DWORD *)v14 + 7) == *((_DWORD *)v15 + 7) && *((_DWORD *)v14 + 8) == *((_DWORD *)v15 + 8);
          if (!v16) {
            break;
          }
          unsigned int v17 = (void *)v14[1];
          int v18 = v14;
          if (v17)
          {
            do
            {
              int v14 = v17;
              unsigned int v17 = (void *)*v17;
            }
            while (v17);
          }
          else
          {
            do
            {
              int v14 = (void *)v18[2];
              BOOL v16 = *v14 == (void)v18;
              int v18 = v14;
            }
            while (!v16);
          }
          uint64_t v19 = (void *)v15[1];
          if (v19)
          {
            do
            {
              int v20 = v19;
              uint64_t v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              int v20 = (void *)v15[2];
              BOOL v16 = *v20 == (void)v15;
              BOOL v15 = v20;
            }
            while (!v16);
          }
          BOOL v15 = v20;
          if (v14 == (void *)(v7 + 64)) {
            goto LABEL_39;
          }
        }
      }
      if ((void *)(v7 + 56) != a3)
      {
        unint64_t v24 = (void *)*a3;
        BOOL v22 = a3 + 1;
        long long v23 = v24;
        if (v13)
        {
          uint64_t v26 = (uint64_t *)(v7 + 64);
          uint64_t v25 = *(void *)(v7 + 64);
          uint64_t v27 = *(void *)(v7 + 56);
          *(void *)(v7 + 56) = v7 + 64;
          *(void *)(v25 + 16) = 0;
          *(void *)(v7 + 64) = 0;
          *(void *)(v7 + 72) = 0;
          if (*(void *)(v27 + 8)) {
            uint64_t v28 = *(uint64_t **)(v27 + 8);
          }
          else {
            uint64_t v28 = (uint64_t *)v27;
          }
          if (v28)
          {
            uint64_t v52 = v6;
            int v29 = sub_1000EA590((uint64_t)v28);
            if (v23 == v22)
            {
              uint64_t v31 = v28;
            }
            else
            {
              unint64_t v30 = v23;
              do
              {
                uint64_t v31 = v29;
                uint64_t v32 = *(void *)((char *)v30 + 28);
                *(uint64_t *)((char *)v28 + 28) = v32;
                uint64_t v33 = *v26;
                uint64_t v34 = v7 + 64;
                __int16 v35 = (uint64_t **)(v7 + 64);
                if (*v26)
                {
                  do
                  {
                    while (1)
                    {
                      uint64_t v34 = v33;
                      int v36 = *(_DWORD *)(v33 + 28);
                      BOOL v16 = v36 == v32;
                      BOOL v37 = v36 > (int)v32;
                      if (v16) {
                        BOOL v37 = *(_DWORD *)(v34 + 32) > SHIDWORD(v32);
                      }
                      if (!v37) {
                        break;
                      }
                      uint64_t v33 = *(void *)v34;
                      __int16 v35 = (uint64_t **)v34;
                      if (!*(void *)v34) {
                        goto LABEL_57;
                      }
                    }
                    uint64_t v33 = *(void *)(v34 + 8);
                  }
                  while (v33);
                  __int16 v35 = (uint64_t **)(v34 + 8);
                }
LABEL_57:
                sub_100046C38((uint64_t **)(v7 + 56), v34, v35, v28);
                if (v29) {
                  int v29 = sub_1000EA590((uint64_t)v29);
                }
                else {
                  int v29 = 0;
                }
                xpc_object_t v38 = (void *)v30[1];
                if (v38)
                {
                  do
                  {
                    long long v23 = v38;
                    xpc_object_t v38 = (void *)*v38;
                  }
                  while (v38);
                }
                else
                {
                  do
                  {
                    long long v23 = (void *)v30[2];
                    BOOL v16 = *v23 == (void)v30;
                    unint64_t v30 = v23;
                  }
                  while (!v16);
                }
                if (!v31) {
                  break;
                }
                uint64_t v28 = v31;
                unint64_t v30 = v23;
              }
              while (v23 != v22);
            }
            sub_1000346F8(v7 + 56, v31);
            if (v29)
            {
              for (uint64_t i = (uint64_t *)v29[2]; i; uint64_t i = (uint64_t *)i[2])
                int v29 = i;
              sub_1000346F8(v7 + 56, v29);
            }
            uint64_t v6 = v52;
          }
          else
          {
            sub_1000346F8(v7 + 56, 0);
          }
        }
        if (v23 != v22)
        {
          int v40 = (uint64_t *)(v7 + 64);
          do
          {
            uint64_t v41 = *(void *)((char *)v23 + 28);
            uint64_t v42 = (uint64_t *)operator new(0x28uLL);
            *(uint64_t *)((char *)v42 + 28) = v41;
            uint64_t v43 = *v40;
            uint64_t v44 = v7 + 64;
            __int16 v45 = (uint64_t **)(v7 + 64);
            if (*v40)
            {
              do
              {
                while (1)
                {
                  uint64_t v44 = v43;
                  int v46 = *(_DWORD *)(v43 + 28);
                  BOOL v16 = v46 == v41;
                  BOOL v47 = v46 > (int)v41;
                  if (v16) {
                    BOOL v47 = *(_DWORD *)(v44 + 32) > SHIDWORD(v41);
                  }
                  if (!v47) {
                    break;
                  }
                  uint64_t v43 = *(void *)v44;
                  __int16 v45 = (uint64_t **)v44;
                  if (!*(void *)v44) {
                    goto LABEL_85;
                  }
                }
                uint64_t v43 = *(void *)(v44 + 8);
              }
              while (v43);
              __int16 v45 = (uint64_t **)(v44 + 8);
            }
LABEL_85:
            sub_100046C38((uint64_t **)(v7 + 56), v44, v45, v42);
            unint64_t v48 = (void *)v23[1];
            if (v48)
            {
              do
              {
                uint64_t v49 = v48;
                unint64_t v48 = (void *)*v48;
              }
              while (v48);
            }
            else
            {
              do
              {
                uint64_t v49 = (void *)v23[2];
                BOOL v16 = *v49 == (void)v23;
                long long v23 = v49;
              }
              while (!v16);
            }
            long long v23 = v49;
          }
          while (v49 != v22);
        }
      }
      *(void *)std::string __p = 0;
      *(void *)&__p[8] = 0;
      sub_100DD931C(__p, (void *)v6, a2);
      uint64_t v50 = *(void *)(v7 + 40);
      unint64_t v51 = *(std::__shared_weak_count **)&__p[8];
      v53[0] = *(void *)__p;
      v53[1] = *(void *)&__p[8];
      if (*(void *)&__p[8])
      {
        atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&__p[8] + 8), 1uLL, memory_order_relaxed);
        sub_1007BC3C0(v50, v53);
        sub_10004D2C8(v51);
        sub_10004D2C8(v51);
      }
      else
      {
        sub_1007BC3C0(v50, v53);
      }
    }
  }
}

void sub_100DD9AB0(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v3 = *(void *)(a1 + 120);
  if (v3)
  {
    uint64_t v7 = a1 + 120;
    do
    {
      int v8 = *(_DWORD *)(v3 + 32);
      BOOL v9 = v8 < (int)a2;
      if (v8 >= (int)a2) {
        int v10 = (uint64_t *)v3;
      }
      else {
        int v10 = (uint64_t *)(v3 + 8);
      }
      if (!v9) {
        uint64_t v7 = v3;
      }
      uint64_t v3 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 120 && *(_DWORD *)(v7 + 32) <= (int)a2)
    {
      if (!*(void *)(v7 + 40))
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
          || (int v13 = 136315650,
              int v14 = "iRat Client should be valid",
              __int16 v15 = 2080,
              BOOL v16 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatControlleriOSBase.cpp",
              __int16 v17 = 1024,
              int v18 = 153,
              _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", (uint8_t *)&v13, 0x1Cu), !*(void *)(v7 + 40)))
        {
          __TUAssertTrigger();
        }
      }
      uint64_t v11 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
      if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v12 = asString();
        int v13 = 136315138;
        int v14 = (const char *)v12;
        _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I NWD cause %s", (uint8_t *)&v13, 0xCu);
      }
      sub_1007BE534(*(void *)(v7 + 40), a3);
    }
  }
}

void sub_100DD9C74(uint64_t a1, int a2)
{
  uint64_t v4 = *(void *)(a1 + 120);
  uint64_t v2 = a1 + 120;
  uint64_t v3 = v4;
  if (v4)
  {
    uint64_t v5 = v2;
    do
    {
      int v6 = *(_DWORD *)(v3 + 32);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != v2 && *(_DWORD *)(v5 + 32) <= a2)
    {
      uint64_t v9 = *(void *)(v5 + 40);
      if (!v9)
      {
        if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)) {
          goto LABEL_13;
        }
        int v10 = 136315650;
        uint64_t v11 = "iRat Client should be valid";
        __int16 v12 = 2080;
        int v13 = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatControlleriOSBase.cpp";
        __int16 v14 = 1024;
        int v15 = 166;
        _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", (uint8_t *)&v10, 0x1Cu);
        uint64_t v9 = *(void *)(v5 + 40);
        if (!v9)
        {
LABEL_13:
          __TUAssertTrigger();
          uint64_t v9 = *(void *)(v5 + 40);
        }
      }
      sub_1007BEA00(v9);
    }
  }
}

uint64_t sub_100DD9DA0(uint64_t a1, uint64_t a2, unsigned int a3, int a4)
{
  uint64_t v4 = *(void *)(a1 + 120);
  if (!v4) {
    return 0;
  }
  uint64_t v9 = a1 + 120;
  do
  {
    int v10 = *(_DWORD *)(v4 + 32);
    BOOL v11 = v10 < (int)a2;
    if (v10 >= (int)a2) {
      __int16 v12 = (uint64_t *)v4;
    }
    else {
      __int16 v12 = (uint64_t *)(v4 + 8);
    }
    if (!v11) {
      uint64_t v9 = v4;
    }
    uint64_t v4 = *v12;
  }
  while (*v12);
  if (v9 == a1 + 120 || *(_DWORD *)(v9 + 32) > (int)a2) {
    return 0;
  }
  if (!*(void *)(v9 + 40))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
      || (*(_DWORD *)long long buf = 136315650,
          *(void *)&uint8_t buf[4] = "iRat Client should be valid",
          *(_WORD *)&unsigned char buf[12] = 2080,
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatCont"
                                "rolleriOSBase.cpp",
          __int16 v20 = 1024,
          int v21 = 177,
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", buf, 0x1Cu), !*(void *)(v9 + 40)))
    {
      __TUAssertTrigger();
    }
  }
  if (a3 > 2) {
    return 0;
  }
  uint64_t result = DataiRatControllerInterface::isCriticalAppType();
  if (result)
  {
    __int16 v14 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 67109376;
      *(_DWORD *)&uint8_t buf[4] = a3;
      *(_WORD *)&uint8_t buf[8] = 1024;
      *(_DWORD *)&buf[10] = a4;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I Report for critical appType %d with service State %d", buf, 0xEu);
    }
    sub_100DDA034(a1, a2, a3);
    uint64_t v15 = *(void *)(v9 + 32 + 8 * a3 + 48);
    if (*(_DWORD *)(v15 + 32) == a4) {
      return 1;
    }
    *(_DWORD *)(v15 + 32) = a4;
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100DDA280(buf, a1, a2, a3);
    if (*(void *)(*(void *)buf + 8) == **(void **)buf)
    {
      __int16 v17 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        return 1;
      }
    }
    else
    {
      uint64_t v16 = *(void *)(v9 + 40);
      __int16 v17 = *(std::__shared_weak_count **)&buf[8];
      v18[0] = *(void *)buf;
      v18[1] = *(void *)&buf[8];
      if (!*(void *)&buf[8])
      {
        sub_1007BCF50(v16, v18);
        return 1;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      sub_1007BCF50(v16, v18);
      sub_10004D2C8(v17);
    }
    sub_10004D2C8(v17);
    return 1;
  }
  return result;
}

uint64_t sub_100DDA034(uint64_t result, int a2, int a3)
{
  uint64_t v3 = *(void *)(result + 120);
  if (v3)
  {
    uint64_t v5 = result + 120;
    do
    {
      int v6 = *(_DWORD *)(v3 + 32);
      BOOL v7 = v6 < a2;
      if (v6 >= a2) {
        int v8 = (uint64_t *)v3;
      }
      else {
        int v8 = (uint64_t *)(v3 + 8);
      }
      if (!v7) {
        uint64_t v5 = v3;
      }
      uint64_t v3 = *v8;
    }
    while (*v8);
    if (v5 != result + 120)
    {
      int v10 = *(_DWORD *)(v5 + 32);
      uint64_t v9 = v5 + 32;
      if (v10 <= a2)
      {
        uint64_t result = DataiRatControllerInterface::isCriticalAppType();
        if (result)
        {
          if (!*(void *)(v9 + 8 * a3 + 48)) {
            operator new();
          }
        }
      }
    }
  }
  return result;
}

void sub_100DDA250(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DDA280(void *a1, uint64_t a2, int a3, unsigned int a4)
{
  *a1 = 0;
  a1[1] = 0;
  int v8 = (uint64_t *)operator new(0x30uLL);
  v8[1] = 0;
  void v8[2] = 0;
  void v8[3] = 0;
  uint64_t *v8 = (uint64_t)off_101A097A0;
  void v8[4] = 0;
  v8[5] = 0;
  *a1 = v8 + 3;
  a1[1] = v8;
  uint64_t v11 = *(void *)(a2 + 120);
  uint64_t v10 = a2 + 120;
  uint64_t v9 = v11;
  if (v11)
  {
    __int16 v12 = (std::__shared_weak_count *)v8;
    uint64_t v13 = v10;
    do
    {
      int v14 = *(_DWORD *)(v9 + 32);
      BOOL v15 = v14 < a3;
      if (v14 >= a3) {
        uint64_t v16 = (uint64_t *)v9;
      }
      else {
        uint64_t v16 = (uint64_t *)(v9 + 8);
      }
      if (!v15) {
        uint64_t v13 = v9;
      }
      uint64_t v9 = *v16;
    }
    while (*v16);
    if (v13 != v10)
    {
      int v18 = *(_DWORD *)(v13 + 32);
      uint64_t v17 = v13 + 32;
      if (v18 <= a3)
      {
        uint64_t v19 = v17 + 8 * a4;
        uint64_t v21 = *(void *)(v19 + 48);
        __int16 v20 = (uint64_t *)(v19 + 48);
        if (v21)
        {
          v26[0] = v8 + 3;
          v26[1] = v8;
          atomic_fetch_add_explicit(v8 + 1, 1uLL, memory_order_relaxed);
          uint64_t v22 = *v20;
          int v23 = *(_DWORD *)(*v20 + 4);
          if (*(char *)(*v20 + 31) < 0)
          {
            sub_10004FC84(&__p, *(void **)(v22 + 8), *(void *)(v22 + 16));
            uint64_t v22 = *v20;
          }
          else
          {
            long long v24 = *(_OWORD *)(v22 + 8);
            __p.__r_.__value_.__r.__words[2] = *(void *)(v22 + 24);
            *(_OWORD *)&__p.__r_.__value_.__l.__data_ = v24;
          }
          sub_100DDA9BC(v26, a4, v23, &__p, *(_DWORD *)(v22 + 32));
          if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__p.__r_.__value_.__l.__data_);
          }
          sub_10004D2C8(v12);
        }
      }
    }
  }
}

void sub_100DDA3C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  sub_10004D2C8(v14);
  sub_10004D2C8(v14);
  _Unwind_Resume(a1);
}

uint64_t sub_100DDA3F8(uint64_t a1, uint64_t a2, uint64_t a3, int a4, int a5, char *a6)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (!v6) {
    return 0;
  }
  uint64_t v12 = a1 + 120;
  do
  {
    int v13 = *(_DWORD *)(v6 + 32);
    BOOL v14 = v13 < (int)a2;
    if (v13 >= (int)a2) {
      BOOL v15 = (uint64_t *)v6;
    }
    else {
      BOOL v15 = (uint64_t *)(v6 + 8);
    }
    if (!v14) {
      uint64_t v12 = v6;
    }
    uint64_t v6 = *v15;
  }
  while (*v15);
  if (v12 == a1 + 120 || *(_DWORD *)(v12 + 32) > (int)a2) {
    return 0;
  }
  if (!*(void *)(v12 + 40))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
      || (*(_DWORD *)long long buf = 136315650,
          *(void *)&uint8_t buf[4] = "iRat Client should be valid",
          *(_WORD *)&unsigned char buf[12] = 2080,
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatCont"
                                "rolleriOSBase.cpp",
          *(_WORD *)&unsigned char buf[22] = 1024,
          *(_DWORD *)&unsigned char buf[24] = 217,
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", buf, 0x1Cu), !*(void *)(v12 + 40)))
    {
      __TUAssertTrigger();
    }
  }
  unsigned int AppType = DataiRatControllerInterface::getAppType();
  if (AppType > 2) {
    return 0;
  }
  uint64_t result = DataiRatControllerInterface::isCriticalAppType();
  if (result)
  {
    int v18 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v19 = asString();
      uint64_t v20 = asString();
      *(_DWORD *)long long buf = 67109890;
      *(_DWORD *)&uint8_t buf[4] = AppType;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v19;
      *(_WORD *)&unsigned char buf[18] = 2080;
      *(void *)&buf[20] = v20;
      __int16 v33 = 2080;
      uint64_t v34 = a6;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I Report for critical appType %d with contextType %s, transportType %s and connection ID %s", buf, 0x26u);
    }
    sub_100DDA034(a1, a2, AppType);
    uint64_t v21 = *(void *)(v12 + 32 + 8 * AppType + 48);
    if (*(_DWORD *)v21 != a4) {
      *(_DWORD *)uint64_t v21 = a4;
    }
    int v22 = *(_DWORD *)(v21 + 4);
    if (v22 != a5) {
      *(_DWORD *)(v21 + 4) = a5;
    }
    int v23 = (std::string *)(v21 + 8);
    size_t v24 = *(unsigned __int8 *)(v21 + 31);
    int v25 = (char)v24;
    size_t v26 = *(void *)(v21 + 16);
    if ((v24 & 0x80u) == 0) {
      size_t v27 = v24;
    }
    else {
      size_t v27 = v26;
    }
    if (v27 == strlen(a6)
      && (v25 >= 0 ? (uint64_t v28 = v23) : (uint64_t v28 = (std::string *)v23->__r_.__value_.__r.__words[0]), !memcmp(v28, a6, v27)))
    {
      if (v22 == a5) {
        return 1;
      }
    }
    else
    {
      sub_10003ED78(v23, a6);
    }
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100DDA280(buf, a1, a2, AppType);
    if (*(void *)(*(void *)buf + 8) == **(void **)buf)
    {
      unint64_t v30 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        return 1;
      }
    }
    else
    {
      uint64_t v29 = *(void *)(v12 + 40);
      unint64_t v30 = *(std::__shared_weak_count **)&buf[8];
      v31[0] = *(void *)buf;
      v31[1] = *(void *)&buf[8];
      if (!*(void *)&buf[8])
      {
        sub_1007BCF50(v29, v31);
        return 1;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      sub_1007BCF50(v29, v31);
      sub_10004D2C8(v30);
    }
    sub_10004D2C8(v30);
    return 1;
  }
  return result;
}

uint64_t sub_100DDA738(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (!v2) {
    return 0;
  }
  uint64_t v5 = a1 + 120;
  do
  {
    int v6 = *(_DWORD *)(v2 + 32);
    BOOL v7 = v6 < (int)a2;
    if (v6 >= (int)a2) {
      int v8 = (uint64_t *)v2;
    }
    else {
      int v8 = (uint64_t *)(v2 + 8);
    }
    if (!v7) {
      uint64_t v5 = v2;
    }
    uint64_t v2 = *v8;
  }
  while (*v8);
  if (v5 == a1 + 120 || *(_DWORD *)(v5 + 32) > (int)a2) {
    return 0;
  }
  if (!*(void *)(v5 + 40))
  {
    if (!os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR)
      || (*(_DWORD *)long long buf = 136315650,
          *(void *)&uint8_t buf[4] = "iRat Client should be valid",
          *(_WORD *)&unsigned char buf[12] = 2080,
          *(void *)&buf[14] = "/Library/Caches/com.apple.xbs/Sources/CoreTelephony/CSI/Modules/Data/Source/DataiRatCont"
                                "rolleriOSBase.cpp",
          __int16 v17 = 1024,
          int v18 = 265,
          _os_log_error_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_ERROR, "\n**********\n   ASSERT simInfo.fiRatClient\n %s\n at %s:%d\n**********", buf, 0x1Cu), !*(void *)(v5 + 40)))
    {
      __TUAssertTrigger();
    }
  }
  unsigned int AppType = DataiRatControllerInterface::getAppType();
  if (AppType > 2) {
    return 0;
  }
  uint64_t result = DataiRatControllerInterface::isCriticalAppType();
  if (result)
  {
    uint64_t v11 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), a2);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v12 = asString();
      *(_DWORD *)long long buf = 67109378;
      *(_DWORD *)&uint8_t buf[4] = AppType;
      *(_WORD *)&uint8_t buf[8] = 2080;
      *(void *)&buf[10] = v12;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Report for critical appType %d with failure for %s", buf, 0x12u);
    }
    sub_100DDA034(a1, a2, AppType);
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    sub_100DDA280(buf, a1, a2, AppType);
    if (*(void *)(*(void *)buf + 8) == **(void **)buf)
    {
      BOOL v14 = *(std::__shared_weak_count **)&buf[8];
      if (!*(void *)&buf[8]) {
        return 1;
      }
    }
    else
    {
      uint64_t v13 = *(void *)(v5 + 40);
      BOOL v14 = *(std::__shared_weak_count **)&buf[8];
      v15[0] = *(void *)buf;
      v15[1] = *(void *)&buf[8];
      if (!*(void *)&buf[8])
      {
        sub_1007BCF50(v13, v15);
        return 1;
      }
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 8), 1uLL, memory_order_relaxed);
      sub_1007BCF50(v13, v15);
      sub_10004D2C8(v14);
    }
    sub_10004D2C8(v14);
    return 1;
  }
  return result;
}

void sub_100DDA9BC(uint64_t **a1, int a2, int a3, const std::string *a4, int a5)
{
  uint64_t v10 = (char *)operator new(0x50uLL);
  *((void *)v10 + 1) = 0;
  *((void *)v10 + 2) = 0;
  *(void *)uint64_t v10 = off_101A09840;
  *((void *)v10 + 5) = 0;
  *((void *)v10 + 6) = 0;
  *((void *)v10 + 4) = 0;
  *((void *)v10 + 7) = -1;
  *((void *)v10 + 8) = -1;
  *((void *)v10 + 9) = -1;
  *((_DWORD *)v10 + 6) = a2;
  *(void *)&long long v11 = v10 + 24;
  *((void *)&v11 + 1) = v10;
  *((_DWORD *)v10 + 7) = a3;
  std::string::operator=((std::string *)(v10 + 32), a4);
  *((_DWORD *)v10 + 16) = a5;
  sub_1007BEEA4(*a1, &v11);
  if (*((void *)&v11 + 1)) {
    sub_10004D2C8(*((std::__shared_weak_count **)&v11 + 1));
  }
}

void sub_100DDAA78(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DDAA90(uint64_t a1, int a2, int a3)
{
  uint64_t result = DataiRatControllerInterface::isCriticalAppType();
  if (result)
  {
    uint64_t v9 = *(void *)(a1 + 120);
    uint64_t v8 = a1 + 120;
    uint64_t v7 = v9;
    if (!v9) {
      return 0;
    }
    uint64_t v10 = v8;
    do
    {
      int v11 = *(_DWORD *)(v7 + 32);
      BOOL v12 = v11 < a2;
      if (v11 >= a2) {
        uint64_t v13 = (uint64_t *)v7;
      }
      else {
        uint64_t v13 = (uint64_t *)(v7 + 8);
      }
      if (!v12) {
        uint64_t v10 = v7;
      }
      uint64_t v7 = *v13;
    }
    while (*v13);
    if (v10 != v8 && (v15 = *(_DWORD *)(v10 + 32), uint64_t v14 = v10 + 32, v15 <= a2)) {
      return *(void *)(v14 + 8 * a3 + 48) != 0;
    }
    else {
      return 0;
    }
  }
  return result;
}

void sub_100DDAB20(uint64_t a1)
{
  uint64_t v2 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = *(void *)(a1 + 64);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v3;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I DATA:: -------------------------- %s --------------------------", buf, 0xCu);
  }
  uint64_t v4 = *(void **)(a1 + 112);
  if (v4 != (void *)(a1 + 120))
  {
    do
    {
      uint64_t v5 = *(NSObject **)(a1 + 48);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v6 = subscriber::asString();
        asString();
        if (v19 >= 0) {
          uint64_t v7 = buf;
        }
        else {
          uint64_t v7 = *(const char **)buf;
        }
        *(_DWORD *)uint64_t v20 = 136315394;
        uint64_t v21 = v6;
        __int16 v22 = 2080;
        int v23 = v7;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I DATA:: Subscribed App Types: %s: %s", v20, 0x16u);
        if (v19 < 0) {
          operator delete(*(void **)buf);
        }
        uint64_t v5 = *(NSObject **)(a1 + 48);
      }
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I DATA:: Critical App Status: {", buf, 2u);
      }
      for (uint64_t i = 0; i != 3; ++i)
      {
        uint64_t v9 = *(NSObject **)(a1 + 48);
        if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v10 = asString();
          int v11 = (AppTypeStatus *)v4[i + 10];
          if (v11)
          {
            AppTypeStatus::asString((uint64_t *)buf, v11);
            if (v19 >= 0) {
              BOOL v12 = buf;
            }
            else {
              BOOL v12 = *(const char **)buf;
            }
            *(_DWORD *)uint64_t v20 = 136315394;
            uint64_t v21 = v10;
            __int16 v22 = 2080;
            int v23 = v12;
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t%s: (%s)", v20, 0x16u);
            if (v19 < 0) {
              operator delete(*(void **)buf);
            }
          }
          else
          {
            *(_DWORD *)uint64_t v20 = 136315394;
            uint64_t v21 = v10;
            __int16 v22 = 2080;
            int v23 = "null";
            _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I DATA:: \t%s: (%s)", v20, 0x16u);
          }
        }
      }
      uint64_t v13 = (void *)v4[1];
      if (v13)
      {
        do
        {
          uint64_t v14 = v13;
          uint64_t v13 = (void *)*v13;
        }
        while (v13);
      }
      else
      {
        do
        {
          uint64_t v14 = (void *)v4[2];
          BOOL v15 = *v14 == (void)v4;
          uint64_t v4 = v14;
        }
        while (!v15);
      }
      uint64_t v4 = v14;
    }
    while (v14 != (void *)(a1 + 120));
  }
  uint64_t v16 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I DATA:: }", buf, 2u);
    uint64_t v16 = *(NSObject **)(a1 + 48);
  }
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = asStringBool(*(unsigned char *)(a1 + 104));
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v17;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I DATA:: fLoginSessionActive=%s", buf, 0xCu);
  }
}

void sub_100DDAE70()
{
}

uint64_t sub_100DDAE84(uint64_t a1)
{
  return *(void *)(a1 + 8) + 48;
}

void sub_100DDAE90(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100DDAE90(a1, *a2);
    sub_100DDAE90(a1, a2[1]);
    sub_100DDAEEC((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

void sub_100DDAEEC(uint64_t a1)
{
  uint64_t v2 = 0;
  uint64_t v3 = a1 + 64;
  do
  {
    uint64_t v4 = *(void *)(v3 + v2);
    *(void *)(v3 + v2) = 0;
    if (v4) {
      sub_100DDB2AC(v3 + v2, v4);
    }
    v2 -= 8;
  }
  while (v2 != -24);
  sub_1000346F8(a1 + 24, *(void **)(a1 + 32));
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    sub_10004D2C8(v5);
  }
}

void sub_100DDAF74()
{
}

__n128 sub_100DDAF88(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5C0E0;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DDAFDC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5C0E0;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DDB014(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_10003447C((uint64_t)v3, a2);
  uint64_t v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    uint64_t v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_1000346F8((uint64_t)&v9, v10);
}

void sub_100DDB0D4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100DDB0EC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDB12C()
{
}

void sub_100DDB13C()
{
}

__n128 sub_100DDB150(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A5C160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100DDB1A4(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5C160;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DDB1DC(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100DDB224(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DDB264()
{
}

uint64_t sub_100DDB270(uint64_t a1)
{
  return (*(uint64_t (**)(void))(*(void *)(a1 + 32) + 16))();
}

uint64_t sub_100DDB280(uint64_t result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(result + 40) = *(void *)(a2 + 40);
  *(void *)(result + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DDB29C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 48);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100DDB2AC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    if (*(char *)(a2 + 31) < 0) {
      operator delete(*(void **)(a2 + 8));
    }
    operator delete();
  }
}

const void **sub_100DDB308(CFMutableDictionaryRef *a1, long long *a2)
{
  uint64_t v4 = *a1;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long __dst = *a2;
    uint64_t v54 = *((void *)a2 + 2);
  }
  if (SHIBYTE(v54) < 0)
  {
    sub_10004FC84(&v56, (void *)__dst, *((unint64_t *)&__dst + 1));
  }
  else
  {
    long long v56 = __dst;
    uint64_t v57 = v54;
  }
  id v60 = 0;
  if (SHIBYTE(v57) < 0)
  {
    sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
  }
  else
  {
    long long v58 = v56;
    uint64_t v59 = v57;
  }
  id v61 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v5 = v60;
    id v60 = v61;
    v45[0] = v5;
    sub_1000558F4((const void **)v45);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  long long v55 = v60;
  id v60 = 0;
  sub_1000558F4((const void **)&v60);
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56);
  }
  CFDictionaryAddValue(v4, @"carrierPostData", v55);
  sub_1000558F4((const void **)&v55);
  if (SHIBYTE(v54) < 0) {
    operator delete((void *)__dst);
  }
  if (*((unsigned char *)a2 + 280))
  {
    uint64_t v6 = *a1;
    if (*((char *)a2 + 311) < 0)
    {
      sub_10004FC84(&v51, *((void **)a2 + 36), *((void *)a2 + 37));
    }
    else
    {
      long long v51 = a2[18];
      uint64_t v52 = *((void *)a2 + 38);
    }
    if (SHIBYTE(v52) < 0)
    {
      sub_10004FC84(&v56, (void *)v51, *((unint64_t *)&v51 + 1));
    }
    else
    {
      long long v56 = v51;
      uint64_t v57 = v52;
    }
    id v60 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v61 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v7 = v60;
      id v60 = v61;
      v45[0] = v7;
      sub_1000558F4((const void **)v45);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    long long v55 = v60;
    id v60 = 0;
    sub_1000558F4((const void **)&v60);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFDictionaryAddValue(v6, @"authorization-token", v55);
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
  }
  uint64_t v50 = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  CFMutableArrayRef v49 = 0;
  uint64_t v50 = Mutable;
  CFMutableArrayRef v49 = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
  uint64_t v9 = v50;
  if (*((char *)a2 + 71) < 0)
  {
    sub_10004FC84(__p, *((void **)a2 + 6), *((void *)a2 + 7));
  }
  else
  {
    *(_OWORD *)std::string __p = a2[3];
    uint64_t v48 = *((void *)a2 + 8);
  }
  if (SHIBYTE(v48) < 0)
  {
    sub_10004FC84(&v56, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v56 = *(_OWORD *)__p;
    uint64_t v57 = v48;
  }
  id v60 = 0;
  if (SHIBYTE(v57) < 0)
  {
    sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
  }
  else
  {
    long long v58 = v56;
    uint64_t v59 = v57;
  }
  id v61 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v10 = v60;
    id v60 = v61;
    v45[0] = v10;
    sub_1000558F4((const void **)v45);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  long long v55 = v60;
  id v60 = 0;
  sub_1000558F4((const void **)&v60);
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56);
  }
  CFDictionaryAddValue(v9, @"eid", v55);
  sub_1000558F4((const void **)&v55);
  if (SHIBYTE(v48) < 0) {
    operator delete(__p[0]);
  }
  int v11 = (long long *)*((void *)a2 + 9);
  BOOL v12 = (long long *)*((void *)a2 + 10);
  while (v11 != v12)
  {
    v45[0] = 0;
    v45[1] = 0;
    uint64_t v46 = 0;
    if (*((char *)v11 + 23) < 0)
    {
      sub_10004FC84(v45, *(void **)v11, *((void *)v11 + 1));
    }
    else
    {
      long long v13 = *v11;
      uint64_t v46 = *((void *)v11 + 2);
      *(_OWORD *)__int16 v45 = v13;
    }
    uint64_t v14 = v49;
    if (SHIBYTE(v46) < 0)
    {
      sub_10004FC84(v42, v45[0], (unint64_t)v45[1]);
    }
    else
    {
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v45;
      uint64_t v43 = v46;
    }
    if (SHIBYTE(v43) < 0)
    {
      sub_10004FC84(&v56, v42[0], (unint64_t)v42[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v42;
      uint64_t v57 = v43;
    }
    long long v55 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v60 = 0;
    if (ctu::cf::convert_copy())
    {
      BOOL v15 = v55;
      long long v55 = v60;
      id v61 = v15;
      sub_1000558F4((const void **)&v61);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    BOOL value = v55;
    long long v55 = 0;
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFArrayAppendValue(v14, value);
    sub_1000558F4((const void **)&value);
    if (SHIBYTE(v43) < 0) {
      operator delete(v42[0]);
    }
    if (SHIBYTE(v46) < 0) {
      operator delete(v45[0]);
    }
    int v11 = (long long *)((char *)v11 + 24);
  }
  CFDictionaryAddValue(v50, @"iccids", v49);
  uint64_t v16 = v50;
  if (*((char *)a2 + 279) < 0)
  {
    sub_10004FC84(v40, *((void **)a2 + 32), *((void *)a2 + 33));
  }
  else
  {
    *(_OWORD *)int v40 = a2[16];
    uint64_t v41 = *((void *)a2 + 34);
  }
  if (SHIBYTE(v41) < 0)
  {
    sub_10004FC84(&v56, v40[0], (unint64_t)v40[1]);
  }
  else
  {
    long long v56 = *(_OWORD *)v40;
    uint64_t v57 = v41;
  }
  id v60 = 0;
  if (SHIBYTE(v57) < 0)
  {
    sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
  }
  else
  {
    long long v58 = v56;
    uint64_t v59 = v57;
  }
  id v61 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v17 = v60;
    id v60 = v61;
    v45[0] = v17;
    sub_1000558F4((const void **)v45);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  long long v55 = v60;
  id v60 = 0;
  sub_1000558F4((const void **)&v60);
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56);
  }
  CFDictionaryAddValue(v16, @"display-name", v55);
  sub_1000558F4((const void **)&v55);
  if (SHIBYTE(v41) < 0) {
    operator delete(v40[0]);
  }
  if (*((unsigned char *)a2 + 96))
  {
    int v18 = v50;
    if (*((char *)a2 + 127) < 0)
    {
      sub_10004FC84(v38, *((void **)a2 + 13), *((void *)a2 + 14));
    }
    else
    {
      *(_OWORD *)xpc_object_t v38 = *(long long *)((char *)a2 + 104);
      uint64_t v39 = *((void *)a2 + 15);
    }
    if (SHIBYTE(v39) < 0)
    {
      sub_10004FC84(&v56, v38[0], (unint64_t)v38[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v38;
      uint64_t v57 = v39;
    }
    id v60 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v61 = 0;
    if (ctu::cf::convert_copy())
    {
      char v19 = v60;
      id v60 = v61;
      v45[0] = v19;
      sub_1000558F4((const void **)v45);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    long long v55 = v60;
    id v60 = 0;
    sub_1000558F4((const void **)&v60);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFDictionaryAddValue(v18, @"device-imei", v55);
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v39) < 0) {
      operator delete(v38[0]);
    }
  }
  if (*((unsigned char *)a2 + 128))
  {
    uint64_t v20 = v50;
    if (*((char *)a2 + 159) < 0)
    {
      sub_10004FC84(v36, *((void **)a2 + 17), *((void *)a2 + 18));
    }
    else
    {
      *(_OWORD *)int v36 = *(long long *)((char *)a2 + 136);
      uint64_t v37 = *((void *)a2 + 19);
    }
    if (SHIBYTE(v37) < 0)
    {
      sub_10004FC84(&v56, v36[0], (unint64_t)v36[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v36;
      uint64_t v57 = v37;
    }
    id v60 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v61 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v21 = v60;
      id v60 = v61;
      v45[0] = v21;
      sub_1000558F4((const void **)v45);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    long long v55 = v60;
    id v60 = 0;
    sub_1000558F4((const void **)&v60);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFDictionaryAddValue(v20, @"device-meid", v55);
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v37) < 0) {
      operator delete(v36[0]);
    }
  }
  if (*((unsigned char *)a2 + 160))
  {
    __int16 v22 = v50;
    if (*((char *)a2 + 191) < 0)
    {
      sub_10004FC84(v34, *((void **)a2 + 21), *((void *)a2 + 22));
    }
    else
    {
      *(_OWORD *)uint64_t v34 = *(long long *)((char *)a2 + 168);
      uint64_t v35 = *((void *)a2 + 23);
    }
    if (SHIBYTE(v35) < 0)
    {
      sub_10004FC84(&v56, v34[0], (unint64_t)v34[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v34;
      uint64_t v57 = v35;
    }
    id v60 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v61 = 0;
    if (ctu::cf::convert_copy())
    {
      int v23 = v60;
      id v60 = v61;
      v45[0] = v23;
      sub_1000558F4((const void **)v45);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    long long v55 = v60;
    id v60 = 0;
    sub_1000558F4((const void **)&v60);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFDictionaryAddValue(v22, @"device-type", v55);
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v35) < 0) {
      operator delete(v34[0]);
    }
  }
  if (*((unsigned char *)a2 + 200))
  {
    size_t v24 = v50;
    if (*((char *)a2 + 231) < 0)
    {
      sub_10004FC84(v32, *((void **)a2 + 26), *((void *)a2 + 27));
    }
    else
    {
      *(_OWORD *)uint64_t v32 = a2[13];
      uint64_t v33 = *((void *)a2 + 28);
    }
    if (SHIBYTE(v33) < 0)
    {
      sub_10004FC84(&v56, v32[0], (unint64_t)v32[1]);
    }
    else
    {
      long long v56 = *(_OWORD *)v32;
      uint64_t v57 = v33;
    }
    id v60 = 0;
    if (SHIBYTE(v57) < 0)
    {
      sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
    }
    else
    {
      long long v58 = v56;
      uint64_t v59 = v57;
    }
    id v61 = 0;
    if (ctu::cf::convert_copy())
    {
      int v25 = v60;
      id v60 = v61;
      v45[0] = v25;
      sub_1000558F4((const void **)v45);
    }
    if (SHIBYTE(v59) < 0) {
      operator delete((void *)v58);
    }
    long long v55 = v60;
    id v60 = 0;
    sub_1000558F4((const void **)&v60);
    if (SHIBYTE(v57) < 0) {
      operator delete((void *)v56);
    }
    CFDictionaryAddValue(v24, @"service", v55);
    sub_1000558F4((const void **)&v55);
    if (SHIBYTE(v33) < 0) {
      operator delete(v32[0]);
    }
  }
  size_t v26 = v50;
  if (*((char *)a2 + 47) < 0)
  {
    sub_10004FC84(v30, *((void **)a2 + 3), *((void *)a2 + 4));
  }
  else
  {
    *(_OWORD *)unint64_t v30 = *(long long *)((char *)a2 + 24);
    uint64_t v31 = *((void *)a2 + 5);
  }
  if (SHIBYTE(v31) < 0)
  {
    sub_10004FC84(&v56, v30[0], (unint64_t)v30[1]);
  }
  else
  {
    long long v56 = *(_OWORD *)v30;
    uint64_t v57 = v31;
  }
  id v60 = 0;
  if (SHIBYTE(v57) < 0)
  {
    sub_10004FC84(&v58, (void *)v56, *((unint64_t *)&v56 + 1));
  }
  else
  {
    long long v58 = v56;
    uint64_t v59 = v57;
  }
  id v61 = 0;
  if (ctu::cf::convert_copy())
  {
    size_t v27 = v60;
    id v60 = v61;
    v45[0] = v27;
    sub_1000558F4((const void **)v45);
  }
  if (SHIBYTE(v59) < 0) {
    operator delete((void *)v58);
  }
  uint64_t v28 = v60;
  long long v55 = v60;
  id v60 = 0;
  sub_1000558F4((const void **)&v60);
  if (SHIBYTE(v57) < 0) {
    operator delete((void *)v56);
  }
  CFDictionaryAddValue(v26, @"primary-device-iccid", v28);
  sub_1000558F4((const void **)&v55);
  if (SHIBYTE(v31) < 0) {
    operator delete(v30[0]);
  }
  CFDictionaryAddValue(*a1, @"secondary-device-active", v50);
  sub_1000440D4((const void **)&v49);
  return sub_10005717C((const void **)&v50);
}

void sub_100DDBF28(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  sub_1000558F4((const void **)(v18 - 80));
  if (*(char *)(v18 - 121) < 0) {
    operator delete(*(void **)(v18 - 144));
  }
  if (a18 < 0) {
    operator delete(__p);
  }
  sub_1000440D4((const void **)(v18 - 224));
  sub_10005717C((const void **)(v18 - 216));
  _Unwind_Resume(a1);
}

const void **sub_100DDC324(const void **result, uint64_t a2)
{
  uint64_t v2 = (__CFDictionary *)*result;
  if (*result) {
    uint64_t v3 = sub_1000C06D0;
  }
  else {
    uint64_t v3 = 0;
  }
  if (v3)
  {
    uint64_t v5 = (CFMutableDictionaryRef *)result;
    if (*(char *)(a2 + 23) < 0)
    {
      sub_10004FC84(__p, *(void **)a2, *(void *)(a2 + 8));
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)a2;
      uint64_t v46 = *(void *)(a2 + 16);
    }
    if (SHIBYTE(v46) < 0)
    {
      sub_10004FC84(&__dst, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long __dst = *(_OWORD *)__p;
      uint64_t v50 = v46;
    }
    uint64_t v48 = 0;
    if (SHIBYTE(v50) < 0)
    {
      sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
    }
    else
    {
      long long v51 = __dst;
      uint64_t v52 = v50;
    }
    id v53 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v6 = v48;
      uint64_t v48 = v53;
      v54[0] = v6;
      sub_1000558F4(v54);
    }
    if (SHIBYTE(v52) < 0) {
      operator delete((void *)v51);
    }
    CFMutableArrayRef v47 = (CFMutableArrayRef)v48;
    uint64_t v48 = 0;
    sub_1000558F4((const void **)&v48);
    if (SHIBYTE(v50) < 0) {
      operator delete((void *)__dst);
    }
    CFDictionaryAddValue(v2, @"eid", v47);
    sub_1000558F4((const void **)&v47);
    if (SHIBYTE(v46) < 0) {
      operator delete(__p[0]);
    }
    CFMutableArrayRef v47 = 0;
    CFMutableArrayRef Mutable = CFArrayCreateMutable(kCFAllocatorDefault, 0, &kCFTypeArrayCallBacks);
    if (Mutable)
    {
      CFMutableArrayRef v8 = v47;
      CFMutableArrayRef v47 = Mutable;
      *(void *)&long long v51 = v8;
      sub_1000440D4((const void **)&v51);
      uint64_t v10 = *(long long **)(a2 + 24);
      uint64_t v9 = *(long long **)(a2 + 32);
      if (v10 == v9)
      {
LABEL_74:
        CFDictionaryAddValue(*v5, @"iccid-profile", v47);
        int v23 = *v5;
        if (*(char *)(a2 + 79) < 0)
        {
          sub_10004FC84(v34, *(void **)(a2 + 56), *(void *)(a2 + 64));
        }
        else
        {
          *(_OWORD *)uint64_t v34 = *(_OWORD *)(a2 + 56);
          uint64_t v35 = *(void *)(a2 + 72);
        }
        if (SHIBYTE(v35) < 0)
        {
          sub_10004FC84(&__dst, v34[0], (unint64_t)v34[1]);
        }
        else
        {
          long long __dst = *(_OWORD *)v34;
          uint64_t v50 = v35;
        }
        uint64_t v48 = 0;
        if (SHIBYTE(v50) < 0)
        {
          sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
        }
        else
        {
          long long v51 = __dst;
          uint64_t v52 = v50;
        }
        id v53 = 0;
        if (ctu::cf::convert_copy())
        {
          size_t v24 = v48;
          uint64_t v48 = v53;
          v54[0] = v24;
          sub_1000558F4(v54);
        }
        if (SHIBYTE(v52) < 0) {
          operator delete((void *)v51);
        }
        uint64_t v44 = v48;
        uint64_t v48 = 0;
        sub_1000558F4((const void **)&v48);
        if (SHIBYTE(v50) < 0) {
          operator delete((void *)__dst);
        }
        CFDictionaryAddValue(v23, @"display-name", v44);
        sub_1000558F4((const void **)&v44);
        if (SHIBYTE(v35) < 0) {
          operator delete(v34[0]);
        }
        if (*(unsigned char *)(a2 + 80))
        {
          int v25 = *v5;
          if (*(char *)(a2 + 111) < 0)
          {
            sub_10004FC84(v32, *(void **)(a2 + 88), *(void *)(a2 + 96));
          }
          else
          {
            *(_OWORD *)uint64_t v32 = *(_OWORD *)(a2 + 88);
            uint64_t v33 = *(void *)(a2 + 104);
          }
          if (SHIBYTE(v33) < 0)
          {
            sub_10004FC84(&__dst, v32[0], (unint64_t)v32[1]);
          }
          else
          {
            long long __dst = *(_OWORD *)v32;
            uint64_t v50 = v33;
          }
          uint64_t v48 = 0;
          if (SHIBYTE(v50) < 0)
          {
            sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            long long v51 = __dst;
            uint64_t v52 = v50;
          }
          id v53 = 0;
          if (ctu::cf::convert_copy())
          {
            size_t v26 = v48;
            uint64_t v48 = v53;
            v54[0] = v26;
            sub_1000558F4(v54);
          }
          if (SHIBYTE(v52) < 0) {
            operator delete((void *)v51);
          }
          uint64_t v44 = v48;
          uint64_t v48 = 0;
          sub_1000558F4((const void **)&v48);
          if (SHIBYTE(v50) < 0) {
            operator delete((void *)__dst);
          }
          CFDictionaryAddValue(v25, @"device-type", v44);
          sub_1000558F4((const void **)&v44);
          if (SHIBYTE(v33) < 0) {
            operator delete(v32[0]);
          }
        }
        if (*(unsigned char *)(a2 + 112))
        {
          size_t v27 = *v5;
          if (*(char *)(a2 + 143) < 0)
          {
            sub_10004FC84(v30, *(void **)(a2 + 120), *(void *)(a2 + 128));
          }
          else
          {
            *(_OWORD *)unint64_t v30 = *(_OWORD *)(a2 + 120);
            uint64_t v31 = *(void *)(a2 + 136);
          }
          if (SHIBYTE(v31) < 0)
          {
            sub_10004FC84(&__dst, v30[0], (unint64_t)v30[1]);
          }
          else
          {
            long long __dst = *(_OWORD *)v30;
            uint64_t v50 = v31;
          }
          uint64_t v48 = 0;
          if (SHIBYTE(v50) < 0)
          {
            sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
          }
          else
          {
            long long v51 = __dst;
            uint64_t v52 = v50;
          }
          id v53 = 0;
          if (ctu::cf::convert_copy())
          {
            uint64_t v28 = v48;
            uint64_t v48 = v53;
            v54[0] = v28;
            sub_1000558F4(v54);
          }
          if (SHIBYTE(v52) < 0) {
            operator delete((void *)v51);
          }
          uint64_t v29 = v48;
          uint64_t v44 = v48;
          uint64_t v48 = 0;
          sub_1000558F4((const void **)&v48);
          if (SHIBYTE(v50) < 0) {
            operator delete((void *)__dst);
          }
          CFDictionaryAddValue(v27, @"primary-device-iccid", v29);
          sub_1000558F4((const void **)&v44);
          if (SHIBYTE(v31) < 0) {
            operator delete(v30[0]);
          }
        }
      }
      else
      {
        while (1)
        {
          uint64_t v44 = 0;
          CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
          if (!v11) {
            break;
          }
          BOOL v12 = v44;
          uint64_t v44 = v11;
          *(void *)&long long v51 = v12;
          sub_10005717C((const void **)&v51);
          long long v13 = (__CFDictionary *)v44;
          if (*((char *)v10 + 23) < 0)
          {
            sub_10004FC84(v42, *(void **)v10, *((void *)v10 + 1));
          }
          else
          {
            long long v14 = *v10;
            uint64_t v43 = *((void *)v10 + 2);
            *(_OWORD *)uint64_t v42 = v14;
          }
          BOOL value = &stru_101AC1B28;
          if (SHIBYTE(v43) < 0)
          {
            sub_10004FC84(&v51, v42[0], (unint64_t)v42[1]);
          }
          else
          {
            long long v51 = *(_OWORD *)v42;
            uint64_t v52 = v43;
          }
          v54[0] = 0;
          if (ctu::cf::convert_copy())
          {
            BOOL v15 = value;
            BOOL value = (void *)v54[0];
            *(void *)&long long __dst = v15;
            sub_1000558F4((const void **)&__dst);
          }
          if (SHIBYTE(v52) < 0) {
            operator delete((void *)v51);
          }
          uint64_t v16 = value;
          id v53 = value;
          BOOL value = 0;
          CFDictionaryAddValue(v13, @"iccid", v16);
          sub_1000558F4((const void **)&v53);
          sub_1000558F4((const void **)&value);
          if (SHIBYTE(v43) < 0) {
            operator delete(v42[0]);
          }
          if (*((unsigned char *)v10 + 24))
          {
            uint64_t v17 = (__CFDictionary *)v44;
            if (*((char *)v10 + 55) < 0)
            {
              sub_10004FC84(v38, *((void **)v10 + 4), *((void *)v10 + 5));
            }
            else
            {
              long long v18 = v10[2];
              uint64_t v39 = *((void *)v10 + 6);
              *(_OWORD *)xpc_object_t v38 = v18;
            }
            if (SHIBYTE(v39) < 0)
            {
              sub_10004FC84(&__dst, v38[0], (unint64_t)v38[1]);
            }
            else
            {
              long long __dst = *(_OWORD *)v38;
              uint64_t v50 = v39;
            }
            uint64_t v48 = 0;
            if (SHIBYTE(v50) < 0)
            {
              sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
            }
            else
            {
              long long v51 = __dst;
              uint64_t v52 = v50;
            }
            id v53 = 0;
            if (ctu::cf::convert_copy())
            {
              char v19 = v48;
              uint64_t v48 = v53;
              v54[0] = v19;
              sub_1000558F4(v54);
            }
            if (SHIBYTE(v52) < 0) {
              operator delete((void *)v51);
            }
            int v40 = v48;
            uint64_t v48 = 0;
            sub_1000558F4((const void **)&v48);
            if (SHIBYTE(v50) < 0) {
              operator delete((void *)__dst);
            }
            CFDictionaryAddValue(v17, @"imei", v40);
            sub_1000558F4((const void **)&v40);
            if (SHIBYTE(v39) < 0) {
              operator delete(v38[0]);
            }
          }
          if (*((unsigned char *)v10 + 56))
          {
            uint64_t v20 = (__CFDictionary *)v44;
            if (*((char *)v10 + 87) < 0)
            {
              sub_10004FC84(v36, *((void **)v10 + 8), *((void *)v10 + 9));
            }
            else
            {
              long long v21 = v10[4];
              uint64_t v37 = *((void *)v10 + 10);
              *(_OWORD *)int v36 = v21;
            }
            if (SHIBYTE(v37) < 0)
            {
              sub_10004FC84(&__dst, v36[0], (unint64_t)v36[1]);
            }
            else
            {
              long long __dst = *(_OWORD *)v36;
              uint64_t v50 = v37;
            }
            uint64_t v48 = 0;
            if (SHIBYTE(v50) < 0)
            {
              sub_10004FC84(&v51, (void *)__dst, *((unint64_t *)&__dst + 1));
            }
            else
            {
              long long v51 = __dst;
              uint64_t v52 = v50;
            }
            id v53 = 0;
            if (ctu::cf::convert_copy())
            {
              __int16 v22 = v48;
              uint64_t v48 = v53;
              v54[0] = v22;
              sub_1000558F4(v54);
            }
            if (SHIBYTE(v52) < 0) {
              operator delete((void *)v51);
            }
            int v40 = v48;
            uint64_t v48 = 0;
            sub_1000558F4((const void **)&v48);
            if (SHIBYTE(v50) < 0) {
              operator delete((void *)__dst);
            }
            CFDictionaryAddValue(v20, @"meid", v40);
            sub_1000558F4((const void **)&v40);
            if (SHIBYTE(v37) < 0) {
              operator delete(v36[0]);
            }
          }
          CFArrayAppendValue(v47, v44);
          sub_10005717C((const void **)&v44);
          uint64_t v10 = (long long *)((char *)v10 + 88);
          if (v10 == v9) {
            goto LABEL_74;
          }
        }
        sub_10005717C((const void **)&v44);
      }
    }
    return sub_1000440D4((const void **)&v47);
  }
  return result;
}

void sub_100DDCC04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,int a25,__int16 a26,char a27,char a28,uint64_t a29,void *a30,uint64_t a31,int a32,__int16 a33,char a34,char a35,uint64_t a36,uint64_t a37,uint64_t a38,int a39,__int16 a40,char a41,char a42,uint64_t a43,char a44,int a45,__int16 a46,char a47,char a48,uint64_t a49,uint64_t a50,int a51,__int16 a52,char a53,char a54,char a55,void *a56,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  sub_1000558F4((const void **)(v61 - 168));
  if (*(char *)(v61 - 137) < 0) {
    operator delete(*(void **)(v61 - 160));
  }
  if (a14 < 0) {
    operator delete(__p);
  }
  sub_1000440D4((const void **)(v61 - 176));
  _Unwind_Resume(a1);
}

BOOL sub_100DDCEB8(CFMutableDictionaryRef *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  if (*(char *)(a2 + 55) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a2 + 32), *(void *)(a2 + 40));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(a2 + 32);
    uint64_t v20 = *(void *)(a2 + 48);
  }
  if (SHIBYTE(v20) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v24 = v20;
  }
  __int16 v22 = 0;
  if (SHIBYTE(v24) < 0)
  {
    sub_10004FC84(&v25, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    long long v25 = *(_OWORD *)__p;
    uint64_t v26 = v24;
  }
  size_t v27 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v5 = v22;
    __int16 v22 = v27;
    CFMutableDictionaryRef v28 = v5;
    sub_1000558F4((const void **)&v28);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete((void *)v25);
  }
  BOOL value = v22;
  __int16 v22 = 0;
  sub_1000558F4((const void **)&v22);
  if (SHIBYTE(v24) < 0) {
    operator delete(__p[0]);
  }
  CFDictionaryAddValue(v4, @"carrierPostData", value);
  sub_1000558F4((const void **)&value);
  if (SHIBYTE(v20) < 0) {
    operator delete(__dst[0]);
  }
  if (*(unsigned char *)a2)
  {
    uint64_t v6 = *a1;
    if (*(char *)(a2 + 31) < 0)
    {
      sub_10004FC84(v17, *(void **)(a2 + 8), *(void *)(a2 + 16));
    }
    else
    {
      *(_OWORD *)uint64_t v17 = *(_OWORD *)(a2 + 8);
      uint64_t v18 = *(void *)(a2 + 24);
    }
    if (SHIBYTE(v18) < 0)
    {
      sub_10004FC84(__p, v17[0], (unint64_t)v17[1]);
    }
    else
    {
      *(_OWORD *)std::string __p = *(_OWORD *)v17;
      uint64_t v24 = v18;
    }
    __int16 v22 = 0;
    if (SHIBYTE(v24) < 0)
    {
      sub_10004FC84(&v25, __p[0], (unint64_t)__p[1]);
    }
    else
    {
      long long v25 = *(_OWORD *)__p;
      uint64_t v26 = v24;
    }
    size_t v27 = 0;
    if (ctu::cf::convert_copy())
    {
      uint64_t v7 = v22;
      __int16 v22 = v27;
      CFMutableDictionaryRef v28 = v7;
      sub_1000558F4((const void **)&v28);
    }
    if (SHIBYTE(v26) < 0) {
      operator delete((void *)v25);
    }
    CFMutableArrayRef v8 = v22;
    BOOL value = v22;
    __int16 v22 = 0;
    sub_1000558F4((const void **)&v22);
    if (SHIBYTE(v24) < 0) {
      operator delete(__p[0]);
    }
    CFDictionaryAddValue(v6, @"authorization-token", v8);
    sub_1000558F4((const void **)&value);
    if (SHIBYTE(v18) < 0) {
      operator delete(v17[0]);
    }
  }
  __p[0] = 0;
  CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v10 = __p[0];
    __p[0] = Mutable;
    *(void *)&long long v25 = v10;
    sub_10005717C((const void **)&v25);
    uint64_t v16 = __p[0];
    if (__p[0]) {
      CFRetain(__p[0]);
    }
    sub_100DDC324((const void **)&v16, a2 + 56);
    sub_10005717C((const void **)&v16);
    CFDictionaryAddValue(*a1, @"old-device", __p[0]);
    CFMutableDictionaryRef v28 = 0;
    CFMutableDictionaryRef v11 = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    BOOL v12 = v11 != 0;
    if (v11)
    {
      CFMutableDictionaryRef v13 = v28;
      CFMutableDictionaryRef v28 = v11;
      *(void *)&long long v25 = v13;
      sub_10005717C((const void **)&v25);
      CFMutableDictionaryRef v15 = v28;
      if (v28) {
        CFRetain(v28);
      }
      sub_100DDC324((const void **)&v15, a2 + 200);
      sub_10005717C((const void **)&v15);
      CFDictionaryAddValue(*a1, @"target-device", v28);
    }
    sub_10005717C((const void **)&v28);
  }
  else
  {
    BOOL v12 = 0;
  }
  sub_10005717C((const void **)__p);
  return v12;
}

void sub_100DDD240(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,int a26,const void *a27,void *__p,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
  if (a33 < 0) {
    operator delete(__p);
  }
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void sub_100DDD340(CFMutableDictionaryRef *a1, uint64_t a2)
{
  uint64_t v3 = *a1;
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v7, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v7 = *(_OWORD *)a2;
    uint64_t v8 = *(void *)(a2 + 16);
  }
  if (SHIBYTE(v8) < 0)
  {
    sub_10004FC84(__dst, v7[0], (unint64_t)v7[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)v7;
    uint64_t v12 = v8;
  }
  uint64_t v10 = 0;
  if (SHIBYTE(v12) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    uint64_t v14 = v12;
  }
  CFMutableDictionaryRef v15 = 0;
  if (ctu::cf::convert_copy())
  {
    uint64_t v4 = v10;
    uint64_t v10 = v15;
    uint64_t v16 = v4;
    sub_1000558F4(&v16);
  }
  uint64_t v5 = (const void *)CTCellularPlanLaunchOptionsCarrierPostData;
  if (SHIBYTE(v14) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v6 = v10;
  uint64_t v9 = v10;
  uint64_t v10 = 0;
  sub_1000558F4(&v10);
  if (SHIBYTE(v12) < 0) {
    operator delete(__dst[0]);
  }
  CFDictionaryAddValue(v3, v5, v6);
  sub_1000558F4(&v9);
  if (SHIBYTE(v8) < 0) {
    operator delete(v7[0]);
  }
  CFDictionaryAddValue(*a1, CTCellularPlanUseCarrierPostDataAsBodyKey, kCFBooleanTrue);
}

void sub_100DDD4B8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, char a16, int a17, const void *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a14 < 0) {
    operator delete(a9);
  }
  _Unwind_Resume(a1);
}

void stewie::TargetCoordsFactory::create()
{
}

void sub_100DDD5D8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DDD614(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  if (*(char *)(a1 + 47) < 0) {
    uint64_t v3 = *(void *)(a1 + 32);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 47);
  }
  if (v3)
  {
    memset(&v85, 0, sizeof(v85));
    long long v80 = 0u;
    long long v81 = 0u;
    long long v78 = 0u;
    long long v79 = 0u;
    long long v76 = 0u;
    long long v77 = 0u;
    long long v74 = 0u;
    long long v75 = 0u;
    long long v72 = 0u;
    long long v73 = 0u;
    *(_OWORD *)std::string __p = 0u;
    long long v71 = 0u;
    long long v68 = 0u;
    long long v69 = 0u;
    long long v66 = 0u;
    long long v67 = 0u;
    long long v65 = 0u;
    sub_1003C09B4((void (__cdecl ***)(std::istringstream *__hidden))&v65, (const std::string *)(a1 + 24), 8);
    long long __dst = 0uLL;
    uint64_t v84 = 0;
    uint64_t v4 = 1;
    while (1)
    {
      std::ios_base::getloc((const std::ios_base *)((char *)&v65 + *(void *)(v65 - 24)));
      uint64_t v5 = std::locale::use_facet((const std::locale *)&v86, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v5->__vftable[2].~facet_0)(v5, 10);
      std::locale::~locale((std::locale *)&v86);
      uint64_t v6 = (void *)sub_10013EA34((uint64_t)&v65);
      if ((*((unsigned char *)v6 + *(void *)(*v6 - 24) + 32) & 5) != 0) {
        break;
      }
      memset(&v82, 0, sizeof(v82));
      std::ios_base::getloc((const std::ios_base *)((char *)&v65 + *(void *)(v65 - 24)));
      uint64_t v7 = std::locale::use_facet((const std::locale *)&v86, &std::ctype<char>::id);
      ((void (*)(const std::locale::facet *, uint64_t))v7->__vftable[2].~facet_0)(v7, 10);
      std::locale::~locale((std::locale *)&v86);
      uint64_t v8 = (void *)sub_10013EA34((uint64_t)&v65);
      if ((*((unsigned char *)v8 + *(void *)(*v8 - 24) + 32) & 5) != 0)
      {
        *(unsigned char *)a2 = 0;
        *(unsigned char *)(a2 + 24) = 0;
        int v9 = 1;
      }
      else
      {
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v10 = &v82;
        }
        else {
          uint64_t v10 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v82.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v82.__r_.__value_.__l.__size_;
        }
        uint64_t v12 = v4;
        if (!size) {
          goto LABEL_32;
        }
        CFMutableDictionaryRef v13 = (std::string *)((char *)v10 + size);
        do
        {
          uint64_t v14 = v10->__r_.__value_.__s.__data_[0];
          if (v10->__r_.__value_.__s.__data_[0] < 0
             ? __maskrune(v14, 0x200uLL)
             : _DefaultRuneLocale.__runetype[v14] & 0x200)
          {
            break;
          }
          uint64_t v10 = (std::string *)((char *)v10 + 1);
          --size;
        }
        while (size);
        if (size == 1)
        {
LABEL_32:
          CFMutableDictionaryRef v13 = v10;
        }
        else
        {
          uint64_t v16 = 1;
          CFMutableDictionaryRef v13 = v10;
          do
          {
            uint64_t v17 = v10->__r_.__value_.__s.__data_[v16];
            if (v10->__r_.__value_.__s.__data_[v16] < 0) {
              __uint32_t v18 = __maskrune(v17, 0x200uLL);
            }
            else {
              __uint32_t v18 = _DefaultRuneLocale.__runetype[v17] & 0x200;
            }
            if (!v18)
            {
              v13->__r_.__value_.__s.__data_[0] = v10->__r_.__value_.__s.__data_[v16];
              CFMutableDictionaryRef v13 = (std::string *)((char *)v13 + 1);
            }
            ++v16;
          }
          while (size != v16);
        }
        char v19 = (char *)&v82 + HIBYTE(v82.__r_.__value_.__r.__words[2]);
        if ((v82.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
        {
          uint64_t v20 = &v82;
        }
        else
        {
          char v19 = (char *)(v82.__r_.__value_.__r.__words[0] + v82.__r_.__value_.__l.__size_);
          uint64_t v20 = (std::string *)v82.__r_.__value_.__r.__words[0];
        }
        std::string::erase(&v82, (char *)v13 - (char *)v20, v19 - (char *)v13);
        memset(&v64, 0, sizeof(v64));
        std::ios_base::getloc((const std::ios_base *)((char *)&v65 + *(void *)(v65 - 24)));
        uint64_t v4 = v12;
        long long v21 = std::locale::use_facet((const std::locale *)&v86, &std::ctype<char>::id);
        ((void (*)(const std::locale::facet *, uint64_t))v21->__vftable[2].~facet_0)(v21, 10);
        std::locale::~locale((std::locale *)&v86);
        __int16 v22 = (void *)sub_10013EA34((uint64_t)&v65);
        if ((*((unsigned char *)v22 + *(void *)(*v22 - 24) + 32) & 5) != 0)
        {
          *(unsigned char *)a2 = 0;
          *(unsigned char *)(a2 + 24) = 0;
          int v9 = 1;
        }
        else
        {
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            int v23 = &v64;
          }
          else {
            int v23 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type v24 = HIBYTE(v64.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type v24 = v64.__r_.__value_.__l.__size_;
          }
          if (!v24) {
            goto LABEL_61;
          }
          long long v25 = (std::string *)((char *)v23 + v24);
          do
          {
            uint64_t v26 = v23->__r_.__value_.__s.__data_[0];
            if (v23->__r_.__value_.__s.__data_[0] < 0
               ? __maskrune(v26, 0x200uLL)
               : _DefaultRuneLocale.__runetype[v26] & 0x200)
            {
              break;
            }
            int v23 = (std::string *)((char *)v23 + 1);
            --v24;
          }
          while (v24);
          if (v24 == 1)
          {
LABEL_61:
            long long v25 = v23;
          }
          else
          {
            uint64_t v28 = 1;
            long long v25 = v23;
            do
            {
              uint64_t v29 = v23->__r_.__value_.__s.__data_[v28];
              if (v23->__r_.__value_.__s.__data_[v28] < 0) {
                __uint32_t v30 = __maskrune(v29, 0x200uLL);
              }
              else {
                __uint32_t v30 = _DefaultRuneLocale.__runetype[v29] & 0x200;
              }
              if (!v30)
              {
                v25->__r_.__value_.__s.__data_[0] = v23->__r_.__value_.__s.__data_[v28];
                long long v25 = (std::string *)((char *)v25 + 1);
              }
              ++v28;
            }
            while (v24 != v28);
          }
          uint64_t v31 = (char *)&v64 + HIBYTE(v64.__r_.__value_.__r.__words[2]);
          if ((v64.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0)
          {
            uint64_t v32 = &v64;
          }
          else
          {
            uint64_t v31 = (char *)(v64.__r_.__value_.__r.__words[0] + v64.__r_.__value_.__l.__size_);
            uint64_t v32 = (std::string *)v64.__r_.__value_.__r.__words[0];
          }
          std::string::erase(&v64, (char *)v25 - (char *)v32, v31 - (char *)v25);
          std::string::size_type v33 = v85.__r_.__value_.__l.__size_;
          if (v85.__r_.__value_.__l.__size_ >= v85.__r_.__value_.__r.__words[2])
          {
            unint64_t v37 = 0xCCCCCCCCCCCCCCCDLL
                * ((uint64_t)(v85.__r_.__value_.__l.__size_ - v85.__r_.__value_.__r.__words[0]) >> 4);
            unint64_t v38 = v37 + 1;
            if (v37 + 1 > 0x333333333333333) {
              sub_10006A748();
            }
            if (0x999999999999999ALL
               * ((uint64_t)(v85.__r_.__value_.__r.__words[2] - v85.__r_.__value_.__r.__words[0]) >> 4) > v38)
              unint64_t v38 = 0x999999999999999ALL
                  * ((uint64_t)(v85.__r_.__value_.__r.__words[2] - v85.__r_.__value_.__r.__words[0]) >> 4);
            if (0xCCCCCCCCCCCCCCCDLL
               * ((uint64_t)(v85.__r_.__value_.__r.__words[2] - v85.__r_.__value_.__r.__words[0]) >> 4) >= 0x199999999999999)
              unint64_t v39 = 0x333333333333333;
            else {
              unint64_t v39 = v38;
            }
            v87[2] = (char *)&v85.__r_.__value_.__l + 16;
            if (v39) {
              unint64_t v39 = (unint64_t)sub_1007551D4(v39);
            }
            else {
              uint64_t v40 = 0;
            }
            unint64_t v41 = v39 + 80 * v37;
            *(void *)&long long v86 = v39;
            *((void *)&v86 + 1) = v41;
            v87[1] = v39 + 80 * v40;
            *(_DWORD *)unint64_t v41 = v12;
            long long v42 = __dst;
            *(void *)(v41 + 24) = v84;
            *(_OWORD *)(v41 + 8) = v42;
            uint64_t v84 = 0;
            long long __dst = 0uLL;
            long long v43 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
            *(void *)(v41 + 48) = *((void *)&v82.__r_.__value_.__l + 2);
            *(_OWORD *)(v41 + 32) = v43;
            memset(&v82, 0, sizeof(v82));
            long long v44 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
            *(void *)(v41 + 72) = *((void *)&v64.__r_.__value_.__l + 2);
            *(_OWORD *)(v41 + 56) = v44;
            memset(&v64, 0, sizeof(v64));
            v87[0] = v41 + 80;
            sub_100DDE2B4((uint64_t *)&v85, &v86);
            std::string::size_type v36 = v85.__r_.__value_.__l.__size_;
            sub_100DDE450((uint64_t)&v86);
          }
          else
          {
            *(_DWORD *)v85.__r_.__value_.__l.__size_ = v12;
            uint64_t v34 = v84;
            *(_OWORD *)(v33 + 8) = __dst;
            *(void *)(v33 + 24) = v34;
            uint64_t v84 = 0;
            long long __dst = 0uLL;
            *(std::string *)(v33 + 32) = v82;
            memset(&v82, 0, sizeof(v82));
            long long v35 = *(_OWORD *)&v64.__r_.__value_.__l.__data_;
            *(void *)(v33 + 72) = *((void *)&v64.__r_.__value_.__l + 2);
            *(_OWORD *)(v33 + 56) = v35;
            memset(&v64, 0, sizeof(v64));
            std::string::size_type v36 = v33 + 80;
          }
          int v9 = 0;
          v85.__r_.__value_.__l.__size_ = v36;
          uint64_t v4 = (v12 + 1);
        }
        if (SHIBYTE(v64.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v64.__r_.__value_.__l.__data_);
        }
      }
      if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v82.__r_.__value_.__l.__data_);
      }
      if (v9) {
        goto LABEL_112;
      }
    }
    *(std::string *)a2 = v85;
    memset(&v85, 0, sizeof(v85));
    *(unsigned char *)(a2 + 24) = 1;
LABEL_112:
    if (SHIBYTE(v84) < 0) {
      operator delete((void *)__dst);
    }
    if (SBYTE7(v71) < 0) {
      operator delete(__p[0]);
    }
    std::streambuf::~streambuf();
    std::istream::~istream();
    std::ios::~ios();
    uint64_t v63 = &v85;
  }
  else
  {
    uint64_t v45 = *(void *)(a1 + 8);
    if (!v45)
    {
      *(unsigned char *)a2 = 0;
      *(unsigned char *)(a2 + 24) = 0;
      return;
    }
    v87[0] = 0;
    long long v46 = 0uLL;
    long long v86 = 0u;
    CFMutableArrayRef v47 = *(unsigned __int8 **)(v45 + 8);
    if (v47 == *(unsigned __int8 **)(v45 + 16))
    {
      uint64_t v62 = 0;
    }
    else
    {
      do
      {
        std::to_string(&v85, *v47);
        if ((char)v47[31] < 0)
        {
          sub_10004FC84(&__dst, *((void **)v47 + 1), *((void *)v47 + 2));
        }
        else
        {
          long long v48 = *(_OWORD *)(v47 + 8);
          uint64_t v84 = *((void *)v47 + 3);
          long long __dst = v48;
        }
        if ((char)v47[55] < 0)
        {
          sub_10004FC84(&v82, *((void **)v47 + 4), *((void *)v47 + 5));
        }
        else
        {
          long long v49 = *((_OWORD *)v47 + 2);
          v82.__r_.__value_.__r.__words[2] = *((void *)v47 + 6);
          *(_OWORD *)&v82.__r_.__value_.__l.__data_ = v49;
        }
        uint64_t v50 = *((void *)&v86 + 1);
        if (*((void *)&v86 + 1) >= v87[0])
        {
          unint64_t v53 = 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*((void *)&v86 + 1) - v86) >> 4);
          unint64_t v54 = v53 + 1;
          if (v53 + 1 > 0x333333333333333) {
            sub_10006A748();
          }
          if (0x999999999999999ALL * ((uint64_t)(v87[0] - v86) >> 4) > v54) {
            unint64_t v54 = 0x999999999999999ALL * ((uint64_t)(v87[0] - v86) >> 4);
          }
          if (0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(v87[0] - v86) >> 4) >= 0x199999999999999) {
            unint64_t v55 = 0x333333333333333;
          }
          else {
            unint64_t v55 = v54;
          }
          *(void *)&long long v67 = v87;
          if (v55) {
            unint64_t v55 = (unint64_t)sub_1007551D4(v55);
          }
          else {
            uint64_t v56 = 0;
          }
          unint64_t v57 = v55 + 80 * v53;
          *(void *)&long long v65 = v55;
          *((void *)&v65 + 1) = v57;
          *((void *)&v66 + 1) = v55 + 80 * v56;
          *(_DWORD *)unint64_t v57 = *v47;
          long long v58 = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
          *(void *)(v57 + 24) = *((void *)&v85.__r_.__value_.__l + 2);
          *(_OWORD *)(v57 + 8) = v58;
          memset(&v85, 0, sizeof(v85));
          long long v59 = __dst;
          *(void *)(v57 + 48) = v84;
          *(_OWORD *)(v57 + 32) = v59;
          uint64_t v84 = 0;
          long long __dst = 0uLL;
          long long v60 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
          *(void *)(v57 + 72) = *((void *)&v82.__r_.__value_.__l + 2);
          *(_OWORD *)(v57 + 56) = v60;
          memset(&v82, 0, sizeof(v82));
          *(void *)&long long v66 = v57 + 80;
          sub_100DDE2B4((uint64_t *)&v86, &v65);
          uint64_t v61 = *((void *)&v86 + 1);
          sub_100DDE450((uint64_t)&v65);
          *((void *)&v86 + 1) = v61;
          if (SHIBYTE(v82.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(v82.__r_.__value_.__l.__data_);
          }
        }
        else
        {
          **((_DWORD **)&v86 + 1) = *v47;
          std::string::size_type v51 = v85.__r_.__value_.__r.__words[2];
          *(_OWORD *)(v50 + 8) = *(_OWORD *)&v85.__r_.__value_.__l.__data_;
          *(void *)(v50 + 24) = v51;
          memset(&v85, 0, sizeof(v85));
          *(_OWORD *)(v50 + 32) = __dst;
          *(void *)(v50 + 48) = v84;
          long long __dst = 0uLL;
          uint64_t v84 = 0;
          long long v52 = *(_OWORD *)&v82.__r_.__value_.__l.__data_;
          *(void *)(v50 + 72) = *((void *)&v82.__r_.__value_.__l + 2);
          *(_OWORD *)(v50 + 56) = v52;
          *((void *)&v86 + 1) = v50 + 80;
        }
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)__dst);
        }
        if (SHIBYTE(v85.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v85.__r_.__value_.__l.__data_);
        }
        v47 += 56;
      }
      while (v47 != *(unsigned __int8 **)(v45 + 16));
      long long v46 = v86;
      uint64_t v62 = v87[0];
    }
    *(_OWORD *)a2 = v46;
    *(void *)(a2 + 16) = v62;
    v87[0] = 0;
    long long v86 = 0uLL;
    *(unsigned char *)(a2 + 24) = 1;
    uint64_t v63 = (std::string *)&v86;
  }
  *(void *)&long long v65 = v63;
  sub_100DDE4A0((void ***)&v65);
}

void sub_100DDDFCC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, void (__cdecl **a18)(std::stringbuf *__hidden this), uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v31 - 217) < 0) {
    operator delete(*(void **)(v31 - 240));
  }
  if (*(char *)(v31 - 185) < 0) {
    operator delete(*(void **)(v31 - 208));
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  std::streambuf::~streambuf();
  std::istream::~istream();
  std::ios::~ios();
  a16 = v31 - 176;
  sub_100DDE4A0((void ***)&a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100DDE1DC(uint64_t a1)
{
  *(void *)a1 = off_101A5C238;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100DDE238(uint64_t a1)
{
  *(void *)a1 = off_101A5C238;
  if (*(char *)(a1 + 47) < 0) {
    operator delete(*(void **)(a1 + 24));
  }
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete();
}

uint64_t *sub_100DDE2B4(uint64_t *result, void *a2)
{
  uint64_t v3 = result;
  uint64_t v5 = *result;
  uint64_t v4 = result[1];
  uint64_t v6 = a2[1];
  if (v4 != *result)
  {
    uint64_t v7 = 0;
    do
    {
      *(_DWORD *)(v6 + v7 - 80) = *(_DWORD *)(v4 + v7 - 80);
      uint64_t v8 = (unsigned char *)(v6 + v7 - 72);
      int v9 = (void **)(v4 + v7 - 72);
      if (*(char *)(v4 + v7 - 49) < 0)
      {
        sub_10004FC84(v8, *v9, *(void *)(v4 + v7 - 64));
      }
      else
      {
        long long v10 = *(_OWORD *)v9;
        *(void *)(v6 + v7 - 56) = *(void *)(v4 + v7 - 56);
        *(_OWORD *)uint64_t v8 = v10;
      }
      CFMutableDictionaryRef v11 = (unsigned char *)(v6 + v7 - 48);
      uint64_t v12 = (void **)(v4 + v7 - 48);
      if (*(char *)(v4 + v7 - 25) < 0)
      {
        sub_10004FC84(v11, *v12, *(void *)(v4 + v7 - 40));
      }
      else
      {
        long long v13 = *(_OWORD *)v12;
        *(void *)(v6 + v7 - 32) = *(void *)(v4 + v7 - 32);
        *(_OWORD *)CFMutableDictionaryRef v11 = v13;
      }
      __n128 result = (uint64_t *)(v6 + v7 - 24);
      uint64_t v14 = (void **)(v4 + v7 - 24);
      if (*(char *)(v4 + v7 - 1) < 0)
      {
        __n128 result = (uint64_t *)sub_10004FC84(result, *v14, *(void *)(v4 + v7 - 16));
      }
      else
      {
        long long v15 = *(_OWORD *)v14;
        *(void *)(v6 + v7 - 8) = *(void *)(v4 + v7 - 8);
        *(_OWORD *)__n128 result = v15;
      }
      v7 -= 80;
    }
    while (v4 + v7 != v5);
    v6 += v7;
  }
  a2[1] = v6;
  uint64_t v16 = *v3;
  *uint64_t v3 = v6;
  a2[1] = v16;
  uint64_t v17 = v3[1];
  v3[1] = a2[2];
  a2[2] = v17;
  uint64_t v18 = v3[2];
  v3[2] = a2[3];
  a2[3] = v18;
  *a2 = a2[1];
  return result;
}

void sub_100DDE3F8(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + v2 - 25) < 0) {
    operator delete(*(void **)(v1 + v2 - 48));
  }
  if (*(char *)(v1 + v2 - 49) < 0) {
    operator delete(*(void **)(v1 + v2 - 72));
  }
  for (; v2; v2 += 80)
    sub_1001F6FB4(v1 + v2);
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DDE450(uint64_t a1)
{
  uint64_t v3 = *(void *)(a1 + 8);
  for (uint64_t i = *(void *)(a1 + 16); i != v3; uint64_t i = *(void *)(a1 + 16))
  {
    *(void *)(a1 + 16) = i - 80;
    sub_1001F6FB4(i - 80);
  }
  if (*(void *)a1) {
    operator delete(*(void **)a1);
  }
  return a1;
}

void sub_100DDE4A0(void ***a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  if (v2)
  {
    uint64_t v4 = (uint64_t)v1[1];
    uint64_t v5 = **a1;
    if ((void *)v4 != v2)
    {
      do
      {
        v4 -= 80;
        sub_1001F6FB4(v4);
      }
      while ((void *)v4 != v2);
      uint64_t v5 = **a1;
    }
    v1[1] = v2;
    operator delete(v5);
  }
}

void sub_100DDE524(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100DDE58C(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DDE5C8(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100DDE600(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100DDE630(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100DDE674(uint64_t a1, void *a2)
{
  id v3 = a2;
  memset(v11, 0, 7);
  uint64_t v4 = (char *)[v3 length];
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  BOOL v6 = 1;
  while ([v3 characterAtIndex:v5] != 45)
  {
    BOOL v6 = ++v5 < v4;
    if (v4 == v5) {
      goto LABEL_5;
    }
  }
  if (v5)
  {
    long long v10 = [v3 substringToIndex:v5];
    ctu::cf::assign();
    memset(v11, 0, 7);

    if (v6)
    {
      unint64_t v7 = (unint64_t)(v5 + 1);
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v7 = 0;
    goto LABEL_6;
  }
  unint64_t v7 = v6;
LABEL_6:
  if (v7 <= (unint64_t)v4) {
    id v8 = v4;
  }
  else {
    id v8 = (id)v7;
  }
  while (v8 != (id)v7)
  {
    unsigned int v9 = [v3 characterAtIndex:v7++];
    if (v9 != 32)
    {
      if (v7 - 1 < (unint64_t)v4) {
        operator new[]();
      }
      break;
    }
  }
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = v11[0];
  *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v11 + 3);
  *(unsigned char *)(a1 + 31) = 0;
}

void sub_100DDE8F4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

BOOL sub_100DDE980(uint64_t a1, void **a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 104));
  uint64_t v5 = ServiceMap;
  if (v6 < 0)
  {
    unint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  long long v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    CFMutableDictionaryRef v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_14;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  CFMutableDictionaryRef v11 = 0;
  char v13 = 1;
  if (!v12)
  {
LABEL_7:
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
    {
      if (*((char *)a2 + 23) >= 0) {
        long long v15 = a2;
      }
      else {
        long long v15 = *a2;
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "localizeEntitlementGenreName";
      *(_WORD *)&unsigned char buf[12] = 2082;
      *(void *)&buf[14] = v15;
      _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#E %s: (3.0) cannot localize genreName in LSApplicationRecord for %{public}s", buf, 0x16u);
    }
    goto LABEL_42;
  }
LABEL_14:
  CFStringRef v28 = 0;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *a2, (unint64_t)a2[1]);
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)a2;
    uint64_t v26 = a2[2];
  }
  if (SHIBYTE(v26) < 0)
  {
    sub_10004FC84(__p, __dst[0], (unint64_t)__dst[1]);
  }
  else
  {
    *(_OWORD *)std::string __p = *(_OWORD *)__dst;
    std::string::size_type v33 = v26;
  }
  CFStringRef v29 = 0;
  if (SHIBYTE(v33) < 0)
  {
    sub_10004FC84(buf, __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    *(void *)&uint8_t buf[16] = v33;
  }
  CFStringRef v30 = 0;
  if (ctu::cf::convert_copy())
  {
    CFStringRef v16 = v29;
    CFStringRef v29 = v30;
    CFStringRef format = v16;
    sub_1000558F4((const void **)&format);
  }
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  CFStringRef v27 = v29;
  CFStringRef v29 = 0;
  sub_1000558F4((const void **)&v29);
  if (SHIBYTE(v33) < 0) {
    operator delete(__p[0]);
  }
  DataUtils::normalizeAppCategory();
  sub_1000558F4((const void **)&v27);
  if (SHIBYTE(v26) < 0) {
    operator delete(__dst[0]);
  }
  CFStringRef format = 0;
  (*(void (**)(CFStringRef *__return_ptr, uint64_t, void, const __CFString *, void))(*(void *)v12 + 40))(&format, v12, kAlertDialogLocalizationTable, @"GENRE_FOR_SLICING_GENERIC_%@", 0);
  if (format) {
    uint64_t v17 = sub_1000810B8;
  }
  else {
    uint64_t v17 = 0;
  }
  if (v17)
  {
    CFStringRef v18 = CFStringCreateWithFormat(0, 0, format, v28);
  }
  else
  {
    char v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "localizeEntitlementGenreName";
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#E %s: GENRE_FOR_SLICING_GENERIC is empty", buf, 0xCu);
    }
    CFStringRef v18 = CFStringCreateWithFormat(0, 0, @"%@ Apps", v28);
  }
  CFStringRef v20 = v28;
  CFStringRef v28 = v18;
  *(void *)long long buf = v20;
  sub_1000558F4((const void **)buf);
  memset(buf, 0, sizeof(buf));
  ctu::cf::assign();
  long long v21 = *(void **)buf;
  __p[0] = *(void **)&buf[8];
  *(void **)((char *)__p + 7) = *(void **)&buf[15];
  uint8_t v22 = buf[23];
  if (*((char *)a2 + 23) < 0) {
    operator delete(*a2);
  }
  int v23 = __p[0];
  *a2 = v21;
  a2[1] = v23;
  *(void **)((char *)a2 + 15) = *(void **)((char *)__p + 7);
  *((unsigned char *)a2 + 23) = v22;
  sub_1000558F4((const void **)&format);
  sub_1000558F4((const void **)&v28);
LABEL_42:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  return v12 != 0;
}

void sub_100DDED7C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, const void *a19, __int16 a20,char a21,char a22,uint64_t a23,const void *a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  sub_1000558F4(&a24);
  sub_1000558F4(&a19);
  if ((v31 & 1) == 0) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(a1);
}

void sub_100DDEE44(uint64_t a1, void *a2)
{
  id v3 = a2;
  memset(v11, 0, 7);
  uint64_t v4 = (char *)[v3 length];
  if (!v4) {
    goto LABEL_5;
  }
  uint64_t v5 = 0;
  BOOL v6 = 1;
  while ([v3 characterAtIndex:v5] != 45)
  {
    BOOL v6 = ++v5 < v4;
    if (v4 == v5) {
      goto LABEL_5;
    }
  }
  if (v5)
  {
    long long v10 = [v3 substringToIndex:v5];
    ctu::cf::assign();
    memset(v11, 0, 7);

    if (v6)
    {
      unint64_t v7 = (unint64_t)(v5 + 1);
      goto LABEL_6;
    }
LABEL_5:
    unint64_t v7 = 0;
    goto LABEL_6;
  }
  unint64_t v7 = v6;
LABEL_6:
  if (v7 <= (unint64_t)v4) {
    id v8 = v4;
  }
  else {
    id v8 = (id)v7;
  }
  while (v8 != (id)v7)
  {
    unsigned int v9 = [v3 characterAtIndex:v7++];
    if (v9 != 32)
    {
      if (v7 - 1 < (unint64_t)v4) {
        operator new[]();
      }
      break;
    }
  }
  *(_DWORD *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = v11[0];
  *(_DWORD *)(a1 + 27) = *(_DWORD *)((char *)v11 + 3);
  *(unsigned char *)(a1 + 31) = 0;
}

void sub_100DDF0C4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17)
{
  if (a17 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void sub_100DDF56C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DDF720(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100DDF8C4()
{
}

void sub_100DDFA00(_Unwind_Exception *exception_object)
{
}

id DataServiceController::isAnalyticsLocationAuthorized_sync(DataServiceController *this)
{
  uint64_t v1 = (id *)*((void *)this + 622);
  if (v1) {
    return objc_msgSend(*v1, "isLocationAuthorized_sync");
  }
  else {
    return 0;
  }
}

void sub_100DDFE0C(_Unwind_Exception *exception_object, int a2)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DDFEC4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, objc_super a9)
{
  a9.super_class = (Class)DataTelephonyCallObserverImpl;
  [(_Unwind_Exception *)&a9 dealloc];
  _Unwind_Resume(a1);
}

void sub_100DE0398(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  operator delete(v32);
  if (a23 < 0) {
    operator delete(__p);
  }

  _Unwind_Resume(a1);
}

void DataServiceController::setSliceEventsListeners_sync(DataServiceController *this, int a2, int a3, int a4)
{
  int v8 = (*(uint64_t (**)(DataServiceController *))(*(void *)this + 2192))(this);
  uint64_t v9 = 1;
  if ((a2 & a3) != 0) {
    uint64_t v9 = 2;
  }
  if (!a4) {
    uint64_t v9 = 0;
  }
  if (v8) {
    uint64_t v10 = v9;
  }
  else {
    uint64_t v10 = 3;
  }
  if (notify_is_valid_token(*((_DWORD *)this + 1222)))
  {
    notify_set_state(*((_DWORD *)this + 1222), v10);
    notify_post("com.apple.CoreTelephony.Slicing.LLPHS.State");
    CFMutableDictionaryRef v11 = *((void *)this + 5);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      long long v44 = "com.apple.CoreTelephony.Slicing.LLPHS.State";
      __int16 v45 = 2048;
      uint64_t v46 = v10;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I %s notified %llu", buf, 0x16u);
    }
  }
  if ((*(unsigned int (**)(DataServiceController *))(*(void *)this + 2192))(this))
  {
    if (!*((void *)this + 613))
    {
      uint64_t v12 = operator new(0x20uLL);
      v12[1] = 0;
      v12[2] = 0;
      void *v12 = off_101A5C310;
      uint64_t v40 = off_101A5C360;
      unint64_t v41 = this;
      long long v42 = &v40;
      void v12[3] = 0;
      char v13 = [DataVPNManagerImpl alloc];
      sub_100323990((uint64_t)buf, (uint64_t)&v40);
      uint64_t v14 = [(DataVPNManagerImpl *)v13 initWithCallback:buf];
      long long v15 = (void *)v12[3];
      void v12[3] = v14;

      sub_1000605C0(buf);
      sub_1000605C0(&v40);
      *((void *)this + 613) = v12 + 3;
      CFStringRef v16 = (std::__shared_weak_count *)*((void *)this + 614);
      *((void *)this + 614) = v12;
      if (v16) {
        sub_10004D2C8(v16);
      }
      uint64_t v17 = *((void *)this + 5);
      if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I VPM manager created", buf, 2u);
      }
    }
    if (!*((void *)this + 619))
    {
      CFStringRef v18 = operator new(0x20uLL);
      v18[1] = 0;
      uint64_t v18[2] = 0;
      *CFStringRef v18 = off_101A5C3E0;
      char v19 = (void **)(v18 + 3);
      uint64_t v40 = off_101A5C430;
      unint64_t v41 = this;
      long long v42 = &v40;
      CFStringRef v20 = *((void *)this + 3);
      if (v20) {
        dispatch_retain(*((dispatch_object_t *)this + 3));
      }
      NSObject *v19 = 0;
      long long v21 = [DataTelephonyCallObserverImpl alloc];
      sub_100DE1DCC((uint64_t)buf, (uint64_t)&v40);
      uint8_t v22 = [(DataTelephonyCallObserverImpl *)v21 initWithCallback:buf queue:v20];
      int v23 = *v19;
      NSObject *v19 = v22;

      sub_100DE1D48(buf);
      if (v20) {
        dispatch_release(v20);
      }
      sub_100DE1D48(&v40);
      *((void *)this + 619) = v19;
      std::string::size_type v24 = (std::__shared_weak_count *)*((void *)this + 620);
      *((void *)this + 620) = v18;
      if (v24) {
        sub_10004D2C8(v24);
      }
      long long v25 = *((void *)this + 5);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I Call Observer created", buf, 2u);
      }
    }
    if (*((unsigned __int8 *)this + 4881) != a2)
    {
      *((unsigned char *)this + 4881) = a2;
      DistributedCenter = CFNotificationCenterGetDistributedCenter();
      CFStringRef v27 = DistributedCenter;
      if (!a2)
      {
        CFNotificationCenterRemoveObserver(DistributedCenter, this, @"com.apple.LaunchServices.applicationRegistered", 0);
        CFNotificationCenterRemoveObserver(v27, this, @"com.apple.LaunchServices.applicationUnregistered", 0);
        notify_cancel(*((_DWORD *)this + 1221));
        *((_DWORD *)this + 1221) = -1;
        return;
      }
      CFNotificationCenterAddObserver(DistributedCenter, this, (CFNotificationCallback)sub_100DE0B04, @"com.apple.LaunchServices.applicationRegistered", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      CFNotificationCenterAddObserver(v27, this, (CFNotificationCallback)sub_100DE0B04, @"com.apple.LaunchServices.applicationUnregistered", 0, CFNotificationSuspensionBehaviorDeliverImmediately);
      if (!*((void *)this + 622))
      {
        CFStringRef v28 = *((void *)this + 3);
        CFStringRef v29 = operator new(0x20uLL);
        v29[1] = 0;
        void v29[2] = 0;
        void *v29 = off_101A5C4C0;
        CFStringRef v30 = (CoreLocationAnalytics **)(v29 + 3);
        if (v28) {
          dispatch_retain(v28);
        }
        void *v30 = 0;
        char v31 = [[CoreLocationAnalytics alloc] initWithQueue:v28];
        uint64_t v32 = *v30;
        void *v30 = v31;

        if (v28) {
          dispatch_release(v28);
        }
        *((void *)this + 622) = v30;
        std::string::size_type v33 = (std::__shared_weak_count *)*((void *)this + 623);
        *((void *)this + 623) = v29;
        if (v33) {
          sub_10004D2C8(v33);
        }
      }
      v39[0] = _NSConcreteStackBlock;
      v39[1] = 3221225472;
      v39[2] = sub_100DE0BD0;
      v39[3] = &unk_101A5C2E0;
      void v39[4] = this;
      uint64_t v34 = objc_retainBlock(v39);
      uint32_t v35 = notify_register_dispatch(kSBSLockStateNotifyKey, (int *)this + 1221, *((dispatch_queue_t *)this + 3), v34);
      std::string::size_type v36 = *((void *)this + 5);
      BOOL v37 = os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT);
      if (v35)
      {
        if (v37)
        {
          *(_WORD *)long long buf = 0;
          unint64_t v38 = "#N ScreenLockObserver: failed to register for lock state notification";
LABEL_41:
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v38, buf, 2u);
        }
      }
      else if (v37)
      {
        *(_WORD *)long long buf = 0;
        unint64_t v38 = "#N ScreenLockObserver: registered for lock state notification";
        goto LABEL_41;
      }
    }
  }
}

void sub_100DE0A54(_Unwind_Exception *a1)
{
  if (v2) {
    dispatch_release(v2);
  }
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v5);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE0B04(int a1, uint64_t a2, CFTypeRef cf1, uint64_t a4, const __CFDictionary *a5)
{
  if (CFEqual(cf1, @"com.apple.LaunchServices.applicationRegistered"))
  {
    sub_100DE1B04((uint64_t)v9, a5);
    sub_100DE1664(a2, 1, (uint64_t)v9);
  }
  uint64_t result = CFEqual(cf1, @"com.apple.LaunchServices.applicationUnregistered");
  if (result)
  {
    sub_100DE1B04((uint64_t)v9, a5);
    sub_100DE1664(a2, 0, (uint64_t)v9);
  }
  return result;
}

void sub_100DE0BB4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, char *a11)
{
}

void sub_100DE0BD0(uint64_t a1, int token)
{
  uint64_t v3 = *(void *)(a1 + 32);
  uint64_t v6 = 0;
  notify_get_state(token, &v6);
  uint64_t v4 = *(NSObject **)(v3 + 40);
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = asStringBool(v6 != 0);
    *(_DWORD *)long long buf = 67109378;
    *(_DWORD *)&uint8_t buf[4] = token;
    LOWORD(v9) = 2080;
    *(void *)((char *)&v9 + 2) = v5;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I ScreenLockObserver: token=%d, state = %s", buf, 0x12u);
  }
  if (!v6)
  {
    *(void *)long long buf = 0;
    long long v9 = 0uLL;
    DataServiceController::handleFrontmostAppsChanged_sync(v3);
    unint64_t v7 = buf;
    sub_100047F64((void ***)&v7);
  }
}

void sub_100DE0CD0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

void DataServiceController::appDbUpdateCallback_sync(char **this)
{
  if (*((unsigned char *)this + 4881))
  {
    sub_10005CD2C((uint64_t)(this + 598), this[599]);
    this[598] = (char *)(this + 599);
    this[600] = 0;
    this[599] = 0;
    sub_100058DB0(__p, "App DB update: SBSRegisterDisplayIdentifiersChanged");
    DataServiceController::updateSlicingDefinitionsWithAppDB((uint64_t)this, (unint64_t *)__p);
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100DE0D74(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void DataServiceController::updateSlicingDefinitionsWithAppDB(uint64_t a1, unint64_t *a2)
{
  if ((*(unsigned int (**)(uint64_t))(*(void *)a1 + 2192))(a1))
  {
    uint64_t v4 = *(void *)(a1 + 5080);
    *(void *)(a1 + 5080) = 0;
    if (v4) {
      (*(void (**)(uint64_t))(*(void *)v4 + 8))(v4);
    }
    sub_10005CD2C(a1 + 4928, *(char **)(a1 + 4936));
    *(void *)(a1 + 4928) = a1 + 4936;
    *(void *)(a1 + 4944) = 0;
    *(void *)(a1 + 4936) = 0;
    if (*(unsigned char *)(a1 + 4972))
    {
      uint64_t v5 = *(void **)(a1 + 4808);
      if (v5 != (void *)(a1 + 4816))
      {
        do
        {
          memset(__p, 0, 24);
          if (*((char *)v5 + 55) < 0)
          {
            sub_10004FC84(__p, (void *)v5[4], v5[5]);
          }
          else
          {
            *(_OWORD *)std::string __p = *((_OWORD *)v5 + 2);
            __p[2] = *((void **)v5 + 6);
          }
          sub_100046BAC((uint64_t **)(a1 + 4928), __p, (uint64_t)__p);
          if (SHIBYTE(__p[2]) < 0) {
            operator delete(__p[0]);
          }
          uint64_t v6 = (void *)v5[1];
          if (v6)
          {
            do
            {
              unint64_t v7 = v6;
              uint64_t v6 = (void *)*v6;
            }
            while (v6);
          }
          else
          {
            do
            {
              unint64_t v7 = (void *)v5[2];
              BOOL v8 = *v7 == (void)v5;
              uint64_t v5 = v7;
            }
            while (!v8);
          }
          uint64_t v5 = v7;
        }
        while (v7 != (void *)(a1 + 4816));
      }
    }
    char v9 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 1080))(a1);
    uint64_t v10 = *(NSObject **)(a1 + 40);
    BOOL v11 = os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT);
    if (v9)
    {
      if (v11)
      {
        uint64_t v12 = a2;
        if (*((char *)a2 + 23) < 0) {
          uint64_t v12 = (void *)*a2;
        }
        LODWORD(__p[0]) = 136446210;
        *(void **)((char *)__p + 4) = v12;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Update slicing definitions (full), reason: %{public}s (stage 1)", (uint8_t *)__p, 0xCu);
      }
      char v13 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
      dispatch_queue_create("updateSlicingDefinitionsWithAppDB", v13);
      __p[0] = (void *)a1;
      if (*((char *)a2 + 23) < 0)
      {
        sub_10004FC84(&__p[1], (void *)*a2, a2[1]);
      }
      else
      {
        *(_OWORD *)&__p[1] = *(_OWORD *)a2;
        __p[3] = (void *)a2[2];
      }
      uint64_t v14 = *(atomic_ullong **)(a1 + 112);
      __p[4] = *(void **)(a1 + 104);
      __p[5] = v14;
      if (v14) {
        atomic_fetch_add_explicit(v14 + 1, 1uLL, memory_order_relaxed);
      }
      operator new();
    }
    if (v11)
    {
      if (*((char *)a2 + 23) < 0) {
        a2 = (unint64_t *)*a2;
      }
      LODWORD(__p[0]) = 136446210;
      *(void **)((char *)__p + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I Update slicing definitions (full), reason: %{public}s: preferred SIM unknown, bailing", (uint8_t *)__p, 0xCu);
    }
  }
}

void sub_100DE1114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (v16) {
    dispatch_release(v16);
  }
  _Unwind_Resume(exception_object);
}

BOOL DataServiceController::isAppWithBundleIdActive@<W0>(uint64_t a1@<X0>, uint64_t *a2@<X1>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *(Registry **)(a1 + 104));
  uint64_t v5 = ServiceMap;
  uint64_t v6 = "23ApplicationStateMonitor";
  if (((unint64_t)"23ApplicationStateMonitor" & 0x8000000000000000) != 0)
  {
    unint64_t v7 = (unsigned __int8 *)((unint64_t)"23ApplicationStateMonitor" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = (const char *)v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  CFStringRef v16 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)&v16);
  if (v10)
  {
    uint64_t v12 = v10[3];
    BOOL v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_7;
      }
      goto LABEL_11;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  BOOL v11 = 0;
  char v13 = 1;
  if (!v12)
  {
LABEL_7:
    BOOL v14 = 0;
    if (v13) {
      return v14;
    }
    goto LABEL_12;
  }
LABEL_11:
  BOOL v14 = sub_100D72BF4(v12, a2);
  if ((v13 & 1) == 0) {
LABEL_12:
  }
    sub_10004D2C8(v11);
  return v14;
}

void sub_100DE1258(_Unwind_Exception *exception_object)
{
  if ((v1 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void DataServiceController::getAppInfo()
{
  uint64_t v0 = __chkstk_darwin();
  uint64_t v2 = v1;
  uint64_t v4 = v3;
  uint64_t v6 = v5;
  int v8 = v7;
  uint64_t v9 = v0;
  uint64_t v10 = (void *)NEHelperCopyAppInfo();
  if (v10 || (uint64_t v10 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary)
    {
      xpc_retain(v10);
      xpc_object_t v11 = v10;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v11 = xpc_null_create();
    uint64_t v10 = 0;
  }
  xpc_release(v10);
  if (xpc_get_type(v11) == (xpc_type_t)&_xpc_type_dictionary)
  {
    string = (char *)xpc_dictionary_get_string(v11, "app-identifier");
    if (string)
    {
      char v13 = *(NSObject **)(v9 + 40);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        CFStringRef v27 = string;
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I getAppInfo: Got app identifier: %s", buf, 0xCu);
      }
      sub_10003ED78(v2, string);
    }
    uuid = xpc_dictionary_get_uuid(v11, "app-euuid");
    if (uuid)
    {
      id v15 = [objc_alloc((Class)NSUUID) initWithUUIDBytes:uuid];
      id v16 = [v15 UUIDString];
      uint64_t v17 = (char *)[v16 UTF8String];

      CFStringRef v18 = *(NSObject **)(v9 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        CFStringRef v27 = v17;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I getAppInfo: Got uuid: %s", buf, 0xCu);
      }
      sub_10003ED78(v4, v17);
    }
  }
  bzero(buf, 0x1001uLL);
  if (proc_pidpath(v8, buf, 0x1000u) >= 1)
  {
    char v28 = 0;
    sub_100058DB0(&v22, (char *)buf);
    if (*(char *)(v6 + 23) < 0) {
      operator delete(*(void **)v6);
    }
    *(_OWORD *)uint64_t v6 = v22;
    *(void *)(v6 + 16) = v23;
    long long v22 = 0uLL;
    uint64_t v23 = 0;
    ctu::tokenize();
    if (*((void *)&v22 + 1) != (void)v22)
    {
      if (*(char *)(*((void *)&v22 + 1) - 1) < 0)
      {
        sub_10004FC84(__dst, *(void **)(*((void *)&v22 + 1) - 24), *(void *)(*((void *)&v22 + 1) - 16));
      }
      else
      {
        long long v19 = *(_OWORD *)(*((void *)&v22 + 1) - 24);
        uint64_t v25 = *(void *)(*((void *)&v22 + 1) - 8);
        *(_OWORD *)long long __dst = v19;
      }
      if (*(char *)(v6 + 23) < 0) {
        operator delete(*(void **)v6);
      }
      *(_OWORD *)uint64_t v6 = *(_OWORD *)__dst;
      *(void *)(v6 + 16) = v25;
    }
    CFStringRef v20 = *(NSObject **)(v9 + 40);
    if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
    {
      if (*(char *)(v6 + 23) >= 0) {
        long long v21 = (void *)v6;
      }
      else {
        long long v21 = *(void **)v6;
      }
      *(_DWORD *)long long __dst = 136315138;
      *(void *)&__dst[4] = v21;
      _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I getAppInfo: Got procName: %s", __dst, 0xCu);
    }
    *(void *)long long __dst = &v22;
    sub_100047F64((void ***)__dst);
  }
  xpc_release(v11);
}

void sub_100DE15DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, void **a13)
{
  a13 = (void **)&a10;
  sub_100047F64(&a13);
  xpc_release(v13);
  _Unwind_Resume(a1);
}

void sub_100DE1664(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = dispatch_queue_attr_make_with_qos_class(0, QOS_CLASS_USER_INITIATED, 0);
  dispatch_queue_create("appsRegisteredTmp", v4);
  sub_1000C6BDC(&v5, a3);
  operator new();
}

void sub_100DE178C(_Unwind_Exception *exception_object)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

void DataServiceController::notifySlicingInterfaceStatus_sync(DataServiceController *this)
{
  int v2 = (*(uint64_t (**)(DataServiceController *))(*(void *)this + 1088))(this);
  uint64_t v3 = 0;
  for (int i = 28; i != 36; ++i)
  {
    *(void *)long long buf = 0;
    *(void *)&uint8_t buf[8] = 0;
    DataServiceController::getConnection_sync((uint64_t)this, v2, i, (uint64_t *)buf);
    uint64_t v5 = *(void *)buf;
    if (*(void *)buf
      && (((*(uint64_t (**)(void))(**(void **)buf + 168))(*(void *)buf) & 1) != 0
       || ((*(uint64_t (**)(uint64_t))(*(void *)v5 + 176))(v5) & 1) != 0))
    {
      if ((*(unsigned int (**)(uint64_t))(*(void *)v5 + 184))(v5))
      {
        unsigned int v6 = (*(uint64_t (**)(uint64_t))(*(void *)v5 + 200))(v5);
        char v7 = v6;
        if ((v6 & 0x80000000) == 0)
        {
          uint64_t v8 = *((void *)this + 517);
          if (v6 < (unint64_t)((*((void *)this + 518) - v8) >> 4))
          {
            uint64_t v9 = (uint64_t *)(v8 + 16 * v6);
            uint64_t v11 = *v9;
            uint64_t v10 = (std::__shared_weak_count *)v9[1];
            if (v10) {
              atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            if (v11 && (*(unsigned int (**)(uint64_t, void))(*(void *)v11 + 152))(v11, 0))
            {
              uint64_t v13 = 0;
              BOOL v14 = 0;
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v11 + 64))(&v13, v11);
              if (v13 && (*(unsigned int (**)(uint64_t))(*(void *)v13 + 96))(v13)) {
                v3 |= 1 << v7;
              }
              if (v14) {
                sub_10004D2C8(v14);
              }
            }
            if (v10) {
              sub_10004D2C8(v10);
            }
          }
        }
      }
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if (v3 != *((void *)this + 612) && notify_is_valid_token(*((_DWORD *)this + 1223)))
  {
    notify_set_state(*((_DWORD *)this + 1223), v3);
    notify_post("com.apple.CoreTelephony.Slicing.Interfaces.Active.State");
    uint64_t v12 = *((void *)this + 5);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "com.apple.CoreTelephony.Slicing.Interfaces.Active.State";
      *(_WORD *)&unsigned char buf[12] = 2048;
      *(void *)&buf[14] = v3;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I %s notified 0x%llu", buf, 0x16u);
    }
    *((void *)this + 612) = v3;
  }
}

void sub_100DE1AAC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if (v12) {
    sub_10004D2C8(v12);
  }
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void non-virtual thunk to'DataServiceController::notifySlicingInterfaceStatus_sync(DataServiceController *this)
{
}

void sub_100DE1B04(uint64_t a1, CFDictionaryRef theDict)
{
  if (theDict
    && (CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"bundleIDs")) != 0
    && (CFArrayRef v4 = Value, v5 = CFGetTypeID(Value), v5 == CFArrayGetTypeID()))
  {
    CFIndex Count = CFArrayGetCount(v4);
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a1 + 8;
    if (Count >= 1)
    {
      CFIndex v7 = Count;
      for (CFIndex i = 0; i != v7; ++i)
      {
        ValueAtIndex = CFArrayGetValueAtIndex(v4, i);
        if (ValueAtIndex)
        {
          CFTypeID v10 = CFGetTypeID(ValueAtIndex);
          if (v10 == CFStringGetTypeID())
          {
            __p[0] = 0;
            __p[1] = 0;
            uint64_t v12 = 0;
            long long v13 = 0uLL;
            uint64_t v14 = 0;
            ctu::cf::assign();
            *(_OWORD *)std::string __p = v13;
            uint64_t v12 = v14;
            sub_100046BAC((uint64_t **)a1, __p, (uint64_t)__p);
            if (SHIBYTE(v12) < 0) {
              operator delete(__p[0]);
            }
          }
        }
      }
    }
  }
  else
  {
    *(void *)(a1 + 16) = 0;
    *(void *)(a1 + 8) = 0;
    *(void *)a1 = a1 + 8;
  }
}

void sub_100DE1C2C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(a9);
  }
  sub_10005CD2C(v14, *(char **)(v14 + 8));
  _Unwind_Resume(a1);
}

uint64_t *sub_100DE1C74(uint64_t *result, unint64_t a2, uint64_t a3)
{
  CFArrayRef v4 = result;
  unsigned int v6 = (uint64_t **)(result + 1);
  CFTypeID v5 = (uint64_t *)result[1];
  if (v5)
  {
    while (1)
    {
      while (1)
      {
        CFIndex v7 = (uint64_t **)v5;
        unint64_t v8 = v5[4];
        if (v8 <= a2) {
          break;
        }
        CFTypeID v5 = *v7;
        unsigned int v6 = v7;
        if (!*v7) {
          goto LABEL_9;
        }
      }
      if (v8 >= a2) {
        break;
      }
      CFTypeID v5 = v7[1];
      if (!v5)
      {
        unsigned int v6 = v7 + 1;
        goto LABEL_9;
      }
    }
  }
  else
  {
    CFIndex v7 = (uint64_t **)(result + 1);
LABEL_9:
    uint64_t v9 = (char *)operator new(0x40uLL);
    *((void *)v9 + 4) = *(void *)a3;
    *(_OWORD *)(v9 + 40) = *(_OWORD *)(a3 + 8);
    *((void *)v9 + 7) = *(void *)(a3 + 24);
    *(void *)(a3 + 8) = 0;
    *(void *)(a3 + 16) = 0;
    *(void *)(a3 + 24) = 0;
    *(void *)uint64_t v9 = 0;
    *((void *)v9 + 1) = 0;
    *((void *)v9 + 2) = v7;
    *unsigned int v6 = (uint64_t *)v9;
    uint64_t v10 = *(void *)*v4;
    if (v10)
    {
      *CFArrayRef v4 = v10;
      uint64_t v11 = *v6;
    }
    else
    {
      uint64_t v11 = (uint64_t *)v9;
    }
    uint64_t result = sub_100046C90((uint64_t *)v4[1], v11);
    ++v4[2];
  }
  return result;
}

void *sub_100DE1D48(void *a1)
{
  int v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DE1DCC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

void sub_100DE1E64(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C310;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DE1E84(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C310;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DE1ED8(uint64_t a1)
{
}

void sub_100DE1EE8()
{
}

void *sub_100DE1EFC(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5C360;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE1F44(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5C360;
  a2[1] = v2;
  return result;
}

void sub_100DE1F70(uint64_t a1)
{
  char v1 = (void *)(*(void *)(a1 + 8) + 8);
  v2[0] = 0;
  v2[1] = 0;
  sub_10003E168(v2, v1);
  operator new();
}

uint64_t sub_100DE205C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE209C()
{
}

void sub_100DE20A8(DataServiceController ***a1)
{
  char v1 = a1;
  DataServiceController::resetSlicePoliciesOnVpnChange_sync(**a1, *((unsigned __int8 *)*a1 + 8), *((unsigned __int8 *)*a1 + 9));
  operator delete();
}

void sub_100DE2104()
{
}

void sub_100DE2130(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C3E0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DE2150(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C3E0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DE21A4(uint64_t a1)
{
}

void sub_100DE21B4()
{
}

void *sub_100DE21C8(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5C430;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE2210(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5C430;
  a2[1] = v2;
  return result;
}

void sub_100DE223C(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3, unsigned __int8 *a4)
{
  int v4 = *a2;
  int v5 = *a3;
  int v6 = *a4;
  uint64_t v7 = *(void *)(a1 + 8);
  unint64_t v8 = *(NSObject **)(v7 + 40);
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    v9[0] = 67109632;
    v9[1] = v6;
    __int16 v10 = 1024;
    int v11 = v4;
    __int16 v12 = 1024;
    int v13 = v5;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I FT[%{BOOL}d] call starting: %{BOOL}d, active: %{BOOL}d", (uint8_t *)v9, 0x14u);
  }
  if (v6)
  {
    *(unsigned char *)(v7 + 4968) = v4;
    *(unsigned char *)(v7 + 4969) = v5;
    if ((*(unsigned int (**)(uint64_t))(*(void *)v7 + 2200))(v7)) {
      DataServiceController::activateFacetime((DataServiceController *)v7);
    }
  }
}

uint64_t sub_100DE2358(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE2398()
{
}

void sub_100DE23A4(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C4C0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DE23C4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C4C0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DE2418(uint64_t a1)
{
}

uint64_t *sub_100DE2424(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_10005CD2C(v1 + 16, *(char **)(v1 + 24));
    operator delete();
  }
  return result;
}

void sub_100DE2478(BOOL *a1)
{
  uint64_t v39 = *(void *)a1;
  uint64_t v2 = *(NSObject **)(*(void *)a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v3 = asStringBool(a1[8]);
    uint64_t v4 = *((void *)a1 + 4);
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v3;
    *(_WORD *)&unsigned char buf[12] = 1024;
    *(_DWORD *)&buf[14] = v4;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I appsRegistered: %s (%u bundleIds)", buf, 0x12u);
  }
  v41[0] = 0;
  v41[1] = 0;
  uint64_t v40 = v41;
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v39, *(Registry **)(v39 + 104));
  int v6 = ServiceMap;
  if (v7 < 0)
  {
    unint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v7;
  int v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
  if (v11)
  {
    uint64_t v12 = v11[3];
    int v13 = (std::__shared_weak_count *)v11[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      BOOL v37 = v13;
      sub_10004D2C8(v13);
      char v38 = 0;
      if (!v12) {
        goto LABEL_28;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v6);
  BOOL v37 = 0;
  char v38 = 1;
  if (!v12) {
    goto LABEL_28;
  }
LABEL_12:
  uint64_t v14 = (uint64_t *)*((void *)a1 + 2);
  if (v14 != (uint64_t *)(a1 + 24))
  {
    do
    {
      id v15 = v14 + 4;
      (*(void (**)(unsigned char *__return_ptr, uint64_t, uint64_t *))(*(void *)v12 + 72))(buf, v12, v14 + 4);
      long long v42 = (long long *)(v14 + 4);
      id v16 = sub_1002C4058(&v40, (void **)v14 + 4, (uint64_t)&unk_10144E20E, &v42);
      uint64_t v17 = v16 + 8;
      CFStringRef v18 = v16 + 7;
      sub_10005CD2C((uint64_t)(v16 + 7), (char *)v16[8]);
      uint64_t v19 = *(void *)&buf[8];
      *(v17 - 1) = *(void *)buf;
      void *v17 = v19;
      uint64_t v20 = *(void *)&buf[16];
      v17[1] = *(void *)&buf[16];
      if (v20)
      {
        *(void *)(v19 + 16) = v17;
        *(void *)long long buf = &buf[8];
        *(_OWORD *)&uint8_t buf[8] = 0uLL;
        uint64_t v19 = 0;
      }
      else
      {
        *CFStringRef v18 = v17;
      }
      sub_10005CD2C((uint64_t)buf, (char *)v19);
      *(void *)long long buf = v14 + 4;
      if (!sub_1002C4058(&v40, (void **)v14 + 4, (uint64_t)&unk_10144E20E, (long long **)buf)[9])
      {
        long long v21 = *(NSObject **)(v39 + 40);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
        {
          if (*((char *)v14 + 55) < 0) {
            id v15 = (void *)*v15;
          }
          *(_DWORD *)long long buf = 136446210;
          *(void *)&uint8_t buf[4] = v15;
          _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "cannot get UUIDs for bundle id: %{public}s (1)", buf, 0xCu);
        }
      }
      long long v22 = (uint64_t *)v14[1];
      if (v22)
      {
        do
        {
          uint64_t v23 = v22;
          long long v22 = (uint64_t *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          uint64_t v23 = (uint64_t *)v14[2];
          BOOL v24 = *v23 == (void)v14;
          uint64_t v14 = v23;
        }
        while (!v24);
      }
      uint64_t v14 = v23;
    }
    while (v23 != (uint64_t *)(a1 + 24));
  }
LABEL_28:
  if ((v38 & 1) == 0) {
    sub_10004D2C8(v37);
  }
  *(void *)long long buf = v39;
  uint8_t buf[8] = a1[8];
  CFMutableArrayRef v47 = 0;
  uint64_t v48 = 0;
  *(void *)&uint8_t buf[16] = &v47;
  uint64_t v25 = v40;
  if (v40 == v41)
  {
LABEL_56:
    long long v42 = 0;
    long long v43 = 0;
    sub_10003E168(&v42, (void *)(v39 + 8));
    operator new();
  }
  while (1)
  {
    __int16 v45 = 0;
    uint64_t v26 = v47;
    if (*(uint64_t ***)&buf[16] == &v47)
    {
      char v28 = &v47;
      if (!v47) {
        goto LABEL_43;
      }
    }
    else
    {
      CFStringRef v27 = &v47;
      if (v47)
      {
        do
        {
          char v28 = (uint64_t **)v26;
          uint64_t v26 = (uint64_t *)v26[1];
        }
        while (v26);
      }
      else
      {
        do
        {
          char v28 = (uint64_t **)v27[2];
          BOOL v24 = *v28 == (uint64_t *)v27;
          CFStringRef v27 = v28;
        }
        while (v24);
      }
      if ((sub_100046FE8(v28 + 4, (void **)v25 + 4) & 0x80) == 0)
      {
        CFStringRef v29 = (uint64_t **)sub_100046ED4((uint64_t)&buf[16], &v45, (void **)v25 + 4);
        goto LABEL_40;
      }
      if (!v47)
      {
LABEL_43:
        __int16 v45 = &v47;
        CFStringRef v29 = &v47;
LABEL_44:
        uint64_t v44 = 0;
        CFStringRef v30 = (long long *)operator new(0x50uLL);
        char v31 = v30;
        long long v42 = v30;
        long long v43 = &v47;
        if (*((char *)v25 + 55) < 0)
        {
          sub_10004FC84((unsigned char *)v30 + 32, (void *)v25[4], v25[5]);
        }
        else
        {
          long long v32 = *((_OWORD *)v25 + 2);
          *((void *)v30 + 6) = v25[6];
          v30[2] = v32;
        }
        sub_1000C6BDC((uint64_t *)v31 + 7, (uint64_t)(v25 + 7));
        LOBYTE(v44) = 1;
        std::string::size_type v33 = v45;
        uint64_t v34 = (uint64_t *)v42;
        *(void *)long long v42 = 0;
        v34[1] = 0;
        _DWORD v34[2] = (uint64_t)v33;
        void *v29 = v34;
        if (**(void **)&buf[16])
        {
          *(void *)&uint8_t buf[16] = **(void **)&buf[16];
          uint64_t v34 = *v29;
        }
        sub_100046C90(v47, v34);
        ++v48;
        long long v42 = 0;
        sub_1002C41B0((uint64_t)&v42, 0);
        goto LABEL_50;
      }
    }
    __int16 v45 = v28;
    CFStringRef v29 = v28 + 1;
LABEL_40:
    if (!*v29) {
      goto LABEL_44;
    }
LABEL_50:
    uint32_t v35 = (uint64_t *)v25[1];
    if (v35)
    {
      do
      {
        std::string::size_type v36 = v35;
        uint32_t v35 = (uint64_t *)*v35;
      }
      while (v35);
    }
    else
    {
      do
      {
        std::string::size_type v36 = (uint64_t *)v25[2];
        BOOL v24 = *v36 == (void)v25;
        uint64_t v25 = v36;
      }
      while (!v24);
    }
    uint64_t v25 = v36;
    if (v36 == v41) {
      goto LABEL_56;
    }
  }
}

void sub_100DE2A44(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_100DE2424((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DE2AF4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v14 = a1;
  uint64_t v15 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(void ***)(v1 + 16);
  if (v3 != (void **)(v1 + 24))
  {
    do
    {
      uint64_t v4 = *(NSObject **)(v2 + 40);
      if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
      {
        int v5 = v3 + 4;
        if (*((char *)v3 + 55) < 0) {
          int v5 = v3[4];
        }
        uint64_t v6 = asStringBool(*(unsigned char *)(v1 + 8));
        uint64_t v7 = v3[9];
        *(_DWORD *)long long buf = 136315650;
        *(void *)&uint8_t buf[4] = v5;
        __int16 v17 = 2080;
        uint64_t v18 = v6;
        __int16 v19 = 1024;
        int v20 = (int)v7;
        _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I appsRegistered[%s]: %s (%u uuids)", buf, 0x1Cu);
      }
      if (v3[9] || (uint64_t v12 = sub_100046F68(v2 + 4640, v3 + 4), (void **)(v2 + 4648) == v12) || !*((unsigned char *)v12 + 112))
      {
        *(void *)long long buf = v3 + 4;
        unint64_t v8 = sub_100B0844C((uint64_t **)(v2 + 4640), v3 + 4, (uint64_t)&unk_10144E20E, (long long **)buf);
        sub_100634518((uint64_t)(v8 + 11), (uint64_t)(v3 + 7));
      }
      uint64_t v9 = (void **)v3[1];
      if (v9)
      {
        do
        {
          unsigned int v10 = v9;
          uint64_t v9 = (void **)*v9;
        }
        while (v9);
      }
      else
      {
        do
        {
          unsigned int v10 = (void **)v3[2];
          BOOL v11 = *v10 == v3;
          uint64_t v3 = v10;
        }
        while (!v11);
      }
      uint64_t v3 = v10;
    }
    while (v10 != (void **)(v1 + 24));
  }
  DataServiceController::resetSlicePolicies_sync(v2, 3, 1, 0);
  sub_100DE2CF0(&v15);
  return sub_100046B58((uint64_t *)&v14);
}

void sub_100DE2CD0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  uint64_t v5 = va_arg(va1, void);
  sub_100DE2CF0((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DE2CF0(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    sub_1002C3E38(v1 + 16, *(void **)(v1 + 24));
    operator delete();
  }
  return result;
}

uint64_t *sub_100DE2D44(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 40);
    if (v2) {
      sub_10004D2C8(v2);
    }
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100DE2DA8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v2 = operator new(0x20uLL);
  v2[1] = 0;
  void v2[2] = 0;
  void *v2 = off_101A5C510;
  v2[3] = v1 + 5016;
  std::mutex::lock((std::mutex *)(v1 + 5016));
  operator new();
}

void sub_100DE4D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, std::__shared_weak_count *a14, int a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,ctu::OsLogLogger *a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,void *a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  sub_10004D2C8(a14);
  sub_1001FEB64((uint64_t)&a68, (void *)a69);
  sub_100DE6768((uint64_t)&a71, (void *)a72);
  if ((a16 & 1) == 0) {
    sub_10004D2C8(a13);
  }
  ctu::OsLogLogger::~OsLogLogger(a23);
  operator delete();
}

uint64_t sub_100DE51D8(uint64_t a1)
{
  return *(void *)a1;
}

void sub_100DE51E0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C510;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DE5200(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5C510;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DE5254(uint64_t a1)
{
}

void sub_100DE5260(char a1, char **a2)
{
  if (a1)
  {
    sub_10005CD2C((uint64_t)(a2 + 5), a2[6]);
  }
  else if (!a2)
  {
    return;
  }

  operator delete(a2);
}

const void **sub_100DE52BC(const void **a1)
{
  uint64_t v2 = *a1;
  if (v2) {
    CFRelease(v2);
  }
  return a1;
}

_OWORD *sub_100DE52F0(uint64_t **a1, void **a2, _OWORD **a3)
{
  uint64_t v12 = 0;
  uint64_t v5 = (void **)sub_100046ED4((uint64_t)a1, &v12, a2);
  uint64_t v6 = *v5;
  if (!*v5)
  {
    uint64_t v7 = (uint64_t **)v5;
    _DWORD v11[2] = 1;
    uint64_t v6 = operator new(0xA8uLL);
    v11[1] = a1 + 1;
    unint64_t v8 = *a3;
    uint64_t v9 = *((void *)*a3 + 2);
    v6[2] = **a3;
    *((void *)v6 + 6) = v9;
    v8[1] = 0;
    void v8[2] = 0;
    void *v8 = 0;
    *(_OWORD *)((char *)v6 + 56) = 0u;
    *(_OWORD *)((char *)v6 + 72) = 0u;
    *(_OWORD *)((char *)v6 + 88) = 0u;
    *(_OWORD *)((char *)v6 + 104) = 0u;
    *(_OWORD *)((char *)v6 + 120) = 0u;
    *(_OWORD *)((char *)v6 + 136) = 0u;
    *(_OWORD *)((char *)v6 + 152) = 0u;
    sub_100046C38(a1, v12, v7, (uint64_t *)v6);
    v11[0] = 0;
    sub_100B085BC((uint64_t)v11, 0);
  }
  return v6;
}

uint64_t *sub_100DE53C8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v116 = a1;
  uint64_t v117 = v1;
  uint64_t v2 = *(void **)v1;
  bzero(v120, 0x3D8uLL);
  uint64_t v119 = -1;
  sub_100058DB0(v120, "Managed Apps");
  v120[3] = 36;
  sub_100058DB0(v121, "Mobile Software Apps");
  v121[3] = 6000;
  sub_100058DB0(v122, "Business Apps");
  v122[3] = 6001;
  sub_100058DB0(v123, "Weather Apps");
  v123[3] = 6002;
  sub_100058DB0(v124, "Utilities Apps");
  v124[3] = 6003;
  sub_100058DB0(v125, "Travel Apps");
  v125[3] = 6004;
  sub_100058DB0(v126, "Sports Apps");
  v126[3] = 6005;
  sub_100058DB0(v127, "Social Networking Apps");
  v127[3] = 6006;
  sub_100058DB0(v128, "Reference Apps");
  v128[3] = 6007;
  sub_100058DB0(v129, "Productivity Apps");
  v129[3] = 6008;
  sub_100058DB0(v130, "Photo & Video Apps");
  v130[3] = 6009;
  sub_100058DB0(v131, "News Apps");
  v131[3] = 6010;
  sub_100058DB0(v132, "Navigation Apps");
  v132[3] = 6011;
  sub_100058DB0(v133, "Music Apps");
  v133[3] = 6012;
  sub_100058DB0(v134, "Lifestyle Apps");
  v134[3] = 6013;
  sub_100058DB0(v135, "Health & Fitness Apps");
  v135[3] = 6014;
  sub_100058DB0(v136, "Games Apps");
  v136[3] = 6015;
  sub_100058DB0(v137, "Finance Apps");
  v137[3] = 6016;
  sub_100058DB0(v138, "Entertainment Apps");
  v138[3] = 6017;
  sub_100058DB0(v139, "Education Apps");
  v139[3] = 6018;
  sub_100058DB0(v140, "Books Apps");
  v140[3] = 6020;
  sub_100058DB0(v141, "Medical Apps");
  v141[3] = 6021;
  sub_100058DB0(v142, "Magazines & Newspapers Apps");
  v142[3] = 6022;
  sub_100058DB0(v143, "Catalogs Apps");
  v143[3] = 6023;
  sub_100058DB0(v144, "Food & Drink Apps");
  v144[3] = 6024;
  sub_100058DB0(v145, "Shopping Apps");
  v145[3] = 6025;
  sub_100058DB0(v146, "Stickers Apps");
  v146[3] = 6026;
  sub_100058DB0(v147, "Developer Tools Apps");
  _OWORD v147[3] = 6027;
  sub_100058DB0(v148, "Graphics & Design Apps");
  v148[3] = 9000;
  sub_100058DB0(v149, "Communication Apps");
  v149[3] = 9001;
  sub_100058DB0(v150, "Streaming Apps");
  uint64_t v3 = v2[5];
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = (void *)(v1 + 8);
    if (*(char *)(v1 + 31) < 0) {
      uint64_t v4 = (void *)*v4;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Update slicing definitions (full), reason: %{public}s (stage 2)", buf, 0xCu);
  }
  unint64_t v115 = v2;
  uint64_t v5 = (uint64_t **)(v2 + 580);
  if (v2 + 580 != (void *)(v1 + 32))
  {
    uint64_t v6 = *(void **)(v1 + 32);
    uint64_t v7 = (void *)(v1 + 40);
    if (v2[582])
    {
      uint64_t v8 = v2[580];
      v2[580] = v2 + 581;
      *(void *)(v2[581] + 16) = 0;
      v2[581] = 0;
      v2[582] = 0;
      if (*(void *)(v8 + 8)) {
        uint64_t v9 = *(void *)(v8 + 8);
      }
      else {
        uint64_t v9 = v8;
      }
      *(void *)long long buf = v5;
      *(void *)&uint8_t buf[8] = v9;
      *(void *)&uint8_t buf[16] = v9;
      if (!v9 || (*(void *)&uint8_t buf[8] = sub_1000EA590(v9), v6 == v7))
      {
        int v20 = v6;
      }
      else
      {
        do
        {
          std::string::operator=((std::string *)(v9 + 32), (const std::string *)(v6 + 4));
          unsigned int v10 = (uint64_t **)(v9 + 56);
          if (*(unsigned __int8 *)(v9 + 80) == *((unsigned __int8 *)v6 + 80))
          {
            if ((void *)v9 != v6 && *(unsigned char *)(v9 + 80)) {
              sub_100B06F5C(v10, (void *)v6[7], v6 + 8);
            }
          }
          else
          {
            if (*(unsigned char *)(v9 + 80))
            {
              sub_1000346F8((uint64_t)v10, *(void **)(v9 + 64));
              char v11 = 0;
            }
            else
            {
              sub_1001E0DB4((uint64_t *)v10, (uint64_t)(v6 + 7));
              char v11 = 1;
            }
            *(unsigned char *)(v9 + 80) = v11;
          }
          uint64_t v12 = (uint64_t **)(v9 + 88);
          if (*(unsigned __int8 *)(v9 + 112) == *((unsigned __int8 *)v6 + 112))
          {
            if ((void *)v9 != v6 && *(unsigned char *)(v9 + 112)) {
              sub_1000EA390(v12, (void *)v6[11], v6 + 12);
            }
          }
          else
          {
            if (*(unsigned char *)(v9 + 112))
            {
              sub_10005CD2C((uint64_t)v12, *(char **)(v9 + 96));
              char v13 = 0;
            }
            else
            {
              sub_1000C6BDC((uint64_t *)v12, (uint64_t)(v6 + 11));
              char v13 = 1;
            }
            *(unsigned char *)(v9 + 112) = v13;
          }
          uint64_t v14 = v6[15];
          *(unsigned char *)(v9 + 128) = *((unsigned char *)v6 + 128);
          *(void *)(v9 + 120) = v14;
          uint64_t v15 = (uint64_t **)(v9 + 136);
          if (*(unsigned __int8 *)(v9 + 160) == *((unsigned __int8 *)v6 + 160))
          {
            if ((void *)v9 != v6 && *(unsigned char *)(v9 + 160)) {
              sub_100B07150(v15, (unsigned int *)v6[17], (unsigned int *)v6 + 36);
            }
          }
          else
          {
            if (*(unsigned char *)(v9 + 160))
            {
              sub_1000346F8((uint64_t)v15, *(void **)(v9 + 144));
              char v16 = 0;
            }
            else
            {
              sub_100B073B4((uint64_t *)v15, (uint64_t)(v6 + 17));
              char v16 = 1;
            }
            *(unsigned char *)(v9 + 160) = v16;
          }
          __int16 v17 = *(uint64_t **)&buf[16];
          *(void *)&long long v152 = 0;
          uint64_t v18 = (uint64_t **)sub_1000EA518((uint64_t)v5, &v152, (void *)(*(void *)&buf[16] + 32));
          sub_100046C38(v5, v152, v18, v17);
          uint64_t v9 = *(void *)&buf[8];
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          if (*(void *)&buf[8]) {
            *(void *)&uint8_t buf[8] = sub_1000EA590(*(uint64_t *)&buf[8]);
          }
          __int16 v19 = (void *)v6[1];
          if (v19)
          {
            do
            {
              int v20 = v19;
              __int16 v19 = (void *)*v19;
            }
            while (v19);
          }
          else
          {
            do
            {
              int v20 = (void *)v6[2];
              BOOL v21 = *v20 == (void)v6;
              uint64_t v6 = v20;
            }
            while (!v21);
          }
          if (!v9) {
            break;
          }
          uint64_t v6 = v20;
        }
        while (v20 != v7);
      }
      sub_100DE6710((uint64_t)buf);
      uint64_t v6 = v20;
    }
    if (v6 != v7)
    {
      do
      {
        memset(buf, 0, sizeof(buf));
        sub_100DE67C4((uint64_t **)buf, (uint64_t)v5, (uint64_t)(v6 + 4));
        *(void *)&long long v152 = 0;
        long long v22 = (uint64_t **)sub_1000EA518((uint64_t)v5, &v152, (void *)(*(void *)buf + 32));
        sub_100046C38(v5, v152, v22, *(uint64_t **)buf);
        *(void *)long long buf = 0;
        sub_100B085BC((uint64_t)buf, 0);
        uint64_t v23 = (void *)v6[1];
        if (v23)
        {
          do
          {
            BOOL v24 = v23;
            uint64_t v23 = (void *)*v23;
          }
          while (v23);
        }
        else
        {
          do
          {
            BOOL v24 = (void *)v6[2];
            BOOL v21 = *v24 == (void)v6;
            uint64_t v6 = v24;
          }
          while (!v21);
        }
        uint64_t v6 = v24;
      }
      while (v24 != v7);
    }
  }
  uint64_t v25 = (uint64_t **)(v115 + 589);
  if (v115 + 589 != (void *)(v1 + 56))
  {
    uint64_t v26 = *(void **)(v1 + 56);
    CFStringRef v27 = (void *)(v1 + 64);
    if (v115[591])
    {
      uint64_t v28 = v115[589];
      CFStringRef v29 = (uint64_t **)(v115 + 590);
      v115[589] = v115 + 590;
      *(void *)(v115[590] + 16) = 0;
      v115[590] = 0;
      v115[591] = 0;
      if (*(void *)(v28 + 8)) {
        uint64_t v30 = *(void *)(v28 + 8);
      }
      else {
        uint64_t v30 = v28;
      }
      *(void *)long long buf = v115 + 589;
      *(void *)&uint8_t buf[8] = v30;
      *(void *)&uint8_t buf[16] = v30;
      if (!v30 || (*(void *)&uint8_t buf[8] = sub_1000EA590(v30), v26 == v27))
      {
        uint32_t v35 = v26;
      }
      else
      {
        do
        {
          *(void *)(v30 + 32) = v26[4];
          if ((void *)v30 != v26)
          {
            sub_1000EA390((uint64_t **)(v30 + 40), (void *)v26[5], v26 + 6);
            uint64_t v30 = *(void *)&buf[16];
          }
          char v31 = *v29;
          long long v32 = (uint64_t **)(v115 + 590);
          std::string::size_type v33 = (uint64_t **)(v115 + 590);
          if (*v29)
          {
            do
            {
              while (1)
              {
                long long v32 = (uint64_t **)v31;
                if (*(void *)(v30 + 32) >= (unint64_t)v31[4]) {
                  break;
                }
                char v31 = (uint64_t *)*v31;
                std::string::size_type v33 = v32;
                if (!*v32) {
                  goto LABEL_70;
                }
              }
              char v31 = (uint64_t *)v31[1];
            }
            while (v31);
            std::string::size_type v33 = v32 + 1;
          }
LABEL_70:
          sub_100046C38(v25, (uint64_t)v32, v33, (uint64_t *)v30);
          uint64_t v30 = *(void *)&buf[8];
          *(void *)&uint8_t buf[16] = *(void *)&buf[8];
          if (*(void *)&buf[8]) {
            *(void *)&uint8_t buf[8] = sub_1000EA590(*(uint64_t *)&buf[8]);
          }
          uint64_t v34 = (void *)v26[1];
          if (v34)
          {
            do
            {
              uint32_t v35 = v34;
              uint64_t v34 = (void *)*v34;
            }
            while (v34);
          }
          else
          {
            do
            {
              uint32_t v35 = (void *)v26[2];
              BOOL v21 = *v35 == (void)v26;
              uint64_t v26 = v35;
            }
            while (!v21);
          }
          if (!v30) {
            break;
          }
          uint64_t v26 = v35;
        }
        while (v35 != v27);
      }
      sub_100DE693C((uint64_t)buf);
      uint64_t v26 = v35;
    }
    if (v26 != v27)
    {
      std::string::size_type v36 = (uint64_t **)(v115 + 590);
      do
      {
        memset(buf, 0, sizeof(buf));
        sub_100DE6994(buf, (uint64_t)v25, v26 + 4);
        BOOL v37 = *v36;
        char v38 = (uint64_t **)(v115 + 590);
        uint64_t v39 = (uint64_t **)(v115 + 590);
        if (*v36)
        {
          do
          {
            while (1)
            {
              char v38 = (uint64_t **)v37;
              if (*(void *)(*(void *)buf + 32) >= (unint64_t)v37[4]) {
                break;
              }
              BOOL v37 = (uint64_t *)*v37;
              uint64_t v39 = v38;
              if (!*v38) {
                goto LABEL_90;
              }
            }
            BOOL v37 = (uint64_t *)v37[1];
          }
          while (v37);
          uint64_t v39 = v38 + 1;
        }
LABEL_90:
        sub_100046C38(v25, (uint64_t)v38, v39, *(uint64_t **)buf);
        uint64_t v40 = (void *)v26[1];
        if (v40)
        {
          do
          {
            unint64_t v41 = v40;
            uint64_t v40 = (void *)*v40;
          }
          while (v40);
        }
        else
        {
          do
          {
            unint64_t v41 = (void *)v26[2];
            BOOL v21 = *v41 == (void)v26;
            uint64_t v26 = v41;
          }
          while (!v21);
        }
        uint64_t v26 = v41;
      }
      while (v41 != v27);
    }
  }
  uint64_t v43 = *(void *)(v1 + 80);
  uint64_t v42 = *(void *)(v1 + 88);
  if (v42) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v42 + 8), 1uLL, memory_order_relaxed);
  }
  uint64_t v114 = v1;
  uint64_t v44 = (uint64_t **)v115;
  v115[592] = v43;
  __int16 v45 = (std::__shared_weak_count *)v115[593];
  v115[593] = v42;
  if (v45) {
    sub_10004D2C8(v45);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v46, (Registry *)v115[13]);
  uint64_t v48 = ServiceMap;
  if (v49 < 0)
  {
    uint64_t v50 = (unsigned __int8 *)(v49 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v51 = 5381;
    do
    {
      uint64_t v49 = v51;
      unsigned int v52 = *v50++;
      uint64_t v51 = (33 * v51) ^ v52;
    }
    while (v52);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v49;
  unint64_t v53 = sub_10004D37C(&v48[1].__m_.__sig, (unint64_t *)buf);
  uint64_t v111 = (char *)v115 + 4970;
  if (!v53)
  {
    uint64_t v54 = 0;
    goto LABEL_107;
  }
  uint64_t v54 = v53[3];
  unint64_t v55 = (std::__shared_weak_count *)v53[4];
  if (!v55)
  {
LABEL_107:
    std::mutex::unlock(v48);
    uint64_t v110 = 0;
    char v113 = 1;
    goto LABEL_108;
  }
  atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v48);
  atomic_fetch_add_explicit(&v55->__shared_owners_, 1uLL, memory_order_relaxed);
  uint64_t v110 = v55;
  sub_10004D2C8(v55);
  char v113 = 0;
LABEL_108:
  uint64_t v56 = 0;
  uint64_t v57 = kAlertDialogLocalizationTable;
  long long v58 = (unint64_t *)&v119;
  do
  {
    if (v54)
    {
      uint64_t v151 = 0;
      if (*v58 == -1)
      {
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, const __CFString *, void))(*(void *)v54 + 40))(&v152, v54, v57, @"GENRE_FOR_SLICING_MANAGED", 0);
        *(void *)long long buf = v151;
        uint64_t v151 = v152;
        *(void *)&long long v152 = 0;
        sub_1000558F4((const void **)buf);
        sub_1000558F4((const void **)&v152);
      }
      else
      {
        long long v59 = +[NSString stringWithFormat:@"GENRE_FOR_SLICING_%llu", *v58];
        (*(void (**)(long long *__return_ptr, uint64_t, uint64_t, void *, void))(*(void *)v54 + 40))(&v152, v54, v57, v59, 0);
        *(void *)long long buf = v151;
        uint64_t v151 = v152;
        *(void *)&long long v152 = 0;
        sub_1000558F4((const void **)buf);
        sub_1000558F4((const void **)&v152);

        uint64_t v44 = (uint64_t **)v115;
      }
      if (v151) {
        long long v68 = sub_1000810B8;
      }
      else {
        long long v68 = 0;
      }
      if (v68)
      {
        memset(buf, 0, sizeof(buf));
        ctu::cf::assign();
        uint64_t v69 = *(void *)buf;
        *(void *)&long long v152 = *(void *)&buf[8];
        *(void *)((char *)&v152 + 7) = *(void *)&buf[15];
        uint8_t v70 = buf[23];
        long long v71 = (uint64_t **)v44[592];
        *(void *)long long buf = v58;
        long long v72 = sub_100372E78(v71, v58, (uint64_t)&unk_10144E20E, (uint64_t **)buf);
        long long v73 = v72;
        if (*((char *)v72 + 63) < 0) {
          operator delete((void *)v72[5]);
        }
        uint64_t v74 = v152;
        v73[5] = v69;
        v73[6] = v74;
        *(uint64_t *)((char *)v73 + 55) = *(void *)((char *)&v152 + 7);
        *((unsigned char *)v73 + 63) = v70;
        uint64_t v44 = (uint64_t **)v115;
      }
      else
      {
        long long v75 = v44[592];
        long long v76 = (void *)v75[1];
        if (!v76) {
          goto LABEL_143;
        }
        unint64_t v77 = *v58;
        long long v78 = v75 + 1;
        do
        {
          unint64_t v79 = v76[4];
          BOOL v80 = v79 >= v77;
          if (v79 >= v77) {
            long long v81 = v76;
          }
          else {
            long long v81 = v76 + 1;
          }
          if (v80) {
            long long v78 = v76;
          }
          long long v76 = (void *)*v81;
        }
        while (*v81);
        if (v78 == v75 + 1 || v77 < v78[4])
        {
LABEL_143:
          *(void *)long long buf = v58;
          std::string v82 = sub_100372E78((uint64_t **)v75, v58, (uint64_t)&unk_10144E20E, (uint64_t **)buf);
          std::string::operator=((std::string *)(v82 + 5), (const std::string *)&v120[4 * v56]);
        }
      }
      sub_1000558F4((const void **)&v151);
    }
    else
    {
      long long v60 = v44[592];
      uint64_t v61 = (void *)v60[1];
      if (!v61) {
        goto LABEL_123;
      }
      unint64_t v62 = *v58;
      uint64_t v63 = v60 + 1;
      do
      {
        unint64_t v64 = v61[4];
        BOOL v65 = v64 >= v62;
        if (v64 >= v62) {
          long long v66 = v61;
        }
        else {
          long long v66 = v61 + 1;
        }
        if (v65) {
          uint64_t v63 = v61;
        }
        uint64_t v61 = (void *)*v66;
      }
      while (*v66);
      if (v63 == v60 + 1 || v62 < v63[4])
      {
LABEL_123:
        *(void *)long long buf = v58;
        long long v67 = sub_100372E78((uint64_t **)v60, v58, (uint64_t)&unk_10144E20E, (uint64_t **)buf);
        std::string::operator=((std::string *)(v67 + 5), (const std::string *)&v120[4 * v56]);
      }
    }
    ++v56;
    long long v58 = &v120[4 * v56 - 1];
  }
  while (v56 != 31);
  if ((v113 & 1) == 0) {
    sub_10004D2C8(v110);
  }
  uint64_t v83 = v1;
  sub_1000346F8((uint64_t)(v44 + 583), v44[584]);
  v44[583] = (uint64_t *)(v44 + 584);
  v44[585] = 0;
  v44[584] = 0;
  sub_1000346F8((uint64_t)(v44 + 586), v44[587]);
  v44[586] = (uint64_t *)(v44 + 587);
  v44[588] = 0;
  v44[587] = 0;
  *((unsigned char *)v115 + 4971) = *(unsigned char *)(v1 + 97);
  int v84 = *(unsigned __int8 *)(v1 + 96);
  if (*v111 != v84)
  {
    unsigned char *v111 = v84;
    if (v84)
    {
      std::string v85 = v44[14];
      *(void *)&long long v152 = v44[13];
      *((void *)&v152 + 1) = v85;
      if (v85) {
        atomic_fetch_add_explicit(v85 + 1, 1uLL, memory_order_relaxed);
      }
      subscriber::makeSimSlotRange();
      if (*((void *)&v152 + 1)) {
        sub_10004D2C8(*((std::__shared_weak_count **)&v152 + 1));
      }
      int v87 = *(unsigned int **)buf;
      long long v86 = *(unsigned int **)&buf[8];
      if (*(void *)buf != *(void *)&buf[8])
      {
        int v88 = *(uint64_t (**)(void))&buf[16];
        while ((v88(*v87) & 1) == 0)
        {
          if (++v87 == v86)
          {
            int v87 = v86;
            break;
          }
        }
        int v89 = *(unsigned int **)&buf[8];
        if (v87 != *(unsigned int **)&buf[8])
        {
          while (1)
          {
            uint64_t v90 = *v87;
            uint64_t v91 = v115[5];
            if (os_log_type_enabled(v91, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v92 = subscriber::asString();
              LODWORD(v152) = 136315138;
              *(void *)((char *)&v152 + 4) = v92;
              _os_log_impl((void *)&_mh_execute_header, v91, OS_LOG_TYPE_DEFAULT, "#I Enabling slicing feature on supervisedDevice device (%s)", (uint8_t *)&v152, 0xCu);
            }
            uint64_t v93 = (std::mutex *)Registry::getServiceMap(v115, (Registry *)v115[13]);
            unint64_t v94 = v93;
            if (v95 < 0)
            {
              int v96 = (unsigned __int8 *)(v95 & 0x7FFFFFFFFFFFFFFFLL);
              uint64_t v97 = 5381;
              do
              {
                uint64_t v95 = v97;
                unsigned int v98 = *v96++;
                uint64_t v97 = (33 * v97) ^ v98;
              }
              while (v98);
            }
            std::mutex::lock(v93);
            uint64_t v151 = v95;
            unint64_t v99 = sub_10004D37C(&v94[1].__m_.__sig, (unint64_t *)&v151);
            if (!v99) {
              break;
            }
            uint64_t v101 = v99[3];
            uint64_t v100 = (std::__shared_weak_count *)v99[4];
            if (!v100) {
              goto LABEL_169;
            }
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
            std::mutex::unlock(v94);
            atomic_fetch_add_explicit(&v100->__shared_owners_, 1uLL, memory_order_relaxed);
            sub_10004D2C8(v100);
            char v102 = 0;
LABEL_170:
            (*(void (**)(long long *__return_ptr, uint64_t, uint64_t))(*(void *)v101 + 8))(&v152, v101, v90);
            uint64_t v118 = 0;
            (*(void (**)(void, uint64_t, uint64_t, const void **))(*(void *)v152 + 32))(v152, 4, 1, &v118);
            sub_100057D78(&v118);
            if (*((void *)&v152 + 1)) {
              sub_10004D2C8(*((std::__shared_weak_count **)&v152 + 1));
            }
            if ((v102 & 1) == 0) {
              sub_10004D2C8(v100);
            }
            uint64_t v103 = v87 + 1;
            int v87 = v86;
            if (v103 != v86)
            {
              int v87 = v103;
              while ((v88(*v87) & 1) == 0)
              {
                if (++v87 == v86)
                {
                  int v87 = v86;
                  break;
                }
              }
            }
            if (v87 == v89) {
              goto LABEL_180;
            }
          }
          uint64_t v101 = 0;
LABEL_169:
          std::mutex::unlock(v94);
          uint64_t v100 = 0;
          char v102 = 1;
          goto LABEL_170;
        }
      }
LABEL_180:
      uint64_t v83 = v114;
      uint64_t v44 = (uint64_t **)v115;
    }
  }
  int v104 = ((uint64_t (*)(uint64_t **))(*v44)[136])(v44);
  BOOL v105 = DataServiceController::SlicesDataContainer::useEntitlementsGenres((uint64_t)(v115 + 577), v104);
  DataServiceController::adjustSlicesAppsDb(v44, !v105);
  uint64_t v106 = (void *)(v83 + 8);
  ((void (*)(uint64_t **, uint64_t, uint64_t, void))(*v44)[291])(v44, 3, v83 + 8, 0);
  uint64_t v107 = v44[5];
  if (os_log_type_enabled(v107, OS_LOG_TYPE_DEFAULT))
  {
    if (*(char *)(v83 + 31) < 0) {
      uint64_t v106 = (void *)*v106;
    }
    *(_DWORD *)long long buf = 136446210;
    *(void *)&uint8_t buf[4] = v106;
    _os_log_impl((void *)&_mh_execute_header, v107, OS_LOG_TYPE_DEFAULT, "#I Update slicing definitions (full), reason: %{public}s (stage 2 ends)", buf, 0xCu);
  }
  memset(buf, 0, sizeof(buf));
  DataServiceController::handleFrontmostAppsChanged_sync(v44, buf);
  *(void *)&long long v152 = buf;
  sub_100047F64((void ***)&v152);
  uint64_t v108 = 124;
  do
  {
    if (*((char *)&v120[v108 - 1] - 1) < 0) {
      operator delete((&v116)[v108]);
    }
    v108 -= 4;
  }
  while (v108 * 8);
  sub_100DE6688(&v117);
  return sub_100046B58((uint64_t *)&v116);
}

void sub_100DE649C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,char a22)
{
  BOOL v24 = *(std::__shared_weak_count **)(v22 - 136);
  if (v24) {
    sub_10004D2C8(v24);
  }
  uint64_t v25 = 992;
  while (1)
  {
    if (*(&a22 + v25 - 1) < 0) {
      operator delete(*(void **)((char *)&a19 + v25));
    }
    v25 -= 32;
    if (!v25)
    {
      sub_100DE6688(&a20);
      sub_100046B58(&a19);
      _Unwind_Resume(a1);
    }
  }
}

uint64_t *sub_100DE6688(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 112);
    if (v2) {
      sub_10004D2C8(v2);
    }
    uint64_t v3 = *(std::__shared_weak_count **)(v1 + 88);
    if (v3) {
      sub_10004D2C8(v3);
    }
    sub_1001FEB64(v1 + 56, *(void **)(v1 + 64));
    sub_100DE6768(v1 + 32, *(void **)(v1 + 40));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

uint64_t sub_100DE6710(uint64_t a1)
{
  sub_100DE6768(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_100DE6768(*(void *)a1, v2);
  }
  return a1;
}

void sub_100DE6768(uint64_t a1, void *a2)
{
  if (a2)
  {
    sub_100DE6768(a1, *a2);
    sub_100DE6768(a1, a2[1]);
    sub_100B08614((uint64_t)(a2 + 4));
    operator delete(a2);
  }
}

uint64_t sub_100DE67C4(uint64_t **a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (uint64_t *)(a2 + 8);
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = (uint64_t *)operator new(0xA8uLL);
  uint64_t v7 = v6;
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  if (*(char *)(a3 + 23) < 0)
  {
    sub_10004FC84((unsigned char *)v6 + 32, *(void **)a3, *(void *)(a3 + 8));
  }
  else
  {
    *((_OWORD *)v6 + 2) = *(_OWORD *)a3;
    v6[6] = *(void *)(a3 + 16);
  }
  *((unsigned char *)v7 + 56) = 0;
  *((unsigned char *)v7 + 80) = 0;
  if (*(unsigned char *)(a3 + 48))
  {
    sub_1001E0DB4(v7 + 7, a3 + 24);
    *((unsigned char *)v7 + 80) = 1;
  }
  uint64_t result = sub_100C85E44((uint64_t)(v7 + 11), a3 + 56);
  *((unsigned char *)v7 + 136) = 0;
  v7[15] = *(void *)(a3 + 88);
  *((unsigned char *)v7 + 128) = *(unsigned char *)(a3 + 96);
  *((unsigned char *)v7 + 160) = 0;
  if (*(unsigned char *)(a3 + 128))
  {
    uint64_t result = (uint64_t)sub_100B073B4(v7 + 17, a3 + 104);
    *((unsigned char *)v7 + 160) = 1;
  }
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_100DE68C4(_Unwind_Exception *a1)
{
  sub_100B085BC(v1, 0);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE693C(uint64_t a1)
{
  sub_1001FEB64(*(void *)a1, *(void **)(a1 + 16));
  uint64_t v2 = *(void **)(a1 + 8);
  if (v2)
  {
    uint64_t v3 = (void *)v2[2];
    if (v3)
    {
      do
      {
        uint64_t v2 = v3;
        uint64_t v3 = (void *)v3[2];
      }
      while (v3);
      *(void *)(a1 + 8) = v2;
    }
    sub_1001FEB64(*(void *)a1, v2);
  }
  return a1;
}

uint64_t *sub_100DE6994(void *a1, uint64_t a2, void *a3)
{
  uint64_t v5 = a2 + 8;
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v6 = operator new(0x40uLL);
  *a1 = v6;
  a1[1] = v5;
  *((unsigned char *)a1 + 16) = 0;
  v6[4] = *a3;
  uint64_t result = sub_1000C6BDC(v6 + 5, (uint64_t)(a3 + 1));
  *((unsigned char *)a1 + 16) = 1;
  return result;
}

void sub_100DE69FC(_Unwind_Exception *a1)
{
  *uint64_t v1 = 0;
  sub_100DE5260(0, v2);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE6A20(uint64_t a1, NSObject **a2, void *a3)
{
  char v13 = *a2;
  if (v13) {
    dispatch_retain(v13);
  }
  sub_1013BD45C(a1, &v13, a3, "cp.rch.prox");
  if (v13) {
    dispatch_release(v13);
  }
  *(void *)a1 = off_101A5C6D0;
  *(void *)(a1 + 8) = &off_101A5C800;
  sub_100058DB0(&__p, "CellularPlanProximityCommandHandler");
  uint64_t v6 = *a2;
  dispatch_object_t object = 0;
  dispatch_object_t v10 = v6;
  *a2 = 0;
  ctu::RestModule::RestModule();
  if (object) {
    dispatch_release(object);
  }
  if (v10) {
    dispatch_release(v10);
  }
  if (v12 < 0) {
    operator delete(__p);
  }
  *(unsigned char *)(a1 + 352) = 0;
  *(unsigned char *)(a1 + 384) = 0;
  *(unsigned char *)(a1 + 424) = 0;
  *(_OWORD *)(a1 + 288) = 0u;
  *(_OWORD *)(a1 + 304) = 0u;
  *(unsigned char *)(a1 + 320) = 0;
  *(void *)(a1 + 392) = 0;
  *(_OWORD *)(a1 + 400) = 0u;
  *(unsigned char *)(a1 + 416) = 0;
  *(_DWORD *)(a1 + 528) = 0;
  *(unsigned char *)(a1 + 488) = 0;
  *(_OWORD *)(a1 + 456) = 0u;
  *(_OWORD *)(a1 + 472) = 0u;
  *(_WORD *)(a1 + 524) = 0;
  *(_OWORD *)(a1 + 492) = 0u;
  *(_OWORD *)(a1 + 508) = 0u;
  *(_OWORD *)(a1 + 536) = 0u;
  int v8 = 0;
  sub_10078C71C((uint64_t **)(a1 + 72), &v8, &v8);
  return a1;
}

void sub_100DE6B88(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, dispatch_object_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  uint64_t v22 = *(std::__shared_weak_count **)(v18 + 544);
  if (v22) {
    sub_10004D2C8(v22);
  }
  sub_100DE859C(v20);
  sub_100DE8670(v19);
  uint64_t v23 = *(std::__shared_weak_count **)(v18 + 256);
  if (v23) {
    sub_10004D2C8(v23);
  }
  sub_1013BD63C(v18);
  _Unwind_Resume(a1);
}

void sub_100DE6BFC()
{
  uint64_t v1 = *(NSObject **)(v0 - 40);
  if (v1) {
    dispatch_release(v1);
  }
  JUMPOUT(0x100DE6BF4);
}

const char *sub_100DE6C10()
{
  return "CellularPlanProximityCommandHandler";
}

void sub_100DE6C1C(uint64_t a1)
{
  if (*(void *)(a1 + 536)) {
    return;
  }
  sub_10003E168(buf, (void *)(a1 + 16));
  uint64_t v3 = *(void *)buf;
  uint64_t v2 = *(std::__shared_weak_count **)&buf[8];
  if (*(void *)&buf[8])
  {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
    sub_10004D2C8(v2);
  }
  (***(void (****)(uint64_t (***__return_ptr)()))(a1 + 56))(&v36);
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, (Registry *)v36);
  uint64_t v6 = ServiceMap;
  uint64_t v7 = "38CellularPlanIDSServiceManagerInterface";
  if (((unint64_t)"38CellularPlanIDSServiceManagerInterface" & 0x8000000000000000) != 0)
  {
    int v8 = (unsigned __int8 *)((unint64_t)"38CellularPlanIDSServiceManagerInterface" & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = (const char *)v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v33 = (unint64_t)v7;
  char v11 = sub_10004D37C(&v6[1].__m_.__sig, &v33);
  if (v11)
  {
    uint64_t v13 = v11[3];
    char v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  char v12 = 0;
  char v14 = 1;
LABEL_12:
  (*(void (**)(uint8_t *__return_ptr, uint64_t))(*(void *)v13 + 16))(buf, v13);
  long long v15 = *(_OWORD *)buf;
  memset(buf, 0, sizeof(buf));
  char v16 = *(std::__shared_weak_count **)(a1 + 544);
  *(_OWORD *)(a1 + 536) = v15;
  if (v16)
  {
    sub_10004D2C8(v16);
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
  if (v37) {
    sub_10004D2C8(v37);
  }
  long long v32 = v2;
  unint64_t v33 = 32;
  uint64_t v17 = *(void *)(a1 + 536);
  v31[0] = _NSConcreteStackBlock;
  v31[1] = 1174405120;
  uint64_t v31[2] = sub_100DE75D8;
  v31[3] = &unk_101A5C870;
  v31[4] = a1;
  v31[5] = v3;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v29[0] = _NSConcreteStackBlock;
  v29[1] = 1174405120;
  void v29[2] = sub_100DE776C;
  v29[3] = &unk_101A5C8A0;
  void v29[4] = a1;
  v29[5] = v3;
  uint64_t v30 = v2;
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  if ((*(unsigned int (**)(uint64_t, const char *, unint64_t *, Block_layout *, void *, void *))(*(void *)v17 + 24))(v17, "CellularPlanProximityCommandHandler", &v33, &stru_101A5C850, v31, v29))
  {
    uint64_t v18 = (uint8_t *)(a1 + 264);
    uint64_t v19 = a1 + 248;
    *(void *)long long buf = off_101A5C8F8;
    *(void *)&uint8_t buf[8] = a1 + 248;
    uint32_t v35 = buf;
    if (buf != (uint8_t *)(a1 + 264))
    {
      uint64_t v20 = *(uint8_t **)(a1 + 288);
      if (v20 == v18)
      {
        BOOL v37 = (std::__shared_weak_count *)(a1 + 248);
        uint64_t v38 = 0;
        std::string::size_type v36 = off_101A5C8F8;
        uint32_t v35 = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v18 + 24))(a1 + 264, buf);
        (*(void (**)(void))(**(void **)(a1 + 288) + 32))(*(void *)(a1 + 288));
        *(void *)(a1 + 288) = 0;
        uint32_t v35 = buf;
        ((void (*)(uint64_t (***)(), uint64_t))v36[3])(&v36, a1 + 264);
        ((void (*)(uint64_t (***)()))v36[4])(&v36);
      }
      else
      {
        *(void *)(a1 + 264) = off_101A5C8F8;
        *(void *)(a1 + 272) = v19;
        uint32_t v35 = v20;
      }
      *(void *)(a1 + 288) = v18;
    }
    sub_100DE86FC(buf);
    uint64_t v22 = *(void *)(a1 + 288);
    if (v22) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v22 + 48))(v22, a1 + 296);
    }
    uint64_t v23 = (uint8_t *)(a1 + 432);
    *(void *)long long buf = off_101A5C988;
    *(void *)&uint8_t buf[8] = a1 + 248;
    uint32_t v35 = buf;
    if (buf != (uint8_t *)(a1 + 432))
    {
      BOOL v24 = *(uint8_t **)(a1 + 456);
      if (v24 == v23)
      {
        BOOL v37 = (std::__shared_weak_count *)(a1 + 248);
        uint64_t v38 = 0;
        std::string::size_type v36 = off_101A5C988;
        uint32_t v35 = 0;
        (*(void (**)(uint64_t, uint8_t *))(*(void *)v23 + 24))(a1 + 432, buf);
        (*(void (**)(void))(**(void **)(a1 + 456) + 32))(*(void *)(a1 + 456));
        *(void *)(a1 + 456) = 0;
        uint32_t v35 = buf;
        ((void (*)(uint64_t (***)(), uint64_t))v36[3])(&v36, a1 + 432);
        ((void (*)(uint64_t (***)()))v36[4])(&v36);
      }
      else
      {
        *(void *)(a1 + 432) = off_101A5C988;
        *(void *)(a1 + 440) = v19;
        uint32_t v35 = v24;
      }
      *(void *)(a1 + 456) = v23;
    }
    sub_100DE85EC(buf);
    uint64_t v25 = *(void *)(a1 + 456);
    if (v25) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v25 + 48))(v25, a1 + 464);
    }
    sub_100058DB0(&v36, "/cc/events/new_nanoregistry_device_configured");
    uint64_t v26 = (uint8_t *)operator new(0x20uLL);
    *(void *)uint64_t v26 = off_101A5CA18;
    *((void *)v26 + 1) = a1;
    *((void *)v26 + 2) = sub_100DE7A00;
    *((void *)v26 + 3) = 0;
    uint32_t v35 = v26;
    ctu::RestModule::observeEvent();
    sub_10003F600(buf);
    if (SHIBYTE(v38) < 0) {
      operator delete(v36);
    }
    (***(void (****)(uint8_t *__return_ptr))(a1 + 56))(buf);
    Registry::createRestModuleOneTimeUseConnection(&v27, *(Registry **)buf);
    ctu::RestModule::connect();
    if (v28) {
      sub_10004D2C8(v28);
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
  }
  else
  {
    BOOL v21 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v21, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_ERROR, "Cannot register callbacks", buf, 2u);
    }
  }
  if (v30) {
    std::__shared_weak_count::__release_weak(v30);
  }
  if (v32) {
    std::__shared_weak_count::__release_weak(v32);
  }
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100DE7318(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,std::__shared_weak_count *a25,uint64_t a26,char a27,uint64_t a28)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100DE73F4(id a1, const void *a2)
{
  uint64_t v2 = (char *)a2 + 56;
  if (*((_DWORD *)a2 + 14) < 0x40000u) {
    return 0;
  }
  uint64_t v5 = (const char **)qword_101B12BF8;
  uint64_t v6 = qword_101B12C00;
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(v21, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    *(_OWORD *)BOOL v21 = *(_OWORD *)a2;
    uint64_t v22 = *((void *)a2 + 2);
  }
  __int16 v23 = *((_WORD *)a2 + 12);
  if (*((char *)a2 + 55) < 0)
  {
    sub_10004FC84(&__p, *((void **)a2 + 4), *((void *)a2 + 5));
  }
  else
  {
    long long __p = *((_OWORD *)a2 + 2);
    uint64_t v25 = *((void *)a2 + 6);
  }
  int v26 = *(_DWORD *)v2;
  char v27 = v2[4];
  char v7 = HIBYTE(v25);
  if (v5 != (const char **)v6)
  {
    if (v25 >= 0) {
      p_p = &__p;
    }
    else {
      p_p = (long long *)__p;
    }
    if (v25 >= 0) {
      int64_t v9 = HIBYTE(v25);
    }
    else {
      int64_t v9 = *((void *)&__p + 1);
    }
    unsigned int v10 = (char *)p_p + v9;
    while (1)
    {
      char v11 = *v5;
      int64_t v12 = strlen(*v5);
      if (!v12) {
        break;
      }
      int64_t v13 = v12;
      if (v9 >= v12)
      {
        int v14 = *v11;
        int64_t v15 = v9;
        char v16 = p_p;
        do
        {
          int64_t v17 = v15 - v13;
          if (v17 == -1) {
            break;
          }
          uint64_t v18 = (char *)memchr(v16, v14, v17 + 1);
          if (!v18) {
            break;
          }
          uint64_t v19 = v18;
          if (!memcmp(v18, v11, v13))
          {
            if (v19 == v10 || v19 - (char *)p_p == -1) {
              break;
            }
            goto LABEL_29;
          }
          char v16 = (long long *)(v19 + 1);
          int64_t v15 = v10 - (v19 + 1);
        }
        while (v15 >= v13);
      }
      if (++v5 == (const char **)v6)
      {
        uint64_t v5 = (const char **)v6;
        break;
      }
    }
  }
LABEL_29:
  BOOL v3 = v5 != (const char **)qword_101B12C00;
  if (v7 < 0) {
    operator delete((void *)__p);
  }
  if (SHIBYTE(v22) < 0) {
    operator delete(v21[0]);
  }
  return v3;
}

void sub_100DE75BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (a14 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DE75D8(uint64_t a1, uint64_t *a2)
{
  long long v3 = *(_OWORD *)(a1 + 32);
  uint64_t v2 = *(void *)(a1 + 48);
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  long long v4 = 0uLL;
  uint64_t v5 = 0;
  sub_1003C1BB8(&v4, *a2, a2[1], (a2[1] - *a2) >> 6);
  v6[0] = 0;
  v6[1] = 0;
  sub_10003E168(v6, (void *)(v3 + 16));
  operator new();
}

void sub_100DE7750(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13)
{
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DE776C(uint64_t a1, uint64_t a2)
{
  long long v4 = *(_OWORD *)(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 48);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  if (*(char *)(a2 + 23) < 0)
  {
    sub_10004FC84(v5, *(void **)a2, *(void *)(a2 + 8));
  }
  else
  {
    *(_OWORD *)uint64_t v5 = *(_OWORD *)a2;
    _DWORD v5[2] = *(void **)(a2 + 16);
  }
  if (*(char *)(a2 + 47) < 0)
  {
    sub_10004FC84(__p, *(void **)(a2 + 24), *(void *)(a2 + 32));
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)(a2 + 24);
    __p[2] = *(void **)(a2 + 40);
  }
  __int16 v7 = *(_WORD *)(a2 + 48);
  sub_10002FD9C((const void **)&v8, (const void **)(a2 + 56));
  sub_100119B5C((const void **)&v8 + 1, (const void **)(a2 + 64));
  v9[0] = *(void *)(a2 + 72);
  *(void *)((char *)v9 + 6) = *(void *)(a2 + 78);
  v10[0] = 0;
  v10[1] = 0;
  sub_10003E168(v10, (void *)(v4 + 16));
  operator new();
}

void sub_100DE79C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, std::__shared_weak_count *a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DE7A00(void *a1)
{
  uint64_t v1 = (const std::string *)a1[12];
  uint64_t v2 = (const std::string *)a1[13];
  if (v1 != v2)
  {
    while (!v1[1].__r_.__value_.__s.__data_[1])
    {
      uint64_t v1 = (const std::string *)((char *)v1 + 64);
      if (v1 == v2) {
        return;
      }
    }
  }
  if (v1 != v2) {
    sub_1013D1334(a1, v1);
  }
}

uint64_t sub_100DE7A34(uint64_t a1)
{
  return ctu::RestModule::disconnect((ctu::RestModule *)(a1 + 248));
}

void sub_100DE7A3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  memset(v3, 0, sizeof(v3));
  sub_1000C1BB8(a3, (uint64_t)v3, 17);
  long long v4 = (void **)v3;
  sub_1000C5238(&v4);
}

void sub_100DE7A88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_1000C5238(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE7AA4()
{
  return 2;
}

void sub_100DE7AAC(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
}

uint64_t sub_100DE7AB8()
{
  return 4;
}

uint64_t sub_100DE7AC0@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(result + 544);
  *a2 = *(void *)(result + 536);
  a2[1] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100DE7AE0(uint64_t a1, unsigned __int8 *a2, unsigned __int8 *a3)
{
  v18[0] = 1;
  v18[1] = a1 + 432;
  uint64_t v4 = *(unsigned __int8 *)(a1 + 487);
  if ((v4 & 0x80u) == 0) {
    uint64_t v5 = *(unsigned __int8 *)(a1 + 487);
  }
  else {
    uint64_t v5 = *(void *)(a1 + 472);
  }
  uint64_t v6 = a2[23];
  int v7 = (char)v6;
  if ((v6 & 0x80u) != 0) {
    uint64_t v6 = *((void *)a2 + 1);
  }
  if (v5 != v6) {
    return sub_100DE951C((uint64_t)v18);
  }
  long long v8 = a2;
  unsigned int v10 = (const void **)(a1 + 464);
  if (v7 < 0) {
    a2 = *(unsigned __int8 **)a2;
  }
  if ((v4 & 0x80) != 0)
  {
    if (memcmp(*v10, a2, *(void *)(a1 + 472))) {
      return sub_100DE951C((uint64_t)v18);
    }
    goto LABEL_15;
  }
  if (!*(unsigned char *)(a1 + 487))
  {
LABEL_15:
    if (a3[1]) {
      unsigned __int8 v11 = *a3;
    }
    else {
      unsigned __int8 v11 = 0;
    }
    *(_DWORD *)(a1 + 492) = v11;
    int64_t v12 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
    {
      int v13 = (char)v8[23];
      int v14 = *(unsigned __int8 **)v8;
      uint64_t v15 = asString();
      if (v13 >= 0) {
        char v16 = v8;
      }
      else {
        char v16 = v14;
      }
      *(_DWORD *)long long buf = 136315394;
      uint64_t v20 = v16;
      __int16 v21 = 2080;
      uint64_t v22 = v15;
      _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Device (%s), first unlock done: %s", buf, 0x16u);
    }
    return sub_100DE951C((uint64_t)v18);
  }
  while (*(unsigned __int8 *)v10 == *a2)
  {
    unsigned int v10 = (const void **)((char *)v10 + 1);
    ++a2;
    if (!--v4) {
      goto LABEL_15;
    }
  }
  return sub_100DE951C((uint64_t)v18);
}

void sub_100DE7C5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100DE7C70(uint64_t a1, const std::string *a2, std::string *a3, __int16 a4, uint64_t *a5)
{
  void (***v29)(uint8_t *__return_ptr, void, void **);
  NSObject *v30;
  void *v31[2];
  std::string::size_type v32;
  void *__p[2];
  int64_t v34;
  void **v35;
  uint8_t buf[16];
  long long v37;
  long long v38;
  long long v39;
  long long v40;
  _OWORD v41[8];
  long long v42;

  uint64_t v11 = *(void *)(a1 + 96);
  uint64_t v10 = *(void *)(a1 + 104);
  if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
  {
    sub_10004FC84(__p, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
    uint64_t v34 = a2->__r_.__value_.__r.__words[2];
  }
  char v12 = HIBYTE(v34);
  if (v11 != v10)
  {
    if (v34 >= 0) {
      int v13 = (void *)HIBYTE(v34);
    }
    else {
      int v13 = __p[1];
    }
    if (v34 >= 0) {
      int v14 = __p;
    }
    else {
      int v14 = (void **)__p[0];
    }
    do
    {
      uint64_t v15 = *(unsigned __int8 *)(v11 + 23);
      if ((v15 & 0x80u) == 0) {
        char v16 = (void *)*(unsigned __int8 *)(v11 + 23);
      }
      else {
        char v16 = *(void **)(v11 + 8);
      }
      if (v16 == v13)
      {
        if ((v15 & 0x80) != 0)
        {
          if (!memcmp(*(const void **)v11, v14, *(void *)(v11 + 8))) {
            goto LABEL_24;
          }
        }
        else
        {
          if (!*(unsigned char *)(v11 + 23)) {
            goto LABEL_24;
          }
          uint64_t v17 = 0;
          while (*(unsigned __int8 *)(v11 + v17) == *((unsigned __int8 *)v14 + v17))
          {
            if (v15 == ++v17) {
              goto LABEL_24;
            }
          }
        }
      }
      v11 += 64;
    }
    while (v11 != v10);
    uint64_t v11 = v10;
  }
LABEL_24:
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  if (v11 == *(void *)(a1 + 104))
  {
    uint64_t v18 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)long long buf = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_ERROR, "Cannot find device - continuing anyways", buf, 2u);
    }
  }
  uint64_t v19 = *(unsigned __int8 *)(a1 + 319);
  if ((v19 & 0x80u) == 0) {
    uint64_t v20 = *(unsigned __int8 *)(a1 + 319);
  }
  else {
    uint64_t v20 = *(void *)(a1 + 304);
  }
  std::string::size_type size = HIBYTE(a2->__r_.__value_.__r.__words[2]);
  int v22 = (char)size;
  if ((size & 0x80u) != 0) {
    std::string::size_type size = a2->__r_.__value_.__l.__size_;
  }
  if (v20 != size) {
    goto LABEL_45;
  }
  if (v22 >= 0) {
    __int16 v23 = a2;
  }
  else {
    __int16 v23 = (const std::string *)a2->__r_.__value_.__r.__words[0];
  }
  if ((v19 & 0x80) == 0)
  {
    if (*(unsigned char *)(a1 + 319))
    {
      BOOL v24 = (unsigned __int8 *)(a1 + 296);
      while (*v24 == v23->__r_.__value_.__s.__data_[0])
      {
        ++v24;
        __int16 v23 = (const std::string *)((char *)v23 + 1);
        if (!--v19) {
          goto LABEL_52;
        }
      }
      goto LABEL_45;
    }
LABEL_52:
    if (a3[5].__r_.__value_.__s.__data_[16])
    {
      *(void *)long long buf = 1;
      *(void *)&uint8_t buf[8] = a1 + 264;
      if (a3[5].__r_.__value_.__s.__data_[0]) {
        *(void *)(a1 + 416) = a3[5].__r_.__value_.__l.__data_;
      }
      if (a3[5].__r_.__value_.__s.__data_[8]) {
        *(void *)(a1 + 424) = a3[5].__r_.__value_.__l.__size_;
      }
      if (a3[2].__r_.__value_.__s.__data_[8]) {
        sub_1003DC1E4(a1 + 352, (uint64_t)&a3[2].__r_.__value_.__l.__size_);
      }
      if (a3[1].__r_.__value_.__s.__data_[0]) {
        sub_1003DC1E4(*(void *)&buf[8] + 56, (uint64_t)&a3[1]);
      }
      if (!a3[3].__r_.__value_.__s.__data_[16]) {
        *(unsigned char *)(*(void *)&buf[8] + 120) = 0;
      }
      sub_100DE9580((uint64_t)buf);
    }
    goto LABEL_79;
  }
  if (!memcmp(*(const void **)(a1 + 296), v23, *(void *)(a1 + 304))) {
    goto LABEL_52;
  }
LABEL_45:
  if (a3[5].__r_.__value_.__s.__data_[16])
  {
    uint64_t v25 = *(NSObject **)(a1 + 48);
    if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I New device with remote identifiers", buf, 2u);
    }
    if (v11 != *(void *)(a1 + 104)) {
      std::string::operator=(a3 + 4, (const std::string *)(v11 + 32));
    }
    if (cellplan::RemoteDeviceIdentifiers::operator!=()) {
      sub_100DE83DC(a1 + 264);
    }
  }
  else
  {
    int v26 = *(std::__shared_weak_count **)(a1 + 152);
    if (v26)
    {
      char v27 = std::__shared_weak_count::lock(v26);
      if (v27)
      {
        uint64_t v28 = v27;
        CFStringRef v29 = *(void (****)(uint8_t *__return_ptr, void, void **))(a1 + 144);
        if (v29)
        {
          uint64_t v30 = *(NSObject **)(a1 + 48);
          if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I New device, attempt to read from database", buf, 2u);
          }
          uint64_t v42 = 0u;
          uint64_t v40 = 0u;
          memset(v41, 0, sizeof(v41));
          uint64_t v38 = 0u;
          uint64_t v39 = 0u;
          *(_OWORD *)long long buf = 0u;
          BOOL v37 = 0u;
          if (SHIBYTE(a2->__r_.__value_.__r.__words[2]) < 0)
          {
            sub_10004FC84(v31, a2->__r_.__value_.__l.__data_, a2->__r_.__value_.__l.__size_);
          }
          else
          {
            *(_OWORD *)char v31 = *(_OWORD *)&a2->__r_.__value_.__l.__data_;
            long long v32 = a2->__r_.__value_.__r.__words[2];
          }
          (**v29)(buf, v29, v31);
          if (SHIBYTE(v32) < 0) {
            operator delete(v31[0]);
          }
          if (BYTE8(v42) && cellplan::RemoteDeviceIdentifiers::operator!=()) {
            sub_100DE83DC(a1 + 264);
          }
          sub_10037AD1C((uint64_t)v41);
          sub_10037ACC8((uint64_t)buf);
        }
        sub_10004D2C8(v28);
      }
    }
  }
LABEL_79:
  *(void *)&uint64_t v40 = 0;
  uint64_t v38 = 0u;
  uint64_t v39 = 0u;
  *(_OWORD *)long long buf = 0u;
  BOOL v37 = 0u;
  std::string::operator=((std::string *)buf, a2);
  WORD6(v39) = a4;
  BYTE8(v37) = 1;
  DWORD2(v39) = 1;
  HIDWORD(v37) = 2;
  if (&v38 != (long long *)a5) {
    sub_1003DB294((uint64_t)&v38, *a5, a5[1], 0x2E8BA2E8BA2E8BA3 * ((a5[1] - *a5) >> 3));
  }
  if (v11 != *(void *)(a1 + 104)) {
    LODWORD(v40) = *(_DWORD *)(v11 + 56);
  }
  if (RemoteVinylInfo::operator!=()) {
    sub_100DE8450(a1 + 432, (uint64_t)buf);
  }
  uint32_t v35 = (void **)&v38;
  sub_1000C56F4(&v35);
  if (SBYTE7(v37) < 0) {
    operator delete(*(void **)buf);
  }
}

void sub_100DE8154(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, char a20)
{
  sub_10004D2C8(v20);
  _Unwind_Resume(a1);
}

void sub_100DE81C0(uint64_t a1, unsigned __int8 *a2, uint64_t a3)
{
  uint64_t v5 = *(unsigned __int8 *)(a1 + 319);
  if ((v5 & 0x80u) == 0) {
    uint64_t v6 = *(unsigned __int8 *)(a1 + 319);
  }
  else {
    uint64_t v6 = *(void *)(a1 + 304);
  }
  uint64_t v7 = a2[23];
  int v8 = (char)v7;
  if ((v7 & 0x80u) != 0) {
    uint64_t v7 = *((void *)a2 + 1);
  }
  if (v6 == v7)
  {
    int64_t v9 = (const void **)(a1 + 296);
    if (v8 < 0) {
      a2 = *(unsigned __int8 **)a2;
    }
    if ((v5 & 0x80) == 0)
    {
      if (*(unsigned char *)(a1 + 319))
      {
        while (*(unsigned __int8 *)v9 == *a2)
        {
          int64_t v9 = (const void **)((char *)v9 + 1);
          ++a2;
          if (!--v5) {
            goto LABEL_17;
          }
        }
        goto LABEL_15;
      }
      goto LABEL_17;
    }
    if (!memcmp(*v9, a2, *(void *)(a1 + 304)))
    {
LABEL_17:
      v16[0] = 1;
      v16[1] = a1 + 432;
      uint64_t v11 = *(void *)(a1 + 496);
      uint64_t v12 = *(void *)(a1 + 504);
      if (v11 == v12)
      {
LABEL_32:
        sub_100DE951C((uint64_t)v16);
        return;
      }
      while (1)
      {
        sub_1000C5DA8((uint64_t)buf, v11);
        BOOL v14 = v19 != *(void *)(a3 + 16) || v20 != *(void *)(a3 + 24);
        if (v23[24])
        {
          uint64_t v17 = (void **)v23;
          sub_1000C57C8(&v17);
        }
        if (v22 < 0)
        {
          operator delete(__p);
          if (!v14)
          {
LABEL_30:
            long long v15 = *(_OWORD *)(a3 + 16);
            *(_OWORD *)uint64_t v11 = *(_OWORD *)a3;
            *(_OWORD *)(v11 + 16) = v15;
            std::string::operator=((std::string *)(v11 + 32), (const std::string *)(a3 + 32));
            sub_1000C86CC(v11 + 56, a3 + 56);
          }
        }
        else if (!v14)
        {
          goto LABEL_30;
        }
        v11 += 88;
        if (v11 == v12) {
          goto LABEL_32;
        }
      }
    }
  }
LABEL_15:
  uint64_t v10 = *(NSObject **)(a1 + 48);
  if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
  {
    *(_WORD *)long long buf = 0;
    _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "Devices changed, abort update", buf, 2u);
  }
}

void sub_100DE8394(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100DE951C((uint64_t)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DE83A8(uint64_t a1, uint64_t a2, __int16 a3)
{
  v4[0] = 1;
  v4[1] = a1 + 432;
  *(_WORD *)(a1 + 524) = a3;
  return sub_100DE951C((uint64_t)v4);
}

uint64_t sub_100DE83DC(uint64_t a1)
{
  cellplan::RemoteDeviceIdentifiers::operator=();
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v3 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v3();
  }
  return result;
}

uint64_t sub_100DE8450(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + 32;
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)a2);
  *(void *)(a1 + 56) = *(void *)(a2 + 24);
  if (v4 != a2) {
    sub_1003DB294(a1 + 64, *(void *)(a2 + 32), *(void *)(a2 + 40), 0x2E8BA2E8BA2E8BA3 * ((uint64_t)(*(void *)(a2 + 40) - *(void *)(a2 + 32)) >> 3));
  }
  uint64_t v5 = *(void *)(a2 + 56);
  *(_DWORD *)(a1 + 96) = *(_DWORD *)(a2 + 64);
  *(void *)(a1 + 88) = v5;
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v7 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v7();
  }
  return result;
}

void sub_100DE8520(void *a1)
{
  sub_100DE8780(a1);

  operator delete();
}

uint64_t sub_100DE8558(uint64_t a1)
{
  return sub_100DE8780((void *)(a1 - 8));
}

void sub_100DE8560(uint64_t a1)
{
  sub_100DE8780((void *)(a1 - 8));

  operator delete();
}

void *sub_100DE859C(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 64);
  sub_1000C56F4(&v3);
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }
  return sub_100DE85EC((void *)a1);
}

void *sub_100DE85EC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void *sub_100DE8670(uint64_t a1)
{
  if (*(char *)(a1 + 151) < 0) {
    operator delete(*(void **)(a1 + 128));
  }
  if (*(unsigned char *)(a1 + 88))
  {
    if (*(char *)(a1 + 119) < 0) {
      operator delete(*(void **)(a1 + 96));
    }
    *(unsigned char *)(a1 + 88) = 0;
  }
  if (*(unsigned char *)(a1 + 56))
  {
    if (*(char *)(a1 + 87) < 0) {
      operator delete(*(void **)(a1 + 64));
    }
    *(unsigned char *)(a1 + 56) = 0;
  }
  if (*(char *)(a1 + 55) < 0) {
    operator delete(*(void **)(a1 + 32));
  }

  return sub_100DE86FC((void *)a1);
}

void *sub_100DE86FC(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t sub_100DE8780(void *a1)
{
  *a1 = off_101A5C6D0;
  a1[1] = &off_101A5C800;
  uint64_t v2 = (std::__shared_weak_count *)a1[68];
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_100DE859C((uint64_t)(a1 + 54));
  sub_100DE8670((uint64_t)(a1 + 33));
  uint64_t v3 = (std::__shared_weak_count *)a1[32];
  if (v3) {
    sub_10004D2C8(v3);
  }

  return sub_1013BD63C((uint64_t)a1);
}

uint64_t *sub_100DE8818(void **a1)
{
  void (***v27)(uint8_t *__return_ptr, void, void **);
  long long v28;
  int v29;
  NSObject *v30;
  const char *v31;
  uint64_t i;
  uint64_t v33;
  std::string *v34;
  void **v35;
  void *v36;
  std::string *v37;
  std::string *v38;
  uint64_t v39;
  void *__dst[2];
  std::string::size_type v41;
  _OWORD *v42;
  uint8_t buf[16];
  _OWORD v44[3];
  long long v45;
  long long v46;
  long long __p;
  long long v48;
  long long v49;
  long long v50;
  long long v51;
  long long v52;
  long long v53;
  long long v54;

  uint64_t v1 = *a1;
  uint32_t v35 = a1;
  std::string::size_type v36 = v1;
  uint64_t v2 = (std::__shared_weak_count *)v1[2];
  if (v2)
  {
    uint64_t v3 = *v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (!v1[1])
      {
LABEL_63:
        sub_10004D2C8(v5);
        goto LABEL_64;
      }
      BOOL v37 = 0;
      uint64_t v38 = 0;
      uint64_t v39 = 0;
      sub_1003C1BB8(&v37, v1[3], v1[4], (uint64_t)(v1[4] - v1[3]) >> 6);
      uint64_t v6 = v37;
      int64_t v9 = *(unsigned __int8 **)(v3 + 96);
      uint64_t v7 = *(unsigned __int8 **)(v3 + 104);
      int v8 = (std::string **)(v3 + 96);
      if (v37 == v38)
      {
        if (v9 == v7)
        {
LABEL_62:
          *(void *)long long buf = &v37;
          sub_1002B2AEC((void ***)buf);
          goto LABEL_63;
        }
        uint64_t v10 = *(NSObject **)(v3 + 48);
        if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I All devices unpaired", buf, 2u);
        }
        BYTE8(v44[2]) = 0;
        BYTE8(v46) = 0;
        LOBYTE(v49) = 0;
        *(void *)&v44[0] = 0;
        memset(buf, 0, sizeof(buf));
        BYTE8(v44[0]) = 0;
        *(void *)&uint64_t v48 = 0;
        long long __p = 0uLL;
        BYTE8(v48) = 0;
        cellplan::RemoteDeviceIdentifiers::operator=();
        uint64_t v11 = *(void *)(v3 + 288);
        if (v11) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v11 + 48))(v11, v3 + 296);
        }
        if (SBYTE7(v48) < 0) {
          operator delete((void *)__p);
        }
        if (BYTE8(v44[2]))
        {
          if (SBYTE7(v46) < 0) {
            operator delete((void *)v45);
          }
          BYTE8(v44[2]) = 0;
        }
        if (BYTE8(v44[0]))
        {
          if (SBYTE7(v44[2]) < 0) {
            operator delete(*(void **)&v44[1]);
          }
          BYTE8(v44[0]) = 0;
        }
        if (SBYTE7(v44[0]) < 0) {
          operator delete(*(void **)buf);
        }
        LODWORD(v45) = 0;
        *(void *)&v44[0] = 0;
        memset(buf, 0, sizeof(buf));
        BYTE8(v44[0]) = 0;
        memset((char *)v44 + 12, 0, 34);
        uint64_t v12 = (void **)(v3 + 464);
        if (*(char *)(v3 + 487) < 0) {
          operator delete(*v12);
        }
        *(_OWORD *)uint64_t v12 = *(_OWORD *)buf;
        uint64_t v13 = *((void *)&v44[0] + 1);
        *(void *)(v3 + 480) = *(void *)&v44[0];
        BYTE7(v44[0]) = 0;
        buf[0] = 0;
        *(void *)(v3 + 488) = v13;
        sub_1003DB434((void **)(v3 + 496));
        *(void *)(v3 + 496) = 0;
        *(void *)(v3 + 504) = 0;
        *(void *)(v3 + 512) = 0;
        memset(&v44[1], 0, 24);
        *(void *)(v3 + 520) = *((void *)&v44[2] + 1);
        *(_DWORD *)(v3 + 528) = v45;
        uint64_t v14 = *(void *)(v3 + 456);
        if (v14) {
          (*(void (**)(uint64_t, uint64_t))(*(void *)v14 + 48))(v14, v3 + 464);
        }
        __dst[0] = &v44[1];
        sub_1000C56F4((void ***)__dst);
        if (SBYTE7(v44[0]) < 0) {
          operator delete(*(void **)buf);
        }
        if (v8 != &v37) {
          sub_1005E459C(v3 + 96, v37, v38, ((char *)v38 - (char *)v37) >> 6);
        }
LABEL_61:
        sub_1013D1C40((uint64_t *)v3);
        goto LABEL_62;
      }
      if (v9 == v7) {
        goto LABEL_9;
      }
      do
      {
        if (v9[25]) {
          goto LABEL_9;
        }
        v9 += 64;
      }
      while (v9 != v7);
      int64_t v9 = *(unsigned __int8 **)(v3 + 104);
LABEL_9:
      while (!v6[1].__r_.__value_.__s.__data_[1])
      {
        uint64_t v6 = (std::string *)((char *)v6 + 64);
        if (v6 == v38) {
          goto LABEL_55;
        }
      }
      if (v6 == v38)
      {
LABEL_55:
        __int16 v21 = *(NSObject **)(v3 + 48);
        if (os_log_type_enabled(v21, OS_LOG_TYPE_DEFAULT))
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v21, OS_LOG_TYPE_DEFAULT, "#I No Active device", buf, 2u);
        }
        *(void *)long long buf = 1;
        *(void *)&uint8_t buf[8] = v3 + 432;
        *(unsigned char *)(v3 + 488) = 0;
        *(_DWORD *)(v3 + 492) = 0;
        goto LABEL_58;
      }
      if (v9 != v7)
      {
        uint64_t v15 = v9[23];
        if ((v15 & 0x80u) == 0) {
          uint64_t v16 = v9[23];
        }
        else {
          uint64_t v16 = *((void *)v9 + 1);
        }
        std::string::size_type size = HIBYTE(v6->__r_.__value_.__r.__words[2]);
        int v18 = (char)size;
        if ((size & 0x80u) != 0) {
          std::string::size_type size = v6->__r_.__value_.__l.__size_;
        }
        if (v16 == size)
        {
          if (v18 >= 0) {
            uint64_t v19 = v6;
          }
          else {
            uint64_t v19 = (std::string *)v6->__r_.__value_.__r.__words[0];
          }
          if ((v15 & 0x80) == 0)
          {
            if (v9[23])
            {
              uint64_t v20 = v9;
              while (*v20 == v19->__r_.__value_.__s.__data_[0])
              {
                ++v20;
                uint64_t v19 = (std::string *)((char *)v19 + 1);
                if (!--v15) {
                  goto LABEL_76;
                }
              }
              goto LABEL_66;
            }
            goto LABEL_76;
          }
          if (!memcmp(*(const void **)v9, v19, *((void *)v9 + 1)))
          {
LABEL_76:
            CFStringRef v29 = v6[1].__r_.__value_.__s.__data_[0];
            if (v9[24] == v29)
            {
LABEL_59:
              if (v8 != &v37) {
                sub_1005E459C(v3 + 96, v37, v38, ((char *)v38 - (char *)v37) >> 6);
              }
              goto LABEL_61;
            }
            uint64_t v30 = *(NSObject **)(v3 + 48);
            if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
            {
              char v31 = "";
              if (!v29) {
                char v31 = " not";
              }
              *(_DWORD *)long long buf = 136315138;
              *(void *)&uint8_t buf[4] = v31;
              _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I Device is%s in proximity", buf, 0xCu);
              CFStringRef v29 = v6[1].__r_.__value_.__s.__data_[0];
            }
            *(void *)long long buf = 1;
            *(void *)&uint8_t buf[8] = v3 + 432;
            *(_DWORD *)(v3 + 528) = v6[2].__r_.__value_.__r.__words[1];
            *(unsigned char *)(v3 + 488) = v29;
            *(_DWORD *)(v3 + 520) = 2;
            if (v29) {
              sub_1013D1334((void *)v3, v6);
            }
LABEL_58:
            sub_100DE951C((uint64_t)buf);
            goto LABEL_59;
          }
        }
      }
LABEL_66:
      __int16 v23 = *(NSObject **)(v3 + 48);
      if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
      {
        BOOL v24 = v6;
        if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0) {
          BOOL v24 = (std::string *)v6->__r_.__value_.__r.__words[0];
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v24;
        _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I New active device [%s]", buf, 0xCu);
      }
      uint64_t v25 = *(std::__shared_weak_count **)(v3 + 152);
      if (v25)
      {
        int v26 = std::__shared_weak_count::lock(v25);
        if (v26)
        {
          char v27 = *(void (****)(uint8_t *__return_ptr, void, void **))(v3 + 144);
          if (v27)
          {
            unint64_t v53 = 0u;
            uint64_t v54 = 0u;
            uint64_t v51 = 0u;
            unsigned int v52 = 0u;
            uint64_t v49 = 0u;
            uint64_t v50 = 0u;
            long long __p = 0u;
            uint64_t v48 = 0u;
            __int16 v45 = 0u;
            uint64_t v46 = 0u;
            memset(v44, 0, sizeof(v44));
            *(_OWORD *)long long buf = 0u;
            if (SHIBYTE(v6->__r_.__value_.__r.__words[2]) < 0)
            {
              sub_10004FC84(__dst, v6->__r_.__value_.__l.__data_, v6->__r_.__value_.__l.__size_);
            }
            else
            {
              uint64_t v28 = *(_OWORD *)&v6->__r_.__value_.__l.__data_;
              unint64_t v41 = v6->__r_.__value_.__r.__words[2];
              *(_OWORD *)long long __dst = v28;
            }
            (**v27)(buf, v27, __dst);
            if (SHIBYTE(v41) < 0) {
              operator delete(__dst[0]);
            }
            if (BYTE8(v45) && BYTE8(v54))
            {
              unint64_t v33 = *((void *)&v44[1] + 1);
              for (CFIndex i = *(void *)&v44[1]; i != v33; i += 88)
              {
                uint64_t v42 = (_OWORD *)(i + 16);
                uint64_t v34 = (std::string *)sub_1003DE940((uint64_t **)(v3 + 120), i + 16, (uint64_t)&unk_10144E20E, &v42);
                std::string::operator=(v34 + 2, v6);
              }
              sub_100DE83DC(v3 + 264);
              sub_100DE8450(v3 + 432, (uint64_t)buf);
            }
            sub_10037AD1C((uint64_t)&v46);
            sub_10037ACC8((uint64_t)buf);
          }
        }
      }
      else
      {
        int v26 = 0;
      }
      if (v6[1].__r_.__value_.__s.__data_[0]) {
        sub_1013D1334((void *)v3, v6);
      }
      if (v26) {
        sub_10004D2C8(v26);
      }
      goto LABEL_59;
    }
  }
LABEL_64:
  sub_100DE8F5C((uint64_t *)&v36);
  return sub_100046B58((uint64_t *)&v35);
}

void sub_100DE8EA4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,__int16 *a26)
{
  sub_100DE951C((uint64_t)&a26);
  a26 = &a12;
  sub_1002B2AEC((void ***)&a26);
  sub_10004D2C8(v26);
  sub_100DE8F5C(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DE8F5C(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v3 = (void **)(v1 + 24);
    sub_1002B2AEC(&v3);
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100DE8FC8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(uint64_t ***)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 8)) {
        sub_1013CF5F4(v3, v1 + 24);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100814DE4(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100DE9040(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
  sub_10004D2C8(v10);
  sub_100814DE4(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

void sub_100DE9068()
{
}

void *sub_100DE907C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5C8F8;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE90C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5C8F8;
  a2[1] = v2;
  return result;
}

void sub_100DE90F0()
{
  xpc_object_t v3 = 0;
  cellplan::write_rest_value();
  sub_100058DB0(&__p, "/cc/props/remote_provisioning_device_identifiers");
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100DE9194(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100DE91D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE9218()
{
}

void sub_100DE9228()
{
}

void *sub_100DE923C(uint64_t a1)
{
  uint64_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *uint64_t result = off_101A5C988;
  result[1] = v3;
  return result;
}

uint64_t sub_100DE9284(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5C988;
  a2[1] = v2;
  return result;
}

void sub_100DE92B0()
{
  xpc_object_t v3 = 0;
  write_rest_value();
  sub_100058DB0(&__p, "/cc/props/remote_vinyl_info");
  xpc_object_t object = v3;
  if (v3) {
    xpc_retain(v3);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v2 < 0) {
    operator delete(__p);
  }
  xpc_release(v3);
}

void sub_100DE9354(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100DE9398(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE93D8()
{
}

void sub_100DE93E8()
{
}

__n128 sub_100DE93FC(uint64_t a1)
{
  char v2 = (char *)operator new(0x20uLL);
  *(void *)char v2 = off_101A5CA18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100DE9450(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5CA18;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DE9488(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  xpc_object_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100DE94D0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DE9510()
{
}

uint64_t sub_100DE951C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

uint64_t sub_100DE9580(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

uint64_t sub_100DE95E4()
{
  qword_101B12BF8 = 0;
  qword_101B12C00 = 0;
  qword_101B12C08 = 0;
  uint64_t v0 = operator new(0xB0uLL);
  qword_101B12C08 = (uint64_t)(v0 + 11);
  v0[8] = *(_OWORD *)off_101A5C690;
  v0[9] = *(_OWORD *)off_101A5C6A0;
  v0[10] = *(_OWORD *)off_101A5C6B0;
  v0[4] = *(_OWORD *)off_101A5C650;
  v0[5] = *(_OWORD *)off_101A5C660;
  v0[6] = *(_OWORD *)off_101A5C670;
  v0[7] = *(_OWORD *)off_101A5C680;
  *uint64_t v0 = *(_OWORD *)off_101A5C610;
  v0[1] = *(_OWORD *)off_101A5C620;
  v0[2] = *(_OWORD *)off_101A5C630;
  v0[3] = *(_OWORD *)off_101A5C640;
  qword_101B12BF8 = (uint64_t)v0;
  qword_101B12C00 = (uint64_t)(v0 + 11);

  return __cxa_atexit((void (*)(void *))sub_100788FC0, &qword_101B12BF8, (void *)&_mh_execute_header);
}

void sub_100DE9688(void *a1@<X8>)
{
  v3[0] = off_101A5CC38;
  void v3[3] = v3;
  inactive = dispatch_workloop_create_inactive("EmergencyNumbersController");
  sub_100136200((uint64_t)v3, (uint64_t)inactive);
  dispatch_activate(inactive);
  sub_1001362D0(v3);
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100DE9E48(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, EmergencyNumbersModelDelegate *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23)
{
}

void sub_100DE9E78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,std::__shared_weak_count *a24)
{
  if (a19) {
    (*(void (**)(uint64_t))(*(void *)a19 + 8))(a19);
  }
  if (a24) {
    sub_10004D2C8(a24);
  }
  sub_10004D2C8(v25);
  if (v24) {
    JUMPOUT(0x100DEA110);
  }
  JUMPOUT(0x100DEA118);
}

void sub_100DE9ECC()
{
  sub_10004D2C8(v1);
  if (v0) {
    JUMPOUT(0x100DEA110);
  }
  JUMPOUT(0x100DEA118);
}

void sub_100DE9ED4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, dispatch_object_t object, uint64_t a12, std::__shared_weak_count *a13, dispatch_object_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20)
{
  if (object) {
    dispatch_release(object);
  }
  if (a13) {
    std::__shared_weak_count::__release_weak(a13);
  }
  (*(void (**)(uint64_t))(*(void *)v20 + 8))(v20);
  JUMPOUT(0x100DEA104);
}

void sub_100DE9F10(void *a1, int a2)
{
  if (a2)
  {
    __cxa_begin_catch(a1);
    dispatch_barrier_async_f(v2[4], v2, (dispatch_function_t)sub_100DEBDA4);
    __cxa_rethrow();
  }
  JUMPOUT(0x100DEA118);
}

void sub_100DE9F44()
{
}

void sub_100DE9F54(void *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  JUMPOUT(0x100DEA118);
}

void sub_100DE9F64(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, dispatch_object_t a12, uint64_t a13, dispatch_object_t object, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (object) {
    dispatch_release(object);
  }
  if (a12) {
    dispatch_release(a12);
  }
  if (a28 < 0) {
    operator delete(__p);
  }
  CFStringRef v29 = *(std::__shared_weak_count **)(v28 + 72);
  if (v29) {
    sub_10004D2C8(v29);
  }
  uint64_t v30 = *(void *)(v28 + 56);
  *(void *)(v28 + 56) = 0;
  if (v30) {
    (*(void (**)(uint64_t))(*(void *)v30 + 8))(v30);
  }
  JUMPOUT(0x100DEA014);
}

void sub_100DEA028(uint64_t a1, EmergencyNumbersModelDelegate *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, ...)
{
  va_start(va1, a10);
  va_start(va, a10);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v15 = va_arg(va1, void);
  uint64_t v16 = va_arg(va1, void);
  uint64_t v17 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  sub_100087E88(v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va1);
  if (v10) {
    dispatch_release(v10);
  }
  EmergencyNumbersModelDelegate::~EmergencyNumbersModelDelegate(a2);
  EmergencyNumbersInterface::~EmergencyNumbersInterface(v11);
  if (v10) {
    dispatch_release(v10);
  }
  operator delete();
}

void sub_100DEA0B0(_Unwind_Exception *a1)
{
  if (v1) {
    dispatch_release(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100DEA0BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1001362D0((uint64_t *)va);
  JUMPOUT(0x100DEA118);
}

void sub_100DEA0CC()
{
  (*(void (**)(uint64_t))(*(void *)v0 + 8))(v0);
  JUMPOUT(0x100DEA104);
}

void sub_100DEA0D4()
{
  if (v2) {
    JUMPOUT(0x100DEA0E4);
  }
  sub_10004D2C8(v1);
  if (v0) {
    JUMPOUT(0x100DEA110);
  }
  JUMPOUT(0x100DEA118);
}

const char *sub_100DEA120(int a1)
{
  uint64_t v1 = "call.em.Controller.?";
  if (a1 == 2) {
    uint64_t v1 = "call.em.Controller.2";
  }
  if (a1 == 1) {
    return "call.em.Controller.1";
  }
  else {
    return v1;
  }
}

void sub_100DEA14C(uint64_t a1)
{
  *(void *)a1 = off_101A5CA98;
  uint64_t v2 = (EmergencyNumbersModelDelegate *)(a1 + 8);
  *(void *)(a1 + 8) = off_101A5CB38;
  uint64_t v3 = (void *)(a1 + 152);
  sub_1007036B8(a1 + 184, *(char **)(a1 + 192));
  sub_100DEBBB4(v3);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 144);
  if (v4) {
    sub_10004D2C8(v4);
  }
  uint64_t v5 = *(std::__shared_weak_count **)(a1 + 128);
  if (v5) {
    sub_10004D2C8(v5);
  }
  sub_1007035FC(a1 + 96, *(void **)(a1 + 104));
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 88);
  if (v6) {
    sub_10004D2C8(v6);
  }
  uint64_t v7 = *(std::__shared_weak_count **)(a1 + 72);
  if (v7) {
    sub_10004D2C8(v7);
  }
  uint64_t v8 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0;
  if (v8) {
    (*(void (**)(uint64_t))(*(void *)v8 + 8))(v8);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 48));
  sub_100087E88((void *)(a1 + 16));
  EmergencyNumbersModelDelegate::~EmergencyNumbersModelDelegate(v2);

  EmergencyNumbersInterface::~EmergencyNumbersInterface((EmergencyNumbersInterface *)a1);
}

void sub_100DEA268(uint64_t a1)
{
}

void sub_100DEA270(uint64_t a1)
{
  sub_100DEA14C(a1);

  operator delete();
}

void sub_100DEA2A8(uint64_t a1)
{
  sub_100DEA14C(a1 - 8);

  operator delete();
}

void sub_100DEA2E4(uint64_t *a1, void *a2)
{
  uint64_t v5 = a2[15];
  uint64_t v4 = (std::__shared_weak_count *)a2[16];
  *a1 = v5;
  a1[1] = (uint64_t)v4;
  if (v4) {
    atomic_fetch_add_explicit(&v4->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  uint64_t v6 = (void *)a2[12];
  uint64_t v7 = a2 + 13;
  if (v6 != a2 + 13)
  {
    do
    {
      if (*((_DWORD *)v6 + 14) == 2)
      {
        uint64_t v8 = a2[17];
        int64_t v9 = (std::__shared_weak_count *)a2[18];
        if (v9) {
          atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
        }
        *a1 = v8;
        a1[1] = (uint64_t)v9;
        if (v4) {
          sub_10004D2C8(v4);
        }
        uint64_t v4 = v9;
      }
      uint64_t v10 = (void *)v6[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v6[2];
          BOOL v12 = *v11 == (void)v6;
          uint64_t v6 = v11;
        }
        while (!v12);
      }
      uint64_t v6 = v11;
    }
    while (v11 != v7);
    uint64_t v5 = *a1;
  }
  if (!v5)
  {
    uint64_t v13 = a2[6];
    if (os_log_type_enabled(v13, OS_LOG_TYPE_ERROR))
    {
      *(_WORD *)uint64_t v14 = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_ERROR, "No existing EmergencyNumbers model for config", v14, 2u);
    }
  }
}

void sub_100DEA3F8(uint64_t a1)
{
  void (***v13)(uint64_t *__return_ptr, void, uint64_t);
  char v14;
  NSObject *v15;
  uint64_t v16;
  const char *v17;
  const char *v18;
  uint64_t *v19;
  BOOL v20;
  uint64_t v21;
  std::__shared_weak_count *v22;
  unsigned char buf[12];
  __int16 v24;
  const char *v25;
  __int16 v26;
  const char *v27;

  uint64_t v1 = *(uint64_t **)(a1 + 96);
  uint64_t v2 = (uint64_t *)(a1 + 104);
  if (v1 != (uint64_t *)(a1 + 104))
  {
    uint64_t v4 = (uint64_t *)&byte_10144BF80[128];
    while (1)
    {
      __int16 v21 = 0;
      char v22 = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 64));
      uint64_t v6 = ServiceMap;
      if (v7 < 0)
      {
        uint64_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v9 = 5381;
        do
        {
          uint64_t v7 = v9;
          unsigned int v10 = *v8++;
          uint64_t v9 = (33 * v9) ^ v10;
        }
        while (v10);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long buf = v7;
      uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)buf);
      if (!v11) {
        break;
      }
      uint64_t v13 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v11[3];
      BOOL v12 = (std::__shared_weak_count *)v11[4];
      if (!v12) {
        goto LABEL_10;
      }
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      uint64_t v14 = 0;
LABEL_11:
      (**v13)(&v21, v13, (uint64_t)(v1 + 4));
      if ((v14 & 1) == 0) {
        sub_10004D2C8(v12);
      }
      if (v21)
      {
        uint64_t v15 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 56) + 16))(*(void *)(a1 + 56), *(unsigned int *)(v21 + 52));
        if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v16 = asString();
          if (*(void *)(a1 + 120)) {
            uint64_t v17 = "true";
          }
          else {
            uint64_t v17 = "false";
          }
          if (*(void *)(a1 + 136)) {
            int v18 = "true";
          }
          else {
            int v18 = "false";
          }
          *(_DWORD *)long long buf = 136315650;
          *(void *)&uint8_t buf[4] = v16;
          uint64_t v24 = 2080;
          uint64_t v25 = v17;
          int v26 = 2080;
          char v27 = v18;
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I VoWiFiProvState config %s, fSimModel: %s, fIcloudModel: %s", buf, 0x20u);
        }
      }
      if (v22) {
        sub_10004D2C8(v22);
      }
      uint64_t v19 = (uint64_t *)v1[1];
      if (v19)
      {
        do
        {
          uint64_t v4 = v19;
          uint64_t v19 = (uint64_t *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v4 = (uint64_t *)v1[2];
          uint64_t v20 = *v4 == (void)v1;
          uint64_t v1 = v4;
        }
        while (!v20);
      }
      uint64_t v1 = v4;
      if (v4 == v2) {
        return;
      }
    }
    uint64_t v13 = 0;
LABEL_10:
    std::mutex::unlock(v6);
    BOOL v12 = 0;
    uint64_t v14 = 1;
    goto LABEL_11;
  }
}

void sub_100DEA660(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12)
{
  if (a12) {
    sub_10004D2C8(a12);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEA6A4(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DEA870(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, dispatch_group_t a10)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEA8B8(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 24);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DEAA84(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, dispatch_group_t group, dispatch_group_t a10)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEAACC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 8))(v2);
  }
  uint64_t result = *(void *)(a1 + 136);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 8);
    return v4();
  }
  return result;
}

void sub_100DEAB5C(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 120);
  if (v8)
  {
    memset(v11, 0, sizeof(v11));
    sub_1000302C0((char *)v11, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v8 + 40))(v8, a2, v11, a4);
    BOOL v12 = (void **)v11;
    sub_100047F64(&v12);
  }
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9)
  {
    memset(v10, 0, sizeof(v10));
    sub_1000302C0((char *)v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v9 + 40))(v9, a2, v10, a4);
    BOOL v12 = (void **)v10;
    sub_100047F64(&v12);
  }
}

void sub_100DEAC88(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DEACAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a1 + 120);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v4 + 48))(v4, a2, a3);
  }
  uint64_t result = *(void *)(a1 + 136);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v6();
  }
  return result;
}

void sub_100DEAD60(uint64_t a1, uint64_t a2, long long **a3, uint64_t a4)
{
  uint64_t v8 = *(void *)(a1 + 120);
  if (v8)
  {
    memset(v11, 0, sizeof(v11));
    sub_1000302C0((char *)v11, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v8 + 56))(v8, a2, v11, a4);
    BOOL v12 = (void **)v11;
    sub_100047F64(&v12);
  }
  uint64_t v9 = *(void *)(a1 + 136);
  if (v9)
  {
    memset(v10, 0, sizeof(v10));
    sub_1000302C0((char *)v10, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
    (*(void (**)(uint64_t, uint64_t, void *, uint64_t))(*(void *)v9 + 56))(v9, a2, v10, a4);
    BOOL v12 = (void **)v10;
    sub_100047F64(&v12);
  }
}

void sub_100DEAE8C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, ...)
{
  va_start(va, a8);
  sub_100047F64((void ***)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DEAEB0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 64))(v2);
  }
  uint64_t result = *(void *)(a1 + 136);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 64);
    return v4();
  }
  return result;
}

BOOL sub_100DEAF40(void *a1, uint64_t a2, unsigned int a3, unsigned __int8 a4)
{
  unsigned int v12 = a3;
  unsigned __int8 v11 = a4;
  v10[0] = a1;
  v10[1] = a2;
  void v10[2] = &v12;
  void v10[3] = &v11;
  if (a1[5])
  {
    if (dispatch_workloop_is_current())
    {
      blocuint64_t k = 0;
      uint64_t v16 = 0;
      sub_100DEA2E4((uint64_t *)&block, a1);
      if (block) {
        uint64_t v6 = (*((uint64_t (**)(void **, uint64_t, void, void))*block + 9))(block, a2, v12, v11);
      }
      else {
        uint64_t v6 = 0;
      }
      if (v16) {
        sub_10004D2C8((std::__shared_weak_count *)v16);
      }
      return v6;
    }
    BOOL v7 = a1[5] == 0;
  }
  else
  {
    BOOL v7 = 1;
  }
  v13[0] = _NSConcreteStackBlock;
  v13[1] = 0x40000000;
  v13[2] = sub_100DED198;
  v13[3] = &unk_101A5CF58;
  _OWORD v13[4] = a1 + 2;
  v13[5] = v10;
  uint64_t v14 = v13;
  uint64_t v8 = a1[4];
  char v21 = 0;
  blocuint64_t k = _NSConcreteStackBlock;
  uint64_t v16 = 0x40000000;
  if (v7)
  {
    uint64_t v17 = sub_10005A520;
    int v18 = &unk_101A5CF78;
    uint64_t v19 = &v21;
    uint64_t v20 = &v14;
    dispatch_sync(v8, &block);
  }
  else
  {
    uint64_t v17 = sub_10005B284;
    int v18 = &unk_101A5CF98;
    uint64_t v19 = &v21;
    uint64_t v20 = &v14;
    dispatch_async_and_wait(v8, &block);
  }
  return v21 != 0;
}

void sub_100DEB124(void *a1)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 - 64);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10006A6AC(a1);
}

uint64_t sub_100DEB13C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(uint64_t))(*(void *)v2 + 80))(v2);
  }
  uint64_t result = *(void *)(a1 + 136);
  if (result)
  {
    uint64_t v4 = *(uint64_t (**)(void))(*(void *)result + 80);
    return v4();
  }
  return result;
}

void sub_100DEB1CC(uint64_t a1@<X0>, CSIPhoneNumber *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 120);
  if (v2) {
    (*(void (**)(void))(*(void *)v2 + 88))();
  }
  else {
    CSIPhoneNumber::CSIPhoneNumber(a2);
  }
}

void sub_100DEB200(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    sub_10009DB3C((uint64_t)v17, a2);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 96))(v6, v17, a3);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
  }
  uint64_t v7 = *(void *)(a1 + 136);
  if (v7)
  {
    sub_10009DB3C((uint64_t)&v8, a2);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 96))(v7, &v8, a3);
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_100DEB348(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100DEB368(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 120);
  if (v6)
  {
    sub_10009DB3C((uint64_t)v17, a2);
    (*(void (**)(uint64_t, unsigned char *, uint64_t))(*(void *)v6 + 104))(v6, v17, a3);
    if (v25 < 0) {
      operator delete(__p);
    }
    if (v23 < 0) {
      operator delete(v22);
    }
    if (v21 < 0) {
      operator delete(v20);
    }
    if (v19 < 0) {
      operator delete(v18);
    }
  }
  uint64_t v7 = *(void *)(a1 + 136);
  if (v7)
  {
    sub_10009DB3C((uint64_t)&v8, a2);
    (*(void (**)(uint64_t, uint64_t *, uint64_t))(*(void *)v7 + 104))(v7, &v8, a3);
    if (v16 < 0) {
      operator delete(v15);
    }
    if (v14 < 0) {
      operator delete(v13);
    }
    if (v12 < 0) {
      operator delete(v11);
    }
    if (v10 < 0) {
      operator delete(v9);
    }
  }
}

void sub_100DEB4B0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
}

void sub_100DEB4D0(void *a1, uint64_t a2, unsigned int a3)
{
  unsigned int v8 = a3;
  v7[0] = a1;
  v7[1] = a2;
  void v7[2] = &v8;
  if (!a1[5])
  {
    BOOL v5 = 1;
    goto LABEL_7;
  }
  if ((dispatch_workloop_is_current() & 1) == 0)
  {
    BOOL v5 = a1[5] == 0;
LABEL_7:
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unsigned __int8 v11 = sub_100DED240;
    char v12 = &unk_101A5CFB8;
    uint64_t v13 = a1 + 2;
    char v14 = v7;
    uint64_t v6 = a1[4];
    if (v5) {
      dispatch_sync(v6, &block);
    }
    else {
      dispatch_async_and_wait(v6, &block);
    }
    return;
  }
  blocuint64_t k = 0;
  uint64_t v10 = 0;
  sub_100DEA2E4((uint64_t *)&block, a1);
  if (block)
  {
    (*((void (**)(void **, uint64_t, void))*block + 14))(block, a2, v8);
  }
  else
  {
    sub_100703778(a2, *(char **)(a2 + 8));
    *(void *)a2 = a2 + 8;
    *(void *)(a2 + 16) = 0;
    *(void *)(a2 + 8) = 0;
  }
  if (v10) {
    sub_10004D2C8((std::__shared_weak_count *)v10);
  }
}

void sub_100DEB60C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10006A6AC(a1);
}

void sub_100DEB624(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v10 = a1;
  char v11 = a2;
  int v12 = a3;
  if (!a1[5])
  {
    BOOL v8 = 1;
    goto LABEL_7;
  }
  if ((dispatch_workloop_is_current() & 1) == 0)
  {
    BOOL v8 = a1[5] == 0;
LABEL_7:
    v13[0] = _NSConcreteStackBlock;
    v13[1] = 0x40000000;
    v13[2] = sub_100DED314;
    v13[3] = &unk_101A5CFD8;
    _OWORD v13[4] = a1 + 2;
    v13[5] = &v10;
    char v14 = v13;
    uint64_t v9 = a1[4];
    *(void *)(a4 + 128) = 0;
    *(_OWORD *)(a4 + 96) = 0u;
    *(_OWORD *)(a4 + 112) = 0u;
    *(_OWORD *)(a4 + 64) = 0u;
    *(_OWORD *)(a4 + 80) = 0u;
    *(_OWORD *)(a4 + 32) = 0u;
    *(_OWORD *)(a4 + 48) = 0u;
    *(_OWORD *)a4 = 0u;
    *(_OWORD *)(a4 + 16) = 0u;
    if (v8)
    {
      CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)a4);
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v16 = 0x40000000;
      uint64_t v17 = sub_100DED3D4;
      int v18 = &unk_101A5CFF8;
      uint64_t v19 = a4;
      uint64_t v20 = &v14;
      dispatch_sync(v9, &block);
    }
    else
    {
      CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)a4);
      blocuint64_t k = _NSConcreteStackBlock;
      uint64_t v16 = 0x40000000;
      uint64_t v17 = sub_100DED568;
      int v18 = &unk_101A5D018;
      uint64_t v19 = a4;
      uint64_t v20 = &v14;
      dispatch_async_and_wait(v9, &block);
    }
    return;
  }
  blocuint64_t k = 0;
  uint64_t v16 = 0;
  sub_100DEA2E4((uint64_t *)&block, a1);
  if (block) {
    (*((void (**)(void **, uint64_t, uint64_t))*block + 15))(block, a2, a3);
  }
  else {
    CSIPhoneNumber::CSIPhoneNumber((CSIPhoneNumber *)a4);
  }
  if (v16) {
    sub_10004D2C8((std::__shared_weak_count *)v16);
  }
}

void sub_100DEB83C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, std::__shared_weak_count *a20)
{
  if (a20) {
    sub_10004D2C8(a20);
  }
  sub_10006A6AC(a1);
}

void sub_100DEB85C(uint64_t a1, char *a2, void *a3)
{
  v8[0] = 0;
  v8[1] = 0;
  uint64_t v9 = 0;
  if (!a2) {
    a2 = "unknown";
  }
  sub_100058DB0(v8, a2);
  if (SHIBYTE(v9) < 0)
  {
    sub_10004FC84(__p, v8[0], (unint64_t)v8[1]);
  }
  else
  {
    *(_OWORD *)long long __p = *(_OWORD *)v8;
    __p[2] = v9;
  }
  sub_100DED6FC((uint64_t)&v7, a3);
  BOOL v5 = *(std::__shared_weak_count **)(a1 + 24);
  if (v5)
  {
    if (std::__shared_weak_count::lock(v5)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DEBA0C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEBA68(uint64_t a1, char *a2, void *a3)
{
}

void sub_100DEBA70(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1;
  sub_100921408((uint64_t)&v5, a2);
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 24);
  if (v3)
  {
    if (std::__shared_weak_count::lock(v3)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DEBBA4(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

void *sub_100DEBBB4(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100DEBC3C()
{
}

void *sub_100DEBC50()
{
  uint64_t result = operator new(0x10uLL);
  *uint64_t result = off_101A5CC38;
  return result;
}

void sub_100DEBC88(uint64_t a1, void *a2)
{
  *a2 = off_101A5CC38;
}

void sub_100DEBCB0(uint64_t a1, dispatch_workloop_t *a2)
{
}

uint64_t sub_100DEBCBC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DEBCFC()
{
}

void sub_100DEBD0C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DEBD44(uint64_t a1)
{
}

uint64_t sub_100DEBD60(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100DEBDA4(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void sub_100DEBDD0(ServiceManager::Service *this)
{
  *(void *)this = off_101A5CD18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100DEBE2C(ServiceManager::Service *this)
{
  *(void *)this = off_101A5CD18;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100DEBE9C@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "EmergencyNumbersController");
}

unsigned char *sub_100DEBEAC@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  uint64_t v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100DEBEEC(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  dispatch_object_t v4 = v3;
  sub_100DEA8B8(v2, &v4);
}

void sub_100DEBF8C(_Unwind_Exception *exception_object)
{
  if (v1)
  {
    dispatch_group_leave(v1);
    dispatch_release(v1);
    dispatch_group_leave(v1);
    dispatch_release(v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEBFBC()
{
  return 0;
}

uint64_t sub_100DEBFC4()
{
  return 1;
}

uint64_t sub_100DEBFCC()
{
  return 0;
}

uint64_t sub_100DEBFD8(uint64_t a1)
{
  return sub_100DEAACC(*(void *)(a1 + 8));
}

void sub_100DEBFE0(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group, this);
  sub_100DEA6A4(v3, &group);
}

void sub_100DEC038(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group)
{
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEC060()
{
}

uint64_t sub_100DEC074(uint64_t a1)
{
  return *(void *)(a1 + 8) + 48;
}

uint64_t *sub_100DEC080(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping EmergencyNumbersController", buf, 2u);
  }
  Registry::createRestModuleOneTimeUseConnection(&v9, *(Registry **)(v2 + 64));
  ctu::RestModule::connect();
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_100058DB0(__p, "/cc/props/vowifi_provisioning_state");
  *(void *)long long buf = off_101A5CDD8;
  uint64_t v14 = v2 + 96;
  uint64_t v15 = v2;
  uint64_t v16 = buf;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  *(void *)long long buf = off_101A5CE58;
  uint64_t v14 = v2 + 80;
  uint64_t v16 = buf;
  sub_100DECD4C(buf, (void *)(v2 + 152));
  sub_100DEBBB4(buf);
  uint64_t v4 = *(void *)(v2 + 176);
  if (v4) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v4 + 48))(v4, v2 + 184);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  uint64_t v5 = (uint8_t *)operator new(0x20uLL);
  *(void *)uint64_t v5 = off_101A5CEE8;
  *((void *)v5 + 1) = v2;
  *((void *)v5 + 2) = sub_100DEA3F8;
  *((void *)v5 + 3) = 0;
  uint64_t v16 = v5;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (v12 < 0) {
    operator delete(__p[0]);
  }
  sub_100088C88(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100DEC294(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, uint64_t a20)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  sub_100088C88(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

void sub_100DEC2F4()
{
}

__n128 sub_100DEC308(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A5CDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100DEC354(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5CDD8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DEC384(uint64_t a1, xpc_object_t *a2)
{
  void (***v18)(uint64_t *__return_ptr, void, uint64_t);
  char v19;
  uint64_t v20;
  NSObject **v21;
  NSObject *v22;
  uint64_t v23;
  uint64_t v24;
  void *v25;
  void *v26;
  BOOL v27;
  void **v28;
  void *v29;
  uint64_t v31;
  std::__shared_weak_count *v32;
  unsigned char buf[12];
  __int16 v34;
  uint64_t v35;

  uint64_t v3 = *(void **)(a1 + 8);
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v28 = (void **)*v3;
  CFStringRef v29 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v29;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    v3[2] = 0;
  }
  else
  {
    uint64_t v28 = &v29;
  }
  sub_100A5892C((uint64_t)v3, a2, "PersonalityID", "State");
  uint64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = *(void **)(v6 + 96);
  if (v7 != (void *)(v6 + 104))
  {
    while (1)
    {
      uint64_t v8 = sub_100046F68((uint64_t)&v28, (void **)v7 + 4);
      char v31 = 0;
      long long v32 = 0;
      ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(v6 + 64));
      char v11 = ServiceMap;
      if (v12 < 0)
      {
        uint64_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v14 = 5381;
        do
        {
          uint64_t v12 = v14;
          unsigned int v15 = *v13++;
          uint64_t v14 = (33 * v14) ^ v15;
        }
        while (v15);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long buf = v12;
      uint64_t v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)buf);
      if (!v16) {
        break;
      }
      int v18 = (void (***)(uint64_t *__return_ptr, void, uint64_t))v16[3];
      uint64_t v17 = (std::__shared_weak_count *)v16[4];
      if (!v17) {
        goto LABEL_12;
      }
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v11);
      atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
      uint64_t v19 = 0;
LABEL_13:
      (**v18)(&v31, v18, (uint64_t)(v7 + 4));
      if ((v19 & 1) == 0) {
        sub_10004D2C8(v17);
      }
      if (v31)
      {
        uint64_t v20 = (*(uint64_t (**)(void, void))(**(void **)(v6 + 56) + 16))(*(void *)(v6 + 56), *(unsigned int *)(v31 + 52));
        if (&v29 != (void **)v8)
        {
          char v21 = (NSObject **)v20;
          if (*((_DWORD *)v8 + 14) != *((_DWORD *)v7 + 14)
            || *((unsigned __int8 *)v8 + 60) != *((unsigned __int8 *)v7 + 60)
            || (sub_1005A0BB8((unsigned __int8 *)v8 + 64, (unsigned __int8 *)v7 + 64) & 1) == 0)
          {
            char v22 = *v21;
            if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
            {
              char v23 = asString();
              uint64_t v24 = asString();
              *(_DWORD *)long long buf = 136315394;
              *(void *)&uint8_t buf[4] = v23;
              uint64_t v34 = 2080;
              uint32_t v35 = v24;
              _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I VoWiFiProvState changed from %s -> %s", buf, 0x16u);
            }
          }
        }
      }
      if (v32) {
        sub_10004D2C8(v32);
      }
      char v25 = (void *)v7[1];
      if (v25)
      {
        do
        {
          int v26 = v25;
          char v25 = (void *)*v25;
        }
        while (v25);
      }
      else
      {
        do
        {
          int v26 = (void *)v7[2];
          char v27 = *v26 == (void)v7;
          uint64_t v7 = v26;
        }
        while (!v27);
      }
      uint64_t v7 = v26;
      if (v26 == (void *)(v6 + 104)) {
        goto LABEL_30;
      }
    }
    int v18 = 0;
LABEL_12:
    std::mutex::unlock(v11);
    uint64_t v17 = 0;
    uint64_t v19 = 1;
    goto LABEL_13;
  }
LABEL_30:
  sub_1007035FC((uint64_t)&v28, v29);
}

void sub_100DEC6A4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, void *a13)
{
}

uint64_t sub_100DEC6F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DEC738()
{
}

void sub_100DEC748()
{
}

void *sub_100DEC75C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5CE58;
  result[1] = v3;
  return result;
}

uint64_t sub_100DEC7A4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5CE58;
  a2[1] = v2;
  return result;
}

void sub_100DEC7D0(uint64_t a1, const CSIPhoneNumber ***a2)
{
  xpc_object_t v5 = 0;
  sub_100DEC904(a2, &v5);
  sub_100058DB0(&__p, "/cc/props/emergency_numbers");
  xpc_object_t object = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v4 < 0) {
    operator delete(__p);
  }
  xpc_release(v5);
}

void sub_100DEC874(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(*(xpc_object_t *)(v16 - 24));
  _Unwind_Resume(a1);
}

uint64_t sub_100DEC8B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DEC8F8()
{
}

void sub_100DEC904(const CSIPhoneNumber ***a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  uint64_t v8 = *a1;
  uint64_t v6 = a1 + 1;
  uint64_t v7 = v8;
  if (v8 != (const CSIPhoneNumber **)v6)
  {
    do
    {
      sub_100DECA70(v7 + 4, &value);
      xpc_array_append_value(v5, value);
      xpc_release(value);
      uint64_t v9 = v7[1];
      if (v9)
      {
        do
        {
          uint64_t v10 = (const CSIPhoneNumber ***)v9;
          uint64_t v9 = *(const CSIPhoneNumber **)&v9->var0;
        }
        while (v9);
      }
      else
      {
        do
        {
          uint64_t v10 = (const CSIPhoneNumber ***)v7[2];
          BOOL v11 = *v10 == v7;
          uint64_t v7 = (const CSIPhoneNumber **)v10;
        }
        while (!v11);
      }
      uint64_t v7 = (const CSIPhoneNumber **)v10;
    }
    while (v10 != v6);
  }
  *a2 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v5);
}

void sub_100DECA44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void sub_100DECA70(const CSIPhoneNumber **a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_dictionary_create(0, 0, 0);
  xpc_object_t v5 = v4;
  if (v4)
  {
    xpc_object_t v17 = v4;
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v17 = v5;
    if (!v5)
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v5 = 0;
      goto LABEL_8;
    }
  }
  if (xpc_get_type(v5) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_retain(v5);
    goto LABEL_9;
  }
  xpc_object_t v6 = xpc_null_create();
LABEL_8:
  xpc_object_t v17 = v6;
LABEL_9:
  xpc_release(v5);
  int v7 = *(_DWORD *)a1;
  uint64_t v8 = subscriber::asString();
  ctu::rest::detail::write_enum_string_value((uint64_t *)&v15, (ctu::rest::detail *)v7, v8, v9);
  uint64_t v13 = &v17;
  uint64_t v14 = "first";
  sub_100035E70((uint64_t)&v13, &v15, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v15);
  xpc_object_t v15 = 0;
  sub_100DECC10(a1 + 1, &v11);
  uint64_t v13 = &v17;
  uint64_t v14 = "second";
  sub_100035E70((uint64_t)&v13, &v11, &v12);
  xpc_release(v12);
  xpc_object_t v12 = 0;
  xpc_release(v11);
  xpc_object_t v11 = 0;
  xpc_object_t v10 = v17;
  *a2 = v17;
  if (v10) {
    xpc_retain(v10);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v17);
}

void sub_100DECBF8(_Unwind_Exception *a1)
{
  xpc_release(*(xpc_object_t *)(v1 - 40));
  _Unwind_Resume(a1);
}

void sub_100DECC10(const CSIPhoneNumber **a1@<X0>, xpc_object_t *a2@<X8>)
{
  xpc_object_t v4 = xpc_array_create(0, 0);
  if (v4 || (xpc_object_t v4 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v4) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v4);
      xpc_object_t v5 = v4;
    }
    else
    {
      xpc_object_t v5 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v5 = xpc_null_create();
    xpc_object_t v4 = 0;
  }
  xpc_release(v4);
  int v7 = *a1;
  xpc_object_t v6 = a1[1];
  while (v7 != v6)
  {
    write_rest_value((uint64_t *)&value, v7);
    xpc_array_append_value(v5, value);
    xpc_release(value);
    int v7 = (const CSIPhoneNumber *)((char *)v7 + 136);
  }
  *a2 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    *a2 = xpc_null_create();
  }
  xpc_release(v5);
}

void sub_100DECD20(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
  xpc_release(object);
  xpc_release(v10);
  _Unwind_Resume(a1);
}

void *sub_100DECD4C(void *result, void *a2)
{
  if (a2 != result)
  {
    uint64_t v3 = result;
    xpc_object_t v4 = (void *)result[3];
    xpc_object_t v5 = (void *)a2[3];
    if (v4 == result)
    {
      if (v5 == a2)
      {
        memset(v6, 0, sizeof(v6));
        (*(void (**)(void *, void *))(*result + 24))(result, v6);
        (*(void (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = 0;
        (*(void (**)(void, void *))(*(void *)a2[3] + 24))(a2[3], v3);
        (*(void (**)(void))(*(void *)a2[3] + 32))(a2[3]);
        a2[3] = 0;
        void v3[3] = v3;
        (*(void (**)(void *, void *))(v6[0] + 24))(v6, a2);
        __n128 result = (void *)(*(uint64_t (**)(void *))(v6[0] + 32))(v6);
      }
      else
      {
        (*(void (**)(void *, void *))(*result + 24))(result, a2);
        __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)v3[3] + 32))(v3[3]);
        void v3[3] = a2[3];
      }
      a2[3] = a2;
    }
    else if (v5 == a2)
    {
      (*(void (**)(void *, void *))(*a2 + 24))(a2, result);
      __n128 result = (void *)(*(uint64_t (**)(void))(*(void *)a2[3] + 32))(a2[3]);
      a2[3] = v3[3];
      void v3[3] = v3;
    }
    else
    {
      result[3] = v5;
      a2[3] = v4;
    }
  }
  return result;
}

void sub_100DECFB4(_Unwind_Exception *a1, int a2)
{
  if (!a2) {
    _Unwind_Resume(a1);
  }
  sub_10006A6AC(a1);
}

void sub_100DECFC4()
{
}

__n128 sub_100DECFD8(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A5CEE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100DED02C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5CEE8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DED064(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100DED0AC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DED0EC()
{
}

uint64_t *sub_100DED0F8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 48);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 80));
  sub_100088C88(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100DED17C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t sub_100DED198(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)v1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_100DEA2E4(&v5, v2);
  if (v5) {
    uint64_t v3 = (*(uint64_t (**)(uint64_t, void, void, void))(*(void *)v5 + 72))(v5, *(void *)(v1 + 8), **(unsigned int **)(v1 + 16), **(unsigned __int8 **)(v1 + 24));
  }
  else {
    uint64_t v3 = 0;
  }
  if (v6) {
    sub_10004D2C8(v6);
  }
  return v3;
}

void sub_100DED228(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DED240(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void **)v1;
  uint64_t v5 = 0;
  uint64_t v6 = 0;
  sub_100DEA2E4(&v5, v2);
  uint64_t v3 = *(void *)(v1 + 8);
  if (v5)
  {
    (*(void (**)(uint64_t, void, void))(*(void *)v5 + 112))(v5, *(void *)(v1 + 8), **(unsigned int **)(v1 + 16));
  }
  else
  {
    sub_100703778(v3, *(char **)(v3 + 8));
    *(void *)uint64_t v3 = v3 + 8;
    *(void *)(v3 + 16) = 0;
    *(void *)(v3 + 8) = 0;
  }
  xpc_object_t v4 = v6;
  if (v6)
  {
    sub_10004D2C8(v4);
  }
}

void sub_100DED2FC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DED314(uint64_t a1@<X0>, CSIPhoneNumber *a2@<X8>)
{
  uint64_t v3 = *(void *)(a1 + 40);
  xpc_object_t v4 = *(void **)v3;
  uint64_t v6 = 0;
  int v7 = 0;
  sub_100DEA2E4(&v6, v4);
  if (v6) {
    (*(void (**)(uint64_t, void, void))(*(void *)v6 + 120))(v6, *(unsigned __int8 *)(v3 + 8), *(unsigned int *)(v3 + 12));
  }
  else {
    CSIPhoneNumber::CSIPhoneNumber(a2);
  }
  uint64_t v5 = v7;
  if (v7)
  {
    sub_10004D2C8(v5);
  }
}

void sub_100DED3BC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DED3D4(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v16);
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)uint64_t v2 = v16;
  uint64_t v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  long long v4 = v17;
  *(void *)(v2 + 24) = v18;
  *(_OWORD *)uint64_t v3 = v4;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  uint64_t v5 = (void **)(v2 + 32);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = v19;
  *(void *)(v2 + 48) = v20;
  *(_OWORD *)uint64_t v5 = v6;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  char v7 = v22;
  *(_DWORD *)(v2 + 56) = v21;
  *(unsigned char *)(v2 + 60) = v7;
  uint64_t v8 = (void **)(v2 + 64);
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v8);
  }
  long long v9 = __p;
  *(void *)(v2 + 80) = v24;
  *(_OWORD *)uint64_t v8 = v9;
  HIBYTE(v24) = 0;
  LOBYTE(__p) = 0;
  xpc_object_t v10 = (_OWORD *)(v2 + 88);
  if (*(char *)(v2 + 111) < 0)
  {
    operator delete(*(void **)(v2 + 88));
    int v13 = SHIBYTE(v24);
    long long v14 = v25;
    *(void *)(v2 + 104) = v26;
    *xpc_object_t v10 = v14;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    char v15 = v28;
    *(_OWORD *)(v2 + 112) = v27;
    *(unsigned char *)(v2 + 128) = v15;
    if (v13 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v11 = v25;
    *(void *)(v2 + 104) = v26;
    *xpc_object_t v10 = v11;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    char v12 = v28;
    *(_OWORD *)(v2 + 112) = v27;
    *(unsigned char *)(v2 + 128) = v12;
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)v17);
  }
}

void sub_100DED568(uint64_t a1)
{
  (*(void (**)(uint64_t *__return_ptr))(**(void **)(a1 + 40) + 16))(&v16);
  uint64_t v2 = *(void *)(a1 + 32);
  *(void *)uint64_t v2 = v16;
  uint64_t v3 = (void **)(v2 + 8);
  if (*(char *)(v2 + 31) < 0) {
    operator delete(*v3);
  }
  long long v4 = v17;
  *(void *)(v2 + 24) = v18;
  *(_OWORD *)uint64_t v3 = v4;
  HIBYTE(v18) = 0;
  LOBYTE(v17) = 0;
  uint64_t v5 = (void **)(v2 + 32);
  if (*(char *)(v2 + 55) < 0) {
    operator delete(*v5);
  }
  long long v6 = v19;
  *(void *)(v2 + 48) = v20;
  *(_OWORD *)uint64_t v5 = v6;
  HIBYTE(v20) = 0;
  LOBYTE(v19) = 0;
  char v7 = v22;
  *(_DWORD *)(v2 + 56) = v21;
  *(unsigned char *)(v2 + 60) = v7;
  uint64_t v8 = (void **)(v2 + 64);
  if (*(char *)(v2 + 87) < 0) {
    operator delete(*v8);
  }
  long long v9 = __p;
  *(void *)(v2 + 80) = v24;
  *(_OWORD *)uint64_t v8 = v9;
  HIBYTE(v24) = 0;
  LOBYTE(__p) = 0;
  xpc_object_t v10 = (_OWORD *)(v2 + 88);
  if (*(char *)(v2 + 111) < 0)
  {
    operator delete(*(void **)(v2 + 88));
    int v13 = SHIBYTE(v24);
    long long v14 = v25;
    *(void *)(v2 + 104) = v26;
    *xpc_object_t v10 = v14;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    char v15 = v28;
    *(_OWORD *)(v2 + 112) = v27;
    *(unsigned char *)(v2 + 128) = v15;
    if (v13 < 0) {
      operator delete((void *)__p);
    }
  }
  else
  {
    long long v11 = v25;
    *(void *)(v2 + 104) = v26;
    *xpc_object_t v10 = v11;
    HIBYTE(v26) = 0;
    LOBYTE(v25) = 0;
    char v12 = v28;
    *(_OWORD *)(v2 + 112) = v27;
    *(unsigned char *)(v2 + 128) = v12;
  }
  if (SHIBYTE(v20) < 0) {
    operator delete((void *)v19);
  }
  if (SHIBYTE(v18) < 0) {
    operator delete((void *)v17);
  }
}

uint64_t sub_100DED6FC(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  uint64_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  long long v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      char v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      long long v9 = v3;
      if (v6)
      {
        do
        {
          char v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          char v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          long long v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_8:
        if (v6) {
          char v12 = v7;
        }
        else {
          char v12 = v3;
        }
        if (v6) {
          int v13 = v7 + 1;
        }
        else {
          int v13 = v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        int v13 = v3;
        char v12 = v3;
        if (v6)
        {
          long long v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              char v12 = (uint64_t **)v14;
              int v15 = *((_DWORD *)v14 + 8);
              if (v15 <= v11) {
                break;
              }
              long long v14 = *v12;
              int v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v11) {
              goto LABEL_25;
            }
            long long v14 = v12[1];
            if (!v14)
            {
              int v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v16 = operator new(0x40uLL);
      int v17 = *((_DWORD *)v5 + 8);
      v16[5] = 0;
      *((_DWORD *)v16 + 8) = v17;
      v16[6] = 0;
      v16[7] = 0;
      sub_10091E9F0(v16 + 5, v5[5], v5[6], 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(v5[6] - v5[5]) >> 3));
      sub_100046C38((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      uint64_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          long long v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          long long v19 = (void *)v5[2];
          BOOL v10 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v10);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_100DED890(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_1007036B8(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DED8BC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v16 = a1;
  uint64_t v17 = v1;
  uint64_t v2 = *(void *)v1;
  v19[0] = 1;
  long long v20 = 0u;
  uint64_t v21 = 0;
  v19[1] = v2 + 152;
  sub_100DED6FC((uint64_t)&v20, (void *)(v2 + 184));
  uint64_t v3 = *(int **)(v1 + 32);
  if (v3 != (int *)(v1 + 40))
  {
    do
    {
      long long v4 = (CSIPhoneNumber *)*((void *)v3 + 5);
      uint64_t v5 = (CSIPhoneNumber *)*((void *)v3 + 6);
      memset(&v18, 0, sizeof(v18));
      if (v4 != v5)
      {
        sub_100DEDC58(&__s, v4);
        std::string v18 = __s;
        while (1)
        {
          long long v4 = (CSIPhoneNumber *)((char *)v4 + 136);
          if (v4 == v5) {
            break;
          }
          *((unsigned char *)&__s.__r_.__value_.__s + 23) = 1;
          strcpy((char *)&__s, ",");
          std::string::append(&v18, (const std::string::value_type *)&__s, 1uLL);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
          sub_100DEDC58(&__s, v4);
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            p_s = &__s;
          }
          else {
            p_s = (std::string *)__s.__r_.__value_.__r.__words[0];
          }
          if ((__s.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
            std::string::size_type size = HIBYTE(__s.__r_.__value_.__r.__words[2]);
          }
          else {
            std::string::size_type size = __s.__r_.__value_.__l.__size_;
          }
          std::string::append(&v18, (const std::string::value_type *)p_s, size);
          if (SHIBYTE(__s.__r_.__value_.__r.__words[2]) < 0) {
            operator delete(__s.__r_.__value_.__l.__data_);
          }
        }
      }
      uint64_t v8 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(v2 + 56) + 16))(*(void *)(v2 + 56), v3[8]);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        std::string::size_type v9 = v1 + 8;
        if (*(char *)(v1 + 31) < 0) {
          std::string::size_type v9 = *(void *)(v1 + 8);
        }
        BOOL v10 = &v18;
        if ((v18.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
          BOOL v10 = (std::string *)v18.__r_.__value_.__r.__words[0];
        }
        LODWORD(__s.__r_.__value_.__l.__data_) = 136315394;
        *(std::string::size_type *)((char *)__s.__r_.__value_.__r.__words + 4) = v9;
        WORD2(__s.__r_.__value_.__r.__words[1]) = 2080;
        *(std::string::size_type *)((char *)&__s.__r_.__value_.__r.__words[1] + 6) = (std::string::size_type)v10;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s sending emergency_numbers update: %s", (uint8_t *)&__s, 0x16u);
      }
      __s.__r_.__value_.__r.__words[0] = (std::string::size_type)(v3 + 8);
      int v11 = sub_10008CC40((uint64_t **)&v20, v3 + 8, (uint64_t)&unk_10144E20E, &__s);
      if (v3 != (int *)v11) {
        sub_100702898((uint64_t)(v11 + 5), *((void *)v3 + 5), *((void *)v3 + 6), 0xF0F0F0F0F0F0F0F1 * ((uint64_t)(*((void *)v3 + 6) - *((void *)v3 + 5)) >> 3));
      }
      if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
        operator delete(v18.__r_.__value_.__l.__data_);
      }
      char v12 = (int *)*((void *)v3 + 1);
      if (v12)
      {
        do
        {
          int v13 = v12;
          char v12 = *(int **)v12;
        }
        while (v12);
      }
      else
      {
        do
        {
          int v13 = (int *)*((void *)v3 + 2);
          BOOL v14 = *(void *)v13 == (void)v3;
          uint64_t v3 = v13;
        }
        while (!v14);
      }
      uint64_t v3 = v13;
    }
    while (v13 != (int *)(v1 + 40));
  }
  sub_100DEDE14((uint64_t)v19);
  sub_100DEDBF4(&v17);
  return sub_100046B58((uint64_t *)&v16);
}

void sub_100DEDB90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *__p, uint64_t a16, int a17, __int16 a18, char a19, char a20,uint64_t a21,char a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33)
{
}

uint64_t *sub_100DEDBF4(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_1007036B8(v1 + 32, *(char **)(v1 + 40));
    if (*(char *)(v1 + 31) < 0) {
      operator delete(*(void **)(v1 + 8));
    }
    operator delete();
  }
  return result;
}

void sub_100DEDC58(std::string *a1, CSIPhoneNumber *this)
{
  CSIPhoneNumber::getFullNumber((uint64_t *)&v17, this);
  long long v4 = std::string::append(&v17, " SupportsSMS: ", 0xEuLL);
  long long v5 = *(_OWORD *)&v4->__r_.__value_.__l.__data_;
  v18.__r_.__value_.__r.__words[2] = v4->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v18.__r_.__value_.__l.__data_ = v5;
  v4->__r_.__value_.__l.__size_ = 0;
  v4->__r_.__value_.__r.__words[2] = 0;
  v4->__r_.__value_.__r.__words[0] = 0;
  int IsEmSMSTextSupported = CSIPhoneNumber::getIsEmSMSTextSupported(this);
  if (IsEmSMSTextSupported) {
    char v7 = "true";
  }
  else {
    char v7 = "false";
  }
  if (IsEmSMSTextSupported) {
    std::string::size_type v8 = 4;
  }
  else {
    std::string::size_type v8 = 5;
  }
  std::string::size_type v9 = std::string::append(&v18, v7, v8);
  long long v10 = *(_OWORD *)&v9->__r_.__value_.__l.__data_;
  v19.__r_.__value_.__r.__words[2] = v9->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v19.__r_.__value_.__l.__data_ = v10;
  v9->__r_.__value_.__l.__size_ = 0;
  v9->__r_.__value_.__r.__words[2] = 0;
  v9->__r_.__value_.__r.__words[0] = 0;
  int v11 = std::string::append(&v19, " SupportsEmVoice: ", 0x12uLL);
  long long v12 = *(_OWORD *)&v11->__r_.__value_.__l.__data_;
  v20.__r_.__value_.__r.__words[2] = v11->__r_.__value_.__r.__words[2];
  *(_OWORD *)&v20.__r_.__value_.__l.__data_ = v12;
  v11->__r_.__value_.__l.__size_ = 0;
  v11->__r_.__value_.__r.__words[2] = 0;
  v11->__r_.__value_.__r.__words[0] = 0;
  int IsEmVoiceSupported = CSIPhoneNumber::getIsEmVoiceSupported(this);
  if (IsEmVoiceSupported) {
    BOOL v14 = "true";
  }
  else {
    BOOL v14 = "false";
  }
  if (IsEmVoiceSupported) {
    std::string::size_type v15 = 4;
  }
  else {
    std::string::size_type v15 = 5;
  }
  uint64_t v16 = std::string::append(&v20, v14, v15);
  *a1 = *v16;
  v16->__r_.__value_.__l.__size_ = 0;
  v16->__r_.__value_.__r.__words[2] = 0;
  v16->__r_.__value_.__r.__words[0] = 0;
  if (SHIBYTE(v20.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v20.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v19.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v19.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v18.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v18.__r_.__value_.__l.__data_);
  }
  if (SHIBYTE(v17.__r_.__value_.__r.__words[2]) < 0) {
    operator delete(v17.__r_.__value_.__l.__data_);
  }
}

void sub_100DEDDB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *a16, uint64_t a17, int a18, __int16 a19, char a20,char a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  if (a21 < 0) {
    operator delete(a16);
  }
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEDE14(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      uint64_t v3 = (void *)v2[4];
      if (v3 == v2 + 5) {
        goto LABEL_27;
      }
      long long v4 = *(void **)(a1 + 16);
      while (*((_DWORD *)v3 + 8) == *((_DWORD *)v4 + 8))
      {
        uint64_t v5 = v3[5];
        uint64_t v6 = v3[6];
        uint64_t v7 = v4[5];
        if (v6 - v5 != v4[6] - v7) {
          break;
        }
        while (v5 != v6)
        {
          if (!CSIPhoneNumber::operator==()) {
            goto LABEL_22;
          }
          v5 += 136;
          v7 += 136;
        }
        std::string::size_type v8 = (void *)v3[1];
        if (v8)
        {
          do
          {
            std::string::size_type v9 = v8;
            std::string::size_type v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            std::string::size_type v9 = (void *)v3[2];
            BOOL v10 = *v9 == (void)v3;
            uint64_t v3 = v9;
          }
          while (!v10);
        }
        int v11 = (void *)v4[1];
        if (v11)
        {
          do
          {
            long long v12 = v11;
            int v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            long long v12 = (void *)v4[2];
            BOOL v10 = *v12 == (void)v4;
            long long v4 = v12;
          }
          while (!v10);
        }
        long long v4 = v12;
        uint64_t v3 = v9;
        if (v9 == v2 + 5) {
          goto LABEL_27;
        }
      }
    }
LABEL_22:
    int v13 = v2 + 5;
    sub_1007036B8((uint64_t)(v2 + 4), (char *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    BOOL v14 = (void *)(a1 + 24);
    uint64_t v15 = *(void *)(a1 + 24);
    v2[5] = v15;
    uint64_t v16 = *(void *)(a1 + 32);
    v2[6] = v16;
    if (v16)
    {
      *(void *)(v15 + 16) = v13;
      *(void *)(a1 + 16) = v14;
      *BOOL v14 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v13;
    }
    uint64_t v17 = v2[3];
    if (v17) {
      (*(void (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v2 + 4);
    }
  }
LABEL_27:
  sub_1007036B8(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

uint64_t *sub_100DEDFC4(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void **)v1;
  uint64_t v9 = 0;
  BOOL v10 = 0;
  sub_100DEA2E4(&v9, v2);
  if (v9)
  {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v9 + 128))(v9, v1 + 8);
  }
  else
  {
    v8[0] = 0;
    v8[1] = 0;
    uint64_t v7 = v8;
    uint64_t v3 = *(void *)(v1 + 32);
    if (!v3) {
      sub_10007B600();
    }
    (*(void (**)(uint64_t, char ***))(*(void *)v3 + 48))(v3, &v7);
    sub_10005CD2C((uint64_t)&v7, v8[0]);
  }
  if (v10) {
    sub_10004D2C8(v10);
  }
  sub_10092196C(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100DEE0A4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v5 = va_arg(va1, void);
  long long v4 = *(std::__shared_weak_count **)(v2 - 24);
  if (v4) {
    sub_10004D2C8(v4);
  }
  sub_10092196C((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

void sub_100DEE0E0(void *a1, void *a2, void *a3, uint64_t a4)
{
  id v7 = a2;
  id v8 = a3;
  uint64_t v9 = (std::__shared_weak_count *)a1[1];
  if (!v9 || (uint64_t v10 = *a1, (v11 = std::__shared_weak_count::lock(v9)) == 0)) {
    sub_100088B9C();
  }
  long long v12 = v11;
  p_shared_weak_owners = &v11->__shared_weak_owners_;
  atomic_fetch_add_explicit(&v11->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v11);
  BOOL v14 = +[DCAppAttestService sharedService];
  v16[0] = _NSConcreteStackBlock;
  v16[1] = 3321888768;
  void v16[2] = sub_100DEE2B8;
  v16[3] = &unk_101A5D040;
  std::string v18 = a1;
  uint64_t v19 = v10;
  std::string v20 = v12;
  atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
  sub_100DEF150((uint64_t)v21, a4);
  id v15 = v7;
  id v17 = v15;
  [v14 attestKey:v15 clientDataHash:v8 completionHandler:v16];

  sub_100236358(v21);
  if (v20) {
    std::__shared_weak_count::__release_weak(v20);
  }
  std::__shared_weak_count::__release_weak(v12);
}

void sub_100DEE25C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *a14, uint64_t a15, uint64_t a16, std::__shared_weak_count *a17)
{
  sub_100236358(v21);
  if (a17) {
    std::__shared_weak_count::__release_weak(a17);
  }

  std::__shared_weak_count::__release_weak(v19);
  _Unwind_Resume(a1);
}

void sub_100DEE2B8(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(std::__shared_weak_count **)(a1 + 56);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      if (*(void *)(a1 + 48))
      {
        v5;
        v6;
        sub_100DEF150((uint64_t)v11, a1 + 64);
        void v11[4] = *(id *)(a1 + 32);
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          if (std::__shared_weak_count::lock(v10)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_100DEE49C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEE504(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(void *)(a1 + 56) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return sub_100DEF150(a1 + 64, a2 + 64);
}

void sub_100DEE548(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 56);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEE560(uint64_t a1)
{
  sub_100236358((void *)(a1 + 64));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 56);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100DEE5AC(uint64_t a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = *(std::__shared_weak_count **)(a1 + 56);
  if (v7)
  {
    uint64_t v8 = *(void *)(a1 + 40);
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      if (*(void *)(a1 + 48))
      {
        v5;
        v6;
        sub_100DEF150((uint64_t)v11, a1 + 64);
        void v11[4] = *(id *)(a1 + 32);
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          if (std::__shared_weak_count::lock(v10)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_100DEE790(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEE7F8(void *a1, void *a2, void *a3)
{
  id v5 = a2;
  id v6 = a3;
  id v7 = (std::__shared_weak_count *)a1[6];
  if (v7)
  {
    uint64_t v8 = a1[4];
    uint64_t v9 = std::__shared_weak_count::lock(v7);
    if (v9)
    {
      if (a1[5])
      {
        v5;
        sub_100DEF150((uint64_t)v11, (uint64_t)(a1 + 7));
        void v11[4] = v6;
        uint64_t v10 = *(std::__shared_weak_count **)(v8 + 8);
        if (v10)
        {
          if (std::__shared_weak_count::lock(v10)) {
            operator new();
          }
        }
        sub_100088B9C();
      }
      sub_10004D2C8(v9);
    }
  }
}

void sub_100DEE9B0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEEA04(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return sub_100DEF150(a1 + 56, a2 + 56);
}

void sub_100DEEA48(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 48);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DEEA60(uint64_t a1)
{
  sub_100236358((void *)(a1 + 56));
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 48);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100DEEAAC(void *a1@<X8>)
{
  id v2 = +[DCAppAttestService sharedService];
  if ([v2 isSupported]) {
    operator new();
  }
  *a1 = 0;
  a1[1] = 0;
}

void sub_100DEEDA8(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100DF08F8);
  __cxa_rethrow();
}

void sub_100DEEDD0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, id a9, char a10, uint64_t a11, char a12)
{
  _Unwind_Resume(a1);
}

void *sub_100DEEE9C(void *a1)
{
  *a1 = off_101A5D0E8;
  id v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[7];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 5));
  sub_100087E88(a1 + 1);
  return a1;
}

void sub_100DEEF0C(void *a1)
{
  sub_100DEEE9C(a1);

  operator delete();
}

void sub_100DEEF44(uint64_t a1, void *a2, uint64_t a3, char a4)
{
  +[NSData dataWithBytes:*a2 length:a2[1] - *a2];
  uint64_t v8 = a1;
  id v9 = (id)objc_claimAutoreleasedReturnValue();
  sub_100DEF150((uint64_t)v10, a3);
  char v11 = a4;
  id v7 = *(std::__shared_weak_count **)(a1 + 16);
  if (v7)
  {
    if (std::__shared_weak_count::lock(v7)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100DEF118(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DEF150(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 24);
  if (v3)
  {
    if (v3 == a2)
    {
      *(void *)(a1 + 24) = a1;
      (*(void (**)(void, uint64_t))(**(void **)(a2 + 24) + 24))(*(void *)(a2 + 24), a1);
    }
    else
    {
      *(void *)(a1 + 24) = (*(uint64_t (**)(uint64_t))(*(void *)v3 + 16))(v3);
    }
  }
  else
  {
    *(void *)(a1 + 24) = 0;
  }
  return a1;
}

uint64_t *sub_100DEF1E8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  long long v78 = a1;
  uint64_t v79 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = *(void *)(v1 + 16);
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I attestKeyAfterKeyGen error=%@", buf, 0xCu);
  }
  id v5 = *(uint64_t **)(v1 + 16);
  if (!v5)
  {
    id v5 = *(uint64_t **)(v1 + 8);
    if (v5)
    {
      memset(buf, 0, sizeof(buf));
      ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(v2 + 40));
      id v17 = ServiceMap;
      if (v18 < 0)
      {
        uint64_t v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v20 = 5381;
        do
        {
          uint64_t v18 = v20;
          unsigned int v21 = *v19++;
          uint64_t v20 = (33 * v20) ^ v21;
        }
        while (v21);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long __dst = v18;
      char v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)__dst);
      if (v22)
      {
        uint64_t v24 = v22[3];
        char v23 = (std::__shared_weak_count *)v22[4];
        if (v23)
        {
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v17);
          atomic_fetch_add_explicit(&v23->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v23);
          char v25 = 0;
          goto LABEL_34;
        }
      }
      else
      {
        uint64_t v24 = 0;
      }
      std::mutex::unlock(v17);
      char v23 = 0;
      char v25 = 1;
LABEL_34:
      (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v24 + 8))(buf, v24, *(unsigned int *)(v2 + 56));
      if ((v25 & 1) == 0) {
        sub_10004D2C8(v23);
      }
      if (!*(void *)buf) {
        goto LABEL_78;
      }
      uint64_t v40 = (std::mutex *)Registry::getServiceMap(*(uint64_t **)buf, *(Registry **)(v2 + 40));
      unint64_t v41 = v40;
      uint64_t v43 = v42;
      if (v42 < 0)
      {
        uint64_t v44 = (unsigned __int8 *)(v42 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v45 = 5381;
        do
        {
          uint64_t v43 = v45;
          unsigned int v46 = *v44++;
          uint64_t v45 = (33 * v45) ^ v46;
        }
        while (v46);
      }
      std::mutex::lock(v40);
      *(void *)long long __dst = v43;
      CFMutableArrayRef v47 = sub_10004D37C(&v41[1].__m_.__sig, (unint64_t *)__dst);
      if (v47)
      {
        uint64_t v49 = v47[3];
        uint64_t v48 = (std::__shared_weak_count *)v47[4];
        if (v48)
        {
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v41);
          atomic_fetch_add_explicit(&v48->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v48);
          char v50 = 0;
          goto LABEL_66;
        }
      }
      else
      {
        uint64_t v49 = 0;
      }
      std::mutex::unlock(v41);
      uint64_t v48 = 0;
      char v50 = 1;
LABEL_66:
      (*(void (**)(uint64_t, uint64_t, const __CFString *, void, const __CFString *, void, uint64_t, void, uint64_t *, uint64_t))(*(void *)v49 + 16))(v49, *(void *)buf + 24, @"AttestationKeyId", *(void *)(v1 + 56), @"LazuliAttestation", 0, 1, 0, v78, v79);
      if ((v50 & 1) == 0) {
        sub_10004D2C8(v48);
      }
      uint64_t v63 = (std::mutex *)Registry::getServiceMap(v62, *(Registry **)(v2 + 40));
      unint64_t v64 = v63;
      if (v42 < 0)
      {
        BOOL v65 = (unsigned __int8 *)(v42 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v66 = 5381;
        do
        {
          uint64_t v42 = v66;
          unsigned int v67 = *v65++;
          uint64_t v66 = (33 * v66) ^ v67;
        }
        while (v67);
      }
      std::mutex::lock(v63);
      *(void *)long long __dst = v42;
      long long v68 = sub_10004D37C(&v64[1].__m_.__sig, (unint64_t *)__dst);
      if (v68)
      {
        uint64_t v70 = v68[3];
        uint64_t v69 = (std::__shared_weak_count *)v68[4];
        if (v69)
        {
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v64);
          atomic_fetch_add_explicit(&v69->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v69);
          char v71 = 0;
          goto LABEL_76;
        }
      }
      else
      {
        uint64_t v70 = 0;
      }
      std::mutex::unlock(v64);
      uint64_t v69 = 0;
      char v71 = 1;
LABEL_76:
      (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v70 + 16))(v70, *(void *)buf + 24, @"AttestationAttested", kCFBooleanTrue, @"LazuliAttestation", 0, 1, 0);
      if ((v71 & 1) == 0) {
        sub_10004D2C8(v69);
      }
LABEL_78:
      if (*(void *)&buf[8]) {
        sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
      }
      if (*(void *)(v1 + 48))
      {
        long long v72 = [*(id *)(v1 + 8) base64EncodedStringWithOptions:0];
        long long v89 = 0uLL;
        uint64_t v90 = 0;
        id v73 = v72;
        sub_100058DB0(&v89, (char *)[v73 UTF8String]);
        long long v87 = 0uLL;
        uint64_t v88 = 0;
        sub_100058DB0(&v87, (char *)[*(id *)(v1 + 56) UTF8String]);
        sub_100DEFC40((char *)__dst, &v89, &v87);
        *(_OWORD *)long long buf = *(_OWORD *)__dst;
        uint64_t v74 = v84;
        memset(__dst, 0, sizeof(__dst));
        long long v75 = *(_OWORD *)v85;
        uint64_t v84 = 0;
        v85[0] = 0;
        long long v93 = v75;
        uint64_t v92 = v74;
        uint64_t v94 = v86;
        v85[1] = 0;
        uint64_t v86 = 0;
        char v95 = 1;
        LOBYTE(__p) = 0;
        char v82 = 0;
        uint64_t v76 = *(void *)(v1 + 48);
        if (!v76) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, uint8_t *, void **))(*(void *)v76 + 48))(v76, buf, &__p);
        if (v82 && v81 < 0) {
          operator delete(__p);
        }
        sub_10013E528((uint64_t)buf);
        if (SHIBYTE(v86) < 0) {
          operator delete(v85[0]);
        }
        if (SHIBYTE(v84) < 0) {
          operator delete(*(void **)__dst);
        }
        if (SHIBYTE(v88) < 0) {
          operator delete((void *)v87);
        }
        if (SHIBYTE(v90) < 0) {
          operator delete((void *)v89);
        }
      }
      goto LABEL_94;
    }
  }
  memset(buf, 0, sizeof(buf));
  id v6 = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(v2 + 40));
  id v7 = v6;
  if (v8 < 0)
  {
    id v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(v6);
  *(void *)long long __dst = v8;
  long long v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)__dst);
  if (v12)
  {
    uint64_t v14 = v12[3];
    int v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_19;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  int v13 = 0;
  char v15 = 1;
LABEL_19:
  (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v14 + 8))(buf, v14, *(unsigned int *)(v2 + 56));
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  uint64_t v26 = *(uint64_t **)buf;
  if (!*(void *)buf) {
    goto LABEL_57;
  }
  long long v27 = *(void **)(v1 + 16);
  if (v27 && objc_msgSend(v27, "code", v78, v79) != (id)4)
  {
    char v28 = *(NSObject **)(v2 + 32);
    if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long __dst = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I attestKeyAfterKeyGen failed. Erase key from NV", __dst, 2u);
    }
    uint64_t v30 = (std::mutex *)Registry::getServiceMap(v29, *(Registry **)(v2 + 40));
    char v31 = v30;
    if (v32 < 0)
    {
      unint64_t v33 = (unsigned __int8 *)(v32 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v34 = 5381;
      do
      {
        uint64_t v32 = v34;
        unsigned int v35 = *v33++;
        uint64_t v34 = (33 * v34) ^ v35;
      }
      while (v35);
    }
    std::mutex::lock(v30);
    *(void *)long long __dst = v32;
    std::string::size_type v36 = sub_10004D37C(&v31[1].__m_.__sig, (unint64_t *)__dst);
    if (v36)
    {
      uint64_t v38 = v36[3];
      BOOL v37 = (std::__shared_weak_count *)v36[4];
      if (v37)
      {
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v31);
        atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v37);
        char v39 = 0;
        goto LABEL_45;
      }
    }
    else
    {
      uint64_t v38 = 0;
    }
    std::mutex::unlock(v31);
    BOOL v37 = 0;
    char v39 = 1;
LABEL_45:
    (*(void (**)(uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v38 + 32))(v38, *(void *)buf + 24, @"AttestationKeyId", @"LazuliAttestation", 0, 1);
    if ((v39 & 1) == 0) {
      sub_10004D2C8(v37);
    }
  }
  uint64_t v51 = (std::mutex *)Registry::getServiceMap(v26, *(Registry **)(v2 + 40));
  unsigned int v52 = v51;
  if (v53 < 0)
  {
    uint64_t v54 = (unsigned __int8 *)(v53 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v55 = 5381;
    do
    {
      uint64_t v53 = v55;
      unsigned int v56 = *v54++;
      uint64_t v55 = (33 * v55) ^ v56;
    }
    while (v56);
  }
  std::mutex::lock(v51);
  *(void *)long long __dst = v53;
  uint64_t v57 = sub_10004D37C(&v52[1].__m_.__sig, (unint64_t *)__dst);
  if (v57)
  {
    uint64_t v59 = v57[3];
    long long v58 = (std::__shared_weak_count *)v57[4];
    if (v58)
    {
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v52);
      atomic_fetch_add_explicit(&v58->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v58);
      char v60 = 0;
      goto LABEL_55;
    }
  }
  else
  {
    uint64_t v59 = 0;
  }
  std::mutex::unlock(v52);
  long long v58 = 0;
  char v60 = 1;
LABEL_55:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v59 + 16))(v59, *(void *)buf + 24, @"AttestationAttested", kCFBooleanFalse, @"LazuliAttestation", 0, 1, 0);
  if ((v60 & 1) == 0) {
    sub_10004D2C8(v58);
  }
LABEL_57:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v61 = *(void *)(v1 + 48);
  if (v61)
  {
    buf[0] = 0;
    char v95 = 0;
    __dst[0] = 0;
    LOBYTE(v85[0]) = 0;
    (*(void (**)(uint64_t, uint8_t *, uint8_t *))(*(void *)v61 + 48))(v61, buf, __dst);
    if (LOBYTE(v85[0]) && SHIBYTE(v84) < 0) {
      operator delete(*(void **)__dst);
    }
    sub_10013E528((uint64_t)buf);
  }
LABEL_94:
  sub_100DEFBD8(&v79);
  return sub_100046B58((uint64_t *)&v78);
}

void sub_100DEFA70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35,void *a36,uint64_t a37,int a38,__int16 a39,char a40,char a41,char a42,uint64_t a43)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a41 < 0) {
    operator delete(a36);
  }

  sub_100DEFBD8(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DEFBD8(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {

    sub_100236358((void *)(v1 + 24));
    operator delete();
  }
  return result;
}

char *sub_100DEFC40(char *__dst, long long *a2, long long *a3)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(__dst, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v5 = *a2;
    *((void *)__dst + 2) = *((void *)a2 + 2);
    *(_OWORD *)long long __dst = v5;
  }
  id v6 = __dst + 24;
  if (*((char *)a3 + 23) < 0)
  {
    sub_10004FC84(v6, *(void **)a3, *((void *)a3 + 1));
  }
  else
  {
    long long v7 = *a3;
    *((void *)__dst + 5) = *((void *)a3 + 2);
    *(_OWORD *)id v6 = v7;
  }
  return __dst;
}

void sub_100DEFCBC(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t *sub_100DEFCD8(void **a1)
{
  uint64_t v1 = *a1;
  unint64_t v41 = a1;
  uint64_t v42 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = v1[1];
    uint64_t v5 = v1[2];
    *(_DWORD *)long long buf = 138412546;
    *(void *)&uint8_t buf[4] = v4;
    *(_WORD *)&unsigned char buf[12] = 2112;
    *(void *)&buf[14] = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I generateKey keyId=%@, error=%@", buf, 0x16u);
  }
  if (v1[2])
  {
    uint64_t v6 = v1[6];
    if (v6)
    {
      buf[0] = 0;
      char v47 = 0;
      LOBYTE(__p[0]) = 0;
      char v45 = 0;
      (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v6 + 48))(v6, buf, __p);
      if (v45 && v44 < 0) {
        operator delete(__p[0]);
      }
      sub_10013E528((uint64_t)buf);
    }
    goto LABEL_43;
  }
  *(void *)long long buf = 0;
  *(void *)&uint8_t buf[8] = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(0, *(Registry **)(v2 + 40));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  __p[0] = (void *)v9;
  int v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)__p);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      goto LABEL_17;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
LABEL_17:
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void))(*(void *)v15 + 8))(buf, v15, *(unsigned int *)(v2 + 56));
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  if (!*(void *)buf) {
    goto LABEL_40;
  }
  id v17 = (std::mutex *)Registry::getServiceMap(*(uint64_t **)buf, *(Registry **)(v2 + 40));
  uint64_t v18 = v17;
  uint64_t v20 = (void *)v19;
  if (v19 < 0)
  {
    unsigned int v21 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = 5381;
    do
    {
      uint64_t v20 = (void *)v22;
      unsigned int v23 = *v21++;
      uint64_t v22 = (33 * v22) ^ v23;
    }
    while (v23);
  }
  std::mutex::lock(v17);
  __p[0] = v20;
  uint64_t v24 = sub_10004D37C(&v18[1].__m_.__sig, (unint64_t *)__p);
  if (v24)
  {
    uint64_t v26 = v24[3];
    char v25 = (std::__shared_weak_count *)v24[4];
    if (v25)
    {
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v18);
      atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v25);
      char v27 = 0;
      goto LABEL_28;
    }
  }
  else
  {
    uint64_t v26 = 0;
  }
  std::mutex::unlock(v18);
  char v25 = 0;
  char v27 = 1;
LABEL_28:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, void, const __CFString *, void, uint64_t, void, void **, void *))(*(void *)v26 + 16))(v26, *(void *)buf + 24, @"AttestationKeyId", v1[1], @"LazuliAttestation", 0, 1, 0, v41, v42);
  if ((v27 & 1) == 0) {
    sub_10004D2C8(v25);
  }
  CFStringRef v29 = (std::mutex *)Registry::getServiceMap(v28, *(Registry **)(v2 + 40));
  uint64_t v30 = v29;
  if (v19 < 0)
  {
    char v31 = (unsigned __int8 *)(v19 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v32 = 5381;
    do
    {
      uint64_t v19 = v32;
      unsigned int v33 = *v31++;
      uint64_t v32 = (33 * v32) ^ v33;
    }
    while (v33);
  }
  std::mutex::lock(v29);
  __p[0] = (void *)v19;
  uint64_t v34 = sub_10004D37C(&v30[1].__m_.__sig, (unint64_t *)__p);
  if (v34)
  {
    uint64_t v36 = v34[3];
    unsigned int v35 = (std::__shared_weak_count *)v34[4];
    if (v35)
    {
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v30);
      atomic_fetch_add_explicit(&v35->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v35);
      char v37 = 0;
      goto LABEL_38;
    }
  }
  else
  {
    uint64_t v36 = 0;
  }
  std::mutex::unlock(v30);
  unsigned int v35 = 0;
  char v37 = 1;
LABEL_38:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v36 + 16))(v36, *(void *)buf + 24, @"AttestationAttested", kCFBooleanFalse, @"LazuliAttestation", 0, 1, 0);
  if ((v37 & 1) == 0) {
    sub_10004D2C8(v35);
  }
LABEL_40:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v38 = (void *)v1[1];
  char v39 = (void *)v1[7];
  sub_100DEF150((uint64_t)buf, (uint64_t)(v1 + 3));
  sub_100DEE0E0((void *)v2, v38, v39, (uint64_t)buf);
  sub_100236358(buf);
LABEL_43:
  sub_100DEFBD8((uint64_t *)&v42);
  return sub_100046B58((uint64_t *)&v41);
}

void sub_100DF0128(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, char a17, int a18, __int16 a19, char a20,char a21,std::__shared_weak_count *a22)
{
  if ((v22 & 1) == 0) {
    sub_10004D2C8(v23);
  }
  if (a22) {
    sub_10004D2C8(a22);
  }
  sub_100DEFBD8(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DF01D4(void **a1)
{
  uint64_t v1 = *a1;
  char v44 = a1;
  char v45 = v1;
  uint64_t v2 = *v1;
  uint64_t v3 = *(NSObject **)(*v1 + 32);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = v1[6];
    *(_DWORD *)long long buf = 138412290;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I generateAssertion error=%@", buf, 0xCu);
  }
  uint64_t v5 = (uint64_t *)v1[6];
  if (!v5)
  {
    char v16 = (void *)v1[1];
    if (v16)
    {
      if (v1[5])
      {
        [v16 base64EncodedStringWithOptions:0];
        __p[0] = 0;
        __p[1] = 0;
        uint64_t v47 = 0;
        id v17 = objc_claimAutoreleasedReturnValue();
        sub_100058DB0(__p, (char *)[v17 UTF8String]);
        buf[0] = 0;
        char v52 = 0;
        if (SHIBYTE(v47) < 0)
        {
          sub_10004FC84(__dst, __p[0], (unint64_t)__p[1]);
        }
        else
        {
          *(_OWORD *)long long __dst = *(_OWORD *)__p;
          uint64_t v49 = v47;
        }
        char v50 = 1;
        uint64_t v42 = v1[5];
        if (!v42) {
          sub_10007B600();
        }
        (*(void (**)(uint64_t, uint8_t *, uint8_t *))(*(void *)v42 + 48))(v42, buf, __dst);
        if (v50 && SHIBYTE(v49) < 0) {
          operator delete(*(void **)__dst);
        }
        sub_10013E528((uint64_t)buf);
        if (SHIBYTE(v47) < 0) {
          operator delete(__p[0]);
        }
      }
      goto LABEL_56;
    }
  }
  *(_OWORD *)long long buf = 0uLL;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(v2 + 40));
  long long v7 = ServiceMap;
  if (v8 < 0)
  {
    uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      uint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long __dst = v8;
  unsigned int v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)__dst);
  if (v12)
  {
    uint64_t v14 = v12[3];
    int v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_16;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  int v13 = 0;
  char v15 = 1;
LABEL_16:
  (*(void (**)(uint8_t *__return_ptr, uint64_t, void))(*(void *)v14 + 8))(buf, v14, *(unsigned int *)(v2 + 56));
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  if (!*(void *)buf) {
    goto LABEL_41;
  }
  uint64_t v18 = *(NSObject **)(v2 + 32);
  if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long __dst = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I assertKey failed. Erase key from NV", __dst, 2u);
  }
  uint64_t v20 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(v2 + 40));
  unsigned int v21 = v20;
  uint64_t v23 = v22;
  if (v22 < 0)
  {
    uint64_t v24 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = 5381;
    do
    {
      uint64_t v23 = v25;
      unsigned int v26 = *v24++;
      uint64_t v25 = (33 * v25) ^ v26;
    }
    while (v26);
  }
  std::mutex::lock(v20);
  *(void *)long long __dst = v23;
  char v27 = sub_10004D37C(&v21[1].__m_.__sig, (unint64_t *)__dst);
  if (v27)
  {
    uint64_t v29 = v27[3];
    char v28 = (std::__shared_weak_count *)v27[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v21);
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v28);
      char v30 = 0;
      goto LABEL_29;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  std::mutex::unlock(v21);
  char v28 = 0;
  char v30 = 1;
LABEL_29:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v29 + 32))(v29, *(void *)buf + 24, @"AttestationKeyId", @"LazuliAttestation", 0, 1);
  if ((v30 & 1) == 0) {
    sub_10004D2C8(v28);
  }
  uint64_t v32 = (std::mutex *)Registry::getServiceMap(v31, *(Registry **)(v2 + 40));
  unsigned int v33 = v32;
  if (v22 < 0)
  {
    uint64_t v34 = (unsigned __int8 *)(v22 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v35 = 5381;
    do
    {
      uint64_t v22 = v35;
      unsigned int v36 = *v34++;
      uint64_t v35 = (33 * v35) ^ v36;
    }
    while (v36);
  }
  std::mutex::lock(v32);
  *(void *)long long __dst = v22;
  char v37 = sub_10004D37C(&v33[1].__m_.__sig, (unint64_t *)__dst);
  if (v37)
  {
    uint64_t v39 = v37[3];
    uint64_t v38 = (std::__shared_weak_count *)v37[4];
    if (v38)
    {
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v33);
      atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v38);
      char v40 = 0;
      goto LABEL_39;
    }
  }
  else
  {
    uint64_t v39 = 0;
  }
  std::mutex::unlock(v33);
  uint64_t v38 = 0;
  char v40 = 1;
LABEL_39:
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v39 + 16))(v39, *(void *)buf + 24, @"AttestationAttested", kCFBooleanFalse, @"LazuliAttestation", 0, 1, 0);
  if ((v40 & 1) == 0) {
    sub_10004D2C8(v38);
  }
LABEL_41:
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  uint64_t v41 = v1[5];
  if (v41)
  {
    buf[0] = 0;
    char v52 = 0;
    __dst[0] = 0;
    char v50 = 0;
    (*(void (**)(uint64_t, uint8_t *, uint8_t *))(*(void *)v41 + 48))(v41, buf, __dst);
    if (v50 && SHIBYTE(v49) < 0) {
      operator delete(*(void **)__dst);
    }
    sub_10013E528((uint64_t)buf);
  }
LABEL_56:
  sub_100DF07FC((uint64_t *)&v45);
  return sub_100046B58((uint64_t *)&v44);
}

void sub_100DF0700(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *__p, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,int a25,__int16 a26,char a27,char a28,uint64_t a29)
{
  sub_10013E528((uint64_t)&a26);
  if (a17 < 0) {
    operator delete(__p);
  }

  sub_100DF07FC(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DF07FC(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {

    sub_100236358((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

void sub_100DF0860(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DF0898(uint64_t a1)
{
}

uint64_t sub_100DF08B4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100DF08F8(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100DF0924(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5D200;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DF0944(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5D200;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void *sub_100DF0998(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[9];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 7));

  return sub_100087E88(a1 + 3);
}

uint64_t *sub_100DF09E8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unint64_t v77 = a1;
  uint64_t v78 = v1;
  uint64_t v2 = *(void **)(v1 + 8);
  uint64_t v3 = *(void *)(*(void *)v1 + 64);
  sub_100DEF150((uint64_t)v83, v1 + 16);
  int v4 = *(unsigned __int8 *)(v1 + 48);
  id v5 = v2;
  uint64_t v81 = 0;
  char v82 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v6, *(Registry **)(v3 + 40));
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v9;
  int v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
LABEL_9:
  (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v15 + 8))(&v81, v15, *(unsigned int *)(v3 + 56));
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
  if (v81)
  {
    id v17 = (uint64_t *)*(unsigned __int8 *)(v81 + 48);
    if (*(unsigned char *)(v81 + 48))
    {
      BOOL v80 = 0;
      uint64_t v18 = (std::mutex *)Registry::getServiceMap(v17, *(Registry **)(v3 + 40));
      uint64_t v19 = v18;
      uint64_t v21 = v20;
      if (v20 < 0)
      {
        uint64_t v22 = (unsigned __int8 *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v23 = 5381;
        do
        {
          uint64_t v21 = v23;
          unsigned int v24 = *v22++;
          uint64_t v23 = (33 * v23) ^ v24;
        }
        while (v24);
      }
      std::mutex::lock(v18);
      *(void *)long long buf = v21;
      uint64_t v25 = sub_10004D37C(&v19[1].__m_.__sig, (unint64_t *)buf);
      if (v25)
      {
        uint64_t v27 = v25[3];
        unsigned int v26 = (std::__shared_weak_count *)v25[4];
        if (v26)
        {
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v19);
          atomic_fetch_add_explicit(&v26->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v26);
          char v28 = 0;
          goto LABEL_28;
        }
      }
      else
      {
        uint64_t v27 = 0;
      }
      std::mutex::unlock(v19);
      unsigned int v26 = 0;
      char v28 = 1;
LABEL_28:
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v27 + 24))(__p, v27, v81 + 24, @"AttestationKeyId", @"LazuliAttestation", 0, 1);
      sub_100056248(&v80, (CFTypeRef *)__p);
      sub_1000577C4((const void **)__p);
      if ((v28 & 1) == 0) {
        sub_10004D2C8(v26);
      }
      char v30 = v80;
      if (v80) {
        char v31 = sub_1000810B8;
      }
      else {
        char v31 = 0;
      }
      if (v31)
      {
        uint64_t v32 = v80;
        unsigned int v33 = *(NSObject **)(v3 + 32);
        if (os_log_type_enabled(v33, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v34 = (const char *)(v81 + 24);
          uint64_t v35 = *(unsigned __int8 *)(v81 + 47);
          int v36 = (char)v35;
          if ((v35 & 0x80u) != 0) {
            uint64_t v35 = *(void *)(v81 + 32);
          }
          if (v36 < 0) {
            uint64_t v34 = *(const char **)(v81 + 24);
          }
          if (!v35) {
            uint64_t v34 = "<invalid>";
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v34;
          *(_WORD *)&unsigned char buf[12] = 2112;
          *(void *)&buf[14] = v32;
          _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I Restore PersonalityID=%s, keyId=%@", buf, 0x16u);
        }
      }
      else
      {
        uint64_t v32 = 0;
      }
      uint64_t v79 = 0;
      char v37 = (std::mutex *)Registry::getServiceMap(v30, *(Registry **)(v3 + 40));
      uint64_t v38 = v37;
      if (v20 < 0)
      {
        uint64_t v39 = (unsigned __int8 *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v40 = 5381;
        do
        {
          uint64_t v20 = v40;
          unsigned int v41 = *v39++;
          uint64_t v40 = (33 * v40) ^ v41;
        }
        while (v41);
      }
      std::mutex::lock(v37);
      *(void *)long long buf = v20;
      uint64_t v42 = sub_10004D37C(&v38[1].__m_.__sig, (unint64_t *)buf);
      if (v42)
      {
        uint64_t v44 = v42[3];
        uint64_t v43 = (std::__shared_weak_count *)v42[4];
        if (v43)
        {
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v38);
          atomic_fetch_add_explicit(&v43->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v43);
          char v45 = 0;
          goto LABEL_51;
        }
      }
      else
      {
        uint64_t v44 = 0;
      }
      std::mutex::unlock(v38);
      uint64_t v43 = 0;
      char v45 = 1;
LABEL_51:
      (*(void (**)(void **__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v44 + 24))(__p, v44, v81 + 24, @"AttestationAttested", @"LazuliAttestation", 0, 1);
      sub_1000057AC(&v79, (CFTypeRef *)__p);
      sub_1000577C4((const void **)__p);
      if ((v45 & 1) == 0) {
        sub_10004D2C8(v43);
      }
      if (v79) {
        uint64_t v47 = sub_100084B4C;
      }
      else {
        uint64_t v47 = 0;
      }
      if (v47)
      {
        buf[0] = 0;
        ctu::cf::assign((ctu::cf *)buf, v79, v46);
        int v48 = buf[0];
        BOOL v49 = buf[0] != 0;
        char v50 = *(NSObject **)(v3 + 32);
        if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v51 = (const char *)(v81 + 24);
          uint64_t v52 = *(unsigned __int8 *)(v81 + 47);
          int v53 = (char)v52;
          if ((v52 & 0x80u) != 0) {
            uint64_t v52 = *(void *)(v81 + 32);
          }
          if (v53 < 0) {
            uint64_t v51 = *(const char **)(v81 + 24);
          }
          if (!v52) {
            uint64_t v51 = "<invalid>";
          }
          uint64_t v54 = "true";
          if (!v48) {
            uint64_t v54 = "false";
          }
          *(_DWORD *)long long buf = 136315394;
          *(void *)&uint8_t buf[4] = v51;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = v54;
          _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I Restore PersonalityID=%s, keyAttested=%s", buf, 0x16u);
        }
      }
      else
      {
        BOOL v49 = 0;
      }
      id v55 = objc_msgSend(v32, "length", v77, v78);
      unsigned int v56 = *(NSObject **)(v3 + 32);
      BOOL v57 = os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT);
      if (v4 || !v55)
      {
        if (v57)
        {
          *(_DWORD *)long long buf = 67109120;
          *(_DWORD *)&uint8_t buf[4] = v4;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I Key does not exist (forced=%d), Generate the key", buf, 8u);
        }
        sub_100DEF150((uint64_t)__p, (uint64_t)v83);
        id v66 = v5;
        unsigned int v67 = *(std::__shared_weak_count **)(v3 + 8);
        if (!v67 || (long long v68 = *(std::__shared_weak_count **)v3, (v69 = std::__shared_weak_count::lock(v67)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v70 = v69;
        p_shared_weak_owners = &v69->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v69->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v69);
        long long v72 = +[DCAppAttestService sharedService];
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3321888768;
        *(void *)&uint8_t buf[16] = sub_100DEE5AC;
        long long v89 = &unk_101A5D078;
        uint64_t v91 = (std::__shared_weak_count *)v3;
        uint64_t v92 = v68;
        long long v93 = v70;
        atomic_fetch_add_explicit(p_shared_weak_owners, 1uLL, memory_order_relaxed);
        sub_100DEF150((uint64_t)v94, (uint64_t)__p);
        id v73 = v66;
        id v90 = v73;
        [v72 generateKeyWithCompletionHandler:buf];

        sub_100236358(v94);
        if (v93) {
          std::__shared_weak_count::__release_weak(v93);
        }
        std::__shared_weak_count::__release_weak(v70);
      }
      else
      {
        if (!v49)
        {
          if (v57)
          {
            *(_WORD *)long long buf = 0;
            _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I key exists but not attested", buf, 2u);
          }
          sub_100DEF150((uint64_t)buf, (uint64_t)v83);
          uint64_t v74 = (void **)buf;
          sub_100DEE0E0((void *)v3, v32, v5, (uint64_t)buf);
          goto LABEL_89;
        }
        if (v57)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I key already attested. Assert key", buf, 2u);
        }
        sub_100DEF150((uint64_t)__p, (uint64_t)v83);
        long long v58 = v32;
        id v59 = v5;
        char v60 = *(std::__shared_weak_count **)(v3 + 8);
        if (!v60 || (uint64_t v61 = *(std::__shared_weak_count **)v3, (v62 = std::__shared_weak_count::lock(v60)) == 0)) {
          sub_100088B9C();
        }
        uint64_t v63 = v62;
        unint64_t v64 = &v62->__shared_weak_owners_;
        atomic_fetch_add_explicit(&v62->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v62);
        BOOL v65 = +[DCAppAttestService sharedService];
        *(void *)long long buf = _NSConcreteStackBlock;
        *(void *)&uint8_t buf[8] = 3321888768;
        *(void *)&uint8_t buf[16] = sub_100DEE7F8;
        long long v89 = &unk_101A5D0A8;
        id v90 = (id)v3;
        uint64_t v91 = v61;
        uint64_t v92 = v63;
        atomic_fetch_add_explicit(v64, 1uLL, memory_order_relaxed);
        sub_100DEF150((uint64_t)&v93, (uint64_t)__p);
        [v65 generateAssertion:v58 clientDataHash:v59 completionHandler:buf];

        sub_100236358(&v93);
        if (v92) {
          std::__shared_weak_count::__release_weak(v92);
        }
        std::__shared_weak_count::__release_weak(v63);
      }
      uint64_t v74 = __p;
LABEL_89:
      sub_100236358(v74);
      sub_100062778((const void **)&v79);
      sub_1000558F4((const void **)&v80);

      goto LABEL_90;
    }
  }
  uint64_t v29 = *(NSObject **)(v3 + 32);
  if (os_log_type_enabled(v29, OS_LOG_TYPE_ERROR))
  {
    int v76 = *(_DWORD *)(v3 + 56);
    *(_DWORD *)long long buf = 67109120;
    *(_DWORD *)&uint8_t buf[4] = v76;
    _os_log_error_impl((void *)&_mh_execute_header, v29, OS_LOG_TYPE_ERROR, "no active SIM on slot %d", buf, 8u);
  }
  if (v84)
  {
    buf[0] = 0;
    LOBYTE(v92) = 0;
    LOBYTE(__p[0]) = 0;
    char v87 = 0;
    (*(void (**)(uint64_t, unsigned char *, void **))(*(void *)v84 + 48))(v84, buf, __p);
    if (v87 && v86 < 0) {
      operator delete(__p[0]);
    }
    sub_10013E528((uint64_t)buf);
  }
LABEL_90:
  if (v82) {
    sub_10004D2C8(v82);
  }

  sub_100236358(v83);
  sub_100DF1498(&v78);
  return sub_100046B58((uint64_t *)&v77);
}

void sub_100DF12E4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, const void *a11, const void *a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25,int a26,__int16 a27,char a28,char a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,std::__shared_weak_count *a35,std::__shared_weak_count *a36)
{
  uint64_t v43 = v38;
  sub_100236358(v43);
  if (a35) {
    std::__shared_weak_count::__release_weak(a35);
  }

  std::__shared_weak_count::__release_weak(v41);
  sub_100236358(&__p);
  sub_100062778(&a11);
  sub_1000558F4(&a12);

  if (a14) {
    sub_10004D2C8(a14);
  }

  sub_100236358(&a15);
  sub_100DF1498(&a10);
  sub_100046B58(&a9);
  _Unwind_Resume(a1);
}

uint64_t *sub_100DF1498(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    sub_100236358((void *)(v1 + 16));

    operator delete();
  }
  return result;
}

uint64_t *sub_100DF14F0(uint64_t a1)
{
  sub_100C62630(a1, "kCarrierBundleTriggerResetCarrierBundle", (unint64_t)sub_100DF1680, 3u);
  sub_100C62630(a1, "kCarrierBundleTriggerGetUpdatedCarrierBundle", (unint64_t)sub_100DF17A8, 3u);
  sub_100C62700(a1, "kCarrierBundleTriggerInstallCarrierBundle", (unint64_t)sub_100DF18D4, 3u);
  sub_100C62630(a1, "kCarrierBundleSetOTAServerOverrideUrl", (unint64_t)sub_100DF1B0C, 3u);
  sub_100C62700(a1, "kCarrierBundleGetOTAServerOverrideUrl", (unint64_t)sub_100DF1CB4, 3u);
  sub_100C62630(a1, "kCarrierBundleModifyAttachAPNSettings", (unint64_t)sub_100DF1E60, 3u);
  sub_100C62700(a1, "kCarrierBundleGetAttachAPNSettings", (unint64_t)sub_100DF208C, 3u);
  sub_100C62700(a1, "kCarrierBundleGetRemoteBundleInfo", (unint64_t)sub_100DF2268, 3u);
  sub_100C62630(a1, "kCarrierBundleTriggerRemoteRestoreToDefault", (unint64_t)sub_100DF23C4, 3u);

  return sub_100C62700(a1, "kCarrierBundleGetRemoteCardSettingsServerURL", (unint64_t)sub_100DF24EC, 3u);
}

void sub_100DF1680(Registry **a1@<X0>, uint64_t *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, *a1);
  uint64_t v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    id v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v4;
  uint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, &v12);
  if (!v8)
  {
    uint64_t v10 = 0;
LABEL_9:
    std::mutex::unlock(v3);
    uint64_t v9 = 0;
    char v11 = 1;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v8[3];
  uint64_t v9 = (std::__shared_weak_count *)v8[4];
  if (!v9) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  char v11 = 0;
  if (v10) {
LABEL_10:
  }
    (*(void (**)(uint64_t))(*(void *)v10 + 88))(v10);
LABEL_11:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_100DF1788(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DF17A8(Registry **a1@<X0>, uint64_t *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, *a1);
  char v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    id v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v4;
  uint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, &v12);
  if (!v8)
  {
    uint64_t v10 = 0;
LABEL_9:
    std::mutex::unlock(v3);
    uint64_t v9 = 0;
    char v11 = 1;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v8[3];
  uint64_t v9 = (std::__shared_weak_count *)v8[4];
  if (!v9) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  char v11 = 0;
  if (v10) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(*(void *)v10 + 96))(v10, 5);
LABEL_11:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_100DF18B4(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DF18D4(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  CFTypeRef cf = (CFTypeRef)v9;
  int v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&cf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
  if (!v15) {
    goto LABEL_15;
  }
LABEL_10:
  CFTypeRef cf = 0;
  xpc_object_t value = (ctu *)xpc_dictionary_get_value(*a4, "kCarrierBundlePathForBundle");
  ctu::xpc_to_cf((uint64_t *)&v22, value, v18);
  sub_100DF2724(&cf, &v22);
  sub_1000577C4(&v22);
  CFTypeRef v21 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v20 = *a5;
  uint64_t v19 = a5[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  v24[0] = off_101A5D250;
  v24[1] = v20;
  v24[2] = v19;
  _OWORD v24[3] = v24;
  (*(void (**)(uint64_t, CFTypeRef *, void *))(*(void *)v15 + 80))(v15, &v21, v24);
  sub_100060644(v24);
  sub_1000FE824(&v21);
  sub_1000FE824(&cf);
LABEL_15:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100DF1AB0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DF1B0C(Registry **a1@<X0>, xpc_object_t *a2@<X3>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  id v5 = ServiceMap;
  if (v6 < 0)
  {
    unsigned int v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  CFTypeRef cf = (CFTypeRef)v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)&cf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    uint64_t v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_13;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  uint64_t v11 = 0;
  char v13 = 1;
  if (!v12) {
    goto LABEL_13;
  }
LABEL_10:
  CFTypeRef cf = 0;
  xpc_object_t value = (ctu *)xpc_dictionary_get_value(*a2, "kCarrierBundleOTAServerOverrideUrl");
  ctu::xpc_to_cf((uint64_t *)&v17, value, v15);
  sub_100056248(&cf, &v17);
  sub_1000577C4(&v17);
  CFTypeRef v16 = cf;
  if (cf) {
    CFRetain(cf);
  }
  (*(void (**)(uint64_t, CFTypeRef *))(*(void *)v12 + 112))(v12, &v16);
  sub_1000558F4(&v16);
  sub_1000558F4(&cf);
LABEL_13:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_100DF1C70(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  id v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  sub_1000558F4((const void **)va);
  sub_1000558F4((const void **)va1);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100DF1CB4(Registry **a1@<X0>, unint64_t *a2@<X4>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  id v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  v15[0] = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, v15);
  if (!v10)
  {
    std::mutex::unlock(v5);
    return;
  }
  uint64_t v12 = v10[3];
  uint64_t v11 = (std::__shared_weak_count *)v10[4];
  if (v11)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v5);
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v11);
    if (!v12)
    {
LABEL_16:
      sub_10004D2C8(v11);
      return;
    }
  }
  else
  {
    std::mutex::unlock(v5);
    if (!v12) {
      return;
    }
  }
  uint64_t v18 = 0;
  (*(void (**)(ctu **__return_ptr, uint64_t))(*(void *)v12 + 104))(&v18, v12);
  if (v18) {
    uint64_t v14 = sub_1000810B8;
  }
  else {
    uint64_t v14 = 0;
  }
  if (v14)
  {
    ctu::cf_to_xpc((uint64_t *)&v16, v18, v13);
    v15[0] = *a2;
    v15[1] = (unint64_t)"kCarrierBundleOTAServerOverrideUrl";
    sub_100035E70((uint64_t)v15, &v16, &object);
    xpc_release(object);
    xpc_object_t object = 0;
    xpc_release(v16);
    xpc_object_t v16 = 0;
  }
  sub_1000558F4((const void **)&v18);
  if (v11) {
    goto LABEL_16;
  }
}

void sub_100DF1E34(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, ...)
{
  va_start(va, a6);
  sub_1000558F4((const void **)va);
  if (v6) {
    sub_10004D2C8(v6);
  }
  _Unwind_Resume(a1);
}

const void **sub_100DF1E60(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4)
{
  CFTypeRef v21 = 0;
  xpc_object_t value = (ctu *)xpc_dictionary_get_value(*a4, "kCarrierBundleAttachAPNSettings");
  ctu::xpc_to_cf((uint64_t *)&v19, value, v6);
  sub_10004EFE4(&v21, &v19);
  sub_1000577C4(&v19);
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *a1);
  unsigned int v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v22 = v10;
  uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, &v22);
  if (v14)
  {
    uint64_t v16 = v14[3];
    uint64_t v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  uint64_t v15 = 0;
  char v17 = 1;
LABEL_9:
  sub_10022EDC4(v16, &v19);
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
  if (v19)
  {
    v23[0] = off_101A5D2D0;
    void v23[3] = v23;
    (*(void (**)(const void *, const void *, void *))(*(void *)v19 + 112))(v19, v21, v23);
    sub_100060644(v23);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
  return sub_100057D78(&v21);
}

void sub_100DF2020(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, std::__shared_weak_count *a4, ...)
{
  va_start(va1, a4);
  va_start(va, a4);
  id v5 = va_arg(va1, const void *);
  uint64_t v7 = va_arg(va1, void);
  sub_100060644((uint64_t *)va1);
  if (a4) {
    sub_10004D2C8(a4);
  }
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100DF208C(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5)
{
  uint64_t v19 = 0;
  uint64_t v20 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v7 = ServiceMap;
  if ((v8 & 0x8000000000000000) != 0)
  {
    unsigned int v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v10 = 5381;
    do
    {
      unint64_t v8 = v10;
      unsigned int v11 = *v9++;
      uint64_t v10 = (33 * v10) ^ v11;
    }
    while (v11);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v21 = v8;
  uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, &v21);
  if (v12)
  {
    uint64_t v14 = v12[3];
    unsigned int v13 = (std::__shared_weak_count *)v12[4];
    if (v13)
    {
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v7);
      atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v13);
      char v15 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v14 = 0;
  }
  std::mutex::unlock(v7);
  unsigned int v13 = 0;
  char v15 = 1;
LABEL_9:
  sub_10022EDC4(v14, &v19);
  if ((v15 & 1) == 0) {
    sub_10004D2C8(v13);
  }
  uint64_t v16 = v19;
  if (v19)
  {
    uint64_t v18 = *a5;
    uint64_t v17 = a5[1];
    if (v17) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v17 + 8), 1uLL, memory_order_relaxed);
    }
    v22[0] = off_101A5D350;
    v22[1] = v18;
    v22[2] = v17;
    v22[3] = v22;
    (*(void (**)(uint64_t, void *))(*(void *)v16 + 128))(v16, v22);
    sub_10010E020(v22);
  }
  if (v20) {
    sub_10004D2C8(v20);
  }
}

void sub_100DF2224(_Unwind_Exception *a1, uint64_t a2, std::__shared_weak_count *a3, uint64_t a4, ...)
{
  va_start(va, a4);
  sub_10010E020((uint64_t *)va);
  if (a3) {
    sub_10004D2C8(a3);
  }
  _Unwind_Resume(a1);
}

void sub_100DF2268(Registry **a1@<X0>, uint64_t *a2@<X4>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  id v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    uint64_t v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v17 = v6;
  uint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, &v17);
  if (v10)
  {
    uint64_t v12 = v10[3];
    unsigned int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      if (!v12) {
        goto LABEL_14;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  unsigned int v11 = 0;
  char v13 = 1;
  if (!v12) {
    goto LABEL_14;
  }
LABEL_10:
  uint64_t v14 = (std::__shared_weak_count *)a2[1];
  uint64_t v15 = *a2;
  uint64_t v16 = v14;
  if (v14) {
    atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, uint64_t *))(*(void *)v12 + 224))(v12, &v15);
  if (v16) {
    sub_10004D2C8(v16);
  }
LABEL_14:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
}

void sub_100DF239C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DF23C4(Registry **a1@<X0>, uint64_t *a2@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a2, *a1);
  char v3 = ServiceMap;
  if ((v4 & 0x8000000000000000) != 0)
  {
    id v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v12 = v4;
  uint64_t v8 = sub_10004D37C(&v3[1].__m_.__sig, &v12);
  if (!v8)
  {
    uint64_t v10 = 0;
LABEL_9:
    std::mutex::unlock(v3);
    unsigned int v9 = 0;
    char v11 = 1;
    if (!v10) {
      goto LABEL_11;
    }
    goto LABEL_10;
  }
  uint64_t v10 = v8[3];
  unsigned int v9 = (std::__shared_weak_count *)v8[4];
  if (!v9) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v9);
  char v11 = 0;
  if (v10) {
LABEL_10:
  }
    (*(void (**)(uint64_t))(*(void *)v10 + 232))(v10);
LABEL_11:
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
}

void sub_100DF24CC(_Unwind_Exception *exception_object)
{
  char v3 = v1;
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(exception_object);
}

void sub_100DF24EC(Registry **a1, uint64_t a2, uint64_t a3, xpc_object_t *a4, uint64_t *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *a1);
  uint64_t v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  CFTypeRef cf = (CFTypeRef)v9;
  char v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)&cf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v16 = 0;
      if (!v15) {
        goto LABEL_15;
      }
      goto LABEL_10;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v16 = 1;
  if (!v15) {
    goto LABEL_15;
  }
LABEL_10:
  CFTypeRef cf = 0;
  xpc_object_t value = (ctu *)xpc_dictionary_get_value(*a4, "kCarrierBundleWatchBundleMatchCriteria");
  ctu::xpc_to_cf((uint64_t *)&v22, value, v18);
  sub_10004EFE4(&cf, &v22);
  sub_1000577C4(&v22);
  CFTypeRef v21 = cf;
  if (cf) {
    CFRetain(cf);
  }
  uint64_t v20 = *a5;
  uint64_t v19 = a5[1];
  if (v19) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v19 + 8), 1uLL, memory_order_relaxed);
  }
  v24[0] = off_101A5D3D0;
  v24[1] = v20;
  v24[2] = v19;
  _OWORD v24[3] = v24;
  (*(void (**)(uint64_t, CFTypeRef *, void *))(*(void *)v15 + 248))(v15, &v21, v24);
  sub_1001289E8(v24);
  sub_100057D78(&v21);
  sub_100057D78(&cf);
LABEL_15:
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100DF26C8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, int a15, __int16 a16, char a17, char a18)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DF2724(void *a1, CFTypeRef *a2)
{
  CFTypeRef v3 = *a2;
  if (*a2)
  {
    CFTypeID v4 = CFGetTypeID(*a2);
    if (v4 == CFURLGetTypeID()) {
      id v5 = v3;
    }
    else {
      id v5 = 0;
    }
  }
  else
  {
    id v5 = 0;
  }

  return sub_1006B01F8(a1, v5);
}

void *sub_100DF2788(void *a1)
{
  *a1 = off_101A5D250;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100DF27D4(void *a1)
{
  *a1 = off_101A5D250;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100DF2840(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_101A5D250;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100DF289C(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A5D250;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DF28D4(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100DF28E4(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

void sub_100DF2924(uint64_t a1, BOOL *a2)
{
  xpc_object_t v4 = xpc_BOOL_create(*a2);
  if (!v4) {
    xpc_object_t v4 = xpc_null_create();
  }
  v3[0] = *(void *)(a1 + 8);
  v3[1] = "kCarrierBundleInstallResult";
  sub_100035E70((uint64_t)v3, &v4, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v4);
}

uint64_t sub_100DF29A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF29E8()
{
}

void sub_100DF29F8()
{
}

void *sub_100DF2A0C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_101A5D2D0;
  return result;
}

void sub_100DF2A44(uint64_t a1, void *a2)
{
  *a2 = off_101A5D2D0;
}

uint64_t sub_100DF2A70(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF2AB0()
{
}

void *sub_100DF2ABC(void *a1)
{
  *a1 = off_101A5D350;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100DF2B08(void *a1)
{
  *a1 = off_101A5D350;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100DF2B74(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_101A5D350;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100DF2BD0(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A5D350;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DF2C08(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100DF2C18(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

const void **sub_100DF2C58(uint64_t a1, const void **a2)
{
  uint64_t v6 = (ctu *)*a2;
  uint64_t v3 = v6;
  *a2 = 0;
  if (v3) {
    uint64_t v4 = sub_100080778;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    ctu::cf_to_xpc((uint64_t *)&object, v3, a2);
    v7[0] = *(void *)(a1 + 8);
    v7[1] = "kCarrierBundleAttachAPNSettings";
    sub_100035E70((uint64_t)v7, &object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_release(object);
  }
  return sub_100057D78((const void **)&v6);
}

void sub_100DF2CF4(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF2D08(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF2D48()
{
}

void *sub_100DF2D54(void *a1)
{
  *a1 = off_101A5D3D0;
  uint64_t v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    sub_10004D2C8(v2);
  }
  return a1;
}

void sub_100DF2DA0(void *a1)
{
  *a1 = off_101A5D3D0;
  char v1 = (std::__shared_weak_count *)a1[2];
  if (v1) {
    sub_10004D2C8(v1);
  }

  operator delete();
}

void *sub_100DF2E0C(uint64_t a1)
{
  __n128 result = operator new(0x18uLL);
  uint64_t v4 = *(void *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 16);
  *__n128 result = off_101A5D3D0;
  result[1] = v4;
  result[2] = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100DF2E68(uint64_t result, void *a2)
{
  uint64_t v3 = *(void *)(result + 8);
  uint64_t v2 = *(void *)(result + 16);
  *a2 = off_101A5D3D0;
  a2[1] = v3;
  a2[2] = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 8), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100DF2EA0(uint64_t a1)
{
  char v1 = *(std::__shared_weak_count **)(a1 + 16);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

void sub_100DF2EB0(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[2];
  if (v2) {
    sub_10004D2C8(v2);
  }

  operator delete(__p);
}

const void **sub_100DF2EF0(uint64_t a1, const void **a2)
{
  uint64_t v6 = (ctu *)*a2;
  uint64_t v3 = v6;
  *a2 = 0;
  if (v3) {
    uint64_t v4 = sub_1000810B8;
  }
  else {
    uint64_t v4 = 0;
  }
  if (v4)
  {
    ctu::cf_to_xpc((uint64_t *)&object, v3, a2);
    v7[0] = *(void *)(a1 + 8);
    v7[1] = "kCarrierBundleRemoteCardSettingsServerURL";
    sub_100035E70((uint64_t)v7, &object, &v9);
    xpc_release(v9);
    xpc_object_t v9 = 0;
    xpc_release(object);
  }
  return sub_1000558F4((const void **)&v6);
}

void sub_100DF2F8C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000558F4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF2FA0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF2FE0()
{
}

uint64_t sub_100DF2FEC()
{
  return sub_100C624B8((uint64_t)&unk_101B12C10, (uint64_t)sub_100DF14F0);
}

uint64_t sub_100DF3008(uint64_t a1)
{
  long long v71 = 0u;
  long long v72 = 0u;
  uint64_t v69 = 0;
  uint64_t v70 = 0;
  uint64_t v68 = 0;
  sub_100DF73F8(&v68, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v68, v69, 0xFAFAFAFAFAFAFAFBLL * ((v69 - v68) >> 3));
  *(void *)&long long v71 = off_101A5D450;
  *((void *)&v71 + 1) = 0;
  long long v72 = 0uLL;
  sub_100DF73F8((void *)&v71 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v66 = &v35;
  sub_1002244D8((void ***)&v66);
  *(void *)&long long v71 = off_101A5D488;
  *(void *)&long long v35 = &v68;
  sub_1002244D8((void ***)&v35);
  long long v66 = 0u;
  long long v67 = 0u;
  uint64_t v64 = 0;
  uint64_t v65 = 0;
  uint64_t v63 = 0;
  sub_100DF73F8(&v63, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v63, v64, 0xFAFAFAFAFAFAFAFBLL * ((v64 - v63) >> 3));
  *(void *)&long long v66 = off_101A5D450;
  *((void *)&v66 + 1) = 0;
  long long v67 = 0uLL;
  sub_100DF73F8((void *)&v66 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v61 = &v35;
  sub_1002244D8((void ***)&v61);
  *(void *)&long long v66 = off_101A5D4C8;
  *(void *)&long long v35 = &v63;
  sub_1002244D8((void ***)&v35);
  long long v61 = 0u;
  long long v62 = 0u;
  uint64_t v60 = 0;
  uint64_t v58 = 0;
  uint64_t v59 = 0;
  sub_100DF73F8(&v58, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v58, v59, 0xFAFAFAFAFAFAFAFBLL * ((v59 - v58) >> 3));
  *(void *)&long long v61 = off_101A5D450;
  *((void *)&v61 + 1) = 0;
  long long v62 = 0uLL;
  sub_100DF73F8((void *)&v61 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v56 = &v35;
  sub_1002244D8((void ***)&v56);
  *(void *)&long long v61 = off_101A5D508;
  *(void *)&long long v35 = &v58;
  sub_1002244D8((void ***)&v35);
  long long v56 = 0u;
  long long v57 = 0u;
  uint64_t v55 = 0;
  uint64_t v53 = 0;
  uint64_t v54 = 0;
  sub_100DF73F8(&v53, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v53, v54, 0xFAFAFAFAFAFAFAFBLL * ((v54 - v53) >> 3));
  *(void *)&long long v56 = off_101A5D450;
  *((void *)&v56 + 1) = 0;
  long long v57 = 0uLL;
  sub_100DF73F8((void *)&v56 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v51 = &v35;
  sub_1002244D8((void ***)&v51);
  *(void *)&long long v56 = off_101A5D548;
  *(void *)&long long v35 = &v53;
  sub_1002244D8((void ***)&v35);
  long long v51 = 0u;
  long long v52 = 0u;
  uint64_t v50 = 0;
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  sub_100DF73F8(&v48, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v48, v49, 0xFAFAFAFAFAFAFAFBLL * ((v49 - v48) >> 3));
  *(void *)&long long v51 = off_101A5D450;
  *((void *)&v51 + 1) = 0;
  long long v52 = 0uLL;
  sub_100DF73F8((void *)&v51 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v46 = &v35;
  sub_1002244D8((void ***)&v46);
  *(void *)&long long v51 = off_101A5D588;
  *(void *)&long long v35 = &v48;
  sub_1002244D8((void ***)&v35);
  long long v46 = 0u;
  long long v47 = 0u;
  uint64_t v44 = 0;
  uint64_t v45 = 0;
  uint64_t v43 = 0;
  sub_100DF73F8(&v43, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v43, v44, 0xFAFAFAFAFAFAFAFBLL * ((v44 - v43) >> 3));
  *(void *)&long long v46 = off_101A5D450;
  *((void *)&v46 + 1) = 0;
  long long v47 = 0uLL;
  sub_100DF73F8((void *)&v46 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v41 = &v35;
  sub_1002244D8((void ***)&v41);
  *(void *)&long long v46 = off_101A5D5C8;
  *(void *)&long long v35 = &v43;
  sub_1002244D8((void ***)&v35);
  long long v41 = 0u;
  long long v42 = 0u;
  uint64_t v39 = 0;
  uint64_t v40 = 0;
  uint64_t v38 = 0;
  sub_100DF73F8(&v38, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v35 = 0uLL;
  *(void *)&long long v36 = 0;
  sub_100DF73F8(&v35, v38, v39, 0xFAFAFAFAFAFAFAFBLL * ((v39 - v38) >> 3));
  *(void *)&long long v41 = off_101A5D450;
  *((void *)&v41 + 1) = 0;
  long long v42 = 0uLL;
  sub_100DF73F8((void *)&v41 + 1, v35, *((uint64_t *)&v35 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v35 + 1) - v35) >> 3));
  *(void *)&long long v30 = &v35;
  sub_1002244D8((void ***)&v30);
  *(void *)&long long v41 = off_101A5D608;
  *(void *)&long long v35 = &v38;
  sub_1002244D8((void ***)&v35);
  uint64_t v37 = 0;
  long long v35 = 0u;
  long long v36 = 0u;
  uint64_t v33 = 0;
  uint64_t v34 = 0;
  uint64_t v32 = 0;
  sub_100DF73F8(&v32, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  long long v30 = 0uLL;
  *(void *)&long long v31 = 0;
  sub_100DF73F8(&v30, v32, v33, 0xFAFAFAFAFAFAFAFBLL * ((v33 - v32) >> 3));
  *(void *)&long long v35 = off_101A5D450;
  *((void *)&v35 + 1) = 0;
  long long v36 = 0uLL;
  sub_100DF73F8((void *)&v35 + 1, v30, *((uint64_t *)&v30 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v30 + 1) - v30) >> 3));
  id v73 = (void **)&v30;
  sub_1002244D8(&v73);
  *(void *)&long long v35 = off_101A5D648;
  LOBYTE(v37) = 0;
  *(void *)&long long v30 = &v32;
  sub_1002244D8((void ***)&v30);
  long long v30 = 0u;
  long long v31 = 0u;
  uint64_t v28 = 0;
  uint64_t v29 = 0;
  uint64_t v27 = 0;
  sub_100DF73F8(&v27, *(void *)(a1 + 24), *(void *)(a1 + 32), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 32) - *(void *)(a1 + 24)) >> 3));
  id v73 = 0;
  uint64_t v74 = 0;
  uint64_t v75 = 0;
  sub_100DF73F8(&v73, v27, v28, 0xFAFAFAFAFAFAFAFBLL * ((v28 - v27) >> 3));
  *(void *)&long long v30 = off_101A5D450;
  *((void *)&v30 + 1) = 0;
  long long v31 = 0uLL;
  sub_100DF73F8((void *)&v30 + 1, (uint64_t)v73, v74, 0xFAFAFAFAFAFAFAFBLL * ((v74 - (uint64_t)v73) >> 3));
  int v76 = &v73;
  sub_1002244D8((void ***)&v76);
  *(void *)&long long v30 = off_101A5D688;
  id v73 = (void **)&v27;
  sub_1002244D8(&v73);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 16);
  if (!v2 || (v3 = *(void *)(a1 + 8), (uint64_t v4 = std::__shared_weak_count::lock(v2)) == 0)) {
    sub_100088B9C();
  }
  id v5 = v4;
  v26[0] = v3;
  v26[1] = (uint64_t)v4;
  atomic_fetch_add_explicit(&v4->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  char v6 = sub_100DF3D78((uint64_t)&v71, v26);
  std::__shared_weak_count::__release_weak(v5);
  if (v6)
  {
    int v7 = 0;
  }
  else
  {
    v25[0] = v3;
    v25[1] = (uint64_t)v5;
    atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
    char v8 = sub_100DF3F80((uint64_t)&v66, v25);
    std::__shared_weak_count::__release_weak(v5);
    if (v8)
    {
      int v7 = 1;
    }
    else
    {
      v24[0] = v3;
      v24[1] = (uint64_t)v5;
      atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      char v9 = sub_100DF44FC((uint64_t)&v61, v24);
      std::__shared_weak_count::__release_weak(v5);
      if (v9)
      {
        int v7 = 6;
      }
      else
      {
        v23[0] = v3;
        v23[1] = (uint64_t)v5;
        atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
        char v10 = sub_100DF49B0((uint64_t)&v56, v23);
        std::__shared_weak_count::__release_weak(v5);
        if (v10)
        {
          int v7 = 9;
        }
        else
        {
          v22[0] = v3;
          v22[1] = (uint64_t)v5;
          atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
          char v11 = sub_100DF4CA4((uint64_t)&v51, v22);
          std::__shared_weak_count::__release_weak(v5);
          if (v11)
          {
            int v7 = 2;
          }
          else
          {
            v21[0] = v3;
            v21[1] = (uint64_t)v5;
            atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
            char v12 = sub_100DF5448((uint64_t)&v46, v21);
            std::__shared_weak_count::__release_weak(v5);
            if (v12)
            {
              int v7 = 3;
            }
            else
            {
              v20[0] = v3;
              v20[1] = (uint64_t)v5;
              atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
              char v13 = sub_100DF54D0((uint64_t)&v41, v20);
              std::__shared_weak_count::__release_weak(v5);
              if (v13)
              {
                int v7 = 4;
              }
              else
              {
                v19[0] = v3;
                v19[1] = (uint64_t)v5;
                atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                BOOL v14 = sub_100DF5C64((uint64_t)&v35, v19);
                std::__shared_weak_count::__release_weak(v5);
                if (v14)
                {
                  if ((_BYTE)v37) {
                    int v7 = 8;
                  }
                  else {
                    int v7 = 7;
                  }
                }
                else
                {
                  v18[0] = v3;
                  v18[1] = (uint64_t)v5;
                  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
                  int v17 = sub_100DF5FD8((uint64_t)&v30, v18);
                  std::__shared_weak_count::__release_weak(v5);
                  if ((v17 & 1) == 0)
                  {
                    uint64_t v15 = 0;
                    goto LABEL_22;
                  }
                  int v7 = 5;
                }
              }
            }
          }
        }
      }
    }
  }
  *(_DWORD *)(a1 + 48) = v7;
  uint64_t v15 = 1;
LABEL_22:
  sub_10004D2C8(v5);
  *(void *)&long long v30 = off_101A5D450;
  id v73 = (void **)&v30 + 1;
  sub_1002244D8(&v73);
  *(void *)&long long v35 = off_101A5D450;
  *(void *)&long long v30 = (char *)&v35 + 8;
  sub_1002244D8((void ***)&v30);
  *(void *)&long long v41 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v41 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v46 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v46 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v51 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v51 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v56 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v56 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v61 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v61 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v66 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v66 + 8;
  sub_1002244D8((void ***)&v35);
  *(void *)&long long v71 = off_101A5D450;
  *(void *)&long long v35 = (char *)&v71 + 8;
  sub_1002244D8((void ***)&v35);
  return v15;
}

void sub_100DF3AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,uint64_t a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,uint64_t a56,uint64_t a57,uint64_t a58,uint64_t a59,uint64_t a60,uint64_t a61,uint64_t a62,uint64_t a63)
{
  std::__shared_weak_count::__release_weak(v67);
  sub_10004D2C8(v67);
  *(void *)(v70 - 128) = v69;
  sub_1002244D8((void ***)(v70 - 128));
  sub_1002244D8((void ***)&a43);
  a59 = v68;
  sub_1002244D8((void ***)&a51);
  a67 = a11;
  a59 = a10;
  sub_1002244D8((void ***)&a59);
  STACK[0x210] = a13;
  a67 = a12;
  sub_1002244D8((void ***)&a67);
  STACK[0x250] = a15;
  STACK[0x210] = a14;
  sub_1002244D8((void ***)&STACK[0x210]);
  STACK[0x290] = a17;
  STACK[0x250] = a16;
  sub_1002244D8((void ***)&STACK[0x250]);
  *(void *)(v70 - 224) = a19;
  STACK[0x290] = a18;
  sub_1002244D8((void ***)&STACK[0x290]);
  *(void *)(v70 - 160) = a21;
  *(void *)(v70 - 224) = a20;
  sub_1002244D8((void ***)(v70 - 224));
  _Unwind_Resume(a1);
}

uint64_t sub_100DF3D78(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (*a2)
  {
    long long v23 = 0u;
    long long v24 = 0u;
    *(_OWORD *)long long __p = 0u;
    sub_100DF6878(__p, v7);
    uint64_t v19 = 0;
    uint64_t v20 = 0;
    uint64_t v21 = 0;
    sub_100DF755C(&v19, *((void ***)&v23 + 1), (void **)v24, (uint64_t)(v24 - *((void *)&v23 + 1)) >> 3);
    uint64_t v8 = *(void *)(a1 + 16) - *(void *)(a1 + 8);
    char v9 = v19;
    if (v8 == 408)
    {
      uint64_t v10 = 0;
      char v11 = v20;
    }
    else
    {
      char v11 = v20;
      uint64_t v10 = 0xFAFAFAFAFAFAFAFBLL * (v8 >> 3) == v20 - v19;
    }
    if (v19 != v11)
    {
      do
      {
        char v12 = *v9;
        xpc_object_t v18 = v12;
        if (v12) {
          xpc_retain(v12);
        }
        else {
          xpc_object_t v18 = xpc_null_create();
        }
        v16[0] = &v18;
        v16[1] = (void **)"kActionType";
        sub_100048BAC((uint64_t)v16, &object);
        int v14 = xpc::dyn_cast_or_default((xpc *)&object, 0, v13);
        xpc_release(object);
        xpc_release(v18);
        uint64_t v10 = v10 & (v14 == 2);
        ++v9;
      }
      while (v9 != v11);
    }
    v16[0] = (void **)&v19;
    sub_10070345C(v16);
    uint64_t v19 = (void **)&v23 + 1;
    sub_10070345C(&v19);
    if (SBYTE7(v23) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  sub_10004D2C8(v6);
  return v10;
}

void sub_100DF3F18(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, xpc_object_t object, xpc_object_t a13, char a14, uint64_t a15, uint64_t a16, char a17)
{
  sub_1006FE934((uint64_t)&a17);
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF3F80(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (!v7) {
    goto LABEL_72;
  }
  long long v55 = 0u;
  long long v56 = 0u;
  *(_OWORD *)long long __p = 0u;
  uint64_t v39 = v5;
  sub_100DF6878(__p, v7);
  long long v51 = 0;
  long long v52 = 0;
  uint64_t v53 = 0;
  sub_100DF755C(&v51, *((void ***)&v55 + 1), (void **)v56, (uint64_t)(v56 - *((void *)&v55 + 1)) >> 3);
  uint64_t v48 = 0;
  uint64_t v49 = 0;
  unint64_t v50 = 0;
  uint64_t v9 = *(void *)(a1 + 8);
  uint64_t v8 = *(void *)(a1 + 16);
  if (v9 == v8)
  {
    uint64_t v11 = 0;
    unint64_t v10 = 0;
  }
  else
  {
    unint64_t v10 = 0;
    do
    {
      if (*(unsigned char *)(v9 + 85))
      {
        if (v10 >= v50)
        {
          unint64_t v10 = sub_100840BB0((uint64_t *)&v48, v9);
        }
        else
        {
          sub_100245B5C(v10, v9);
          v10 += 408;
        }
        uint64_t v49 = (const void **)v10;
      }
      v9 += 408;
    }
    while (v9 != v8);
    uint64_t v11 = (uint64_t)v48;
  }
  unint64_t v12 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(v10 - v11) >> 3);
  uint64_t v13 = *(NSObject **)v7;
  if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 134218240;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2048;
    *(void *)&buf[14] = (v52 - v51) >> 3;
    _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I multiparty calls std::string::size_type size = %lu, action std::string::size_type size = %lu", buf, 0x16u);
  }
  int v14 = v51;
  uint64_t v15 = v52;
  BOOL v17 = v12 > 1 && v12 == (v52 - v51) >> 3;
  BOOL v38 = v17;
  if (v52 == v51)
  {
    int v19 = 0;
    BOOL v18 = 0;
    goto LABEL_69;
  }
  BOOL v18 = 0;
  int v19 = 0;
  do
  {
    __s1 = 0;
    __uint64_t n = 0;
    uint64_t v47 = 0;
    xpc_object_t v42 = v14;
    uint64_t v43 = "kUuid";
    sub_100048BAC((uint64_t)&v42, object);
    memset(buf, 0, sizeof(buf));
    xpc::dyn_cast_or_default();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    xpc_release(object[0]);
    uint64_t v20 = v48;
    uint64_t v21 = v49;
    if (v48 == v49) {
      goto LABEL_64;
    }
    do
    {
      sub_10012A394((const void **)&v42, v20);
      printUuid();
      if (v47 >= 0) {
        size_t v22 = HIBYTE(v47);
      }
      else {
        size_t v22 = __n;
      }
      uint64_t v23 = buf[23];
      int v24 = (char)buf[23];
      if ((buf[23] & 0x80u) != 0) {
        uint64_t v23 = *(void *)&buf[8];
      }
      if (v22 != v23)
      {
        BOOL v34 = 0;
        if (((char)buf[23] & 0x80000000) == 0) {
          goto LABEL_46;
        }
LABEL_50:
        operator delete(*(void **)buf);
        goto LABEL_46;
      }
      if ((buf[23] & 0x80u) == 0) {
        uint64_t v25 = buf;
      }
      else {
        uint64_t v25 = *(uint8_t **)buf;
      }
      if (v47 < 0)
      {
        BOOL v34 = memcmp(__s1, v25, __n) == 0;
        if (v24 < 0) {
          goto LABEL_50;
        }
      }
      else if (HIBYTE(v47))
      {
        uint64_t v26 = HIBYTE(v47) - 1;
        p_s1 = &__s1;
        do
        {
          int v29 = *(unsigned __int8 *)p_s1;
          p_s1 = (void **)((char *)p_s1 + 1);
          int v28 = v29;
          int v31 = *v25++;
          int v30 = v31;
          BOOL v33 = v26-- != 0;
          BOOL v34 = v28 == v30;
        }
        while (v28 == v30 && v33);
        if ((char)buf[23] < 0) {
          goto LABEL_50;
        }
      }
      else
      {
        BOOL v34 = 1;
        if ((char)buf[23] < 0) {
          goto LABEL_50;
        }
      }
LABEL_46:
      sub_10012577C((const void **)&v42);
      if (v34) {
        goto LABEL_55;
      }
      v20 += 51;
    }
    while (v20 != v21);
    uint64_t v20 = v21;
LABEL_55:
    if (v20 != v49)
    {
      *(void *)long long buf = v14;
      *(void *)&uint8_t buf[8] = "kActionType";
      sub_100048BAC((uint64_t)buf, &v42);
      int v36 = xpc::dyn_cast_or_default((xpc *)&v42, 0, v35);
      xpc_release(v42);
      if (v36 == 2)
      {
        int v19 = 1;
      }
      else if (v36 == 4)
      {
        xpc_object_t v42 = 0;
        uint64_t v43 = 0;
        uint64_t v44 = 0;
        object[0] = v14;
        object[1] = "kUuidToMergeInto";
        sub_100048BAC((uint64_t)object, &v41);
        memset(buf, 0, sizeof(buf));
        xpc::dyn_cast_or_default();
        if ((char)buf[23] < 0) {
          operator delete(*(void **)buf);
        }
        xpc_release(v41);
        if (SHIBYTE(v44) < 0)
        {
          BOOL v18 = v43 == 0;
          operator delete(v42);
        }
        else
        {
          BOOL v18 = SHIBYTE(v44) == 0;
        }
      }
    }
LABEL_64:
    if (SHIBYTE(v47) < 0) {
      operator delete(__s1);
    }
    v14 += 8;
  }
  while (v14 != v15);
LABEL_69:
  uint64_t v7 = v38 & v19 & v18;
  *(void *)long long buf = &v48;
  sub_1002244D8((void ***)buf);
  *(void *)long long buf = &v51;
  sub_10070345C((void ***)buf);
  *(void *)long long buf = (char *)&v55 + 8;
  sub_10070345C((void ***)buf);
  if (SBYTE7(v55) < 0) {
    operator delete(__p[0]);
  }
  char v6 = v39;
LABEL_72:
  sub_10004D2C8(v6);
  return v7;
}

void sub_100DF4400(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, xpc_object_t a12, uint64_t a13, xpc_object_t object, xpc_object_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,char a24,uint64_t a25,uint64_t a26,char a27,uint64_t a28,uint64_t a29,char a30)
{
}

uint64_t sub_100DF44FC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (*a2)
  {
    long long v50 = 0u;
    long long v51 = 0u;
    *(_OWORD *)long long __dst = 0u;
    BOOL v34 = v5;
    sub_100DF6878(__dst, v7);
    long long v46 = 0;
    uint64_t v47 = 0;
    uint64_t v48 = 0;
    sub_100DF755C(&v46, *((void ***)&v50 + 1), (void **)v51, (uint64_t)(v51 - *((void *)&v50 + 1)) >> 3);
    unint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3);
    uint64_t v9 = v46;
    int v11 = v8 > 1 && v8 == v47 - v46;
    int v36 = v47;
    if (v47 != v46)
    {
      int v12 = 0;
      int v13 = 0;
      uint64_t v35 = a1;
      while (1)
      {
        xpc_object_t v45 = 0;
        int v14 = *v9;
        xpc_object_t v45 = v14;
        if (v14) {
          xpc_retain(v14);
        }
        else {
          xpc_object_t v45 = xpc_null_create();
        }
        long long v52 = &v45;
        uint64_t v53 = "kActionType";
        sub_100048BAC((uint64_t)&v52, object);
        int v16 = xpc::dyn_cast_or_default((xpc *)object, 0, v15);
        xpc_release(object[0]);
        object[0] = 0;
        object[1] = 0;
        uint64_t v44 = 0;
        v41[0] = &v45;
        v41[1] = "kUuid";
        sub_100048BAC((uint64_t)v41, &v42);
        long long v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v54) < 0) {
          operator delete(v52);
        }
        xpc_release(v42);
        long long v52 = &v45;
        uint64_t v53 = "kOnHold";
        sub_100048BAC((uint64_t)&v52, v41);
        int v18 = xpc::dyn_cast_or_default((xpc *)v41, 0, v17);
        int v37 = v12;
        xpc_release(v41[0]);
        uint64_t v19 = *(void *)(a1 + 8);
        uint64_t v20 = *(void *)(a1 + 16);
        if (SHIBYTE(v44) < 0)
        {
          sub_10004FC84(__p, object[0], (unint64_t)object[1]);
        }
        else
        {
          *(_OWORD *)long long __p = *(_OWORD *)object;
          uint64_t v39 = v44;
        }
        char v40 = v18;
        if (v19 != v20) {
          break;
        }
LABEL_45:
        a1 = v35;
        if (SHIBYTE(v39) < 0) {
          operator delete(__p[0]);
        }
        BOOL v31 = v16 == 3 && v19 != *(void *)(v35 + 16);
        if (SHIBYTE(v44) < 0) {
          operator delete(object[0]);
        }
        xpc_release(v45);
        v13 |= v18;
        int v12 = v37 | v18 ^ 1;
        v11 &= v31;
        if (++v9 == v36) {
          goto LABEL_60;
        }
      }
      while (1)
      {
        long long v52 = 0;
        uint64_t v53 = 0;
        uint64_t v54 = 0;
        sub_10012A394((const void **)v41, (const void **)v19);
        printUuid();
        sub_10012577C((const void **)v41);
        char v21 = HIBYTE(v54);
        if (v54 >= 0) {
          size_t v22 = (const char *)HIBYTE(v54);
        }
        else {
          size_t v22 = v53;
        }
        uint64_t v23 = (const char *)HIBYTE(v39);
        if (v39 < 0) {
          uint64_t v23 = (const char *)__p[1];
        }
        if (v22 != v23) {
          goto LABEL_36;
        }
        int v24 = *(_DWORD *)(v19 + 56);
        uint64_t v25 = v39 >= 0 ? __p : (void **)__p[0];
        if ((v54 & 0x8000000000000000) == 0) {
          break;
        }
        int v29 = v52;
        if (!memcmp(v52, v25, (size_t)v53)) {
          goto LABEL_43;
        }
        operator delete(v29);
LABEL_39:
        v19 += 408;
        if (v19 == v20)
        {
          uint64_t v19 = v20;
          goto LABEL_45;
        }
      }
      if (HIBYTE(v54))
      {
        uint64_t v26 = &v52;
        uint64_t v27 = HIBYTE(v54);
        while (*(unsigned __int8 *)v26 == *(unsigned __int8 *)v25)
        {
          uint64_t v26 = (void ***)((char *)v26 + 1);
          uint64_t v25 = (void **)((char *)v25 + 1);
          if (!--v27) {
            goto LABEL_43;
          }
        }
LABEL_36:
        BOOL v28 = 0;
        if (v54 < 0) {
          goto LABEL_37;
        }
      }
      else
      {
LABEL_43:
        BOOL v28 = v40 != (v24 == 1);
        if (v21 < 0) {
LABEL_37:
        }
          operator delete(v52);
      }
      if (v28) {
        goto LABEL_45;
      }
      goto LABEL_39;
    }
    int v13 = 0;
    int v12 = 0;
LABEL_60:
    uint64_t v32 = v11 & v13 & v12;
    long long v52 = (void **)&v46;
    sub_10070345C(&v52);
    long long v52 = (void **)&v50 + 1;
    sub_10070345C(&v52);
    if (SBYTE7(v50) < 0) {
      operator delete(__dst[0]);
    }
    char v6 = v34;
  }
  else
  {
    uint64_t v32 = 0;
  }
  sub_10004D2C8(v6);
  return v32;
}

void sub_100DF48C8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, uint64_t a19, xpc_object_t a20,uint64_t a21,xpc_object_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,xpc_object_t object,char a30,uint64_t a31,uint64_t a32,char a33)
{
}

uint64_t sub_100DF49B0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (*a2)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)long long __p = 0u;
    sub_100DF6878(__p, v7);
    uint64_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_100DF755C(&v26, *((void ***)&v30 + 1), (void **)v31, (uint64_t)(v31 - *((void *)&v30 + 1)) >> 3);
    uint64_t v8 = 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) == v27 - v26;
    p_xpc_object_t object = v26;
    int v24 = "kActionType";
    sub_100048BAC((uint64_t)&p_object, &object);
    int v10 = xpc::dyn_cast_or_default((xpc *)&object, 0, v9);
    xpc_release(object);
    if (v10 == 3)
    {
      p_xpc_object_t object = v26;
      int v24 = "kOnHold";
      sub_100048BAC((uint64_t)&p_object, &object);
      int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0, v11);
      xpc_release(object);
      int v13 = v26;
      for (CFIndex i = v27; v13 != i; ++v13)
      {
        uint64_t v15 = *v13;
        xpc_object_t object = v15;
        if (v15) {
          xpc_retain(v15);
        }
        else {
          xpc_object_t object = xpc_null_create();
        }
        p_xpc_object_t object = &object;
        int v24 = "kActionType";
        sub_100048BAC((uint64_t)&p_object, &v22);
        int v17 = xpc::dyn_cast_or_default((xpc *)&v22, 0, v16);
        xpc_release(v22);
        p_xpc_object_t object = &object;
        int v24 = "kOnHold";
        sub_100048BAC((uint64_t)&p_object, &v22);
        int v19 = xpc::dyn_cast_or_default((xpc *)&v22, 0, v18);
        xpc_release(v22);
        xpc_release(object);
        int v20 = v12 ^ v19 ^ 1;
        if (v17 != 3) {
          int v20 = 0;
        }
        uint64_t v8 = v8 & v20;
      }
    }
    else
    {
      uint64_t v8 = 0;
    }
    p_xpc_object_t object = (void **)&v26;
    sub_10070345C(&p_object);
    uint64_t v26 = (void **)&v30 + 1;
    sub_10070345C(&v26);
    if (SBYTE7(v30) < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    uint64_t v8 = 0;
  }
  sub_10004D2C8(v6);
  return v8;
}

void sub_100DF4BE8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, char *a11, uint64_t a12, xpc_object_t object, char a14, uint64_t a15, uint64_t a16, char a17)
{
  xpc_release(object);
  a11 = &a14;
  sub_10070345C((void ***)&a11);
  sub_1006FE934((uint64_t)&a17);
  sub_10004D2C8(v17);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF4CA4(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3)
  {
    id v5 = std::__shared_weak_count::lock(v3);
    if (v5)
    {
      char v6 = v5;
      uint64_t v7 = *a2;
      if (!v7)
      {
        char v13 = 0;
LABEL_104:
        sub_10004D2C8(v6);
        return v13 & 1;
      }
      long long v90 = 0u;
      long long v91 = 0u;
      long long v89 = 0u;
      sub_100DF6878(&v89, v7);
      char v86 = 0;
      char v87 = 0;
      uint64_t v88 = 0;
      sub_100DF755C(&v86, *((void ***)&v90 + 1), (void **)v91, (uint64_t)(v91 - *((void *)&v90 + 1)) >> 3);
      uint64_t v9 = v86;
      uint64_t v8 = v87;
      if (v86 != v87)
      {
        int v10 = v86;
        while (1)
        {
          __p[0] = v9;
          __p[1] = "kActionType";
          sub_100048BAC((uint64_t)__p, &v83);
          int v12 = xpc::dyn_cast_or_default((xpc *)&v83, 0, v11);
          xpc_release((xpc_object_t)v83);
          if (v12 == 1) {
            break;
          }
          ++v10;
          ++v9;
          if (v10 == v8) {
            goto LABEL_13;
          }
        }
        if (v10 != v8)
        {
          char v13 = sub_100DF6900(1, (uint64_t *)(a1 + 8), v7);
          goto LABEL_102;
        }
      }
LABEL_13:
      uint64_t v47 = a1;
      *(_DWORD *)((char *)v85 + 3) = 0;
      v85[0] = 0;
      long long v83 = 0uLL;
      uint64_t v84 = 0;
      int v14 = v86;
      uint64_t v15 = v87;
      if (v86 == v87)
      {
        BOOL v23 = 0;
        BOOL v18 = 0;
        char v13 = 0;
        goto LABEL_97;
      }
      long long v46 = v6;
      unsigned __int8 v16 = 0;
      unint64_t v17 = 0;
      BOOL v18 = 0;
      while (1)
      {
        xpc_object_t v82 = 0;
        xpc_object_t v82 = *v14;
        if (v82) {
          xpc_retain(v82);
        }
        else {
          xpc_object_t v82 = xpc_null_create();
        }
        __p[0] = &v82;
        __p[1] = "kActionType";
        sub_100048BAC((uint64_t)__p, &__dst);
        int v20 = xpc::dyn_cast_or_default((xpc *)&__dst, 0, v19);
        xpc_release((xpc_object_t)__dst);
        if (v20 == 3)
        {
          __p[0] = &v82;
          __p[1] = "kOnHold";
          sub_100048BAC((uint64_t)__p, &__dst);
          char v22 = xpc::dyn_cast_or_default((xpc *)&__dst, 0, v21);
          xpc_release((xpc_object_t)__dst);
          if ((v22 & 1) == 0)
          {
            __s1 = &v82;
            __uint64_t n = (size_t)"kUuid";
            sub_100048BAC((uint64_t)&__s1, &v79);
            __p[0] = 0;
            __p[1] = 0;
            *(void *)&long long v54 = 0;
            xpc::dyn_cast_or_default();
            if (SBYTE7(v54) < 0) {
              operator delete(__p[0]);
            }
            if (SHIBYTE(v84) < 0) {
              operator delete((void *)v83);
            }
            long long v83 = __dst;
            uint64_t v84 = v81;
            HIBYTE(v81) = 0;
            LOBYTE(__dst) = 0;
            xpc_release(v79);
          }
          goto LABEL_29;
        }
        if (v20 == 2) {
          break;
        }
LABEL_29:
        xpc_release(v82);
        if (++v14 == v15)
        {
          char v13 = 0;
          BOOL v23 = (v16 & 0x80u) != 0;
          unint64_t v24 = v16;
          if ((v16 & 0x80u) != 0) {
            unint64_t v24 = v17;
          }
          uint64_t v25 = HIBYTE(v84);
          if (v84 < 0) {
            uint64_t v25 = *((void *)&v83 + 1);
          }
          if (!v24)
          {
            char v6 = v46;
            goto LABEL_97;
          }
          if (!v25)
          {
            char v6 = v46;
            goto LABEL_97;
          }
          long long __dst = 0uLL;
          uint64_t v81 = 0;
          if ((v16 & 0x80) != 0)
          {
            sub_10004FC84(&__dst, v18, v17);
          }
          else
          {
            *(void *)&long long __dst = v18;
            *((void *)&__dst + 1) = v17;
            LODWORD(v81) = v85[0];
            *(_DWORD *)((char *)&v81 + 3) = *(_DWORD *)((char *)v85 + 3);
            HIBYTE(v81) = v16;
          }
          uint64_t v26 = *(void *)(v47 + 8);
          uint64_t v27 = *(void *)(v47 + 16);
          if (v26 != v27)
          {
            BOOL v45 = 0;
            BOOL v48 = 0;
            if (v84 >= 0) {
              uint64_t v28 = HIBYTE(v84);
            }
            else {
              uint64_t v28 = *((void *)&v83 + 1);
            }
            int v29 = (unsigned __int8 *)&v83;
            if (v84 < 0) {
              int v29 = (unsigned __int8 *)v83;
            }
            __s2 = v29;
            while (1)
            {
              uint64_t v78 = 0;
              long long v76 = 0u;
              long long v77 = 0u;
              long long v74 = 0u;
              long long v75 = 0u;
              long long v72 = 0u;
              long long v73 = 0u;
              long long v70 = 0u;
              long long v71 = 0u;
              long long v68 = 0u;
              long long v69 = 0u;
              long long v66 = 0u;
              long long v67 = 0u;
              long long v64 = 0u;
              long long v65 = 0u;
              long long v62 = 0u;
              long long v63 = 0u;
              long long v60 = 0u;
              long long v61 = 0u;
              long long v58 = 0u;
              long long v59 = 0u;
              long long v56 = 0u;
              long long v57 = 0u;
              long long v54 = 0u;
              long long v55 = 0u;
              *(_OWORD *)long long __p = 0u;
              sub_100245B5C((uint64_t)__p, v26);
              __s1 = 0;
              __uint64_t n = 0;
              uint64_t v52 = 0;
              uint64_t v49 = __p[0];
              if (__p[0]) {
                CFRetain(__p[0]);
              }
              printUuid();
              sub_10012577C((const void **)&v49);
              uint64_t v30 = HIBYTE(v52);
              char v31 = HIBYTE(v52);
              size_t v32 = __n;
              if (v52 >= 0) {
                size_t v33 = HIBYTE(v52);
              }
              else {
                size_t v33 = __n;
              }
              if (!v33) {
                goto LABEL_81;
              }
              uint64_t v34 = HIBYTE(v81);
              if (v81 < 0) {
                uint64_t v34 = *((void *)&__dst + 1);
              }
              if (v33 == v34)
              {
                if (v81 >= 0) {
                  p_dst = (unsigned __int8 *)&__dst;
                }
                else {
                  p_dst = (unsigned __int8 *)__dst;
                }
                if (v52 < 0)
                {
                  char v40 = __s1;
                  if (!memcmp(__s1, p_dst, __n))
                  {
LABEL_80:
                    BOOL v48 = DWORD2(v56) == 0;
                    goto LABEL_81;
                  }
                  if (v32 != v28) {
                    goto LABEL_83;
                  }
                  goto LABEL_88;
                }
                if (!HIBYTE(v52)) {
                  goto LABEL_80;
                }
                p_s1 = &__s1;
                uint64_t v37 = HIBYTE(v52);
                while (*(unsigned __int8 *)p_s1 == *p_dst)
                {
                  p_s1 = (void **)((char *)p_s1 + 1);
                  ++p_dst;
                  if (!--v37) {
                    goto LABEL_80;
                  }
                }
              }
              if (v33 != v28) {
                goto LABEL_81;
              }
              if (v52 < 0)
              {
                char v40 = __s1;
LABEL_88:
                if (memcmp(v40, __s2, v32)) {
                  goto LABEL_83;
                }
                goto LABEL_89;
              }
              if (HIBYTE(v52))
              {
                BOOL v38 = &__s1;
                uint64_t v39 = __s2;
                while (*(unsigned __int8 *)v38 == *v39)
                {
                  BOOL v38 = (void **)((char *)v38 + 1);
                  ++v39;
                  if (!--v30) {
                    goto LABEL_89;
                  }
                }
LABEL_81:
                if ((v31 & 0x80) == 0) {
                  goto LABEL_84;
                }
LABEL_82:
                char v40 = __s1;
LABEL_83:
                operator delete(v40);
                goto LABEL_84;
              }
LABEL_89:
              BOOL v45 = DWORD2(v56) == 1;
              if (v31 < 0) {
                goto LABEL_82;
              }
LABEL_84:
              sub_1002243E8((uint64_t)__p);
              if (!v33)
              {
                char v41 = 0;
                char v13 = 1;
                goto LABEL_94;
              }
              v26 += 408;
              if (v26 == v27) {
                goto LABEL_92;
              }
            }
          }
          BOOL v45 = 0;
          BOOL v48 = 0;
LABEL_92:
          char v13 = v48 && v45;
          char v41 = 1;
LABEL_94:
          char v6 = v46;
          if (SHIBYTE(v81) < 0) {
            operator delete((void *)__dst);
          }
          if (v41) {
LABEL_97:
          }
            char v42 = 1;
          else {
            char v42 = 0;
          }
          if (SHIBYTE(v84) < 0)
          {
            operator delete((void *)v83);
            if (v23) {
              goto LABEL_107;
            }
LABEL_100:
            if (v42)
            {
LABEL_102:
              __p[0] = &v86;
              sub_10070345C((void ***)__p);
              __p[0] = (char *)&v90 + 8;
              sub_10070345C((void ***)__p);
              if (SBYTE7(v90) < 0) {
                operator delete((void *)v89);
              }
              goto LABEL_104;
            }
          }
          else
          {
            if (!v23) {
              goto LABEL_100;
            }
LABEL_107:
            operator delete(v18);
            if (v42) {
              goto LABEL_102;
            }
          }
          char v13 = 0;
          goto LABEL_102;
        }
      }
      __s1 = &v82;
      __uint64_t n = (size_t)"kUuid";
      sub_100048BAC((uint64_t)&__s1, &v79);
      __p[0] = 0;
      __p[1] = 0;
      *(void *)&long long v54 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v54) < 0)
      {
        operator delete(__p[0]);
        if ((v16 & 0x80) == 0) {
          goto LABEL_22;
        }
      }
      else if ((v16 & 0x80) == 0)
      {
LABEL_22:
        unint64_t v17 = *((void *)&__dst + 1);
        BOOL v18 = (void *)__dst;
        v85[0] = v81;
        *(_DWORD *)((char *)v85 + 3) = *(_DWORD *)((char *)&v81 + 3);
        unsigned __int8 v16 = HIBYTE(v81);
        HIBYTE(v81) = 0;
        LOBYTE(__dst) = 0;
        xpc_release(v79);
        goto LABEL_29;
      }
      operator delete(v18);
      goto LABEL_22;
    }
  }
  char v13 = 0;
  return v13 & 1;
}

void sub_100DF52E0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (*(char *)(v24 - 185) < 0) {
    operator delete(*(void **)(v24 - 208));
  }
  if (v23 < 0) {
    operator delete(v22);
  }
  *(void *)(v24 - 240) = v24 - 168;
  sub_10070345C((void ***)(v24 - 240));
  sub_1006FE934(v24 - 144);
  sub_10004D2C8(a11);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF5448(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  if (*a2) {
    uint64_t v7 = sub_100DF6900(0, (uint64_t *)(a1 + 8), *a2);
  }
  else {
    uint64_t v7 = 0;
  }
  sub_10004D2C8(v6);
  return v7;
}

void sub_100DF54BC(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF54D0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (v3 && (id v5 = std::__shared_weak_count::lock(v3)) != 0)
  {
    char v6 = v5;
    uint64_t v7 = *a2;
    if (*a2)
    {
      long long v92 = 0u;
      long long v93 = 0u;
      long long __dst = 0u;
      sub_100DF6878(&__dst, v7);
      uint64_t v88 = 0;
      long long v89 = 0;
      uint64_t v90 = 0;
      sub_100DF755C(&v88, *((void ***)&v92 + 1), (void **)v93, (uint64_t)(v93 - *((void *)&v92 + 1)) >> 3);
      uint64_t v9 = v88;
      uint64_t v8 = v89;
      if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) != v89 - v88) {
        goto LABEL_111;
      }
      long long v86 = 0uLL;
      uint64_t v87 = 0;
      long long v84 = 0uLL;
      uint64_t v85 = 0;
      long long v82 = 0uLL;
      uint64_t v83 = 0;
      if (v88 == v89)
      {
        uint64_t v14 = 0;
        unsigned int v13 = 0;
      }
      else
      {
        do
        {
          xpc_object_t v81 = 0;
          int v10 = *v9;
          xpc_object_t v81 = v10;
          if (v10) {
            xpc_retain(v10);
          }
          else {
            xpc_object_t v81 = xpc_null_create();
          }
          __p[0] = &v81;
          __p[1] = "kActionType";
          sub_100048BAC((uint64_t)__p, &object);
          int v12 = xpc::dyn_cast_or_default((xpc *)&object, 0, v11);
          xpc_release((xpc_object_t)object);
          switch(v12)
          {
            case 1:
              long long v76 = &v81;
              long long v77 = "kUuid";
              sub_100048BAC((uint64_t)&v76, &v78);
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v51 = 0;
              xpc::dyn_cast_or_default();
              if (SBYTE7(v51) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v83) < 0) {
                operator delete((void *)v82);
              }
              long long v82 = object;
              uint64_t v83 = v80;
              HIBYTE(v80) = 0;
              LOBYTE(object) = 0;
              xpc_release(v78);
              break;
            case 3:
              long long v76 = &v81;
              long long v77 = "kUuid";
              sub_100048BAC((uint64_t)&v76, &v78);
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v51 = 0;
              xpc::dyn_cast_or_default();
              if (SBYTE7(v51) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v85) < 0) {
                operator delete((void *)v84);
              }
              long long v84 = object;
              uint64_t v85 = v80;
              HIBYTE(v80) = 0;
              LOBYTE(object) = 0;
              xpc_release(v78);
              break;
            case 2:
              long long v76 = &v81;
              long long v77 = "kUuid";
              sub_100048BAC((uint64_t)&v76, &v78);
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v51 = 0;
              xpc::dyn_cast_or_default();
              if (SBYTE7(v51) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v87) < 0) {
                operator delete((void *)v86);
              }
              long long v86 = object;
              uint64_t v87 = v80;
              HIBYTE(v80) = 0;
              LOBYTE(object) = 0;
              xpc_release(v78);
              break;
          }
          xpc_release(v81);
          ++v9;
        }
        while (v9 != v8);
        unsigned int v13 = HIBYTE(v87);
        uint64_t v14 = *((void *)&v86 + 1);
      }
      uint64_t v16 = (v13 & 0x80u) == 0 ? v13 : v14;
      if (!v16) {
        goto LABEL_103;
      }
      uint64_t v17 = HIBYTE(v85);
      if (v85 < 0) {
        uint64_t v17 = *((void *)&v84 + 1);
      }
      uint64_t v48 = v17;
      if (!v17) {
        goto LABEL_103;
      }
      uint64_t v18 = HIBYTE(v83);
      if (v83 < 0) {
        uint64_t v18 = *((void *)&v82 + 1);
      }
      uint64_t v47 = v18;
      if (v18)
      {
        uint64_t v20 = *(void *)(a1 + 8);
        uint64_t v19 = *(void *)(a1 + 16);
        if (v20 != v19)
        {
          BOOL v41 = 0;
          BOOL v43 = 0;
          BOOL v45 = 0;
          BOOL v21 = (unsigned __int8 *)&v86;
          if ((v13 & 0x80u) != 0) {
            BOOL v21 = (unsigned __int8 *)v86;
          }
          __s2 = v21;
          char v22 = (unsigned __int8 *)v84;
          if (v85 >= 0) {
            char v22 = (unsigned __int8 *)&v84;
          }
          uint64_t v44 = v22;
          char v23 = (unsigned __int8 *)v82;
          if (v83 >= 0) {
            char v23 = (unsigned __int8 *)&v82;
          }
          char v42 = v23;
          while (1)
          {
            uint64_t v75 = 0;
            long long v73 = 0u;
            long long v74 = 0u;
            long long v71 = 0u;
            long long v72 = 0u;
            long long v69 = 0u;
            long long v70 = 0u;
            long long v67 = 0u;
            long long v68 = 0u;
            long long v65 = 0u;
            long long v66 = 0u;
            long long v63 = 0u;
            long long v64 = 0u;
            long long v61 = 0u;
            long long v62 = 0u;
            long long v59 = 0u;
            long long v60 = 0u;
            long long v58 = 0u;
            long long v56 = 0u;
            long long v57 = 0u;
            long long v54 = 0u;
            long long v55 = 0u;
            long long v52 = 0u;
            long long v53 = 0u;
            *(_OWORD *)long long __p = 0u;
            long long v51 = 0u;
            sub_100245B5C((uint64_t)__p, v20);
            long long object = 0uLL;
            uint64_t v80 = 0;
            uint64_t v49 = __p[0];
            if (__p[0]) {
              CFRetain(__p[0]);
            }
            printUuid();
            sub_10012577C((const void **)&v49);
            uint64_t v24 = HIBYTE(v80);
            char v25 = HIBYTE(v80);
            size_t v26 = *((void *)&object + 1);
            uint64_t v27 = v80 >= 0 ? HIBYTE(v80) : *((void *)&object + 1);
            if (v27) {
              break;
            }
LABEL_87:
            if (v25 < 0) {
              goto LABEL_88;
            }
LABEL_90:
            sub_1002243E8((uint64_t)__p);
            if (!v27) {
              goto LABEL_103;
            }
            v20 += 408;
            if (v20 == v19)
            {
              char v15 = v45 && v43 && v41;
              goto LABEL_117;
            }
          }
          if (v27 == v16)
          {
            if (v80 < 0)
            {
              int v36 = (void *)object;
              if (!memcmp((const void *)object, __s2, *((size_t *)&object + 1)))
              {
LABEL_80:
                BOOL v45 = DWORD2(v53) == 1;
                if (v25 < 0) {
                  goto LABEL_88;
                }
                goto LABEL_90;
              }
              if (v26 != v48) {
                goto LABEL_84;
              }
              goto LABEL_83;
            }
            if (!HIBYTE(v80)) {
              goto LABEL_80;
            }
            p_long long object = &object;
            int v29 = __s2;
            uint64_t v30 = HIBYTE(v80);
            while (*(unsigned __int8 *)p_object == *v29)
            {
              p_long long object = (long long *)((char *)p_object + 1);
              ++v29;
              if (!--v30) {
                goto LABEL_80;
              }
            }
          }
          if (v27 != v48) {
            goto LABEL_70;
          }
          if ((v80 & 0x8000000000000000) == 0)
          {
            if (HIBYTE(v80))
            {
              char v31 = &object;
              size_t v32 = v44;
              uint64_t v33 = HIBYTE(v80);
              while (*(unsigned __int8 *)v31 == *v32)
              {
                char v31 = (long long *)((char *)v31 + 1);
                ++v32;
                if (!--v33) {
                  goto LABEL_86;
                }
              }
LABEL_70:
              if (v27 == v47)
              {
                if (v80 < 0)
                {
                  int v36 = (void *)object;
LABEL_94:
                  if (!memcmp(v36, v42, v26))
                  {
LABEL_95:
                    BOOL v38 = DWORD2(v53) == 8 || DWORD2(v53) == 5;
                    BOOL v41 = v38;
                    if ((v25 & 0x80) == 0) {
                      goto LABEL_90;
                    }
LABEL_88:
                    int v36 = (void *)object;
                  }
LABEL_89:
                  operator delete(v36);
                  goto LABEL_90;
                }
                if (!HIBYTE(v80)) {
                  goto LABEL_95;
                }
                uint64_t v34 = &object;
                uint64_t v35 = v42;
                while (*(unsigned __int8 *)v34 == *v35)
                {
                  uint64_t v34 = (long long *)((char *)v34 + 1);
                  ++v35;
                  if (!--v24) {
                    goto LABEL_95;
                  }
                }
              }
              goto LABEL_87;
            }
            goto LABEL_86;
          }
          int v36 = (void *)object;
LABEL_83:
          if (memcmp(v36, v44, v26))
          {
LABEL_84:
            if (v26 == v47) {
              goto LABEL_94;
            }
            goto LABEL_89;
          }
LABEL_86:
          BOOL v43 = DWORD2(v53) == 0;
          goto LABEL_87;
        }
        char v15 = 0;
LABEL_117:
        char v39 = 1;
      }
      else
      {
LABEL_103:
        char v39 = 0;
        char v15 = 1;
      }
      if (SHIBYTE(v83) < 0) {
        operator delete((void *)v82);
      }
      if (SHIBYTE(v85) < 0) {
        operator delete((void *)v84);
      }
      if ((v13 & 0x80) != 0) {
        operator delete((void *)v86);
      }
      if ((v39 & 1) == 0) {
LABEL_111:
      }
        char v15 = 0;
      __p[0] = &v88;
      sub_10070345C((void ***)__p);
      __p[0] = (char *)&v92 + 8;
      sub_10070345C((void ***)__p);
      if (SBYTE7(v92) < 0) {
        operator delete((void *)__dst);
      }
    }
    else
    {
      char v15 = 0;
    }
    sub_10004D2C8(v6);
  }
  else
  {
    char v15 = 0;
  }
  return v15 & 1;
}

void sub_100DF5B20(_Unwind_Exception *a1)
{
  sub_1006FE934(v2 - 144);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

BOOL sub_100DF5C64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (*a2)
  {
    long long v30 = 0u;
    long long v31 = 0u;
    *(_OWORD *)long long __dst = 0u;
    sub_100DF6878(__dst, v7);
    size_t v26 = 0;
    uint64_t v27 = 0;
    uint64_t v28 = 0;
    sub_100DF755C(&v26, *((void ***)&v30 + 1), (void **)v31, (uint64_t)(v31 - *((void *)&v30 + 1)) >> 3);
    if (0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*(void *)(a1 + 16) - *(void *)(a1 + 8)) >> 3) >= 2)
    {
      uint64_t v8 = v26;
      uint64_t v9 = v27;
      if (v26 == v27) {
        goto LABEL_31;
      }
      char v10 = 0;
      while (1)
      {
        xpc_object_t v25 = 0;
        uint64_t v11 = *v8;
        xpc_object_t v25 = v11;
        if (v11) {
          xpc_retain(v11);
        }
        else {
          xpc_object_t v25 = xpc_null_create();
        }
        size_t v32 = &v25;
        uint64_t v33 = "kActionType";
        sub_100048BAC((uint64_t)&v32, object);
        int v13 = xpc::dyn_cast_or_default((xpc *)object, 0, v12);
        xpc_release(object[0]);
        object[0] = 0;
        object[1] = 0;
        uint64_t v24 = 0;
        long long __p = &v25;
        BOOL v21 = "kUuid";
        sub_100048BAC((uint64_t)&__p, v18);
        size_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v34) < 0) {
          operator delete(v32);
        }
        xpc_release(v18[0]);
        if (v13 != 4) {
          goto LABEL_20;
        }
        long long __p = 0;
        BOOL v21 = 0;
        uint64_t v22 = 0;
        v18[0] = &v25;
        v18[1] = "kUuidToMergeInto";
        sub_100048BAC((uint64_t)v18, &v19);
        size_t v32 = 0;
        uint64_t v33 = 0;
        uint64_t v34 = 0;
        xpc::dyn_cast_or_default();
        if (SHIBYTE(v34) < 0) {
          operator delete(v32);
        }
        xpc_release(v19);
        uint64_t v14 = (const char *)HIBYTE(v22);
        int v15 = SHIBYTE(v22);
        if (v22 < 0) {
          uint64_t v14 = v21;
        }
        if (!v14) {
          break;
        }
        char v10 = 1;
        if (SHIBYTE(v22) < 0) {
          goto LABEL_19;
        }
LABEL_20:
        if (SHIBYTE(v24) < 0) {
          operator delete(object[0]);
        }
        xpc_release(v25);
        if (++v8 == v9)
        {
          if (v10)
          {
            BOOL v16 = 1;
            goto LABEL_32;
          }
LABEL_31:
          BOOL v16 = *(unsigned char *)(a1 + 32) != 0;
          goto LABEL_32;
        }
      }
      *(unsigned char *)(a1 + 32) = 1;
      if ((v15 & 0x80000000) == 0) {
        goto LABEL_20;
      }
LABEL_19:
      operator delete(__p);
      goto LABEL_20;
    }
    BOOL v16 = 0;
LABEL_32:
    size_t v32 = (void **)&v26;
    sub_10070345C(&v32);
    size_t v32 = (void **)&v30 + 1;
    sub_10070345C(&v32);
    if (SBYTE7(v30) < 0) {
      operator delete(__dst[0]);
    }
  }
  else
  {
    BOOL v16 = 0;
  }
  sub_10004D2C8(v6);
  return v16;
}

void sub_100DF5F04(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t a10, uint64_t a11, xpc_object_t object, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,xpc_object_t a22,char a23,uint64_t a24,uint64_t a25,char a26)
{
  sub_1006FE934((uint64_t)&a26);
  sub_10004D2C8(v26);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF5FD8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = (std::__shared_weak_count *)a2[1];
  if (!v3) {
    return 0;
  }
  id v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    return 0;
  }
  char v6 = v5;
  uint64_t v7 = *a2;
  if (*a2)
  {
    long long v73 = 0u;
    long long v74 = 0u;
    long long __dst = 0u;
    sub_100DF6878(&__dst, v7);
    long long v69 = 0;
    long long v70 = 0;
    uint64_t v71 = 0;
    sub_100DF755C(&v69, *((void ***)&v73 + 1), (void **)v74, (uint64_t)(v74 - *((void *)&v73 + 1)) >> 3);
    uint64_t v9 = *(void *)(a1 + 8);
    uint64_t v8 = *(void *)(a1 + 16);
    long long v67 = 0uLL;
    uint64_t v68 = 0;
    if (v8 == v9)
    {
      uint64_t v19 = 0;
      goto LABEL_64;
    }
    long long v31 = v6;
    char v10 = v69;
    uint64_t v11 = v70;
    if (v69 == v70)
    {
      uint64_t v18 = 0;
      unsigned int v17 = 0;
      char v12 = 0;
    }
    else
    {
      char v12 = 0;
      do
      {
        xpc_object_t v66 = 0;
        xpc_object_t v66 = *v10;
        if (v66) {
          xpc_retain(v66);
        }
        else {
          xpc_object_t v66 = xpc_null_create();
        }
        __p[0] = &v66;
        __p[1] = "kActionType";
        sub_100048BAC((uint64_t)__p, &v63);
        int v14 = xpc::dyn_cast_or_default((xpc *)&v63, 0, v13);
        xpc_release(v63);
        long long v63 = 0;
        size_t v64 = 0;
        uint64_t v65 = 0;
        *(void *)&long long v61 = &v66;
        *((void *)&v61 + 1) = "kUuid";
        sub_100048BAC((uint64_t)&v61, object);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v34 = 0;
        xpc::dyn_cast_or_default();
        if (SBYTE7(v34) < 0) {
          operator delete(__p[0]);
        }
        xpc_release(object[0]);
        if (v14)
        {
          if (v14 == 3)
          {
            __p[0] = &v66;
            __p[1] = "kOnHold";
            sub_100048BAC((uint64_t)__p, &v61);
            int v16 = xpc::dyn_cast_or_default((xpc *)&v61, 0, v15);
            xpc_release((xpc_object_t)v61);
            if (v16)
            {
              object[0] = &v66;
              object[1] = "kUuid";
              sub_100048BAC((uint64_t)object, &v60);
              __p[0] = 0;
              __p[1] = 0;
              *(void *)&long long v34 = 0;
              xpc::dyn_cast_or_default();
              if (SBYTE7(v34) < 0) {
                operator delete(__p[0]);
              }
              if (SHIBYTE(v68) < 0) {
                operator delete((void *)v67);
              }
              long long v67 = v61;
              uint64_t v68 = v62;
              HIBYTE(v62) = 0;
              LOBYTE(v61) = 0;
              xpc_release(v60);
            }
          }
        }
        else
        {
          char v12 = 1;
        }
        if (SHIBYTE(v65) < 0) {
          operator delete(v63);
        }
        xpc_release(v66);
        ++v10;
      }
      while (v10 != v11);
      unsigned int v17 = HIBYTE(v68);
      uint64_t v18 = *((void *)&v67 + 1);
      uint64_t v9 = *(void *)(a1 + 8);
      uint64_t v8 = *(void *)(a1 + 16);
    }
    if ((v17 & 0x80u) == 0) {
      uint64_t v20 = v17;
    }
    else {
      uint64_t v20 = v18;
    }
    if (v9 != v8)
    {
      BOOL v21 = 0;
      long long v30 = (void *)v67;
      if ((v17 & 0x80u) == 0) {
        uint64_t v22 = &v67;
      }
      else {
        uint64_t v22 = (long long *)v67;
      }
      while (1)
      {
        uint64_t v58 = 0;
        long long v56 = 0u;
        long long v57 = 0u;
        long long v54 = 0u;
        long long v55 = 0u;
        long long v52 = 0u;
        long long v53 = 0u;
        long long v50 = 0u;
        long long v51 = 0u;
        long long v48 = 0u;
        long long v49 = 0u;
        long long v46 = 0u;
        long long v47 = 0u;
        long long v44 = 0u;
        long long v45 = 0u;
        long long v42 = 0u;
        long long v43 = 0u;
        long long v41 = 0u;
        long long v39 = 0u;
        long long v40 = 0u;
        long long v37 = 0u;
        long long v38 = 0u;
        long long v35 = 0u;
        long long v36 = 0u;
        *(_OWORD *)long long __p = 0u;
        long long v34 = 0u;
        sub_100245B5C((uint64_t)__p, v9);
        long long v63 = 0;
        size_t v64 = 0;
        uint64_t v65 = 0;
        size_t v32 = __p[0];
        if (__p[0]) {
          CFRetain(__p[0]);
        }
        printUuid();
        sub_10012577C((const void **)&v32);
        if (v65 >= 0) {
          size_t v23 = HIBYTE(v65);
        }
        else {
          size_t v23 = v64;
        }
        if (v23 && v23 == v20)
        {
          if (v65 < 0)
          {
            uint64_t v27 = v63;
            if (!memcmp(v63, v22, v64)) {
              BOOL v21 = DWORD2(v36) == 0;
            }
            goto LABEL_53;
          }
          if (HIBYTE(v65))
          {
            uint64_t v24 = &v63;
            xpc_object_t v25 = (unsigned __int8 *)v22;
            uint64_t v26 = HIBYTE(v65);
            while (*(unsigned __int8 *)v24 == *v25)
            {
              uint64_t v24 = (void **)((char *)v24 + 1);
              ++v25;
              if (!--v26) {
                goto LABEL_48;
              }
            }
          }
          else
          {
LABEL_48:
            BOOL v21 = DWORD2(v36) == 0;
          }
        }
        if ((v65 & 0x8000000000000000) == 0) {
          goto LABEL_54;
        }
        uint64_t v27 = v63;
LABEL_53:
        operator delete(v27);
LABEL_54:
        sub_1002243E8((uint64_t)__p);
        if (!v23)
        {
          uint64_t v19 = 0;
          char v6 = v31;
          uint64_t v28 = v30;
          if ((v17 & 0x80) != 0) {
LABEL_63:
          }
            operator delete(v28);
          goto LABEL_64;
        }
        v9 += 408;
        if (v9 == v8) {
          goto LABEL_58;
        }
      }
    }
    BOOL v21 = 0;
LABEL_58:
    uint64_t v19 = (v12 & (v20 != 0)) & v21;
    if ((v17 & 0x80) != 0)
    {
      uint64_t v28 = (void *)v67;
      char v6 = v31;
      goto LABEL_63;
    }
    char v6 = v31;
LABEL_64:
    __p[0] = &v69;
    sub_10070345C((void ***)__p);
    __p[0] = (char *)&v73 + 8;
    sub_10070345C((void ***)__p);
    if (SBYTE7(v73) < 0) {
      operator delete((void *)__dst);
    }
  }
  else
  {
    uint64_t v19 = 0;
  }
  sub_10004D2C8(v6);
  return v19;
}

void sub_100DF6434(_Unwind_Exception *a1)
{
  sub_1006FE934(v2 - 144);
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100DF6560(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF65B8(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF6610(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF6668(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF66C0(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF6718(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF6770(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF67C8(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

uint64_t sub_100DF6820(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v3 = (void **)(a1 + 8);
  sub_1002244D8(&v3);
  return a1;
}

void *sub_100DF6878(void *__dst, uint64_t a2)
{
  if (*(char *)(a2 + 79) < 0)
  {
    sub_10004FC84(__dst, *(void **)(a2 + 56), *(void *)(a2 + 64));
  }
  else
  {
    *(_OWORD *)long long __dst = *(_OWORD *)(a2 + 56);
    __dst[2] = *(void *)(a2 + 72);
  }
  __dst[3] = 0;
  __dst[4] = 0;
  __dst[5] = 0;
  return sub_100DF755C(__dst + 3, *(void ***)(a2 + 80), *(void ***)(a2 + 88), (uint64_t)(*(void *)(a2 + 88) - *(void *)(a2 + 80)) >> 3);
}

void sub_100DF68E4(_Unwind_Exception *exception_object)
{
  if (*(char *)(v1 + 23) < 0) {
    operator delete(*(void **)v1);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF6900(int a1, uint64_t *a2, uint64_t a3)
{
  long long v89 = 0u;
  long long v90 = 0u;
  long long __dst = 0u;
  sub_100DF6878(&__dst, a3);
  uint64_t v85 = 0;
  long long v86 = 0;
  uint64_t v87 = 0;
  sub_100DF755C(&v85, *((void ***)&v89 + 1), (void **)v90, (uint64_t)(v90 - *((void *)&v89 + 1)) >> 3);
  uint64_t v5 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v7 = v85;
  char v6 = v86;
  long long v83 = 0uLL;
  uint64_t v84 = 0;
  long long v81 = 0uLL;
  uint64_t v82 = 0;
  long long v79 = 0uLL;
  uint64_t v80 = 0;
  for (uint64_t i = (char *)v86 - (char *)v85; v7 != v6; ++v7)
  {
    xpc_object_t v78 = 0;
    uint64_t v9 = *v7;
    xpc_object_t v78 = v9;
    if (v9) {
      xpc_retain(v9);
    }
    else {
      xpc_object_t v78 = xpc_null_create();
    }
    __p[0] = &v78;
    __p[1] = "kActionType";
    sub_100048BAC((uint64_t)__p, object);
    int v11 = xpc::dyn_cast_or_default((xpc *)object, 0, v10);
    xpc_release(object[0]);
    switch(v11)
    {
      case 1:
        __s1 = &v78;
        __uint64_t n = (size_t)"kUuid";
        sub_100048BAC((uint64_t)&__s1, &v75);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v50 = 0;
        xpc::dyn_cast_or_default();
        if (SBYTE7(v50) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v80) < 0) {
          operator delete((void *)v79);
        }
        long long v79 = *(_OWORD *)object;
        uint64_t v80 = v77;
        HIBYTE(v77) = 0;
        LOBYTE(object[0]) = 0;
        xpc_release(v75);
        break;
      case 3:
        __s1 = &v78;
        __uint64_t n = (size_t)"kUuid";
        sub_100048BAC((uint64_t)&__s1, &v75);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v50 = 0;
        xpc::dyn_cast_or_default();
        if (SBYTE7(v50) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v82) < 0) {
          operator delete((void *)v81);
        }
        long long v81 = *(_OWORD *)object;
        uint64_t v82 = v77;
        HIBYTE(v77) = 0;
        LOBYTE(object[0]) = 0;
        xpc_release(v75);
        break;
      case 2:
        __s1 = &v78;
        __uint64_t n = (size_t)"kUuid";
        sub_100048BAC((uint64_t)&__s1, &v75);
        __p[0] = 0;
        __p[1] = 0;
        *(void *)&long long v50 = 0;
        xpc::dyn_cast_or_default();
        if (SBYTE7(v50) < 0) {
          operator delete(__p[0]);
        }
        if (SHIBYTE(v84) < 0) {
          operator delete((void *)v83);
        }
        long long v83 = *(_OWORD *)object;
        uint64_t v84 = v77;
        HIBYTE(v77) = 0;
        LOBYTE(object[0]) = 0;
        xpc_release(v75);
        break;
    }
    xpc_release(v78);
  }
  unint64_t v12 = 0xFAFAFAFAFAFAFAFBLL * ((v4 - v5) >> 3);
  if (a1)
  {
    uint64_t v13 = HIBYTE(v84);
    int v14 = SHIBYTE(v84);
    unint64_t v15 = *((void *)&v83 + 1);
    if (v84 < 0) {
      uint64_t v13 = *((void *)&v83 + 1);
    }
    int v16 = &v81;
  }
  else
  {
    uint64_t v13 = HIBYTE(v82);
    int v14 = SHIBYTE(v82);
    unint64_t v15 = *((void *)&v81 + 1);
    if (v82 < 0) {
      uint64_t v13 = *((void *)&v81 + 1);
    }
    int v16 = &v83;
  }
  char v17 = 0;
  uint64_t v18 = *((unsigned __int8 *)v16 + 23);
  uint64_t v19 = *((void *)v16 + 1);
  if ((v18 & 0x80u) == 0) {
    uint64_t v19 = v18;
  }
  int v20 = SHIBYTE(v80);
  if (v80 >= 0) {
    uint64_t v21 = HIBYTE(v80);
  }
  else {
    uint64_t v21 = *((void *)&v79 + 1);
  }
  if (v12 >= i >> 3 && v13 && !v19 && v21)
  {
    object[0] = 0;
    object[1] = 0;
    uint64_t v77 = 0;
    uint64_t v22 = &v81;
    if (a1) {
      uint64_t v22 = &v83;
    }
    if (v14 < 0)
    {
      sub_10004FC84(object, *(void **)v22, v15);
    }
    else
    {
      *(_OWORD *)long long object = *v22;
      uint64_t v77 = *((void *)v22 + 2);
    }
    xpc_object_t v23 = (xpc_object_t)HIBYTE(v77);
    if (v77 < 0) {
      xpc_object_t v23 = object[1];
    }
    if (v23)
    {
      uint64_t v24 = *a2;
      uint64_t v25 = a2[1];
      if (*a2 != v25)
      {
        BOOL v26 = 0;
        BOOL v27 = 0;
        uint64_t v28 = (unsigned __int8 *)v79;
        if (v20 >= 0) {
          uint64_t v28 = (unsigned __int8 *)&v79;
        }
        __s2a = v28;
        while (1)
        {
          uint64_t v74 = 0;
          long long v72 = 0u;
          long long v73 = 0u;
          long long v70 = 0u;
          long long v71 = 0u;
          long long v68 = 0u;
          long long v69 = 0u;
          long long v66 = 0u;
          long long v67 = 0u;
          long long v64 = 0u;
          long long v65 = 0u;
          long long v62 = 0u;
          long long v63 = 0u;
          long long v60 = 0u;
          long long v61 = 0u;
          long long v58 = 0u;
          long long v59 = 0u;
          long long v56 = 0u;
          long long v57 = 0u;
          long long v54 = 0u;
          long long v55 = 0u;
          long long v52 = 0u;
          long long v53 = 0u;
          long long v50 = 0u;
          long long v51 = 0u;
          *(_OWORD *)long long __p = 0u;
          sub_100245B5C((uint64_t)__p, v24);
          __s1 = 0;
          __uint64_t n = 0;
          uint64_t v48 = 0;
          long long v45 = __p[0];
          if (__p[0]) {
            CFRetain(__p[0]);
          }
          printUuid();
          sub_10012577C((const void **)&v45);
          uint64_t v29 = HIBYTE(v48);
          char v30 = HIBYTE(v48);
          size_t v31 = __n;
          if (v48 >= 0) {
            size_t v32 = HIBYTE(v48);
          }
          else {
            size_t v32 = __n;
          }
          if (v32)
          {
            xpc_object_t v33 = (xpc_object_t)HIBYTE(v77);
            if (v77 < 0) {
              xpc_object_t v33 = object[1];
            }
            if ((xpc_object_t)v32 == v33)
            {
              if (v77 >= 0) {
                long long v34 = object;
              }
              else {
                long long v34 = (xpc_object_t *)object[0];
              }
              if (v48 < 0)
              {
                long long v39 = __s1;
                if (memcmp(__s1, v34, __n))
                {
                  if (v31 == v21) {
                    goto LABEL_88;
                  }
                  goto LABEL_83;
                }
LABEL_80:
                BOOL v27 = DWORD2(v52) == 0;
                goto LABEL_81;
              }
              if (!HIBYTE(v48)) {
                goto LABEL_80;
              }
              p_s1 = &__s1;
              uint64_t v36 = HIBYTE(v48);
              while (*(unsigned __int8 *)p_s1 == *(unsigned __int8 *)v34)
              {
                p_s1 = (void **)((char *)p_s1 + 1);
                long long v34 = (xpc_object_t *)((char *)v34 + 1);
                if (!--v36) {
                  goto LABEL_80;
                }
              }
            }
            if (v32 == v21)
            {
              if (v48 < 0)
              {
                long long v39 = __s1;
LABEL_88:
                if (!memcmp(v39, __s2a, v31))
                {
LABEL_89:
                  BOOL v26 = DWORD2(v52) == 8 || DWORD2(v52) == 5;
                  if ((v30 & 0x80) == 0) {
                    goto LABEL_84;
                  }
LABEL_82:
                  long long v39 = __s1;
                }
LABEL_83:
                operator delete(v39);
                goto LABEL_84;
              }
              if (!HIBYTE(v48)) {
                goto LABEL_89;
              }
              long long v37 = &__s1;
              long long v38 = __s2a;
              while (*(unsigned __int8 *)v37 == *v38)
              {
                long long v37 = (void **)((char *)v37 + 1);
                ++v38;
                if (!--v29) {
                  goto LABEL_89;
                }
              }
            }
          }
LABEL_81:
          if (v30 < 0) {
            goto LABEL_82;
          }
LABEL_84:
          sub_1002243E8((uint64_t)__p);
          if (!v32) {
            goto LABEL_97;
          }
          v24 += 408;
          if (v24 == v25) {
            goto LABEL_99;
          }
        }
      }
      BOOL v26 = 0;
      BOOL v27 = 0;
LABEL_99:
      char v17 = v27 && v26;
      char v41 = 1;
    }
    else
    {
LABEL_97:
      char v41 = 0;
      char v17 = 1;
    }
    if ((SHIBYTE(v77) & 0x80000000) == 0)
    {
      if (v41) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
    operator delete(object[0]);
    if ((v41 & 1) == 0) {
LABEL_102:
    }
      char v17 = 0;
  }
LABEL_103:
  if (v20 < 0) {
    operator delete((void *)v79);
  }
  if (SHIBYTE(v82) < 0) {
    operator delete((void *)v81);
  }
  if (SHIBYTE(v84) < 0) {
    operator delete((void *)v83);
  }
  __p[0] = &v85;
  sub_10070345C((void ***)__p);
  __p[0] = (char *)&v89 + 8;
  sub_10070345C((void ***)__p);
  if (SBYTE7(v89) < 0) {
    operator delete((void *)__dst);
  }
  return v17 & 1;
}

void sub_100DF6EDC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, void *a15)
{
  if (v15 < 0) {
    operator delete(*(void **)(v16 - 256));
  }
  if (*(char *)(v16 - 201) < 0) {
    operator delete(*(void **)(v16 - 224));
  }
  if (*(char *)(v16 - 169) < 0) {
    operator delete(*(void **)(v16 - 192));
  }
  a15 = (void *)(v16 - 168);
  sub_10070345C((void ***)&a15);
  sub_1006FE934(v16 - 144);
  _Unwind_Resume(a1);
}

void sub_100DF702C(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF7098(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF7104(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF7170(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF71DC(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF7248(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF72B4(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF7320(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void sub_100DF738C(uint64_t a1)
{
  *(void *)a1 = off_101A5D450;
  uint64_t v1 = (void **)(a1 + 8);
  sub_1002244D8(&v1);
  operator delete();
}

void *sub_100DF73F8(void *result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    sub_100DF7480(result, a4);
    __n128 result = (void *)sub_100DF74D8((uint64_t)(v6 + 2), a2, a3, v6[1]);
    v6[1] = result;
  }
  return result;
}

void sub_100DF7460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
  *(void *)(v9 + 8) = v10;
  sub_1002244D8(&a9);
  _Unwind_Resume(a1);
}

char *sub_100DF7480(void *a1, unint64_t a2)
{
  if (a2 >= 0xA0A0A0A0A0A0A1) {
    sub_10006A748();
  }
  __n128 result = (char *)sub_100840B14((uint64_t)(a1 + 2), a2);
  *a1 = result;
  a1[1] = result;
  a1[2] = &result[408 * v4];
  return result;
}

uint64_t sub_100DF74D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (a2 != a3)
  {
    uint64_t v7 = 0;
    do
    {
      sub_100245B5C(a4 + v7, a2 + v7);
      v7 += 408;
    }
    while (a2 + v7 != a3);
    a4 += v7;
  }
  return a4;
}

void sub_100DF7538(_Unwind_Exception *exception_object)
{
  if (v2)
  {
    uint64_t v4 = v1 - 408;
    do
    {
      sub_1002243E8(v4 + v2);
      v2 -= 408;
    }
    while (v2);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100DF755C(void *result, void **a2, void **a3, unint64_t a4)
{
  if (a4)
  {
    char v6 = result;
    __n128 result = sub_10004EF30(result, a4);
    uint64_t v7 = (void **)v6[1];
    while (a2 != a3)
      __n128 result = sub_10070339C(v7++, a2++);
    v6[1] = v7;
  }
  return result;
}

void sub_100DF75D0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, void **a9)
{
}

void sub_100DF75E4(long long *a1@<X1>, uint64_t a2@<X2>, void *a3@<X8>)
{
  char v6 = operator new(0x80uLL);
  sub_100DF7660(v6, a1, a2);
  *a3 = v6 + 3;
  a3[1] = v6;

  sub_1000B3BC8((uint64_t)a3, v6 + 4, (uint64_t)(v6 + 3));
}

void sub_100DF764C(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

void *sub_100DF7660(void *a1, long long *a2, uint64_t a3)
{
  a1[1] = 0;
  a1[2] = 0;
  *a1 = off_101A5D6C8;
  sub_100DF77A0((uint64_t)(a1 + 3), a2, a3);
  return a1;
}

void sub_100DF76A8(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  _Unwind_Resume(a1);
}

void sub_100DF76BC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5D6C8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100DF76DC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5D6C8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100DF7730(uint64_t a1)
{
  uint64_t v3 = (void **)(a1 + 104);
  sub_10070345C(&v3);
  if (*(char *)(a1 + 103) < 0) {
    operator delete(*(void **)(a1 + 80));
  }
  uint64_t v3 = (void **)(a1 + 48);
  sub_1002244D8(&v3);
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 40);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 24));
}

uint64_t sub_100DF77A0(uint64_t a1, long long *a2, uint64_t a3)
{
  long long v9 = *a2;
  uint64_t v10 = *((void *)a2 + 2);
  *((void *)a2 + 1) = 0;
  *((void *)a2 + 2) = 0;
  *(void *)a2 = 0;
  *(_OWORD *)long long __p = *(_OWORD *)a3;
  uint64_t v6 = *(void *)(a3 + 16);
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  long long v7 = *(_OWORD *)(a3 + 24);
  uint64_t v8 = *(void *)(a3 + 40);
  *(void *)(a3 + 16) = 0;
  *(void *)(a3 + 24) = 0;
  *(void *)(a3 + 32) = 0;
  *(void *)(a3 + 40) = 0;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v11, kCtLoggingSystemName, "call.transaction");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v12, &v11);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)a1, (const ctu::OsLogLogger *)v12);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v12);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v11);
  *(_OWORD *)(a1 + 24) = 0u;
  *(void *)(a1 + 40) = 0;
  *(_OWORD *)(a1 + 8) = 0u;
  sub_100DF73F8((void *)(a1 + 24), v9, *((uint64_t *)&v9 + 1), 0xFAFAFAFAFAFAFAFBLL * ((uint64_t)(*((void *)&v9 + 1) - v9) >> 3));
  *(_DWORD *)(a1 + 48) = 10;
  if (SHIBYTE(v6) < 0)
  {
    sub_10004FC84((unsigned char *)(a1 + 56), __p[0], (unint64_t)__p[1]);
  }
  else
  {
    *(_OWORD *)(a1 + 56) = *(_OWORD *)__p;
    *(void *)(a1 + 72) = v6;
  }
  *(void *)(a1 + 80) = 0;
  *(void *)(a1 + 88) = 0;
  *(void *)(a1 + 96) = 0;
  sub_100DF755C((void *)(a1 + 80), (void **)v7, *((void ***)&v7 + 1), (uint64_t)(*((void *)&v7 + 1) - v7) >> 3);
  v11.var0 = (char *)&v7;
  sub_10070345C((void ***)&v11);
  if (SHIBYTE(v6) < 0) {
    operator delete(__p[0]);
  }
  v11.var0 = (char *)&v9;
  sub_1002244D8((void ***)&v11);
  return a1;
}

void sub_100DF791C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15)
{
  *(void *)(v17 - 56) = v16;
  sub_1002244D8((void ***)(v17 - 56));
  uint64_t v19 = (std::__shared_weak_count *)*((void *)v15 + 2);
  if (v19) {
    std::__shared_weak_count::__release_weak(v19);
  }
  ctu::OsLogLogger::~OsLogLogger(v15);
  sub_1006FE934((uint64_t)&a9);
  *(void *)(v17 - 64) = &a15;
  sub_1002244D8((void ***)(v17 - 64));
  _Unwind_Resume(a1);
}

uint64_t sub_100DF79A8(uint64_t a1)
{
  uint64_t v2 = (void *)sub_10084CE94(a1);
  void *v2 = &off_101A5D718;
  sub_100C7125C((uint64_t)(v2 + 28));
  sub_100058DB0(__p, (char *)&unk_10165540B);
  int v7 = -1;
  if (SHIBYTE(v6) < 0)
  {
    sub_10004FC84(&v8, __p[0], (unint64_t)__p[1]);
    int v3 = SHIBYTE(v6);
    *(_DWORD *)(a1 + 264) = v7;
    *(_OWORD *)(a1 + 272) = v8;
    *(void *)(a1 + 288) = v9;
    long long v8 = 0uLL;
    uint64_t v9 = 0;
    if (v3 < 0) {
      operator delete(__p[0]);
    }
  }
  else
  {
    *(_DWORD *)(a1 + 264) = -1;
    *(_OWORD *)(a1 + 272) = *(_OWORD *)__p;
    *(void *)(a1 + 288) = v6;
  }
  *(void *)(a1 + 296) = 0;
  *(_DWORD *)(a1 + 304) = -1;
  return a1;
}

void sub_100DF7A80(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (*(char *)(v15 + 255) < 0) {
    operator delete(*(void **)(v15 + 232));
  }
  sub_100DF7AC4((RestServiceBase *)v15);
  _Unwind_Resume(a1);
}

RestServiceBase *sub_100DF7AC4(RestServiceBase *this)
{
  *(void *)this = off_101A10A98;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 18);
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = (std::__shared_weak_count *)*((void *)this + 16);
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)*((void *)this + 12);
  if (v4) {
    sub_10004D2C8(v4);
  }
  RestServiceBase::~RestServiceBase(this);
  ctu::OsLogLogger::~OsLogLogger((RestServiceBase *)((char *)this + 80));
  sub_100087E88((void *)this + 6);
  return this;
}

void **sub_100DF7B44(void **this)
{
  *this = &off_101A5D718;
  if (*((char *)this + 295) < 0) {
    operator delete(this[34]);
  }
  if (*((char *)this + 255) < 0) {
    operator delete(this[29]);
  }
  *this = off_101A10A98;
  uint64_t v2 = (std::__shared_weak_count *)this[18];
  if (v2) {
    sub_10004D2C8(v2);
  }
  int v3 = (std::__shared_weak_count *)this[16];
  if (v3) {
    sub_10004D2C8(v3);
  }
  uint64_t v4 = (std::__shared_weak_count *)this[12];
  if (v4) {
    sub_10004D2C8(v4);
  }
  RestServiceBase::~RestServiceBase((RestServiceBase *)this);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(this + 10));
  sub_100087E88(this + 6);
  return this;
}

void sub_100DF7C04(void **a1)
{
  sub_100DF7B44(a1);

  operator delete();
}

void sub_100DF7C3C(uint64_t a1)
{
  sub_10084D240((void *)a1);
  sub_100058DB0(__p, "/cc/props/wrm-enable-baseband-state");
  uint64_t v2 = (void **)operator new(0x28uLL);
  std::__shared_weak_count *v2 = off_101A5D788;
  v2[1] = (void *)(a1 + 264);
  void v2[2] = (void *)a1;
  v2[3] = sub_10084D71C;
  v2[4] = 0;
  int v20 = v2;
  ctu::RestModule::observeProperty();
  sub_10003F600(v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/wrm-enable-telephony");
  int v3 = (void **)operator new(0x28uLL);
  *int v3 = off_101A5D808;
  v3[1] = (void *)(a1 + 224);
  void v3[2] = (void *)a1;
  void v3[3] = sub_10084D71C;
  void v3[4] = 0;
  int v20 = v3;
  ctu::RestModule::observeProperty();
  sub_10003F600(v18);
  if (SHIBYTE(v17) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(v18, "/cc/assertions/limit_to_cmas_mode");
  *(_OWORD *)long long __p = *(_OWORD *)v18;
  uint64_t v17 = v19;
  v18[0] = 0;
  v18[1] = 0;
  uint64_t v19 = 0;
  ctu::path_join_impl();
  if (SHIBYTE(v19) < 0) {
    operator delete(v18[0]);
  }
  v18[0] = off_101A5D888;
  v18[1] = (void *)(a1 + 296);
  uint64_t v19 = a1;
  int v20 = v18;
  ctu::RestModule::observeProperty();
  sub_10003F600(v18);
  uint64_t v4 = (uint64_t *)SHIBYTE(v17);
  if ((v4 & 0x80000000) != 0) {
    operator delete(__p[0]);
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(a1 + 8));
  uint64_t v6 = ServiceMap;
  if (v7 < 0)
  {
    long long v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v9 = 5381;
    do
    {
      uint64_t v7 = v9;
      unsigned int v10 = *v8++;
      uint64_t v9 = (33 * v9) ^ v10;
    }
    while (v10);
  }
  std::mutex::lock(ServiceMap);
  v18[0] = (void *)v7;
  OsLogContext v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)v18);
  if (v11)
  {
    uint64_t v13 = v11[3];
    unint64_t v12 = (std::__shared_weak_count *)v11[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v6);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v12);
      char v14 = 0;
      if (!v13) {
        goto LABEL_21;
      }
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v13 = 0;
  }
  std::mutex::unlock(v6);
  unint64_t v12 = 0;
  char v14 = 1;
  if (!v13) {
    goto LABEL_21;
  }
LABEL_18:
  if ((*(unsigned int (**)(uint64_t))(*(void *)v13 + 32))(v13))
  {
    sub_100058DB0(__p, "/cc/prefs-nb/wrm-enable-baseband-state-override");
    uint64_t v15 = (void **)operator new(0x28uLL);
    *uint64_t v15 = off_101A5D908;
    v15[1] = (void *)(a1 + 304);
    unint64_t v15[2] = (void *)a1;
    v15[3] = sub_10084D71C;
    v15[4] = 0;
    int v20 = v15;
    ctu::RestModule::observeProperty();
    sub_10003F600(v18);
    if (SHIBYTE(v17) < 0) {
      operator delete(__p[0]);
    }
  }
LABEL_21:
  if ((v14 & 1) == 0) {
    sub_10004D2C8(v12);
  }
}

void sub_100DF7F90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  sub_10003F600(&a15);
  if (a14 < 0) {
    operator delete(__p);
  }
  if ((v21 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  _Unwind_Resume(a1);
}

void sub_100DF8044(void *a1)
{
  sub_100058DB0(__p, "/cc/props/wrm-enable-baseband-state");
  ctu::RestModule::unobserveProperty();
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/wrm-enable-telephony");
  ctu::RestModule::unobserveProperty();
  if (v3 < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/wrm-enable-baseband-state-override");
  ctu::RestModule::unobserveProperty();
  if (v3 < 0) {
    operator delete(__p[0]);
  }

  sub_10084D830(a1);
}

void sub_100DF8108(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(a10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF8130(uint64_t a1)
{
  uint64_t v2 = *(unsigned int *)(a1 + 216);
  if (v2)
  {
    char v3 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = asString();
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I [    ] evaluation uses forced debug mode: %s", (uint8_t *)&v10, 0xCu);
      return *(unsigned int *)(a1 + 216);
    }
  }
  else
  {
    uint64_t v2 = sub_10084D994(a1);
    uint64_t v4 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      int v10 = 136315138;
      uint64_t v11 = asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Current forced_mode: %s", (uint8_t *)&v10, 0xCu);
    }
    if (*(_DWORD *)(a1 + 204))
    {
      uint64_t v5 = *(NSObject **)(a1 + 80);
      if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v10) = 0;
        _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Emergency online assertion is being requested / held. No Silence assertion possible", (uint8_t *)&v10, 2u);
      }
    }
    else if (*(_DWORD *)(a1 + 300) && (v2 == 5 || !v2))
    {
      int v6 = *(_DWORD *)(a1 + 264);
      if (*(_DWORD *)(a1 + 304) != -1) {
        int v6 = *(_DWORD *)(a1 + 304);
      }
      if (v6 != 2)
      {
        uint64_t v7 = *(NSObject **)(a1 + 80);
        if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v8 = asString();
          int v10 = 136315138;
          uint64_t v11 = v8;
          _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Current forced_mode: %s Overwriting to CMAS mode", (uint8_t *)&v10, 0xCu);
        }
        return 4;
      }
    }
  }
  return v2;
}

void sub_100DF8314(uint64_t a1)
{
  sub_10084DFDC(a1);
  int v2 = *(_DWORD *)(a1 + 108);
  if ((v2 - 1) >= 4)
  {
    if (v2 != 5) {
      return;
    }
    if (!*(_DWORD *)(a1 + 300)) {
      return;
    }
    uint64_t v4 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = ctu::rest::asString();
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I [    ] rejecting LimitToCmasOnly mode anti-assertion while in state: %s", buf, 0xCu);
      if (!*(_DWORD *)(a1 + 300)) {
        return;
      }
    }
    sub_100058DB0(__p, "/cc/assertions/limit_to_cmas_mode");
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    uint64_t v9 = v7;
    __p[1] = 0;
    uint64_t v7 = 0;
    __p[0] = 0;
    ctu::path_join_impl();
    xpc_object_t object = xpc_int64_create(*(unsigned int *)(a1 + 296));
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
  }
  else
  {
    if (*(_DWORD *)(a1 + 300) != 1) {
      return;
    }
    char v3 = *(NSObject **)(a1 + 80);
    if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I [    ] granting LimitToCmasOnly mode anti-assertion", buf, 2u);
      if (*(_DWORD *)(a1 + 300) != 1) {
        return;
      }
    }
    sub_100058DB0(__p, "/cc/assertions/limit_to_cmas_mode");
    *(_OWORD *)long long buf = *(_OWORD *)__p;
    uint64_t v9 = v7;
    __p[1] = 0;
    uint64_t v7 = 0;
    __p[0] = 0;
    ctu::path_join_impl();
    xpc_object_t object = xpc_int64_create(*(unsigned int *)(a1 + 296));
    if (!object) {
      xpc_object_t object = xpc_null_create();
    }
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (SHIBYTE(v9) < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v7) < 0) {
    operator delete(__p[0]);
  }
}

void sub_100DF8538(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *a10, uint64_t a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100DF85C0(_DWORD *a1)
{
  int v2 = a1[66];
  if (a1[76] != -1) {
    int v2 = a1[76];
  }
  if ((v2 - 1) >= 2 && !a1[51] && !a1[47] && !a1[54]) {
    return 1;
  }
  uint64_t result = (*(uint64_t (**)(_DWORD *))(*(void *)a1 + 48))(a1);
  if (!result)
  {
    if (a1[47] == 1)
    {
      return 5;
    }
    else
    {
      int v4 = a1[66];
      if (a1[76] != -1) {
        int v4 = a1[76];
      }
      if (v4 == 1) {
        return 4;
      }
      else {
        return 2;
      }
    }
  }
  return result;
}

void sub_100DF867C(uint64_t a1, uint64_t a2)
{
  int v4 = (const char *)(a1 + 232);
  if (*(char *)(a1 + 255) < 0)
  {
    if (!*(void *)(a1 + 240)) {
      goto LABEL_11;
    }
    int v4 = *(const char **)v4;
  }
  else if (!*(unsigned char *)(a1 + 255))
  {
    goto LABEL_11;
  }
  xpc_object_t v13 = xpc_string_create(v4);
  if (!v13) {
    xpc_object_t v13 = xpc_null_create();
  }
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long __p = 0uLL;
  uint64_t v10 = 0;
  uint64_t v11 = a2;
  unint64_t v12 = __p;
  sub_100035E70((uint64_t)&v11, &v13, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v13);
  xpc_object_t v13 = 0;
LABEL_11:
  uint64_t v5 = (const char *)(a1 + 272);
  if (*(char *)(a1 + 295) < 0)
  {
    if (!*(void *)(a1 + 280)) {
      return;
    }
    uint64_t v5 = *(const char **)v5;
  }
  else if (!*(unsigned char *)(a1 + 295))
  {
    return;
  }
  xpc_object_t v7 = xpc_string_create(v5);
  if (!v7) {
    xpc_object_t v7 = xpc_null_create();
  }
  long long v15 = 0uLL;
  uint64_t v16 = 0;
  ctu::cf::assign();
  *(_OWORD *)long long __p = v15;
  uint64_t v10 = v16;
  uint64_t v11 = a2;
  int v6 = __p;
  if (v16 < 0) {
    int v6 = (void **)__p[0];
  }
  unint64_t v12 = v6;
  sub_100035E70((uint64_t)&v11, &v7, &v8);
  xpc_release(v8);
  xpc_object_t v8 = 0;
  if (SHIBYTE(v10) < 0) {
    operator delete(__p[0]);
  }
  xpc_release(v7);
}

void sub_100DF8824(_Unwind_Exception *a1)
{
  if (*(char *)(v2 - 33) < 0) {
    operator delete(*(void **)(v2 - 56));
  }
  xpc_release(v1);
  _Unwind_Resume(a1);
}

void sub_100DF8884()
{
}

__n128 sub_100DF8898(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5D788;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DF88EC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5D788;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DF8924(uint64_t *a1, void **a2)
{
  sub_100993238(a1[1], a2);
  char v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    char v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100DF89A0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF89E0()
{
}

void sub_100DF89F0()
{
}

__n128 sub_100DF8A04(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5D808;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DF8A58(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5D808;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DF8A90(uint64_t *a1, void **a2)
{
  sub_100992C80(a1[1], a2);
  char v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  uint64_t v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    char v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }

  return v3(v5);
}

uint64_t sub_100DF8B0C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF8B4C()
{
}

void sub_100DF8B5C()
{
}

__n128 sub_100DF8B70(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x18uLL);
  *(void *)uint64_t v2 = off_101A5D888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  return result;
}

__n128 sub_100DF8BBC(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5D888;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100DF8BEC(uint64_t a1)
{
  ctu::rest::read_rest_value();
  uint64_t v2 = *(void *)(a1 + 16);
  char v3 = *(NSObject **)(v2 + 80);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = ctu::rest::asString();
    int v5 = *(_DWORD *)(v2 + 296);
    int v6 = 136315394;
    uint64_t v7 = v4;
    __int16 v8 = 1024;
    int v9 = v5;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I LimitToCmasMode assertion change: %s (%d)", (uint8_t *)&v6, 0x12u);
  }
  sub_10084ED64((void *)v2);
}

uint64_t sub_100DF8CB4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF8CF4()
{
}

void sub_100DF8D04()
{
}

__n128 sub_100DF8D18(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5D908;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100DF8D6C(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5D908;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100DF8DA4(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (int *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    int v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)a2, v6);
    *uint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  int v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    int v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_100DF8E94(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100DF8ED4()
{
}

void sub_100DF8EE0(uint64_t a1, uint64_t a2)
{
  Registry::getRegistryModel(*(Registry **)a2);
  uint64_t v3 = *(void *)(a2 + 8);
  int v5 = *(Registry **)a2;
  uint64_t v6 = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 8), 1uLL, memory_order_relaxed);
  }
  sub_100AE09E4(&v4);
}

void sub_100DFBDF0(_Unwind_Exception *a1)
{
  sub_10004D2C8(v1);
  _Unwind_Resume(a1);
}

void sub_100DFC454(Registry **a1)
{
  Registry::getRegistryModel(*a1);
  sub_1012AE250(&v1);
}

void sub_100E02DD4(_Unwind_Exception *a1)
{
  long long v4 = *(std::__shared_weak_count **)(v2 - 184);
  if (v4) {
    sub_10004D2C8(v4);
  }
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(a1);
}

void sub_100E04638()
{
}

void *sub_100E0464C()
{
  __n128 result = operator new(0x10uLL);
  *__n128 result = off_101A5D988;
  return result;
}

void sub_100E04684(uint64_t a1, void *a2)
{
  *a2 = off_101A5D988;
}

void sub_100E046AC(uint64_t a1, dispatch_workloop_t *a2)
{
}

uint64_t sub_100E046B8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E046F8()
{
}

void sub_100E04708(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04740(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100E04770(uint64_t a1, uint64_t a2)
{
    return a1 + 24;
  else {
    return 0;
  }
}

uint64_t sub_100E047B4(std::mutex *this, uint64_t *a2)
{
  if ((v4 & 0x8000000000000000) != 0)
  {
    int v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      unint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(this);
  uint64_t v8 = *a2;
  if (*a2)
  {
    int v9 = (std::__shared_weak_count *)a2[1];
    if (v9) {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v13 = v8;
    char v14 = v9;
    unint64_t v15 = v4;
    sub_100136784((uint64_t)&this[1], &v15, &v15, &v13);
    uint64_t v11 = v10 & 1;
    if (v14) {
      sub_10004D2C8(v14);
    }
  }
  else
  {
    uint64_t v13 = 0;
    char v14 = 0;
    unint64_t v15 = v4;
    sub_100136C98(&this[1].__m_.__sig, &v15);
    uint64_t v11 = 1;
  }
  std::mutex::unlock(this);
  return v11;
}

void sub_100E04894(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DA68;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E048B4(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DA68;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04908(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04930(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DAB8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04950(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DAB8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E049A4(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E049CC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DB08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E049EC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DB08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04A40(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04A68(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DB58;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04A88(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DB58;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04ADC(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04B04(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DBA8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04B24(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DBA8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04B78(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04BA0(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DBF8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04BC0(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DBF8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04C14(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04C3C(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DC48;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04C5C(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DC48;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04CB0(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04CD8(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DC98;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04CF8(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DC98;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04D4C(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04D74(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DCE8;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04D94(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DCE8;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04DE8(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04E10(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DD38;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04E30(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DD38;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04E84(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04EAC(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DD88;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E04ECC(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5DD88;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E04F20(uint64_t a1)
{
  return (**(uint64_t (***)(void))(a1 + 24))();
}

void sub_100E04F50(uint64_t a1, int a2)
{
  uint64_t v4 = a1 + 32;
  (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)(a1 + 32) + 448))(buf, a1 + 32);
  int v5 = *(uint64_t **)buf;
  if (*(void *)buf)
  {
    (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)v4 + 448))(&v35, v4);
    int v6 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v35 + 56))(v35, 1);
    if (v36) {
      sub_10004D2C8(v36);
    }
  }
  else
  {
    int v6 = 0;
  }
  if (*(void *)&buf[8]) {
    sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
  }
  if (v6)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v5, *(Registry **)(a1 + 80));
    uint64_t v8 = ServiceMap;
    uint64_t v10 = v9;
    if (v9 < 0)
    {
      uint64_t v11 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v12 = 5381;
      do
      {
        uint64_t v10 = v12;
        unsigned int v13 = *v11++;
        uint64_t v12 = (33 * v12) ^ v13;
      }
      while (v13);
    }
    std::mutex::lock(ServiceMap);
    *(void *)long long buf = v10;
    char v14 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
    if (!v14)
    {
      std::mutex::unlock(v8);
      return;
    }
    uint64_t v16 = v14[3];
    unint64_t v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      sub_10004D2C8(v15);
      if (!v16) {
        return;
      }
    }
    else
    {
      std::mutex::unlock(v8);
      if (!v16) {
        return;
      }
    }
    sub_10003E168(buf, (void *)(a1 + 40));
    uint64_t v17 = *(std::__shared_weak_count **)&buf[8];
    if (*(void *)&buf[8])
    {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
      sub_10004D2C8(v17);
    }
    uint64_t v18 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
    {
      int v20 = "disable";
      if (a2) {
        int v20 = "enable";
      }
      *(_DWORD *)long long buf = 136315394;
      *(void *)&uint8_t buf[4] = "checkAndSetWiFiCallingAttachAPN";
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v20;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I %s: %s WiFi Calling Attach APN if needed", buf, 0x16u);
    }
    char v21 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 80));
    uint64_t v22 = v21;
    if (v9 < 0)
    {
      xpc_object_t v23 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v24 = 5381;
      do
      {
        uint64_t v9 = v24;
        unsigned int v25 = *v23++;
        uint64_t v24 = (33 * v24) ^ v25;
      }
      while (v25);
    }
    std::mutex::lock(v21);
    *(void *)long long buf = v9;
    BOOL v26 = sub_10004D37C(&v22[1].__m_.__sig, (unint64_t *)buf);
    if (v26)
    {
      uint64_t v28 = v26[3];
      BOOL v27 = (std::__shared_weak_count *)v26[4];
      if (v27)
      {
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v22);
        atomic_fetch_add_explicit(&v27->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v27);
        char v29 = 0;
LABEL_31:
        uint64_t v30 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
        if (a2) {
          uint64_t v31 = 5;
        }
        else {
          uint64_t v31 = 6;
        }
        sub_10003E168(buf, (void *)(a1 + 40));
        uint64_t v33 = *(void *)buf;
        size_t v32 = *(std::__shared_weak_count **)&buf[8];
        if (*(void *)&buf[8])
        {
          atomic_fetch_add_explicit((atomic_ullong *volatile)(*(void *)&buf[8] + 16), 1uLL, memory_order_relaxed);
          sub_10004D2C8(v32);
        }
        long long v38 = 0;
        long long v34 = operator new(0x20uLL);
        *long long v34 = off_101A5DE38;
        v34[1] = a1;
        _DWORD v34[2] = v33;
        v34[3] = v32;
        long long v38 = v34;
        (*(void (**)(uint64_t, uint64_t, uint64_t, void *))(*(void *)v28 + 64))(v28, v30, v31, v37);
        sub_10003B34C(v37);
        if ((v29 & 1) == 0) {
          sub_10004D2C8(v27);
        }
        if (v17) {
          std::__shared_weak_count::__release_weak(v17);
        }
        return;
      }
    }
    else
    {
      uint64_t v28 = 0;
    }
    std::mutex::unlock(v22);
    BOOL v27 = 0;
    char v29 = 1;
    goto LABEL_31;
  }
}

void sub_100E05328(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va, a3);
  sub_10003B34C(va);
  if (v5)
  {
    if (!v3) {
LABEL_6:
    }
      _Unwind_Resume(a1);
  }
  else
  {
    sub_10004D2C8(v4);
    if (!v3) {
      goto LABEL_6;
    }
  }
  std::__shared_weak_count::__release_weak(v3);
  goto LABEL_6;
}

void sub_100E053D4(PersonalitySpecificImpl *a1, uint64_t a2)
{
  uint64_t v21 = 0;
  uint64_t v22 = 0;
  (*(void (**)(uint64_t *__return_ptr))(*(void *)a1 + 16))(&v21);
  if (v21 && (*(unsigned int (**)(void *))(**((void **)a1 + 21) + 72))(*((void **)a1 + 21)))
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*((void *)a1 + 4) + 448))(buf, (uint64_t)a1 + 32);
    uint64_t v4 = *(uint64_t **)buf;
    if (*(void *)buf)
    {
      (*(void (**)(uint64_t *__return_ptr, uint64_t))(*((void *)a1 + 4) + 448))(&v19, (uint64_t)a1 + 32);
      if ((*(unsigned int (**)(uint64_t, uint64_t))(*(void *)v19 + 56))(v19, 1))
      {
        uint64_t v4 = (uint64_t *)*((unsigned int *)a1 + 158);
        BOOL v5 = v4 == 0;
      }
      else
      {
        BOOL v5 = 0;
      }
      if (v20) {
        sub_10004D2C8(v20);
      }
    }
    else
    {
      BOOL v5 = 0;
    }
    if (*(void *)&buf[8]) {
      sub_10004D2C8(*(std::__shared_weak_count **)&buf[8]);
    }
    if (v5)
    {
      ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *((Registry **)a1 + 10));
      unsigned int v7 = ServiceMap;
      if (v8 < 0)
      {
        uint64_t v9 = (unsigned __int8 *)(v8 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v10 = 5381;
        do
        {
          uint64_t v8 = v10;
          unsigned int v11 = *v9++;
          uint64_t v10 = (33 * v10) ^ v11;
        }
        while (v11);
      }
      std::mutex::lock(ServiceMap);
      *(void *)long long buf = v8;
      uint64_t v12 = sub_10004D37C(&v7[1].__m_.__sig, (unint64_t *)buf);
      if (v12)
      {
        uint64_t v14 = v12[3];
        unsigned int v13 = (std::__shared_weak_count *)v12[4];
        if (v13)
        {
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v7);
          atomic_fetch_add_explicit(&v13->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v13);
          char v15 = 0;
          if (!v14)
          {
LABEL_27:
            if ((v15 & 1) == 0) {
              sub_10004D2C8(v13);
            }
            goto LABEL_29;
          }
LABEL_22:
          uint64_t v16 = *((void *)a1 + 9);
          if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v17 = "enable";
            if (a2) {
              uint64_t v17 = "disable";
            }
            *(_DWORD *)long long buf = 136315394;
            *(void *)&uint8_t buf[4] = "checkAndSendSaDisable";
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = v17;
            _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s: Sending SA %s to BB", buf, 0x16u);
          }
          uint64_t v18 = PersonalitySpecificImpl::simSlot(a1);
          (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)v14 + 424))(v14, v18, a2);
          goto LABEL_27;
        }
      }
      else
      {
        uint64_t v14 = 0;
      }
      std::mutex::unlock(v7);
      unsigned int v13 = 0;
      char v15 = 1;
      if (!v14) {
        goto LABEL_27;
      }
      goto LABEL_22;
    }
  }
LABEL_29:
  if (v22) {
    sub_10004D2C8(v22);
  }
}

void sub_100E056EC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E0575C(uint64_t a1)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 80));
  uint64_t v3 = ServiceMap;
  BOOL v5 = (void *)v4;
  if (v4 < 0)
  {
    int v6 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v7 = 5381;
    do
    {
      BOOL v5 = (void *)v7;
      unsigned int v8 = *v6++;
      uint64_t v7 = (33 * v7) ^ v8;
    }
    while (v8);
  }
  std::mutex::lock(ServiceMap);
  v45[0] = v5;
  uint64_t v9 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)v45);
  if (!v9)
  {
    uint64_t v11 = 0;
LABEL_9:
    std::mutex::unlock(v3);
    uint64_t v10 = 0;
    char v13 = 1;
    if (!v11) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v11 = v9[3];
  uint64_t v10 = (std::__shared_weak_count *)v9[4];
  if (!v10) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v3);
  atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  char v13 = 0;
  if (!v11)
  {
LABEL_7:
    int v14 = 0;
    goto LABEL_20;
  }
LABEL_10:
  char v15 = (std::mutex *)Registry::getServiceMap(v12, *(Registry **)(a1 + 80));
  uint64_t v16 = v15;
  if (v4 < 0)
  {
    uint64_t v17 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v18 = 5381;
    do
    {
      uint64_t v4 = v18;
      unsigned int v19 = *v17++;
      uint64_t v18 = (33 * v18) ^ v19;
    }
    while (v19);
  }
  std::mutex::lock(v15);
  v45[0] = (void *)v4;
  int v20 = sub_10004D37C(&v16[1].__m_.__sig, (unint64_t *)v45);
  if (v20)
  {
    uint64_t v22 = v20[3];
    uint64_t v21 = (std::__shared_weak_count *)v20[4];
    if (v21)
    {
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v16);
      atomic_fetch_add_explicit(&v21->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v21);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v22 = 0;
  }
  std::mutex::unlock(v16);
  uint64_t v21 = 0;
LABEL_18:
  int v14 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v22 + 168))(v22, 5);
  if (v21) {
    sub_10004D2C8(v21);
  }
LABEL_20:
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  if (!v14) {
    return;
  }
  xpc_object_t v23 = (std::mutex *)Registry::getServiceMap(v12, *(Registry **)(a1 + 80));
  uint64_t v24 = v23;
  if (v25 < 0)
  {
    BOOL v26 = (unsigned __int8 *)(v25 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v27 = 5381;
    do
    {
      uint64_t v25 = v27;
      unsigned int v28 = *v26++;
      uint64_t v27 = (33 * v27) ^ v28;
    }
    while (v28);
  }
  std::mutex::lock(v23);
  v45[0] = (void *)v25;
  char v29 = sub_10004D37C(&v24[1].__m_.__sig, (unint64_t *)v45);
  if (!v29)
  {
    std::mutex::unlock(v24);
    return;
  }
  uint64_t v31 = v29[3];
  uint64_t v30 = (std::__shared_weak_count *)v29[4];
  if (v30)
  {
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v24);
    atomic_fetch_add_explicit(&v30->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v30);
    if (!v31)
    {
LABEL_62:
      sub_10004D2C8(v30);
      return;
    }
  }
  else
  {
    std::mutex::unlock(v24);
    if (!v31) {
      return;
    }
  }
  uint64_t v55 = 0;
  long long v53 = 0u;
  long long v54 = 0u;
  long long v52 = 0u;
  long long v50 = 0u;
  long long v51 = 0u;
  long long v48 = 0u;
  long long v49 = 0u;
  long long v46 = 0u;
  long long v47 = 0u;
  *(_OWORD *)long long v45 = 0u;
  uint64_t v32 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(void **__return_ptr, uint64_t, uint64_t))(*(void *)v31 + 1024))(v45, v31, v32);
  if (v47 != -1 && BYTE4(v47))
  {
    uint64_t v33 = (char *)(a1 + 32);
    sub_1012A612C((char *)(a1 + 32), &__p);
    if ((v44 & 0x80u) == 0) {
      size_t v34 = v44;
    }
    else {
      size_t v34 = __n;
    }
    uint64_t v35 = HIBYTE(v46);
    if (v46 < 0) {
      uint64_t v35 = v46;
    }
    if (v34 == v35)
    {
      if (v46 >= 0) {
        uint64_t v36 = &v45[1];
      }
      else {
        uint64_t v36 = (void **)v45[1];
      }
      if ((v44 & 0x80) != 0)
      {
        long long v38 = __p;
        int v39 = memcmp(__p, v36, __n);
        operator delete(v38);
        if (v39) {
          goto LABEL_59;
        }
      }
      else if (v44)
      {
        uint64_t v37 = 0;
        while (*((unsigned __int8 *)&__p + v37) == *((unsigned __int8 *)v36 + v37))
        {
          if (v44 == ++v37) {
            goto LABEL_52;
          }
        }
        goto LABEL_49;
      }
LABEL_52:
      long long v40 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
      {
        sub_1012A612C(v33, &__p);
        char v41 = (v44 & 0x80u) == 0 ? &__p : (void **)__p;
        *(_DWORD *)long long buf = 136315394;
        long long v57 = "handleDataContextIPActivateFailedWithAttachAPN";
        __int16 v58 = 2080;
        long long v59 = v41;
        _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s: Context activation with handover from AttachAPN params failed for APN: %s", buf, 0x16u);
        if ((char)v44 < 0) {
          operator delete(__p);
        }
      }
      BYTE5(v47) = 1;
      goto LABEL_59;
    }
LABEL_49:
    if ((v44 & 0x80) != 0) {
      operator delete(__p);
    }
  }
LABEL_59:
  if (SHIBYTE(v46) < 0) {
    operator delete(v45[1]);
  }
  if (v30) {
    goto LABEL_62;
  }
}

void sub_100E05BC4(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (v19) {
    sub_10004D2C8(v19);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E05C38(uint64_t a1@<X0>, uint64_t **a2@<X8>)
{
  *a2 = 0;
  a2[1] = 0;
  a2[2] = 0;
  (*(void (**)(uint64_t **__return_ptr))(**(void **)(a1 + 168) + 144))(a2);
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 128);
  if (v4)
  {
    BOOL v5 = std::__shared_weak_count::lock(v4);
    if (v5) {
      uint64_t v6 = *(void *)(a1 + 120);
    }
    else {
      uint64_t v6 = 0;
    }
  }
  else
  {
    uint64_t v6 = 0;
    BOOL v5 = 0;
  }
  uint64_t v7 = otherContextType();
  if ((*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v6 + 504))(v6, v7))
  {
    int v8 = 0;
  }
  else
  {
    uint64_t v9 = *(std::__shared_weak_count **)(a1 + 128);
    if (v9)
    {
      uint64_t v9 = std::__shared_weak_count::lock(v9);
      uint64_t v10 = v9;
      if (v9) {
        uint64_t v9 = *(std::__shared_weak_count **)(a1 + 120);
      }
    }
    else
    {
      uint64_t v10 = 0;
    }
    int v8 = ((uint64_t (*)(std::__shared_weak_count *, uint64_t))v9->__vftable[12].__get_deleter)(v9, 1) ^ 1;
    if (v10) {
      sub_10004D2C8(v10);
    }
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (v8)
  {
    uint64_t v11 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Not in a handover, adding SADelete", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 70040;
    sub_10078C71C(a2, (int *)&__p, &__p);
  }
  uint64_t v12 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    sub_100E079FC((uint64_t)*a2, a2 + 1, ",", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v16 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I ForceResetErrorCodes: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100E05E94(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100E05ED8(uint64_t a1, int a2)
{
  if (a2 == 70029)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)0x18D, *(Registry **)(a1 + 80));
    uint64_t v4 = ServiceMap;
    if (v5 < 0)
    {
      uint64_t v6 = (unsigned __int8 *)(v5 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v7 = 5381;
      do
      {
        uint64_t v5 = v7;
        unsigned int v8 = *v6++;
        uint64_t v7 = (33 * v7) ^ v8;
      }
      while (v8);
    }
    std::mutex::lock(ServiceMap);
    std::string __p = (void *)v5;
    uint64_t v9 = sub_10004D37C(&v4[1].__m_.__sig, (unint64_t *)&__p);
    if (!v9)
    {
      std::mutex::unlock(v4);
      return;
    }
    uint64_t v11 = v9[3];
    uint64_t v10 = (std::__shared_weak_count *)v9[4];
    if (v10)
    {
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v4);
      atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v10);
      if (!v11)
      {
LABEL_20:
        sub_10004D2C8(v10);
        return;
      }
    }
    else
    {
      std::mutex::unlock(v4);
      if (!v11) {
        return;
      }
    }
    std::string __p = 0;
    uint64_t v15 = 0;
    uint64_t v16 = 0;
    PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
    PersonalityIdFromSlotIdEx();
    uint64_t v12 = HIBYTE(v16);
    if (v16 < 0) {
      uint64_t v12 = v15;
    }
    if (v12)
    {
      (*(void (**)(uint64_t, void **, void, void))(*(void *)v11 + 48))(v11, &__p, 0, 0);
    }
    else
    {
      char v13 = *(NSObject **)(a1 + 72);
      if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 136315138;
        uint64_t v18 = "handleIdentityDecryptionFailure";
        _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I %s: Personality is not recognized", buf, 0xCu);
      }
    }
    if (SHIBYTE(v16) < 0) {
      operator delete(__p);
    }
    if (v10) {
      goto LABEL_20;
    }
  }
}

void sub_100E060CC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  if (v15) {
    sub_10004D2C8(v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E06110(PersonalitySpecificImpl *a1, int a2, CFStringRef theString)
{
  if (theString)
  {
    xpc_object_t value = 0;
    sub_101334CC8(theString, (uint64_t)a1, (uint64_t)"LocalIdentifier", 0, &value);
    PersonalitySpecificImpl::simSlot(a1);
    PersonalityIdFromSlotIdEx();
    uint64_t v4 = *((void *)a1 + 9);
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = "setLocalIdentifier";
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I %s: Personality is not recognized", buf, 0xCu);
    }
    sub_1000558F4((const void **)&value);
  }
  return 0;
}

void sub_100E06654(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, const void *a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,const void *a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,const void *a32)
{
  if (a16 < 0) {
    operator delete(a11);
  }
  sub_1000558F4(&a17);
  if (a23 < 0) {
    operator delete(__p);
  }
  sub_100030068(&a25);
  if ((v33 & 1) == 0) {
    sub_10004D2C8(v32);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  sub_1000558F4(&a32);
  _Unwind_Resume(a1);
}

uint64_t sub_100E06728(uint64_t a1, const __CFArray *a2, int a3)
{
  if ((a3 - 3) <= 0xFFFFFFFD)
  {
    uint64_t v5 = *(NSObject **)(a1 + 72);
    BOOL v6 = os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT);
    uint64_t result = 0;
    if (!v6) {
      return result;
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = "checkAndSetIPAddressFromAttachAPN";
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = asString();
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N %s: Invalid IP family specified for request: %s", buf, 0x16u);
    return 0;
  }
  ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)(a3 - 3), *(Registry **)(a1 + 80));
  uint64_t v10 = ServiceMap;
  uint64_t v12 = v11;
  if (v11 < 0)
  {
    char v13 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  uint64_t v16 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (!v16)
  {
    uint64_t v18 = 0;
LABEL_12:
    std::mutex::unlock(v10);
    uint64_t v17 = 0;
    char v20 = 1;
    if (!v18) {
      goto LABEL_10;
    }
    goto LABEL_13;
  }
  uint64_t v18 = v16[3];
  uint64_t v17 = (std::__shared_weak_count *)v16[4];
  if (!v17) {
    goto LABEL_12;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v17);
  char v20 = 0;
  if (!v18)
  {
LABEL_10:
    int v21 = 0;
    goto LABEL_23;
  }
LABEL_13:
  uint64_t v22 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 80));
  xpc_object_t v23 = v22;
  if (v11 < 0)
  {
    uint64_t v24 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = 5381;
    do
    {
      uint64_t v11 = v25;
      unsigned int v26 = *v24++;
      uint64_t v25 = (33 * v25) ^ v26;
    }
    while (v26);
  }
  std::mutex::lock(v22);
  *(void *)long long buf = v11;
  uint64_t v27 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)buf);
  if (v27)
  {
    uint64_t v29 = v27[3];
    unsigned int v28 = (std::__shared_weak_count *)v27[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v23);
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v28);
      goto LABEL_21;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  std::mutex::unlock(v23);
  unsigned int v28 = 0;
LABEL_21:
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 168))(v29, 5);
  if (v28) {
    sub_10004D2C8(v28);
  }
LABEL_23:
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  if (!v21) {
    return 0;
  }
  uint64_t v30 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 80));
  uint64_t v31 = v30;
  if (v32 < 0)
  {
    char v33 = (unsigned __int8 *)(v32 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v34 = 5381;
    do
    {
      uint64_t v32 = v34;
      unsigned int v35 = *v33++;
      uint64_t v34 = (33 * v34) ^ v35;
    }
    while (v35);
  }
  std::mutex::lock(v30);
  *(void *)long long buf = v32;
  uint64_t v36 = sub_10004D37C(&v31[1].__m_.__sig, (unint64_t *)buf);
  if (!v36)
  {
    std::mutex::unlock(v31);
    return 0;
  }
  uint64_t v38 = v36[3];
  uint64_t v37 = (std::__shared_weak_count *)v36[4];
  if (!v37)
  {
    std::mutex::unlock(v31);
    if (v38) {
      goto LABEL_35;
    }
    return 0;
  }
  atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v31);
  atomic_fetch_add_explicit(&v37->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v37);
  if (!v38)
  {
LABEL_70:
    sub_10004D2C8(v37);
    return 0;
  }
LABEL_35:
  uint64_t v73 = 0;
  long long v71 = 0u;
  memset(v72, 0, sizeof(v72));
  long long v69 = 0u;
  long long v70 = 0u;
  *(_OWORD *)long long v67 = 0u;
  long long v68 = 0u;
  memset(buf, 0, sizeof(buf));
  uint64_t v39 = PersonalitySpecificImpl::simSlot((PersonalitySpecificImpl *)a1);
  (*(void (**)(uint8_t *__return_ptr, uint64_t, uint64_t))(*(void *)v38 + 1024))(buf, v38, v39);
  if (*(_DWORD *)v67 == -1 || (*(_DWORD *)&v67[8] & a3) == 0)
  {
    long long v45 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v45, OS_LOG_TYPE_DEFAULT))
    {
      long long v46 = "IPv6";
      if (a3 == 1) {
        long long v46 = "IPv4";
      }
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = "checkAndSetIPAddressFromAttachAPN";
      __int16 v60 = 2080;
      long long v61 = (void *)v46;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I %s: Attach LTE parameters not available for %s", __p, 0x16u);
    }
LABEL_67:
    if ((char)buf[31] < 0) {
      operator delete(*(void **)&buf[8]);
    }
    if (!v37) {
      return 0;
    }
    goto LABEL_70;
  }
  if (v67[5]) {
    goto LABEL_60;
  }
  sub_1012A612C((char *)(a1 + 32), __p);
  BOOL v40 = sub_10001D294(__p, &buf[8]);
  if (SHIBYTE(v62) < 0) {
    operator delete(*(void **)__p);
  }
  if (!v40)
  {
LABEL_60:
    long long v47 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v47, OS_LOG_TYPE_DEFAULT))
    {
      sub_1012A612C((char *)(a1 + 32), v57);
      int v48 = SHIBYTE(v58);
      long long v49 = (void **)v57[0];
      int v50 = (char)buf[31];
      long long v51 = *(uint8_t **)&buf[8];
      uint64_t v52 = asStringBool(v67[5]);
      *(void *)&__p[4] = "checkAndSetIPAddressFromAttachAPN";
      long long v53 = &buf[8];
      *(_DWORD *)std::string __p = 136315906;
      if (v50 < 0) {
        long long v53 = v51;
      }
      __int16 v60 = 2080;
      long long v54 = v57;
      if (v48 < 0) {
        long long v54 = v49;
      }
      long long v61 = v54;
      __int16 v62 = 2080;
      long long v63 = v53;
      __int16 v64 = 2080;
      uint64_t v65 = v52;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I %s: APN name mismatch: %s <> %s or previous activation failure: %s", __p, 0x2Au);
      if (SHIBYTE(v58) < 0) {
        operator delete(v57[0]);
      }
    }
    goto LABEL_67;
  }
  v57[0] = 0;
  v57[1] = 0;
  uint64_t v58 = 0;
  if (a3 == 1) {
    char v41 = (const CSIPacketAddress *)&v67[12];
  }
  else {
    char v41 = (const CSIPacketAddress *)((char *)v72 + 4);
  }
  CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v57, v41);
  long long v42 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT))
  {
    CSIPacketAddress::operator std::string();
    long long v43 = "IPv6";
    if (a3 == 1) {
      long long v43 = "IPv4";
    }
    *(void *)&__p[4] = "checkAndSetIPAddressFromAttachAPN";
    unsigned __int8 v44 = (uint8_t *)v55;
    *(_DWORD *)std::string __p = 136315650;
    __int16 v60 = 2080;
    if (v56 >= 0) {
      unsigned __int8 v44 = (uint8_t *)&v55;
    }
    long long v61 = (void *)v43;
    __int16 v62 = 2080;
    long long v63 = v44;
    _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s: WiFi Calling handover with %s: %s", __p, 0x20u);
    if (v56 < 0) {
      operator delete(v55);
    }
  }
  sub_101332840(a2, (CSIPacketAddress *)v57);
  v67[4] = 1;
  if ((char)buf[31] < 0) {
    operator delete(*(void **)&buf[8]);
  }
  if (v37) {
    sub_10004D2C8(v37);
  }
  return 1;
}

void sub_100E06D4C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,void *__p,uint64_t a26,int a27,__int16 a28,char a29,char a30)
{
  if (a30 < 0) {
    operator delete(__p);
  }
  if (v30) {
    sub_10004D2C8(v30);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100E06DE0@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *(NSObject **)(a1 + 72);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    int v5 = 136315138;
    BOOL v6 = "getDefaultInterfaceName";
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#N %s: Wi-Fi interface not set, using en0 for now", (uint8_t *)&v5, 0xCu);
  }
  return sub_100058DB0(a2, "en0");
}

void sub_100E06E94(uint64_t a1, int a2, unsigned __int8 *a3, uint64_t a4, CSIPacketAddress *a5)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 80));
  uint64_t v10 = ServiceMap;
  uint64_t v12 = v11;
  if (v11 < 0)
  {
    char v13 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v14 = 5381;
    do
    {
      uint64_t v12 = v14;
      unsigned int v15 = *v13++;
      uint64_t v14 = (33 * v14) ^ v15;
    }
    while (v15);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v12;
  uint64_t v16 = sub_10004D37C(&v10[1].__m_.__sig, (unint64_t *)buf);
  if (!v16)
  {
    uint64_t v18 = 0;
LABEL_9:
    std::mutex::unlock(v10);
    uint64_t v17 = 0;
    char v20 = 1;
    if (!v18) {
      goto LABEL_7;
    }
    goto LABEL_10;
  }
  uint64_t v18 = v16[3];
  uint64_t v17 = (std::__shared_weak_count *)v16[4];
  if (!v17) {
    goto LABEL_9;
  }
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v10);
  atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v17);
  char v20 = 0;
  if (!v18)
  {
LABEL_7:
    int v21 = 0;
    goto LABEL_20;
  }
LABEL_10:
  uint64_t v22 = (std::mutex *)Registry::getServiceMap(v19, *(Registry **)(a1 + 80));
  xpc_object_t v23 = v22;
  if (v11 < 0)
  {
    uint64_t v24 = (unsigned __int8 *)(v11 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v25 = 5381;
    do
    {
      uint64_t v11 = v25;
      unsigned int v26 = *v24++;
      uint64_t v25 = (33 * v25) ^ v26;
    }
    while (v26);
  }
  std::mutex::lock(v22);
  *(void *)long long buf = v11;
  uint64_t v27 = sub_10004D37C(&v23[1].__m_.__sig, (unint64_t *)buf);
  if (v27)
  {
    uint64_t v29 = v27[3];
    unsigned int v28 = (std::__shared_weak_count *)v27[4];
    if (v28)
    {
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v23);
      atomic_fetch_add_explicit(&v28->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v28);
      goto LABEL_18;
    }
  }
  else
  {
    uint64_t v29 = 0;
  }
  std::mutex::unlock(v23);
  unsigned int v28 = 0;
LABEL_18:
  int v21 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v29 + 168))(v29, 5);
  if (v28) {
    sub_10004D2C8(v28);
  }
LABEL_20:
  if ((v20 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  if (v21)
  {
    memset(v66, 0, sizeof(v66));
    CSIPacketAddress::CSIPacketAddress((CSIPacketAddress *)v66);
    std::string __p = 0;
    uint64_t v64 = 0;
    uint64_t v65 = 0;
    sub_1012A612C((char *)(a1 + 32), &__p);
    uint64_t v30 = *(NSObject **)(a1 + 72);
    if (os_log_type_enabled(v30, OS_LOG_TYPE_DEFAULT))
    {
      if ((a3[23] & 0x80u) == 0) {
        uint64_t v31 = a3;
      }
      else {
        uint64_t v31 = *(unsigned __int8 **)a3;
      }
      p_p = &__p;
      if (v65 < 0) {
        p_p = (void **)__p;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = "attachApnChanged";
      __int16 v68 = 2080;
      long long v69 = (void **)v31;
      __int16 v70 = 2080;
      long long v71 = p_p;
      _os_log_impl((void *)&_mh_execute_header, v30, OS_LOG_TYPE_DEFAULT, "#I %s: AttachAPN parameters: apnName: %s, techApn: %s", buf, 0x20u);
    }
    if (a2 == -1) {
      goto LABEL_38;
    }
    size_t v33 = v65 >= 0 ? HIBYTE(v65) : v64;
    size_t v34 = a3[23];
    size_t v35 = (v34 & 0x80u) == 0 ? a3[23] : *((void *)a3 + 1);
    if (v33 > v35) {
      goto LABEL_38;
    }
    if ((v34 & 0x80) != 0)
    {
      if (v33 != -1)
      {
        if (*((void *)a3 + 1) >= v33) {
          size_t v38 = v33;
        }
        else {
          size_t v38 = *((void *)a3 + 1);
        }
        a3 = *(unsigned __int8 **)a3;
LABEL_54:
        if (v65 >= 0) {
          uint64_t v39 = &__p;
        }
        else {
          uint64_t v39 = __p;
        }
        int v40 = memcmp(a3, v39, v38);
        if (v38 != v33 || v40)
        {
LABEL_38:
          uint64_t v36 = *(NSObject **)(a1 + 72);
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT)) {
            goto LABEL_41;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "attachApnChanged";
          uint64_t v37 = "#I %s: AttachAPN parameters either not valid or not applicable, ignoring";
          goto LABEL_40;
        }
        if ((*(_DWORD *)(a1 + 224) & 0xFFFFFFFE) != 2)
        {
          uint64_t v36 = *(NSObject **)(a1 + 72);
          if (!os_log_type_enabled(v36, OS_LOG_TYPE_DEFAULT))
          {
LABEL_41:
            if (SHIBYTE(v65) < 0) {
              operator delete(__p);
            }
            return;
          }
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "attachApnChanged";
          uint64_t v37 = "#I %s: Context is not active or activating, ignoring";
LABEL_40:
          _os_log_impl((void *)&_mh_execute_header, v36, OS_LOG_TYPE_DEFAULT, v37, buf, 0xCu);
          goto LABEL_41;
        }
        if (CSIPacketAddress::isZeroIP((CSIPacketAddress *)(a1 + 328))
          && CSIPacketAddress::isZeroIP((CSIPacketAddress *)(a1 + 256)))
        {
          char v41 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v41, OS_LOG_TYPE_DEFAULT))
          {
            CSIPacketAddress::operator std::string();
            CSIPacketAddress::operator std::string();
            long long v42 = v61;
            if (v62 < 0) {
              long long v42 = (void **)v61[0];
            }
            if (v60 >= 0) {
              long long v43 = v59;
            }
            else {
              long long v43 = (void **)v59[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "attachApnChanged";
            __int16 v68 = 2080;
            long long v69 = v42;
            __int16 v70 = 2080;
            long long v71 = v43;
            unsigned __int8 v44 = "#I %s: Context is either still connecting or has no IP address assigned yet, while AttachAPN already h"
                  "as one: IPv4: %s, IPv6: %s";
            long long v45 = v41;
LABEL_96:
            _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, v44, buf, 0x20u);
            if (v60 < 0) {
              operator delete(v59[0]);
            }
            if (v62 < 0) {
              operator delete(v61[0]);
            }
          }
        }
        else
        {
          if ((CSIPacketAddress::isZeroIP((CSIPacketAddress *)(a1 + 328)) & 1) != 0
            || (CSIPacketAddress::isLinkLocal(a5) & 1) == 0
            && (CSIPacketAddress::hasSamePrefix((CSIPacketAddress *)(a1 + 328), a5) & 1) != 0)
          {
            if ((CSIPacketAddress::isZeroIP((CSIPacketAddress *)(a1 + 256)) & 1) != 0
              || (CSIPacketAddress::operator==() & 1) != 0)
            {
              long long v46 = *(NSObject **)(a1 + 72);
              if (os_log_type_enabled(v46, OS_LOG_TYPE_DEFAULT))
              {
                *(_DWORD *)long long buf = 136315138;
                *(void *)&uint8_t buf[4] = "attachApnChanged";
                _os_log_impl((void *)&_mh_execute_header, v46, OS_LOG_TYPE_DEFAULT, "#I %s: AttachAPN parameters compatible with this context, ignoring", buf, 0xCu);
              }
              long long v47 = *(std::__shared_weak_count **)(a1 + 128);
              if (v47)
              {
                int v48 = std::__shared_weak_count::lock(v47);
                if (v48) {
                  uint64_t v49 = *(void *)(a1 + 120);
                }
                else {
                  uint64_t v49 = 0;
                }
              }
              else
              {
                uint64_t v49 = 0;
                int v48 = 0;
              }
              (*(void (**)(uint64_t *__return_ptr, uint64_t))(*(void *)a1 + 16))(&v57, a1);
              (*(void (**)(uint64_t, uint64_t, uint64_t *))(*(void *)v49 + 328))(v49, 1, &v57);
              if (v58) {
                sub_10004D2C8(v58);
              }
              if (v48) {
                sub_10004D2C8(v48);
              }
              goto LABEL_41;
            }
            long long v53 = *(NSObject **)(a1 + 72);
            if (!os_log_type_enabled(v53, OS_LOG_TYPE_DEFAULT)) {
              goto LABEL_100;
            }
            CSIPacketAddress::operator std::string();
            CSIPacketAddress::operator std::string();
            long long v54 = v61;
            if (v62 < 0) {
              long long v54 = (void **)v61[0];
            }
            if (v60 >= 0) {
              uint64_t v55 = v59;
            }
            else {
              uint64_t v55 = (void **)v59[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "attachApnChanged";
            __int16 v68 = 2080;
            long long v69 = v54;
            __int16 v70 = 2080;
            long long v71 = v55;
            unsigned __int8 v44 = "#I %s: Context has IPv4 address incompatible with AttachAPN address: context: %s, attachAPN: %s";
            long long v45 = v53;
            goto LABEL_96;
          }
          int v50 = *(NSObject **)(a1 + 72);
          if (os_log_type_enabled(v50, OS_LOG_TYPE_DEFAULT))
          {
            CSIPacketAddress::operator std::string();
            CSIPacketAddress::operator std::string();
            long long v51 = v61;
            if (v62 < 0) {
              long long v51 = (void **)v61[0];
            }
            if (v60 >= 0) {
              uint64_t v52 = v59;
            }
            else {
              uint64_t v52 = (void **)v59[0];
            }
            *(_DWORD *)long long buf = 136315650;
            *(void *)&uint8_t buf[4] = "attachApnChanged";
            __int16 v68 = 2080;
            long long v69 = v51;
            __int16 v70 = 2080;
            long long v71 = v52;
            unsigned __int8 v44 = "#I %s: Context has IPv6 address incompatible with AttachAPN address: context: %s, attachAPN: %s";
            long long v45 = v50;
            goto LABEL_96;
          }
        }
LABEL_100:
        char v56 = *(NSObject **)(a1 + 72);
        if (os_log_type_enabled(v56, OS_LOG_TYPE_DEFAULT))
        {
          *(_DWORD *)long long buf = 136315138;
          *(void *)&uint8_t buf[4] = "attachApnChanged";
          _os_log_impl((void *)&_mh_execute_header, v56, OS_LOG_TYPE_DEFAULT, "#I %s: AttachAPN parameters became incompatible with this context, treat it as network disconnected", buf, 0xCu);
        }
        sub_10133D58C(a1, *(_DWORD *)(a1 + 224), 80012);
        goto LABEL_41;
      }
    }
    else if (v33 != -1)
    {
      if (v34 >= v33) {
        size_t v38 = v33;
      }
      else {
        size_t v38 = a3[23];
      }
      goto LABEL_54;
    }
    sub_1000C14D8();
  }
}

void sub_100E07650(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27)
{
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E07708(void *a1, int a2, unsigned __int8 *a3, uint64_t a4, CSIPacketAddress *a5)
{
}

void *sub_100E07730(void *a1)
{
  *a1 = off_101A5DE38;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E0777C(void *a1)
{
  *a1 = off_101A5DE38;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E077E8(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_101A5DE38;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E0784C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5DE38;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E0788C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E0789C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E078DC(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      int v5 = v4;
      if (a1[2])
      {
        BOOL v6 = *(NSObject **)(v3 + 72);
        if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
        {
          int v7 = 136315138;
          unsigned int v8 = "operator()";
          _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s: checkAndSetWiFiCallingAttachAPN: new type is pushed", (uint8_t *)&v7, 0xCu);
        }
      }
      sub_10004D2C8(v5);
    }
  }
}

uint64_t sub_100E079B0(uint64_t a1, uint64_t a2)
{
    return a1 + 8;
  else {
    return 0;
  }
}

_UNKNOWN **sub_100E079F0()
{
}

void sub_100E079FC(uint64_t a1@<X0>, void *a2@<X1>, const char *a3@<X2>, std::string *a4@<X8>)
{
  a4->__r_.__value_.__r.__words[0] = 0;
  a4->__r_.__value_.__l.__size_ = 0;
  a4->__r_.__value_.__r.__words[2] = 0;
  if ((void *)a1 != a2)
  {
    BOOL v6 = (void *)a1;
    std::to_string(&v16, *(_DWORD *)(a1 + 28));
    unsigned int v8 = (void *)v6[1];
    *a4 = v16;
    if (v8)
    {
      do
      {
        uint64_t v9 = v8;
        unsigned int v8 = (void *)*v8;
      }
      while (v8);
    }
    else
    {
      do
      {
        uint64_t v9 = (void *)v6[2];
        BOOL v10 = *v9 == (void)v6;
        BOOL v6 = v9;
      }
      while (!v10);
    }
    if (v9 != a2)
    {
      do
      {
        size_t v11 = strlen(a3);
        std::string::append(a4, a3, v11);
        std::to_string(&v16, *((_DWORD *)v9 + 7));
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          uint64_t v12 = &v16;
        }
        else {
          uint64_t v12 = (std::string *)v16.__r_.__value_.__r.__words[0];
        }
        if ((v16.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
          std::string::size_type size = HIBYTE(v16.__r_.__value_.__r.__words[2]);
        }
        else {
          std::string::size_type size = v16.__r_.__value_.__l.__size_;
        }
        std::string::append(a4, (const std::string::value_type *)v12, size);
        if (SHIBYTE(v16.__r_.__value_.__r.__words[2]) < 0) {
          operator delete(v16.__r_.__value_.__l.__data_);
        }
        uint64_t v14 = (void *)v9[1];
        if (v14)
        {
          do
          {
            unsigned int v15 = v14;
            uint64_t v14 = (void *)*v14;
          }
          while (v14);
        }
        else
        {
          do
          {
            unsigned int v15 = (void *)v9[2];
            BOOL v10 = *v15 == (void)v9;
            uint64_t v9 = v15;
          }
          while (!v10);
        }
        uint64_t v9 = v15;
      }
      while (v15 != a2);
    }
  }
}

void sub_100E07B30(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (*(char *)(v15 + 23) < 0) {
    operator delete(*(void **)v15);
  }
  _Unwind_Resume(exception_object);
}

uint64_t NetworkEmergencyNumbers::create@<X0>(capabilities::ct *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = capabilities::ct::getRadioModuleType(a1);
  if (result == 2)
  {
    memset(v4, 0, sizeof(v4));
    sub_100919420(v4);
    operator new();
  }
  *a2 = 0;
  a2[1] = 0;
  return result;
}

void sub_100E07C74(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, void **a16)
{
  a16 = (void **)&a13;
  sub_100047F64(&a16);
  _Unwind_Resume(a1);
}

void *NetworkEmergencyNumbers::NetworkEmergencyNumbers(void *a1, void *a2, NSObject **a3, long long **a4, uint64_t *a5)
{
  uint64_t v9 = *a3;
  dispatch_object_t object = v9;
  if (v9) {
    dispatch_retain(v9);
  }
  BOOL v10 = (std::__shared_weak_count *)a5[1];
  uint64_t v12 = *a5;
  char v13 = v10;
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  }
  v15[0] = off_101999E18;
  v15[1] = sub_100E07EAC;
  v15[3] = v15;
  sub_1009198DC((uint64_t)a1, a2, &object, a4, "NetworkEmergencyNumbers", "call.em.Network", &v12, (uint64_t)v15);
  sub_10008863C(v15);
  if (v13) {
    std::__shared_weak_count::__release_weak(v13);
  }
  if (object) {
    dispatch_release(object);
  }
  *a1 = off_101A5DEB8;
  a1[42] = 0;
  a1[43] = 0;
  a1[40] = a1 + 41;
  a1[41] = 0;
  a1[44] = 0;
  a1[45] = 0;
  sub_1000FE9CC(a1 + 46, (uint64_t)&rest::kDefaultBundles);
  sub_1000FE9CC(a1 + 49, (uint64_t)&rest::kDefaultBundles);
  return a1;
}

void sub_100E07E3C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, std::__shared_weak_count *a11, dispatch_object_t object, uint64_t a13, char a14)
{
  sub_100087F94(v15, *(void **)(v14 + 376));
  a13 = v14 + 344;
  sub_10008A88C((void ***)&a13);
  sub_10003FB28(v14 + 320, *(void **)(v14 + 328));
  sub_10091A030(v14);
  _Unwind_Resume(a1);
}

const char *sub_100E07EAC(int a1)
{
  uint64_t v1 = "call.em.Network.?";
  if (a1 == 2) {
    uint64_t v1 = "call.em.Network.2";
  }
  if (a1 == 1) {
    return "call.em.Network.1";
  }
  else {
    return v1;
  }
}

void sub_100E07ED8(uint64_t a1)
{
  *(void *)a1 = off_101A5DEB8;
  sub_100087F94(a1 + 392, *(void **)(a1 + 400));
  sub_100087F94(a1 + 368, *(void **)(a1 + 376));
  uint64_t v2 = (void **)(a1 + 344);
  sub_10008A88C(&v2);
  sub_10003FB28(a1 + 320, *(void **)(a1 + 328));
  sub_10091A030(a1);
}

void sub_100E07F5C(uint64_t a1)
{
  sub_100E07ED8(a1);

  operator delete();
}

uint64_t sub_100E07F94(void *a1, NSObject **a2)
{
  uint64_t v3 = *a2;
  dispatch_group_t group = *a2;
  if (*a2)
  {
    dispatch_retain(v3);
    dispatch_group_enter(v3);
  }
  sub_10091A24C((unint64_t)a1);
  if (group)
  {
    dispatch_group_leave(group);
    dispatch_release(group);
  }
  sub_100058DB0(__p, "/cc/props/last_visible_plmns");
  uint64_t v4 = operator new(0x28uLL);
  *uint64_t v4 = off_101A5E010;
  v4[1] = a1 + 40;
  void v4[2] = a1;
  uint64_t v4[3] = sub_100004AD8;
  v4[4] = 0;
  char v13 = v4;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/sims_in_use");
  int v5 = operator new(0x28uLL);
  *int v5 = off_101A5E090;
  v5[1] = a1 + 43;
  _DWORD v5[2] = a1;
  v5[3] = sub_100E09018;
  v5[4] = 0;
  char v13 = v5;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/carrier_bundles");
  BOOL v6 = operator new(0x28uLL);
  *BOOL v6 = off_101A5E110;
  v6[1] = a1 + 46;
  void v6[2] = a1;
  void v6[3] = sub_100E09554;
  v6[4] = 0;
  char v13 = v6;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/operator_bundles");
  int v7 = operator new(0x28uLL);
  *int v7 = off_101A5E190;
  v7[1] = a1 + 49;
  void v7[2] = a1;
  void v7[3] = sub_100E096E4;
  v7[4] = 0;
  char v13 = v7;
  ctu::RestModule::observeProperty();
  sub_10003F600(v12);
  if (SHIBYTE(v15) < 0) {
    operator delete(__p[0]);
  }
  unsigned int v8 = a1 + 33;
  v12[0] = off_101A5E210;
  v12[1] = a1 + 24;
  char v13 = v12;
  if (v12 != a1 + 33)
  {
    uint64_t v9 = (void *)a1[36];
    if (v9 == v8)
    {
      __p[1] = a1 + 24;
      uint64_t v15 = 0;
      char v13 = 0;
      __p[0] = off_101A5E210;
      (*(void (**)(void *, void *))(*v8 + 24))(a1 + 33, v12);
      (*(void (**)(void))(*(void *)a1[36] + 32))(a1[36]);
      a1[36] = 0;
      char v13 = v12;
      (*((void (**)(void **, void *))__p[0] + 3))(__p, a1 + 33);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      a1[33] = off_101A5E210;
      a1[34] = a1 + 24;
      char v13 = v9;
    }
    a1[36] = v8;
  }
  sub_10091E864(v12);
  uint64_t result = a1[36];
  if (result) {
    return (*(uint64_t (**)(uint64_t, void *))(*(void *)result + 48))(result, a1 + 37);
  }
  return result;
}

void sub_100E0839C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_group_t group, char a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, uint64_t a16, int a17, __int16 a18, char a19, char a20)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E0841C(void *a1)
{
  sub_10091AB98((uint64_t)a1);
  int DefaultEmergencyNumberList = capabilities::ct::getDefaultEmergencyNumberList(v2);
  if (DefaultEmergencyNumberList)
  {
    if (DefaultEmergencyNumberList == 1) {
      int v4 = 6;
    }
    else {
      int v4 = 0;
    }
    if (DefaultEmergencyNumberList == 2) {
      unsigned int v5 = 7;
    }
    else {
      unsigned int v5 = v4;
    }
    int v96 = 0;
    uint64_t v97 = 0;
    unint64_t v98 = 0;
    sub_100058DB0(__p, "911");
    BOOL v105 = &v98;
    BOOL v6 = (void **)sub_10004812C((uint64_t)&v98, 1uLL);
    uint64_t v101 = v6;
    char v102 = v6;
    int v104 = &v6[3 * v7];
    long long v8 = *(_OWORD *)__p;
    void v6[2] = v100;
    *(_OWORD *)BOOL v6 = v8;
    __p[1] = 0;
    uint64_t v100 = 0;
    __p[0] = 0;
    uint64_t v103 = (uint64_t (*)(void))(v6 + 3);
    sub_100048204((uint64_t *)&v96, &v101);
    uint64_t v9 = v97;
    sub_100048174((uint64_t)&v101);
    uint64_t v97 = v9;
    if (SHIBYTE(v100) < 0) {
      operator delete(__p[0]);
    }
    sub_100058DB0(__p, "112");
    BOOL v10 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v12 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v13 = v12 + 1;
      if (v12 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v13) {
        unint64_t v13 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v14 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v14 = v13;
      }
      BOOL v105 = &v98;
      if (v14) {
        uint64_t v15 = (void **)sub_10004812C((uint64_t)&v98, v14);
      }
      else {
        uint64_t v15 = 0;
      }
      std::string v16 = &v15[3 * v12];
      uint64_t v101 = v15;
      char v102 = v16;
      int v104 = &v15[3 * v14];
      long long v17 = *(_OWORD *)__p;
      void v16[2] = v100;
      *(_OWORD *)std::string v16 = v17;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v16 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      uint64_t v18 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v18;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v11 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *BOOL v10 = v11;
      uint64_t v97 = (char *)v10 + 24;
    }
    sub_100058DB0(__p, "000");
    unsigned int v19 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v21 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v22 = v21 + 1;
      if (v21 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v22) {
        unint64_t v22 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v23 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v23 = v22;
      }
      BOOL v105 = &v98;
      if (v23) {
        uint64_t v24 = (void **)sub_10004812C((uint64_t)&v98, v23);
      }
      else {
        uint64_t v24 = 0;
      }
      uint64_t v25 = &v24[3 * v21];
      uint64_t v101 = v24;
      char v102 = v25;
      int v104 = &v24[3 * v23];
      long long v26 = *(_OWORD *)__p;
      uint64_t v25[2] = v100;
      *(_OWORD *)uint64_t v25 = v26;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v25 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      uint64_t v27 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v27;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v20 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      _OWORD *v19 = v20;
      uint64_t v97 = (char *)v19 + 24;
    }
    sub_100058DB0(__p, "08");
    unsigned int v28 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v30 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v31 = v30 + 1;
      if (v30 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v31) {
        unint64_t v31 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v32 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v32 = v31;
      }
      BOOL v105 = &v98;
      if (v32) {
        size_t v33 = (void **)sub_10004812C((uint64_t)&v98, v32);
      }
      else {
        size_t v33 = 0;
      }
      size_t v34 = &v33[3 * v30];
      uint64_t v101 = v33;
      char v102 = v34;
      int v104 = &v33[3 * v32];
      long long v35 = *(_OWORD *)__p;
      _DWORD v34[2] = v100;
      *(_OWORD *)size_t v34 = v35;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v34 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      uint64_t v36 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v36;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v29 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *unsigned int v28 = v29;
      uint64_t v97 = (char *)v28 + 24;
    }
    sub_100058DB0(__p, "110");
    uint64_t v37 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v39 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v40 = v39 + 1;
      if (v39 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v40) {
        unint64_t v40 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v41 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v41 = v40;
      }
      BOOL v105 = &v98;
      if (v41) {
        long long v42 = (void **)sub_10004812C((uint64_t)&v98, v41);
      }
      else {
        long long v42 = 0;
      }
      long long v43 = &v42[3 * v39];
      uint64_t v101 = v42;
      char v102 = v43;
      int v104 = &v42[3 * v41];
      long long v44 = *(_OWORD *)__p;
      v43[2] = v100;
      *(_OWORD *)long long v43 = v44;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v43 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v45 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v45;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v38 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *uint64_t v37 = v38;
      uint64_t v97 = (char *)v37 + 24;
    }
    sub_100058DB0(__p, "999");
    long long v46 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v48 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v49 = v48 + 1;
      if (v48 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v49) {
        unint64_t v49 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v50 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v50 = v49;
      }
      BOOL v105 = &v98;
      if (v50) {
        long long v51 = (void **)sub_10004812C((uint64_t)&v98, v50);
      }
      else {
        long long v51 = 0;
      }
      uint64_t v52 = &v51[3 * v48];
      uint64_t v101 = v51;
      char v102 = v52;
      int v104 = &v51[3 * v50];
      long long v53 = *(_OWORD *)__p;
      v52[2] = v100;
      *(_OWORD *)uint64_t v52 = v53;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v52 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v54 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v54;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v47 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *long long v46 = v47;
      uint64_t v97 = (char *)v46 + 24;
    }
    sub_100058DB0(__p, "118");
    uint64_t v55 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v57 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v58 = v57 + 1;
      if (v57 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v58) {
        unint64_t v58 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v59 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v59 = v58;
      }
      BOOL v105 = &v98;
      if (v59) {
        char v60 = (void **)sub_10004812C((uint64_t)&v98, v59);
      }
      else {
        char v60 = 0;
      }
      long long v61 = &v60[3 * v57];
      uint64_t v101 = v60;
      char v102 = v61;
      int v104 = &v60[3 * v59];
      long long v62 = *(_OWORD *)__p;
      v61[2] = v100;
      *(_OWORD *)long long v61 = v62;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v61 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v63 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v63;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v56 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *uint64_t v55 = v56;
      uint64_t v97 = (char *)v55 + 24;
    }
    sub_100058DB0(__p, "119");
    uint64_t v64 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v66 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v67 = v66 + 1;
      if (v66 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v67) {
        unint64_t v67 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v68 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v68 = v67;
      }
      BOOL v105 = &v98;
      if (v68) {
        long long v69 = (void **)sub_10004812C((uint64_t)&v98, v68);
      }
      else {
        long long v69 = 0;
      }
      __int16 v70 = &v69[3 * v66];
      uint64_t v101 = v69;
      char v102 = v70;
      int v104 = &v69[3 * v68];
      long long v71 = *(_OWORD *)__p;
      v70[2] = v100;
      *(_OWORD *)__int16 v70 = v71;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v70 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v72 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v72;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v65 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *uint64_t v64 = v65;
      uint64_t v97 = (char *)v64 + 24;
    }
    sub_100058DB0(__p, "120");
    uint64_t v73 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v75 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v76 = v75 + 1;
      if (v75 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v76) {
        unint64_t v76 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v77 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v77 = v76;
      }
      BOOL v105 = &v98;
      if (v77) {
        xpc_object_t v78 = (void **)sub_10004812C((uint64_t)&v98, v77);
      }
      else {
        xpc_object_t v78 = 0;
      }
      long long v79 = &v78[3 * v75];
      uint64_t v101 = v78;
      char v102 = v79;
      int v104 = &v78[3 * v77];
      long long v80 = *(_OWORD *)__p;
      v79[2] = v100;
      *(_OWORD *)long long v79 = v80;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v79 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v81 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v81;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v74 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      *uint64_t v73 = v74;
      uint64_t v97 = (char *)v73 + 24;
    }
    sub_100058DB0(__p, "122");
    uint64_t v82 = v97;
    if ((unint64_t)v97 >= v98)
    {
      unint64_t v84 = 0xAAAAAAAAAAAAAAABLL * ((v97 - v96) >> 3);
      unint64_t v85 = v84 + 1;
      if (v84 + 1 > 0xAAAAAAAAAAAAAAALL) {
        sub_1000D8578();
      }
      if (0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3) > v85) {
        unint64_t v85 = 0x5555555555555556 * ((uint64_t)(v98 - (void)v96) >> 3);
      }
      if (0xAAAAAAAAAAAAAAABLL * ((uint64_t)(v98 - (void)v96) >> 3) >= 0x555555555555555) {
        unint64_t v86 = 0xAAAAAAAAAAAAAAALL;
      }
      else {
        unint64_t v86 = v85;
      }
      BOOL v105 = &v98;
      if (v86) {
        uint64_t v87 = (void **)sub_10004812C((uint64_t)&v98, v86);
      }
      else {
        uint64_t v87 = 0;
      }
      uint64_t v88 = &v87[3 * v84];
      uint64_t v101 = v87;
      char v102 = v88;
      int v104 = &v87[3 * v86];
      long long v89 = *(_OWORD *)__p;
      v88[2] = v100;
      *(_OWORD *)uint64_t v88 = v89;
      __p[1] = 0;
      uint64_t v100 = 0;
      __p[0] = 0;
      uint64_t v103 = (uint64_t (*)(void))(v88 + 3);
      sub_100048204((uint64_t *)&v96, &v101);
      long long v90 = v97;
      sub_100048174((uint64_t)&v101);
      uint64_t v97 = v90;
      if (SHIBYTE(v100) < 0) {
        operator delete(__p[0]);
      }
    }
    else
    {
      long long v83 = *(_OWORD *)__p;
      *((void *)v97 + 2) = v100;
      _OWORD *v82 = v83;
      uint64_t v97 = (char *)v82 + 24;
    }
    subscriber::makeSimSlotRange();
    long long v92 = v101;
    long long v91 = v102;
    if (v101 != v102)
    {
      long long v93 = v103;
      while ((v93(*(unsigned int *)v92) & 1) == 0)
      {
        long long v92 = (void **)((char *)v92 + 4);
        if (v92 == v91)
        {
          long long v92 = v91;
          break;
        }
      }
      uint64_t v94 = v102;
LABEL_133:
      while (v92 != v94)
      {
        sub_10091AE64((uint64_t)a1, v5, (long long **)&v96, *(unsigned int *)v92);
        char v95 = (void **)((char *)v92 + 4);
        long long v92 = v91;
        if (v95 != v91)
        {
          long long v92 = v95;
          while ((v93(*(unsigned int *)v92) & 1) == 0)
          {
            long long v92 = (void **)((char *)v92 + 4);
            if (v92 == v91)
            {
              long long v92 = v91;
              goto LABEL_133;
            }
          }
        }
      }
    }
    sub_10091B394(a1);
    uint64_t v101 = (void **)&v96;
    sub_100047F64(&v101);
  }
}

void sub_100E08F44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, char a19)
{
  if (a18 < 0) {
    operator delete(__p);
  }
  std::string __p = &a10;
  sub_100047F64((void ***)&__p);
  _Unwind_Resume(a1);
}

BOOL sub_100E09008(uint64_t a1, _DWORD *a2)
{
  return *a2 != 2;
}

uint64_t sub_100E09018(uint64_t a1, _DWORD **a2)
{
  uint64_t result = subscriber::makeSimSlotRange();
  BOOL v6 = v39;
  unsigned int v5 = v40;
  if (v39 == v40) {
    return result;
  }
  uint64_t v7 = v41;
  while (1)
  {
    uint64_t result = v41(*v6);
    if (result) {
      break;
    }
    if (++v6 == v40)
    {
      BOOL v6 = v40;
      break;
    }
  }
  unint64_t v31 = v40;
  if (v6 == v40) {
    return result;
  }
  do
  {
    unsigned int v38 = 0;
    unsigned int v38 = *v6;
    uint64_t v8 = v38;
    uint64_t v9 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v38);
    long long v37 = 0u;
    memset(v36, 0, sizeof(v36));
    for (uint64_t i = *(_DWORD **)(a1 + 344); ; i += 42)
    {
      if (i == *(_DWORD **)(a1 + 352))
      {
        int v11 = 0;
        char v12 = 1;
        goto LABEL_13;
      }
      if (*i == v8) {
        break;
      }
    }
    sub_10002E664((uint64_t)v36, (uint64_t)i);
    char v12 = 0;
    int v11 = 1;
LABEL_13:
    BYTE8(v37) = v11;
    long long v35 = 0u;
    memset(v34, 0, sizeof(v34));
    for (uint64_t j = *a2; ; j += 42)
    {
      if (j == a2[1])
      {
        if (v12) {
          goto LABEL_56;
        }
        unint64_t v14 = *v9;
        if (!os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_28;
        }
        uint64_t v15 = "INVALID";
        if (!v11) {
          goto LABEL_25;
        }
LABEL_20:
        std::string v16 = (const char *)subscriber::asString();
        goto LABEL_26;
      }
      if (*j == v8) {
        break;
      }
    }
    sub_10002E664((uint64_t)v34, (uint64_t)j);
    BYTE8(v35) = 1;
    int v17 = BYTE8(v37);
    if (BYTE8(v37) && DWORD2(v34[0]) == DWORD2(v36[0])) {
      goto LABEL_56;
    }
    unint64_t v14 = *v9;
    if (!os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_27;
    }
    uint64_t v15 = (const char *)subscriber::asString();
    if (BYTE8(v37)) {
      goto LABEL_20;
    }
LABEL_25:
    std::string v16 = "INVALID";
LABEL_26:
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v15;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v16;
    _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I SIM state change from %s to %s. Reassess operator normal setup em number checking", buf, 0x16u);
    int v17 = BYTE8(v37);
LABEL_27:
    if (v17) {
LABEL_28:
    }
      BOOL v18 = DWORD2(v36[0]) == 5;
    else {
      BOOL v18 = 0;
    }
    if (BYTE8(v35)) {
      BOOL v19 = DWORD2(v34[0]) == 5;
    }
    else {
      BOOL v19 = 0;
    }
    int v20 = v19;
    if (!v19 && v18)
    {
      BOOL v21 = sub_100E09E78(a1, v8);
      unint64_t v22 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        unint64_t v23 = "false";
        if (v21) {
          unint64_t v23 = "true";
        }
        *(_DWORD *)long long buf = 136315394;
        uint64_t v24 = "Not checking";
        if (v21) {
          uint64_t v24 = "Checking";
        }
        *(void *)&uint8_t buf[4] = v23;
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = v24;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I SIM ready and roaming: %s. %s operator normal setup em number first", buf, 0x16u);
      }
      goto LABEL_47;
    }
    if (((v20 ^ 1 | v18) & 1) == 0)
    {
      uint64_t v25 = *v9;
      if (os_log_type_enabled(*v9, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I SIM not ready. Not checking operator normal setup em number first", buf, 2u);
      }
LABEL_47:
      sub_100E0A168(a1);
    }
    if (BYTE8(v37)) {
      int v26 = subscriber::isSimAbsent() ^ 1;
    }
    else {
      int v26 = 0;
    }
    if (BYTE8(v35) && ((subscriber::isSimAbsent() | v26) & 1) == 0)
    {
      uint64_t v27 = *v9;
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I SIM disabled. Clearing SOS numbers from the UI.", buf, 2u);
      }
      *(void *)long long buf = 1;
      *(_OWORD *)&uint8_t buf[16] = 0u;
      uint64_t v44 = 0;
      *(void *)&uint8_t buf[8] = a1 + 264;
      unsigned int v28 = (uint64_t **)sub_100E0DE1C((uint64_t)&buf[16], (void *)(a1 + 296));
      long long v32 = 0uLL;
      size_t v33 = 0;
      long long v29 = sub_100BC7D38(v28, v8, &v38);
      sub_100E0CDA8((void **)v29 + 5);
      *(_OWORD *)(v29 + 5) = v32;
      v29[7] = v33;
      size_t v33 = 0;
      long long v32 = 0uLL;
      long long v42 = (void **)&v32;
      sub_100702E5C(&v42);
      sub_100E0DFE4((uint64_t)buf);
    }
LABEL_56:
    sub_100397998((uint64_t)v34);
    uint64_t result = sub_100397998((uint64_t)v36);
    unint64_t v30 = v6 + 1;
    BOOL v6 = v5;
    if (v30 != v5)
    {
      BOOL v6 = v30;
      while (1)
      {
        uint64_t result = v7(*v6);
        if (result) {
          break;
        }
        if (++v6 == v5)
        {
          BOOL v6 = v5;
          break;
        }
      }
    }
  }
  while (v6 != v31);
  return result;
}

void sub_100E094F8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, char a17, uint64_t a18, uint64_t a19, uint64_t a20,char a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,uint64_t a39,uint64_t a40,uint64_t a41,uint64_t a42,char a43)
{
  *(void *)(v43 - 152) = &a17;
  sub_100702E5C((void ***)(v43 - 152));
  sub_100E0DFE4(v43 - 144);
  sub_100397998((uint64_t)&a21);
  sub_100397998((uint64_t)&a43);
  _Unwind_Resume(a1);
}

void sub_100E09554(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 368);
  uint64_t v3 = (void *)(a1 + 376);
  if (v2 != (void *)(a1 + 376))
  {
    int v5 = 0;
    BOOL v6 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        break;
      }
      uint64_t v8 = *((unsigned int *)v2 + 8);
      uint64_t v9 = v6;
      do
      {
        int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 < (int)v8;
        if (v10 >= (int)v8) {
          char v12 = (uint64_t *)v7;
        }
        else {
          char v12 = (uint64_t *)(v7 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || (int)v8 < *((_DWORD *)v9 + 8)) {
        goto LABEL_15;
      }
      if ((rest::operator==() & 1) == 0) {
        break;
      }
LABEL_21:
      unint64_t v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
      if (v15 == v3)
      {
        if (v5) {
          sub_10091B394((void *)a1);
        }
        return;
      }
    }
    uint64_t v8 = *((unsigned int *)v2 + 8);
LABEL_15:
    if (v5) {
      int v5 = 3;
    }
    else {
      int v5 = v8;
    }
    unint64_t v13 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Received Carrier Bundle setup event. Reading emergency values...", (uint8_t *)v17, 2u);
    }
    v17[0] = 0;
    v17[1] = 0;
    sub_100E0A254(a1, 1, v8, v17);
    goto LABEL_21;
  }
}

void sub_100E096E4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void **)(a1 + 392);
  uint64_t v3 = (void *)(a1 + 400);
  if (v2 != (void *)(a1 + 400))
  {
    int v5 = 0;
    BOOL v6 = (void *)(a2 + 8);
    while (1)
    {
      uint64_t v7 = *v6;
      if (!*v6) {
        break;
      }
      uint64_t v8 = *((unsigned int *)v2 + 8);
      uint64_t v9 = v6;
      do
      {
        int v10 = *(_DWORD *)(v7 + 32);
        BOOL v11 = v10 < (int)v8;
        if (v10 >= (int)v8) {
          char v12 = (uint64_t *)v7;
        }
        else {
          char v12 = (uint64_t *)(v7 + 8);
        }
        if (!v11) {
          uint64_t v9 = (void *)v7;
        }
        uint64_t v7 = *v12;
      }
      while (*v12);
      if (v9 == v6 || (int)v8 < *((_DWORD *)v9 + 8)) {
        goto LABEL_15;
      }
      if ((rest::operator==() & 1) == 0) {
        break;
      }
LABEL_21:
      unint64_t v14 = (void *)v2[1];
      if (v14)
      {
        do
        {
          uint64_t v15 = v14;
          unint64_t v14 = (void *)*v14;
        }
        while (v14);
      }
      else
      {
        do
        {
          uint64_t v15 = (void *)v2[2];
          BOOL v16 = *v15 == (void)v2;
          uint64_t v2 = v15;
        }
        while (!v16);
      }
      uint64_t v2 = v15;
      if (v15 == v3)
      {
        if (v5) {
          sub_10091B394((void *)a1);
        }
        return;
      }
    }
    uint64_t v8 = *((unsigned int *)v2 + 8);
LABEL_15:
    if (v5) {
      int v5 = 3;
    }
    else {
      int v5 = v8;
    }
    unint64_t v13 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(v17[0]) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Received Operator Bundle setup event. Reading emergency values...", (uint8_t *)v17, 2u);
    }
    v17[0] = 0;
    v17[1] = 0;
    sub_100E0A254(a1, 0, v8, v17);
    goto LABEL_21;
  }
}

void sub_100E09874(uint64_t a1, uint64_t a2, long long **a3, int a4)
{
  int v5 = (void *)(a1 + 8);
  uint64_t v7 = 0;
  long long v6 = 0uLL;
  sub_1000302C0((char *)&v6, *a3, a3[1], 0xAAAAAAAAAAAAAAABLL * (((char *)a3[1] - (char *)*a3) >> 3));
  int v8 = a4;
  v9[0] = 0;
  v9[1] = 0;
  sub_10003E168(v9, v5);
  operator new();
}

void sub_100E099D8(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003E168(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100E09AC0(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003E168(v1, (void *)(a1 + 8));
  operator new();
}

void sub_100E09BA8(uint64_t a1, uint64_t a2, int a3)
{
  int v4 = (void *)(a1 + 8);
  sub_10009DB3C((uint64_t)&v5, a2);
  int v6 = a3;
  v7[0] = 0;
  v7[1] = 0;
  sub_10003E168(v7, v4);
  operator new();
}

__n128 sub_100E09D54(uint64_t a1, uint64_t a2, int a3)
{
  int v8 = a3;
  uint64_t v9 = &v8;
  int v4 = sub_100BA7BC0(a1 + 104, &v8, (uint64_t)&unk_10144E20E, &v9);
  void v4[5] = *(void *)a2;
  std::string::operator=((std::string *)v4 + 2, (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)v4 + 3, (const std::string *)(a2 + 32));
  char v5 = *(unsigned char *)(a2 + 60);
  *((_DWORD *)v4 + 24) = *(_DWORD *)(a2 + 56);
  *((unsigned char *)v4 + 100) = v5;
  std::string::operator=((std::string *)(v4 + 13), (const std::string *)(a2 + 64));
  std::string::operator=((std::string *)(v4 + 16), (const std::string *)(a2 + 88));
  char v6 = *(unsigned char *)(a2 + 128);
  __n128 result = *(__n128 *)(a2 + 112);
  *(__n128 *)(v4 + 19) = result;
  *((unsigned char *)v4 + 168) = v6;
  return result;
}

uint64_t sub_100E09E00(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  std::string::operator=((std::string *)(a1 + 8), (const std::string *)(a2 + 8));
  std::string::operator=((std::string *)(a1 + 32), (const std::string *)(a2 + 32));
  char v4 = *(unsigned char *)(a2 + 60);
  *(_DWORD *)(a1 + 56) = *(_DWORD *)(a2 + 56);
  *(unsigned char *)(a1 + 60) = v4;
  std::string::operator=((std::string *)(a1 + 64), (const std::string *)(a2 + 64));
  std::string::operator=((std::string *)(a1 + 88), (const std::string *)(a2 + 88));
  char v5 = *(unsigned char *)(a2 + 128);
  *(_OWORD *)(a1 + 112) = *(_OWORD *)(a2 + 112);
  *(unsigned char *)(a1 + 128) = v5;
  return a1;
}

BOOL sub_100E09E78(uint64_t a1, uint64_t a2)
{
  memset(&v31, 0, sizeof(v31));
  uint64_t v4 = *(void *)(a1 + 376);
  if (!v4) {
    goto LABEL_11;
  }
  uint64_t v5 = a1 + 376;
  do
  {
    int v6 = *(_DWORD *)(v4 + 32);
    BOOL v7 = v6 < (int)a2;
    if (v6 >= (int)a2) {
      int v8 = (uint64_t *)v4;
    }
    else {
      int v8 = (uint64_t *)(v4 + 8);
    }
    if (!v7) {
      uint64_t v5 = v4;
    }
    uint64_t v4 = *v8;
  }
  while (*v8);
  if (v5 != a1 + 376 && *(_DWORD *)(v5 + 32) <= (int)a2)
  {
    std::string::operator=(&v31, (const std::string *)(v5 + 48));
  }
  else
  {
LABEL_11:
    uint64_t v9 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#N Could not find carrier bundle", (uint8_t *)&buf, 2u);
    }
  }
  memset(&buf, 0, sizeof(buf));
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0) {
    sub_10004FC84(&buf, v31.__r_.__value_.__l.__data_, v31.__r_.__value_.__l.__size_);
  }
  else {
    std::string buf = v31;
  }
  uint64_t v10 = *(void *)(a1 + 400);
  if (!v10) {
    goto LABEL_27;
  }
  uint64_t v11 = a1 + 400;
  do
  {
    int v12 = *(_DWORD *)(v10 + 32);
    BOOL v13 = v12 < (int)a2;
    if (v12 >= (int)a2) {
      unint64_t v14 = (uint64_t *)v10;
    }
    else {
      unint64_t v14 = (uint64_t *)(v10 + 8);
    }
    if (!v13) {
      uint64_t v11 = v10;
    }
    uint64_t v10 = *v14;
  }
  while (*v14);
  if (v11 != a1 + 400 && *(_DWORD *)(v11 + 32) <= (int)a2)
  {
    std::string::operator=(&buf, (const std::string *)(v11 + 48));
  }
  else
  {
LABEL_27:
    uint64_t v15 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a2);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long v29 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Could not find operator bundle", v29, 2u);
    }
  }
  char v16 = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  if ((v31.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    std::string::size_type size = HIBYTE(v31.__r_.__value_.__r.__words[2]);
  }
  else {
    std::string::size_type size = v31.__r_.__value_.__l.__size_;
  }
  std::string::size_type v18 = HIBYTE(buf.__r_.__value_.__r.__words[2]);
  int v19 = SHIBYTE(buf.__r_.__value_.__r.__words[2]);
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
    std::string::size_type v18 = buf.__r_.__value_.__l.__size_;
  }
  if (size != v18)
  {
    BOOL v26 = 1;
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  if ((buf.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
    p_std::string buf = &buf;
  }
  else {
    p_std::string buf = (std::string *)buf.__r_.__value_.__r.__words[0];
  }
  if (SHIBYTE(v31.__r_.__value_.__r.__words[2]) < 0)
  {
    BOOL v26 = memcmp(v31.__r_.__value_.__l.__data_, p_buf, v31.__r_.__value_.__l.__size_) != 0;
    if ((v19 & 0x80000000) == 0) {
      goto LABEL_48;
    }
    goto LABEL_51;
  }
  if (!*((unsigned char *)&v31.__r_.__value_.__s + 23))
  {
    BOOL v26 = 0;
    if ((SHIBYTE(buf.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
      goto LABEL_48;
    }
LABEL_51:
    operator delete(buf.__r_.__value_.__l.__data_);
    if ((*((unsigned char *)&v31.__r_.__value_.__s + 23) & 0x80) == 0) {
      return v26;
    }
LABEL_52:
    operator delete(v31.__r_.__value_.__l.__data_);
    return v26;
  }
  uint64_t v21 = HIBYTE(v31.__r_.__value_.__r.__words[2]) - 1;
  unint64_t v22 = &v31;
  do
  {
    int v24 = v22->__r_.__value_.__s.__data_[0];
    unint64_t v22 = (std::string *)((char *)v22 + 1);
    int v23 = v24;
    int v25 = p_buf->__r_.__value_.__s.__data_[0];
    p_std::string buf = (std::string *)((char *)p_buf + 1);
    BOOL v26 = v23 != v25;
  }
  while (v23 == v25 && v21-- != 0);
  if (SHIBYTE(buf.__r_.__value_.__r.__words[2]) < 0) {
    goto LABEL_51;
  }
LABEL_48:
  if (v16 < 0) {
    goto LABEL_52;
  }
  return v26;
}

void sub_100E0A114(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *a17, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  if (a22 < 0) {
    operator delete(a17);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100E0A154(uint64_t a1, _DWORD *a2)
{
  return *a2 == *(_DWORD *)(a1 + 32);
}

void sub_100E0A168(uint64_t a1)
{
  v1[0] = 0;
  v1[1] = 0;
  sub_10003E168(v1, (void *)(a1 + 8));
  operator new();
}

uint64_t sub_100E0A254(uint64_t a1, int a2, uint64_t a3, MCCAndMNC **a4)
{
  unsigned int v250 = a3;
  v203 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a3);
  BOOL v7 = *v203;
  if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
  {
    int v8 = "Operator";
    if (a2) {
      int v8 = "Carrier";
    }
    if (*a4) {
      uint64_t v9 = "true";
    }
    else {
      uint64_t v9 = "false";
    }
    buf.var0 = 136315394;
    *(void *)&buf.var1 = v8;
    WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
    *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = v9;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I Loading emergency numbers from %s bundle(s), with CountryBundleLookUp: %s", (uint8_t *)&buf, 0x16u);
  }
  uint64_t v249 = 0;
  long long v247 = 0u;
  long long v248 = 0u;
  *(_OWORD *)v245 = 0u;
  *(_OWORD *)v246 = 0u;
  *(_OWORD *)v243 = 0u;
  long long v244 = 0u;
  *(_OWORD *)v241 = 0u;
  long long v242 = 0u;
  sub_100058DB0(&buf, "112");
  CSIPhoneNumber::CSIPhoneNumber();
  if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
    operator delete(*(void **)&buf.var0);
  }
  v239 = 0;
  v238 = 0;
  unint64_t v240 = 0;
  v236 = 0;
  v235 = 0;
  unint64_t v237 = 0;
  v233 = 0;
  v232 = 0;
  unint64_t v234 = 0;
  v230 = 0;
  v229 = 0;
  unint64_t v231 = 0;
  uint64_t v228 = 0;
  long long v226 = 0u;
  long long v227 = 0u;
  *(_OWORD *)v224 = 0u;
  *(_OWORD *)v225 = 0u;
  long long v223 = 0u;
  memset(&v222, 0, sizeof(v222));
  sub_10009DB3C((uint64_t)&v222, (uint64_t)v241);
  uint64_t v11 = *a4;
  uint64_t v10 = (std::__shared_weak_count *)a4[1];
  if (v10) {
    atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  v197 = v10;
  v201 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a3);
  if (a2) {
    unsigned __int8 v12 = 1;
  }
  else {
    unsigned __int8 v12 = 2;
  }
  CFDictionaryRef theDict = 0;
  if (v11)
  {
    BOOL v13 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v13, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.var0) = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I Reading emergency numbers with last visible plmn", (uint8_t *)&buf, 2u);
    }
    *(void *)v253 = 0;
    CFMutableDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      uint64_t v15 = *(__CFDictionary **)v253;
      *(void *)v253 = Mutable;
      *(void *)&buf.var0 = v15;
      sub_10005717C((const void **)&buf);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)a1, *(Registry **)(a1 + 160));
    int v17 = ServiceMap;
    if (v18 < 0)
    {
      int v19 = (unsigned __int8 *)(v18 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v20 = 5381;
      do
      {
        uint64_t v18 = v20;
        unsigned int v21 = *v19++;
        uint64_t v20 = (33 * v20) ^ v21;
      }
      while (v21);
    }
    std::mutex::lock(ServiceMap);
    *(void *)&buf.var0 = v18;
    unint64_t v22 = sub_10004D37C(&v17[1].__m_.__sig, (unint64_t *)&buf);
    if (v22)
    {
      uint64_t v23 = v22[3];
      int v24 = (std::__shared_weak_count *)v22[4];
      if (v24)
      {
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v17);
        atomic_fetch_add_explicit(&v24->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v24);
        char v25 = 0;
        if (!v23) {
          goto LABEL_59;
        }
        goto LABEL_35;
      }
    }
    else
    {
      uint64_t v23 = 0;
    }
    std::mutex::unlock(v17);
    int v24 = 0;
    char v25 = 1;
    if (!v23) {
      goto LABEL_59;
    }
LABEL_35:
    memset(&buf, 0, 32);
    MCCAndMNC::getMcc((uint64_t *)&buf.var0, v11);
    memset(v259, 0, 32);
    MCCAndMNC::getMnc((uint64_t *)v259, v11);
    memset(&v258, 0, sizeof(v258));
    formPLMN((const MCC *)&buf, (const MNC *)v259);
    if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__p, v258.__r_.__value_.__l.__data_, v258.__r_.__value_.__l.__size_);
    }
    else {
      std::string __p = v258;
    }
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__dst, __p.__r_.__value_.__l.__data_, __p.__r_.__value_.__l.__size_);
    }
    else {
      std::string __dst = __p;
    }
    CFDictionaryRef v255 = 0;
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      sub_10004FC84(&__str, __dst.__r_.__value_.__l.__data_, __dst.__r_.__value_.__l.__size_);
    }
    else {
      std::string __str = __dst;
    }
    CFDictionaryRef v256 = 0;
    if (ctu::cf::convert_copy())
    {
      CFDictionaryRef v36 = v255;
      CFDictionaryRef v255 = v256;
      CFDictionaryRef valuePtr = v36;
      sub_1000558F4((const void **)&valuePtr);
    }
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    CFTypeRef v252 = v255;
    CFDictionaryRef v255 = 0;
    sub_1000558F4((const void **)&v255);
    if (SHIBYTE(__dst.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__dst.__r_.__value_.__l.__data_);
    }
    sub_10010F3F0(*(__CFDictionary **)v253, (void *)qword_101B13EC0, (uint64_t)v252);
    sub_1000558F4(&v252);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
    long long v37 = operator new(8uLL);
    *long long v37 = @"EmergencyCalling";
    __str.__r_.__value_.__l.__size_ = (std::string::size_type)(v37 + 1);
    __str.__r_.__value_.__r.__words[2] = (std::string::size_type)(v37 + 1);
    __str.__r_.__value_.__r.__words[0] = (std::string::size_type)v37;
    sub_10004EFE4(&v255, (CFTypeRef *)v253);
    (*(void (**)(const __CFDictionary **__return_ptr, uint64_t, const __CFDictionary **, std::string *))(*(void *)v23 + 304))(&v256, v23, &v255, &__str);
    sub_10004EFE4(&valuePtr, (CFTypeRef *)&v256);
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)theDict;
    CFDictionaryRef theDict = valuePtr;
    CFDictionaryRef valuePtr = 0;
    sub_100057D78((const void **)&__dst.__r_.__value_.__l.__data_);
    sub_100057D78((const void **)&valuePtr);
    sub_1000577C4((const void **)&v256);
    sub_100057D78((const void **)&v255);
    if (__str.__r_.__value_.__r.__words[0])
    {
      __str.__r_.__value_.__l.__size_ = __str.__r_.__value_.__r.__words[0];
      operator delete(__str.__r_.__value_.__l.__data_);
    }
    if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(v258.__r_.__value_.__l.__data_);
    }
    if ((char)v259[31] < 0) {
      operator delete(*(void **)&v259[8]);
    }
    if (*((char *)&buf.var2.__r_.__value_.var0.var1 + 23) < 0)
    {
      operator delete(buf.var2.__r_.__value_.var0.var1.__data_);
      if (v25) {
        goto LABEL_61;
      }
      goto LABEL_60;
    }
LABEL_59:
    if (v25)
    {
LABEL_61:
      sub_10005717C((const void **)v253);
      goto LABEL_68;
    }
LABEL_60:
    sub_10004D2C8(v24);
    goto LABEL_61;
  }
  BOOL v26 = (std::mutex *)Registry::getServiceMap((uint64_t *)a1, *(Registry **)(a1 + 160));
  uint64_t v27 = v26;
  if (v28 < 0)
  {
    long long v29 = (unsigned __int8 *)(v28 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v30 = 5381;
    do
    {
      uint64_t v28 = v30;
      unsigned int v31 = *v29++;
      uint64_t v30 = (33 * v30) ^ v31;
    }
    while (v31);
  }
  std::mutex::lock(v26);
  *(void *)&buf.var0 = v28;
  long long v32 = sub_10004D37C(&v27[1].__m_.__sig, (unint64_t *)&buf);
  if (v32)
  {
    uint64_t v34 = v32[3];
    size_t v33 = (std::__shared_weak_count *)v32[4];
    if (v33)
    {
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v27);
      atomic_fetch_add_explicit(&v33->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v33);
      char v35 = 0;
      goto LABEL_66;
    }
  }
  else
  {
    uint64_t v34 = 0;
  }
  std::mutex::unlock(v27);
  size_t v33 = 0;
  char v35 = 1;
LABEL_66:
  (*(void (**)(std::string *__return_ptr, uint64_t, uint64_t, void, const __CFString *, void, void))(*(void *)v34 + 96))(&__str, v34, a3, v12, @"EmergencyCalling", 0, 0);
  sub_10004EFE4(v259, (CFTypeRef *)&__str.__r_.__value_.__l.__data_);
  *(void *)&buf.var0 = theDict;
  CFDictionaryRef theDict = *(CFDictionaryRef *)v259;
  *(void *)v259 = 0;
  sub_100057D78((const void **)&buf);
  sub_100057D78((const void **)v259);
  sub_1000577C4((const void **)&__str.__r_.__value_.__l.__data_);
  if ((v35 & 1) == 0) {
    sub_10004D2C8(v33);
  }
LABEL_68:
  if (theDict) {
    unsigned int v38 = sub_100080778;
  }
  else {
    unsigned int v38 = 0;
  }
  int v198 = a2;
  if (!v38)
  {
    uint64_t v106 = *v201;
    uint64_t v51 = 0;
    if (!os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_246;
    }
    LOWORD(buf.var0) = 0;
    uint64_t v107 = "#I There is no EmergencyCalling dictionary in the bundle";
LABEL_237:
    _os_log_impl((void *)&_mh_execute_header, v106, OS_LOG_TYPE_DEFAULT, v107, (uint8_t *)&buf, 2u);
    uint64_t v51 = 0;
    goto LABEL_246;
  }
  unint64_t v39 = v238;
  for (uint64_t i = (long long *)v239; i != v39; uint64_t i = (long long *)((char *)i - 24))
  {
    if (*((char *)i - 1) < 0) {
      operator delete(*((void **)i - 3));
    }
  }
  v239 = v39;
  unint64_t v41 = v235;
  for (uint64_t j = (long long *)v236; j != v41; uint64_t j = (long long *)((char *)j - 24))
  {
    if (*((char *)j - 1) < 0) {
      operator delete(*((void **)j - 3));
    }
  }
  v236 = v41;
  uint64_t v43 = v232;
  for (uint64_t k = (long long *)v233; k != v43; uint64_t k = (long long *)((char *)k - 24))
  {
    if (*((char *)k - 1) < 0) {
      operator delete(*((void **)k - 3));
    }
  }
  v233 = v43;
  long long v45 = (std::string *)v230;
  long long v46 = v229;
  while (v45 != v46)
  {
    long long v45 = (std::string *)((char *)v45 - 56);
    sub_1000FECD4((uint64_t)v45);
  }
  v230 = v46;
  CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(theDict, @"EmergencyNumbers");
  if (!Value)
  {
    uint64_t v106 = *v201;
    uint64_t v51 = 0;
    if (!os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_246;
    }
    LOWORD(buf.var0) = 0;
    uint64_t v107 = "#I There was no emergency numbers in the dict";
    goto LABEL_237;
  }
  unint64_t v48 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v48, OS_LOG_TYPE_DEFAULT))
  {
    unint64_t v49 = "Operator";
    if (a2) {
      unint64_t v49 = "Carrier";
    }
    buf.var0 = 136315138;
    *(void *)&buf.var1 = v49;
    _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I Loading emergency numbers from %s bundle.", (uint8_t *)&buf, 0xCu);
  }
  CFIndex Count = CFArrayGetCount(Value);
  unint64_t v50 = *v201;
  if (os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT))
  {
    buf.var0 = 134217984;
    *(void *)&buf.var1 = Count;
    _os_log_impl((void *)&_mh_execute_header, v50, OS_LOG_TYPE_DEFAULT, "#I Got %zu emergency numbers", (uint8_t *)&buf, 0xCu);
  }
  uint64_t v51 = 1;
  if (Count < 1) {
    goto LABEL_246;
  }
  CFArrayRef theArray = Value;
  CFIndex v52 = 0;
  while (1)
  {
    ValueAtIndex = CFArrayGetValueAtIndex(theArray, v52);
    CFTypeID TypeID = CFDictionaryGetTypeID();
    if (TypeID != CFGetTypeID(ValueAtIndex))
    {
      long long v69 = *v201;
      if (os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT))
      {
        __int16 v70 = (char *)CFGetTypeID(ValueAtIndex);
        buf.var0 = 134218240;
        *(void *)&buf.var1 = v52;
        WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2048;
        *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = v70;
        _os_log_impl((void *)&_mh_execute_header, v69, OS_LOG_TYPE_DEFAULT, "#N Expected dictionary type at index %ld, got %lu instead", (uint8_t *)&buf, 0x16u);
      }
LABEL_228:
      ++v52;
      goto LABEL_229;
    }
    if (!ValueAtIndex)
    {
      os_log_t v108 = *v201;
      if (!os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_245;
      }
      LOWORD(buf.var0) = 0;
      uint64_t v109 = "#N There was an error getting the emergeny numbers, dictionary returned null";
      uint64_t v110 = v108;
      uint32_t v111 = 2;
      goto LABEL_244;
    }
    uint64_t v55 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Number");
    CFNumberRef v56 = (const __CFNumber *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Category");
    CFNumberRef v57 = v56;
    if (!v56 || (CFTypeID v58 = CFGetTypeID(v56), v58 != CFNumberGetTypeID()))
    {
      unint64_t v59 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v59, OS_LOG_TYPE_ERROR))
      {
        LOWORD(buf.var0) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v59, OS_LOG_TYPE_ERROR, "Category is not of numeric type!", (uint8_t *)&buf, 2u);
      }
      CFNumberRef v57 = 0;
    }
    char v60 = CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"Title");
    CFBooleanRef v61 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"PreferredEmergencyNumber");
    CFBooleanRef v62 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SupportsEmergencySetup");
    CFBooleanRef v63 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SupportsText");
    CFBooleanRef v64 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"SupportsVoice");
    CFBooleanRef v65 = (const __CFBoolean *)CFDictionaryGetValue((CFDictionaryRef)ValueAtIndex, @"TestNumber");
    if (!v55) {
      break;
    }
    CFBooleanRef v66 = v65;
    LODWORD(valuePtr) = 0;
    memset(&__str, 0, sizeof(__str));
    memset(&buf, 0, 24);
    ctu::cf::assign();
    *(_OWORD *)&__str.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.var0;
    __str.__r_.__value_.__r.__words[2] = buf.var2.__r_.__value_.var0.var1.__size_;
    if (v57) {
      CFNumberGetValue(v57, kCFNumberIntType, &valuePtr);
    }
    if (v61) {
      LODWORD(v61) = CFBooleanGetValue(v61);
    }
    if (v62)
    {
      int v67 = CFBooleanGetValue(v62);
      if (v63) {
        goto LABEL_113;
      }
    }
    else
    {
      int v67 = 1;
      if (v63)
      {
LABEL_113:
        CFBooleanGetValue(v63);
        if (!v64) {
          goto LABEL_114;
        }
        goto LABEL_121;
      }
    }
    if (!v64)
    {
LABEL_114:
      int v68 = 1;
      if (!v66) {
        goto LABEL_115;
      }
      goto LABEL_122;
    }
LABEL_121:
    int v68 = CFBooleanGetValue(v64);
    if (!v66)
    {
LABEL_115:
      if (v61) {
        goto LABEL_138;
      }
      goto LABEL_185;
    }
LABEL_122:
    if (!CFBooleanGetValue(v66))
    {
      LODWORD(v66) = 0;
      if (v61) {
        goto LABEL_138;
      }
      goto LABEL_185;
    }
    if (sub_10091B18C(a1, v71))
    {
      if (v68)
      {
        unint64_t v72 = *(void *)(a1 + 136);
        if (v72 >= *(void *)(a1 + 144))
        {
          uint64_t v76 = sub_100048008((uint64_t *)(a1 + 128), (long long *)&__str);
          uint64_t v77 = a1;
        }
        else
        {
          if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
          {
            sub_10004FC84(*(unsigned char **)(a1 + 136), __str.__r_.__value_.__l.__data_, __str.__r_.__value_.__l.__size_);
          }
          else
          {
            long long v73 = *(_OWORD *)&__str.__r_.__value_.__l.__data_;
            *(void *)(v72 + 16) = *((void *)&__str.__r_.__value_.__l + 2);
            *(_OWORD *)unint64_t v72 = v73;
          }
          uint64_t v76 = v72 + 24;
          uint64_t v77 = a1;
          *(void *)(a1 + 136) = v72 + 24;
        }
        *(void *)(v77 + 136) = v76;
      }
      LODWORD(v66) = 1;
      if (!v61) {
        goto LABEL_185;
      }
LABEL_138:
      xpc_object_t v78 = *(NSObject **)(a1 + 40);
      BOOL v79 = os_log_type_enabled(v78, OS_LOG_TYPE_DEFAULT);
      if (v198)
      {
        if (v79)
        {
          LOWORD(buf.var0) = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I NOT reading preferred number/disam number from carrier!", (uint8_t *)&buf, 2u);
        }
      }
      else
      {
        if (v79)
        {
          LOWORD(buf.var0) = 0;
          _os_log_impl((void *)&_mh_execute_header, v78, OS_LOG_TYPE_DEFAULT, "#I Reading preferred/disam number from operator", (uint8_t *)&buf, 2u);
        }
        if (v60)
        {
          memset(&__dst, 0, sizeof(__dst));
          memset(&buf, 0, 24);
          ctu::cf::assign();
          *(_OWORD *)&__dst.__r_.__value_.__l.__data_ = *(_OWORD *)&buf.var0;
          __dst.__r_.__value_.__r.__words[2] = buf.var2.__r_.__value_.var0.var1.__size_;
          *(void *)__val = 0;
          memset(&buf, 0, sizeof(buf));
          sub_100058DB0(&buf, "");
          sub_100058DB0((void *)&buf.var2.__r_.__value_.var0.var1 + 2, "");
          LOBYTE(__val[0]) = 0;
          LOBYTE(__val[1]) = 0;
          std::string::operator=((std::string *)&buf, &__str);
          std::string::operator=((std::string *)(&buf.var2.__r_.__value_.var0.var1 + 1), &__dst);
          if (v57)
          {
            __val[0] = (int)valuePtr;
            LOBYTE(__val[1]) = 1;
          }
          long long v80 = (char *)v230;
          if ((unint64_t)v230 >= v231)
          {
            long long v81 = (void *)sub_100702EE0((uint64_t *)&v229, (long long *)&buf.var0);
          }
          else
          {
            sub_100703000((char *)v230, (long long *)&buf.var0);
            long long v81 = v80 + 56;
          }
          v230 = v81;
          unint64_t v86 = *v201;
          if (os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT))
          {
            if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
              p_CSIPhoneNumber buf = &buf;
            }
            else {
              p_CSIPhoneNumber buf = *(CSIPhoneNumber **)&buf.var0;
            }
            if (buf.var2.var0 >= 0) {
              uint64_t v88 = &buf.var2.__r_.__value_.var0.var1 + 1;
            }
            else {
              uint64_t v88 = (__long *)*((void *)&buf.var2.__r_.__value_.var0.var1 + 2);
            }
            if (LOBYTE(__val[1]))
            {
              std::to_string(&v258, __val[0]);
              long long v89 = &v258;
              if ((v258.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
                long long v89 = (std::string *)v258.__r_.__value_.__r.__words[0];
              }
              *(_DWORD *)v259 = 136315650;
              *(void *)&v259[4] = p_buf;
              *(_WORD *)&v259[12] = 2080;
              *(void *)&v259[14] = v88;
              *(_WORD *)&v259[22] = 2080;
              *(void *)&v259[24] = v89;
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#I Got disambiguation num %s with title %s and category %s", v259, 0x20u);
              if (SHIBYTE(v258.__r_.__value_.__r.__words[2]) < 0) {
                operator delete(v258.__r_.__value_.__l.__data_);
              }
            }
            else
            {
              *(_DWORD *)v259 = 136315650;
              *(void *)&v259[4] = p_buf;
              *(_WORD *)&v259[12] = 2080;
              *(void *)&v259[14] = v88;
              *(_WORD *)&v259[22] = 2080;
              *(void *)&v259[24] = "N/A";
              _os_log_impl((void *)&_mh_execute_header, v86, OS_LOG_TYPE_DEFAULT, "#I Got disambiguation num %s with title %s and category %s", v259, 0x20u);
            }
          }
          if (SHIBYTE(buf.var2.var0) < 0) {
            operator delete(*((void **)&buf.var2.__r_.__value_.var0.var1 + 2));
          }
          if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
            operator delete(*(void **)&buf.var0);
          }
          if ((SHIBYTE(__dst.__r_.__value_.__r.__words[2]) & 0x80000000) == 0) {
            goto LABEL_185;
          }
          data = (char *)__dst.__r_.__value_.__r.__words[0];
        }
        else
        {
          uint64_t v82 = *v201;
          if (os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT))
          {
            p_str = &__str;
            if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) != 0) {
              p_str = (std::string *)__str.__r_.__value_.__r.__words[0];
            }
            buf.var0 = 136315138;
            *(void *)&buf.var1 = p_str;
            _os_log_impl((void *)&_mh_execute_header, v82, OS_LOG_TYPE_DEFAULT, "#I Preferred number for this country: %s", (uint8_t *)&buf, 0xCu);
          }
          *(void *)&long long v267 = 0;
          *(_OWORD *)v266 = 0u;
          *(_OWORD *)v265 = 0u;
          *(_OWORD *)v264 = 0u;
          *(_OWORD *)v263 = 0u;
          *(_OWORD *)__val = 0u;
          memset(&buf, 0, sizeof(buf));
          CSIPhoneNumber::CSIPhoneNumber();
          *(void *)&v222.var0 = *(void *)&buf.var0;
          std::string::operator=((std::string *)&v222.var2, (const std::string *)&buf.var2);
          std::string::operator=((std::string *)&v222.var2.__r_.var0, (const std::string *)&buf.var2.__r_.var0);
          DWORD2(v223) = __val[2];
          BYTE12(v223) = __val[3];
          std::string::operator=((std::string *)v224, (const std::string *)v263);
          std::string::operator=((std::string *)&v225[1], (const std::string *)&v264[1]);
          long long v227 = *(_OWORD *)v266;
          LOBYTE(v228) = v267;
          if (v57)
          {
            unint64_t v84 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v84, OS_LOG_TYPE_DEFAULT))
            {
              *(_DWORD *)v259 = 67109120;
              *(_DWORD *)&v259[4] = valuePtr;
              _os_log_impl((void *)&_mh_execute_header, v84, OS_LOG_TYPE_DEFAULT, "#I Category of the preferred numberfor this country: %d", v259, 8u);
            }
            CSIPhoneNumber::setEmergencyCategory(&v222, valuePtr);
          }
          if (SHIBYTE(v265[1]) < 0) {
            operator delete(v264[1]);
          }
          if (SHIBYTE(v264[0]) < 0) {
            operator delete(v263[0]);
          }
          if (SHIBYTE(__val[1]) < 0) {
            operator delete(*(void **)&buf.var2.__r_.var0);
          }
          if ((*((char *)&buf.var2.__r_.__value_.var0.var1 + 23) & 0x80000000) == 0) {
            goto LABEL_185;
          }
          data = buf.var2.__r_.__value_.var0.var1.__data_;
        }
        operator delete(data);
      }
LABEL_185:
      uint64_t v275 = 0;
      long long v274 = 0u;
      long long v273 = 0u;
      long long v272 = 0u;
      long long v271 = 0u;
      long long v270 = 0u;
      long long v269 = 0u;
      *(_OWORD *)v268 = 0u;
      long long v267 = 0u;
      *(_OWORD *)v266 = 0u;
      *(_OWORD *)v265 = 0u;
      *(_OWORD *)v264 = 0u;
      *(_OWORD *)v263 = 0u;
      *(_OWORD *)__val = 0u;
      memset(&buf, 0, sizeof(buf));
      sub_10004DE24((uint64_t)&buf);
      long long v90 = sub_10004B96C(&buf, (uint64_t)"\"", 1);
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        long long v91 = &__str;
      }
      else {
        long long v91 = (std::string *)__str.__r_.__value_.__r.__words[0];
      }
      if ((__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
        std::string::size_type size = HIBYTE(__str.__r_.__value_.__r.__words[2]);
      }
      else {
        std::string::size_type size = __str.__r_.__value_.__l.__size_;
      }
      long long v93 = sub_10004B96C(v90, (uint64_t)v91, size);
      sub_10004B96C(v93, (uint64_t)"\",", 2);
      std::ostream::operator<<();
      sub_10004B96C(&buf, (uint64_t)",", 1);
      std::ostream::operator<<();
      sub_10004B96C(&buf, (uint64_t)",", 1);
      std::ostream::operator<<();
      sub_10004B96C(&buf, (uint64_t)",", 1);
      std::ostream::operator<<();
      memset(v259, 0, 24);
      sub_10004BC98((uint64_t)&buf.var2, v259);
      uint64_t v94 = *v201;
      if (os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT))
      {
        char v95 = v259;
        if ((v259[23] & 0x80u) != 0) {
          char v95 = *(uint8_t **)v259;
        }
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v95;
        _os_log_impl((void *)&_mh_execute_header, v94, OS_LOG_TYPE_DEFAULT, "#I Command: %s", (uint8_t *)&__dst, 0xCu);
      }
      uint64_t v96 = v259[23];
      if ((v259[23] & 0x80u) != 0) {
        uint64_t v96 = *(void *)&v259[8];
      }
      if (v96)
      {
        if (v66)
        {
          uint64_t v97 = v233;
          if ((unint64_t)v233 >= v234)
          {
            uint64_t v101 = (void *)sub_100048008((uint64_t *)&v232, (long long *)v259);
          }
          else
          {
            if ((char)v259[23] < 0)
            {
              sub_10004FC84(v233, *(void **)v259, *(unint64_t *)&v259[8]);
            }
            else
            {
              long long v98 = *(_OWORD *)v259;
              *((void *)v233 + 2) = *(void *)&v259[16];
              *uint64_t v97 = v98;
            }
            uint64_t v101 = (char *)v97 + 24;
          }
          v233 = v101;
        }
        else if (v67)
        {
          unint64_t v99 = v239;
          if ((unint64_t)v239 >= v240)
          {
            int v104 = (void *)sub_100048008((uint64_t *)&v238, (long long *)v259);
          }
          else
          {
            if ((char)v259[23] < 0)
            {
              sub_10004FC84(v239, *(void **)v259, *(unint64_t *)&v259[8]);
            }
            else
            {
              long long v100 = *(_OWORD *)v259;
              *((void *)v239 + 2) = *(void *)&v259[16];
              *unint64_t v99 = v100;
            }
            int v104 = (char *)v99 + 24;
          }
          v239 = v104;
        }
        else
        {
          char v102 = v236;
          if ((unint64_t)v236 >= v237)
          {
            BOOL v105 = (void *)sub_100048008((uint64_t *)&v235, (long long *)v259);
          }
          else
          {
            if ((char)v259[23] < 0)
            {
              sub_10004FC84(v236, *(void **)v259, *(unint64_t *)&v259[8]);
            }
            else
            {
              long long v103 = *(_OWORD *)v259;
              *((void *)v236 + 2) = *(void *)&v259[16];
              *char v102 = v103;
            }
            BOOL v105 = (char *)v102 + 24;
          }
          v236 = v105;
        }
      }
      if ((char)v259[23] < 0) {
        operator delete(*(void **)v259);
      }
      *(void *)&buf.var0 = v196;
      *(void *)((char *)&buf.var0 + *(void *)(v196 - 24)) = v195;
      if (SHIBYTE(v264[1]) < 0) {
        operator delete(v263[1]);
      }
      std::streambuf::~streambuf();
      std::ostream::~ostream();
      std::ios::~ios();
      char v75 = 1;
      goto LABEL_226;
    }
    ++v52;
    long long v74 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v74, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.var0) = 0;
      _os_log_impl((void *)&_mh_execute_header, v74, OS_LOG_TYPE_DEFAULT, "#I Skipping test numbers on customer build", (uint8_t *)&buf, 2u);
    }
    char v75 = 0;
LABEL_226:
    if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0)
    {
      operator delete(__str.__r_.__value_.__l.__data_);
      if ((v75 & 1) == 0) {
        goto LABEL_229;
      }
      goto LABEL_228;
    }
    if (v75) {
      goto LABEL_228;
    }
LABEL_229:
    if (v52 >= Count) {
      goto LABEL_245;
    }
  }
  os_log_t v112 = *v201;
  if (!os_log_type_enabled(*v201, OS_LOG_TYPE_DEFAULT)) {
    goto LABEL_245;
  }
  char v113 = "ok";
  buf.var0 = 134218498;
  *(void *)&buf.var1 = v52;
  WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 2080;
  if (!v57) {
    char v113 = "not ok";
  }
  *(char **)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = "not ok";
  HIWORD(buf.var2.__r_.__value_.var0.var1.__size_) = 2080;
  *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = v113;
  uint64_t v109 = "#N There was an error getting the %ld emergency number. Number was %s, category was %s";
  uint64_t v110 = v112;
  uint32_t v111 = 32;
LABEL_244:
  _os_log_impl((void *)&_mh_execute_header, v110, OS_LOG_TYPE_DEFAULT, v109, (uint8_t *)&buf, v111);
LABEL_245:
  uint64_t v51 = 1;
LABEL_246:
  sub_100057D78((const void **)&theDict);
  if (v197) {
    sub_10004D2C8(v197);
  }
  if (v51)
  {
    uint64_t v114 = v238;
    unint64_t v115 = (long long *)v239;
    if (v238 != v239)
    {
      do
      {
        memset(&buf, 0, 24);
        if (*((char *)v114 + 23) < 0)
        {
          sub_10004FC84(&buf, *(void **)v114, *((void *)v114 + 1));
        }
        else
        {
          long long v116 = *v114;
          buf.var2.__r_.__value_.var0.var1.__size_ = *((void *)v114 + 2);
          *(_OWORD *)&buf.var0 = v116;
        }
        uint64_t v117 = *v203;
        if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
        {
          if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
            uint64_t v118 = &buf;
          }
          else {
            uint64_t v118 = *(CSIPhoneNumber **)&buf.var0;
          }
          *(_DWORD *)v259 = 136315138;
          *(void *)&v259[4] = v118;
          _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#I EmergencyNumberList found in bundle = %s", v259, 0xCu);
        }
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
          operator delete(*(void **)&buf.var0);
        }
        uint64_t v114 = (long long *)((char *)v114 + 24);
      }
      while (v114 != v115);
    }
    uint64_t v119 = v235;
    uint64_t v120 = (long long *)v236;
    if (v235 != v236)
    {
      do
      {
        memset(&buf, 0, 24);
        if (*((char *)v119 + 23) < 0)
        {
          sub_10004FC84(&buf, *(void **)v119, *((void *)v119 + 1));
        }
        else
        {
          long long v121 = *v119;
          buf.var2.__r_.__value_.var0.var1.__size_ = *((void *)v119 + 2);
          *(_OWORD *)&buf.var0 = v121;
        }
        uint64_t v122 = *v203;
        if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
        {
          if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
            v123 = &buf;
          }
          else {
            v123 = *(CSIPhoneNumber **)&buf.var0;
          }
          *(_DWORD *)v259 = 136315138;
          *(void *)&v259[4] = v123;
          _os_log_impl((void *)&_mh_execute_header, v122, OS_LOG_TYPE_DEFAULT, "#I NormalEmergencyNumberList found in bundle = %s", v259, 0xCu);
        }
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
          operator delete(*(void **)&buf.var0);
        }
        uint64_t v119 = (long long *)((char *)v119 + 24);
      }
      while (v119 != v120);
    }
    uint64_t v124 = v232;
    uint64_t v125 = (long long *)v233;
    if (v232 != v233)
    {
      do
      {
        memset(&buf, 0, 24);
        if (*((char *)v124 + 23) < 0)
        {
          sub_10004FC84(&buf, *(void **)v124, *((void *)v124 + 1));
        }
        else
        {
          long long v126 = *v124;
          buf.var2.__r_.__value_.var0.var1.__size_ = *((void *)v124 + 2);
          *(_OWORD *)&buf.var0 = v126;
        }
        uint64_t v127 = *v203;
        if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
        {
          if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
            uint64_t v128 = &buf;
          }
          else {
            uint64_t v128 = *(CSIPhoneNumber **)&buf.var0;
          }
          *(_DWORD *)v259 = 136315138;
          *(void *)&v259[4] = v128;
          _os_log_impl((void *)&_mh_execute_header, v127, OS_LOG_TYPE_DEFAULT, "#I TestEmergencyNumberList found in bundle = %s", v259, 0xCu);
        }
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
          operator delete(*(void **)&buf.var0);
        }
        uint64_t v124 = (long long *)((char *)v124 + 24);
      }
      while (v124 != v125);
    }
    id v129 = v229;
    __int16 v130 = (std::string *)v230;
    if (v229 != v230)
    {
      do
      {
        *(void *)__val = 0;
        memset(&buf, 0, sizeof(buf));
        if (SHIBYTE(v129->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(&buf, v129->__r_.__value_.__l.__data_, v129->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v131 = *(_OWORD *)&v129->__r_.__value_.__l.__data_;
          buf.var2.__r_.__value_.var0.var1.__size_ = v129->__r_.__value_.__r.__words[2];
          *(_OWORD *)&buf.var0 = v131;
        }
        if (SHIBYTE(v129[1].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(&buf.var2.__r_.__value_.var0.var0.__data_[16], v129[1].__r_.__value_.__l.__data_, v129[1].__r_.__value_.__l.__size_);
        }
        else
        {
          long long v132 = *(_OWORD *)&v129[1].__r_.__value_.__l.__data_;
          buf.var2.var0 = v129[1].__r_.__value_.__r.__words[2];
          *((_OWORD *)&buf.var2.__r_.__value_.var0.var1 + 1) = v132;
        }
        *(void *)__val = v129[2].__r_.__value_.__l.__data_;
        BOOL v133 = *v203;
        if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
        {
          if (buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0) {
            id v134 = &buf;
          }
          else {
            id v134 = *(CSIPhoneNumber **)&buf.var0;
          }
          *(_DWORD *)v259 = 136315138;
          *(void *)&v259[4] = v134;
          _os_log_impl((void *)&_mh_execute_header, v133, OS_LOG_TYPE_DEFAULT, "#I DisambiguationEmergencyNumberList found in bundle = %s", v259, 0xCu);
        }
        if (SHIBYTE(buf.var2.var0) < 0) {
          operator delete(*((void **)&buf.var2.__r_.__value_.var0.var1 + 2));
        }
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0) {
          operator delete(*(void **)&buf.var0);
        }
        id v129 = (std::string *)((char *)v129 + 56);
      }
      while (v129 != v130);
    }
    if (v198) {
      unsigned int v135 = 2;
    }
    else {
      unsigned int v135 = 0;
    }
    uint64_t v136 = v250;
    sub_10091AE64(a1, v135, &v238, v250);
    if (v198)
    {
      uint64_t v137 = *v203;
      if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v137, OS_LOG_TYPE_DEFAULT, "#I Reading and setting carrier whitelisted numbers...", (uint8_t *)&buf, 2u);
      }
      sub_10091AE64(a1, 0xCu, &v235, v136);
      id v138 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v138, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v138, OS_LOG_TYPE_DEFAULT, "#I Skip reading disambiguation list", (uint8_t *)&buf, 2u);
      }
      goto LABEL_438;
    }
    uint64_t v141 = a1;
    BOOL v142 = sub_100E09E78(a1, v136);
    v143 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(v141 + 48) + 16))(*(void *)(v141 + 48), v136);
    memset(&__str, 0, sizeof(__str));
    sub_10010CB7C(&__str, *(void *)(v141 + 344), *(void *)(v141 + 352), 0xCF3CF3CF3CF3CF3DLL * ((uint64_t)(*(void *)(v141 + 352) - *(void *)(v141 + 344)) >> 3));
    *(void *)&long long v269 = 0;
    *(_OWORD *)v268 = 0u;
    long long v267 = 0u;
    *(_OWORD *)v266 = 0u;
    *(_OWORD *)v265 = 0u;
    *(_OWORD *)v264 = 0u;
    *(_OWORD *)v263 = 0u;
    *(_OWORD *)__val = 0u;
    memset(&buf, 0, sizeof(buf));
    std::string::size_type v144 = __str.__r_.__value_.__l.__size_;
    std::string::size_type v145 = __str.__r_.__value_.__r.__words[0];
    *(void *)v259 = _NSConcreteStackBlock;
    *(void *)&v259[8] = 0x40000000;
    *(void *)&v259[16] = sub_100E0A154;
    *(void *)&v259[24] = &unk_101A5DF68;
    *(_DWORD *)&v259[32] = v136;
    if (__str.__r_.__value_.__r.__words[0] == __str.__r_.__value_.__l.__size_) {
      goto LABEL_333;
    }
    while (((*(uint64_t (**)(uint8_t *, std::string::size_type))&v259[16])(v259, v145) & 1) == 0)
    {
      v145 += 168;
      if (v145 == v144)
      {
        std::string::size_type v145 = v144;
        break;
      }
    }
    if (v145 == __str.__r_.__value_.__l.__size_)
    {
LABEL_333:
      long long v150 = *v143;
      if (os_log_type_enabled(*v143, OS_LOG_TYPE_ERROR))
      {
        LOWORD(__dst.__r_.__value_.__l.__data_) = 0;
        _os_log_error_impl((void *)&_mh_execute_header, v150, OS_LOG_TYPE_ERROR, "Didn't find the selected SIM, assume SIM is unknown", (uint8_t *)&__dst, 2u);
      }
      BOOL v149 = 0;
    }
    else
    {
      *(_OWORD *)&buf.var0 = *(_OWORD *)v145;
      if (&buf != (CSIPhoneNumber *)v145)
      {
        sub_10008A534(&buf.var2.__r_.__value_.var0.var0.__data_[8], *(char **)(v145 + 16), *(void *)(v145 + 24), (uint64_t)(*(void *)(v145 + 24) - *(void *)(v145 + 16)) >> 2);
        sub_10008A640(&buf.var2.var0, *(void *)(v145 + 40), *(void *)(v145 + 48), 0xCCCCCCCCCCCCCCCDLL * ((uint64_t)(*(void *)(v145 + 48) - *(void *)(v145 + 40)) >> 3));
      }
      int v146 = *(_DWORD *)(v145 + 64);
      WORD2(v263[0]) = *(_WORD *)(v145 + 68);
      LODWORD(v263[0]) = v146;
      std::string::operator=((std::string *)&v263[1], (const std::string *)(v145 + 72));
      std::string::operator=((std::string *)v265, (const std::string *)(v145 + 96));
      std::string::operator=((std::string *)&v266[1], (const std::string *)(v145 + 120));
      std::string::operator=((std::string *)v268, (const std::string *)(v145 + 144));
      v147 = *v143;
      if (os_log_type_enabled(*v143, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v148 = subscriber::asString();
        LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
        *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = v148;
        _os_log_impl((void *)&_mh_execute_header, v147, OS_LOG_TYPE_DEFAULT, "#I SIM state is %s", (uint8_t *)&__dst, 0xCu);
      }
      BOOL v149 = *(_DWORD *)buf.var2.__r_.__value_.var0.var0.__data_ == 5;
    }
    if (SBYTE7(v269) < 0) {
      operator delete(v268[0]);
    }
    if (SHIBYTE(v267) < 0) {
      operator delete(v266[1]);
    }
    if (SHIBYTE(v266[0]) < 0) {
      operator delete(v265[0]);
    }
    if (SHIBYTE(v264[1]) < 0) {
      operator delete(v263[1]);
    }
    __dst.__r_.__value_.__r.__words[0] = (std::string::size_type)&buf.var2.var0;
    sub_10002E39C((void ***)&__dst);
    if (buf.var2.__r_.__value_.var0.var1.__size_)
    {
      *((void *)&buf.var2.__r_.__value_.var0.var1 + 2) = buf.var2.__r_.__value_.var0.var1.__size_;
      operator delete((void *)buf.var2.__r_.__value_.var0.var1.__size_);
    }
    *(void *)&buf.var0 = &__str;
    sub_10008A88C((void ***)&buf);
    BOOL v151 = v149 && v142;
    if (v149 && v142) {
      unsigned int v152 = 1;
    }
    else {
      unsigned int v152 = 11;
    }
    long long v153 = *v203;
    if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v154 = asString();
      buf.var0 = 136315394;
      *(void *)&buf.var1 = v154;
      WORD2(buf.var2.__r_.__value_.var0.var1.__data_) = 1024;
      *(_DWORD *)((char *)&buf.var2.__r_.__value_.var0.var1.__data_ + 6) = v142;
      _os_log_impl((void *)&_mh_execute_header, v153, OS_LOG_TYPE_DEFAULT, "#I Reading and setting operator whitelisted numbers. Operator whitelisted's type is %s Roaming: %d", (uint8_t *)&buf, 0x12u);
    }
    long long v155 = *(NSObject **)(a1 + 40);
    BOOL v156 = os_log_type_enabled(v155, OS_LOG_TYPE_DEFAULT);
    if (v151)
    {
      if (v156)
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "#I Clearing up kOperatorWhitelist since we are loading numbers for kOperatorWhitelistWhenRoaming", (uint8_t *)&buf, 2u);
      }
      unsigned int v157 = 11;
    }
    else
    {
      if (v156)
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v155, OS_LOG_TYPE_DEFAULT, "#I Clearing up kOperatorWhitelistWhenRoaming list since we are loading numbers for kOperatorWhitelist", (uint8_t *)&buf, 2u);
      }
      unsigned int v157 = 1;
    }
    uint64_t v158 = v250;
    sub_10091CC90(a1, v250, v157);
    sub_10091AE64(a1, v152, &v235, v158);
    v159 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(buf.var0) = 0;
      _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#I Updating preferred or disambiguation numbers", (uint8_t *)&buf, 2u);
      v159 = *(NSObject **)(a1 + 40);
    }
    v160 = v229;
    v161 = (std::string *)v230;
    BOOL v162 = os_log_type_enabled(v159, OS_LOG_TYPE_DEFAULT);
    if (v160 == v161)
    {
      if (v162)
      {
        CSIPhoneNumber::getFullNumber((uint64_t *)&buf.var0, &v222);
        v166 = buf.var2.__r_.__value_.var0.var0.__data_[15] >= 0 ? &buf : *(CSIPhoneNumber **)&buf.var0;
        *(_DWORD *)v259 = 136315138;
        *(void *)&v259[4] = v166;
        _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#I Found one preferred number for this country/network: %s", v259, 0xCu);
        if (buf.var2.__r_.__value_.var0.var0.__data_[15] < 0)
        {
          v167 = *(void **)&buf.var0;
          goto LABEL_406;
        }
      }
    }
    else
    {
      if (v162)
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v159, OS_LOG_TYPE_DEFAULT, "#I Found multiple numbers for this country/network. Updating rest with the disambiguation list and using default value of 112 as placeholder", (uint8_t *)&buf, 2u);
      }
      *(void **)&v222.var0 = v241[0];
      std::string::operator=((std::string *)&v222.var2, (const std::string *)&v241[1]);
      std::string::operator=((std::string *)&v222.var2.__r_.var0, (const std::string *)v243);
      DWORD2(v223) = DWORD2(v244);
      BYTE12(v223) = BYTE12(v244);
      std::string::operator=((std::string *)v224, (const std::string *)v245);
      std::string::operator=((std::string *)&v225[1], (const std::string *)&v246[1]);
      long long v227 = v248;
      LOBYTE(v228) = v249;
      v163 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v163, OS_LOG_TYPE_DEFAULT))
      {
        buf.var0 = 134217984;
        *(void *)&buf.var1 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v230 - (unsigned char *)v229) >> 3);
        _os_log_impl((void *)&_mh_execute_header, v163, OS_LOG_TYPE_DEFAULT, "#I Disambiguation list converted size : %lu.", (uint8_t *)&buf, 0xCu);
      }
      v164 = v229;
      if ((unsigned char *)v230 - (unsigned char *)v229 == 56)
      {
        *(void *)v260 = 0;
        memset(v259, 0, sizeof(v259));
        if (SHIBYTE(v229->__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(v259, v229->__r_.__value_.__l.__data_, v229->__r_.__value_.__l.__size_);
        }
        else
        {
          long long v165 = *(_OWORD *)&v229->__r_.__value_.__l.__data_;
          *(void *)&v259[16] = *((void *)&v229->__r_.__value_.__l + 2);
          *(_OWORD *)v259 = v165;
        }
        if (SHIBYTE(v164[1].__r_.__value_.__r.__words[2]) < 0)
        {
          sub_10004FC84(&v259[24], v164[1].__r_.__value_.__l.__data_, v164[1].__r_.__value_.__l.__size_);
        }
        else
        {
          long long v168 = *(_OWORD *)&v164[1].__r_.__value_.__l.__data_;
          *(void *)&v259[40] = *((void *)&v164[1].__r_.__value_.__l + 2);
          *(_OWORD *)&v259[24] = v168;
        }
        std::string::pointer v169 = v164[2].__r_.__value_.__l.__data_;
        *(void *)v260 = v169;
        uint64_t v170 = v259[47];
        uint8_t v171 = v259[47];
        if ((v259[47] & 0x80u) != 0) {
          uint64_t v170 = *(void *)&v259[32];
        }
        if (!v170 && ((unint64_t)v169 & 0xFF00000000) != 0)
        {
          v172 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v172, OS_LOG_TYPE_DEFAULT))
          {
            LOWORD(buf.var0) = 0;
            _os_log_impl((void *)&_mh_execute_header, v172, OS_LOG_TYPE_DEFAULT, "#I There is only one number in the list and it does not have a title set so it must be a preferred number!", (uint8_t *)&buf, 2u);
          }
          *(void *)&long long v267 = 0;
          *(_OWORD *)v266 = 0u;
          *(_OWORD *)v265 = 0u;
          *(_OWORD *)v264 = 0u;
          *(_OWORD *)v263 = 0u;
          *(_OWORD *)__val = 0u;
          memset(&buf, 0, sizeof(buf));
          CSIPhoneNumber::CSIPhoneNumber();
          CSIPhoneNumber::setEmergencyCategory(&buf, v260[0]);
          *(void *)&v222.var0 = *(void *)&buf.var0;
          std::string::operator=((std::string *)&v222.var2, (const std::string *)&buf.var2);
          std::string::operator=((std::string *)&v222.var2.__r_.var0, (const std::string *)&buf.var2.__r_.var0);
          DWORD2(v223) = __val[2];
          BYTE12(v223) = __val[3];
          std::string::operator=((std::string *)v224, (const std::string *)v263);
          std::string::operator=((std::string *)&v225[1], (const std::string *)&v264[1]);
          long long v227 = *(_OWORD *)v266;
          LOBYTE(v228) = v267;
          v173 = (std::string *)v230;
          v174 = v229;
          while (v173 != v174)
          {
            v173 = (std::string *)((char *)v173 - 56);
            sub_1000FECD4((uint64_t)v173);
          }
          v230 = v174;
          v175 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v175, OS_LOG_TYPE_DEFAULT))
          {
            CSIPhoneNumber::getFullNumber((uint64_t *)&__str, &v222);
            v176 = (__str.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0
                 ? &__str
                 : (std::string *)__str.__r_.__value_.__r.__words[0];
            LODWORD(__dst.__r_.__value_.__l.__data_) = 136315138;
            *(std::string::size_type *)((char *)__dst.__r_.__value_.__r.__words + 4) = (std::string::size_type)v176;
            _os_log_impl((void *)&_mh_execute_header, v175, OS_LOG_TYPE_DEFAULT, "#I Updating preferred number to %s", (uint8_t *)&__dst, 0xCu);
            if (SHIBYTE(__str.__r_.__value_.__r.__words[2]) < 0) {
              operator delete(__str.__r_.__value_.__l.__data_);
            }
          }
          if (SHIBYTE(v265[1]) < 0) {
            operator delete(v264[1]);
          }
          if (SHIBYTE(v264[0]) < 0) {
            operator delete(v263[0]);
          }
          if (SHIBYTE(__val[1]) < 0) {
            operator delete(*(void **)&buf.var2.__r_.var0);
          }
          if (*((char *)&buf.var2.__r_.__value_.var0.var1 + 23) < 0) {
            operator delete(buf.var2.__r_.__value_.var0.var1.__data_);
          }
          uint8_t v171 = v259[47];
        }
        if ((v171 & 0x80) != 0) {
          operator delete(*(void **)&v259[24]);
        }
        if ((char)v259[23] < 0)
        {
          v167 = *(void **)v259;
LABEL_406:
          operator delete(v167);
        }
      }
    }
    *(void *)&buf.var0 = 1;
    memset(&buf.var2.__r_.__value_.var0.var1.__size_, 0, 24);
    buf.var2.__r_.__value_.var0.var1.__data_ = (char *)(a1 + 264);
    v177 = (uint64_t **)sub_100E0DE1C((uint64_t)&buf.var2.__r_.__value_.var0.var1.__size_, (void *)(a1 + 296));
    v178 = sub_100BC7D38(v177, v250, &v250);
    v179 = v178;
    v180 = v178 + 5;
    if (v178 + 5 != (uint64_t **)&v229)
    {
      v181 = v229;
      v182 = v230;
      v183 = v178 + 7;
      unint64_t v184 = 0x6DB6DB6DB6DB6DB7 * (((unsigned char *)v230 - (unsigned char *)v229) >> 3);
      v185 = (std::string *)v178[5];
      if (0x6DB6DB6DB6DB6DB7 * (((char *)v178[7] - (char *)v185) >> 3) >= v184)
      {
        if (0x6DB6DB6DB6DB6DB7 * (((char *)v178[6] - (char *)v185) >> 3) < v184)
        {
          v189 = (std::string *)((char *)v229 + 8 * (((char *)v178[6] - (char *)v185) >> 3));
          sub_100E0CE10(v229, v189, v185);
          uint64_t v188 = sub_100702D38((uint64_t)(v179 + 7), (uint64_t)v189, (uint64_t)v182, (uint64_t)v179[6]);
          goto LABEL_418;
        }
        v190 = sub_100E0CE10(v229, (std::string *)v230, v185);
        for (uint64_t m = (uint64_t)v179[6]; (std::string *)m != v190; sub_1000FECD4(m))
          m -= 56;
        v179[6] = (uint64_t *)v190;
      }
      else
      {
        sub_100E0CDA8((void **)v178 + 5);
        if (v184 > 0x492492492492492) {
          sub_10006A748();
        }
        unint64_t v186 = 0xDB6DB6DB6DB6DB6ELL * ((uint64_t)(*v183 - *v180) >> 3);
        if (v186 <= v184) {
          unint64_t v186 = v184;
        }
        if ((unint64_t)(0x6DB6DB6DB6DB6DB7 * ((uint64_t)(*v183 - *v180) >> 3)) >= 0x249249249249249) {
          unint64_t v187 = 0x492492492492492;
        }
        else {
          unint64_t v187 = v186;
        }
        sub_10034235C(v180, v187);
        uint64_t v188 = sub_100702D38((uint64_t)(v179 + 7), (uint64_t)v181, (uint64_t)v182, (uint64_t)v179[6]);
LABEL_418:
        v179[6] = (uint64_t *)v188;
      }
    }
    v192 = *v203;
    if (os_log_type_enabled(*v203, OS_LOG_TYPE_DEFAULT))
    {
      CSIPhoneNumber::getFullNumber((uint64_t *)v259, &v222);
      v193 = (v259[23] & 0x80u) == 0 ? v259 : *(uint8_t **)v259;
      LODWORD(__str.__r_.__value_.__l.__data_) = 136315138;
      *(std::string::size_type *)((char *)__str.__r_.__value_.__r.__words + 4) = (std::string::size_type)v193;
      _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEFAULT, "#I Preferred emergency number = %s", (uint8_t *)&__str, 0xCu);
      if ((char)v259[23] < 0) {
        operator delete(*(void **)v259);
      }
    }
    sub_10009DB3C((uint64_t)v204, (uint64_t)&v222);
    uint64_t v136 = v250;
    sub_100E09D54(a1, (uint64_t)v204, v250);
    if (v212 < 0) {
      operator delete(v211);
    }
    if (v210 < 0) {
      operator delete(v209);
    }
    if (v208 < 0) {
      operator delete(v207);
    }
    if (v206 < 0) {
      operator delete(v205);
    }
    sub_100E0DFE4((uint64_t)&buf);
LABEL_438:
    if (v232 == v233) {
      sub_10091DAAC(a1, v136);
    }
    else {
      sub_10091AE64(a1, 0xAu, &v232, v136);
    }
  }
  else
  {
    uint64_t v139 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v139, OS_LOG_TYPE_ERROR))
    {
      LOWORD(buf.var0) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v139, OS_LOG_TYPE_ERROR, "Encountered an error when reading emergency numbers from bundle!", (uint8_t *)&buf, 2u);
    }
    if ((v198 & 1) == 0)
    {
      v140 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v140, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(buf.var0) = 0;
        _os_log_impl((void *)&_mh_execute_header, v140, OS_LOG_TYPE_DEFAULT, "#I Operator bundle is not ready! Using 112 as the preferred number.", (uint8_t *)&buf, 2u);
      }
      sub_10009DB3C((uint64_t)v213, (uint64_t)&v222);
      sub_100E09D54(a1, (uint64_t)v213, v250);
      if (v221 < 0) {
        operator delete(v220);
      }
      if (v219 < 0) {
        operator delete(v218);
      }
      if (v217 < 0) {
        operator delete(v216);
      }
      if (v215 < 0) {
        operator delete(v214);
      }
    }
  }
  if (SHIBYTE(v226) < 0) {
    operator delete(v225[1]);
  }
  if (SHIBYTE(v225[0]) < 0) {
    operator delete(v224[0]);
  }
  if (SBYTE7(v223) < 0) {
    operator delete(*(void **)&v222.var2.__r_.var0);
  }
  if (*((char *)&v222.var2.__r_.__value_.var0.var1 + 23) < 0) {
    operator delete(v222.var2.__r_.__value_.var0.var1.__data_);
  }
  *(void *)&buf.var0 = &v229;
  sub_100702E5C((void ***)&buf);
  *(void *)&buf.var0 = &v232;
  sub_100047F64((void ***)&buf);
  *(void *)&buf.var0 = &v235;
  sub_100047F64((void ***)&buf);
  *(void *)&buf.var0 = &v238;
  sub_100047F64((void ***)&buf);
  if (SHIBYTE(v247) < 0) {
    operator delete(v246[1]);
  }
  if (SHIBYTE(v246[0]) < 0) {
    operator delete(v245[0]);
  }
  if (SBYTE7(v244) < 0) {
    operator delete(v243[0]);
  }
  if (SHIBYTE(v242) < 0) {
    operator delete(v241[1]);
  }
  return v51;
}

void sub_100E0C940(_Unwind_Exception *a1)
{
  STACK[0x220] = (unint64_t)&STACK[0x2B0];
  sub_100702E5C((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&STACK[0x2C8];
  sub_100047F64((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&STACK[0x2E0];
  sub_100047F64((void ***)&STACK[0x220]);
  STACK[0x220] = (unint64_t)&STACK[0x2F8];
  sub_100047F64((void ***)&STACK[0x220]);
  sub_100087E24((uint64_t)&STACK[0x310]);
  _Unwind_Resume(a1);
}

void sub_100E0CD38(void *a1, uint64_t a2)
{
  v5[0] = 0;
  v5[1] = 0;
  sub_100E0A254((uint64_t)a1, 1, a2, v5);
  v4[0] = 0;
  v4[1] = 0;
  sub_100E0A254((uint64_t)a1, 0, a2, v4);

  sub_10091B394(a1);
}

void sub_100E0CDA8(void **a1)
{
  uint64_t v1 = *a1;
  if (*a1)
  {
    uint64_t v3 = (uint64_t)a1[1];
    uint64_t v4 = *a1;
    if ((void *)v3 != v1)
    {
      do
      {
        v3 -= 56;
        sub_1000FECD4(v3);
      }
      while ((void *)v3 != v1);
      uint64_t v4 = *a1;
    }
    a1[1] = v1;
    operator delete(v4);
    *a1 = 0;
    a1[1] = 0;
    a1[2] = 0;
  }
}

std::string *sub_100E0CE10(std::string *__str, std::string *a2, std::string *this)
{
  if (__str != a2)
  {
    uint64_t v5 = __str;
    do
    {
      std::string::operator=(this, v5);
      std::string::operator=(this + 1, v5 + 1);
      std::string::value_type v6 = v5[2].__r_.__value_.__s.__data_[4];
      LODWORD(this[2].__r_.__value_.__l.__data_) = v5[2].__r_.__value_.__l.__data_;
      this[2].__r_.__value_.__s.__data_[4] = v6;
      this = (std::string *)((char *)this + 56);
      uint64_t v5 = (std::string *)((char *)v5 + 56);
    }
    while (v5 != a2);
  }
  return this;
}

void sub_100E0CE84(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E0CF50(void *a1)
{
  __cxa_begin_catch(a1);
  dispatch_barrier_async_f(v1[3], v1, (dispatch_function_t)sub_100E0D028);
  __cxa_rethrow();
}

void sub_100E0CF78(_Unwind_Exception *a1)
{
}

void sub_100E0CF90(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E0CFC8(uint64_t a1)
{
}

uint64_t sub_100E0CFE4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100E0D028(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 32))();
  }
  return result;
}

void sub_100E0D058()
{
}

__n128 sub_100E0D06C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5E010;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E0D0C0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5E010;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E0D0F8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E0D138()
{
}

void sub_100E0D148()
{
}

__n128 sub_100E0D15C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5E090;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E0D1B0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5E090;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E0D1E8(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (uint64_t *)a1[1];
  long long v7 = *(_OWORD *)v3;
  uint64_t v8 = v3[2];
  *uint64_t v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  sub_100089CF0(v3, a2);
  uint64_t v4 = (void (*)(void *, long long *))a1[3];
  uint64_t v5 = a1[4];
  std::string::value_type v6 = (void *)(a1[2] + (v5 >> 1));
  if (v5) {
    uint64_t v4 = *(void (**)(void *, long long *))(*v6 + v4);
  }
  v4(v6, &v7);
  uint64_t v9 = (void **)&v7;
  sub_10008A88C(&v9);
}

void sub_100E0D28C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, void **a12)
{
  a12 = (void **)&a9;
  sub_10008A88C(&a12);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0D2A8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E0D2E8()
{
}

void sub_100E0D2F8()
{
}

__n128 sub_100E0D30C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5E110;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E0D360(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5E110;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E0D398(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  std::string::value_type v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    std::string::value_type v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_100E0D458(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100E0D470(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E0D4B0()
{
}

void sub_100E0D4C0()
{
}

__n128 sub_100E0D4D4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5E190;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E0D528(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5E190;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

void sub_100E0D560(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v9 = (void **)*v3;
  uint64_t v10 = v5;
  if (v3[2])
  {
    _DWORD v5[2] = &v10;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v9 = &v10;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  std::string::value_type v6 = (void (*)(void *, void ***))a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = (void *)(a1[2] + (v7 >> 1));
  if (v7) {
    std::string::value_type v6 = *(void (**)(void *, void ***))(*v8 + v6);
  }
  v6(v8, &v9);
  sub_100087F94((uint64_t)&v9, v10);
}

void sub_100E0D620(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, char a10, void *a11)
{
}

uint64_t sub_100E0D638(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E0D678()
{
}

void sub_100E0D688()
{
}

void *sub_100E0D69C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5E210;
  result[1] = v3;
  return result;
}

uint64_t sub_100E0D6E4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5E210;
  a2[1] = v2;
  return result;
}

void sub_100E0D710(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  std::string::value_type v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v30 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v30 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v9);
        goto LABEL_16;
      }
      xpc_object_t v10 = xpc_null_create();
LABEL_15:
      xpc_object_t v30 = v10;
LABEL_16:
      xpc_release(v9);
      int v11 = *((_DWORD *)v6 + 8);
      uint64_t v12 = subscriber::asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v28, (ctu::rest::detail *)v11, v12, v13);
      xpc_object_t value = &v30;
      int v24 = "first";
      sub_100035E70((uint64_t)&value, &v28, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v28);
      xpc_object_t v28 = 0;
      xpc_object_t v14 = xpc_array_create(0, 0);
      if (v14 || (xpc_object_t v14 = xpc_null_create()) != 0)
      {
        if (xpc_get_type(v14) == (xpc_type_t)&_xpc_type_array)
        {
          xpc_retain(v14);
          xpc_object_t v15 = v14;
        }
        else
        {
          xpc_object_t v15 = xpc_null_create();
        }
      }
      else
      {
        xpc_object_t v15 = xpc_null_create();
        xpc_object_t v14 = 0;
      }
      xpc_release(v14);
      uint64_t v16 = v6[5];
      uint64_t v17 = v6[6];
      while (v16 != v17)
      {
        write_rest_value();
        xpc_array_append_value(v15, value);
        xpc_release(value);
        v16 += 56;
      }
      xpc_object_t v26 = v15;
      if (v15) {
        xpc_retain(v15);
      }
      else {
        xpc_object_t v26 = xpc_null_create();
      }
      xpc_release(v15);
      xpc_object_t value = &v30;
      int v24 = "second";
      sub_100035E70((uint64_t)&value, &v26, &v27);
      xpc_release(v27);
      xpc_object_t v27 = 0;
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_object_t v18 = v30;
      if (v30) {
        xpc_retain(v30);
      }
      else {
        xpc_object_t v18 = xpc_null_create();
      }
      xpc_release(v30);
      xpc_array_append_value(v4, v18);
      xpc_release(v18);
      int v19 = (void *)v6[1];
      if (v19)
      {
        do
        {
          uint64_t v20 = v19;
          int v19 = (void *)*v19;
        }
        while (v19);
      }
      else
      {
        do
        {
          uint64_t v20 = (void *)v6[2];
          BOOL v21 = *v20 == (void)v6;
          std::string::value_type v6 = v20;
        }
        while (!v21);
      }
      std::string::value_type v6 = v20;
    }
    while (v20 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v22 = v4;
  }
  else
  {
    xpc_object_t v22 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&value, "/cc/props/disambiguation_emergency_numbers");
  xpc_object_t v30 = v22;
  if (v22) {
    xpc_retain(v22);
  }
  else {
    xpc_object_t v30 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v30);
  xpc_object_t v30 = 0;
  if (v25 < 0) {
    operator delete(value);
  }
  xpc_release(v22);
}

void sub_100E0DA90(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0DB8C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E0DBCC()
{
}

uint64_t *sub_100E0DBD8(uint64_t *a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void **)v1;
  sub_10091AE64(*(void *)v1, *(_DWORD *)(v1 + 8), (long long **)(v1 + 16), *(unsigned int *)(v1 + 40));
  sub_10091B394(v2);
  sub_100BA78B8(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100E0DC38(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

void sub_100E0DC54(uint64_t **a1)
{
  uint64_t v1 = a1;
  sub_10091CC90(**a1, *((_DWORD *)*a1 + 3), *((_DWORD *)*a1 + 2));
  operator delete();
}

void sub_100E0DCAC()
{
}

uint64_t *sub_100E0DCD8(void *a1)
{
  uint64_t v2 = a1;
  if (*a1) {
    operator delete();
  }
  return sub_100046B58((uint64_t *)&v2);
}

uint64_t *sub_100E0DD1C(uint64_t *a1)
{
  uint64_t v1 = *a1;
  xpc_object_t v4 = a1;
  uint64_t v5 = v1;
  uint64_t v2 = *(void *)v1;
  sub_10009DB3C((uint64_t)v6, v1 + 8);
  sub_100E09D54(v2, (uint64_t)v6, *(_DWORD *)(v1 + 144));
  if (v14 < 0) {
    operator delete(__p);
  }
  if (v12 < 0) {
    operator delete(v11);
  }
  if (v10 < 0) {
    operator delete(v9);
  }
  if (v8 < 0) {
    operator delete(v7);
  }
  sub_100BA7B38(&v5);
  return sub_100046B58((uint64_t *)&v4);
}

void sub_100E0DDB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *a13, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,void *__p,uint64_t a33,int a34,__int16 a35,char a36,char a37)
{
  if (a37 < 0) {
    operator delete(__p);
  }
  if (a31 < 0) {
    operator delete(a26);
  }
  if (a24 < 0) {
    operator delete(a19);
  }
  if (a18 < 0) {
    operator delete(a13);
  }
  sub_100BA7B38(&a11);
  sub_100046B58(&a10);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0DE1C(uint64_t a1, void *a2)
{
  *(void *)(a1 + 8) = 0;
  xpc_object_t v3 = (uint64_t **)(a1 + 8);
  *(void *)(a1 + 16) = 0;
  *(void *)a1 = a1 + 8;
  xpc_object_t v4 = a2 + 1;
  uint64_t v5 = (void *)*a2;
  if ((void *)*a2 != a2 + 1)
  {
    do
    {
      uint64_t v6 = *(void *)(a1 + 8);
      uint64_t v7 = v3;
      if (*(uint64_t ***)a1 == v3) {
        goto LABEL_8;
      }
      uint64_t v8 = *(void *)(a1 + 8);
      xpc_object_t v9 = v3;
      if (v6)
      {
        do
        {
          uint64_t v7 = (uint64_t **)v8;
          uint64_t v8 = *(void *)(v8 + 8);
        }
        while (v8);
      }
      else
      {
        do
        {
          uint64_t v7 = (uint64_t **)v9[2];
          BOOL v10 = *v7 == (uint64_t *)v9;
          xpc_object_t v9 = v7;
        }
        while (v10);
      }
      int v11 = *((_DWORD *)v5 + 8);
      if (*((_DWORD *)v7 + 8) < v11)
      {
LABEL_8:
        if (v6) {
          char v12 = v7;
        }
        else {
          char v12 = v3;
        }
        if (v6) {
          BOOL v13 = v7 + 1;
        }
        else {
          BOOL v13 = v3;
        }
        if (*v13) {
          goto LABEL_25;
        }
      }
      else
      {
        BOOL v13 = v3;
        char v12 = v3;
        if (v6)
        {
          char v14 = *(uint64_t **)(a1 + 8);
          while (1)
          {
            while (1)
            {
              char v12 = (uint64_t **)v14;
              int v15 = *((_DWORD *)v14 + 8);
              if (v15 <= v11) {
                break;
              }
              char v14 = *v12;
              BOOL v13 = v12;
              if (!*v12) {
                goto LABEL_24;
              }
            }
            if (v15 >= v11) {
              goto LABEL_25;
            }
            char v14 = v12[1];
            if (!v14)
            {
              BOOL v13 = v12 + 1;
              break;
            }
          }
        }
      }
LABEL_24:
      uint64_t v16 = operator new(0x40uLL);
      int v17 = *((_DWORD *)v5 + 8);
      v16[5] = 0;
      *((_DWORD *)v16 + 8) = v17;
      v16[6] = 0;
      v16[7] = 0;
      sub_100702CB0(v16 + 5, v5[5], v5[6], 0x6DB6DB6DB6DB6DB7 * ((uint64_t)(v5[6] - v5[5]) >> 3));
      sub_100046C38((uint64_t **)a1, (uint64_t)v12, v13, v16);
LABEL_25:
      xpc_object_t v18 = (void *)v5[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          xpc_object_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v5[2];
          BOOL v10 = *v19 == (void)v5;
          uint64_t v5 = v19;
        }
        while (!v10);
      }
      uint64_t v5 = v19;
    }
    while (v19 != v4);
  }
  return a1;
}

void sub_100E0DFB8(_Unwind_Exception *a1)
{
  operator delete(v2);
  sub_100703718(v1, *v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0DFE4(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void **)(a1 + 8);
    if (v2[6] == *(void *)(a1 + 32))
    {
      xpc_object_t v3 = (void *)v2[4];
      if (v3 == v2 + 5) {
        goto LABEL_27;
      }
      xpc_object_t v4 = *(void **)(a1 + 16);
      while (*((_DWORD *)v3 + 8) == *((_DWORD *)v4 + 8))
      {
        uint64_t v5 = v3[5];
        uint64_t v6 = v3[6];
        uint64_t v7 = v4[5];
        if (v6 - v5 != v4[6] - v7) {
          break;
        }
        while (v5 != v6)
        {
          if (!DisambiguationEmergencyNumber::operator==()) {
            goto LABEL_22;
          }
          v5 += 56;
          v7 += 56;
        }
        uint64_t v8 = (void *)v3[1];
        if (v8)
        {
          do
          {
            xpc_object_t v9 = v8;
            uint64_t v8 = (void *)*v8;
          }
          while (v8);
        }
        else
        {
          do
          {
            xpc_object_t v9 = (void *)v3[2];
            BOOL v10 = *v9 == (void)v3;
            xpc_object_t v3 = v9;
          }
          while (!v10);
        }
        int v11 = (void *)v4[1];
        if (v11)
        {
          do
          {
            char v12 = v11;
            int v11 = (void *)*v11;
          }
          while (v11);
        }
        else
        {
          do
          {
            char v12 = (void *)v4[2];
            BOOL v10 = *v12 == (void)v4;
            xpc_object_t v4 = v12;
          }
          while (!v10);
        }
        xpc_object_t v4 = v12;
        xpc_object_t v3 = v9;
        if (v9 == v2 + 5) {
          goto LABEL_27;
        }
      }
    }
LABEL_22:
    BOOL v13 = v2 + 5;
    sub_100703718((uint64_t)(v2 + 4), (char *)v2[5]);
    v2[4] = *(void *)(a1 + 16);
    char v14 = (void *)(a1 + 24);
    uint64_t v15 = *(void *)(a1 + 24);
    v2[5] = v15;
    uint64_t v16 = *(void *)(a1 + 32);
    v2[6] = v16;
    if (v16)
    {
      *(void *)(v15 + 16) = v13;
      *(void *)(a1 + 16) = v14;
      *char v14 = 0;
      *(void *)(a1 + 32) = 0;
    }
    else
    {
      v2[4] = v13;
    }
    uint64_t v17 = v2[3];
    if (v17) {
      (*(void (**)(uint64_t, void *))(*(void *)v17 + 48))(v17, v2 + 4);
    }
  }
LABEL_27:
  sub_100703718(a1 + 16, *(char **)(a1 + 24));
  return a1;
}

void sub_100E0E194(uint64_t **a1)
{
  uint64_t v16 = a1;
  uint64_t v1 = *a1;
  uint64_t v2 = **a1;
  xpc_object_t v3 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(v2 + 48) + 16))(*(void *)(v2 + 48), *((unsigned int *)*a1 + 3));
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v23 = 0;
  sub_10091C610(v2, *((_DWORD *)v1 + 3), 0xBu, &v23);
  BOOL v21 = 0;
  uint64_t v22 = 0;
  uint64_t v20 = 0;
  sub_10091C610(v2, *((_DWORD *)v1 + 3), 1u, &v20);
  int v4 = *((unsigned __int8 *)v1 + 8);
  uint64_t v5 = *v3;
  BOOL v6 = os_log_type_enabled(*v3, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v6)
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Check operator whitelist values BEFORE checking emergency values. Setting up fEmergencyNumbersMap so operator whitelist is checked first...", buf, 2u);
    }
    uint64_t v7 = v23;
    uint64_t v8 = v24;
    if (v23 != v24)
    {
      if (v20 != v21)
      {
        xpc_object_t v9 = *v3;
        if (os_log_type_enabled(v9, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CSIPhoneNumber buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_ERROR, "Something's wrong. Operator Roaming Whitelist cannot have values as well as Operator Home Whitelist. Clearing old values.", buf, 2u);
        }
        sub_10091CC90(v2, *((_DWORD *)v1 + 3), 1u);
        uint64_t v7 = v23;
        uint64_t v8 = v24;
      }
      uint64_t v10 = *((unsigned int *)v1 + 3);
      *(void *)CSIPhoneNumber buf = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      sub_10091E9F0(buf, v7, v8, 0xF0F0F0F0F0F0F0F1 * ((v8 - v7) >> 3));
      sub_10091D4B8(v2, v10, 1u, (uint64_t *)buf);
      xpc_object_t v26 = buf;
      sub_100702C2C((void ***)&v26);
      unsigned int v11 = 11;
LABEL_18:
      sub_10091CC90(v2, *((_DWORD *)v1 + 3), v11);
    }
  }
  else
  {
    if (v6)
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#N Do not check operator whitelist values before checking emergency values. Setting up fEmergencyNumbersMap so operator whitelist is checked after...", buf, 2u);
    }
    char v12 = v20;
    uint64_t v13 = (uint64_t)v21;
    if (v20 != v21)
    {
      if (v23 != v24)
      {
        char v14 = *v3;
        if (os_log_type_enabled(v14, OS_LOG_TYPE_ERROR))
        {
          *(_WORD *)CSIPhoneNumber buf = 0;
          _os_log_error_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_ERROR, "Something's wrong. Operator Home Whitelist cannot have values as well as Operator Roaming Whitelist. Clearing old values.", buf, 2u);
        }
        sub_10091CC90(v2, *((_DWORD *)v1 + 3), 0xBu);
        char v12 = v20;
        uint64_t v13 = (uint64_t)v21;
      }
      uint64_t v15 = *((unsigned int *)v1 + 3);
      *(void *)CSIPhoneNumber buf = 0;
      uint64_t v18 = 0;
      uint64_t v19 = 0;
      sub_10091E9F0(buf, (uint64_t)v12, v13, 0xF0F0F0F0F0F0F0F1 * ((v13 - (uint64_t)v12) >> 3));
      sub_10091D4B8(v2, v15, 0xBu, (uint64_t *)buf);
      xpc_object_t v26 = buf;
      sub_100702C2C((void ***)&v26);
      unsigned int v11 = 1;
      goto LABEL_18;
    }
  }
  xpc_object_t v26 = (uint8_t *)&v20;
  sub_100702C2C((void ***)&v26);
  uint64_t v20 = (void **)&v23;
  sub_100702C2C(&v20);
  operator delete();
}

void sub_100E0E474(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, void **a14, uint64_t a15, uint64_t a16, char a17)
{
  *(void *)(v18 - 56) = v17;
  sub_100702C2C((void ***)(v18 - 56));
  *(void *)(v18 - 56) = &a14;
  sub_100702C2C((void ***)(v18 - 56));
  a14 = (void **)&a17;
  sub_100702C2C(&a14);
  operator delete();
}

void sub_100E0E4E8(uint64_t a1, int *a2, uint64_t a3, uint64_t a4)
{
  if (*a2) {
    int v7 = 3;
  }
  else {
    int v7 = a3;
  }
  *a2 = v7;
  uint64_t v8 = (os_log_t *)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), a3);
  *(_OWORD *)CFDictionaryRef v36 = 0u;
  long long v37 = 0u;
  *(_OWORD *)uint64_t v34 = 0u;
  long long v35 = 0u;
  MCC::MCC((MCC *)v34, (const MCC *)a4);
  MCC::MCC((MCC *)v36, (const MCC *)(a4 + 32));
  xpc_object_t v9 = *v8;
  if (os_log_type_enabled(*v8, OS_LOG_TYPE_DEFAULT))
  {
    MCCAndMNC::getMcc((uint64_t *)v31, (MCCAndMNC *)v34);
    IntCFArrayRef Value = MCC::getIntValue((MCC *)v31);
    MCCAndMNC::getMnc(v29, (MCCAndMNC *)v34);
    int IntegerWidth = MNC::getIntegerWidth((MNC *)v29);
    MCCAndMNC::getMnc(v27, (MCCAndMNC *)v34);
    int v12 = MCC::getIntValue((MCC *)v27);
    *(_DWORD *)CSIPhoneNumber buf = 67109632;
    int v39 = IntValue;
    __int16 v40 = 1024;
    int v41 = IntegerWidth;
    __int16 v42 = 1024;
    int v43 = v12;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I PLMN changed to %03d-%0.*d, reading preferred local number", buf, 0x14u);
    if (v28 < 0) {
      operator delete((void *)v27[1]);
    }
    if (v30 < 0) {
      operator delete((void *)v29[1]);
    }
    if (v33 < 0) {
      operator delete(v32);
    }
    xpc_object_t v9 = *v8;
  }
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)unsigned int v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I Reading emergency numbers from both carrier and operator bundles again as PLMN has changed.", v31, 2u);
  }
  v26[0] = 0;
  v26[1] = 0;
  char v13 = sub_100E0A254(a1, 1, a3, v26);
  v25[0] = 0;
  v25[1] = 0;
  char v14 = sub_100E0A254(a1, 0, a3, v25);
  if ((v13 & 1) == 0)
  {
    uint64_t v15 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I Failed to load emergency numbers from carrier bundle so try to read numbers wth last visible PLMN!", v31, 2u);
    }
    *(void *)unsigned int v31 = 0;
    long long v32 = 0;
    sub_100E0E9A4(v31, (uint64_t)v34);
    uint64_t v16 = (std::__shared_weak_count *)v32;
    v24[0] = *(MCCAndMNC **)v31;
    v24[1] = (MCCAndMNC *)v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
    }
    int v17 = sub_100E0A254(a1, 1, a3, v24);
    if (v16) {
      sub_10004D2C8(v16);
    }
    if (v17)
    {
      uint64_t v18 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v18, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I  Successfully loaded numbers with PLMN!", (uint8_t *)v29, 2u);
      }
    }
    if (v16) {
      sub_10004D2C8(v16);
    }
  }
  if ((v14 & 1) == 0)
  {
    uint64_t v19 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)unsigned int v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Failed to load emergency numbers from operator bundle so try to read numbers wth last visible PLMN!", v31, 2u);
    }
    *(void *)unsigned int v31 = 0;
    long long v32 = 0;
    sub_100E0E9A4(v31, (uint64_t)v34);
    uint64_t v20 = (std::__shared_weak_count *)v32;
    v23[0] = *(MCCAndMNC **)v31;
    v23[1] = (MCCAndMNC *)v32;
    if (v32) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)v32 + 1, 1uLL, memory_order_relaxed);
    }
    int v21 = sub_100E0A254(a1, 0, a3, v23);
    if (v20) {
      sub_10004D2C8(v20);
    }
    if (v21)
    {
      uint64_t v22 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
      {
        LOWORD(v29[0]) = 0;
        _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I Successfully loaded numbers with PLMN!", (uint8_t *)v29, 2u);
      }
    }
    if (v20) {
      sub_10004D2C8(v20);
    }
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[1]);
  }
  if (SHIBYTE(v35) < 0) {
    operator delete(v34[1]);
  }
}

void sub_100E0E8DC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,void *a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,char a38)
{
  if (v38)
  {
    sub_10004D2C8(v38);
    sub_10004D2C8(v38);
  }
  sub_10013C44C((uint64_t)&a38);
  _Unwind_Resume(a1);
}

void sub_100E0E984(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (a35 < 0) {
    operator delete(__p);
  }
  JUMPOUT(0x100E0E97CLL);
}

void sub_100E0E99C()
{
}

MCC *sub_100E0E9A4(void *a1, uint64_t a2)
{
  int v4 = operator new(0x58uLL);
  v4[1] = 0;
  void v4[2] = 0;
  *int v4 = off_101A5E2A0;
  __n128 result = sub_100AB76FC((MCC *)(v4 + 3), a2);
  *a1 = v4 + 3;
  a1[1] = v4;
  return result;
}

void sub_100E0EA10(_Unwind_Exception *a1)
{
  std::__shared_weak_count::~__shared_weak_count(v1);
  operator delete(v3);
  _Unwind_Resume(a1);
}

void sub_100E0EA28(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5E2A0;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E0EA48(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5E2A0;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E0EA9C(uint64_t a1)
{
}

void *sub_100E0EAA8(void *a1, void *a2)
{
  *a1 = off_1019F8B90;
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "euicc.keychain");
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v7, &v6);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 1), (const ctu::OsLogLogger *)v7);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v7);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
  *a1 = off_101A5E2F0;
  a1[2] = *a2;
  uint64_t v4 = a2[1];
  a1[3] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_100E0EB74(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v3 = va_arg(va1, void);
  uint64_t v5 = va_arg(va1, void);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va1);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)va);
  _Unwind_Resume(a1);
}

void *sub_100E0EB98(void *a1)
{
  *a1 = off_101A5E2F0;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    sub_10004D2C8(v2);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 1));
  return a1;
}

void sub_100E0EBF0(void *a1)
{
  sub_100E0EB98(a1);

  operator delete();
}

const void **sub_100E0EC28@<X0>(ctu *this@<X1>, uint64_t a2@<X0>, const void **a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v34 = 0;
  ctu::hex((uint64_t *)&__p, this, (const void *)0x10, (unint64_t)a3);
  if (v33 >= 0) {
    p_p = (const char *)&__p;
  }
  else {
    p_p = (const char *)__p;
  }
  uint64_t v10 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, p_p, 0x8000100u);
  uint64_t v34 = v10;
  if (SHIBYTE(v33) < 0)
  {
    operator delete(__p);
    uint64_t v10 = v34;
  }
  std::string __p = 0;
  uint64_t v32 = 0;
  uint64_t v33 = 0;
  v29[0] = 0;
  v29[1] = 0;
  uint64_t v30 = 0;
  if (sub_1000BF7B4(a2 + 16, v10))
  {
    unsigned int v11 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v11, OS_LOG_TYPE_ERROR))
    {
      LOWORD(__s1) = 0;
      _os_log_error_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_ERROR, "keychain error reading euicc token", (uint8_t *)&__s1, 2u);
    }
    *(_WORD *)a4 = 256;
LABEL_41:
    sub_100058DB0(a5, "");
    goto LABEL_42;
  }
  __s1 = 0;
  __uint64_t n = 0;
  uint64_t v28 = 0;
  sub_100637AC0(&v25, a3);
  sub_1002D0B74((uint64_t *)&__s1);
  sub_100127DDC(&v25);
  char v12 = HIBYTE(v28);
  if (v28 >= 0) {
    size_t v13 = HIBYTE(v28);
  }
  else {
    size_t v13 = __n;
  }
  uint64_t v14 = HIBYTE(v33);
  int v15 = SHIBYTE(v33);
  if (v33 < 0) {
    uint64_t v14 = v32;
  }
  if (v13 != v14) {
    goto LABEL_26;
  }
  if (v33 >= 0) {
    uint64_t v16 = (unsigned __int8 *)&__p;
  }
  else {
    uint64_t v16 = (unsigned __int8 *)__p;
  }
  if ((v28 & 0x8000000000000000) == 0)
  {
    if (HIBYTE(v28))
    {
      p_s1 = &__s1;
      uint64_t v18 = HIBYTE(v28);
      while (*(unsigned __int8 *)p_s1 == *v16)
      {
        p_s1 = (void **)((char *)p_s1 + 1);
        ++v16;
        if (!--v18) {
          goto LABEL_33;
        }
      }
      goto LABEL_26;
    }
LABEL_33:
    uint64_t v23 = *(NSObject **)(a2 + 8);
    if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)CSIPhoneNumber buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I euicc token fetched from keychain", buf, 2u);
    }
    if (*(unsigned char *)(a4 + 1)) {
      *(unsigned char *)(a4 + 1) = 0;
    }
    *(_OWORD *)a5 = *(_OWORD *)v29;
    a5[2] = v30;
    v29[1] = 0;
    uint64_t v30 = 0;
    v29[0] = 0;
    char v22 = 1;
    goto LABEL_38;
  }
  if (!memcmp(__s1, v16, __n)) {
    goto LABEL_33;
  }
LABEL_26:
  uint64_t v19 = *(NSObject **)(a2 + 8);
  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v20 = __p;
    if (v15 >= 0) {
      uint64_t v20 = &__p;
    }
    int v21 = &__s1;
    if (v12 < 0) {
      int v21 = __s1;
    }
    *(_DWORD *)CSIPhoneNumber buf = 136315394;
    CFDictionaryRef v36 = v20;
    __int16 v37 = 2080;
    unsigned int v38 = v21;
    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Stale token needs refresh (%s) new token (%s) ", buf, 0x16u);
  }
  char v22 = 0;
  *(_WORD *)a4 = 257;
LABEL_38:
  if (SHIBYTE(v28) < 0) {
    operator delete(__s1);
  }
  if ((v22 & 1) == 0) {
    goto LABEL_41;
  }
LABEL_42:
  if (SHIBYTE(v30) < 0) {
    operator delete(v29[0]);
  }
  if (SHIBYTE(v33) < 0) {
    operator delete(__p);
  }
  return sub_1000558F4((const void **)&v34);
}

void sub_100E0EF44(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, uint64_t a11, uint64_t a12, uint64_t a13, void *__p, uint64_t a15, int a16, __int16 a17, char a18, char a19, void *a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,const void *a26)
{
  if (a19 < 0) {
    operator delete(__p);
  }
  if (a25 < 0) {
    operator delete(a20);
  }
  sub_1000558F4(&a26);
  _Unwind_Resume(a1);
}

uint64_t sub_100E0EFA8(uint64_t a1, ctu *this, const void **a3, uint64_t a4)
{
  ctu::hex((uint64_t *)__p, this, (const void *)0x10, (unint64_t)a3);
  if (v16 >= 0) {
    int v7 = __p;
  }
  else {
    int v7 = *(const char **)__p;
  }
  uint64_t v8 = (__CFString *)CFStringCreateWithCString(kCFAllocatorDefault, v7, 0x8000100u);
  uint64_t v14 = v8;
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
  sub_100637AC0(&v13, a3);
  sub_1002D0B74((uint64_t *)__p);
  uint64_t v9 = sub_1000C119C(a1 + 16, v8, (uint64_t)__p, a4, 0);
  if (v16 < 0) {
    operator delete(*(void **)__p);
  }
  sub_100127DDC(&v13);
  if ((v9 & 1) == 0)
  {
    uint64_t v10 = *(NSObject **)(a1 + 8);
    if (os_log_type_enabled(v10, OS_LOG_TYPE_ERROR))
    {
      if (*(char *)(a4 + 23) >= 0) {
        uint64_t v12 = a4;
      }
      else {
        uint64_t v12 = *(void *)a4;
      }
      *(_DWORD *)std::string __p = 136315138;
      *(void *)&__p[4] = v12;
      _os_log_error_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_ERROR, "keychain error saving euicc token : %s", __p, 0xCu);
    }
  }
  sub_1000558F4((const void **)&v14);
  return v9;
}

void sub_100E0F118(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if (a16 < 0) {
    operator delete(__p);
  }
  sub_100127DDC((const void **)&a9);
  sub_1000558F4(&a10);
  _Unwind_Resume(a1);
}

void RadioCapabilitiesHandler::create(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100E0F4AC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, _Unwind_Exception *exception_object, uint64_t a17, PersonalitiesTracker *a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,dispatch_object_t object,dispatch_object_t a26)
{
  if (__p) {
    (*(void (**)(void *))(*(void *)__p + 8))(__p);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v27 - 96);
  if (v28) {
    sub_10004D2C8(v28);
  }
  sub_10004D2C8(v26);
  _Unwind_Resume(a1);
}

void *sub_100E0F6B4(uint64_t a1)
{
  sub_1000346F8(a1 + 32, *(void **)(a1 + 40));

  return sub_100E145FC((void *)a1);
}

void sub_100E0F6F4(uint64_t a1)
{
  *(void *)a1 = off_101A5E368;
  uint64_t v2 = *(std::__shared_weak_count **)(a1 + 568);
  if (v2) {
    sub_10004D2C8(v2);
  }
  sub_1000346F8(a1 + 528, *(void **)(a1 + 536));
  sub_100E145FC((void *)(a1 + 496));
  sub_1000346F8(a1 + 472, *(void **)(a1 + 480));
  sub_10005CD2C(a1 + 448, *(char **)(a1 + 456));
  sub_10005CD2C(a1 + 424, *(char **)(a1 + 432));
  sub_1000346F8(a1 + 400, *(void **)(a1 + 408));
  sub_100087F94(a1 + 376, *(void **)(a1 + 384));
  sub_100087F94(a1 + 352, *(void **)(a1 + 360));
  sub_10005CD2C(a1 + 328, *(char **)(a1 + 336));
  sub_10005CD2C(a1 + 304, *(char **)(a1 + 312));
  uint64_t v4 = (void **)(a1 + 280);
  sub_10008A88C(&v4);
  PersonalitiesTracker::~PersonalitiesTracker((PersonalitiesTracker *)(a1 + 112));
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 104);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_1001FEC70(*(void **)(a1 + 80));
  CapabilitiesHandler::~CapabilitiesHandler((CapabilitiesHandler *)a1);
}

void sub_100E0F7F4(uint64_t a1)
{
  sub_100E0F6F4(a1);

  operator delete();
}

void sub_100E0F82C(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t sub_100E0F8F8(uint64_t a1)
{
  uint64_t result = capabilities::ct::supports5G((capabilities::ct *)a1);
  if (result)
  {
    if (*(_DWORD *)(a1 + 556) == 1)
    {
      uint64_t v3 = *(NSObject **)(a1 + 40);
      BOOL v4 = os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT);
      uint64_t result = 0;
      if (v4)
      {
        *(_WORD *)uint64_t v5 = 0;
        _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Device activation policy doesn't support 5G", v5, 2u);
        return 0;
      }
    }
    else
    {
      return 1;
    }
  }
  return result;
}

BOOL sub_100E0F984(uint64_t a1)
{
  uint64_t v4 = a1;
  v5[0] = _NSConcreteStackBlock;
  v5[1] = 0x40000000;
  _DWORD v5[2] = sub_100E1A0D8;
  v5[3] = &unk_101A5EBB8;
  v5[4] = a1 + 8;
  v5[5] = &v4;
  OsLogContext v6 = v5;
  uint64_t v2 = a1 + 24;
  uint64_t v1 = *(NSObject **)(a1 + 24);
  if (*(void *)(v2 + 8))
  {
    char v13 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_10005B2C0;
    uint64_t v10 = &unk_101A5EBF8;
    unsigned int v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_async_and_wait(v1, &block);
  }
  else
  {
    char v13 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v8 = 0x40000000;
    uint64_t v9 = sub_10005A55C;
    uint64_t v10 = &unk_101A5EBD8;
    unsigned int v11 = &v13;
    uint64_t v12 = &v6;
    dispatch_sync(v1, &block);
  }
  return v13 != 0;
}

BOOL sub_100E0FAB4(uint64_t a1, int a2)
{
  uint64_t v5 = a1;
  int v6 = a2;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_100E1A0E4;
  void v7[3] = &unk_101A5EC18;
  v7[4] = a1 + 8;
  void v7[5] = &v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    char v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unsigned int v11 = sub_10005B2C0;
    uint64_t v12 = &unk_101A5EBF8;
    char v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unsigned int v11 = sub_10005A55C;
    uint64_t v12 = &unk_101A5EBD8;
    char v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15 != 0;
}

uint64_t sub_100E0FBEC(uint64_t a1, int a2, uint64_t a3)
{
  int v8 = a2;
  v6[0] = a1;
  v6[1] = &v8;
  void v6[2] = &v7;
  uint64_t v7 = a3;
  v9[0] = _NSConcreteStackBlock;
  v9[1] = 0x40000000;
  void v9[2] = sub_100E1A29C;
  void v9[3] = &unk_101A5EC38;
  uint8_t v9[4] = a1 + 8;
  void v9[5] = v6;
  uint64_t v10 = v9;
  uint64_t v4 = a1 + 24;
  uint64_t v3 = *(NSObject **)(a1 + 24);
  if (*(void *)(v4 + 8))
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    char v13 = sub_100E1A2F0;
    uint64_t v14 = &unk_101A5EC78;
    char v15 = &v17;
    char v16 = &v10;
    uint64_t v17 = 0;
    dispatch_async_and_wait(v3, &block);
  }
  else
  {
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v12 = 0x40000000;
    char v13 = sub_100E1A2B4;
    uint64_t v14 = &unk_101A5EC58;
    char v15 = &v17;
    char v16 = &v10;
    uint64_t v17 = 0;
    dispatch_sync(v3, &block);
  }
  return v17;
}

uint64_t sub_100E0FD28(uint64_t a1, uint64_t a2, const void *a3)
{
  uint64_t v18 = 0;
  uint64_t v19 = 0;
  sub_100E0FFD8(&v18, a1, a2);
  uint64_t v6 = v18;
  if (!v18)
  {
    uint64_t v9 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    uint64_t v10 = subscriber::asString();
    *(_DWORD *)CSIPhoneNumber buf = 136315138;
    uint64_t v21 = v10;
    unsigned int v11 = "#E No model for slot %s";
    uint64_t v12 = v9;
    uint32_t v13 = 12;
LABEL_9:
    _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, v11, buf, v13);
    goto LABEL_10;
  }
  if (!a3)
  {
    uint64_t v14 = *(NSObject **)(a1 + 40);
    if (!os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_10;
    }
    *(_WORD *)CSIPhoneNumber buf = 0;
    unsigned int v11 = "#E key received to check for capability is NULL";
    uint64_t v12 = v14;
    uint32_t v13 = 2;
    goto LABEL_9;
  }
  if (CFEqual(a3, kCallerIDCapability))
  {
    uint64_t v7 = &kCFBooleanTrue;
    int v8 = *(unsigned __int8 *)(v6 + 45);
    goto LABEL_15;
  }
  if (CFEqual(a3, kCallForwardingCapability))
  {
    uint64_t v7 = &kCFBooleanTrue;
    int v8 = *(unsigned __int8 *)(v6 + 43);
    goto LABEL_15;
  }
  if (CFEqual(a3, kCallWaitingCapability))
  {
    uint64_t v7 = &kCFBooleanTrue;
    int v8 = *(unsigned __int8 *)(v6 + 44);
    goto LABEL_15;
  }
  if (!CFEqual(a3, kConferenceCallType))
  {
    if (CFEqual(a3, kSimultaneousCallAndDataSupported))
    {
      uint64_t v7 = &kCFBooleanTrue;
      int v8 = *(unsigned __int8 *)(v6 + 40);
      goto LABEL_15;
    }
    if (CFEqual(a3, kSimultaneousCallAndDataCurrentlySupported))
    {
      uint64_t v7 = &kCFBooleanTrue;
      int v8 = *(unsigned __int8 *)(v6 + 41);
      goto LABEL_15;
    }
    if (CFEqual(a3, kAgentCapability))
    {
      uint64_t v7 = &kCFBooleanTrue;
      int v8 = *(unsigned __int8 *)(v6 + 20);
LABEL_15:
      if (!v8) {
        uint64_t v7 = &kCFBooleanFalse;
      }
LABEL_17:
      uint64_t v15 = (uint64_t)*v7;
      goto LABEL_18;
    }
    if (CFEqual(a3, kSuspendInternetOnBBCall))
    {
      int v17 = suspendInternetOnBBCall((Registry **)(a1 + 56), a2);
      uint64_t v7 = &kCFBooleanTrue;
      if (!v17) {
        uint64_t v7 = &kCFBooleanFalse;
      }
      goto LABEL_17;
    }
LABEL_10:
    uint64_t v15 = 0;
    goto LABEL_18;
  }
  uint64_t v15 = sub_100E10058(a1, (PersonalityInfo **)v6);
LABEL_18:
  if (v19) {
    sub_10004D2C8(v19);
  }
  return v15;
}

void sub_100E0FFBC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100E0FFD8(void *result, uint64_t a2, int a3)
{
  uint64_t v3 = *(void **)(a2 + 72);
  if (v3 == (void *)(a2 + 80))
  {
LABEL_9:
    *uint64_t result = 0;
    result[1] = 0;
  }
  else
  {
    while (1)
    {
      uint64_t v4 = v3[7];
      if (*(_DWORD *)(*(void *)v4 + 52) == a3) {
        break;
      }
      uint64_t v5 = (void *)v3[1];
      if (v5)
      {
        do
        {
          uint64_t v6 = v5;
          uint64_t v5 = (void *)*v5;
        }
        while (v5);
      }
      else
      {
        do
        {
          uint64_t v6 = (void *)v3[2];
          BOOL v7 = *v6 == (void)v3;
          uint64_t v3 = v6;
        }
        while (!v7);
      }
      uint64_t v3 = v6;
      if (v6 == (void *)(a2 + 80)) {
        goto LABEL_9;
      }
    }
    uint64_t v8 = v3[8];
    *uint64_t result = v4;
    result[1] = v8;
    if (v8) {
      atomic_fetch_add_explicit((atomic_ullong *volatile)(v8 + 8), 1uLL, memory_order_relaxed);
    }
  }
  return result;
}

uint64_t sub_100E10058(uint64_t a1, PersonalityInfo **a2)
{
  uint64_t v2 = kConferenceCallTypeUnknown;
  uint64_t v4 = (WirelessTechnologyList *)((char *)a2 + 36);
  int v3 = *((_DWORD *)a2 + 9);
  if (v3)
  {
    if ((v3 & 0x24) != 0)
    {
      uint64_t v5 = &kConferenceCallType6Party;
      return *(void *)v5;
    }
    if ((v3 & 8) != 0)
    {
      uint64_t v5 = &kConferenceCallType3Party;
      return *(void *)v5;
    }
    BOOL v7 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v8 = PersonalityInfo::logPrefix(*a2);
      WirelessTechnologyList::asString((uint64_t *)__p, v4);
      if (v12 >= 0) {
        uint64_t v9 = __p;
      }
      else {
        uint64_t v9 = (void **)__p[0];
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315650;
      uint64_t v14 = v8;
      __int16 v15 = 2080;
      char v16 = " ";
      __int16 v17 = 2080;
      uint64_t v18 = v9;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I %s%sNot handling %s call technology type", buf, 0x20u);
      if (v12 < 0) {
        operator delete(__p[0]);
      }
    }
  }
  return v2;
}

uint64_t sub_100E101A8(uint64_t a1, int a2)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_100E1A32C;
  void v7[3] = &unk_101A5EC98;
  v7[4] = a1 + 8;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  uint64_t v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    unsigned int v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unsigned int v11 = sub_100E1A3C8;
    char v12 = &unk_101A5ECD8;
    uint32_t v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    unsigned int v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    unsigned int v11 = sub_100E1A38C;
    char v12 = &unk_101A5ECB8;
    uint32_t v13 = &v15;
    uint64_t v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15;
}

void sub_100E102DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100365D74();
  sub_100058DB0(__p, "Capabilities::SimCallAndDataSupported");
  BOOL v5 = sub_1002260B0(v4, (void **)__p, (BOOL *)(a2 + 40));
  if (v91 < 0) {
    operator delete(*(void **)__p);
  }
  if (v5)
  {
    int v6 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v7 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      *(_DWORD *)std::string __p = 136315394;
      *(void *)&__p[4] = v7;
      __int16 v89 = 2080;
      long long v90 = " ";
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I %s%sMigrating persistent 'Call and Data Supported'", __p, 0x16u);
    }
    uint64_t v8 = (uint64_t **)sub_100365D74();
    sub_100058DB0(__p, "Capabilities::SimCallAndDataSupported");
    sub_1003660FC(v8, (void **)__p);
    uint64_t v9 = (uint64_t *)v91;
    if ((v9 & 0x80000000) != 0) {
      operator delete(*(void **)__p);
    }
    ServiceMap = (std::mutex *)Registry::getServiceMap(v9, *(Registry **)(a1 + 56));
    unsigned int v11 = ServiceMap;
    if (v12 < 0)
    {
      uint32_t v13 = (unsigned __int8 *)(v12 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v14 = 5381;
      do
      {
        uint64_t v12 = v14;
        unsigned int v15 = *v13++;
        uint64_t v14 = (33 * v14) ^ v15;
      }
      while (v15);
    }
    std::mutex::lock(ServiceMap);
    *(void *)std::string __p = v12;
    char v16 = sub_10004D37C(&v11[1].__m_.__sig, (unint64_t *)__p);
    if (v16)
    {
      uint64_t v18 = v16[3];
      __int16 v17 = (std::__shared_weak_count *)v16[4];
      if (v17)
      {
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v11);
        atomic_fetch_add_explicit(&v17->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v17);
        char v19 = 0;
        goto LABEL_16;
      }
    }
    else
    {
      uint64_t v18 = 0;
    }
    std::mutex::unlock(v11);
    __int16 v17 = 0;
    char v19 = 1;
LABEL_16:
    if (*(unsigned char *)(a2 + 40)) {
      uint64_t v20 = &kCFBooleanTrue;
    }
    else {
      uint64_t v20 = &kCFBooleanFalse;
    }
    (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v18 + 16))(v18, *(void *)a2 + 24, @"SimCallAndDataSupported", *v20, @"Capabilities", 0, 1, 0);
    if ((v19 & 1) == 0) {
      sub_10004D2C8(v17);
    }
  }
  uint64_t v21 = sub_100365D74();
  sub_100058DB0(__p, "Capabilities::SimCallAndDataCurrentlySupported");
  char v22 = (unsigned char *)(a2 + 41);
  BOOL v23 = sub_1002260B0(v21, (void **)__p, (BOOL *)(a2 + 41));
  BOOL v24 = v23;
  if (v91 < 0)
  {
    operator delete(*(void **)__p);
    if (!v24) {
      goto LABEL_42;
    }
  }
  else if (!v23)
  {
    goto LABEL_42;
  }
  uint64_t v25 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v26 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
    *(_DWORD *)std::string __p = 136315394;
    *(void *)&__p[4] = v26;
    __int16 v89 = 2080;
    long long v90 = " ";
    _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#I %s%sMigrating persisted 'Call and Data'", __p, 0x16u);
  }
  uint64_t v27 = (uint64_t **)sub_100365D74();
  sub_100058DB0(__p, "Capabilities::SimCallAndDataCurrentlySupported");
  sub_1003660FC(v27, (void **)__p);
  uint64_t v28 = (uint64_t *)v91;
  if ((v28 & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  long long v29 = (std::mutex *)Registry::getServiceMap(v28, *(Registry **)(a1 + 56));
  uint64_t v30 = v29;
  if (v31 < 0)
  {
    uint64_t v32 = (unsigned __int8 *)(v31 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v33 = 5381;
    do
    {
      uint64_t v31 = v33;
      unsigned int v34 = *v32++;
      uint64_t v33 = (33 * v33) ^ v34;
    }
    while (v34);
  }
  std::mutex::lock(v29);
  *(void *)std::string __p = v31;
  long long v35 = sub_10004D37C(&v30[1].__m_.__sig, (unint64_t *)__p);
  if (v35)
  {
    uint64_t v37 = v35[3];
    CFDictionaryRef v36 = (std::__shared_weak_count *)v35[4];
    if (v36)
    {
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v30);
      atomic_fetch_add_explicit(&v36->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v36);
      char v38 = 0;
      goto LABEL_37;
    }
  }
  else
  {
    uint64_t v37 = 0;
  }
  std::mutex::unlock(v30);
  CFDictionaryRef v36 = 0;
  char v38 = 1;
LABEL_37:
  if (*(unsigned char *)(a2 + 41)) {
    int v39 = &kCFBooleanTrue;
  }
  else {
    int v39 = &kCFBooleanFalse;
  }
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v37 + 16))(v37, *(void *)a2 + 24, @"SimCallAndDataCurrentlySupported", *v39, @"Capabilities", 0, 1, 0);
  if ((v38 & 1) == 0) {
    sub_10004D2C8(v36);
  }
LABEL_42:
  BOOL v87 = 0;
  uint64_t v40 = sub_100365D74();
  sub_100058DB0(__p, "NetworkSupportsVoPS");
  BOOL v41 = sub_1002260B0(v40, (void **)__p, &v87);
  BOOL v42 = v41;
  int v43 = (uint64_t *)v91;
  if ((v43 & 0x80000000) != 0)
  {
    operator delete(*(void **)__p);
    if (!v42) {
      goto LABEL_61;
    }
  }
  else if (!v41)
  {
    goto LABEL_61;
  }
  uint64_t v44 = (uint64_t **)sub_100365D74();
  sub_100058DB0(__p, "NetworkSupportsVoPS");
  sub_1003660FC(v44, (void **)__p);
  long long v45 = (uint64_t *)v91;
  if ((v45 & 0x80000000) != 0) {
    operator delete(*(void **)__p);
  }
  long long v46 = (std::mutex *)Registry::getServiceMap(v45, *(Registry **)(a1 + 56));
  long long v47 = v46;
  if (v48 < 0)
  {
    unint64_t v49 = (unsigned __int8 *)(v48 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v50 = 5381;
    do
    {
      uint64_t v48 = v50;
      unsigned int v51 = *v49++;
      uint64_t v50 = (33 * v50) ^ v51;
    }
    while (v51);
  }
  std::mutex::lock(v46);
  *(void *)std::string __p = v48;
  CFIndex v52 = sub_10004D37C(&v47[1].__m_.__sig, (unint64_t *)__p);
  if (v52)
  {
    uint64_t v54 = v52[3];
    long long v53 = (std::__shared_weak_count *)v52[4];
    if (v53)
    {
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v47);
      atomic_fetch_add_explicit(&v53->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v53);
      char v55 = 0;
      goto LABEL_56;
    }
  }
  else
  {
    uint64_t v54 = 0;
  }
  std::mutex::unlock(v47);
  long long v53 = 0;
  char v55 = 1;
LABEL_56:
  if (v87) {
    CFNumberRef v56 = &kCFBooleanTrue;
  }
  else {
    CFNumberRef v56 = &kCFBooleanFalse;
  }
  (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v54 + 16))(v54, *(void *)a2 + 24, @"NetworkSupportsVoPS", *v56, @"Capabilities", 0, 1, 0);
  if ((v55 & 1) == 0) {
    sub_10004D2C8(v53);
  }
LABEL_61:
  CFNumberRef v57 = (std::mutex *)Registry::getServiceMap(v43, *(Registry **)(a1 + 56));
  CFTypeID v58 = v57;
  uint64_t v60 = v59;
  if (v59 < 0)
  {
    CFBooleanRef v61 = (unsigned __int8 *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v62 = 5381;
    do
    {
      uint64_t v60 = v62;
      unsigned int v63 = *v61++;
      uint64_t v62 = (33 * v62) ^ v63;
    }
    while (v63);
  }
  std::mutex::lock(v57);
  *(void *)std::string __p = v60;
  CFBooleanRef v64 = sub_10004D37C(&v58[1].__m_.__sig, (unint64_t *)__p);
  if (!v64)
  {
    uint64_t v66 = 0;
    goto LABEL_68;
  }
  uint64_t v66 = v64[3];
  CFBooleanRef v65 = (std::__shared_weak_count *)v64[4];
  if (!v65)
  {
LABEL_68:
    std::mutex::unlock(v58);
    CFBooleanRef v65 = 0;
    char v67 = 1;
    goto LABEL_69;
  }
  atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v58);
  atomic_fetch_add_explicit(&v65->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v65);
  char v67 = 0;
LABEL_69:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v66 + 24))(&cf, v66, *(void *)a2 + 24, @"SimCallAndDataSupported", @"Capabilities", 0, 1);
  int v68 = (BOOL *)cf;
  __p[0] = 0;
  if (cf && (CFTypeID v69 = CFGetTypeID(cf), v69 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)__p, v68, v70);
    char v71 = __p[0];
  }
  else
  {
    char v71 = 0;
  }
  *(unsigned char *)(a2 + 40) = v71;
  sub_1000577C4(&cf);
  if ((v67 & 1) == 0) {
    sub_10004D2C8(v65);
  }
  long long v73 = (std::mutex *)Registry::getServiceMap(v72, *(Registry **)(a1 + 56));
  long long v74 = v73;
  if (v59 < 0)
  {
    char v75 = (unsigned __int8 *)(v59 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v76 = 5381;
    do
    {
      uint64_t v59 = v76;
      unsigned int v77 = *v75++;
      uint64_t v76 = (33 * v76) ^ v77;
    }
    while (v77);
  }
  std::mutex::lock(v73);
  *(void *)std::string __p = v59;
  xpc_object_t v78 = sub_10004D37C(&v74[1].__m_.__sig, (unint64_t *)__p);
  if (!v78)
  {
    uint64_t v80 = 0;
    goto LABEL_82;
  }
  uint64_t v80 = v78[3];
  BOOL v79 = (std::__shared_weak_count *)v78[4];
  if (!v79)
  {
LABEL_82:
    std::mutex::unlock(v74);
    BOOL v79 = 0;
    char v81 = 1;
    goto LABEL_83;
  }
  atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v74);
  atomic_fetch_add_explicit(&v79->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v79);
  char v81 = 0;
LABEL_83:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v80 + 24))(&cf, v80, *(void *)a2 + 24, @"SimCallAndDataCurrentlySupported", @"Capabilities", 0, 1);
  uint64_t v82 = (BOOL *)cf;
  __p[0] = 0;
  if (cf && (CFTypeID v83 = CFGetTypeID(cf), v83 == CFBooleanGetTypeID()))
  {
    ctu::cf::assign((ctu::cf *)__p, v82, v84);
    char v85 = __p[0];
  }
  else
  {
    char v85 = 0;
  }
  *char v22 = v85;
  sub_1000577C4(&cf);
  if ((v81 & 1) == 0) {
    sub_10004D2C8(v79);
  }
}

void sub_100E10B1C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16)
{
  if ((v16 & 1) == 0) {
    sub_10004D2C8(v17);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E10BE0(uint64_t a1, unsigned int *a2)
{
  uint64_t v4 = *(PersonalityInfo **)a2;
  uint64_t v5 = *(void *)(a1 + 360);
  if (v5)
  {
    int v6 = *((_DWORD *)v4 + 13);
    uint64_t v7 = a1 + 360;
    do
    {
      int v8 = *(_DWORD *)(v5 + 32);
      BOOL v9 = v8 < v6;
      if (v8 >= v6) {
        uint64_t v10 = (uint64_t *)v5;
      }
      else {
        uint64_t v10 = (uint64_t *)(v5 + 8);
      }
      if (!v9) {
        uint64_t v7 = v5;
      }
      uint64_t v5 = *v10;
    }
    while (*v10);
    if (v7 != a1 + 360 && v6 >= *(_DWORD *)(v7 + 32))
    {
      int v11 = *(unsigned __int8 *)(v7 + 41);
      if (v11 == 2)
      {
        v192 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT))
        {
LABEL_263:
          int v13 = 3;
          goto LABEL_18;
        }
        *(_DWORD *)CSIPhoneNumber buf = 136315394;
        *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        v193 = "#I %s%sCarrier ID based device, primary CDMA with GSM support";
LABEL_262:
        _os_log_impl((void *)&_mh_execute_header, v192, OS_LOG_TYPE_DEFAULT, v193, buf, 0x16u);
        goto LABEL_263;
      }
      if (!v11) {
        goto LABEL_13;
      }
      v194 = (uint64_t *)a2[7];
      if (!*(void *)(a2 + 7))
      {
        uint64_t v12 = *(NSObject **)(a1 + 40);
        int v13 = 0;
        if (!os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_18;
        }
        *(_DWORD *)CSIPhoneNumber buf = 136315394;
        *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        uint64_t v14 = "#W %s%sThere is no SIM available, cannot decide";
        goto LABEL_15;
      }
      if (v194 == 4)
      {
        v192 = *(NSObject **)(a1 + 40);
        if (!os_log_type_enabled(v192, OS_LOG_TYPE_DEFAULT)) {
          goto LABEL_263;
        }
        *(_DWORD *)CSIPhoneNumber buf = 136315394;
        *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
        *(_WORD *)&unsigned char buf[12] = 2080;
        *(void *)&buf[14] = " ";
        v193 = "#I %s%s1x card has an RUIM app, device is primary CDMA with GSM support";
        goto LABEL_262;
      }
      unsigned int v218 = a2[8] - 1;
      if (v194 != 3 || v218 > 1)
      {
        CFDictionaryRef v255 = *(NSObject **)(a1 + 40);
        BOOL v256 = os_log_type_enabled(v255, OS_LOG_TYPE_DEFAULT);
        if (v218 > 1)
        {
          if (!v256) {
            goto LABEL_17;
          }
          *(_DWORD *)CSIPhoneNumber buf = 136315906;
          *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          __int16 v284 = 2080;
          uint64_t v285 = subscriber::asString();
          __int16 v286 = 2080;
          uint64_t v287 = subscriber::asString();
          uint64_t v14 = "#W %s%sCannot decide, 1x type: %s, Gw type: %s";
          unsigned int v15 = v255;
          uint32_t v16 = 42;
LABEL_16:
          _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, v14, buf, v16);
LABEL_17:
          int v13 = 0;
          goto LABEL_18;
        }
        if (v256)
        {
          *(_DWORD *)CSIPhoneNumber buf = 136315394;
          *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v255, OS_LOG_TYPE_DEFAULT, "#I %s%sNo 1x App, device is GSM only", buf, 0x16u);
        }
        int v13 = 1;
        goto LABEL_18;
      }
      ServiceMap = (std::mutex *)Registry::getServiceMap(v194, *(Registry **)(a1 + 56));
      v220 = ServiceMap;
      if (v221 < 0)
      {
        CSIPhoneNumber v222 = (unsigned __int8 *)(v221 & 0x7FFFFFFFFFFFFFFFLL);
        uint64_t v223 = 5381;
        do
        {
          uint64_t v221 = v223;
          unsigned int v224 = *v222++;
          uint64_t v223 = (33 * v223) ^ v224;
        }
        while (v224);
      }
      std::mutex::lock(ServiceMap);
      *(void *)CSIPhoneNumber buf = v221;
      v225 = sub_10004D37C(&v220[1].__m_.__sig, (unint64_t *)buf);
      if (v225)
      {
        uint64_t v227 = v225[3];
        long long v226 = (std::__shared_weak_count *)v225[4];
        if (v226)
        {
          atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
          std::mutex::unlock(v220);
          atomic_fetch_add_explicit(&v226->__shared_owners_, 1uLL, memory_order_relaxed);
          sub_10004D2C8(v226);
          char v228 = 0;
LABEL_384:
          theDict[0] = 0;
          (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v227 + 96))(buf, v227, *(unsigned int *)(*(void *)a2 + 52), 1, @"SupportsRoamingOnCDMA", 0, 0);
          sub_1000057AC(theDict, (CFTypeRef *)buf);
          sub_1000577C4((const void **)buf);
          if (theDict[0]) {
            v261 = sub_100084B4C;
          }
          else {
            v261 = 0;
          }
          if (v261 && (buf[0] = 0, ctu::cf::assign((ctu::cf *)buf, (BOOL *)theDict[0], v260), buf[0]))
          {
            v262 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v262, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v263 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
              *(_DWORD *)CSIPhoneNumber buf = 136315394;
              *(void *)&uint8_t buf[4] = v263;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = " ";
              _os_log_impl((void *)&_mh_execute_header, v262, OS_LOG_TYPE_DEFAULT, "#I %s%sCSIM and SIM/USIM are both present, carrier bundle says, device is primary GSM with CDMA support", buf, 0x16u);
            }
            int v13 = 2;
          }
          else
          {
            v264 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v264, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v265 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
              *(_DWORD *)CSIPhoneNumber buf = 136315394;
              *(void *)&uint8_t buf[4] = v265;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = " ";
              _os_log_impl((void *)&_mh_execute_header, v264, OS_LOG_TYPE_DEFAULT, "#I %s%sCSIM and SIM/USIM are both present, marking the device as primary CDMA with GSM support", buf, 0x16u);
            }
            int v13 = 3;
          }
          sub_100062778((const void **)theDict);
          if ((v228 & 1) == 0) {
            sub_10004D2C8(v226);
          }
          goto LABEL_18;
        }
      }
      else
      {
        uint64_t v227 = 0;
      }
      std::mutex::unlock(v220);
      long long v226 = 0;
      char v228 = 1;
      goto LABEL_384;
    }
  }
LABEL_13:
  uint64_t v12 = *(NSObject **)(a1 + 40);
  int v13 = 0;
  if (os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)CSIPhoneNumber buf = 136315394;
    *(void *)&uint8_t buf[4] = PersonalityInfo::logPrefix(v4);
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    uint64_t v14 = "#I %s%sCannot decide whether this device is CDMA based or not";
LABEL_15:
    unsigned int v15 = v12;
    uint32_t v16 = 22;
    goto LABEL_16;
  }
LABEL_18:
  __int16 v17 = *(PersonalityInfo **)a2;
  int v18 = *(_DWORD *)(*(void *)a2 + 52);
  char v19 = (uint64_t *)(a1 + 536);
  uint64_t v20 = *(void *)(a1 + 536);
  if (!v20) {
    goto LABEL_28;
  }
  uint64_t v21 = a1 + 536;
  uint64_t v22 = *(void *)(a1 + 536);
  do
  {
    int v23 = *(_DWORD *)(v22 + 28);
    BOOL v24 = v23 < v18;
    if (v23 >= v18) {
      uint64_t v25 = (uint64_t *)v22;
    }
    else {
      uint64_t v25 = (uint64_t *)(v22 + 8);
    }
    if (!v24) {
      uint64_t v21 = v22;
    }
    uint64_t v22 = *v25;
  }
  while (*v25);
  if ((uint64_t *)v21 != v19 && *(_DWORD *)(v21 + 28) <= v18) {
    unsigned int v26 = *(_DWORD *)(v21 + 32);
  }
  else {
LABEL_28:
  }
    unsigned int v26 = 0;
  if (v26 != v13)
  {
    uint64_t v27 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v28 = PersonalityInfo::logPrefix(v17);
      if (v26 > 3) {
        long long v29 = "Device Type unknown";
      }
      else {
        long long v29 = off_101A5ED68[v26];
      }
      uint64_t v30 = off_101A5ED68[v13];
      *(_DWORD *)CSIPhoneNumber buf = 136315906;
      *(void *)&uint8_t buf[4] = v28;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      __int16 v284 = 2080;
      uint64_t v285 = (uint64_t)v29;
      __int16 v286 = 2080;
      uint64_t v287 = (uint64_t)v30;
      _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s%sDevice type is changing from %s to %s", buf, 0x2Au);
      __int16 v17 = *(PersonalityInfo **)a2;
      int v18 = *(_DWORD *)(*(void *)a2 + 52);
      uint64_t v20 = *v19;
    }
    *(void *)CSIPhoneNumber buf = 1;
    *(void *)&uint8_t buf[8] = a1 + 496;
    uint64_t v31 = (uint64_t **)(a1 + 536);
    uint64_t v32 = a1 + 536;
    if (v20)
    {
      while (1)
      {
        while (1)
        {
          uint64_t v32 = v20;
          int v33 = *(_DWORD *)(v20 + 28);
          if (v33 <= v18) {
            break;
          }
          uint64_t v20 = *(void *)v20;
          uint64_t v31 = (uint64_t **)v32;
          if (!*(void *)v32) {
            goto LABEL_43;
          }
        }
        if (v33 >= v18) {
          break;
        }
        uint64_t v20 = *(void *)(v20 + 8);
        if (!v20)
        {
          uint64_t v31 = (uint64_t **)(v32 + 8);
          goto LABEL_43;
        }
      }
    }
    else
    {
LABEL_43:
      unsigned int v34 = (uint64_t *)operator new(0x28uLL);
      *(uint64_t *)((char *)v34 + 28) = *((unsigned int *)v17 + 13);
      sub_100046C38((uint64_t **)(a1 + 528), v32, v31, v34);
      uint64_t v32 = (uint64_t)v34;
    }
    *(_DWORD *)(v32 + 32) = v13;
    sub_100E1A48C((uint64_t)buf);
    int v18 = *(_DWORD *)(*(void *)a2 + 52);
    uint64_t v20 = *v19;
  }
  int v280 = 0;
  if (!v20) {
    goto LABEL_55;
  }
  uint64_t v35 = a1 + 536;
  do
  {
    int v36 = *(_DWORD *)(v20 + 28);
    BOOL v37 = v36 < v18;
    if (v36 >= v18) {
      char v38 = (uint64_t *)v20;
    }
    else {
      char v38 = (uint64_t *)(v20 + 8);
    }
    if (!v37) {
      uint64_t v35 = v20;
    }
    uint64_t v20 = *v38;
  }
  while (*v38);
  if ((uint64_t *)v35 != v19 && *(_DWORD *)(v35 + 28) <= v18) {
    int v39 = *(_DWORD *)(v35 + 32);
  }
  else {
LABEL_55:
  }
    int v39 = 0;
  unsigned int v273 = v26;
  if (*((unsigned char *)a2 + 22))
  {
    if (v39 == 3) {
      int v40 = 40;
    }
    else {
      int v40 = 32;
    }
    goto LABEL_68;
  }
  switch(v39)
  {
    case 3:
      int v278 = 4;
      int v279 = 8;
      sub_100E13484((WirelessTechnologyList *)buf, a1, a2, (WirelessTechnologyList *)&v279, (WirelessTechnologyList *)&v278);
LABEL_67:
      int v40 = *(_DWORD *)buf;
      goto LABEL_68;
    case 2:
      int v278 = 8;
      int v279 = 4;
      sub_100E13484((WirelessTechnologyList *)buf, a1, a2, (WirelessTechnologyList *)&v279, (WirelessTechnologyList *)&v278);
      goto LABEL_67;
    case 1:
      int v40 = 4;
LABEL_68:
      int v280 = v40;
      goto LABEL_69;
  }
  int v40 = 0;
LABEL_69:
  long long v270 = (WirelessTechnologyList *)(a2 + 9);
  int v41 = v40;
  unsigned int v272 = a2[9];
  int v274 = v40;
  if (v272 != v40)
  {
    BOOL v42 = *(NSObject **)(a1 + 40);
    BOOL v43 = os_log_type_enabled(v42, OS_LOG_TYPE_DEFAULT);
    int v41 = v40;
    if (v43)
    {
      uint64_t v44 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      WirelessTechnologyList::asString((uint64_t *)theDict, v270);
      int v45 = v282;
      CFDictionaryRef v46 = theDict[0];
      WirelessTechnologyList::asString((uint64_t *)__p, (WirelessTechnologyList *)&v280);
      long long v47 = theDict;
      if (v45 < 0) {
        long long v47 = (CFDictionaryRef *)v46;
      }
      if (v277 >= 0) {
        uint64_t v48 = __p;
      }
      else {
        uint64_t v48 = (void **)__p[0];
      }
      *(_DWORD *)CSIPhoneNumber buf = 136315906;
      *(void *)&uint8_t buf[4] = v44;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      __int16 v284 = 2080;
      uint64_t v285 = (uint64_t)v47;
      __int16 v286 = 2080;
      uint64_t v287 = (uint64_t)v48;
      _os_log_impl((void *)&_mh_execute_header, v42, OS_LOG_TYPE_DEFAULT, "#I %s%sCall handling tech is changing from %s to %s", buf, 0x2Au);
      if (v277 < 0) {
        operator delete(__p[0]);
      }
      if (v282 < 0) {
        operator delete(theDict[0]);
      }
      int v41 = v280;
    }
    *(_DWORD *)long long v270 = v41;
  }
  int v49 = *((unsigned __int8 *)a2 + 40);
  int v50 = *((unsigned __int8 *)a2 + 41);
  uint64_t v51 = *(void *)(a1 + 408);
  if (!v51) {
    goto LABEL_92;
  }
  CFIndex v52 = *(PersonalityInfo **)a2;
  int v53 = *(_DWORD *)(*(void *)a2 + 52);
  uint64_t v54 = a1 + 408;
  do
  {
    int v55 = *(_DWORD *)(v51 + 28);
    BOOL v56 = v55 < v53;
    if (v55 >= v53) {
      CFNumberRef v57 = (uint64_t *)v51;
    }
    else {
      CFNumberRef v57 = (uint64_t *)(v51 + 8);
    }
    if (!v56) {
      uint64_t v54 = v51;
    }
    uint64_t v51 = *v57;
  }
  while (*v57);
  if (v54 != a1 + 408 && v53 >= *(_DWORD *)(v54 + 28))
  {
    int v58 = v49 != 0;
    int v59 = v50 != 0;
    switch(*(_DWORD *)(v54 + 32))
    {
      case 0xFFFFFFFE:
        goto LABEL_360;
      case 1:
      case 2:
        int v59 = 0;
        int v58 = 1;
        break;
      case 3:
      case 4:
      case 5:
      case 0x10:
      case 0x11:
        goto LABEL_108;
      case 0xA:
      case 0xB:
      case 0xC:
      case 0xD:
      case 0xF:
        goto LABEL_359;
      case 0xE:
        if (!v41) {
          break;
        }
        if ((v41 & 4) != 0) {
          goto LABEL_108;
        }
        if ((v41 & 0x20) != 0)
        {
          if ((v41 & 8) != 0)
          {
            v266 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v266, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v267 = PersonalityInfo::logPrefix(v52);
              *(_DWORD *)CSIPhoneNumber buf = 136315394;
              *(void *)&uint8_t buf[4] = v267;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = " ";
              _os_log_impl((void *)&_mh_execute_header, v266, OS_LOG_TYPE_DEFAULT, "#I %s%sCall handling tech contains CDMA, setting sim. call and data to false", buf, 0x16u);
            }
            int v58 = 0;
          }
          else
          {
LABEL_108:
            int v58 = 1;
          }
          int v59 = 1;
        }
        else if ((v41 & 8) != 0)
        {
LABEL_359:
          int v58 = 0;
LABEL_360:
          int v59 = 0;
        }
        else
        {
          uint64_t v249 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v249, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v250 = PersonalityInfo::logPrefix(v52);
            WirelessTechnologyList::asString((uint64_t *)theDict, v270);
            v251 = v282 >= 0 ? theDict : (CFDictionaryRef *)theDict[0];
            *(_DWORD *)CSIPhoneNumber buf = 136315650;
            *(void *)&uint8_t buf[4] = v250;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            __int16 v284 = 2080;
            uint64_t v285 = (uint64_t)v251;
            _os_log_impl((void *)&_mh_execute_header, v249, OS_LOG_TYPE_DEFAULT, "#I %s%sNot handling %s for call technology type", buf, 0x20u);
            if (v282 < 0) {
              operator delete(theDict[0]);
            }
          }
        }
        break;
      default:
        break;
    }
  }
  else
  {
LABEL_92:
    int v58 = v49 != 0;
    int v59 = v50 != 0;
  }
  int v60 = *((unsigned __int8 *)a2 + 40);
  BOOL v275 = v60 != v58;
  if (v60 != v58)
  {
    CFBooleanRef v61 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v61, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v63 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      int v64 = *((unsigned __int8 *)a2 + 40);
      CFBooleanRef v65 = "true";
      *(_DWORD *)CSIPhoneNumber buf = 136315906;
      if (v64) {
        uint64_t v66 = "true";
      }
      else {
        uint64_t v66 = "false";
      }
      *(void *)&uint8_t buf[4] = v63;
      *(void *)&buf[14] = " ";
      *(_WORD *)&unsigned char buf[12] = 2080;
      if (!v58) {
        CFBooleanRef v65 = "false";
      }
      __int16 v284 = 2080;
      uint64_t v285 = (uint64_t)v66;
      __int16 v286 = 2080;
      uint64_t v287 = (uint64_t)v65;
      _os_log_impl((void *)&_mh_execute_header, v61, OS_LOG_TYPE_DEFAULT, "#I %s%sSimultaneous call and data supported is changing from %s to %s", buf, 0x2Au);
    }
    *((unsigned char *)a2 + 40) = v58;
    char v67 = (std::mutex *)Registry::getServiceMap(v62, *(Registry **)(a1 + 56));
    int v68 = v67;
    if (v69 < 0)
    {
      CFBooleanRef v70 = (unsigned __int8 *)(v69 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v71 = 5381;
      do
      {
        uint64_t v69 = v71;
        unsigned int v72 = *v70++;
        uint64_t v71 = (33 * v71) ^ v72;
      }
      while (v72);
    }
    std::mutex::lock(v67);
    *(void *)CSIPhoneNumber buf = v69;
    long long v73 = sub_10004D37C(&v68[1].__m_.__sig, (unint64_t *)buf);
    if (v73)
    {
      uint64_t v75 = v73[3];
      long long v74 = (std::__shared_weak_count *)v73[4];
      if (v74)
      {
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v68);
        atomic_fetch_add_explicit(&v74->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v74);
        char v76 = 0;
        goto LABEL_112;
      }
    }
    else
    {
      uint64_t v75 = 0;
    }
    std::mutex::unlock(v68);
    long long v74 = 0;
    char v76 = 1;
LABEL_112:
    if (*((unsigned char *)a2 + 40)) {
      unsigned int v77 = &kCFBooleanTrue;
    }
    else {
      unsigned int v77 = &kCFBooleanFalse;
    }
    (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v75 + 16))(v75, *(void *)a2 + 24, @"SimCallAndDataSupported", *v77, @"Capabilities", 0, 1, 0);
    if ((v76 & 1) == 0) {
      sub_10004D2C8(v74);
    }
  }
  uint64_t v78 = *((unsigned __int8 *)a2 + 41);
  if (v78 != v59)
  {
    BOOL v79 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v79, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v81 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      int v82 = *((unsigned __int8 *)a2 + 41);
      CFTypeID v83 = "true";
      *(_DWORD *)CSIPhoneNumber buf = 136315906;
      if (v82) {
        CFBooleanRef v84 = "true";
      }
      else {
        CFBooleanRef v84 = "false";
      }
      *(void *)&uint8_t buf[4] = v81;
      *(void *)&buf[14] = " ";
      *(_WORD *)&unsigned char buf[12] = 2080;
      if (!v59) {
        CFTypeID v83 = "false";
      }
      __int16 v284 = 2080;
      uint64_t v285 = (uint64_t)v84;
      __int16 v286 = 2080;
      uint64_t v287 = (uint64_t)v83;
      _os_log_impl((void *)&_mh_execute_header, v79, OS_LOG_TYPE_DEFAULT, "#I %s%sSimultaneous call and data currently supported is changing from %s to %s", buf, 0x2Au);
    }
    *((unsigned char *)a2 + 41) = v59;
    char v85 = (std::mutex *)Registry::getServiceMap(v80, *(Registry **)(a1 + 56));
    unint64_t v86 = v85;
    if (v87 < 0)
    {
      uint64_t v88 = (unsigned __int8 *)(v87 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v89 = 5381;
      do
      {
        uint64_t v87 = v89;
        unsigned int v90 = *v88++;
        uint64_t v89 = (33 * v89) ^ v90;
      }
      while (v90);
    }
    std::mutex::lock(v85);
    *(void *)CSIPhoneNumber buf = v87;
    char v91 = sub_10004D37C(&v86[1].__m_.__sig, (unint64_t *)buf);
    if (v91)
    {
      uint64_t v93 = v91[3];
      long long v92 = (std::__shared_weak_count *)v91[4];
      if (v92)
      {
        atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v86);
        atomic_fetch_add_explicit(&v92->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v92);
        char v94 = 0;
LABEL_133:
        if (*((unsigned char *)a2 + 41)) {
          char v95 = &kCFBooleanTrue;
        }
        else {
          char v95 = &kCFBooleanFalse;
        }
        (*(void (**)(uint64_t, uint64_t, const __CFString *, const CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v93 + 16))(v93, *(void *)a2 + 24, @"SimCallAndDataCurrentlySupported", *v95, @"Capabilities", 0, 1, 0);
        if ((v94 & 1) == 0) {
          sub_10004D2C8(v92);
        }
        uint64_t v78 = 1;
        BOOL v275 = 1;
        goto LABEL_139;
      }
    }
    else
    {
      uint64_t v93 = 0;
    }
    std::mutex::unlock(v86);
    long long v92 = 0;
    char v94 = 1;
    goto LABEL_133;
  }
LABEL_139:
  uint64_t v96 = *v19;
  if (!*v19) {
    goto LABEL_160;
  }
  uint64_t v97 = *(PersonalityInfo **)a2;
  int v98 = *(_DWORD *)(*(void *)a2 + 52);
  uint64_t v78 = a1 + 536;
  do
  {
    int v99 = *(_DWORD *)(v96 + 28);
    BOOL v100 = v99 < v98;
    if (v99 >= v98) {
      uint64_t v101 = (uint64_t *)v96;
    }
    else {
      uint64_t v101 = (uint64_t *)(v96 + 8);
    }
    if (!v100) {
      uint64_t v78 = v96;
    }
    uint64_t v96 = *v101;
  }
  while (*v101);
  if ((uint64_t *)v78 == v19 || *(_DWORD *)(v78 + 28) > v98) {
    goto LABEL_160;
  }
  char v102 = (uint64_t *)*(unsigned int *)(v78 + 32);
  if (v102 == 3)
  {
    long long v103 = (std::mutex *)Registry::getServiceMap(v102, *(Registry **)(a1 + 56));
    int v104 = v103;
    if (v105 < 0)
    {
      uint64_t v106 = (unsigned __int8 *)(v105 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v107 = 5381;
      do
      {
        uint64_t v105 = v107;
        unsigned int v108 = *v106++;
        uint64_t v107 = (33 * v107) ^ v108;
      }
      while (v108);
    }
    std::mutex::lock(v103);
    *(void *)CSIPhoneNumber buf = v105;
    uint64_t v109 = sub_10004D37C(&v104[1].__m_.__sig, (unint64_t *)buf);
    if (v109)
    {
      uint64_t v111 = v109[3];
      uint64_t v110 = (std::__shared_weak_count *)v109[4];
      if (v110)
      {
        atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v104);
        atomic_fetch_add_explicit(&v110->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v110);
        char v112 = 0;
LABEL_283:
        theDict[0] = 0;
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v111 + 96))(buf, v111, *(unsigned int *)(*(void *)a2 + 52), 1, @"SupportsSupplementaryServicesOverUtOnVoPSNetwork", kCFBooleanFalse, 0);
        sub_1000057AC(theDict, (CFTypeRef *)buf);
        sub_1000577C4((const void **)buf);
        buf[0] = 0;
        ctu::cf::assign((ctu::cf *)buf, (BOOL *)theDict[0], v207);
        if (buf[0])
        {
          char v208 = (uint64_t *)*(unsigned int *)v270;
          if ((v208 & 8) != 0 && sub_100E13948(*(Registry **)(a1 + 56), a2, v208))
          {
            v209 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v210 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
              *(_DWORD *)CSIPhoneNumber buf = 136315394;
              *(void *)&uint8_t buf[4] = v210;
              *(_WORD *)&unsigned char buf[12] = 2080;
              *(void *)&buf[14] = " ";
              v211 = "#I %s%sCDMA core device, is on VoPS capable network, marked as supplementary services supported on 3GPP";
LABEL_291:
              _os_log_impl((void *)&_mh_execute_header, v209, OS_LOG_TYPE_DEFAULT, v211, buf, 0x16u);
              goto LABEL_292;
            }
            goto LABEL_292;
          }
        }
        if (sub_100E13AE8(a1, (PersonalityInfo **)a2))
        {
          v209 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v209, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v212 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
            *(_DWORD *)CSIPhoneNumber buf = 136315394;
            *(void *)&uint8_t buf[4] = v212;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            v211 = "#I %s%sCDMA core device, on IMS network, marked as supplementary services supported";
            goto LABEL_291;
          }
LABEL_292:
          int v115 = 1;
          goto LABEL_378;
        }
        unsigned int v213 = a2[4];
        if ((v213 & 0x24) != 0)
        {
          if ((v213 & 0x20) == 0 || (*(unsigned char *)v270 & 8) == 0)
          {
            __p[0] = 0;
            (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v111 + 96))(buf, v111, *(unsigned int *)(*(void *)a2 + 52), 1, @"SupportsSupplementaryServicesOver3GPP", kCFBooleanFalse, 0);
            sub_1000057AC(__p, (CFTypeRef *)buf);
            sub_1000577C4((const void **)buf);
            if (__p[0]) {
              char v215 = sub_100084B4C;
            }
            else {
              char v215 = 0;
            }
            if (v215)
            {
              buf[0] = 0;
              ctu::cf::assign((ctu::cf *)buf, (BOOL *)__p[0], v214);
              if (buf[0])
              {
                v216 = *(NSObject **)(a1 + 40);
                if (os_log_type_enabled(v216, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v217 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
                  *(_DWORD *)CSIPhoneNumber buf = 136315394;
                  *(void *)&uint8_t buf[4] = v217;
                  *(_WORD *)&unsigned char buf[12] = 2080;
                  *(void *)&buf[14] = " ";
                  _os_log_impl((void *)&_mh_execute_header, v216, OS_LOG_TYPE_DEFAULT, "#I %s%sCDMA core device, on 3GPP network, marked as supplementary services supported", buf, 0x16u);
                }
                int v115 = 1;
                goto LABEL_373;
              }
            }
            else
            {
              v257 = *(NSObject **)(a1 + 40);
              if (os_log_type_enabled(v257, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v258 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
                *(_DWORD *)CSIPhoneNumber buf = 136315394;
                *(void *)&uint8_t buf[4] = v258;
                *(_WORD *)&unsigned char buf[12] = 2080;
                *(void *)&buf[14] = " ";
                _os_log_impl((void *)&_mh_execute_header, v257, OS_LOG_TYPE_DEFAULT, "#I %s%sCDMA core device, on 3GPP network, marked as supplementary services not supported", buf, 0x16u);
              }
            }
            int v115 = 2;
LABEL_373:
            sub_100062778((const void **)__p);
            goto LABEL_378;
          }
          v246 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v259 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
            *(_DWORD *)CSIPhoneNumber buf = 136315394;
            *(void *)&uint8_t buf[4] = v259;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            long long v248 = "#I %s%sCDMA core device, on LTE network, but CDMA for voice, not supporting supplementary services";
            goto LABEL_376;
          }
        }
        else
        {
          v246 = *(NSObject **)(a1 + 40);
          if (os_log_type_enabled(v246, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v247 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
            *(_DWORD *)CSIPhoneNumber buf = 136315394;
            *(void *)&uint8_t buf[4] = v247;
            *(_WORD *)&unsigned char buf[12] = 2080;
            *(void *)&buf[14] = " ";
            long long v248 = "#I %s%sCDMA core device, not on 3GPP network, not supporting supplementary services";
LABEL_376:
            _os_log_impl((void *)&_mh_execute_header, v246, OS_LOG_TYPE_DEFAULT, v248, buf, 0x16u);
          }
        }
        int v115 = 2;
LABEL_378:
        sub_100062778((const void **)theDict);
        if ((v112 & 1) == 0) {
          sub_10004D2C8(v110);
        }
        goto LABEL_161;
      }
    }
    else
    {
      uint64_t v111 = 0;
    }
    std::mutex::unlock(v104);
    uint64_t v110 = 0;
    char v112 = 1;
    goto LABEL_283;
  }
  uint64_t v78 = (v102 - 1);
  if (v78 > 1)
  {
LABEL_160:
    int v115 = 0;
    goto LABEL_161;
  }
  char v113 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v113, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v114 = PersonalityInfo::logPrefix(v97);
    *(_DWORD *)CSIPhoneNumber buf = 136315394;
    *(void *)&uint8_t buf[4] = v114;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = " ";
    _os_log_impl((void *)&_mh_execute_header, v113, OS_LOG_TYPE_DEFAULT, "#I %s%sGSM core device, supplementary services supported by default", buf, 0x16u);
  }
  int v115 = 1;
LABEL_161:
  unsigned int v116 = a2[12];
  if (v116 != v115)
  {
    uint64_t v117 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v117, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v118 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      uint64_t v119 = (int)a2[12];
      if (v119 > 2) {
        uint64_t v120 = "Supp support unknown";
      }
      else {
        uint64_t v120 = off_101A5ED88[v119];
      }
      long long v121 = off_101A5ED88[v115];
      *(_DWORD *)CSIPhoneNumber buf = 136315906;
      *(void *)&uint8_t buf[4] = v118;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      __int16 v284 = 2080;
      uint64_t v285 = (uint64_t)v120;
      __int16 v286 = 2080;
      uint64_t v287 = (uint64_t)v121;
      _os_log_impl((void *)&_mh_execute_header, v117, OS_LOG_TYPE_DEFAULT, "#I %s%sSupp services support is changing from %s to %s", buf, 0x2Au);
    }
    a2[12] = v115;
  }
  uint64_t v122 = (std::mutex *)Registry::getServiceMap((uint64_t *)v78, *(Registry **)(a1 + 56));
  v123 = v122;
  if (v124 < 0)
  {
    uint64_t v125 = (unsigned __int8 *)(v124 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v126 = 5381;
    do
    {
      uint64_t v124 = v126;
      unsigned int v127 = *v125++;
      uint64_t v126 = (33 * v126) ^ v127;
    }
    while (v127);
  }
  std::mutex::lock(v122);
  *(void *)CSIPhoneNumber buf = v124;
  uint64_t v128 = sub_10004D37C(&v123[1].__m_.__sig, (unint64_t *)buf);
  unsigned int v271 = v116;
  if (v128)
  {
    uint64_t v129 = v128[3];
    __int16 v130 = (std::__shared_weak_count *)v128[4];
    if (v130)
    {
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v123);
      atomic_fetch_add_explicit(&v130->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v130);
      char v131 = 0;
      goto LABEL_176;
    }
  }
  else
  {
    uint64_t v129 = 0;
  }
  std::mutex::unlock(v123);
  __int16 v130 = 0;
  char v131 = 1;
LABEL_176:
  uint64_t v132 = *v19;
  int v133 = v274;
  if (!*v19) {
    goto LABEL_186;
  }
  int v134 = *(_DWORD *)(*(void *)a2 + 52);
  uint64_t v135 = a1 + 536;
  do
  {
    int v136 = *(_DWORD *)(v132 + 28);
    BOOL v137 = v136 < v134;
    if (v136 >= v134) {
      id v138 = (uint64_t *)v132;
    }
    else {
      id v138 = (uint64_t *)(v132 + 8);
    }
    if (!v137) {
      uint64_t v135 = v132;
    }
    uint64_t v132 = *v138;
  }
  while (*v138);
  if ((uint64_t *)v135 == v19 || *(_DWORD *)(v135 + 28) > v134) {
    goto LABEL_186;
  }
  long long v269 = v130;
  unsigned int v168 = *(_DWORD *)(v135 + 32);
  if (!v168) {
    goto LABEL_308;
  }
  if (v168 == 3)
  {
    int v169 = sub_100E13AE8(a1, (PersonalityInfo **)a2);
    theDict[0] = 0;
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v129 + 80))(buf, v129, *(unsigned int *)(*(void *)a2 + 52), 1, @"CallForwardingDialingCodes", 0, 0);
    sub_10004EFE4(theDict, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (theDict[0]) {
      uint64_t v170 = sub_100080778;
    }
    else {
      uint64_t v170 = 0;
    }
    if (v170) {
      int v171 = 1;
    }
    else {
      int v171 = v169;
    }
    int v172 = *((unsigned __int8 *)a2 + 43);
    BOOL v173 = v172 != v171;
    if (v172 != v171)
    {
      v174 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v174, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v175 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v176 = *((unsigned __int8 *)a2 + 43);
        v177 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v176) {
          v178 = "true";
        }
        else {
          v178 = "false";
        }
        *(void *)&uint8_t buf[4] = v175;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!v171) {
          v177 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v178;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v177;
        _os_log_impl((void *)&_mh_execute_header, v174, OS_LOG_TYPE_DEFAULT, "#I %s%sCall forwarding support is changing from %s to %s", buf, 0x2Au);
      }
      *((unsigned char *)a2 + 43) = v171;
      BOOL v173 = 1;
    }
    __p[0] = 0;
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v129 + 80))(buf, v129, *(unsigned int *)(*(void *)a2 + 52), 1, @"CallWaitingDialingCodes", 0, 0);
    sub_10004EFE4(__p, (CFTypeRef *)buf);
    sub_1000577C4((const void **)buf);
    if (__p[0]) {
      v179 = sub_100080778;
    }
    else {
      v179 = 0;
    }
    if (v179) {
      int v180 = 1;
    }
    else {
      int v180 = v169;
    }
    if (*((unsigned __int8 *)a2 + 44) != v180)
    {
      v181 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v181, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v182 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v183 = *((unsigned __int8 *)a2 + 44);
        unint64_t v184 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v183) {
          v185 = "true";
        }
        else {
          v185 = "false";
        }
        *(void *)&uint8_t buf[4] = v182;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!v180) {
          unint64_t v184 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v185;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v184;
        _os_log_impl((void *)&_mh_execute_header, v181, OS_LOG_TYPE_DEFAULT, "#I %s%sCall waiting support is changing from %s to %s", buf, 0x2Au);
      }
      *((unsigned char *)a2 + 44) = v180;
      BOOL v173 = 1;
    }
    int v133 = v274;
    __int16 v130 = v269;
    if (*((unsigned __int8 *)a2 + 45) != v169)
    {
      unint64_t v186 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v186, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v187 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v188 = *((unsigned __int8 *)a2 + 45);
        v189 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v188) {
          v190 = "true";
        }
        else {
          v190 = "false";
        }
        *(void *)&uint8_t buf[4] = v187;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!v169) {
          v189 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v190;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v189;
        _os_log_impl((void *)&_mh_execute_header, v186, OS_LOG_TYPE_DEFAULT, "#I %s%sCaller ID support is changing from %s to %s", buf, 0x2Au);
      }
      *((unsigned char *)a2 + 45) = v169;
      BOOL v173 = 1;
    }
    sub_100057D78((const void **)__p);
    sub_100057D78((const void **)theDict);
LABEL_256:
    v191 = (char *)a2 + 42;
    if (*((unsigned char *)a2 + 42))
    {
      if (!v173)
      {
LABEL_186:
        int v139 = 0;
        goto LABEL_187;
      }
      goto LABEL_363;
    }
    goto LABEL_362;
  }
  if (v168 <= 2)
  {
    (*(void (**)(unsigned char *__return_ptr, uint64_t))(*(void *)v129 + 96))(buf, v129);
    uint64_t v195 = *(BOOL **)buf;
    LOBYTE(theDict[0]) = 0;
    if (*(void *)buf)
    {
      CFTypeID v196 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v196 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)theDict, v195, v197);
      }
    }
    HIDWORD(v268) = LOBYTE(theDict[0]) != 0;
    sub_1000577C4((const void **)buf);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v129 + 96))(buf, v129, *(unsigned int *)(*(void *)a2 + 52), 1, @"ShowCallWaitingSwitch", kCFBooleanTrue, 0);
    int v198 = *(BOOL **)buf;
    LOBYTE(theDict[0]) = 0;
    if (*(void *)buf)
    {
      CFTypeID v199 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v199 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)theDict, v198, v200);
      }
    }
    LODWORD(v268) = LOBYTE(theDict[0]) != 0;
    sub_1000577C4((const void **)buf);
    (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v129 + 96))(buf, v129, *(unsigned int *)(*(void *)a2 + 52), 1, @"ShowCallerIDSwitch", kCFBooleanTrue, 0);
    v201 = *(BOOL **)buf;
    LOBYTE(theDict[0]) = 0;
    if (*(void *)buf)
    {
      CFTypeID v202 = CFGetTypeID(*(CFTypeRef *)buf);
      if (v202 == CFBooleanGetTypeID()) {
        ctu::cf::assign((ctu::cf *)theDict, v201, v203);
      }
    }
    int v204 = LOBYTE(theDict[0]) != 0;
    sub_1000577C4((const void **)buf);
    if (v168 == 2)
    {
      __int16 v130 = v269;
      int v133 = v274;
      if ((*(unsigned char *)v270 & 8) != 0)
      {
        v205 = *(NSObject **)(a1 + 40);
        uint64_t v268 = 0;
        int v204 = 0;
        if (os_log_type_enabled(v205, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v206 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
          *(_DWORD *)CSIPhoneNumber buf = 136315394;
          *(void *)&uint8_t buf[4] = v206;
          *(_WORD *)&unsigned char buf[12] = 2080;
          *(void *)&buf[14] = " ";
          _os_log_impl((void *)&_mh_execute_header, v205, OS_LOG_TYPE_DEFAULT, "#I %s%sSupport for Supp Services is false as the device is on a CDMA core network", buf, 0x16u);
          uint64_t v268 = 0;
          int v204 = 0;
        }
      }
    }
    else
    {
      int v133 = v274;
      __int16 v130 = v269;
    }
    int v229 = *((unsigned __int8 *)a2 + 43);
    BOOL v173 = v229 != HIDWORD(v268);
    if (v229 != HIDWORD(v268))
    {
      v230 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v230, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v231 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v232 = *((unsigned __int8 *)a2 + 43);
        v233 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v232) {
          unint64_t v234 = "true";
        }
        else {
          unint64_t v234 = "false";
        }
        *(void *)&uint8_t buf[4] = v231;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!HIDWORD(v268)) {
          v233 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v234;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v233;
        _os_log_impl((void *)&_mh_execute_header, v230, OS_LOG_TYPE_DEFAULT, "#I %s%sSupport for Call Forwarding is changing from %s to %s", buf, 0x2Au);
      }
      *((unsigned char *)a2 + 43) = BYTE4(v268);
    }
    if (*((unsigned __int8 *)a2 + 44) != v268)
    {
      v235 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v235, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v236 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v237 = *((unsigned __int8 *)a2 + 44);
        v238 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v237) {
          v239 = "true";
        }
        else {
          v239 = "false";
        }
        *(void *)&uint8_t buf[4] = v236;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!v268) {
          v238 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v239;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v238;
        _os_log_impl((void *)&_mh_execute_header, v235, OS_LOG_TYPE_DEFAULT, "#I %s%sSupport for Call Waiting is changing from %s to %s", buf, 0x2Au);
      }
      *((unsigned char *)a2 + 44) = v268;
      BOOL v173 = 1;
    }
    if (*((unsigned __int8 *)a2 + 45) != v204)
    {
      unint64_t v240 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v240, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v241 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v242 = *((unsigned __int8 *)a2 + 45);
        v243 = "true";
        *(_DWORD *)CSIPhoneNumber buf = 136315906;
        if (v242) {
          long long v244 = "true";
        }
        else {
          long long v244 = "false";
        }
        *(void *)&uint8_t buf[4] = v241;
        *(void *)&buf[14] = " ";
        *(_WORD *)&unsigned char buf[12] = 2080;
        if (!v204) {
          v243 = "false";
        }
        __int16 v284 = 2080;
        uint64_t v285 = (uint64_t)v244;
        __int16 v286 = 2080;
        uint64_t v287 = (uint64_t)v243;
        _os_log_impl((void *)&_mh_execute_header, v240, OS_LOG_TYPE_DEFAULT, "#I %s%sSupport for Caller ID is changing from %s to %s", buf, 0x2Au);
      }
      v191 = (char *)a2 + 42;
      int v245 = *((unsigned __int8 *)a2 + 42);
      *((unsigned char *)a2 + 45) = v204;
      if (v245) {
        goto LABEL_363;
      }
      goto LABEL_362;
    }
    goto LABEL_256;
  }
  v191 = (char *)a2 + 42;
  if (*((unsigned char *)a2 + 42))
  {
LABEL_308:
    int v139 = 0;
    int v133 = v274;
    __int16 v130 = v269;
    goto LABEL_187;
  }
  int v133 = v274;
  __int16 v130 = v269;
LABEL_362:
  unsigned char *v191 = 1;
LABEL_363:
  int v252 = *(_DWORD *)(*(void *)a2 + 52);
  theDict[0] = 0;
  uint64_t v253 = subscriber::asString();
  ctu::rest::detail::write_enum_string_value((uint64_t *)theDict, (ctu::rest::detail *)v252, v253, v254);
  sub_100058DB0(buf, "/cc/props/supp_services_capability_changed");
  __p[0] = theDict[0];
  theDict[0] = (CFDictionaryRef)xpc_null_create();
  ctu::RestModule::sendEvent();
  xpc_release(__p[0]);
  __p[0] = 0;
  if (SHIBYTE(v284) < 0) {
    operator delete(*(void **)buf);
  }
  xpc_release(theDict[0]);
  int v139 = 1;
LABEL_187:
  if ((v131 & 1) == 0) {
    sub_10004D2C8(v130);
  }
  int v141 = v273 != v13 || v272 != v133 || v275;
  if (v271 != v115) {
    int v141 = 1;
  }
  if ((v141 | v139) == 1)
  {
    BOOL v142 = *(NSObject **)(a1 + 40);
    if (os_log_type_enabled(v142, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v143 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
      *(_DWORD *)CSIPhoneNumber buf = 136315394;
      *(void *)&uint8_t buf[4] = v143;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = " ";
      _os_log_impl((void *)&_mh_execute_header, v142, OS_LOG_TYPE_DEFAULT, "#I %s%sCapabilities have changed", buf, 0x16u);
    }
    theDict[0] = 0;
    CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
    if (Mutable)
    {
      CFDictionaryRef v145 = theDict[0];
      theDict[0] = Mutable;
      *(void *)CSIPhoneNumber buf = v145;
      sub_10005717C((const void **)buf);
    }
    if (v272 != v133)
    {
      int v146 = theDict[0];
      v147 = (const void *)kConferenceCallType;
      uint64_t v148 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kConferenceCallType);
      CFDictionarySetValue(v146, v147, v148);
    }
    if (v275)
    {
      BOOL v149 = theDict[0];
      long long v150 = (const void *)kSimultaneousCallAndDataSupported;
      BOOL v151 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kSimultaneousCallAndDataSupported);
      CFDictionarySetValue(v149, v150, v151);
      unsigned int v152 = theDict[0];
      long long v153 = (const void *)kSimultaneousCallAndDataCurrentlySupported;
      uint64_t v154 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kSimultaneousCallAndDataCurrentlySupported);
      CFDictionarySetValue(v152, v153, v154);
    }
    if (v139)
    {
      long long v155 = theDict[0];
      BOOL v156 = (const void *)kCallerIDCapability;
      unsigned int v157 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kCallerIDCapability);
      CFDictionarySetValue(v155, v156, v157);
      uint64_t v158 = theDict[0];
      v159 = (const void *)kCallForwardingCapability;
      v160 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kCallForwardingCapability);
      CFDictionarySetValue(v158, v159, v160);
      v161 = theDict[0];
      BOOL v162 = (const void *)kCallWaitingCapability;
      v163 = (const void *)sub_100E0FD28(a1, *(unsigned int *)(*(void *)a2 + 52), kCallWaitingCapability);
      CFDictionarySetValue(v161, v162, v163);
    }
    if (CFDictionaryGetCount(theDict[0]) >= 1)
    {
      long long v165 = *(PersonalityInfo **)a2;
      if (*(_DWORD *)(*(void *)a2 + 52) != 2)
      {
        ctu::cf_to_xpc((uint64_t *)buf, theDict[0], v164);
        xpc_object_t v166 = xpc_null_create();
        __p[0] = v166;
        sub_1000452AC(82, (xpc_object_t *)buf, __p);
        xpc_release(v166);
        xpc_release(*(xpc_object_t *)buf);
        long long v165 = *(PersonalityInfo **)a2;
      }
      uint64_t v167 = *(void *)(a1 + 560);
      PersonalityInfo::uuid((uint64_t *)buf, v165);
      (*(void (**)(uint64_t, void, CFDictionaryRef))(*(void *)v167 + 16))(v167, *(void *)buf, theDict[0]);
      sub_10012577C((const void **)buf);
    }
    sub_10005717C((const void **)theDict);
  }
}

void sub_100E12C70(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, xpc_object_t object, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, xpc_object_t a20,uint64_t a21,int a22,__int16 a23,char a24,char a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  sub_100062778((const void **)&a20);
  if ((v32 & 1) == 0) {
    sub_10004D2C8(v31);
  }
  _Unwind_Resume(a1);
}

void sub_100E12EF0(uint64_t a1, uint64_t a2)
{
  int SimTypeForCard = BasicSimInfo::getSimTypeForCard();
  if (SimTypeForCard)
  {
    int v5 = SimTypeForCard;
    int v6 = *(_DWORD *)(a2 + 24);
    BOOL v7 = v6 != SimTypeForCard;
    if (v6 != SimTypeForCard)
    {
      int v8 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v9 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        int v23 = 136315906;
        uint64_t v24 = v9;
        __int16 v25 = 2080;
        unsigned int v26 = " ";
        __int16 v27 = 2080;
        uint64_t v28 = subscriber::asString();
        __int16 v29 = 2080;
        uint64_t v30 = subscriber::asString();
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sRaw 1x SIM type is changing from %s to %s", (uint8_t *)&v23, 0x2Au);
      }
      *(_DWORD *)(a2 + 24) = v5;
    }
    if (*(_DWORD *)(a2 + 28) != v5)
    {
      uint64_t v10 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v11 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        uint64_t v12 = subscriber::asString();
        uint64_t v13 = subscriber::asString();
        int v23 = 136315906;
        uint64_t v24 = v11;
        __int16 v25 = 2080;
        unsigned int v26 = " ";
        __int16 v27 = 2080;
        uint64_t v28 = v12;
        __int16 v29 = 2080;
        uint64_t v30 = v13;
        _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I %s%s1x SIM type is changing from %s to %s", (uint8_t *)&v23, 0x2Au);
        int v5 = *(_DWORD *)(a2 + 24);
      }
      *(_DWORD *)(a2 + 28) = v5;
      int v14 = 1;
      goto LABEL_16;
    }
LABEL_15:
    int v14 = 0;
    goto LABEL_16;
  }
  if (!*(unsigned char *)(a2 + 52))
  {
    BOOL v7 = 0;
    goto LABEL_15;
  }
  unsigned int v15 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v16 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
    int v23 = 136315394;
    uint64_t v24 = v16;
    __int16 v25 = 2080;
    unsigned int v26 = " ";
    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%sMultiSim1xOverride is enabled. Removed 1x SIM type", (uint8_t *)&v23, 0x16u);
  }
  BOOL v7 = 0;
  int v14 = 0;
  *(_DWORD *)(a2 + 28) = *(_DWORD *)(a2 + 24);
LABEL_16:
  int v17 = BasicSimInfo::getSimTypeForCard();
  if (v17)
  {
    int v18 = v17;
    if (*(_DWORD *)(a2 + 32) != v17)
    {
      char v19 = *(NSObject **)(a1 + 40);
      if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v20 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a2);
        uint64_t v21 = subscriber::asString();
        uint64_t v22 = subscriber::asString();
        int v23 = 136315906;
        uint64_t v24 = v20;
        __int16 v25 = 2080;
        unsigned int v26 = " ";
        __int16 v27 = 2080;
        uint64_t v28 = v21;
        __int16 v29 = 2080;
        uint64_t v30 = v22;
        _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%sGW SIM type is changing from %s to %s", (uint8_t *)&v23, 0x2Au);
      }
      *(_DWORD *)(a2 + 32) = v18;
      int v14 = 1;
    }
  }
  if (v7) {
    sub_100E13218(a1);
  }
  if (v14) {
    sub_100E10BE0(a1, (unsigned int *)a2);
  }
}

void sub_100E13218(uint64_t a1)
{
  uint64_t v2 = *(uint64_t **)(a1 + 264);
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  if (v3 == v4)
  {
    unsigned int v5 = 0;
  }
  else
  {
    unsigned int v5 = 0;
    do
    {
      if (!*(unsigned char *)(*(void *)v3 + 49)) {
        v5 += *(unsigned __int8 *)(*(void *)v3 + 48);
      }
      v3 += 16;
    }
    while (v3 != v4);
  }
  int v6 = *(void **)(a1 + 72);
  BOOL v7 = (void *)(a1 + 80);
  if (v6 != (void *)(a1 + 80))
  {
    unsigned int v8 = 0;
    uint64_t v9 = *(void **)(a1 + 72);
    do
    {
      if (*(_DWORD *)(v9[7] + 24)) {
        ++v8;
      }
      uint64_t v10 = (void *)v9[1];
      if (v10)
      {
        do
        {
          uint64_t v11 = v10;
          uint64_t v10 = (void *)*v10;
        }
        while (v10);
      }
      else
      {
        do
        {
          uint64_t v11 = (void *)v9[2];
          BOOL v12 = *v11 == (void)v9;
          uint64_t v9 = v11;
        }
        while (!v12);
      }
      uint64_t v9 = v11;
    }
    while (v11 != v7);
    do
    {
      uint64_t v13 = (unsigned int *)v6[7];
      if (v5 <= 1)
      {
        *((unsigned char *)v13 + 52) = 0;
      }
      else
      {
        int v14 = *(PersonalityInfo **)v13;
        BOOL v16 = *(_DWORD *)(a1 + 552) != *(_DWORD *)(*(void *)v13 + 52) && v8 > 1;
        *((unsigned char *)v13 + 52) = v16;
        if (v16)
        {
          if (v13[7])
          {
            v13[7] = 0;
            int v17 = *(NSObject **)(a1 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = PersonalityInfo::logPrefix(v14);
              *(_DWORD *)CSIPhoneNumber buf = 136315394;
              uint64_t v25 = v18;
              __int16 v26 = 2080;
              __int16 v27 = " ";
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sMultiSim1xOverride is enabled. Disabling 1x SIM type", buf, 0x16u);
            }
LABEL_34:
            sub_100E10BE0(a1, v13);
            goto LABEL_35;
          }
          goto LABEL_35;
        }
      }
      unsigned int v19 = v13[6];
      if (v19)
      {
        uint64_t v20 = *(NSObject **)(a1 + 40);
        if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v21 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v13);
          *(_DWORD *)CSIPhoneNumber buf = 136315394;
          uint64_t v25 = v21;
          __int16 v26 = 2080;
          __int16 v27 = " ";
          _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sMultiSim1xOverride is disabled. Restoring 1x SIM type", buf, 0x16u);
          unsigned int v19 = v13[6];
        }
        v13[7] = v19;
        goto LABEL_34;
      }
LABEL_35:
      uint64_t v22 = (void *)v6[1];
      if (v22)
      {
        do
        {
          int v23 = v22;
          uint64_t v22 = (void *)*v22;
        }
        while (v22);
      }
      else
      {
        do
        {
          int v23 = (void *)v6[2];
          BOOL v12 = *v23 == (void)v6;
          int v6 = v23;
        }
        while (!v12);
      }
      int v6 = v23;
    }
    while (v23 != v7);
  }
}

void sub_100E13484(WirelessTechnologyList *a1, uint64_t a2, _DWORD *a3, WirelessTechnologyList *a4, WirelessTechnologyList *a5)
{
  int v10 = *(_DWORD *)a4;
  *(_DWORD *)a1 = *(_DWORD *)a4;
  int v11 = a3[4];
  if ((v11 & *(_DWORD *)a5) != 0)
  {
    *(_DWORD *)a1 = *(_DWORD *)a5;
    goto LABEL_32;
  }
  if ((v11 & v10) == 0 && (a3[4] & 0x20) != 0)
  {
    LODWORD(v38[0]) = 4;
    ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)4, *(Registry **)(a2 + 56));
    int v14 = ServiceMap;
    if (v15 < 0)
    {
      BOOL v16 = (unsigned __int8 *)(v15 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v17 = 5381;
      do
      {
        uint64_t v15 = v17;
        unsigned int v18 = *v16++;
        uint64_t v17 = (33 * v17) ^ v18;
      }
      while (v18);
    }
    std::mutex::lock(ServiceMap);
    *(void *)CSIPhoneNumber buf = v15;
    unsigned int v19 = sub_10004D37C(&v14[1].__m_.__sig, (unint64_t *)buf);
    if (v19)
    {
      uint64_t v21 = v19[3];
      uint64_t v20 = (std::__shared_weak_count *)v19[4];
      if (v20)
      {
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v14);
        atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v20);
        char v22 = 0;
LABEL_15:
        v40[0] = 0;
        (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, void, void))(*(void *)v21 + 96))(buf, v21, *(unsigned int *)(*(void *)a3 + 52), 2, @"FallbackMethod", 0, 0);
        sub_1000842D0(v40, (CFTypeRef *)buf);
        sub_1000577C4((const void **)buf);
        if (v40[0]) {
          uint64_t v24 = sub_100081E58;
        }
        else {
          uint64_t v24 = 0;
        }
        if (v24)
        {
          *(_DWORD *)CSIPhoneNumber buf = 0;
          ctu::cf::assign((ctu::cf *)buf, (int *)v40[0], v23);
          int v25 = *(_DWORD *)buf;
          if (*(_DWORD *)buf == 2)
          {
            LODWORD(v38[0]) = 8;
          }
          else
          {
            __int16 v26 = *(NSObject **)(a2 + 40);
            if (os_log_type_enabled(v26, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v27 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a3);
              *(_DWORD *)CSIPhoneNumber buf = 136315650;
              *(void *)&uint8_t buf[4] = v27;
              __int16 v45 = 2080;
              CFDictionaryRef v46 = " ";
              __int16 v47 = 1024;
              LODWORD(v48) = v25;
              _os_log_impl((void *)&_mh_execute_header, v26, OS_LOG_TYPE_DEFAULT, "#I %s%sUnknown fall back method value found in the operator bundle: %d", buf, 0x1Cu);
            }
          }
        }
        uint64_t v28 = *(NSObject **)(a2 + 40);
        if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
        {
          uint64_t v29 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a3);
          WirelessTechnologyList::asString((uint64_t *)__p, (WirelessTechnologyList *)v38);
          uint64_t v30 = v43 >= 0 ? __p : (void **)__p[0];
          *(_DWORD *)CSIPhoneNumber buf = 136315650;
          *(void *)&uint8_t buf[4] = v29;
          __int16 v45 = 2080;
          CFDictionaryRef v46 = " ";
          __int16 v47 = 2080;
          uint64_t v48 = v30;
          _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I %s%sCall handling tech from operator bundle: %s", buf, 0x20u);
          if (v43 < 0) {
            operator delete(__p[0]);
          }
        }
        sub_1000570E8((const void **)v40);
        if ((v22 & 1) == 0) {
          sub_10004D2C8(v20);
        }
        *(_DWORD *)a1 = v38[0];
        goto LABEL_32;
      }
    }
    else
    {
      uint64_t v21 = 0;
    }
    std::mutex::unlock(v14);
    uint64_t v20 = 0;
    char v22 = 1;
    goto LABEL_15;
  }
LABEL_32:
  uint64_t v31 = *(NSObject **)(a2 + 40);
  if (os_log_type_enabled(v31, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v32 = PersonalityInfo::logPrefix(*(PersonalityInfo **)a3);
    WirelessTechnologyList::asString((uint64_t *)__p, a4);
    if (v43 >= 0) {
      int v33 = __p;
    }
    else {
      int v33 = (void **)__p[0];
    }
    WirelessTechnologyList::asString((uint64_t *)v40, a5);
    int v34 = v41;
    uint64_t v35 = (void **)v40[0];
    WirelessTechnologyList::asString((uint64_t *)v38, a1);
    int v36 = v40;
    if (v34 < 0) {
      int v36 = v35;
    }
    if (v39 >= 0) {
      BOOL v37 = v38;
    }
    else {
      BOOL v37 = (void **)v38[0];
    }
    *(_DWORD *)CSIPhoneNumber buf = 136316162;
    *(void *)&uint8_t buf[4] = v32;
    __int16 v45 = 2080;
    CFDictionaryRef v46 = " ";
    __int16 v47 = 2080;
    uint64_t v48 = v33;
    __int16 v49 = 2080;
    int v50 = v36;
    __int16 v51 = 2080;
    CFIndex v52 = v37;
    _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I %s%sPrimary technology: %s, Secondary: %s, calls are going to be handled on: %s", buf, 0x34u);
    if (v39 < 0) {
      operator delete(v38[0]);
    }
    if (v41 < 0) {
      operator delete(v40[0]);
    }
    if (v43 < 0) {
      operator delete(__p[0]);
    }
  }
}

void sub_100E138BC(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,char a25)
{
  sub_1000570E8((const void **)&__p);
  if ((v26 & 1) == 0) {
    sub_10004D2C8(v25);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100E13948@<W0>(Registry *a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, a1);
  unsigned int v5 = ServiceMap;
  if ((v6 & 0x8000000000000000) != 0)
  {
    BOOL v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      unint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  unint64_t v19 = v6;
  int v10 = sub_10004D37C(&v5[1].__m_.__sig, &v19);
  if (v10)
  {
    uint64_t v12 = v10[3];
    int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  int v11 = 0;
  char v13 = 1;
LABEL_9:
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, const __CFString *, const __CFString *, void, uint64_t))(*(void *)v12 + 24))(&cf, v12, *a2 + 24, @"NetworkSupportsVoPS", @"Capabilities", 0, 1);
  int v14 = (BOOL *)cf;
  LOBYTE(v19) = 0;
  if (cf)
  {
    CFTypeID v15 = CFGetTypeID(cf);
    if (v15 == CFBooleanGetTypeID())
    {
      ctu::cf::assign((ctu::cf *)&v19, v14, v16);
      LODWORD(v14) = v19;
    }
    else
    {
      LODWORD(v14) = 0;
    }
  }
  sub_1000577C4(&cf);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  return v14 != 0;
}

void sub_100E13AB8(_Unwind_Exception *exception_object)
{
  if ((v2 & 1) == 0) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

BOOL sub_100E13AE8(uint64_t a1, PersonalityInfo **a2)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 56));
  unsigned int v5 = ServiceMap;
  if (v6 < 0)
  {
    BOOL v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)CSIPhoneNumber buf = v6;
  int v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v12 = v10[3];
    int v11 = (std::__shared_weak_count *)v10[4];
    if (v11)
    {
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v11);
      char v13 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v12 = 0;
  }
  std::mutex::unlock(v5);
  int v11 = 0;
  char v13 = 1;
LABEL_9:
  uint64_t v20 = 0;
  (*(void (**)(unsigned char *__return_ptr, uint64_t, void, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v12 + 96))(buf, v12, *((unsigned int *)*a2 + 13), 1, @"SupportsSupplementaryServicesOverIMS", kCFBooleanFalse, 0);
  sub_1000057AC(&v20, (CFTypeRef *)buf);
  sub_1000577C4((const void **)buf);
  if (*((unsigned char *)a2 + 21))
  {
    buf[0] = 0;
    ctu::cf::assign((ctu::cf *)buf, v20, v14);
    BOOL v15 = buf[0] != 0;
  }
  else
  {
    BOOL v15 = 0;
  }
  CFBooleanRef v16 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v17 = PersonalityInfo::logPrefix(*a2);
    unsigned int v18 = "false";
    *(_DWORD *)CSIPhoneNumber buf = 136315650;
    *(void *)&uint8_t buf[4] = v17;
    __int16 v22 = 2080;
    CFNumberRef v23 = " ";
    if (v15) {
      unsigned int v18 = "true";
    }
    __int16 v24 = 2080;
    int v25 = v18;
    _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%sSupp. Services support over IMS - %s", buf, 0x20u);
  }
  sub_100062778((const void **)&v20);
  if ((v13 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  return v15;
}

void sub_100E13D20(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100062778((const void **)va);
  if ((v3 & 1) == 0) {
    sub_10004D2C8(v2);
  }
  _Unwind_Resume(a1);
}

void sub_100E13D70(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v4 = (void *)a3[3];
  if (v4)
  {
    if (v4 == a3)
    {
      int v10 = v9;
      (*(void (**)(void *, void *))(*a3 + 24))(a3, v9);
    }
    else
    {
      int v10 = (void *)(*(uint64_t (**)(void *))(*v4 + 16))(v4);
    }
  }
  else
  {
    int v10 = 0;
  }
  unsigned int v5 = *(std::__shared_weak_count **)(a1 + 16);
  if (v5)
  {
    uint64_t v6 = *(std::__shared_weak_count **)(a1 + 8);
    BOOL v7 = std::__shared_weak_count::lock(v5);
    if (v7)
    {
      v11[0] = v6;
      v11[1] = v7;
      atomic_fetch_add_explicit(&v7->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v7);
      uint64_t v8 = *(std::__shared_weak_count **)(a1 + 16);
      if (v8)
      {
        if (std::__shared_weak_count::lock(v8)) {
          operator new();
        }
      }
      sub_100088B9C();
    }
  }
  sub_100088B9C();
}

void sub_100E13FBC(_Unwind_Exception *exception_object, int a2)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

const void **sub_100E13FF4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  long long v74 = 0;
  CFDictionaryRef Mutable = CFDictionaryCreateMutable(kCFAllocatorDefault, 0, &kCFTypeDictionaryKeyCallBacks, &kCFTypeDictionaryValueCallBacks);
  if (Mutable)
  {
    uint64_t v6 = v74;
    long long v74 = Mutable;
    std::string __p = v6;
    CFDictionaryRef Mutable = (__CFDictionary *)sub_10005717C((const void **)&__p);
  }
  std::string __p = 0;
  unsigned int v72 = 0;
  uint64_t v73 = 0;
  SupportedMessageModes = (capabilities::ct *)capabilities::ct::getSupportedMessageModes((uint64_t *)&__p, Mutable);
  unsigned int v9 = __p;
  uint64_t v8 = v72;
  if (__p != v72)
  {
    while (*v9 != 4)
    {
      if (++v9 == v72)
      {
        unsigned int v9 = v72;
        break;
      }
    }
  }
  int v10 = v74;
  CFBooleanRef v11 = kCFBooleanFalse;
  if (capabilities::ct::supportsCapabilityAPN(SupportedMessageModes)) {
    CFBooleanRef v12 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v12 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v10, kAPNCapability, v12);
  char v13 = v74;
  if (capabilities::ct::supportsCapabilitySIM(v14)) {
    CFBooleanRef v15 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v15 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v13, kSIMCapability, v15);
  CFBooleanRef v16 = v74;
  if (capabilities::ct::getRadioModuleType(v17) == 2) {
    CFBooleanRef v18 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v18 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v16, kSIMPhonebookCapability, v18);
  CFDictionarySetValue(v74, kUMTSDeviceCapability, kCFBooleanTrue);
  unint64_t v19 = v74;
  if (capabilities::ct::supportsCapabilityC2KDevice(v20)) {
    CFBooleanRef v21 = kCFBooleanTrue;
  }
  else {
    CFBooleanRef v21 = kCFBooleanFalse;
  }
  CFDictionarySetValue(v19, kC2KDeviceCapability, v21);
  if (v9 == v8) {
    CFBooleanRef v22 = kCFBooleanFalse;
  }
  else {
    CFBooleanRef v22 = kCFBooleanTrue;
  }
  CFDictionarySetValue(v74, kCellBroadcastCapability, v22);
  CFDictionarySetValue(v74, kLTEDeviceCapability, kCFBooleanTrue);
  CFNumberRef v23 = (const void *)kCallerIDCapability;
  CFBooleanRef v24 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kCallerIDCapability);
  CFBooleanRef v25 = v24;
  CFBooleanRef v26 = kCFBooleanFalse;
  if (v24)
  {
    CFTypeID v27 = CFGetTypeID(v24);
    if (v27 == CFBooleanGetTypeID()) {
      CFBooleanRef v26 = v25;
    }
    else {
      CFBooleanRef v26 = kCFBooleanFalse;
    }
  }
  uint64_t v28 = (void *)kCallWaitingCapability;
  CFBooleanRef v29 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kCallWaitingCapability);
  CFBooleanRef v30 = v29;
  CFBooleanRef v31 = kCFBooleanFalse;
  if (v29)
  {
    CFTypeID v32 = CFGetTypeID(v29);
    if (v32 == CFBooleanGetTypeID()) {
      CFBooleanRef v31 = v30;
    }
    else {
      CFBooleanRef v31 = kCFBooleanFalse;
    }
  }
  CFBooleanRef value = v31;
  int v33 = (void *)kCallForwardingCapability;
  CFBooleanRef v34 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kCallForwardingCapability);
  CFBooleanRef v35 = v34;
  CFBooleanRef v36 = kCFBooleanFalse;
  if (v34)
  {
    CFTypeID v37 = CFGetTypeID(v34);
    if (v37 == CFBooleanGetTypeID()) {
      CFBooleanRef v36 = v35;
    }
    else {
      CFBooleanRef v36 = kCFBooleanFalse;
    }
  }
  CFBooleanRef v68 = v36;
  char v67 = (void *)kSimultaneousCallAndDataSupported;
  CFBooleanRef v38 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kSimultaneousCallAndDataSupported);
  CFBooleanRef v39 = v38;
  CFBooleanRef v40 = kCFBooleanFalse;
  if (v38)
  {
    CFTypeID v41 = CFGetTypeID(v38);
    if (v41 == CFBooleanGetTypeID()) {
      CFBooleanRef v40 = v39;
    }
    else {
      CFBooleanRef v40 = kCFBooleanFalse;
    }
  }
  CFBooleanRef v65 = v40;
  uint64_t v63 = (const void *)kSimultaneousCallAndDataCurrentlySupported;
  CFBooleanRef v42 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kSimultaneousCallAndDataCurrentlySupported);
  CFBooleanRef v43 = v42;
  CFBooleanRef v44 = kCFBooleanFalse;
  if (v42)
  {
    CFTypeID v45 = CFGetTypeID(v42);
    if (v45 == CFBooleanGetTypeID()) {
      CFBooleanRef v44 = v43;
    }
    else {
      CFBooleanRef v44 = kCFBooleanFalse;
    }
  }
  CFBooleanRef v62 = v44;
  int v64 = v33;
  key = v28;
  CFDictionaryRef v46 = v23;
  __int16 v47 = (const void *)kAgentCapability;
  CFBooleanRef v48 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kAgentCapability);
  CFBooleanRef v49 = v48;
  CFBooleanRef v50 = kCFBooleanFalse;
  if (v48)
  {
    CFTypeID v51 = CFGetTypeID(v48);
    if (v51 == CFBooleanGetTypeID()) {
      CFBooleanRef v50 = v49;
    }
    else {
      CFBooleanRef v50 = kCFBooleanFalse;
    }
  }
  CFIndex v52 = (const void *)kSuspendInternetOnBBCall;
  CFBooleanRef v53 = (const __CFBoolean *)sub_100E0FD28(a1, a2, kSuspendInternetOnBBCall);
  CFBooleanRef v54 = v53;
  if (v53)
  {
    CFTypeID v55 = CFGetTypeID(v53);
    if (v55 == CFBooleanGetTypeID()) {
      CFBooleanRef v11 = v54;
    }
  }
  BOOL v56 = (const void *)kConferenceCallType;
  CFNumberRef v57 = (const void *)sub_100E0FD28(a1, a2, kConferenceCallType);
  int v58 = v57;
  int v59 = (const void *)kConferenceCallTypeUnknown;
  if (v57)
  {
    CFTypeID v60 = CFGetTypeID(v57);
    if (v60 == CFStringGetTypeID()) {
      int v59 = v58;
    }
  }
  CFDictionarySetValue(v74, v46, v26);
  CFDictionarySetValue(v74, key, value);
  CFDictionarySetValue(v74, v64, v68);
  CFDictionarySetValue(v74, v56, v59);
  CFDictionarySetValue(v74, v67, v65);
  CFDictionarySetValue(v74, v63, v62);
  CFDictionarySetValue(v74, v47, v50);
  CFDictionarySetValue(v74, v52, v11);
  sub_10004EFE4(a3, (CFTypeRef *)&v74);
  if (__p)
  {
    unsigned int v72 = __p;
    operator delete(__p);
  }
  return sub_10005717C((const void **)&v74);
}

void sub_100E14470(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20)
{
  sub_10005717C((const void **)(v20 - 88));
  _Unwind_Resume(a1);
}

BOOL sub_100E144C0(uint64_t a1, int a2)
{
  int v6 = a2;
  v5[0] = a1;
  v5[1] = &v6;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 0x40000000;
  void v7[2] = sub_100E1A6B4;
  void v7[3] = &unk_101A5ED48;
  v7[4] = a1 + 8;
  void v7[5] = v5;
  uint64_t v8 = v7;
  uint64_t v3 = a1 + 24;
  char v2 = *(NSObject **)(a1 + 24);
  if (*(void *)(v3 + 8))
  {
    char v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFBooleanRef v11 = sub_10005B2C0;
    CFBooleanRef v12 = &unk_101A5EBF8;
    char v13 = &v15;
    CFBooleanRef v14 = &v8;
    dispatch_async_and_wait(v2, &block);
  }
  else
  {
    char v15 = 0;
    blocuint64_t k = _NSConcreteStackBlock;
    uint64_t v10 = 0x40000000;
    CFBooleanRef v11 = sub_10005A55C;
    CFBooleanRef v12 = &unk_101A5EBD8;
    char v13 = &v15;
    CFBooleanRef v14 = &v8;
    dispatch_sync(v2, &block);
  }
  return v15 != 0;
}

void *sub_100E145FC(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100E14684(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E146BC(uint64_t a1)
{
}

uint64_t sub_100E146D8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100E1471C(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100E14748(ServiceManager::Service *this)
{
  *(void *)this = off_101A5E438;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100E147A4(ServiceManager::Service *this)
{
  *(void *)this = off_101A5E438;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100E14814@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  Name = (char *)CapabilitiesHandler::getName(*(CapabilitiesHandler **)(a1 + 8));

  return sub_100058DB0(a2, Name);
}

unsigned char *sub_100E14854@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100E14894(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100E0F82C(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100E0F82C(v4, 0);
}

uint64_t sub_100E14918()
{
  return 0;
}

uint64_t sub_100E14920()
{
  return 1;
}

uint64_t sub_100E14928()
{
  return 0;
}

void sub_100E14934(uint64_t a1)
{
  uint64_t v1 = *(NSObject **)(*(void *)(a1 + 8) + 40);
  if (os_log_type_enabled(v1, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)uint64_t v2 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, OS_LOG_TYPE_DEFAULT, "#I started", v2, 2u);
  }
}

void sub_100E14998(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

uint64_t *sub_100E14AAC(uint64_t *a1)
{
  uint64_t v1 = *a1;
  unsigned int v5 = a1;
  uint64_t v6 = v1;
  uint64_t v2 = *(void *)v1;
  uint64_t v3 = *(NSObject **)(*(void *)v1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CSIPhoneNumber buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Shutting down", buf, 2u);
  }
  ctu::RestModule::disconnect((ctu::RestModule *)(v2 + 96));
  sub_100088C88(&v6);
  return sub_100046B58((uint64_t *)&v5);
}

void sub_100E14B30(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100E14B4C(uint64_t a1)
{
  uint64_t v64 = a1;
  uint64_t v1 = *(void *)a1;
  uint64_t v2 = *(NSObject **)(*(void *)a1 + 40);
  if (os_log_type_enabled(v2, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)CSIPhoneNumber buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, OS_LOG_TYPE_DEFAULT, "#I Bootstrapping", buf, 2u);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v3) {
    goto LABEL_60;
  }
  uint64_t v4 = *(void *)(v1 + 8);
  unsigned int v5 = std::__shared_weak_count::lock(v3);
  if (!v5) {
    goto LABEL_60;
  }
  uint64_t v6 = v5;
  atomic_fetch_add_explicit(&v5->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v5);
  uint64_t v71 = 0;
  BOOL v7 = (uint8_t *)operator new(0x20uLL);
  *(void *)BOOL v7 = off_101A5E4B8;
  *((void *)v7 + 1) = v1;
  *((void *)v7 + 2) = v4;
  *((void *)v7 + 3) = v6;
  uint64_t v71 = v7;
  uint64_t v68 = 0;
  v65[3] = 0;
  PersonalitiesTracker::bind();
  sub_100100490(v65);
  sub_10010040C(__p);
  sub_100100388(buf);
  uint64_t v8 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v8) {
    goto LABEL_60;
  }
  uint64_t v9 = *(void *)(v1 + 8);
  uint64_t v10 = std::__shared_weak_count::lock(v8);
  if (!v10) {
    goto LABEL_60;
  }
  CFBooleanRef v11 = v10;
  atomic_fetch_add_explicit(&v10->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v10);
  sub_100058DB0(__p, "/cc/props/sims_in_use");
  CFBooleanRef v12 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFBooleanRef v12 = off_101A5E538;
  *((void *)v12 + 1) = v1 + 280;
  *((void *)v12 + 2) = v1;
  *((void *)v12 + 3) = v9;
  *((void *)v12 + 4) = v11;
  uint64_t v71 = v12;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  char v13 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v13) {
    goto LABEL_60;
  }
  uint64_t v14 = *(void *)(v1 + 8);
  char v15 = std::__shared_weak_count::lock(v13);
  if (!v15) {
    goto LABEL_60;
  }
  CFBooleanRef v16 = v15;
  atomic_fetch_add_explicit(&v15->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v15);
  sub_100058DB0(__p, "/cc/props/rat");
  uint64_t v17 = (uint8_t *)operator new(0x28uLL);
  *(void *)uint64_t v17 = off_101A5E5B8;
  *((void *)v17 + 1) = v1 + 472;
  *((void *)v17 + 2) = v1;
  *((void *)v17 + 3) = v14;
  *((void *)v17 + 4) = v16;
  uint64_t v71 = v17;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  CFBooleanRef v18 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v18) {
    goto LABEL_60;
  }
  uint64_t v19 = *(void *)(v1 + 8);
  uint64_t v20 = std::__shared_weak_count::lock(v18);
  if (!v20) {
    goto LABEL_60;
  }
  CFBooleanRef v21 = v20;
  atomic_fetch_add_explicit(&v20->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v20);
  sub_100058DB0(__p, "/cc/props/reg_data_modes");
  CFBooleanRef v22 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFBooleanRef v22 = off_101A5E638;
  *((void *)v22 + 1) = v1 + 400;
  *((void *)v22 + 2) = v1;
  *((void *)v22 + 3) = v19;
  *((void *)v22 + 4) = v21;
  uint64_t v71 = v22;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  CFNumberRef v23 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v23) {
    goto LABEL_60;
  }
  uint64_t v24 = *(void *)(v1 + 8);
  CFBooleanRef v25 = std::__shared_weak_count::lock(v23);
  if (!v25) {
    goto LABEL_60;
  }
  CFBooleanRef v26 = v25;
  atomic_fetch_add_explicit(&v25->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v25);
  sub_100058DB0(__p, "/cc/props/ims_feature_state");
  CFTypeID v27 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFTypeID v27 = off_101A5E6B8;
  *((void *)v27 + 1) = v1 + 304;
  *((void *)v27 + 2) = v1;
  *((void *)v27 + 3) = v24;
  *((void *)v27 + 4) = v26;
  uint64_t v71 = v27;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v28 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v28) {
    goto LABEL_60;
  }
  uint64_t v29 = *(void *)(v1 + 8);
  CFBooleanRef v30 = std::__shared_weak_count::lock(v28);
  if (!v30) {
    goto LABEL_60;
  }
  CFBooleanRef v31 = v30;
  atomic_fetch_add_explicit(&v30->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v30);
  sub_100058DB0(__p, "/cc/props/ims_registration_state");
  CFTypeID v32 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFTypeID v32 = off_101A5E738;
  *((void *)v32 + 1) = v1 + 328;
  *((void *)v32 + 2) = v1;
  *((void *)v32 + 3) = v29;
  *((void *)v32 + 4) = v31;
  uint64_t v71 = v32;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  int v33 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v33) {
    goto LABEL_60;
  }
  uint64_t v34 = *(void *)(v1 + 8);
  CFBooleanRef v35 = std::__shared_weak_count::lock(v33);
  if (!v35) {
    goto LABEL_60;
  }
  CFBooleanRef v36 = v35;
  atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v35);
  sub_100058DB0(__p, "/cc/props/carrier_bundles");
  CFTypeID v37 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFTypeID v37 = off_101A5E7B8;
  *((void *)v37 + 1) = v1 + 352;
  *((void *)v37 + 2) = v1;
  *((void *)v37 + 3) = v34;
  *((void *)v37 + 4) = v36;
  uint64_t v71 = v37;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  CFBooleanRef v38 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v38) {
    goto LABEL_60;
  }
  uint64_t v39 = *(void *)(v1 + 8);
  CFBooleanRef v40 = std::__shared_weak_count::lock(v38);
  if (!v40) {
    goto LABEL_60;
  }
  CFTypeID v41 = v40;
  atomic_fetch_add_explicit(&v40->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v40);
  sub_100058DB0(__p, "/cc/props/operator_bundles");
  CFBooleanRef v42 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFBooleanRef v42 = off_101A5E838;
  *((void *)v42 + 1) = v1 + 376;
  *((void *)v42 + 2) = v1;
  *((void *)v42 + 3) = v39;
  *((void *)v42 + 4) = v41;
  uint64_t v71 = v42;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  CFBooleanRef v43 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v43) {
    goto LABEL_60;
  }
  uint64_t v44 = *(void *)(v1 + 8);
  CFTypeID v45 = std::__shared_weak_count::lock(v43);
  if (!v45) {
    goto LABEL_60;
  }
  CFDictionaryRef v46 = v45;
  atomic_fetch_add_explicit(&v45->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v45);
  sub_100058DB0(__p, "/cc/props/volte_feature_support");
  __int16 v47 = (uint8_t *)operator new(0x28uLL);
  *(void *)__int16 v47 = off_101A5E8B8;
  *((void *)v47 + 1) = v1 + 448;
  *((void *)v47 + 2) = v1;
  *((void *)v47 + 3) = v44;
  *((void *)v47 + 4) = v46;
  uint64_t v71 = v47;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/props/user_preferred_data_slot");
  CFBooleanRef v48 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFBooleanRef v48 = off_101A5E938;
  *((void *)v48 + 1) = v1 + 552;
  *((void *)v48 + 2) = v1;
  *((void *)v48 + 3) = sub_100E13218;
  *((void *)v48 + 4) = 0;
  uint64_t v71 = v48;
  ctu::RestModule::observeProperty();
  CFBooleanRef v49 = (capabilities::ct *)sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  if (capabilities::ct::supports5G(v49))
  {
    sub_100058DB0(__p, "/cc/prefs-nb/activation_5g_support");
    *(void *)CSIPhoneNumber buf = off_101A5E9B8;
    CFBooleanRef v70 = (std::__shared_weak_count *)(v1 + 556);
    uint64_t v71 = buf;
    ctu::RestModule::observeProperty();
    sub_10003F600(buf);
    if (SHIBYTE(v67) < 0) {
      operator delete(__p[0]);
    }
  }
  CFBooleanRef v50 = (uint8_t *)(v1 + 496);
  *(void *)CSIPhoneNumber buf = off_101A5EA38;
  CFBooleanRef v70 = (std::__shared_weak_count *)(v1 + 96);
  uint64_t v71 = buf;
  if (buf != (uint8_t *)(v1 + 496))
  {
    CFTypeID v51 = *(uint8_t **)(v1 + 520);
    if (v51 == v50)
    {
      __p[1] = (void *)(v1 + 96);
      uint64_t v67 = 0;
      __p[0] = off_101A5EA38;
      uint64_t v71 = 0;
      (*(void (**)(uint64_t, uint8_t *))(*(void *)v50 + 24))(v1 + 496, buf);
      (*(void (**)(void))(**(void **)(v1 + 520) + 32))(*(void *)(v1 + 520));
      *(void *)(v1 + 520) = 0;
      uint64_t v71 = buf;
      (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v1 + 496);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      *(void *)(v1 + 496) = off_101A5EA38;
      *(void *)(v1 + 504) = v1 + 96;
      uint64_t v71 = v51;
    }
    *(void *)(v1 + 520) = v50;
  }
  sub_100E145FC(buf);
  uint64_t v52 = *(void *)(v1 + 520);
  if (v52) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v52 + 48))(v52, v1 + 528);
  }
  CFBooleanRef v53 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v53) {
    goto LABEL_60;
  }
  uint64_t v54 = *(void *)(v1 + 8);
  CFTypeID v55 = std::__shared_weak_count::lock(v53);
  if (!v55) {
    goto LABEL_60;
  }
  BOOL v56 = v55;
  atomic_fetch_add_explicit(&v55->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v55);
  sub_100058DB0(__p, "/cc/props/ims_voice_support");
  CFNumberRef v57 = (uint8_t *)operator new(0x28uLL);
  *(void *)CFNumberRef v57 = off_101A5EAC8;
  *((void *)v57 + 1) = v1 + 424;
  *((void *)v57 + 2) = v1;
  *((void *)v57 + 3) = v54;
  *((void *)v57 + 4) = v56;
  uint64_t v71 = v57;
  ctu::RestModule::observeProperty();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  int v58 = *(std::__shared_weak_count **)(v1 + 16);
  if (!v58 || (uint64_t v59 = *(void *)(v1 + 8), (v60 = std::__shared_weak_count::lock(v58)) == 0)) {
LABEL_60:
  }
    sub_100088B9C();
  CFBooleanRef v61 = v60;
  atomic_fetch_add_explicit(&v60->__shared_weak_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v60);
  sub_100058DB0(__p, "/cc/events/dump_state");
  CFBooleanRef v62 = (uint8_t *)operator new(0x20uLL);
  *(void *)CFBooleanRef v62 = off_101A5EB48;
  *((void *)v62 + 1) = v1;
  *((void *)v62 + 2) = v59;
  *((void *)v62 + 3) = v61;
  uint64_t v71 = v62;
  ctu::RestModule::observeEvent();
  sub_10003F600(buf);
  if (SHIBYTE(v67) < 0) {
    operator delete(__p[0]);
  }
  Registry::createRestModuleOneTimeUseConnection((uint64_t *)buf, *(Registry **)(v1 + 56));
  ctu::RestModule::connect();
  if (v70) {
    sub_10004D2C8(v70);
  }
  return sub_1003C2130(&v64);
}

void sub_100E154E0(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, int a11, __int16 a12, char a13, char a14, uint64_t a15, uint64_t a16, uint64_t a17, void *__p, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,char a25,uint64_t a26)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void *sub_100E155F8(void *a1)
{
  *a1 = off_101A5E4B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E15644(void *a1)
{
  *a1 = off_101A5E4B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E156B0(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x20uLL);
  *(void *)uint64_t result = off_101A5E4B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E15714(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E4B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E15754(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E15764(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E157A4(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = (std::__shared_weak_count *)a1[3];
  if (!v4) {
    return;
  }
  uint64_t v6 = a1[1];
  BOOL v7 = std::__shared_weak_count::lock(v4);
  if (!v7) {
    return;
  }
  uint64_t v8 = v7;
  if (a1[2])
  {
    uint64_t v9 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      asString();
      uint64_t v10 = __p[23] >= 0 ? __p : *(unsigned char **)__p;
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v10;
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I event: %s", (uint8_t *)&buf, 0xCu);
      if ((__p[23] & 0x80000000) != 0) {
        operator delete(*(void **)__p);
      }
    }
    uint64_t v11 = *(void *)(v6 + 264);
    CFBooleanRef v12 = *(void **)v11;
    char v13 = *(void **)(v11 + 8);
    if (*(void **)v11 == v13) {
      goto LABEL_21;
    }
    while (!sub_10001D294((unsigned __int8 *)(*v12 + 24), (unsigned __int8 *)a3))
    {
      v12 += 2;
      if (v12 == v13)
      {
        CFBooleanRef v12 = v13;
        break;
      }
    }
    if (v12 == *(void **)(v11 + 8))
    {
LABEL_21:
      uint64_t v15 = 0;
      uint64_t v14 = 0;
    }
    else
    {
      uint64_t v15 = *v12;
      uint64_t v14 = (std::__shared_weak_count *)v12[1];
      if (v14) {
        atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      }
      if (v15)
      {
        if (*(unsigned char *)(v15 + 49))
        {
LABEL_128:
          if (v14) {
            sub_10004D2C8(v14);
          }
          goto LABEL_130;
        }
        int v16 = 0;
LABEL_23:
        uint64_t v17 = (void *)(v6 + 72);
        CFBooleanRef v18 = sub_100046F68(v6 + 72, (void **)a3);
        uint64_t v19 = (char **)(v6 + 80);
        if ((void **)(v6 + 80) == v18)
        {
          BOOL v22 = 0;
          uint64_t v21 = 0;
          uint64_t v20 = 0;
        }
        else
        {
          uint64_t v21 = (uint64_t)v18[7];
          uint64_t v20 = (std::__shared_weak_count *)v18[8];
          if (v20) {
            atomic_fetch_add_explicit(&v20->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          BOOL v22 = v21 != 0;
          if (v21) {
            char v23 = v16;
          }
          else {
            char v23 = 1;
          }
          if ((v23 & 1) == 0)
          {
            if (v14) {
              atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
            }
            uint64_t v24 = *(std::__shared_weak_count **)(v21 + 8);
            *(void *)uint64_t v21 = v15;
            *(void *)(v21 + 8) = v14;
            if (v24) {
              sub_10004D2C8(v24);
            }
            BOOL v22 = 1;
          }
        }
        switch(*(unsigned char *)(a3 + 24))
        {
          case 0:
            if (((v16 | v22) & 1) == 0)
            {
              CFTypeID v37 = (char *)operator new(0x50uLL);
              CFBooleanRef v38 = (std::__shared_weak_count *)v37;
              *((void *)v37 + 1) = 0;
              *((void *)v37 + 2) = 0;
              *(void *)CFTypeID v37 = off_101A5ED08;
              uint64_t v39 = (unsigned int *)(v37 + 24);
              if (v14)
              {
                atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                *((void *)v37 + 3) = v15;
                *((void *)v37 + 4) = v14;
                atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
                *((_DWORD *)v37 + 18) = 0;
                v37[76] = 0;
                *((_DWORD *)v37 + 10) = 0;
                *(_DWORD *)(v37 + 43) = 0;
                *((void *)v37 + 6) = 0;
                *((void *)v37 + 7) = 0;
                *(void *)(v37 + 62) = 0;
                sub_10004D2C8(v14);
              }
              else
              {
                *((_DWORD *)v37 + 18) = 0;
                v37[76] = 0;
                *((void *)v37 + 6) = 0;
                *((void *)v37 + 7) = 0;
                *(void *)(v37 + 62) = 0;
                *((void *)v37 + 3) = v15;
                *((void *)v37 + 4) = 0;
                *(void *)(v37 + 39) = 0;
              }
              sub_100E102DC(v6, (uint64_t)v39);
              CFBooleanRef v62 = (void **)(v6 + 72);
              if (*(char *)(a3 + 23) < 0)
              {
                sub_10004FC84(__p, *(void **)a3, *(void *)(a3 + 8));
              }
              else
              {
                *(_OWORD *)std::string __p = *(_OWORD *)a3;
                *(void *)&__p[16] = *(void *)(a3 + 16);
              }
              *(void *)&long long v64 = v39;
              *((void *)&v64 + 1) = v38;
              atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
              CFTypeID v45 = *v19;
              CFDictionaryRef v46 = (char **)(v6 + 80);
              __int16 v47 = (char **)(v6 + 80);
              if (!*v19) {
                goto LABEL_90;
              }
              CFDictionaryRef v46 = (char **)(v6 + 80);
              while (1)
              {
                while (1)
                {
                  __int16 v47 = (char **)v45;
                  CFBooleanRef v48 = v45 + 32;
                  if ((sub_100046FE8(__p, (void **)v45 + 4) & 0x80) == 0) {
                    break;
                  }
                  CFTypeID v45 = *v47;
                  CFDictionaryRef v46 = v47;
                  if (!*v47) {
                    goto LABEL_90;
                  }
                }
                if ((sub_100046FE8(v48, (void **)__p) & 0x80) == 0) {
                  break;
                }
                CFDictionaryRef v46 = v47 + 1;
                CFTypeID v45 = v47[1];
                if (!v45) {
                  goto LABEL_90;
                }
              }
              if (!*v46)
              {
LABEL_90:
                uint64_t v66 = 0;
                CFBooleanRef v49 = (char *)operator new(0x48uLL);
                *(void *)&long long buf = v49;
                *((void *)&buf + 1) = v6 + 80;
                CFBooleanRef v50 = v49 + 32;
                if ((__p[23] & 0x80000000) != 0)
                {
                  sub_10004FC84(v50, *(void **)__p, *(unint64_t *)&__p[8]);
                }
                else
                {
                  *(_OWORD *)CFBooleanRef v50 = *(_OWORD *)__p;
                  *((void *)v49 + 6) = *(void *)&__p[16];
                }
                *(_OWORD *)(v49 + 56) = v64;
                long long v64 = 0uLL;
                LOBYTE(v66) = 1;
                *(void *)CFBooleanRef v49 = 0;
                *((void *)v49 + 1) = 0;
                *((void *)v49 + 2) = v47;
                *CFDictionaryRef v46 = v49;
                CFTypeID v51 = (void *)**v62;
                if (v51)
                {
                  *CFBooleanRef v62 = v51;
                  CFBooleanRef v49 = *v46;
                }
                sub_100046C90(*(uint64_t **)(v6 + 80), (uint64_t *)v49);
                ++*(void *)(v6 + 88);
                *(void *)&long long buf = 0;
                sub_1001FEBC4((uint64_t)&buf);
              }
              if (*((void *)&v64 + 1)) {
                sub_10004D2C8(*((std::__shared_weak_count **)&v64 + 1));
              }
              if ((__p[23] & 0x80000000) != 0) {
                operator delete(*(void **)__p);
              }
              sub_100E10BE0(v6, v39);
              sub_10004D2C8(v38);
            }
            break;
          case 1:
          case 3:
            char v25 = !v22;
            if (!v15) {
              char v25 = 1;
            }
            if ((v25 & 1) == 0)
            {
              CFBooleanRef v26 = *(_DWORD **)(v6 + 280);
              CFTypeID v27 = *(_DWORD **)(v6 + 288);
              if (v26 != v27)
              {
                while (*v26 != *(_DWORD *)(v15 + 52))
                {
                  v26 += 42;
                  if (v26 == v27) {
                    goto LABEL_126;
                  }
                }
                sub_100E12EF0(v6, v21);
              }
            }
            break;
          case 2:
            if (v22) {
              goto LABEL_72;
            }
            break;
          case 4:
            if (v22)
            {
              CFBooleanRef v40 = *(NSObject **)(v6 + 40);
              if (os_log_type_enabled(v40, OS_LOG_TYPE_DEFAULT))
              {
                uint64_t v41 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v21);
                CFBooleanRef v42 = (const char *)(*(void *)v21 + 24);
                uint64_t v43 = *(unsigned __int8 *)(*(void *)v21 + 47);
                int v44 = (char)v43;
                if ((v43 & 0x80u) != 0) {
                  uint64_t v43 = *(void *)(*(void *)v21 + 32);
                }
                if (v44 < 0) {
                  CFBooleanRef v42 = *(const char **)(*(void *)v21 + 24);
                }
                if (!v43) {
                  CFBooleanRef v42 = "<invalid>";
                }
                *(_DWORD *)std::string __p = 136315650;
                *(void *)&__p[4] = v41;
                *(_WORD *)&unsigned char __p[12] = 2080;
                *(void *)&__p[14] = " ";
                *(_WORD *)&unsigned char __p[22] = 2080;
                *(void *)&long long v64 = v42;
                _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrier bundle changed for '%s'", __p, 0x20u);
              }
              goto LABEL_72;
            }
            break;
          case 5:
            if (v22)
            {
              sub_100E102DC(v6, v21);
LABEL_72:
              sub_100E10BE0(v6, (unsigned int *)v21);
            }
            break;
          case 6:
          case 7:
            if (v22)
            {
              *(void *)std::string __p = 1;
              *(void *)&__p[8] = v6 + 496;
              uint64_t v28 = *(uint64_t **)(v6 + 536);
              if (v28)
              {
                int v29 = *(_DWORD *)(*(void *)v21 + 52);
                uint64_t v30 = v6 + 536;
                uint64_t v31 = *(void *)(v6 + 536);
                do
                {
                  int v32 = *(_DWORD *)(v31 + 28);
                  BOOL v33 = v32 < v29;
                  if (v32 >= v29) {
                    uint64_t v34 = (uint64_t *)v31;
                  }
                  else {
                    uint64_t v34 = (uint64_t *)(v31 + 8);
                  }
                  if (!v33) {
                    uint64_t v30 = v31;
                  }
                  uint64_t v31 = *v34;
                }
                while (*v34);
                if (v30 != v6 + 536 && *(_DWORD *)(v30 + 28) <= v29)
                {
                  CFBooleanRef v35 = *(void **)(v30 + 8);
                  if (v35)
                  {
                    do
                    {
                      CFBooleanRef v36 = v35;
                      CFBooleanRef v35 = (void *)*v35;
                    }
                    while (v35);
                  }
                  else
                  {
                    uint64_t v52 = (void *)v30;
                    do
                    {
                      CFBooleanRef v36 = (void *)v52[2];
                      BOOL v53 = *v36 == (void)v52;
                      uint64_t v52 = v36;
                    }
                    while (!v53);
                  }
                  if (*(void *)(v6 + 528) == v30) {
                    *(void *)(v6 + 528) = v36;
                  }
                  --*(void *)(v6 + 544);
                  sub_10005EE6C(v28, (uint64_t *)v30);
                  operator delete((void *)v30);
                }
              }
              sub_100E1A48C((uint64_t)__p);
              uint64_t v54 = *v19;
              if (*v19)
              {
                uint64_t v55 = v6 + 80;
                do
                {
                  char v56 = sub_100046FE8((void *)v54 + 4, (void **)a3);
                  if (v56 >= 0) {
                    CFNumberRef v57 = (char **)v54;
                  }
                  else {
                    CFNumberRef v57 = (char **)(v54 + 8);
                  }
                  if (v56 >= 0) {
                    uint64_t v55 = (uint64_t)v54;
                  }
                  uint64_t v54 = *v57;
                }
                while (*v57);
                if ((char **)v55 != v19 && (sub_100046FE8((void *)a3, (void **)(v55 + 32)) & 0x80) == 0)
                {
                  int v58 = *(void **)(v55 + 8);
                  if (v58)
                  {
                    do
                    {
                      uint64_t v59 = v58;
                      int v58 = (void *)*v58;
                    }
                    while (v58);
                  }
                  else
                  {
                    CFTypeID v60 = (void *)v55;
                    do
                    {
                      uint64_t v59 = (void *)v60[2];
                      BOOL v53 = *v59 == (void)v60;
                      CFTypeID v60 = v59;
                    }
                    while (!v53);
                  }
                  if (*v17 == v55) {
                    void *v17 = v59;
                  }
                  CFBooleanRef v61 = *(uint64_t **)(v6 + 80);
                  --*(void *)(v6 + 88);
                  sub_10005EE6C(v61, (uint64_t *)v55);
                  sub_1001FEC1C(v55 + 32);
                  operator delete((void *)v55);
                }
              }
            }
            break;
          default:
            break;
        }
LABEL_126:
        sub_100E13218(v6);
        if (v20) {
          sub_10004D2C8(v20);
        }
        goto LABEL_128;
      }
    }
    int v16 = 1;
    goto LABEL_23;
  }
LABEL_130:

  sub_10004D2C8(v8);
}

void sub_100E15ED4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, ...)
{
  va_start(va1, a3);
  va_start(va, a3);
  uint64_t v8 = va_arg(va1, void);
  uint64_t v10 = va_arg(va1, void);
  uint64_t v11 = va_arg(va1, void);
  uint64_t v12 = va_arg(va1, void);
  uint64_t v13 = va_arg(va1, void);
  uint64_t v14 = va_arg(va1, void);
  sub_1001FEBC4((uint64_t)va1);
  sub_1002B1A40((uint64_t)va);
  sub_10004D2C8(v6);
  if (v5) {
    sub_10004D2C8(v5);
  }
  if (v4) {
    sub_10004D2C8(v4);
  }
  sub_10004D2C8(v3);
  _Unwind_Resume(a1);
}

uint64_t sub_100E15F64(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E15FA4()
{
}

void *sub_100E15FB0(void *a1)
{
  *a1 = off_101A5E538;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E15FFC(void *a1)
{
  *a1 = off_101A5E538;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E16068(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E538;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E160CC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E538;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E1610C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E1611C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E1615C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (uint64_t *)a1[1];
  long long v12 = *(_OWORD *)v3;
  uint64_t v13 = v3[2];
  *uint64_t v3 = 0;
  v3[1] = 0;
  void v3[2] = 0;
  sub_100089CF0(v3, a2);
  uint64_t v4 = (std::__shared_weak_count *)a1[4];
  if (v4)
  {
    uint64_t v5 = a1[2];
    uint64_t v6 = std::__shared_weak_count::lock(v4);
    if (v6)
    {
      BOOL v7 = v6;
      if (a1[3])
      {
        uint64_t v8 = *(int **)(v5 + 280);
        uint64_t v9 = *(int **)(v5 + 288);
        while (v8 != v9)
        {
          if (v8[2] == 5)
          {
            int v10 = *v8;
            uint64_t v11 = (_DWORD *)v12;
            if ((void)v12 != *((void *)&v12 + 1))
            {
              while (*v11 != v10)
              {
                v11 += 42;
                if (v11 == *((_DWORD **)&v12 + 1)) {
                  goto LABEL_13;
                }
              }
            }
            if (v11 == *((_DWORD **)&v12 + 1) || BasicSimInfo::operator!=())
            {
LABEL_13:
              uint64_t v14 = 0;
              uint64_t v15 = 0;
              sub_100E0FFD8(&v14, v5, v10);
              if (v14 && *((unsigned char *)*v14 + 48)) {
                sub_100E12EF0(v5, (uint64_t)v14);
              }
              if (v15) {
                sub_10004D2C8(v15);
              }
            }
          }
          v8 += 42;
        }
      }
      sub_10004D2C8(v7);
    }
  }
  uint64_t v14 = (void **)&v12;
  sub_10008A88C(&v14);
}

void sub_100E1628C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void **a13, std::__shared_weak_count *a14)
{
  if (a14) {
    sub_10004D2C8(a14);
  }
  sub_10004D2C8(v14);
  a13 = (void **)&a9;
  sub_10008A88C(&a13);
  _Unwind_Resume(a1);
}

uint64_t sub_100E162CC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1630C()
{
}

void *sub_100E16318(void *a1)
{
  *a1 = off_101A5E5B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E16364(void *a1)
{
  *a1 = off_101A5E5B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E163D0(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E5B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E16434(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E5B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E16474(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E16484(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E164C4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v28 = (void **)*v3;
  int v29 = v5;
  if (v3[2])
  {
    void v5[2] = &v29;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v28 = &v29;
  }
  sub_100026EC0((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      CFTypeID v27 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void **)(v7 + 472);
        if (v9 != (void *)(v7 + 480))
        {
          do
          {
            uint64_t v31 = 0;
            int v32 = 0;
            sub_100E0FFD8(&v31, v7, *((_DWORD *)v9 + 7));
            uint64_t v10 = v31;
            if (v31)
            {
              uint64_t v11 = v29;
              if (!v29) {
                goto LABEL_19;
              }
              int v12 = *((_DWORD *)v9 + 7);
              uint64_t v13 = &v29;
              do
              {
                uint64_t v14 = v11;
                uint64_t v15 = v13;
                int v16 = *((_DWORD *)v11 + 7);
                uint64_t v17 = v11 + 1;
                if (v16 >= v12)
                {
                  uint64_t v17 = v14;
                  uint64_t v13 = (void **)v14;
                }
                uint64_t v11 = (void *)*v17;
              }
              while (v11);
              if (v13 == &v29
                || (v16 >= v12 ? (CFBooleanRef v18 = v14) : (CFBooleanRef v18 = v15),
                    v12 < *((_DWORD *)v18 + 7)
                 || (v16 >= v12 ? (CFBooleanRef v26 = v14) : (CFBooleanRef v26 = v15), *((_DWORD *)v9 + 8) != *((_DWORD *)v26 + 8))))
              {
LABEL_19:
                uint64_t v19 = *(NSObject **)(v7 + 40);
                if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v20 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v10);
                  uint64_t v21 = asString();
                  uint64_t v22 = asString();
                  *(_DWORD *)long long buf = 136315906;
                  uint64_t v34 = v20;
                  __int16 v35 = 2080;
                  CFBooleanRef v36 = " ";
                  __int16 v37 = 2080;
                  uint64_t v38 = v21;
                  __int16 v39 = 2080;
                  uint64_t v40 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%sRAT is changing from %s to %s", buf, 0x2Au);
                }
                *(_DWORD *)(v10 + 16) = asWirelessTechnology();
                sub_100E10BE0(v7, (unsigned int *)v10);
              }
            }
            if (v32) {
              sub_10004D2C8(v32);
            }
            char v23 = (void *)v9[1];
            if (v23)
            {
              do
              {
                uint64_t v24 = v23;
                char v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v24 = (void *)v9[2];
                BOOL v25 = *v24 == (void)v9;
                uint64_t v9 = v24;
              }
              while (!v25);
            }
            uint64_t v9 = v24;
          }
          while (v24 != (void *)(v7 + 480));
        }
      }
      sub_10004D2C8(v27);
    }
  }
  sub_1000346F8((uint64_t)&v28, v29);
}

void sub_100E16740(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15)
{
}

uint64_t sub_100E16774(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E167B4()
{
}

void *sub_100E167C0(void *a1)
{
  *a1 = off_101A5E638;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E1680C(void *a1)
{
  *a1 = off_101A5E638;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E16878(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E638;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E168DC(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E638;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E1691C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E1692C(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E1696C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  CFTypeID v27 = (void **)*v3;
  uint64_t v28 = v5;
  if (v3[2])
  {
    void v5[2] = &v28;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    CFTypeID v27 = &v28;
  }
  sub_10025697C((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      CFBooleanRef v26 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void **)(v7 + 400);
        if (v9 != (void *)(v7 + 408))
        {
          while (1)
          {
            uint64_t v30 = 0;
            uint64_t v31 = 0;
            sub_100E0FFD8(&v30, v7, *((_DWORD *)v9 + 7));
            uint64_t v10 = v30;
            if (v30)
            {
              uint64_t v11 = v28;
              if (!v28) {
                goto LABEL_19;
              }
              int v12 = *((_DWORD *)v9 + 7);
              uint64_t v13 = &v28;
              do
              {
                uint64_t v14 = v11;
                uint64_t v15 = v13;
                int v16 = *((_DWORD *)v11 + 7);
                uint64_t v17 = v11 + 1;
                if (v16 >= v12)
                {
                  uint64_t v17 = v14;
                  uint64_t v13 = (void **)v14;
                }
                uint64_t v11 = (void *)*v17;
              }
              while (v11);
              if (v13 == &v28) {
                goto LABEL_19;
              }
              CFBooleanRef v18 = v16 >= v12 ? v14 : v15;
              if (v12 < *((_DWORD *)v18 + 7)) {
                goto LABEL_19;
              }
              if (rest::operator!=()) {
                break;
              }
            }
LABEL_22:
            if (v31) {
              sub_10004D2C8(v31);
            }
            char v23 = (void *)v9[1];
            if (v23)
            {
              do
              {
                uint64_t v24 = v23;
                char v23 = (void *)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v24 = (void *)v9[2];
                BOOL v25 = *v24 == (void)v9;
                uint64_t v9 = v24;
              }
              while (!v25);
            }
            uint64_t v9 = v24;
            if (v24 == (void *)(v7 + 408)) {
              goto LABEL_33;
            }
          }
          uint64_t v10 = v30;
LABEL_19:
          uint64_t v19 = *(NSObject **)(v7 + 40);
          if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v20 = PersonalityInfo::logPrefix(*v10);
            uint64_t v21 = asString();
            uint64_t v22 = asString();
            *(_DWORD *)long long buf = 136315906;
            uint64_t v33 = v20;
            __int16 v34 = 2080;
            __int16 v35 = " ";
            __int16 v36 = 2080;
            uint64_t v37 = v21;
            __int16 v38 = 2080;
            uint64_t v39 = v22;
            _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%sAdjusted data mode is changing from %s to %s", buf, 0x2Au);
          }
          sub_100E10BE0(v7, (unsigned int *)v10);
          goto LABEL_22;
        }
      }
LABEL_33:
      sub_10004D2C8(v26);
    }
  }
  sub_1000346F8((uint64_t)&v27, v28);
}

void sub_100E16BEC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, void *a15, uint64_t a16, uint64_t a17, std::__shared_weak_count *a18)
{
  if (a18) {
    sub_10004D2C8(a18);
  }
  sub_10004D2C8(a10);
  sub_1000346F8((uint64_t)&a14, a15);
  _Unwind_Resume(a1);
}

uint64_t sub_100E16C24(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E16C64()
{
}

void *sub_100E16C70(void *a1)
{
  *a1 = off_101A5E6B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E16CBC(void *a1)
{
  *a1 = off_101A5E6B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E16D28(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E6B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E16D8C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E6B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E16DCC(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E16DDC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E16E1C(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  char v23 = (char **)*v3;
  uint64_t v24 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v24;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    char v23 = &v24;
  }
  sub_100169118((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v22 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void ***)(v7 + 304);
        if (v9 != (void **)(v7 + 312))
        {
          do
          {
            uint64_t v10 = sub_100046F68(v7 + 72, v9 + 4);
            if ((void **)(v7 + 80) != v10)
            {
              int v12 = (PersonalityInfo **)v10[7];
              uint64_t v11 = (std::__shared_weak_count *)v10[8];
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v12)
              {
                uint64_t v13 = sub_100046F68((uint64_t)&v23, v9 + 4);
                int v14 = *((_DWORD *)v9 + 14);
                if (&v24 == (char **)v13
                  || v14 != *((_DWORD *)v13 + 14)
                  || *((_DWORD *)v9 + 15) != *((_DWORD *)v13 + 15)
                  || *((unsigned __int8 *)v9 + 64) != *((unsigned __int8 *)v13 + 64))
                {
                  int v15 = (v14 | *((_DWORD *)v9 + 15)) & 1;
                  if (*((unsigned __int8 *)v12 + 21) != v15)
                  {
                    int v16 = *(NSObject **)(v7 + 40);
                    if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                    {
                      uint64_t v17 = PersonalityInfo::logPrefix(*v12);
                      *(_DWORD *)long long buf = 136315650;
                      CFBooleanRef v18 = "disabled";
                      if (v15) {
                        CFBooleanRef v18 = "enabled";
                      }
                      uint64_t v27 = v17;
                      __int16 v28 = 2080;
                      int v29 = " ";
                      __int16 v30 = 2080;
                      uint64_t v31 = v18;
                      _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I %s%sVoice over IMS Feature is %s", buf, 0x20u);
                    }
                    *((unsigned char *)v12 + 21) = v15;
                    sub_100E10BE0(v7, (unsigned int *)v12);
                  }
                }
              }
              if (v11) {
                sub_10004D2C8(v11);
              }
            }
            uint64_t v19 = (void **)v9[1];
            if (v19)
            {
              do
              {
                uint64_t v20 = v19;
                uint64_t v19 = (void **)*v19;
              }
              while (v19);
            }
            else
            {
              do
              {
                uint64_t v20 = (void **)v9[2];
                BOOL v21 = *v20 == v9;
                uint64_t v9 = v20;
              }
              while (!v21);
            }
            uint64_t v9 = v20;
          }
          while (v20 != (void **)(v7 + 312));
        }
      }
      sub_10004D2C8(v22);
    }
  }
  sub_10005CD2C((uint64_t)&v23, v24);
}

void sub_100E17088(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, char *a13)
{
}

uint64_t sub_100E170C0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E17100()
{
}

void *sub_100E1710C(void *a1)
{
  *a1 = off_101A5E738;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E17158(void *a1)
{
  *a1 = off_101A5E738;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E171C4(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E738;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E17228(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E738;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E17268(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E17278(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E172B8(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  __int16 v30 = (char **)*v3;
  uint64_t v31 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v31;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    __int16 v30 = &v31;
  }
  sub_1002430C8((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v29 = a1[2];
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      __int16 v28 = v7;
      if (a1[3])
      {
        uint64_t v8 = *(void ***)(v29 + 328);
        if (v8 != (void **)(v29 + 336))
        {
          while (1)
          {
            uint64_t v9 = sub_100046F68(v29 + 72, v8 + 4);
            if ((void **)(v29 + 80) != v9) {
              break;
            }
LABEL_37:
            char v23 = (void **)v8[1];
            if (v23)
            {
              do
              {
                uint64_t v24 = v23;
                char v23 = (void **)*v23;
              }
              while (v23);
            }
            else
            {
              do
              {
                uint64_t v24 = (void **)v8[2];
                BOOL v25 = *v24 == v8;
                uint64_t v8 = v24;
              }
              while (!v25);
            }
            uint64_t v8 = v24;
            if (v24 == (void **)(v29 + 336)) {
              goto LABEL_46;
            }
          }
          uint64_t v11 = (unsigned int *)v9[7];
          uint64_t v10 = (std::__shared_weak_count *)v9[8];
          if (v10) {
            atomic_fetch_add_explicit(&v10->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v11) {
            goto LABEL_35;
          }
          int v12 = sub_100046F68((uint64_t)&v30, v8 + 4);
          uint64_t v13 = v12;
          if (&v31 == (char **)v12)
          {
            if (*((_DWORD *)v8 + 14) != 1 || (*((_DWORD *)v8 + 15) & 1) == 0) {
              goto LABEL_35;
            }
          }
          else
          {
            if (sub_10047161C((uint64_t)(v8 + 7), (uint64_t)(v12 + 7))) {
              goto LABEL_35;
            }
            int v14 = *((_DWORD *)v13 + 14);
            if (*((_DWORD *)v8 + 14) != 1)
            {
              if (v14 == 1 && (*((_DWORD *)v13 + 15) & 1) != 0)
              {
                int v15 = 0;
                goto LABEL_24;
              }
LABEL_35:
              if (v10) {
                sub_10004D2C8(v10);
              }
              goto LABEL_37;
            }
            if (v14 == 1)
            {
              int v15 = *((_DWORD *)v8 + 15) & 1;
              if ((*((_DWORD *)v13 + 15) & 1) == v15) {
                goto LABEL_35;
              }
LABEL_24:
              if (*((unsigned __int8 *)v11 + 22) != v15)
              {
                int v16 = *(NSObject **)(v29 + 40);
                if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
                {
                  uint64_t v27 = v16;
                  uint64_t v26 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v11);
                  uint64_t v17 = *(void *)v11 + 24;
                  uint64_t v18 = *(unsigned __int8 *)(*(void *)v11 + 47);
                  int v19 = (char)v18;
                  if ((v18 & 0x80u) != 0) {
                    uint64_t v18 = *(void *)(*(void *)v11 + 32);
                  }
                  if (v19 < 0) {
                    uint64_t v17 = *(void *)(*(void *)v11 + 24);
                  }
                  if (v18) {
                    uint64_t v20 = (const char *)v17;
                  }
                  else {
                    uint64_t v20 = "<invalid>";
                  }
                  uint64_t v21 = asStringBool(*((unsigned char *)v11 + 22));
                  uint64_t v22 = asStringBool(v15);
                  *(_DWORD *)long long buf = 136316162;
                  uint64_t v34 = v26;
                  __int16 v35 = 2080;
                  __int16 v36 = " ";
                  __int16 v37 = 2080;
                  __int16 v38 = v20;
                  __int16 v39 = 2080;
                  uint64_t v40 = v21;
                  __int16 v41 = 2080;
                  uint64_t v42 = v22;
                  _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#I %s%sVoLTE active for Personality %s is changing from %s to %s", buf, 0x34u);
                }
                *((unsigned char *)v11 + 22) = v15;
                sub_100E10BE0(v29, v11);
              }
              goto LABEL_35;
            }
            if ((*((_DWORD *)v8 + 15) & 1) == 0) {
              goto LABEL_35;
            }
          }
          int v15 = 1;
          goto LABEL_24;
        }
      }
LABEL_46:
      sub_10004D2C8(v28);
    }
  }
  sub_10005CD2C((uint64_t)&v30, v31);
}

void sub_100E175BC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, std::__shared_weak_count *a14, uint64_t a15, char a16, char *a17)
{
  if (v17) {
    sub_10004D2C8(v17);
  }
  sub_10004D2C8(a14);
  sub_10005CD2C((uint64_t)&a16, a17);
  _Unwind_Resume(a1);
}

uint64_t sub_100E175F4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E17634()
{
}

void *sub_100E17640(void *a1)
{
  *a1 = off_101A5E7B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E1768C(void *a1)
{
  *a1 = off_101A5E7B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E176F8(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E7B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E1775C(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E7B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E1779C(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E177AC(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E177EC(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v34 = (void **)*v3;
  __int16 v35 = v5;
  if (v3[2])
  {
    void v5[2] = &v35;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v34 = &v35;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v33 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void **)(v7 + 352);
        if (v9 != (void *)(v7 + 360))
        {
          do
          {
            __int16 v39 = 0;
            uint64_t v40 = 0;
            sub_100E0FFD8(&v39, v7, *((_DWORD *)v9 + 8));
            uint64_t v10 = v39;
            if (v39)
            {
              uint64_t v11 = v35;
              if (!v35) {
                goto LABEL_19;
              }
              int v12 = *((_DWORD *)v9 + 8);
              uint64_t v13 = &v35;
              do
              {
                int v14 = v11;
                int v15 = v13;
                int v16 = *((_DWORD *)v11 + 8);
                uint64_t v17 = v11 + 1;
                if (v16 >= v12)
                {
                  uint64_t v17 = v14;
                  uint64_t v13 = (void **)v14;
                }
                uint64_t v11 = (void *)*v17;
              }
              while (v11);
              if (v13 == &v35 || (v16 >= v12 ? (uint64_t v18 = v14) : (uint64_t v18 = v15), v12 < *((_DWORD *)v18 + 8)))
              {
LABEL_19:
                uint64_t v37 = 255;
                memset(v38, 0, sizeof(v38));
LABEL_20:
                if (BYTE1(v37) != *((unsigned __int8 *)v9 + 41))
                {
                  int v19 = *(NSObject **)(v7 + 40);
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v20 = PersonalityInfo::logPrefix(*v10);
                    uint64_t v21 = asString();
                    uint64_t v22 = asString();
                    *(_DWORD *)long long buf = 136315906;
                    uint64_t v42 = v20;
                    __int16 v43 = 2080;
                    int v44 = " ";
                    __int16 v45 = 2080;
                    uint64_t v46 = v21;
                    __int16 v47 = 2080;
                    uint64_t v48 = v22;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I %s%sCarrier bundle technology type changed from %s to %s", buf, 0x2Au);
                  }
                  sub_100E10BE0(v7, (unsigned int *)v10);
                }
                if (SHIBYTE(v38[2]) < 0) {
                  operator delete(*((void **)&v38[1] + 1));
                }
                if (SBYTE7(v38[1]) < 0) {
                  operator delete(*(void **)&v38[0]);
                }
                goto LABEL_39;
              }
              if (v16 >= v12) {
                char v23 = v14;
              }
              else {
                char v23 = v15;
              }
              if (rest::operator!=())
              {
                uint64_t v10 = v39;
                LOWORD(v37) = *((_WORD *)v23 + 20);
                uint64_t v24 = v15 + 6;
                if (v16 >= v12) {
                  BOOL v25 = v14;
                }
                else {
                  BOOL v25 = v15;
                }
                if (v16 >= v12) {
                  uint64_t v24 = v14 + 6;
                }
                if (*((char *)v13 + 71) < 0)
                {
                  if (v16 >= v12) {
                    uint64_t v29 = v14;
                  }
                  else {
                    uint64_t v29 = v15;
                  }
                  sub_10004FC84(v38, (void *)v25[6], v29[7]);
                }
                else
                {
                  v38[0] = *(_OWORD *)v24;
                  *(void *)&v38[1] = v24[2];
                }
                __int16 v30 = v15 + 9;
                if (v16 >= v12) {
                  uint64_t v31 = v14;
                }
                else {
                  uint64_t v31 = v15;
                }
                if (v16 >= v12) {
                  __int16 v30 = v14 + 9;
                }
                if (*((char *)v13 + 95) < 0)
                {
                  if (v16 >= v12) {
                    int v32 = v14;
                  }
                  else {
                    int v32 = v15;
                  }
                  sub_10004FC84((unsigned char *)&v38[1] + 8, (void *)v31[9], v32[10]);
                }
                else
                {
                  *(_OWORD *)((char *)&v38[1] + 8) = *(_OWORD *)v30;
                  *((void *)&v38[2] + 1) = v30[2];
                }
                goto LABEL_20;
              }
            }
LABEL_39:
            if (v40) {
              sub_10004D2C8(v40);
            }
            uint64_t v26 = (void *)v9[1];
            if (v26)
            {
              do
              {
                uint64_t v27 = v26;
                uint64_t v26 = (void *)*v26;
              }
              while (v26);
            }
            else
            {
              do
              {
                uint64_t v27 = (void *)v9[2];
                BOOL v28 = *v27 == (void)v9;
                uint64_t v9 = v27;
              }
              while (!v28);
            }
            uint64_t v9 = v27;
          }
          while (v27 != (void *)(v7 + 360));
        }
      }
      sub_10004D2C8(v33);
    }
  }
  sub_100087F94((uint64_t)&v34, v35);
}

void sub_100E17B64(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, char a15, void *a16, uint64_t a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,void *a25,uint64_t a26,int a27,__int16 a28,char a29,char a30,uint64_t a31,std::__shared_weak_count *a32)
{
  if (a24 < 0) {
    operator delete(__p);
  }
  if (a32) {
    sub_10004D2C8(a32);
  }
  sub_10004D2C8(a10);
  sub_100087F94((uint64_t)&a15, a16);
  _Unwind_Resume(a1);
}

uint64_t sub_100E17BCC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E17C0C()
{
}

void *sub_100E17C18(void *a1)
{
  *a1 = off_101A5E838;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E17C64(void *a1)
{
  *a1 = off_101A5E838;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E17CD0(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E838;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E17D34(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E838;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E17D74(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E17D84(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E17DC4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = (void *)v3[1];
  uint64_t v33 = (void **)*v3;
  uint64_t v34 = v5;
  if (v3[2])
  {
    void v5[2] = &v34;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v33 = &v34;
  }
  sub_10008AAD8((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      int v32 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void **)(v7 + 376);
        if (v9 != (void *)(v7 + 384))
        {
          do
          {
            __int16 v38 = 0;
            __int16 v39 = 0;
            sub_100E0FFD8(&v38, v7, *((_DWORD *)v9 + 8));
            uint64_t v10 = v38;
            if (v38)
            {
              uint64_t v11 = v34;
              if (!v34) {
                goto LABEL_19;
              }
              int v12 = *((_DWORD *)v9 + 8);
              uint64_t v13 = &v34;
              do
              {
                int v14 = v11;
                int v15 = v13;
                int v16 = *((_DWORD *)v11 + 8);
                uint64_t v17 = v11 + 1;
                if (v16 >= v12)
                {
                  uint64_t v17 = v14;
                  uint64_t v13 = (void **)v14;
                }
                uint64_t v11 = (void *)*v17;
              }
              while (v11);
              if (v13 == &v34 || (v16 >= v12 ? (uint64_t v18 = v14) : (uint64_t v18 = v15), v12 < *((_DWORD *)v18 + 8)))
              {
LABEL_19:
                uint64_t v36 = 255;
                memset(v37, 0, sizeof(v37));
LABEL_20:
                int v19 = *(NSObject **)(v7 + 40);
                if (*((unsigned char *)v9 + 40))
                {
                  if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v20 = asString();
                    *(_DWORD *)long long buf = 136315138;
                    uint64_t v41 = v20;
                    _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I Operator bundle type is changing with %s", buf, 0xCu);
                  }
                  sub_100E10BE0(v7, v10);
                }
                else if (os_log_type_enabled(v19, OS_LOG_TYPE_DEBUG))
                {
                  uint64_t v31 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v10);
                  *(_DWORD *)long long buf = 136315394;
                  uint64_t v41 = v31;
                  __int16 v42 = 2080;
                  __int16 v43 = " ";
                  _os_log_debug_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEBUG, "#D %s%sNo operator bundle change to handle", buf, 0x16u);
                }
                if (SHIBYTE(v37[2]) < 0) {
                  operator delete(*((void **)&v37[1] + 1));
                }
                if (SBYTE7(v37[1]) < 0) {
                  operator delete(*(void **)&v37[0]);
                }
                goto LABEL_41;
              }
              if (v16 >= v12) {
                uint64_t v21 = v14;
              }
              else {
                uint64_t v21 = v15;
              }
              if (rest::operator!=())
              {
                uint64_t v10 = v38;
                LOWORD(v36) = *((_WORD *)v21 + 20);
                uint64_t v22 = v15 + 6;
                if (v16 >= v12) {
                  char v23 = v14;
                }
                else {
                  char v23 = v15;
                }
                if (v16 >= v12) {
                  uint64_t v22 = v14 + 6;
                }
                if (*((char *)v13 + 71) < 0)
                {
                  if (v16 >= v12) {
                    uint64_t v27 = v14;
                  }
                  else {
                    uint64_t v27 = v15;
                  }
                  sub_10004FC84(v37, (void *)v23[6], v27[7]);
                }
                else
                {
                  v37[0] = *(_OWORD *)v22;
                  *(void *)&v37[1] = v22[2];
                }
                BOOL v28 = v15 + 9;
                if (v16 >= v12) {
                  uint64_t v29 = v14;
                }
                else {
                  uint64_t v29 = v15;
                }
                if (v16 >= v12) {
                  BOOL v28 = v14 + 9;
                }
                if (*((char *)v13 + 95) < 0)
                {
                  if (v16 >= v12) {
                    __int16 v30 = v14;
                  }
                  else {
                    __int16 v30 = v15;
                  }
                  sub_10004FC84((unsigned char *)&v37[1] + 8, (void *)v29[9], v30[10]);
                }
                else
                {
                  *(_OWORD *)((char *)&v37[1] + 8) = *(_OWORD *)v28;
                  *((void *)&v37[2] + 1) = v28[2];
                }
                goto LABEL_20;
              }
            }
LABEL_41:
            if (v39) {
              sub_10004D2C8(v39);
            }
            uint64_t v24 = (void *)v9[1];
            if (v24)
            {
              do
              {
                BOOL v25 = v24;
                uint64_t v24 = (void *)*v24;
              }
              while (v24);
            }
            else
            {
              do
              {
                BOOL v25 = (void *)v9[2];
                BOOL v26 = *v25 == (void)v9;
                uint64_t v9 = v25;
              }
              while (!v26);
            }
            uint64_t v9 = v25;
          }
          while (v25 != (void *)(v7 + 384));
        }
      }
      sub_10004D2C8(v32);
    }
  }
  sub_100087F94((uint64_t)&v33, v34);
}

void sub_100E18174(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, std::__shared_weak_count *a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, char a19, void *a20,uint64_t a21,uint64_t a22,void *__p,uint64_t a24,int a25,__int16 a26,char a27,char a28,void *a29,uint64_t a30,int a31,__int16 a32,char a33,char a34)
{
  if (a28 < 0) {
    operator delete(__p);
  }
  uint64_t v36 = *(std::__shared_weak_count **)(v34 - 136);
  if (v36) {
    sub_10004D2C8(v36);
  }
  sub_10004D2C8(a12);
  sub_100087F94((uint64_t)&a19, a20);
  _Unwind_Resume(a1);
}

uint64_t sub_100E181DC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1821C()
{
}

void *sub_100E18228(void *a1)
{
  *a1 = off_101A5E8B8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E18274(void *a1)
{
  *a1 = off_101A5E8B8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E182E0(uint64_t a1)
{
  uint64_t result = (char *)operator new(0x28uLL);
  *(void *)uint64_t result = off_101A5E8B8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E18344(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5E8B8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E18384(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E18394(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E183D4(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  uint64_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v22 = (char **)*v3;
  char v23 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v23;
    *uint64_t v3 = v4;
    *uint64_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v22 = &v23;
  }
  sub_100A59380((uint64_t)v3, a2, "PersonalityID", "State");
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v7 = a1[2];
    uint64_t v8 = std::__shared_weak_count::lock(v6);
    if (v8)
    {
      uint64_t v21 = v8;
      if (a1[3])
      {
        uint64_t v9 = *(void ***)(v7 + 448);
        if (v9 != (void **)(v7 + 456))
        {
          do
          {
            uint64_t v10 = sub_100046F68(v7 + 72, v9 + 4);
            if ((void **)(v7 + 80) != v10)
            {
              int v12 = (PersonalityInfo **)v10[7];
              uint64_t v11 = (std::__shared_weak_count *)v10[8];
              if (v11) {
                atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
              }
              if (v12)
              {
                uint64_t v13 = sub_100046F68((uint64_t)&v22, v9 + 4);
                int v14 = *((unsigned __int8 *)v9 + 56);
                if (&v23 == (char **)v13 || v14 != *((unsigned __int8 *)v13 + 56))
                {
                  int v15 = *(NSObject **)(v7 + 40);
                  if (os_log_type_enabled(v15, OS_LOG_TYPE_DEFAULT))
                  {
                    uint64_t v16 = PersonalityInfo::logPrefix(*v12);
                    *(_DWORD *)long long buf = 136315650;
                    uint64_t v17 = "enabled";
                    if (!v14) {
                      uint64_t v17 = "disabled";
                    }
                    uint64_t v26 = v16;
                    __int16 v27 = 2080;
                    BOOL v28 = " ";
                    __int16 v29 = 2080;
                    __int16 v30 = v17;
                    _os_log_impl((void *)&_mh_execute_header, v15, OS_LOG_TYPE_DEFAULT, "#I %s%sVoLTE feature %s", buf, 0x20u);
                  }
                  *((unsigned char *)v12 + 20) = v14;
                  sub_100E10BE0(v7, (unsigned int *)v12);
                }
              }
              if (v11) {
                sub_10004D2C8(v11);
              }
            }
            uint64_t v18 = (void **)v9[1];
            if (v18)
            {
              do
              {
                int v19 = v18;
                uint64_t v18 = (void **)*v18;
              }
              while (v18);
            }
            else
            {
              do
              {
                int v19 = (void **)v9[2];
                BOOL v20 = *v19 == v9;
                uint64_t v9 = v19;
              }
              while (!v20);
            }
            uint64_t v9 = v19;
          }
          while (v19 != (void **)(v7 + 456));
        }
      }
      sub_10004D2C8(v21);
    }
  }
  sub_10005CD2C((uint64_t)&v22, v23);
}

void sub_100E18618(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, char a14, char *a15)
{
}

uint64_t sub_100E18650(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E18690()
{
}

void sub_100E186A0()
{
}

__n128 sub_100E186B4(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5E938;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E18708(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5E938;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E18740(void *a1, xpc_object_t *a2)
{
  uint64_t v4 = (int *)a1[1];
  xpc_type_t type = xpc_get_type(*a2);
  if (type == (xpc_type_t)&_xpc_type_string)
  {
    int v13 = *v4;
    ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v13, (int *)a2, v6);
    *uint64_t v4 = v13;
  }
  else if (type == (xpc_type_t)&_xpc_type_BOOL {
         || type == (xpc_type_t)&_xpc_type_int64
  }
         || type == (xpc_type_t)&_xpc_type_uint64)
  {
    *uint64_t v4 = xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v6);
  }
  uint64_t v9 = (uint64_t (*)(void *))a1[3];
  uint64_t v10 = a1[4];
  uint64_t v11 = (void *)(a1[2] + (v10 >> 1));
  if (v10) {
    uint64_t v9 = *(uint64_t (**)(void *))(*v11 + v9);
  }
  return v9(v11);
}

uint64_t sub_100E18830(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E18870()
{
}

void sub_100E18880()
{
}

void *sub_100E18894(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5E9B8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E188DC(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5E9B8;
  a2[1] = v2;
  return result;
}

xpc_type_t sub_100E18908(uint64_t a1, xpc_object_t *a2)
{
  uint64_t v3 = *(int **)(a1 + 8);
  xpc_type_t result = xpc_get_type(*a2);
  if (result == (xpc_type_t)&_xpc_type_string)
  {
    int v8 = *v3;
    xpc_type_t result = (xpc_type_t)ctu::rest::detail::read_enum_string_value((ctu::rest::detail *)&v8, (int *)a2, v5);
    *uint64_t v3 = v8;
  }
  else if (result == (xpc_type_t)&_xpc_type_BOOL {
         || result == (xpc_type_t)&_xpc_type_int64
  }
         || result == (xpc_type_t)&_xpc_type_uint64)
  {
    xpc_type_t result = (xpc_type_t)xpc::dyn_cast_or_default((xpc *)a2, 0, (uint64_t)v5);
    *uint64_t v3 = (int)result;
  }
  return result;
}

uint64_t sub_100E189A4(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E189E4()
{
}

void sub_100E189F4()
{
}

void *sub_100E18A08(uint64_t a1)
{
  xpc_type_t result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *xpc_type_t result = off_101A5EA38;
  result[1] = v3;
  return result;
}

uint64_t sub_100E18A50(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5EA38;
  a2[1] = v2;
  return result;
}

void sub_100E18A7C(uint64_t a1, void *a2)
{
  xpc_object_t v3 = xpc_array_create(0, 0);
  if (v3 || (xpc_object_t v3 = xpc_null_create()) != 0)
  {
    if (xpc_get_type(v3) == (xpc_type_t)&_xpc_type_array)
    {
      xpc_retain(v3);
      xpc_object_t v4 = v3;
    }
    else
    {
      xpc_object_t v4 = xpc_null_create();
    }
  }
  else
  {
    xpc_object_t v4 = xpc_null_create();
    xpc_object_t v3 = 0;
  }
  xpc_release(v3);
  uint64_t v7 = (void *)*a2;
  uint64_t v5 = a2 + 1;
  uint64_t v6 = v7;
  if (v7 != v5)
  {
    do
    {
      xpc_object_t v8 = xpc_dictionary_create(0, 0, 0);
      xpc_object_t v9 = v8;
      if (v8)
      {
        xpc_object_t v29 = v8;
      }
      else
      {
        xpc_object_t v9 = xpc_null_create();
        xpc_object_t v29 = v9;
        if (!v9)
        {
          xpc_object_t v10 = xpc_null_create();
          xpc_object_t v9 = 0;
          goto LABEL_15;
        }
      }
      if (xpc_get_type(v9) != (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_object_t v10 = xpc_null_create();
LABEL_15:
        xpc_object_t v29 = v10;
        goto LABEL_16;
      }
      xpc_retain(v9);
LABEL_16:
      xpc_release(v9);
      int v11 = *((_DWORD *)v6 + 7);
      uint64_t v12 = subscriber::asString();
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v27, (ctu::rest::detail *)v11, v12, v13);
      std::string __p = &v29;
      char v23 = "first";
      sub_100035E70((uint64_t)&__p, &v27, &object);
      xpc_release(object);
      xpc_object_t object = 0;
      xpc_release(v27);
      xpc_object_t v27 = 0;
      int v15 = (ctu::rest::detail *)*((int *)v6 + 8);
      uint64_t v16 = "Device Type unknown";
      if (v15 <= 3) {
        uint64_t v16 = off_101A5ED68[(void)v15];
      }
      ctu::rest::detail::write_enum_string_value((uint64_t *)&v25, v15, (uint64_t)v16, v14);
      std::string __p = &v29;
      char v23 = "second";
      sub_100035E70((uint64_t)&__p, &v25, &v26);
      xpc_release(v26);
      xpc_object_t v26 = 0;
      xpc_release(v25);
      xpc_object_t v25 = 0;
      xpc_object_t v17 = v29;
      if (v29) {
        xpc_retain(v29);
      }
      else {
        xpc_object_t v17 = xpc_null_create();
      }
      xpc_release(v29);
      xpc_array_append_value(v4, v17);
      xpc_release(v17);
      uint64_t v18 = (void *)v6[1];
      if (v18)
      {
        do
        {
          int v19 = v18;
          uint64_t v18 = (void *)*v18;
        }
        while (v18);
      }
      else
      {
        do
        {
          int v19 = (void *)v6[2];
          BOOL v20 = *v19 == (void)v6;
          uint64_t v6 = v19;
        }
        while (!v20);
      }
      uint64_t v6 = v19;
    }
    while (v19 != v5);
  }
  if (v4)
  {
    xpc_retain(v4);
    xpc_object_t v21 = v4;
  }
  else
  {
    xpc_object_t v21 = xpc_null_create();
  }
  xpc_release(v4);
  sub_100058DB0(&__p, "/cc/props/device_types");
  xpc_object_t v29 = v21;
  if (v21) {
    xpc_retain(v21);
  }
  else {
    xpc_object_t v29 = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(v29);
  xpc_object_t v29 = 0;
  if (v24 < 0) {
    operator delete(__p);
  }
  xpc_release(v21);
}

void sub_100E18D68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *__p, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,xpc_object_t object)
{
  xpc_release(object);
  if (a16 < 0) {
    operator delete(__p);
  }
  xpc_release(v21);
  _Unwind_Resume(a1);
}

uint64_t sub_100E18E20(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E18E60()
{
}

void *sub_100E18E6C(void *a1)
{
  *a1 = off_101A5EAC8;
  uint64_t v2 = (std::__shared_weak_count *)a1[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E18EB8(void *a1)
{
  *a1 = off_101A5EAC8;
  uint64_t v1 = (std::__shared_weak_count *)a1[4];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E18F24(uint64_t a1)
{
  xpc_type_t result = (char *)operator new(0x28uLL);
  *(void *)xpc_type_t result = off_101A5EAC8;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 32);
  *((void *)result + 3) = *(void *)(a1 + 24);
  *((void *)result + 4) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E18F88(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5EAC8;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 32);
  *(void *)(a2 + 24) = *(void *)(result + 24);
  *(void *)(a2 + 32) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E18FC8(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E18FD8(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[4];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E19018(void *a1, xpc_object_t *a2)
{
  uint64_t v3 = (void *)a1[1];
  xpc_object_t v4 = v3 + 1;
  uint64_t v5 = v3[1];
  uint64_t v40 = (char **)*v3;
  uint64_t v41 = (char *)v5;
  if (v3[2])
  {
    *(void *)(v5 + 16) = &v41;
    *uint64_t v3 = v4;
    *xpc_object_t v4 = 0;
    void v3[2] = 0;
  }
  else
  {
    uint64_t v40 = &v41;
  }
  sub_100942358((uint64_t)v3, a2);
  uint64_t v6 = (std::__shared_weak_count *)a1[4];
  if (v6)
  {
    uint64_t v39 = a1[2];
    uint64_t v7 = std::__shared_weak_count::lock(v6);
    if (v7)
    {
      xpc_object_t v8 = v7;
      if (a1[3])
      {
        xpc_object_t v9 = *(void ***)(v39 + 424);
        if (v9 != (void **)(v39 + 432))
        {
          __int16 v38 = v7;
          while (1)
          {
            xpc_object_t v10 = sub_100046F68(v39 + 72, v9 + 4);
            if ((void **)(v39 + 80) != v10) {
              break;
            }
LABEL_42:
            __int16 v35 = (void **)v9[1];
            if (v35)
            {
              do
              {
                uint64_t v36 = v35;
                __int16 v35 = (void **)*v35;
              }
              while (v35);
            }
            else
            {
              do
              {
                uint64_t v36 = (void **)v9[2];
                BOOL v37 = *v36 == v9;
                xpc_object_t v9 = v36;
              }
              while (!v37);
            }
            xpc_object_t v9 = v36;
            if (v36 == (void **)(v39 + 432)) {
              goto LABEL_48;
            }
          }
          uint64_t v12 = (PersonalityInfo **)v10[7];
          int v11 = (std::__shared_weak_count *)v10[8];
          if (v11) {
            atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          if (!v12) {
            goto LABEL_40;
          }
          int v13 = sub_100046F68((uint64_t)&v40, v9 + 4);
          if (&v41 != (char **)v13 && *((_DWORD *)v9 + 14) == *((_DWORD *)v13 + 14)) {
            goto LABEL_40;
          }
          int v14 = *(NSObject **)(v39 + 40);
          if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v15 = PersonalityInfo::logPrefix(*v12);
            uint64_t v16 = asString();
            uint64_t v17 = asString();
            *(_DWORD *)long long buf = 136315906;
            *(void *)&uint8_t buf[4] = v15;
            __int16 v44 = 2080;
            __int16 v45 = " ";
            __int16 v46 = 2080;
            uint64_t v47 = v16;
            __int16 v48 = 2080;
            uint64_t v49 = v17;
            _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#I %s%sIms Voice Support on LTE changed from %s to %s", buf, 0x2Au);
          }
          int v18 = *((_DWORD *)v9 + 14);
          if (!v18 || (BOOL v19 = sub_100E13948(*(Registry **)(v39 + 56), v12, (uint64_t *)v39), (v18 == 1) == v19))
          {
LABEL_40:
            if (v11) {
              sub_10004D2C8(v11);
            }
            goto LABEL_42;
          }
          BOOL v20 = *(NSObject **)(v39 + 40);
          if (os_log_type_enabled(v20, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v21 = PersonalityInfo::logPrefix(*v12);
            *(_DWORD *)long long buf = 136315906;
            uint64_t v22 = "false";
            if (v19) {
              char v23 = "true";
            }
            else {
              char v23 = "false";
            }
            *(void *)&uint8_t buf[4] = v21;
            if (v18 == 1) {
              uint64_t v22 = "true";
            }
            __int16 v44 = 2080;
            __int16 v45 = " ";
            __int16 v46 = 2080;
            uint64_t v47 = (uint64_t)v23;
            __int16 v48 = 2080;
            uint64_t v49 = (uint64_t)v22;
            _os_log_impl((void *)&_mh_execute_header, v20, OS_LOG_TYPE_DEFAULT, "#I %s%sNetwork VoPS support has changed from %s to %s", buf, 0x2Au);
          }
          ServiceMap = (std::mutex *)Registry::getServiceMap((uint64_t *)v39, *(Registry **)(v39 + 56));
          xpc_object_t v25 = ServiceMap;
          if (v26 < 0)
          {
            xpc_object_t v27 = (unsigned __int8 *)(v26 & 0x7FFFFFFFFFFFFFFFLL);
            uint64_t v28 = 5381;
            do
            {
              uint64_t v26 = v28;
              unsigned int v29 = *v27++;
              uint64_t v28 = (33 * v28) ^ v29;
            }
            while (v29);
          }
          std::mutex::lock(ServiceMap);
          *(void *)long long buf = v26;
          __int16 v30 = sub_10004D37C(&v25[1].__m_.__sig, (unint64_t *)buf);
          if (v30)
          {
            uint64_t v32 = v30[3];
            uint64_t v31 = (std::__shared_weak_count *)v30[4];
            if (v31)
            {
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              std::mutex::unlock(v25);
              atomic_fetch_add_explicit(&v31->__shared_owners_, 1uLL, memory_order_relaxed);
              xpc_object_t v8 = v38;
              sub_10004D2C8(v31);
              char v33 = 0;
LABEL_34:
              if (v18 == 1) {
                CFBooleanRef v34 = kCFBooleanTrue;
              }
              else {
                CFBooleanRef v34 = kCFBooleanFalse;
              }
              (*(void (**)(uint64_t, uint64_t, const __CFString *, CFBooleanRef, const __CFString *, void, uint64_t, void))(*(void *)v32 + 16))(v32, (uint64_t)*v12 + 24, @"NetworkSupportsVoPS", v34, @"Capabilities", 0, 1, 0);
              if ((v33 & 1) == 0) {
                sub_10004D2C8(v31);
              }
              sub_100E10BE0(v39, (unsigned int *)v12);
              goto LABEL_40;
            }
          }
          else
          {
            uint64_t v32 = 0;
          }
          std::mutex::unlock(v25);
          uint64_t v31 = 0;
          char v33 = 1;
          goto LABEL_34;
        }
      }
LABEL_48:
      sub_10004D2C8(v8);
    }
  }
  sub_10005CD2C((uint64_t)&v40, v41);
}

void sub_100E19460(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, std::__shared_weak_count *a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, char a18, char *a19)
{
  if ((v19 & 1) == 0) {
    sub_10004D2C8(v20);
  }
  if (v21) {
    sub_10004D2C8(v21);
  }
  sub_10004D2C8(a10);
  sub_10005CD2C((uint64_t)&a18, a19);
  _Unwind_Resume(a1);
}

uint64_t sub_100E194BC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E194FC()
{
}

void *sub_100E19508(void *a1)
{
  *a1 = off_101A5EB48;
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E19554(void *a1)
{
  *a1 = off_101A5EB48;
  uint64_t v1 = (std::__shared_weak_count *)a1[3];
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }

  operator delete();
}

char *sub_100E195C0(uint64_t a1)
{
  xpc_type_t result = (char *)operator new(0x20uLL);
  *(void *)xpc_type_t result = off_101A5EB48;
  *(_OWORD *)(result + 8) = *(_OWORD *)(a1 + 8);
  uint64_t v3 = *(void *)(a1 + 24);
  *((void *)result + 3) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

uint64_t sub_100E19624(uint64_t result, uint64_t a2)
{
  *(void *)a2 = off_101A5EB48;
  *(_OWORD *)(a2 + 8) = *(_OWORD *)(result + 8);
  uint64_t v2 = *(void *)(result + 24);
  *(void *)(a2 + 24) = v2;
  if (v2) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v2 + 16), 1uLL, memory_order_relaxed);
  }
  return result;
}

void sub_100E19664(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 24);
  if (v1) {
    std::__shared_weak_count::__release_weak(v1);
  }
}

void sub_100E19674(void *__p)
{
  uint64_t v2 = (std::__shared_weak_count *)__p[3];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete(__p);
}

void sub_100E196B4(void *a1)
{
  uint64_t v2 = (std::__shared_weak_count *)a1[3];
  if (v2)
  {
    uint64_t v3 = a1[1];
    xpc_object_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      CFBooleanRef v62 = v4;
      if (a1[2])
      {
        uint64_t v5 = *(void **)(v3 + 72);
        if (v5 != (void *)(v3 + 80))
        {
          uint64_t v6 = (uint64_t *)(v3 + 360);
          uint64_t v63 = (uint64_t *)(v3 + 536);
          long long v64 = (uint64_t *)(v3 + 408);
          do
          {
            uint64_t v7 = v5[7];
            xpc_object_t v8 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v9 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              xpc_object_t v10 = (const char *)(*(void *)v7 + 24);
              uint64_t v11 = *(unsigned __int8 *)(*(void *)v7 + 47);
              int v12 = (char)v11;
              if ((v11 & 0x80u) != 0) {
                uint64_t v11 = *(void *)(*(void *)v7 + 32);
              }
              if (v12 < 0) {
                xpc_object_t v10 = *(const char **)(*(void *)v7 + 24);
              }
              if (!v11) {
                xpc_object_t v10 = "<invalid>";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v9;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v10;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%s----- Capabilities dump for personality '%s'", buf, 0x20u);
              xpc_object_t v8 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v13 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              WirelessTechnologyList::asString((uint64_t *)__p, (WirelessTechnologyList *)(v7 + 16));
              int v14 = __p;
              if (v66 < 0) {
                int v14 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v13;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v14;
              _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I %s%sTech: %s", buf, 0x20u);
              if (v66 < 0) {
                operator delete(__p[0]);
              }
            }
            uint64_t v15 = *v64;
            if (*v64)
            {
              do
              {
                if (*(_DWORD *)(v15 + 28) >= *(_DWORD *)(*(void *)v7 + 52)) {
                  uint64_t v16 = (uint64_t *)v15;
                }
                else {
                  uint64_t v16 = (uint64_t *)(v15 + 8);
                }
                uint64_t v15 = *v16;
              }
              while (*v16);
            }
            uint64_t v17 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v18 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v19 = asString();
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v18;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = v19;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sAdjusted data mode: %s", buf, 0x20u);
              uint64_t v17 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v17, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v20 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v21 = "true";
              if (!*(unsigned char *)(v7 + 22)) {
                uint64_t v21 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v20;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v21;
              _os_log_impl((void *)&_mh_execute_header, v17, OS_LOG_TYPE_DEFAULT, "#I %s%sVoLte registered: %s", buf, 0x20u);
            }
            uint64_t v22 = *v6;
            if (*v6)
            {
              do
              {
                if (*(_DWORD *)(v22 + 32) >= *(_DWORD *)(*(void *)v7 + 52)) {
                  char v23 = (uint64_t *)v22;
                }
                else {
                  char v23 = (uint64_t *)(v22 + 8);
                }
                uint64_t v22 = *v23;
              }
              while (*v23);
            }
            char v24 = *(NSObject **)(v3 + 40);
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v25 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v26 = asString();
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v25;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = v26;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sBundle Technology Type: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v27 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v28 = subscriber::asString();
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v27;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = v28;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%s1x sim type: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v29 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v30 = subscriber::asString();
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v29;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = v30;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sGw sim type: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v31 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              WirelessTechnologyList::asString((uint64_t *)__p, (WirelessTechnologyList *)(v7 + 36));
              uint64_t v32 = __p;
              if (v66 < 0) {
                uint64_t v32 = (void **)__p[0];
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v31;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v32;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sCall handling tech: %s", buf, 0x20u);
              if (v66 < 0) {
                operator delete(__p[0]);
              }
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v33 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              CFBooleanRef v34 = "true";
              if (!*(unsigned char *)(v7 + 40)) {
                CFBooleanRef v34 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v33;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v34;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sSim call and data support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v35 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v36 = "true";
              if (!*(unsigned char *)(v7 + 41)) {
                uint64_t v36 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v35;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v36;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sSim call and data current support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v37 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              __int16 v38 = "true";
              if (!*(unsigned char *)(v7 + 43)) {
                __int16 v38 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v37;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v38;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sCall forwarding support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v39 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v40 = "true";
              if (!*(unsigned char *)(v7 + 44)) {
                uint64_t v40 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v39;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v40;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sCall waiting support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v41 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              __int16 v42 = "true";
              if (!*(unsigned char *)(v7 + 45)) {
                __int16 v42 = "false";
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v41;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v42;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sCaller id support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v43 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v44 = *v63;
              if (!*v63) {
                goto LABEL_80;
              }
              int v45 = *(_DWORD *)(*(void *)v7 + 52);
              uint64_t v46 = v3 + 536;
              do
              {
                int v47 = *(_DWORD *)(v44 + 28);
                BOOL v48 = v47 < v45;
                if (v47 >= v45) {
                  uint64_t v49 = (uint64_t *)v44;
                }
                else {
                  uint64_t v49 = (uint64_t *)(v44 + 8);
                }
                if (!v48) {
                  uint64_t v46 = v44;
                }
                uint64_t v44 = *v49;
              }
              while (*v49);
              if ((uint64_t *)v46 == v63)
              {
LABEL_80:
                CFBooleanRef v50 = "kUnknown";
              }
              else
              {
                CFBooleanRef v50 = "kUnknown";
                if (*(_DWORD *)(v46 + 28) <= v45)
                {
                  uint64_t v51 = *(int *)(v46 + 32);
                  CFBooleanRef v50 = "Device Type unknown";
                  if (v51 <= 3) {
                    CFBooleanRef v50 = off_101A5ED68[v51];
                  }
                }
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v43;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v50;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sDevice Type: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v52 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              uint64_t v53 = *(int *)(v7 + 48);
              uint64_t v54 = "Supp support unknown";
              if (v53 <= 2) {
                uint64_t v54 = off_101A5ED88[v53];
              }
              *(_DWORD *)long long buf = 136315650;
              uint64_t v68 = v52;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v54;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sSupp services support: %s", buf, 0x20u);
              char v24 = *(NSObject **)(v3 + 40);
            }
            if (os_log_type_enabled(v24, OS_LOG_TYPE_DEFAULT))
            {
              uint64_t v55 = PersonalityInfo::logPrefix(*(PersonalityInfo **)v7);
              BOOL v57 = sub_100E13948(*(Registry **)(v3 + 56), (void *)v7, v56);
              *(_DWORD *)long long buf = 136315650;
              int v58 = "true";
              if (!v57) {
                int v58 = "false";
              }
              uint64_t v68 = v55;
              __int16 v69 = 2080;
              CFBooleanRef v70 = " ";
              __int16 v71 = 2080;
              uint64_t v72 = (uint64_t)v58;
              _os_log_impl((void *)&_mh_execute_header, v24, OS_LOG_TYPE_DEFAULT, "#I %s%sVoPS capable network: %s", buf, 0x20u);
            }
            uint64_t v59 = (void *)v5[1];
            if (v59)
            {
              do
              {
                CFTypeID v60 = v59;
                uint64_t v59 = (void *)*v59;
              }
              while (v59);
            }
            else
            {
              do
              {
                CFTypeID v60 = (void *)v5[2];
                BOOL v61 = *v60 == (void)v5;
                uint64_t v5 = v60;
              }
              while (!v61);
            }
            uint64_t v5 = v60;
          }
          while (v60 != (void *)(v3 + 80));
        }
      }
      sub_10004D2C8(v62);
    }
  }
}

void sub_100E1A078(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, std::__shared_weak_count *a9)
{
}

uint64_t sub_100E1A08C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1A0CC()
{
}

uint64_t sub_100E1A0D8(uint64_t a1)
{
  return sub_100E0F8F8(**(void **)(a1 + 40));
}

uint64_t sub_100E1A0E4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v2 = *(void *)v1;
  uint64_t result = sub_100E0F8F8(*(void *)v1);
  if (result)
  {
    ServiceMap = (std::mutex *)Registry::getServiceMap(v4, *(Registry **)(v2 + 56));
    uint64_t v6 = ServiceMap;
    if (v7 < 0)
    {
      xpc_object_t v8 = (unsigned __int8 *)(v7 & 0x7FFFFFFFFFFFFFFFLL);
      uint64_t v9 = 5381;
      do
      {
        uint64_t v7 = v9;
        unsigned int v10 = *v8++;
        uint64_t v9 = (33 * v9) ^ v10;
      }
      while (v10);
    }
    std::mutex::lock(ServiceMap);
    CFTypeRef cf = (CFTypeRef)v7;
    uint64_t v11 = sub_10004D37C(&v6[1].__m_.__sig, (unint64_t *)&cf);
    if (v11)
    {
      uint64_t v13 = v11[3];
      int v12 = (std::__shared_weak_count *)v11[4];
      if (v12)
      {
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        std::mutex::unlock(v6);
        atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
        sub_10004D2C8(v12);
        if (!v13)
        {
          int v14 = 0;
LABEL_16:
          sub_10004D2C8(v12);
          return v14 & v1;
        }
LABEL_12:
        uint64_t v15 = *(unsigned int *)(v1 + 8);
        LODWORD(v1) = 1;
        (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, void, void))(*(void *)v13 + 96))(&cf, v13, v15, 1, @"Show5GSwitch", 0, 0);
        uint64_t v16 = (BOOL *)cf;
        char v19 = 1;
        if (cf)
        {
          CFTypeID v17 = CFGetTypeID(cf);
          if (v17 == CFBooleanGetTypeID())
          {
            ctu::cf::assign((ctu::cf *)&v19, v16, v18);
            LODWORD(v1) = v19 != 0;
          }
        }
        sub_1000577C4(&cf);
        int v14 = 1;
        if (!v12) {
          return v14 & v1;
        }
        goto LABEL_16;
      }
      std::mutex::unlock(v6);
      if (v13) {
        goto LABEL_12;
      }
    }
    else
    {
      std::mutex::unlock(v6);
    }
    int v14 = 0;
    return v14 & v1;
  }
  return result;
}

void sub_100E1A270(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
  if (v10) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E1A29C(uint64_t a1)
{
  return sub_100E0FD28(**(void **)(a1 + 40), **(unsigned int **)(*(void *)(a1 + 40) + 8), **(const void ***)(*(void *)(a1 + 40) + 16));
}

uint64_t sub_100E1A2B4(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100E1A2F0(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(void **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100E1A32C(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_100E0FFD8(&v4, *(void *)v1, **(_DWORD **)(v1 + 8));
  if (v4) {
    uint64_t v2 = *(unsigned int *)(v4 + 48);
  }
  else {
    uint64_t v2 = 0;
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

uint64_t sub_100E1A38C(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

uint64_t sub_100E1A3C8(uint64_t a1)
{
  uint64_t result = (*(uint64_t (**)(void))(**(void **)(a1 + 40) + 16))();
  **(_DWORD **)(a1 + 32) = result;
  return result;
}

void sub_100E1A404(std::__shared_weak_count *this)
{
  this->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ED08;
  std::__shared_weak_count::~__shared_weak_count(this);
}

void sub_100E1A424(std::__shared_weak_count *a1)
{
  a1->__vftable = (std::__shared_weak_count_vtbl *)off_101A5ED08;
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E1A478(uint64_t a1)
{
  uint64_t v1 = *(std::__shared_weak_count **)(a1 + 32);
  if (v1) {
    sub_10004D2C8(v1);
  }
}

uint64_t sub_100E1A48C(uint64_t a1)
{
  if (*(unsigned char *)a1)
  {
    uint64_t v2 = *(void *)(a1 + 8);
    uint64_t v3 = *(void *)(v2 + 24);
    if (v3) {
      (*(void (**)(uint64_t, uint64_t))(*(void *)v3 + 48))(v3, v2 + 32);
    }
  }
  return a1;
}

void *sub_100E1A4F0(void *a1)
{
  uint64_t v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

uint64_t *sub_100E1A574(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v7 = a1;
  uint64_t v8 = v1;
  uint64_t v2 = *(std::__shared_weak_count **)(v1 + 56);
  if (v2)
  {
    uint64_t v3 = *(void *)v1;
    uint64_t v4 = std::__shared_weak_count::lock(v2);
    if (v4)
    {
      uint64_t v5 = v4;
      if (*(void *)(v1 + 48))
      {
        (*(void (**)(uint64_t *__return_ptr, uint64_t, void))(*(void *)v3 + 64))(&v9, v3, *(unsigned int *)(v1 + 8));
        sub_100A979BC(v1 + 16, v9);
        sub_100057D78((const void **)&v9);
      }
      sub_10004D2C8(v5);
    }
  }
  sub_100E1A658(&v8);
  return sub_100046B58((uint64_t *)&v7);
}

void sub_100E1A624(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va2, a2);
  va_start(va1, a2);
  va_start(va, a2);
  uint64_t v4 = va_arg(va1, void);
  va_copy(va2, va1);
  uint64_t v6 = va_arg(va2, void);
  sub_100057D78((const void **)va2);
  sub_10004D2C8(v2);
  sub_100E1A658((uint64_t *)va1);
  sub_100046B58((uint64_t *)va);
  _Unwind_Resume(a1);
}

uint64_t *sub_100E1A658(uint64_t *result)
{
  uint64_t v1 = *result;
  *uint64_t result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 56);
    if (v2) {
      std::__shared_weak_count::__release_weak(v2);
    }
    sub_100E1A4F0((void *)(v1 + 16));
    operator delete();
  }
  return result;
}

BOOL sub_100E1A6B4(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 40);
  uint64_t v4 = 0;
  uint64_t v5 = 0;
  sub_100E0FFD8(&v4, *(void *)v1, **(_DWORD **)(v1 + 8));
  if (v4) {
    BOOL v2 = *(unsigned __int8 *)(v4 + 44) != 0;
  }
  else {
    BOOL v2 = 0;
  }
  if (v5) {
    sub_10004D2C8(v5);
  }
  return v2;
}

void sub_100E1A71C(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100E1ABA4(int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, dispatch_object_t object, dispatch_object_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21)
{
}

uint64_t sub_100E1ADA8(uint64_t a1)
{
  *(void *)a1 = off_101A5EDB0;
  xpc_release(*(xpc_object_t *)(a1 + 216));
  *(void *)(a1 + 216) = 0;
  xpc_release(*(xpc_object_t *)(a1 + 208));
  *(void *)(a1 + 208) = 0;
  sub_100E1C1C0((void *)(a1 + 176));
  sub_1001085D8(a1 + 120);
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 112);
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = *(std::__shared_weak_count **)(a1 + 96);
  if (v3) {
    sub_10004D2C8(v3);
  }
  sub_10005D144(*(void **)(a1 + 72));
  uint64_t v4 = *(NSObject **)(a1 + 56);
  if (v4) {
    dispatch_release(v4);
  }
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = 0;
  if (v5) {
    (*(void (**)(uint64_t))(*(void *)v5 + 8))(v5);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 40));
  sub_100087E88((void *)(a1 + 8));
  return a1;
}

void sub_100E1AE8C(uint64_t a1)
{
  sub_100E1ADA8(a1);

  operator delete();
}

const char *sub_100E1AEC4(int a1)
{
  uint64_t v1 = "csg.?";
  if (a1 == 2) {
    uint64_t v1 = "csg.2";
  }
  if (a1 == 1) {
    return "csg.1";
  }
  else {
    return v1;
  }
}

void sub_100E1AEF0(uint64_t a1, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  uint64_t v4 = *(std::__shared_weak_count **)(a1 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100E1AFF0(uint64_t a1, xpc_object_t *a2, dispatch_object_t object)
{
  if (object)
  {
    dispatch_retain(object);
    dispatch_group_enter(object);
  }
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_null_create();
  }
  uint64_t v6 = *(std::__shared_weak_count **)(a1 + 16);
  if (v6)
  {
    if (std::__shared_weak_count::lock(v6))
    {
      xpc_null_create();
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100E1B120(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 143);
  if (v2 < 0)
  {
    if (!*(void *)(a1 + 128)) {
      return;
    }
  }
  else if (!*(unsigned char *)(a1 + 143))
  {
    return;
  }
  uint64_t v46 = (const char *)(a1 + 120);
  uint64_t v3 = *(NSObject **)(a1 + 40);
  if (os_log_type_enabled(v3, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v4 = v46;
    if (v2 < 0) {
      uint64_t v4 = *(const char **)v46;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v4;
    _os_log_impl((void *)&_mh_execute_header, v3, OS_LOG_TYPE_DEFAULT, "#I Wifi now is available with BSSID %s", buf, 0xCu);
  }
  uint64_t v5 = *(void **)(a1 + 64);
  if (v5 != (void *)(a1 + 72))
  {
    while (1)
    {
      uint64_t v6 = (os_log_t *)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *((unsigned int *)v5 + 7));
      uint64_t v7 = v6;
      if (*((unsigned char *)v5 + 36))
      {
        uint64_t v41 = *v6;
        if (os_log_type_enabled(*v6, OS_LOG_TYPE_DEFAULT))
        {
          ctu::hex((uint64_t *)buf, (ctu *)*((unsigned int *)v5 + 8), v42);
          uint64_t v43 = (buf[23] & 0x80u) == 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)CFBooleanRef v62 = 136315138;
          *(void *)&v62[4] = v43;
          _os_log_impl((void *)&_mh_execute_header, v41, OS_LOG_TYPE_DEFAULT, "#I Currently associated with CSG ID 0x%s, not forcing a search", v62, 0xCu);
          if ((char)buf[23] < 0) {
            operator delete(*(void **)buf);
          }
        }
        return;
      }
      uint64_t v49 = 0;
      memset(v48, 0, sizeof(v48));
      *(_OWORD *)int v47 = 0u;
      uint64_t v8 = *((unsigned int *)v5 + 7);
      uint64_t v9 = *(void **)(a1 + 216);
      v66[0] = v9;
      if (v9)
      {
        xpc_retain(v9);
        xpc_object_t v10 = v66[0];
      }
      else
      {
        xpc_object_t v10 = xpc_null_create();
        v66[0] = v10;
      }
      if (xpc_get_type(v10) == (xpc_type_t)&_xpc_type_dictionary) {
        break;
      }
LABEL_70:
      xpc_release(v66[0]);
      if (!LOBYTE(v47[1]))
      {
        sub_100021FF4((uint64_t)v48);
        return;
      }
      uint64_t v32 = *v7;
      if (os_log_type_enabled(v32, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, OS_LOG_TYPE_DEFAULT, "#I Searching", buf, 2u);
      }
      long long v61 = 0u;
      memset(v60, 0, sizeof(v60));
      memset(buf, 0, sizeof(buf));
      if (*(char *)(a1 + 143) < 0)
      {
        sub_10004FC84(buf, *(void **)(a1 + 120), *(void *)(a1 + 128));
      }
      else
      {
        *(_OWORD *)long long buf = *(_OWORD *)v46;
        *(void *)&uint8_t buf[16] = *((void *)v46 + 2);
      }
      *(_DWORD *)&uint8_t buf[24] = HIDWORD(v47[0]);
      sub_10005EA44((MCC *)v60, (uint64_t)v48);
      DWORD2(v61) = *((_DWORD *)v5 + 7);
      uint64_t v33 = *(std::__shared_weak_count **)(a1 + 16);
      if (!v33 || (uint64_t v34 = *(void *)(a1 + 8), (v35 = std::__shared_weak_count::lock(v33)) == 0)) {
        sub_100088B9C();
      }
      *(void *)char v56 = v34;
      *(void *)&v56[8] = v35;
      atomic_fetch_add_explicit(&v35->__shared_weak_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v35);
      *(ctu **)&v56[16] = v47[0];
      char v57 = (char)v47[1];
      sub_10005EA44((MCC *)v58, (uint64_t)v48);
      xpc_object_t xdict = 0;
      write_rest_value();
      sub_100058DB0(object, "/cc/requests/csg_search");
      xpc_object_t v54 = xdict;
      xpc_object_t v36 = xpc_null_create();
      *(_OWORD *)CFBooleanRef v62 = *(_OWORD *)v56;
      xpc_object_t xdict = v36;
      *(void *)char v56 = 0;
      *(void *)&v56[8] = 0;
      uint64_t v63 = *(void *)&v56[16];
      char v64 = v57;
      sub_10005EA44((MCC *)v65, (uint64_t)v58);
      uint64_t v67 = 0;
      uint64_t v37 = (char *)operator new(0x70uLL);
      *(void *)uint64_t v37 = off_101A5F308;
      *(_OWORD *)(v37 + 8) = *(_OWORD *)v62;
      memset(v62, 0, sizeof(v62));
      *((void *)v37 + 3) = v63;
      v37[32] = v64;
      sub_10005EA44((MCC *)(v37 + 40), (uint64_t)v65);
      uint64_t v67 = v37;
      ctu::RestModule::sendRequest();
      sub_10003F600(v66);
      sub_100021FF4((uint64_t)v65);
      if (*(void *)&v62[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v62[8]);
      }
      xpc_release(v54);
      xpc_object_t v54 = 0;
      if (v51 < 0) {
        operator delete(object[0]);
      }
      xpc_release(xdict);
      sub_100021FF4((uint64_t)v58);
      if (*(void *)&v56[8]) {
        std::__shared_weak_count::__release_weak(*(std::__shared_weak_count **)&v56[8]);
      }
      sub_100021FF4((uint64_t)v60);
      if ((char)buf[23] < 0) {
        operator delete(*(void **)buf);
      }
      sub_100021FF4((uint64_t)v48);
      __int16 v38 = (void *)v5[1];
      if (v38)
      {
        do
        {
          uint64_t v39 = v38;
          __int16 v38 = (void *)*v38;
        }
        while (v38);
      }
      else
      {
        do
        {
          uint64_t v39 = (void *)v5[2];
          BOOL v40 = *v39 == (void)v5;
          uint64_t v5 = v39;
        }
        while (!v40);
      }
      uint64_t v5 = v39;
      if (v39 == (void *)(a1 + 72)) {
        return;
      }
    }
    object[0] = 0;
    *(void *)long long buf = v66;
    *(void *)&uint8_t buf[8] = "kSlots";
    sub_10000CB28((uint64_t)buf, object);
    if (xpc_get_type(object[0]) != (xpc_type_t)&_xpc_type_dictionary)
    {
LABEL_69:
      xpc_release(object[0]);
      goto LABEL_70;
    }
    xpc_object_t xdict = 0;
    uint64_t v11 = subscriber::asString();
    *(void *)long long buf = object;
    *(void *)&uint8_t buf[8] = v11;
    sub_10000CB28((uint64_t)buf, &xdict);
    if (xpc_get_type(xdict) != (xpc_type_t)&_xpc_type_dictionary)
    {
LABEL_68:
      xpc_release(xdict);
      goto LABEL_69;
    }
    int v12 = v46;
    if (*(char *)(a1 + 143) < 0) {
      int v12 = *(const char **)v46;
    }
    if (!xpc_dictionary_get_value(xdict, v12))
    {
      uint64_t v16 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (os_log_type_enabled(v16, OS_LOG_TYPE_DEFAULT))
      {
        CFTypeID v17 = v46;
        if (*(char *)(a1 + 143) < 0) {
          CFTypeID v17 = *(const char **)v46;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v17;
        _os_log_impl((void *)&_mh_execute_header, v16, OS_LOG_TYPE_DEFAULT, "#I No Closed Subscriber Group is associated with WiFi %s", buf, 0xCu);
      }
      goto LABEL_68;
    }
    xpc_object_t v54 = 0;
    uint64_t v13 = v46;
    if (*(char *)(a1 + 143) < 0) {
      uint64_t v13 = *(const char **)v46;
    }
    *(void *)long long buf = &xdict;
    *(void *)&uint8_t buf[8] = v13;
    sub_10000CB28((uint64_t)buf, &v54);
    if (xpc_get_type(v54) != (xpc_type_t)&_xpc_type_dictionary)
    {
      int v14 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (os_log_type_enabled(v14, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v15 = v46;
        if (*(char *)(a1 + 143) < 0) {
          uint64_t v15 = *(const char **)v46;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v15;
        _os_log_impl((void *)&_mh_execute_header, v14, OS_LOG_TYPE_DEFAULT, "#N No CSG dictionary found associated with WiFi %s", buf, 0xCu);
      }
      goto LABEL_67;
    }
    xpc_object_t v53 = 0;
    *(void *)long long buf = &v54;
    *(void *)&uint8_t buf[8] = "kCsgiId";
    sub_100048BAC((uint64_t)buf, &v53);
    if (xpc_get_type(v53) == (xpc_type_t)&_xpc_type_null)
    {
      uint64_t v25 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v26 = v46;
        if (*(char *)(a1 + 143) < 0) {
          uint64_t v26 = *(const char **)v46;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v26;
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, "#N No CSG ID found associated with WiFi %s", buf, 0xCu);
      }
      goto LABEL_66;
    }
    HIDWORD(v47[0]) = xpc::dyn_cast_or_default((xpc *)&v53, 0, v18);
    LOBYTE(v47[1]) = 1;
    xpc_object_t v52 = 0;
    *(void *)long long buf = &v54;
    *(void *)&uint8_t buf[8] = "kPlmn";
    sub_100048BAC((uint64_t)buf, &v52);
    if (xpc_get_type(v52) == (xpc_type_t)&_xpc_type_null)
    {
      uint64_t v27 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v28 = v46;
        if (*(char *)(a1 + 143) < 0) {
          uint64_t v28 = *(const char **)v46;
        }
        *(_DWORD *)long long buf = 136315138;
        *(void *)&uint8_t buf[4] = v28;
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, "#N No PLMN found associated with WiFi %s", buf, 0xCu);
      }
      goto LABEL_65;
    }
    memset(v62, 0, sizeof(v62));
    uint64_t v63 = 0;
    memset(buf, 0, 24);
    xpc::dyn_cast_or_default();
    if ((char)buf[23] < 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v19 = HIBYTE(v63);
    if (v63 < 0) {
      uint64_t v19 = *(void *)&v62[8];
    }
    if (v19)
    {
      MCCAndMNC::MCCAndMNC();
      sub_100E1BF00((MCC *)v48, (uint64_t)buf);
      sub_10013C44C((uint64_t)buf);
      log = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (!os_log_type_enabled(log, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      ctu::hex((uint64_t *)v56, (ctu *)HIDWORD(v47[0]), v20);
      uint64_t v21 = v56;
      if (v56[23] < 0) {
        uint64_t v21 = *(unsigned char **)v56;
      }
      uint64_t v22 = v62;
      if (v63 < 0) {
        uint64_t v22 = *(uint8_t **)v62;
      }
      char v23 = v46;
      if (*(char *)(a1 + 143) < 0) {
        char v23 = *(const char **)v46;
      }
      *(_DWORD *)long long buf = 136315650;
      *(void *)&uint8_t buf[4] = v21;
      *(_WORD *)&unsigned char buf[12] = 2080;
      *(void *)&buf[14] = v22;
      *(_WORD *)&unsigned char buf[22] = 2080;
      *(void *)&uint8_t buf[24] = v23;
      _os_log_impl((void *)&_mh_execute_header, log, OS_LOG_TYPE_DEFAULT, "#I Found previously associated CSG ID 0x%s from PLMN %s for WiFi %s", buf, 0x20u);
      if ((v56[23] & 0x80000000) == 0) {
        goto LABEL_63;
      }
      char v24 = *(void **)v56;
    }
    else
    {
      loga = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), v8);
      if (!os_log_type_enabled(loga, OS_LOG_TYPE_DEFAULT)) {
        goto LABEL_63;
      }
      ctu::hex((uint64_t *)buf, (ctu *)HIDWORD(v47[0]), v29);
      uint64_t v30 = buf;
      if ((buf[23] & 0x80u) != 0) {
        uint64_t v30 = *(uint8_t **)buf;
      }
      uint64_t v31 = v46;
      if (*(char *)(a1 + 143) < 0) {
        uint64_t v31 = *(const char **)v46;
      }
      *(_DWORD *)char v56 = 136315394;
      *(void *)&v56[4] = v30;
      *(_WORD *)&v56[12] = 2080;
      *(void *)&v56[14] = v31;
      _os_log_impl((void *)&_mh_execute_header, loga, OS_LOG_TYPE_DEFAULT, "#I Found previously associated CSG ID 0x%s for WiFi %s", v56, 0x16u);
      if (((char)buf[23] & 0x80000000) == 0) {
        goto LABEL_63;
      }
      char v24 = *(void **)buf;
    }
    operator delete(v24);
LABEL_63:
    LODWORD(v47[0]) = v8;
    if (SHIBYTE(v63) < 0) {
      operator delete(*(void **)v62);
    }
LABEL_65:
    xpc_release(v52);
LABEL_66:
    xpc_release(v53);
LABEL_67:
    xpc_release(v54);
    goto LABEL_68;
  }
}

void sub_100E1BC00(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,xpc_object_t a32,uint64_t a33,int a34,__int16 a35,char a36,char a37,xpc_object_t object,xpc_object_t a39,xpc_object_t a40,xpc_object_t a41,char a42,std::__shared_weak_count *a43,uint64_t a44,uint64_t a45,uint64_t a46,uint64_t a47,uint64_t a48,uint64_t a49,uint64_t a50,uint64_t a51,uint64_t a52,uint64_t a53,uint64_t a54,uint64_t a55,void *__p,uint64_t a57,int a58,__int16 a59,char a60,char a61)
{
  if (*(char *)(v62 - 217) < 0) {
    operator delete(*(void **)(v62 - 240));
  }
  xpc_release(object);
  xpc_release(a39);
  xpc_release(a40);
  xpc_release(a41);
  xpc_release(a32);
  xpc_release(*(xpc_object_t *)(v62 - 136));
  sub_100021FF4(v61);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1BE20(uint64_t a1)
{
  sub_100021FF4(a1 + 32);
  char v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

uint64_t sub_100E1BE58(uint64_t a1, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v3 = object;
    xpc_retain(object);
  }
  else
  {
    xpc_object_t v3 = xpc_null_create();
  }
  uint64_t v4 = *(void **)(a1 + 32);
  *(void *)(a1 + 32) = v3;
  xpc_release(v4);
  uint64_t result = *(void *)(a1 + 24);
  if (result)
  {
    uint64_t v6 = *(uint64_t (**)(void))(*(void *)result + 48);
    return v6();
  }
  return result;
}

MCC *sub_100E1BF00(MCC *a1, uint64_t a2)
{
  if (*((unsigned char *)a1 + 64))
  {
    MCC::operator=();
    MCC::operator=();
  }
  else
  {
    sub_1004C7EE8(a1, a2);
    *((unsigned char *)a1 + 64) = 1;
  }
  return a1;
}

void sub_100E1BF60(uint64_t a1)
{
  char v2 = *(unsigned char *)(a1 + 143);
  if (v2 < 0) {
    uint64_t v3 = *(void *)(a1 + 128);
  }
  else {
    uint64_t v3 = *(unsigned __int8 *)(a1 + 143);
  }
  uint64_t v4 = *(NSObject **)(a1 + 40);
  BOOL v5 = os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT);
  if (v3)
  {
    if (!v5) {
      goto LABEL_12;
    }
    uint64_t v6 = (void *)(a1 + 120);
    if (v2 < 0) {
      uint64_t v6 = (void *)*v6;
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v6;
    uint64_t v7 = "#I Currently associated WiFi MAC: %s";
    uint64_t v8 = v4;
    uint32_t v9 = 12;
  }
  else
  {
    if (!v5) {
      goto LABEL_12;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v7 = "#I Not currently associated a WiFi BSSID";
    uint64_t v8 = v4;
    uint32_t v9 = 2;
  }
  _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, v7, buf, v9);
LABEL_12:
  xpc_object_t v10 = *(void **)(a1 + 64);
  if (v10 != (void *)(a1 + 72))
  {
    do
    {
      BOOL v11 = *((unsigned char *)v10 + 36) == 0;
      int v12 = *(NSObject **)(*(uint64_t (**)(void, void))(**(void **)(a1 + 48) + 16))(*(void *)(a1 + 48), *((unsigned int *)v10 + 7));
      BOOL v13 = os_log_type_enabled(v12, OS_LOG_TYPE_DEFAULT);
      if (v11)
      {
        if (v13)
        {
          *(_WORD *)long long buf = 0;
          _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Not currently associated with a CSG cell", buf, 2u);
        }
      }
      else if (v13)
      {
        if (!*((unsigned char *)v10 + 36)) {
          sub_10016C840();
        }
        ctu::hex((uint64_t *)buf, (ctu *)*((unsigned int *)v10 + 8), v14);
        if (v20 >= 0) {
          uint64_t v15 = buf;
        }
        else {
          uint64_t v15 = *(unsigned char **)buf;
        }
        *(_DWORD *)uint64_t v21 = 136315138;
        uint64_t v22 = v15;
        _os_log_impl((void *)&_mh_execute_header, v12, OS_LOG_TYPE_DEFAULT, "#I Currently associated CSG ID: 0x%s", v21, 0xCu);
        if (v20 < 0) {
          operator delete(*(void **)buf);
        }
      }
      uint64_t v16 = (void *)v10[1];
      if (v16)
      {
        do
        {
          CFTypeID v17 = v16;
          uint64_t v16 = (void *)*v16;
        }
        while (v16);
      }
      else
      {
        do
        {
          CFTypeID v17 = (void *)v10[2];
          BOOL v18 = *v17 == (void)v10;
          xpc_object_t v10 = v17;
        }
        while (!v18);
      }
      xpc_object_t v10 = v17;
    }
    while (v17 != (void *)(a1 + 72));
  }
}

void *sub_100E1C1C0(void *a1)
{
  char v2 = (void *)a1[3];
  if (v2 == a1)
  {
    (*(void (**)(void *))(*a1 + 32))(a1);
  }
  else if (v2)
  {
    (*(void (**)(void *))(*v2 + 40))(v2);
  }
  return a1;
}

void sub_100E1C248(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

void sub_100E1C280(uint64_t a1)
{
}

uint64_t sub_100E1C29C(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t sub_100E1C2E0(uint64_t result)
{
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

void sub_100E1C30C(ServiceManager::Service *this)
{
  *(void *)this = off_101A5EFA0;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100E1C368(ServiceManager::Service *this)
{
  *(void *)this = off_101A5EFA0;
  char v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

void *sub_100E1C3D8@<X0>(void *a1@<X8>)
{
  return sub_100058DB0(a1, "ClosedSubscriberGroupHandler");
}

unsigned char *sub_100E1C3E8@<X0>(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  a1[2] = 0;
  char v2 = operator new(1uLL);
  *a1 = v2;
  unsigned char *v2 = 2;
  uint64_t result = v2 + 1;
  a1[1] = result;
  a1[2] = result;
  return result;
}

void sub_100E1C428(uint64_t a1, dispatch_object_t *a2)
{
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v3 = *a2;
  if (*a2)
  {
    dispatch_retain(*a2);
    dispatch_group_enter(v3);
    sub_100E1AEF0(v2, v3);
  }
  uint64_t v4 = *(void *)(a1 + 8);

  sub_100E1AEF0(v4, 0);
}

uint64_t sub_100E1C4AC()
{
  return 1;
}

uint64_t sub_100E1C4B4()
{
  return 1;
}

uint64_t sub_100E1C4BC()
{
  return 2;
}

void sub_100E1C4C4(uint64_t a1, void **a2, NSObject **a3)
{
  uint64_t v4 = *(void *)(a1 + 8);
  BOOL v5 = *a2;
  xpc_object_t v7 = v5;
  if (v5) {
    xpc_retain(v5);
  }
  else {
    xpc_object_t v7 = xpc_null_create();
  }
  uint64_t v6 = *a3;
  if (v6)
  {
    dispatch_retain(v6);
    dispatch_group_enter(v6);
    sub_100E1AFF0(v4, &v7, v6);
  }
  sub_100E1AFF0(v4, &v7, 0);
}

void sub_100E1C57C(uint64_t a1, int a2, ServiceStage *this)
{
  uint64_t v3 = *(void *)(a1 + 8);
  ServiceStage::holdOffStage((uint64_t *)&group[1], this);
  uint64_t v4 = *(std::__shared_weak_count **)(v3 + 16);
  if (v4)
  {
    if (std::__shared_weak_count::lock(v4)) {
      operator new();
    }
  }
  sub_100088B9C();
}

void sub_100E1C690(ServiceManager::Service *this)
{
  *(void *)this = off_101A5EFA0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }

  ServiceManager::Service::~Service(this);
}

void sub_100E1C6EC(ServiceManager::Service *this)
{
  *(void *)this = off_101A5EFA0;
  uint64_t v2 = (std::__shared_weak_count *)*((void *)this + 2);
  if (v2) {
    sub_10004D2C8(v2);
  }
  ServiceManager::Service::~Service(this);

  operator delete();
}

uint64_t sub_100E1C75C()
{
  return 0;
}

uint64_t sub_100E1C764()
{
  return 0;
}

void sub_100E1C774()
{
}

uint64_t sub_100E1C788(uint64_t a1)
{
  return *(void *)(a1 + 8) + 40;
}

uint64_t *sub_100E1C794(uint64_t *a1)
{
  uint64_t v1 = *a1;
  uint64_t v3 = a1;
  uint64_t v4 = v1;
  ctu::RestModule::disconnect((ctu::RestModule *)(*(void *)v1 + 88));
  sub_100088C88(&v4);
  return sub_100046B58((uint64_t *)&v3);
}

void sub_100E1C7DC(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10)
{
}

uint64_t *sub_100E1C7F8(void **a1)
{
  uint64_t v1 = *a1;
  char v23 = a1;
  char v24 = v1;
  uint64_t v2 = *v1;
  subscriber::makeSimSlotRange();
  uint64_t v4 = (unsigned int *)v27;
  uint64_t v3 = v28;
  if (v27 != (uint64_t (**)())v28)
  {
    BOOL v5 = v29;
    while ((v29(*v4) & 1) == 0)
    {
      if (++v4 == v28)
      {
        uint64_t v4 = v28;
        break;
      }
    }
    uint64_t v6 = v28;
    if (v4 != v28)
    {
      xpc_object_t v7 = (uint64_t *)(v2 + 72);
      do
      {
        signed int v8 = *v4;
        uint64_t v9 = *v7;
        xpc_object_t v10 = (void *)(v2 + 72);
        BOOL v11 = (void *)(v2 + 72);
        if (*v7)
        {
          while (1)
          {
            while (1)
            {
              BOOL v11 = (void *)v9;
              signed int v12 = *(_DWORD *)(v9 + 28);
              if (v12 <= v8) {
                break;
              }
              uint64_t v9 = *v11;
              xpc_object_t v10 = v11;
              if (!*v11) {
                goto LABEL_15;
              }
            }
            if (v12 >= v8) {
              break;
            }
            uint64_t v9 = v11[1];
            if (!v9)
            {
              xpc_object_t v10 = v11 + 1;
              goto LABEL_15;
            }
          }
        }
        else
        {
LABEL_15:
          BOOL v13 = operator new(0x28uLL);
          v13[7] = v8;
          *((unsigned char *)v13 + 32) = 0;
          *((unsigned char *)v13 + 36) = 0;
          *(void *)BOOL v13 = 0;
          *((void *)v13 + 1) = 0;
          *((void *)v13 + 2) = v11;
          *xpc_object_t v10 = v13;
          uint64_t v14 = **(void **)(v2 + 64);
          if (v14)
          {
            *(void *)(v2 + 64) = v14;
            BOOL v13 = (_DWORD *)*v10;
          }
          sub_100046C90(*(uint64_t **)(v2 + 72), (uint64_t *)v13);
          ++*(void *)(v2 + 80);
        }
        uint64_t v15 = v4 + 1;
        uint64_t v4 = v3;
        if (v15 != v3)
        {
          uint64_t v4 = v15;
          while ((v5(*v4) & 1) == 0)
          {
            if (++v4 == v3)
            {
              uint64_t v4 = v3;
              break;
            }
          }
        }
      }
      while (v4 != v6);
    }
  }
  Registry::createRestModuleOneTimeUseConnection(&v25, *(Registry **)(v2 + 104));
  ctu::RestModule::connect();
  if (v26) {
    sub_10004D2C8(v26);
  }
  sub_100058DB0(__p, "/cc/props/wifi_settings");
  uint64_t v16 = (uint64_t (***)())operator new(0x28uLL);
  void *v16 = off_101A5F048;
  v16[1] = (uint64_t (**)())(v2 + 120);
  void v16[2] = (uint64_t (**)())v2;
  v16[3] = (uint64_t (**)())sub_100E1B120;
  void v16[4] = 0;
  uint64_t v30 = v16;
  ctu::RestModule::observeProperty();
  sub_10003F600(&v27);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/csg_serving_system");
  CFTypeID v17 = (uint64_t (***)())operator new(0x20uLL);
  void *v17 = off_101A5F0C8;
  v17[1] = (uint64_t (**)())v2;
  v17[2] = (uint64_t (**)())sub_100063AE4;
  v17[3] = 0;
  uint64_t v30 = v17;
  ctu::RestModule::observeEvent();
  sub_10003F600(&v27);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100058DB0(__p, "/cc/events/dump_state");
  BOOL v18 = (uint64_t (***)())operator new(0x20uLL);
  *BOOL v18 = off_101A5F148;
  v18[1] = (uint64_t (**)())v2;
  xpc_object_t v18[2] = (uint64_t (**)())sub_100E1BF60;
  v18[3] = 0;
  uint64_t v30 = v18;
  ctu::RestModule::observeEvent();
  sub_10003F600(&v27);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  uint64_t v19 = (uint64_t (***)())(v2 + 176);
  uint64_t v27 = off_101A5F1C8;
  uint64_t v28 = (unsigned int *)(v2 + 88);
  uint64_t v30 = &v27;
  if (&v27 != (uint64_t (***)())(v2 + 176))
  {
    char v20 = *(uint64_t (****)())(v2 + 200);
    if (v20 == v19)
    {
      __p[1] = (void *)(v2 + 88);
      uint64_t v32 = 0;
      uint64_t v30 = 0;
      __p[0] = off_101A5F1C8;
      ((void (*)(uint64_t, uint64_t (***)()))(*v19)[3])(v2 + 176, &v27);
      (*(void (**)(void))(**(void **)(v2 + 200) + 32))(*(void *)(v2 + 200));
      *(void *)(v2 + 200) = 0;
      uint64_t v30 = &v27;
      (*((void (**)(void **, uint64_t))__p[0] + 3))(__p, v2 + 176);
      (*((void (**)(void **))__p[0] + 4))(__p);
    }
    else
    {
      *(void *)(v2 + 176) = off_101A5F1C8;
      *(void *)(v2 + 184) = v2 + 88;
      uint64_t v30 = v20;
    }
    *(void *)(v2 + 200) = v19;
  }
  sub_100E1C1C0(&v27);
  uint64_t v21 = *(void *)(v2 + 200);
  if (v21) {
    (*(void (**)(uint64_t, uint64_t))(*(void *)v21 + 48))(v21, v2 + 208);
  }
  sub_100058DB0(__p, "/cc/prefs-nb/kClosedSubscriberGroupIdKey");
  uint64_t v27 = off_101A5F258;
  uint64_t v28 = (unsigned int *)(v2 + 216);
  uint64_t v30 = &v27;
  ctu::RestModule::observeProperty();
  sub_10003F600(&v27);
  if (SHIBYTE(v32) < 0) {
    operator delete(__p[0]);
  }
  sub_100088C88((uint64_t *)&v24);
  return sub_100046B58((uint64_t *)&v23);
}

void sub_100E1CCFC(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10, uint64_t a11, uint64_t a12, char a13, uint64_t a14, uint64_t a15, uint64_t a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a2) {
    sub_10006A6AC(exception_object);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E1CD88()
{
}

__n128 sub_100E1CD9C(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x28uLL);
  *(void *)uint64_t v2 = off_101A5F048;
  *(_OWORD *)(v2 + 8) = *(_OWORD *)(a1 + 8);
  __n128 result = *(__n128 *)(a1 + 24);
  *(__n128 *)(v2 + 24) = result;
  return result;
}

__n128 sub_100E1CDF0(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5F048;
  __n128 result = *(__n128 *)(a1 + 8);
  *(_OWORD *)(a2 + 24) = *(_OWORD *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E1CE28(void *a1, xpc_object_t *a2)
{
  xpc_object_t object = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  read_rest_value();
  xpc_release(object);
  uint64_t v3 = (uint64_t (*)(void *))a1[3];
  uint64_t v4 = a1[4];
  BOOL v5 = (void *)(a1[2] + (v4 >> 1));
  if (v4) {
    uint64_t v3 = *(uint64_t (**)(void *))(*v5 + v3);
  }
  return v3(v5);
}

void sub_100E1CED4(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, xpc_object_t object)
{
}

uint64_t sub_100E1CEF0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1CF30()
{
}

void sub_100E1CF40()
{
}

__n128 sub_100E1CF54(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A5F0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100E1CFA8(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5F0C8;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E1CFE0(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1D020()
{
}

void sub_100E1D030()
{
}

__n128 sub_100E1D044(uint64_t a1)
{
  uint64_t v2 = (char *)operator new(0x20uLL);
  *(void *)uint64_t v2 = off_101A5F148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(__n128 *)(v2 + 8) = result;
  *((void *)v2 + 3) = *(void *)(a1 + 24);
  return result;
}

__n128 sub_100E1D098(uint64_t a1, uint64_t a2)
{
  *(void *)a2 = off_101A5F148;
  __n128 result = *(__n128 *)(a1 + 8);
  *(void *)(a2 + 24) = *(void *)(a1 + 24);
  *(__n128 *)(a2 + 8) = result;
  return result;
}

uint64_t sub_100E1D0D0(void *a1)
{
  uint64_t v1 = (uint64_t (*)(void *))a1[2];
  uint64_t v2 = a1[3];
  uint64_t v3 = (void *)(a1[1] + (v2 >> 1));
  if (v2) {
    return (*(uint64_t (**)(void))(*v3 + v1))();
  }
  else {
    return v1(v3);
  }
}

uint64_t sub_100E1D118(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1D158()
{
}

void sub_100E1D168()
{
}

void *sub_100E1D17C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5F1C8;
  result[1] = v3;
  return result;
}

uint64_t sub_100E1D1C4(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5F1C8;
  a2[1] = v2;
  return result;
}

void sub_100E1D1F0(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v2 = *a2;
  if (*a2) {
    xpc_retain(*a2);
  }
  else {
    xpc_object_t v2 = xpc_null_create();
  }
  sub_100058DB0(&__p, "/cc/prefs-nb/kClosedSubscriberGroupIdKey");
  xpc_object_t object = v2;
  if (v2) {
    xpc_retain(v2);
  }
  else {
    xpc_object_t object = xpc_null_create();
  }
  ctu::RestModule::setProperty();
  xpc_release(object);
  if (v5 < 0) {
    operator delete(__p);
  }
  xpc_release(v2);
}

void sub_100E1D2A0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t object, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  xpc_release(object);
  if (a15 < 0) {
    operator delete(__p);
  }
  xpc_release(v15);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1D2E8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1D328()
{
}

void sub_100E1D338()
{
}

void *sub_100E1D34C(uint64_t a1)
{
  __n128 result = operator new(0x10uLL);
  uint64_t v3 = *(void *)(a1 + 8);
  *__n128 result = off_101A5F258;
  result[1] = v3;
  return result;
}

uint64_t sub_100E1D394(uint64_t result, void *a2)
{
  uint64_t v2 = *(void *)(result + 8);
  *a2 = off_101A5F258;
  a2[1] = v2;
  return result;
}

void sub_100E1D3C0(uint64_t a1, xpc_object_t *a2)
{
}

uint64_t sub_100E1D3C8(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1D408()
{
}

uint64_t *sub_100E1D414(uint64_t *result)
{
  uint64_t v1 = *result;
  *__n128 result = 0;
  if (v1)
  {
    uint64_t v2 = *(std::__shared_weak_count **)(v1 + 32);
    if (v2) {
      sub_10004D2C8(v2);
    }
    xpc_release(*(xpc_object_t *)(v1 + 16));
    *(void *)(v1 + 16) = 0;
    uint64_t v3 = *(NSObject **)(v1 + 8);
    if (v3)
    {
      dispatch_group_leave(v3);
      uint64_t v4 = *(NSObject **)(v1 + 8);
      if (v4) {
        dispatch_release(v4);
      }
    }
    operator delete();
  }
  return result;
}

uint64_t *sub_100E1D490(void *a1)
{
  char v23 = a1;
  uint64_t v1 = (void *)*a1;
  *(void *)long long buf = a1 + 2;
  uint64_t v26 = "kIsEraseInstall";
  sub_100048BAC((uint64_t)buf, &v33);
  int v3 = xpc::dyn_cast_or_default((xpc *)&v33, 0, v2);
  xpc_release(v33);
  if (!v3)
  {
    char v5 = (void *)v1[27];
    xpc_object_t v32 = v5;
    if (v5)
    {
      xpc_retain(v5);
      xpc_object_t v6 = v32;
    }
    else
    {
      xpc_object_t v6 = xpc_null_create();
      xpc_object_t v32 = v6;
    }
    if (xpc_get_type(v6) != (xpc_type_t)&_xpc_type_dictionary) {
      goto LABEL_30;
    }
    xpc_object_t object = 0;
    *(void *)long long buf = &v32;
    uint64_t v26 = "kSlots";
    sub_10000CB28((uint64_t)buf, &object);
    if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
    {
LABEL_29:
      xpc_release(object);
LABEL_30:
      xpc_release(v32);
      return sub_100E1D414((uint64_t *)&v23);
    }
    xpc_object_t v7 = xpc_dictionary_create(0, 0, 0);
    if (v7 || (xpc_object_t v7 = xpc_null_create()) != 0)
    {
      if (xpc_get_type(v7) == (xpc_type_t)&_xpc_type_dictionary)
      {
        xpc_retain(v7);
        xpc_object_t v8 = v7;
      }
      else
      {
        xpc_object_t v8 = xpc_null_create();
      }
    }
    else
    {
      xpc_object_t v8 = xpc_null_create();
      xpc_object_t v7 = 0;
    }
    xpc_release(v7);
    xpc_object_t v9 = v32;
    *(void *)long long buf = _NSConcreteStackBlock;
    uint64_t v26 = (const char *)1174405120;
    uint64_t v27 = sub_100E1D944;
    uint64_t v28 = &unk_101A5F2C8;
    unsigned int v29 = v1;
    xpc_object_t v30 = v8;
    if (v8) {
      xpc_retain(v8);
    }
    else {
      xpc_object_t v30 = xpc_null_create();
    }
    xpc_dictionary_apply(v9, buf);
    uint64_t v10 = subscriber::asString();
    if (v8)
    {
      xpc_retain(v8);
      sub_1006941A8(&v33);
      xpc_object_t v11 = v8;
    }
    else
    {
      xpc_object_t v11 = xpc_null_create();
      sub_1006941A8(&v33);
      if (!v11)
      {
        xpc_object_t v11 = xpc_null_create();
        signed int v12 = 0;
LABEL_22:
        sub_100E1DD64(&v24, &v33, v10, v11);
        xpc_release(v11);
        xpc_release(v33);
        BOOL v13 = v24;
        xpc_object_t v14 = xpc_null_create();
        char v24 = v14;
        xpc_object_t v15 = object;
        xpc_object_t object = v13;
        xpc_release(v15);
        xpc_release(v14);
        char v24 = 0;
        xpc_release(v12);
        xpc_object_t v16 = object;
        if (object)
        {
          xpc_retain(object);
          sub_1006941A8(&v33);
        }
        else
        {
          xpc_object_t v16 = xpc_null_create();
          sub_1006941A8(&v33);
          if (!v16)
          {
            xpc_object_t v16 = xpc_null_create();
            CFTypeID v17 = 0;
            goto LABEL_26;
          }
        }
        xpc_retain(v16);
        CFTypeID v17 = v16;
LABEL_26:
        sub_100E1DD64(&v24, &v33, (uint64_t)"kSlots", v16);
        xpc_release(v16);
        xpc_release(v33);
        BOOL v18 = v24;
        xpc_object_t v19 = xpc_null_create();
        char v24 = v19;
        char v20 = (void *)v1[26];
        v1[26] = v18;
        xpc_release(v20);
        uint64_t v21 = v1[25];
        if (v21) {
          (*(void (**)(uint64_t, void *))(*(void *)v21 + 48))(v21, v1 + 26);
        }
        xpc_release(v19);
        char v24 = 0;
        xpc_release(v17);
        xpc_release(v30);
        xpc_object_t v30 = 0;
        xpc_release(v8);
        goto LABEL_29;
      }
    }
    xpc_retain(v11);
    signed int v12 = v11;
    goto LABEL_22;
  }
  uint64_t v4 = v1[5];
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#N Erase-install, skipping carrier bundle migration", buf, 2u);
  }
  return sub_100E1D414((uint64_t *)&v23);
}

void sub_100E1D82C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, xpc_object_t object, uint64_t a17, xpc_object_t a18)
{
  xpc_release(v20);
  a10 = 0;
  xpc_release(v19);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v18);
  xpc_release(a18);
  xpc_release(*(xpc_object_t *)(v21 - 64));
  sub_100E1D414(&a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1D944(uint64_t a1, uint64_t a2, xpc_object_t object)
{
  uint64_t v6 = *(void *)(a1 + 32);
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_int64)
  {
    xpc_object_t v8 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v9 = (void *)(v6 + 120);
      if (*(char *)(v6 + 143) < 0) {
        xpc_object_t v9 = (void *)*v9;
      }
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = v9;
      _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Found legacy association for WiFi %s", (uint8_t *)&buf, 0xCu);
    }
    xpc_object_t v10 = xpc_copy(object);
    if (v10)
    {
      sub_1006941A8(&v19);
    }
    else
    {
      xpc_object_t v10 = xpc_null_create();
      sub_1006941A8(&v19);
      if (!v10)
      {
        xpc_object_t v11 = xpc_null_create();
        if (!v11)
        {
          xpc_object_t v12 = xpc_null_create();
          xpc_object_t v20 = v12;
          if (!v12)
          {
            xpc_object_t v10 = 0;
            xpc_object_t v11 = 0;
            xpc_object_t v12 = 0;
            xpc_object_t v20 = xpc_null_create();
            goto LABEL_18;
          }
          xpc_object_t v10 = 0;
          xpc_object_t v11 = 0;
LABEL_17:
          xpc_retain(v12);
LABEL_18:
          *(void *)&long long buf = &v19;
          *((void *)&buf + 1) = "kCsgiId";
          sub_100035E70((uint64_t)&buf, &v20, &v21);
          xpc_release(v21);
          xpc_object_t v21 = 0;
          xpc_release(v20);
          xpc_object_t v20 = 0;
          xpc_object_t v16 = v19;
          if (v19) {
            xpc_retain(v19);
          }
          else {
            xpc_object_t v16 = xpc_null_create();
          }
          xpc_release(v12);
          xpc_release(v11);
          xpc_release(v19);
          sub_1006940C4("", &v16, (uint64_t)"kPlmn", &v21);
          xpc_object_t v17 = v21;
          xpc_object_t v21 = xpc_null_create();
          *(void *)&long long buf = a1 + 40;
          *((void *)&buf + 1) = a2;
          sub_10014E03C((uint64_t)&buf, &v17, &v18);
          xpc_release(v18);
          xpc_object_t v18 = 0;
          xpc_release(v17);
          xpc_object_t v17 = 0;
          xpc_release(v21);
          xpc_object_t v21 = 0;
          xpc_release(v16);
          xpc_object_t v16 = 0;
          xpc_release(v10);
          return 1;
        }
        xpc_object_t v10 = 0;
LABEL_16:
        xpc_retain(v11);
        xpc_object_t v20 = v11;
        xpc_object_t v12 = v11;
        goto LABEL_17;
      }
    }
    xpc_retain(v10);
    xpc_object_t v11 = v10;
    goto LABEL_16;
  }
  if (xpc_get_type(object) == (xpc_type_t)&_xpc_type_dictionary)
  {
    xpc_object_t v14 = xpc_copy(object);
    if (!v14) {
      xpc_object_t v14 = xpc_null_create();
    }
    *(void *)&long long buf = a1 + 40;
    *((void *)&buf + 1) = a2;
    sub_100035E70((uint64_t)&buf, &v14, &objecta);
    xpc_release(objecta);
    xpc_object_t objecta = 0;
    xpc_release(v14);
  }
  else
  {
    xpc_object_t v7 = *(NSObject **)(v6 + 40);
    if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
    {
      LODWORD(buf) = 136315138;
      *(void *)((char *)&buf + 4) = a2;
      _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#N Unknown object type for BSSID %s", (uint8_t *)&buf, 0xCu);
    }
  }
  return 1;
}

void sub_100E1DC58(_Unwind_Exception *a1, int a2)
{
  if (a2) {
    sub_10006A6AC(a1);
  }
  _Unwind_Resume(a1);
}

xpc_object_t sub_100E1DCF4(uint64_t a1, uint64_t a2)
{
  int v3 = *(void **)(a2 + 40);
  *(void *)(a1 + 40) = v3;
  if (v3) {
    return xpc_retain(v3);
  }
  xpc_object_t result = xpc_null_create();
  *(void *)(a1 + 40) = result;
  return result;
}

void sub_100E1DD34(uint64_t a1)
{
  *(void *)(a1 + 40) = 0;
}

void sub_100E1DD64(void **a1, void **a2, uint64_t a3, xpc_object_t object)
{
  if (object)
  {
    xpc_object_t v7 = object;
    xpc_retain(object);
    xpc_object_t v10 = v7;
LABEL_4:
    xpc_retain(v7);
    goto LABEL_5;
  }
  xpc_object_t v7 = xpc_null_create();
  xpc_object_t v10 = v7;
  if (v7) {
    goto LABEL_4;
  }
  xpc_object_t v7 = 0;
  xpc_object_t v10 = xpc_null_create();
LABEL_5:
  v9[0] = a2;
  v9[1] = a3;
  sub_100035E70((uint64_t)v9, &v10, &objecta);
  xpc_release(objecta);
  xpc_object_t objecta = 0;
  xpc_release(v10);
  xpc_object_t v10 = 0;
  xpc_object_t v8 = *a2;
  *a1 = *a2;
  if (v8) {
    xpc_retain(v8);
  }
  else {
    *a1 = xpc_null_create();
  }
  xpc_release(v7);
}

void *sub_100E1DE44(void *a1)
{
  *a1 = off_101A5F308;
  sub_100021FF4((uint64_t)(a1 + 5));
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }
  return a1;
}

void sub_100E1DE94(void *a1)
{
  *a1 = off_101A5F308;
  sub_100021FF4((uint64_t)(a1 + 5));
  BOOL v2 = (std::__shared_weak_count *)a1[2];
  if (v2) {
    std::__shared_weak_count::__release_weak(v2);
  }

  operator delete();
}

void *sub_100E1DF04(uint64_t a1)
{
  uint64_t v1 = a1 + 8;
  BOOL v2 = operator new(0x70uLL);
  void *v2 = off_101A5F308;
  sub_100E1E54C((uint64_t)(v2 + 1), v1);
  return v2;
}

void sub_100E1DF58(_Unwind_Exception *a1)
{
  operator delete(v1);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1DF6C(uint64_t a1, void *a2)
{
  *a2 = off_101A5F308;
  return sub_100E1E54C((uint64_t)(a2 + 1), a1 + 8);
}

void sub_100E1DF98(uint64_t a1)
{
}

void sub_100E1DFA0(void *a1)
{
  sub_100E1E5BC((uint64_t)a1 + 8);

  operator delete(a1);
}

void sub_100E1DFDC(uint64_t a1, xpc_object_t *a2)
{
  xpc_object_t v11 = *a2;
  *a2 = xpc_null_create();
  read_rest_value();
  int v3 = *(std::__shared_weak_count **)(a1 + 16);
  if (v3)
  {
    uint64_t v4 = std::__shared_weak_count::lock(v3);
    if (v4)
    {
      char v5 = v4;
      uint64_t v6 = *(void *)(a1 + 8);
      if (v6)
      {
        uint64_t v7 = *(unsigned int *)(a1 + 24);
        std::string __p = 0;
        uint64_t v13 = 0;
        memset(v14, 0, sizeof(v14));
        char v15 = 0;
        xpc_object_t v8 = *(NSObject **)(*(uint64_t (**)(void, uint64_t))(**(void **)(v6 + 48) + 16))(*(void *)(v6 + 48), v7);
        if (os_log_type_enabled(v8, OS_LOG_TYPE_ERROR))
        {
          ctu::hex((uint64_t *)buf, 0, v9);
          xpc_object_t v10 = v17 >= 0 ? buf : *(uint8_t **)buf;
          *(_DWORD *)xpc_object_t v18 = 136315138;
          *(void *)&v18[4] = v10;
          _os_log_error_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_ERROR, "Cannot remove CSG association for ID 0x%s without WiFi MAC address", v18, 0xCu);
          if (v17 < 0) {
            operator delete(*(void **)buf);
          }
        }
        if (v15 < 0) {
          operator delete(__p);
        }
      }
      sub_10004D2C8(v5);
    }
  }
  if ((((unsigned __int128)0 >> 120) & 0x80000000) != 0) {
    operator delete(0);
  }
  xpc_release(v11);
}

void sub_100E1E41C(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, xpc_object_t a9, uint64_t a10, uint64_t a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *__p, uint64_t a20,int a21,__int16 a22,char a23,char a24,xpc_object_t object,xpc_object_t a26)
{
  xpc_release(object);
  xpc_release(a26);
  xpc_release(*(xpc_object_t *)(v29 - 96));
  if (a24 < 0) {
    operator delete(__p);
  }
  sub_10004D2C8(v27);
  if (v28 < 0) {
    operator delete(v26);
  }
  if (a17 < 0) {
    operator delete(a12);
  }
  xpc_release(a9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E1E500(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 8;
  }
  else
  {
    return 0;
  }
}

_UNKNOWN **sub_100E1E540()
{
}

uint64_t sub_100E1E54C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v3 + 16), 1uLL, memory_order_relaxed);
  }
  uint64_t v4 = *(void *)(a2 + 16);
  *(unsigned char *)(a1 + 24) = *(unsigned char *)(a2 + 24);
  *(void *)(a1 + 16) = v4;
  sub_10005EA44((MCC *)(a1 + 32), a2 + 32);
  return a1;
}

void sub_100E1E5A4(_Unwind_Exception *exception_object)
{
  uint64_t v3 = *(std::__shared_weak_count **)(v1 + 8);
  if (v3) {
    std::__shared_weak_count::__release_weak(v3);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E1E5BC(uint64_t a1)
{
  sub_100021FF4(a1 + 32);
  BOOL v2 = *(std::__shared_weak_count **)(a1 + 8);
  if (v2)
  {
    std::__shared_weak_count::__release_weak(v2);
  }
}

void sub_100E1E608()
{
  uint64_t v0 = sub_10001C8F4(8);
  uint64_t v1 = *v0;
  BOOL v2 = (std::__shared_weak_count *)v0[1];
  if (v2) {
    atomic_fetch_add_explicit(&v2->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  if (v1) {
    wis::WISServerConnection::RegisterQueriableMetricCallbackForLogging();
  }
  if (v2)
  {
    sub_10004D2C8(v2);
  }
}

void sub_100E1E67C(_Unwind_Exception *exception_object)
{
  if (v1) {
    sub_10004D2C8(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E1E694(id a1, __CFDictionary *a2)
{
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    *(_WORD *)long long buf = 0;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Toggling CommCenter logging because of AWD callback", buf, 2u);
  }
  BOOL v3 = sub_100E1EFE0(a2, @"enableCSI");
  v27[0] = 0;
  v27[1] = 0;
  uint64_t v28 = 0;
  sub_100058DB0(v27, "128");
  sub_100E1F0C4(a2, @"csiSize");
  BOOL v4 = sub_100E1EFE0(a2, @"dump");
  v25[0] = 0;
  v25[1] = 0;
  uint64_t v26 = 0;
  sub_100058DB0(v25, "Dumping CommCenter logging because of AWD Logging callback");
  sub_100E1F0C4(a2, @"reason");
  BOOL v5 = sub_100E1EFE0(a2, @"terminate");
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v6 = v27;
    if (v28 < 0) {
      uint64_t v6 = (void **)v27[0];
    }
    uint64_t v7 = v25;
    if (v26 < 0) {
      uint64_t v7 = (void **)v25[0];
    }
    *(_DWORD *)long long buf = 67110146;
    *(_DWORD *)&uint8_t buf[4] = v3;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v6;
    __int16 v36 = 1024;
    *(_DWORD *)uint64_t v37 = v4;
    *(_WORD *)&void v37[4] = 2080;
    *(void *)&v37[6] = v7;
    __int16 v38 = 1024;
    BOOL v39 = v5;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "AWD Log Dict - CSI - (%d, %s, %d, %s, %d)", buf, 0x28u);
  }
  uint64_t v22 = 0;
  char v23 = 0;
  sub_100068A94(&v22);
  BOOL v8 = os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT);
  if (v4)
  {
    if (v8)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Requested to DUMP logs", buf, 2u);
    }
    unsigned int v9 = v22;
    if (SHIBYTE(v26) < 0)
    {
      sub_10004FC84(__dst, v25[0], (unint64_t)v25[1]);
    }
    else
    {
      *(_OWORD *)std::string __dst = *(_OWORD *)v25;
      uint64_t v32 = v26;
    }
    RequestDumpStatePayload::RequestDumpStatePayload();
    (*(void (**)(void *, unsigned char *))(*(void *)v9 + 184))(v9, buf);
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (SHIBYTE(v32) < 0)
    {
      xpc_object_t v14 = __dst[0];
LABEL_42:
      operator delete(v14);
    }
  }
  else
  {
    if (v8)
    {
      xpc_object_t v10 = "dis";
      if (v3) {
        xpc_object_t v10 = "en";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v10;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "Requested to %sable CSI logs", buf, 0xCu);
    }
    xpc_object_t v11 = v22;
    sub_100058DB0(buf, "CSILog");
    (*(void (**)(void *, unsigned char *, BOOL))(*(void *)v11 + 216))(v11, buf, v3);
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    xpc_object_t v12 = v22;
    sub_100058DB0(buf, "CSILog");
    sub_100058DB0(__dst, "enableGlobalLogging");
    sub_100058DB0(__p, "false");
    (*(void (**)(void *, unsigned char *, void **, void **))(*(void *)v12 + 224))(v12, buf, __dst, __p);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__dst[0]);
    }
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v13 = v22;
    sub_100058DB0(buf, "CSILog");
    sub_100058DB0(__dst, "history");
    if (v3)
    {
      if (SHIBYTE(v28) < 0)
      {
        sub_10004FC84(__p, v27[0], (unint64_t)v27[1]);
      }
      else
      {
        *(_OWORD *)std::string __p = *(_OWORD *)v27;
        uint64_t v30 = v28;
      }
    }
    else
    {
      sub_100058DB0(__p, "-1");
    }
    (*(void (**)(void *, unsigned char *, void **, void **))(*(void *)v13 + 224))(v13, buf, __dst, __p);
    if (SHIBYTE(v30) < 0) {
      operator delete(__p[0]);
    }
    if (SHIBYTE(v32) < 0) {
      operator delete(__dst[0]);
    }
    if ((v37[3] & 0x80000000) != 0)
    {
      xpc_object_t v14 = *(void **)buf;
      goto LABEL_42;
    }
  }
  if (v23) {
    sub_10004D2C8(v23);
  }
  BOOL v15 = sub_100E1EFE0(a2, @"enableDIAG");
  __p[0] = 0;
  __p[1] = 0;
  uint64_t v30 = 0;
  sub_100058DB0(__p, "256");
  sub_100E1F0C4(a2, @"diagSize");
  uint64_t v22 = 0;
  char v23 = 0;
  uint64_t v24 = 0;
  sub_100058DB0(&v22, "false");
  sub_100E1F0C4(a2, @"enabledDuringSleep");
  if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
  {
    xpc_object_t v16 = __p;
    if (v30 < 0) {
      xpc_object_t v16 = (void **)__p[0];
    }
    char v17 = &v22;
    if (v24 < 0) {
      char v17 = v22;
    }
    *(_DWORD *)long long buf = 67109634;
    *(_DWORD *)&uint8_t buf[4] = v15;
    *(_WORD *)&uint8_t buf[8] = 2080;
    *(void *)&buf[10] = v16;
    __int16 v36 = 2080;
    *(void *)uint64_t v37 = v17;
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "AWD Log Dict - BasebandTrace - (%d, %s, %s)", buf, 0x1Cu);
  }
  if (!v4)
  {
    if (os_log_type_enabled((os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT))
    {
      xpc_object_t v18 = "disable";
      if (v15) {
        xpc_object_t v18 = "enable";
      }
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v18;
      _os_log_impl((void *)&_mh_execute_header, (os_log_t)&_os_log_default, OS_LOG_TYPE_DEFAULT, "AWD Log Callback: Requested to %s Baseband logging", buf, 0xCu);
    }
    uint64_t v33 = 0;
    uint64_t v34 = 0;
    sub_100068A94(&v33);
    uint64_t v19 = v33;
    sub_100058DB0(buf, "BasebandTrace");
    sub_100058DB0(__dst, "enabled_during_sleep");
    (*(void (**)(uint64_t, unsigned char *, void **, void **))(*(void *)v19 + 224))(v19, buf, __dst, &v22);
    if (SHIBYTE(v32) < 0) {
      operator delete(__dst[0]);
    }
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v20 = v33;
    sub_100058DB0(buf, "BasebandTrace");
    sub_100058DB0(__dst, "history");
    (*(void (**)(uint64_t, unsigned char *, void **, void **))(*(void *)v20 + 224))(v20, buf, __dst, __p);
    if (SHIBYTE(v32) < 0) {
      operator delete(__dst[0]);
    }
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    uint64_t v21 = v33;
    sub_100058DB0(buf, "BasebandTrace");
    (*(void (**)(uint64_t, unsigned char *, BOOL))(*(void *)v21 + 216))(v21, buf, v15);
    if ((v37[3] & 0x80000000) != 0) {
      operator delete(*(void **)buf);
    }
    if (v34) {
      sub_10004D2C8(v34);
    }
  }
  if (SHIBYTE(v24) < 0) {
    operator delete(v22);
  }
  if (SHIBYTE(v30) < 0) {
    operator delete(__p[0]);
  }
  if (SHIBYTE(v26) < 0) {
    operator delete(v25[0]);
  }
  if (SHIBYTE(v28) < 0) {
    operator delete(v27[0]);
  }
}

void sub_100E1EE60(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *a10, std::__shared_weak_count *a11, int a12, __int16 a13, char a14, char a15, void *__p, uint64_t a17, int a18, __int16 a19, char a20,char a21,void *a22,uint64_t a23,int a24,__int16 a25,char a26,char a27,void *a28,uint64_t a29,int a30,__int16 a31,char a32,char a33,uint64_t a34,void *a35,uint64_t a36,int a37,__int16 a38,char a39,char a40)
{
  if (a11) {
    sub_10004D2C8(a11);
  }
  if (a21 < 0) {
    operator delete(__p);
  }
  if (a27 < 0) {
    operator delete(a22);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E1EFD8()
{
}

BOOL sub_100E1EFE0(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFGetTypeID(Value);
    CFStringGetTypeID();
  }
  std::string __p = 0;
  uint64_t v8 = 0;
  uint64_t v9 = 0;
  sub_100058DB0(&__p, "false");
  ctu::cf::assign();
  uint64_t v3 = HIBYTE(v9);
  if (v9 < 0) {
    uint64_t v3 = v8;
  }
  if (v3 == 4)
  {
    p_p = __p;
    if (v9 >= 0) {
      p_p = &__p;
    }
    BOOL v5 = *p_p == 1702195828;
    if (SHIBYTE(v9) < 0) {
      goto LABEL_11;
    }
  }
  else
  {
    BOOL v5 = 0;
    if (SHIBYTE(v9) < 0) {
LABEL_11:
    }
      operator delete(__p);
  }
  return v5;
}

void sub_100E1F0A8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(exception_object);
}

uint64_t sub_100E1F0C4(const __CFDictionary *a1, const void *a2)
{
  CFArrayRef Value = CFDictionaryGetValue(a1, a2);
  if (Value)
  {
    CFGetTypeID(Value);
    CFStringGetTypeID();
  }

  return ctu::cf::assign();
}

id sub_100E1F128(uint64_t a1)
{
  uint64_t v1 = [&off_101AE8060 objectForKey:a1];

  return v1;
}

void sub_100E1F678(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, _Unwind_Exception *exception_object, void *a11, void *a12)
{
  _Unwind_Resume(a1);
}

void sub_100E1F9D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

BOOL sub_100E1FAA4(void *a1)
{
  id v1 = a1;
  BOOL v2 = v1;
  if (v1) {
    BOOL v3 = [v1 indexOfObject:@"hidden"] != (id)0x7FFFFFFFFFFFFFFFLL
  }
      || [v2 indexOfObject:@"SBInternalAppTag"] != (id)0x7FFFFFFFFFFFFFFFLL;
  else {
    BOOL v3 = 0;
  }

  return v3;
}

void sub_100E1FB1C(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E1FC98(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E1FE94(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E202A0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, void *a10, void *a11, void *a12, void *a13, void *a14, void *a15, void *a16, void *a17, void *a18, void *a19, char a20)
{
  if (a20)
  {
  }
  if ((*(_DWORD *)(v25 - 84) & 1) == 0) {

  }
  _Unwind_Resume(a1);
}

void sub_100E204BC(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E205E0(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E206D4(_Unwind_Exception *a1)
{
  _Unwind_Resume(a1);
}

void sub_100E207A4(id a1)
{
  id v1 = NSClassFromString(@"ACXDeviceConnection");
  byte_101B12C18 = v1 != 0;
}

void sub_100E207E8()
{
}

void sub_100E20854()
{
}

void *sub_100E20878(void *a1, void *a2)
{
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v6, kCtLoggingSystemName, "DATA.tech.cnf");
  sub_100E2095C((uint64_t)(a1 + 1), &v6);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v6);
  *a1 = off_101A5F3E8;
  a1[5] = *a2;
  uint64_t v4 = a2[1];
  a1[6] = v4;
  if (v4) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v4 + 8), 1uLL, memory_order_relaxed);
  }
  a1[7] = 0;
  a1[8] = 0;
  a1[9] = 0;
  return a1;
}

void sub_100E20938(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  TechDataConfigServiceInterface::~TechDataConfigServiceInterface(v9);
  _Unwind_Resume(a1);
}

uint64_t sub_100E2095C(uint64_t a1, const OsLogContext *a2)
{
  *(void *)a1 = 0;
  *(void *)(a1 + 8) = 0;
  *(_DWORD *)(a1 + 16) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)v4, a2);
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 24), (const ctu::OsLogLogger *)v4);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)v4);
  return a1;
}

void sub_100E209AC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)va);
  uint64_t v4 = *(std::__shared_weak_count **)(v2 + 8);
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }
  _Unwind_Resume(a1);
}

void sub_100E209D4(void *a1)
{
  *a1 = off_101A5F3E8;
  uint64_t v2 = a1[7];
  if (v2)
  {
    uint64_t v3 = a1[8];
    uint64_t v4 = (void *)a1[7];
    if (v3 != v2)
    {
      do
      {
        BOOL v5 = *(std::__shared_weak_count **)(v3 - 8);
        if (v5) {
          sub_10004D2C8(v5);
        }
        v3 -= 16;
      }
      while (v3 != v2);
      uint64_t v4 = (void *)a1[7];
    }
    a1[8] = v2;
    operator delete(v4);
  }
  OsLogContext v6 = (std::__shared_weak_count *)a1[6];
  if (v6) {
    sub_10004D2C8(v6);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 4));
  uint64_t v7 = (std::__shared_weak_count *)a1[2];
  if (v7) {
    std::__shared_weak_count::__release_weak(v7);
  }

  TechDataConfigServiceInterface::~TechDataConfigServiceInterface((TechDataConfigServiceInterface *)a1);
}

void sub_100E20A8C(void *a1)
{
  sub_100E209D4(a1);

  operator delete();
}

void sub_100E20AC4(uint64_t a1, long long *a2)
{
  long long v32 = *a2;
  uint64_t v3 = (std::__shared_weak_count *)*((void *)a2 + 1);
  if (v3) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(*((void *)a2 + 1) + 8), 1uLL, memory_order_relaxed);
  }
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  v36[0] = 0;
  v36[1] = 0;
  uint64_t v37 = 0;
  (*(void (**)(void **__return_ptr, void))(*(void *)v32 + 16))(v36, v32);
  int v4 = (*(uint64_t (**)(void))(*(void *)v32 + 32))(v32);
  BOOL v5 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    OsLogContext v6 = (void *)HIBYTE(v37);
    uint64_t v7 = (void **)v36[0];
    uint64_t v8 = v36[1];
    uint64_t v9 = subscriber::asString();
    if ((char)v6 >= 0) {
      xpc_object_t v10 = v6;
    }
    else {
      xpc_object_t v10 = v8;
    }
    xpc_object_t v11 = v36;
    if ((char)v6 < 0) {
      xpc_object_t v11 = v7;
    }
    if (v10) {
      xpc_object_t v12 = (const char *)v11;
    }
    else {
      xpc_object_t v12 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315394;
    *(void *)&uint8_t buf[4] = v12;
    *(_WORD *)&unsigned char buf[12] = 2080;
    *(void *)&buf[14] = v9;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I Adding config for personalityId: %s, slot=%s", buf, 0x16u);
  }
  memset(buf, 0, 32);
  if (SHIBYTE(v37) < 0)
  {
    sub_10004FC84(buf, v36[0], (unint64_t)v36[1]);
  }
  else
  {
    *(_OWORD *)long long buf = *(_OWORD *)v36;
    *(void *)&uint8_t buf[16] = v37;
  }
  *(_DWORD *)&uint8_t buf[24] = v4;
  unint64_t v13 = *(void *)(a1 + 56);
  unint64_t v14 = *(void *)(a1 + 64);
  if ((char)buf[23] < 0)
  {
    sub_10004FC84(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
    int v4 = *(_DWORD *)&buf[24];
  }
  else
  {
    *(_OWORD *)std::string __dst = *(_OWORD *)buf;
    uint64_t v34 = *(void *)&buf[16];
  }
  int v35 = v4;
  if (v13 != v14)
  {
    while (1)
    {
      (*(void (**)(void **__return_ptr))(**(void **)v13 + 16))(__p);
      BOOL v15 = sub_10001D294((unsigned __int8 *)__p, (unsigned __int8 *)__dst)
         && (*(unsigned int (**)(void))(**(void **)v13 + 32))() == v35;
      if (v39 < 0) {
        operator delete(__p[0]);
      }
      if (v15) {
        break;
      }
      v13 += 16;
      if (v13 == v14)
      {
        unint64_t v13 = v14;
        break;
      }
    }
  }
  if (SHIBYTE(v34) < 0) {
    operator delete(__dst[0]);
  }
  xpc_object_t v16 = *(long long **)(a1 + 64);
  if (v16 != (long long *)v13)
  {
    unint64_t v13 = sub_1009ED218((long long *)(v13 + 16), v16, v13);
    for (uint64_t i = *(void *)(a1 + 64); i != v13; i -= 16)
    {
      xpc_object_t v18 = *(std::__shared_weak_count **)(i - 8);
      if (v18) {
        sub_10004D2C8(v18);
      }
    }
    *(void *)(a1 + 64) = v13;
  }
  unint64_t v19 = *(void *)(a1 + 72);
  if (v13 >= v19)
  {
    uint64_t v21 = *(char **)(a1 + 56);
    uint64_t v22 = (uint64_t)(v13 - (void)v21) >> 4;
    unint64_t v23 = v22 + 1;
    if ((unint64_t)(v22 + 1) >> 60) {
      sub_10006A748();
    }
    uint64_t v24 = v19 - (void)v21;
    if (v24 >> 3 > v23) {
      unint64_t v23 = v24 >> 3;
    }
    if ((unint64_t)v24 >= 0x7FFFFFFFFFFFFFF0) {
      unint64_t v25 = 0xFFFFFFFFFFFFFFFLL;
    }
    else {
      unint64_t v25 = v23;
    }
    if (v25 >> 60) {
      sub_10006A7CC();
    }
    uint64_t v26 = (char *)operator new(16 * v25);
    uint64_t v27 = &v26[16 * v22];
    *(_OWORD *)uint64_t v27 = v32;
    if (v3)
    {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
      uint64_t v21 = *(char **)(a1 + 56);
      unint64_t v13 = *(void *)(a1 + 64);
    }
    uint64_t v28 = &v26[16 * v25];
    uint64_t v20 = v27 + 16;
    if ((char *)v13 == v21)
    {
      *(void *)(a1 + 56) = v27;
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v28;
    }
    else
    {
      do
      {
        long long v29 = *(_OWORD *)(v13 - 16);
        v13 -= 16;
        *((_OWORD *)v27 - 1) = v29;
        v27 -= 16;
        *(void *)unint64_t v13 = 0;
        *(void *)(v13 + 8) = 0;
      }
      while ((char *)v13 != v21);
      uint64_t v21 = *(char **)(a1 + 56);
      uint64_t v30 = *(char **)(a1 + 64);
      *(void *)(a1 + 56) = v27;
      *(void *)(a1 + 64) = v20;
      *(void *)(a1 + 72) = v28;
      while (v30 != v21)
      {
        uint64_t v31 = (std::__shared_weak_count *)*((void *)v30 - 1);
        if (v31) {
          sub_10004D2C8(v31);
        }
        v30 -= 16;
      }
    }
    if (v21) {
      operator delete(v21);
    }
  }
  else
  {
    *(void *)unint64_t v13 = v32;
    *(void *)(v13 + 8) = v3;
    if (v3) {
      atomic_fetch_add_explicit(&v3->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    uint64_t v20 = (_OWORD *)(v13 + 16);
  }
  *(void *)(a1 + 64) = v20;
  if ((char)buf[23] < 0) {
    operator delete(*(void **)buf);
  }
  if (SHIBYTE(v37) < 0) {
    operator delete(v36[0]);
  }
  os_unfair_lock_unlock((os_unfair_lock_t)(a1 + 24));
  if (v3) {
    sub_10004D2C8(v3);
  }
}

void sub_100E20EE8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, uint64_t a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,void *a24,uint64_t a25,int a26,__int16 a27,char a28,char a29,void *__p,uint64_t a31,int a32,__int16 a33,char a34,char a35)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  if (a35 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_10006A6AC(exception_object);
}

void sub_100E20F7C(os_unfair_lock_s *a1, long long *a2)
{
  if (*((char *)a2 + 23) < 0)
  {
    sub_10004FC84(&v16, *(void **)a2, *((void *)a2 + 1));
  }
  else
  {
    long long v16 = *a2;
    uint64_t v17 = *((void *)a2 + 2);
  }
  uint64_t v3 = a1 + 6;
  os_unfair_lock_lock(v3);
  int v4 = *(NSObject **)&a1[8]._os_unfair_lock_opaque;
  if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v5 = HIBYTE(v17);
    if (v17 >= 0)
    {
      OsLogContext v6 = (const char *)&v16;
    }
    else
    {
      uint64_t v5 = *((void *)&v16 + 1);
      OsLogContext v6 = (const char *)v16;
    }
    if (v5) {
      uint64_t v7 = v6;
    }
    else {
      uint64_t v7 = "<invalid>";
    }
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v7;
    _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I Removing config for personalityId: %s", buf, 0xCu);
  }
  uint64_t v8 = *(long long **)&a1[14]._os_unfair_lock_opaque;
  uint64_t v9 = *(long long **)&a1[16]._os_unfair_lock_opaque;
  if (SHIBYTE(v17) < 0)
  {
    sub_10004FC84(__p, (void *)v16, *((unint64_t *)&v16 + 1));
  }
  else
  {
    *(_OWORD *)std::string __p = v16;
    uint64_t v19 = v17;
  }
  if (v8 != v9)
  {
    while (1)
    {
      (*(void (**)(unsigned char *__return_ptr))(**(void **)v8 + 16))(buf);
      BOOL v10 = sub_10001D294(buf, (unsigned __int8 *)__p);
      if (v21 < 0) {
        operator delete(*(void **)buf);
      }
      if (v10) {
        break;
      }
      if (++v8 == v9)
      {
        uint64_t v8 = v9;
        break;
      }
    }
  }
  if (SHIBYTE(v19) < 0) {
    operator delete(__p[0]);
  }
  xpc_object_t v11 = *(long long **)&a1[16]._os_unfair_lock_opaque;
  if (v11 != v8)
  {
    uint64_t v12 = sub_1009ED218(v8 + 1, v11, (uint64_t)v8);
    for (uint64_t i = *(void *)&a1[16]._os_unfair_lock_opaque; i != v12; i -= 16)
    {
      unint64_t v14 = *(std::__shared_weak_count **)(i - 8);
      if (v14) {
        sub_10004D2C8(v14);
      }
    }
    *(void *)&a1[16]._os_unfair_lock_opaque = v12;
  }
  os_unfair_lock_unlock(v3);
  if (SHIBYTE(v17) < 0) {
    operator delete((void *)v16);
  }
}

void sub_100E21198(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, void *__p, uint64_t a14, int a15, __int16 a16, char a17, char a18)
{
  if (!a2) {
    _Unwind_Resume(exception_object);
  }
  sub_10006A6AC(exception_object);
}

void sub_100E211D4(uint64_t a1@<X0>, int a2@<W1>, uint64_t *a3@<X8>)
{
  OsLogContext v6 = (os_unfair_lock_s *)(a1 + 24);
  os_unfair_lock_lock((os_unfair_lock_t)(a1 + 24));
  sub_10000F91C(a3, (void *)a1, a2);

  os_unfair_lock_unlock(v6);
}

void sub_100E21238(void *a1@<X8>)
{
  *a1 = 0;
  a1[1] = 0;
  operator new();
}

void sub_100E212AC()
{
}

uint64_t sub_100E212D0(uint64_t a1, void *a2, uint64_t *a3)
{
  uint64_t v6 = *a3;
  if (!*a3) {
    goto LABEL_9;
  }
  if (*(unsigned char *)(v6 + 49) == 1)
  {
    uint64_t v9 = "DATA.tech.cnf.T";
    goto LABEL_11;
  }
  if (*(unsigned char *)(v6 + 49))
  {
LABEL_9:
    uint64_t v9 = "DATA.tech.cnf";
    goto LABEL_11;
  }
  int v7 = *(_DWORD *)(v6 + 52);
  uint64_t v8 = "DATA.tech.cnf";
  if (v7 == 2) {
    uint64_t v8 = "DATA.tech.cnf.2";
  }
  if (v7 == 1) {
    uint64_t v9 = "DATA.tech.cnf.1";
  }
  else {
    uint64_t v9 = v8;
  }
LABEL_11:
  ctu::OsLogContext::OsLogContext((ctu::OsLogContext *)&v14, kCtLoggingSystemName, v9);
  BOOL v10 = v15;
  *(void *)(a1 + 8) = 0;
  *(void *)(a1 + 16) = 0;
  *(_DWORD *)(a1 + 24) = 0;
  ctu::OsLogLogger::OsLogLogger((ctu::OsLogLogger *)(a1 + 32), v10);
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&v14);
  *(void *)a1 = off_101A5F428;
  *(void *)(a1 + 40) = *a2;
  uint64_t v11 = a2[1];
  *(void *)(a1 + 48) = v11;
  if (v11) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v11 + 8), 1uLL, memory_order_relaxed);
  }
  *(void *)(a1 + 56) = *a3;
  uint64_t v12 = a3[1];
  *(void *)(a1 + 64) = v12;
  if (v12) {
    atomic_fetch_add_explicit((atomic_ullong *volatile)(v12 + 8), 1uLL, memory_order_relaxed);
  }
  return a1;
}

void sub_100E21410(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v11 = (std::__shared_weak_count *)*((void *)v9 + 2);
  if (v11) {
    std::__shared_weak_count::__release_weak(v11);
  }
  ctu::OsLogContext::~OsLogContext((ctu::OsLogContext *)&a9);
  TechDataConfigInterface::~TechDataConfigInterface(v9);
  _Unwind_Resume(a1);
}

void sub_100E21440(void *a1)
{
  *a1 = off_101A5F428;
  uint64_t v2 = (std::__shared_weak_count *)a1[8];
  if (v2) {
    sub_10004D2C8(v2);
  }
  uint64_t v3 = (std::__shared_weak_count *)a1[6];
  if (v3) {
    sub_10004D2C8(v3);
  }
  ctu::OsLogLogger::~OsLogLogger((ctu::OsLogLogger *)(a1 + 4));
  int v4 = (std::__shared_weak_count *)a1[2];
  if (v4) {
    std::__shared_weak_count::__release_weak(v4);
  }

  TechDataConfigInterface::~TechDataConfigInterface((TechDataConfigInterface *)a1);
}

void sub_100E214C0(void *a1)
{
  sub_100E21440(a1);

  operator delete();
}

void *sub_100E214F8@<X0>(void *result@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = result[7];
  if (*(char *)(v2 + 47) < 0) {
    return sub_10004FC84((unsigned char *)a2, *(void **)(v2 + 24), *(void *)(v2 + 32));
  }
  long long v3 = *(_OWORD *)(v2 + 24);
  *(void *)(a2 + 16) = *(void *)(v2 + 40);
  *(_OWORD *)a2 = v3;
  return result;
}

uint64_t sub_100E21524(uint64_t a1)
{
  return *(unsigned __int8 *)(*(void *)(a1 + 56) + 49);
}

const void **sub_100E21530@<X0>(os_log_t *a1@<X0>, const char *a2@<X2>, DataUtils **a3@<X8>)
{
  BOOL v15 = 0;
  uint64_t v5 = a1 + 4;
  DataUtils::loadPlistFromBundleResource((uint64_t *)&v15, (DataUtils *)(a1 + 4), (const ctu::OsLogLogger *)"default_tech", a2);
  uint64_t v6 = *v5;
  if (os_log_type_enabled(*v5, OS_LOG_TYPE_DEFAULT))
  {
    if (v15) {
      int v7 = sub_1000C06D0;
    }
    else {
      int v7 = 0;
    }
    uint64_t v8 = asStringBool(v7 != 0);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v17 = (DataUtils *)v8;
    _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I iwlanSettingsDict: %s", buf, 0xCu);
  }
  uint64_t v14 = 0;
  ((void (*)(__CFDictionary **__return_ptr, os_log_t *, uint64_t))(*a1)[5].isa)(&v14, a1, 1);
  char v10 = DataUtils::deepMergeDictionary(v15, v14, v9);
  uint64_t v11 = *v5;
  BOOL v12 = os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT);
  if (v10)
  {
    if (v12)
    {
      *(_DWORD *)long long buf = 138412290;
      uint64_t v17 = v15;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Merged Tech Plist: %@", buf, 0xCu);
    }
    *a3 = v15;
    BOOL v15 = 0;
  }
  else
  {
    if (v12)
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, "#I Merge Tech Plist failed", buf, 2u);
    }
    *a3 = 0;
  }
  sub_100057D78((const void **)&v14);
  return sub_10005717C((const void **)&v15);
}

void sub_100E216FC(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_10005717C((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E2172C(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2) {
    goto LABEL_9;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"SupportIpsecDscpCopy");
  BOOL v4 = (BOOL)Value;
  if (!Value) {
    goto LABEL_10;
  }
  CFTypeID v5 = CFGetTypeID(Value);
  if (v5 != CFBooleanGetTypeID())
  {
LABEL_9:
    BOOL v4 = 0;
    goto LABEL_10;
  }
  buf[0] = 0;
  ctu::cf::assign((ctu::cf *)buf, (BOOL *)v4, v6);
  int v7 = buf[0];
  BOOL v4 = buf[0] != 0;
  uint64_t v8 = a1[4];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v9 = asStringBool(v7 != 0);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v13 = v9;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I got SupportIpsecDscpCopy value as %s.", buf, 0xCu);
  }
LABEL_10:
  sub_100057D78((const void **)&theDict);
  return v4;
}

void sub_100E21888(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E218A8(Registry **a1)
{
  std::string __p = 0;
  uint64_t v24 = 0;
  uint64_t v25 = 0;
  uint64_t v2 = a1 + 5;
  PersonalityIdFromSlotIdEx();
  ServiceMap = (std::mutex *)Registry::getServiceMap(v3, *v2);
  CFTypeID v5 = ServiceMap;
  if (v6 < 0)
  {
    int v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  char v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10 && (uint64_t v11 = (std::__shared_weak_count *)v10[4]) != 0)
  {
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    std::mutex::unlock(v5);
    atomic_fetch_add_explicit(&v11->__shared_owners_, 1uLL, memory_order_relaxed);
    sub_10004D2C8(v11);
    char v12 = 0;
  }
  else
  {
    std::mutex::unlock(v5);
    uint64_t v11 = 0;
    char v12 = 1;
  }
  if ((v12 & 1) == 0) {
    sub_10004D2C8(v11);
  }
  CFDictionaryRef theDict = 0;
  (*((void (**)(CFDictionaryRef *__return_ptr, Registry **, uint64_t))*a1 + 5))(&theDict, a1, 1);
  if (theDict) {
    uint64_t v13 = sub_100080778;
  }
  else {
    uint64_t v13 = 0;
  }
  if (!v13) {
    goto LABEL_18;
  }
  CFArrayRef Value = CFDictionaryGetValue(theDict, @"SuppressSAInOverCellHandover");
  BOOL v15 = (BOOL)Value;
  if (!Value) {
    goto LABEL_19;
  }
  CFTypeID v16 = CFGetTypeID(Value);
  if (v16 == CFBooleanGetTypeID())
  {
    buf[0] = 0;
    ctu::cf::assign((ctu::cf *)buf, (BOOL *)v15, v17);
    int v18 = buf[0];
    BOOL v15 = buf[0] != 0;
    uint64_t v19 = a1[4];
    if (os_log_type_enabled(v19, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v20 = asStringBool(v18 != 0);
      *(_DWORD *)long long buf = 136315138;
      *(void *)&uint8_t buf[4] = v20;
      _os_log_impl((void *)&_mh_execute_header, v19, OS_LOG_TYPE_DEFAULT, "#I got SuppressSAInOverCellHandover value as %s.", buf, 0xCu);
    }
  }
  else
  {
LABEL_18:
    BOOL v15 = 0;
  }
LABEL_19:
  sub_100057D78((const void **)&theDict);
  if (SHIBYTE(v25) < 0) {
    operator delete(__p);
  }
  return v15;
}

void sub_100E21BB8(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, void *__p, uint64_t a11, int a12, __int16 a13, char a14, char a15)
{
  if (a15 < 0) {
    operator delete(__p);
  }
  _Unwind_Resume(a1);
}

BOOL sub_100E21C18(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    id v1 = sub_100080778;
  }
  else {
    id v1 = 0;
  }
  if (v1)
  {
    CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"AllowMOBIKERequest");
    BOOL v4 = Value;
    if (Value)
    {
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID()) {
        uint64_t v6 = v4;
      }
      else {
        uint64_t v6 = 0;
      }
    }
    else
    {
      uint64_t v6 = 0;
    }
    char v10 = 1;
    ctu::cf::assign((ctu::cf *)&v10, v6, v3);
    BOOL v7 = v10 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_100057D78((const void **)&theDict);
  return v7;
}

void sub_100E21CF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL sub_100E21D04(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2)
  {
    CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"UseVirtualPlmnForLocalBreakout");
    CFTypeID v5 = Value;
    if (Value)
    {
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFBooleanGetTypeID()) {
        BOOL v7 = v5;
      }
      else {
        BOOL v7 = 0;
      }
    }
    else
    {
      BOOL v7 = 0;
    }
    buf[0] = 0;
    ctu::cf::assign((ctu::cf *)buf, v7, v4);
    int v9 = buf[0];
    BOOL v8 = buf[0] != 0;
    char v10 = a1[4];
    if (os_log_type_enabled(v10, OS_LOG_TYPE_DEFAULT))
    {
      uint64_t v11 = asStringBool(v9 != 0);
      *(_DWORD *)long long buf = 136315138;
      uint64_t v15 = v11;
      _os_log_impl((void *)&_mh_execute_header, v10, OS_LOG_TYPE_DEFAULT, "#I got UseVirtualPlmnForLocalBreakout value as %s.", buf, 0xCu);
    }
  }
  else
  {
    BOOL v8 = 0;
  }
  sub_100057D78((const void **)&theDict);
  return v8;
}

void sub_100E21E64(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E21E88(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    id v1 = sub_100080778;
  }
  else {
    id v1 = 0;
  }
  if (v1)
  {
    CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"EmergencyRemoteIdRequired");
    CFBooleanRef v4 = Value;
    if (Value)
    {
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFBooleanGetTypeID()) {
        CFTypeID v6 = v4;
      }
      else {
        CFTypeID v6 = 0;
      }
    }
    else
    {
      CFTypeID v6 = 0;
    }
    char v10 = 0;
    ctu::cf::assign((ctu::cf *)&v10, v6, v3);
    BOOL v7 = v10 != 0;
  }
  else
  {
    BOOL v7 = 0;
  }
  sub_100057D78((const void **)&theDict);
  return v7;
}

void sub_100E21F5C(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

const void **sub_100E21F70@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  a2[1] = 0;
  CFBooleanRef v4 = a2 + 1;
  a2[2] = 0;
  *a2 = a2 + 1;
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    CFTypeID v5 = sub_100080778;
  }
  else {
    CFTypeID v5 = 0;
  }
  if (v5)
  {
    CFArrayRef Value = CFDictionaryGetValue(theDict, @"PdnErrorsToBlockHandover");
    if (Value)
    {
      CFTypeID v7 = CFGetTypeID(Value);
      if (v7 == CFStringGetTypeID())
      {
        HIBYTE(v17) = 0;
        LOBYTE(v16) = 0;
        ctu::cf::assign();
        *(_OWORD *)int v18 = v16;
        uint64_t v19 = v17;
        uint64_t v17 = 0;
        long long v16 = 0uLL;
        BOOL v8 = a1[4];
        if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
        {
          long long v21 = 0uLL;
          uint64_t v22 = 0;
          ctu::cf::assign();
          *(_OWORD *)std::string __p = v21;
          uint64_t v15 = v22;
          int v9 = (void **)v18[0];
          char v10 = __p;
          if (v22 < 0) {
            char v10 = (void **)v21;
          }
          if (v19 >= 0) {
            int v9 = v18;
          }
          *(_DWORD *)long long buf = 136315394;
          uint64_t v24 = v10;
          __int16 v25 = 2080;
          uint64_t v26 = v9;
          _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I got %s value as \"%s\".", buf, 0x16u);
          if (SHIBYTE(v15) < 0) {
            operator delete(__p[0]);
          }
        }
        sub_100953A04((uint64_t *)v18, (uint64_t)&v21);
        sub_1000346F8((uint64_t)a2, (void *)a2[1]);
        uint64_t v11 = (void *)*((void *)&v21 + 1);
        *a2 = v21;
        a2[1] = v11;
        uint64_t v12 = v22;
        a2[2] = v22;
        if (v12)
        {
          _DWORD v11[2] = v4;
          *(void *)&long long v21 = (char *)&v21 + 8;
          *((void *)&v21 + 1) = 0;
          uint64_t v22 = 0;
          uint64_t v11 = 0;
        }
        else
        {
          *a2 = v4;
        }
        sub_1000346F8((uint64_t)&v21, v11);
        if (SHIBYTE(v19) < 0) {
          operator delete(v18[0]);
        }
      }
    }
  }
  return sub_100057D78((const void **)&theDict);
}

void sub_100E221B0(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, void *a18, uint64_t a19, int a20,__int16 a21,char a22,char a23,uint64_t a24,const void *a25,void *__p,uint64_t a27,int a28,__int16 a29,char a30,char a31)
{
  if (a31 < 0) {
    operator delete(__p);
  }
  if (a23 < 0) {
    operator delete(a18);
  }
  sub_100057D78(&a25);
  sub_1000346F8(v31, *(void **)(v31 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100E22220(uint64_t a1, int a2)
{
  std::string __p = 0;
  long long v21 = 0uLL;
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    CFBooleanRef v3 = sub_100080778;
  }
  else {
    CFBooleanRef v3 = 0;
  }
  if (!v3) {
    goto LABEL_28;
  }
  CFDictionaryRef Value = (const __CFDictionary *)CFDictionaryGetValue(theDict, @"iRatPolicies");
  CFDictionaryRef v5 = Value;
  if (!Value) {
    goto LABEL_28;
  }
  CFTypeID v6 = CFGetTypeID(Value);
  if (v6 != CFDictionaryGetTypeID()) {
    goto LABEL_28;
  }
  if (a2)
  {
    CFTypeID v7 = CFDictionaryGetValue(v5, @"PreferredTechnologyRoaming");
    if (!v7) {
      goto LABEL_12;
    }
  }
  else
  {
    CFTypeID v7 = CFDictionaryGetValue(v5, @"PreferredTechnology");
    if (!v7) {
      goto LABEL_12;
    }
  }
  CFGetTypeID(v7);
  CFStringGetTypeID();
LABEL_12:
  uint64_t v22 = 0;
  long long v23 = 0uLL;
  ctu::cf::assign();
  *(void *)((char *)&v21 + 7) = *(void *)((char *)&v23 + 7);
  uint64_t v8 = v23;
  uint64_t v9 = HIBYTE(v23);
  char v10 = HIBYTE(v23);
  std::string __p = v22;
  *(void *)&long long v21 = v23;
  HIBYTE(v21) = HIBYTE(v23);
  if (v23 >= 0) {
    uint64_t v11 = (void **)((char *)&__p + HIBYTE(v23));
  }
  else {
    uint64_t v11 = (void **)&v22[v23];
  }
  if (v23 >= 0) {
    p_p = &__p;
  }
  else {
    p_p = (void **)v22;
  }
  if (p_p != v11)
  {
    do
    {
      *(unsigned char *)p_p = __tolower(*(char *)p_p);
      p_p = (void **)((char *)p_p + 1);
    }
    while (p_p != v11);
    uint64_t v9 = HIBYTE(v21);
    uint64_t v8 = v21;
    char v10 = HIBYTE(v21);
  }
  if (v10 < 0) {
    uint64_t v9 = v8;
  }
  if (v9 != 3)
  {
    if (v9 == 8)
    {
      uint64_t v13 = __p;
      if (v10 >= 0) {
        uint64_t v13 = &__p;
      }
      uint64_t v14 = 2 * (*v13 == 0x72616C756C6C6563);
      goto LABEL_29;
    }
LABEL_28:
    uint64_t v14 = 0;
    goto LABEL_29;
  }
  long long v16 = (unsigned __int16 *)__p;
  if (v10 >= 0) {
    long long v16 = (unsigned __int16 *)&__p;
  }
  unsigned int v17 = bswap32(*v16) >> 16;
  if (v17 == 26989)
  {
    int v18 = *((unsigned __int8 *)v16 + 2) - 115;
  }
  else if (v17 < 0x696D)
  {
    int v18 = -1;
  }
  else
  {
    int v18 = 1;
  }
  uint64_t v14 = v18 == 0;
LABEL_29:
  sub_100057D78((const void **)&theDict);
  if (SHIBYTE(v21) < 0) {
    operator delete(__p);
  }
  return v14;
}

void sub_100E22460(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, const void *a10, void *a11, uint64_t a12, int a13, __int16 a14, char a15, char a16, void *__p, uint64_t a18, int a19, __int16 a20,char a21,char a22)
{
  if (a22 < 0) {
    operator delete(__p);
  }
  sub_100057D78(&a10);
  if (a16 < 0) {
    operator delete(a11);
  }
  _Unwind_Resume(a1);
}

void sub_100E224A4(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_100E22620((const void **)a2, a1, @"ActivationBackoffErrors");
  if (!*(void *)(a2 + 16))
  {
    CFBooleanRef v4 = a1[4];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I got empty list for ActivationBackoffErrors, use NO_APN_SUBSCRIPTION by default", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 9002;
    sub_100E24030((uint64_t **)a2, (int *)&__p, (int *)__p.__r_.__value_.__r.__words + 1);
  }
  CFDictionaryRef v5 = a1[4];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_100E079FC(*(void *)a2, (void *)(a2 + 8), ",", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v9 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I NeedBackoffErrorCodes: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100E22604(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

const void **sub_100E22620(const void **result, void *a2, const void *a3)
{
  result[1] = 0;
  CFBooleanRef v3 = result + 1;
  result[2] = 0;
  *xpc_object_t result = result + 1;
  if (a3)
  {
    CFTypeID v6 = (uint64_t **)result;
    CFDictionaryRef v46 = 0;
    (*(void (**)(const __CFDictionary **__return_ptr, void *, uint64_t))(*a2 + 40))(&v46, a2, 1);
    if (v46) {
      CFTypeID v7 = sub_100080778;
    }
    else {
      CFTypeID v7 = 0;
    }
    if (v7)
    {
      CFArrayRef Value = (const __CFArray *)CFDictionaryGetValue(v46, a3);
      CFArrayRef v9 = Value;
      if (Value)
      {
        CFTypeID v10 = CFGetTypeID(Value);
        if (v10 == CFArrayGetTypeID())
        {
          CFIndex Count = CFArrayGetCount(v9);
          if (Count >= 1)
          {
            for (CFIndex i = 0; i != Count; ++i)
            {
              ValueAtIndex = (int *)CFArrayGetValueAtIndex(v9, i);
              uint64_t v14 = ValueAtIndex;
              if (ValueAtIndex)
              {
                CFTypeID v15 = CFGetTypeID(ValueAtIndex);
                if (v15 == CFNumberGetTypeID())
                {
                  LODWORD(v47) = 0;
                  LODWORD(v29) = 0;
                  ctu::cf::assign((ctu::cf *)&v29, v14, v16);
                  LODWORD(v47) = v29;
                  sub_10078C71C(v6, (int *)&v47, &v47);
                }
              }
            }
          }
          uint64_t v45 = 0;
          long long v43 = 0u;
          long long v44 = 0u;
          long long v41 = 0u;
          long long v42 = 0u;
          long long v39 = 0u;
          long long v40 = 0u;
          long long v37 = 0u;
          long long v38 = 0u;
          long long v35 = 0u;
          long long v36 = 0u;
          *(_OWORD *)std::string __p = 0u;
          long long v34 = 0u;
          long long v31 = 0u;
          long long v32 = 0u;
          long long v29 = 0u;
          long long v30 = 0u;
          sub_10004DE24((uint64_t)&v29);
          sub_10004B96C(&v29, (uint64_t)"(", 1);
          unsigned int v17 = *v6;
          if (*v6 != (uint64_t *)v3)
          {
            char v18 = 1;
            do
            {
              if ((v18 & 1) == 0) {
                sub_10004B96C(&v29, (uint64_t)", ", 2);
              }
              std::ostream::operator<<();
              uint64_t v19 = (uint64_t *)v17[1];
              if (v19)
              {
                do
                {
                  uint64_t v20 = v19;
                  uint64_t v19 = (uint64_t *)*v19;
                }
                while (v19);
              }
              else
              {
                do
                {
                  uint64_t v20 = (uint64_t *)v17[2];
                  BOOL v21 = *v20 == (void)v17;
                  unsigned int v17 = v20;
                }
                while (!v21);
              }
              char v18 = 0;
              unsigned int v17 = v20;
            }
            while (v20 != (uint64_t *)v3);
          }
          sub_10004B96C(&v29, (uint64_t)")", 1);
          uint64_t v22 = a2[4];
          if (os_log_type_enabled(v22, OS_LOG_TYPE_DEFAULT))
          {
            long long v47 = 0uLL;
            uint64_t v48 = 0;
            ctu::cf::assign();
            uint64_t v50 = v48;
            *(_OWORD *)uint64_t v49 = v47;
            int v23 = SHIBYTE(v48);
            uint64_t v24 = (uint8_t *)v47;
            sub_10004BC98((uint64_t)&v29 + 8, &v47);
            __int16 v25 = v49;
            if (v23 < 0) {
              __int16 v25 = v24;
            }
            if (v48 >= 0) {
              uint64_t v26 = &v47;
            }
            else {
              uint64_t v26 = (long long *)v47;
            }
            *(_DWORD *)long long buf = 136315394;
            xpc_object_t v52 = v25;
            __int16 v53 = 2080;
            xpc_object_t v54 = v26;
            _os_log_impl((void *)&_mh_execute_header, v22, OS_LOG_TYPE_DEFAULT, "#I got %s value as %s.", buf, 0x16u);
            if (SHIBYTE(v48) < 0) {
              operator delete((void *)v47);
            }
            if (SHIBYTE(v50) < 0) {
              operator delete(*(void **)v49);
            }
          }
          if (SHIBYTE(v34) < 0) {
            operator delete(__p[1]);
          }
          std::streambuf::~streambuf();
          std::ostream::~ostream();
          std::ios::~ios();
          return sub_100057D78((const void **)&v46);
        }
      }
      uint64_t v27 = a2[4];
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        long long v29 = 0uLL;
        *(void *)&long long v30 = 0;
        ctu::cf::assign();
        long long v47 = 0uLL;
        uint64_t v48 = 0;
        *(_DWORD *)uint64_t v49 = 136315138;
        *(void *)&v49[4] = &v47;
        uint64_t v28 = "#I no %s key in iWLanSettingDict";
        goto LABEL_41;
      }
    }
    else
    {
      uint64_t v27 = a2[4];
      if (os_log_type_enabled(v27, OS_LOG_TYPE_DEFAULT))
      {
        long long v29 = 0uLL;
        *(void *)&long long v30 = 0;
        ctu::cf::assign();
        long long v47 = 0uLL;
        uint64_t v48 = 0;
        *(_DWORD *)uint64_t v49 = 136315138;
        *(void *)&v49[4] = &v47;
        uint64_t v28 = "#I no iWLanSettingDict for %s key";
LABEL_41:
        _os_log_impl((void *)&_mh_execute_header, v27, OS_LOG_TYPE_DEFAULT, v28, v49, 0xCu);
        if (SHIBYTE(v48) < 0) {
          operator delete((void *)v47);
        }
      }
    }
    return sub_100057D78((const void **)&v46);
  }
  return result;
}

void sub_100E22B38(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, void *__p, uint64_t a10, int a11, __int16 a12, char a13, char a14)
{
  if (v16 < 0) {
    operator delete(v15);
  }
  sub_1000C937C((uint64_t)&__p);
  sub_100057D78((const void **)(v17 - 200));
  sub_1000346F8(v14, *(void **)(v14 + 8));
  _Unwind_Resume(a1);
}

void sub_100E22BC8(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  *(void *)a3 = 0;
  *(void *)(a3 + 8) = 0;
  *(void *)(a3 + 16) = 0;
  sub_100E22620((const void **)a3, a1, @"FatalActivationErrors");
  if (!*(void *)(a3 + 16))
  {
    CFTypeID v6 = a1[4];
    if (os_log_type_enabled(v6, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, OS_LOG_TYPE_DEFAULT, "#I got empty list for FatalActivationErrors, use NON_3GPP_ACCESS_TO_EPC_NOT_ALLOWED and PLMN_NOT_ALLOWED by default", (uint8_t *)&__p, 2u);
    }
    __p.__r_.__value_.__r.__words[0] = 0x2B0300002328;
    sub_100E24030((uint64_t **)a3, (int *)&__p, (int *)&__p.__r_.__value_.__r.__words[1]);
    if ((a2 & 1) == 0)
    {
      LODWORD(__p.__r_.__value_.__l.__data_) = 80005;
      sub_10078C71C((uint64_t **)a3, (int *)&__p, &__p);
      LODWORD(__p.__r_.__value_.__l.__data_) = 14;
      sub_10078C71C((uint64_t **)a3, (int *)&__p, &__p);
      LODWORD(__p.__r_.__value_.__l.__data_) = 24;
      sub_10078C71C((uint64_t **)a3, (int *)&__p, &__p);
    }
  }
  CFTypeID v7 = a1[4];
  if (os_log_type_enabled(v7, OS_LOG_TYPE_DEFAULT))
  {
    sub_100E079FC(*(void *)a3, (void *)(a3 + 8), ",", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    uint64_t v11 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v7, OS_LOG_TYPE_DEFAULT, "#I NotAllowedErrorCodes: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100E22D80(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

void sub_100E22DA8(void *a1@<X0>, uint64_t a2@<X8>)
{
  *(void *)a2 = 0;
  *(void *)(a2 + 8) = 0;
  *(void *)(a2 + 16) = 0;
  sub_100E22620((const void **)a2, a1, @"ActivationForceResetErrors");
  if (!*(void *)(a2 + 16))
  {
    CFBooleanRef v4 = a1[4];
    if (os_log_type_enabled(v4, OS_LOG_TYPE_DEFAULT))
    {
      LOWORD(__p.__r_.__value_.__l.__data_) = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, OS_LOG_TYPE_DEFAULT, "#I got empty list for ActivationForceResetErrors, use INTERNAL_ADDRESS_FAILURE by default", (uint8_t *)&__p, 2u);
    }
    LODWORD(__p.__r_.__value_.__l.__data_) = 36;
    sub_100E24030((uint64_t **)a2, (int *)&__p, (int *)__p.__r_.__value_.__r.__words + 1);
  }
  CFDictionaryRef v5 = a1[4];
  if (os_log_type_enabled(v5, OS_LOG_TYPE_DEFAULT))
  {
    sub_100E079FC(*(void *)a2, (void *)(a2 + 8), ",", &__p);
    if ((__p.__r_.__value_.__r.__words[2] & 0x8000000000000000) == 0) {
      p_p = &__p;
    }
    else {
      p_p = (std::string *)__p.__r_.__value_.__r.__words[0];
    }
    *(_DWORD *)long long buf = 136315138;
    CFArrayRef v9 = p_p;
    _os_log_impl((void *)&_mh_execute_header, v5, OS_LOG_TYPE_DEFAULT, "#I ForceResetErrorCodes: %s", buf, 0xCu);
    if (SHIBYTE(__p.__r_.__value_.__r.__words[2]) < 0) {
      operator delete(__p.__r_.__value_.__l.__data_);
    }
  }
}

void sub_100E22F08(_Unwind_Exception *a1)
{
  sub_1000346F8(v1, *(void **)(v1 + 8));
  _Unwind_Resume(a1);
}

uint64_t sub_100E22F24(uint64_t a1, uint64_t a2)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    CFBooleanRef v3 = sub_100080778;
  }
  else {
    CFBooleanRef v3 = 0;
  }
  if (v3)
  {
    CFArrayRef Value = (unsigned int *)CFDictionaryGetValue(theDict, @"5wiServiceMask");
    CFDictionaryRef v5 = Value;
    if (Value)
    {
      CFTypeID v6 = CFGetTypeID(Value);
      if (v6 == CFNumberGetTypeID())
      {
        unsigned int v10 = a2;
        ctu::cf::assign((ctu::cf *)&v10, v5, v7);
        a2 = v10;
      }
    }
  }
  sub_100057D78((const void **)&theDict);
  return a2;
}

void sub_100E22FF0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_100E23004(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2)
  {
    CFArrayRef v9 = a1[4];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unsigned int v10 = "#I no iWLanSettingDict for IPSecMTU key";
      goto LABEL_13;
    }
LABEL_14:
    uint64_t v7 = 50000;
    goto LABEL_15;
  }
  CFArrayRef Value = (int *)CFDictionaryGetValue(theDict, @"IPSecMTU");
  CFBooleanRef v4 = Value;
  if (!Value || (CFTypeID v5 = CFGetTypeID(Value), v5 != CFNumberGetTypeID()))
  {
    CFArrayRef v9 = a1[4];
    if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      unsigned int v10 = "#I no IPSecMTU key in iWLanSettingDict";
LABEL_13:
      _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, v10, buf, 2u);
      goto LABEL_14;
    }
    goto LABEL_14;
  }
  *(_DWORD *)long long buf = 50000;
  ctu::cf::assign((ctu::cf *)buf, v4, v6);
  uint64_t v7 = *(unsigned int *)buf;
  uint64_t v8 = a1[4];
  if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
  {
    *(_DWORD *)long long buf = 67109120;
    int v14 = v7;
    _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I got IPSecMTU value as %d.", buf, 8u);
  }
LABEL_15:
  sub_100057D78((const void **)&theDict);
  return v7;
}

void sub_100E231B8(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

BOOL sub_100E231D4(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (!v2)
  {
    uint64_t v11 = a1[4];
    BOOL v8 = 0;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v12 = "#I no iWLanSettingDict for WiFiCallingControlsAlliWLanServices key";
    goto LABEL_13;
  }
  CFArrayRef Value = (BOOL *)CFDictionaryGetValue(theDict, @"WiFiCallingControlsAlliWLanServices");
  CFBooleanRef v4 = Value;
  if (!Value || (CFTypeID v5 = CFGetTypeID(Value), v5 != CFBooleanGetTypeID()))
  {
    uint64_t v11 = a1[4];
    BOOL v8 = 0;
    if (!os_log_type_enabled(v11, OS_LOG_TYPE_DEFAULT)) {
      goto LABEL_14;
    }
    *(_WORD *)long long buf = 0;
    uint64_t v12 = "#I no WiFiCallingControlsAlliWLanServices key in iWLanSettingDict";
LABEL_13:
    _os_log_impl((void *)&_mh_execute_header, v11, OS_LOG_TYPE_DEFAULT, v12, buf, 2u);
    BOOL v8 = 0;
    goto LABEL_14;
  }
  buf[0] = 0;
  ctu::cf::assign((ctu::cf *)buf, v4, v6);
  int v7 = buf[0];
  BOOL v8 = buf[0] != 0;
  CFArrayRef v9 = a1[4];
  if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v10 = asStringBool(v7 != 0);
    *(_DWORD *)long long buf = 136315138;
    uint64_t v16 = v10;
    _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I got WiFiCallingControlsAlliWLanServices value as %s.", buf, 0xCu);
  }
LABEL_14:
  sub_100057D78((const void **)&theDict);
  return v8;
}

void sub_100E233A0(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

BOOL sub_100E233C0(uint64_t a1)
{
  CFTypeRef cf = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(__stack_chk_guard, *(Registry **)(a1 + 40));
  CFBooleanRef v3 = ServiceMap;
  if (v4 < 0)
  {
    CFTypeID v5 = (unsigned __int8 *)(v4 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v6 = 5381;
    do
    {
      uint64_t v4 = v6;
      unsigned int v7 = *v5++;
      uint64_t v6 = (33 * v6) ^ v7;
    }
    while (v7);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v4;
  BOOL v8 = sub_10004D37C(&v3[1].__m_.__sig, (unint64_t *)buf);
  if (v8)
  {
    uint64_t v10 = v8[3];
    CFArrayRef v9 = (std::__shared_weak_count *)v8[4];
    if (v9)
    {
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v3);
      atomic_fetch_add_explicit(&v9->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v9);
      char v11 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v10 = 0;
  }
  std::mutex::unlock(v3);
  CFArrayRef v9 = 0;
  char v11 = 1;
LABEL_9:
  uint64_t v12 = (*(uint64_t (**)(uint64_t))(*(void *)a1 + 32))(a1);
  (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t, uint64_t, const __CFString *, const CFBooleanRef, void))(*(void *)v10 + 96))(&cf, v10, v12, 2, @"AllowInboundRoamingHandover", kCFBooleanTrue, 0);
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v9);
  }
  uint64_t v13 = (BOOL *)cf;
  buf[0] = 1;
  if (!cf
    || (CFTypeID v14 = CFGetTypeID(cf), v14 != CFBooleanGetTypeID())
    || (ctu::cf::assign((ctu::cf *)buf, v13, v15), buf[0]))
  {
    sub_1000577C4(&cf);
    CFTypeRef cf = 0;
    (*(void (**)(CFTypeRef *__return_ptr, uint64_t, uint64_t))(*(void *)a1 + 40))(&cf, a1, 1);
    if (cf) {
      uint64_t v16 = sub_100080778;
    }
    else {
      uint64_t v16 = 0;
    }
    if (v16)
    {
      CFArrayRef Value = (BOOL *)CFDictionaryGetValue((CFDictionaryRef)cf, @"AllowRoamingHandover");
      char v18 = Value;
      if (Value)
      {
        CFTypeID v19 = CFGetTypeID(Value);
        if (v19 == CFBooleanGetTypeID())
        {
          buf[0] = 0;
          ctu::cf::assign((ctu::cf *)buf, v18, v20);
          int v21 = buf[0];
          BOOL v22 = buf[0] != 0;
          int v23 = *(NSObject **)(a1 + 32);
          if (os_log_type_enabled(v23, OS_LOG_TYPE_DEFAULT))
          {
            uint64_t v24 = asStringBool(v21 != 0);
            *(_DWORD *)long long buf = 136315138;
            *(void *)&uint8_t buf[4] = v24;
            _os_log_impl((void *)&_mh_execute_header, v23, OS_LOG_TYPE_DEFAULT, "#I got AllowRoamingHandover value as %s.", buf, 0xCu);
          }
          goto LABEL_27;
        }
      }
      __int16 v25 = *(NSObject **)(a1 + 32);
      BOOL v22 = 0;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v26 = "#I no AllowRoamingHandover key in iWLanSettingDict";
LABEL_26:
        _os_log_impl((void *)&_mh_execute_header, v25, OS_LOG_TYPE_DEFAULT, v26, buf, 2u);
        BOOL v22 = 0;
      }
    }
    else
    {
      __int16 v25 = *(NSObject **)(a1 + 32);
      BOOL v22 = 0;
      if (os_log_type_enabled(v25, OS_LOG_TYPE_DEFAULT))
      {
        *(_WORD *)long long buf = 0;
        uint64_t v26 = "#I no iWLanSettingDict for AllowRoamingHandover key";
        goto LABEL_26;
      }
    }
LABEL_27:
    sub_100057D78(&cf);
    return v22;
  }
  uint64_t v28 = *(NSObject **)(a1 + 32);
  if (os_log_type_enabled(v28, OS_LOG_TYPE_DEFAULT))
  {
    uint64_t v29 = asStringBool(0);
    *(_DWORD *)long long buf = 136315138;
    *(void *)&uint8_t buf[4] = v29;
    _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I got AllowInboundRoamingHandover value as %s.", buf, 0xCu);
  }
  sub_1000577C4(&cf);
  return 0;
}

void sub_100E23758(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_1000577C4((const void **)va);
  _Unwind_Resume(a1);
}

uint64_t sub_100E237B0(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v2 = sub_100080778;
  }
  else {
    uint64_t v2 = 0;
  }
  if (v2
    && (CFArrayRef Value = (void *)CFDictionaryGetValue(theDict, @"WifiCallingDPDKeepAliveTimeBetweenWakeups"),
        (uint64_t v4 = (unsigned int *)Value) != 0))
  {
    CFTypeID v5 = CFGetTypeID(Value);
    unsigned int v7 = 60;
    if (v5 == CFNumberGetTypeID())
    {
      *(_DWORD *)long long buf = 60;
      ctu::cf::assign((ctu::cf *)buf, v4, v6);
      unsigned int v7 = *(_DWORD *)buf;
      BOOL v8 = a1[4];
      if (os_log_type_enabled(v8, OS_LOG_TYPE_DEFAULT))
      {
        *(_DWORD *)long long buf = 67109120;
        unsigned int v12 = v7;
        _os_log_impl((void *)&_mh_execute_header, v8, OS_LOG_TYPE_DEFAULT, "#I Got WifiCallingDPDKeepAliveTimeBetweenWakeups of %du seconds", buf, 8u);
      }
    }
  }
  else
  {
    unsigned int v7 = 60;
  }
  sub_100057D78((const void **)&theDict);
  return 1000 * v7;
}

void sub_100E23900(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, char a10)
{
}

uint64_t sub_100E2391C(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v1 = sub_100080778;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1
    && (CFArrayRef Value = (void *)CFDictionaryGetValue(theDict, @"PCKeepAliveRetryTimeoutMilliSeconds"),
        (CFBooleanRef v3 = (unsigned int *)Value) != 0))
  {
    CFTypeID v4 = CFGetTypeID(Value);
    uint64_t v6 = 5000;
    if (v4 == CFNumberGetTypeID())
    {
      unsigned int v9 = 5000;
      ctu::cf::assign((ctu::cf *)&v9, v3, v5);
      uint64_t v6 = v9;
    }
  }
  else
  {
    uint64_t v6 = 5000;
  }
  sub_100057D78((const void **)&theDict);
  return v6;
}

void sub_100E239F0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

uint64_t sub_100E23A04(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v1 = sub_100080778;
  }
  else {
    uint64_t v1 = 0;
  }
  if (v1
    && (CFArrayRef Value = (void *)CFDictionaryGetValue(theDict, @"PCKeepAliveMaxRetries"),
        (CFBooleanRef v3 = (unsigned int *)Value) != 0))
  {
    CFTypeID v4 = CFGetTypeID(Value);
    uint64_t v6 = 4;
    if (v4 == CFNumberGetTypeID())
    {
      unsigned int v9 = 4;
      ctu::cf::assign((ctu::cf *)&v9, v3, v5);
      uint64_t v6 = v9;
    }
  }
  else
  {
    uint64_t v6 = 4;
  }
  sub_100057D78((const void **)&theDict);
  return v6;
}

void sub_100E23AD8(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

double sub_100E23AEC(uint64_t a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*(void *)a1 + 40))(&theDict);
  if (theDict) {
    uint64_t v1 = sub_100080778;
  }
  else {
    uint64_t v1 = 0;
  }
  double v2 = 3600.0;
  if (v1)
  {
    CFArrayRef Value = (double *)CFDictionaryGetValue(theDict, @"PCKeepAliveMaxInterval");
    CFTypeID v4 = Value;
    if (Value)
    {
      CFTypeID v5 = CFGetTypeID(Value);
      if (v5 == CFNumberGetTypeID())
      {
        uint64_t v9 = 0x40AC200000000000;
        ctu::cf::assign((ctu::cf *)&v9, v4, v6);
        double v2 = *(double *)&v9;
      }
    }
  }
  sub_100057D78((const void **)&theDict);
  return v2;
}

void sub_100E23BC4(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
}

BOOL sub_100E23BD8(void *a1)
{
  CFDictionaryRef theDict = 0;
  (*(void (**)(CFDictionaryRef *__return_ptr))(*a1 + 40))(&theDict);
  if (theDict) {
    double v2 = sub_100080778;
  }
  else {
    double v2 = 0;
  }
  if (v2
    && (Value = (void *)CFDictionaryGetValue(theDict, kWifiCallingAllowedInRoamingKey), (CFTypeID v4 = (BOOL *)Value) != 0))
  {
    CFTypeID v5 = CFGetTypeID(Value);
    BOOL v7 = 1;
    if (v5 == CFBooleanGetTypeID())
    {
      buf[0] = 1;
      ctu::cf::assign((ctu::cf *)buf, v4, v6);
      int v8 = buf[0];
      BOOL v7 = buf[0] != 0;
      uint64_t v9 = a1[4];
      if (os_log_type_enabled(v9, OS_LOG_TYPE_DEFAULT))
      {
        uint64_t v10 = asStringBool(v8 != 0);
        *(_DWORD *)long long buf = 136315138;
        uint64_t v14 = v10;
        _os_log_impl((void *)&_mh_execute_header, v9, OS_LOG_TYPE_DEFAULT, "#I got WifiCallingAllowedInRoamingKey value as %s.", buf, 0xCu);
      }
    }
  }
  else
  {
    BOOL v7 = 1;
  }
  sub_100057D78((const void **)&theDict);
  return v7;
}

void sub_100E23D3C(_Unwind_Exception *a1, uint64_t a2, ...)
{
  va_start(va, a2);
  sub_100057D78((const void **)va);
  _Unwind_Resume(a1);
}

void sub_100E23D60(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E23DE0(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E23E1C(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E23E54(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100E23E84(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

void sub_100E23EC8(void *a1, uint64_t a2)
{
  *a1 = a2;
  operator new();
}

void sub_100E23F48(_Unwind_Exception *exception_object)
{
  if (v1) {
    (*(void (**)(uint64_t))(*(void *)v1 + 8))(v1);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E23F84(std::__shared_weak_count *a1)
{
  std::__shared_weak_count::~__shared_weak_count(a1);

  operator delete();
}

uint64_t sub_100E23FBC(uint64_t a1)
{
  uint64_t result = *(void *)(a1 + 24);
  if (result) {
    return (*(uint64_t (**)(void))(*(void *)result + 8))();
  }
  return result;
}

uint64_t sub_100E23FEC(uint64_t a1, uint64_t a2)
{
  {
    return a1 + 24;
  }
  else
  {
    return 0;
  }
}

uint64_t **sub_100E24030(uint64_t **result, int *a2, int *a3)
{
  CFTypeID v5 = result;
  if (result[2])
  {
    CFBooleanRef v6 = *result;
    int v8 = result + 1;
    BOOL v7 = result[1];
    *uint64_t result = (uint64_t *)(result + 1);
    void v7[2] = 0;
    result[1] = 0;
    result[2] = 0;
    if (v6[1]) {
      uint64_t v9 = v6[1];
    }
    else {
      uint64_t v9 = (uint64_t)v6;
    }
    char v18 = result;
    CFTypeID v19 = (void *)v9;
    uint64_t v20 = v9;
    if (v9)
    {
      uint64_t v10 = sub_1000EA590(v9);
      CFTypeID v19 = v10;
      if (a2 != a3)
      {
        uint64_t v11 = (uint64_t)v10;
        while (1)
        {
          int v12 = *a2;
          uint64_t v13 = *v8;
          uint64_t v14 = v5 + 1;
          CFBooleanRef v15 = v5 + 1;
          if (*v8)
          {
            do
            {
              while (1)
              {
                CFBooleanRef v15 = (uint64_t **)v13;
                int v16 = *((_DWORD *)v13 + 7);
                if (v16 <= v12) {
                  break;
                }
                uint64_t v13 = *v15;
                uint64_t v14 = v15;
                if (!*v15) {
                  goto LABEL_16;
                }
              }
              if (v16 >= v12)
              {
                uint64_t v17 = (void *)v11;
                goto LABEL_18;
              }
              uint64_t v13 = v15[1];
            }
            while (v13);
            uint64_t v14 = v15 + 1;
          }
LABEL_16:
          *(_DWORD *)(v9 + 28) = v12;
          sub_100046C38(v5, (uint64_t)v15, v14, (uint64_t *)v9);
          uint64_t v20 = v11;
          if (!v11) {
            break;
          }
          uint64_t v17 = sub_1000EA590(v11);
          CFTypeID v19 = v17;
          uint64_t v9 = v11;
LABEL_18:
          ++a2;
          uint64_t v11 = (uint64_t)v17;
          if (a2 == a3) {
            goto LABEL_21;
          }
        }
        ++a2;
      }
    }
LABEL_21:
    uint64_t result = (uint64_t **)sub_1001A09B4((uint64_t)&v18);
  }
  while (a2 != a3)
  {
    uint64_t result = sub_10078C71C(v5, a2, a2);
    ++a2;
  }
  return result;
}

uint64_t *sub_100E2417C(uint64_t a1)
{
  sub_100C62700(a1, "kSettingsModelGetProperty", (unint64_t)sub_100E24474, 3u);
  sub_100C62700(a1, "kSettingsModelGetPhoneNumber", (unint64_t)sub_100035518, 5u);
  sub_100C62700(a1, "kSettingsModelGetCompanionPhoneNumber", (unint64_t)sub_100E24F08, 5u);
  sub_100C62630(a1, "kSettingsModelSetProperty", (unint64_t)sub_100E250D0, 3u);
  sub_100C62700(a1, "kSettingsModelEraseCommCentersPreferences", (unint64_t)sub_100E2624C, 0x13u);
  sub_100C62700(a1, "kSettingsModelEraseBasebandSettings", (unint64_t)sub_100E2650C, 0x13u);
  sub_100C62700(a1, "kSettingsModelEraseAllUserProfiles", (unint64_t)sub_100E26E38, 0x13u);
  sub_100C62700(a1, "kSettingsModelEraseNetworkSettings", (unint64_t)sub_100E26FD8, 0x13u);
  sub_100C62630(a1, "kSettingsModelFetchCallForwardingValue", (unint64_t)sub_100E281EC, 3u);
  sub_100C62630(a1, "kSettingsModelFetchCallBarringValue", (unint64_t)sub_100E2848C, 3u);
  sub_100C62700(a1, "kSettingsModelPreferencesSetValue", (unint64_t)sub_100E2874C, 0x12u);
  sub_100C62700(a1, "kSettingsModelPreferencesSetNoBackupValue", (unint64_t)sub_100E289D4, 0x12u);
  sub_100C62700(a1, "kSettingsModelPreferencesCopyValue", (unint64_t)sub_100E28AC4, 0x12u);
  sub_100C62700(a1, "kSettingsModelPreferencesCopyNoBackupValue", (unint64_t)sub_100E29390, 0x12u);
  sub_100C62630(a1, "kSettingsModelFetchCallWaitingValue", (unint64_t)sub_100E29448, 3u);
  sub_100C62630(a1, "kSettingsModelFetchSimLockValue", (unint64_t)sub_100E29608, 3u);
  sub_100C62630(a1, "kSettingsModelFetchLinePresentationValue", (unint64_t)sub_100E29778, 3u);
  sub_100C62630(a1, "kSettingsModelFetchConnectedLineIdRestrictionValue", (unint64_t)sub_100E29938, 3u);
  sub_100C62630(a1, "kSettingsModelFetchCallingLineIdRestrictionValue", (unint64_t)sub_100E29AAC, 3u);

  return sub_100C62630(a1, "kSettingsModelFetchServiceCenterAddressValue", (unint64_t)sub_100E29C20, 3u);
}

void sub_100E24474(Registry **a1@<X0>, xpc_object_t *a2@<X3>, void *a3@<X4>, uint64_t *a4@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a4, *a1);
  int v8 = ServiceMap;
  if (v9 < 0)
  {
    uint64_t v10 = (unsigned __int8 *)(v9 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v11 = 5381;
    do
    {
      uint64_t v9 = v11;
      unsigned int v12 = *v10++;
      uint64_t v11 = (33 * v11) ^ v12;
    }
    while (v12);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v9;
  uint64_t v13 = sub_10004D37C(&v8[1].__m_.__sig, (unint64_t *)buf);
  if (v13)
  {
    uint64_t v15 = v13[3];
    uint64_t v14 = (std::__shared_weak_count *)v13[4];
    if (v14)
    {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v8);
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v14);
      char v17 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v15 = 0;
  }
  std::mutex::unlock(v8);
  uint64_t v14 = 0;
  char v17 = 1;
LABEL_9:
  char v18 = (std::mutex *)Registry::getServiceMap(v16, *a1);
  CFTypeID v19 = v18;
  if (v20 < 0)
  {
    int v21 = (unsigned __int8 *)(v20 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v22 = 5381;
    do
    {
      uint64_t v20 = v22;
      unsigned int v23 = *v21++;
      uint64_t v22 = (33 * v22) ^ v23;
    }
    while (v23);
  }
  std::mutex::lock(v18);
  *(void *)long long buf = v20;
  uint64_t v24 = sub_10004D37C(&v19[1].__m_.__sig, (unint64_t *)buf);
  if (!v24)
  {
    uint64_t v26 = 0;
    goto LABEL_16;
  }
  uint64_t v26 = v24[3];
  __int16 v25 = (std::__shared_weak_count *)v24[4];
  if (!v25)
  {
LABEL_16:
    std::mutex::unlock(v19);
    __int16 v25 = 0;
    char v44 = 1;
    goto LABEL_17;
  }
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  std::mutex::unlock(v19);
  atomic_fetch_add_explicit(&v25->__shared_owners_, 1uLL, memory_order_relaxed);
  sub_10004D2C8(v25);
  char v44 = 0;
LABEL_17:
  if (xpc_dictionary_get_value(*a2, "kSettingsModelCopySystemCapabilities") && v26)
  {
    uint64_t v67 = 0;
    (*(void (**)(const UInt8 **__return_ptr, uint64_t, uint64_t))(*(void *)v26 + 64))(&v67, v26, 1);
    if (v67) {
      uint64_t v27 = sub_100080778;
    }
    else {
      uint64_t v27 = 0;
    }
    if (v27)
    {
      xpc_object_t v78 = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject();
      if (!v78) {
        xpc_object_t v78 = xpc_null_create();
      }
      *(void *)long long buf = *a3;
      *(void *)&uint8_t buf[8] = "kSettingsModelSystemCapabilitiesDict";
      sub_100035E70((uint64_t)buf, &v78, &v79);
      xpc_release(v79);
      xpc_object_t v79 = 0;
      xpc_release(v78);
      xpc_object_t v78 = 0;
    }
    sub_100057D78((const void **)&v67);
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelCopyBasebandSettings"))
  {
    sub_100E29D94();
    uint64_t v28 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSettingsCopyBasebandSettings", buf, 2u);
    }
    if (v15)
    {
      uint64_t v67 = 0;
      LODWORD(v61) = 0;
      (*(void (**)(uint64_t, const UInt8 **, uint64_t *))(*(void *)v15 + 384))(v15, &v67, &v61);
      if (v67)
      {
        CFDataRef v29 = CFDataCreateWithBytesNoCopy(kCFAllocatorDefault, v67, (int)v61, kCFAllocatorNull);
        if (v29)
        {
          CFPropertyListRef v30 = CFPropertyListCreateWithData(kCFAllocatorDefault, v29, 0, 0, 0);
          if (v30)
          {
            xpc_object_t v76 = (xpc_object_t)_CFXPCCreateXPCObjectFromCFObject();
            if (!v76) {
              xpc_object_t v76 = xpc_null_create();
            }
            *(void *)long long buf = *a3;
            *(void *)&uint8_t buf[8] = "kSettingsModelBasebandSettingsDict";
            sub_100035E70((uint64_t)buf, &v76, &v77);
            xpc_release(v77);
            xpc_object_t v77 = 0;
            xpc_release(v76);
            xpc_object_t v76 = 0;
            CFRelease(v30);
          }
          CFRelease(v29);
        }
        vm_deallocate(mach_task_self_, (vm_address_t)v67, (int)v61);
      }
      else
      {
        *(void *)long long buf = *a3;
        *(void *)&uint8_t buf[8] = "kSettingsModelBasebandSettingsDict";
        sub_10021ACC8((uint64_t)buf, &v75);
        xpc_release(v75);
        xpc_object_t v75 = 0;
      }
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelIsUnconditionalCallForwardingActive"))
  {
    sub_100E29D94();
    long long v31 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v31, OS_LOG_TYPE_DEFAULT, "#I ## server_CTIsUnconditionalCallForwardingActive", buf, 2u);
    }
    if (v15)
    {
      unsigned __int16 v32 = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)v15 + 104))(v15, 1);
      if (v32 >= 0x100u)
      {
        xpc_object_t v73 = xpc_BOOL_create(v32 != 0);
        if (!v73) {
          xpc_object_t v73 = xpc_null_create();
        }
        *(void *)long long buf = *a3;
        *(void *)&uint8_t buf[8] = "kSettingsModelActive";
        sub_100035E70((uint64_t)buf, &v73, &v74);
        xpc_release(v74);
        xpc_object_t v74 = 0;
        xpc_release(v73);
        xpc_object_t v73 = 0;
      }
      else
      {
        xpc_object_t v71 = xpc_int64_create(35);
        if (!v71) {
          xpc_object_t v71 = xpc_null_create();
        }
        *(void *)long long buf = *a3;
        *(void *)&uint8_t buf[8] = "kPosixError";
        sub_100035E70((uint64_t)buf, &v71, &v72);
        xpc_release(v72);
        xpc_object_t v72 = 0;
        xpc_release(v71);
        xpc_object_t v71 = 0;
      }
    }
    else
    {
      xpc_object_t v69 = xpc_BOOL_create(0);
      if (!v69) {
        xpc_object_t v69 = xpc_null_create();
      }
      *(void *)long long buf = *a3;
      *(void *)&uint8_t buf[8] = "kSettingsModelActive";
      sub_100035E70((uint64_t)buf, &v69, &v70);
      xpc_release(v70);
      xpc_object_t v70 = 0;
      xpc_release(v69);
      xpc_object_t v69 = 0;
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelGetVoiceMailInfo"))
  {
    sub_100E29D94();
    uint64_t v33 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I ## server_SettingsModelGetVoiceMailInfo", buf, 2u);
    }
    *(void *)long long buf = 4096;
    if (IsTelephonyRunningExtended(buf))
    {
      uint64_t v67 = 0;
      uint64_t v68 = 0;
      sub_100224000(*a1, &v67);
      if (v67)
      {
        *(_OWORD *)long long buf = 0u;
        long long v66 = 0u;
        CallController::getVoicemailNumber((uint64_t)v67, 1, (uint64_t)buf);
        if ((SBYTE7(v66) & 0x80u) == 0) {
          long long v34 = buf;
        }
        else {
          long long v34 = *(uint8_t **)buf;
        }
        xpc_object_t v63 = xpc_string_create((const char *)v34);
        if (!v63) {
          xpc_object_t v63 = xpc_null_create();
        }
        uint64_t v61 = *a3;
        uint64_t v62 = "kSettingsModelNumber";
        sub_100035E70((uint64_t)&v61, &v63, &v64);
        xpc_release(v64);
        xpc_object_t v64 = 0;
        xpc_release(v63);
        xpc_object_t v63 = 0;
        xpc_object_t v59 = xpc_int64_create(SDWORD2(v66));
        if (!v59) {
          xpc_object_t v59 = xpc_null_create();
        }
        uint64_t v61 = *a3;
        uint64_t v62 = "kSettingsModelType";
        sub_100035E70((uint64_t)&v61, &v59, &object);
        xpc_release(object);
        xpc_object_t object = 0;
        xpc_release(v59);
        xpc_object_t v59 = 0;
        if (SBYTE7(v66) < 0) {
          operator delete(*(void **)buf);
        }
      }
      if (v68) {
        sub_10004D2C8(v68);
      }
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelGetEffectiveSimInfo"))
  {
    sub_100E29D94();
    long long v35 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, OS_LOG_TYPE_DEFAULT, "#I ## server_CTGetEffectiveSimInfo", buf, 2u);
    }
    xpc_object_t v57 = xpc_BOOL_create(0);
    if (!v57) {
      xpc_object_t v57 = xpc_null_create();
    }
    *(void *)long long buf = *a3;
    *(void *)&uint8_t buf[8] = "kSettingsModelValid";
    sub_100035E70((uint64_t)buf, &v57, &v58);
    xpc_release(v58);
    xpc_object_t v58 = 0;
    xpc_release(v57);
    xpc_object_t v57 = 0;
    if (qword_101B14190)
    {
      long long v36 = std::__shared_weak_count::lock((std::__shared_weak_count *)qword_101B14190);
      if (v36)
      {
        uint64_t v37 = DataPlanManagerBootstrap::sInstance;
        if (DataPlanManagerBootstrap::sInstance)
        {
          v53[0] = _NSConcreteStackBlock;
          v53[1] = 1174405120;
          uint64_t v53[2] = sub_100E2A05C;
          v53[3] = &unk_101A5F788;
          uint64_t v39 = *a3;
          long long v38 = (std::__shared_weak_count *)a3[1];
          v53[4] = &stru_101A5F760;
          v53[5] = v39;
          xpc_object_t v54 = v38;
          if (v38) {
            atomic_fetch_add_explicit(&v38->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          uint64_t v55 = v15;
          char v56 = v14;
          if ((v17 & 1) == 0) {
            atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
          }
          (*(void (**)(uint64_t, void *))(*(void *)v37 + 24))(v37, v53);
          if (v56) {
            sub_10004D2C8(v56);
          }
          long long v40 = v54;
          if (!v54)
          {
LABEL_102:
            sub_10004D2C8(v36);
            goto LABEL_103;
          }
          goto LABEL_100;
        }
      }
    }
    else
    {
      long long v36 = 0;
    }
    long long v40 = (std::__shared_weak_count *)a3[1];
    v52[0] = *a3;
    v52[1] = v40;
    if (v40) {
      atomic_fetch_add_explicit(&v40->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    v51[0] = v15;
    v51[1] = v14;
    if ((v17 & 1) == 0) {
      atomic_fetch_add_explicit(&v14->__shared_owners_, 1uLL, memory_order_relaxed);
    }
    CSIPhoneNumber::CSIPhoneNumber(&v45);
    v80.var0.var0 = (dict *)v52;
    v80.var0.var1 = (__shared_weak_count *)v51;
    v81.var1 = (__shared_weak_count *)&v45;
    v81.var0 = 0;
    sub_100E29E30(v41, v80, v81, v42, v43);
    if (v50 < 0) {
      operator delete(__p);
    }
    if (v48 < 0) {
      operator delete(v47);
    }
    if (v46 < 0) {
      operator delete(*(void **)&v45.var2.__r_.var0);
    }
    if (*((char *)&v45.var2.__r_.__value_.var0.var1 + 23) < 0)
    {
      operator delete(v45.var2.__r_.__value_.var0.var1.__data_);
      if (v17)
      {
LABEL_99:
        if (!v40) {
          goto LABEL_101;
        }
        goto LABEL_100;
      }
    }
    else if (v17)
    {
      goto LABEL_99;
    }
    sub_10004D2C8(v14);
    if (!v40)
    {
LABEL_101:
      if (!v36) {
        goto LABEL_103;
      }
      goto LABEL_102;
    }
LABEL_100:
    sub_10004D2C8(v40);
    goto LABEL_101;
  }
LABEL_103:
  if ((v44 & 1) == 0) {
    sub_10004D2C8(v25);
  }
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v14);
  }
}

void sub_100E24DC0(_Unwind_Exception *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, int a10, char a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20,uint64_t a21,uint64_t a22,uint64_t a23,uint64_t a24,uint64_t a25,uint64_t a26,uint64_t a27,uint64_t a28,uint64_t a29,uint64_t a30,uint64_t a31,uint64_t a32,uint64_t a33,uint64_t a34,uint64_t a35,uint64_t a36,uint64_t a37,uint64_t a38,std::__shared_weak_count *a39,uint64_t a40,std::__shared_weak_count *a41)
{
  if (a41) {
    sub_10004D2C8(a41);
  }
  if (!a39 || (sub_10004D2C8(a39), v43)) {
    sub_10004D2C8(v43);
  }
  if ((a11 & 1) == 0) {
    sub_10004D2C8(v42);
  }
  if ((v44 & 1) == 0) {
    sub_10004D2C8(v41);
  }
  _Unwind_Resume(a1);
}

void sub_100E24F08(Registry **a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t *a5)
{
  xpc_object_t v22 = xpc_BOOL_create(0);
  if (!v22) {
    xpc_object_t v22 = xpc_null_create();
  }
  v21[0] = *a5;
  v21[1] = (unint64_t)"kSettingsModelValid";
  sub_100035E70((uint64_t)v21, &v22, &object);
  xpc_release(object);
  xpc_object_t object = 0;
  xpc_release(v22);
  xpc_object_t v22 = 0;
  ServiceMap = (std::mutex *)Registry::getServiceMap(v7, *a1);
  uint64_t v9 = ServiceMap;
  if ((v10 & 0x8000000000000000) != 0)
  {
    uint64_t v11 = (unsigned __int8 *)(v10 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v12 = 5381;
    do
    {
      unint64_t v10 = v12;
      unsigned int v13 = *v11++;
      uint64_t v12 = (33 * v12) ^ v13;
    }
    while (v13);
  }
  std::mutex::lock(ServiceMap);
  v21[0] = v10;
  uint64_t v14 = sub_10004D37C(&v9[1].__m_.__sig, v21);
  if (v14)
  {
    uint64_t v16 = v14[3];
    uint64_t v15 = (std::__shared_weak_count *)v14[4];
    if (v15)
    {
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v9);
      atomic_fetch_add_explicit(&v15->__shared_owners_, 1uLL, memory_order_relaxed);
      sub_10004D2C8(v15);
      char v17 = 0;
      if (!v16) {
        goto LABEL_16;
      }
      goto LABEL_12;
    }
  }
  else
  {
    uint64_t v16 = 0;
  }
  std::mutex::unlock(v9);
  uint64_t v15 = 0;
  char v17 = 1;
  if (!v16) {
    goto LABEL_16;
  }
LABEL_12:
  char v18 = (std::__shared_weak_count *)a5[1];
  unint64_t v19 = *a5;
  uint64_t v20 = v18;
  if (v18) {
    atomic_fetch_add_explicit(&v18->__shared_owners_, 1uLL, memory_order_relaxed);
  }
  (*(void (**)(uint64_t, unint64_t *))(*(void *)v16 + 320))(v16, &v19);
  if (v20) {
    sub_10004D2C8(v20);
  }
LABEL_16:
  if ((v17 & 1) == 0) {
    sub_10004D2C8(v15);
  }
}

void sub_100E2509C(_Unwind_Exception *exception_object, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, std::__shared_weak_count *a10)
{
  if (a10) {
    sub_10004D2C8(a10);
  }
  if ((v11 & 1) == 0) {
    sub_10004D2C8(v10);
  }
  _Unwind_Resume(exception_object);
}

void sub_100E250D0(Registry **a1@<X0>, xpc_object_t *a2@<X3>, uint64_t *a3@<X8>)
{
  ServiceMap = (std::mutex *)Registry::getServiceMap(a3, *a1);
  CFTypeID v5 = ServiceMap;
  if (v6 < 0)
  {
    BOOL v7 = (unsigned __int8 *)(v6 & 0x7FFFFFFFFFFFFFFFLL);
    uint64_t v8 = 5381;
    do
    {
      uint64_t v6 = v8;
      unsigned int v9 = *v7++;
      uint64_t v8 = (33 * v8) ^ v9;
    }
    while (v9);
  }
  std::mutex::lock(ServiceMap);
  *(void *)long long buf = v6;
  unint64_t v10 = sub_10004D37C(&v5[1].__m_.__sig, (unint64_t *)buf);
  if (v10)
  {
    uint64_t v11 = v10[3];
    uint64_t v12 = (std::__shared_weak_count *)v10[4];
    if (v12)
    {
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      std::mutex::unlock(v5);
      atomic_fetch_add_explicit(&v12->__shared_owners_, 1uLL, memory_order_relaxed);
      char v56 = v12;
      sub_10004D2C8(v12);
      char v57 = 0;
      goto LABEL_9;
    }
  }
  else
  {
    uint64_t v11 = 0;
  }
  std::mutex::unlock(v5);
  char v56 = 0;
  char v57 = 1;
LABEL_9:
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSetBasebandSettings"))
  {
    sub_100E29D94();
    unsigned int v13 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSettingsSetBasebandSettings", buf, 2u);
    }
    if (v11)
    {
      *(void *)long long buf = 0;
      xpc_dictionary_get_value(*a2, "kSettingsModelBasebandSettingsDict");
      error[0] = (CFErrorRef)_CFXPCCreateCFObjectFromXPCObject();
      sub_100084068(buf, (CFTypeRef *)error);
      error[0] = 0;
      CFDataRef Data = CFPropertyListCreateData(kCFAllocatorDefault, *(CFPropertyListRef *)buf, kCFPropertyListBinaryFormat_v1_0, 0, error);
      CFDataRef v15 = Data;
      if (Data)
      {
        BytePtr = CFDataGetBytePtr(Data);
        CFIndex Length = CFDataGetLength(v15);
        (*(void (**)(uint64_t, const UInt8 *, CFIndex))(*(void *)v11 + 392))(v11, BytePtr, Length);
        CFRelease(v15);
      }
      if (error[0]) {
        CFRelease(error[0]);
      }
      sub_100057D78((const void **)buf);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveCallForwardingValue"))
  {
    sub_100E29D94();
    char v18 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSaveCallForwardingValue", buf, 2u);
    }
    if (v11)
    {
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelReason";
      sub_100048BAC((uint64_t)buf, error);
      uint64_t v20 = xpc::dyn_cast_or_default((xpc *)error, 0, v19);
      xpc_release(error[0]);
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelClss";
      sub_100048BAC((uint64_t)buf, error);
      uint64_t v22 = xpc::dyn_cast_or_default((xpc *)error, 0, v21);
      xpc_release(error[0]);
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelEnabled";
      sub_100048BAC((uint64_t)buf, error);
      char v24 = xpc::dyn_cast_or_default((xpc *)error, 0, v23);
      xpc_release(error[0]);
      LOBYTE(v64) = v24;
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelSaveNumber";
      sub_100048BAC((uint64_t)buf, error);
      int v26 = xpc::dyn_cast_or_default((xpc *)error, 0, v25);
      xpc_release(error[0]);
      error[0] = 0;
      error[1] = 0;
      uint64_t v78 = 0;
      xpc_object_t v74 = a2;
      xpc_object_t v75 = (std::__shared_weak_count *)"kSettingsModelNumber";
      sub_100048BAC((uint64_t)&v74, &v76);
      memset(buf, 0, sizeof(buf));
      *(void *)&long long v66 = 0;
      xpc::dyn_cast_or_default();
      if (SBYTE7(v66) < 0) {
        operator delete(*(void **)buf);
      }
      xpc_release(v76);
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelCallFwdSaveTime";
      sub_100048BAC((uint64_t)buf, &v74);
      int v28 = xpc::dyn_cast_or_default((xpc *)&v74, 0, v27);
      xpc_release(v74);
      *(void *)long long buf = a2;
      *(void *)&uint8_t buf[8] = "kSettingsModelTime";
      sub_100048BAC((uint64_t)buf, &v74);
      char v30 = xpc::dyn_cast_or_default((xpc *)&v74, 0, v29);
      xpc_release(v74);
      LOBYTE(v74) = v30;
      uint64_t v73 = 0;
      long long v71 = 0u;
      long long v72 = 0u;
      *(_OWORD *)xpc_object_t v69 = 0u;
      *(_OWORD *)std::string __p = 0u;
      *(_OWORD *)uint64_t v67 = 0u;
      long long v68 = 0u;
      *(_OWORD *)long long buf = 0u;
      long long v66 = 0u;
      CSIPhoneNumber::CSIPhoneNumber();
      if (v26) {
        long long v31 = buf;
      }
      else {
        long long v31 = 0;
      }
      if (v28) {
        unsigned __int16 v32 = (void **)&v74;
      }
      else {
        unsigned __int16 v32 = 0;
      }
      (*(void (**)(uint64_t, uint64_t, const void **, uint8_t *, void **, uint64_t, uint64_t))(*(void *)v11 + 96))(v11, 1, &v64, v31, v32, v20, v22);
      if (SHIBYTE(v71) < 0) {
        operator delete(__p[1]);
      }
      if (SHIBYTE(__p[0]) < 0) {
        operator delete(v69[0]);
      }
      if (SBYTE7(v68) < 0) {
        operator delete(v67[0]);
      }
      if (SHIBYTE(v66) < 0) {
        operator delete(*(void **)&buf[8]);
      }
      if (SHIBYTE(v78) < 0) {
        operator delete(error[0]);
      }
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveCallBarringValue"))
  {
    sub_100E29D94();
    uint64_t v33 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v33, OS_LOG_TYPE_DEFAULT, "#I ## server_SaveCallBarringValue", buf, 2u);
    }
    LOBYTE(v64) = 0;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelEnabled";
    sub_100048BAC((uint64_t)buf, error);
    char v35 = xpc::dyn_cast_or_default((xpc *)error, 0, v34);
    xpc_release(error[0]);
    LOBYTE(v64) = v35;
    error[0] = 0;
    error[1] = 0;
    uint64_t v78 = 0;
    xpc_object_t v74 = a2;
    xpc_object_t v75 = (std::__shared_weak_count *)"kSettingsModelPin2";
    sub_100048BAC((uint64_t)&v74, &v76);
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v66 = 0;
    xpc::dyn_cast_or_default();
    if (SBYTE7(v66) < 0) {
      operator delete(*(void **)buf);
    }
    xpc_release(v76);
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelClss";
    sub_100048BAC((uint64_t)buf, &v74);
    uint64_t v37 = xpc::dyn_cast_or_default((xpc *)&v74, 0, v36);
    xpc_release(v74);
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelFacility";
    sub_100048BAC((uint64_t)buf, &v74);
    uint64_t v39 = xpc::dyn_cast_or_default((xpc *)&v74, 0, v38);
    xpc_release(v74);
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, const void **, CFErrorRef *, uint64_t, uint64_t))(*(void *)v11 + 144))(v11, 1, &v64, error, v39, v37);
    }
    if (SHIBYTE(v78) < 0) {
      operator delete(error[0]);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveCallWaitingValue"))
  {
    sub_100E29D94();
    long long v40 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v40, OS_LOG_TYPE_DEFAULT, "#I ## server_SaveCallWaitingValue", buf, 2u);
    }
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelClss";
    sub_100048BAC((uint64_t)buf, error);
    uint64_t v42 = xpc::dyn_cast_or_default((xpc *)error, 0, v41);
    xpc_release(error[0]);
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelEnabled";
    sub_100048BAC((uint64_t)buf, error);
    uint64_t v44 = xpc::dyn_cast_or_default((xpc *)error, 0, v43);
    xpc_release(error[0]);
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)v11 + 168))(v11, 1, v44, v42);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelChangePinPassword"))
  {
    sub_100E29D94();
    CSIPhoneNumber v45 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v45, OS_LOG_TYPE_DEFAULT, "#I ## server_CTChangePinPassword", buf, 2u);
    }
    xpc_object_t v76 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelOldPassword");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v76, (CFTypeRef *)buf);
    xpc_object_t v64 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelNewPassword");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v64, (CFTypeRef *)buf);
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v66 = 0;
    sub_100058DB0(buf, "");
    error[0] = 0;
    error[1] = 0;
    uint64_t v78 = 0;
    sub_100058DB0(error, "");
    ctu::cf::assign();
    ctu::cf::assign();
    xpc_object_t v74 = 0;
    xpc_object_t v75 = 0;
    sGetSubscriberSimInterface();
    char v46 = v74;
    if (v74)
    {
      if (SBYTE7(v66) < 0)
      {
        sub_10004FC84(__dst, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        *(_OWORD *)std::string __dst = *(_OWORD *)buf;
        uint64_t v63 = v66;
      }
      if (SHIBYTE(v78) < 0)
      {
        sub_10004FC84(v60, error[0], (unint64_t)error[1]);
      }
      else
      {
        *(_OWORD *)CFTypeID v60 = *(_OWORD *)error;
        uint64_t v61 = v78;
      }
      (*((void (**)(xpc_object_t *, uint64_t, void **, void **))*v46 + 15))(v46, 1, __dst, v60);
      if (SHIBYTE(v61) < 0) {
        operator delete(v60[0]);
      }
      if (SHIBYTE(v63) < 0) {
        operator delete(__dst[0]);
      }
    }
    if (v75) {
      sub_10004D2C8(v75);
    }
    if (SHIBYTE(v78) < 0) {
      operator delete(error[0]);
    }
    if (SBYTE7(v66) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000558F4(&v64);
    sub_1000558F4((const void **)&v76);
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelChangePin2Password"))
  {
    sub_100E29D94();
    long long v47 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v47, OS_LOG_TYPE_DEFAULT, "#I ## server_CTChangePin2Password", buf, 2u);
    }
    xpc_object_t v74 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelOldPassword");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v74, (CFTypeRef *)buf);
    xpc_object_t v76 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelNewPassword");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v76, (CFTypeRef *)buf);
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v66 = 0;
    sub_100058DB0(buf, "");
    error[0] = 0;
    error[1] = 0;
    uint64_t v78 = 0;
    sub_100058DB0(error, "");
    ctu::cf::assign();
    ctu::cf::assign();
    if (SHIBYTE(v78) < 0) {
      operator delete(error[0]);
    }
    if (SBYTE7(v66) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000558F4((const void **)&v76);
    sub_1000558F4((const void **)&v74);
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveSimLockValue"))
  {
    sub_100E29D94();
    char v48 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSaveSimLockValue", buf, 2u);
    }
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelEnabled";
    sub_100048BAC((uint64_t)buf, error);
    uint64_t v50 = xpc::dyn_cast_or_default((xpc *)error, 0, v49);
    xpc_release(error[0]);
    xpc_object_t v74 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelPin");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v74, (CFTypeRef *)buf);
    memset(buf, 0, sizeof(buf));
    *(void *)&long long v66 = 0;
    sub_100058DB0(buf, "");
    ctu::cf::assign();
    error[0] = 0;
    error[1] = 0;
    sGetSubscriberSimInterface();
    CFErrorRef v51 = error[0];
    if (error[0])
    {
      if (SBYTE7(v66) < 0)
      {
        sub_10004FC84(v58, *(void **)buf, *(unint64_t *)&buf[8]);
      }
      else
      {
        *(_OWORD *)xpc_object_t v58 = *(_OWORD *)buf;
        uint64_t v59 = v66;
      }
      (*(void (**)(CFErrorRef, uint64_t, uint64_t, void **))(*(void *)v51 + 96))(v51, 1, v50, v58);
      if (SHIBYTE(v59) < 0) {
        operator delete(v58[0]);
      }
    }
    if (error[1]) {
      sub_10004D2C8((std::__shared_weak_count *)error[1]);
    }
    if (SBYTE7(v66) < 0) {
      operator delete(*(void **)buf);
    }
    sub_1000558F4((const void **)&v74);
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveCallingLineIdRestrictionValue"))
  {
    sub_100E29D94();
    xpc_object_t v52 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSaveCallingLineIdRestrictionValue", buf, 2u);
    }
    LODWORD(v74) = 0;
    *(void *)long long buf = a2;
    *(void *)&uint8_t buf[8] = "kSettingsModelValue";
    sub_100048BAC((uint64_t)buf, error);
    int v54 = xpc::dyn_cast_or_default((xpc *)error, 0, v53);
    xpc_release(error[0]);
    LODWORD(v74) = v54;
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, xpc_object_t **))(*(void *)v11 + 224))(v11, 1, &v74);
    }
  }
  if (xpc_dictionary_get_value(*a2, "kSettingsModelSaveServiceCenterAddressValue"))
  {
    sub_100E29D94();
    uint64_t v55 = qword_101B12C30;
    if (os_log_type_enabled((os_log_t)qword_101B12C30, OS_LOG_TYPE_DEFAULT))
    {
      *(_WORD *)long long buf = 0;
      _os_log_impl((void *)&_mh_execute_header, v55, OS_LOG_TYPE_DEFAULT, "#I ## server_CTSaveServiceCenterAddressValue", buf, 2u);
    }
    xpc_object_t v74 = 0;
    xpc_dictionary_get_value(*a2, "kSettingsModelNumber");
    *(void *)long long buf = _CFXPCCreateCFObjectFromXPCObject();
    sub_100225AE0(&v74, (CFTypeRef *)buf);
    error[0] = 0;
    error[1] = 0;
    uint64_t v78 = 0;
    sub_100058DB0(error, "");
    ctu::cf::assign();
    uint64_t v73 = 0;
    long long v71 = 0u;
    long long v72 = 0u;
    *(_OWORD *)xpc_object_t v69 = 0u;
    *(_OWORD *)std::string __p = 0u;
    *(_OWORD *)uint64_t v67 = 0u;
    long long v68 = 0u;
    *(_OWORD *)long long buf = 0u;
    long long v66 = 0u;
    CSIPhoneNumber::CSIPhoneNumber();
    if (v11) {
      (*(void (**)(uint64_t, uint64_t, uint8_t *))(*(void *)v11 + 248))(v11, 1, buf);
    }
    if (SHIBYTE(v71) < 0) {
      operator delete(__p[1]);
    }
    if (SHIBYTE(__p[0]) < 0) {
      operator delete(v69[0]);
    }
    if (SBYTE7(v68) < 0) {
      operator delete(v67[0]);
    }
    if (SHIBYTE(v66) < 0) {
      operator delete(*(void **)&buf[8]);
    }
    if (SHIBYTE(v78) < 0) {
      operator delete(error[0]);
    }
    sub_1000558F4((const void **)&v74);
  }
  if ((v57 & 1) == 0) {
    sub_10004D2C8(v56);
  }
}

void sub_100E25E68(_Unwind_Exception *a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, std::__shared_weak_count *a9, int a10, char a11, void *a12, uint64_t a13, int a14, __int16 a15, char a16, char a17, uint64_t a18, void *a19, uint64_t a20,int a21,__int16 a22,char a23,char a24,uint64_t a25,void *a26,uint64_t a27,int a28,__int16 a29,char a30,char a31,char a32,void *__p,uint64_t a34,int a35,__int16 a36,char a37,char a38)
{
  long long v40 = *(std::__shared_weak_count **)(v38 - 104);
  if (v40) {
    sub_10004D2C8(v40);
  }
  if (a38 < 0) {
    operator delete(__p);
  }
  sub_1000558F4((const void **)(v38 - 136));
  if ((a11 & 1) == 0) {
    sub_10004D2C8(a9);
  }
  _Unwind_Resume(a1);
}